diff --git a/tmp/bed5f755-5f50-4f71-ae94-b507ae7304e1_buggy.java b/tmp/136c7aef-fcc5-4fe3-8bea-c0bee39b7c69_fixed.java
index c84c989..36670b8 100644
--- a/tmp/bed5f755-5f50-4f71-ae94-b507ae7304e1_buggy.java
+++ b/tmp/136c7aef-fcc5-4fe3-8bea-c0bee39b7c69_fixed.java
@@ -1,27 +1,37 @@
 private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
-
     buf.readUnsignedShortLE(); // length
 
     buf.skipBytes(3); // identification header
-        buf.readUnsignedIntLE(); // index
+    long index = buf.readUnsignedIntLE(); // index
 
     DeviceSession deviceSession = getDeviceSession(
             channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
-        buf.readUnsignedByte(); // session status
+    int sessionStatus = buf.readUnsignedByte(); // session status
     buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+    long dateTime = buf.readUnsignedIntLE(); // date and time
 
     buf.skipBytes(23); // coordinates block
 
     buf.skipBytes(3); // data tag header
     decodeMinimalDataSet(position, buf);
 
+    // Validate the date and time
+    if (dateTime > 0) {
+        DateBuilder dateBuilder = new DateBuilder()
+                .setDate((int) (dateTime / 1000000), (int) ((dateTime / 10000) % 100), (int) ((dateTime / 100000) % 100))
+                .setTime((int) (dateTime % 10000) / 100, (int) (dateTime % 100), 0);
+        position.setTime(dateBuilder.getDate());
+    } else {
+        // Use the current time if the date and time is not valid
+        position.setTime(new Date());
+    }
+
     return position;
 }
\ No newline at end of file
