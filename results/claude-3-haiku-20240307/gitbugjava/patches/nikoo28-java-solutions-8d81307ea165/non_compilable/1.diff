diff --git a/tmp/10563693-8350-4878-952a-05fe7b20ca51_buggy.java b/tmp/72d52c32-5ca0-4cdf-9777-f66bb5efee44_fixed.java
index 9739964..f4adcd4 100644
--- a/tmp/10563693-8350-4878-952a-05fe7b20ca51_buggy.java
+++ b/tmp/72d52c32-5ca0-4cdf-9777-f66bb5efee44_fixed.java
@@ -1,27 +1,16 @@
 public int[] calculateSpans(int[] prices) {
-
-    int[] spans = new int[prices.length];
-    spans[0] = 1; // Span of first element is always 1
-
-    Stack<Integer> indexStack = new Stack<>();
-
-    // Push the index of first element
-    indexStack.push(0);
-
-    for (int i = 1; i < prices.length; i++) {
-      while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
-        indexStack.pop();
-
-      // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
-        spans[i] = i + 1;
-      else
-        spans[i] = i - indexStack.peek();
-
-      indexStack.push(i);
+    int n = prices.length;
+    int[] spans = new int[n];
+    Stack<Integer> stack = new Stack<>();
+
+    for (int i = 0; i < n; i++) {
+        int count = 1;
+        while (!stack.isEmpty() && prices[stack.peek()] <= prices[i]) {
+            count += spans[stack.pop()];
+        }
+        spans[i] = count;
+        stack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
