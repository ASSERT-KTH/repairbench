diff --git a/tmp/d7c1a261-81d6-4f9b-a8c8-9604c10660d1_buggy.java b/tmp/f01d0794-ca69-49bd-823e-f9cfca4fe9bc_fixed.java
index 0583946..1bdef83 100644
--- a/tmp/d7c1a261-81d6-4f9b-a8c8-9604c10660d1_buggy.java
+++ b/tmp/f01d0794-ca69-49bd-823e-f9cfca4fe9bc_fixed.java
@@ -1,30 +1,31 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
-            boolean isBlank = isBlank();
+        boolean isBlank = StringUtil.isBlank(coreValue());
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank) return;
 
-            Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        if (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) {
             indent(accum, depth, out);
+        } else if (out.outline() && siblingNodes().size() > 0 && !isBlank) {
+            indent(accum, depth, out);
+        } else if (siblingIndex > 0 && nextSibling() instanceof Element && ((Element) nextSibling()).normalName().equals("br")) {
+            // special case wrap on inline <br> - doesn't make sense as a block tag
+            indent(accum, depth, out);
+        }
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
