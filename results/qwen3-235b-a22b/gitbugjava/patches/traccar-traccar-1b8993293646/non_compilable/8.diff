diff --git a/tmp/245859c1-b3dc-4646-b799-b49515abac41_buggy.java b/tmp/1d56a287-76b6-4648-aa46-224296558a76_fixed.java
index 7374e5f..dacd4f2 100644
--- a/tmp/245859c1-b3dc-4646-b799-b49515abac41_buggy.java
+++ b/tmp/1d56a287-76b6-4648-aa46-224296558a76_fixed.java
@@ -1,61 +1,60 @@
 private Object decodeLocationNew(
         Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     String index = parser.next();
 
-        Position position = new Position(getProtocolName());
-        position.setDeviceId(deviceSession.getDeviceId());
-
     position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
-
     position.setDeviceTime(parser.nextDateTime());
 
+    String towerData = parser.next();
+    String[] towerParts = towerData.split("\\|");
+
+    int mcc = Integer.parseInt(towerParts[0]);
+    int mnc = Integer.parseInt(towerParts[1]);
+    int lac = Integer.parseInt(towerParts[2], 16); // Hex
+    int cid = Integer.parseInt(towerParts[3], 16); // Hex
+
     Network network = new Network();
-        network.addCellTower(CellTower.from(
-                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
+    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
 
     position.set(Position.KEY_BATTERY, parser.nextDouble());
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
     if (parser.hasNext(5)) {
-
         position.setValid(parser.next().equals("A"));
         position.setFixTime(position.getDeviceTime());
         position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
-
     } else {
-
         String[] points = parser.next().split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
             String mac = wifi[0].replaceAll("(..)", "$1:");
             network.addWifiAccessPoint(WifiAccessPoint.from(
                     mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
         }
-
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
