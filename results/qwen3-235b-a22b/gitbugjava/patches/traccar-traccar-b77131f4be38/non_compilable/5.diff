diff --git a/tmp/c48a2f13-3136-45db-9386-b5222f88d00c_buggy.java b/tmp/74bec2a4-5ecc-4006-9a82-45656a61fcf3_fixed.java
index 7b8ee38..85ab1df 100644
--- a/tmp/c48a2f13-3136-45db-9386-b5222f88d00c_buggy.java
+++ b/tmp/74bec2a4-5ecc-4006-9a82-45656a61fcf3_fixed.java
@@ -1,179 +1,184 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
-        buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1); // '*' delimiter
+    if (buf.readableBytes() < 4) {
+        return null;  // Ensure enough space for minimal header
+    }
+
+    buf.skipBytes(1); // Skip '['
+    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+    buf.skipBytes(1); // Skip '*'
+
+    int idStart = buf.readerIndex();
+    int idEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (idEnd == -1) return null;
+
+    String id = buf.readSlice(idEnd - idStart).toString(StandardCharsets.US_ASCII);
+    buf.skipBytes(1); // Skip '*'
 
-        int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
-        buf.skipBytes(1); // '*' delimiter
+    int indexStart = buf.readerIndex();
+    int indexEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (indexEnd == -1) return null;
 
     String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
-            hasIndex = true;
+    if (indexEnd + 5 < buf.writerIndex() &&
+        buf.getByte(indexEnd + 5) == '*' &&
+        buf.toString(indexEnd + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
+
+        int indexLength = indexEnd - indexStart;
         index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
+        buf.skipBytes(1);  // '*', skip index delimiter
+    } else {
+        // Skip "length" fields (4 bytes + '*'), if present
+        if (buf.readableBytes() >= 5) {
+            buf.skipBytes(5); // "length" + '*'
+        }
     }
 
-        buf.skipBytes(4); // length
-        buf.skipBytes(1); // '*' delimiter
-
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+    buf.writerIndex(buf.writerIndex() - 1); // Remove ']' from the end
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
+    int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    if (contentIndex == -1) {
         contentIndex = buf.writerIndex();
     }
 
     String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
     if (contentIndex < buf.writerIndex()) {
         buf.readerIndex(contentIndex + 1);
     }
 
+    String[] values = null;
+    if (buf.isReadable()) {
+        values = buf.toString(StandardCharsets.US_ASCII).split(",");
+    }
+
     if (type.equals("INIT")) {
-
         sendResponse(channel, id, index, "INIT,1");
+        return null;
 
     } else if (type.equals("LK")) {
-
         sendResponse(channel, id, index, "LK");
 
-            if (buf.isReadable()) {
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
-                if (values.length >= 3) {
-                    Position position = new Position(getProtocolName());
+        if (values != null && values.length >= 3) {
+            Position position = new Position("watch");  // Safe default protocol name
             position.setDeviceId(deviceSession.getDeviceId());
-
             getLastLocation(position, null);
-
             position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
             position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
-
             return position;
         }
-            }
+        return null;
 
     } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
-
+        if (buf.isReadable()) {
             Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
-
             if (type.startsWith("AL")) {
                 if (position != null) {
                     position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                 }
                 sendResponse(channel, id, index, "AL");
             }
-
             return position;
+        }
+        return null;
 
     } else if (type.equals("TKQ") || type.equals("TKQ2")) {
-
         sendResponse(channel, id, index, type);
+        return null;
 
-        } else if (type.equalsIgnoreCase("PULSE")
-                || type.equalsIgnoreCase("HEART")
-                || type.equalsIgnoreCase("BLOOD")
-                || type.equalsIgnoreCase("BPHRT")
-                || type.equalsIgnoreCase("btemp2")) {
+    } else if (type.equalsIgnoreCase("PULSE") ||
+               type.equalsIgnoreCase("HEART") ||
+               type.equalsIgnoreCase("BLOOD") ||
+               type.equalsIgnoreCase("BPHRT") ||
+               type.equalsIgnoreCase("btemp2")) {
 
-            if (buf.isReadable()) {
-
-                Position position = new Position(getProtocolName());
+        Position position = new Position("watch");
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, new Date());
 
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+        if (values != null && values.length > 0) {
             int valueIndex = 0;
 
             if (type.equalsIgnoreCase("btemp2")) {
                 if (Integer.parseInt(values[valueIndex++]) > 0) {
                     position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                 }
             } else {
                 if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
                     position.set("pressureHigh", values[valueIndex++]);
                     position.set("pressureLow", values[valueIndex++]);
                 }
-                    if (valueIndex <= values.length - 1) {
+                if (valueIndex < values.length) {
                     position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                 }
             }
 
             return position;
-
         }
 
+        return null;
+
     } else if (type.equals("img")) {
-
-            Position position = new Position(getProtocolName());
+        Position position = new Position("watch");
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
 
         int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
+        if (timeIndex == -1) return null;
+        buf.readerIndex(timeIndex + 12 + 2);  // Skip over time info
         position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
         return position;
 
     } else if (type.equals("JXTK")) {
+        int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4);
+        if (dataIndex == -1) return null;
 
-            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
-            String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
+        dataIndex = dataIndex + 1; // Consume the comma
 
-            int current = Integer.parseInt(values[2]);
-            int total = Integer.parseInt(values[3]);
+        String[] values1 = buf.readCharSequence(dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
+        int current = Integer.parseInt(values1[2]);
+        int total = Integer.parseInt(values1[3]);
 
         if (audio == null) {
             audio = Unpooled.buffer();
         }
         audio.writeBytes(buf);
 
         sendResponse(channel, id, index, "JXTKR,1");
 
         if (current < total) {
             return null;
         } else {
-                Position position = new Position(getProtocolName());
+            Position position = new Position("watch");
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
             position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
             audio.release();
             audio = null;
             return position;
         }
 
     } else if (type.equals("TK")) {
-
         if (buf.readableBytes() == 1) {
             return null;
         }
-
-            Position position = new Position(getProtocolName());
+        Position position = new Position("watch");
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
-
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
-
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
