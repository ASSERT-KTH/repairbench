diff --git a/tmp/0240e1ac-6f92-4296-9c1a-b4aedd24d9bc_buggy.java b/tmp/76e8e470-16e8-4fd3-9126-a34a1551a381_fixed.java
index fd205cf..76721a7 100644
--- a/tmp/0240e1ac-6f92-4296-9c1a-b4aedd24d9bc_buggy.java
+++ b/tmp/76e8e470-16e8-4fd3-9126-a34a1551a381_fixed.java
@@ -1,151 +1,156 @@
 private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {
 
-        // If there's nothing there, treat it like we have no restrictions.
     if ((content == null) || (content.length == 0)) {
         return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
     }
 
     int bytesLen = content.length;
     int offset = 0;
     Charset encoding = StandardCharsets.US_ASCII;
 
-        // Check for a UTF-8 BOM at the beginning (EF BB BF)
-        if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {
+    // Check for BOMs
+    boolean hasBom = false;
+    if (bytesLen >= 3 && content[0] == (byte) 0xEF && content[1] == (byte) 0xBB && content[2] == (byte) 0xBF) {
         offset = 3;
         bytesLen -= 3;
         encoding = StandardCharsets.UTF_8;
-        }
-        // Check for UTF-16LE BOM at the beginning (FF FE)
-        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {
+        hasBom = true;
+    } else if (bytesLen >= 2 && content[0] == (byte) 0xFF && content[1] == (byte) 0xFE) {
         offset = 2;
         bytesLen -= 2;
         encoding = StandardCharsets.UTF_16LE;
-        }
-        // Check for UTF-16BE BOM at the beginning (FE FF)
-        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {
+        hasBom = true;
+    } else if (bytesLen >= 2 && content[0] == (byte) 0xFE && content[1] == (byte) 0xFF) {
         offset = 2;
         bytesLen -= 2;
         encoding = StandardCharsets.UTF_16BE;
+        hasBom = true;
     }
 
-        String contentAsStr;
-        contentAsStr = new String(content, offset, bytesLen, encoding);
+    // If no BOM was found, try parsing charset from Content-Type
+    if (!hasBom && contentType != null) {
+        // Normalize content-type
+        String lowerContentType = contentType.toLowerCase(Locale.ROOT);
 
-        // Decide if we need to do special HTML processing.
-        boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith("text/html"));
+        int charsetStart = lowerContentType.indexOf("charset=");
+        if (charsetStart != -1) {
+            // Find end index of charset
+            charsetStart += 8;
+            int charsetEnd = contentType.length();
+            for (int i = charsetStart; i < contentType.length(); i++) {
+                char c = contentType.charAt(i);
+                if (c == ' ' || c == ';' || c == ',') {
+                    charsetEnd = i;
+                    break;
+                }
+            }
+
+            if (charsetEnd > charsetStart) {
+                String charsetName = contentType.substring(charsetStart, charsetEnd).trim();
+                try {
+                    encoding = Charset.forName(charsetName);
+                } catch (Exception ignore) {
+                    // ignore invalid charsets
+                }
+            }
+        }
+    }
+
+    // Decode the content using the chosen encoding
+    String contentAsStr = new String(content, offset, bytesLen, encoding);
+
+    boolean isHtmlType = (contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith("text/html");
 
-        // If it looks like it contains HTML, but doesn't have a user agent
-        // field, then
-        // assume somebody messed up and returned back to us a random HTML page
-        // instead
-        // of a robots.txt file.
     boolean hasHTML = false;
     if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {
         if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {
             LOGGER.trace("Found non-robots.txt HTML file: " + url);
             return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
         } else {
-                // We'll try to strip out HTML tags below.
             if (isHtmlType) {
                 LOGGER.debug("HTML content type returned for robots.txt file: " + url);
             } else {
                 LOGGER.debug("Found HTML in robots.txt file: " + url);
             }
-
             hasHTML = true;
         }
     }
 
-        // Break on anything that might be used as a line ending. Since
-        // tokenizer doesn't return empty tokens, a \r\n sequence still
-        // works since it looks like an empty string between the \r and \n.
     StringTokenizer lineParser = new StringTokenizer(contentAsStr, "\n\r\u0085\u2028\u2029");
     ParseState parseState = new ParseState(url, robotNames);
 
     while (lineParser.hasMoreTokens()) {
         String line = lineParser.nextToken();
 
-            // Get rid of HTML markup, in case some brain-dead webmaster has
-            // created an HTML
-            // page for robots.txt. We could do more sophisticated processing
-            // here to better
-            // handle bad HTML, but that's a very tiny percentage of all
-            // robots.txt files.
         if (hasHTML) {
             line = line.replaceAll("<[^>]+>", "");
         }
 
-            // trim out comments and whitespace
         int hashPos = line.indexOf("#");
         if (hashPos >= 0) {
             line = line.substring(0, hashPos);
         }
 
         line = line.trim();
         if (line.length() == 0) {
             continue;
         }
 
-            RobotToken token = tokenize(line);
-            switch (token.getDirective()) {
+        RobotToken originalToken = tokenize(line);
+
+        // URL decode path before handling
+        RobotToken decodedToken;
+        try {
+            decodedToken = decodeUnicodeToken(originalToken);
+        } catch (Exception ignore) {
+            decodedToken = originalToken;
+        }
+
+        switch (decodedToken.getDirective()) {
             case USER_AGENT:
-                handleUserAgent(parseState, token);
+                handleUserAgent(parseState, decodedToken);
                 break;
-
             case DISALLOW:
                 parseState.setFinishedAgentFields(true);
-                handleDisallow(parseState, token);
+                handleDisallow(parseState, decodedToken);
                 break;
-
             case ALLOW:
                 parseState.setFinishedAgentFields(true);
-                handleAllow(parseState, token);
+                handleAllow(parseState, decodedToken);
                 break;
-
             case CRAWL_DELAY:
                 parseState.setFinishedAgentFields(true);
-                handleCrawlDelay(parseState, token);
+                handleCrawlDelay(parseState, decodedToken);
                 break;
-
             case SITEMAP:
                 parseState.setFinishedAgentFields(true);
-                handleSitemap(parseState, token);
+                handleSitemap(parseState, decodedToken);
                 break;
-
             case HTTP:
                 parseState.setFinishedAgentFields(true);
-                handleHttp(parseState, token);
+                handleHttp(parseState, decodedToken);
                 break;
-
             case UNKNOWN:
                 reportWarning(parseState, "Unknown directive in robots.txt file: {}", line);
                 parseState.setFinishedAgentFields(true);
                 break;
-
             case MISSING:
                 reportWarning(parseState, "Unknown line in robots.txt file (size {}): {}", content.length, line);
                 parseState.setFinishedAgentFields(true);
                 break;
-
             default:
-                    // All others we just ignore
-                    // TODO KKr - which of these should be setting
-                    // finishedAgentFields to true?
-                    // TODO KKr - handle no-index
-                    // TODO KKr - handle request-rate and visit-time
                 break;
         }
     }
 
     this._numWarningsDuringLastParse.set(parseState._numWarnings);
     SimpleRobotRules result = parseState.getRobotRules();
+
     if (result.getCrawlDelay() > _maxCrawlDelay) {
-            // Some evil sites use a value like 3600 (seconds) for the crawl
-            // delay, which would cause lots of problems for us.
         LOGGER.debug("Crawl delay exceeds max value - so disallowing all URLs: {}", url);
         return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);
     } else {
         result.sortRules();
         return result;
     }
 }
\ No newline at end of file
