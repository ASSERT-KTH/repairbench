diff --git a/tmp/539672fd-0140-4e9d-b3dd-5d42ac9bf132_buggy.java b/tmp/a1e9c7b1-d162-4fa6-b92b-c4d10943a96f_fixed.java
index 016a7f6..bc9671e 100644
--- a/tmp/539672fd-0140-4e9d-b3dd-5d42ac9bf132_buggy.java
+++ b/tmp/a1e9c7b1-d162-4fa6-b92b-c4d10943a96f_fixed.java
@@ -1,29 +1,42 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Additional logic to trim whitespace between block elements
+            if (trimLikeBlock) {
+                Node prev = previousSibling();
+                if (prev instanceof Element && ((Element) prev).tag().isBlock()) {
+                    trimLeading = true;
+                }
+
+                Node next = nextSibling();
+                if (next instanceof Element && ((Element) next).tag().isBlock()) {
+                    trimTrailing = true;
+                }
+            }
+
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) 
+                             || (next instanceof TextNode && (((TextNode) next).isBlank()));
             if (couldSkip && isBlank) return;
 
-            Node prev = previousSibling();
+            Node prevNode = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                (siblingIndex > 0 && prevNode instanceof Element && ((Element) prevNode).normalName().equals("br"))
+            ) {
                 indent(accum, depth, out);
             }
+        }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
