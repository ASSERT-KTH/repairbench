diff --git a/tmp/0f9fc6fb-592d-40f5-ba43-c715f7834845_buggy.java b/tmp/3e51655f-f571-4f7d-a9da-418fe073c305_fixed.java
index 2a0dceb..997673a 100644
--- a/tmp/0f9fc6fb-592d-40f5-ba43-c715f7834845_buggy.java
+++ b/tmp/3e51655f-f571-4f7d-a9da-418fe073c305_fixed.java
@@ -1,68 +1,85 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
     String type = values[index++].substring(5);
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
     index += 1; // model
 
     Network network = new Network();
 
     for (int i = 0; i < 7; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
         index += 1; // timing advance
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
     if (values[index].length() == 3) {
         index += 1; // collaborative network
     }
 
+    if (index + 1 >= values.length) {
+        return null;
+    }
+    String dateStr = values[index];
+    String timeStr = values[index + 1];
+    if (dateStr.isEmpty() || timeStr.isEmpty()) {
+        return null;
+    }
+    index += 2;
+
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+    try {
+        position.setTime(dateFormat.parse(dateStr + timeStr));
+    } catch (java.text.ParseException e) {
+        return null;
+    }
 
+    try {
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
+    } catch (NumberFormatException e) {
+        return null;
+    }
 
     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-
     position.setValid(values[index++].equals("1"));
 
     return position;
 }
\ No newline at end of file
