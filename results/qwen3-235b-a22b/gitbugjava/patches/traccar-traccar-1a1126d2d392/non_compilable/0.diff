diff --git a/tmp/ac6b59ea-7559-4e3e-8e7c-ff2f2f89c90f_buggy.java b/tmp/3ae3b25e-276f-48e1-8bc3-8cb9da2e9d40_fixed.java
index 2a0dceb..5bb3f57 100644
--- a/tmp/ac6b59ea-7559-4e3e-8e7c-ff2f2f89c90f_buggy.java
+++ b/tmp/3ae3b25e-276f-48e1-8bc3-8cb9da2e9d40_fixed.java
@@ -1,68 +1,82 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
     String type = values[index++].substring(5);
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
+    index++; // model skipped
 
     Network network = new Network();
 
     for (int i = 0; i < 7; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
+
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
-            index += 1; // timing advance
+        index++; // timing advance skipped
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
     if (values[index].length() == 3) {
-            index += 1; // collaborative network
+        index++; // collaborative network
     }
 
+    // Attempt to parse date and time
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+
+    String dateStr = values[index++];
+    String timeStr = values[index++];
+
+    if (dateStr != null && !dateStr.isEmpty() && timeStr != null && !timeStr.isEmpty()) {
+        try {
+            position.setTime(dateFormat.parse(dateStr + timeStr));
+        } catch (ParseException e) {
+            // Optionally log the error or skip setting time
+            position.setTime(null);
+        }
+    } else {
+        position.setTime(null);
+    }
 
     position.setLatitude(Double.parseDouble(values[index++]));
     position.setLongitude(Double.parseDouble(values[index++]));
-        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
+    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++]));
     position.setCourse(Double.parseDouble(values[index++]));
 
     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-
     position.setValid(values[index++].equals("1"));
 
     return position;
 }
\ No newline at end of file
