diff --git a/tmp/d874478e-df85-4dda-b040-1439e122ac4d_buggy.java b/tmp/44f62a0b-30b0-45b0-be90-2eb68f9b8213_fixed.java
index ee599aa..0ff6dbd 100644
--- a/tmp/d874478e-df85-4dda-b040-1439e122ac4d_buggy.java
+++ b/tmp/44f62a0b-30b0-45b0-be90-2eb68f9b8213_fixed.java
@@ -1,50 +1,59 @@
 private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
-
     int length = 0;
     if (hasLength) {
         length = buf.readUnsignedByte();
         if (length == 0) {
+            // Length is zero â€” no valid data follows, so return false immediately
+            return false;
+        }
+        if (length < 9) {
+            // Not enough data for LBS message; fail early
+            return false;
+        }
+
+        // Only skip bytes and check zeroed data **if the length supports it**
         boolean zeroedData = true;
         for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
             if (buf.getByte(i) != 0) {
                 zeroedData = false;
                 break;
             }
         }
         if (zeroedData) {
             buf.skipBytes(Math.min(buf.readableBytes(), 45));
-                }
             return false;
         }
     }
 
     int mcc = buf.readUnsignedShort();
     int mnc;
     if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
         mnc = buf.readUnsignedShort();
     } else {
         mnc = buf.readUnsignedByte();
     }
+
     int lac;
     if (type == MSG_LBS_ALARM) {
         lac = buf.readInt();
     } else {
         lac = buf.readUnsignedShort();
     }
+
     long cid;
     if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
         cid = buf.readLong();
     } else if (type == MSG_GPS_LBS_6) {
         cid = buf.readUnsignedInt();
     } else {
         cid = buf.readUnsignedMedium();
     }
 
     position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
 
     if (length > 9) {
         buf.skipBytes(length - 9);
     }
 
     return true;
 }
\ No newline at end of file
