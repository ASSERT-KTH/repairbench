diff --git a/tmp/65bd3dd1-c97f-4fba-97d7-5fb63ab92378_buggy.java b/tmp/d0395e22-3f49-451d-9837-9e614cca00bc_fixed.java
index 712f277..6ec0a45 100644
--- a/tmp/65bd3dd1-c97f-4fba-97d7-5fb63ab92378_buggy.java
+++ b/tmp/d0395e22-3f49-451d-9837-9e614cca00bc_fixed.java
@@ -1,48 +1,36 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
     public static Appendable render(final String input, Appendable target) throws IOException {
-
         int i = 0;
-        int j, k;
-
         while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
+            int j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
+                if (i == 0 && input.indexOf(END_TOKEN, 0) != -1) {
+                    throw new IllegalArgumentException("Invalid end token before start token");
                 }
+                if (i < input.length()) {
                     target.append(input.substring(i));
+                }
                 return target;
             }
+            
+            int endInPrefix = input.indexOf(END_TOKEN, i);
+            if (endInPrefix >= 0 && endInPrefix < j) {
+                throw new IllegalArgumentException("Invalid end token before start token");
+            }
+            
             target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
-
+            int k = input.indexOf(END_TOKEN, j);
             if (k == -1) {
-                target.append(input);
-                return target;
+                throw new IllegalArgumentException("Unmatched begin token");
             }
+            k = input.indexOf(END_TOKEN, j);
             j += BEGIN_TOKEN_LEN;
             String spec = input.substring(j, k);
-
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
-                target.append(input);
-                return target;
+                throw new IllegalArgumentException("Invalid content inside token");
             }
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
             target.append(replacement);
-
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
