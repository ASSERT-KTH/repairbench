diff --git a/tmp/6599b8ff-64a9-4167-a13d-fbf63e8c144d_buggy.java b/tmp/fa9d564a-da11-4948-9b6e-f7fca333925e_fixed.java
index 712f277..626837a 100644
--- a/tmp/6599b8ff-64a9-4167-a13d-fbf63e8c144d_buggy.java
+++ b/tmp/fa9d564a-da11-4948-9b6e-f7fca333925e_fixed.java
@@ -1,48 +1,62 @@
 /**
  * Renders the given input to the target Appendable.
  *
  * @param input
  *            source to render
  * @param target
  *            render onto this target Appendable.
  * @return the given Appendable
  * @throws IOException
  *             If an I/O error occurs
+ * @throws IllegalArgumentException
+ *             If invalid tokens are found in the input
  */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
+            // Check for invalid END tokens if there are no more BEGIN tokens
             if (i == 0) {
+                if (input.contains(END_TOKEN)) {
+                    throw new IllegalArgumentException("Invalid end token found in input.");
+                }
                 target.append(input);
-                    return target;
+            } else {
+                String remaining = input.substring(i);
+                if (remaining.contains(END_TOKEN)) {
+                    throw new IllegalArgumentException("Invalid end token found in remaining input.");
+                }
+                target.append(remaining);
             }
-                target.append(input.substring(i));
             return target;
         }
-            target.append(input.substring(i, j));
+
+        // Check for invalid END tokens between i and j
+        String literalText = input.substring(i, j);
+        if (literalText.contains(END_TOKEN)) {
+            throw new IllegalArgumentException("Invalid end token found in literal text between " + i + " and " + j);
+        }
+        target.append(literalText);
+
         k = input.indexOf(END_TOKEN, j);
-
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("No end token found after begin token at position " + j);
         }
+
+        // Process the content between BEGIN and END tokens
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
-
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
             target.append(input);
             return target;
         }
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
