diff --git a/tmp/cb85b1b4-3cf2-4744-8311-b725ac2be245_buggy.java b/tmp/469b9f2a-7bf9-4a5c-9c3a-23effa5d5107_fixed.java
index 862c60c..d2e3808 100644
--- a/tmp/cb85b1b4-3cf2-4744-8311-b725ac2be245_buggy.java
+++ b/tmp/469b9f2a-7bf9-4a5c-9c3a-23effa5d5107_fixed.java
@@ -1,25 +1,6 @@
-    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
-        final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
-
-        boolean trimLeading = false;
-        boolean trimTrailing = false;
-        if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
-
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
-                indent(accum, depth, out);
-        }
-
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+@Test
+void wrapTextAfterBr() {
+    String html = "<p>Hello<br>there<br>now.</p>";
+    Document doc = Jsoup.parse(html);
+    assertEquals("<p>Hello<br>\n there<br>\n now.</p>", doc.body().html());
 }
\ No newline at end of file
