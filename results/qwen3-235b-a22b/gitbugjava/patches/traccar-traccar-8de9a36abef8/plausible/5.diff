diff --git a/tmp/7105b907-b59d-4ac8-b968-442766cb3c8b_buggy.java b/tmp/3b27ff8b-c376-4991-9289-a8a43e958248_fixed.java
index ad77f15..e316d2f 100644
--- a/tmp/7105b907-b59d-4ac8-b968-442766cb3c8b_buggy.java
+++ b/tmp/3b27ff8b-c376-4991-9289-a8a43e958248_fixed.java
@@ -1,112 +1,166 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
             position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            
+            if (index < values.length) {
+                String satStr = values[index++];
+                if (!satStr.isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(satStr));
+                }
+            } else {
+                break;
+            }
+            
+            if (index < values.length) {
+                String latVal = values[index++];
+                if (latVal.length() > 1) {
+                    position.setLatitude(Double.parseDouble(latVal.substring(1)));
+                    if (latVal.charAt(0) == 'S') {
                         position.setLatitude(-position.getLatitude());
                     }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                }
+            } else {
+                break;
+            }
+            
+            if (index < values.length) {
+                String lonVal = values[index++];
+                if (lonVal.length() > 1) {
+                    position.setLongitude(Double.parseDouble(lonVal.substring(1)));
+                    if (lonVal.charAt(0) == 'W') {
                         position.setLongitude(-position.getLongitude());
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
+            } else {
+                break;
+            }
+            
+            if (index < values.length) {
+                String speedStr = values[index++];
+                if (!speedStr.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));
+                }
+            } else {
+                break;
+            }
+            
+            if (index < values.length) {
+                String courseStr = values[index++];
+                if (!courseStr.isEmpty()) {
+                    position.setCourse(Integer.parseInt(courseStr));
+                }
+            } else {
+                break;
+            }
+            
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                String altStr = values[index++];
+                if (!altStr.isEmpty()) {
+                    position.setAltitude(Integer.parseInt(altStr));
+                }
+            } else {
+                break;
             }
+            
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                String hdopStr = values[index++];
+                if (!hdopStr.isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));
                 }
+            } else {
+                break;
+            }
+            
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                String vdopStr = values[index++];
+                if (!vdopStr.isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));
+                }
             }
             break;
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
             position.setNetwork(new Network(CellTower.from(
                     Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                     Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                     Integer.parseInt(values[index++]))));
             break;
         case "COT":
             if (index < values.length) {
                 position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
             }
             if (index < values.length) {
                 String[] hours = values[index].split("-");
                 position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
                         + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
                         + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
             }
             break;
         case "ADC":
             position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
             if (index < values.length) {
                 position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
             }
             if (index < values.length) {
                 position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
             }
             if (index < values.length) {
                 position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
             }
             break;
         case "DTT":
             position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
             if (!values[index++].isEmpty()) {
                 int io = Integer.parseInt(values[index - 1], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
             position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
             position.set("eventStatus", values[index++]);
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
             position.set("eventData", values[index++]);
             break;
         case "OBD":
             position.set("obd", values[index++]);
             break;
         case "TAG":
             position.set("tagData", values[index++]);
             break;
         case "IWD":
             while (index < values.length) {
                 int sensorIndex = Integer.parseInt(values[index++]);
                 int dataType = Integer.parseInt(values[index++]);
                 if (dataType == 0) {
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                 } else if (dataType == 1) {
                     index += 1; // temperature sensor serial number
                     position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
