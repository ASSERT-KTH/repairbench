diff --git a/tmp/ee4ad615-032a-4676-b78c-41e083423af2_buggy.java b/tmp/eae49102-374c-40d2-84d1-6afbc967e1dc_fixed.java
index ad77f15..b76b561 100644
--- a/tmp/ee4ad615-032a-4676-b78c-41e083423af2_buggy.java
+++ b/tmp/eae49102-374c-40d2-84d1-6afbc967e1dc_fixed.java
@@ -1,112 +1,256 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            if (index < values.length) position.setValid(values[index++].equals("A"));
+            else index++;
+
+            if (index < values.length) {
+                String sats = values[index++];
+                if (!sats.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_SATELLITES, Integer.parseInt(sats));
+                    } catch (NumberFormatException ignored) {}
+                }
+            } else index++;
+
+            if (index < values.length) {
+                String latStr = values[index++];
+                if (!latStr.isEmpty() && latStr.length() > 1) {
+                    try {
+                        position.setLatitude(Double.parseDouble(latStr.substring(1)));
+                    } catch (NumberFormatException ignored) {}
+                }
+                if (latStr != null && latStr.length() > 0 && latStr.charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+            } else index++;
+
+            if (index < values.length) {
+                String lonStr = values[index++];
+                if (!lonStr.isEmpty() && lonStr.length() > 1) {
+                    try {
+                        position.setLongitude(Double.parseDouble(lonStr.substring(1)));
+                    } catch (NumberFormatException ignored) {}
+                }
+                if (lonStr != null && lonStr.length() > 0 && lonStr.charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+            } else index++;
+
+            if (index < values.length) {
+                String speed = values[index++];
+                if (!speed.isEmpty()) {
+                    try {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));
+                    } catch (NumberFormatException ignored) {}
+                }
+            } else index++;
+
+            if (index < values.length) {
+                String course = values[index++];
+                if (!course.isEmpty()) {
+                    try {
+                        position.setCourse(Integer.parseInt(course));
+                    } catch (NumberFormatException ignored) {}
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
+            } else index++;
+
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                String altitude = values[index++];
+                if (!altitude.isEmpty()) {
+                    try {
+                        position.setAltitude(Integer.parseInt(altitude));
+                    } catch (NumberFormatException ignored) {}
                 }
+            }
+
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                String hdop = values[index++];
+                if (!hdop.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(hdop));
+                    } catch (NumberFormatException ignored) {}
+                }
             }
+
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                String vdop = values[index++];
+                if (!vdop.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(vdop));
+                    } catch (NumberFormatException ignored) {}
+                }
             }
+
             break;
+
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
+            if (index + 4 < values.length) {
                 position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                         Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                         Integer.parseInt(values[index++]))));
+            } else index += 5;
             break;
+
         case "COT":
             if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                String odometer = values[index++];
+                if (!odometer.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));
+                    } catch (NumberFormatException ignored) {}
                 }
+            }
+
             if (index < values.length) {
-                    String[] hours = values[index].split("-");
+                String[] hours = values[index++].split("-");
+                if (hours.length >= 1) {
+                    try {
                         position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
                                 + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
                                 + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    } catch (NumberFormatException ignored) {}
                 }
+            }
+
             break;
+
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
             if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                String power = values[index++];
+                if (!power.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_POWER, Double.parseDouble(power));
+                    } catch (NumberFormatException ignored) {}
                 }
+            }
+
+            if (index < values.length) {
+                String battery = values[index++];
+                if (!battery.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_BATTERY, Double.parseDouble(battery));
+                    } catch (NumberFormatException ignored) {}
+                }
+            }
+
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                String adc1 = values[index++];
+                if (!adc1.isEmpty()) {
+                    try {
+                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));
+                    } catch (NumberFormatException ignored) {}
+                }
             }
+
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                String adc2 = values[index++];
+                if (!adc2.isEmpty()) {
+                    try {
+                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));
+                    } catch (NumberFormatException ignored) {}
+                }
             }
+
             break;
+
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
-                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
-                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
-                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
-                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
-                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
-                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
-                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
-                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
-                }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            if (index < values.length) {
+                String status = values[index++];
+                if (!status.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_STATUS, Integer.parseInt(status, 16));
+                    } catch (NumberFormatException ignored) {}
+                }
+            }
+
+            if (index < values.length) {
+                String io = values[index++];
+                if (!io.isEmpty()) {
+                    try {
+                        int integerValue = Integer.parseInt(io, 16);
+                        position.set(Position.KEY_IGNITION, BitUtil.check(integerValue, 0));
+                        position.set(Position.PREFIX_IN + 1, BitUtil.check(integerValue, 1));
+                        position.set(Position.PREFIX_IN + 2, BitUtil.check(integerValue, 2));
+                        position.set(Position.PREFIX_IN + 3, BitUtil.check(integerValue, 3));
+                        position.set(Position.PREFIX_IN + 4, BitUtil.check(integerValue, 4));
+                        position.set(Position.PREFIX_OUT + 1, BitUtil.check(integerValue, 5));
+                        position.set(Position.PREFIX_OUT + 2, BitUtil.check(integerValue, 6));
+                        position.set(Position.PREFIX_OUT + 3, BitUtil.check(integerValue, 7));
+                    } catch (NumberFormatException ignored) {}
+                }
+            }
+
+            if (index < values.length) index++;
+            if (index < values.length) index++;
+
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
+
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
+
             break;
+
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
+
             break;
+
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
+
             break;
+
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
+
             break;
+
         case "IWD":
-                while (index < values.length) {
+            while (index + 2 < values.length) {
+                try {
                     int sensorIndex = Integer.parseInt(values[index++]);
                     int dataType = Integer.parseInt(values[index++]);
+
                     if (dataType == 0) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                     } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        index++; // temperature sensor serial number (ignored)
+                        String tempStr = values[index++];
+                        if (!tempStr.isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempStr));
                         }
                     }
+                } catch (NumberFormatException ignored) {
+                    index += 2;
+                }
+            }
+
             break;
+
         default:
             break;
     }
 }
\ No newline at end of file
