diff --git a/tmp/74c5f72a-91af-477d-98de-51385867bc39_buggy.java b/tmp/40228311-9777-4815-bada-00ae92b5f5cd_fixed.java
index ad77f15..ae35c2c 100644
--- a/tmp/74c5f72a-91af-477d-98de-51385867bc39_buggy.java
+++ b/tmp/40228311-9777-4815-bada-00ae92b5f5cd_fixed.java
@@ -1,112 +1,283 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
-        if (fragment.length() == dataIndex + 1) {
+    if (dataIndex == -1 || fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            position.setValid(index < values.length && values[index++].equals("A"));
+
+            if (index < values.length) {
+                String satellitesStr = values[index++];
+                if (!satellitesStr.isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(satellitesStr));
+                }
+            }
+
+            if (index < values.length) {
+                String latitudeStr = values[index++];
+                if (!latitudeStr.isEmpty()) {
+                    try {
+                        position.setLatitude(Double.parseDouble(latitudeStr.substring(1)));
+                        if (latitudeStr.charAt(0) == 'S') {
                             position.setLatitude(-position.getLatitude());
                         }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                    } catch (Exception ignore) {
+                        // gracefully handle invalid latitude format
+                    }
+                }
+            }
+
+            if (index < values.length) {
+                String longitudeStr = values[index++];
+                if (!longitudeStr.isEmpty()) {
+                    try {
+                        position.setLongitude(Double.parseDouble(longitudeStr.substring(1)));
+                        if (longitudeStr.charAt(0) == 'W') {
                             position.setLongitude(-position.getLongitude());
                         }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                    } catch (Exception ignore) {
+                        // gracefully handle invalid longitude format
                     }
-                position.setCourse(Integer.parseInt(values[index++]));
+                }
+            }
+
+            if (index < values.length) {
+                String speedStr = values[index++];
+                if (!speedStr.isEmpty()) {
+                    try {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));
+                    } catch (NumberFormatException ignore) {
+                        // skip invalid speed
+                    }
+                }
+            }
+
+            if (index < values.length) {
+                String courseStr = values[index++];
+                if (!courseStr.isEmpty()) {
+                    try {
+                        position.setCourse(Integer.parseInt(courseStr));
+                    } catch (NumberFormatException ignore) {
+                        // skip invalid course
+                    }
+                }
+            }
+
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                String altitudeStr = values[index++];
+                if (!altitudeStr.isEmpty()) {
+                    try {
+                        position.setAltitude(Integer.parseInt(altitudeStr));
+                    } catch (NumberFormatException ignore) {
+                        // skip invalid altitude
+                    }
+                }
             }
+
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                String hdopStr = values[index++];
+                if (!hdopStr.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));
+                    } catch (NumberFormatException ignore) {
+                        // skip invalid hdop
                     }
+                }
+            }
+
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                String vdopStr = values[index++];
+                if (!vdopStr.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));
+                    } catch (NumberFormatException ignore) {
+                        // skip invalid vdop
+                    }
+                }
             }
+
             break;
+
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
+            if (index < values.length && index + 2 < values.length) {
+                try {
                     position.setNetwork(new Network(CellTower.from(
                             Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                             Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                            Integer.parseInt(values[index++]))
+                    ));
+                } catch (NumberFormatException ignore) {
+                    // skip invalid input, avoid crash
+                }
+            }
             break;
+
         case "COT":
             if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                String cotStr = values[index++];
+                if (!cotStr.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_ODOMETER, Long.parseLong(cotStr));
+                    } catch (NumberFormatException ignore) {
+                        // skip invalid input
                     }
+                }
+            }
+
             if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                String hoursSet = values[index++];
+                if (!hoursSet.isEmpty()) {
+                    String[] hours = hoursSet.split("-");
+                    try {
+                        position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600 +
+                                (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0) +
+                                (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    } catch (NumberFormatException ignore) {
+                        // skip invalid hour string
                     }
+                }
+            }
+
             break;
+
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
             if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                String powerStr = values[index++];
+                if (!powerStr.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_POWER, Double.parseDouble(powerStr));
+                    } catch (NumberFormatException ignore) {
+                        // skip faulty ADC data
                     }
+                }
+            }
+
+            if (index < values.length) {
+                String batteryStr = values[index++];
+                if (!batteryStr.isEmpty()) {
+                    try {
+                        position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr));
+                    } catch (NumberFormatException ignore) {
+                        // skip faulty ADC value
+                    }
+                }
+            }
+
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                String adc1Str = values[index++];
+                if (!adc1Str.isEmpty()) {
+                    try {
+                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Str));
+                    } catch (NumberFormatException ignore) {
+                        // skip faulty ADC value
+                    }
+                }
             }
+
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                String adc2Str = values[index++];
+                if (!adc2Str.isEmpty()) {
+                    try {
+                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Str));
+                    } catch (NumberFormatException ignore) {
+                        // skip faulty ADC value
+                    }
+                }
             }
+
             break;
+
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length) {
+                String ioStr = values[index++];
+                if (!ioStr.isEmpty()) {
+                    try {
+                        int io = Integer.parseInt(ioStr, 16);
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                    } catch (NumberFormatException ignore) {
+                        // skip invalid IO input
                     }
+                }
+            }
+
+            if (index < values.length) {
                 position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            }
+
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
+
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
+
             break;
+
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
+
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
+
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
+
         case "IWD":
             while (index < values.length) {
+                try {
                     int sensorIndex = Integer.parseInt(values[index++]);
                     int dataType = Integer.parseInt(values[index++]);
+
                     if (dataType == 0) {
+                        if (index < values.length) {
                             position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                        }
                     } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                        if (index + 1 < values.length) {
+                            index += 1; // sensor ID
+                            try {
                                 position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                            } catch (NumberFormatException iaba) {
+                                index++; // advance anyway
                             }
+                        } else {
+                            index += 2; // skip sensor data
                         }
+                    }
+                } catch (NumberFormatException ignore) {
+                    // skip malformed IWD data
+                }
+            }
+
             break;
+
         default:
             break;
     }
 }
\ No newline at end of file
