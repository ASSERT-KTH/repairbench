diff --git a/tmp/08878c74-986a-4cfc-a660-ba537c94e661_buggy.java b/tmp/2419d0fc-47e1-4acf-83b7-53c38b29af38_fixed.java
index ad77f15..1383842 100644
--- a/tmp/08878c74-986a-4cfc-a660-ba537c94e661_buggy.java
+++ b/tmp/2419d0fc-47e1-4acf-83b7-53c38b29af38_fixed.java
@@ -1,112 +1,199 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
-        if (fragment.length() == dataIndex + 1) {
+    if (dataIndex == -1) {
+        values = new String[0];
+    } else if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
+            if (index < values.length) {
                 position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            }
+            if (index < values.length) {
+                String satellites = values[index++];
+                if (!satellites.isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(satellites));
+                }
+            }
+            if (index < values.length) {
+                String latitude = values[index++];
+                if (!latitude.isEmpty()) {
+                    position.setLatitude(Double.parseDouble(latitude.substring(1)));
+                    if (latitude.charAt(0) == 'S') {
                         position.setLatitude(-position.getLatitude());
                     }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                }
+            }
+            if (index < values.length) {
+                String longitude = values[index++];
+                if (!longitude.isEmpty()) {
+                    position.setLongitude(Double.parseDouble(longitude.substring(1)));
+                    if (longitude.charAt(0) == 'W') {
                         position.setLongitude(-position.getLongitude());
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
+            }
+            if (index < values.length) {
+                String speed = values[index++];
+                if (!speed.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));
+                }
+            }
+            if (index < values.length) {
+                String course = values[index++];
+                if (!course.isEmpty()) {
+                    position.setCourse(Integer.parseInt(course));
+                }
+            }
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                String altitude = values[index++];
+                if (!altitude.isEmpty()) {
+                    position.setAltitude(Integer.parseInt(altitude));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                String hdop = values[index++];
+                if (!hdop.isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(hdop));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                String vdop = values[index++];
+                if (!vdop.isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(vdop));
+                }
             }
             break;
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
+            if (index + 3 < values.length) {
                 position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                         Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                         Integer.parseInt(values[index++]))));
+            }
             break;
         case "COT":
             if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                String odometer = values[index++];
+                if (!odometer.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odometer));
+                }
             }
             if (index < values.length) {
-                    String[] hours = values[index].split("-");
+                String[] hours = values[index++].split("-");
+                if (hours.length > 0) {
                     position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
                             + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
                             + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
                 }
+            }
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
             if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                String power = values[index++];
+                if (!power.isEmpty()) {
+                    position.set(Position.KEY_POWER, Double.parseDouble(power));
+                }
+            }
+            if (index < values.length) {
+                String battery = values[index++];
+                if (!battery.isEmpty()) {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(battery));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                String adc1 = values[index++];
+                if (!adc1.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                String adc2 = values[index++];
+                if (!adc2.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));
+                }
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
-                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
-                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
-                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
-                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
-                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
-                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
-                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
-                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+            if (index < values.length) {
+                String status = values[index++];
+                if (!status.isEmpty()) {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(status, 16));
                 }
+            }
+            if (index < values.length) {
+                String io = values[index++];
+                if (!io.isEmpty()) {
+                    int ioValue = Integer.parseInt(io, 16);
+                    position.set(Position.KEY_IGNITION, BitUtil.check(ioValue, 0));
+                    position.set(Position.PREFIX_IN + 1, BitUtil.check(ioValue, 1));
+                    position.set(Position.PREFIX_IN + 2, BitUtil.check(ioValue, 2));
+                    position.set(Position.PREFIX_IN + 3, BitUtil.check(ioValue, 3));
+                    position.set(Position.PREFIX_IN + 4, BitUtil.check(ioValue, 4));
+                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(ioValue, 5));
+                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(ioValue, 6));
+                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(ioValue, 7));
+                }
+            }
+            if (index + 1 < values.length) {
                 position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            }
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+            while (index + 1 < values.length) {
+                int sensorIndex = 0, dataType = 0;
+                try {
+                    sensorIndex = Integer.parseInt(values[index++]);
+                    dataType = Integer.parseInt(values[index++]);
+                } catch (NumberFormatException e) {
+                    break;
+                }
                 if (dataType == 0) {
+                    if (index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
+                    if (index + 1 < values.length) {
                         index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        String temp = values[index++];
+                        if (!temp.isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(temp));
+                        }
+                    }
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
