diff --git a/tmp/3c1adb2b-4d58-49b6-9ac6-cea7b1057ce4_buggy.java b/tmp/af5e7857-6e04-48ba-b3fa-d64e64565e50_fixed.java
index ad77f15..d781ce3 100644
--- a/tmp/3c1adb2b-4d58-49b6-9ac6-cea7b1057ce4_buggy.java
+++ b/tmp/af5e7857-6e04-48ba-b3fa-d64e64565e50_fixed.java
@@ -1,112 +1,240 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
-        if (fragment.length() == dataIndex + 1) {
+    if (dataIndex == -1) {
+        values = new String[0]; // gracefully handle fragment without colon
+    } else if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+            // Valid
+            if (index < values.length) {
+                String valid = values[index++];
+                position.setValid("A".equals(valid));
+            } else {
+                index++;
+            }
+
+            // Satellites
+            if (index < values.length) {
+                String satStr = values[index++];
+                if (!satStr.isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(satStr));
+                }
+            } else {
+                index++;
+            }
+
+            // Latitude
+            if (index < values.length) {
+                String latStr = values[index++];
+                if (!latStr.isEmpty()) {
+                    double latitude = Double.parseDouble(latStr.substring(1));
+                    position.setLatitude(latitude);
+                    if (latStr.charAt(0) == 'S') {
+                        position.setLatitude(-latitude);
                     }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+            } else {
+                index++;
             }
-                position.setCourse(Integer.parseInt(values[index++]));
+
+            // Longitude
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                String lonStr = values[index++];
+                if (!lonStr.isEmpty()) {
+                    double longitude = Double.parseDouble(lonStr.substring(1));
+                    position.setLongitude(longitude);
+                    if (lonStr.charAt(0) == 'W') {
+                        position.setLongitude(-longitude);
+                    }
+                }
+            } else {
+                index++;
             }
+
+            // Speed
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                String speedStr = values[index++];
+                if (!speedStr.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));
                 }
+            } else {
+                index++;
+            }
+
+            // Course
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                String courseStr = values[index++];
+                if (!courseStr.isEmpty()) {
+                    position.setCourse(Integer.parseInt(courseStr));
+                }
+            } else {
+                index++;
+            }
+
+            // Altitude
+            if (index < values.length) {
+                String altStr = values[index++];
+                if (!altStr.isEmpty()) {
+                    position.setAltitude(Integer.parseInt(altStr));
+                }
+            } else {
+                index++;
+            }
+
+            // HDOP
+            if (index < values.length) {
+                String hdopStr = values[index++];
+                if (!hdopStr.isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));
+                }
+            } else {
+                index++;
+            }
+
+            // VDOP
+            if (index < values.length) {
+                String vdopStr = values[index++];
+                if (!vdopStr.isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));
+                }
             }
+
             break;
+
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
+            if (index + 3 < values.length) {
                 position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                         Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                         Integer.parseInt(values[index++]))));
+            }
             break;
+
         case "COT":
             if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                String odoStr = values[index++];
+                if (!odoStr.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odoStr));
+                }
             }
             if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                String[] hours = values[index++].split("-");
+                double hourVal = hours.length > 0 ? Integer.parseInt(hours[0]) * 3600 : 0;
+                double minVal = hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0;
+                double secVal = hours.length > 2 ? Integer.parseInt(hours[2]) : 0;
+                position.set(Position.KEY_HOURS, (long) ((hourVal + minVal + secVal) * 1000));
             }
             break;
+
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
             if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                String powerStr = values[index++];
+                if (!powerStr.isEmpty()) {
+                    position.set(Position.KEY_POWER, Double.parseDouble(powerStr));
+                }
+            }
+            if (index < values.length) {
+                String batStr = values[index++];
+                if (!batStr.isEmpty()) {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(batStr));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                String adc1Str = values[index++];
+                if (!adc1Str.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Str));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                String adc2Str = values[index++];
+                if (!adc2Str.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Str));
+                }
             }
             break;
+
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length) {
+                String statusStr = values[index++];
+                if (!statusStr.isEmpty()) {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(statusStr, 16));
+                }
+            }
+            if (index < values.length) {
+                String inputStr = values[index++];
+                if (!inputStr.isEmpty()) {
+                    int io = Integer.parseInt(inputStr, 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            }
+            if (index + 1 < values.length) {
+                String geoFence1 = values[index++];
+                String geoFence2 = values[index++];
+                position.set(Position.KEY_GEOFENCE, geoFence1 + geoFence2);
+            } else {
+                index += 2;
+            }
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
+
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
+
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
+
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
+
         case "IWD":
-                while (index < values.length) {
+            while (index + 2 < values.length) {
                 int sensorIndex = Integer.parseInt(values[index++]);
                 int dataType = Integer.parseInt(values[index++]);
                 if (dataType == 0) {
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    // Skip temperature sensor serial number
+                    index += 1;
+                    if (index < values.length) {
+                        double temperature = Double.parseDouble(values[index++]);
+                        position.set(Position.PREFIX_TEMP + sensorIndex, temperature);
+                    }
                 }
             }
             break;
+
         default:
             break;
     }
 }
\ No newline at end of file
