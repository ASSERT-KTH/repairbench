diff --git a/tmp/00b208c0-8883-4361-a44d-a0f6cebb4859_buggy.java b/tmp/d9a5fec4-4866-4630-96e5-dbc0868fd69e_fixed.java
index ad77f15..22633ac 100644
--- a/tmp/00b208c0-8883-4361-a44d-a0f6cebb4859_buggy.java
+++ b/tmp/d9a5fec4-4866-4630-96e5-dbc0868fd69e_fixed.java
@@ -1,112 +1,230 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
+            if (index < values.length) {
                 position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            } else {
+                break;
+            }
+
+            if (index < values.length) {
+                String sat = values[index++];
+                if (!sat.isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(sat));
+                }
+            } else {
+                break;
+            }
+
+            if (index < values.length) {
+                String latVal = values[index++];
+                if (!latVal.isEmpty()) {
+                    try {
+                        if (latVal.length() > 1) {
+                            position.setLatitude(Double.parseDouble(latVal.substring(1)));
+                        }
+                        if (latVal.length() >= 1 && latVal.charAt(0) == 'S') {
                             position.setLatitude(-position.getLatitude());
                         }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                    } catch (NumberFormatException ex) {
+                        // Ignore invalid latitude
+                    }
+                }
+            } else {
+                break;
+            }
+
+            if (index < values.length) {
+                String lonVal = values[index++];
+                if (!lonVal.isEmpty()) {
+                    try {
+                        if (lonVal.length() > 1) {
+                            position.setLongitude(Double.parseDouble(lonVal.substring(1)));
+                        }
+                        if (lonVal.length() >= 1 && lonVal.charAt(0) == 'W') {
                             position.setLongitude(-position.getLongitude());
                         }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                    } catch (NumberFormatException ex) {
+                        // Ignore invalid longitude
                     }
-                position.setCourse(Integer.parseInt(values[index++]));
+                }
+            } else {
+                break;
+            }
+
+            if (index < values.length) {
+                String speed = values[index++];
+                if (!speed.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speed)));
+                }
+            } else {
+                break;
+            }
+
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                String course = values[index++];
+                if (!course.isEmpty()) {
+                    position.setCourse(Integer.parseInt(course));
                 }
+            } else {
+                break;
+            }
+
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                String alt = values[index++];
+                if (!alt.isEmpty()) {
+                    position.setAltitude(Integer.parseInt(alt));
                 }
+            }
+
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                String hdop = values[index++];
+                if (!hdop.isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(hdop));
+                }
+            }
+
+            if (index < values.length) {
+                String vdop = values[index++];
+                if (!vdop.isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(vdop));
+                }
             }
             break;
+
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
+            if (index + 2 < values.length) {
                 position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                    Integer.parseInt(values[index]), Integer.parseInt(values[index + 1]),
+                    Integer.parseInt(values[index + 2], 16), Integer.parseInt(values[index + 3], 16),
+                    Integer.parseInt(values[index + 4])));
+                index += 5;
+            } else {
+                index = values.length;
+            }
             break;
+
         case "COT":
             if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                String odo = values[index++];
+                if (!odo.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odo));
+                }
             }
             if (index < values.length) {
                 String[] hours = values[index].split("-");
                 position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
                         + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
                         + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                index++;
             }
             break;
+
         case "ADC":
+            if (index < values.length) {
                 position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+            }
             if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                String pow = values[index++];
+                if (!pow.isEmpty()) {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(pow));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                String val = values[index++];
+                if (!val.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(val));
+                }
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                String val = values[index++];
+                if (!val.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(val));
+                }
             }
             break;
+
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length) {
+                String status = values[index++];
+                if (!status.isEmpty()) {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(status, 16));
+                }
+            }
+            if (index < values.length) {
+                String ioStr = values[index++];
+                if (!ioStr.isEmpty()) {
+                    int io = Integer.parseInt(ioStr, 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
+            }
+            if (index < values.length) {
                 position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            }
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
+
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
+
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
+
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
+
         case "IWD":
             while (index < values.length) {
                 int sensorIndex = Integer.parseInt(values[index++]);
                 int dataType = Integer.parseInt(values[index++]);
                 if (dataType == 0) {
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                 } else if (dataType == 1) {
                     index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    if (index < values.length) {
+                        String temp = values[index++];
+                        if (!temp.isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(temp));
+                        }
+                    }
                 }
             }
             break;
+
         default:
             break;
     }
 }
\ No newline at end of file
