diff --git a/tmp/ed1dd16a-b7c6-4dc8-9910-dfe6814e43d5_buggy.java b/tmp/1533fa53-50f8-43eb-a594-3a4b96b280f9_fixed.java
index 6cfa79b..deb1ae6 100644
--- a/tmp/ed1dd16a-b7c6-4dc8-9910-dfe6814e43d5_buggy.java
+++ b/tmp/1533fa53-50f8-43eb-a594-3a4b96b280f9_fixed.java
@@ -1,12 +1,35 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        if (Double.isInfinite(x)) {
+            if (x > 0) {
+                return 1.0;
+            } else {
+                return 0.0;
+            }
+        }
+        
+        double dev = x - mean;
+        if (Math.abs(dev) > 20 * standardDeviation) {
+            if (dev < 0) {
+                return 0.0;
+            } else {
+                return 1.0;
+            }
+        }
+        try {
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * Math.sqrt(2.0))));
+        } catch (MathException ex) {
+            if (x < mean) {
+                return 0.0;
+            } else {
+                return 1.0;
+            }
+        }
     }
\ No newline at end of file
