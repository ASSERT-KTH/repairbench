diff --git a/tmp/d4c2e5aa-5a18-447c-9588-28ee57de5834_buggy.java b/tmp/fb856d19-a658-4d02-ba94-e70fab501af7_fixed.java
index 1478ee1..ce4f4fd 100644
--- a/tmp/d4c2e5aa-5a18-447c-9588-28ee57de5834_buggy.java
+++ b/tmp/fb856d19-a658-4d02-ba94-e70fab501af7_fixed.java
@@ -1,24 +1,19 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
     // rescale both vectors without losing precision,
     // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    final double rho = (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z) / 
+                      (v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);
+    final double x   = v1.x - rho * v2.x;
+    final double y   = v1.y - rho * v2.y;
+    final double z   = v1.z - rho * v2.z;
+    
+    // compute cross product from (v1 - rho v2) and v2 instead of v1 and v2
+    return new Vector3D(y * v2.z - z * v2.y, 
+                        z * v2.x - x * v2.z, 
+                        x * v2.y - y * v2.x);
 }
\ No newline at end of file
