diff --git a/tmp/697ed6dc-ba05-4f03-8e5c-21b9f04e3623_buggy.java b/tmp/c09a4bd7-5f31-40d1-8bd6-fc5c770149d4_fixed.java
index 5f8ac1a..431d224 100644
--- a/tmp/697ed6dc-ba05-4f03-8e5c-21b9f04e3623_buggy.java
+++ b/tmp/c09a4bd7-5f31-40d1-8bd6-fc5c770149d4_fixed.java
@@ -1,34 +1,42 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
-
-        if (p1 != null && p1.equals(p2)) {
+        if (p1 == null) {
+            return -1;
+        }
+        if (p2 == null) {
+            return 1;
+        }
+        if (p1.equals(p2)) {
             return 0;
         }
 
+        // If pointers are from different trees, compare their identities
+        if (p1.getRootNode() != p2.getRootNode()) {
+            return System.identityHashCode(p1) - System.identityHashCode(p2);
+        }
+
         if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+            return p1.compareChildNodePointers(p1, p2);
         }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
