diff --git a/tmp/d407e01a-707b-4c68-985a-7583b91f384e_buggy.java b/tmp/3906fe46-ed61-4140-86d6-434d7c03ab5e_fixed.java
index 4b163f6..6cf1c35 100644
--- a/tmp/d407e01a-707b-4c68-985a-7583b91f384e_buggy.java
+++ b/tmp/3906fe46-ed61-4140-86d6-434d7c03ab5e_fixed.java
@@ -1,28 +1,31 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+        long remaining = numToSkip;
+        while (remaining > 0) {
+            long skipped = input.skip(remaining);
             if (skipped == 0) {
-                break;
+                // skip() returns 0, so we need to fall back to read()
+                if (input.read() == -1) {
+                    break; // EOF
                 }
-            numToSkip -= skipped;
+                skipped = 1;
             }
-            
-        return available - numToSkip;
+            remaining -= skipped;
+        }
+        return numToSkip - remaining;
     }
\ No newline at end of file
