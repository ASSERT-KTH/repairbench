diff --git a/tmp/dac848b3-1907-401c-86d4-4748e46ccdd1_buggy.java b/tmp/b04d0954-4c21-4a71-9bc0-641bb38308b4_fixed.java
index d57736b..2c4973d 100644
--- a/tmp/dac848b3-1907-401c-86d4-4748e46ccdd1_buggy.java
+++ b/tmp/b04d0954-4c21-4a71-9bc0-641bb38308b4_fixed.java
@@ -1,39 +1,36 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+    if (constraintObj != null && objType != null) {
+      // Handle record types
+      if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
+      // Also handle properties that might be missing in constraint
+      for (String prop : objType.getOwnPropertyNames()) {
+        if (!constraintObj.hasProperty(prop) && 
+            !objType.isPropertyTypeDeclared(prop)) {
+          objType.defineInferredProperty(
+              prop, 
+              getNativeType(UNKNOWN_TYPE), 
+              null);
+        }
+      }
     }
   }
\ No newline at end of file
