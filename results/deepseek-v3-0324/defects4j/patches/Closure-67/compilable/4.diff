diff --git a/tmp/f2e1e446-702b-44dc-ad8c-676ec75db24d_buggy.java b/tmp/c34441f6-cff7-4654-a5bf-764bdfdce5d7_fixed.java
index 939f49b..4dc7e51 100644
--- a/tmp/f2e1e446-702b-44dc-ad8c-676ec75db24d_buggy.java
+++ b/tmp/c34441f6-cff7-4654-a5bf-764bdfdce5d7_fixed.java
@@ -1,21 +1,30 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
         // We want to exclude the assignment itself from the usage list
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+          Node child = n.getFirstChild();
+          while (child.getType() == Token.GETPROP) {
+            Node propNode = child.getFirstChild().getNext();
+            if (propNode.getType() == Token.STRING &&
+                propNode.getString().equals("prototype")) {
+              return true;
+            }
+            child = child.getFirstChild();
+          }
+        } else {
+          Node propNode = n.getFirstChild().getNext();
+          if (propNode.getType() == Token.STRING &&
+              propNode.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
