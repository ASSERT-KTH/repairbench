diff --git a/tmp/e2628bab-26ec-4649-a38f-a47436557673_buggy.java b/tmp/419ebf1c-6389-4493-b711-69293a64cdbd_fixed.java
index d6a560a..2342cc6 100644
--- a/tmp/e2628bab-26ec-4649-a38f-a47436557673_buggy.java
+++ b/tmp/419ebf1c-6389-4493-b711-69293a64cdbd_fixed.java
@@ -1,33 +1,39 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for cycles first to prevent infinite recursion
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      return this;
+    }
+
+    // Try resolution via registry first
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // If not resolved via registry, try via properties
+    if (!isResolved()) {
       resolveViaProperties(t, enclosing);
+      
+      // Check for cycles again after property resolution
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this;
       }
 
       super.resolveInternal(t, enclosing);
       if (isResolved()) {
         finishPropertyContinuations();
       }
+    }
+    
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
