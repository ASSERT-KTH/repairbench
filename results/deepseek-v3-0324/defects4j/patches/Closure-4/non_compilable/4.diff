diff --git a/tmp/6fb04574-a0a8-4bbd-b73e-acb50753ccb7_buggy.java b/tmp/016b9816-6788-4641-93a5-39537f1d46ef_fixed.java
index d6a560a..a4af717 100644
--- a/tmp/6fb04574-a0a8-4bbd-b73e-acb50753ccb7_buggy.java
+++ b/tmp/016b9816-6788-4641-93a5-39537f1d46ef_fixed.java
@@ -1,33 +1,42 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for cycles before attempting resolution
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      return this;
+    }
+
+    // Try resolution via registry first
     boolean resolved = resolveViaRegistry(t, enclosing);
+    
+    if (resolved) {
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this;
       }
       
-    if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
+    // Fall back to resolution via properties
+    resolved = resolveViaProperties(t, enclosing);
+    
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this;
     }
 
+    if (resolved) {
       super.resolveInternal(t, enclosing);
-    if (isResolved()) {
       finishPropertyContinuations();
     }
+    
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
