diff --git a/tmp/fbf61bdd-365e-4321-b45b-ceb257d886f8_buggy.java b/tmp/d2c86a9a-f258-4f01-a724-55ec6b2bfd58_fixed.java
index b86c1ea..964bb24 100644
--- a/tmp/fbf61bdd-365e-4321-b45b-ceb257d886f8_buggy.java
+++ b/tmp/d2c86a9a-f258-4f01-a724-55ec6b2bfd58_fixed.java
@@ -1,38 +1,44 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                char ch1 = input.charAt(pos);
+                if (Character.isHighSurrogate(ch1) && pos + 1 < len) {
+                    char ch2 = input.charAt(pos + 1);
+                    if (Character.isLowSurrogate(ch2)) {
+                        out.write(ch1);
+                        out.write(ch2);
+                        pos++;
+                    } else {
+                        out.write(ch1);
                     }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+                } else {
+                    out.write(ch1);
+                }
+            } else {
+                // contract with translators is that they have to understand codepoints 
+                // and they just took care of a surrogate pair
                 for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
                     pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
-                    }
                 }
-                pos--;
+                continue;
             }
             pos++;
         }
     }
\ No newline at end of file
