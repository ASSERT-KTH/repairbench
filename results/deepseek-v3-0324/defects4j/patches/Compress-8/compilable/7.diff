diff --git a/tmp/9a2fca95-d7a8-4434-b55c-4655b5fd2544_buggy.java b/tmp/37bfdb3a-336b-457c-b4bc-1483917e5339_fixed.java
index e087f95..4c6b428 100644
--- a/tmp/9a2fca95-d7a8-4434-b55c-4655b5fd2544_buggy.java
+++ b/tmp/37bfdb3a-336b-457c-b4bc-1483917e5339_fixed.java
@@ -1,53 +1,52 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Length " + length + " must be at least 2");
+        }
+        
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
+                // Check if remaining bytes are all NUL
+                for (int j = i + 1; j < end; j++) {
+                    if (buffer[j] != 0) {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, start, currentByte));
+                    }
+                }
                 break;
             }
 
             // Skip leading spaces
             if (currentByte == (byte) ' ' || currentByte == '0') {
                 if (stillPadding) {
                     continue;
                 }
                 if (currentByte == (byte) ' ') {
+                    // Check if remaining bytes are all NUL or space
+                    for (int j = i + 1; j < end; j++) {
+                        if (buffer[j] != 0 && buffer[j] != ' ') {
+                            throw new IllegalArgumentException(
+                                    exceptionMessage(buffer, offset, length, start, currentByte));
+                        }
+                    }
                     break;
                 }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
