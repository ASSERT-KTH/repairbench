diff --git a/tmp/267aaab8-10d7-4a52-ae40-cf8c1572ba79_buggy.java b/tmp/ff3500fb-6019-4665-96c1-8db767122551_fixed.java
index 5abdeb5..c25072c 100644
--- a/tmp/267aaab8-10d7-4a52-ae40-cf8c1572ba79_buggy.java
+++ b/tmp/ff3500fb-6019-4665-96c1-8db767122551_fixed.java
@@ -1,29 +1,36 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Check if this is an LHS of an assignment
+            boolean isLhsOfAssignment = false;
+            Node ancestor = parent;
+            while (ancestor != null) {
+              if (ancestor.isAssign() && ancestor.getFirstChild() == n) {
+                isLhsOfAssignment = true;
+                break;
+              }
+              if (ancestor.isHook() || ancestor.isComma()) {
+                ancestor = ancestor.getParent();
+              } else {
+                break;
+              }
+            }
+            
+            if (!isLhsOfAssignment) {
               numUsesWithinCfgNode++;
             }
           }
-
+        }
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
