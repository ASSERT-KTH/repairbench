diff --git a/tmp/5e609088-028d-43d9-bb43-6acaa17ce2bd_buggy.java b/tmp/346ce3d8-397d-4fc0-96c2-2ea0077ad0ad_fixed.java
index 5abdeb5..cd15fd8 100644
--- a/tmp/5e609088-028d-43d9-bb43-6acaa17ce2bd_buggy.java
+++ b/tmp/346ce3d8-397d-4fc0-96c2-2ea0077ad0ad_fixed.java
@@ -1,29 +1,32 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
               !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+               (parent.getFirstChild() == n)) &&
+              // Don't count lhs of assignments within hook expressions
+              !(parent.isHook() && 
+               parent.getFirstChild().isAssign() &&
+               parent.getFirstChild().getFirstChild() == n)) {
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
