diff --git a/tmp/386eb5d2-cf81-4a54-b0ae-530e41b98733_buggy.java b/tmp/2530efc7-639e-466c-8b75-5b8085e8be33_fixed.java
index 98d89dc..ed9848f 100644
--- a/tmp/386eb5d2-cf81-4a54-b0ae-530e41b98733_buggy.java
+++ b/tmp/2530efc7-639e-466c-8b75-5b8085e8be33_fixed.java
@@ -1,23 +1,30 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            // Special handling for NaN comparisons
+            if (evaluateCompare(0) == Boolean.TRUE) { // Equality check
+                return Double.isNaN(ld) && Double.isNaN(rd);
+            }
+            return false; // All other comparisons with NaN return false
+        }
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
\ No newline at end of file
