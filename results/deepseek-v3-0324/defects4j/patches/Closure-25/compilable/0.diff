diff --git a/tmp/e7923caf-18a3-4ba1-8ef7-dbeff28564ef_buggy.java b/tmp/3bee52eb-5cf6-4074-a491-4355078ad452_fixed.java
index b98f0a7..fc8ac5a 100644
--- a/tmp/e7923caf-18a3-4ba1-8ef7-dbeff28564ef_buggy.java
+++ b/tmp/3bee52eb-5cf6-4074-a491-4355078ad452_fixed.java
@@ -1,29 +1,44 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Handle parameter type inference
+          Node arg = constructor.getNext();
+          Node param = ct.getParametersNode().getFirstChild();
+          while (arg != null && param != null) {
+            JSType paramType = param.getJSType();
+            if (paramType != null) {
+              arg.setJSType(paramType);
+            }
+            scope = traverse(arg, scope);
+            arg = arg.getNext();
+            param = param.getNext();
+          }
+          // Traverse remaining arguments
+          while (arg != null) {
+            scope = traverse(arg, scope);
+            arg = arg.getNext();
+          }
+          n.setJSType(type);
+          return scope;
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
