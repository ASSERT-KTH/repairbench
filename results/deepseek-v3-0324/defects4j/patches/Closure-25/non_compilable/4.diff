diff --git a/tmp/66ce6c21-9c1d-453c-acd2-a5c16d6840af_buggy.java b/tmp/0cca6aaf-bb89-4d2e-a511-4a162468c465_fixed.java
index b98f0a7..054a47d 100644
--- a/tmp/66ce6c21-9c1d-453c-acd2-a5c16d6840af_buggy.java
+++ b/tmp/0cca6aaf-bb89-4d2e-a511-4a162468c465_fixed.java
@@ -1,29 +1,38 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Propagate parameter types to arguments
+          Node arg = constructor.getNext();
+          Iterator<Node> params = ct.getParameters().iterator();
+          while (arg != null && params.hasNext()) {
+            JSType paramType = params.next().getJSType();
+            if (paramType != null) {
+              scope = inferPropertyTypesToMatchConstraint(
+                  arg.getJSType(), paramType, scope);
+              arg.setJSType(scope.getType(arg));
+            }
+            arg = arg.getNext();
+          }
         }
       }
     }
     n.setJSType(type);
+    // Traverse any remaining arguments
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
