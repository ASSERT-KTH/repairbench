diff --git a/tmp/667ea1b8-218a-4e44-9201-81a103ac6d29_buggy.java b/tmp/bc1f2894-45d6-4cbd-b5c8-75daa894d27b_fixed.java
index b98f0a7..26ce1ae 100644
--- a/tmp/667ea1b8-218a-4e44-9201-81a103ac6d29_buggy.java
+++ b/tmp/bc1f2894-45d6-4cbd-b5c8-75daa894d27b_fixed.java
@@ -1,29 +1,38 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Backwards inference: propagate parameter types to arguments
+          Node args = constructor.getNext();
+          if (args != null) {
+            FunctionParamBuilder paramBuilder = new FunctionParamBuilder(ct);
+            int argIndex = 0;
+            for (Node arg = args; arg != null; arg = arg.getNext()) {
+              if (argIndex < paramBuilder.getParameterCount()) {
+                JSType paramType = paramBuilder.getParameterType(argIndex);
+                if (paramType != null) {
+                  arg.setJSType(paramType);
                 }
               }
-    }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
               scope = traverse(arg, scope);
+              argIndex++;
             }
+          }
+        }
+      }
+    }
+    n.setJSType(type);
     return scope;
   }
\ No newline at end of file
