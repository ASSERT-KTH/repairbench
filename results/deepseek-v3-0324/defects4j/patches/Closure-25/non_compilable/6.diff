diff --git a/tmp/ca7ddb01-ab42-4a4e-8594-31793897a794_buggy.java b/tmp/139f3345-b3a8-4f7c-957f-ed6545c26356_fixed.java
index b98f0a7..3fe2435 100644
--- a/tmp/ca7ddb01-ab42-4a4e-8594-31793897a794_buggy.java
+++ b/tmp/139f3345-b3a8-4f7c-957f-ed6545c26356_fixed.java
@@ -1,29 +1,41 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Handle parameter type inference
+          Node args = constructor.getNext();
+          if (args != null) {
+            FunctionParamBuilder paramBuilder = new FunctionParamBuilder(ct);
+            if (paramBuilder.hasKnownType()) {
+              Iterator<Node> arguments = args.children().iterator();
+              Iterator<JSType> parameters = paramBuilder.build().getTypes().iterator();
+              while (arguments.hasNext() && parameters.hasNext()) {
+                Node arg = arguments.next();
+                JSType paramType = parameters.next();
+                if (paramType != null) {
+                  scope.inferQualifiedSlot(arg, arg, paramType, paramType);
+                }
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
