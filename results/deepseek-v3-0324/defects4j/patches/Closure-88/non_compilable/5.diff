diff --git a/tmp/e312e442-490e-4cd6-84ad-bb51d080a0b4_buggy.java b/tmp/1c2b51ae-21e2-444f-a7b9-ee0e4f1bd4cb_fixed.java
index 9353941..1ae3ce6 100644
--- a/tmp/e312e442-490e-4cd6-84ad-bb51d080a0b4_buggy.java
+++ b/tmp/1c2b51ae-21e2-444f-a7b9-ee0e4f1bd4cb_fixed.java
@@ -1,30 +1,38 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
+          // For logical AND, we need to consider both sides since the RHS is only
+          // evaluated if the LHS is true
+          if (n.isAnd() && child.getNext() != null) {
+            VariableLiveness nextState = isVariableReadBeforeKill(child.getNext(), variable);
+            if (nextState == VariableLiveness.READ) {
+              return VariableLiveness.READ;
+            }
+          }
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
