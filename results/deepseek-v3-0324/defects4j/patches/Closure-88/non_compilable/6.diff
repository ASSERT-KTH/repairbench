diff --git a/tmp/a5d5034f-4974-4402-80c2-7d8826e4d3c3_buggy.java b/tmp/1d7e69ab-07e1-4842-ad46-2c59e8d268a4_fixed.java
index 9353941..ae176f7 100644
--- a/tmp/a5d5034f-4974-4402-80c2-7d8826e4d3c3_buggy.java
+++ b/tmp/1d7e69ab-07e1-4842-ad46-2c59e8d268a4_fixed.java
@@ -1,30 +1,43 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
+        // For binary operators, we need to check if there was a read before
+        // this assignment in the same expression.
+        Node parent = n.getParent();
+        if (parent.isAnd() || parent.isOr() || parent.isAdd() || 
+            parent.isSub() || parent.isMul() || parent.isDiv()) {
+          // Check if this is the right side of a binary operation
+          if (parent.getLastChild() == n) {
+            Node firstChild = parent.getFirstChild();
+            if (firstChild != n && NodeUtil.mayEffectMutableState(firstChild)) {
+              return VariableLiveness.READ;
+            }
+          }
+        }
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
