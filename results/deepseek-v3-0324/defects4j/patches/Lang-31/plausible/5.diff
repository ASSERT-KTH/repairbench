diff --git a/tmp/8b343711-4a85-4e1a-b03c-c16a5f901b67_buggy.java b/tmp/6b14d3d9-850b-4772-a977-56e3c72b5d07_fixed.java
index eea9e73..29a69ae 100644
--- a/tmp/8b343711-4a85-4e1a-b03c-c16a5f901b67_buggy.java
+++ b/tmp/6b14d3d9-850b-4772-a977-56e3c72b5d07_fixed.java
@@ -1,41 +1,49 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
     public static boolean containsAny(CharSequence cs, char[] searchChars) {
         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
             return false;
         }
         int csLength = cs.length();
         int searchLength = searchChars.length;
         for (int i = 0; i < csLength; i++) {
             char ch = cs.charAt(i);
             for (int j = 0; j < searchLength; j++) {
                 if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+                    if (Character.isHighSurrogate(ch)) {
+                        if (j == searchLength - 1) {
+                            // missing low surrogate, so no match
+                            continue;
+                        }
+                        if (i < csLength - 1 && searchChars[j + 1] == cs.charAt(i + 1)) {
                             return true;
                         }
+                    } else {
+                        return true;
+                    }
+                }
             }
         }
         return false;
     }
\ No newline at end of file
