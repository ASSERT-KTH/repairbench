diff --git a/tmp/ec0c5be0-2395-4cd8-a94f-58ef8befeac4_buggy.java b/tmp/7de4b426-a5fc-4529-baa7-dbf33faf3ada_fixed.java
index eea9e73..c75dd2e 100644
--- a/tmp/ec0c5be0-2395-4cd8-a94f-58ef8befeac4_buggy.java
+++ b/tmp/7de4b426-a5fc-4529-baa7-dbf33faf3ada_fixed.java
@@ -1,41 +1,28 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
     public static boolean containsAny(CharSequence cs, char[] searchChars) {
         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
             return false;
         }
         int csLength = cs.length();
         int searchLength = searchChars.length;
         for (int i = 0; i < csLength; i++) {
             char ch = cs.charAt(i);
             for (int j = 0; j < searchLength; j++) {
                 if (searchChars[j] == ch) {
-						// ch is a supplementary character
+                    // Check if we're dealing with a supplementary character
+                    if (Character.isHighSurrogate(ch)) {
+                        if (j == searchLength - 1) {
+                            // missing the low surrogate, so this is not a match
+                            continue;
+                        }
+                        if (i < csLength - 1 && searchChars[j + 1] == cs.charAt(i + 1)) {
+                            return true;
+                        }
+                    } else if (!Character.isLowSurrogate(ch)) {
                         // ch is in the Basic Multilingual Plane
                         return true;
                     }
                 }
             }
+        }
         return false;
     }
\ No newline at end of file
