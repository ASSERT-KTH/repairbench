diff --git a/tmp/6baca078-d144-47b9-ae9e-298137f650ba_buggy.java b/tmp/62e7826a-6fbc-43bb-803e-c2634a8e08b8_fixed.java
index 544303b..90ab3a9 100644
--- a/tmp/6baca078-d144-47b9-ae9e-298137f650ba_buggy.java
+++ b/tmp/62e7826a-6fbc-43bb-803e-c2634a8e08b8_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
             // if multiple variables can take a given value 
             // then we choose the first and set the rest equal to 0
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+                    if (tableau.getEntry(basicRow, j) == 1 && 
+                        coefficients[j - getNumObjectiveFunctions()] != 0) {
                          coefficients[i] = 0;
                     }
                 }
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
