diff --git a/tmp/c6da9cc3-d9bb-46cf-9252-8c2ed6833a49_buggy.java b/tmp/29541324-1a37-4660-9660-976be889007a_fixed.java
index 10616db..cadc110 100644
--- a/tmp/c6da9cc3-d9bb-46cf-9252-8c2ed6833a49_buggy.java
+++ b/tmp/29541324-1a37-4660-9660-976be889007a_fixed.java
@@ -1,19 +1,45 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
+        
+        // Handle month addition specially to maintain day-of-month where possible
+        if (partial instanceof MonthDay) {
+            int month = values[0];
+            int day = values[1];
+            
+            if (fieldIndex == 0) { // adding to month field
+                // Calculate new month (1-12)
+                int newMonth = ((month - 1 + valueToAdd) % 12 + 12) % 12 + 1;
+                
+                // Adjust day if needed (e.g., Feb 29 -> Mar 29)
+                int maxDay = iChronology.dayOfMonth().getMaximumValue(newMonth, 
+                    iChronology.year().get(DateTimeUtils.currentTimeMillis()));
+                if (day > maxDay) {
+                    day = maxDay;
+                }
+                
+                return new int[] {newMonth, day};
+            } else if (fieldIndex == 1) { // adding to day field
+                // Convert to instant and add days
+                long instant = 0L;
+                instant = partial.getFieldType(0).getField(iChronology).set(instant, values[0]);
+                instant = partial.getFieldType(1).getField(iChronology).set(instant, values[1]);
+                instant = add(instant, valueToAdd);
+                return iChronology.get(partial, instant);
+            }
+        }
+        
+        // Default handling for other cases
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
