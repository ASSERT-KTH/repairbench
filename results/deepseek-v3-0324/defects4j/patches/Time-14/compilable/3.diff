diff --git a/tmp/d4ed64f0-5ca4-487e-81b6-af57f7fd2de0_buggy.java b/tmp/5750765c-fca1-4684-8845-4fe74c9cb974_fixed.java
index 10616db..b22fced 100644
--- a/tmp/d4ed64f0-5ca4-487e-81b6-af57f7fd2de0_buggy.java
+++ b/tmp/5750765c-fca1-4684-8845-4fe74c9cb974_fixed.java
@@ -1,19 +1,36 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
+        
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+            
+            // Handle leap day cases
+            if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear()) {
+                // When adding months, we want to preserve the day if possible
                 instant = add(instant, valueToAdd);
+                // Get the new month-day combination
+                int newMonth = iChronology.monthOfYear().get(instant);
+                int newDay = iChronology.dayOfMonth().get(instant);
+                // If original was Feb 29, adjust to last day of month if needed
+                if (values[0] == 2 && values[1] == 29 && newDay < 29) {
+                    instant = iChronology.dayOfMonth().set(instant, 
+                        iChronology.dayOfMonth().getMaximumValue(instant));
+                }
+            } else {
+                // For day additions, just do normal addition
+                instant = add(instant, valueToAdd);
+            }
+            
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
