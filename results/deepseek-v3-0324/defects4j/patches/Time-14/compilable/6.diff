diff --git a/tmp/1be4aba5-c149-4332-8219-96ef7a544762_buggy.java b/tmp/59aba7e7-6c56-4d92-a47d-cf32ac072365_fixed.java
index 10616db..8f5409d 100644
--- a/tmp/1be4aba5-c149-4332-8219-96ef7a544762_buggy.java
+++ b/tmp/59aba7e7-6c56-4d92-a47d-cf32ac072365_fixed.java
@@ -1,19 +1,35 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
+        
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+            
+            // Handle leap day cases specially
+            if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear() && 
+                partial.get(DateTimeFieldType.dayOfMonth()) == 29 && 
+                partial.get(DateTimeFieldType.monthOfYear()) == 2) {
+                instant = iChronology.monthOfYear().add(instant, valueToAdd);
+                // Adjust to last day of month if needed
+                int newMonth = iChronology.monthOfYear().get(instant);
+                int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);
+                if (maxDay < 29) {
+                    instant = iChronology.dayOfMonth().set(instant, maxDay);
+                }
+                return iChronology.get(partial, instant);
+            }
+            
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
