diff --git a/tmp/e4556592-cb6f-4bc7-8818-1411961d0f10_buggy.java b/tmp/e3568ace-6841-4a3a-b929-fe5126118ff5_fixed.java
index b5d94e0..945e587 100644
--- a/tmp/e4556592-cb6f-4bc7-8818-1411961d0f10_buggy.java
+++ b/tmp/e3568ace-6841-4a3a-b929-fe5126118ff5_fixed.java
@@ -1,26 +1,33 @@
 private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
     if (!shouldVisit(node)) {
         return;
     }
 
     int visits = 0;
     do {
+        // Save the current state before visiting children
+        boolean changed = false;
+        if (node.hasChildren()) {
             Node c = node.getFirstChild();
             while (c != null) {
+                // Remember if any changes were made during traversal
+                int beforeChange = getChangeCount();
                 traverse(c);
-        Node next = c.getNext();
-        c = next;
+                changed |= (beforeChange != getChangeCount());
+                c = c.getNext();
+            }
         }
 
         visit(node);
         visits++;
 
-      Preconditions.checkState(visits < 10000, "too many interations");
+        // Only retraverse if something changed during this pass
+        if (!changed) {
+            break;
+        }
+
+        Preconditions.checkState(visits < 10000, "too many iterations");
     } while (shouldRetraverse(node));
 
     exitNode(node);
 }
\ No newline at end of file
