diff --git a/tmp/487c95e4-a7d6-4f51-bc1a-14259a95c139_buggy.java b/tmp/3b560940-815e-4a69-a92f-be105baec00e_fixed.java
index 5f96616..786270c 100644
--- a/tmp/487c95e4-a7d6-4f51-bc1a-14259a95c139_buggy.java
+++ b/tmp/3b560940-815e-4a69-a92f-be105baec00e_fixed.java
@@ -1,20 +1,19 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+  // Handle the case where the constraint object is a record type or a union
+  // type that contains record types.
+  if (constraint.isUnionType()) {
+    for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+      if (alt.isRecordType()) {
+        matchRecordTypeConstraint(alt.toObjectType());
+      }
+    }
+  } else if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
