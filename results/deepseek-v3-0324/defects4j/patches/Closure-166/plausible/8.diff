diff --git a/tmp/22421ce8-232c-43d3-8b3c-659878e0816e_buggy.java b/tmp/e64e86cb-8925-4865-ac47-002becf26c0d_fixed.java
index 5f96616..5503192 100644
--- a/tmp/22421ce8-232c-43d3-8b3c-659878e0816e_buggy.java
+++ b/tmp/e64e86cb-8925-4865-ac47-002becf26c0d_fixed.java
@@ -1,20 +1,26 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
+    // Handle the case where the constraint object is or contains a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
+    if (constraint.isUnionType()) {
+      for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+        if (alt.isRecordType()) {
+          matchRecordTypeConstraint(alt.toObjectType());
+        }
+      }
+    } else if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
