diff --git a/tmp/2c2b1703-db20-48e1-b2fd-05f1523a1953_buggy.java b/tmp/3bc28963-2a8d-4780-a6e3-f056c2ec7554_fixed.java
index c51c8b1..2f2216f 100644
--- a/tmp/2c2b1703-db20-48e1-b2fd-05f1523a1953_buggy.java
+++ b/tmp/3bc28963-2a8d-4780-a6e3-f056c2ec7554_fixed.java
@@ -1,31 +1,32 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+          // For normal assignments, always record the dependency on the name node
+          // rather than the recordNode (caller) when it's a function assignment
+          // that's being called immediately.
+          if (parent.isCall() && parent.getFirstChild() == n) {
+            recordDepScope(nameNode, ns);
+          } else {
             recordDepScope(recordNode, ns);
           }
         }
       }
+    }
\ No newline at end of file
