diff --git a/tmp/008d1eb7-5dac-4c22-bb54-882aad8e132f_buggy.java b/tmp/eb7c4d03-abb2-4531-b7df-7042f418935a_fixed.java
index 227a4ef..61da755 100644
--- a/tmp/008d1eb7-5dac-4c22-bb54-882aad8e132f_buggy.java
+++ b/tmp/eb7c4d03-abb2-4531-b7df-7042f418935a_fixed.java
@@ -1,48 +1,56 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
+            String nextLine = padding + text.substring(pos).trim();
             int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            pos = findWrapPos(nextLine, width, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
-
+                sb.append(nextLine);
                 return sb;
-            } else
-            if (pos == lastPos)
+            }
+            else if (pos == lastPos)
+            {
+                // If no wrap position found and we're stuck, force a break at width
+                sb.append(nextLine.substring(0, width)).append(defaultNewLine);
+                nextLine = padding + nextLine.substring(width).trim();
+                if (nextLine.length() <= width)
                 {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                    sb.append(nextLine);
+                    return sb;
+                }
+                pos = 0;
+                continue;
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            sb.append(rtrim(nextLine.substring(0, pos))).append(defaultNewLine);
+            pos += padding.length(); // adjust for padding in next iteration
         }
     }
\ No newline at end of file
