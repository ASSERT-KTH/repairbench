diff --git a/tmp/8f09bf72-ba61-48ab-b1f0-d9974c36cae5_buggy.java b/tmp/7ca91f2c-6d12-4526-b83f-1ae0d019366a_fixed.java
index 8e93a5e..28faf5a 100644
--- a/tmp/8f09bf72-ba61-48ab-b1f0-d9974c36cae5_buggy.java
+++ b/tmp/7ca91f2c-6d12-4526-b83f-1ae0d019366a_fixed.java
@@ -1,43 +1,44 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            text = padding + text.substring(pos).trim();
+            String remaining = text.substring(pos).trim();
+            // Check if the remaining text contains newlines
+            int nlPos = remaining.indexOf(defaultNewLine);
+            if (nlPos == -1)
+            {
+                text = padding + remaining;
                 pos = findWrapPos(text, width, nextLineTabStop);
 
                 if (pos == -1)
                 {
                     sb.append(text);
-
                     return sb;
                 }
-
                 sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
             }
+            else
+            {
+                // Handle the text before newline
+                String line = padding + remaining.substring(0, nlPos);
+                sb.append(line).append(defaultNewLine);
+                // Process remaining text after newline
+                text = remaining.substring(nlPos + defaultNewLine.length());
+                pos = 0;
+            }
+        }
     }
\ No newline at end of file
