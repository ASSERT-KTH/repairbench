diff --git a/tmp/97edac67-c6d1-4981-a6fc-34afff86177f_buggy.java b/tmp/03fbf363-e657-4720-9630-8379a58a3f1a_fixed.java
index 8e93a5e..8b56ba2 100644
--- a/tmp/97edac67-c6d1-4981-a6fc-34afff86177f_buggy.java
+++ b/tmp/03fbf363-e657-4720-9630-8379a58a3f1a_fixed.java
@@ -1,43 +1,45 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        int pos = 0;
+        int nextPos = 0;
+        String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
+            int textLength = text.length();
+            boolean hasNewline = false;
+            
+            // Check for existing newlines
+            int nlPos = text.indexOf(defaultNewLine);
+            if (nlPos != -1 && nlPos < width)
+            {
+                pos = nlPos;
+                hasNewline = true;
+            }
+            else
+            {
+                pos = findWrapPos(text, width, nextPos);
+            }
+
+            if (pos == -1)
+            {
+                sb.append(rtrim(text));
+                return sb;
+            }
+
+            sb.append(rtrim(text.substring(0, pos)));
+            if (hasNewline)
+            {
+                sb.append(defaultNewLine);
+                nextPos = 0;
+                text = padding + text.substring(pos + defaultNewLine.length()).trim();
+            }
+            else
+            {
+                sb.append(defaultNewLine);
+                nextPos = nextLineTabStop;
                 text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
             }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
