diff --git a/tmp/e6051046-03de-44ab-9a43-a1eb746e90b8_buggy.java b/tmp/3e2da567-3ab4-43e9-beb0-ef07ecf23315_fixed.java
index cd412d2..e70b6a3 100644
--- a/tmp/e6051046-03de-44ab-9a43-a1eb746e90b8_buggy.java
+++ b/tmp/3e2da567-3ab4-43e9-beb0-ef07ecf23315_fixed.java
@@ -1,76 +1,108 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
          */
 
         /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
          * quite simple because we already set date format timezone to be
          * GMT, and hence can just strip out 'Z' altogether
          */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
         // [JACKSON-200]: need to support "plain" date...
         if (len <= 10 && Character.isDigit(c)) {
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
         } else if (c == 'Z') {
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
             // [JACKSON-334]: may be missing milliseconds... if so, add
             if (dateStr.charAt(len-4) == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len-1, ".000");
                 dateStr = sb.toString();
             }
         } else {
             // Let's see if we have timezone indicator or not...
             if (hasTimeZone(dateStr)) {
                 c = dateStr.charAt(len-3);
                 if (c == ':') { // remove optional colon
                     // remove colon
                     StringBuilder sb = new StringBuilder(dateStr);
                     sb.delete(len-3, len-2);
                     dateStr = sb.toString();
+                    len = dateStr.length();
                 } else if (c == '+' || c == '-') { // missing minutes
                     // let's just append '00'
                     dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
                     len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+                }
+                
+                // Handle missing seconds and partial milliseconds
+                int timeSeparator = dateStr.indexOf('T');
+                if (timeSeparator > 0) {
+                    int timePartLength = len - timeSeparator - 1;
+                    int timezonePos = dateStr.indexOf('+', timeSeparator);
+                    if (timezonePos < 0) {
+                        timezonePos = dateStr.indexOf('-', timeSeparator);
+                    }
+                    if (timezonePos > 0) {
+                        String timePart = dateStr.substring(timeSeparator + 1, timezonePos);
+                        String[] parts = timePart.split(":");
                         StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                        
+                        if (parts.length == 2) { // missing seconds
+                            sb.insert(timezonePos, ":00");
+                        }
+                        
+                        // Handle partial milliseconds
+                        int dotPos = timePart.indexOf('.');
+                        if (dotPos > 0) {
+                            int millisEnd = timePart.indexOf('+', dotPos);
+                            if (millisEnd < 0) {
+                                millisEnd = timePart.indexOf('-', dotPos);
+                            }
+                            if (millisEnd < 0) {
+                                millisEnd = timePart.length();
+                            }
+                            String millis = timePart.substring(dotPos + 1, millisEnd);
+                            if (millis.length() < 3) {
+                                sb.replace(timeSeparator + 1 + dotPos + 1, 
+                                           timeSeparator + 1 + millisEnd, 
+                                           String.format("%-3s", millis).replace(' ', '0'));
+                            }
+                        }
                         dateStr = sb.toString();
                     }
+                }
+                
                 df = _formatISO8601;
                 if (_formatISO8601 == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
             } else {
                 // If not, plain date. Easiest to just patch 'Z' in the end?
                 StringBuilder sb = new StringBuilder(dateStr);
                 // And possible also millisecond part if missing
                 int timeLen = len - dateStr.lastIndexOf('T') - 1;
                 if (timeLen <= 8) {
                     sb.append(".000");
                 }
                 sb.append('Z');
                 dateStr = sb.toString();
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
             }
         }
         return df.parse(dateStr, pos);
     }
\ No newline at end of file
