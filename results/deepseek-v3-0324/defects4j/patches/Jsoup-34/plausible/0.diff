diff --git a/tmp/98f88abc-fceb-45a6-a4b0-93e37aab1e8c_buggy.java b/tmp/f67097c6-ec4b-4f06-8446-1db14f03e689_fixed.java
index 21f64c6..6ea0940 100644
--- a/tmp/98f88abc-fceb-45a6-a4b0-93e37aab1e8c_buggy.java
+++ b/tmp/f67097c6-ec4b-4f06-8446-1db14f03e689_fixed.java
@@ -1,23 +1,31 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while(++offset < length && startChar != input[offset]);
+            if (offset >= length) // check if we went past the end
+                return -1;
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (last > length) // check if sequence would go past end
+                continue;
+            boolean found = true;
+            for (int j = 1; i < last; i++, j++) {
+                if (seq.charAt(j) != input[i]) {
+                    found = false;
+                    break;
+                }
+            }
+            if (found) // found full sequence
                 return offset - pos;
         }
-        }
         return -1;
     }
\ No newline at end of file
