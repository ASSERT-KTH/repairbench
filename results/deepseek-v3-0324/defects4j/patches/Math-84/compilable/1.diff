diff --git a/tmp/761f5408-5be0-4349-8051-9716a5ae8e3e_buggy.java b/tmp/e3a982e4-c6cb-4ddf-a3df-0392a9e4004d_fixed.java
index 5f1dcf2..6d21794 100644
--- a/tmp/761f5408-5be0-4349-8051-9716a5ae8e3e_buggy.java
+++ b/tmp/e3a982e4-c6cb-4ddf-a3df-0392a9e4004d_fixed.java
@@ -1,41 +1,44 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+                simplex = simplex;
+            } else {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
             return;
-
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            return;
+        }
 
         // check convergence
-                return;
+        final RealPointValuePair[] simplex = this.simplex;
+        int j = 0;
+        for (int i = 1; i < simplex.length; ++i) {
+            if (comparator.compare(simplex[i], simplex[j]) < 0) {
+                j = i;
             }
-
         }
+        this.simplex[j] = best;
 
     }
\ No newline at end of file
