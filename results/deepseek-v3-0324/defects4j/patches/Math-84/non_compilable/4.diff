diff --git a/tmp/7df071f9-ce22-4bde-b867-5f96c78f5d06_buggy.java b/tmp/e96fde4d-7394-4cd6-a686-4f6819607371_fixed.java
index 5f1dcf2..5befcbe 100644
--- a/tmp/7df071f9-ce22-4bde-b867-5f96c78f5d06_buggy.java
+++ b/tmp/e96fde4d-7394-4cd6-a686-4f6819607371_fixed.java
@@ -1,41 +1,45 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+                simplex = simplex;
+            } else {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
             return;
-
         }
 
-            // compute the contracted simplex
+        // perform a contraction step
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
             return;
         }
 
+        // perform a reduction step
+        for (int i = 1; i < original.length; ++i) {
+            double[] x = original[i].getPointRef();
+            double[] x0 = original[0].getPointRef();
+            for (int j = 0; j < x.length; ++j) {
+                x[j] = x0[j] + sigma * (x[j] - x0[j]);
+            }
+            simplex[i] = new RealPointValuePair(x, Double.NaN, false);
         }
-
     }
\ No newline at end of file
