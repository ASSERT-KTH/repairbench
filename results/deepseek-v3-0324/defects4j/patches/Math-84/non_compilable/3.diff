diff --git a/tmp/0b05c8f2-6d9b-48a4-ac9f-96740e58388b_buggy.java b/tmp/1b05ac0b-456b-46b6-b4c4-f756ef380953_fixed.java
index 5f1dcf2..5577760 100644
--- a/tmp/0b05c8f2-6d9b-48a4-ac9f-96740e58388b_buggy.java
+++ b/tmp/1b05ac0b-456b-46b6-b4c4-f756ef380953_fixed.java
@@ -1,41 +1,38 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            final RealPointValuePair[] reflectedSimplex = simplex.clone();
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
                 simplex = reflectedSimplex;
             }
-
             return;
-
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            return;
+        }
 
         // check convergence
+        final RealPointValuePair[] simplex = getSimplex();
+        if (getConvergenceChecker().converged(getIterations(), best, simplex[0])) {
             return;
         }
-
-        }
-
     }
\ No newline at end of file
