diff --git a/tmp/792bbd48-a4d4-4de9-b955-b6d689a8a733_buggy.java b/tmp/886277c1-0425-4e61-82a2-c24b1c0e42c1_fixed.java
index fb2b020..de6ad06 100644
--- a/tmp/792bbd48-a4d4-4de9-b955-b6d689a8a733_buggy.java
+++ b/tmp/886277c1-0425-4e61-82a2-c24b1c0e42c1_fixed.java
@@ -1,27 +1,35 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
+                    if (propType.isObjectType() && propType.toObjectType().isRecordType()) {
+                        // If the property type is itself a record type, we need to create
+                        // a matching anonymous object type for it
+                        ObjectType objType = createAnonymousObjectType();
+                        objType.matchConstraint(propType.toObjectType());
+                        typeToInfer = objType;
+                    } else {
                         typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                     }
+                }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
