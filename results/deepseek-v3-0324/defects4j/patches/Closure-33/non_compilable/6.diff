diff --git a/tmp/688cbf77-0742-4c38-a201-4f87305bfd1a_buggy.java b/tmp/1f0d2935-dae6-424f-8676-8b2bda389362_fixed.java
index fb2b020..bf0b64a 100644
--- a/tmp/688cbf77-0742-4c38-a201-4f87305bfd1a_buggy.java
+++ b/tmp/1f0d2935-dae6-424f-8676-8b2bda389362_fixed.java
@@ -1,27 +1,36 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
+                    if (propType.isRecordType()) {
+                        // If the property type is itself a record, we need to create
+                        // a matching object literal with the same structure
+                        ObjectType objType = createObjectTypeWithProperty(prop, propType);
+                        defineInferredProperty(prop, objType, null);
+                    } else {
                         typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
+                        defineInferredProperty(prop, typeToInfer, null);
                     }
+                } else {
                     defineInferredProperty(prop, typeToInfer, null);
                 }
             }
         }
     }
+}
\ No newline at end of file
