diff --git a/tmp/c30b5852-ae08-4ab8-bf46-fae4ea5c3740_buggy.java b/tmp/3287dcec-a411-4f67-b47c-8b2d9356f20c_fixed.java
index fb2b020..3c6c60f 100644
--- a/tmp/c30b5852-ae08-4ab8-bf46-fae4ea5c3740_buggy.java
+++ b/tmp/3287dcec-a411-4f67-b47c-8b2d9356f20c_fixed.java
@@ -1,27 +1,34 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
+                    if (propType.isRecordType()) {
+                        // For record types, we need to create a matching record
+                        ObjectType newObj = createObjectType();
+                        newObj.matchConstraint(propType.toObjectType());
+                        typeToInfer = newObj;
+                    } else {
                         typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                     }
+                }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
