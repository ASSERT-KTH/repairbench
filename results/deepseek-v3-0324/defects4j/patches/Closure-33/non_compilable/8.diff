diff --git a/tmp/3379be8e-c747-4b5d-9116-c5d5174c6fb1_buggy.java b/tmp/ef295271-5198-4787-be86-3b684442dd71_fixed.java
index fb2b020..e4dfdcb 100644
--- a/tmp/3379be8e-c747-4b5d-9116-c5d5174c6fb1_buggy.java
+++ b/tmp/ef295271-5198-4787-be86-3b684442dd71_fixed.java
@@ -1,27 +1,35 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
+            if (propType.isRecordType()) {
+              // If the property is itself a record type, we need to create
+              // a matching object type with the same structure
+              ObjectType objType = createObjectType(this, prop);
+              objType.matchConstraint((ObjectType) propType);
+              typeToInfer = objType;
+            } else {
               typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                   .getLeastSupertype(propType);
             }
+          }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
