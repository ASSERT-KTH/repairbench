diff --git a/tmp/097fc3b3-dd6c-47d8-bf52-449dd57fb59b_buggy.java b/tmp/7803c251-fde6-43dc-8182-85f70a071051_fixed.java
index fb2b020..c1139f9 100644
--- a/tmp/097fc3b3-dd6c-47d8-bf52-449dd57fb59b_buggy.java
+++ b/tmp/7803c251-fde6-43dc-8182-85f70a071051_fixed.java
@@ -1,27 +1,35 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
+                    if (propType.isRecordType()) {
+                        // Handle nested record types
+                        ObjectType objType = ObjectType.cast(propType);
+                        if (objType != null) {
+                            matchConstraint(objType);
+                        }
+                    } else {
                         typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                     }
+                }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
