diff --git a/tmp/6dc65742-ed40-4ef0-bb30-c0d969f798b5_buggy.java b/tmp/cc6f9be4-ac61-4f3e-92e5-3e683f2bb55b_fixed.java
index 139579d..f75d7b2 100644
--- a/tmp/6dc65742-ed40-4ef0-bb30-c0d969f798b5_buggy.java
+++ b/tmp/cc6f9be4-ac61-4f3e-92e5-3e683f2bb55b_fixed.java
@@ -1,43 +1,54 @@
     // performance sensitive
     public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
+        // case-insensitive check for class attribute key
+        String classAttr = null;
+        for (Map.Entry<String, String> entry : attributes.entrySet()) {
+            if (entry.getKey().equalsIgnoreCase("class")) {
+                classAttr = entry.getValue();
+                break;
+            }
+        }
+        if (classAttr == null) {
+            return false;
+        }
+
         final int len = classAttr.length();
         final int wantLen = className.length();
 
         if (len == 0 || len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
         // check the last entry
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
         return false;
     }
\ No newline at end of file
