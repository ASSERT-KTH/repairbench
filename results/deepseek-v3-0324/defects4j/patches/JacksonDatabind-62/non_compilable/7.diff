diff --git a/tmp/499ae606-cb8c-4018-9d73-dbd482a4a975_buggy.java b/tmp/b9097421-6305-4842-88f6-c5612f072065_fixed.java
index 6c9090f..dd2edbf 100644
--- a/tmp/499ae606-cb8c-4018-9d73-dbd482a4a975_buggy.java
+++ b/tmp/b9097421-6305-4842-88f6-c5612f072065_fixed.java
@@ -1,45 +1,50 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
         if (_valueInstantiator != null) {
             if (_valueInstantiator.canCreateUsingDelegate()) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
+        
+        // Handle unmodifiable collections by using their modifiable counterparts
+        Class<?> rawClass = _collectionType.getRawClass();
+        if (rawClass.getName().startsWith("java.util.Collections$Unmodifiable")) {
+            JavaType modifiableType = ctxt.getTypeFactory().constructCollectionType(
+                    rawClass.getSuperclass(), vt);
+            return new CollectionDeserializer(modifiableType, _valueInstantiator,
+                    _collectionType, valueDeser, valueTypeDeser, unwrapSingle);
+        }
+        
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
