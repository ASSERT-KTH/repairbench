diff --git a/tmp/cf4cf575-c274-419e-9724-55350e01b449_buggy.java b/tmp/a23b055c-6cd1-493a-a781-d38c9c5ae792_fixed.java
index 7b9216c..2cc8398 100644
--- a/tmp/cf4cf575-c274-419e-9724-55350e01b449_buggy.java
+++ b/tmp/a23b055c-6cd1-493a-a781-d38c9c5ae792_fixed.java
@@ -1,47 +1,61 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
     int battery = buf.readUnsignedByte();
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
     } else if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
     }
 
     position.setNetwork(new Network(CellTower.fromCidLac(
             getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
     int product = buf.readUnsignedByte();
     int status = buf.readUnsignedShort();
     int alarm = buf.readUnsignedShort();
 
     if (product == 1 || product == 2) {
         if (BitUtil.check(alarm, 0)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
     } else if (product == 3) {
         position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
         if (BitUtil.check(alarm, 1)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
         if (BitUtil.check(alarm, 2)) {
             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
         }
         if (BitUtil.check(alarm, 3)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
         }
     }
 
     position.set(Position.KEY_STATUS, status);
 
+    // Handle additional attributes if remaining in buffer
+    while (buf.readableBytes() > 0) {
+        int key = buf.readUnsignedByte();
+        switch (key) {
+            case 0x0C:
+                position.set("gyro", buf.readSlice(buf.readableBytes()).toString(StandardCharsets.US_ASCII));
+                buf.skipBytes(buf.readableBytes()); // consume remaining bytes
+                break;
+            default:
+                buf.skipBytes(buf.readableBytes()); // skip unknown attributes
+                break;
+        }
+    }
+
     return position;
 }
\ No newline at end of file
