diff --git a/tmp/cc03548c-24e7-435a-bd3a-a3153546b32c_buggy.java b/tmp/15c963f1-fba5-4cec-a372-6f5f7d7b4c15_fixed.java
index 712f277..ebc3b91 100644
--- a/tmp/cc03548c-24e7-435a-bd3a-a3153546b32c_buggy.java
+++ b/tmp/15c963f1-fba5-4cec-a372-6f5f7d7b4c15_fixed.java
@@ -1,48 +1,57 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
+     * @throws IllegalArgumentException
+     *             If the input contains invalid token sequences
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
+            k = input.indexOf(END_TOKEN, i);
+            
+            // Check if there's an END_TOKEN before BEGIN_TOKEN
+            if (k != -1 && (j == -1 || k < j)) {
+                throw new IllegalArgumentException("Invalid token sequence: end token appears before begin token");
+            }
+            
             if (j == -1) {
                 if (i == 0) {
                     target.append(input);
                     return target;
                 }
                 target.append(input.substring(i));
                 return target;
             }
             target.append(input.substring(i, j));
             k = input.indexOf(END_TOKEN, j);
 
             if (k == -1) {
                 target.append(input);
                 return target;
             }
             j += BEGIN_TOKEN_LEN;
             String spec = input.substring(j, k);
 
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
                 target.append(input);
                 return target;
             }
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
 
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
