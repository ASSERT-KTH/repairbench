diff --git a/tmp/218bae2f-bf7f-4c0e-a57e-6905658afa36_buggy.java b/tmp/720e6f2b-5c54-4bb8-b773-ccd5516f29f6_fixed.java
index 9739964..c56e40f 100644
--- a/tmp/218bae2f-bf7f-4c0e-a57e-6905658afa36_buggy.java
+++ b/tmp/720e6f2b-5c54-4bb8-b773-ccd5516f29f6_fixed.java
@@ -1,27 +1,35 @@
 public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
       while (!indexStack.isEmpty()
           && prices[indexStack.peek()] <= prices[i])
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
       // is greater than all previous values
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
         spans[i] = i - indexStack.peek();
 
       indexStack.push(i);
     }
 
+    // Continue iterating until we find a price less than the current price
+    // to correctly calculate the span when all prices are equal
+    for (int i = prices.length - 2; i >= 0; i--) {
+      if (prices[i] == prices[i + 1]) {
+        spans[i] = spans[i + 1] + 1;
+      }
+    }
+
     return spans;
 }
\ No newline at end of file
