diff --git a/tmp/337ea5c0-c636-4018-aa35-6fe98f923d0c_buggy.java b/tmp/1cd44d49-249b-41f7-a679-1d717491906c_fixed.java
index 3da904d..b350678 100644
--- a/tmp/337ea5c0-c636-4018-aa35-6fe98f923d0c_buggy.java
+++ b/tmp/1cd44d49-249b-41f7-a679-1d717491906c_fixed.java
@@ -1,73 +1,115 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
+    if (parser.hasNext()) {
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
+    } else {
+        position.setSpeed(0);
+    }
+    if (parser.hasNext()) {
         position.setCourse(parser.nextDouble(0));
+    } else {
+        position.setCourse(0);
+    }
+    if (parser.hasNext()) {
         position.setAltitude(parser.nextDouble(0));
+    } else {
+        position.setAltitude(0);
+    }
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+    int cellCount = 0;
+    try {
+        cellCount = Integer.parseInt(values[index++]);
+    } catch (NumberFormatException e) {
+        // Ignore invalid cell count
+    }
     if (cellCount > 0) {
         index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+        int mcc = 0;
+        int mnc = 0;
+        try {
+            if (!values[index].isEmpty()) {
+                mcc = Integer.parseInt(values[index++]);
+            }
+            if (!values[index].isEmpty()) {
+                mnc = Integer.parseInt(values[index++]);
+            }
+        } catch (NumberFormatException e) {
+            // Ignore invalid MCC or MNC
+        }
 
         for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+            int lac = 0;
+            int cid = 0;
+            try {
+                lac = Integer.parseInt(values[index++]);
+                cid = Integer.parseInt(values[index++]);
+            } catch (NumberFormatException e) {
+                continue; // Skip invalid cell information
+            }
             String rssi = values[index++];
             if (!rssi.isEmpty()) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
             } else {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
             }
         }
     }
 
     if (index < values.length &&!values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+        int wifiCount = 0;
+        try {
+            wifiCount = Integer.parseInt(values[index++]);
+        } catch (NumberFormatException e) {
+            // Ignore invalid WiFi count
+        }
 
         for (int i = 0; i < wifiCount; i++) {
             index += 1; // wifi name
             String macAddress = values[index++];
             String rssi = values[index++];
             if (!macAddress.isEmpty() &&!macAddress.equals("0") &&!rssi.isEmpty()) {
+                try {
                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                } catch (NumberFormatException e) {
+                    // Ignore invalid WiFi RSSI
+                }
             }
         }
     }
 
     if (network.getCellTowers()!= null || network.getWifiAccessPoints()!= null) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
