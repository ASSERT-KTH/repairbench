diff --git a/tmp/16a9d45b-62ba-479c-88fb-71c3f9cd533b_buggy.java b/tmp/366ed146-c162-4047-8343-5c8e2820bc86_fixed.java
index 23f078d..412036c 100644
--- a/tmp/16a9d45b-62ba-479c-88fb-71c3f9cd533b_buggy.java
+++ b/tmp/366ed146-c162-4047-8343-5c8e2820bc86_fixed.java
@@ -1,14 +1,24 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // remove the trailing "?" if present
+            if (encoded.endsWith("%3F")) {
+                sb.append(encoded.substring(0, encoded.length() - 3));
+            } else {
+                sb.append(encoded);
+            }
             // ^^ is a bit heavy-handed - if perf critical, we could optimize
         } else {
             sb.append((char) c);
         }
+        // increment i by the number of code units of the current code point
+        if (Character.charCount(c) > 1) {
+            i += Character.charCount(c) - 1;
+        }
     }
 }
\ No newline at end of file
