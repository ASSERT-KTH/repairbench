diff --git a/tmp/17e9e14f-a093-41b3-8a87-72e41ef3773b_buggy.java b/tmp/4f32c69f-69f8-4d90-9e9d-25ea367ce3d3_fixed.java
index 712f277..1e43f1f 100644
--- a/tmp/17e9e14f-a093-41b3-8a87-72e41ef3773b_buggy.java
+++ b/tmp/4f32c69f-69f8-4d90-9e9d-25ea367ce3d3_fixed.java
@@ -1,48 +1,50 @@
 /**
  * Renders the given input to the target Appendable.
  *
  * @param input
  *            source to render
  * @param target
  *            render onto this target Appendable.
  * @return the given Appendable
  * @throws IOException
  *             If an I/O error occurs
  */
 public static Appendable render(final String input, Appendable target) throws IOException {
 
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
             if (i == 0) {
                 target.append(input);
                 return target;
             }
             target.append(input.substring(i));
             return target;
         }
         target.append(input.substring(i, j));
         k = input.indexOf(END_TOKEN, j);
 
         if (k == -1) {
-                target.append(input);
+            target.append(input.substring(j)); // append the remaining characters
             return target;
+        } else if (k < j) { // End token before start token, invalid input
+            throw new IllegalArgumentException("Invalid input: end token before start token");
         }
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
-                target.append(input);
+            target.append(input.substring(i)); // append the remaining characters
             return target;
         }
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
