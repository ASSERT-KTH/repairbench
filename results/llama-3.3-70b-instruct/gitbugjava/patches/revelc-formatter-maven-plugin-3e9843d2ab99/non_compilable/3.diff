diff --git a/tmp/1435cfd5-3282-4389-8397-3c847be361f0_buggy.java b/tmp/ba343c9f-7905-48c4-a612-f6b5dbe5a0a3_fixed.java
index 1098336..6a667a3 100644
--- a/tmp/1435cfd5-3282-4389-8397-3c847be361f0_buggy.java
+++ b/tmp/ba343c9f-7905-48c4-a612-f6b5dbe5a0a3_fixed.java
@@ -1,16 +1,23 @@
 @Override
 protected String doFormat(final String code, final LineEnding ending) throws IOException {
 
     final var source = new InputSource(new StringReader(code));
     final var parser = new CSSOMParser(new SACParserCSS3());
     final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
     var formattedCode = sheet.getCssText(this.formatter);
 
-        // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
-        formattedCode = formattedCode.replace("\t;", "\\9;");
+    // Remove the IE 7,8, and 9 hack patch, as it seems to be altering the code in an undesired way
+    // The correct approach would be to handle the line endings properly instead of patching the code
+
+    // Normalize the line endings to the system's default line ending
+    if (LineEnding.LF.isSystem() && formattedCode.contains("\r\n")) {
+        formattedCode = formattedCode.replace("\r\n", "\n");
+    } else if (LineEnding.CRLF.isSystem() && formattedCode.contains("\n")) {
+        formattedCode = formattedCode.replace("\n", "\r\n");
+    }
 
     if (code.equals(formattedCode)) {
         return null;
     }
     return formattedCode;
 }
\ No newline at end of file
