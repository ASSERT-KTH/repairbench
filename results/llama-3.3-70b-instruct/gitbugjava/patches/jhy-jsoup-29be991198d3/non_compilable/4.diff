diff --git a/tmp/5f3f13b0-bdbd-451b-9a30-94daca24fd62_buggy.java b/tmp/88243dc2-ad1d-4bc1-8f0c-5310facbfbe0_fixed.java
index 862c60c..4a90539 100644
--- a/tmp/5f3f13b0-bdbd-451b-9a30-94daca24fd62_buggy.java
+++ b/tmp/88243dc2-ad1d-4bc1-8f0c-5310facbfbe0_fixed.java
@@ -1,25 +1,32 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint &&!Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent!= null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent!= null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = this.nextSibling();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank()) return;
 
         if ((siblingIndex == 0 && parent!= null && parent.tag().formatAsBlock() &&!isBlank()) ||
             (out.outline() && siblingNodes().size() > 0 &&!isBlank()))
             indent(accum, depth, out);
+        
+        // check if previous node is a <br> tag and indent if necessary
+        if (previousSibling() instanceof Element && ((Element) previousSibling()).tagName().equals("br") 
+            && parent.tagName().equals("p") &&!isBlank() && out.prettyPrint()) {
+            newLine(accum);
+            indent(accum, depth, out);
+        }
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
