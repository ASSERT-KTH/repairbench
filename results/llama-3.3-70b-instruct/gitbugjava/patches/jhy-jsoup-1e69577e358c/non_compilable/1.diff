diff --git a/tmp/2af05138-6053-4767-8dc5-58e9d1f8e1cb_buggy.java b/tmp/579a3aa8-8cbf-4722-b67d-13956f22e7a5_fixed.java
index c9c77a4..9020fba 100644
--- a/tmp/2af05138-6053-4767-8dc5-58e9d1f8e1cb_buggy.java
+++ b/tmp/579a3aa8-8cbf-4722-b67d-13956f22e7a5_fixed.java
@@ -1,35 +1,54 @@
 URL build() {
     try {
         // use the URI class to encode non-ascii in path
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
             IDN.toASCII(decodePart(u.getHost())), // puny-code
             u.getPort(),
-                decodePart(u.getPath()),
+            decodePartIfNotEncoded(u.getPath()), // preserve existing encoding
             null, null // query and fragment appended later so as not to encode
         );
 
         String normUrl = uri.toASCIIString();
         if (q!= null || u.getRef()!= null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q!= null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef()!= null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u =  new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
+
+// new helper function to preserve existing encoding
+private String decodePartIfNotEncoded(String part) {
+    try {
+        // Attempt to decode the part to see if it's already encoded
+        String decoded = URLDecoder.decode(part, "UTF-8");
+        if (decoded.equals(part)) {
+            // Not encoded, so let URI encode it
+            return part;
+        } else {
+            // Already encoded, return as is
+            return part;
+        }
+    } catch (UnsupportedEncodingException e) {
+        // This should never happen as we're using UTF-8
+        assert Validate.assertFail(e.toString());
+        return part;
+    }
+}
\ No newline at end of file
