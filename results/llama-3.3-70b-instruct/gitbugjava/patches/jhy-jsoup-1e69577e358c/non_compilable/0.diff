diff --git a/tmp/617ae74a-1e2c-4152-8656-0cdfd27c398d_buggy.java b/tmp/8bab5aa7-c939-4a87-8a2f-c5887456207c_fixed.java
index c9c77a4..dfc9f5d 100644
--- a/tmp/617ae74a-1e2c-4152-8656-0cdfd27c398d_buggy.java
+++ b/tmp/8bab5aa7-c939-4a87-8a2f-c5887456207c_fixed.java
@@ -1,35 +1,52 @@
 URL build() {
     try {
         // use the URI class to encode non-ascii in path
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
             IDN.toASCII(decodePart(u.getHost())), // puny-code
             u.getPort(),
             decodePart(u.getPath()),
             null, null // query and fragment appended later so as not to encode
         );
 
         String normUrl = uri.toASCIIString();
         if (q!= null || u.getRef()!= null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q!= null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef()!= null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
-            u =  new URL(normUrl);
+        // decode the URL path before creating a new URL object
+        URL url = new URL(normUrl);
+        String path = url.getPath();
+        // re-encode path segments that were double-decoded
+        String[] pathSegments = path.split("/");
+        StringBuilder sb = new StringBuilder();
+        for (String segment : pathSegments) {
+            if (segment.contains("%")) {
+                sb.append(URLEncoder.encode(segment, StandardCharsets.UTF_8.toString())).append("/");
+            } else {
+                sb.append(segment).append("/");
+            }
+        }
+        if (sb.length() > 0) {
+            sb.deleteCharAt(sb.length() - 1); // remove trailing /
+        }
+        url = new URL(url.getProtocol(), url.getHost(), url.getPort(), url.getFile().replaceAll(url.getPath(), sb.toString()));
+        u = url;
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
