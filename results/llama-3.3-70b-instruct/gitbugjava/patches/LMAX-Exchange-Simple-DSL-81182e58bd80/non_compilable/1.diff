diff --git a/tmp/1420e36e-e6b7-4c52-8e0a-107e27ae17c6_buggy.java b/tmp/7202da4c-9fef-4b9b-b95e-fd3d6429ba1f_fixed.java
index f506479..10f7119 100644
--- a/tmp/1420e36e-e6b7-4c52-8e0a-107e27ae17c6_buggy.java
+++ b/tmp/7202da4c-9fef-4b9b-b95e-fd3d6429ba1f_fixed.java
@@ -1,64 +1,68 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg)!= null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    final List<Map<String, List<String>>> groupValues = new ArrayList<>();
+
+    while (!arguments.isEmpty())
+    {
+        final Map<String, List<String>> currentGroupValues = new HashMap<>();
+        boolean hasGroupValue = false;
+
+        NameValuePair identityValue = null;
         while (!arguments.isEmpty())
         {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL)
             {
                 arguments.pollFirst();
                 continue;
             }
 
-                if (argument.name == null)
-                {
-                    throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
-                }
-
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
             if (arg == null)
             {
                 break;
             }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
+            if (arg == groupArg.getIdentity())
             {
-                    break;
+                identityValue = argument;
+                hasGroupValue = true;
             }
-
+            else
+            {
                 checkValidValue(arg, argument.value);
-                argValues.add(argument.value);
+                currentGroupValues.computeIfAbsent(arg.getName().toLowerCase(), k -> new ArrayList<>()).add(argument.value);
+            }
+
             arguments.pollFirst();
         }
 
-            // TODO: this whole thing here is a bit hacky!
-            final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
+        if (hasGroupValue)
         {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
-                {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+            checkValidValue(groupArg.getIdentity(), identityValue.value);
+            currentGroupValues.computeIfAbsent(groupArg.getIdentity().getName().toLowerCase(), k -> new ArrayList<>()).add(identityValue.value);
+            groupValues.add(currentGroupValues);
         }
     }
 
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
-            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+    groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).addAll(groupValues.stream()
+           .map(values -> new RepeatingParamValues(dslArgs, values)).collect(Collectors.toList()));
 }
\ No newline at end of file
