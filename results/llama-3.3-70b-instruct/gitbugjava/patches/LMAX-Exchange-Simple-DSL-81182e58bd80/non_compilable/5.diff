diff --git a/tmp/a10ab3a5-5a09-4429-9e95-38b7edf5f7b0_buggy.java b/tmp/ce9f04a7-250a-4d31-9485-2822b3771974_fixed.java
index f506479..b271c7c 100644
--- a/tmp/a10ab3a5-5a09-4429-9e95-38b7edf5f7b0_buggy.java
+++ b/tmp/ce9f04a7-250a-4d31-9485-2822b3771974_fixed.java
@@ -1,64 +1,80 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg)!= null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    final List<List<String>> argValuesList = new ArrayList<>();
+    List<String> argValues = new ArrayList<>();
+
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
         if (argument.name == null)
         {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
         if (arg == null)
         {
-                    break;
+            argValuesList.add(argValues);
+            argValues = new ArrayList<>();
+            continue;
         }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
+        if (!arg.isAllowMultipleValues() &&!argValues.isEmpty())
         {
-                    break;
+            argValuesList.add(argValues);
+            argValues = new ArrayList<>();
         }
 
         checkValidValue(arg, argument.value);
         argValues.add(argument.value);
         arguments.pollFirst();
     }
 
+    if (!argValues.isEmpty())
+    {
+        argValuesList.add(argValues);
+    }
+
     // TODO: this whole thing here is a bit hacky!
-            final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
+    final Map<String, List<String>> valuesByName;
+    for (List<String> currentArgValues : argValuesList)
     {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
+        valuesByName = new HashMap<>();
+        for (Map.Entry<String, SimpleDslArg> entry : argsByName.entrySet())
         {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+            int valueIndex = currentArgValues.indexOf(entry.getValue().getName());
+            if (valueIndex!= -1)
+            {
+                List<String> paramValues = new ArrayList<>();
+                paramValues.add(currentArgValues.get(valueIndex + 1));
+                valuesByName.put(entry.getKey(), paramValues);
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
     }
+}
\ No newline at end of file
