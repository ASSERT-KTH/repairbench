diff --git a/tmp/c36f6f33-d84a-4eca-a0c0-7d42c092492a_buggy.java b/tmp/5520656e-bc52-48b2-91ae-36152ae406e7_fixed.java
index 71189c3..37d6bc5 100644
--- a/tmp/c36f6f33-d84a-4eca-a0c0-7d42c092492a_buggy.java
+++ b/tmp/5520656e-bc52-48b2-91ae-36152ae406e7_fixed.java
@@ -1,46 +1,43 @@
-    public void validate(final WriteableCommandLine commandLine)
-        throws OptionException {
+public void validate(final WriteableCommandLine commandLine) throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
-                option.validate(commandLine);
+            // prevent ClassCastException by ensuring option class matches expected type
+            option.validate(commandLine.getValues(option));
         }
     }
 
     // too many options
     if (unexpected!= null) {
-            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
-                                      unexpected.getPreferredName());
+        throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
-            option.validate(commandLine);
+        option.validate(commandLine.getValues(option));
     }
 }
\ No newline at end of file
