diff --git a/tmp/3793018d-1b64-4544-ba04-922b09f04156_buggy.java b/tmp/28d8d20e-adff-4ca5-a8e7-5136ac08548b_fixed.java
index 71189c3..23a763a 100644
--- a/tmp/3793018d-1b64-4544-ba04-922b09f04156_buggy.java
+++ b/tmp/28d8d20e-adff-4ca5-a8e7-5136ac08548b_fixed.java
@@ -1,46 +1,56 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
 
                 break;
             }
 
+            // Cast the option value to the type expected by its validator
+            Object argument = commandLine.getValue(option);
+            try {
+                if (argument.getClass()!= option.getArgument().getType()) {
+                    argument = option.getArgument().getType().getConstructor(String.class).newInstance(argument.toString());
+                }
+            } catch (Exception e) {
+                throw new OptionException(this, ResourceConstants.UNEXPECTED_DATA_TYPE, option.getPreferredName());
+            }
+            commandLine.setValue(option, argument);
             option.validate(commandLine);
         }
     }
 
     // too many options
     if (unexpected!= null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
