diff --git a/tmp/742fc096-5c5f-4d1d-9799-a35d4478eb5a_buggy.java b/tmp/5d392a3f-12af-46cc-ba9f-46625acbe142_fixed.java
index efa499e..a4d982c 100644
--- a/tmp/742fc096-5c5f-4d1d-9799-a35d4478eb5a_buggy.java
+++ b/tmp/5d392a3f-12af-46cc-ba9f-46625acbe142_fixed.java
@@ -1,35 +1,42 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
   int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
   Integer negativeVarBasicRow = negativeVarColumn > 0? getBasicRow(negativeVarColumn) : null;
   double mostNegative = negativeVarBasicRow == null? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
   Set<Integer> basicRows = new HashSet<Integer>();
   double[] coefficients = new double[getOriginalNumDecisionVariables()];
   for (int i = 0; i < coefficients.length; i++) {
       int colIndex = columnLabels.indexOf("x" + i);
       if (colIndex < 0) {
         coefficients[i] = 0;
         continue;
       }
       Integer basicRow = getBasicRow(colIndex);
+      // Handle the case where the variable is non-basic
+      if (basicRow == null) {
+        coefficients[i] = 0;
+        continue;
+      }
       // if the basic row is found to be the objective function row
       // set the coefficient to 0 -> this case handles unconstrained 
       // variables that are still part of the objective function
       if (basicRows.contains(basicRow)) {
           // if multiple variables can take a given value
           // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+          coefficients[i] = 0;
       } else {
           basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+          coefficients[i] = getEntry(basicRow, getRhsOffset());
+          // Adjust for the negative variable offset
+          if (!restrictToNonNegative && getEntry(basicRow, getObjectiveFunctionOffset()) < 0) {
+            coefficients[i] -= mostNegative;
+          }
       }
   }
   return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
