diff --git a/tmp/62896d81-017a-4738-b3c5-93997e93ac28_buggy.java b/tmp/57c9d03e-2258-4711-8d65-d114bbc13978_fixed.java
index 6cfa79b..f43a2be 100644
--- a/tmp/62896d81-017a-4738-b3c5-93997e93ac28_buggy.java
+++ b/tmp/57c9d03e-2258-4711-8d65-d114bbc13978_fixed.java
@@ -1,12 +1,22 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X &lt; <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double standardizedX = (x - mean) / standardDeviation;
+    try {
+        return 0.5 * (1.0 + Erf.erf(standardizedX / Math.sqrt(2.0)));
+    } catch (MaxIterationsExceededException e) {
+        if (standardizedX < -20) {
+            return 0.0;
+        } else if (standardizedX > 20) {
+            return 1.0;
+        } else {
+            throw new MathException("Convergence exception caught for value within 20 standard deviations of the mean");
+        }
+    }
 }
\ No newline at end of file
