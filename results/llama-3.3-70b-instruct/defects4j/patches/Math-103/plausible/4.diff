diff --git a/tmp/fab5f19d-8555-4ab5-982f-9f49063e277a_buggy.java b/tmp/574b4a8c-d022-408f-b803-826e1b373436_fixed.java
index 6cfa79b..6cdf376 100644
--- a/tmp/fab5f19d-8555-4ab5-982f-9f49063e277a_buggy.java
+++ b/tmp/574b4a8c-d022-408f-b803-826e1b373436_fixed.java
@@ -1,12 +1,18 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X &lt; <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));
+    if (z < -20) {
+        return 0; // probability is effectively 0 if x is more than 20 standard deviations below the mean
+    } else if (z > 20) {
+        return 1; // probability is effectively 1 if x is more than 20 standard deviations above the mean
+    } else {
+        return 0.5 * (1.0 + Erf.erf(z));
+    }
 }
\ No newline at end of file
