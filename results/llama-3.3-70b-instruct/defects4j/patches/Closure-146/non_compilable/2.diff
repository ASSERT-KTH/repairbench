diff --git a/tmp/17b9a88c-221c-4b51-810c-af8184d3f0db_buggy.java b/tmp/1bfd896c-d3cc-4597-aada-f04730a7ebb9_fixed.java
index 210695a..bf0e0e9 100644
--- a/tmp/17b9a88c-221c-4b51-810c-af8184d3f0db_buggy.java
+++ b/tmp/1bfd896c-d3cc-4597-aada-f04730a7ebb9_fixed.java
@@ -1,32 +1,37 @@
 /**
  * Computes the subset of {@code this} and {@code that} types if inequality
  * is observed. If a value {@code v1} of type {@code number} is not equal to a
  * value {@code v2} of type {@code (undefined,number)}, we can infer that the
  * type of {@code v1} is {@code number} and the type of {@code v2} is
  * {@code number} as well.
  *
  * @return a pair containing the restricted type of {@code this} as the first
  *         component and the restricted type of {@code that} as the second
  *         element. The returned pair is never {@code null} even though its
  *         components may be {@code null}
  */
 public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
         TypePair p = that.getTypesUnderInequality(this);
         return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
         case TRUE:
             return new TypePair(null, null);
 
         case FALSE:
+            if (this.equals(VOID_TYPE) && that.equals(VOID_TYPE)) {
+                return new TypePair(NO_TYPE, NO_TYPE);
+            }
+            return new TypePair(this, that);
+
         case UNKNOWN:
             return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
 }
\ No newline at end of file
