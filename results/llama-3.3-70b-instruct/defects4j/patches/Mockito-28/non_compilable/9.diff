diff --git a/tmp/275f9354-7210-47b5-bd9a-4fdbf196c9fc_buggy.java b/tmp/d7467ee2-fbe2-40dd-abd0-858e07806c4f_fixed.java
index fa6828a..1dc817a 100644
--- a/tmp/275f9354-7210-47b5-bd9a-4fdbf196c9fc_buggy.java
+++ b/tmp/d7467ee2-fbe2-40dd-abd0-858e07806c4f_fixed.java
@@ -1,5 +1,23 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
     for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        List<Object> matchingMocks = mockCandidateFilter.filterCandidates(mocks, field, fieldInstance);
+        if (!matchingMocks.isEmpty()) {
+            Object bestMatchingMock = getBestMatchingMock(matchingMocks, field);
+            mockCandidateFilter.inject(bestMatchingMock, field, fieldInstance);
         }
     }
+}
+
+// assuming getBestMatchingMock is a method that returns the best matching mock based on the type hierarchy
+private Object getBestMatchingMock(List<Object> mocks, Field field) {
+    Class<?> fieldType = field.getType();
+    Object bestMatchingMock = null;
+    for (Object mock : mocks) {
+        if (fieldType.isInstance(mock)) {
+            if (bestMatchingMock == null || fieldType.isAssignableFrom(bestMatchingMock.getClass())) {
+                bestMatchingMock = mock;
+            }
+        }
+    }
+    return bestMatchingMock;
+}
\ No newline at end of file
