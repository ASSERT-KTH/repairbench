diff --git a/tmp/03f923b6-dd6c-4cf5-9ba2-a6962be6b642_buggy.java b/tmp/670b1bf3-a26e-4384-93b0-d57408246af4_fixed.java
index fa6828a..be438c5 100644
--- a/tmp/03f923b6-dd6c-4cf5-9ba2-a6962be6b642_buggy.java
+++ b/tmp/670b1bf3-a26e-4384-93b0-d57408246af4_fixed.java
@@ -1,5 +1,31 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
     for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        Class<?> fieldType = field.getType();
+        Object bestMatchingMock = null;
+        int bestMatchDistance = Integer.MAX_VALUE;
+        
+        for (Object mock : mocks) {
+            int distance = getDistance(fieldType, mock.getClass());
+            if (distance < bestMatchDistance) {
+                bestMatchingMock = mock;
+                bestMatchDistance = distance;
             }
         }
+        
+        if (bestMatchingMock!= null) {
+            mockCandidateFilter.filterCandidate(Collections.singleton(bestMatchingMock), field, fieldInstance).thenInject();
+        }
+    }
+}
+
+// assuming getDistance method exists to calculate distance between two classes
+// the distance represents how close two classes are in the class hierarchy
+private int getDistance(Class<?> fieldType, Class<?> mockType) {
+    if (fieldType.equals(mockType)) return 0;
+    if (fieldType.isAssignableFrom(mockType)) return 1;
+    if (mockType.isAssignableFrom(fieldType)) return 2;
+    // calculate distance based on the class hierarchy
+    // this method should be implemented based on the actual class hierarchy
+    // for now, return a default value
+    return 3;
+}
\ No newline at end of file
