diff --git a/tmp/ee6af1d8-de4d-4141-84a9-e17d5bc39d4d_buggy.java b/tmp/23160d6d-f3e6-4dfd-a9a0-5a700d064bb1_fixed.java
index fa6828a..30265da 100644
--- a/tmp/ee6af1d8-de4d-4141-84a9-e17d5bc39d4d_buggy.java
+++ b/tmp/23160d6d-f3e6-4dfd-a9a0-5a700d064bb1_fixed.java
@@ -1,5 +1,33 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
     for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        Object bestMatch = null;
+        for (Object mock : mocks) {
+            if (field.getType().isInstance(mock)) {
+                if (bestMatch == null || isBetterMatch(mock, bestMatch, field.getType())) {
+                    bestMatch = mock;
                 }
             }
+        }
+        if (bestMatch!= null) {
+            try {
+                field.set(fieldInstance, bestMatch);
+            } catch (IllegalAccessException e) {
+                throw new RuntimeException(e);
+            }
+        }
+    }
+}
+
+private boolean isBetterMatch(Object mock, Object bestMatch, Class<?> fieldType) {
+    if (mock.getClass().equals(fieldType)) {
+        return true;
+    }
+    if (bestMatch.getClass().equals(fieldType)) {
+        return false;
+    }
+    return isDirectAncestor(mock.getClass(), fieldType) &&!isDirectAncestor(bestMatch.getClass(), fieldType);
+}
+
+private boolean isDirectAncestor(Class<?> mockClass, Class<?> fieldType) {
+    return fieldType.isAssignableFrom(mockClass) &&!mockClass.equals(fieldType);
+}
\ No newline at end of file
