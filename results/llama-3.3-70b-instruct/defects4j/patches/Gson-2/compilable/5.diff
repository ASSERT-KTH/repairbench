diff --git a/tmp/b5088005-1a1f-4ce1-bf1d-a5bb56abb5f9_buggy.java b/tmp/1ccb91a7-0f95-48a7-827e-0cdee4dba19b_fixed.java
index 6e45f80..edac8be 100644
--- a/tmp/b5088005-1a1f-4ce1-bf1d-a5bb56abb5f9_buggy.java
+++ b/tmp/1ccb91a7-0f95-48a7-827e-0cdee4dba19b_fixed.java
@@ -1,21 +1,25 @@
 /**
  * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
  * that the deserialized type matches the type requested.
  */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
-
+      // Additional null check and instance of before casting
+      Object instance = typeAdapter;
+      if (instance == null ||!(requestedType.isInstance(instance))) {
+        return null;
+      }
+      return (TypeAdapter<T2>) instance;
     }
     @Override public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
