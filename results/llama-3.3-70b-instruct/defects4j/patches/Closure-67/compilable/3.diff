diff --git a/tmp/52621694-d0ef-4ad6-9dc0-a28c11870520_buggy.java b/tmp/9c212cfe-63cf-47bf-ac6f-974a3fc7f46a_fixed.java
index 939f49b..e2f25f3 100644
--- a/tmp/52621694-d0ef-4ad6-9dc0-a28c11870520_buggy.java
+++ b/tmp/9c212cfe-63cf-47bf-ac6f-974a3fc7f46a_fixed.java
@@ -1,21 +1,30 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
     boolean isChainedProperty =
         n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+      Node child = n.getFirstChild().getFirstChild();
+      Node grandChild = child.getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      while (grandChild!= null) {
+        if (grandChild.getType() == Token.STRING &&
+            grandChild.getString().equals("prototype")) {
+          return true;
+        }
+        grandChild = grandChild.getNext();
+      }
+    } else {
+      Node grandChild = n.getFirstChild();
+      if (grandChild.getType() == Token.STRING &&
+          grandChild.getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
