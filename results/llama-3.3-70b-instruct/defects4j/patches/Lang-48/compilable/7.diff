diff --git a/tmp/d3c3748c-1f87-4ac3-a6e0-4973416aad89_buggy.java b/tmp/8c8ff3b2-5cc0-4788-bfa8-1090e6dfa643_fixed.java
index 82bdfd4..7eda215 100644
--- a/tmp/d3c3748c-1f87-4ac3-a6e0-4973416aad89_buggy.java
+++ b/tmp/8c8ff3b2-5cc0-4788-bfa8-1090e6dfa643_fixed.java
@@ -1,51 +1,32 @@
 /**
  * <p>Test if two <code>Object</code>s are equal using their
  * <code>equals</code> method.</p>
  *
  * @param lhs  the left hand object
  * @param rhs  the right hand object
  * @return EqualsBuilder - used to chain calls.
  */
 public EqualsBuilder append(Object lhs, Object rhs) {
     if (isEquals == false) {
         return this;
     }
     if (lhs == rhs) {
         return this;
     }
     if (lhs == null || rhs == null) {
         this.setEquals(false);
         return this;
     }
-        Class lhsClass = lhs.getClass();
-        if (!lhsClass.isArray()) {
+    if (lhs.getClass().equals(rhs.getClass())) {
+        try {
             // The simple case, not an array, just test the element
             isEquals = lhs.equals(rhs);
-        } else if (lhs.getClass() != rhs.getClass()) {
-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
-            this.setEquals(false);
+        } catch (ClassCastException e) {
+            // Handle the case where equals method throws a ClassCastException
+            isEquals = false;
         }
-        // 'Switch' on type of array, to dispatch to the correct handler
-        // This handles multi dimensional arrays of the same depth
-        else if (lhs instanceof long[]) {
-            append((long[]) lhs, (long[]) rhs);
-        } else if (lhs instanceof int[]) {
-            append((int[]) lhs, (int[]) rhs);
-        } else if (lhs instanceof short[]) {
-            append((short[]) lhs, (short[]) rhs);
-        } else if (lhs instanceof char[]) {
-            append((char[]) lhs, (char[]) rhs);
-        } else if (lhs instanceof byte[]) {
-            append((byte[]) lhs, (byte[]) rhs);
-        } else if (lhs instanceof double[]) {
-            append((double[]) lhs, (double[]) rhs);
-        } else if (lhs instanceof float[]) {
-            append((float[]) lhs, (float[]) rhs);
-        } else if (lhs instanceof boolean[]) {
-            append((boolean[]) lhs, (boolean[]) rhs);
     } else {
-            // Not an array of primitives
-            append((Object[]) lhs, (Object[]) rhs);
+        this.setEquals(false);
     }
     return this;
 }
\ No newline at end of file
