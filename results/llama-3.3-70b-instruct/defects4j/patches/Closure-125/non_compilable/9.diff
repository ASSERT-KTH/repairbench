diff --git a/tmp/c2319fd6-edf0-4e71-9dbb-a52e5f23a9cf_buggy.java b/tmp/aef17103-bc37-431b-9ef6-3d47c4bbf15c_fixed.java
index 7e43c1c..eacf060 100644
--- a/tmp/c2319fd6-edf0-4e71-9dbb-a52e5f23a9cf_buggy.java
+++ b/tmp/aef17103-bc37-431b-9ef6-3d47c4bbf15c_fixed.java
@@ -1,19 +1,33 @@
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
   if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
     FunctionType fnType = type.toMaybeFunctionType();
     if (fnType!= null) {
       visitParameterList(t, n, fnType);
       ensureTyped(t, n, fnType.getInstanceType());
     } else {
       ensureTyped(t, n);
     }
+  } else if (type.isInterface()) {
+    // Check if there's a constructor that implements this interface
+    for (JSType implementedType : getImplementedTypes(constructor)) {
+      if (implementedType!= null && implementedType.isConstructor()) {
+        FunctionType fnType = implementedType.toMaybeFunctionType();
+        if (fnType!= null) {
+          visitParameterList(t, n, fnType);
+          ensureTyped(t, n, fnType.getInstanceType());
+          return;
+        }
+      }
+    }
+    report(t, n, NOT_A_CONSTRUCTOR);
+    ensureTyped(t, n);
   } else {
     report(t, n, NOT_A_CONSTRUCTOR);
     ensureTyped(t, n);
   }
 }
\ No newline at end of file
