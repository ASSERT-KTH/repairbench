diff --git a/tmp/00632366-48fd-42f6-bc4e-4343e1bc6f43_buggy.java b/tmp/115e2aa9-242d-4ea0-a2e0-895d8e9c958e_fixed.java
index dc93be3..015332f 100644
--- a/tmp/00632366-48fd-42f6-bc4e-4343e1bc6f43_buggy.java
+++ b/tmp/115e2aa9-242d-4ea0-a2e0-895d8e9c958e_fixed.java
@@ -1,14 +1,19 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (Tag.valueOf(startTag.name()).isSelfClosing()) {
             Element el = insertEmpty(startTag);
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
-            return el;
+        } else {
+            Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+            insert(el);
+            tokeniser.emit(new Token.EndTag(el.tagName()));
+        }
+        return new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
