diff --git a/tmp/5c19cf2c-0e60-4781-b315-c9cabefd87e8_buggy.java b/tmp/c2a44393-4118-4bcc-b032-3e928db00cc1_fixed.java
index 7c9c72e..c5dd217 100644
--- a/tmp/5c19cf2c-0e60-4781-b315-c9cabefd87e8_buggy.java
+++ b/tmp/c2a44393-4118-4bcc-b032-3e928db00cc1_fixed.java
@@ -1,93 +1,110 @@
 /**
  * <p>Creates a random string based on a variety of options, using
  * supplied source of randomness.</p>
  *
  * <p>If start and end are both {@code 0}, start and end are set
  * to {@code ' '} and {@code 'z'}, the ASCII printable
  * characters, will be used, unless letters and numbers are both
  * {@code false}, in which case, start and end are set to
  * {@code 0} and {@code Integer.MAX_VALUE}.
  *
  * <p>If set is not {@code null}, characters between start and
  * end are chosen.</p>
  *
  * <p>This method accepts a user-supplied {@link Random}
  * instance to use as a source of randomness. By seeding a single 
  * {@link Random} instance with a fixed seed and using it for each call,
  * the same random sequence of strings can be generated repeatedly
  * and predictably.</p>
  *
  * @param count  the length of random string to create
  * @param start  the position in set of chars to start at
  * @param end  the position in set of chars to end before
  * @param letters  only allow letters?
  * @param numbers  only allow numbers?
  * @param chars  the set of chars to choose randoms from, must not be empty.
  *  If {@code null}, then it will use the set of all chars.
  * @param random  a source of randomness.
  * @return the random string
  * @throws ArrayIndexOutOfBoundsException if there are not
  *  {@code (end - start) + 1} characters in the set array.
  * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
  * @since 2.0
  */
 public static String random(int count, int start, int end, boolean letters, boolean numbers,
                             char[] chars, Random random) {
-        if (count == 0) {
-            return "";
-        } else if (count < 0) {
+    if (count < 0) {
         throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
     }
 
+    if (count == 0) {
+        return "";
+    }
+
+    if (chars!= null && chars.length == 0) {
+        throw new IllegalArgumentException("The chars array must not be empty");
+    }
+
     if (start == 0 && end == 0) {
         if (!letters &&!numbers) {
-                    end = Integer.MAX_VALUE;
+            start = 0;
+            end = Integer.MAX_VALUE - 1; // subtract 1 to avoid ArrayIndexOutOfBoundsException
         } else {
-                    end = 'z' + 1;
+            end = 'z';
             start = ' ';                
         }
     }
 
     char[] buffer = new char[count];
     int gap = end - start;
 
-        while (count-- != 0) {
+    int index = 0;
+    while (index < count) {
         char ch;
         if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+            ch = (char) (random.nextInt(gap + 1) + start); // using gap + 1 to avoid ArrayIndexOutOfBoundsException
         } else {
-                ch = chars[random.nextInt(gap) + start];
+            ch = chars[random.nextInt(chars.length)];
         }
         if (letters && Character.isLetter(ch)
                 || numbers && Character.isDigit(ch)
                 ||!letters &&!numbers) {
             if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+                if(index == count - 1) {
+                    continue;
                 } else {
                     // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                    buffer[index] = ch;
+                    index++;
+                    if(index == count) {
+                        continue;
+                    }
+                    buffer[index] = (char) (55296 + random.nextInt(128));
+                    index++;
                 }
             } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                if(index == count - 1) {
+                    continue;
                 } else {
                     // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                    if(index + 1 == count) {
+                        continue;
+                    }
+                    buffer[index] = (char) (56320 + random.nextInt(128));
+                    index++;
+                    buffer[index] = ch;
+                    index++;
                 }
             } else if(ch >= 56192 && ch <= 56319) {
                 // private high surrogate, no effing clue, so skip it
-                    count++;
+                continue;
             } else {
-                    buffer[count] = ch;
+                buffer[index] = ch;
+                index++;
             }
         } else {
-                count++;
+            continue;
         }
     }
     return new String(buffer);
 }
\ No newline at end of file
