diff --git a/tmp/1513b599-188d-428d-a2dc-0afcb1e972c9_buggy.java b/tmp/2285557c-8b67-42eb-bb13-977d78a8e2ec_fixed.java
index 46817a7..8596163 100644
--- a/tmp/1513b599-188d-428d-a2dc-0afcb1e972c9_buggy.java
+++ b/tmp/2285557c-8b67-42eb-bb13-977d78a8e2ec_fixed.java
@@ -1,16 +1,29 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
+    // If the types are not equivalent, the least supertype is their union
+    if (!isEquivalentTo(that)) {
+        return registry.createUnionType(this, that);
+    }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
     for (String property : properties.keySet()) {
         if (that.toMaybeRecordType().hasProperty(property) &&
                 that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
                         getPropertyType(property))) {
             builder.addProperty(property, getPropertyType(property),
                     getPropertyNode(property));
+        } else if (hasProperty(property)) {
+            builder.addProperty(property, getPropertyType(property),
+                    getPropertyNode(property));
+        }
+    }
+    for (String property : that.toMaybeRecordType().getProperties().keySet()) {
+        if (!hasProperty(property)) {
+            builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property),
+                    that.toMaybeRecordType().getPropertyNode(property));
         }
     }
     return builder.build();
 }
\ No newline at end of file
