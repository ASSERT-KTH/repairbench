diff --git a/tmp/dd9003a8-7d48-445b-8f43-c487148b6007_buggy.java b/tmp/37d2bb1a-6085-4b03-8f4e-3fd58775312b_fixed.java
index 46817a7..3b685b6 100644
--- a/tmp/dd9003a8-7d48-445b-8f43-c487148b6007_buggy.java
+++ b/tmp/37d2bb1a-6085-4b03-8f4e-3fd58775312b_fixed.java
@@ -1,16 +1,31 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    RecordType thatRecordType = that.toMaybeRecordType();
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
+        if (thatRecordType.hasProperty(property)) {
+            builder.addProperty(property, getLeastSupertypeOfProperties(
+                    getPropertyType(property), thatRecordType.getPropertyType(property)),
                     getPropertyNode(property));
         }
     }
+    for (String property : thatRecordType.Properties().keySet()) {
+        if (!properties.containsKey(property)) {
+            builder.addProperty(property, thatRecordType.getPropertyType(property),
+                    thatRecordType.getPropertyNode(property));
+        }
+    }
     return builder.build();
 }
+
+// Helper function to get the least supertype of two property types.
+private JSType getLeastSupertypeOfProperties(JSType type1, JSType type2) {
+    if (type1.isEquivalentTo(type2)) {
+        return type1;
+    } else {
+        return registry.createUnionType(type1, type2);
+    }
+}
\ No newline at end of file
