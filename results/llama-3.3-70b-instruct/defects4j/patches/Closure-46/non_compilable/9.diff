diff --git a/tmp/c5570e5d-5488-4166-9606-00a922241bc1_buggy.java b/tmp/da09c0cc-fd74-4b3e-9a53-6bd2aaec12cf_fixed.java
index 46817a7..f1536f5 100644
--- a/tmp/c5570e5d-5488-4166-9606-00a922241bc1_buggy.java
+++ b/tmp/da09c0cc-fd74-4b3e-9a53-6bd2aaec12cf_fixed.java
@@ -1,16 +1,24 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+  RecordType thisRecordType = toMaybeRecordType();
+  RecordType thatRecordType = that.toMaybeRecordType();
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+  for (String property : unionOfProperties(thisRecordType, thatRecordType)) {
+    if (thisRecordType.hasProperty(property)) {
+      builder.addProperty(property, thisRecordType.getPropertyType(property), thisRecordType.getPropertyNode(property));
+    } else if (thatRecordType.hasProperty(property)) {
+      builder.addProperty(property, thatRecordType.getPropertyType(property), thatRecordType.getPropertyNode(property));
     }
   }
   return builder.build();
 }
+
+// Helper function to get the union of properties from two record types
+private Set<String> unionOfProperties(RecordType type1, RecordType type2) {
+  Set<String> union = new HashSet<>(type1.getProperties().keySet());
+  union.addAll(type2.getProperties().keySet());
+  return union;
+}
\ No newline at end of file
