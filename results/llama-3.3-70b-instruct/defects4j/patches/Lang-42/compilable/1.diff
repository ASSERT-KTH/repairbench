diff --git a/tmp/c5b8b175-4bfe-4a85-ae63-34a9f21a22a0_buggy.java b/tmp/ff78b319-4552-4a40-a276-e7c06e4872ef_fixed.java
index 822447c..741ca6c 100644
--- a/tmp/c5b8b175-4bfe-4a85-ae63-34a9f21a22a0_buggy.java
+++ b/tmp/ff78b319-4552-4a40-a276-e7c06e4872ef_fixed.java
@@ -1,37 +1,42 @@
 /**
  * <p>
  * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
  * passed.
  * </p>
  * 
  * @param writer
  *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
  * @param str
  *            The <code>String</code> to escape. Assumed to be a non-null value.
  * @throws IOException
  *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
  *             methods.
  * 
  * @see #escape(String)
  * @see Writer
  */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
     for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        int codePoint = str.codePointAt(i);
+        if (Character.isValidCodePoint(codePoint)) {
+            String entityName = this.entityName(codePoint);
             if (entityName == null) {
-                if (c > 0x7F) {
-                    writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                if (codePoint > 0x7F) {
+                    writer.write("&#x");
+                    writer.write(Integer.toHexString(codePoint));
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    writer.write(codePoint);
                 }
             } else {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+            if (Character.charCount(codePoint) == 2) {
+                i++;
+            }
+        }
     }
 }
\ No newline at end of file
