diff --git a/tmp/a3b85a16-aed9-4527-9734-39788c5f9a7d_buggy.java b/tmp/378ec7dc-7e63-4e23-933d-20da263817cd_fixed.java
index 822447c..dc548d5 100644
--- a/tmp/a3b85a16-aed9-4527-9734-39788c5f9a7d_buggy.java
+++ b/tmp/378ec7dc-7e63-4e23-933d-20da263817cd_fixed.java
@@ -1,37 +1,53 @@
 /**
  * <p>
  * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
  * passed.
  * </p>
  * 
  * @param writer
  *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
  * @param str
  *            The <code>String</code> to escape. Assumed to be a non-null value.
  * @throws IOException
  *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
  *             methods.
  * 
  * @see #escape(String)
  * @see Writer
  */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
-        for (int i = 0; i < len; i++) {
+    int i = 0;
+    while (i < len) {
         char c = str.charAt(i);
+        if (Character.isHighSurrogate(c) && (i + 1) < len) {
+            char d = str.charAt(i + 1);
+            if (Character.isLowSurrogate(d)) {
+                int codePoint = Character.toCodePoint(c, d);
+                writer.write("&#x");
+                writer.write(Integer.toHexString(codePoint));
+                writer.write(';');
+                i += 2;
+            } else {
+                writer.write(c);
+                i++;
+            }
+        } else {
             String entityName = this.entityName(c);
             if (entityName == null) {
                 if (c > 0x7F) {
                     writer.write("&#");
                     writer.write(Integer.toString(c, 10));
                     writer.write(';');
                 } else {
                     writer.write(c);
                 }
             } else {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+            i++;
+        }
     }
 }
\ No newline at end of file
