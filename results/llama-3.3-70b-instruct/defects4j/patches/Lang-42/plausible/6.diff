diff --git a/tmp/3d816d0a-da2c-46fd-9e1e-e7d6f8e8c354_buggy.java b/tmp/7b8e2605-c8f9-4871-a02b-48b99c1b22cf_fixed.java
index 822447c..d5fe044 100644
--- a/tmp/3d816d0a-da2c-46fd-9e1e-e7d6f8e8c354_buggy.java
+++ b/tmp/7b8e2605-c8f9-4871-a02b-48b99c1b22cf_fixed.java
@@ -1,37 +1,41 @@
 /**
  * <p>
  * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
  * passed.
  * </p>
  * 
  * @param writer
  *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
  * @param str
  *            The <code>String</code> to escape. Assumed to be a non-null value.
  * @throws IOException
  *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
  *             methods.
  * 
  * @see #escape(String)
  * @see Writer
  */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
     for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        int codePoint = str.codePointAt(i);
+        String entityName = this.entityName((char) codePoint);
         if (entityName == null) {
-                if (c > 0x7F) {
+            if (codePoint > 0x7F) {
                 writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                writer.write(Integer.toString(codePoint, 10));
                 writer.write(';');
             } else {
-                    writer.write(c);
+                writer.write((char) codePoint);
             }
         } else {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
         }
+        // Consume the entire code point
+        if (codePoint > 0xFFFF) {
+            i++;
+        }
     }
 }
\ No newline at end of file
