diff --git a/tmp/aace7def-e222-467f-8d38-86594df7d3c3_buggy.java b/tmp/6d15143b-a162-4def-b77f-696a977fa120_fixed.java
index 227a4ef..fc9c258 100644
--- a/tmp/aace7def-e222-467f-8d38-86594df7d3c3_buggy.java
+++ b/tmp/6d15143b-a162-4def-b77f-696a977fa120_fixed.java
@@ -1,48 +1,72 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+        String trimmedText = text.substring(pos).trim();
+        // check if the trimmed text is too long
+        if (trimmedText.length() > width - nextLineTabStop) {
+            // split the trimmed text into chunks of maximum width - nextLineTabStop
+            String[] chunks = splitTextIntoChunks(trimmedText, width - nextLineTabStop);
+            for (int i = 0; i < chunks.length; i++) {
+                if (i > 0) {
+                    sb.append(defaultNewLine);
+                }
+                sb.append(padding).append(rtrim(chunks[i]));
+            }
+            return sb;
+        }
+        text = padding + trimmedText;
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         } else
         if (pos == lastPos)
         {
             throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
+
+// helper function to split text into chunks
+private String[] splitTextIntoChunks(String text, int chunkSize) {
+    String[] chunks = new String[(text.length() + chunkSize - 1) / chunkSize];
+    for (int i = 0; i < chunks.length; i++) {
+        int start = i * chunkSize;
+        int end = Math.min(start + chunkSize, text.length());
+        chunks[i] = text.substring(start, end);
+    }
+    return chunks;
+}
\ No newline at end of file
