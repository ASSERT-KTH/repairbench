diff --git a/tmp/fb2e3fad-04dd-4ba2-92d0-4a4f91716fe2_buggy.java b/tmp/7f7ab095-5ac2-48d9-9a46-3066df873e02_fixed.java
index 227a4ef..d6f40df 100644
--- a/tmp/fb2e3fad-04dd-4ba2-92d0-4a4f91716fe2_buggy.java
+++ b/tmp/7f7ab095-5ac2-48d9-9a46-3066df873e02_fixed.java
@@ -1,48 +1,63 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
+        String remainingText = text.substring(pos);
+        int nextSpaceIndex = remainingText.indexOf(' ');
+        if (nextSpaceIndex == -1) {
+            sb.append(padding).append(remainingText);
+            return sb;
+        }
+        
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+        text = padding + remainingText;
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         } else
         if (pos == lastPos)
         {
+            // If we can't find a position to wrap at, break up the text at the next space character
+            int nextSpacePos = pos + text.substring(pos).indexOf(' ');
+            if (nextSpacePos == pos) {
                 throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
             }
-
+            sb.append(rtrim(text.substring(0, nextSpacePos))).append(defaultNewLine);
+            text = createPadding(nextLineTabStop) + text.substring(nextSpacePos + 1).trim();
+            pos = 0;
+        } else
+        {
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
+}
\ No newline at end of file
