diff --git a/tmp/12a5a30f-b674-44fc-ae6b-935d19e3a7aa_buggy.java b/tmp/f56a4cc1-179a-4a98-970a-8f3409d38403_fixed.java
index 227a4ef..4c93aa2 100644
--- a/tmp/12a5a30f-b674-44fc-ae6b-935d19e3a7aa_buggy.java
+++ b/tmp/f56a4cc1-179a-4a98-970a-8f3409d38403_fixed.java
@@ -1,48 +1,59 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        text = text.substring(pos).trim();
+        
+        // Remove leading whitespace before finding next wrap position
+        while (text.startsWith(" ")) {
+            text = text.substring(1);
+        }
+
+        pos = findWrapPos(text, width - nextLineTabStop, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
+            sb.append(padding).append(text);
 
             return sb;
         } else
         if (pos == lastPos)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // If still at the same position, it means that the text is too long
+            // to be wrapped at this position. In this case, we can just append
+            // the text without wrapping.
+            sb.append(padding).append(text);
+
+            return sb;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
