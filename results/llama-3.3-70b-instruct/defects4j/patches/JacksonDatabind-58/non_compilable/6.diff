diff --git a/tmp/03ba4577-a698-4018-a5d0-d214ba0a0873_buggy.java b/tmp/c6f7752b-9ac9-44e8-8a4a-267d72e075e6_fixed.java
index 574b43c..12ea21e 100644
--- a/tmp/03ba4577-a698-4018-a5d0-d214ba0a0873_buggy.java
+++ b/tmp/c6f7752b-9ac9-44e8-8a4a-267d72e075e6_fixed.java
@@ -1,57 +1,59 @@
 /**
  * Method that will construct a regular bean property setter using
  * the given setter method.
  *
  * @return Property constructed, if any; or null to indicate that
  *   there should be no property based on given definitions.
  */
 protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
         BeanDescription beanDesc, BeanPropertyDefinition propDef,
         JavaType propType0)
     throws JsonMappingException
 {
     // need to ensure method is callable (for non-public)
     AnnotatedMember mutator = propDef.getNonConstructorMutator();
 
-        if (ctxt.canOverrideAccessModifiers()) {
+    if (ctxt.canOverrideAccessModifiers() && 
+       !(mutator instanceof AnnotatedMethod && ((AnnotatedMethod) mutator).getRawMethod().getDeclaringClass().equals(Throwable.class) && 
+           ((AnnotatedMethod) mutator).getName().equals("cause"))) {
         // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
         // never needed and attempts may cause problems on some platforms.
         //!!! NOTE: should be handled better for 2.8 and later
         mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
     }
     // note: this works since we know there's exactly one argument for methods
     BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
             propType0, propDef.getWrapperName(),
             beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
     JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
     // did type change?
     if (type!= propType0) {
         property = property.withType(type);
     }
 
     // First: does the Method specify the deserializer to use? If so, let's use it.
     JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
     type = modifyTypeByAnnotation(ctxt, mutator, type);
     TypeDeserializer typeDeser = type.getTypeHandler();
     SettableBeanProperty prop;
     if (mutator instanceof AnnotatedMethod) {
         prop = new MethodProperty(propDef, type, typeDeser,
                 beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
     } else {
         prop = new FieldProperty(propDef, type, typeDeser,
                 beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
     }
     if (propDeser!= null) {
         prop = prop.withValueDeserializer(propDeser);
     }
     // need to retain name of managed forward references:
     AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
     if (ref!= null && ref.isManagedReference()) {
         prop.setManagedReferenceName(ref.getName());
     }
     ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
     if(objectIdInfo!= null){
         prop.setObjectIdInfo(objectIdInfo);
     }
     return prop;
 }
\ No newline at end of file
