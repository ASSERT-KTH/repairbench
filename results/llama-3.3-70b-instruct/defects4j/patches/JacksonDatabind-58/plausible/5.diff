diff --git a/tmp/ee3aed00-8ddc-48ec-a2d6-97251f5fc400_buggy.java b/tmp/f0d9cfa4-d398-4b7a-bbd8-b861e70400c1_fixed.java
index 574b43c..1c24187 100644
--- a/tmp/ee3aed00-8ddc-48ec-a2d6-97251f5fc400_buggy.java
+++ b/tmp/f0d9cfa4-d398-4b7a-bbd8-b861e70400c1_fixed.java
@@ -1,57 +1,69 @@
 /**
  * Method that will construct a regular bean property setter using
  * the given setter method.
  *
  * @return Property constructed, if any; or null to indicate that
  *   there should be no property based on given definitions.
  */
 protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
         BeanDescription beanDesc, BeanPropertyDefinition propDef,
         JavaType propType0)
     throws JsonMappingException
 {
     // need to ensure method is callable (for non-public)
     AnnotatedMember mutator = propDef.getNonConstructorMutator();
 
-        if (ctxt.canOverrideAccessModifiers()) {
+    if (ctxt.canOverrideAccessModifiers() &&!isCauseOfThrowable(mutator)) {
         // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
         // never needed and attempts may cause problems on some platforms.
         //!!! NOTE: should be handled better for 2.8 and later
         mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
     }
     // note: this works since we know there's exactly one argument for methods
     BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
             propType0, propDef.getWrapperName(),
             beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
     JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
     // did type change?
     if (type!= propType0) {
         property = property.withType(type);
     }
 
     // First: does the Method specify the deserializer to use? If so, let's use it.
     JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
     type = modifyTypeByAnnotation(ctxt, mutator, type);
     TypeDeserializer typeDeser = type.getTypeHandler();
     SettableBeanProperty prop;
     if (mutator instanceof AnnotatedMethod) {
         prop = new MethodProperty(propDef, type, typeDeser,
                 beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
     } else {
         prop = new FieldProperty(propDef, type, typeDeser,
                 beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
     }
     if (propDeser!= null) {
         prop = prop.withValueDeserializer(propDeser);
     }
     // need to retain name of managed forward references:
     AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
     if (ref!= null && ref.isManagedReference()) {
         prop.setManagedReferenceName(ref.getName());
     }
     ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
     if(objectIdInfo!= null){
         prop.setObjectIdInfo(objectIdInfo);
     }
     return prop;
 }
+
+// Additional method to check if the member is 'cause' of Throwable
+private boolean isCauseOfThrowable(AnnotatedMember mutator) {
+    if (mutator instanceof AnnotatedMethod) {
+        AnnotatedMethod method = (AnnotatedMethod) mutator;
+        return method.getName().equals("cause") && method.getRawType().isAssignableFrom(Throwable.class);
+    } else if (mutator instanceof AnnotatedField) {
+        AnnotatedField field = (AnnotatedField) mutator;
+        return field.getName().equals("cause") && field.getRawType().isAssignableFrom(Throwable.class);
+    }
+    return false;
+}
\ No newline at end of file
