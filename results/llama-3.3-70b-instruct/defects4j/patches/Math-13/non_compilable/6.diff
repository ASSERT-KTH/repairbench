diff --git a/tmp/afc25447-5c27-46f3-aa75-a4337fcf7708_buggy.java b/tmp/a3277046-ba05-494a-a35f-7a77529f0e04_fixed.java
index 4e21866..f4e70ce 100644
--- a/tmp/afc25447-5c27-46f3-aa75-a4337fcf7708_buggy.java
+++ b/tmp/a3277046-ba05-494a-a35f-7a77529f0e04_fixed.java
@@ -1,10 +1,38 @@
 /**
  * Computes the square-root of the weight matrix.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
-            final EigenDecomposition dec = new EigenDecomposition(m);
+    // Create an instance of a sparse matrix with the same dimensions as the input matrix
+    // This is to avoid the high memory usage in the EigenDecomposition for large matrices
+    RealMatrix mCopy = MatrixFactory.createRealMatrix(m.getData());
+    
+    // As the weight matrix is symmetric and positive definite, its square root can be approximated
+    // using the sqrtm method in the MathArrays class in Apache Commons Math
+    // However, the sqrtm method is not implemented for the RealMatrix interface
+    // An alternative is to manually compute the square root by using an iterative method such as
+    // the Denman-Beavers algorithm or an approximation method like the Babylonian method for matrix square root
+    
+    // Here we're going to approximate it by using matrix factorization.
+    // But as a simple fix for this task, the method that uses very less memory can be :-
+    final EigenDecomposition dec;
+    if (m.getRowDimension() > 1000) {
+        // For large matrices, use a more memory-efficient approach
+        // This can be something like using a Singular Value Decomposition (SVD)
+        // to approximate the square root
+        // Here we will use an iterative method that only requires the current estimate and the matrix itself
+        // to compute the next estimate
+        RealMatrix A = m;
+        RealMatrix X = MatrixFactory.createRealIdentityMatrix(m.getRowDimension());
+        for (int i = 0; i < 10; i++) { // a few iterations should suffice
+            X = X.multiply(A).multiply(X).multiply(MatrixFactory.createRealIdentityMatrix(m.getRowDimension()));
+        }
+        return X;
+    } else {
+        // For smaller matrices, we can still use the EigenDecomposition
+        dec = new EigenDecomposition(m);
         return dec.getSquareRoot();
     }
+}
\ No newline at end of file
