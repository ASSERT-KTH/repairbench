diff --git a/tmp/5e3cded1-7cfe-42e4-bff4-ce2e00e897cb_buggy.java b/tmp/1cb2a58a-4cf2-4e4d-8060-dcc9ba6adcc0_fixed.java
index 4e21866..0d1fcf5 100644
--- a/tmp/5e3cded1-7cfe-42e4-bff4-ce2e00e897cb_buggy.java
+++ b/tmp/1cb2a58a-4cf2-4e4d-8060-dcc9ba6adcc0_fixed.java
@@ -1,10 +1,48 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
-            final EigenDecomposition dec = new EigenDecomposition(m);
+        // Create a copy of the input matrix to avoid modifying the original
+        RealMatrix matrix = m.copy();
+        
+        // Check if the input matrix is symmetric
+        if (!isSymmetric(matrix)) {
+            // If not, try to make it symmetric by averaging it with its transpose
+            matrix = makeSymmetric(matrix);
+        }
+
+        // Create a new eigen decomposition
+        final EigenDecomposition dec = new EigenDecomposition(matrix);
+        
+        // Get the square root of the matrix from the eigen decomposition
         return dec.getSquareRoot();
     }
+
+    // Helper function to check if a matrix is symmetric
+    private boolean isSymmetric(RealMatrix m) {
+        RealMatrix transpose = m.transpose();
+        double tolerance = 1e-10;
+        for (int i = 0; i < m.getRowDimension(); i++) {
+            for (int j = 0; j < m.getColumnDimension(); j++) {
+                if (FastMath.abs(m.getEntry(i, j) - transpose.getEntry(i, j)) > tolerance) {
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
+
+    // Helper function to make a matrix symmetric by averaging it with its transpose
+    private RealMatrix makeSymmetric(RealMatrix m) {
+        RealMatrix transpose = m.transpose();
+        RealMatrix symmetric = new Array2DRowRealMatrix(m.getRowDimension(), m.getColumnDimension());
+        for (int i = 0; i < m.getRowDimension(); i++) {
+            for (int j = 0; j < m.getColumnDimension(); j++) {
+                symmetric.setEntry(i, j, (m.getEntry(i, j) + transpose.getEntry(i, j)) / 2.0);
+            }
+        }
+        return symmetric;
+    }
\ No newline at end of file
