diff --git a/tmp/fd1f2652-8ef3-4390-8e6d-20c930266cac_buggy.java b/tmp/4b86e2ab-8a2d-4b47-ab4b-823f424fb7e6_fixed.java
index c4b260c..0860d9b 100644
--- a/tmp/fd1f2652-8ef3-4390-8e6d-20c930266cac_buggy.java
+++ b/tmp/4b86e2ab-8a2d-4b47-ab4b-823f424fb7e6_fixed.java
@@ -1,51 +1,68 @@
-    // todo - this is getting gnarly. needs a rewrite.
+// This function has been fixed to discard spurious Byte Order Marks (BOMs) 
+// when no charset is set in the incoming HTML document.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        byteData.mark();
+        byte[] utf8Bytes = new byte[3];
+        byteData.get(utf8Bytes);
+        byteData.reset();
+        
+        if (utf8Bytes[0] == (byte) 0xef && utf8Bytes[1] == (byte) 0xbb && utf8Bytes[2] == (byte) 0xbf) {
+            // Found UTF-8 BOM, skip it
+            byteData.position(3);
+            docData = Charset.forName("UTF-8").decode(byteData).toString();
+        } else {
+            // No UTF-8 BOM, proceed as before
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        }
+        
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta!= null) { // if not found, will keep utf-8 as best attempt
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
             if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+    
+    // If a UTF-8 BOM was previously skipped, no need to check for it again
+    if (!docData.startsWith("\uFEFF")) {
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
             byteData.rewind();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
             charsetName = defaultCharset;
         }
+    }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
