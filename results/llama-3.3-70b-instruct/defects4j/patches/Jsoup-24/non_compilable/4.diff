diff --git a/tmp/5c5c6cd7-1765-4cd1-9b4a-563fcc1f9f50_buggy.java b/tmp/06aa4544-de59-4240-87ec-019804549110_fixed.java
index b2d53db..9e6f253 100644
--- a/tmp/5c5c6cd7-1765-4cd1-9b4a-563fcc1f9f50_buggy.java
+++ b/tmp/06aa4544-de59-4240-87ec-019804549110_fixed.java
@@ -1,34 +1,73 @@
 void read(Tokeniser t, CharacterReader r) {
     if (r.matchesLetter()) {
         String name = r.consumeLetterSequence();
         t.tagPending.appendTagName(name.toLowerCase());
         t.dataBuffer.append(name);
         r.advance();
         return;
     }
 
-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
+    // Added a check for script data state
+    if (t.current-states[ScriptData]) {
+        char c = r.consume();
+        switch (c) {
+            case '\t':
+            case '\n':
+            case '\f':
+            case ' ':
+                t.transition(BeforeAttributeName);
+                break;
+            case '/':
+                t.transition(SelfClosingStartTag);
+                break;
+            case '>':
+                t.emitTagPending();
+                t.transition(Data);
+                break;
+            case '<':
+                t.dataBuffer.append(c);
+                if (r.isEmpty()) {
+                    anythingElse(t, r);
+                } else {
+                    char nextChar = r.current();
+                    if (nextChar == '!') {
+                        t.transition(ServerCodeState);
+                    } else if (nextChar == '/') {
+                        t.transition(EndTag);
+                    } else {
+                        anythingElse(t, r);
+                    }
+                }
+                break;
+            default:
+                t.dataBuffer.append(c);
+                if (r.isEmpty()) {
+                    anythingElse(t, r);
+                }
+                break;
+        }
+    } else if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {
         char c = r.consume();
         switch (c) {
             case '\t':
             case '\n':
             case '\f':
             case ' ':
                 t.transition(BeforeAttributeName);
                 break;
             case '/':
                 t.transition(SelfClosingStartTag);
                 break;
             case '>':
                 t.emitTagPending();
                 t.transition(Data);
                 break;
             default:
                 t.dataBuffer.append(c);
                 anythingElse(t, r);
                 break;
         }
     } else {
         anythingElse(t, r);
     }
 }
\ No newline at end of file
