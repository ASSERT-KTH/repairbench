diff --git a/tmp/7bce9f56-c08d-46cd-af1f-e98aa6c85f23_buggy.java b/tmp/833fa7cc-dc07-4238-8a2e-3774df36384c_fixed.java
index 0b7c52e..2eba79c 100644
--- a/tmp/7bce9f56-c08d-46cd-af1f-e98aa6c85f23_buggy.java
+++ b/tmp/833fa7cc-dc07-4238-8a2e-3774df36384c_fixed.java
@@ -1,27 +1,36 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
       child!= null;
       child = child.getNext()) {
     // Maybe STRING, GET, SET
 
     // We should never see a mix of numbers and strings.
     String name = child.getString();
     T type = typeSystem.getType(getScope(), n, name);
 
+    if (child instanceof Node.Key) {
+      // Handle the case where the key is not a string literal
+      // (e.g., it's a number or a symbol).
+      if (child.getBooleanProp(Node.IS_COMPUTED_PROP)) {
+        // If the property is computed, it cannot be renamed.
+        continue;
+      }
+    }
+
     Property prop = getProperty(name);
     if (!prop.scheduleRenaming(child,
                                processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
