diff --git a/tmp/032f07b5-fdef-4e6f-ae9d-f4e3c74c67e5_buggy.java b/tmp/15c74e2e-a634-4e77-b6ea-ed9686271706_fixed.java
index 0b7c52e..4edabee 100644
--- a/tmp/032f07b5-fdef-4e6f-ae9d-f4e3c74c67e5_buggy.java
+++ b/tmp/15c74e2e-a634-4e77-b6ea-ed9686271706_fixed.java
@@ -1,27 +1,40 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
       child!= null;
       child = child.getNext()) {
     // Maybe STRING, GET, SET
 
     // We should never see a mix of numbers and strings.
     String name = child.getString();
+    if (name == null) {
+      // Skip non-string keys
+      continue;
+    }
+
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
+    if (prop!= null) {
       if (!prop.scheduleRenaming(child,
                                  processProperty(t, prop, type, null))) {
         // TODO(user): It doesn't look like the user can do much in this
         // case right now.
         if (propertiesToErrorFor.containsKey(name)) {
           compiler.report(JSError.make(
               t.getSourceName(), child, propertiesToErrorFor.get(name),
               Warnings.INVALIDATION, name,
               (type == null? "null" : type.toString()), n.toString(), ""));
         }
       }
+    } else {
+      // Handle null property
+      compiler.report(JSError.make(
+          t.getSourceName(), child, "Unknown property",
+          Warnings.UNKNOWN_PROPERTY, name,
+          n.toString(), ""));
+    }
   }
 }
\ No newline at end of file
