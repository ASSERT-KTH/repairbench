diff --git a/tmp/7290cd3e-59f6-41af-933a-20a967adaa52_buggy.java b/tmp/1260b221-f2d3-4cea-9329-2cd5132ddfd3_fixed.java
index 88647d1..f9a23f8 100644
--- a/tmp/7290cd3e-59f6-41af-933a-20a967adaa52_buggy.java
+++ b/tmp/1260b221-f2d3-4cea-9329-2cd5132ddfd3_fixed.java
@@ -1,44 +1,51 @@
 /**
  * Find a zero in the given interval.
  * <p>
  * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
+ * signs or one of them is zero. An <code>IllegalArgumentException</code> is thrown if this is not
  * the case.</p>
  * 
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
  * @throws FunctionEvaluationException if an error occurs evaluating the
  * function 
  * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
+ * signs of the values of the function at the endpoints are not opposites and neither is zero
  */
 public double solve(double min, double max) throws MaxIterationsExceededException, 
     FunctionEvaluationException {
     
     clearResult();
     verifyInterval(min, max);
     
     double ret = Double.NaN;
     
     double yMin = f.value(min);
     double yMax = f.value(max);
     
+    // Check if either value is a zero
+    if (Math.abs(yMin) < solverAbsoluteAccuracy) {
+        return min;
+    }
+    if (Math.abs(yMax) < solverAbsoluteAccuracy) {
+        return max;
+    }
+    
     // Verify bracketing
     double sign = yMin * yMax;
     if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+        // neither value is close to a zero and min and max do not bracket root.
         throw new IllegalArgumentException
         ("Function values at endpoints do not have different signs." +
                 "  Endpoints: [" + min + "," + max + "]" + 
                 "  Values: [" + yMin + "," + yMax + "]");
     } else {
         // solve using only the first endpoint as initial guess
         ret = solve(min, yMin, max, yMax, min, yMin);
         // either min or max is a root
     }
 
     return ret;
 }
\ No newline at end of file
