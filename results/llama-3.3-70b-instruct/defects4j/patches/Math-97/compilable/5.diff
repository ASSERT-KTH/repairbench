diff --git a/tmp/2c3f7d0c-332d-4db2-ac9d-e68e35c7348b_buggy.java b/tmp/e8beca92-5ee7-49a3-a698-bce10c9056eb_fixed.java
index 88647d1..77ceffc 100644
--- a/tmp/2c3f7d0c-332d-4db2-ac9d-e68e35c7348b_buggy.java
+++ b/tmp/e8beca92-5ee7-49a3-a698-bce10c9056eb_fixed.java
@@ -1,44 +1,47 @@
 /**
  * Find a zero in the given interval.
  * <p>
  * Requires that the values of the function at the endpoints have opposite
  * signs. An <code>IllegalArgumentException</code> is thrown if this is not
  * the case.</p>
  * 
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
  * @throws FunctionEvaluationException if an error occurs evaluating the
  * function 
  * @throws IllegalArgumentException if min is not less than max or the
  * signs of the values of the function at the endpoints are not opposites
  */
 public double solve(double min, double max) throws MaxIterationsExceededException, 
     FunctionEvaluationException {
         
     clearResult();
     verifyInterval(min, max);
         
     double ret = Double.NaN;
         
     double yMin = f.value(min);
     double yMax = f.value(max);
         
     // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
+    if (Math.signum(yMin) == Math.signum(yMax) && Math.signum(yMin)!= 0) {
         // neither value is close to zero and min and max do not bracket root.
         throw new IllegalArgumentException
         ("Function values at endpoints do not have different signs." +
                 "  Endpoints: [" + min + "," + max + "]" + 
                 "  Values: [" + yMin + "," + yMax + "]");
     } else {
-            // solve using only the first endpoint as initial guess
+        if (Math.signum(yMin) == 0) {
+            return min;
+        } else if (Math.signum(yMax) == 0) {
+            return max;
+        } else {
+            // solve using Brent method
             ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+        }
     }
 
     return ret;
 }
\ No newline at end of file
