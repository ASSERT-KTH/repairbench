diff --git a/tmp/64121627-772d-4315-ae9b-52dcb2c68d3a_buggy.java b/tmp/d66c068c-ec92-455d-8d7e-44c278c7b34f_fixed.java
index ae1bc64..d386317 100644
--- a/tmp/64121627-772d-4315-ae9b-52dcb2c68d3a_buggy.java
+++ b/tmp/d66c068c-ec92-455d-8d7e-44c278c7b34f_fixed.java
@@ -1,42 +1,45 @@
 /**
  * <p>
  * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.
  * </p>
  *
  * <p>
  * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.
  * The comparison is case sensitive.
  * </p>
  *
  * <pre>
  * StringUtils.equals(null, null)   = true
  * StringUtils.equals(null, "abc")  = false
  * StringUtils.equals("abc", null)  = false
  * StringUtils.equals("abc", "abc") = true
  * StringUtils.equals("abc", "ABC") = false
  * </pre>
  *
  * <p>
  * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).
  * </p>
  *
  * @see Object#equals(Object)
  * @param cs1
  *            the first CharSequence, may be <code>null</code>
  * @param cs2
  *            the second CharSequence, may be <code>null</code>
  * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>
  * @since 1.10
  */
 public static boolean equals(final CharSequence cs1, final CharSequence cs2) {
     if (cs1 == cs2) {
         return true;
     }
     if (cs1 == null || cs2 == null) {
         return false;
     }
+    if (cs1.length()!= cs2.length()) {
+        return false;
+    }
     if (cs1 instanceof String && cs2 instanceof String) {
         return cs1.equals(cs2);
     }
-        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
+    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());
 }
\ No newline at end of file
