diff --git a/tmp/6071cd96-1b17-43ea-96ba-8aa3e329e277_buggy.java b/tmp/420fc028-5bac-4b13-bbad-4cca97df998a_fixed.java
index 875b31b..9a0c15b 100644
--- a/tmp/6071cd96-1b17-43ea-96ba-8aa3e329e277_buggy.java
+++ b/tmp/420fc028-5bac-4b13-bbad-4cca97df998a_fixed.java
@@ -1,54 +1,62 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, width, nextLineTabStop); // Start from the tab stop position
 
         if (pos == -1)
         {
-                sb.append(text);
+            sb.append(rtrim(text, nextLineTabStop)); // Remove leading padding when adding last line
 
             return sb;
         }
         
         if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
+
+// Additional helper function to remove leading padding
+private String rtrim(String text, int paddingLength) {
+    if (text.length() > paddingLength) {
+        return text.substring(paddingLength);
+    }
+    return "";
+}
\ No newline at end of file
