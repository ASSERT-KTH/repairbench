diff --git a/tmp/e63aa112-9394-4130-b337-a7537117df66_buggy.java b/tmp/f104f828-e3f0-4147-85a4-c62118a980cb_fixed.java
index 875b31b..302f26e 100644
--- a/tmp/e63aa112-9394-4130-b337-a7537117df66_buggy.java
+++ b/tmp/f104f828-e3f0-4147-85a4-c62118a980cb_fixed.java
@@ -1,54 +1,54 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        int leadingSpaces = getLeadingSpaces(text);
+        text = text.substring(leadingSpaces);
+        pos = findWrapPos(text, width - leadingSpaces, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
+            sb.append(text.substring(0));
 
             return sb;
         }
         
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
+        sb.append(text.substring(0, pos)).append(defaultNewLine);
+        text = text.substring(pos);
+    }
 }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+// New helper function to get leading spaces
+private int getLeadingSpaces(String text) {
+    int count = 0;
+    for (char c : text.toCharArray()) {
+        if (Character.isWhitespace(c)) {
+            count++;
+        } else {
+            break;
         }
     }
+    return count;
+}
\ No newline at end of file
