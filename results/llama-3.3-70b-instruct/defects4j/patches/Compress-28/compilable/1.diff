diff --git a/tmp/99f1dbfc-2cb3-4413-833c-a9501c220d74_buggy.java b/tmp/5031d943-6984-47c7-a193-f8e2fad96472_fixed.java
index 0f439b3..3f45f29 100644
--- a/tmp/99f1dbfc-2cb3-4413-833c-a9501c220d74_buggy.java
+++ b/tmp/5031d943-6984-47c7-a193-f8e2fad96472_fixed.java
@@ -1,38 +1,47 @@
 /**
  * Reads bytes from the current tar archive entry.
  *
  * This method is aware of the boundaries of the current
  * entry in the archive and will deal with them as if they
  * were this stream's start and EOF.
  *
  * @param buf The buffer into which to place bytes read.
  * @param offset The offset at which to place bytes read.
  * @param numToRead The number of bytes to read.
  * @return The number of bytes read, or -1 at EOF.
  * @throws IOException on error
  */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
     int totalRead = 0;
 
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
-        numToRead = Math.min(numToRead, available());
-        
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
-        if (totalRead == -1) {
+    int bytesRead = 0;
+    while (bytesRead < numToRead) {
+        int read = Math.min(numToRead - bytesRead, available());
+        if (read <= 0) {
+            break;
+        }
+        int ret = is.read(buf, offset + bytesRead, read);
+        count(ret);
+        if (ret == -1) {
             hasHitEOF = true;
-        } else {
-            entryOffset += totalRead;
+            break;
+        }
+        bytesRead += ret;
+        entryOffset += ret;
+    }
+
+    if (bytesRead < numToRead && entryOffset < entrySize) {
+        throw new IOException("Truncated tar archive entry");
     }
 
-        return totalRead;
+    return bytesRead == 0 && hasHitEOF? -1 : bytesRead;
 }
\ No newline at end of file
