diff --git a/tmp/df3878d1-f89e-4a63-9fe3-8ee910429ea2_buggy.java b/tmp/5aaff386-6eb7-4cfa-8df5-3e80421d88be_fixed.java
index 0f439b3..acd4c67 100644
--- a/tmp/df3878d1-f89e-4a63-9fe3-8ee910429ea2_buggy.java
+++ b/tmp/5aaff386-6eb7-4cfa-8df5-3e80421d88be_fixed.java
@@ -1,38 +1,44 @@
 /**
  * Reads bytes from the current tar archive entry.
  *
  * This method is aware of the boundaries of the current
  * entry in the archive and will deal with them as if they
  * were this stream's start and EOF.
  *
  * @param buf The buffer into which to place bytes read.
  * @param offset The offset at which to place bytes read.
  * @param numToRead The number of bytes to read.
  * @return The number of bytes read, or -1 at EOF.
  * @throws IOException on error
  */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
     int totalRead = 0;
 
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
+    int remaining = entrySize - entryOffset;
+    numToRead = Math.min(numToRead, remaining);
     numToRead = Math.min(numToRead, available());
     
+    if (numToRead < 0) {
+        throw new IOException("Truncated tar archive entry");
+    }
+
     totalRead = is.read(buf, offset, numToRead);
     count(totalRead);
     
     if (totalRead == -1) {
         hasHitEOF = true;
     } else {
         entryOffset += totalRead;
     }
 
     return totalRead;
 }
\ No newline at end of file
