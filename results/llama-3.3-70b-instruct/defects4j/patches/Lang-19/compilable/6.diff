diff --git a/tmp/a39beb34-8931-4039-9d5d-9f5c0e8226bf_buggy.java b/tmp/cbfbd4e1-136e-4783-b7c9-50010e65abab_fixed.java
index 72a422c..1db2cad 100644
--- a/tmp/a39beb34-8931-4039-9d5d-9f5c0e8226bf_buggy.java
+++ b/tmp/cbfbd4e1-136e-4783-b7c9-50010e65abab_fixed.java
@@ -1,51 +1,60 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < seqEnd) {
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
                 // Check there's more than just an x after the &#
             }
 
             int end = start;
             // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
+            while(end < seqEnd && input.charAt(end)!= ';')
             {
                 end++;
             }
 
-            int entityValue;
+            if (end < seqEnd && input.charAt(end) == ';') {
                 try {
+                    int entityValue;
                     if(isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
 
                     if(entityValue > 0xFFFF) {
                         char[] chrs = Character.toChars(entityValue);
                         out.write(chrs[0]);
                         out.write(chrs[1]);
                     } else {
                         out.write(entityValue);
                     }
 
-
                     return 2 + (end - start) + (isHex? 1 : 0) + 1;
+                } catch(NumberFormatException nfe) {
+                    // Silently ignore parsing errors
+                    return 0;
+                }
+            } else {
+                // Silently ignore unfinished entities
+                return 0;
+            }
+        } else {
+            // Silently ignore out-of-bounds input
+            return 0;
+        }
     }
     return 0;
 }
\ No newline at end of file
