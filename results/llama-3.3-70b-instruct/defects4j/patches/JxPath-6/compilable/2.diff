diff --git a/tmp/7ef7272d-48c4-4cce-a982-5a1c788290fc_buggy.java b/tmp/0c97cb84-f129-4bde-9eca-3ec50e4320ac_fixed.java
index f650982..93fa4c9 100644
--- a/tmp/7ef7272d-48c4-4cce-a982-5a1c788290fc_buggy.java
+++ b/tmp/0c97cb84-f129-4bde-9eca-3ec50e4320ac_fixed.java
@@ -1,42 +1,47 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) &&!(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    // Compare primitive types by using equals()
+    // Only change this last line
+    return equals(l, r);
+}
+
+// You may also need to implement equals method if it doesn't exist
+public boolean equals(Object o1, Object o2) {
+    if (o1 == null && o2 == null) return true;
+    if (o1 == null || o2 == null) return false;
+    return o1.equals(o2);
 }
\ No newline at end of file
