diff --git a/tmp/f49045bf-156f-4fd9-aabb-c1d83c3de690_buggy.java b/tmp/bad561f3-3d78-45ae-b16f-92bc38f10bdf_fixed.java
index f650982..6652f9d 100644
--- a/tmp/f49045bf-156f-4fd9-aabb-c1d83c3de690_buggy.java
+++ b/tmp/bad561f3-3d78-45ae-b16f-92bc38f10bdf_fixed.java
@@ -1,42 +1,71 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) &&!(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        Iterator it = (Iterator) l;
+        while (it.hasNext()) {
+            if (equalValue(it.next(), r)) {
+                return true;
+            }
+        }
+        return false;
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        Iterator it = (Iterator) r;
+        while (it.hasNext()) {
+            if (equalValue(l, it.next())) {
+                return true;
+            }
+        }
+        return false;
     }
     if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        Iterator it1 = (Iterator) l;
+        Iterator it2 = (Iterator) r;
+        while (it1.hasNext() && it2.hasNext()) {
+            if (!equalValue(it1.next(), it2.next())) {
+                return false;
             }
-        return equal(l, r);
+        }
+        return!it1.hasNext() &&!it2.hasNext();
+    }
+    return equalValue(l, r);
+}
+
+// Helper function to compare two values
+private boolean equalValue(Object l, Object r) {
+    if (l == null && r == null) {
+        return true;
+    }
+    if (l == null || r == null) {
+        return false;
+    }
+    if (l.getClass().equals(r.getClass())) {
+        return l.equals(r);
+    }
+    return l.toString().equals(r.toString());
 }
\ No newline at end of file
