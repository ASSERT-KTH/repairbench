diff --git a/tmp/b476a1f1-ab18-42e2-a897-8d87f71a1d96_buggy.java b/tmp/47869276-72ca-4ab0-a66a-b00dbd568e45_fixed.java
index 735a993..942fe21 100644
--- a/tmp/b476a1f1-ab18-42e2-a897-8d87f71a1d96_buggy.java
+++ b/tmp/47869276-72ca-4ab0-a66a-b00dbd568e45_fixed.java
@@ -1,29 +1,35 @@
 /**
  * Appends an object to the builder padding on the right to a fixed length.
  * The <code>toString</code> of the object is used.
  * If the object is larger than the length, the right hand side is lost.
  * If the object is null, null text value is used.
  * 
  * @param obj  the object to append, null uses null text
  * @param width  the fixed field width, zero or negative has no effect
  * @param padChar  the pad character to use
  * @return this, to enable chaining
  */
 public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {
     if (width > 0) {
-            ensureCapacity(size + width);
         String str = (obj == null? getNullText() : obj.toString());
         int strLen = str.length();
-            if (strLen >= width) {
-                str.getChars(0, strLen, buffer, size);
-            } else {
+        if (strLen > width) {
+            strLen = width; // truncate if longer than desired width
+        }
+        ensureCapacity(size + width);
+        if (strLen < width) {
             int padLen = width - strLen;
             str.getChars(0, strLen, buffer, size);
             for (int i = 0; i < padLen; i++) {
                 buffer[size + strLen + i] = padChar;
             }
+        } else {
+            str.getChars(0, strLen, buffer, size);
+            for (int i = strLen; i < width; i++) {
+                buffer[size + i] = padChar;
+            }
         }
         size += width;
     }
     return this;
 }
\ No newline at end of file
