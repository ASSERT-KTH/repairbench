diff --git a/tmp/bc1f6d4b-106b-4ac9-83b5-008964482928_buggy.java b/tmp/c091d8e2-ad9d-4b9f-8661-b6df0c574da3_fixed.java
index 1bbc082..7d720a9 100644
--- a/tmp/bc1f6d4b-106b-4ac9-83b5-008964482928_buggy.java
+++ b/tmp/c091d8e2-ad9d-4b9f-8661-b6df0c574da3_fixed.java
@@ -1,36 +1,39 @@
 /**
  * Write an long integer into a buffer as an octal string if this
  * will fit, or as a binary number otherwise.
  * 
  * Uses {@link #formatUnsignedOctalString} to format
  * the value as an octal string with leading zeros.
  * The converted number is followed by a space.
  * 
  * @param value The value to write into the buffer.
  * @param buf The destination buffer.
  * @param offset The starting offset into the buffer.
  * @param length The length of the buffer.
  * @return The updated offset.
  * @throws IllegalArgumentException if the value (and trailer)
  * will not fit in the buffer.
  * @since 1.4
  */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
     // Check whether we are dealing with UID/GID or SIZE field
     final long maxAsOctalChar = length == TarConstants.UIDLEN? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
-            return formatLongOctalBytes(value, buf, offset, length);
-        }
+    long absValue = negative? -value : value;
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+    if (absValue <= maxAsOctalChar) { // OK to store as octal chars
+        return formatLongOctalBytes(negative? -absValue : absValue, buf, offset, length);
     }
+
+    // Try to fit the value into the buffer as a binary number
+    if (length >= 9) {
         formatBigIntegerBinary(value, buf, offset, length, negative);
-
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
+    } else {
+        // buffer is too small for binary representation
+        throw new IllegalArgumentException("Value is too large for " + length + " byte field.");
+    }
 }
\ No newline at end of file
