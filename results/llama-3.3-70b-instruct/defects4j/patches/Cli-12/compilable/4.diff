diff --git a/tmp/850f7a46-1b18-41b8-a9eb-b04294866c4e_buggy.java b/tmp/944e96a2-daf5-4a2f-92df-2fbb04e1b85e_fixed.java
index 7e64f1d..e9678b7 100644
--- a/tmp/850f7a46-1b18-41b8-a9eb-b04294866c4e_buggy.java
+++ b/tmp/944e96a2-daf5-4a2f-92df-2fbb04e1b85e_fixed.java
@@ -1,78 +1,95 @@
 /**
  * <p>This flatten method does so using the following rules:
  * <ol>
  *  <li>If an {@link Option} exists for the first character of 
  *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
  *  does not exist for the whole <code>argument</code> then
  *  add the first character as an option to the processed tokens
  *  list e.g. "-D" and add the rest of the entry to the also.</li>
  *  <li>Otherwise just add the token to the processed tokens list.
  *  </li>
  * </ol>
  * </p>
  *
  * @param options The Options to parse the arguments by.
  * @param arguments The arguments that have to be flattened.
  * @param stopAtNonOption specifies whether to stop 
  * flattening when a non option has been encountered
  * @return a String array of the flattened arguments
  */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
     List tokens = new ArrayList();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
         else if (arg.startsWith("-"))
+        {
+            if (arg.contains("="))
+            {
+                String[] parts = arg.split("=", 2);
+                String opt = Util.stripLeadingHyphens(parts[0]);
+
+                if (options.hasOption(opt))
+                {
+                    tokens.add(parts[0]);
+                    tokens.add(parts[1]);
+                }
+                else
+                {
+                    eatTheRest = stopAtNonOption;
+                    tokens.add(arg);
+                }
+            }
+            else
             {
                 String opt = Util.stripLeadingHyphens(arg);
 
                 if (options.hasOption(opt))
                 {
                     tokens.add(arg);
                 }
                 else
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    if (arg.length() > 1 && options.hasOption(String.valueOf(arg.charAt(1))))
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        tokens.add(String.valueOf(arg.charAt(0)) + arg.charAt(1));
+                        tokens.add(arg.substring(2));
                     }
                     else
                     {
                         eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
                 }
             }
+        }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
