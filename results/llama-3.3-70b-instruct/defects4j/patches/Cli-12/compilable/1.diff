diff --git a/tmp/d7d2aa40-1f77-4c6f-b550-6cf858c1c862_buggy.java b/tmp/3abe103e-17cc-455a-bcb5-5a33a3387cbb_fixed.java
index 7e64f1d..35fa350 100644
--- a/tmp/d7d2aa40-1f77-4c6f-b550-6cf858c1c862_buggy.java
+++ b/tmp/3abe103e-17cc-455a-bcb5-5a33a3387cbb_fixed.java
@@ -1,78 +1,106 @@
 /**
  * <p>This flatten method does so using the following rules:
  * <ol>
  *  <li>If an {@link Option} exists for the first character of 
  *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
  *  does not exist for the whole <code>argument</code> then
  *  add the first character as an option to the processed tokens
  *  list e.g. "-D" and add the rest of the entry to the also.</li>
  *  <li>Otherwise just add the token to the processed tokens list.
  *  </li>
  * </ol>
  * </p>
  *
  * @param options The Options to parse the arguments by.
  * @param arguments The arguments that have to be flattened.
  * @param stopAtNonOption specifies whether to stop 
  * flattening when a non option has been encountered
  * @return a String array of the flattened arguments
  */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
     List tokens = new ArrayList();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
         else if (arg.startsWith("-"))
         {
             String opt = Util.stripLeadingHyphens(arg);
 
-                if (options.hasOption(opt))
+            int equalsIndex = arg.indexOf('=');
+            if (equalsIndex > 0)
+            {
+                String shortOpt = arg.substring(0, equalsIndex);
+                if (shortOpt.startsWith("--"))
+                {
+                    shortOpt = shortOpt.substring(0, equalsIndex - 1);
+                }
+                else if (shortOpt.startsWith("-"))
+                {
+                    shortOpt = shortOpt.substring(0, equalsIndex - 1);
+                }
+                else
+                {
+                    shortOpt = shortOpt.substring(1, equalsIndex);
+                }
+
+                if (shortOpt.length() > 1)
+                {
+                    tokens.add("-" + shortOpt);
+                }
+                else
+                {
+                    tokens.add("-" + shortOpt);
+                }
+
+                tokens.add(arg.substring(equalsIndex + 1));
+            }
+            else if (options.hasOption(opt))
             {
                 tokens.add(arg);
             }
             else
             {
                 if (options.hasOption(arg.substring(0, 2)))
                 {
                     // the format is --foo=value or -foo=value
                     // the format is a special properties option (-Dproperty=value)
                     tokens.add(arg.substring(0, 2)); // -D
                     tokens.add(arg.substring(2)); // property=value
                 }
                 else
                 {
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
         }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
