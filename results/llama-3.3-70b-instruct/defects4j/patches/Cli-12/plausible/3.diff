diff --git a/tmp/c5c6e61b-f00d-4a71-b853-8b2550327632_buggy.java b/tmp/aef62f42-18e3-4287-a201-979b2c018650_fixed.java
index 7e64f1d..9922107 100644
--- a/tmp/c5c6e61b-f00d-4a71-b853-8b2550327632_buggy.java
+++ b/tmp/aef62f42-18e3-4287-a201-979b2c018650_fixed.java
@@ -1,78 +1,122 @@
 /**
  * <p>This flatten method does so using the following rules:
  * <ol>
  *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
+ *  the <code>arguments</code> entry <b>OR</b> an {@link Option} 
  *  does not exist for the whole <code>argument</code> then
  *  add the first character as an option to the processed tokens
  *  list e.g. "-D" and add the rest of the entry to the also.</li>
  *  <li>Otherwise just add the token to the processed tokens list.
  *  </li>
  * </ol>
  * </p>
  *
  * @param options The Options to parse the arguments by.
  * @param arguments The arguments that have to be flattened.
  * @param stopAtNonOption specifies whether to stop 
  * flattening when a non option has been encountered
  * @return a String array of the flattened arguments
  */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
     List tokens = new ArrayList();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
         else if (arg.startsWith("-"))
         {
             String opt = Util.stripLeadingHyphens(arg);
 
             if (options.hasOption(opt))
             {
                 tokens.add(arg);
             }
             else
             {
-                    if (options.hasOption(arg.substring(0, 2)))
+                if (arg.contains("=") && arg.indexOf("=") > 1)
                 {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                    String optionStr = arg.substring(0, arg.indexOf("="));
+                    String optionWithoutLeadingHyphens = Util.stripLeadingHyphens(optionStr);
+                    if (options.hasOption(optionWithoutLeadingHyphens))
+                    {
+                        tokens.add(optionStr);
+                        tokens.add(arg.substring(arg.indexOf("=") + 1));
+                    }
+                    else
+                    {
+                        // Check for single character options with arguments in the form -Dproperty=value
+                        if (arg.length() > 2 && arg.charAt(1)!= '-')
+                        {
+                            String optionChar = arg.substring(1, 2);
+                            if (options.hasOption(optionChar))
+                            {
+                                tokens.add("-" + optionChar);
+                                tokens.add(arg.substring(2));
+                            }
+                            else
+                            {
+                                eatTheRest = stopAtNonOption;
+                                tokens.add(arg);
+                            }
                         }
                         else
                         {
                             eatTheRest = stopAtNonOption;
                             tokens.add(arg);
                         }
                     }
                 }
                 else
+                {
+                    // Check for single character options with arguments in the form -Dproperty
+                    if (arg.length() > 2 && arg.charAt(1)!= '-')
+                    {
+                        String optionChar = arg.substring(1, 2);
+                        if (options.hasOption(optionChar))
+                        {
+                            tokens.add("-" + optionChar);
+                            tokens.add(arg.substring(2));
+                        }
+                        else
+                        {
+                            eatTheRest = stopAtNonOption;
+                            tokens.add(arg);
+                        }
+                    }
+                    else
+                    {
+                        eatTheRest = stopAtNonOption;
+                        tokens.add(arg);
+                    }
+                }
+            }
+        }
+        else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
