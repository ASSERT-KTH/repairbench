diff --git a/tmp/54d7b77a-97b9-4af1-ae81-d612b19e95f5_buggy.java b/tmp/5cf6888e-d288-4783-bee0-6970d337dad5_fixed.java
index 388771b..3439f36 100644
--- a/tmp/54d7b77a-97b9-4af1-ae81-d612b19e95f5_buggy.java
+++ b/tmp/5cf6888e-d288-4783-bee0-6970d337dad5_fixed.java
@@ -1,37 +1,52 @@
 /**
  * Creates a new timeseries by copying a subset of the data in this time
  * series.
  *
  * @param start  the index of the first time period to copy.
  * @param end  the index of the last time period to copy.
  *
  * @return A series containing a copy of this times series from start until
  *         end.
  *
  * @throws CloneNotSupportedException if there is a cloning problem.
  */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
     copy.data = new java.util.ArrayList();
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
             TimeSeriesDataItem item
                     = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
-                try {
-                    copy.add(clone);
+            copy.add(clone); // Add item without try-catch block
         }
-                catch (SeriesException e) {
-                    e.printStackTrace();
     }
+    // Update minimum and maximum y values after adding items
+    if (!copy.data.isEmpty()) {
+        double minY = ((TimeSeriesDataItem) copy.data.get(0)).getValue();
+        double maxY = ((TimeSeriesDataItem) copy.data.get(0)).getValue();
+        for (Object obj : copy.data) {
+            TimeSeriesDataItem item = (TimeSeriesDataItem) obj;
+            double value = item.getValue();
+            if (value < minY) {
+                minY = value;
             }
+            if (value > maxY) {
+                maxY = value;
+            }
+        }
+        copy.minY = minY;
+        copy.maxY = maxY;
+    } else {
+        copy.minY = Double.NaN;
+        copy.maxY = Double.NaN;
     }
     return copy;
 }
\ No newline at end of file
