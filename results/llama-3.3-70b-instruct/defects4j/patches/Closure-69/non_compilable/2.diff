diff --git a/tmp/2c9560ba-9639-4a3d-8a18-9fdb3bcd3a54_buggy.java b/tmp/5fd7d767-a34e-4d12-8a2d-5156388b2b81_fixed.java
index bf9c086..a969322 100644
--- a/tmp/2c9560ba-9639-4a3d-8a18-9fdb3bcd3a54_buggy.java
+++ b/tmp/5fd7d767-a34e-4d12-8a2d-5156388b2b81_fixed.java
@@ -1,54 +1,72 @@
 /**
  * Visits a CALL node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  */
 private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
         report(t, n, NOT_CALLABLE, childType.toString());
         ensureTyped(t, n);
         return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
         FunctionType functionType = (FunctionType) childType;
 
         boolean isExtern = false;
         JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
         if(functionJSDocInfo!= null) {
             String sourceName = functionJSDocInfo.getSourceName();
             CompilerInput functionSource = compiler.getInput(sourceName);
             isExtern = functionSource.isExtern();
         }
 
         // Non-native constructors should not be called directly
         // unless they specify a return type and are defined
         // in an extern.
         if (functionType.isConstructor() &&
            !functionType.isNativeObjectType() &&
             (functionType.getReturnType().isUnknownType() ||
              functionType.getReturnType().isVoidType() ||
             !isExtern)) {
             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
         }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
+        // Functions with explicit 'this' types must be called in a GETPROP
+        // or GETELEM, and the 'this' type should match.
+        if (!childType.getThisType().isUnknownType() &&!childType.getThisType().isVoidType()) {
+            if (n.getParent() instanceof Node) {
+                Node parent = n.getParent();
+                if (!(parent instanceof GetProp || parent instanceof GetElem)) {
+                    report(t, n, FUNCTION_MUST_BE_CALLED_WITH_THIS_TYPE, childType.toString());
+                } else if (parent instanceof GetProp || parent instanceof GetElem) {
+                    Node receiver = ((GetProp) parent).getReceiver();
+                    if (receiver instanceof Node) {
+                        JSType receiverType = getJSType(receiver).restrictByNotNullOrUndefined();
+                        if (!childType.getThisType().isSubtypeOf(receiverType)) {
+                            report(t, n, FUNCTION_MUST_BE_CALLED_WITH_THIS_TYPE, childType.toString());
+                        }
+                    }
+                }
+            } else {
+                report(t, n, FUNCTION_MUST_BE_CALLED_WITH_THIS_TYPE, childType.toString());
+            }
+        }
 
         visitParameterList(t, n, functionType);
         ensureTyped(t, n, functionType.getReturnType());
     } else {
         ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
 }
\ No newline at end of file
