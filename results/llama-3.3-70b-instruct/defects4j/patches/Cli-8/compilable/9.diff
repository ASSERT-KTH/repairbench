diff --git a/tmp/14e133c0-1d02-43c5-9cca-d7495042e56d_buggy.java b/tmp/f06e55d6-fe5f-41ac-b3c4-9c108756c762_fixed.java
index 8e93a5e..e734e02 100644
--- a/tmp/14e133c0-1d02-43c5-9cca-d7495042e56d_buggy.java
+++ b/tmp/f06e55d6-fe5f-41ac-b3c4-9c108756c762_fixed.java
@@ -1,43 +1,46 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
+        text = text.substring(pos).trim(); // Trim the text instead of assigning it directly to a new string
+        if (!text.isEmpty()) { // Check if the text is not empty
+            text = padding + text;
+        }
         pos = findWrapPos(text, width, nextLineTabStop);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
