diff --git a/tmp/ceaaed4d-5951-4d16-853f-52fd396b3ae3_buggy.java b/tmp/c961673f-e7d5-46bd-bb41-dc17b8dfbd06_fixed.java
index b98f0a7..d66be36 100644
--- a/tmp/ceaaed4d-5951-4d16-853f-52fd396b3ae3_buggy.java
+++ b/tmp/c961673f-e7d5-46bd-bb41-dc17b8dfbd06_fixed.java
@@ -1,29 +1,31 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Infer type of 'this' argument
+          if (n.getChildCount() > 1 && ct.getParameterTypes().length > 0) {
+            JSType thisType = ct.getParameterTypes()[0];
+            Node thisArg = n.getChildAtIndex(1);
+            scope = inferType(thisArg, thisType, scope);
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
