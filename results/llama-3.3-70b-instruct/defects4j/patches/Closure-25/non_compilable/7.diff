diff --git a/tmp/1f44c3bc-6ac1-47f0-b153-dbb89cbe3538_buggy.java b/tmp/7d8ce77c-c7ba-46f4-b571-5bbedd8c30c9_fixed.java
index b98f0a7..d9f9db8 100644
--- a/tmp/1f44c3bc-6ac1-47f0-b153-dbb89cbe3538_buggy.java
+++ b/tmp/7d8ce77c-c7ba-46f4-b571-5bbedd8c30c9_fixed.java
@@ -1,29 +1,36 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct!= null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
+    // Get the type of the constructor
+    JSType constructorTypeFinal = constructorType;
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
+        // Backwards inference: if the constructor expects a certain type, 
+        // infer that type for the argument
+        if (constructorTypeFinal instanceof FunctionType) {
+            FunctionType ft = (FunctionType) constructorTypeFinal;
+            if (ft.getInstanceType()!= null && ft.getTypeOfThis()!= null) {
+                JSType argType = ft.getParameterTypes().get(0);
+                arg.setJSType(argType);
+            }
+        }
     }
     return scope;
 }
\ No newline at end of file
