diff --git a/tmp/56fbf4f1-54e6-4e81-bff4-525e96a2e051_buggy.java b/tmp/2636dde7-6244-4b86-aca9-e9595323ba33_fixed.java
index b98f0a7..968d94b 100644
--- a/tmp/56fbf4f1-54e6-4e81-bff4-525e96a2e051_buggy.java
+++ b/tmp/2636dde7-6244-4b86-aca9-e9595323ba33_fixed.java
@@ -1,29 +1,37 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType!= null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct!= null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+  Node arg = constructor.getNext();
+  while (arg!= null) {
     scope = traverse(arg, scope);
+    // Update type based on argument
+    if (constructorType!= null && constructorType.isFunctionType()) {
+      FunctionType ft = constructorType.toMaybeFunctionType();
+      if (ft!= null) {
+        JSType paramType = ft.getParamType(0);
+        if (paramType!= null) {
+          arg.getJSType().restrictByType(paramType);
+        }
+      }
+    }
+    arg = arg.getNext();
   }
   return scope;
 }
\ No newline at end of file
