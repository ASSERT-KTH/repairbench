diff --git a/tmp/8d1a8fa7-88cc-483f-9864-ac27bdcd8891_buggy.java b/tmp/8407e2da-c9ab-43f3-841b-d5cdbb93138b_fixed.java
index b98f0a7..5820095 100644
--- a/tmp/8d1a8fa7-88cc-483f-9864-ac27bdcd8891_buggy.java
+++ b/tmp/8407e2da-c9ab-43f3-841b-d5cdbb93138b_fixed.java
@@ -1,29 +1,49 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
+      // Add inference for the constructor argument
+      if (arg.getNext() == null && constructorType!= null && type!= null) {
+        JSType argType = arg.getJSType();
+        if (argType!= null) {
+          JSType inferredType = getInferredType(constructorType, type);
+          if (inferredType!= null) {
+            arg.setJSType(inferredType);
+          }
+        }
+      }
     }
     return scope;
   }
+
+  // Helper function to get the inferred type
+  private JSType getInferredType(JSType constructorType, JSType type) {
+    FunctionType ct = constructorType.toMaybeFunctionType();
+    if (ct!= null && ct.isConstructor()) {
+      JSType paramType = ct.getParameterType(0);
+      return paramType;
+    }
+    return null;
+  }
\ No newline at end of file
