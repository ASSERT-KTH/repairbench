diff --git a/tmp/1b4986e7-e2c9-4917-ba79-e7113113daf7_buggy.java b/tmp/7f099b3d-fe63-4e9c-a570-ae36c2f6944d_fixed.java
index b98f0a7..36374a8 100644
--- a/tmp/1b4986e7-e2c9-4917-ba79-e7113113daf7_buggy.java
+++ b/tmp/7f099b3d-fe63-4e9c-a570-ae36c2f6944d_fixed.java
@@ -1,29 +1,36 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Add inferred type of the parameters to the type of the object
+          for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
+            JSType argType = arg.getJSType();
+            if (argType!= null) {
+              type = type.unify(argType);
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
