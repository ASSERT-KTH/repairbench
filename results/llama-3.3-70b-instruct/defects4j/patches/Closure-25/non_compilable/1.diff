diff --git a/tmp/b97f39fd-6760-4571-ba93-55259f640ab0_buggy.java b/tmp/84fd7845-dd3f-4c04-ade8-4cce3608831e_fixed.java
index b98f0a7..ce39a58 100644
--- a/tmp/b97f39fd-6760-4571-ba93-55259f640ab0_buggy.java
+++ b/tmp/84fd7845-dd3f-4c04-ade8-4cce3608831e_fixed.java
@@ -1,29 +1,34 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType!= null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct!= null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        // Infer the type of the constructor arguments
+        Node arg = constructor.getNext();
+        if (arg!= null && ct.getParameterTypes().length > 0) {
+          JSType paramType = ct.getParameterTypes()[0];
+          arg.setJSType(paramType);
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
