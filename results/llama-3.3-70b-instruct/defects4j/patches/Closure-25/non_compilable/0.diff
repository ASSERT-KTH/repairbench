diff --git a/tmp/a7bf1c72-f9c4-4aa9-acb2-72cb7ca198c4_buggy.java b/tmp/73bd7121-46c3-43b5-86e5-c5e73805d0b1_fixed.java
index b98f0a7..ef2d315 100644
--- a/tmp/a7bf1c72-f9c4-4aa9-acb2-72cb7ca198c4_buggy.java
+++ b/tmp/73bd7121-46c3-43b5-86e5-c5e73805d0b1_fixed.java
@@ -1,29 +1,35 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct!= null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
+        // Backward type inference for the 'new' operator
+        if (type!= null) {
+            FunctionType ct = constructorType.toMaybeFunctionType();
+            if (ct!= null && ct.isConstructor()) {
+                JSType paramType = ct.getParameterType(0);
+                if (paramType!= null && arg.getJSType()!= null) {
+                    arg.getJSType().restrictToIntersection(paramType);
+                }
+            }
+        }
     }
     return scope;
 }
\ No newline at end of file
