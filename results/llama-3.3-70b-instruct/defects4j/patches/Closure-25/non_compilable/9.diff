diff --git a/tmp/0ed01c2e-8a8a-4c2e-804f-8c0708f3d0f5_buggy.java b/tmp/7a89c82d-40af-43dc-b5f2-36ed9f85972e_fixed.java
index b98f0a7..2067aa8 100644
--- a/tmp/0ed01c2e-8a8a-4c2e-804f-8c0708f3d0f5_buggy.java
+++ b/tmp/7a89c82d-40af-43dc-b5f2-36ed9f85972e_fixed.java
@@ -1,29 +1,42 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType!= null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct!= null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+  
+  // Update scope after traversing all arguments
+  Node firstArg = constructor.getNext();
+  for (Node arg = firstArg; arg!= null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
+  
+  // Update the type of the first argument if it's an object
+  if (firstArg!= null && firstArg.isCall() && firstArg.getFirstChild().isObject()) {
+    JSType argumentType = firstArg.getFirstChild().getJSType();
+    FunctionType functionType = constructorType.toMaybeFunctionType();
+    if (functionType!= null && functionType.getParameterCount() > 0) {
+      JSType paramType = functionType.getParameterType(0);
+      if (paramType!= null) {
+        argumentType = argumentType.restrictByType(paramType);
+        firstArg.getFirstChild().setJSType(argumentType);
+      }
+    }
+  }
+  
   return scope;
 }
\ No newline at end of file
