diff --git a/tmp/ace611a3-01dc-4bc7-9d51-8f70f204ceb1_buggy.java b/tmp/39b48e2f-4fc6-4f14-ad4c-600e1a7b74e7_fixed.java
index b98f0a7..a5b1401 100644
--- a/tmp/ace611a3-01dc-4bc7-9d51-8f70f204ceb1_buggy.java
+++ b/tmp/39b48e2f-4fc6-4f14-ad4c-600e1a7b74e7_fixed.java
@@ -1,29 +1,40 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType!= null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct!= null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
+  
+  // Backwards inference for the 'new' operator
+  if (type!= null &&!type.isUnknownType()) {
+    Node args = constructor.getNext();
+    if (args!= null) {
+      FunctionType ct = constructorType.toMaybeFunctionType();
+      if (ct!= null && ct.isConstructor()) {
+        JSType paramType = ct.getParameterType(0);
+        if (paramType!= null) {
+          args.setJSType(paramType);
+        }
+      }
+    }
+  }
+  
   for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
