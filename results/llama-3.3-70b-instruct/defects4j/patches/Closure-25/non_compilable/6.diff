diff --git a/tmp/3e32f841-1ebe-4bef-9618-0cc2e196bb19_buggy.java b/tmp/db71e204-32bc-4326-a0da-e8585475f0af_fixed.java
index b98f0a7..c5abe8a 100644
--- a/tmp/3e32f841-1ebe-4bef-9618-0cc2e196bb19_buggy.java
+++ b/tmp/db71e204-32bc-4326-a0da-e8585475f0af_fixed.java
@@ -1,29 +1,35 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType!= null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct!= null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        // Iterate over the constructor's parameters and infer the type of each argument
+        Node args = constructor.getNext();
+        for (int i = 0; args!= null && i < ct.getParameterCount(); i++) {
+          JSType paramType = ct.getParameterType(i);
+          Node arg = args.getNext();
+          if (arg!= null) {
+            arg.setJSType(paramType);
+          }
+          args = arg;
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
