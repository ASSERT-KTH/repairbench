diff --git a/tmp/2f559ed2-8a1c-4ead-90c0-dd5da4c71d96_buggy.java b/tmp/913f1495-a830-4f93-8834-42b7bd7156ed_fixed.java
index 1478ee1..5430fcc 100644
--- a/tmp/2f559ed2-8a1c-4ead-90c0-dd5da4c71d96_buggy.java
+++ b/tmp/913f1495-a830-4f93-8834-42b7bd7156ed_fixed.java
@@ -1,24 +1,21 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute dot product
+    double dotProduct = v1.dotProduct(v2);
+    double v2Squared = v2.dotProduct(v2);
     
+    // Compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    double rho = v2Squared!= 0? dotProduct / v2Squared : 0;
     
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute v3 = v1 - rho v2
+    Vector3D v3 = v1.subtract(v2.scalarMultiply(rho));
     
+    // Compute cross product from v3 and v2 instead of v1 and v2
+    return new Vector3D(v3.getY() * v2.getZ() - v3.getZ() * v2.getY(), 
+                       v3.getZ() * v2.getX() - v3.getX() * v2.getZ(), 
+                       v3.getX() * v2.getY() - v3.getY() * v2.getX());
 }
\ No newline at end of file
