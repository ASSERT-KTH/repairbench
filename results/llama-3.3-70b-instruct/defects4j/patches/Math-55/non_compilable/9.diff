diff --git a/tmp/923bfcea-8511-45fc-98e4-7bdc9eb0093a_buggy.java b/tmp/771afd52-a7fa-4ae8-adea-09f3f85261e5_fixed.java
index 1478ee1..89bd316 100644
--- a/tmp/923bfcea-8511-45fc-98e4-7bdc9eb0093a_buggy.java
+++ b/tmp/771afd52-a7fa-4ae8-adea-09f3f85261e5_fixed.java
@@ -1,24 +1,17 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    double rho = (v1.dotProduct(v2) * 255) / (FastMath.hypot(v2.getX(), v2.getY(), v2.getZ()) * FastMath.hypot(v2.getX(), v2.getY(), v2.getZ()));
+    rho = Math.round(rho) / 255.0;
 
+    // compute v3 = v1 - rho v2
+    Vector3D v3 = new Vector3D(v1.getX() - rho * v2.getX(), v1.getY() - rho * v2.getY(), v1.getZ() - rho * v2.getZ());
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    return new Vector3D(v3.y * v2.z - v3.z * v2.y, v3.z * v2.x - v3.x * v2.z, v3.x * v2.y - v3.y * v2.x);
 }
\ No newline at end of file
