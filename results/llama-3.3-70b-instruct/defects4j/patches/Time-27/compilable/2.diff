diff --git a/tmp/2f4f1b5e-473d-4024-878b-3f4ada6adc30_buggy.java b/tmp/3751d1f0-0d90-41ea-80bf-a3f72ccf1d63_fixed.java
index ec6c9ee..1efc407 100644
--- a/tmp/2f4f1b5e-473d-4024-878b-3f4ada6adc30_buggy.java
+++ b/tmp/3751d1f0-0d90-41ea-80bf-a3f72ccf1d63_fixed.java
@@ -1,21 +1,28 @@
-    //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
         PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
         sep = sep.finish(f.getPrinter(), f.getParser());
         return new PeriodFormatter(sep, sep);
     }
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
+    } else {
+        // Make sure that the parser is aware of the separator when it is used immediately after a literal.
+        if (elementPairs.size() > 1 && elementPairs.get(0) instanceof Literal && elementPairs.get(1) instanceof Separator) {
+            Separator sep = (Separator) elementPairs.get(1);
+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+            sep = sep.finish(f.getPrinter(), f.getParser());
+            return new PeriodFormatter(sep.finish((PeriodPrinter) comp[0], (PeriodParser) comp[1]), sep.finish((PeriodPrinter) comp[0], (PeriodParser) comp[1]));
         } else {
             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
         }
     }
+}
\ No newline at end of file
