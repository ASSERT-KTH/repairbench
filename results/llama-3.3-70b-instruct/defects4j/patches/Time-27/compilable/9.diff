diff --git a/tmp/224e412e-e50e-4e13-af64-d21e4343a433_buggy.java b/tmp/545919a5-ce11-45a1-bc7e-32fe68ea833c_fixed.java
index ec6c9ee..83f6477 100644
--- a/tmp/224e412e-e50e-4e13-af64-d21e4343a433_buggy.java
+++ b/tmp/545919a5-ce11-45a1-bc7e-32fe68ea833c_fixed.java
@@ -1,21 +1,40 @@
-    //-----------------------------------------------------------------------
+/**
+ * Creates a formatter or parser from the element pairs.
+ * 
+ * @param elementPairs the element pairs
+ * @param notPrinter whether the printer is not needed
+ * @param notParser whether the parser is not needed
+ * @return the formatter or parser
+ */
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);
+        // Fix: Create the separator with the correct printer and parser
         sep = sep.finish(f.getPrinter(), f.getParser());
         return new PeriodFormatter(sep, sep);
     }
+    if (size == 1 && elementPairs.get(0) instanceof PeriodFormatter) {
+        // Fix: Handle the case where a single formatter is returned
+        PeriodFormatter formatter = (PeriodFormatter) elementPairs.get(0);
+        if (notPrinter) {
+            return new PeriodFormatter(null, formatter.getParser());
+        } else if (notParser) {
+            return new PeriodFormatter(formatter.getPrinter(), null);
+        } else {
+            return formatter;
+        }
+    }
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
