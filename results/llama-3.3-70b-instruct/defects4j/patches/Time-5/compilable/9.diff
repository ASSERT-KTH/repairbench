diff --git a/tmp/f2335096-77d7-4526-8cb8-16329db2d4ac_buggy.java b/tmp/3905d76f-1d2f-4531-b411-267bd9199e5f_fixed.java
index dbda381..3f170d6 100644
--- a/tmp/f2335096-77d7-4526-8cb8-16329db2d4ac_buggy.java
+++ b/tmp/3905d76f-1d2f-4531-b411-267bd9199e5f_fixed.java
@@ -1,54 +1,72 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
+    long millis = getMillis();  
     millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
     int years = getYears();
     int months = getMonths();
     if (years!= 0 || months!= 0) {
+        if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {
             years = FieldUtils.safeAdd(years, months / 12);
             months = months % 12;
-            if (years != 0) {
+            if (years!= 0 && type.isSupported(DurationFieldType.years())) {
                 result = result.withYears(years);
             }
-            if (months != 0) {
+            if (months!= 0 && type.isSupported(DurationFieldType.months())) {
                 result = result.withMonths(months);
             }
+        } else {
+            throw new UnsupportedOperationException("Period type does not support years or months");
+        }
+    }
+    int weeks = getWeeks();
+    int days = getDays();
+    if (weeks!= 0 || days!= 0) {
+        if (type.isSupported(DurationFieldType.weeks()) || type.isSupported(DurationFieldType.days())) {
+            weeks = FieldUtils.safeAdd(weeks, days / 7);
+            days = days % 7;
+            if (weeks!= 0 && type.isSupported(DurationFieldType.weeks())) {
+                result = result.withWeeks(weeks);
+            }
+            if (days!= 0 && type.isSupported(DurationFieldType.days())) {
+                result = result.withDays(days);
+            }
+        } else {
+            throw new UnsupportedOperationException("Period type does not support weeks or days");
+        }
+    }
+    int hours = getHours();
+    int minutes = getMinutes();
+    int seconds = getSeconds();
+    int millisecs = getMillis();
+    if (hours!= 0 || minutes!= 0 || seconds!= 0 || millisecs!= 0) {
+        if (type.isSupported(DurationFieldType.hours()) || type.isSupported(DurationFieldType.minutes()) || 
+            type.isSupported(DurationFieldType.seconds()) || type.isSupported(DurationFieldType.millis())) {
+            seconds = FieldUtils.safeAdd(seconds, minutes * 60);
+            minutes = 0;
+            seconds = FieldUtils.safeAdd(seconds, hours * 3600);
+            hours = 0;
+            millisecs = FieldUtils.safeAdd(millisecs, seconds * 1000);
+            seconds = 0;
+            if (hours!= 0 && type.isSupported(DurationFieldType.hours())) {
+                result = result.withHours(hours);
+            }
+            if (minutes!= 0 && type.isSupported(DurationFieldType.minutes())) {
+                result = result.withMinutes(minutes);
+            }
+            if (seconds!= 0 && type.isSupported(DurationFieldType.seconds())) {
+                result = result.withSeconds(seconds);
+            }
+            if (millisecs!= 0 && type.isSupported(DurationFieldType.millis())) {
+                result = result.withMillis(millisecs);
+            }
+        } else {
+            throw new UnsupportedOperationException("Period type does not support time fields");
+        }
     }
     return result;
 }
\ No newline at end of file
