diff --git a/tmp/71b04add-120b-4357-9df4-68b7e0890850_buggy.java b/tmp/fc8cd750-6c16-4036-9b0d-f4a518e86f2d_fixed.java
index dbda381..50d0e5a 100644
--- a/tmp/71b04add-120b-4357-9df4-68b7e0890850_buggy.java
+++ b/tmp/fc8cd750-6c16-4036-9b0d-f4a518e86f2d_fixed.java
@@ -1,54 +1,60 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
     long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
     millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
     int years = getYears();
     int months = getMonths();
     if (years!= 0 || months!= 0) {
         years = FieldUtils.safeAdd(years, months / 12);
         months = months % 12;
-            if (years != 0) {
+        if (years!= 0 && type.isSupported(DurationFieldType.years())) {
             result = result.withYears(years);
         }
-            if (months != 0) {
+        if (months!= 0 && type.isSupported(DurationFieldType.months())) {
             result = result.withMonths(months);
         }
     }
+    if (getWeeks()!= 0) {
+        if (type.isSupported(DurationFieldType.weeks())) {
+            result = result.withWeeks(getWeeks());
+        } else if (type.isSupported(DurationFieldType.days())) {
+            int days = FieldUtils.safeMultiply(getWeeks(), 7);
+            result = result.withDays(days);
+        }
+    }
+    if (getDays()!= 0) {
+        if (type.isSupported(DurationFieldType.days())) {
+            result = result.withDays(getDays());
+        }
+    }
+    if (getHours()!= 0) {
+        if (type.isSupported(DurationFieldType.hours())) {
+            result = result.withHours(getHours());
+        } else if (type.isSupported(DurationFieldType.minutes())) {
+            int minutes = FieldUtils.safeMultiply(getHours(), 60);
+            result = result.withMinutes(minutes);
+        }
+    }
+    if (getMinutes()!= 0) {
+        if (type.isSupported(DurationFieldType.minutes())) {
+            result = result.withMinutes(getMinutes());
+        } else if (type.isSupported(DurationFieldType.seconds())) {
+            int seconds = FieldUtils.safeMultiply(getMinutes(), 60);
+            result = result.withSeconds(seconds);
+        }
+    }
+    if (getSeconds()!= 0) {
+        if (type.isSupported(DurationFieldType.seconds())) {
+            result = result.withSeconds(getSeconds());
+        } else if (type.isSupported(DurationFieldType.millis())) {
+            int millis = FieldUtils.safeMultiply(getSeconds(), 1000);
+            result = result.withMillis(milis);
+        }
+    }
     return result;
 }
\ No newline at end of file
