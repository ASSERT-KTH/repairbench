diff --git a/tmp/2b2f77f3-64bf-41aa-a64b-b324d5929a62_buggy.java b/tmp/b2417bc5-2acb-4423-a0a6-2e044f365566_fixed.java
index 2608424..51e040e 100644
--- a/tmp/2b2f77f3-64bf-41aa-a64b-b324d5929a62_buggy.java
+++ b/tmp/b2417bc5-2acb-4423-a0a6-2e044f365566_fixed.java
@@ -1,39 +1,35 @@
 /**
  * Convert to multidimensional counter.
  *
  * @param index Index in unidimensional counter.
  * @return the multidimensional counts.
  * @throws OutOfRangeException if {@code index} is not between
  * {@code 0} and the value returned by {@link #getSize()} (excluded).
  */
 public int[] getCounts(int index) {
     if (index < 0 ||
         index >= totalSize) {
         throw new OutOfRangeException(index, 0, totalSize);
     }
 
     final int[] indices = new int[dimension];
 
     int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+    for (int i = 0; i < dimension - 1; i++) {
+        for (int j = 0; ; j++) {
+            int slotSize = uniCounterOffset[i] * indices[i];
+            if (count + slotSize > index) {
+                indices[i] = j;
+                count += slotSize;
+                break;
+            } else {
+                count += slotSize;
             }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
         }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
     }
-        --idx;
-        indices[last] = idx;
+    for (int i = count; i <= index; i++) {
+        indices[dimension - 1]++;
+    }
 
     return indices;
 }
\ No newline at end of file
