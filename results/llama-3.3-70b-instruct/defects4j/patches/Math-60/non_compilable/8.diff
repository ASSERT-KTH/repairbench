diff --git a/tmp/45c246fc-f39a-439c-a710-889c46de6947_buggy.java b/tmp/d66f8fd2-85f0-42d5-9158-8a8a44c13ae4_fixed.java
index 3127f85..929a070 100644
--- a/tmp/45c246fc-f39a-439c-a710-889c46de6947_buggy.java
+++ b/tmp/d66f8fd2-85f0-42d5-9158-8a8a44c13ae4_fixed.java
@@ -1,24 +1,27 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
-        final double dev = x - mean;
+    if (Double.isInfinite(x)) {
+        return x > 0? 1 : 0;
+    }
+    if (x > (mean + 40 * standardDeviation)) {
+        return 1;
+    } else if (x < (mean - 40 * standardDeviation)) {
+        return 0;
+    } else {
         try {
+            final double dev = x - mean;
             return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
+            throw new ConvergenceException(ex.getMessage(), ex);
         }
     }
 }
\ No newline at end of file
