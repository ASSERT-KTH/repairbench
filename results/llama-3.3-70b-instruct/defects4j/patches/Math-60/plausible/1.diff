diff --git a/tmp/c22d5c56-a843-4772-9f2f-4d1e73edf9d0_buggy.java b/tmp/6d2a9c8c-3ec5-41ab-a53d-23cb7e8b2f40_fixed.java
index 3127f85..700b921 100644
--- a/tmp/c22d5c56-a843-4772-9f2f-4d1e73edf9d0_buggy.java
+++ b/tmp/6d2a9c8c-3ec5-41ab-a53d-23cb7e8b2f40_fixed.java
@@ -1,24 +1,32 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
+    if (Double.isInfinite(x)) {
+        return x < 0? 0 : 1;
+    }
     final double dev = x - mean;
+    if (dev > 40 * standardDeviation) {
+        return 1;
+    } else if (dev < -40 * standardDeviation) {
+        return 0;
+    }
     try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                 (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+        if (x < (mean - 20 * standardDeviation)) {
             return 0;
         } else if (x > (mean + 20 * standardDeviation)) {
             return 1;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
