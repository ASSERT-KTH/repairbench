diff --git a/tmp/dcc37291-c443-433a-85c4-effa87ac4dbf_buggy.java b/tmp/55236738-5e5b-4c07-9b6b-17bee68c1f07_fixed.java
index 08e51e4..a4f3b0e 100644
--- a/tmp/dcc37291-c443-433a-85c4-effa87ac4dbf_buggy.java
+++ b/tmp/55236738-5e5b-4c07-9b6b-17bee68c1f07_fixed.java
@@ -1,16 +1,28 @@
 /**
  * <p>Reduce the fraction to the smallest values for the numerator and
  * denominator, returning the result.</p>
  * 
  * <p>For example, if this fraction represents 2/4, then the result
  * will be 1/2.</p>
  *
  * @return a new reduced fraction instance, or this if no simplification possible
  */
 public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
+    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));
     if (gcd == 1) {
         return this;
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    int newNumerator = numerator / gcd;
+    int newDenominator = denominator / gcd;
+    // Make sure the sign of the fraction is preserved in the reduced form
+    if ((numerator < 0 && denominator < 0) || (numerator > 0 && denominator > 0)) {
+        // Both negative or both positive, so the result should be positive
+        return Fraction.getFraction(Math.abs(newNumerator), Math.abs(newDenominator));
+    } else {
+        // One negative and one positive, so the result should be negative
+        if (newNumerator > 0) {
+            newNumerator = -newNumerator;
+        }
+        return Fraction.getFraction(newNumerator, Math.abs(newDenominator));
+    }
 }
\ No newline at end of file
