diff --git a/tmp/d1f3864e-a575-4730-a2f5-227339b77e84_buggy.java b/tmp/46e3359c-8640-4a86-9f0f-7eb6684a4dc2_fixed.java
index 757067a..65e9b18 100644
--- a/tmp/d1f3864e-a575-4730-a2f5-227339b77e84_buggy.java
+++ b/tmp/46e3359c-8640-4a86-9f0f-7eb6684a4dc2_fixed.java
@@ -1,63 +1,75 @@
 /**
  * Find a zero in the given interval with an initial guess.
  * <p>Throws <code>IllegalArgumentException</code> if the values of the
  * function at the three points have the same sign (note that it is
  * allowed to have endpoints with the same sign if the initial point has
  * opposite sign function-wise).</p>
  *
  * @param f function to solve.
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @param initial the start value to use (must be set to min if no
  * initial point is known).
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException the maximum iteration count
  * is exceeded
  * @throws FunctionEvaluationException if an error occurs evaluating
  *  the function
  * @throws IllegalArgumentException if initial is not between min and max
  * (even if it <em>is</em> a root)
  */
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
+    if (min >= max) {
+        throw new IllegalArgumentException("Interval must be valid (i.e., min < max)");
+    }
+    if (initial < min || initial > max) {
+        throw new IllegalArgumentException("Initial value must be within the given interval");
+    }
+
     clearResult();
     verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+    // evaluate the function at the endpoints and the initial guess
+    double yMin = f.value(min);
     double yInitial = f.value(initial);
+    double yMax = f.value(max);
+
+    // throw exception if no bracketing
+    if (yMin * yInitial > 0 && yInitial * yMax > 0) {
+        throw new IllegalArgumentException("The initial value does not bracket the root");
+    }
+
+    // return the initial guess if it is good enough
     if (Math.abs(yInitial) <= functionValueAccuracy) {
         setResult(initial, 0);
         return result;
     }
 
     // return the first endpoint if it is good enough
-        double yMin = f.value(min);
     if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        setResult(min, 0);
         return result;
     }
 
     // reduce interval if min and initial bracket the root
     if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        return solve(f, min, initial, yInitial, yMin, min);
     }
 
     // return the second endpoint if it is good enough
-        double yMax = f.value(max);
     if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+        setResult(max, 0);
         return result;
     }
 
     // reduce interval if initial and max bracket the root
     if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+        return solve(f, initial, max, yInitial, yMax, initial);
     }
 
-
     // full Brent algorithm starting with provided initial guess
     return solve(f, min, yMin, max, yMax, initial, yInitial);
-
 }
\ No newline at end of file
