diff --git a/tmp/f0f4bcdc-d934-42c8-ad5a-c1de7aaeb507_buggy.java b/tmp/68118017-8b54-4b9e-9ee0-0add206e24bc_fixed.java
index 757067a..306496e 100644
--- a/tmp/f0f4bcdc-d934-42c8-ad5a-c1de7aaeb507_buggy.java
+++ b/tmp/68118017-8b54-4b9e-9ee0-0add206e24bc_fixed.java
@@ -1,63 +1,77 @@
 /**
  * Find a zero in the given interval with an initial guess.
  * <p>Throws <code>IllegalArgumentException</code> if the values of the
  * function at the three points have the same sign (note that it is
  * allowed to have endpoints with the same sign if the initial point has
  * opposite sign function-wise).</p>
  *
  * @param f function to solve.
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @param initial the start value to use (must be set to min if no
  * initial point is known).
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException the maximum iteration count
  * is exceeded
  * @throws FunctionEvaluationException if an error occurs evaluating
  *  the function
  * @throws IllegalArgumentException if initial is not between min and max
  * (even if it <em>is</em> a root)
  */
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
+
+    // Check if the min and max form a valid interval
+    if (min >= max) {
+        throw new IllegalArgumentException("Invalid interval: min must be less than max");
+    }
+
+    // Check if the initial value is within the interval
+    if (initial < min || initial > max) {
+        throw new IllegalArgumentException("Initial value is not within the interval");
+    }
+
     verifySequence(min, initial, max);
 
     // return the initial guess if it is good enough
     double yInitial = f.value(initial);
     if (Math.abs(yInitial) <= functionValueAccuracy) {
         setResult(initial, 0);
         return result;
     }
 
     // return the first endpoint if it is good enough
     double yMin = f.value(min);
     if (Math.abs(yMin) <= functionValueAccuracy) {
         setResult(yMin, 0);
         return result;
     }
 
     // reduce interval if min and initial bracket the root
     if (yInitial * yMin < 0) {
         return solve(f, min, yMin, initial, yInitial, min, yMin);
     }
 
     // return the second endpoint if it is good enough
     double yMax = f.value(max);
     if (Math.abs(yMax) <= functionValueAccuracy) {
         setResult(yMax, 0);
         return result;
     }
 
     // reduce interval if initial and max bracket the root
     if (yInitial * yMax < 0) {
         return solve(f, initial, yInitial, max, yMax, initial, yInitial);
     }
 
+    // Check if the signs of yMin and yMax are the same
+    if (yMin * yMax > 0) {
+        throw new IllegalArgumentException("The interval does not bracket a root");
+    }
 
     // full Brent algorithm starting with provided initial guess
     return solve(f, min, yMin, max, yMax, initial, yInitial);
-
 }
\ No newline at end of file
