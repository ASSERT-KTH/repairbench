diff --git a/tmp/17f010ae-7b2a-44cd-9e97-36391db078fb_buggy.java b/tmp/949439bf-56ac-47ec-be9a-bcbeda115424_fixed.java
index 1303a19..159d9f2 100644
--- a/tmp/17f010ae-7b2a-44cd-9e97-36391db078fb_buggy.java
+++ b/tmp/949439bf-56ac-47ec-be9a-bcbeda115424_fixed.java
@@ -1,45 +1,59 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType()!= Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex!= index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem!= null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
+      if (parent.getParent().getType() == Token.ASSIGN) {
+        // If we're assigning to an out-of-bounds index, create an empty node
+        // to represent the missing elements.
+        Node newElem = NodeUtil.newUndefinedNode(left);
+        while (intIndex > 0) {
+          Node prevElem = NodeUtil.newUndefinedNode(left);
+          left.addChildAfter(prevElem, left.getFirstChild());
+          intIndex--;
+        }
+        left.addChildAfter(newElem, left.getFirstChild());
+        reportCodeChange();
+        return newElem;
+      } else {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
       }
+    }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
