diff --git a/tmp/182ef3c2-deb4-4175-b03f-78f27f777a53_buggy.java b/tmp/4f3dee9f-b8ab-4f9b-8de6-20fa859983ab_fixed.java
index 1303a19..65e874d 100644
--- a/tmp/182ef3c2-deb4-4175-b03f-78f27f777a53_buggy.java
+++ b/tmp/4f3dee9f-b8ab-4f9b-8de6-20fa859983ab_fixed.java
@@ -1,45 +1,45 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType()!= Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex!= index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
-    for (int i = 0; elem != null && i < intIndex; i++) {
+    int childCount = left.getChildCount();
+    for (int i = 0; elem!= null && i < childCount - 1; i++) {
       elem = elem.getNext();
     }
 
-    if (elem == null) {
+    if (intIndex >= childCount) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
-    if (elem.getType() == Token.EMPTY) {
-      elem = NodeUtil.newUndefinedNode(elem);
-    } else {
-      left.removeChild(elem);
+    Node target = left.getChildAt(intIndex);
+    if (target.getType() == Token.EMPTY) {
+      target = NodeUtil.newUndefinedNode(target);
     }
 
     // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    n.getParent().replaceChild(n, target);
     reportCodeChange();
-    return elem;
+    return target;
 }
\ No newline at end of file
