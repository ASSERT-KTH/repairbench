diff --git a/tmp/ac7bd6e0-0c89-4f30-92b9-d8a639c7f1fc_buggy.java b/tmp/398e9d2c-c321-4e2e-b647-2b91a618f567_fixed.java
index be2af16..be63b74 100644
--- a/tmp/ac7bd6e0-0c89-4f30-92b9-d8a639c7f1fc_buggy.java
+++ b/tmp/398e9d2c-c321-4e2e-b647-2b91a618f567_fixed.java
@@ -1,29 +1,30 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase())!= null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // Assume date is Gregorian, but handle leap year rules for February
     long instant;
+    try {
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+    } catch (IllegalArgumentException e) {
+        // Maybe it's Julian, especially for February leap day.
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
             // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
     return instant;
 }
\ No newline at end of file
