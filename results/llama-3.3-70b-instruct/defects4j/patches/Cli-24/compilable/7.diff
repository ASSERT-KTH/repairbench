diff --git a/tmp/f4d2399a-95bb-4b13-863d-e30b20ed5831_buggy.java b/tmp/69834fce-2925-4473-b5db-94846c302202_fixed.java
index 229b3e7..79a7e28 100644
--- a/tmp/f4d2399a-95bb-4b13-863d-e30b20ed5831_buggy.java
+++ b/tmp/69834fce-2925-4473-b5db-94846c302202_fixed.java
@@ -1,55 +1,60 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        // reduce nextLineTabStop to the smallest possible value
+        nextLineTabStop = 1;
     }
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, width, nextLineTabStop);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
         
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
+        // break the line before the width, but not in the middle of a word
+        int breakPos = pos;
+        for (int i = pos; i > nextLineTabStop && breakPos == pos; i--) {
+            if (Character.isWhitespace(text.charAt(i))) {
+                breakPos = i;
             }
+        }
+
+        sb.append(rtrim(text.substring(0, breakPos))).append(defaultNewLine);
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = text.substring(breakPos + 1).trim();
     }
 }
\ No newline at end of file
