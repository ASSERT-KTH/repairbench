diff --git a/tmp/683cfaae-7dff-40ac-86d0-0da8e4e6b75f_buggy.java b/tmp/bed9987d-ed7e-4649-b6dd-63a3583ce2c7_fixed.java
index 42b58d0..ad57f4c 100644
--- a/tmp/683cfaae-7dff-40ac-86d0-0da8e4e6b75f_buggy.java
+++ b/tmp/bed9987d-ed7e-4649-b6dd-63a3583ce2c7_fixed.java
@@ -1,19 +1,27 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
     TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
-        for (int i = 0; i < actualTypeArguments.length; i++) {
+    for (int i = 0; i < typeParameters.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
-            if (actualTypeArgument instanceof WildcardType) {
+        if (actualTypeArgument instanceof TypeVariable) {
+            TypeVariable actualTypeVariable = (TypeVariable) actualTypeArgument;
+            if (typeParameter.equals(actualTypeVariable)) {
+                // Self reference, ignore
+                continue;
+            } else {
+                // Recursively register type variables
+                registerTypeVariablesOn(actualTypeVariable);
+            }
+        } else if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
