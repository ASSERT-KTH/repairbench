diff --git a/tmp/8fdab8e1-cff9-48bd-b0e9-6596ddade653_buggy.java b/tmp/5e81d118-0838-490a-90a1-76d94d38f620_fixed.java
index 4bbd561..4679e79 100644
--- a/tmp/8fdab8e1-cff9-48bd-b0e9-6596ddade653_buggy.java
+++ b/tmp/5e81d118-0838-490a-90a1-76d94d38f620_fixed.java
@@ -1,37 +1,67 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect from ArrayIndexOutOfBounds
+    if (index + 1 >= input.length()) {
+        return 0;
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= input.length()) {
+            return 0;
+        }
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end)!= ';') {
             end++;
         }
+        if (end == input.length()) {
+            return 0;
+        }
 
-            int entityValue;
+        String entityValueStr;
         try {
+            entityValueStr = input.subSequence(start, end).toString();
+            int entityValue;
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(entityValueStr, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(entityValueStr, 10);
             }
-            } catch(NumberFormatException nfe) {
+            if (entityValue < 0 || entityValue > 0x10FFFF) {
                 return 0;
             }
-
+            if (entityValue >= 0xD800 && entityValue <= 0xDFFF) {
+                return 0;
+            }
+            if (entityValue <= 0x7F) {
                 out.write(entityValue);
+            } else if (entityValue <= 0x7FF) {
+                out.write(0xC0 | (entityValue >> 6));
+                out.write(0x80 | (entityValue & 0x3F));
+            } else if (entityValue <= 0xFFFF) {
+                out.write(0xE0 | (entityValue >> 12));
+                out.write(0x80 | ((entityValue >> 6) & 0x3F));
+                out.write(0x80 | (entityValue & 0x3F));
+            } else {
+                out.write(0xF0 | (entityValue >> 18));
+                out.write(0x80 | ((entityValue >> 12) & 0x3F));
+                out.write(0x80 | ((entityValue >> 6) & 0x3F));
+                out.write(0x80 | (entityValue & 0x3F));
+            }
             return 2 + (end - start) + (isHex? 1 : 0) + 1;
+        } catch (NumberFormatException nfe) {
+            return 0;
+        }
     }
     return 0;
 }
\ No newline at end of file
