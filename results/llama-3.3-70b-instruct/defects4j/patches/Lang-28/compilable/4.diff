diff --git a/tmp/72f65deb-5209-43ef-bf4d-42276031243f_buggy.java b/tmp/f5241764-f6cd-4185-97d1-19fba3a4f010_fixed.java
index 4bbd561..d5a70e0 100644
--- a/tmp/72f65deb-5209-43ef-bf4d-42276031243f_buggy.java
+++ b/tmp/f5241764-f6cd-4185-97d1-19fba3a4f010_fixed.java
@@ -1,37 +1,56 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Protect from ArrayIndexOutOfBounds
+    if(index + 1 >= input.length() || input.charAt(index)!= '&' || input.charAt(index + 1)!= '#') {
+        return 0;
+    }
     int start = index + 2;
     boolean isHex = false;
 
     char firstChar = input.charAt(start);
     if(firstChar == 'x' || firstChar == 'X') {
         start++;
         isHex = true;
     }
 
     int end = start;
-            while(input.charAt(end) != ';') {
+    while(end < input.length() && input.charAt(end)!= ';') {
         end++;
     }
 
+    if(end >= input.length() || input.charAt(end)!= ';') {
+        return 0;
+    }
+
+    String entityString = input.subSequence(start, end).toString();
     int entityValue;
     try {
         if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+            entityValue = Integer.parseInt(entityString, 16);
         } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            entityValue = Integer.parseInt(entityString, 10);
         }
     } catch(NumberFormatException nfe) {
         return 0;
     }
 
+    if(entityValue <= 0x7F) {
         out.write(entityValue);
+    } else if(entityValue <= 0x7FF) {
+        out.write(0xC0 | (entityValue >> 6));
+        out.write(0x80 | (entityValue & 0x3F));
+    } else if(entityValue <= 0xFFFF) {
+        out.write(0xE0 | (entityValue >> 12));
+        out.write(0x80 | ((entityValue >> 6) & 0x3F));
+        out.write(0x80 | (entityValue & 0x3F));
+    } else {
+        out.write(0xF0 | (entityValue >> 18));
+        out.write(0x80 | ((entityValue >> 12) & 0x3F));
+        out.write(0x80 | ((entityValue >> 6) & 0x3F));
+        out.write(0x80 | (entityValue & 0x3F));
+    }
     return 2 + (end - start) + (isHex? 1 : 0) + 1;
 }
\ No newline at end of file
-        return 0;
-    }
