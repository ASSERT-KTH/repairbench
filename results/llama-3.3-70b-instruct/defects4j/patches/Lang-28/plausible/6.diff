diff --git a/tmp/af225a76-7e87-4d3f-92ae-d1cecd7c3772_buggy.java b/tmp/07840d71-ae46-4f40-bcfe-ad4d25248e68_fixed.java
index 4bbd561..53ddbfb 100644
--- a/tmp/af225a76-7e87-4d3f-92ae-d1cecd7c3772_buggy.java
+++ b/tmp/07840d71-ae46-4f40-bcfe-ad4d25248e68_fixed.java
@@ -1,37 +1,48 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end)!= ';') {
             end++;
         }
 
+        if (end >= input.length() || input.charAt(end)!= ';') {
+            return 0; // or throw an exception, depending on the desired behavior
+        }
+
+        String substring = input.subSequence(start, end).toString();
         int entityValue;
         try {
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(substring, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(substring, 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        if (entityValue <= 0xFFFF) {
             out.write(entityValue);
+        } else {
+            int highSurrogate = (entityValue - 0x10000) / 0x400 + 0xD800;
+            int lowSurrogate = (entityValue & 0x3FF) + 0xDC00;
+            out.write(highSurrogate);
+            out.write(lowSurrogate);
+        }
         return 2 + (end - start) + (isHex? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
