diff --git a/tmp/d5ec772d-4793-4c3d-ba9a-0f48cec55b96_buggy.java b/tmp/349b36c9-dd51-4200-97ae-617f07264e59_fixed.java
index 4bbd561..be3165e 100644
--- a/tmp/d5ec772d-4793-4c3d-ba9a-0f48cec55b96_buggy.java
+++ b/tmp/349b36c9-dd51-4200-97ae-617f07264e59_fixed.java
@@ -1,37 +1,48 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     // TODO: Protect from ArrayIndexOutOfBounds
     if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while(end < input.length() && input.charAt(end)!= ';') {
             end++;
         }
 
+        if (end >= input.length()) {
+            return 0;
+        }
+
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
+        if (entityValue < 0x10000) {
             out.write(entityValue);
+        } else {
+            int lead = (entityValue - 0x10000) / 0x400 + 0xD800;
+            int trail = (entityValue & 0x3FF) + 0xDC00;
+            out.write(lead);
+            out.write(trail);
+        }
         return 2 + (end - start) + (isHex? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
