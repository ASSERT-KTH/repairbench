diff --git a/tmp/47321a4d-6456-4093-bbd3-6ff41f0bfccd_buggy.java b/tmp/3238f82b-2f9b-45ec-bcaf-1926fa889670_fixed.java
index 4bbd561..745f5e7 100644
--- a/tmp/47321a4d-6456-4093-bbd3-6ff41f0bfccd_buggy.java
+++ b/tmp/3238f82b-2f9b-45ec-bcaf-1926fa889670_fixed.java
@@ -1,37 +1,42 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Protect from ArrayIndexOutOfBounds
+    if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+        if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end)!= ';') {
             end++;
         }
 
+        if (end < input.length() && input.charAt(end) == ';') {
+            String entityValueStr = input.subSequence(start, end).toString();
             int entityValue;
             try {
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(entityValueStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(entityValueStr, 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
+            // Write the Unicode character
+            if (entityValue > 0xFFFF) {
+                out.write(0xD800 + ((entityValue - 0x10000) / 0x400));
+                out.write(0xDC00 + ((entityValue - 0x10000) % 0x400));
+            } else {
                 out.write(entityValue);
+            }
             return 2 + (end - start) + (isHex? 1 : 0) + 1;
         }
+    }
     return 0;
 }
\ No newline at end of file
