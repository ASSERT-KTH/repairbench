diff --git a/tmp/58a9b6c7-5d2f-48ed-aaff-6c6e5e823fa2_buggy.java b/tmp/00f5be05-0b94-4e54-baac-d8f12d1954be_fixed.java
index 1ad070d..f74cee7 100644
--- a/tmp/58a9b6c7-5d2f-48ed-aaff-6c6e5e823fa2_buggy.java
+++ b/tmp/00f5be05-0b94-4e54-baac-d8f12d1954be_fixed.java
@@ -1,38 +1,31 @@
 /**
  * Handle an escape sequence.
  * The current character must be the escape character.
  * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
  * on the input stream.
  * 
  * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
  * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
  * the escape character is not allowed at end of strem
  */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
     default:
-            // Now check for meta-characters
+        if (c == END_OF_STREAM) {
+            throw new IOException("EOF whilst processing escape sequence");
+        }
         return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
 }
\ No newline at end of file
