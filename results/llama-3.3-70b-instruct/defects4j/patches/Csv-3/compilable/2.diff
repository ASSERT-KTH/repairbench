diff --git a/tmp/489d1e52-5057-4487-9c63-b11311e439c2_buggy.java b/tmp/9549560b-dc8d-48f9-a78f-03d5397ada84_fixed.java
index 1ad070d..c227f9c 100644
--- a/tmp/489d1e52-5057-4487-9c63-b11311e439c2_buggy.java
+++ b/tmp/9549560b-dc8d-48f9-a78f-03d5397ada84_fixed.java
@@ -1,38 +1,37 @@
 /**
  * Handle an escape sequence.
  * The current character must be the escape character.
  * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
  * on the input stream.
  * 
  * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
  * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
+ * the escape character is not allowed at end of stream
  */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
     case CR:
     case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+    case FF:
+    case TAB:
+    case BACKSPACE:
         return c;
     case END_OF_STREAM:
         throw new IOException("EOF whilst processing escape sequence");
     default:
-            // Now check for meta-characters
+        // leave other characters as-is (so they're not treated as escape sequences)
         return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
 }
\ No newline at end of file
