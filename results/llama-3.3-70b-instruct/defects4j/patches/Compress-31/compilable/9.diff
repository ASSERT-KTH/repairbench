diff --git a/tmp/682504b8-9a0c-457e-9cb7-dd4a56b1ec52_buggy.java b/tmp/c11e93dd-6e47-48c6-95f7-9f96320c4b04_fixed.java
index b91f7de..4a46b55 100644
--- a/tmp/682504b8-9a0c-457e-9cb7-dd4a56b1ec52_buggy.java
+++ b/tmp/c11e93dd-6e47-48c6-95f7-9f96320c4b04_fixed.java
@@ -1,69 +1,75 @@
 /**
  * Parse an octal string from a buffer.
  *
  * <p>Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.</p>
  *
  * <p>The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).</p>
  *
  * <p>To work-around some tar implementations that insert a
  * leading NUL this method returns 0 if it detects a leading NUL
  * since Commons Compress 1.4.</p>
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long    result = 0;
     int     end = offset + length;
     int     start = offset;
 
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end){
         if (buffer[start] == ' '){
             start++;
         } else {
             break;
         }
     }
 
     // Trim all trailing NULs and spaces.
     // The ustar and POSIX tar specs require a trailing NUL or
     // space but some implementations use the extra digit for big
     // sizes/uids/gids...
     byte trailer = buffer[end - 1];
     while (start < end && (trailer == 0 || trailer == ' ')) {
         end--;
+        if (end == start) break;
         trailer = buffer[end - 1];
     }
 
     for ( ;start < end; start++) {
         final byte currentByte = buffer[start];
         if (currentByte == 0) {
-                break;
+            throw new IllegalArgumentException(
+                    "Embedded NUL");
         }
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
 
+    if (result == 0 && buffer[start - 1]!= ' ' && buffer[start - 1]!= 0) {
+        throw new IllegalArgumentException("Trailing NUL or space missing");
+    }
+
     return result;
 }
\ No newline at end of file
