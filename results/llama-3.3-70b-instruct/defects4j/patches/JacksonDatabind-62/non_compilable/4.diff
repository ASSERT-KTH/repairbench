diff --git a/tmp/f2eab6fc-932d-4484-9cc6-f4785f58e99f_buggy.java b/tmp/25bc47cd-ba9b-454e-bcaf-95cbde8ff92b_fixed.java
index 6c9090f..78da540 100644
--- a/tmp/f2eab6fc-932d-4484-9cc6-f4785f58e99f_buggy.java
+++ b/tmp/25bc47cd-ba9b-454e-bcaf-95cbde8ff92b_fixed.java
@@ -1,45 +1,64 @@
 /**
  * Method called to finalize setup of this deserializer,
  * when it is known for which property deserializer is needed
  * for.
  */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator!= null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                         +": value instantiator ("+_valueInstantiator.getClass().getName()
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
     }
     // [databind#1043]: allow per-property allow-wrapping of single overrides:
     // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
     //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     
     // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
     // and finally, type deserializer needs context as well
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser!= null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
+    
+    // Check if the collection type is a subclass of an unmodifiable collection
+    if (_valueInstantiator instanceof ArrayDelegatorCreator) {
+        Class<?> collectionType = _collectionType.getRawClass();
+        if (collectionType!= null &&!collectionType.isAssignableFrom(_valueInstantiator.createContextual(ctxt, property).getClass())) {
+            return new CollectionDeserializer(_collectionType, _valueDeserializer, _valueTypeDeserializer, null, unwrapSingle) {
+                @Override
+                public Collection<Object> deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+                    return _valueInstantiator.createContextual(ctxt, property).createUsingArray(p, ctxt);
+                }
+                
+                @Override
+                public Collection<Object> deserialize(JsonParser p, DeserializationContext ctxt, Collection<Object> result) throws IOException {
+                    return _valueInstantiator.createContextual(ctxt, property).createUsingArray(p, ctxt);
+                }
+            };
+        }
+    }
+    
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
