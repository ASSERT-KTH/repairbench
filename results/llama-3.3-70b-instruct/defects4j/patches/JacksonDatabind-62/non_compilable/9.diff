diff --git a/tmp/51c90e07-18b1-4750-9131-04310dc0834d_buggy.java b/tmp/be4888ee-92a0-4d9a-9bfb-d91893187dce_fixed.java
index 6c9090f..7df75c6 100644
--- a/tmp/51c90e07-18b1-4750-9131-04310dc0834d_buggy.java
+++ b/tmp/be4888ee-92a0-4d9a-9bfb-d91893187dce_fixed.java
@@ -1,45 +1,70 @@
 /**
  * Method called to finalize setup of this deserializer,
  * when it is known for which property deserializer is needed
  * for.
  */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator!= null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                         +": value instantiator ("+_valueInstantiator.getClass().getName()
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
+        } else if (_collectionType.isCollectionLikeType()) {
+            // no-op, no change needed here
+        } else if (_collectionType.isAbstract()) {
+            // Check if the collection type has a default constructor
+            if (!hasDefaultConstructor(_collectionType)) {
+                // No default constructor, check if there is a mix-in class with a delegate type
+                JavaType delegateType = ctxt.getConfig().constructType(_collectionType).getContentType();
+                if (delegateType!= null) {
+                    delegateDeser = findDeserializer(ctxt, delegateType, property);
+                    _valueInstantiator = new ConcreteValueInstantiator(ctxt.getConfig(), _collectionType);
+                } else {
+                    // No delegate type, throw an exception
+                    throw new JsonMappingException("No default constructor for " + _collectionType +
+                            " and no delegate type found");
+                }
+            }
         }
     }
     // [databind#1043]: allow per-property allow-wrapping of single overrides:
     // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
     //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     
     // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
     // and finally, type deserializer needs context as well
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser!= null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
+
+private boolean hasDefaultConstructor(JavaType type) {
+    for (Constructor<?> constructor : type.getRawClass().getConstructors()) {
+        if (constructor.getParameterCount() == 0) {
+            return true;
+        }
+    }
+    return false;
+}
\ No newline at end of file
