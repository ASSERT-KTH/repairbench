diff --git a/tmp/0da2dc73-c02a-42c8-a633-7f7eaae7dda3_buggy.java b/tmp/494bc0ab-0d71-4ac5-a6a3-4b9147409b82_fixed.java
index 6c9090f..776a8c7 100644
--- a/tmp/0da2dc73-c02a-42c8-a633-7f7eaae7dda3_buggy.java
+++ b/tmp/494bc0ab-0d71-4ac5-a6a3-4b9147409b82_fixed.java
@@ -1,45 +1,63 @@
 /**
  * Method called to finalize setup of this deserializer,
  * when it is known for which property deserializer is needed
  * for.
  */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator!= null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                         +": value instantiator ("+_valueInstantiator.getClass().getName()
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
     }
     // [databind#1043]: allow per-property allow-wrapping of single overrides:
     // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
     //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     
     // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
     // and finally, type deserializer needs context as well
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser!= null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
-        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+
+    CollectionDeserializer deserializer = withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+    if (_collectionType.isContainerType() && _collectionType.getRawClass().isMemberClass() &&!_collectionType.isStatic()) {
+        // We are dealing with an inner class, and no default constructor is available.
+        // Workaround by creating a new instance of the outer class.
+        return new CollectionDeserializer(deserializer) {
+            @Override
+            public Collection<Object> deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+                // Create a new instance of the outer class.
+                Object outerInstance = p.getCurrentValue();
+                if (outerInstance == null) {
+                    outerInstance = _valueInstantiator.createUsingDefault(ctxt);
+                }
+                // Create a new collection instance using the outer instance.
+                return _valueInstantiator.createUsingDelegate(ctxt, delegateDeser.deserialize(p, ctxt), outerInstance);
+            }
+        };
+    }
+    return deserializer;
 }
\ No newline at end of file
