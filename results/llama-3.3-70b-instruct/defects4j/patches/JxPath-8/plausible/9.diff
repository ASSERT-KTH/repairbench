diff --git a/tmp/bbf0803f-126e-453a-bec2-5d2399b8c86e_buggy.java b/tmp/dc5925a4-aae6-449a-85c7-3415546b8c8c_fixed.java
index 98d89dc..dc631f3 100644
--- a/tmp/bbf0803f-126e-453a-bec2-5d2399b8c86e_buggy.java
+++ b/tmp/dc5925a4-aae6-449a-85c7-3415546b8c8c_fixed.java
@@ -1,23 +1,30 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    
+    // Check for NaN (Not a Number) before comparing
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // If either value is NaN, they can only be equal if both are NaN
+        return ld == rd && Double.isNaN(ld);
+    }
+    
     return evaluateCompare(ld == rd? 0 : ld < rd? -1 : 1);
 }
\ No newline at end of file
