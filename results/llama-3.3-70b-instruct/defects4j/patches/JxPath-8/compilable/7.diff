diff --git a/tmp/b4891b15-fd74-4eef-b66e-c3acef7ab1dc_buggy.java b/tmp/820401a4-ceee-4e50-9b5a-4a717ea11c37_fixed.java
index 98d89dc..2e20f7e 100644
--- a/tmp/b4891b15-fd74-4eef-b66e-c3acef7ab1dc_buggy.java
+++ b/tmp/820401a4-ceee-4e50-9b5a-4a717ea11c37_fixed.java
@@ -1,23 +1,31 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    
+    // Add checks for NaN before comparison
+    if (Double.isNaN(ld) && Double.isNaN(rd)) {
+        return evaluateCompare(0);
+    } else if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        return evaluateCompare(Integer.MIN_VALUE); // NaN is considered neither greater than nor less than any other number
+    }
+    
     return evaluateCompare(ld == rd? 0 : ld < rd? -1 : 1);
 }
\ No newline at end of file
