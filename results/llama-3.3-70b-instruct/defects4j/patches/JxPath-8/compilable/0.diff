diff --git a/tmp/ad37df0b-a7b5-4e19-a432-965d6516fc29_buggy.java b/tmp/34a6fcb0-7c07-4c8a-b867-d2ef9ab78333_fixed.java
index 98d89dc..2527a3c 100644
--- a/tmp/ad37df0b-a7b5-4e19-a432-965d6516fc29_buggy.java
+++ b/tmp/34a6fcb0-7c07-4c8a-b867-d2ef9ab78333_fixed.java
@@ -1,23 +1,35 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    
+    // Special handling for NaN values
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        if (ld == rd) {
+            // If both values are NaN, consider them equal
+            return evaluateCompare(0);
+        } else {
+            // If one value is NaN and the other is not, consider them not comparable
+            return evaluateCompare(-1); // Using -1 to avoid compiling errors
+        }
+    } else {
         return evaluateCompare(ld == rd? 0 : ld < rd? -1 : 1);
     }
+}
\ No newline at end of file
