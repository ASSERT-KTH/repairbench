diff --git a/tmp/a92f3225-9fa3-4699-b712-a628bdefafdd_buggy.java b/tmp/52a381e9-a3e4-4733-ac9e-ab331207f355_fixed.java
index a7d0787..3b488f7 100644
--- a/tmp/a92f3225-9fa3-4699-b712-a628bdefafdd_buggy.java
+++ b/tmp/52a381e9-a3e4-4733-ac9e-ab331207f355_fixed.java
@@ -1,54 +1,64 @@
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
+    try {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            // use the class's constructor to create the object
+            try {
+                Constructor<T> constructor = clazz.getConstructor(String.class);
+                return constructor.newInstance(str);
+            } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {
+                throw new ParseException("Failed to create instance of " + clazz.getName() + " with value " + str, 0);
+            }
+        }
+    } catch (Exception e) {
+        throw new ParseException("Failed to create instance of " + clazz.getName() + " with value " + str, 0);
     }
 }
\ No newline at end of file
