diff --git a/tmp/2bf8a8b9-86bf-4c9b-be3c-f08de281aad2_buggy.java b/tmp/7c8acf87-3a72-4dd3-89d8-f83da94595aa_fixed.java
index a7d0787..96df932 100644
--- a/tmp/2bf8a8b9-86bf-4c9b-be3c-f08de281aad2_buggy.java
+++ b/tmp/7c8acf87-3a72-4dd3-89d8-f83da94595aa_fixed.java
@@ -1,54 +1,52 @@
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    if (PatternOptionBuilder.STRING_VALUE == clazz) {
         return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
         return (T) createObject(str);
-        }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
         return (T) createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {
         return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
         return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {
         return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
         return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {
         return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.URL_VALUE == clazz) {
         return (T) createURL(str);
+    } else {
+        try {
+            T result;
+            if (clazz == Integer.class) {
+                result = clazz.cast(Integer.parseInt(str));
+            } else if (clazz == Long.class) {
+                result = clazz.cast(Long.parseLong(str));
+            } else if (clazz == Double.class) {
+                result = clazz.cast(Double.parseDouble(str));
+            } else if (clazz == Float.class) {
+                result = clazz.cast(Float.parseFloat(str));
+            } else if (clazz == Boolean.class) {
+                result = clazz.cast(Boolean.parseBoolean(str));
+            } else {
+                throw new ParseException("Unsupported type: " + clazz, 0);
+            }
+            return result;
+        } catch (NumberFormatException e) {
+            throw new ParseException("Failed to parse value for type " + clazz, 0);
         }
-        else
-        {
-            return null;
     }
 }
\ No newline at end of file
