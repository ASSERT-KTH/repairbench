diff --git a/tmp/ef1a9c22-d26f-4a03-a21d-35af77febff3_buggy.java b/tmp/54d52a86-1ca4-44a4-880a-32e3b55e7e56_fixed.java
index a7d0787..c300f53 100644
--- a/tmp/ef1a9c22-d26f-4a03-a21d-35af77febff3_buggy.java
+++ b/tmp/54d52a86-1ca4-44a4-880a-32e3b55e7e56_fixed.java
@@ -1,54 +1,51 @@
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+    try {
+        if (String.class.equals(clazz)) {
             return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+        } else if (Object.class.equals(clazz)) {
             return (T) createObject(str);
-        }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
-            return (T) createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+        } else if (Number.class.isAssignableFrom(clazz)) {
+            return (T) createNumber(str, clazz);
+        } else if (Date.class.equals(clazz)) {
             return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+        } else if (Class.class.equals(clazz)) {
             return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+        } else if (File.class.equals(clazz)) {
             return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+        } else if (File.class.equals(clazz)) {
             return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+        } else if (File[].class.equals(clazz)) {
             return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+        } else if (URL.class.equals(clazz)) {
             return (T) createURL(str);
+        } else {
+            throw new ParseException("Unsupported type: " + clazz.getName());
         }
-        else
-        {
-            return null;
+    } catch (Exception e) {
+        throw new ParseException("Failed to create value for type: " + clazz.getName(), e);
+    }
+}
+
+private static Number createNumber(final String str, final Class<? extends Number> clazz) throws ParseException {
+    if (Integer.class.equals(clazz)) {
+        return Integer.parseInt(str);
+    } else if (Double.class.equals(clazz)) {
+        return Double.parseDouble(str);
+    } else if (Float.class.equals(clazz)) {
+        return Float.parseFloat(str);
+    } else {
+        throw new ParseException("Unsupported number type: " + clazz.getName());
     }
 }
\ No newline at end of file
