diff --git a/tmp/bfacc808-82be-4ceb-907a-08b97ce3eaf4_buggy.java b/tmp/e8d8cb56-fb0f-47d1-98de-66c8ef9e4e8c_fixed.java
index e4d90e7..6a26858 100644
--- a/tmp/bfacc808-82be-4ceb-907a-08b97ce3eaf4_buggy.java
+++ b/tmp/e8d8cb56-fb0f-47d1-98de-66c8ef9e4e8c_fixed.java
@@ -1,45 +1,57 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current!= null &&!current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
       sb.append(getPropertyType(property).toString());
 
       ++i;
       if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(",...");
+        // Get the next few property names that were truncated.
+        List<String> truncatedProperties = new ArrayList<>();
+        for (String propName : propertyNames) {
+          if (i <= MAX_PRETTY_PRINTED_PROPERTIES + 2) {
+            truncatedProperties.add(propName);
+            i++;
+          } else {
+            break;
+          }
+        }
+        // Append the truncated property names in square brackets.
+        sb.append(" [").append(String.join(", ", truncatedProperties)).append("]");
         break;
       }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
