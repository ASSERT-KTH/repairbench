diff --git a/tmp/159137b9-520d-4e02-aaeb-cfcddad68fc8_buggy.java b/tmp/41941ae8-5d9a-49d0-ace0-dbbcebcb3b63_fixed.java
index e4d90e7..f6e0117 100644
--- a/tmp/159137b9-520d-4e02-aaeb-cfcddad68fc8_buggy.java
+++ b/tmp/41941ae8-5d9a-49d0-ace0-dbbcebcb3b63_fixed.java
@@ -1,45 +1,50 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
         return getReferenceName();
     } else if (prettyPrint) {
         // Don't pretty print recursively.
         prettyPrint = false;
 
         // Use a tree set so that the properties are sorted.
         Set<String> propertyNames = Sets.newTreeSet();
         for (ObjectType current = this;
              current!= null &&!current.isNativeObjectType() &&
                  propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
              current = current.getImplicitPrototype()) {
             propertyNames.addAll(current.getOwnPropertyNames());
         }
 
         StringBuilder sb = new StringBuilder();
         sb.append("{");
 
         int i = 0;
         for (String property : propertyNames) {
             if (i > 0) {
                 sb.append(", ");
             }
 
             sb.append(property);
             sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+            JSType propertyType = getPropertyType(property);
+            if (propertyType instanceof RecordType && ((RecordType) propertyType).isRecursive()) {
+                sb.append("{...}");
+            } else {
+                sb.append(propertyType.toString());
+            }
 
             ++i;
             if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
                 sb.append(",...");
                 break;
             }
         }
 
         sb.append("}");
 
         prettyPrint = true;
         return sb.toString();
     } else {
         return "{...}";
     }
 }
\ No newline at end of file
