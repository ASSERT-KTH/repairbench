diff --git a/tmp/7b3a68cd-e727-4e61-82ab-735113fa0a81_buggy.java b/tmp/d21d198e-095e-459b-b39b-f317c63a2f39_fixed.java
index e4d90e7..7056d18 100644
--- a/tmp/7b3a68cd-e727-4e61-82ab-735113fa0a81_buggy.java
+++ b/tmp/d21d198e-095e-459b-b39b-f317c63a2f39_fixed.java
@@ -1,45 +1,62 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current!= null &&!current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+      JSType propertyType = getPropertyType(property);
+      if (propertyType instanceof ObjectType && ((ObjectType) propertyType).hasReferenceName()) {
+        sb.append(((ObjectType) propertyType).getReferenceName());
+      } else {
+        sb.append(propertyType.toString());
+      }
 
       ++i;
       if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(",...");
+        // Append the remaining properties
+        Set<String> remainingProperties = new HashSet<>(propertyNames);
+        remainingProperties.removeAll(propertyNames.subSet(propertyNames.first(), propertyNames.toArray(new String[0])[MAX_PRETTY_PRINTED_PROPERTIES - 1]));
+        sb.append("(");
+        for (String remainingProperty : remainingProperties) {
+          sb.append(remainingProperty);
+          sb.append(": ");
+          sb.append(getPropertyType(remainingProperty).toString());
+          sb.append(", ");
+        }
+        sb.delete(sb.length() - 2, sb.length());
+        sb.append(")");
         break;
       }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
