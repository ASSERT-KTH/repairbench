diff --git a/tmp/b997b0be-59ad-4735-bdd2-e55a03777bb2_buggy.java b/tmp/0e3de81b-80fb-4a8f-b799-e9a461b6a9dc_fixed.java
index e4d90e7..861c1ae 100644
--- a/tmp/b997b0be-59ad-4735-bdd2-e55a03777bb2_buggy.java
+++ b/tmp/0e3de81b-80fb-4a8f-b799-e9a461b6a9dc_fixed.java
@@ -1,45 +1,56 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
         return getReferenceName();
     } else if (prettyPrint) {
         // Don't pretty print recursively.
         prettyPrint = false;
 
         // Use a tree set so that the properties are sorted.
         Set<String> propertyNames = Sets.newTreeSet();
         for (ObjectType current = this;
              current!= null &&!current.isNativeObjectType() &&
                  propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
              current = current.getImplicitPrototype()) {
             propertyNames.addAll(current.getOwnPropertyNames());
         }
 
         StringBuilder sb = new StringBuilder();
         sb.append("{");
 
         int i = 0;
-      for (String property : propertyNames) {
+        List<String> sortedProperties = new ArrayList<>(propertyNames);
+        for (String property : sortedProperties) {
             if (i > 0) {
                 sb.append(", ");
             }
 
             sb.append(property);
             sb.append(": ");
             sb.append(getPropertyType(property).toString());
 
             ++i;
             if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
+                StringBuilder restProperties = new StringBuilder("[");
+                int j = 0;
+                for (String remainingProperty : sortedProperties.subList(i, sortedProperties.size())) {
+                    if (j > 0) {
+                        restProperties.append(", ");
+                    }
+                    restProperties.append(remainingProperty);
+                    ++j;
+                }
+                restProperties.append("]");
+                sb.append(",...").append(restProperties);
                 break;
             }
         }
 
         sb.append("}");
 
         prettyPrint = true;
         return sb.toString();
     } else {
         return "{...}";
     }
 }
\ No newline at end of file
