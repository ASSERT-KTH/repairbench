diff --git a/tmp/3e4afd49-2c0b-4bda-bfbd-363456a9e98d_buggy.java b/tmp/a1a671dd-32c1-49a6-9895-6b532e740d0a_fixed.java
index e4d90e7..05237ac 100644
--- a/tmp/3e4afd49-2c0b-4bda-bfbd-363456a9e98d_buggy.java
+++ b/tmp/a1a671dd-32c1-49a6-9895-6b532e740d0a_fixed.java
@@ -1,45 +1,68 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
         return getReferenceName();
     } else if (prettyPrint) {
         // Don't pretty print recursively.
         prettyPrint = false;
 
         // Use a tree set so that the properties are sorted.
         Set<String> propertyNames = Sets.newTreeSet();
         for (ObjectType current = this;
              current!= null &&!current.isNativeObjectType() &&
                  propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
              current = current.getImplicitPrototype()) {
             propertyNames.addAll(current.getOwnPropertyNames());
         }
 
         StringBuilder sb = new StringBuilder();
         sb.append("{");
 
         int i = 0;
         for (String property : propertyNames) {
             if (i > 0) {
                 sb.append(", ");
             }
 
             sb.append(property);
             sb.append(": ");
+            if (forAnnotations) {
+                sb.append(getPropertyType(property).toAnnotationString());
+            } else {
                 sb.append(getPropertyType(property).toString());
+            }
 
             ++i;
             if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
                 sb.append(",...");
+                if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
+                    sb.append(" [");
+                    int j = 0;
+                    for (String skippedProperty : propertyNames) {
+                        if (j >= MAX_PRETTY_PRINTED_PROPERTIES) {
+                            if (j > MAX_PRETTY_PRINTED_PROPERTIES) {
+                                sb.append(", ");
+                            }
+                            sb.append(skippedProperty);
+                            ++j;
+                            if (j > MAX_PRETTY_PRINTED_PROPERTIES + 2) {
+                                break;
+                            }
+                        } else {
+                            ++j;
+                        }
+                    }
+                    sb.append("]");
+                }
                 break;
             }
         }
 
         sb.append("}");
 
         prettyPrint = true;
         return sb.toString();
     } else {
         return "{...}";
     }
 }
\ No newline at end of file
