diff --git a/tmp/1b81e625-4273-40c9-9b37-63aafb35f8db_buggy.java b/tmp/42f0bb8e-7342-4ced-8adf-346940fd00f2_fixed.java
index 63a7c80..0ba9d28 100644
--- a/tmp/1b81e625-4273-40c9-9b37-63aafb35f8db_buggy.java
+++ b/tmp/42f0bb8e-7342-4ced-8adf-346940fd00f2_fixed.java
@@ -1,77 +1,96 @@
 /**
  * Arranges the items within a container.
  *
  * @param container  the container.
  * @param constraint  the constraint.
  * @param g2  the graphics device.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
     if (this.topBlock!= null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
                 new Range(0.0, constraint.getHeight()),
                 LengthConstraintType.RANGE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
     }
     w[1] = w[0];
     if (this.bottomBlock!= null) {
+        double maxHeight = constraint.getHeight() - (this.topBlock!= null? h[0] : 0);
+        if (maxHeight < 0) {
+            maxHeight = 0;
+        }
         RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                LengthConstraintType.FIXED, 0.0, new Range(0.0, maxHeight), LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+    double middleHeight = constraint.getHeight() - (this.topBlock!= null? h[0] : 0) - (this.bottomBlock!= null? h[1] : 0);
+    if (middleHeight < 0) {
+        middleHeight = 0;
+    }
+    h[2] = middleHeight;
     if (this.leftBlock!= null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
                 new Range(0.0, constraint.getWidth()),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
     }
     h[3] = h[2];
     if (this.rightBlock!= null) {
+        double maxWidth = constraint.getWidth() - (this.leftBlock!= null? w[2] : 0);
+        if (maxWidth < 0) {
+            maxWidth = 0;
+        }
         RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+                new Range(0.0, maxWidth),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
     }
     h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+    double centerWidth = constraint.getWidth() - (this.leftBlock!= null? w[2] : 0) - (this.rightBlock!= null? w[3] : 0);
+    if (centerWidth < 0) {
+        centerWidth = 0;
+    }
+    w[4] = centerWidth;
+    RectangleConstraint c5 = new RectangleConstraint(centerWidth, h[4]);
     if (this.centerBlock!= null) {
         this.centerBlock.arrange(g2, c5);
     }
 
     if (this.topBlock!= null) {
         this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                 h[0]));
     }
     if (this.bottomBlock!= null) {
         this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                 w[1], h[1]));
     }
     if (this.leftBlock!= null) {
         this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                 h[2]));
     }
     if (this.rightBlock!= null) {
         this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                 w[3], h[3]));
     }
     if (this.centerBlock!= null) {
         this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                 h[4]));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+    double finalHeight = (this.topBlock!= null? h[0] : 0) + (this.bottomBlock!= null? h[1] : 0) + h[2];
+    if (finalHeight < 0) {
+        finalHeight = 0;
+    }
+    return new Size2D(constraint.getWidth(), finalHeight);
 }
\ No newline at end of file
