diff --git a/tmp/84257d30-8f4f-4c5d-93d7-0dc7ae7a29cb_buggy.java b/tmp/b27473fc-a43e-4eae-bea7-2a1f79d2689b_fixed.java
index c51c8b1..6603ed3 100644
--- a/tmp/84257d30-8f4f-4c5d-93d7-0dc7ae7a29cb_buggy.java
+++ b/tmp/b27473fc-a43e-4eae-bea7-2a1f79d2689b_fixed.java
@@ -1,31 +1,32 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns!= null) {
     if (parent.isFor() &&!NodeUtil.isForIn(parent)) {
       // Patch for assignments that appear in the init, 
       // condition or iteration part of a FOR loop.  Without 
       // this change, all 3 of those parts try to claim the for 
       // loop as their dependency scope.  The last assignment in 
       // those three fields wins, which can result in incorrect 
       // reference edges between referenced and assigned variables.
       //
       // TODO(user) revisit the dependency scope calculation 
       // logic.
       if (parent.getFirstChild().getNext()!= n) {
         recordDepScope(recordNode, ns);
       } else {
         recordDepScope(nameNode, ns);
       }
+    } else if (parent.isCall()) {
+      // Don't record the dependency scope when the assignment appears within a function call.
+      // This handles cases like `(fun = function(){ x; })();` where `fun` is the lhs and 
+      // `function(){ x; }` is the rhs which is also the caller.
+      // No recordDepScope call is needed here
     } else {
       // The rhs of the assignment is the caller, so it's used by the 
       // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
       recordDepScope(recordNode, ns);
     }
   }
 }
\ No newline at end of file
