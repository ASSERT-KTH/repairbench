diff --git a/tmp/fafacd69-a8e6-4473-9868-2b228ca5bbe7_buggy.java b/tmp/44865972-2d5e-4523-8f27-3570ce124c9b_fixed.java
index c51c8b1..68ac71e 100644
--- a/tmp/fafacd69-a8e6-4473-9868-2b228ca5bbe7_buggy.java
+++ b/tmp/44865972-2d5e-4523-8f27-3570ce124c9b_fixed.java
@@ -1,31 +1,25 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns!= null) {
     if (parent.isFor() &&!NodeUtil.isForIn(parent)) {
       // Patch for assignments that appear in the init, 
       // condition or iteration part of a FOR loop.  Without 
       // this change, all 3 of those parts try to claim the for 
       // loop as their dependency scope.  The last assignment in 
       // those three fields wins, which can result in incorrect 
       // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
       if (parent.getFirstChild().getNext()!= n) {
         recordDepScope(recordNode, ns);
       } else {
         recordDepScope(nameNode, ns);
       }
+    } else if (n.getParent().isCall() && n.getParent().getFirstChild() == n) {
+      // Special case for assignment in a call expression.
+      recordDepScope(nameNode, ns);
     } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
       recordDepScope(recordNode, ns);
     }
   }
 }
\ No newline at end of file
