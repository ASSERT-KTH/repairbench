diff --git a/tmp/c96e59c2-f652-4a5b-a6b2-ed72a615a157_buggy.java b/tmp/08aeef8f-224c-4160-bbee-005a783e2b4d_fixed.java
index d57736b..ab6ea48 100644
--- a/tmp/c96e59c2-f652-4a5b-a6b2-ed72a615a157_buggy.java
+++ b/tmp/08aeef8f-224c-4160-bbee-005a783e2b4d_fixed.java
@@ -1,39 +1,43 @@
 /**
  * Suppose X is an object with inferred properties.
  * Suppose also that X is used in a way where it would only type-check
  * correctly if some of those properties are widened.
  * Then we should be polite and automatically widen X's properties for him.
  *
  * For a concrete example, consider:
  * param x {{prop: (number|undefined)}}
  * function f(x) {}
  * f({});
  *
  * If we give the anonymous object an inferred property of (number|undefined),
  * then this code will type-check appropriately.
  */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj!= null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType!= null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
+            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            // Only infer a property if it's not already present on the type.
+            // If the property is present but with a narrower type, we don't widen it here.
+            // This prevents unwanted widening of already declared properties.
+            if (!objType.hasDeclaredProperty(prop)) {
               objType.defineInferredProperty(prop, typeToInfer, null);
             }
           }
         }
       }
     }
+  }
+}
\ No newline at end of file
