diff --git a/tmp/c3b1463d-1736-40a1-8c04-b9edb48160f3_buggy.java b/tmp/1ebab874-2d02-4ff1-8223-64e6a218be55_fixed.java
index ae9ef3f..4419027 100644
--- a/tmp/c3b1463d-1736-40a1-8c04-b9edb48160f3_buggy.java
+++ b/tmp/1ebab874-2d02-4ff1-8223-64e6a218be55_fixed.java
@@ -1,158 +1,213 @@
 /**
  * Parses the externs and main inputs.
  *
  * @return A synthetic root node whose two children are the externs root
  *     and the main root
  */
 Node parseInputs() {
   boolean devMode = options.devMode!= DevMode.OFF;
 
   // If old roots exist (we are parsing a second time), detach each of the
   // individual file parse trees.
   if (externsRoot!= null) {
     externsRoot.detachChildren();
   }
   if (jsRoot!= null) {
     jsRoot.detachChildren();
   }
 
   // Parse main js sources.
   jsRoot = IR.block();
   jsRoot.setIsSyntheticBlock(true);
 
   externsRoot = IR.block();
   externsRoot.setIsSyntheticBlock(true);
 
   externAndJsRoot = IR.block(externsRoot, jsRoot);
   externAndJsRoot.setIsSyntheticBlock(true);
 
   if (options.tracer.isOn()) {
     tracker = new PerformanceTracker(jsRoot, options.tracer);
     addChangeHandler(tracker.getCodeChangeHandler());
   }
 
   Tracer tracer = newTracer("parseInputs");
 
   try {
     // Parse externs sources.
     for (CompilerInput input : externs) {
       Node n = input.getAstRoot(this);
       if (hasErrors()) {
         return null;
       }
       externsRoot.addChildToBack(n);
     }
 
     // Modules inferred in ProcessCommonJS pass.
     if (options.transformAMDToCJSModules || options.processCommonJSModules) {
       processAMDAndCommonJSModules();
     }
 
     // Check if inputs need to be rebuilt from modules.
     boolean staleInputs = false;
 
     // Check if the sources need to be re-ordered.
     if (options.dependencyOptions.needsManagement() &&
        !options.skipAllPasses &&
         options.closurePass) {
       for (CompilerInput input : inputs) {
         // Forward-declare all the provided types, so that they
         // are not flagged even if they are dropped from the process.
         for (String provide : input.getProvides()) {
           getTypeRegistry().forwardDeclareType(provide);
         }
       }
 
       try {
         inputs =
             (moduleGraph == null? new JSModuleGraph(modules) : moduleGraph)
            .manageDependencies(options.dependencyOptions, inputs);
         staleInputs = true;
       } catch (CircularDependencyException e) {
         report(JSError.make(
             JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
 
         // If in IDE mode, we ignore the error and keep going.
         if (hasErrors()) {
           return null;
         }
       } catch (MissingProvideException e) {
         report(JSError.make(
             MISSING_ENTRY_ERROR, e.getMessage()));
 
         // If in IDE mode, we ignore the error and keep going.
         if (hasErrors()) {
           return null;
         }
       }
+
+      // Ensure valid compilation level
+      if (options.compilationLevel == CompilationLevel.WHITESPACE_ONLY) {
+        inputs = sortInputsByProvidesAndRequires(inputs);
+      }
     }
 
     for (CompilerInput input : inputs) {
       Node n = input.getAstRoot(this);
 
       // Inputs can have a null AST during initial parse.
       if (n == null) {
         continue;
       }
 
       if (n.getJSDocInfo()!= null) {
         JSDocInfo info = n.getJSDocInfo();
         if (info.isExterns()) {
           // If the input file is explicitly marked as an externs file, then
           // assume the programmer made a mistake and throw it into
           // the externs pile anyways.
           externsRoot.addChildToBack(n);
           input.setIsExtern(true);
 
           input.getModule().remove(input);
 
           externs.add(input);
           staleInputs = true;
         } else if (info.isNoCompile()) {
           input.getModule().remove(input);
           staleInputs = true;
         }
       }
     }
 
     if (staleInputs) {
       fillEmptyModules(modules);
       rebuildInputsFromModules();
     }
 
     // Build the AST.
     for (CompilerInput input : inputs) {
       Node n = input.getAstRoot(this);
       if (n == null) {
         continue;
       }
 
       if (devMode) {
         runSanityCheck();
         if (hasErrors()) {
           return null;
         }
       }
 
       if (options.sourceMapOutputPath!= null ||
           options.nameReferenceReportPath!= null) {
 
         // Annotate the nodes in the tree with information from the
         // input file. This information is used to construct the SourceMap.
         SourceInformationAnnotator sia =
             new SourceInformationAnnotator(
                 input.getName(), options.devMode!= DevMode.OFF);
         NodeTraversal.traverse(this, n, sia);
       }
 
       jsRoot.addChildToBack(n);
     }
 
     if (hasErrors()) {
       return null;
     }
     return externAndJsRoot;
   } finally {
     stopTracer(tracer, "parseInputs");
   }
 }
+
+// Helper function to sort inputs by provides and requires
+private List<CompilerInput> sortInputsByProvidesAndRequires(List<CompilerInput> inputs) {
+  Map<String, List<CompilerInput>> provideMap = new HashMap<>();
+  Map<String, Set<String>> requireMap = new HashMap<>();
+
+  for (CompilerInput input : inputs) {
+    for (String provide : input.getProvides()) {
+      if (!provideMap.containsKey(provide)) {
+        provideMap.put(provide, new ArrayList<>());
+      }
+      provideMap.get(provide).add(input);
+    }
+    for (String require : input.getRequires()) {
+      if (!requireMap.containsKey(require)) {
+        requireMap.put(require, new HashSet<>());
+      }
+      requireMap.get(require).add(input.getName());
+    }
+  }
+
+  List<CompilerInput> sortedInputs = new ArrayList<>();
+  Set<String> visited = new HashSet<>();
+
+  while (visited.size() < inputs.size()) {
+    for (CompilerInput input : inputs) {
+      if (visited.contains(input.getName())) {
+        continue;
+      }
+
+      boolean canAdd = true;
+      for (String require : input.getRequires()) {
+        if (!provideMap.containsKey(require) || provideMap.get(require).isEmpty()) {
+          canAdd = false;
+          break;
+        }
+      }
+
+      if (canAdd) {
+        sortedInputs.add(input);
+        visited.add(input.getName());
+        for (String provide : input.getProvides()) {
+          provideMap.get(provide).remove(input);
+        }
+      }
+    }
+  }
+
+  return sortedInputs;
+}
\ No newline at end of file
