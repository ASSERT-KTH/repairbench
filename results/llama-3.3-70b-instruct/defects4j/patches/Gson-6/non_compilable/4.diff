diff --git a/tmp/226679d1-6130-4492-95b7-fd86f8d5be12_buggy.java b/tmp/0f2aa5f1-e0ec-40ad-a18a-080674af143f_fixed.java
index 1c53d31..279224e 100644
--- a/tmp/226679d1-6130-4492-95b7-fd86f8d5be12_buggy.java
+++ b/tmp/0f2aa5f1-e0ec-40ad-a18a-080674af143f_fixed.java
@@ -1,20 +1,35 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
   TypeAdapter<?> typeAdapter;
   if (TypeAdapter.class.isAssignableFrom(value)) {
     Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
   } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
     Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
        .construct()
        .create(gson, fieldType);
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+  // Check for null before calling nullSafe()
+  return typeAdapter!= null? typeAdapter.nullSafe() : nullSafeTypeAdapter(gson, fieldType);
+}
+
+// Additional method to create a null-safe type adapter
+private static TypeAdapter<?> nullSafeTypeAdapter(Gson gson, TypeToken<?> fieldType) {
+  return new TypeAdapter<Object>() {
+    @Override
+    public void write(JsonWriter out, Object value) throws IOException {
+      out.nullValue();
+    }
+
+    @Override
+    public Object read(JsonReader in) throws IOException {
+      return null;
+    }
+  };
 }
\ No newline at end of file
