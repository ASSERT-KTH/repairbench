diff --git a/tmp/0bcb8282-eab4-4a2f-90ea-c4591910dca2_buggy.java b/tmp/2058ccb4-1a26-4faa-a2ac-fc76c626942d_fixed.java
index fecb896..094cea8 100644
--- a/tmp/0bcb8282-eab4-4a2f-90ea-c4591910dca2_buggy.java
+++ b/tmp/2058ccb4-1a26-4faa-a2ac-fc76c626942d_fixed.java
@@ -1,34 +1,42 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
     char last = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        if (inQuote && c.equals(quoteChar)) {
+            inQuote = false;
+            quoteChar = 0;
+        } else if (!inQuote && (c.equals '\'' || c.equals '"')) {
+            inQuote = true;
+            quoteChar = c;
+        } else if (!inQuote && last == ESC) {
+            // escaped char, do nothing
+        } else if (!inQuote && c.equals(open)) {
             depth++;
             if (start == -1)
                 start = pos;
-                }
-                else if (c.equals(close))
+        } else if (!inQuote && c.equals(close)) {
             depth--;
         }
 
-            if (depth > 0 && last != 0)
+        if (depth > 0 && last!= 0 &&!inQuote)
             end = pos; // don't include the outer match pair in the return
         last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+    } while (depth > 0 || inQuote);
+    return (end >= 0)? queue.substring(start, end) : (start >= 0)? queue.substring(start) : "";
 }
\ No newline at end of file
