diff --git a/tmp/9a341fb5-f24e-4f2c-ae30-f4dab636db30_buggy.java b/tmp/6af74386-7209-4c78-bdbb-f1acc0478a6c_fixed.java
index fecb896..1e3f47e 100644
--- a/tmp/9a341fb5-f24e-4f2c-ae30-f4dab636db30_buggy.java
+++ b/tmp/6af74386-7209-4c78-bdbb-f1acc0478a6c_fixed.java
@@ -1,34 +1,44 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
+        if (inQuote) {
+            if (c.equals(quoteChar)) 
+                inQuote = false;
+        } else if (last == ESC) {
+            last = c;
+        } else if (c.equals(SINGLE_QUOTE) || c.equals(DOUBLE_QUOTE)) {
+            inQuote = true;
+            quoteChar = c;
+        } else {
             if (c.equals(open)) {
                 depth++;
                 if (start == -1)
                     start = pos;
             }
             else if (c.equals(close))
                 depth--;
         }
 
         if (depth > 0 && last!= 0)
             end = pos; // don't include the outer match pair in the return
         last = c;
-        } while (depth > 0);
+    } while (depth > 0 || inQuote);
     return (end >= 0)? queue.substring(start, end) : "";
 }
\ No newline at end of file
