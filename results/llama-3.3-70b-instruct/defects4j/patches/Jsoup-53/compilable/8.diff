diff --git a/tmp/a70b936c-f3cd-4eb4-9a39-d23b1bbbb9c7_buggy.java b/tmp/2abf29f4-785f-411a-8aa3-7c4e788dc3ce_fixed.java
index fecb896..53928a5 100644
--- a/tmp/a70b936c-f3cd-4eb4-9a39-d23b1bbbb9c7_buggy.java
+++ b/tmp/2abf29f4-785f-411a-8aa3-7c4e788dc3ce_fixed.java
@@ -1,34 +1,45 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
         if (last == 0 || last!= ESC) {
-                if (c.equals(open)) {
+            if (inQuote) {
+                if (c.equals(quoteChar)) {
+                    inQuote = false;
+                }
+            } else {
+                if (c.equals("'") || c.equals("\"")) {
+                    inQuote = true;
+                    quoteChar = c;
+                } else if (c.equals(open)) {
                     depth++;
                     if (start == -1)
-                        start = pos;
+                        start = pos - 1; // added -1 to include the opener
                 }
                 else if (c.equals(close))
                     depth--;
             }
+        }
 
-            if (depth > 0 && last != 0)
+        if (depth == 0 && last!= 0)
             end = pos; // don't include the outer match pair in the return
         last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+    } while (depth > 0 || inQuote);
+    return (end >= 0)? queue.substring(start, end) : (start >= 0? queue.substring(start) : "");
 }
\ No newline at end of file
