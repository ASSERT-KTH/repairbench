diff --git a/tmp/8cea719f-9320-4b77-a9f0-b99327b361a8_buggy.java b/tmp/af110c91-ce70-486a-a0a3-05ea1372adbb_fixed.java
index fecb896..0c9dedd 100644
--- a/tmp/8cea719f-9320-4b77-a9f0-b99327b361a8_buggy.java
+++ b/tmp/af110c91-ce70-486a-a0a3-05ea1372adbb_fixed.java
@@ -1,34 +1,55 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
+    char quote = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        if (inQuote) {
+            if (last == '\\') {
+                if (c.equals(quote)) {
+                    inQuote = false;
+                    quote = 0;
+                }
+            } else if (c.equals(quote)) {
+                inQuote = false;
+                quote = 0;
+            }
+        } else {
+            if (c.equals('\\')) {
+                if (last == '\\') {
+                    last = c;
+                }
+            } else if (c.equals('"') || c.equals('\'')) {
+                inQuote = true;
+                quote = c;
+            } else if (c.equals(open)) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c.equals(close)) {
                 depth--;
             }
+        }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        if (start == -1) {
+            start = pos;
+        }
+        end = pos;
         last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+    } while (depth > 0 || inQuote);
+    return (start >= 0 && end > start)? queue.substring(start, end) : "";
 }
\ No newline at end of file
