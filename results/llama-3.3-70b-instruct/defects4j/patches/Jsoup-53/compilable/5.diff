diff --git a/tmp/788ad1af-815f-4c20-93c3-a5960270bebb_buggy.java b/tmp/79870202-223d-4426-b845-19e8b5f972e0_fixed.java
index fecb896..4ba708e 100644
--- a/tmp/788ad1af-815f-4c20-93c3-a5960270bebb_buggy.java
+++ b/tmp/79870202-223d-4426-b845-19e8b5f972e0_fixed.java
@@ -1,34 +1,51 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
+    char quote = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
+        if (last == ESC) {
+            last = c;
+            continue;
+        }
         if (last == 0 || last!= ESC) {
-                if (c.equals(open)) {
+            if (inQuote) {
+                if (c.equals(quote)) {
+                    inQuote = false;
+                    quote = 0;
+                }
+            } else if (c.equals('\'') || c.equals('"')) {
+                inQuote = true;
+                quote = c;
+            } else if (c.equals(open)) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c.equals(close)) {
                 depth--;
             }
+        }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        if (depth == 0) {
+            end = pos; // include the current character in the return
+        } else if (depth > 0 && last!= 0) {
+            // do nothing
+        }
         last = c;
-        } while (depth > 0);
+    } while (depth > 0 || start == -1);
     return (end >= 0)? queue.substring(start, end) : "";
 }
\ No newline at end of file
