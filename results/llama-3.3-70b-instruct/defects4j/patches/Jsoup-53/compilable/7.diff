diff --git a/tmp/ed1498cb-3a8e-4a9c-8bf7-cb78ee03f434_buggy.java b/tmp/7e29b5c9-bfa3-41c0-94a0-925a0b85793e_fixed.java
index fecb896..0ddcff9 100644
--- a/tmp/ed1498cb-3a8e-4a9c-8bf7-cb78ee03f434_buggy.java
+++ b/tmp/7e29b5c9-bfa3-41c0-94a0-925a0b85793e_fixed.java
@@ -1,34 +1,43 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
-        int start = -1;
-        int end = -1;
+    int start = pos;
     int depth = 0;
-        char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
+    boolean escape = false;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        
+        if (escape) {
+            escape = false;
+        } else if (inQuote) {
+            if (c.equals(quoteChar)) {
+                inQuote = false;
+            }
+        } else if (c.equals('\\')) {
+            escape = true;
+        } else if (c.equals('\'') || c.equals('"')) {
+            inQuote = true;
+            quoteChar = c;
+        } else if (c.equals(open)) {
             depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+        } else if (c.equals(close)) {
             depth--;
         }
+    } while (inQuote || depth > 0);
     
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+    if (depth!= 0) {
+        throw new RuntimeException("Unbalanced quote or bracket in selector");
+    }
+    return queue.substring(start, pos);
 }
\ No newline at end of file
