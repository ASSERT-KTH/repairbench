diff --git a/tmp/3a267a5a-5d40-4ae8-9afd-d66f5b4342ad_buggy.java b/tmp/2535b1da-0859-49e0-9a0c-990437998619_fixed.java
index 10616db..8d685f7 100644
--- a/tmp/3a267a5a-5d40-4ae8-9afd-d66f5b4342ad_buggy.java
+++ b/tmp/2535b1da-0859-49e0-9a0c-990437998619_fixed.java
@@ -1,19 +1,30 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
+        // Handle the edge case when adding to the last day of a month that has 29, 30 or 31 days.
+        if (partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && values[1] == partial.getFieldType(1).getMaximumValue()) {
+            // If the month has 29 days (i.e., February), when adding a month, set the day to 29.
+            // Otherwise, when adding to the last day of a month that has 30 or 31 days, use the last day of the new month.
+            if (iChronology.monthOfYear().getMaximumValue() == values[0] + valueToAdd) {
                 instant = add(instant, valueToAdd);
                 return iChronology.get(partial, instant);
             } else {
                 return super.add(partial, fieldIndex, values, valueToAdd);
             }
+        } else {
+            instant = add(instant, valueToAdd);
+            return iChronology.get(partial, instant);
+        }
+    } else {
+        return super.add(partial, fieldIndex, values, valueToAdd);
+    }
 }
\ No newline at end of file
