diff --git a/tmp/9694759e-a819-4814-a22d-e82414432591_buggy.java b/tmp/12bb0cb6-cb7e-4c49-bb6c-2ddafb1b060a_fixed.java
index f9a9b5b..658e0df 100644
--- a/tmp/9694759e-a819-4814-a22d-e82414432591_buggy.java
+++ b/tmp/12bb0cb6-cb7e-4c49-bb6c-2ddafb1b060a_fixed.java
@@ -1,30 +1,52 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        if (settings.isUseConstructor()) {
+            Constructor<?>[] constructors = mockedProxyType.getDeclaredConstructors();
+            Constructor<?> constructorToUse = null;
+            for (Constructor<?> constructor : constructors) {
+                if (constructor.getParameterCount() == 0 || (constructor.getParameterCount() == 1 && settings.getOuterInstance()!= null)) {
+                    constructorToUse = constructor;
+                    break;
+                }
+            }
+            if (constructorToUse == null) {
+                throw new InstantiationException("No 0-arg constructor found, please use @Mock on a field in a class with a no-arg constructor.");
+            }
+            if (constructorToUse.getParameterCount() == 1) {
+                if (!(settings.getOuterInstance() instanceof Object)) {
+                    throw new InstantiationException("Please ensure that the outer instance has correct type.");
+                }
+                mockInstance = (T) constructorToUse.newInstance(settings.getOuterInstance());
+            } else {
+                mockInstance = (T) constructorToUse.newInstance();
+            }
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
     }
 }
\ No newline at end of file
