diff --git a/tmp/bfab1f6c-789a-4388-941b-f765cb63239b_buggy.java b/tmp/75dbb7b6-ce96-4139-b712-d5e80ab44239_fixed.java
index f9a9b5b..151e55f 100644
--- a/tmp/bfab1f6c-789a-4388-941b-f765cb63239b_buggy.java
+++ b/tmp/75dbb7b6-ce96-4139-b712-d5e80ab44239_fixed.java
@@ -1,30 +1,68 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Use the settings to determine how to instantiate the mock instance
+        if (settings.useConstructor()) {
+            mockInstance = instantiateUsingConstructor(settings, mockedProxyType);
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+    } catch (InstantiationException | IllegalAccessException e) {
         throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
     }
 }
+
+// New method to instantiate the mock instance using a constructor
+private <T> T instantiateUsingConstructor(MockCreationSettings<T> settings, Class<? extends T> mockedProxyType) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
+    // Use the outer instance and constructor argument types from the settings
+    Object outerInstance = settings.getOuterInstance();
+    Class<?>[] constructorArgumentTypes = settings.getConstructorArgumentTypes();
+    Object[] constructorArguments = settings.getConstructorArguments();
+
+    // Find the matching constructor
+    Constructor<?> constructor = findMatchingConstructor(mockedProxyType, constructorArgumentTypes);
+
+    // Instantiate the mock instance using the constructor
+    return (T) constructor.newInstance(constructorArguments);
+}
+
+// New method to find the matching constructor
+private Constructor<?> findMatchingConstructor(Class<?> clazz, Class<?>[] constructorArgumentTypes) {
+    for (Constructor<?> constructor : clazz.getConstructors()) {
+        if (constructor.getParameterTypes().length == constructorArgumentTypes.length) {
+            boolean match = true;
+            for (int i = 0; i < constructor.getParameterTypes().length; i++) {
+                if (!constructor.getParameterTypes()[i].isAssignableFrom(constructorArgumentTypes[i])) {
+                    match = false;
+                    break;
+                }
+            }
+            if (match) {
+                return constructor;
+            }
+        }
+    }
+    throw new MockitoException("Unable to find a matching constructor for the given argument types");
+}
\ No newline at end of file
