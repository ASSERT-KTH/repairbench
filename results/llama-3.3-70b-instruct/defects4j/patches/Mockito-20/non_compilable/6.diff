diff --git a/tmp/3dda6856-f015-4dbb-a028-7a6ac6df8969_buggy.java b/tmp/67131621-f479-471d-9d2b-d8ad1406cd77_fixed.java
index f9a9b5b..c3ff6af 100644
--- a/tmp/3dda6856-f015-4dbb-a028-7a6ac6df8969_buggy.java
+++ b/tmp/67131621-f479-471d-9d2b-d8ad1406cd77_fixed.java
@@ -1,30 +1,49 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        Constructor<?>[] constructors = mockedProxyType.getDeclaredConstructors();
+        if (constructors.length == 0) {
+            throw new InstantiationException("No 0-arg constructor found for type " + mockedProxyType.getName());
+        }
+
+        Constructor<?> noArgConstructor = null;
+        for (Constructor<?> constructor : constructors) {
+            if (constructor.getParameterCount() == 0) {
+                noArgConstructor = constructor;
+                break;
+            }
+        }
+
+        if (noArgConstructor == null) {
+            throw new InstantiationException("No 0-arg constructor found for type " + mockedProxyType.getName());
+        }
+
+        noArgConstructor.setAccessible(true);
+        mockInstance = (T) noArgConstructor.newInstance();
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getName() + "'", e);
     }
 }
\ No newline at end of file
