diff --git a/tmp/eaad08b0-779f-4c2b-ba83-fe20c3a78c28_buggy.java b/tmp/eddeaaa4-16bc-40db-9a4f-5892fa18041a_fixed.java
index f9a9b5b..b25ea5e 100644
--- a/tmp/eaad08b0-779f-4c2b-ba83-fe20c3a78c28_buggy.java
+++ b/tmp/eddeaaa4-16bc-40db-9a4f-5892fa18041a_fixed.java
@@ -1,30 +1,68 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Check if the class to be mocked has a no-arg constructor
+        Constructor<?>[] constructors = mockedProxyType.getConstructors();
+        if (constructors.length == 0 ||!hasNoArgConstructor(constructors)) {
+            // If not, try to find a constructor with the correct parameter types
+            Constructor<?> constructor = findConstructorWithCorrectParameters(mockedProxyType, settings);
+            if (constructor!= null) {
+                // Instantiate the class using the found constructor
+                mockInstance = (T) constructor.newInstance(constructorArg-settings.getOuterInstance());
+            } else {
+                throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getName() + "'");
+            }
+        } else {
+            // If the class has a no-arg constructor, instantiate it directly
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getName() + "'", e);
     }
 }
+
+// Helper method to check if a constructor has no arguments
+private boolean hasNoArgConstructor(Constructor<?>[] constructors) {
+    for (Constructor<?> constructor : constructors) {
+        if (constructor.getParameterCount() == 0) {
+            return true;
+        }
+    }
+    return false;
+}
+
+// Helper method to find a constructor with the correct parameter types
+private Constructor<?> findConstructorWithCorrectParameters(Class<?> clazz, MockCreationSettings<?> settings) {
+    Constructor<?>[] constructors = clazz.getConstructors();
+    for (Constructor<?> constructor : constructors) {
+        if (constructor.getParameterCount() > 0) {
+            Class<?>[] parameterTypes = constructor.getParameterTypes();
+            if (parameterTypes.length == 1 && parameterTypes[0].isInstance(settings.getOuterInstance())) {
+                return constructor;
+            }
+        }
+    }
+    return null;
+}
\ No newline at end of file
