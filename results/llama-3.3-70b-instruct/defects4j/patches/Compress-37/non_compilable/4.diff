diff --git a/tmp/4cc206b4-cccf-4fe0-9a1f-f88d42d7d882_buggy.java b/tmp/1a8be93d-1a02-4f4b-85f8-fd44afbd4c77_fixed.java
index 4b7e1e4..2067299 100644
--- a/tmp/4cc206b4-cccf-4fe0-9a1f-f88d42d7d882_buggy.java
+++ b/tmp/1a8be93d-1a02-4f4b-85f8-fd44afbd4c77_fixed.java
@@ -1,52 +1,57 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
-            while((ch = i.read()) != -1) {
+        while((ch = i.read())!= -1 && ch!= ' ') {
+            if (ch < '0' || ch > '9') {
+                // Handle invalid length format
+                return headers;
+            }
+            len *= 10;
+            len += ch - '0';
             read++;
-                if (ch == ' '){
+        }
+        if (ch == -1){ // EOF
+            break;
+        }
+        if (len == 0) { // Skip blank lines
+            i.skip(1); // Skip newline
+            continue;
+        }
         // Get keyword
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while((ch = i.read())!= -1) {
             read++;
             if (ch == '='){ // end of keyword
                 final String keyword = coll.toString(CharsetNames.UTF_8);
                 // Get rest of entry
                 final int restLen = len - read;
                 if (restLen == 1) { // only NL
                     headers.remove(keyword);
                 } else {
-                                final byte[] rest = new byte[restLen];
+                    final byte[] rest = new byte[restLen - 1]; // Exclude newline
                     final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
+                    if (got!= restLen - 1) {
                         throw new IOException("Failed to read "
                                               + "Paxheader. Expected "
-                                                          + restLen
+                                              + restLen - 1
                                               + " bytes, read "
                                               + got);
                     }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                    // From bytes to string
+                    final String value = new String(rest, CharsetNames.UTF_8);
                     headers.put(keyword, value);
                 }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
+                i.skip(1); // Skip newline
                 break; // Processed single header
             }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
+            coll.write((byte) ch);
         }
     }
     return headers;
 }
\ No newline at end of file
