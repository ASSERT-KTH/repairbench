diff --git a/tmp/5cf42669-4582-4522-b10c-1a9596b8abee_buggy.java b/tmp/cfe386d1-6f11-4f78-bedf-41d3c91ea889_fixed.java
index 4b7e1e4..cbdac69 100644
--- a/tmp/5cf42669-4582-4522-b10c-1a9596b8abee_buggy.java
+++ b/tmp/cfe386d1-6f11-4f78-bedf-41d3c91ea889_fixed.java
@@ -1,52 +1,51 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
         while((ch = i.read())!= -1) {
             read++;
             if (ch == ' '){
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while((ch = i.read())!= -1) {
                     read++;
                     if (ch == '='){ // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
                         if (restLen == 1) { // only NL
                             headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
+                        } else if (restLen > 1) { // modified condition
+                            final byte[] rest = new byte[restLen - 1]; // subtract 1 for NL
                             final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
+                            if (got!= restLen - 1) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
-                                                          + restLen
+                                                      + (restLen - 1)
                                                       + " bytes, read "
                                                       + got);
                             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                            // No need to drop trailing NL
+                            final String value = new String(rest, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1){ // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
