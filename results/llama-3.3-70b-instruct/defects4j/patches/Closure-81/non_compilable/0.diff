diff --git a/tmp/29faaa16-0008-4950-a75b-2e2f17a6a120_buggy.java b/tmp/b428405c-3779-49b8-b8ea-8b57fda3fee9_fixed.java
index 6e05e4b..f12079d 100644
--- a/tmp/29faaa16-0008-4950-a75b-2e2f17a6a120_buggy.java
+++ b/tmp/b428405c-3779-49b8-b8ea-8b57fda3fee9_fixed.java
@@ -1,51 +1,45 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
   Boolean isUnnamedFunction = false;
+  Node node = newNode(Token.FUNCTION);
+  
+  // Check for unnamed function
   if (name == null) {
+    // Unnamed functions are not allowed as statements
+    if (functionNode.getParent() instanceof ScriptNode) {
+      throw new ParseErrorException("unnamed function statement");
+    }
     name = new Name();
     name.setIdentifier("");
     isUnnamedFunction = true;
   }
-      Node node = newNode(Token.FUNCTION);
+  
   Node newName = transform(name);
   if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
 
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
   Name fnName = functionNode.getFunctionName();
   if (fnName!= null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
 
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
   return node;
 }
\ No newline at end of file
