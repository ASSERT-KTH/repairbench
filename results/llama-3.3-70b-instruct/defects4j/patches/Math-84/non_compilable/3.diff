diff --git a/tmp/eb416888-9e42-4335-ad2b-32cb069e6497_buggy.java b/tmp/f85fd091-8a59-4339-bc3c-511d4df0aa87_fixed.java
index 5f1dcf2..0a5fe6d 100644
--- a/tmp/eb416888-9e42-4335-ad2b-32cb069e6497_buggy.java
+++ b/tmp/f85fd091-8a59-4339-bc3c-511d4df0aa87_fixed.java
@@ -1,41 +1,63 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                simplex = original;
+                for (int i = 1; i < original.length; i++) {
+                    simplex[i] = expanded;
+                }
             }
 
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
+            simplex = original;
+            for (int i = 1; i < original.length; i++) {
+                simplex[i] = contracted;
+            }
             return;
         }
 
+        // compute the shrinked simplex
+        if (simplex.length > 1) {
+            final RealPointValuePair[] shrinkedSimplex = original.clone();
+            for (int i = 1; i < original.length; i++) {
+                final double[] shrinkedPoint = shrinkedSimplex[i].getPoint().copy();
+                for (int j = 0; j < shrinkedPoint.length; j++) {
+                    shrinkedPoint[j] = best.getPoint()[j] + delta * (shrinkedPoint[j] - best.getPoint()[j]);
                 }
+                shrinkedSimplex[i] = new RealPointValuePair(shrinkedPoint, original[0].getValue());
+            }
+            simplex = shrinkedSimplex;
+        }
+
+    }
+
+    throw new MaxIterationsExceededException(getMaxIterations());
 
 }
\ No newline at end of file
