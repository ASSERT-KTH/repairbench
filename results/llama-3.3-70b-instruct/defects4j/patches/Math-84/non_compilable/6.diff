diff --git a/tmp/27cd4772-9f9c-4637-8d16-10dd9650ec0b_buggy.java b/tmp/8a319184-5a85-4b16-a9ad-695c15ba8139_fixed.java
index 5f1dcf2..98c56ef 100644
--- a/tmp/27cd4772-9f9c-4637-8d16-10dd9650ec0b_buggy.java
+++ b/tmp/8a319184-5a85-4b16-a9ad-695c15ba8139_fixed.java
@@ -1,41 +1,88 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = acceptExpandedSimplex(expanded, original, comparator);
             }
 
+            // check convergence
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = acceptContractedSimplex(contracted, original, comparator);
+        } else {
+            // perform a shrink step
+            simplex = shrinkSimplex(original, comparator);
+        }
 
         // check convergence
         return;
+
+    }
+
+    throw new MaxIterationsExceededException(getMaxIterations());
+
+}
+
+private RealPointValuePair[] acceptExpandedSimplex(RealPointValuePair expanded, 
+    RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {
+    // Replace the worst point in the simplex with the expanded point
+    RealPointValuePair[] newSimplex = original.clone();
+    newSimplex[getWorstIndex(original, comparator)] = expanded;
+    return newSimplex;
 }
 
+private RealPointValuePair[] acceptContractedSimplex(RealPointValuePair contracted, 
+    RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {
+    // Replace the worst point in the simplex with the contracted point
+    RealPointValuePair[] newSimplex = original.clone();
+    newSimplex[getWorstIndex(original, comparator)] = contracted;
+    return newSimplex;
 }
 
+private RealPointValuePair[] shrinkSimplex(RealPointValuePair[] original, 
+    Comparator<RealPointValuePair> comparator) {
+    // Replace all points in the simplex except the best one with new points
+    RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];
+    newSimplex[0] = original[0];
+    for (int i = 1; i < original.length; i++) {
+        newSimplex[i] = evaluateNewSimplex(original, rho, comparator);
+    }
+    return newSimplex;
+}
+
+private int getWorstIndex(RealPointValuePair[] simplex, Comparator<RealPointValuePair> comparator) {
+    int worstIndex = 0;
+    for (int i = 1; i < simplex.length; i++) {
+        if (comparator.compare(simplex[i], simplex[worstIndex]) > 0) {
+            worstIndex = i;
+        }
+    }
+    return worstIndex;
 }
\ No newline at end of file
