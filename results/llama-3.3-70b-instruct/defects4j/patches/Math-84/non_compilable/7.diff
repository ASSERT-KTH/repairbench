diff --git a/tmp/6d7052f9-2b11-4375-8d4e-59208e2bb0e6_buggy.java b/tmp/680a9dc7-cd24-44d4-aff2-a94b9fbfa423_fixed.java
index 5f1dcf2..dde6ed7 100644
--- a/tmp/6d7052f9-2b11-4375-8d4e-59208e2bb0e6_buggy.java
+++ b/tmp/680a9dc7-cd24-44d4-aff2-a94b9fbfa423_fixed.java
@@ -1,41 +1,47 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations() && getEvaluations() < getMaxEvaluations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                simplex = new RealPointValuePair[] { expanded };
             }
 
-                return;
-
-            }
+        } else {
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[] { contracted };
+            } else {
+                // shrink the simplex
+                for (int i = 1; i < original.length; i++) {
+                    final RealPointValuePair point = original[0].add(original[i].subtract(original[0]).scalarMultiply(sigma));
+                    simplex[i] = point;
+                }
+            }
 
-            // check convergence
-                return;
         }
 
     }
 
 }
\ No newline at end of file
