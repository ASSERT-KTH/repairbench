diff --git a/tmp/1798c3cf-4bfa-4bf2-9096-c658966ee676_buggy.java b/tmp/e7125ec3-193f-4337-8567-76cba7f55129_fixed.java
index 5abdeb5..37ef496 100644
--- a/tmp/1798c3cf-4bfa-4bf2-9096-c658966ee676_buggy.java
+++ b/tmp/e7125ec3-193f-4337-8567-76cba7f55129_fixed.java
@@ -1,29 +1,30 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
           // We make a special exception when the entire cfgNode is a chain
           // of assignments, since in that case the assignment statements
           // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+          // Check if the parent is an assignment and the node is its first child
+          // or if the parent is a conditional expression and the node is not its 
+          // condition.
+         !(parent.isAssign() && parent.getFirstChild() == n) &&
+         !(parent.isConditional() && parent.getFirstChild() == n)) {
             // Don't count lhs of top-level assignment chain
             numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
