diff --git a/tmp/13eb3131-84a4-4b68-871d-b0cfaa274242_buggy.java b/tmp/920f8f86-a5a5-4e72-809f-923157a67580_fixed.java
index 5abdeb5..f80050f 100644
--- a/tmp/13eb3131-84a4-4b68-871d-b0cfaa274242_buggy.java
+++ b/tmp/920f8f86-a5a5-4e72-809f-923157a67580_fixed.java
@@ -1,29 +1,27 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
           // We make a special exception when the entire cfgNode is a chain
           // of assignments, since in that case the assignment statements
           // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          // Check if the parent node is an assignment and the current node is not the first child.
+         !(parent.isAssign() && parent.getFirstChild().equals(n))) {
+            // Count all uses except when it's the left side of an assignment
             numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
