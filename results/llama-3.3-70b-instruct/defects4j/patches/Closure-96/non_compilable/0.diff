diff --git a/tmp/afc7295f-0557-4653-b330-a88fa7a1b62a_buggy.java b/tmp/6a661767-3018-4823-8f7f-70a81a96981f_fixed.java
index e0ecec8..9d8a3cf 100644
--- a/tmp/afc7295f-0557-4653-b330-a88fa7a1b62a_buggy.java
+++ b/tmp/6a661767-3018-4823-8f7f-70a81a96981f_fixed.java
@@ -1,35 +1,48 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
            parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
         parameter = parameters.next();
         argument = arguments.next();
         ordinal++;
 
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
+    // Check remaining arguments for var_args function
+    while (arguments.hasNext()) {
+        argument = arguments.next();
+        if (functionType.isVarArgs()) {
+            Node varArgsParam = functionType.getVarArgsParameter();
+            validator.expectArgumentMatchesParameter(t, argument,
+                getJSType(argument), getJSType(varArgsParam), call, ordinal);
+        } else {
+            validator.report(t, call, WRONG_ARGUMENT_COUNT,
+                validator.getReadableJSTypeName(call.getFirstChild(), false),
+                String.valueOf(ordinal), "should not be provided");
+        }
+        ordinal++;
+    }
+
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
         report(t, call, WRONG_ARGUMENT_COUNT,
                 validator.getReadableJSTypeName(call.getFirstChild(), false),
                 String.valueOf(numArgs), String.valueOf(minArgs),
                 maxArgs!= Integer.MAX_VALUE?
                 " and no more than " + maxArgs + " argument(s)" : "");
     }
 }
\ No newline at end of file
