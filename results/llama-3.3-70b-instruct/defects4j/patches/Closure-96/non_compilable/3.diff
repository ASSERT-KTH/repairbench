diff --git a/tmp/49321845-247f-45a8-b00f-9e303467a873_buggy.java b/tmp/141ca77d-d63e-4ea2-83ff-f901d113c11a_fixed.java
index e0ecec8..2f9201e 100644
--- a/tmp/49321845-247f-45a8-b00f-9e303467a873_buggy.java
+++ b/tmp/141ca77d-d63e-4ea2-83ff-f901d113c11a_fixed.java
@@ -1,35 +1,49 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call, 
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
   while (arguments.hasNext() && 
          parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
     parameter = parameters.next();
     argument = arguments.next();
     ordinal++;
 
     validator.expectArgumentMatchesParameter(t, argument, 
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
+  // If there are remaining arguments and the function has a var_args parameter,
+  // check that the var_args parameter matches the remaining arguments.
+  while (arguments.hasNext()) {
+    argument = arguments.next();
+    ordinal++;
+    parameter = functionType.getVarArgsParameter();
+    if (parameter!= null) {
+      validator.expectArgumentMatchesParameter(t, argument, 
+          getJSType(argument), getJSType(parameter), call, ordinal);
+    } else {
+      // If there's no var_args parameter, the arguments should be undefined
+      validator.expectArgumentMatchesParameter(t, argument, 
+          getJSType(argument), getJSTypeFromDeclaration(null), call, ordinal);
+    }
+  }
+
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs!= Integer.MAX_VALUE?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
