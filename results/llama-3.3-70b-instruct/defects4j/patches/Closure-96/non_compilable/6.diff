diff --git a/tmp/457b4f15-149b-4665-9d48-31221d5e777f_buggy.java b/tmp/2fb6aff8-70cb-4d21-904e-7a89b5f09d27_fixed.java
index e0ecec8..69ee2ff 100644
--- a/tmp/457b4f15-149b-4665-9d48-31221d5e777f_buggy.java
+++ b/tmp/2fb6aff8-70cb-4d21-904e-7a89b5f09d27_fixed.java
@@ -1,35 +1,44 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+  boolean isVarArgsFunction = functionType.isVarArgs();
+  while (arguments.hasNext()) {
     argument = arguments.next();
     ordinal++;
 
+    if (parameters.hasNext()) {
+      parameter = parameters.next();
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
+    } else if (!isVarArgsFunction) {
+      // If we're past the last parameter and the function is not varargs, we should report an error.
+      report(t, call, WRONG_ARGUMENT_COUNT,
+          validator.getReadableJSTypeName(call.getFirstChild(), false),
+          String.valueOf(call.getChildCount() - 1), 
+          String.valueOf(functionType.getMinArguments()), 
+          String.valueOf(functionType.getMaxArguments()));
+    } else {
+      // If we're past the last parameter and the function is varargs, we should check the type of the varargs parameter.
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), functionType.getVarArgsType(), call, ordinal);
+    }
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
-    int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+  if (minArgs > numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
         String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+        "");
   }
 }
\ No newline at end of file
