diff --git a/tmp/73e0dfe3-8af6-46e6-957d-6f1e4d1f9e76_buggy.java b/tmp/39d03679-3897-4419-a2a9-9bb3e1118a98_fixed.java
index b2db1d6..5f5663c 100644
--- a/tmp/73e0dfe3-8af6-46e6-957d-6f1e4d1f9e76_buggy.java
+++ b/tmp/39d03679-3897-4419-a2a9-9bb3e1118a98_fixed.java
@@ -1,29 +1,42 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am!= null) {
                 _addMixUnders(m, am);
                 /* Otherwise will have precedence, but must wait
                  * until we find the real method (mixIn methods are
                  * just placeholder, can't be called)
                  */
             } else {
                 // Well, or, as per [Issue#515], multi-level merge within mixins...
                 mixIns.add(_constructMethod(m));
+                // Also add methods from the superclass of the mixin class
+                Class<?> superClass = mixin.getSuperclass();
+                if (superClass!= null && superClass!= Object.class) {
+                    for (Method superMethod : superClass.getDeclaredMethods()) {
+                        if (!_isIncludableMemberMethod(superMethod)) {
+                            continue;
+                        }
+                        AnnotatedMethod superAm = methods.find(superMethod);
+                        if (superAm == null) {
+                            mixIns.add(_constructMethod(superMethod));
+                        }
+                    }
+                }
             }
         }
     }
 }
\ No newline at end of file
