diff --git a/tmp/7ed1419c-f1da-4c82-9634-476424debd94_buggy.java b/tmp/87f0e04a-baea-4a60-a1c9-afafe08dfd33_fixed.java
index b2db1d6..7b84536 100644
--- a/tmp/7ed1419c-f1da-4c82-9634-476424debd94_buggy.java
+++ b/tmp/87f0e04a-baea-4a60-a1c9-afafe08dfd33_fixed.java
@@ -1,29 +1,53 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am!= null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Check if a method with the same name and parameters already exists in mixIns
+                // This is the fix for the issue
+                AnnotatedMethod existingMethod = _findMethodByNameAndParams(mixIns, m);
+                if (existingMethod!= null) {
+                    // If a method with the same name and parameters already exists, merge them
+                    // As per [Issue#515], multi-level merge within mixins...
+                    _mergeMethodAnnotations(existingMethod, m);
+                } else {
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+}
+
+// Additional helper method to find a method by name and parameters
+private AnnotatedMethod _findMethodByNameAndParams(AnnotatedMethodMap methods, Method targetMethod) {
+    for (AnnotatedMethod method : methods) {
+        if (method.getName().equals(targetMethod.getName()) 
+            && Arrays.equals(method.getParameterTypes(), targetMethod.getParameterTypes())) {
+            return method;
+        }
+    }
+    return null;
+}
+
+// Additional helper method to merge method annotations
+private void _mergeMethodAnnotations(AnnotatedMethod existingMethod, Method newMethod) {
+    // Merge annotations, this can be implemented based on the actual annotation merging logic
+    // For simplicity, let's assume we just copy the annotations from the new method
+    for (Annotation annotation : newMethod.getAnnotations()) {
+        existingMethod.addOrOverrideAnnotation(annotation);
+    }
+}
\ No newline at end of file
