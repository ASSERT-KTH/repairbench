diff --git a/tmp/e36dc251-6c30-4ba9-83e4-ed737d9e76d9_buggy.java b/tmp/e7ba4d61-8bca-4cc3-8814-9d209a118eb9_fixed.java
index d6a560a..ad5e2e3 100644
--- a/tmp/e36dc251-6c30-4ba9-83e4-ed737d9e76d9_buggy.java
+++ b/tmp/e7ba4d61-8bca-4cc3-8814-9d209a118eb9_fixed.java
@@ -1,33 +1,33 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for implicit prototype cycle before attempting to resolve
+    if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+    }
+
+    // Resolve via registry first to avoid triggering warnings
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration()? getReferencedType() : this;
     }
 
+    // Resolve via properties if not resolved via registry
     resolveViaProperties(t, enclosing);
+
+    // Check for implicit prototype cycle again after resolving via properties
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration()? getReferencedType() : this;
 }
\ No newline at end of file
