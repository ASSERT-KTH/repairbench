diff --git a/tmp/435bd1b0-066a-40c9-8c38-f8df718fd7c2_buggy.java b/tmp/5cc2cb4f-b21b-44b8-961d-71d7a0be9124_fixed.java
index d6a560a..62fb9bc 100644
--- a/tmp/435bd1b0-066a-40c9-8c38-f8df718fd7c2_buggy.java
+++ b/tmp/5cc2cb4f-b21b-44b8-961d-71d7a0be9124_fixed.java
@@ -1,33 +1,34 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for cyclic dependencies before attempting to resolve
+    if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+        return this; // Return early if a cycle is detected
+    }
+
+    // Attempt to resolve via registry first
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration()? getReferencedType() : this;
     }
 
+    // If resolution via registry fails, attempt to resolve via properties
     resolveViaProperties(t, enclosing);
+
+    // Check again for cyclic dependencies after attempting to resolve
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this; // Return early if a cycle is detected
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration()? getReferencedType() : this;
 }
\ No newline at end of file
