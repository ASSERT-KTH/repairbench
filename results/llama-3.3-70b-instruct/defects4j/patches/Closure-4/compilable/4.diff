diff --git a/tmp/2363d895-e98b-43ec-bdfe-7e797c55388d_buggy.java b/tmp/56749cd7-450b-4634-ad16-4d8250d61523_fixed.java
index d6a560a..f6076a1 100644
--- a/tmp/2363d895-e98b-43ec-bdfe-7e797c55388d_buggy.java
+++ b/tmp/56749cd7-450b-4634-ad16-4d8250d61523_fixed.java
@@ -1,33 +1,32 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for implicit prototype cycle before resolving the type
+    if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+        return this; // Return immediately if a cycle is detected
+    }
+
+    // Try to resolve via registry first
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration()? getReferencedType() : this;
     }
 
+    // If not resolved via registry, try to resolve via properties
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
+    // Resolve the type internally
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration()? getReferencedType() : this;
 }
\ No newline at end of file
