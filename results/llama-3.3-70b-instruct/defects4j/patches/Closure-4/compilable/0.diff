diff --git a/tmp/3ab70737-4654-46b5-8e2f-e3b6920ebe65_buggy.java b/tmp/3850e959-550a-48c6-83ca-737f652027b5_fixed.java
index d6a560a..785cebc 100644
--- a/tmp/3ab70737-4654-46b5-8e2f-e3b6920ebe65_buggy.java
+++ b/tmp/3850e959-550a-48c6-83ca-737f652027b5_fixed.java
@@ -1,33 +1,30 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for cycles before attempting to resolve
+    if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration()?
             getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
     return registry.isLastGeneration()?
         getReferencedType() : this;
 }
\ No newline at end of file
