diff --git a/tmp/aea63695-7de3-442d-a90b-dc16d9949db9_buggy.java b/tmp/dbc23a71-e2ee-4660-bafc-c4c8f0c77012_fixed.java
index d6a560a..a09e088 100644
--- a/tmp/aea63695-7de3-442d-a90b-dc16d9949db9_buggy.java
+++ b/tmp/dbc23a71-e2ee-4660-bafc-c4c8f0c77012_fixed.java
@@ -1,33 +1,39 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
   // TODO(user): Investigate whether it is really necessary to keep two
   // different mechanisms for resolving named types, and if so, which order
   // makes more sense. Now, resolution via registry is first in order to
   // avoid triggering the warnings built into the resolution via properties.
   boolean resolved = resolveViaRegistry(t, enclosing);
+  if (resolved) {
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
-
-    if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration()?
         getReferencedType() : this;
   }
 
-    resolveViaProperties(t, enclosing);
+  resolved = resolveViaProperties(t, enclosing);
+  if (resolved) {
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
-
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration()?
         getReferencedType() : this;
   }
+
+  // If we reach this point, there is a potential cycle and we should handle it.
+  if (detectImplicitPrototypeCycle()) {
+    handleTypeCycle(t);
+  }
+  return this;
+}
\ No newline at end of file
