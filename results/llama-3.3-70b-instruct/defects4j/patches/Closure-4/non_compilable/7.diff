diff --git a/tmp/4550ea83-9227-4ade-b8be-101c73006204_buggy.java b/tmp/bc903b3e-64a4-463c-87b7-971b3c9c3411_fixed.java
index d6a560a..f5e134d 100644
--- a/tmp/4550ea83-9227-4ade-b8be-101c73006204_buggy.java
+++ b/tmp/bc903b3e-64a4-463c-87b7-971b3c9c3411_fixed.java
@@ -1,33 +1,42 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+    // Resolve via registry first to avoid triggering warnings
+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
-    if (resolved) {
+    if (resolvedViaRegistry) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration()?
           getReferencedType() : this;
     }
 
+    // Prevent infinite loop by checking if the type is already being resolved
+    if (enclosing.isBeingResolved(this)) {
+      // Handle cycle detection
+      handleTypeCycle(t);
+      return this;
+    }
+
+    enclosing.markAsBeingResolved(this);
+    try {
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
 
       super.resolveInternal(t, enclosing);
       if (isResolved()) {
         finishPropertyContinuations();
       }
       return registry.isLastGeneration()?
           getReferencedType() : this;
+    } finally {
+      enclosing.markAsResolved(this);
+    }
 }
\ No newline at end of file
