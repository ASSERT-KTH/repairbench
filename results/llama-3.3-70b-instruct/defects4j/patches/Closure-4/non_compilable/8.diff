diff --git a/tmp/738fab52-733b-43da-b984-617657181276_buggy.java b/tmp/d2050ce5-7d4e-45a1-9233-b0afdb2d7f23_fixed.java
index d6a560a..98e7920 100644
--- a/tmp/738fab52-733b-43da-b984-617657181276_buggy.java
+++ b/tmp/d2050ce5-7d4e-45a1-9233-b0afdb2d7f23_fixed.java
@@ -1,33 +1,32 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
+    
+    // Fix to prevent infinite recursion
+    setResolved(resolved);
 
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration()?
             getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
+    
+    // Fix to prevent infinite recursion
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
     return registry.isLastGeneration()?
         getReferencedType() : this;
 }
\ No newline at end of file
