diff --git a/tmp/21cd1f57-b57e-4ba8-81d5-b6b1a5e6ba58_buggy.java b/tmp/a8020037-d108-4f53-8f89-11a56cb2659a_fixed.java
index cc69d41..f43bda5 100644
--- a/tmp/21cd1f57-b57e-4ba8-81d5-b6b1a5e6ba58_buggy.java
+++ b/tmp/a8020037-d108-4f53-8f89-11a56cb2659a_fixed.java
@@ -1,29 +1,30 @@
 /**
  * Create an Option using the current settings and with
  * the specified Option <code>char</code>.
  *
-     * @param opt the <code>java.lang.String</code> representation
+ * @param opt the <code>char</code> representation
  * of the Option
  * @return the Option instance
  * @throws IllegalArgumentException if <code>opt</code> is not
  * a valid character.  See Option.
  */
-    public static Option create(String opt) throws IllegalArgumentException
+public static Option create(char opt) throws IllegalArgumentException
 {
     // create the option
-        Option option = new Option(opt, description);
+    Option option = new Option(opt, OptionBuilder.getDescription());
 
     // set the option properties
-            option.setLongOpt(longopt);
-            option.setRequired(required);
-            option.setOptionalArg(optionalArg);
-            option.setArgs(numberOfArgs);
-            option.setType(type);
-            option.setValueSeparator(valuesep);
-            option.setArgName(argName);
+    option.setLongOpt(OptionBuilder.getLongOpt());
+    option.setRequired(OptionBuilder.isRequired());
+    option.setOptionalArg(OptionBuilder.isOptionalArg());
+    option.setArgs(OptionBuilder.getNumberOfArgs());
+    option.setType(OptionBuilder.getType());
+    option.setValueSeparator(OptionBuilder.getValueSeparator());
+    option.setArgName(OptionBuilder.getArgName());
+
     // reset the OptionBuilder properties
     OptionBuilder.reset();
 
     // return the Option instance
     return option;
 }
\ No newline at end of file
