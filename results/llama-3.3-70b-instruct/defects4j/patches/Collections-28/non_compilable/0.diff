diff --git a/tmp/0c4af244-6f3b-448f-9f27-390c6329276d_buggy.java b/tmp/2d40b4f7-0154-4fec-b030-dc2541550549_fixed.java
index e69de29..365ce90 100644
--- a/tmp/0c4af244-6f3b-448f-9f27-390c6329276d_buggy.java
+++ b/tmp/2d40b4f7-0154-4fec-b030-dc2541550549_fixed.java
@@ -0,0 +1,56 @@
+@Override
+public SortedMap<K, V> prefixMap(K prefix) {
+    if (prefix == null) {
+        throw new NullPointerException("Prefix cannot be null");
+    }
+
+    // Create a tree map to store the prefix map
+    SortedMap<K, V> prefixMap = new TreeMap<>();
+
+    // Recursively traverse the trie and add entries to the prefix map
+    traverse(this.root, prefix, prefixMap);
+
+    return prefixMap;
+}
+
+// Helper method to recursively traverse the trie
+private void traverse(Node<K, V> node, K prefix, SortedMap<K, V> prefixMap) {
+    if (node == null) {
+        return;
+    }
+
+    // If the node's key starts with the prefix, add it to the prefix map
+    if (node.getKey()!= null && node.getKey().startsWith((String) prefix)) {
+        prefixMap.put(node.getKey(), node.getValue());
+    }
+
+    // Recursively traverse the child nodes
+    for (Node<K, V> child : node.getChildren()) {
+        traverse(child, prefix, prefixMap);
+    }
+}
+
+// Node class representing a node in the trie
+private class Node<K, V> {
+    private K key;
+    private V value;
+    private List<Node<K, V>> children;
+
+    public Node(K key, V value) {
+        this.key = key;
+        this.value = value;
+        this.children = new ArrayList<>();
+    }
+
+    public K getKey() {
+        return key;
+    }
+
+    public V getValue() {
+        return value;
+    }
+
+    public List<Node<K, V>> getChildren() {
+        return children;
+    }
+}
\ No newline at end of file
