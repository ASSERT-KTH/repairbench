diff --git a/tmp/fa433b98-1bd6-432a-b7f0-ac27a5c1deb3_buggy.java b/tmp/deaeee33-6ce3-4dbb-b074-abad832b5e08_fixed.java
index addeb8d..5947610 100644
--- a/tmp/fa433b98-1bd6-432a-b7f0-ac27a5c1deb3_buggy.java
+++ b/tmp/deaeee33-6ce3-4dbb-b074-abad832b5e08_fixed.java
@@ -1,38 +1,31 @@
 /**
  * Searches the string builder to find the first reference to the specified
  * string starting searching from the given index.
  * <p>
  * Note that a null input string will return -1, whereas the JDK throws an exception.
  * 
  * @param str  the string to find, null returns -1
  * @param startIndex  the index to start at, invalid index rounded to edge
  * @return the first index of the string, or -1 if not found
  */
 public int indexOf(String str, int startIndex) {
-        startIndex = (startIndex < 0 ? 0 : startIndex);
-        if (str == null || startIndex >= size) {
-            return -1;
-        }
-        int strLen = str.length();
-        if (strLen == 1) {
-            return indexOf(str.charAt(0), startIndex);
-        }
-        if (strLen == 0) {
+    startIndex = (startIndex < 0? 0 : (startIndex > size? size : startIndex));
+    if (str == null || str.length() == 0) {
         return startIndex;
     }
-        if (strLen > size) {
+    if (startIndex >= size || str.length() > size) {
         return -1;
     }
     char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+    int len = size - str.length();
     outer:
-        for (int i = startIndex; i < len; i++) {
-            for (int j = 0; j < strLen; j++) {
-                if (str.charAt(j) != thisBuf[i + j]) {
+    for (int i = startIndex; i <= len; i++) {
+        for (int j = 0; j < str.length(); j++) {
+            if (str.charAt(j)!= buffer[i + j]) {
                 continue outer;
             }
         }
         return i;
     }
     return -1;
 }
\ No newline at end of file
