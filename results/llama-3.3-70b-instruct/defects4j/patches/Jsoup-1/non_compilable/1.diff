diff --git a/tmp/3d262615-a653-49b2-b15a-4934e22b7522_buggy.java b/tmp/edbc205a-0f5f-4c08-9851-f9c3e00fe64d_fixed.java
index 00914da..0765524 100644
--- a/tmp/3d262615-a653-49b2-b15a-4934e22b7522_buggy.java
+++ b/tmp/edbc205a-0f5f-4c08-9851-f9c3e00fe64d_fixed.java
@@ -1,17 +1,29 @@
 // does not recurse.
 private void normalise(Element element) {
+    if (element.childNodes.size() == 0) return;
+    Node firstChild = element.childNodes.get(0);
     List<Node> toMove = new ArrayList<Node>();
     for (Node node: element.childNodes) {
         if (node instanceof TextNode) {
             TextNode tn = (TextNode) node;
-                if (!tn.isBlank())
+            if (!tn.isBlank() && node.equals(firstChild))
                 toMove.add(tn);
         }
     }
 
     for (Node node: toMove) {
         element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+        Element body = body();
+        if (body.childNodes.size() > 0) {
+            Node lastChild = body.childNodes.get(body.childNodes.size() - 1);
+            if (lastChild instanceof TextNode) {
+                ((TextNode) lastChild).setText(((TextNode) lastChild).getText() + ((TextNode) node).getText());
+            } else {
+                body.appendChild(new TextNode(" ", ""));
+                body.appendChild(node);
+            }
+        } else {
+            body.appendChild(node);
+        }
     }
 }
\ No newline at end of file
