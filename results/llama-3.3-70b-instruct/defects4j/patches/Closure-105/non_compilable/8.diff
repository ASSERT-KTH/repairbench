diff --git a/tmp/3495173f-3440-4845-b4e9-cc2f83e7c506_buggy.java b/tmp/ab7ac82e-8c70-4d43-b346-b6a783fe4b25_fixed.java
index ef65dd9..18eb0b8 100644
--- a/tmp/3495173f-3440-4845-b4e9-cc2f83e7c506_buggy.java
+++ b/tmp/ab7ac82e-8c70-4d43-b346-b6a783fe4b25_fixed.java
@@ -1,92 +1,111 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) ||!NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType()!= Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem!= null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType()!= Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
         // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
+        Node newJoinNode = arrayNode;
+        Node newJoinString = right;
+        List<Node> newChildren = new ArrayList<>();
         for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+          if (node.getType() == Token.STRING) {
+            String string = node.getString();
+            if (string.startsWith(",")) {
+              newJoinString = Node.newString(",");
+              newChildren.add(Node.newString(string.substring(1)));
+            } else if (string.endsWith(",")) {
+              newChildren.add(Node.newString(string.substring(0, string.length() - 1)));
+            } else {
+              newChildren.add(node);
             }
+          } else {
+            newChildren.add(node);
+          }
+        }
+        for (Node child : newChildren) {
+          arrayNode.addChildToBack(child);
+        }
+        parent.replaceChild(n, new Node(Token.CALL, arrayNode.cloneNode(), newJoinNode.getNext()));
         break;
     }
     t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
