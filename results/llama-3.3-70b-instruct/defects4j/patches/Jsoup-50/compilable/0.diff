diff --git a/tmp/36d2c534-cfe0-40a2-aafa-25a3a74a8af9_buggy.java b/tmp/70523bdc-1ed6-43c7-8635-921e0451556a_fixed.java
index 25ca093..f8eb028 100644
--- a/tmp/36d2c534-cfe0-40a2-aafa-25a3a74a8af9_buggy.java
+++ b/tmp/70523bdc-1ed6-43c7-8635-921e0451556a_fixed.java
@@ -1,52 +1,73 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    if (charsetName == null) {
+        // detect BOM and determine charset
+        byte[] bytes = new byte[4];
+        byteData.get(bytes, 0, 4);
+        byteData.rewind();
         
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
+        if (bytes[0] == (byte) 0xFE && bytes[1] == (byte) 0xFF) { // UTF-16BE
+            charsetName = "UTF-16BE";
+        } else if (bytes[0] == (byte) 0xFF && bytes[1] == (byte) 0xFE) { // UTF-16LE
+            charsetName = "UTF-16LE";
+        } else if (bytes[0] == (byte) 0x00 && bytes[1] == (byte) 0x00 && bytes[2] == (byte) 0xFE && bytes[3] == (byte) 0xFF) { // UTF-32BE
+            charsetName = "UTF-32BE";
+        } else if (bytes[0] == (byte) 0xFF && bytes[1] == (byte) 0xFE && bytes[2] == (byte) 0x00 && bytes[3] == (byte) 0x00) { // UTF-32LE
+            charsetName = "UTF-32LE";
+        } else if (bytes[0] == (byte) 0xEF && bytes[1] == (byte) 0xBB && bytes[2] == (byte) 0xBF) { // UTF-8
+            charsetName = "UTF-8";
+            byteData.position(3);
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+            doc = parser.parseInput(docData, baseUri);
+            return doc;
+        }
+
+        if (charsetName == null) { 
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta!= null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
                 if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
+        } else { 
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
+    } else {
+        Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+        doc = parser.parseInput(docData, baseUri);
+        doc.outputSettings().charset(charsetName);
+    }
     return doc;
 }
\ No newline at end of file
