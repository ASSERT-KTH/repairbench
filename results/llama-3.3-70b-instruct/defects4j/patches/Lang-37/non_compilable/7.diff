diff --git a/tmp/e4f4cd71-8ac5-4b18-b43e-787e540d9ae6_buggy.java b/tmp/efa89637-a6e4-4217-bf8f-57d40367b474_fixed.java
index d5b1b52..c86a870 100644
--- a/tmp/e4f4cd71-8ac5-4b18-b43e-787e540d9ae6_buggy.java
+++ b/tmp/efa89637-a6e4-4217-bf8f-57d40367b474_fixed.java
@@ -1,36 +1,81 @@
 /**
  * <p>Adds all the elements of the given arrays into a new array.</p>
  * <p>The new array contains all of the element of <code>array1</code> followed
  * by all of the elements <code>array2</code>. When an array is returned, it is always
  * a new array.</p>
  *
  * <pre>
  * ArrayUtils.addAll(null, null)     = null
  * ArrayUtils.addAll(array1, null)   = cloned copy of array1
  * ArrayUtils.addAll(null, array2)   = cloned copy of array2
  * ArrayUtils.addAll([], [])         = []
  * ArrayUtils.addAll([null], [null]) = [null, null]
  * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
  * </pre>
  *
  * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
  * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
  * @return The new array, <code>null</code> if both arrays are <code>null</code>.
  *      The type of the new array is the type of the first array,
  *      unless the first array is null, in which case the type is the same as the second array.
  * @since 2.1
  */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
     if (array1 == null) {
         return clone(array2);
     } else if (array2 == null) {
         return clone(array1);
     }
-        final Class<?> type1 = array1.getClass().getComponentType();
+    // Check if array1's component type is a superclass of array2's component type
+    Class<?> type1 = array1.getClass().getComponentType();
+    Class<?> type2 = array2.getClass().getComponentType();
+    if (!type1.isAssignableFrom(type2) &&!type2.isAssignableFrom(type1)) {
+        // Try to find a common superclass
+        Class<?> commonType = findCommonSuperclass(type1, type2);
+        if (commonType == null) {
+            throw new IllegalArgumentException("Incompatible types: " + type1 + " and " + type2);
+        }
+        // Create a new array with the common superclass type
+        @SuppressWarnings("unchecked")
+        T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);
+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        return joinedArray;
+    } else {
+        // If array1's component type is a superclass of array2's component type, use array1's type
+        if (type1.isAssignableFrom(type2)) {
+            @SuppressWarnings("unchecked")
             T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
             System.arraycopy(array1, 0, joinedArray, 0, array1.length);
             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
             return joinedArray;
+        } else {
+            // If array2's component type is a superclass of array1's component type, use array2's type
+            @SuppressWarnings("unchecked")
+            T[] joinedArray = (T[]) Array.newInstance(type2, array1.length + array2.length);
+            System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+            return joinedArray;
+        }
+    }
+}
+
+// Helper method to find the common superclass of two classes
+private static Class<?> findCommonSuperclass(Class<?> type1, Class<?> type2) {
+    while (type1!= null &&!type1.isAssignableFrom(type2)) {
+        type1 = type1.getSuperclass();
+    }
+    return type1;
+}
+
+// Helper method to clone an array
+private static <T> T[] clone(T[] array) {
+    if (array == null) {
+        return null;
+    }
+    @SuppressWarnings("unchecked")
+    T[] clone = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length);
+    System.arraycopy(array, 0, clone, 0, array.length);
+    return clone;
 }
\ No newline at end of file
