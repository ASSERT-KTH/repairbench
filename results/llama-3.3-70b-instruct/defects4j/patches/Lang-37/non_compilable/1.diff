diff --git a/tmp/601765dc-751f-4df4-94c7-52e28fc3194d_buggy.java b/tmp/8614cad7-57a5-4680-9e62-204d7d18fe86_fixed.java
index d5b1b52..2480de1 100644
--- a/tmp/601765dc-751f-4df4-94c7-52e28fc3194d_buggy.java
+++ b/tmp/8614cad7-57a5-4680-9e62-204d7d18fe86_fixed.java
@@ -1,36 +1,72 @@
 /**
  * <p>Adds all the elements of the given arrays into a new array.</p>
  * <p>The new array contains all of the element of <code>array1</code> followed
  * by all of the elements <code>array2</code>. When an array is returned, it is always
  * a new array.</p>
  *
  * <pre>
  * ArrayUtils.addAll(null, null)     = null
  * ArrayUtils.addAll(array1, null)   = cloned copy of array1
  * ArrayUtils.addAll(null, array2)   = cloned copy of array2
  * ArrayUtils.addAll([], [])         = []
  * ArrayUtils.addAll([null], [null]) = [null, null]
  * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
  * </pre>
  *
  * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
  * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
  * @return The new array, <code>null</code> if both arrays are <code>null</code>.
  *      The type of the new array is the type of the first array,
  *      unless the first array is null, in which case the type is the same as the second array.
  * @since 2.1
  */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
     if (array1 == null) {
         return clone(array2);
     } else if (array2 == null) {
         return clone(array1);
     }
     final Class<?> type1 = array1.getClass().getComponentType();
+    final Class<?> type2 = array2.getClass().getComponentType();
+    if (!type1.isAssignableFrom(type2)) {
+        // If type2 is not a subclass of type1, create a new array with the most general type
+        final Class<?> commonSuperclass = getCommonSuperclass(type1, type2);
+        T[] joinedArray = (T[]) Array.newInstance(commonSuperclass, array1.length + array2.length);
+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        return joinedArray;
+    } else {
         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
         return joinedArray;
     }
+}
+
+// Helper method to find the most general common superclass
+private static Class<?> getCommonSuperclass(Class<?> type1, Class<?> type2) {
+    if (type1.isAssignableFrom(type2)) {
+        return type1;
+    } else if (type2.isAssignableFrom(type1)) {
+        return type2;
+    } else {
+        Class<?> superclass = type1.getSuperclass();
+        while (superclass!= null) {
+            if (superclass.isAssignableFrom(type2)) {
+                return superclass;
+            }
+            superclass = superclass.getSuperclass();
+        }
+        // If no common superclass is found, use Object.class
+        return Object.class;
+    }
+}
+
+// Helper method to clone an array
+private static <T> T[] clone(T[] array) {
+    if (array == null) {
+        return null;
+    }
+    return array.clone();
+}
\ No newline at end of file
