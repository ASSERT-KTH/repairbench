diff --git a/tmp/bdcfa2f8-afd6-40b8-94d5-41a24fa8900d_buggy.java b/tmp/7b293426-3b22-445f-b6c6-7a6be3f7ec3b_fixed.java
index 61ffdbf..702a2c2 100644
--- a/tmp/bdcfa2f8-afd6-40b8-94d5-41a24fa8900d_buggy.java
+++ b/tmp/7b293426-3b22-445f-b6c6-7a6be3f7ec3b_fixed.java
@@ -1,44 +1,47 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
         // The parameters object literal setters can not be removed.
         return;
     }
 
     Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
+    boolean modifyCallers = modifierRemovalEnabled && modifyCallSites
             && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
+        // Do not strip unreferenced args in simple mode.
+        return;
+    }
+
     // Strip unreferenced args off the end of the function declaration.
     Node lastArg;
     while ((lastArg = argList.getLastChild())!= null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
             argList.removeChild(lastArg);
             compiler.reportCodeChange();
         } else {
             break;
         }
     }
-    } else {
+
     callSiteOptimizer.optimize(fnScope, referenced);
 }
\ No newline at end of file
-  }
