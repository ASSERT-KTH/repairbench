diff --git a/tmp/540eaec9-efe0-4e94-b089-7872ff96ac5f_buggy.java b/tmp/84632594-3c22-4831-88a4-3ec534182d8f_fixed.java
index 5f8ac1a..9f084c4 100644
--- a/tmp/540eaec9-efe0-4e94-b089-7872ff96ac5f_buggy.java
+++ b/tmp/84632594-3c22-4831-88a4-3ec534182d8f_fixed.java
@@ -1,34 +1,45 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+
+    if (p1!= null && p1.equals(p2)) {
+        return 0;
+    }
+
+    if (p1 instanceof VariablePointer && p2 instanceof VariablePointer) {
+        return p1.getNode().getId().compareTo(p2.getNode().getId());
+    }
+
+    if (p1 instanceof VariablePointer || p2 instanceof VariablePointer) {
+        throw new JXPathException(
+                "Cannot compare pointers that do not belong to the same tree: '"
+                        + p1 + "' and '" + p2 + "'");
+    }
+
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
-
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
-        }
 
     if (depth1 == 1) {
         throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                         + p1 + "' and '" + p2 + "'");
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r!= 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
