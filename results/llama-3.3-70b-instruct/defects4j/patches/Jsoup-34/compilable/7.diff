diff --git a/tmp/e6fbbb9f-a4ea-496e-8a9d-7bc61f52f498_buggy.java b/tmp/69f93aca-ec2c-40f3-9ab4-abf0828f99c2_fixed.java
index 21f64c6..cc64cce 100644
--- a/tmp/e6fbbb9f-a4ea-496e-8a9d-7bc61f52f498_buggy.java
+++ b/tmp/69f93aca-ec2c-40f3-9ab4-abf0828f99c2_fixed.java
@@ -1,23 +1,22 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
+        if (startChar!= input[offset]) {
             while (++offset < length && startChar!= input[offset]);
+            if (offset >= length) // out of bounds
+                break;
+        }
         int i = offset + 1;
         int last = i + seq.length() - 1;
+        if (last >= length) // avoid out of bounds access
+            break;
         if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            for (int j = 1; i <= last && seq.charAt(j) == input[i]; i++, j++);
+            if (i == last + 1) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
