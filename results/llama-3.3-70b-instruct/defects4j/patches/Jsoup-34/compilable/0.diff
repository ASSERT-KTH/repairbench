diff --git a/tmp/f32d83f2-5045-4a5a-b0c0-0011760890fa_buggy.java b/tmp/778c2962-494c-436c-a1ac-8484925e7e35_fixed.java
index 21f64c6..b9a728e 100644
--- a/tmp/f32d83f2-5045-4a5a-b0c0-0011760890fa_buggy.java
+++ b/tmp/778c2962-494c-436c-a1ac-8484925e7e35_fixed.java
@@ -1,23 +1,28 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        if (startChar!= input[offset]) {
+            while (++offset < length && startChar!= input[offset]) {
+                // Intentionally left blank
+            }
+        }
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        if (offset < length && last <= length) {
+            for (int j = 1; i <= last && i < length && seq.charAt(j) == input[i]; i++, j++) {
+                // Intentionally left blank
+            }
+            if (i == last + 1) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
