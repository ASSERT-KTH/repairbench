diff --git a/tmp/216cfab2-0712-4f21-9b93-48126ba7c631_buggy.java b/tmp/c98d5d30-8c4b-4210-a52f-a6fc9d20a7ac_fixed.java
index 21f64c6..b89e0e3 100644
--- a/tmp/216cfab2-0712-4f21-9b93-48126ba7c631_buggy.java
+++ b/tmp/c98d5d30-8c4b-4210-a52f-a6fc9d20a7ac_fixed.java
@@ -1,23 +1,24 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    // handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
+        if (startChar!= input[offset]) {
             while (++offset < length && startChar!= input[offset]);
+            if (offset >= length) break; // prevent ArrayIndexOutOfBoundsException
+        }
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        if (last > length) break; // prevent ArrayIndexOutOfBoundsException
+        for (int j = 1; i <= last && seq.charAt(j) == input[i]; i++, j++) { }
+        if (i == last + 1) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
