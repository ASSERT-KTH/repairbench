diff --git a/tmp/4e20ba87-9463-4d88-8c55-4a2814c90fde_buggy.java b/tmp/5cd81e78-22e2-4e73-b1f8-a8128e1c5c8f_fixed.java
index 111ba5e..e73cc73 100644
--- a/tmp/4e20ba87-9463-4d88-8c55-4a2814c90fde_buggy.java
+++ b/tmp/5cd81e78-22e2-4e73-b1f8-a8128e1c5c8f_fixed.java
@@ -1,9 +1,45 @@
 public static boolean areEqual(Object o1, Object o2) {
     if (o1 == null || o2 == null) {
         return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+    } else if (o1.getClass().isArray() &&!o1.getClass().getComponentType().isPrimitive()) {
+        return o2.getClass().isArray() && o1.getClass().getComponentType().equals(o2.getClass().getComponentType()) && areArraysEqual(o1, o2);
+    } else if (o1.getClass().isArray() && o1.getClass().getComponentType().isPrimitive()) {
+        return o2.getClass().isArray() && o1.getClass().equals(o2.getClass()) && arePrimitiveArraysEqual(o1, o2);
     } else {
+        try {
             return o1.equals(o2);
+        } catch (RuntimeException e) {
+            return false;
         }
     }
+}
+
+private static boolean areArraysEqual(Object o1, Object o2) {
+    Object[] arr1 = (Object[]) o1;
+    Object[] arr2 = (Object[]) o2;
+    if (arr1.length!= arr2.length) {
+        return false;
+    }
+    for (int i = 0; i < arr1.length; i++) {
+        if (!areEqual(arr1[i], arr2[i])) {
+            return false;
+        }
+    }
+    return true;
+}
+
+private static boolean arePrimitiveArraysEqual(Object o1, Object o2) {
+    int length1 = Array.getLength(o1);
+    int length2 = Array.getLength(o2);
+    if (length1!= length2) {
+        return false;
+    }
+    for (int i = 0; i < length1; i++) {
+        Object element1 = Array.get(o1, i);
+        Object element2 = Array.get(o2, i);
+        if (!areEqual(element1, element2)) {
+            return false;
+        }
+    }
+    return true;
+}
\ No newline at end of file
