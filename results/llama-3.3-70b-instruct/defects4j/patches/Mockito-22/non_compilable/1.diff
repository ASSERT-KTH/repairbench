diff --git a/tmp/efedbd47-6af9-492e-a5a1-fb965422f568_buggy.java b/tmp/c1ad6c58-6ee5-4e01-a925-8d52e5fa945c_fixed.java
index 111ba5e..f2f7d33 100644
--- a/tmp/efedbd47-6af9-492e-a5a1-fb965422f568_buggy.java
+++ b/tmp/c1ad6c58-6ee5-4e01-a925-8d52e5fa945c_fixed.java
@@ -1,9 +1,46 @@
 public static boolean areEqual(Object o1, Object o2) {
     if (o1 == null || o2 == null) {
         return o1 == null && o2 == null;
     } else if (isArray(o1)) {
         return isArray(o2) && areArraysEqual(o1, o2);
     } else {
         return o1.equals(o2);
     }
 }
+
+// Assuming areArraysEqual method is defined somewhere else, 
+// but we can include it here for completeness
+
+public static boolean areArraysEqual(Object o1, Object o2) {
+    if (o1.getClass().getComponentType().isPrimitive() && 
+       !o2.getClass().getComponentType().isPrimitive()) {
+        return arePrimitiveToWrapperArraysEqual(o1, o2);
+    } else if (!o1.getClass().getComponentType().isPrimitive() && 
+               o2.getClass().getComponentType().isPrimitive()) {
+        return arePrimitiveToWrapperArraysEqual(o2, o1);
+    }
+
+    int length1 = Array.getLength(o1);
+    int length2 = Array.getLength(o2);
+    if (length1!= length2) {
+        return false;
+    }
+    for (int i = 0; i < length1; i++) {
+        if (!areEqual(Array.get(o1, i), Array.get(o2, i))) {
+            return false;
+        }
+    }
+    return true;
+}
+
+public static boolean arePrimitiveToWrapperArraysEqual(Object primitiveArray, Object wrapperArray) {
+    if (Array.getLength(primitiveArray)!= Array.getLength(wrapperArray)) {
+        return false;
+    }
+    for (int i = 0; i < Array.getLength(primitiveArray); i++) {
+        if (!areEqual(Array.get(primitiveArray, i), Array.get(wrapperArray, i))) {
+            return false;
+        }
+    }
+    return true;
+}
\ No newline at end of file
