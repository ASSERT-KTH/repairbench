diff --git a/tmp/dbd27206-ed11-479e-9566-f265be1ca893_buggy.java b/tmp/91c82d21-6377-4e49-8c4a-b1d97360010a_fixed.java
index 111ba5e..8bd8aea 100644
--- a/tmp/dbd27206-ed11-479e-9566-f265be1ca893_buggy.java
+++ b/tmp/91c82d21-6377-4e49-8c4a-b1d97360010a_fixed.java
@@ -1,9 +1,47 @@
 public static boolean areEqual(Object o1, Object o2) {
     if (o1 == null || o2 == null) {
         return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+    } else if (o1 instanceof Object[] && o2 instanceof Object[]) {
+        return areArraysEqual((Object[]) o1, (Object[]) o2);
+    } else if (o1.getClass().isArray() && o2.getClass().isArray()) {
+        return arePrimitiveArraysEqual(o1, o2);
     } else {
         return o1.equals(o2);
     }
 }
+
+private static boolean areArraysEqual(Object[] o1, Object[] o2) {
+    if (o1.length!= o2.length) {
+        return false;
+    }
+    for (int i = 0; i < o1.length; i++) {
+        if (!areEqual(o1[i], o2[i])) {
+            return false;
+        }
+    }
+    return true;
+}
+
+private static boolean arePrimitiveArraysEqual(Object o1, Object o2) {
+    if (o1.getClass()!= o2.getClass()) {
+        return o1.equals(o2);
+    }
+    if (o1 instanceof byte[]) {
+        return Arrays.equals((byte[]) o1, (byte[]) o2);
+    } else if (o1 instanceof short[]) {
+        return Arrays.equals((short[]) o1, (short[]) o2);
+    } else if (o1 instanceof int[]) {
+        return Arrays.equals((int[]) o1, (int[]) o2);
+    } else if (o1 instanceof long[]) {
+        return Arrays.equals((long[]) o1, (long[]) o2);
+    } else if (o1 instanceof char[]) {
+        return Arrays.equals((char[]) o1, (char[]) o2);
+    } else if (o1 instanceof float[]) {
+        return Arrays.equals((float[]) o1, (float[]) o2);
+    } else if (o1 instanceof double[]) {
+        return Arrays.equals((double[]) o1, (double[]) o2);
+    } else if (o1 instanceof boolean[]) {
+        return Arrays.equals((boolean[]) o1, (boolean[]) o2);
+    }
+    return false;
+}
\ No newline at end of file
