diff --git a/tmp/e90e14e6-74fa-451f-b495-232fa73d46af_buggy.java b/tmp/9de1c8d3-bdff-40f9-a5c1-67a2b45041c4_fixed.java
index eea9e73..a8c52e2 100644
--- a/tmp/e90e14e6-74fa-451f-b495-232fa73d46af_buggy.java
+++ b/tmp/9de1c8d3-bdff-40f9-a5c1-67a2b45041c4_fixed.java
@@ -1,41 +1,56 @@
 /**
  * <p>Checks if the CharSequence contains any character in the given
  * set of characters.</p>
  *
  * <p>A <code>null</code> CharSequence will return <code>false</code>.
  * A <code>null</code> or zero length search array will return <code>false</code>.</p>
  *
  * <pre>
  * StringUtils.containsAny(null, *)                = false
  * StringUtils.containsAny("", *)                  = false
  * StringUtils.containsAny(*, null)                = false
  * StringUtils.containsAny(*, [])                  = false
  * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
  * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
  * StringUtils.containsAny("aba", ['z'])           = false
  * </pre>
  *
  * @param cs  the CharSequence to check, may be null
  * @param searchChars  the chars to search for, may be null
  * @return the <code>true</code> if any of the chars are found,
  * <code>false</code> if no match or null input
  * @since 2.4
  */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
     for (int i = 0; i < csLength; i++) {
         char ch = cs.charAt(i);
         for (int j = 0; j < searchLength; j++) {
             if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
                 return true;
             }
         }
+        // Check for supplementary characters
+        if (Character.isHighSurrogate(ch) && i + 1 < csLength) {
+            char lowSurrogate = cs.charAt(i + 1);
+            if (Character.isLowSurrogate(lowSurrogate)) {
+                for (int j = 0; j < searchLength; j++) {
+                    char highSurrogate = searchChars[j];
+                    if (Character.isHighSurrogate(highSurrogate)) {
+                        char searchLowSurrogate = Character.toCodePoint(highSurrogate, searchChars[j + 1]);
+                        char codePoint = Character.toCodePoint(ch, lowSurrogate);
+                        if (searchLowSurrogate == codePoint) {
+                            return true;
+                        }
+                    }
+                }
+                i++;
+            }
+        }
     }
     return false;
 }
\ No newline at end of file
