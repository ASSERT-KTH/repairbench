diff --git a/tmp/e2f539a0-64f4-4ffa-9e7a-79495d6137c1_buggy.java b/tmp/69805238-a918-4d40-b4c0-971c6cc45cb5_fixed.java
index 19fd63e..a80a548 100644
--- a/tmp/e2f539a0-64f4-4ffa-9e7a-79495d6137c1_buggy.java
+++ b/tmp/69805238-a918-4d40-b4c0-971c6cc45cb5_fixed.java
@@ -1,24 +1,23 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, but not an event handler method call.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+      // Check if the expression is a call to a method named 'onchange' 
+      // (or other event handlers) on a property, and avoid folding in that case
+      if (maybeExpr.getType() == Token.EXPR_RESULT 
+          && maybeExpr.getFirstChild().getType() == Token.GETPROP 
+          && (maybeExpr.getFirstChild().getSecondChild().getString().equals("onchange") 
+              || maybeExpr.getFirstChild().getSecondChild().getString().equals("onmouseover") 
+              || maybeExpr.getFirstChild().getSecondChild().getString().equals("onmouseout"))) {
+        return false;
+      }
       return NodeUtil.isExpressionNode(maybeExpr);
     }
   }
 
   return false;
 }
\ No newline at end of file
