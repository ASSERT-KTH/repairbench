diff --git a/tmp/ea6a2169-19aa-4545-a754-e8ebb2bd468c_buggy.java b/tmp/57ac3e29-95bd-4aaa-bdf1-75ef32ca26a8_fixed.java
index 19fd63e..ba1b7f3 100644
--- a/tmp/ea6a2169-19aa-4545-a754-e8ebb2bd468c_buggy.java
+++ b/tmp/57ac3e29-95bd-4aaa-bdf1-75ef32ca26a8_fixed.java
@@ -1,24 +1,16 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, but not an EXPR_RESULT node, to avoid triggering
+ *     the IE event handler bug.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+      // Check if the node is an EXPR_RESULT node
+      return maybeExpr.getType()!= Token.EXPR_RESULT && NodeUtil.isExpressionNode(maybeExpr);
     }
   }
 
   return false;
 }
\ No newline at end of file
