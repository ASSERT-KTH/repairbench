diff --git a/tmp/5bab5a51-761a-411b-a0cc-1570cadeac52_buggy.java b/tmp/b3f3b4ac-45c9-49f3-b677-4d9b62813898_fixed.java
index 19fd63e..1b6efab 100644
--- a/tmp/5bab5a51-761a-411b-a0cc-1570cadeac52_buggy.java
+++ b/tmp/b3f3b4ac-45c9-49f3-b677-4d9b62813898_fixed.java
@@ -1,24 +1,27 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, but not a function call with 'on' prefix.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
-      }
-    }
-
+      if (NodeUtil.isExpressionNode(maybeExpr)) {
+        if (maybeExpr.getType() == Token.CALL) {
+          Node callTarget = maybeExpr.getFirstChild();
+          if (callTarget.getType() == Token.GETPROP) {
+            Node propName = callTarget.getLastChild();
+            if (propName.getType() == Token.STRING) {
+              String propNameStr = propName.getString();
+              if (propNameStr.startsWith("on")) {
+                return false; // Avoid folding on* handlers
+              }
+            }
+          }
+        }
+        return true;
+      }
+    }
+  }
   return false;
 }
\ No newline at end of file
