diff --git a/tmp/791a1c67-7e80-472d-bb54-e9ef85e1bbd4_buggy.java b/tmp/35311da7-6f45-4eae-b69c-78c355356ecd_fixed.java
index 19fd63e..430dd64 100644
--- a/tmp/791a1c67-7e80-472d-bb54-e9ef85e1bbd4_buggy.java
+++ b/tmp/35311da7-6f45-4eae-b69c-78c355356ecd_fixed.java
@@ -1,24 +1,36 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression and is not an event handler (e.g. onchange, onclick).
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
       // IE has a bug where event handlers behave differently when
       // their return value is used vs. when their return value is in
       // an EXPR_RESULT. It's pretty freaking weird. See:
       // http://code.google.com/p/closure-compiler/issues/detail?id=291
       // We try to detect this case, and not fold EXPR_RESULTs
       // into other expressions.
 
       // We only have to worry about methods with an implicit 'this'
       // param, or this doesn't happen.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+      return NodeUtil.isExpressionNode(maybeExpr) &&!isEventHandler(maybeExpr);
     }
   }
 
   return false;
 }
+
+// Additional helper function to check if a node represents an event handler
+private boolean isEventHandler(Node node) {
+  if (node!= null && node.getType() == Token.CALL) {
+    Node func = node.getFirstChild();
+    if (func.getType() == Token.GETPROP) {
+      String propName = func.getString();
+      return propName!= null && propName.startsWith("on");
+    }
+  }
+  return false;
+}
\ No newline at end of file
