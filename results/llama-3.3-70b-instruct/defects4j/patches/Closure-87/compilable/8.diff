diff --git a/tmp/2de9eb78-0220-4464-bd9d-3b0fd2a52b6f_buggy.java b/tmp/23d59bbc-4f9d-482e-bca1-b5297d861afb_fixed.java
index 19fd63e..687a00c 100644
--- a/tmp/2de9eb78-0220-4464-bd9d-3b0fd2a52b6f_buggy.java
+++ b/tmp/23d59bbc-4f9d-482e-bca1-b5297d861afb_fixed.java
@@ -1,24 +1,25 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression and is not an event handler.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+      return NodeUtil.isExpressionNode(maybeExpr) &&!isEventHandlerCall(maybeExpr);
+    }
   }
+  return false;
 }
 
+// Helper function to check if the given node represents an event handler call
+private boolean isEventHandlerCall(Node n) {
+  if (n.getType() == Token.CALL) {
+    Node callee = n.getFirstChild();
+    if (callee.getType() == Token.GETPROP) {
+      Node prop = callee.getLastChild();
+      return prop.getString().equals("onchange") || prop.getString().equals("onfocus");
+    }
+  }
   return false;
 }
\ No newline at end of file
