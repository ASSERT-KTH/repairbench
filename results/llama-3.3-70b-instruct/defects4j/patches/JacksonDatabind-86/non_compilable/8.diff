diff --git a/tmp/cc9cfeb3-686c-4b9f-8393-2e32043b9d99_buggy.java b/tmp/252685f0-9073-4000-84c7-1a0f78a411ed_fixed.java
index e69de29..d13f630 100644
--- a/tmp/cc9cfeb3-686c-4b9f-8393-2e32043b9d99_buggy.java
+++ b/tmp/252685f0-9073-4000-84c7-1a0f78a411ed_fixed.java
@@ -0,0 +1,31 @@
+// The following code block fixes the issue with constructing recursive Java types.
+// The issue arises when the base type is constructed before the sub type, 
+// resulting in an incorrect ResolutionContext which fails to properly resolve 
+// the recursive type.
+
+@Override
+public JavaType constructType(Class<?> cls, TypeBindings bindings, TypeFactory tf) {
+    // Force construction of super class type if it's not yet constructed
+    JavaType superClass = super.constructType(cls.getSuperclass(), bindings, tf);
+    // Then resolve the type using the constructed super class type
+    return resolveRecursiveType(cls, bindings, tf, superClass);
+}
+
+// Helper method to resolve recursive type
+private JavaType resolveRecursiveType(Class<?> cls, TypeBindings bindings, TypeFactory tf, JavaType superClass) {
+    // If type is already resolved, return it
+    if (tf.isTypeHandled(cls)) {
+        return tf.constructType(cls, bindings);
+    }
+    
+    // Create a new resolution context
+    ResolutionContext context = new ResolutionContext(cls, bindings, tf);
+    
+    // Resolve the type
+    JavaType type = tf._constructType(cls, bindings, context);
+    
+    // Cache the type
+    tf.cacheType(cls, type);
+    
+    return type;
+}
\ No newline at end of file
