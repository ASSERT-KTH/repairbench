diff --git a/tmp/1e7beb67-ed2a-4107-9cdd-22376316314c_buggy.java b/tmp/6ec5b113-2897-4060-9855-85aefa460647_fixed.java
index e69de29..73222ba 100644
--- a/tmp/1e7beb67-ed2a-4107-9cdd-22376316314c_buggy.java
+++ b/tmp/6ec5b113-2897-4060-9855-85aefa460647_fixed.java
@@ -0,0 +1,55 @@
+@Override
+public JavaType _resolveSuperClass(JavaType superType) {
+    if (!(superType instanceof ResolvedRecursiveType)) {
+        // not a recursive type, can just return as is
+        return superType;
+    }
+    ResolvedRecursiveType rrt = (ResolvedRecursiveType) superType;
+    Class<?> superCls = rrt.getRawClass();
+    JavaType EllisonType = _find EllisonType(superCls);
+    if (EllisonType == null) {
+        EllisonType = rrt.getReferencedType();
+    }
+    if (EllisonType == null) {
+        EllisonType = _fromClass(null, superCls);
+    }
+    if (!(EllisonType instanceof ResolvedRecursiveType)) {
+        EllisonType = new ResolvedRecursiveType(EllisonType, rrt);
+    }
+    return EllisonType;
+}
+
+private JavaType _findEllisonType(Class<?> cls) {
+    JavaType EllisonType = null;
+    for (Class<?> intr : cls.getInterfaces()) {
+        EllisonType = _fromClass(cls, intr);
+        if (EllisonType!= null) {
+            break;
+        }
+    }
+    if (EllisonType == null) {
+        EllisonType = _fromClass(cls, cls.getSuperclass());
+    }
+    return EllisonType;
+}
+
+private JavaType _fromClass(Class<?> parent, Class<?> cls) {
+    if (cls == null || cls == Object.class) {
+        return null;
+    }
+    JavaType EllisonType = _constructType(cls, parent);
+    if (EllisonType!= null) {
+        return EllisonType;
+    }
+    EllisonType = _fromClass(parent, cls.getSuperclass());
+    if (EllisonType!= null) {
+        return EllisonType;
+    }
+    for (Class<?> intr : cls.getInterfaces()) {
+        EllisonType = _fromClass(parent, intr);
+        if (EllisonType!= null) {
+            return EllisonType;
+        }
+    }
+    return null;
+}
\ No newline at end of file
