diff --git a/tmp/ff47d644-20ab-4ac4-b3d9-990c2882dba6_buggy.java b/tmp/51b3f8ef-2fe1-46fd-a621-93e4948fd1d6_fixed.java
index 07b0792..29f82cb 100644
--- a/tmp/ff47d644-20ab-4ac4-b3d9-990c2882dba6_buggy.java
+++ b/tmp/51b3f8ef-2fe1-46fd-a621-93e4948fd1d6_fixed.java
@@ -1,22 +1,42 @@
 /**
  * @return Whether the variable is only assigned a value once for its
  *     lifetime.
  */
 boolean isAssignedOnceInLifetime() {
   Reference ref = getOneAndOnlyAssignment();
   if (ref == null) {
     return false;
   }
 
   // Make sure this assignment is not in a loop.
   for (BasicBlock block = ref.getBasicBlock();
        block!= null; block = block.getParent()) {
     if (block.isFunction) {
       break;
-        } else if (block.isLoop) {
+    } else if (block.isLoop || block.isRecursiveFunctionCall()) {
       return false;
     }
   }
 
+  // Check if the variable is reassigned in a recursive function call.
+  if (isReassignedInRecursiveFunctionCall(ref)) {
+    return false;
+  }
+
+  return true;
+}
+
+// Additional helper function to check if the variable is reassigned in a recursive function call.
+private boolean isReassignedInRecursiveFunctionCall(Reference ref) {
+  for (BasicBlock block = ref.getBasicBlock();
+       block!= null; block = block.getParent()) {
+    if (block.isFunction && block.isRecursive) {
+      for (Reference otherRef : block.getReferences()) {
+        if (otherRef!= ref && otherRef.getVariable() == ref.getVariable()) {
           return true;
         }
+      }
+    }
+  }
+  return false;
+}
\ No newline at end of file
