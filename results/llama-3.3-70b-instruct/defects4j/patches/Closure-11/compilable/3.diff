diff --git a/tmp/7ffeb79f-1f2b-42a8-b3f5-aee6bf5791a9_buggy.java b/tmp/4f3006b3-71ef-4e56-9c76-88915a93065d_fixed.java
index 57c40b2..370b1c7 100644
--- a/tmp/7ffeb79f-1f2b-42a8-b3f5-aee6bf5791a9_buggy.java
+++ b/tmp/4f3006b3-71ef-4e56-9c76-88915a93065d_fixed.java
@@ -1,27 +1,28 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
         report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType()!= null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+        // Check the type of the object only when assigning to it.
+        validator.expectNotNullOrUndefined(t, objNode, childType, "No properties on this expression", getNativeType(OBJECT_TYPE));
+        checkPropertyAccess(childType, property.getString(), t, n);
+    } else {
         checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
 }
\ No newline at end of file
