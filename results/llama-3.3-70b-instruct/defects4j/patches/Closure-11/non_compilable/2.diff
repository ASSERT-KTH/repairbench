diff --git a/tmp/09883591-1a39-46e9-b0e7-8ded4b9281ca_buggy.java b/tmp/3ebe1298-48b1-41c7-ba1e-1a71de162103_fixed.java
index 57c40b2..acc6f03 100644
--- a/tmp/09883591-1a39-46e9-b0e7-8ded4b9281ca_buggy.java
+++ b/tmp/3ebe1298-48b1-41c7-ba1e-1a71de162103_fixed.java
@@ -1,27 +1,38 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
         report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType()!= null && parent.isAssign()) {
         return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
+    } else {
+        if (validator.expectNotNullOrUndefined(t, n, childType,
                 "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+            // If we are trying to access a property on a null or undefined value,
+            // report the error after checking the property access.
             checkPropertyAccess(childType, property.getString(), t, n);
+            if (childType.isUnknownType() || childType.isPrimitiveType()) {
+                report(t, objNode, TypeValidator.INVALID_OPERATION,
+                        "Accessing a property on a '" + childType.toString() + "'");
+            }
+        } else {
+            report(t, objNode, TypeValidator.NO_PROPERTIES_ON_EXPRESSION,
+                    "No properties on this expression", childType.toString());
+        }
     }
     ensureTyped(t, n);
 }
\ No newline at end of file
