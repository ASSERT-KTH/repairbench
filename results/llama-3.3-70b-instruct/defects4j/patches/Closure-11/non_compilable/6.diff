diff --git a/tmp/413f610e-ca6f-47eb-b3fd-d99d1d3b2743_buggy.java b/tmp/12b0097e-d0b0-4a80-9985-4ea2b79989ec_fixed.java
index 57c40b2..43727e3 100644
--- a/tmp/413f610e-ca6f-47eb-b3fd-d99d1d3b2743_buggy.java
+++ b/tmp/12b0097e-d0b0-4a80-9985-4ea2b79989ec_fixed.java
@@ -1,27 +1,32 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
         report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType()!= null && parent.isAssign()) {
         return;
+    } else {
+        if (childType == null) {
+            report(t, objNode, TypeValidator.UNDEFINED_OR_NULL,
+                "null or undefined", "Object");
         } else if (validator.expectNotNullOrUndefined(t, n, childType,
             "No properties on this expression", getNativeType(OBJECT_TYPE))) {
             checkPropertyAccess(childType, property.getString(), t, n);
         }
         ensureTyped(t, n);
     }
+}
\ No newline at end of file
