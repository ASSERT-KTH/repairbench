diff --git a/tmp/58fd8e8f-628a-4093-aeb9-99dfc2e8c861_buggy.java b/tmp/20a73307-e61b-4cbc-a1d3-3795f3506da4_fixed.java
index c9da1b7..4464207 100644
--- a/tmp/58fd8e8f-628a-4093-aeb9-99dfc2e8c861_buggy.java
+++ b/tmp/20a73307-e61b-4cbc-a1d3-3795f3506da4_fixed.java
@@ -1,33 +1,26 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne!= null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
+        if ((_explicitCreators & mask)!= 0 &&!explicit) { // already had explicitly annotated, skip if new one not annotated
             return;
         }
         // both explicit: verify
         // otherwise only verify if neither explicitly annotated.
-            }
-
         // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
+        if (oldOne.getClass().equals(newOne.getClass())) {
             // [databind#667]: avoid one particular class of bogus problems
-
+            if (oldOne.getAnnotated().equals(newOne.getAnnotated())) {
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+            }
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
