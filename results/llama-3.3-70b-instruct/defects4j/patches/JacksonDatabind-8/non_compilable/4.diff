diff --git a/tmp/7649aecd-0e20-4077-ab60-55fcd98f2f4a_buggy.java b/tmp/94f6c0b0-671d-4a83-91ee-555d696cfa6f_fixed.java
index c9da1b7..88ef049 100644
--- a/tmp/7649aecd-0e20-4077-ab60-55fcd98f2f4a_buggy.java
+++ b/tmp/94f6c0b0-671d-4a83-91ee-555d696cfa6f_fixed.java
@@ -1,33 +1,53 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne!= null) {
 
         if ((_explicitCreators & mask)!= 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
         }
 
         // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
             // [databind#667]: avoid one particular class of bogus problems
-
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+            // override only if old one is not explicitly annotated
+            if ((oldOne.getAnnotation()!= null) &&!explicit) {
+                return;
+            }
             // otherwise, which one to choose?
             // new type more generic, use old
             // new type more specific, use it
         }
-        }
+        else {
+            // different classes, use new one if it is explicitly annotated
             if (explicit) {
+                _creators[typeIndex] = _fixAccess(newOne);
                 _explicitCreators |= mask;
+                return;
+            }
+            // old one explicitly annotated, keep it
+            if (oldOne.getAnnotation()!= null) {
+                return;
             }
+            // old one not explicitly annotated, use new one if it is more specific
+            if (newOne.getClass().isAssignableFrom(oldOne.getClass())) {
                 _creators[typeIndex] = _fixAccess(newOne);
             }
+        }
+    }
+    else {
+        // old one is null, use new one
+        _creators[typeIndex] = _fixAccess(newOne);
+    }
+    if (explicit) {
+        _explicitCreators |= mask;
+    }
+}
\ No newline at end of file
