diff --git a/tmp/24c88183-b465-42eb-9771-6b9a0bff0014_buggy.java b/tmp/2229b3fe-5dbb-40d8-8cf3-41ec1c7ee4d6_fixed.java
index b12de99..5cba42f 100644
--- a/tmp/24c88183-b465-42eb-9771-6b9a0bff0014_buggy.java
+++ b/tmp/2229b3fe-5dbb-40d8-8cf3-41ec1c7ee4d6_fixed.java
@@ -1,52 +1,77 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override 
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild()!= null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
     // The first-order function analyzer looks at two types of variables:
     //
     // 1) Local variables that are assigned in inner scopes ("escaped vars")
     //
     // 2) Local variables that are assigned more than once.
     //
     // We treat all global variables as escaped by default, so there's
     // no reason to do this extra computation for them.
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
       // Be careful of bleeding functions, which create variables
       // in the inner scope, not the scope where the name appears.
      !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var!= null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
 
       if (scope!= ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
   } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
       NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var!= null) {
       Scope ownerScope = var.getScope();
       if (scope!= ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode())
            .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
+  } else if (n.isCall()) {
+    Node callee = n.getFirstChild();
+    if (callee.isGetProp()) {
+      String functionName = callee.getLastChild().getString();
+      Node functionDeclaration = t.getScope().getVar(functionName).getNode();
+      if (functionDeclaration.isFunction()) {
+        Node callNode = n.getNext();
+        if (callNode!= null) {
+          for (int i = 0; i < callNode.getChildCount(); i++) {
+            Node argNode = callNode.getChildAtIndex(i);
+            Node formalParameter = functionDeclaration.getFirstChild().getNext().getChildAtIndex(i);
+            if (formalParameter!= null &&!n.getJSType().isSubtype(formalParameter.getJSType())) {
+              Node actualParameter = argNode.getJSType();
+              Node requiredParameter = formalParameter.getJSType();
+              String errorMessage = 
+                  "actual parameter " + (i + 1) + " of " + functionName + " does not match formal parameter\n" +
+                  "found   : " + actualParameter + "\n" +
+                  "required: " + requiredParameter;
+              t.report(errorMessage);
+            }
+          }
+        }
+      }
+    }
   }
 }
\ No newline at end of file
