diff --git a/tmp/fa0cf7ff-5ed0-486e-aae2-a1b03697ac42_buggy.java b/tmp/48f6af58-ae2a-44ce-ab29-13fde767380a_fixed.java
index 8dfbd84..67ec7f9 100644
--- a/tmp/fa0cf7ff-5ed0-486e-aae2-a1b03697ac42_buggy.java
+++ b/tmp/48f6af58-ae2a-44ce-ab29-13fde767380a_fixed.java
@@ -1,43 +1,38 @@
-    private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
-    {
+private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException {
     _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
     char[] outBuf = _textBuffer.getCurrentSegment();
     int outPtr = _textBuffer.getCurrentSegmentSize();
     final int maxCode = codes.length;
 
     while (true) {
         if (_inputPtr >= _inputEnd) {
             if (!_loadMore()) { // acceptable for now (will error out later)
                 break;
             }
         }
         char c = _inputBuffer[_inputPtr];
-            int i = (int) c;
-            if (i <= maxCode) {
-                if (codes[i] != 0) {
-                    break;
-                }
-            } else if (!Character.isJavaIdentifierPart(c)) {
-                break;
-            }
+        if (Character.isJavaIdentifierPart(c)) {
             ++_inputPtr;
-            hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
+            hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;
             // Ok, let's add char to output:
             outBuf[outPtr++] = c;
 
             // Need more room?
             if (outPtr >= outBuf.length) {
                 outBuf = _textBuffer.finishCurrentSegment();
                 outPtr = 0;
             }
+        } else {
+            break;
+        }
     }
     _textBuffer.setCurrentLength(outPtr);
     {
         TextBuffer tb = _textBuffer;
         char[] buf = tb.getTextBuffer();
         int start = tb.getTextOffset();
         int len = tb.size();
 
         return _symbols.findSymbol(buf, start, len, hash);
     }
 }
\ No newline at end of file
