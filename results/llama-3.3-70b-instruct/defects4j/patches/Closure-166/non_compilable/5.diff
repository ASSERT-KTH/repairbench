diff --git a/tmp/b5ea7754-5681-453d-b86b-69248eb6b177_buggy.java b/tmp/b8367c84-f99f-4f90-b1b5-8bbe255df54e_fixed.java
index 5f96616..524f4c3 100644
--- a/tmp/b5ea7754-5681-453d-b86b-69248eb6b177_buggy.java
+++ b/tmp/b8367c84-f99f-4f90-b1b5-8bbe255df54e_fixed.java
@@ -1,20 +1,15 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
-    if (hasReferenceName()) {
+  if (hasReferenceName() ||!constraint.isUnionType()) {
     return;
   }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+  // Handle the case where the constraint object is a union type that contains a record type.
+  JSType[] constituents = constraint.getUnionComponents();
+  for (JSType constituent : constituents) {
+    if (constituent.isRecordType()) {
+      matchRecordTypeConstraint(constituent.toObjectType());
+    }
   }
 }
\ No newline at end of file
