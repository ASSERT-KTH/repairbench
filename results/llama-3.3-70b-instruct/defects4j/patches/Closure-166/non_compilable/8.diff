diff --git a/tmp/d32625fd-e416-4962-ac83-77101022e413_buggy.java b/tmp/ceca0866-6ca6-452a-b422-2225d1f92fa6_fixed.java
index 5f96616..bdc58d3 100644
--- a/tmp/d32625fd-e416-4962-ac83-77101022e413_buggy.java
+++ b/tmp/ceca0866-6ca6-452a-b422-2225d1f92fa6_fixed.java
@@ -1,20 +1,22 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
+  // Handle the case where the constraint object is a union type.
+  if (constraint.isUnionType()) {
+    for (JSType subtype : constraint.getUnarySubtypes()) {
+      if (subtype.isRecordType()) {
+        matchRecordTypeConstraint(subtype.toObjectType());
+        return;
+      }
+    }
+  }
+
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
