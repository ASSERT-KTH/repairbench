diff --git a/tmp/83c8649b-b3dd-4ec3-8b43-00f6bca589a9_buggy.java b/tmp/c1da27e7-4f68-4905-abb1-d13b01b83e5d_fixed.java
index 5f96616..7c0e103 100644
--- a/tmp/83c8649b-b3dd-4ec3-8b43-00f6bca589a9_buggy.java
+++ b/tmp/c1da27e7-4f68-4905-abb1-d13b01b83e5d_fixed.java
@@ -1,20 +1,19 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
+    // Handle the case where the constraint object is a union type containing record types.
+    if (constraint.isUnionType()) {
+        for (JSType type : constraint.getUnionComponents()) {
+            if (type.isRecordType()) {
+                matchRecordTypeConstraint(type.toObjectType());
+            }
+        }
+    } else if (constraint.isRecordType()) {
         // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
