diff --git a/tmp/9b24251c-2c7a-431c-9775-a40463de7a04_buggy.java b/tmp/0373f9b7-bb28-4066-803a-ef08b3af301a_fixed.java
index 5f96616..9030fc2 100644
--- a/tmp/9b24251c-2c7a-431c-9775-a40463de7a04_buggy.java
+++ b/tmp/0373f9b7-bb28-4066-803a-ef08b3af301a_fixed.java
@@ -1,20 +1,21 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
+    // Handle the case where the constraint object is a union type.
+    if (constraint.isUnionType()) {
+        for (JSType subtype : constraint.getUnionTypes()) {
+            if (subtype.isRecordType()) {
+                matchRecordTypeConstraint(subtype.toObjectType());
+            }
+        }
+    } else {
         // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
         if (constraint.isRecordType()) {
             matchRecordTypeConstraint(constraint.toObjectType());
         }
     }
+}
\ No newline at end of file
