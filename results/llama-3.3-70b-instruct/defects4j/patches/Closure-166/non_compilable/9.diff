diff --git a/tmp/e2e85f47-bbeb-49ae-9f91-b7772c562e3b_buggy.java b/tmp/7f92b061-b826-40d8-9db8-f5969f89a3f1_fixed.java
index 5f96616..5e2be67 100644
--- a/tmp/e2e85f47-bbeb-49ae-9f91-b7772c562e3b_buggy.java
+++ b/tmp/7f92b061-b826-40d8-9db8-f5969f89a3f1_fixed.java
@@ -1,20 +1,13 @@
 @Override
 public void matchConstraint(JSType constraint) {
-    // We only want to match constraints on anonymous types.
-    if (hasReferenceName()) {
-      return;
+  // Handle the case where the constraint object is a union type with at least one record type.
+  if (constraint.isUnionType()) {
+    for (JSType unionType : constraint.getUnionTypes()) {
+      if (unionType.isRecordType()) {
+        matchRecordTypeConstraint(unionType.toObjectType());
       }
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    }
+  } else if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
