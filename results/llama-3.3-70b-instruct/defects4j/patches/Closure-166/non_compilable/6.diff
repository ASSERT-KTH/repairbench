diff --git a/tmp/1bc19a7f-cc25-49f3-b01b-54d77eb7ac0d_buggy.java b/tmp/77edb78d-5a54-4843-a747-32d905dbdeeb_fixed.java
index 5f96616..1beb6cb 100644
--- a/tmp/1bc19a7f-cc25-49f3-b01b-54d77eb7ac0d_buggy.java
+++ b/tmp/77edb78d-5a54-4843-a747-32d905dbdeeb_fixed.java
@@ -1,20 +1,42 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
+    // Handle the case where the constraint object is a union type.
+    // We want to try matching each type in the union.
+    if (constraint.isUnionType()) {
+        for (JSType type : constraint.toMaybeUnionType().getComponents()) {
+            matchConstraint(type);
+        }
+        return;
+    }
+
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
+
+private void matchRecordTypeConstraint(JSType constraint) {
+    ObjectType objectType = constraint.toObjectType();
+    for (String propName : objectType.getPropertyNames()) {
+        JSType propType = objectType.getPropertyType(propName);
+        // Try to match the property type
+        // If it's a union type, it's handled in the matchConstraint method
+        if (propType.isUnionType()) {
+            matchConstraint(propType);
+        } else {
+            // Add the property to this object type
+            addProperty(propName, propType);
+        }
+    }
+}
+
+private void addProperty(String propName, JSType propType) {
+    // Implementation to add a property to this object type
+    // This method is not provided in the original code snippet, 
+    // so you might need to adjust it according to your actual implementation
+}
\ No newline at end of file
