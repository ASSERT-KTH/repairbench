diff --git a/tmp/5472c46d-52bb-4391-88ac-42e2e592c8a3_buggy.java b/tmp/13fd1087-18a3-4524-b98c-8d11e456a5ae_fixed.java
index 602226b..9798c1a 100644
--- a/tmp/5472c46d-52bb-4391-88ac-42e2e592c8a3_buggy.java
+++ b/tmp/13fd1087-18a3-4524-b98c-8d11e456a5ae_fixed.java
@@ -1,26 +1,22 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+      }
     } else {
-          // TODO(robbyw): Support using locals for private variables.
+      // Report GOOG_SCOPE_NON_ALIAS_LOCAL for all cases
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
-    }
