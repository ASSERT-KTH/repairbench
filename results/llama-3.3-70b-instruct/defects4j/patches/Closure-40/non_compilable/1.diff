diff --git a/tmp/26199106-a9fe-44db-b834-116973771a95_buggy.java b/tmp/c07fe37b-8d6d-46cc-bad1-1688e6b937ec_fixed.java
index 670114d..462540b 100644
--- a/tmp/26199106-a9fe-44db-b834-116973771a95_buggy.java
+++ b/tmp/c07fe37b-8d6d-46cc-bad1-1688e6b937ec_fixed.java
@@ -1,48 +1,56 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
 
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns!= null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns!= null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
   if (n.isAssign()) {
     Node nameNode = n.getFirstChild();
 
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns!= null) {
       if (ns.isPrototype) {
         recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
       } else {
         recordSet(ns.name, nameNode);
       }
     }
   } else if (n.isCall()) {
     Node nameNode = n.getFirstChild();
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns!= null && ns.onlyAffectsClassDef) {
       JsName name = getName(ns.name, false);
       if (name!= null) {
+        // Fix: Modified the condition to check if the parent node is a member of the function's scope
+        Node currentNode = parent;
+        while (currentNode!= null) {
+          if (currentNode.isFunction() && currentNode.hasChildNodes()) {
             refNodes.add(new ClassDefiningFunctionNode(
-              name, n, parent, parent.getParent()));
+                name, n, currentNode, currentNode.getParent()));
+            break;
+          }
+          currentNode = currentNode.getParent();
+        }
       }
     }
   }
 }
\ No newline at end of file
