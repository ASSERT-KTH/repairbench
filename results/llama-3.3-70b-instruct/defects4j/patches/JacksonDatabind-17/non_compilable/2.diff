diff --git a/tmp/69486db6-890e-4475-8236-d854230e0475_buggy.java b/tmp/b77d1a1b-bdd5-48e9-a8a9-43952245344d_fixed.java
index 01967cc..f24130e 100644
--- a/tmp/69486db6-890e-4475-8236-d854230e0475_buggy.java
+++ b/tmp/b77d1a1b-bdd5-48e9-a8a9-43952245344d_fixed.java
@@ -1,35 +1,29 @@
 /**
  * Method called to check if the default type handler should be
  * used for given type.
  * Note: "natural types" (String, Boolean, Integer, Double) will never
  * use typing; that is both due to them being concrete and final,
  * and since actual serializers and deserializers will also ignore any
  * attempts to enforce typing.
  */
 public boolean useForType(JavaType t)
 {
     switch (_appliesFor) {
     case NON_CONCRETE_AND_ARRAYS:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
-                // fall through
+        return t.isJavaLangObject() ||!t.isConcrete() || TreeNode.class.isAssignableFrom(t.getRawClass());
     case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
-
+        return t.isJavaLangObject() ||!t.isConcrete() || TreeNode.class.isAssignableFrom(t.getRawClass());
     case NON_FINAL:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
-                // [Issue#88] Should not apply to JSON tree models:
         return!t.isFinal() &&!TreeNode.class.isAssignableFrom(t.getRawClass());
+    case JAVA_LANG_OBJECT:
+        return t.isJavaLangObject();
     default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
-                return (t.getRawClass() == Object.class);
+        throw new RuntimeException("Unhandled case");
     }
 }
\ No newline at end of file
