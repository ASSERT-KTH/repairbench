diff --git a/tmp/63de6291-e93e-4481-a0de-ab74ffb106cd_buggy.java b/tmp/45adc385-fe6a-4934-8b18-d021e74e4f80_fixed.java
index 4b163f6..9e41f95 100644
--- a/tmp/63de6291-e93e-4481-a0de-ab74ffb106cd_buggy.java
+++ b/tmp/45adc385-fe6a-4934-8b18-d021e74e4f80_fixed.java
@@ -1,28 +1,38 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
  * the requested number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long skipped = 0;
     while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        long delta = input.skip(numToSkip);
+        if (delta == 0) {
+            // use read() method to skip remaining bytes
+            byte[] buffer = new byte[1024];
+            while (numToSkip > 0) {
+                int bytesRead = input.read(buffer, 0, (int) Math.min(buffer.length, numToSkip));
+                if (bytesRead == -1) {
+                    break;
+                }
+                numToSkip -= bytesRead;
+                skipped += bytesRead;
+            }
             break;
         }
-            numToSkip -= skipped;
+        skipped += delta;
+        numToSkip -= delta;
     }
-            
-        return available - numToSkip;
+    return skipped;
 }
\ No newline at end of file
