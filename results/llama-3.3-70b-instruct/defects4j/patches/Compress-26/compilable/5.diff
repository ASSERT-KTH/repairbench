diff --git a/tmp/3236714a-bc72-480b-8add-855192fe5f54_buggy.java b/tmp/19789ab7-e7f8-4adc-8a9b-ec1ffa17acf3_fixed.java
index 4b163f6..02a9cae 100644
--- a/tmp/3236714a-bc72-480b-8add-855192fe5f54_buggy.java
+++ b/tmp/19789ab7-e7f8-4adc-8a9b-ec1ffa17acf3_fixed.java
@@ -1,28 +1,33 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
  * the requested number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+    long skipped = 0;
+    while (skipped < numToSkip) {
+        long delta = input.skip(numToSkip - skipped);
+        if (delta == 0) {
+            // Use the read() method as fallback
+            int b = input.read();
+            if (b == -1) {
+                // end of the input stream has been reached
                 break;
             }
-            numToSkip -= skipped;
+            delta = 1;
         }
-            
-        return available - numToSkip;
+        skipped += delta;
+    }
+    return skipped;
 }
\ No newline at end of file
