diff --git a/tmp/3aeb24e6-e576-4f24-9022-c3c05f2bacf8_buggy.java b/tmp/3174aa3d-2393-4104-ad46-30aeba6e9e98_fixed.java
index 4b163f6..8e76880 100644
--- a/tmp/3aeb24e6-e576-4f24-9022-c3c05f2bacf8_buggy.java
+++ b/tmp/3174aa3d-2393-4104-ad46-30aeba6e9e98_fixed.java
@@ -1,28 +1,35 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
  * the requested number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+    long remaining = numToSkip;
+    long skipped = 0;
+    while (remaining > 0) {
+        long delta = input.skip(remaining);
+        if (delta > 0) {
+            skipped += delta;
+            remaining -= delta;
+            continue;
+        }
+        int ch;
+        while (remaining > 0 && (ch = input.read())!= -1) {
+            skipped++;
+            remaining--;
+        }
         break;
     }
-            numToSkip -= skipped;
-        }
-            
-        return available - numToSkip;
+    return skipped;
 }
\ No newline at end of file
