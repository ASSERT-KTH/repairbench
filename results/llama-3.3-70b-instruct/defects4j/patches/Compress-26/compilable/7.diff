diff --git a/tmp/72c8ab65-7da5-42cd-9f29-0daf70230074_buggy.java b/tmp/7f64a462-b649-4888-a048-7515b3a27eb6_fixed.java
index 4b163f6..4b6b710 100644
--- a/tmp/72c8ab65-7da5-42cd-9f29-0daf70230074_buggy.java
+++ b/tmp/7f64a462-b649-4888-a048-7515b3a27eb6_fixed.java
@@ -1,28 +1,35 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
  * the requested number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long skipped = 0;
     while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        long result = input.skip(numToSkip);
+        if (result > 0) {
+            skipped += result;
+            numToSkip -= result;
+        } else {
+            // fallback to using read() method
+            int read = input.read();
+            if (read == -1) {
                 break;
             }
-            numToSkip -= skipped;
+            skipped++;
+            numToSkip--;
         }
-            
-        return available - numToSkip;
+    }
+    return skipped;
 }
\ No newline at end of file
