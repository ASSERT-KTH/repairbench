diff --git a/tmp/eba5c74e-7896-4da8-9881-50f255b89ff3_buggy.java b/tmp/f4386547-552a-4ece-9fb5-d5e2e2d97f39_fixed.java
index 4b163f6..8cc1844 100644
--- a/tmp/eba5c74e-7896-4da8-9881-50f255b89ff3_buggy.java
+++ b/tmp/f4386547-552a-4ece-9fb5-d5e2e2d97f39_fixed.java
@@ -1,28 +1,40 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
  * the requested number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long skipped = 0;
     while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        long toSkip = input.skip(numToSkip);
+        if (toSkip == 0) {
+            // Skip didn't work, fall back to using read
+            toSkip = 0;
+            while (toSkip < 8192 && numToSkip > 0) {
+                int chunk = (int) Math.min(8192, numToSkip);
+                byte[] buffer = new byte[chunk];
+                int read = input.read(buffer, 0, chunk);
+                if (read == -1) {
                     break;
                 }
-            numToSkip -= skipped;
+                toSkip += read;
+                numToSkip -= read;
             }
-            
-        return available - numToSkip;
+        } else {
+            numToSkip -= toSkip;
+        }
+        skipped += toSkip;
+    }
+    return skipped;
 }
\ No newline at end of file
