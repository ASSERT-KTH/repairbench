diff --git a/tmp/0162d9cd-a3ab-4d97-87d9-a208d6889414_buggy.java b/tmp/dd639fb6-eec3-4fa5-8f1f-4ea67d595d7c_fixed.java
index 58a1651..531cd9b 100644
--- a/tmp/0162d9cd-a3ab-4d97-87d9-a208d6889414_buggy.java
+++ b/tmp/dd639fb6-eec3-4fa5-8f1f-4ea67d595d7c_fixed.java
@@ -1,32 +1,36 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    typeOfThis = safeResolve(typeOfThis, t, scope);
+    if (!(typeOfThis instanceof ObjectType)) {
+        t.report(ErrorSeverity.WARNING, "@this type of a function must be an object\nActual type: " + typeOfThis);
+    } else {
+        typeOfThis = (ObjectType) typeOfThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface!= iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes!= null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
