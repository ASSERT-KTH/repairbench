diff --git a/tmp/e5a083e0-ea51-491c-98c9-68b8aa537b1a_buggy.java b/tmp/6da54c01-9e57-418a-86b9-a92393db40fd_fixed.java
index 58a1651..49c047c 100644
--- a/tmp/e5a083e0-ea51-491c-98c9-68b8aa537b1a_buggy.java
+++ b/tmp/6da54c01-9e57-418a-86b9-a92393db40fd_fixed.java
@@ -1,32 +1,32 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    typeOfThis = safeResolve(typeOfThis, t, scope);
+    if (!typeOfThis.isObjectType() &&!typeOfThis.isNullType() &&!typeOfThis.isUnionType()) {
+        t.report(typeOfThis.getSource(), "@this type of a function must be an object or a null type");
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface!= iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes!= null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
