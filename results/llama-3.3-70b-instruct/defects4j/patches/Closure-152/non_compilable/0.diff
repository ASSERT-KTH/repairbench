diff --git a/tmp/0181d369-c0a3-44f1-a0ef-8b5b8d37dd05_buggy.java b/tmp/af6437ae-3f9e-4715-96bf-ff6f729fd6f1_fixed.java
index 58a1651..a12d0ea 100644
--- a/tmp/0181d369-c0a3-44f1-a0ef-8b5b8d37dd05_buggy.java
+++ b/tmp/af6437ae-3f9e-4715-96bf-ff6f729fd6f1_fixed.java
@@ -1,32 +1,50 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Consider typeOfThis as an ObjectType if it's a UnionType that contains ObjectType.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis.isUnionType()) {
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        for (JSType type : unionType.getComponents()) {
+            if (type.isObjectType()) {
+                typeOfThis = (ObjectType) type;
+                break;
+            }
+        }
+        if (typeOfThis == null) {
+            // Report an error if none of the types in the union are ObjectType.
+            t.report(JSError.make(typeOfThisscp.location, "this type must be an object, but found: " + resolvedTypeOfThis));
+        }
+    } else if (resolvedTypeOfThis.isObjectType()) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+        // Report an error if the type is not an ObjectType or a UnionType that contains ObjectType.
+        t.report(JSError.make(typeOfThisscp.location, "this type must be an object, but found: " + resolvedTypeOfThis));
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface!= iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes!= null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
