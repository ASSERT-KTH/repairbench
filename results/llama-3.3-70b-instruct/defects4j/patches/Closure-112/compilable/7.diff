diff --git a/tmp/c412b5b1-92fb-46ef-9e9b-be151cca9b87_buggy.java b/tmp/15a46cb2-f11f-4b84-b1ac-cba89f73ffb9_fixed.java
index 63641d0..e19bbcd 100644
--- a/tmp/c412b5b1-92fb-46ef-9e9b-be151cca9b87_buggy.java
+++ b/tmp/15a46cb2-f11f-4b84-b1ac-cba89f73ffb9_fixed.java
@@ -1,33 +1,30 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
      .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
      .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+  if (replacementFnType == null) {
+    // If the function type is no longer a function after replacement, do not update the types
+    return replacer.madeChanges;
+  }
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
