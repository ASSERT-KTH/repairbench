diff --git a/tmp/7d5643be-b99f-4afb-83f8-023e14644587_buggy.java b/tmp/b5336c64-b9b6-4a4f-b37e-b670f324cd3d_fixed.java
index 63641d0..6e56887 100644
--- a/tmp/7d5643be-b99f-4afb-83f8-023e14644587_buggy.java
+++ b/tmp/b5336c64-b9b6-4a4f-b37e-b670f324cd3d_fixed.java
@@ -1,33 +1,39 @@
 /**
  * For functions with function(this: T,...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
      .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Handle unknown types to avoid errors
+  if (inferred == null) {
+    return false;
+  }
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
      .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+  if (replacementFnType == null) {
+    return false;
+  }
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
