diff --git a/tmp/c160caa9-2a63-4e02-aaa6-ba43889024bc_buggy.java b/tmp/2ec35691-081a-4e48-b809-94e3e662b909_fixed.java
index 63641d0..46c9414 100644
--- a/tmp/c160caa9-2a63-4e02-aaa6-ba43889024bc_buggy.java
+++ b/tmp/2ec35691-081a-4e48-b809-94e3e662b909_fixed.java
@@ -1,33 +1,37 @@
 /**
  * For functions with function(this: T,...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
      .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
+  if (callTarget.getJSType().isUnknown() || callTarget.getJSType().isNative() 
+      || callTarget.getJSType().isFunctionType()
+      && ((FunctionType) callTarget.getJSType()).isConstructor()) {
     FunctionType replacementFnType = fnType.visit(replacer)
        .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
-
+    if (replacementFnType!= null) {
       callTarget.setJSType(replacementFnType);
       n.setJSType(replacementFnType.getReturnType());
-
       return replacer.madeChanges;
     }
+  }
+
+  return false;
+}
\ No newline at end of file
