diff --git a/tmp/429005a9-6da6-4641-91c3-dafb4632d84c_buggy.java b/tmp/a391251f-0bbc-4e71-81e5-3d4bd485cc1f_fixed.java
index 63641d0..a8999f1 100644
--- a/tmp/429005a9-6da6-4641-91c3-dafb4632d84c_buggy.java
+++ b/tmp/a391251f-0bbc-4e71-81e5-3d4bd485cc1f_fixed.java
@@ -1,33 +1,33 @@
 /**
  * For functions with function(this: T,...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
      .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
   // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+  // replace it with UNKNOWN, but also make sure that the replacement type
+  // is a subtype of the original type where possible.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+      registry, inferred, fnType.getTemplateTypeMap());
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
      .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
