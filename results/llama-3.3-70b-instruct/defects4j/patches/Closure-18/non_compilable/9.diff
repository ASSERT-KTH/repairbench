diff --git a/tmp/c670be4e-721d-4e78-be04-0560be1ed6b8_buggy.java b/tmp/a71997ea-cf5a-4d55-9c0a-a39ac85f9c6e_fixed.java
index 20123a4..6fd82f9 100644
--- a/tmp/c670be4e-721d-4e78-be04-0560be1ed6b8_buggy.java
+++ b/tmp/a71997ea-cf5a-4d55-9c0a-a39ac85f9c6e_fixed.java
@@ -1,129 +1,173 @@
 /**
  * Parses the externs and main inputs.
  *
  * @return A synthetic root node whose two children are the externs root
  *     and the main root
  */
 Node parseInputs() {
     boolean devMode = options.devMode!= DevMode.OFF;
 
     // If old roots exist (we are parsing a second time), detach each of the
     // individual file parse trees.
     if (externsRoot!= null) {
         externsRoot.detachChildren();
     }
     if (jsRoot!= null) {
         jsRoot.detachChildren();
     }
 
     // Parse main JS sources.
     jsRoot = IR.block();
     jsRoot.setIsSyntheticBlock(true);
 
     externsRoot = IR.block();
     externsRoot.setIsSyntheticBlock(true);
 
     externAndJsRoot = IR.block(externsRoot, jsRoot);
     externAndJsRoot.setIsSyntheticBlock(true);
 
     if (options.tracer.isOn()) {
         tracker = new PerformanceTracker(jsRoot, options.tracer);
         addChangeHandler(tracker.getCodeChangeHandler());
     }
 
     Tracer tracer = newTracer("parseInputs");
 
     try {
         // Parse externs sources.
         for (CompilerInput input : externs) {
             Node n = input.getAstRoot(this);
             if (hasErrors()) {
                 return null;
             }
             externsRoot.addChildToBack(n);
         }
 
         // Modules inferred in ProcessCommonJS pass.
         if (options.transformAMDToCJSModules || options.processCommonJSModules) {
             processAMDAndCommonJSModules();
         }
 
         hoistExterns(externsRoot);
 
         // Check if the sources need to be re-ordered.
         boolean staleInputs = false;
         if (options.dependencyOptions.needsManagement() && options.closurePass) {
+            List<CompilerInput> sortedInputs = sortInputsByDependency(inputs);
+            inputs = sortedInputs;
+
             for (CompilerInput input : inputs) {
                 // Forward-declare all the provided types, so that they
                 // are not flagged even if they are dropped from the process.
                 for (String provide : input.getProvides()) {
                     getTypeRegistry().forwardDeclareType(provide);
                 }
             }
 
             try {
                 inputs =
                         (moduleGraph == null? new JSModuleGraph(modules) : moduleGraph)
                                .manageDependencies(options.dependencyOptions, inputs);
                 staleInputs = true;
             } catch (CircularDependencyException e) {
                 report(JSError.make(
                         JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
 
                 // If in IDE mode, we ignore the error and keep going.
                 if (hasErrors()) {
                     return null;
                 }
             } catch (MissingProvideException e) {
                 report(JSError.make(
                         MISSING_ENTRY_ERROR, e.getMessage()));
 
                 // If in IDE mode, we ignore the error and keep going.
                 if (hasErrors()) {
                     return null;
                 }
             }
         }
 
         hoistNoCompileFiles();
 
         if (staleInputs) {
             repartitionInputs();
         }
 
         // Build the AST.
         for (CompilerInput input : inputs) {
             Node n = input.getAstRoot(this);
             if (n == null) {
                 continue;
             }
 
             if (devMode) {
                 runSanityCheck();
                 if (hasErrors()) {
                     return null;
                 }
             }
 
             if (options.sourceMapOutputPath!= null ||
                     options.nameReferenceReportPath!= null) {
 
                 // Annotate the nodes in the tree with information from the
                 // input file. This information is used to construct the SourceMap.
                 SourceInformationAnnotator sia =
                         new SourceInformationAnnotator(
                                 input.getName(), options.devMode!= DevMode.OFF);
                 NodeTraversal.traverse(this, n, sia);
             }
 
             jsRoot.addChildToBack(n);
         }
 
         if (hasErrors()) {
             return null;
         }
         return externAndJsRoot;
     } finally {
         stopTracer(tracer, "parseInputs");
     }
 }
+
+// Helper method to sort inputs by dependency
+private List<CompilerInput> sortInputsByDependency(List<CompilerInput> inputs) {
+    List<CompilerInput> sortedInputs = new ArrayList<>();
+    Set<CompilerInput> visited = new HashSet<>();
+
+    for (CompilerInput input : inputs) {
+        sortInputByDependency(input, sortedInputs, visited);
+    }
+
+    return sortedInputs;
+}
+
+// Helper method to sort input by dependency using DFS
+private void sortInputByDependency(CompilerInput input, List<CompilerInput> sortedInputs, Set<CompilerInput> visited) {
+    if (visited.contains(input)) {
+        return;
+    }
+
+    visited.add(input);
+
+    for (String require : input.getRequires()) {
+        CompilerInput requiredInput = findInputByName(require, inputs);
+        if (requiredInput!= null) {
+            sortInputByDependency(requiredInput, sortedInputs, visited);
+        }
+    }
+
+    sortedInputs.add(input);
+}
+
+// Helper method to find input by name
+private CompilerInput findInputByName(String name, List<CompilerInput> inputs) {
+    for (CompilerInput input : inputs) {
+        if (input.getName().equals(name)) {
+            return input;
+        }
+    }
+
+    return null;
+}
\ No newline at end of file
