diff --git a/tmp/35fafb86-1a27-4add-a3ce-bbc0b3982254_buggy.java b/tmp/ea092a2d-087a-471b-b046-357b4403c53d_fixed.java
index 20123a4..95a3444 100644
--- a/tmp/35fafb86-1a27-4add-a3ce-bbc0b3982254_buggy.java
+++ b/tmp/ea092a2d-087a-471b-b046-357b4403c53d_fixed.java
@@ -1,129 +1,189 @@
 /**
  * Parses the externs and main inputs.
  *
  * @return A synthetic root node whose two children are the externs root
  *     and the main root
  */
 Node parseInputs() {
     boolean devMode = options.devMode!= DevMode.OFF;
 
     // If old roots exist (we are parsing a second time), detach each of the
     // individual file parse trees.
     if (externsRoot!= null) {
       externsRoot.detachChildren();
     }
     if (jsRoot!= null) {
       jsRoot.detachChildren();
     }
 
     // Parse main JS sources.
     jsRoot = IR.block();
     jsRoot.setIsSyntheticBlock(true);
 
     externsRoot = IR.block();
     externsRoot.setIsSyntheticBlock(true);
 
     externAndJsRoot = IR.block(externsRoot, jsRoot);
     externAndJsRoot.setIsSyntheticBlock(true);
 
     if (options.tracer.isOn()) {
       tracker = new PerformanceTracker(jsRoot, options.tracer);
       addChangeHandler(tracker.getCodeChangeHandler());
     }
 
     Tracer tracer = newTracer("parseInputs");
 
     try {
       // Parse externs sources.
       for (CompilerInput input : externs) {
         Node n = input.getAstRoot(this);
         if (hasErrors()) {
           return null;
         }
         externsRoot.addChildToBack(n);
       }
 
       // Modules inferred in ProcessCommonJS pass.
       if (options.transformAMDToCJSModules || options.processCommonJSModules) {
         processAMDAndCommonJSModules();
       }
 
       hoistExterns(externsRoot);
 
       // Check if the sources need to be re-ordered.
       boolean staleInputs = false;
       if (options.dependencyOptions.needsManagement() && options.closurePass) {
         for (CompilerInput input : inputs) {
           // Forward-declare all the provided types, so that they
           // are not flagged even if they are dropped from the process.
           for (String provide : input.getProvides()) {
             getTypeRegistry().forwardDeclareType(provide);
           }
         }
 
         try {
           inputs =
               (moduleGraph == null? new JSModuleGraph(modules) : moduleGraph)
              .manageDependencies(options.dependencyOptions, inputs);
           staleInputs = true;
         } catch (CircularDependencyException e) {
           report(JSError.make(
               JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
 
           // If in IDE mode, we ignore the error and keep going.
           if (hasErrors()) {
             return null;
           }
         } catch (MissingProvideException e) {
           report(JSError.make(
               MISSING_ENTRY_ERROR, e.getMessage()));
 
           // If in IDE mode, we ignore the error and keep going.
           if (hasErrors()) {
             return null;
           }
         }
       }
 
       hoistNoCompileFiles();
 
       if (staleInputs) {
         repartitionInputs();
       }
 
       // Build the AST.
+      List<CompilerInput> sortedInputs = new ArrayList<>();
       for (CompilerInput input : inputs) {
         Node n = input.getAstRoot(this);
         if (n == null) {
           continue;
         }
 
         if (devMode) {
           runSanityCheck();
           if (hasErrors()) {
             return null;
           }
         }
 
         if (options.sourceMapOutputPath!= null ||
             options.nameReferenceReportPath!= null) {
 
           // Annotate the nodes in the tree with information from the
           // input file. This information is used to construct the SourceMap.
           SourceInformationAnnotator sia =
               new SourceInformationAnnotator(
                   input.getName(), options.devMode!= DevMode.OFF);
           NodeTraversal.traverse(this, n, sia);
         }
 
+        // Sort the inputs based on dependency
+        if (options.dependencyOptions.isDependencySorting()) {
+          sortedInputs.add(input);
+        } else {
           jsRoot.addChildToBack(n);
         }
+      }
+
+      if (options.dependencyOptions.isDependencySorting()) {
+        // Perform topological sort
+        List<CompilerInput> sorted = topologicalSort(inputs, sortedInputs);
+        for (CompilerInput input : sorted) {
+          Node n = input.getAstRoot(this);
+          jsRoot.addChildToBack(n);
+        }
+      }
 
       if (hasErrors()) {
         return null;
       }
       return externAndJsRoot;
     } finally {
       stopTracer(tracer, "parseInputs");
     }
 }
+
+// Helper function for topological sort
+private List<CompilerInput> topologicalSort(List<CompilerInput> inputs, List<CompilerInput> sortedInputs) {
+    Map<String, List<String>> graph = new HashMap<>();
+    for (CompilerInput input : inputs) {
+        String name = input.getName();
+        graph.put(name, new ArrayList<>());
+        for (String require : input.getRequires()) {
+            graph.get(name).add(require);
+        }
+    }
+
+    List<CompilerInput> sorted = new ArrayList<>();
+    Set<String> visited = new HashSet<>();
+
+    for (CompilerInput input : sortedInputs) {
+        String name = input.getName();
+        if (!visited.contains(name)) {
+            visit(graph, visited, sorted, name);
+        }
+    }
+
+    return sorted;
+}
+
+// Helper function for topological sort
+private void visit(Map<String, List<String>> graph, Set<String> visited, List<CompilerInput> sorted, String name) {
+    visited.add(name);
+    for (String neighbor : graph.get(name)) {
+        if (!visited.contains(neighbor)) {
+            visit(graph, visited, sorted, neighbor);
+        }
+    }
+    sorted.add(findInputByName(name));
+}
+
+// Helper function to find input by name
+private CompilerInput findInputByName(String name) {
+    for (CompilerInput input : inputs) {
+        if (input.getName().equals(name)) {
+            return input;
+        }
+    }
+    return null;
+}
\ No newline at end of file
