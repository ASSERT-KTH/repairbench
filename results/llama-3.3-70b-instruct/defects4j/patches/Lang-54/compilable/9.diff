diff --git a/tmp/e678e347-7cc8-4065-a130-6e935b492c89_buggy.java b/tmp/88fdd463-727d-41ad-817c-c95a35fa9f7c_fixed.java
index 90fe130..d74ec6e 100644
--- a/tmp/e678e347-7cc8-4065-a130-6e935b492c89_buggy.java
+++ b/tmp/88fdd463-727d-41ad-817c-c95a35fa9f7c_fixed.java
@@ -1,61 +1,94 @@
 /**
  * <p>Converts a String to a Locale.</p>
  *
  * <p>This method takes the string format of a locale and creates the
  * locale object from it.</p>
  *
  * <pre>
  *   LocaleUtils.toLocale("en")         = new Locale("en", "")
  *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
  *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+ *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
  * </pre>
  *
  * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
  * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
  * Thus, the result from getVariant() may vary depending on your JDK.</p>
  *
  * <p>This method validates the input strictly.
  * The language code must be lowercase.
  * The country code must be uppercase.
  * The separator must be an underscore.
  * The length must be correct.
  * </p>
  *
  * @param str  the locale String to convert, null returns null
  * @return a Locale, null if null input
  * @throws IllegalArgumentException if the string is an invalid format
  */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        char ch0 = str.charAt(0);
-        char ch1 = str.charAt(1);
-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
     if (len == 2) {
+        char ch0 = str.charAt(0);
+        char ch1 = str.charAt(1);
+        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
         return new Locale(str, "");
-        } else {
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
+    } else if (len == 5) {
+        char ch0 = str.charAt(0);
+        char ch1 = str.charAt(1);
+        char ch2 = str.charAt(2);
         char ch3 = str.charAt(3);
         char ch4 = str.charAt(4);
+        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z' || ch2!= '_') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
         if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
         return new Locale(str.substring(0, 2), str.substring(3, 5));
+    } else if (str.startsWith("__")) {
+        int langLen = 2;
+        int countryLen = 0;
+        for (int i = 2; i < len; i++) {
+            if (str.charAt(i) == '_') {
+                if (countryLen > 0) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                countryLen = 2;
+                if (i + 1 >= len) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                i++;
+            }
+            if (i >= len) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (str.charAt(i) < 'a' || str.charAt(i) > 'z') {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+        }
+        return new Locale(str.substring(0, langLen), "", str.substring(langLen + 2));
     } else {
-                if (str.charAt(5) != '_') {
+        if (len < 7) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        char ch0 = str.charAt(0);
+        char ch1 = str.charAt(1);
+        char ch2 = str.charAt(2);
+        char ch3 = str.charAt(3);
+        char ch4 = str.charAt(4);
+        char ch5 = str.charAt(5);
+        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z' || ch2!= '_') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z' || ch5!= '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
 }
\ No newline at end of file
-    }
