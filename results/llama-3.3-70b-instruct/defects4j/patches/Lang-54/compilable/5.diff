diff --git a/tmp/c424d942-999b-4065-b284-8d1c8a37ae86_buggy.java b/tmp/4ad9643e-4207-411d-822f-ce580fa8f164_fixed.java
index 90fe130..9025e9a 100644
--- a/tmp/c424d942-999b-4065-b284-8d1c8a37ae86_buggy.java
+++ b/tmp/4ad9643e-4207-411d-822f-ce580fa8f164_fixed.java
@@ -1,61 +1,64 @@
 /**
  * <p>Converts a String to a Locale.</p>
  *
  * <p>This method takes the string format of a locale and creates the
  * locale object from it.</p>
  *
  * <pre>
  *   LocaleUtils.toLocale("en")         = new Locale("en", "")
  *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
  *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+ *   LocaleUtils.toLocale("en__xxx")    = new Locale("en", "", "xxx")
  * </pre>
  *
  * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
  * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
  * Thus, the result from getVariant() may vary depending on your JDK.</p>
  *
  * <p>This method validates the input strictly.
  * The language code must be lowercase.
  * The country code must be uppercase.
  * The separator must be an underscore.
  * The length must be correct.
  * </p>
  *
  * @param str  the locale String to convert, null returns null
  * @return a Locale, null if null input
  * @throws IllegalArgumentException if the string is an invalid format
  */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+    if (len < 2 || len > 10) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     char ch0 = str.charAt(0);
     char ch1 = str.charAt(1);
     if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (len == 2) {
         return new Locale(str, "");
     } else {
-            if (str.charAt(2) != '_') {
+        int underscoreIndex = str.indexOf('_');
+        if (underscoreIndex == -1) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+        String language = str.substring(0, underscoreIndex);
+        String rest = str.substring(underscoreIndex + 1);
+        if (rest.indexOf('_')!= -1) {
+            int secondUnderscoreIndex = rest.indexOf('_');
+            String country = rest.substring(0, secondUnderscoreIndex);
+            String variant = rest.substring(secondUnderscoreIndex + 1);
+            if (country.length()!= 2 || (country.charAt(0) < 'A' || country.charAt(0) > 'Z' 
+                    || country.charAt(1) < 'A' || country.charAt(1) > 'Z')) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+            return new Locale(language, country, variant);
         } else {
-                if (str.charAt(5) != '_') {
-                    throw new IllegalArgumentException("Invalid locale format: " + str);
-                }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            return new Locale(language, "", rest);
         }
     }
 }
\ No newline at end of file
