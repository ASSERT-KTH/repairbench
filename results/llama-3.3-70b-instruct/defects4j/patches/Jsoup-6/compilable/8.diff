diff --git a/tmp/35143d9e-ecc0-4066-b5b9-d91c7c091473_buggy.java b/tmp/95a07b77-dad1-4c32-97d9-26fd6f72c31c_fixed.java
index 99141e0..2c24dc8 100644
--- a/tmp/35143d9e-ecc0-4066-b5b9-d91c7c091473_buggy.java
+++ b/tmp/95a07b77-dad1-4c32-97d9-26fd6f72c31c_fixed.java
@@ -1,33 +1,45 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
     StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num!= null) {
             try {
                 int base = m.group(2)!= null? 16 : 10; // 2 is hex indicator
                 charval = Integer.valueOf(num, base);
             } catch (NumberFormatException e) {
-                } // skip
+                // skip
+            }
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+        if (charval!= -1) {
+            // handle Unicode characters
+            if (charval > 0xFFFF) {
                 String c = Character.toString((char) charval);
+                // Java can only handle Unicode characters up to U+FFFF in a single char
+                // so convert above U+FFFF to a surrogate pair
+                if (charval >= 0x10000 && charval <= 0x10FFFF) {
+                    int high = (charval - 0x10000) / 0x400 + 0xD800;
+                    int low = (charval - 0x10000) % 0x400 + 0xDC00;
+                    c = new String(new char[] {(char) high, (char) low});
+                }
                 m.appendReplacement(accum, c);
+            } else {
+                m.appendReplacement(accum, Character.toString((char) charval));
+            }
         } else {
             m.appendReplacement(accum, m.group(0));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
