diff --git a/tmp/30053d53-6187-48a8-9885-baab7f7704be_buggy.java b/tmp/0dc719e9-5377-46d4-babe-929d1aabce20_fixed.java
index 99141e0..d616ece 100644
--- a/tmp/30053d53-6187-48a8-9885-baab7f7704be_buggy.java
+++ b/tmp/0dc719e9-5377-46d4-babe-929d1aabce20_fixed.java
@@ -1,33 +1,40 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    Matcher m = unescapePattern.matcher(string); 
+    StringBuffer accum = new StringBuffer(string.length()); 
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num!= null) {
             try {
                 int base = m.group(2)!= null? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                charval = Integer.parseInt(num, base);
             } catch (NumberFormatException e) {
-                } // skip
+                m.appendReplacement(accum, m.group(0));
+                continue;
+            }
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+        if (charval!= -1) {
+            if (charval > 0xFFFF && charval <= 0x10FFFF) {
+                String c = Character.toString((char) (0xD800 + (charval - 0x10000) / 0x400));
+                c += Character.toString((char) (0xDC00 + (charval - 0x10000) % 0x400));
+                m.appendReplacement(accum, c);
+            } else {
                 String c = Character.toString((char) charval);
                 m.appendReplacement(accum, c);
+            }
         } else {
             m.appendReplacement(accum, m.group(0));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
