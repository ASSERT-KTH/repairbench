diff --git a/tmp/b0b73bbc-c55c-4c49-817a-833084f9b495_buggy.java b/tmp/5da56ff5-b207-4947-bfb4-1fbc2a771e54_fixed.java
index fb2b020..67d876d 100644
--- a/tmp/b0b73bbc-c55c-4c49-817a-833084f9b495_buggy.java
+++ b/tmp/5da56ff5-b207-4947-bfb4-1fbc2a771e54_fixed.java
@@ -1,27 +1,32 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                            .getLeastSupertype(propType);
                 }
+                // Check if the property already exists in the object with a different type
+                if (hasProperty(prop) &&!getPropertyType(prop).isSubtypeOf(propType)) {
+                    // If it does, do not redefine it to maintain the original type
+                    continue;
+                }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
