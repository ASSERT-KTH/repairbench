diff --git a/tmp/44f873fe-0658-49e6-80ba-bd435b198e0f_buggy.java b/tmp/011506f7-f780-41c8-8fd9-3caac838fcb6_fixed.java
index fb2b020..56d7b13 100644
--- a/tmp/44f873fe-0658-49e6-80ba-bd435b198e0f_buggy.java
+++ b/tmp/011506f7-f780-41c8-8fd9-3caac838fcb6_fixed.java
@@ -1,27 +1,23 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    // We only want to match constraints on anonymous types.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+                    // Fix: check if the property type is a union type that includes void
+                    if (propType.isUnionType() && propType.containsKey(JSTypeNative.VOID_TYPE)) {
+                        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
+                    } else {
+                        // If the property type is not a union type that includes void, 
+                        // infer the type based on the property type
+                        typeToInfer = propType;
+                    }
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
