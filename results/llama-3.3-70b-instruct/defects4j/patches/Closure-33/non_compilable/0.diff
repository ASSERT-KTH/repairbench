diff --git a/tmp/56641dc8-eeb4-41a5-96a2-1a40e1d5161a_buggy.java b/tmp/d40ca8e8-8616-41d8-aa53-338723c4d1a3_fixed.java
index fb2b020..88d398e 100644
--- a/tmp/56641dc8-eeb4-41a5-96a2-1a40e1d5161a_buggy.java
+++ b/tmp/d40ca8e8-8616-41d8-aa53-338723c4d1a3_fixed.java
@@ -1,27 +1,39 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
   // We only want to match contraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+          // Infer a type that is the least supertype of the property type
+          // and the native void type if the property doesn't exist.
+          JSType voidType = getNativeType(JSTypeNative.VOID_TYPE);
+          typeToInfer = propType.getLeastSupertype(voidType);
         }
+        // Define the inferred property type
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
+  } else if (constraintObj.isAnonymousType()) {
+    // If the constraint object is not a record type but is an anonymous type,
+    // infer the property types directly.
+    for (String prop : constraintObj.getOwnPropertyNames()) {
+      JSType propType = constraintObj.getPropertyType(prop);
+      if (!isPropertyTypeDeclared(prop)) {
+        defineInferredProperty(prop, propType, null);
+      }
+    }
   }
 }
\ No newline at end of file
