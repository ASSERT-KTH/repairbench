diff --git a/tmp/26e74167-5257-4fde-a5bc-9a6a591fbe35_buggy.java b/tmp/9b57da16-6143-43a7-b67a-eccd93e3c815_fixed.java
index fb2b020..68e9cc3 100644
--- a/tmp/26e74167-5257-4fde-a5bc-9a6a591fbe35_buggy.java
+++ b/tmp/9b57da16-6143-43a7-b67a-eccd93e3c815_fixed.java
@@ -1,27 +1,23 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
+                JSType typeToInfer = hasProperty(prop)? propType : getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
