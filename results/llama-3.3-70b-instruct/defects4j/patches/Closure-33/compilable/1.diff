diff --git a/tmp/680b05c8-0a6d-47c8-8ec1-aece20fcdcb4_buggy.java b/tmp/d495baae-8885-4a65-95c6-2c1e499f124b_fixed.java
index fb2b020..2d89ceb 100644
--- a/tmp/680b05c8-0a6d-47c8-8ec1-aece20fcdcb4_buggy.java
+++ b/tmp/d495baae-8885-4a65-95c6-2c1e499f124b_fixed.java
@@ -1,27 +1,34 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
+                    // Get the least supertype of the property type and the native void type
+                    // to ensure that the inferred type is not too restrictive
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                            .getLeastSupertype(propType);
+                    // If the inferred type is the same as the property type, use the property type
+                    // to avoid unnecessary type conversions
+                    if (typeToInfer.equals(propType)) {
+                        typeToInfer = propType;
+                    }
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
