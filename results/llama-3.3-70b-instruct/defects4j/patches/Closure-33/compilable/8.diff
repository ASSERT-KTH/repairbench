diff --git a/tmp/b576d5e1-82dd-468d-b774-ddff0ba5cda6_buggy.java b/tmp/24e1c748-c687-458a-8e5c-3abfe2a84ab2_fixed.java
index fb2b020..49e5789 100644
--- a/tmp/b576d5e1-82dd-468d-b774-ddff0ba5cda6_buggy.java
+++ b/tmp/24e1c748-c687-458a-8e5c-3abfe2a84ab2_fixed.java
@@ -1,27 +1,33 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
+                    // If the property does not exist on this object, 
+                    // use the least supertype of the void type and the property type.
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                            .getLeastSupertype(propType);
+                } else {
+                    // If the property exists on this object, use the least supertype 
+                    // of the existing property type and the property type from the constraint.
+                    typeToInfer = getPropertyType(prop).getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
