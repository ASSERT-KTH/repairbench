diff --git a/tmp/f52d4ed5-b392-41b8-8a51-33c6bc4ca54d_buggy.java b/tmp/a824b8eb-c941-446f-8ade-cbe6ba89e821_fixed.java
index 1530b34..b826062 100644
--- a/tmp/f52d4ed5-b392-41b8-8a51-33c6bc4ca54d_buggy.java
+++ b/tmp/a824b8eb-c941-446f-8ade-cbe6ba89e821_fixed.java
@@ -1,23 +1,29 @@
 /**
  * Declares all of a function's arguments.
  */
 private void declareArguments(Node functionNode) {
   Node astParameters = functionNode.getFirstChild().getNext();
   Node body = astParameters.getNext();
   FunctionType functionType = (FunctionType) functionNode.getJSType();
   if (functionType!= null) {
     Node jsDocParameters = functionType.getParametersNode();
     if (jsDocParameters!= null) {
       Node jsDocParameter = jsDocParameters.getFirstChild();
       for (Node astParameter : astParameters.children()) {
         if (jsDocParameter!= null) {
+          // Check if the variable is already declared in the scope
+          if (functionNode.hasChildWithName(astParameter.getString())) {
+            // If it's already declared, report a warning
+            reportWarningForNode(astParameter, "JSC_DUP_VAR_DECLARATION", "variable " + astParameter.getString() + " redefined with type " + jsDocParameter.getJSType() + ", original definition at " + functionNode.getLineno() + " with type " + functionNode.getJSType());
+          }
           defineSlot(astParameter, functionNode,
               jsDocParameter.getJSType(), true);
           jsDocParameter = jsDocParameter.getNext();
         } else {
-              defineSlot(astParameter, functionNode, null, true);
+          // If no @param is provided for this argument, use the inferred type
+          defineSlot(astParameter, functionNode, astParameter.getJSType(), true);
         }
       }
     }
   }
 } // end declareArguments
\ No newline at end of file
