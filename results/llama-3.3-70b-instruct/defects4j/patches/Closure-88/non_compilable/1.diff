diff --git a/tmp/380a4251-a50a-4d42-a9f7-a019e0db68e6_buggy.java b/tmp/eb8f73c8-3aa1-45ef-be3d-92b297a292b2_fixed.java
index 9353941..b6d4218 100644
--- a/tmp/380a4251-a50a-4d42-a9f7-a019e0db68e6_buggy.java
+++ b/tmp/eb8f73c8-3aa1-45ef-be3d-92b297a292b2_fixed.java
@@ -1,30 +1,56 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child!= null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      if (child.getParent().isLogicalAnd() || child.getParent().isLogicalOr()) {
+        // First factor is evaluated before the second.
+        if (child.getNext() == null ||!variable.equals(child.getNext().getFirstChild().getString())) {
           VariableLiveness state = isVariableReadBeforeKill(child, variable);
           if (state!= VariableLiveness.MAYBE_LIVE) {
             return state;
           }
+        } else {
+          return VariableLiveness.MAYBE_LIVE; // assignment is in the second factor
+        }
+      } else if (child.getParent().isBinaryExpression()) {
+        // Both factors are evaluated before the operation is performed.
+        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+        if (state!= VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      } else if (child.getParent().isWorksheet()) {
+        // Texts on a worksheet are evaluated in order, so each one is evaluated
+        // after the previous one.
+        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+        if (state!= VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      } else {
+        // Other expressions: no knowledge.
+        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+        if (state!= VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
