diff --git a/tmp/500ab30a-181a-4d9d-bbda-afc07da4de02_buggy.java b/tmp/34123525-8e92-4de4-86da-b8766515a56e_fixed.java
index 9353941..dbc39cf 100644
--- a/tmp/500ab30a-181a-4d9d-bbda-afc07da4de02_buggy.java
+++ b/tmp/34123525-8e92-4de4-86da-b8766515a56e_fixed.java
@@ -1,30 +1,42 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child!= null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state!= VariableLiveness.MAYBE_LIVE) {
+        if (n.getBooleanProp(Node.IS_ASSIGNMENT_OP)) {
+          if (state == VariableLiveness.READ && 
+              n.getParent().isFirstChild(child) && 
+              child.getNext().hasChild()) {
+            // Handle the case where the variable is assigned to and then read
+            // in the same expression. This can happen in cases like (a = x) && (x = y)
+            state = VariableLiveness.READ;
+          } else {
             return state;
           }
+        } else {
+          return state;
+        }
+      }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
