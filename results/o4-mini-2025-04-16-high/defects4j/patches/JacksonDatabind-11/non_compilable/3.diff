diff --git a/tmp/d23bf31c-927b-4c52-b8ca-d2f7d54b4df9_buggy.java b/tmp/8ea6c27a-81fb-40ec-96f2-ae3b1b87480e_fixed.java
index fe73b81..b978a4d 100644
--- a/tmp/d23bf31c-927b-4c52-b8ca-d2f7d54b4df9_buggy.java
+++ b/tmp/8ea6c27a-81fb-40ec-96f2-ae3b1b87480e_fixed.java
@@ -1,42 +1,30 @@
-    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
-    {
-        final String name = type.getName();
-        // 19-Mar-2015: Without context, all we can check are bounds.
+protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context) {
+    String name = type.getName();
     if (context == null) {
-            // And to prevent infinite loops, now need this:
+        // no context at all, can’t resolve type variable
         return _unknownType();
-        } else {
-            // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
-             */
-            JavaType actualType = context.findType(name);
-            if (actualType != null) {
-                return actualType;
     }
+    // 1) direct binding
+    JavaType found = context.findType(name);
+    if (found != null) {
+        return found;
     }
-
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
+    // 2) try the declaring class (e.g. T declared on Owner<T>)
+    Class<?> owner = context.getDeclaringClass(); // this is the raw class for these bindings
+    if (owner != null) {
+        TypeVariable<?>[] classTVs = owner.getTypeParameters();
+        for (int i = 0, len = classTVs.length; i < len; ++i) {
+            if (classTVs[i].getName().equals(name)) {
+                // resolve against the context’s binding of the class-level parameters
+                JavaType[] actuals = context.getTypeParameters(); 
+                if (actuals != null && i < actuals.length && actuals[i] != null) {
+                    return actuals[i];
+                }
+            }
+        }
+    }
+    // 3) fall back to the first bound
     Type[] bounds = type.getBounds();
-
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
-
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
     context._addPlaceholder(name);
     return _constructType(bounds[0], context);
 }
\ No newline at end of file
