diff --git a/tmp/b1c0a370-f994-4f66-8b96-fec55e3550ed_buggy.java b/tmp/061c677c-c72f-4c91-b992-da8cee320af0_fixed.java
index 2ce28b5..75b3d90 100644
--- a/tmp/b1c0a370-f994-4f66-8b96-fec55e3550ed_buggy.java
+++ b/tmp/061c677c-c72f-4c91-b992-da8cee320af0_fixed.java
@@ -1,72 +1,81 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  * 
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
-
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
+
+        // COMPRESS-191: avoid misdetecting AIFF (IFF) files as TAR
+        // AIFF files start with "FORM" at 0–3 and "AIFF"/"AIFC" at 8–11
+        if (signatureLength >= 12
+                && signature[0] == 'F' && signature[1] == 'O'
+                && signature[2] == 'R' && signature[3] == 'M'
+                && signature[8] == 'A' && signature[9] == 'I'
+                && signature[10] == 'F'
+                && (signature[11] == 'F' || signature[11] == 'C')) {
+            throw new ArchiveException("No Archiver found for the stream signature");
+        }
+
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
-            // Dump needs a bigger buffer to check the signature;
+        // Dump needs a bigger buffer to check the signature
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
         // Tar needs an even bigger buffer to check the signature; read the first block
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
         // COMPRESS-117 - improve auto-recognition
         if (signatureLength >= 512) {
             try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                TarArchiveInputStream tais =
+                    new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                 // COMPRESS-191 - verify the header checksum
                 tais.getNextEntry(); 
                 return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
+            } catch (Exception e) {
+                // not a TAR; fall through to exception below
             }
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
