diff --git a/tmp/f61940dd-3ee5-4e6c-b712-f57c568dee99_buggy.java b/tmp/16f877c3-5973-4311-b398-74a9fd78a8ba_fixed.java
index 2ce28b5..910c125 100644
--- a/tmp/f61940dd-3ee5-4e6c-b712-f57c568dee99_buggy.java
+++ b/tmp/16f877c3-5973-4311-b398-74a9fd78a8ba_fixed.java
@@ -1,72 +1,76 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
-
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
-            // Dump needs a bigger buffer to check the signature;
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
         // Tar needs an even bigger buffer to check the signature; read the first block
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
-            // COMPRESS-117 - improve auto-recognition
+
+        // COMPRESS-117 - improve auto-recognition: detect old (V7) tar by header checksum
         if (signatureLength >= 512) {
-                try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+            // parse the stored checksum (octal) from header[148..155]
+            long stored = 0;
+            boolean foundDigit = false;
+            for (int i = 148; i < 156; i++) {
+                byte b = tarheader[i];
+                if (b >= '0' && b <= '7') {
+                    foundDigit = true;
+                    stored = (stored << 3) + (b - '0');
+                } else if (foundDigit) {
+                    break;
+                }
+            }
+            if (foundDigit) {
+                // compute the checksum by treating the checksum field as spaces (0x20)
+                long sum = 0;
+                for (int i = 0; i < tarheader.length; i++) {
+                    if (i >= 148 && i < 156) {
+                        sum += 0x20;
+                    } else {
+                        sum += tarheader[i] & 0xFF;
+                    }
+                }
+                if (sum == stored) {
                     return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
+                }
             }
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
