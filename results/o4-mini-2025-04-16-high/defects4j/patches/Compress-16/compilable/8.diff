diff --git a/tmp/1590a7e7-2e3f-4f9d-83ed-1c9e1c62b966_buggy.java b/tmp/286df382-9197-4d86-9d36-b8e19307ae91_fixed.java
index 2ce28b5..55ba50a 100644
--- a/tmp/1590a7e7-2e3f-4f9d-83ed-1c9e1c62b966_buggy.java
+++ b/tmp/286df382-9197-4d86-9d36-b8e19307ae91_fixed.java
@@ -1,72 +1,71 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  * 
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
-
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
+    try {
+        // check ZIP / JAR
         final byte[] signature = new byte[12];
         in.mark(signature.length);
-        try {
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+        }
+
+        // check AR
+        if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+        }
+        // check CPIO
+        if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
-            // Dump needs a bigger buffer to check the signature;
+        // check DUMP
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+        // check TAR (must read a full 512‐byte header and verify its checksum)
+        final byte[] tarHeader = new byte[512];
+        in.mark(tarHeader.length);
+        signatureLength = in.read(tarHeader);
         in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
+        if (signatureLength >= tarHeader.length) {
             try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
+                // COMPRESS-191: verify header checksum by reading an entry
+                TarArchiveInputStream tais =
+                    new TarArchiveInputStream(new ByteArrayInputStream(tarHeader));
                 tais.getNextEntry();
                 return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
+            } catch (Exception e) {
+                // not a TAR archive; fall through
             }
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
