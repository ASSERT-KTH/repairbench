diff --git a/tmp/ea4293b5-7626-4b49-9ed9-ba47f4ab2cff_buggy.java b/tmp/45b231b4-6381-4387-b606-8013a2664c9c_fixed.java
index 2ce28b5..78ce077 100644
--- a/tmp/ea4293b5-7626-4b49-9ed9-ba47f4ab2cff_buggy.java
+++ b/tmp/45b231b4-6381-4387-b606-8013a2664c9c_fixed.java
@@ -1,72 +1,87 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
-
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
+    try {
+        // 1) ZIP, JAR, AR, CPIO signatures
+        byte[] signature = new byte[12];
         in.mark(signature.length);
-        try {
         int signatureLength = in.read(signature);
         in.reset();
+
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
+        // 2) Dump signature (needs 32 bytes)
+        byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
+        // 3) TAR signature (ustar)
+        byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
-                try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+
+        // 4) Fallback for old-style TAR: verify the header checksum
+        if (signatureLength >= tarheader.length) {
+            final int checksumOffset = 148;
+            final int checksumLength = 8;
+            int idx = checksumOffset;
+            // skip leading spaces & NULs
+            while (idx < checksumOffset + checksumLength
+                   && (tarheader[idx] == 0 || tarheader[idx] == ' ')) {
+                idx++;
+            }
+            long recorded = 0;
+            boolean hasDigits = false;
+            // parse octal digits
+            while (idx < checksumOffset + checksumLength
+                   && tarheader[idx] >= '0' && tarheader[idx] <= '7') {
+                hasDigits = true;
+                recorded = (recorded << 3) + (tarheader[idx] - '0');
+                idx++;
+            }
+            if (hasDigits) {
+                long computed = 0;
+                for (int i = 0; i < tarheader.length; i++) {
+                    // treat the checksum field as spaces
+                    if (i >= checksumOffset && i < checksumOffset + checksumLength) {
+                        computed += ' ';
+                    } else {
+                        computed += tarheader[i] & 0xFF;
+                    }
+                }
+                // allow exact match or off by one (GNU tar)
+                if (recorded == computed
+                        || (recorded >= computed - 1 && recorded <= computed + 1)) {
                     return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
                 }
             }
+        }
+
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
