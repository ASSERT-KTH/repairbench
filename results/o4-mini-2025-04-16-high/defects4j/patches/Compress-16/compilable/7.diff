diff --git a/tmp/0107f177-667a-4fbf-98e2-819486b6af27_buggy.java b/tmp/3d521e59-2f28-48d7-8601-943178ba1f14_fixed.java
index 2ce28b5..cccebd8 100644
--- a/tmp/0107f177-667a-4fbf-98e2-819486b6af27_buggy.java
+++ b/tmp/3d521e59-2f28-48d7-8601-943178ba1f14_fixed.java
@@ -1,72 +1,59 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  * 
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
-
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
+    try {
+        // small signature for zip, jar, ar, cpio
         final byte[] signature = new byte[12];
         in.mark(signature.length);
-        try {
-            int signatureLength = in.read(signature);
+        int sigLen = in.read(signature);
         in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
+        if (ZipArchiveInputStream.matches(signature, sigLen)) {
             return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+        } else if (JarArchiveInputStream.matches(signature, sigLen)) {
             return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+        } else if (ArArchiveInputStream.matches(signature, sigLen)) {
             return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+        } else if (CpioArchiveInputStream.matches(signature, sigLen)) {
             return new CpioArchiveInputStream(in);
         }
 
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
+        // dump needs a bit more
+        final byte[] dumpSig = new byte[32];
+        in.mark(dumpSig.length);
+        sigLen = in.read(dumpSig);
         in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+        if (DumpArchiveInputStream.matches(dumpSig, sigLen)) {
             return new DumpArchiveInputStream(in);
         }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+        // tar needs a full block to check the ustar magic
+        final byte[] tarHeader = new byte[512];
+        in.mark(tarHeader.length);
+        sigLen = in.read(tarHeader);
         in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+        if (TarArchiveInputStream.matches(tarHeader, sigLen)) {
             return new TarArchiveInputStream(in);
         }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
-                try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
-                        return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
-                }
-            }
+
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
