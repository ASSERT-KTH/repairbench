diff --git a/tmp/a7b093af-637f-443e-808a-cbe29aaae405_buggy.java b/tmp/f0a5a8e8-5ca0-43ed-b18d-49288ddd4600_fixed.java
index 7d8d756..a0e0339 100644
--- a/tmp/a7b093af-637f-443e-808a-cbe29aaae405_buggy.java
+++ b/tmp/f0a5a8e8-5ca0-43ed-b18d-49288ddd4600_fixed.java
@@ -1,48 +1,62 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
     @SuppressWarnings("resource")
-    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
+    private final Object _deserialize(JsonParser p, DeserializationContext ctxt)
+        throws IOException
     {
-        // 02-Aug-2013, tatu: May need to use native type ids
+        // 1) native type-id?
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+        // 2) if we're at a FIELD_NAME, assume we are already inside the wrapper
+        //    (e.g. @JsonIdentityInfo may have moved us here), so fall through
+        //    to subtype lookup
+        if (p.getCurrentToken() != JsonToken.START_OBJECT
+            && p.getCurrentToken() != JsonToken.FIELD_NAME)
+        {
+            // none of the above: must have a wrapper-object
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "
+                    +baseTypeName());
         }
-            // should always get field name, but just in case...
+        // if we really saw START_OBJECT, advance into it
+        if (p.getCurrentToken() == JsonToken.START_OBJECT) {
             if (p.nextToken() != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
+                        "need JSON String that contains type id (for subtype of "
+                        +baseTypeName()+")");
             }
-        final String typeId = p.getText();
+        }
+        // now CURRENT is FIELD_NAME (the type id)
+        String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
+        // move to the value (either start of object or next field)
+        JsonToken t = p.nextToken();
 
-        // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
+        // if we are to expose the type id as a property and we see a START_OBJECT,
+        // insert the type field first
+        if (_typeIdVisible && t == JsonToken.START_OBJECT) {
             TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+            tb.writeStartObject();
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
+            // stitch our buffer ahead of the real parser
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
+            p.nextToken(); // to get into the actual bean
         }
 
+        // delegate to actual deserializer
         Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
+
+        // after consuming the bean, expect to close the wrapper if we opened one
+        if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+            // we're still inside the bean's own END_OBJECT => consume one more
+            p.nextToken();
+        }
+        if (p.getCurrentToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
