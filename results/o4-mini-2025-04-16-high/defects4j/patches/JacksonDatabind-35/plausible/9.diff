diff --git a/tmp/2e8d1ab6-6f5e-4f72-b141-19d49987a51c_buggy.java b/tmp/4fa1e012-ba95-49c0-a0e4-cf99185abb50_fixed.java
index 7d8d756..31d80db 100644
--- a/tmp/2e8d1ab6-6f5e-4f72-b141-19d49987a51c_buggy.java
+++ b/tmp/4fa1e012-ba95-49c0-a0e4-cf99185abb50_fixed.java
@@ -1,48 +1,48 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
-        // 02-Aug-2013, tatu: May need to use native type ids
+    // first, native type‚Äêid handling (rare in JSON)
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+    // may be at START_OBJECT (wrapper) or already at FIELD_NAME (wrapper was entered)
+    JsonToken curr = p.getCurrentToken();
+    if (curr != JsonToken.START_OBJECT && curr != JsonToken.FIELD_NAME) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
             "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
     }
-            // should always get field name, but just in case...
+    // if we saw the START_OBJECT, advance to the FIELD_NAME with the type id
+    if (curr == JsonToken.START_OBJECT) {
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                 "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
+    }
+    // now p is at FIELD_NAME of the type id
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+    // advance to the value (usually START_OBJECT for the actual Bean)
     p.nextToken();
 
-        // Minor complication: we may need to merge type id in?
+    // if type-id needs to be exposed as a property, inject it
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+        tb.writeStartObject();
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
 
+    // delegate to the real deserializer
     Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
+    // then expect closing END_OBJECT of the wrapper
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
             "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
\ No newline at end of file
