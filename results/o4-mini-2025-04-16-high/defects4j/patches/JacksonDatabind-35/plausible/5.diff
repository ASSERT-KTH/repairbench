diff --git a/tmp/68a31b36-147d-4ab4-aa54-a13d673b9e25_buggy.java b/tmp/7ef50ad4-85cd-4dfe-8dbf-650e56470fa5_fixed.java
index 7d8d756..006fc6e 100644
--- a/tmp/68a31b36-147d-4ab4-aa54-a13d673b9e25_buggy.java
+++ b/tmp/7ef50ad4-85cd-4dfe-8dbf-650e56470fa5_fixed.java
@@ -1,48 +1,54 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
-            // should always get field name, but just in case...
+
+    // two entry‐points: either we're just at START_OBJECT (normal wrapper),
+    // or we've already consumed START_OBJECT (e.g. in ObjectId handling) and
+    // are positioned at the FIELD_NAME of the type‐wrapper.
+    String typeId;
+    JsonToken curr = p.getCurrentToken();
+    if (curr == JsonToken.START_OBJECT) {
+        // consume wrapper-start, expect a field-name for the type id
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
-        final String typeId = p.getText();
+        typeId = p.getText();
+        p.nextToken();
+    } else if (curr == JsonToken.FIELD_NAME) {
+        // already at the wrapper field-name (type id)
+        typeId = p.getText();
+        p.nextToken();
+    } else {
+        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+    }
+
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
 
-        // Minor complication: we may need to merge type id in?
+    // Minor complication: may need to merge type id in?
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+        tb.writeStartObject();
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
 
     Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
+
+    // And then need the closing END_OBJECT of the wrapper
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                 "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
\ No newline at end of file
