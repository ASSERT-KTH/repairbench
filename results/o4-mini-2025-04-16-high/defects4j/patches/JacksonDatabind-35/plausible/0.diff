diff --git a/tmp/167aa919-35e3-4943-b63d-08136937e49b_buggy.java b/tmp/69c8e703-f73e-40c6-bed6-a5ccbff5ca79_fixed.java
index 7d8d756..1fa6375 100644
--- a/tmp/167aa919-35e3-4943-b63d-08136937e49b_buggy.java
+++ b/tmp/69c8e703-f73e-40c6-bed6-a5ccbff5ca79_fixed.java
@@ -1,48 +1,48 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
-        // 02-Aug-2013, tatu: May need to use native type ids
+    // First: check for native type ids (some formats support embedded type id)
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
-            // should always get field name, but just in case...
+    // Wrapper‐object style: type id is the field name inside an OBJECT wrapper.
+    // In case of Object Id handling upstream, the START_OBJECT may already have
+    // been consumed, so we allow either START_OBJECT or FIELD_NAME here.
+    JsonToken curr = p.getCurrentToken();
+    if (curr == JsonToken.START_OBJECT) {
+        // standard case: consume wrapper start, next must be FIELD_NAME for type id
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
+    } else if (curr != JsonToken.FIELD_NAME) {
+        // neither at wrapper start nor at type‐id field: fail
+        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+    }
+    // At this point, parser is at FIELD_NAME whose text is the type id
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+    // advance to the actual value (should be START_OBJECT for bean/value)
     p.nextToken();
-
-        // Minor complication: we may need to merge type id in?
+    // If type id should be visible as a property, insert it:
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+        tb.writeStartObject();
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
-        
+    // Delegate to the actual deserializer
     Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
+    // Finally, close the wrapper‐object
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                 "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
\ No newline at end of file
