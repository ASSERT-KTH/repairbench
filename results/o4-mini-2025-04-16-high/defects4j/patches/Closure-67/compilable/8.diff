diff --git a/tmp/a6fd6967-eff1-4339-a559-f5650ada148f_buggy.java b/tmp/e6a25538-bf0b-48af-b17e-598524611acb_fixed.java
index 939f49b..c8c4f8a 100644
--- a/tmp/a6fd6967-eff1-4339-a559-f5650ada148f_buggy.java
+++ b/tmp/e6a25538-bf0b-48af-b17e-598524611acb_fixed.java
@@ -1,21 +1,21 @@
 private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+  Node lhs = assign.getFirstChild();
+  // Allow both dot and bracket access on the LHS
+  if (lhs != null
+      && NodeUtil.isVarOrSimpleAssignLhs(lhs, assign)
+      && (lhs.getType() == Token.GETPROP || lhs.getType() == Token.GETELEM)) {
+    Node targetObj = lhs.getFirstChild();
+    // We only care about assignments to X.prototype.Y or X.prototype['Y']
+    if (targetObj != null
+        && (targetObj.getType() == Token.GETPROP || targetObj.getType() == Token.GETELEM)) {
+      // In both GETPROP and GETELEM the "prototype" name is the second child of targetObj
+      Node protoName = targetObj.getFirstChild().getNext();
+      if (protoName != null
+          && protoName.getType() == Token.STRING
+          && "prototype".equals(protoName.getString())) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
