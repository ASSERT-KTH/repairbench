diff --git a/tmp/7be1a755-e6c5-46c9-bc3a-4cd55a2f0484_buggy.java b/tmp/24a1c10c-27dd-4aa4-9145-9daef39c6d52_fixed.java
index 939f49b..7c1311c 100644
--- a/tmp/7be1a755-e6c5-46c9-bc3a-4cd55a2f0484_buggy.java
+++ b/tmp/24a1c10c-27dd-4aa4-9145-9daef39c6d52_fixed.java
@@ -1,21 +1,20 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+  if (n == null || !NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+    return false;
+  }
+  // Allow both dot and bracket forms: foo.prototype.bar and foo.prototype['bar']
+  if (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM) {
+    Node obj = n.getFirstChild();  // the part before .bar or ['bar']
+    if (obj != null && obj.getType() == Token.GETPROP) {
+      // Check that the inner GETPROP is "... .prototype"
+      Node protoName = obj.getFirstChild().getNext();
+      if (protoName != null
+          && protoName.getType() == Token.STRING
+          && "prototype".equals(protoName.getString())) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
