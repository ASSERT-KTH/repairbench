diff --git a/tmp/46250fce-e765-4b50-beb7-00d83daa965b_buggy.java b/tmp/b14a66c5-9295-406e-99d1-69288e934137_fixed.java
index 939f49b..c370a7f 100644
--- a/tmp/46250fce-e765-4b50-beb7-00d83daa965b_buggy.java
+++ b/tmp/b14a66c5-9295-406e-99d1-69288e934137_fixed.java
@@ -1,21 +1,21 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+  if (n != null
+      && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
+      // allow both dot and bracket prototype‐property assignments
+      && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
+    boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
     if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      // n.getFirstChild() is the GETPROP for “e.prototype”
+      Node protoGet = n.getFirstChild();
+      // its second child is the 'prototype' name
+      Node child = protoGet.getFirstChild().getNext();
+      if (child.getType() == Token.STRING
+          && child.getString().equals("prototype")) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
