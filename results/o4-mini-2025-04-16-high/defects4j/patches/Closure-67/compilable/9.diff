diff --git a/tmp/41b732ba-0174-4245-8d63-1b85b97bb99b_buggy.java b/tmp/9f9ce49b-9b39-4c6d-9107-d7ba0a6dfd2b_fixed.java
index 939f49b..4392f0c 100644
--- a/tmp/41b732ba-0174-4245-8d63-1b85b97bb99b_buggy.java
+++ b/tmp/9f9ce49b-9b39-4c6d-9107-d7ba0a6dfd2b_fixed.java
@@ -1,21 +1,24 @@
 private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+  Node lhs = assign.getFirstChild();
+  if (lhs == null || !NodeUtil.isVarOrSimpleAssignLhs(lhs, assign)) {
+    return false;
+  }
+  // Allow both dot- and bracket-access on the left-hand side
+  if (lhs.getType() != Token.GETPROP && lhs.getType() != Token.GETELEM) {
+    return false;
+  }
+  Node qualifier = lhs.getFirstChild();
+  if (qualifier == null
+      || (qualifier.getType() != Token.GETPROP
+          && qualifier.getType() != Token.GETELEM)) {
+    return false;
+  }
+  // Check that the qualifier is ".prototype"
+  Node protoName = qualifier.getFirstChild().getNext();
+  if (protoName != null
+      && protoName.getType() == Token.STRING
+      && "prototype".equals(protoName.getString())) {
     return true;
   }
-        }
-      }
-
   return false;
 }
\ No newline at end of file
