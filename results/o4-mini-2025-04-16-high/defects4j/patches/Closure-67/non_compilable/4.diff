diff --git a/tmp/33c580ae-a920-458e-b3de-c41ca604ef97_buggy.java b/tmp/54781eec-2ab5-4ba6-b8b9-6bff94f675e0_fixed.java
index 939f49b..cc1bffa 100644
--- a/tmp/33c580ae-a920-458e-b3de-c41ca604ef97_buggy.java
+++ b/tmp/54781eec-2ab5-4ba6-b8b9-6bff94f675e0_fixed.java
@@ -1,21 +1,23 @@
 private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+  Node lhs = assign.getFirstChild();
+  // Must be a simple/property‐assignment LHS and either .foo or ['foo']
+  if (lhs == null
+      || !NodeUtil.isVarOrSimpleAssignLhs(lhs, assign)
+      || (lhs.getType() != Token.GETPROP
+          && lhs.getType() != Token.GETELEM)) {
+    return false;
+  }
+  // Check for a chain of the form:  Something.prototype.<prop>
+  Node inner = lhs.getFirstChild();
+  if (inner == null || inner.getType() != Token.GETPROP) {
+    return false;
+  }
+  // inner is Something.prototype → verify the "prototype" string
+  Node protoName = inner.getSecondChild();
+  if (protoName != null
+      && protoName.getType() == Token.STRING
+      && "prototype".equals(protoName.getString())) {
     return true;
   }
-        }
-      }
-
   return false;
 }
\ No newline at end of file
