diff --git a/tmp/bd47b7f5-86ef-4a88-bf09-000f3c0b59ce_buggy.java b/tmp/9ca873b6-c4e4-447b-8655-2fb4b0a6154e_fixed.java
index 4f21a3a..8ab5b60 100644
--- a/tmp/bd47b7f5-86ef-4a88-bf09-000f3c0b59ce_buggy.java
+++ b/tmp/9ca873b6-c4e4-447b-8655-2fb4b0a6154e_fixed.java
@@ -1,14 +1,26 @@
 /**
  * Helper method used by standard deserializer.
  * 
  * @since 2.3
  */
 public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
 {
+    JsonToken t = jp.getCurrentToken();
+    // As per [databind#592], if we're starting at a FIELD_NAME,
+    // assume a missing START_OBJECT around the sequence of fields:
+    if (t == JsonToken.FIELD_NAME) {
+        // inject a synthetic START_OBJECT
+        writeStartObject();
+        // copy all consecutive fields
+        while (jp.getCurrentToken() == JsonToken.FIELD_NAME) {
             copyCurrentStructure(jp);
-        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
-         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
-         *    to assume one did exist.
-         */
+            jp.nextToken();
+        }
+        // close the synthetic object
+        writeEndObject();
+    } else {
+        // normal case: just copy the whole structure (object, array, scalar)
+        copyCurrentStructure(jp);
+    }
     return this;
 }
\ No newline at end of file
