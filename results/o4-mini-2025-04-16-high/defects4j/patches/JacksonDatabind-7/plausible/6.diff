diff --git a/tmp/2ef5acc3-dc2e-47cb-8e5c-1ace77fa8f05_buggy.java b/tmp/f01659ee-db1a-4019-a4c6-fb2e6b8a5629_fixed.java
index 4f21a3a..bf0e69f 100644
--- a/tmp/2ef5acc3-dc2e-47cb-8e5c-1ace77fa8f05_buggy.java
+++ b/tmp/f01659ee-db1a-4019-a4c6-fb2e6b8a5629_fixed.java
@@ -1,14 +1,25 @@
 /**
  * Helper method used by standard deserializer.
  * 
  * @since 2.3
  */
 public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
 {
+    JsonToken t = jp.getCurrentToken();
+    // special case: missing START_OBJECT, parser is already at FIELD_NAME
+    if (t == JsonToken.FIELD_NAME) {
+        // pretend we had an enclosing object
+        writeStartObject();
+        // copy the first field
         copyCurrentStructure(jp);
-        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
-         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
-         *    to assume one did exist.
-         */
+        // copy remaining fields until real END_OBJECT
+        while (jp.nextToken() != JsonToken.END_OBJECT) {
+            copyCurrentStructure(jp);
+        }
+        // close the object we opened
+        writeEndObject();
+    } else {
+        copyCurrentStructure(jp);
+    }
     return this;
 }
\ No newline at end of file
