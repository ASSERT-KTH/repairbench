diff --git a/tmp/10d8568c-c272-4d8a-8c9a-a0bf0a518755_buggy.java b/tmp/f01d0568-bc43-478b-8e66-ce4979c153ce_fixed.java
index 4f21a3a..ccc0423 100644
--- a/tmp/10d8568c-c272-4d8a-8c9a-a0bf0a518755_buggy.java
+++ b/tmp/f01d0568-bc43-478b-8e66-ce4979c153ce_fixed.java
@@ -1,14 +1,24 @@
 /**
  * Helper method used by standard deserializer.
  * 
  * @since 2.3
  */
 public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
 {
+    JsonToken t = jp.getCurrentToken();
+    // Special case: if we are positioned on a FIELD_NAME, assume
+    // we are inside an object whose START_OBJECT was skipped,
+    // so wrap fields in an artificial START/END_OBJECT.
+    if (t == JsonToken.FIELD_NAME) {
+        writeStartObject();
+        // copy all remaining fields
+        do {
             copyCurrentStructure(jp);
-        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
-         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
-         *    to assume one did exist.
-         */
+        } while (jp.nextToken() == JsonToken.FIELD_NAME);
+        writeEndObject();
+    } else {
+        // default: just copy the full structure from the current token
+        copyCurrentStructure(jp);
+    }
     return this;
 }
\ No newline at end of file
