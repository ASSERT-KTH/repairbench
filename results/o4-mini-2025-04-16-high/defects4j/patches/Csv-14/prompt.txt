You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    // the original object is needed so can check for Number
    private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
            final Appendable out, final boolean newRecord) throws IOException {
        boolean quote = false;
        int start = offset;
        int pos = offset;
        final int end = offset + len;

        final char delimChar = getDelimiter();
        final char quoteChar = getQuoteCharacter().charValue();

        QuoteMode quoteModePolicy = getQuoteMode();
        if (quoteModePolicy == null) {
            quoteModePolicy = QuoteMode.MINIMAL;
        }
        switch (quoteModePolicy) {
        case ALL:
            quote = true;
            break;
        case NON_NUMERIC:
            quote = !(object instanceof Number);
            break;
        case NONE:
            // Use the existing escaping code
            printAndEscape(value, offset, len, out);
            return;
        case MINIMAL:
            if (len <= 0) {
                // always quote an empty token that is the first
                // on the line, as it may be the only thing on the
                // line. If it were not quoted in that case,
                // an empty line has no tokens.
                if (newRecord) {
                    quote = true;
                }
            } else {
                char c = value.charAt(pos);

                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
                    quote = true;
                } else if (c <= COMMENT) {
                    // Some other chars at the start of a value caused the parser to fail, so for now
                    // encapsulate if we start in anything less than '#'. We are being conservative
                    // by including the default comment char too.
                    quote = true;
                } else {
                    while (pos < end) {
                        c = value.charAt(pos);
                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                            quote = true;
                            break;
                        }
                        pos++;
                    }

                    if (!quote) {
                        pos = end - 1;
                        c = value.charAt(pos);
                        // Some other chars at the end caused the parser to fail, so for now
                        // encapsulate if we end in anything less than ' '
                        if (c <= SP) {
                            quote = true;
                        }
                    }
                }
            }

            if (!quote) {
                // no encapsulation needed - write out the original value
                out.append(value, start, end);
                return;
            }
            break;
        default:
            throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
        }

        if (!quote) {
            // no encapsulation needed - write out the original value
            out.append(value, start, end);
            return;
        }

        // we hit something that needed encapsulation
        out.append(quoteChar);

        // Pick up where we left off: pos should be positioned on the first character that caused
        // the need for encapsulation.
        while (pos < end) {
            final char c = value.charAt(pos);
            if (c == quoteChar) {
                // write out the chunk up until this point

                // add 1 to the length to write out the encapsulator also
                out.append(value, start, pos + 1);
                // put the next starting position on the encapsulator so we will
                // write it out again with the next string (effectively doubling it)
                start = pos;
            }
            pos++;
        }

        // write the last segment
        out.append(value, start, pos);
        out.append(quoteChar);
    }

```

The code fails the following tests.

Test `org.apache.commons.csv.CSVPrinterTest::testEscapeNull1`:
```java
    @Test
    public void testEscapeNull1() throws IOException {
        StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {
            printer.print("\\");
        }
        assertEquals("\\", sw.toString());
    }

```
Test `org.apache.commons.csv.CSVPrinterTest::testEscapeNull1` error:
```
junit.framework.AssertionFailedError: expected:<[\\]> but was:<[\\]>;org.apache.commons.csv.CSVPrinterTest::testEscapeNull5
```

Test `org.apache.commons.csv.CSVPrinterTest::testEscapeNull4`:
```java
    @Test
    public void testEscapeNull4() throws IOException {
        StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {
            printer.print("\\\\");
        }
        assertEquals("\\\\", sw.toString());
    }

```
Test `org.apache.commons.csv.CSVPrinterTest::testEscapeNull4` error:
```
junit.framework.AssertionFailedError: expected:<[\\]> but was:<[\\]>;org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash1
```

Test `org.apache.commons.csv.CSVPrinterTest::testEscapeNull5`:
```java
    @Test
    public void testEscapeNull5() throws IOException {
        StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {
            printer.print("\\\\");
        }
        assertEquals("\\\\", sw.toString());
    }

```
Test `org.apache.commons.csv.CSVPrinterTest::testEscapeNull5` error:
```
junit.framework.AssertionFailedError: expected:<[\]> but was:<['\']>;org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash4
```

Test `org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash1`:
```java
    @Test
    public void testEscapeBackslash1() throws IOException {
        StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {
            printer.print("\\");
        }
        assertEquals("\\", sw.toString());
    }

```
Test `org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash1` error:
```
junit.framework.AssertionFailedError: expected:<[\\]> but was:<['\\']>;org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash5
```

Test `org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash4`:
```java
    @Test
    public void testEscapeBackslash4() throws IOException {
        StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {
            printer.print("\\\\");
        }
        assertEquals("\\\\", sw.toString());
    }

```
Test `org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash4` error:
```
junit.framework.AssertionFailedError: expected:<[\\]> but was:<['\\']>
```

Test `org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash5`:
```java
    @Test
    public void testEscapeBackslash5() throws IOException {
        StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {
            printer.print("\\\\");
        }
        assertEquals("\\\\", sw.toString());
    }

```
Test `org.apache.commons.csv.CSVPrinterTest::testEscapeBackslash5` error:
```
junit.framework.AssertionFailedError: expected:<[\\]> but was:<['\\']>
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
