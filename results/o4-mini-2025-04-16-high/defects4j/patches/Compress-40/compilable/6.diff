diff --git a/tmp/d5600813-0eb3-40d5-81fc-5a9072a6edcf_buggy.java b/tmp/5ae0fe42-e964-4fd6-a81f-814ad035f67d_fixed.java
index 7116384..b1f0d0d 100644
--- a/tmp/d5600813-0eb3-40d5-81fc-5a9072a6edcf_buggy.java
+++ b/tmp/5ae0fe42-e964-4fd6-a81f-814ad035f67d_fixed.java
@@ -1,39 +1,81 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
+    if (count == 0) {
+        return 0L;
     }
+    long result = 0L;
+    int bitsRead = 0;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+        // 1) consume any leftover bits from the last read
+        if (bitsCachedSize > 0) {
+            int toRead = Math.min(bitsCachedSize, count);
+            long bits = bitsCached & MASKS[toRead];
+            result |= bits << bitsRead;
+            bitsCached >>>= toRead;
+            bitsCachedSize -= toRead;
+            bitsRead += toRead;
         }
-            bitsCachedSize += 8;
+        // 2) read as many full bytes as we can
+        while (bitsRead + 8 <= count) {
+            int next = in.read();
+            if (next < 0) {
+                return -1L;
+            }
+            result |= ((long) next) << bitsRead;
+            bitsRead += 8;
+        }
+        // 3) read any remaining partial byte
+        if (bitsRead < count) {
+            int rem = count - bitsRead;
+            int next = in.read();
+            if (next < 0) {
+                return -1L;
+            }
+            long bits = next & MASKS[rem];
+            result |= bits << bitsRead;
+            bitsRead += rem;
+            // stash the unused high‐order bits for the next call
+            bitsCached = next >>> rem;
+            bitsCachedSize = 8 - rem;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
     } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        // BIG_ENDIAN
+        // 1) consume any leftover bits from the last read
+        if (bitsCachedSize > 0) {
+            int toRead = Math.min(bitsCachedSize, count);
+            int shift = bitsCachedSize - toRead;
+            long bits = (bitsCached >> shift) & MASKS[toRead];
+            result = bits;
+            bitsCached &= MASKS[shift];
+            bitsCachedSize -= toRead;
+            bitsRead += toRead;
+        }
+        // 2) read as many full bytes as we can
+        while (bitsRead + 8 <= count) {
+            int next = in.read();
+            if (next < 0) {
+                return -1L;
+            }
+            result = (result << 8) | next;
+            bitsRead += 8;
+        }
+        // 3) read any remaining partial byte
+        if (bitsRead < count) {
+            int rem = count - bitsRead;
+            int next = in.read();
+            if (next < 0) {
+                return -1L;
+            }
+            int shift = 8 - rem;
+            long bits = (next >> shift) & MASKS[rem];
+            result = (result << rem) | bits;
+            // stash the unused low‐order bits for the next call
+            bitsCached = next & MASKS[shift];
+            bitsCachedSize = shift;
+            bitsRead += rem;
+        }
     }
-            bitsCachedSize -= count;
-        return bitsOut;
+    return result;
 }
\ No newline at end of file
