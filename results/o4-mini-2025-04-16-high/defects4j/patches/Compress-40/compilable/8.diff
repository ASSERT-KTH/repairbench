diff --git a/tmp/90ecba8d-7d3c-4fed-810c-b6b0b527c6d2_buggy.java b/tmp/853664a3-22f3-4e81-af2d-3f1a41966aab_fixed.java
index 7116384..691cfa0 100644
--- a/tmp/90ecba8d-7d3c-4fed-810c-b6b0b527c6d2_buggy.java
+++ b/tmp/853664a3-22f3-4e81-af2d-3f1a41966aab_fixed.java
@@ -1,39 +1,51 @@
 /**
  * Returns at most 63 bits read from the underlying stream.
  *
  * @param count the number of bits to read, must be a positive
  * number not bigger than 63.
  * @return the bits concatenated as a long using the stream's byte order.
  *         -1 if the end of the underlying stream has been reached before reading
  *         the requested number of bits
  * @throws IOException on error
  */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
-            }
+    long result = 0L;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+        // LSB-first: each bit goes into result at position i
+        for (int i = 0; i < count; i++) {
+            if (bitsCachedSize == 0) {
+                int b = in.read();
+                if (b < 0) {
+                    return -1L;
                 }
-            bitsCachedSize += 8;
+                bitsCached = b & 0xFFL;
+                bitsCachedSize = 8;
+            }
+            result |= (bitsCached & 1L) << i;
+            bitsCached >>>= 1;
+            bitsCachedSize--;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
     } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        // MSB-first: shift result left and OR in each new bit
+        for (int i = 0; i < count; i++) {
+            if (bitsCachedSize == 0) {
+                int b = in.read();
+                if (b < 0) {
+                    return -1L;
+                }
+                bitsCached = b & 0xFFL;
+                bitsCachedSize = 8;
+            }
+            int shift = bitsCachedSize - 1;
+            long bit = (bitsCached >>> shift) & 1L;
+            bitsCachedSize--;
+            // clear out the bit we just consumed (optional since we track size)
+            bitsCached &= MASKS[bitsCachedSize];
+            result = (result << 1) | bit;
+        }
     }
-            bitsCachedSize -= count;
-        return bitsOut;
+    return result;
 }
\ No newline at end of file
