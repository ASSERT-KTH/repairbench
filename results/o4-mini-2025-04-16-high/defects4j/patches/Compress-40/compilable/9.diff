diff --git a/tmp/b02ec57b-3dba-486c-b943-780060eccfa9_buggy.java b/tmp/abb819f1-f516-44e8-ace5-3f1642f5f8ec_fixed.java
index 7116384..5d50454 100644
--- a/tmp/b02ec57b-3dba-486c-b943-780060eccfa9_buggy.java
+++ b/tmp/abb819f1-f516-44e8-ace5-3f1642f5f8ec_fixed.java
@@ -1,39 +1,49 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
+    // Use BigInteger as temporary to avoid overflow on shifts beyond 64 bits
+    java.math.BigInteger buf = java.math.BigInteger.valueOf(bitsCached);
+    int bufSize = bitsCachedSize;
+    // Fill until we have at least 'count' bits
+    while (bufSize < count) {
+        int r = in.read();
+        if (r < 0) {
+            // EOF before filling requested bits
+            return -1;
         }
+        long nb = r & 0xFFL;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+            // Append new byte at low end
+            buf = buf.or(java.math.BigInteger.valueOf(nb).shiftLeft(bufSize));
         } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+            // Append new byte at high end (shift current up 8 bits)
+            buf = buf.shiftLeft(8).or(java.math.BigInteger.valueOf(nb));
         }
-            bitsCachedSize += 8;
+        bufSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
+    // Extract the requested bits
+    long result;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
+        // lower 'count' bits
+        result = buf.and(java.math.BigInteger.valueOf(MASKS[count])).longValue();
+        // discard those bits
+        buf = buf.shiftRight(count);
     } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        // upper 'count' bits
+        int shift = bufSize - count;
+        result = buf.shiftRight(shift)
+                    .and(java.math.BigInteger.valueOf(MASKS[count]))
+                    .longValue();
+        // discard the extracted bits, keep the low 'shift' bits
+        if (shift > 0) {
+            buf = buf.and(java.math.BigInteger.valueOf(MASKS[shift]));
+        } else {
+            buf = java.math.BigInteger.ZERO;
+        }
     }
-            bitsCachedSize -= count;
-        return bitsOut;
+    // Update the cache
+    bitsCached = buf.longValue();
+    bitsCachedSize = bufSize - count;
+    return result;
 }
\ No newline at end of file
