diff --git a/tmp/1940eeec-a77d-4483-a629-d0a18ad7150c_buggy.java b/tmp/9eaaa695-dce2-44db-9e77-cc93d287bea6_fixed.java
index 7116384..94d3987 100644
--- a/tmp/1940eeec-a77d-4483-a629-d0a18ad7150c_buggy.java
+++ b/tmp/9eaaa695-dce2-44db-9e77-cc93d287bea6_fixed.java
@@ -1,39 +1,38 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
+    if (count == 0) {
+        return 0L;
     }
+    long result = 0L;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+        for (int i = 0; i < count; i++) {
+            if (bitsCachedSize == 0) {
+                int nextByte = in.read();
+                if (nextByte < 0) {
+                    return -1L;
                 }
-            bitsCachedSize += 8;
+                bitsCached = nextByte & 0xFFL;
+                bitsCachedSize = 8;
+            }
+            result |= (bitsCached & 1L) << i;
+            bitsCached >>>= 1;
+            bitsCachedSize--;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
     } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        for (int i = 0; i < count; i++) {
+            if (bitsCachedSize == 0) {
+                int nextByte = in.read();
+                if (nextByte < 0) {
+                    return -1L;
+                }
+                bitsCached = nextByte & 0xFFL;
+                bitsCachedSize = 8;
+            }
+            bitsCachedSize--;
+            result = (result << 1) | ((bitsCached >>> bitsCachedSize) & 1L);
+        }
     }
-            bitsCachedSize -= count;
-        return bitsOut;
+    return result;
 }
\ No newline at end of file
