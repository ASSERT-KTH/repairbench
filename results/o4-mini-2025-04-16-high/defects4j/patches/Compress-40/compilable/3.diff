diff --git a/tmp/7adfeb61-597f-4185-859a-29cd69a1c88d_buggy.java b/tmp/05cf9629-abae-4b96-8b67-642a04879708_fixed.java
index 7116384..d4e5add 100644
--- a/tmp/7adfeb61-597f-4185-859a-29cd69a1c88d_buggy.java
+++ b/tmp/05cf9629-abae-4b96-8b67-642a04879708_fixed.java
@@ -1,39 +1,68 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
+        if (count == 0) {
+            return 0L;
         }
+        // Fill with whole bytes while it is safe (won't overflow) and still under count
+        while (bitsCachedSize < count && bitsCachedSize <= MAXIMUM_CACHE_SIZE - 8) {
+            final int next = in.read();
+            if (next < 0) {
+                return -1L;
+            }
+            final long nextByte = next & 0xFFL;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+                bitsCached |= nextByte << bitsCachedSize;
             } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+                bitsCached = (bitsCached << 8) | nextByte;
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
+        // If still not enough bits, read only the partial byte needed
+        if (bitsCachedSize < count) {
+            final int next = in.read();
+            if (next < 0) {
+                return -1L;
+            }
+            final long nextByte = next & 0xFFL;
+            final int bitsNeeded = count - bitsCachedSize; // between 1 and 7
+            long leftover;
+            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                // take low-order bitsNeeded bits
+                long bitsToAdd = nextByte & MASKS[bitsNeeded];
+                bitsCached |= bitsToAdd << bitsCachedSize;
+                leftover = nextByte >>> bitsNeeded;
+            } else {
+                // take high-order bitsNeeded bits
+                long bitsToAdd = (nextByte >> (8 - bitsNeeded)) & MASKS[bitsNeeded];
+                bitsCached = (bitsCached << bitsNeeded) | bitsToAdd;
+                leftover = nextByte & MASKS[8 - bitsNeeded];
+            }
+            bitsCachedSize += bitsNeeded;
+            // We now have exactly 'count' bits
+            final long bitsOut;
+            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                bitsOut = bitsCached & MASKS[count];
+            } else {
+                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            }
+            // consume them
+            bitsCachedSize -= count; // will drop to zero
+            // install leftover bits for next time
+            bitsCached = leftover;
+            return bitsOut;
+        }
+        // Standard extraction without overflow risk
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
+            bitsOut = bitsCached & MASKS[count];
             bitsCached >>>= count;
         } else {
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            // discard the consumed top bits
+            bitsCached &= MASKS[bitsCachedSize - count];
         }
         bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
