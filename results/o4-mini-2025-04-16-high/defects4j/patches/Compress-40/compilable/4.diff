diff --git a/tmp/222edc8c-ae5d-4e0d-9382-fa4e9d002173_buggy.java b/tmp/9ad344b0-0f78-42e2-b64e-3f0b1a39211a_fixed.java
index 7116384..2a004f5 100644
--- a/tmp/222edc8c-ae5d-4e0d-9382-fa4e9d002173_buggy.java
+++ b/tmp/9ad344b0-0f78-42e2-b64e-3f0b1a39211a_fixed.java
@@ -1,39 +1,58 @@
 /**
  * Returns at most 63 bits read from the underlying stream.
  *
  * @param count the number of bits to read, must be a positive
  *        number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
+ * @return the bits concatenated as a long using the stream's byte order,
+ *         or -1 if the end of the underlying stream has been reached
+ *         before reading the requested number of bits.
  * @throws IOException on error
  */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
-        }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
+        throw new IllegalArgumentException(
+            "count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
+    int bitsToRead = count;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+        long result = 0L;
+        int shift = 0;
+        while (bitsToRead > 0) {
+            if (bitsCachedSize == 0) {
+                final int next = in.read();
+                if (next < 0) {
+                    return -1L;
                 }
-            bitsCachedSize += 8;
+                bitsCached = next & 0xFFL;
+                bitsCachedSize = 8;
             }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
+            final int take = Math.min(bitsCachedSize, bitsToRead);
+            long bits = bitsCached & MASKS[take];
+            result |= (bits << shift);
+            bitsCached >>>= take;
+            bitsCachedSize -= take;
+            shift += take;
+            bitsToRead -= take;
+        }
+        return result;
     } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        long result = 0L;
+        while (bitsToRead > 0) {
+            if (bitsCachedSize == 0) {
+                final int next = in.read();
+                if (next < 0) {
+                    return -1L;
+                }
+                bitsCached = next & 0xFFL;
+                bitsCachedSize = 8;
+            }
+            final int take = Math.min(bitsCachedSize, bitsToRead);
+            long bits = (bitsCached >> (bitsCachedSize - take)) & MASKS[take];
+            result = (result << take) | bits;
+            bitsCached &= MASKS[bitsCachedSize - take];
+            bitsCachedSize -= take;
+            bitsToRead -= take;
+        }
+        return result;
     }
-            bitsCachedSize -= count;
-        return bitsOut;
 }
\ No newline at end of file
