diff --git a/tmp/6fb6922e-6e60-4325-a0a4-6dad31055d9e_buggy.java b/tmp/529cd856-22f0-49ce-9c7f-3b7533719967_fixed.java
index 88647d1..8b3e66d 100644
--- a/tmp/6fb6922e-6e60-4325-a0a4-6dad31055d9e_buggy.java
+++ b/tmp/529cd856-22f0-49ce-9c7f-3b7533719967_fixed.java
@@ -1,44 +1,49 @@
 /**
  * Find a zero in the given interval.
  * <p>
  * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
+ * signs, or that one of them is (approximately) zero. An
+ * <code>IllegalArgumentException</code> is thrown if neither endpoint is a
+ * root nor do the endpoint values bracket a root.</p>
  * 
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
  * @throws FunctionEvaluationException if an error occurs evaluating the
  * function 
  * @throws IllegalArgumentException if min is not less than max or the
  * signs of the values of the function at the endpoints are not opposites
+ *         and neither endpoint is (approximately) a root
  */
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
-        FunctionEvaluationException {
+public double solve(double min, double max)
+    throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifyInterval(min, max);
 
-        double ret = Double.NaN;
-        
+    // evaluate endpoints
     double yMin = f.value(min);
+    // if the lower endpoint is (approximately) a root, return it
+    if (Math.abs(yMin) <= getAbsoluteAccuracy()) {
+        return min;
+    }
     double yMax = f.value(max);
+    // if the upper endpoint is (approximately) a root, return it
+    if (Math.abs(yMax) <= getAbsoluteAccuracy()) {
+        return max;
+    }
 
-        // Verify bracketing
+    // check for a proper bracket
     double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
+    if (sign > 0.0) {
+        throw new IllegalArgumentException(
+            "Function values at endpoints do not have different signs." +
             "  Endpoints: [" + min + "," + max + "]" +
-                        "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+            "  Values: [" + yMin + "," + yMax + "]"
+        );
     }
 
-        return ret;
+    // endpoints bracket a root: invoke the full Brent algorithm
+    return solve(min, yMin, max, yMax, min, yMin);
 }
\ No newline at end of file
