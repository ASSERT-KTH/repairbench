diff --git a/tmp/34f00248-4c8d-4445-8489-e08ef7a2f048_buggy.java b/tmp/afdc3c86-6d51-4404-8d31-0cd905a7735a_fixed.java
index 88647d1..b1a2be2 100644
--- a/tmp/34f00248-4c8d-4445-8489-e08ef7a2f048_buggy.java
+++ b/tmp/afdc3c86-6d51-4404-8d31-0cd905a7735a_fixed.java
@@ -1,44 +1,30 @@
-    /**
-     * Find a zero in the given interval.
-     * <p>
-     * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
-     * 
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
-     */
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
-        FunctionEvaluationException {
+public double solve(double min, double max)
+    throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifyInterval(min, max);
 
-        double ret = Double.NaN;
-        
+    // Evaluate endpoints
     double yMin = f.value(min);
     double yMax = f.value(max);
 
-        // Verify bracketing
+    // If either endpoint is (close to) a root, return it immediately
+    if (Math.abs(yMin) <= getFunctionValueAccuracy()) {
+        return min;
+    }
+    if (Math.abs(yMax) <= getFunctionValueAccuracy()) {
+        return max;
+    }
+
+    // Verify that the interval brackets a root
     double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
+    if (sign >= 0.0) {
+        throw new IllegalArgumentException(
+            "Function values at endpoints do not have different signs." +
             "  Endpoints: [" + min + "," + max + "]" +
             "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
     }
 
-        return ret;
+    // Invoke the full Brent routine
+    return solve(min, yMin, max, yMax, min, yMin);
 }
\ No newline at end of file
