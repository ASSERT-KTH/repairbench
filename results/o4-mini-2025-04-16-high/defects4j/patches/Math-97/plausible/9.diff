diff --git a/tmp/ec5338e4-930c-4e12-9b09-91c4dd033ddd_buggy.java b/tmp/4a9bc8f7-76ed-49f4-8d09-da92e70caea7_fixed.java
index 88647d1..1ffcd97 100644
--- a/tmp/ec5338e4-930c-4e12-9b09-91c4dd033ddd_buggy.java
+++ b/tmp/4a9bc8f7-76ed-49f4-8d09-da92e70caea7_fixed.java
@@ -1,44 +1,45 @@
 /**
  * Find a zero in the given interval.
  * <p>
  * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
+ * signs, or that one of the endpoints is (approximately) a root. An
+ * <code>IllegalArgumentException</code> is thrown if neither endpoint is a
+ * root and the endpoints do not bracket a root.</p>
  * 
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
+ * @throws FunctionEvaluationException if an error occurs evaluating the function 
  * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
+ *         endpoints neither bracket a root nor one is already a root
  */
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
-        FunctionEvaluationException {
-        
+public double solve(double min, double max)
+    throws MaxIterationsExceededException, FunctionEvaluationException {
     clearResult();
     verifyInterval(min, max);
 
-        double ret = Double.NaN;
-        
+    // Evaluate endpoints
     double yMin = f.value(min);
     double yMax = f.value(max);
 
-        // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
+    // If either endpoint is (approximately) a root, return it
+    if (Math.abs(yMin) <= getAbsoluteAccuracy()) {
+        return min;
+    }
+    if (Math.abs(yMax) <= getAbsoluteAccuracy()) {
+        return max;
+    }
+
+    // Verify that the endpoints bracket a root
+    if (yMin * yMax > 0.0) {
+        throw new IllegalArgumentException(
+            "Function values at endpoints do not have different signs.  " +
             "Endpoints: [" + min + ", " + max + "]  " +
-                        "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+            "Values: [" + yMin + ", " + yMax + "]"
+        );
     }
 
-        return ret;
+    // They bracket a rootâ€”proceed with Brent's method
+    return solve(min, yMin, max, yMax, min, yMin);
 }
\ No newline at end of file
