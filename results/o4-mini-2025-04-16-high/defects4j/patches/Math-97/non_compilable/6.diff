diff --git a/tmp/a2044249-f4ea-4f84-afe1-f77e324a5aba_buggy.java b/tmp/6cb41c4e-a1f8-4f03-8c16-5c6311e25d10_fixed.java
index 88647d1..84e520b 100644
--- a/tmp/a2044249-f4ea-4f84-afe1-f77e324a5aba_buggy.java
+++ b/tmp/6cb41c4e-a1f8-4f03-8c16-5c6311e25d10_fixed.java
@@ -1,44 +1,51 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
-        FunctionEvaluationException {
+    public double solve(double min, double max)
+        throws MaxIterationsExceededException, FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
 
+        // evaluate endpoints
         double yMin = f.value(min);
+        if (Math.abs(yMin) <= getFunctionValueAccuracy()) {
+            // min is (effectively) a root
+            setResult(min, yMin);
+            return min;
+        }
         double yMax = f.value(max);
+        if (Math.abs(yMax) <= getFunctionValueAccuracy()) {
+            // max is (effectively) a root
+            setResult(max, yMax);
+            return max;
+        }
 
-        // Verify bracketing
+        // verify bracketing
         double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
+        if (sign > 0.0) {
+            throw new IllegalArgumentException(
+                "Function values at endpoints do not have different signs." +
                 "  Endpoints: [" + min + "," + max + "]" +
                 "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
+        }
+
+        // bracket is valid, proceed with Brent's method
         ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
-        }
-
         return ret;
     }
\ No newline at end of file
