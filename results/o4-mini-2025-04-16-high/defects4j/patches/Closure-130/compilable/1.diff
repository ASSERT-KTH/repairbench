diff --git a/tmp/ee7bc621-f8fc-4114-b07a-626584fd758f_buggy.java b/tmp/f957aeab-e592-4a61-a19f-0bab207ba516_fixed.java
index bb3193c..8a5103c 100644
--- a/tmp/ee7bc621-f8fc-4114-b07a-626584fd758f_buggy.java
+++ b/tmp/f957aeab-e592-4a61-a19f-0bab207ba516_fixed.java
@@ -1,52 +1,40 @@
-  /**
-   * For each qualified name N in the global scope, we check if:
-   * (a) No ancestor of N is ever aliased or assigned an unknown value type.
-   *     (If N = "a.b.c", "a" and "a.b" are never aliased).
-   * (b) N has exactly one write, and it lives in the global scope.
-   * (c) N is aliased in a local scope.
-   *
-   * If (a) is true, then GlobalNamespace must know all the writes to N.
-   * If (a) and (b) are true, then N cannot change during the execution of
-   *    a local scope.
-   * If (a) and (b) and (c) are true, then the alias can be inlined if the
-   *    alias obeys the usual rules for how we decide whether a variable is
-   *    inlineable.
-   * @see InlineVariables
-   */
 private void inlineAliases(GlobalNamespace namespace) {
   // Invariant: All the names in the worklist meet condition (a).
   Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
   while (!workList.isEmpty()) {
     Name name = workList.pop();
 
     // Don't attempt to inline a getter or setter property as a variable.
     if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
       continue;
     }
 
+    // Condition (b): exactly one write in the global scope, none locally,
+    // and at least one aliasing GET.
     if (name.globalSets == 1 && name.localSets == 0 &&
         name.aliasingGets > 0) {
-        // {@code name} meets condition (b). Find all of its local aliases
-        // and try to inline them.
+      // Find all of its local aliases and try to inline them.
       List<Ref> refs = Lists.newArrayList(name.getRefs());
       for (Ref ref : refs) {
-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
+        // Condition (c): only inline aliasing GETs that are truly property-based
+        // (i.e. GETPROP/GETELEM), not bare NAMEs like "arguments".
+        if (ref.type == Type.ALIASING_GET
+            && ref.scope.isLocal()
+            && (ref.node.isGetProp() || ref.node.isGetElem())) {
           if (inlineAliasIfPossible(ref, namespace)) {
             name.removeRef(ref);
           }
         }
       }
     }
 
-      // Check if {@code name} has any aliases left after the
-      // local-alias-inlining above.
+    // If this name was an object-lit or function, and now has no more
+    // aliasing GETs, we can recurse into its children.
     if ((name.type == Name.Type.OBJECTLIT ||
-           name.type == Name.Type.FUNCTION) &&
-          name.aliasingGets == 0 && name.props != null) {
-        // All of {@code name}'s children meet condition (a), so they can be
-        // added to the worklist.
+         name.type == Name.Type.FUNCTION)
+        && name.aliasingGets == 0
+        && name.props != null) {
       workList.addAll(name.props);
     }
   }
 }
\ No newline at end of file
