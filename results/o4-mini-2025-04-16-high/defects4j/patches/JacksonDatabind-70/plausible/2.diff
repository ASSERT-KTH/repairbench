diff --git a/tmp/1f724a6c-16c0-4bbd-ae52-32a4900ba36d_buggy.java b/tmp/7ae6d845-3da8-4b60-abd9-d1368fe78b38_fixed.java
index 0313249..5e38521 100644
--- a/tmp/1f724a6c-16c0-4bbd-ae52-32a4900ba36d_buggy.java
+++ b/tmp/7ae6d845-3da8-4b60-abd9-d1368fe78b38_fixed.java
@@ -1,32 +1,33 @@
 /**
  * Specialized method for removing specified existing entry.
  * NOTE: entry MUST exist, otherwise an exception is thrown.
  */
-    public void remove(SettableBeanProperty propToRm)
-    {
+public void remove(SettableBeanProperty propToRm) {
     ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
     String key = getPropertyName(propToRm);
     boolean found = false;
 
     for (int i = 1, end = _hashArea.length; i < end; i += 2) {
         SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
         if (prop == null) {
             continue;
         }
         if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
-                    // need to leave a hole here
+            // must check name slot and NOT property.getName(),
+            // as only name slot is lower‐case in case‐insensitive mode
+            String nameSlot = (String) _hashArea[i - 1];
+            if (key.equals(nameSlot)) {
+                found = true;
                 _propsInOrder[_findFromOrdered(prop)] = null;
                 continue;
             }
         }
         props.add(prop);
     }
     if (!found) {
-            throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
+        throw new NoSuchElementException(
+            "No entry '" + propToRm.getName() + "' found, can't remove"
+        );
     }
     init(props);
 }
\ No newline at end of file
