diff --git a/tmp/f5330dc5-ccf5-44ba-8c38-6d181c44f7d4_buggy.java b/tmp/50e9495a-9622-4259-a3b3-8f2402ecb425_fixed.java
index 0313249..b5401ce 100644
--- a/tmp/f5330dc5-ccf5-44ba-8c38-6d181c44f7d4_buggy.java
+++ b/tmp/50e9495a-9622-4259-a3b3-8f2402ecb425_fixed.java
@@ -1,32 +1,34 @@
 /**
  * Specialized method for removing specified existing entry.
  * NOTE: entry MUST exist, otherwise an exception is thrown.
  */
-    public void remove(SettableBeanProperty propToRm)
-    {
+public void remove(SettableBeanProperty propToRm) {
     ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
     String key = getPropertyName(propToRm);
     boolean found = false;
 
+    // _hashArea holds alternating key slots and property slots:
+    // [ key0, prop0, key1, prop1, ... ]
     for (int i = 1, end = _hashArea.length; i < end; i += 2) {
         SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
         if (prop == null) {
             continue;
         }
         if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
-                    // need to leave a hole here
+            // Compare against the name slot (which is lower‐cased in
+            // case‐insensitive mode), NOT prop.getName()
+            String nameInMap = (String) _hashArea[i - 1];
+            if (key.equals(nameInMap)) {
+                found = true;
+                // leave a hole in the ordered list
                 _propsInOrder[_findFromOrdered(prop)] = null;
                 continue;
             }
         }
         props.add(prop);
     }
     if (!found) {
         throw new NoSuchElementException("No entry '" + propToRm.getName() + "' found, can't remove");
     }
     init(props);
 }
\ No newline at end of file
