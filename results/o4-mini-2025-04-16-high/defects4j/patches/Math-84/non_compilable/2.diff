diff --git a/tmp/740ec078-b716-443d-bcde-bed116ade41c_buggy.java b/tmp/979a0bea-463e-4cc8-98a0-adc5d2c01975_fixed.java
index 5f1dcf2..f3f228b 100644
--- a/tmp/740ec078-b716-443d-bcde-bed116ade41c_buggy.java
+++ b/tmp/979a0bea-463e-4cc8-98a0-adc5d2c01975_fixed.java
@@ -1,41 +1,51 @@
-    /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
+        // count one more simplex iteration
         incrementIterationsCounter();
 
-            // save the original vertex
+        // keep a handle on the current simplex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best     = original[0];
 
-            // perform a reflection step
+        // 1) reflection
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
+            // 1a) expansion
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+            // if the expansion did not improve further, keep the reflected
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
+            // else keep the expanded
             return;
-
         }
 
-            // compute the contracted simplex
+        // 2) contraction
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+            // contraction succeeded, keep it
             return;
         }
 
+        // 3) shrink: move all points toward the best
+        simplex = original;
+        for (int i = 1; i < simplex.length; i++) {
+            final double[] xBest = best.getPoint();
+            final double[] xOrig = original[i].getPoint();
+            final double[] xNew  = new double[xBest.length];
+            for (int j = 0; j < xBest.length; j++) {
+                xNew[j] = xBest[j] + gamma * (xOrig[j] - xBest[j]);
             }
+            simplex[i] = new RealPointValuePair(xNew, computeObjectiveValue(xNew));
+        }
+        // re-order after shrink
+        Arrays.sort(simplex, comparator);
 
+        // now go back and try reflection/expansion/contraction on the shrunk simplex
+    }
 }
\ No newline at end of file
