diff --git a/tmp/922ce5a8-8d70-4ab7-bf66-c622f4f803d8_buggy.java b/tmp/f0382adb-69bc-4466-a084-dbd90827c56d_fixed.java
index 5f1dcf2..0176165 100644
--- a/tmp/922ce5a8-8d70-4ab7-bf66-c622f4f803d8_buggy.java
+++ b/tmp/f0382adb-69bc-4466-a084-dbd90827c56d_fixed.java
@@ -1,41 +1,51 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
+    // one iteration of the multi‐directional simplex
     incrementIterationsCounter();
 
-            // save the original vertex
+    // save the original simplex and its best point
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best     = original[0];
 
-            // perform a reflection step
+    // 1) reflection
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
-                // compute the expanded simplex
+        // 2) expansion
         final RealPointValuePair[] reflectedSimplex = simplex;
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+        // if expansion did not improve on reflection, keep the reflected
         if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
         return;
-
     }
 
-            // compute the contracted simplex
+    // 3) contraction
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+        // contraction improved — accept it
         return;
     }
 
+    // 4) shrink (no improvement by reflection or contraction)
+    //    move all points toward the best point
+    simplex = original;
+    for (int i = 1; i < simplex.length; i++) {
+        final double[] xOrig  = original[i].getPoint();
+        final double[] xBest  = best.getPoint();
+        final double[] xShrunk = new double[xOrig.length];
+        for (int j = 0; j < xOrig.length; j++) {
+            xShrunk[j] = xBest[j] + gamma * (xOrig[j] - xBest[j]);
         }
-
+        // evaluate the new (shrunk) point
+        simplex[i] = new RealPointValuePair(xShrunk,
+                                            computeObjectiveValue(xShrunk),
+                                            false);
+    }
+    // resort the simplex
+    sort(simplex, comparator);
 }
\ No newline at end of file
