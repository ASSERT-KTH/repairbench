diff --git a/tmp/f2255f22-1c77-4c88-b6e6-141530af30a8_buggy.java b/tmp/de055018-69d2-4f3b-be56-a4b8a444cc7d_fixed.java
index 5f1dcf2..94dbdbd 100644
--- a/tmp/f2255f22-1c77-4c88-b6e6-141530af30a8_buggy.java
+++ b/tmp/de055018-69d2-4f3b-be56-a4b8a444cc7d_fixed.java
@@ -1,41 +1,37 @@
-    /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
+    // count one more iteration
     incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    // make a working copy of the current simplex
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+    // 1) reflection
+    RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
+        // reflection improved -> try expansion
         final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+        RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+        if (comparator.compare(expanded, reflected) < 0) {
+            // expansion gave further improvement -> keep expanded
+            // simplex already holds the expanded points
+        } else {
+            // reflection was better than expansion -> revert to reflection
             simplex = reflectedSimplex;
         }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+    } else {
+        // 2) contraction (no improvement on reflection)
+        RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
+            // contraction improved -> keep contracted
+            // simplex already holds the contracted points
+        } else {
+            // 3) shrink (no improvement at all) -> reduce around best
+            evaluateNewSimplex(original, sigma, comparator);
+            // simplex now holds the shrunken points
         }
-
     }
-
 }
\ No newline at end of file
