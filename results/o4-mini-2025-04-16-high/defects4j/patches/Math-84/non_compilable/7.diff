diff --git a/tmp/0c8fa375-c671-4637-8076-b3a12b0aa73e_buggy.java b/tmp/f45db035-918b-434a-97a9-503ff0bad3b3_fixed.java
index 5f1dcf2..2fbf8b5 100644
--- a/tmp/0c8fa375-c671-4637-8076-b3a12b0aa73e_buggy.java
+++ b/tmp/f45db035-918b-434a-97a9-503ff0bad3b3_fixed.java
@@ -1,41 +1,47 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
+    // count one more iteration (will throw if maxIterations is exceeded)
     incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+    // save the current simplex for reference
+    final RealPointValuePair[] original = simplex.clone();
     final RealPointValuePair best = original[0];
 
-            // perform a reflection step
+    // 1) Reflection (scale = 1.0)
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        // 2) Expansion
+        // remember the reflected simplex
+        final RealPointValuePair[] reflectedSimplex = simplex.clone();
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+        // if expansion did not improve over reflection, keep the reflection
+        if (comparator.compare(expanded, reflected) <= 0) {
             simplex = reflectedSimplex;
         }
-
         return;
-
     }
 
-            // compute the contracted simplex
+    // 3) Contraction
     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
     if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+        // contraction improved over the original best
         return;
     }
 
+    // 4) Shrink (reduce the simplex around the best point)
+    final double[] bestPoint = best.getPoint();
+    for (int i = 1; i < original.length; i++) {
+        // move each vertex partway back towards the best
+        final double[] xi = original[i].getPoint().clone();
+        for (int j = 0; j < xi.length; j++) {
+            xi[j] = bestPoint[j] + gamma * (xi[j] - bestPoint[j]);
         }
-
+        // reevaluate the function at the shrunk point
+        simplex[i] = new RealPointValuePair(xi, computeObjectiveValue(xi));
+    }
+    // keep the best point in place
+    simplex[0] = best;
 }
\ No newline at end of file
