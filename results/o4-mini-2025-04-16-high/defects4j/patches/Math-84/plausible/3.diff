diff --git a/tmp/56edb3a8-45b9-4444-8589-d1e2ff88db97_buggy.java b/tmp/2cae6aef-8b5f-4d22-83f7-924d9e3df5bc_fixed.java
index 5f1dcf2..0fa1101 100644
--- a/tmp/56edb3a8-45b9-4444-8589-d1e2ff88db97_buggy.java
+++ b/tmp/2cae6aef-8b5f-4d22-83f7-924d9e3df5bc_fixed.java
@@ -1,41 +1,30 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
+    // count this iteration (throws if the max has been exceeded)
     incrementIterationsCounter();
 
-            // save the original vertex
+    // remember the current simplex and its best point
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best     = original[0];
 
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+    // 1) reflection step
+    final RealPointValuePair reflected =
+        evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
+        // 2) expansion step
         final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+        final RealPointValuePair expanded =
+            evaluateNewSimplex(original, khi, comparator);
+        // choose the better of reflection and expansion
         if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
             simplex = reflectedSimplex;
         }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
         return;
     }
 
-        }
-
+    // 3) contraction/shrink step (always accept)
+    evaluateNewSimplex(original, gamma, comparator);
 }
\ No newline at end of file
