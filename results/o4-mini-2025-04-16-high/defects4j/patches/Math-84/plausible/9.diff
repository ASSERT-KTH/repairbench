diff --git a/tmp/93a9953f-ce0b-4853-818e-fae62516f374_buggy.java b/tmp/4bd4dd60-354f-4cdf-b435-df0e28a2b73c_fixed.java
index 5f1dcf2..f80b179 100644
--- a/tmp/93a9953f-ce0b-4853-818e-fae62516f374_buggy.java
+++ b/tmp/4bd4dd60-354f-4cdf-b435-df0e28a2b73c_fixed.java
@@ -1,41 +1,33 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
+        // one pass: reflect, then either expand or contract/shrink
         incrementIterationsCounter();
 
-            // save the original vertex
+        // save the current simplex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best     = original[0];
 
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+        // 1) Reflection
+        final RealPointValuePair reflected = 
+            evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
-                // compute the expanded simplex
+            // 2) Expansion
             final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+            final RealPointValuePair expanded =
+                evaluateNewSimplex(original, khi, comparator);
+            // choose the better of reflection or expansion
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
-                return;
+        } else {
 
-            }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+            // 3) Contraction (or shrink)
+            evaluateNewSimplex(original, gamma, comparator);
 
-            // check convergence
-                return;
         }
-
-        }
-
     }
\ No newline at end of file
