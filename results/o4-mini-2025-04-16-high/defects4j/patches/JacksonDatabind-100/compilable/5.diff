diff --git a/tmp/05499f6b-5e23-481d-9660-cc04f2297e16_buggy.java b/tmp/5a1ea3b4-5ece-4ed6-967f-cbcb86144bfc_fixed.java
index fc8c302..1e2e340 100644
--- a/tmp/05499f6b-5e23-481d-9660-cc04f2297e16_buggy.java
+++ b/tmp/5a1ea3b4-5ece-4ed6-967f-cbcb86144bfc_fixed.java
@@ -1,23 +1,35 @@
 @Override
 public byte[] getBinaryValue(Base64Variant b64variant)
     throws IOException, JsonParseException
 {
-        // Multiple possibilities...
     JsonNode n = currentNode();
     if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
+        // first, real binary nodes
+        if (n.isBinary()) {
             byte[] data = n.binaryValue();
             if (data != null) {
                 return data;
             }
-            if (n.isPojo()) {
+        }
+        // embedded POJOs wrapping a byte[]
+        else if (n.isPojo()) {
             Object ob = ((POJONode) n).getPojo();
             if (ob instanceof byte[]) {
                 return (byte[]) ob;
             }
         }
+        // finally, textual nodes: decode with the requested variant
+        else if (n.isTextual()) {
+            String text = n.textValue();
+            try {
+                return b64variant.decode(text);
+            } catch (IllegalArgumentException iae) {
+                throw new IOException(
+                    "Cannot access contents of TextNode as binary due to broken Base64 encoding: "
+                    + iae.getMessage(), iae);
             }
-        // otherwise return null to mark we have no binary content
+        }
+    }
+    // no binary content here
     return null;
 }
\ No newline at end of file
