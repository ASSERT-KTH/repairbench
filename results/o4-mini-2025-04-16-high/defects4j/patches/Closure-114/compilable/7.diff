diff --git a/tmp/91ea679b-59e0-4cde-912f-1ee31e5711e2_buggy.java b/tmp/75e79a7d-06eb-45a8-8143-f68e9f3308c6_fixed.java
index c51c8b1..2053b89 100644
--- a/tmp/91ea679b-59e0-4cde-912f-1ee31e5711e2_buggy.java
+++ b/tmp/75e79a7d-06eb-45a8-8143-f68e9f3308c6_fixed.java
@@ -1,31 +1,31 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns != null) {
     if (parent.isFor() && !NodeUtil.isForIn(parent)) {
       // Patch for assignments that appear in the init,
       // condition or iteration part of a FOR loop.  Without
       // this change, all 3 of those parts try to claim the for
       // loop as their dependency scope.  The last assignment in
       // those three fields wins, which can result in incorrect
       // reference edges between referenced and assigned variables.
       //
       // TODO(user) revisit the dependency scope calculation
       // logic.
       if (parent.getFirstChild().getNext() != n) {
         recordDepScope(recordNode, ns);
       } else {
         recordDepScope(nameNode, ns);
       }
-        } else {
+    } else if (recordNode.isCall() && recordNode.getFirstChild() == n) {
       // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+      // context. Don't associate it with the lhs name. This skips
+      // cases like "(fun = function(){ x; })();" so that 'fun' isn't
+      // treated as used by the call.
+    } else {
+      // Normal case: associate the assignment with its context.
       recordDepScope(recordNode, ns);
     }
   }
 }
\ No newline at end of file
