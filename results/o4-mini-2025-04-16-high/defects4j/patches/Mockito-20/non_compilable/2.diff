diff --git a/tmp/a3ff9875-942b-43a6-a506-608342668d13_buggy.java b/tmp/bd118635-d75f-4bce-a35f-064d231d189a_fixed.java
index f9a9b5b..5f845f5 100644
--- a/tmp/a3ff9875-942b-43a6-a506-608342668d13_buggy.java
+++ b/tmp/bd118635-d75f-4bce-a35f-064d231d189a_fixed.java
@@ -1,30 +1,110 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
-            throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
+        throw new MockitoException(
+            "Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
         settings.getTypeToMock(),
         settings.getExtraInterfaces()
     );
+
     T mockInstance = null;
     try {
+        Object[] constructorArgs = settings.getConstructorArguments();
+        Object outerInstance    = settings.getOuterInstance();
+
+        if (constructorArgs != null) {
+            // -- useConstructor() or spy(Class) path: call real constructor
+            Object[] args;
+            Class<?>[] paramTypes;
+
+            if (outerInstance != null) {
+                args       = new Object[1 + constructorArgs.length];
+                paramTypes = new Class<?>[1 + constructorArgs.length];
+                args[0]         = outerInstance;
+                paramTypes[0]   = outerInstance.getClass();
+                for (int i = 0; i < constructorArgs.length; i++) {
+                    args[i + 1]       = constructorArgs[i];
+                    paramTypes[i + 1] = constructorArgs[i] != null
+                        ? constructorArgs[i].getClass()
+                        : Object.class;
+                }
+            } else {
+                args       = constructorArgs;
+                paramTypes = new Class<?>[constructorArgs.length];
+                for (int i = 0; i < constructorArgs.length; i++) {
+                    paramTypes[i] = constructorArgs[i] != null
+                        ? constructorArgs[i].getClass()
+                        : Object.class;
+                }
+            }
+
+            // find the matching constructor
+            java.lang.reflect.Constructor<? extends T> ctor;
+            try {
+                ctor = mockedProxyType.getDeclaredConstructor(paramTypes);
+            } catch (NoSuchMethodException e) {
+                String msg      = "Unable to create mock instance of type '" +
+                                  settings.getTypeToMock().getSimpleName() + "'";
+                String causeMsg = outerInstance != null
+                    ? "Please ensure that the outer instance has correct type and that the target class has 0-arg constructor."
+                    : "0-arg constructor";
+                throw new MockitoException(msg, new MockitoException(causeMsg, e));
+            }
+            ctor.setAccessible(true);
+            mockInstance = ctor.newInstance(args);
+        } else {
+            // default path: bypass constructor (Objenesis)
             mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+        }
+
+        // apply the interceptor
+        MockMethodInterceptor.MockAccess access =
+            (MockMethodInterceptor.MockAccess) mockInstance;
+        access.setMockitoInterceptor(
+            new MockMethodInterceptor(asInternalMockHandler(handler), settings)
+        );
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
+
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
             "ClassCastException occurred while creating the mockito mock :",
             "  class to mock : " + describeClass(mockedProxyType),
             "  created class : " + describeClass(settings.getTypeToMock()),
             "  proxy instance class : " + describeClass(mockInstance),
             "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
             "",
             "You might experience classloading issues, please ask the mockito mailing-list.",
             ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+
+    } catch (java.lang.reflect.InvocationTargetException ite) {
+        throw new MockitoException(
+            "Unable to create mock instance of type '" +
+            settings.getTypeToMock().getSimpleName() + "'",
+            ite.getCause()
+        );
+
+    } catch (org.mockito.internal.creation.instance.InstantiationException ie) {
+        // fallback-instantiator failure
+        throw new MockitoException(
+            "Unable to create mock instance of type '" +
+            mockedProxyType.getSuperclass().getSimpleName() + "'",
+            ie
+        );
+
+    } catch (MockitoException me) {
+        // rethrow our own user‚Äêfacing exceptions
+        throw me;
+
+    } catch (Exception e) {
+        // any other reflection failure
+        throw new MockitoException(
+            "Unable to create mock instance of type '" +
+            settings.getTypeToMock().getSimpleName() + "'",
+            e
+        );
     }
 }
\ No newline at end of file
