diff --git a/tmp/e3881908-d066-46c0-b736-fdf368c4d04a_buggy.java b/tmp/8fd929d3-a25a-4e92-b92e-c678413f9061_fixed.java
index f9a9b5b..3eee8e0 100644
--- a/tmp/e3881908-d066-46c0-b736-fdf368c4d04a_buggy.java
+++ b/tmp/8fd929d3-a25a-4e92-b92e-c678413f9061_fixed.java
@@ -1,30 +1,63 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // If constructor invocation was requested (for spies or explicit useConstructor):
+        if (settings.getConstructorArgTypes() != null) {
+            Class<?>[] parameterTypes = settings.getConstructorArgTypes();
+            Object[] constructorArgs = settings.getConstructorArgs();
+            Object outerInstance = settings.getOuterInstance();
+            if (outerInstance != null) {
+                Class<?> enclosingClass = settings.getTypeToMock().getEnclosingClass();
+                if (!enclosingClass.isInstance(outerInstance)) {
+                    // delegate to the InstantiationException catcher below
+                    throw new org.mockito.internal.creation.instance.InstantiationException(
+                        "Please ensure that the outer instance has correct type and that the target class has 0-arg constructor."
+                    );
+                }
+                // prepend the implicit outer instance parameter
+                Class<?>[] newTypes = new Class<?>[parameterTypes.length + 1];
+                newTypes[0] = enclosingClass;
+                System.arraycopy(parameterTypes, 0, newTypes, 1, parameterTypes.length);
+                parameterTypes = newTypes;
+                Object[] newArgs = new Object[constructorArgs.length + 1];
+                newArgs[0] = outerInstance;
+                System.arraycopy(constructorArgs, 0, newArgs, 1, constructorArgs.length);
+                constructorArgs = newArgs;
+            }
+            mockInstance = classInstantiator.newInstance(mockedProxyType, parameterTypes, constructorArgs);
+        } else {
+            // default instantiation (bypass constructor)
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
-
+        mockAccess.setMockitoInterceptor(
+                new MockMethodInterceptor(asInternalMockHandler(handler), settings));
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
+
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException(
+            "Unable to create mock instance of type '" +
+                mockedProxyType.getSuperclass().getSimpleName() + "'",
+            e
+        );
     }
 }
\ No newline at end of file
