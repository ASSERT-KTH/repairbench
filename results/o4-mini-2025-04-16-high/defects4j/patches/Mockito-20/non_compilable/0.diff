diff --git a/tmp/0b40813f-8b5f-4431-a9ac-4c2ce4ce00f2_buggy.java b/tmp/314d521d-2acf-4fbf-a7bb-55b6d68a7282_fixed.java
index f9a9b5b..9fc38b1 100644
--- a/tmp/0b40813f-8b5f-4431-a9ac-4c2ce4ce00f2_buggy.java
+++ b/tmp/314d521d-2acf-4fbf-a7bb-55b6d68a7282_fixed.java
@@ -1,30 +1,64 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
-            throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
+        throw new MockitoException(
+            "Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
         settings.getTypeToMock(),
         settings.getExtraInterfaces()
     );
+
     T mockInstance = null;
     try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+        /*
+         * Decide which instantiator to use:
+         * - If user asked for useConstructor(...)
+         * - If an outer‚Äêinstance is present (inner classes)
+         * - If this is a spy (calls real methods)
+         */
+        org.mockito.internal.creation.instance.Instantiator instantiator = classInstantiator;
+        if (settings.getConstructorArguments() != null
+            || settings.getOuterInstance()      != null
+            || settings.getDefaultAnswer() == org.mockito.Answers.CALLS_REAL_METHODS) {
+
+            instantiator = new org.mockito.internal.creation.instance.ConstructorInstantiator(
+                settings.getOuterInstance(),
+                settings.getConstructorArguments(),
+                classInstantiator
+            );
+        }
+
+        mockInstance = instantiator.instantiate(mockedProxyType);
+
+        MockMethodInterceptor.MockAccess mockAccess =
+            (MockMethodInterceptor.MockAccess) mockInstance;
+        mockAccess.setMockitoInterceptor(
+            new MockMethodInterceptor(
+                asInternalMockHandler(handler),
+                settings
+            )
+        );
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
+
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
             "ClassCastException occurred while creating the mockito mock :",
             "  class to mock : "   + describeClass(mockedProxyType),
             "  created class : "     + describeClass(settings.getTypeToMock()),
             "  proxy instance class : " + describeClass(mockInstance),
             "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
             "",
             "You might experience classloading issues, please ask the mockito mailing-list.",
             ""
         ), cce);
+
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException(
+            "Unable to create mock instance of type '"
+              + mockedProxyType.getSuperclass().getSimpleName() + "'",
+            e
+        );
     }
 }
\ No newline at end of file
