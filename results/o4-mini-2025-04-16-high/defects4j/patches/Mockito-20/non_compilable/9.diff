diff --git a/tmp/e81941c2-77b1-4df1-a09e-520147e402f1_buggy.java b/tmp/fe59c33b-e8b3-4b7a-b7a5-1461320bf130_fixed.java
index f9a9b5b..103a59b 100644
--- a/tmp/e81941c2-77b1-4df1-a09e-520147e402f1_buggy.java
+++ b/tmp/fe59c33b-e8b3-4b7a-b7a5-1461320bf130_fixed.java
@@ -1,30 +1,61 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
-            throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
+        throw new MockitoException(
+            "Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
         settings.getTypeToMock(),
         settings.getExtraInterfaces()
     );
-        T mockInstance = null;
+    T mockInstance;
     try {
+        // if the user asked for constructor‚Äêbased creation or supplied an outer instance
+        if (settings.getConstructorArgs() != null || settings.getOuterInstance() != null) {
+            // build the full argument array (outerInstance first, then any ctor args)
+            List<?> ctorArgs = settings.getConstructorArgs();
+            Object outer = settings.getOuterInstance();
+            int totalArgs = (outer != null ? 1 : 0) + (ctorArgs != null ? ctorArgs.size() : 0);
+            Object[] allArgs = new Object[totalArgs];
+            int idx = 0;
+            if (outer != null) {
+                allArgs[idx++] = outer;
+            }
+            if (ctorArgs != null) {
+                for (Object a : ctorArgs) {
+                    allArgs[idx++] = a;
+                }
+            }
+            mockInstance = classInstantiator.instantiate(mockedProxyType, allArgs);
+        } else {
+            // default: bypass constructor (objenesis)
             mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+        }
+
+        MockMethodInterceptor.MockAccess mockAccess =
+            (MockMethodInterceptor.MockAccess) mockInstance;
+        mockAccess.setMockitoInterceptor(
+            new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
+
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
             "ClassCastException occurred while creating the mockito mock :",
             "  class to mock : " + describeClass(mockedProxyType),
             "  created class : " + describeClass(settings.getTypeToMock()),
             "  proxy instance class : " + describeClass(mockInstance),
             "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
             "",
             "You might experience classloading issues, please ask the mockito mailing-list.",
             ""
         ), cce);
+
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException(
+            "Unable to create mock instance of type '" +
+            mockedProxyType.getSuperclass().getSimpleName() + "'",
+            e
+        );
     }
 }
\ No newline at end of file
