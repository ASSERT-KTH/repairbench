diff --git a/tmp/cbe68aa9-1c72-4e4a-80d3-2408f6c26092_buggy.java b/tmp/1de5e572-cff7-4338-a561-9c2a365dd60f_fixed.java
index f9a9b5b..6f92a0d 100644
--- a/tmp/cbe68aa9-1c72-4e4a-80d3-2408f6c26092_buggy.java
+++ b/tmp/1de5e572-cff7-4338-a561-9c2a365dd60f_fixed.java
@@ -1,30 +1,67 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // if the user requested a real‐constructor invocation (e.g. spy or useConstructor), do so
+        if (settings.isUsingConstructor() || settings.isSpy()) {
+            List<Object> ctorArgs = new ArrayList<Object>();
+            // prepend outer instance for non‐static inner classes, if provided
+            Object outer = settings.getOuterInstance();
+            if (outer != null) {
+                ctorArgs.add(outer);
+            }
+            // then any explicit constructor arguments
+            List<?> userArgs = settings.getConstructorArgs();
+            if (userArgs != null) {
+                ctorArgs.addAll(userArgs);
+            }
+            // invoke the matching constructor reflectively
+            mockInstance = classInstantiator.instantiate(
+                    mockedProxyType,
+                    ctorArgs.toArray(new Object[0])
+            );
+        } else {
+            // default mock: bypass the constructor entirely
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
-
+        mockAccess.setMockitoInterceptor(
+                new MockMethodInterceptor(asInternalMockHandler(handler), settings)
+        );
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
+
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
+
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException(
+                "Unable to create mock instance of type '" +
+                mockedProxyType.getSuperclass().getSimpleName() + "'",
+                e
+        );
+
+    } catch (Exception e) {
+        // catches any runtime‐exception from a "real" constructor (e.g. explosive constructors)
+        throw new MockitoException(
+                "Unable to create mock instance of type '" +
+                mockedProxyType.getSuperclass().getSimpleName() + "'",
+                e
+        );
     }
 }
\ No newline at end of file
