diff --git a/tmp/4a2373d8-b446-4ebb-9094-0037aa45a4e5_buggy.java b/tmp/64adb198-2fb0-456b-b286-b7c6b771a2ca_fixed.java
index f9a9b5b..0a873c7 100644
--- a/tmp/4a2373d8-b446-4ebb-9094-0037aa45a4e5_buggy.java
+++ b/tmp/64adb198-2fb0-456b-b286-b7c6b771a2ca_fixed.java
@@ -1,30 +1,72 @@
+@Override
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
-            throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
+        throw new MockitoException(
+            "Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
         settings.getTypeToMock(),
         settings.getExtraInterfaces()
     );
-        T mockInstance = null;
+    T mockInstance;
     try {
+        /*
+         * Two special cases in which we must call the real constructor:
+         * 1) spy(Class) â€” a spy on a type (no real instance supplied) must invoke the no-arg
+         *    constructor so that fields get initialized.
+         * 2) useConstructor() was called explicitly in withSettings().
+         */
+        boolean isTypeSpy = settings.isSpy() && settings.getSpiedInstance() == null;
+        Object[] ctorArgs = settings.getConstructorArgs();
+        if (isTypeSpy || ctorArgs != null) {
+            Object outer = settings.getOuterInstance();
+            Object[] args;
+            if (ctorArgs != null) {
+                // user supplied explicit constructor args
+                if (outer != null) {
+                    args = new Object[ctorArgs.length + 1];
+                    args[0] = outer;
+                    System.arraycopy(ctorArgs, 0, args, 1, ctorArgs.length);
+                } else {
+                    args = ctorArgs;
+                }
+            } else if (outer != null) {
+                // spy(Class) with an implicit no-arg and an outer instance
+                args = new Object[] { outer };
+            } else {
+                // spy(Class) default no-arg
+                args = new Object[0];
+            }
+            // this overloaded instantiate(...) will invoke the matching constructor
+            mockInstance = classInstantiator.instantiate(mockedProxyType, args);
+        } else {
+            // normal mock or spy(Object): bypass the constructor
             mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+        }
 
+        MockMethodInterceptor.MockAccess access = (MockMethodInterceptor.MockAccess) mockInstance;
+        access.setMockitoInterceptor(new MockMethodInterceptor(
+            asInternalMockHandler(handler),
+            settings
+        ));
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
+
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
             "ClassCastException occurred while creating the mockito mock :",
             "  class to mock : " + describeClass(mockedProxyType),
             "  created class : " + describeClass(settings.getTypeToMock()),
             "  proxy instance class : " + describeClass(mockInstance),
             "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
             "",
             "You might experience classloading issues, please ask the mockito mailing-list.",
             ""
         ), cce);
+
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        // report failures in constructor-based instantiation or Objensis fallback
+        String name = settings.getTypeToMock().getSimpleName();
+        throw new MockitoException("Unable to create mock instance of type '" + name + "'", e);
     }
 }
\ No newline at end of file
