diff --git a/tmp/1ce3f61d-878e-4beb-bd88-1c234d4fd97d_buggy.java b/tmp/eace510d-d1c4-4f04-9130-b0bcdf3117ba_fixed.java
index f9a9b5b..5667e4f 100644
--- a/tmp/1ce3f61d-878e-4beb-bd88-1c234d4fd97d_buggy.java
+++ b/tmp/eace510d-d1c4-4f04-9130-b0bcdf3117ba_fixed.java
@@ -1,30 +1,100 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // 1) spy on an existing instance?
+        if (settings.getSpiedInstance() != null) {
+            mockInstance = settings.getSpiedInstance();
+
+        // 2) use real constructor (useConstructor() or inner‐class outerInstance)
+        } else if (settings.getConstructorArgs() != null || settings.getOuterInstance() != null) {
+            try {
+                java.util.List<Object> argsList = new java.util.ArrayList<Object>();
+                if (settings.getOuterInstance() != null) {
+                    argsList.add(settings.getOuterInstance());
+                }
+                if (settings.getConstructorArgs() != null) {
+                    for (Object arg : settings.getConstructorArgs()) {
+                        argsList.add(arg);
+                    }
+                }
+                java.lang.reflect.Constructor<?> ctor = null;
+                for (java.lang.reflect.Constructor<?> c : mockedProxyType.getDeclaredConstructors()) {
+                    Class<?>[] params = c.getParameterTypes();
+                    if (params.length == argsList.size()) {
+                        boolean matches = true;
+                        for (int i = 0; i < params.length; i++) {
+                            if (!params[i].isAssignableFrom(
+                                    argsList.get(i) == null
+                                    ? params[i]  // accept null for reference types
+                                    : argsList.get(i).getClass())) {
+                                matches = false;
+                                break;
+                            }
+                        }
+                        if (matches) {
+                            ctor = c;
+                            break;
+                        }
+                    }
+                }
+                if (ctor == null) {
+                    String msg = settings.getOuterInstance() != null
+                        ? "Please ensure that the outer instance has correct type and that the target class has 0-arg constructor."
+                        : "0-arg constructor not found";
+                    throw new RuntimeException(msg);
+                }
+                ctor.setAccessible(true);
+                @SuppressWarnings("unchecked")
+                T instance = (T) ctor.newInstance(argsList.toArray());
+                mockInstance = instance;
+            } catch (java.lang.reflect.InvocationTargetException ite) {
+                // constructor threw an exception
+                throw new MockitoException(
+                    "Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'",
+                    ite.getCause());
+            } catch (Exception e) {
+                // no matching ctor, illegal access, etc.
+                throw new MockitoException(
+                    "Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'",
+                    e);
+            }
+
+        // 3) default path: byte‐buddy + objenesis (no constructor)
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+
+        // common setup: attach interceptor
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+        mockAccess.setMockitoInterceptor(
+            new MockMethodInterceptor(asInternalMockHandler(handler), settings)
+        );
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
+
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
+
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        // objenesis-based instantiation failure
+        throw new MockitoException(
+            "Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'",
+            e);
     }
 }
\ No newline at end of file
