diff --git a/tmp/af5e87bd-35d6-4375-b44a-bc1d42412809_buggy.java b/tmp/a401b915-45dd-445a-88c2-155c701c7bac_fixed.java
index f9a9b5b..9812061 100644
--- a/tmp/af5e87bd-35d6-4375-b44a-bc1d42412809_buggy.java
+++ b/tmp/a401b915-45dd-445a-88c2-155c701c7bac_fixed.java
@@ -1,30 +1,83 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
-            throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
+        throw new MockitoException(
+            "Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
         settings.getTypeToMock(),
         settings.getExtraInterfaces()
     );
+
     T mockInstance = null;
     try {
+        if (settings.isUsingConstructor()) {
+            // Build argument list for real-constructor invocation
+            List<Object> consArgsList = settings.getConstructorArgs();
+            Object[] userArgs = consArgsList.toArray();
+            Object outer = settings.getOuterInstance();
+            Object[] args;
+
+            if (outer != null) {
+                // Inner class: first argument must be the outer instance
+                Class<?> declaring = mockedProxyType.getDeclaringClass();
+                if (!declaring.isInstance(outer)) {
+                    throw new MockitoException(
+                        "Unable to create mock instance of type '" +
+                        settings.getTypeToMock().getSimpleName() + "'",
+                        new IllegalArgumentException(
+                            "Please ensure that the outer instance has correct type " +
+                            "and that the target class has 0-arg constructor."
+                        )
+                    );
+                }
+                args = new Object[userArgs.length + 1];
+                args[0] = outer;
+                System.arraycopy(userArgs, 0, args, 1, userArgs.length);
+            } else {
+                args = userArgs;
+            }
+
+            // Invoke the real constructor on the proxy class
+            mockInstance = new org.mockito.internal.creation.instance
+                .ReflectionInstantiator<>(mockedProxyType)
+                .newInstance(args);
+        } else {
+            // Default: bypass the constructor (e.g. pure mock)
             mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+        }
+
+        // Attach the Mockito interceptor
+        MockMethodInterceptor.MockAccess access =
+            (MockMethodInterceptor.MockAccess) mockInstance;
+        access.setMockitoInterceptor(
+            new MockMethodInterceptor(
+                asInternalMockHandler(handler),
+                settings
+            )
+        );
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
+
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
             "ClassCastException occurred while creating the mockito mock :",
             "  class to mock : " + describeClass(mockedProxyType),
             "  created class : " + describeClass(settings.getTypeToMock()),
             "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+            "  instance creation by : " +
+              classInstantiator.getClass().getSimpleName(),
             "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
+            "You might experience classloading issues, " +
+              "please ask the mockito mailing-list.",
             ""
         ), cce);
+
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException(
+            "Unable to create mock instance of type '" +
+            mockedProxyType.getSuperclass().getSimpleName() + "'",
+            e
+        );
     }
 }
\ No newline at end of file
