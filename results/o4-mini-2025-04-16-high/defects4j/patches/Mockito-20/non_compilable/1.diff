diff --git a/tmp/591e55cc-7ddf-4696-97cc-50e595c17cce_buggy.java b/tmp/1d1b48d0-27a4-4c19-beda-b75f51a4d7e1_fixed.java
index f9a9b5b..643bfd6 100644
--- a/tmp/591e55cc-7ddf-4696-97cc-50e595c17cce_buggy.java
+++ b/tmp/1d1b48d0-27a4-4c19-beda-b75f51a4d7e1_fixed.java
@@ -1,30 +1,59 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
-            throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
+        throw new MockitoException(
+            "Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
         settings.getTypeToMock(),
         settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // If user supplied an existing instance to spy on, use it:
+        if (settings.getSpiedInstance() != null) {
+            mockInstance = settings.getSpiedInstance();
+        }
+        // Otherwise, if constructor‚Äêbased instantiation is requested (spy or useConstructor)
+        else if (settings.getConstructorArgs() != null || settings.isSpy()) {
+            Object[] ctorArgs = settings.getConstructorArgs();
+            if (ctorArgs == null) {
+                ctorArgs = new Object[0];
+            }
+            mockInstance = classInstantiator.instantiateUsingConstructor(
+                mockedProxyType,
+                ctorArgs,
+                settings.getOuterInstance()
+            );
+        }
+        // Default mock creation: skip constructors (Objenesis)
+        else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+        }
+
+        MockMethodInterceptor.MockAccess mockAccess =
+            (MockMethodInterceptor.MockAccess) mockInstance;
+        mockAccess.setMockitoInterceptor(
+            new MockMethodInterceptor(asInternalMockHandler(handler), settings)
+        );
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
+
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
             "ClassCastException occurred while creating the mockito mock :",
             "  class to mock : " + describeClass(mockedProxyType),
             "  created class : " + describeClass(settings.getTypeToMock()),
             "  proxy instance class : " + describeClass(mockInstance),
             "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
             "",
             "You might experience classloading issues, please ask the mockito mailing-list.",
             ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException(
+            "Unable to create mock instance of type '"
+            + mockedProxyType.getSuperclass().getSimpleName() + "'",
+            e
+        );
     }
 }
\ No newline at end of file
