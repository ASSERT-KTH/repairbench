diff --git a/tmp/5d3afdc4-f21f-453b-80d0-1f26d5732982_buggy.java b/tmp/e74796d7-c28f-4309-915b-12e283c03235_fixed.java
index f9a9b5b..d093c3e 100644
--- a/tmp/5d3afdc4-f21f-453b-80d0-1f26d5732982_buggy.java
+++ b/tmp/e74796d7-c28f-4309-915b-12e283c03235_fixed.java
@@ -1,30 +1,81 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        Object outerInstance = settings.getOuterInstance();
+        Object[] constructorArgs = settings.getConstructorArgs();
+        // if constructor injection requested (either explicit args or outer instance provided)
+        if (constructorArgs != null || outerInstance != null) {
+            try {
+                Constructor<? extends T> ctor;
+                if (outerInstance != null) {
+                    // inner class: first parameter is the outer instance
+                    int len = constructorArgs != null ? constructorArgs.length : 0;
+                    Class<?>[] paramTypes = new Class<?>[len + 1];
+                    Object[] initArgs = new Object[len + 1];
+                    paramTypes[0] = outerInstance.getClass();
+                    initArgs[0] = outerInstance;
+                    for (int i = 0; i < len; i++) {
+                        Object arg = constructorArgs[i];
+                        paramTypes[i + 1] = arg != null ? arg.getClass() : null;
+                        initArgs[i + 1] = arg;
+                    }
+                    ctor = mockedProxyType.getDeclaredConstructor(paramTypes);
+                    ctor.setAccessible(true);
+                    mockInstance = ctor.newInstance(initArgs);
+                } else {
+                    // regular class constructor
+                    if (constructorArgs.length == 0) {
+                        ctor = mockedProxyType.getDeclaredConstructor();
+                        ctor.setAccessible(true);
+                        mockInstance = ctor.newInstance();
+                    } else {
+                        int len = constructorArgs.length;
+                        Class<?>[] paramTypes = new Class<?>[len];
+                        for (int i = 0; i < len; i++) {
+                            Object arg = constructorArgs[i];
+                            paramTypes[i] = arg != null ? arg.getClass() : null;
+                        }
+                        ctor = mockedProxyType.getDeclaredConstructor(paramTypes);
+                        ctor.setAccessible(true);
+                        mockInstance = ctor.newInstance(constructorArgs);
+                    }
+                }
+            } catch (NoSuchMethodException nsme) {
+                String msg = outerInstance != null
+                        ? "Please ensure that the outer instance has correct type and that the target class has 0-arg constructor."
+                        : "Unable to find 0-arg constructor";
+                throw new org.mockito.internal.creation.instance.InstantiationException(msg, nsme);
+            } catch (Throwable t) {
+                throw new org.mockito.internal.creation.instance.InstantiationException(t);
+            }
+        } else {
+            // default: bypass constructor (Objenesis)
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
-
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException(
+                "Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'",
+                e);
     }
 }
\ No newline at end of file
