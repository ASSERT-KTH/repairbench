diff --git a/tmp/fe5999f1-3b87-4a8d-a855-e788cdd71bab_buggy.java b/tmp/ac7d69d1-94f3-4b75-bf78-b35327d6ea24_fixed.java
index d926eea..2e818eb 100644
--- a/tmp/fe5999f1-3b87-4a8d-a855-e788cdd71bab_buggy.java
+++ b/tmp/ac7d69d1-94f3-4b75-bf78-b35327d6ea24_fixed.java
@@ -1,48 +1,46 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
-        // Simple case first: serialize as numeric timestamp?
+    // numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
-
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+    // string‚Äêbased output: honor annotation overrides, but if no explicit pattern
+    // use provider's custom DateFormat (if it's a SimpleDateFormat) or fall back
+    // to ISO8601
+    if (shape == JsonFormat.Shape.STRING
+            || format.hasPattern()
+            || format.hasLocale()
+            || format.hasTimeZone()) {
+        DateFormat base = serializers.getConfig().getDateFormat();
+        final String pattern;
+        if (format.hasPattern()) {
+            pattern = format.getPattern();
+        } else if (base instanceof SimpleDateFormat) {
+            pattern = ((SimpleDateFormat) base).toPattern();
+        } else {
+            pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+        }
         final Locale loc = format.hasLocale()
                 ? format.getLocale()
                 : serializers.getLocale();
         SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+        TimeZone tz = format.getTimeZone();
         if (tz == null) {
             tz = serializers.getTimeZone();
         }
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+    // otherwise no change
     return this;
 }
\ No newline at end of file
