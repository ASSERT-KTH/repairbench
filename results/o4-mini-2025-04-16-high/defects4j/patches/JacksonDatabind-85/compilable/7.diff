diff --git a/tmp/5d137910-6436-43c7-adb9-1223ad9b18f5_buggy.java b/tmp/c1684546-88a2-4b9f-8679-bc5faa828b20_fixed.java
index d926eea..7c09df0 100644
--- a/tmp/5d137910-6436-43c7-adb9-1223ad9b18f5_buggy.java
+++ b/tmp/c1684546-88a2-4b9f-8679-bc5faa828b20_fixed.java
@@ -1,48 +1,42 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
-        if (property == null) {
-            return this;
-        }
+    // 1) look for any @JsonFormat overrides
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
-        if (format == null) {
-            return this;
-        }
-        // Simple case first: serialize as numeric timestamp?
+    if (format != null) {
+        // a) numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
-
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
+        // b) explicit string pattern, locale, time‚Äêzone, or forced STRING
+        if (shape == JsonFormat.Shape.STRING
+                || format.hasPattern()
+                || format.hasLocale()
+                || format.hasTimeZone())
+        {
+            String pattern = format.hasPattern()
                     ? format.getPattern()
                     : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
+            Locale locale = format.hasLocale()
                     ? format.getLocale()
                     : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
-                    }
+            TimeZone tz = format.hasTimeZone()
+                    ? format.getTimeZone()
+                    : serializers.getTimeZone();
+            SimpleDateFormat df = new SimpleDateFormat(pattern, locale);
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
+        // otherwise fall through to use defaults
+    }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
+    // 2) no annotation overrides: fall back on global settings
+    if (serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {
+        return withFormat(Boolean.TRUE, null);
+    }
+    // use the DateFormat configured on the ObjectMapper
+    DateFormat df = serializers.getConfig().getDateFormat();
+    return withFormat(Boolean.FALSE, df);
 }
\ No newline at end of file
