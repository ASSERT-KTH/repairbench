diff --git a/tmp/6547183d-a802-4db1-845e-ce980275b1b9_buggy.java b/tmp/17890f9e-6877-4d87-8104-e2fa1535c147_fixed.java
index d926eea..39d4858 100644
--- a/tmp/6547183d-a802-4db1-845e-ce980275b1b9_buggy.java
+++ b/tmp/17890f9e-6877-4d87-8104-e2fa1535c147_fixed.java
@@ -1,48 +1,39 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
+        // no annotation override: if user configured a non-StdDateFormat globally, use it
+        DateFormat df = serializers.getConfig().getDateFormat();
+        if (!(df instanceof StdDateFormat)) {
+            return withFormat(Boolean.FALSE, df);
+        }
         return this;
     }
-        // Simple case first: serialize as numeric timestamp?
+    // Simple case: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
+    // Custom pattern/locale/timezone or forced STRING
+    if (shape == JsonFormat.Shape.STRING
+            || format.hasPattern()
+            || format.hasLocale()
+            || format.hasTimeZone()) {
+        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();
+        String pattern = format.hasPattern() ? format.getPattern()
                 : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
+        Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
         SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
-                    }
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+    // no relevant override: default
     return this;
 }
\ No newline at end of file
