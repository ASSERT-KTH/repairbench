diff --git a/tmp/7f73166e-d451-47ee-875d-44d34e4b7a20_buggy.java b/tmp/0e8c4540-acb9-4dc4-baee-8bf6a8781f5d_fixed.java
index d926eea..cd8cfd7 100644
--- a/tmp/7f73166e-d451-47ee-875d-44d34e4b7a20_buggy.java
+++ b/tmp/0e8c4540-acb9-4dc4-baee-8bf6a8781f5d_fixed.java
@@ -1,48 +1,46 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
+        // No per‐property overrides: if the user has supplied a custom DateFormat
+        // (i.e. not the default StdDateFormat), use it for bean‐property serialization
+        DateFormat df = serializers.getConfig().getDateFormat();
+        if (df != null && !(df instanceof StdDateFormat)) {
+            DateFormat dfClone;
+            try {
+                dfClone = (DateFormat) df.clone();
+            } catch (CloneNotSupportedException e) {
+                dfClone = df;
+            }
+            return withFormat(Boolean.FALSE, dfClone);
+        }
         return this;
     }
-        // Simple case first: serialize as numeric timestamp?
+    // If there _are_ overrides, honor shape & pattern/time‐zone/locale
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
-
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
+    if (format.hasPattern() || format.hasLocale()
+            || format.hasTimeZone() || shape == JsonFormat.Shape.STRING) {
         TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
+        String pattern = format.hasPattern()
                 ? format.getPattern()
                 : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
+        Locale loc = format.hasLocale()
                 ? format.getLocale()
                 : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+        SimpleDateFormat df2 = new SimpleDateFormat(pattern, loc);
         if (tz == null) {
             tz = serializers.getTimeZone();
         }
-            df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
+        df2.setTimeZone(tz);
+        return withFormat(Boolean.FALSE, df2);
     }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
