diff --git a/tmp/ab254ae7-e4dc-4a91-95be-b44b908f80f1_buggy.java b/tmp/bf851fc9-7d95-48e7-abc0-0c0795286381_fixed.java
index d57736b..60d2190 100644
--- a/tmp/ab254ae7-e4dc-4a91-95be-b44b908f80f1_buggy.java
+++ b/tmp/bf851fc9-7d95-48e7-abc0-0c0795286381_fixed.java
@@ -1,39 +1,36 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
+  // Only widen when the constraint is a record type.
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+  if (constraintObj == null || !constraintObj.isRecordType()) {
+    return;
+  }
+
+  // If 'type' is a union, distribute the inference across each arm.
+  JSType restrictedType = type.restrictByNotNullOrUndefined();
+  if (restrictedType.isUnionType()) {
+    for (JSType alt : restrictedType.toMaybeUnionType().getAlternates()) {
+      inferPropertyTypesToMatchConstraint(alt, constraint);
+    }
+    return;
+  }
+
+  ObjectType objType = ObjectType.cast(restrictedType);
   if (objType != null) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!objType.isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
         }
         objType.defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
-  }
