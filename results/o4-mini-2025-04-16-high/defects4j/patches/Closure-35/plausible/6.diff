diff --git a/tmp/a843119b-0521-41ac-82f3-e6ea99d14ac1_buggy.java b/tmp/7fe3712b-ac3b-497b-9b1b-fbe7ce6404a5_fixed.java
index d57736b..e6b1977 100644
--- a/tmp/a843119b-0521-41ac-82f3-e6ea99d14ac1_buggy.java
+++ b/tmp/7fe3712b-ac3b-497b-9b1b-fbe7ce6404a5_fixed.java
@@ -1,39 +1,50 @@
 /**
  * Suppose X is an object with inferred properties.
  * Suppose also that X is used in a way where it would only type-check
  * correctly if some of those properties are widened.
  * Then we should be polite and automatically widen X's properties for him.
  *
  * For a concrete example, consider:
  * param x {{prop: (number|undefined)}}
  * function f(x) {}
  * f({});
  *
  * If we give the anonymous object an inferred property of (number|undefined),
  * then this code will type-check appropriately.
  */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
+  // If we're dealing with a union, recurse on each alternate branch.
+  if (type.isUnionType()) {
+    for (JSType alt : type.toMaybeUnionType().getAlternates()) {
+      inferPropertyTypesToMatchConstraint(alt, constraint);
+    }
+    return;
+  }
+
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+    ObjectType objType =
+        ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
+          // If the property doesn't even exist on the obj yet,
+          // widen it with void so that "absent" is allowed.
           if (!objType.hasProperty(prop)) {
             typeToInfer =
                 getNativeType(VOID_TYPE).getLeastSupertype(propType);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
 }
\ No newline at end of file
