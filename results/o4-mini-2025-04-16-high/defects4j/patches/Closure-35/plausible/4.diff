diff --git a/tmp/a008dc35-f94b-41ee-b4f0-492e98448be3_buggy.java b/tmp/e0706335-98d0-43f0-a99b-5ebef98b4b1c_fixed.java
index d57736b..4af3437 100644
--- a/tmp/a008dc35-f94b-41ee-b4f0-492e98448be3_buggy.java
+++ b/tmp/e0706335-98d0-43f0-a99b-5ebef98b4b1c_fixed.java
@@ -1,39 +1,55 @@
 /**
  * Suppose X is an object with inferred properties.
  * Suppose also that X is used in a way where it would only type-check
  * correctly if some of those properties are widened.
  * Then we should be polite and automatically widen X's properties for him.
  *
  * For a concrete example, consider:
  * param x {{prop: (number|undefined)}}
  * function f(x) {}
  * f({});
  *
  * If we give the anonymous object an inferred property of (number|undefined),
  * then this code will type-check appropriately.
  */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
-    ObjectType constraintObj =
-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+  // Only record‐typed constraints are interesting.
+  JSType constRestricted = constraint.restrictByNotNullOrUndefined();
+  ObjectType constraintObj = ObjectType.cast(constRestricted);
+  if (constraintObj == null || !constraintObj.isRecordType()) {
+    return;
+  }
+
+  // Strip null/undefined from the actual type.
+  JSType actualRestricted = type.restrictByNotNullOrUndefined();
+  // If it’s a union, recurse into each alternative so we widen each record.
+  if (actualRestricted.isUnionType()) {
+    for (JSType alt : actualRestricted.toMaybeUnionType().getAlternates()) {
+      inferPropertyTypesToMatchConstraint(alt, constraint);
+    }
+    return;
+  }
+
+  // Otherwise if it’s a single object, add any missing props.
+  ObjectType objType = ObjectType.cast(actualRestricted);
+  if (objType == null) {
+    return;
+  }
+
   for (String prop : constraintObj.getOwnPropertyNames()) {
     JSType propType = constraintObj.getPropertyType(prop);
     if (!objType.isPropertyTypeDeclared(prop)) {
       JSType typeToInfer = propType;
+      // If the object didn’t even have the property, make it optional.
       if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+        typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
       }
       objType.defineInferredProperty(prop, typeToInfer, null);
     }
   }
 }
\ No newline at end of file
-    }
-  }
