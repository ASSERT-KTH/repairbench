diff --git a/tmp/cb8dc399-6dc1-4948-8e1c-ead306d38f1b_buggy.java b/tmp/1d38ec44-063e-493c-8429-ddb2884f4aea_fixed.java
index d57736b..39b1ec4 100644
--- a/tmp/cb8dc399-6dc1-4948-8e1c-ead306d38f1b_buggy.java
+++ b/tmp/1d38ec44-063e-493c-8429-ddb2884f4aea_fixed.java
@@ -1,39 +1,49 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+      JSType nonNullType = type.restrictByNotNullOrUndefined();
+
+      // If the type is a union, infer properties on each member;
+      // otherwise just on the single object type.
+      if (nonNullType.isUnionType()) {
+        for (JSType alt : nonNullType.toMaybeUnionType().getAlternates()) {
+          ObjectType objType = ObjectType.cast(alt);
+          if (objType == null) {
+            continue;
+          }
+          for (String prop : constraintObj.getOwnPropertyNames()) {
+            JSType propType = constraintObj.getPropertyType(prop);
+            if (!objType.isPropertyTypeDeclared(prop)) {
+              JSType typeToInfer = propType;
+              if (!objType.hasProperty(prop)) {
+                typeToInfer =
+                    getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              }
+              objType.defineInferredProperty(prop, typeToInfer, null);
+            }
+          }
+        }
+      } else {
+        ObjectType objType = ObjectType.cast(nonNullType);
         if (objType != null) {
           for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!objType.isPropertyTypeDeclared(prop)) {
               JSType typeToInfer = propType;
               if (!objType.hasProperty(prop)) {
                 typeToInfer =
                     getNativeType(VOID_TYPE).getLeastSupertype(propType);
               }
               objType.defineInferredProperty(prop, typeToInfer, null);
             }
           }
         }
       }
     }
+  }
\ No newline at end of file
