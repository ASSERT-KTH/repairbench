diff --git a/tmp/d79d9230-a896-4256-a70a-952f94b08785_buggy.java b/tmp/ed2a13cf-841e-496f-9342-197446fb8c5e_fixed.java
index d57736b..a5dcdd4 100644
--- a/tmp/d79d9230-a896-4256-a70a-952f94b08785_buggy.java
+++ b/tmp/ed2a13cf-841e-496f-9342-197446fb8c5e_fixed.java
@@ -1,39 +1,38 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
+  // First strip null/undefined from the type we're inferring on.
+  JSType restrictedType = type.restrictByNotNullOrUndefined();
+
+  // If it's a union, recurse on each alternate.
+  if (restrictedType.isUnionType()) {
+    // Note: UnionType is in com.google.javascript.rhino.jstype
+    UnionType union = (UnionType) restrictedType;
+    for (JSType alt : union.getAlternates()) {
+      inferPropertyTypesToMatchConstraint(alt, constraint);
+    }
+    return;
+  }
+
+  // Now try to widen any missing record‐type properties.
+  ObjectType objType = ObjectType.cast(restrictedType);
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+  if (constraintObj != null && constraintObj.isRecordType() && objType != null) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
+        JSType toInfer = propType;
+        // If the object has no such property at all, include `void` so that
+        // missing‐property accesses yield `undefined` rather than an error.
         if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
-            objType.defineInferredProperty(prop, typeToInfer, null);
+          toInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
         }
+        objType.defineInferredProperty(prop, toInfer, null);
       }
     }
   }
 }
\ No newline at end of file
