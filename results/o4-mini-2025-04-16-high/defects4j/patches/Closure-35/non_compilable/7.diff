diff --git a/tmp/6a241399-8b28-4f3b-a6ff-c8dc71960012_buggy.java b/tmp/81fb584d-259d-4d1d-81d7-40dc02854a26_fixed.java
index d57736b..7d4fda6 100644
--- a/tmp/6a241399-8b28-4f3b-a6ff-c8dc71960012_buggy.java
+++ b/tmp/81fb584d-259d-4d1d-81d7-40dc02854a26_fixed.java
@@ -1,39 +1,38 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
+  // First strip null/undefined and handle union types by recursing on each member.
+  JSType restrictedType = type.restrictByNotNullOrUndefined();
+  UnionType unionType = UnionType.cast(restrictedType);
+  if (unionType != null) {
+    for (JSType alt : unionType.getAlternates()) {
+      inferPropertyTypesToMatchConstraint(alt, constraint);
+    }
+    return;
+  }
+
+  // Now both `restrictedType` and `constraint` are non‐null, non‐undefined, non‐union.
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+    ObjectType objType = ObjectType.cast(restrictedType);
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
+          // If the object really has no such property (not even on the prototype),
+          // widen the inferred type to include VOID (i.e. undefined).
           if (!objType.hasProperty(prop)) {
             typeToInfer =
                 getNativeType(VOID_TYPE).getLeastSupertype(propType);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
 }
\ No newline at end of file
