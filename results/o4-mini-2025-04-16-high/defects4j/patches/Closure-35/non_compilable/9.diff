diff --git a/tmp/a7aa1fa2-906f-4612-adbe-aa2e6b053e3d_buggy.java b/tmp/c7a53636-fe4b-4cd5-9df6-7934d88335e0_fixed.java
index d57736b..11413cc 100644
--- a/tmp/a7aa1fa2-906f-4612-adbe-aa2e6b053e3d_buggy.java
+++ b/tmp/c7a53636-fe4b-4cd5-9df6-7934d88335e0_fixed.java
@@ -1,39 +1,41 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
-    ObjectType constraintObj =
-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+  // Strip null/undefined from the actual type.
+  JSType typeNonNull = type.restrictByNotNullOrUndefined();
+  // If it's a union, recurse on each alternate.
+  UnionType unionType = typeNonNull.toMaybeUnionType();
+  if (unionType != null) {
+    for (JSType alt : unionType.getAlternates()) {
+      inferPropertyTypesToMatchConstraint(alt, constraint);
+    }
+    return;
+  }
+
+  // Strip null/undefined from the constraint and check for a record.
+  JSType constraintNonNull = constraint.restrictByNotNullOrUndefined();
+  ObjectType constraintObj = ObjectType.cast(constraintNonNull);
+  if (constraintObj == null || !constraintObj.isRecordType()) {
+    return;
+  }
+
+  // Now infer any missing properties on our object.
+  ObjectType objType = ObjectType.cast(typeNonNull);
+  if (objType == null) {
+    return;
+  }
   for (String prop : constraintObj.getOwnPropertyNames()) {
     JSType propType = constraintObj.getPropertyType(prop);
     if (!objType.isPropertyTypeDeclared(prop)) {
       JSType typeToInfer = propType;
       if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+        // Widen to allow undefined if the property isn't present at all.
+        typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
       }
       objType.defineInferredProperty(prop, typeToInfer, null);
     }
   }
 }
\ No newline at end of file
-    }
-  }
