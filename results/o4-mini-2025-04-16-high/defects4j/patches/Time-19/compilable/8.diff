diff --git a/tmp/6139b524-4611-41d5-95a2-f6996bcbff06_buggy.java b/tmp/2d7e79fd-4e3b-42e2-bbb8-fc28c630dd4b_fixed.java
index f8caf72..1c3a9fd 100644
--- a/tmp/6139b524-4611-41d5-95a2-f6996bcbff06_buggy.java
+++ b/tmp/2d7e79fd-4e3b-42e2-bbb8-fc28c630dd4b_fixed.java
@@ -1,65 +1,68 @@
 /**
  * Gets the millisecond offset to subtract from local time to get UTC time.
  * This offset can be used to undo adding the offset obtained by getOffset.
  *
  * <pre>
  * millisLocal == millisUTC   + getOffset(millisUTC)
  * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
  * </pre>
  *
  * NOTE: After calculating millisLocal, some error may be introduced. At
  * offset transitions (due to DST or other historical changes), ranges of
  * local times may map to different UTC times.
  * <p>
  * This method will return an offset suitable for calculating an instant
  * after any DST gap. For example, consider a zone with a cutover
  * from 01:00 to 01:59:<br />
  * Input: 00:00  Output: 00:00<br />
  * Input: 00:30  Output: 00:30<br />
  * Input: 01:00  Output: 02:00<br />
  * Input: 01:30  Output: 02:30<br />
  * Input: 02:00  Output: 02:00<br />
  * Input: 02:30  Output: 02:30<br />
  * <p>
  * During a DST overlap (where the local time is ambiguous) this method will return
  * the earlier instant. The combination of these two rules is to always favour
  * daylight (summer) time over standard (winter) time.
  * <p>
  * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
  * Prior to v1.5, the DST gap behaviour was also not defined.
  *
  * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
  * @return the millisecond offset to subtract from local time to get UTC time
  */
 public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
+    // first estimate: treat instantLocal as if it were UTC
     final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
+    // adjust and re‐calculate
     final long instantAdjusted = instantLocal - offsetLocal;
     final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+
+    // gap handling (spring‐forward)
     if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
         if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
             long nextLocal = nextTransition(instantAdjusted);
             long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
             if (nextLocal != nextAdjusted) {
                 return offsetLocal;
             }
         }
-        } else if (offsetLocal > 0) {
+    }
+    // overlap handling (fall‐back) – pick the earlier instant (daylight time)
     long prev = previousTransition(instantAdjusted);
     if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
-                    return offsetPrev;
+        // offset just before the transition
+        int offsetBefore = getOffset(prev - 1L);
+        // offset just after the transition
+        int offsetAfter = getOffset(prev);
+        int overlap = offsetBefore - offsetAfter;
+        if (overlap > 0) {
+            long delta = instantAdjusted - prev;
+            if (delta < overlap) {
+                return offsetBefore;
             }
         }
     }
+    // otherwise use the adjusted offset
     return offsetAdjusted;
 }
\ No newline at end of file
