diff --git a/tmp/b8b4f115-3c41-4813-af17-fdc7e12f230c_buggy.java b/tmp/635bc73e-1db5-4605-9356-bce28c933a7b_fixed.java
index 57d43b9..b05a686 100644
--- a/tmp/b8b4f115-3c41-4813-af17-fdc7e12f230c_buggy.java
+++ b/tmp/635bc73e-1db5-4605-9356-bce28c933a7b_fixed.java
@@ -1,102 +1,50 @@
-    /**
-     * <p>
-     * Evaluates the continued fraction at the value x.
-     * </p>
-     *
-     * <p>
-     * The implementation of this method is based on the modified Lentz algorithm as described
-     * on page 18 ff. in:
-     * <ul>
-     * <li>
-     *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
-     *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
-     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
-     * </li>
-     * </ul>
-     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
-     * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
-     * </p>
-     *
-     * @param x the evaluation point.
-     * @param epsilon maximum error allowed.
-     * @param maxIterations maximum number of convergents
-     * @return the value of the continued fraction evaluated at x.
-     * @throws ConvergenceException if the algorithm fails to converge.
-     */
+    @Override
     public double evaluate(double x, double epsilon, int maxIterations) {
-        final double small = 1e-50;
-        double hPrev = getA(0, x);
-
-        // use the value of small as epsilon criteria for zero checks
-        if (Precision.equals(hPrev, 0.0, small)) {
-            hPrev = small;
+        // based on the modified Lentz algorithm
+        final double tiny = 1e-50;
+        // f will hold the value of the continued fraction
+        double f = getA(0, x);
+        // if the first term is zero, replace it by a tiny number
+        if (Precision.equals(f, 0.0, tiny)) {
+            f = tiny;
         }
-
-        int n = 1;
-        double dPrev = 0.0;
-        double p0 = 1.0;
-        double q1 = 1.0;
-        double cPrev = hPrev;
-        double hN = hPrev;
-
-        while (n < maxIterations) {
+        // C and D are the “modified denominators” in Lentz’s method
+        double C = f;
+        double D = 0.0;
+        double delta;
+        for (int n = 1; n < maxIterations; n++) {
             final double a = getA(n, x);
             final double b = getB(n, x);
-
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
-                }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
-                    }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
-                    }
-                }
-            }
-
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
-
-            if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
-            }
-            if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
-            }
-
-            if (FastMath.abs(deltaN - 1.0) < epsilon) {
-                break;
-            }
-
-            dPrev = q1;
-            cPrev = cN / q2;
-            p0 = hPrev;
-            hPrev = cN;
-            q1 = q2;
-            n++;
-        }
-
-        if (n >= maxIterations) {
-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
-                                                maxIterations, x);
-        }
-
-        return hN;
+            // update D
+            D = b + a * D;
+            if (Precision.equals(D, 0.0, tiny)) {
+                D = tiny;
+            }
+            // update C
+            C = b + a / C;
+            if (Precision.equals(C, 0.0, tiny)) {
+                C = tiny;
+            }
+            // invert D
+            D = 1.0 / D;
+            // the factor by which f is multiplied
+            delta = C * D;
+            f *= delta;
+            // test for divergence
+            if (Double.isInfinite(f)) {
+                throw new ConvergenceException(
+                    LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
+            }
+            if (Double.isNaN(f)) {
+                throw new ConvergenceException(
+                    LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
+            }
+            // test for convergence
+            if (FastMath.abs(delta - 1.0) < epsilon) {
+                return f;
+            }
+        }
+        // if we get here, we failed to converge in the allotted iterations
+        throw new MaxCountExceededException(
+            LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);
     }
\ No newline at end of file
