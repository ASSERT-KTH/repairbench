diff --git a/tmp/80784b5e-7d5c-4b5b-8d21-947840d46692_buggy.java b/tmp/e24c20cb-5663-480e-b730-cc8841d06581_fixed.java
index b4e6f03..a97c65f 100644
--- a/tmp/80784b5e-7d5c-4b5b-8d21-947840d46692_buggy.java
+++ b/tmp/e24c20cb-5663-480e-b730-cc8841d06581_fixed.java
@@ -1,44 +1,37 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
     if (!hasAttr(attributeKey)) {
         return ""; // nothing to make absolute with
-        } else {
+    }
+
+    try {
         URL base;
-            try {
         try {
             base = new URL(baseUri);
         } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
+            // baseUri is bad; maybe relUrl is already absolute
             URL abs = new URL(relUrl);
             return abs.toExternalForm();
         }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+
+        // workaround: java resolves "basePath/file?bar" + "?foo" to "/basePath/?foo" (dropping "file")
+        if (relUrl.startsWith("?")) {
+            // re-attach the query to the original path
+            URL abs = new URL(
+                base.getProtocol(),
+                base.getHost(),
+                base.getPort(),
+                base.getPath() + relUrl
+            );
+            return abs.toExternalForm();
+        }
+
+        // normal resolution
         URL abs = new URL(base, relUrl);
         return abs.toExternalForm();
     } catch (MalformedURLException e) {
         return "";
     }
 }
\ No newline at end of file
-    }
