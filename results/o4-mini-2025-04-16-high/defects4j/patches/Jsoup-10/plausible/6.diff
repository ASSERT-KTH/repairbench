diff --git a/tmp/42bba246-0dd7-4f81-b845-c5bae9131de6_buggy.java b/tmp/46a64aa8-42fc-428b-b7fe-39481e273732_fixed.java
index b4e6f03..268e961 100644
--- a/tmp/42bba246-0dd7-4f81-b845-c5bae9131de6_buggy.java
+++ b/tmp/46a64aa8-42fc-428b-b7fe-39481e273732_fixed.java
@@ -1,44 +1,40 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
     if (!hasAttr(attributeKey)) {
         return ""; // nothing to make absolute with
-        } else {
+    }
+
     URL base;
-            try {
     try {
         base = new URL(baseUri);
     } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
+        // base is bad, but relUrl might be absolute
+        try {
+            return new URL(relUrl).toExternalForm();
+        } catch (MalformedURLException e1) {
+            return "";
         }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
+    }
+
+    // workaround: java.net.URL resolves "file?foo" against base dropping "file"
+    if (relUrl.startsWith("?")) {
+        // strip any existing query or fragment from the baseUri string
+        String baseStr = baseUri;
+        int q = baseStr.indexOf('?');
+        int h = baseStr.indexOf('#');
+        int cut = -1;
+        if      (q >= 0 && h >= 0) cut = Math.min(q, h);
+        else if (q >= 0)           cut = q;
+        else if (h >= 0)           cut = h;
+        String prefix = (cut >= 0) ? baseStr.substring(0, cut) : baseStr;
+        return prefix + relUrl;
+    }
+
+    try {
+        return new URL(base, relUrl).toExternalForm();
     } catch (MalformedURLException e) {
         return "";
     }
 }
\ No newline at end of file
-    }
