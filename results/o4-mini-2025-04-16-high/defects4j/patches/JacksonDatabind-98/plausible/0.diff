diff --git a/tmp/35a2c735-4b18-4080-8ba8-136f6f50bf8e_buggy.java b/tmp/3e2048d6-938c-42a6-b95d-e78c21a87b80_fixed.java
index afcc27c..019af9c 100644
--- a/tmp/35a2c735-4b18-4080-8ba8-136f6f50bf8e_buggy.java
+++ b/tmp/3e2048d6-938c-42a6-b95d-e78c21a87b80_fixed.java
@@ -1,61 +1,76 @@
 /**
  * Variant called when creation of the POJO involves buffering of creator properties
  * as well as property-based creator.
  */
 public Object complete(JsonParser p, DeserializationContext ctxt,
         PropertyValueBuffer buffer, PropertyBasedCreator creator)
     throws IOException
 {
     // first things first: deserialize all data buffered:
     final int len = _properties.length;
     Object[] values = new Object[len];
     for (int i = 0; i < len; ++i) {
         String typeId = _typeIds[i];
         final ExtTypedProperty extProp = _properties[i];
         if (typeId == null) {
             // let's allow missing both type and property (may already have been set, too)
             if (_tokens[i] == null) {
                 continue;
             }
             // but not just one
             // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
             if (!extProp.hasDefaultType()) {
                 ctxt.reportInputMismatch(_beanType,
                         "Missing external type id property '%s'",
                         extProp.getTypePropertyName());
             } else {
                 typeId = extProp.getDefaultTypeId();
             }
         } else if (_tokens[i] == null) {
             SettableBeanProperty prop = extProp.getProperty();
             ctxt.reportInputMismatch(_beanType,
                     "Missing property '%s' for external type id '%s'",
-                        prop.getName(), _properties[i].getTypePropertyName());
+                    prop.getName(), extProp.getTypePropertyName());
         }
-            values[i] = _deserialize(p, ctxt, i, typeId);
+        // deserialize the actual property value (with type handling)
+        Object value = _deserialize(p, ctxt, i, typeId);
+        values[i] = value;
 
+        // if it's a creator property, fill it in
         final SettableBeanProperty prop = extProp.getProperty();
-            // also: if it's creator prop, fill in
         if (prop.getCreatorIndex() >= 0) {
-                buffer.assignParameter(prop, values[i]);
+            buffer.assignParameter(prop, value);
 
-                // [databind#999] And maybe there's creator property for type id too?
+            // [databind#999] And maybe there's creator property for the type-id too?
             SettableBeanProperty typeProp = extProp.getTypeProperty();
-                // for now, should only be needed for creator properties, too
-                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
-                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to
-                    //    apply deserializer... fun fun.
-                    buffer.assignParameter(typeProp, typeId);
+            if (typeProp != null && typeProp.getCreatorIndex() >= 0) {
+                // 31-May-2018, tatu: [databind#1328] if id is NOT plain String, need to convert
+                Object idValue = typeId;
+                // only convert if target is not String
+                if (typeProp.getType().getRawClass() != String.class) {
+                    // wrap the literal in a small TokenBuffer so that the property's
+                    // deserializer (e.g. for Enums) can handle it correctly
+                    TokenBuffer tb = new TokenBuffer(p, ctxt);
+                    tb.writeString(typeId);
+                    JsonParser idParser = tb.asParser(p);
+                    idParser.nextToken(); // advance to VALUE_STRING
+                    idValue = typeProp.getValueDeserializer().deserialize(idParser, ctxt);
+                    // no need to explicitly close tb; GC will handle it
                 }
+                buffer.assignParameter(typeProp, idValue);
             }
         }
+    }
+
+    // build the bean with creator
     Object bean = creator.build(ctxt, buffer);
+
     // third: assign non-creator properties
     for (int i = 0; i < len; ++i) {
         SettableBeanProperty prop = _properties[i].getProperty();
         if (prop.getCreatorIndex() < 0) {
             prop.set(bean, values[i]);
         }
     }
     return bean;
 }
\ No newline at end of file
