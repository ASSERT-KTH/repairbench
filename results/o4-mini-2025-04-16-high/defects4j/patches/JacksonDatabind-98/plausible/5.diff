diff --git a/tmp/6af7257d-e62c-4c86-b192-bc6f89cce1cd_buggy.java b/tmp/e3a6ff1f-3ffa-4c13-a5d9-9e238f327ab9_fixed.java
index afcc27c..936b248 100644
--- a/tmp/6af7257d-e62c-4c86-b192-bc6f89cce1cd_buggy.java
+++ b/tmp/e3a6ff1f-3ffa-4c13-a5d9-9e238f327ab9_fixed.java
@@ -1,61 +1,70 @@
 /**
  * Variant called when creation of the POJO involves buffering of creator properties
  * as well as property-based creator.
  */
 public Object complete(JsonParser p, DeserializationContext ctxt,
         PropertyValueBuffer buffer, PropertyBasedCreator creator)
     throws IOException
 {
     // first things first: deserialize all data buffered:
     final int len = _properties.length;
     Object[] values = new Object[len];
     for (int i = 0; i < len; ++i) {
         String typeId = _typeIds[i];
         final ExtTypedProperty extProp = _properties[i];
         if (typeId == null) {
             // let's allow missing both type and property (may already have been set, too)
             if (_tokens[i] == null) {
                 continue;
             }
             // but not just one
             // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
             if (!extProp.hasDefaultType()) {
                 ctxt.reportInputMismatch(_beanType,
                         "Missing external type id property '%s'",
                         extProp.getTypePropertyName());
             } else {
                 typeId = extProp.getDefaultTypeId();
             }
         } else if (_tokens[i] == null) {
             SettableBeanProperty prop = extProp.getProperty();
             ctxt.reportInputMismatch(_beanType,
                     "Missing property '%s' for external type id '%s'",
-                        prop.getName(), _properties[i].getTypePropertyName());
+                    prop.getName(), extProp.getTypePropertyName());
         }
+
+        // deserialize the actual property value using the external type id
         values[i] = _deserialize(p, ctxt, i, typeId);
 
+        // if this property was a creator property, assign it:
         final SettableBeanProperty prop = extProp.getProperty();
-            // also: if it's creator prop, fill in
         if (prop.getCreatorIndex() >= 0) {
             buffer.assignParameter(prop, values[i]);
 
-                // [databind#999] And maybe there's creator property for type id too?
+            // maybe there's also a creator property for the type id itself?
             SettableBeanProperty typeProp = extProp.getTypeProperty();
-                // for now, should only be needed for creator properties, too
-                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
-                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to
-                    //    apply deserializer... fun fun.
-                    buffer.assignParameter(typeProp, typeId);
+            if (typeProp != null && typeProp.getCreatorIndex() >= 0) {
+                // [databind#1328] if id is NOT plain String, must run it through the deserializer
+                // so e.g. enums get converted
+                TokenBuffer tb = new TokenBuffer(p);
+                tb.writeString(typeId);
+                JsonParser idParser = tb.asParser(p);
+                idParser.nextToken(); // point to VALUE_STRING
+                Object idValue = typeProp.deserialize(idParser, ctxt);
+                buffer.assignParameter(typeProp, idValue);
             }
         }
     }
+
+    // now build the bean using creator
     Object bean = creator.build(ctxt, buffer);
-        // third: assign non-creator properties
+
+    // and finally assign any non-creator properties
     for (int i = 0; i < len; ++i) {
         SettableBeanProperty prop = _properties[i].getProperty();
         if (prop.getCreatorIndex() < 0) {
             prop.set(bean, values[i]);
         }
     }
     return bean;
 }
\ No newline at end of file
