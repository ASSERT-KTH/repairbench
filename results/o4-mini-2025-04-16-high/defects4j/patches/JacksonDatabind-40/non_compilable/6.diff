diff --git a/tmp/a7bed33f-69a1-406c-a841-94fcd7a2f897_buggy.java b/tmp/091a9411-3817-4d77-b1eb-8d2b14dc1bc4_fixed.java
index e69de29..712ee27 100644
--- a/tmp/a7bed33f-69a1-406c-a841-94fcd7a2f897_buggy.java
+++ b/tmp/091a9411-3817-4d77-b1eb-8d2b14dc1bc4_fixed.java
@@ -0,0 +1,21 @@
+// In StdDeserializer (or your common base for scalar deserializers), replace the old
+// "_coerceEmptyString" with the following.  This will ensure that empty‐string→null
+// coercion only happens when the type allows it (e.g. wrappers) *and* the feature is enabled;
+// primitives (emptyAsNull=false) will still fail by default.
+
+@Override
+protected final T _coerceEmptyString(DeserializationContext ctxt,
+                                      JsonParser p,
+                                      boolean emptyAsNull)
+    throws IOException
+{
+    // only coerce empty String to null if caller said it's OK AND the feature is enabled
+    if (emptyAsNull && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+        return getNullValue(ctxt);
+    }
+    // otherwise signal an error (empty String is not allowed here)
+    // this will throw a MismatchedInputException / JsonMappingException
+    @SuppressWarnings("unchecked")
+    T result = (T) ctxt.handleUnexpectedToken(getValueClass(), p);
+    return result;
+}
\ No newline at end of file
