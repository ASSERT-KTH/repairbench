diff --git a/tmp/7f90e728-009b-4ff5-923e-02144f1d770d_buggy.java b/tmp/a6b89dcf-2bc9-4761-917a-e70e175c2a1c_fixed.java
index e69de29..712490d 100644
--- a/tmp/7f90e728-009b-4ff5-923e-02144f1d770d_buggy.java
+++ b/tmp/a6b89dcf-2bc9-4761-917a-e70e175c2a1c_fixed.java
@@ -0,0 +1,29 @@
+// In StdDeserializer.java, replace the existing _coerceEmptyString method with:
+
+@Override
+protected T _coerceEmptyString(DeserializationContext ctxt, T emptyValue) throws JsonMappingException {
+    // If empty‐string‐as‐null is enabled, only coerce for non‐primitive targets;
+    // for primitives we must fail rather than return the default primitive.
+    if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+        if (_valueClass.isPrimitive()) {
+            // fail on empty String for primitive types
+            return (T) ctxt.handleUnexpectedToken(
+                _valueClass,
+                JsonToken.VALUE_STRING,
+                ctxt.getParser(),
+                "Cannot coerce empty String to primitive %s value",
+                _valueClass.getSimpleName()
+            );
+        }
+        // non‐primitive: coerce to null (emptyValue will be null for reference types)
+        return emptyValue;
+    }
+    // if the feature is not enabled, always fail
+    return (T) ctxt.handleUnexpectedToken(
+        _valueClass,
+        JsonToken.VALUE_STRING,
+        ctxt.getParser(),
+        "Cannot coerce empty String to %s value",
+        _valueClass.getSimpleName()
+    );
+}
\ No newline at end of file
