diff --git a/tmp/a687f986-a7c1-43bc-ab94-cf2ed848a949_buggy.java b/tmp/30168580-8423-4e96-bcfb-46f1f96c1826_fixed.java
index e69de29..9446813 100644
--- a/tmp/a687f986-a7c1-43bc-ab94-cf2ed848a949_buggy.java
+++ b/tmp/30168580-8423-4e96-bcfb-46f1f96c1826_fixed.java
@@ -0,0 +1,34 @@
+@Override
+public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
+{
+    JsonToken t = p.getCurrentToken();
+    if (t == JsonToken.VALUE_NUMBER_INT) {
+        return p.getIntValue();
+    }
+    if (t == JsonToken.VALUE_STRING) {
+        String text = p.getText().trim();
+        // if empty and feature enabled, coerce to null-equivalent (null for wrapper, default for primitive)
+        if (text.isEmpty()
+            && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+            // getNullValue() will return null for Integer.class,
+            // and Integer.valueOf(0) for int.class
+            @SuppressWarnings("unchecked")
+            Integer n = (Integer) getNullValue(ctxt);
+            return n;
+        }
+        try {
+            return Integer.valueOf(NumberInput.parseInt(text));
+        } catch (IllegalArgumentException iae) {
+            return (Integer) ctxt.handleWeirdStringValue(_valueClass, text,
+                    "not a valid Integer value");
+        }
+    }
+    if (t == JsonToken.VALUE_NULL) {
+        // JSON literal null: use standard null-provider
+        @SuppressWarnings("unchecked")
+        Integer n = (Integer) getNullValue(ctxt);
+        return n;
+    }
+    // all other token types are unexpected here
+    return (Integer) ctxt.handleUnexpectedToken(_valueClass, p);
+}
\ No newline at end of file
