diff --git a/tmp/d1f1649d-acd9-4245-bf53-fe000cb542a9_buggy.java b/tmp/6ebb4143-2318-4846-a443-a542685f0f10_fixed.java
index 99d6a44..2481144 100644
--- a/tmp/d1f1649d-acd9-4245-bf53-fe000cb542a9_buggy.java
+++ b/tmp/6ebb4143-2318-4846-a443-a542685f0f10_fixed.java
@@ -1,58 +1,89 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
+ * This method is idempotent, but it is not thread‐safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
+        // Clone on write
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
+
+    //
+    // First, if the user has parsed a week‐of‐weekyear ("ww") without
+    // supplying a weekyear ("xxxx"), inject a default weekyear
+    // (using either the parsed yyyy or the iDefaultYear).
+    //
+    if (count > 0) {
+        boolean sawWeekOfWeekyear = false;
+        boolean sawWeekyear       = false;
+        Integer parsedYearOfEra   = null;
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType type = savedFields[i].iField.getType();
+            if (type == DateTimeFieldType.weekOfWeekyear()) {
+                sawWeekOfWeekyear = true;
+            } else if (type == DateTimeFieldType.weekyear()) {
+                sawWeekyear = true;
+            } else if (type == DateTimeFieldType.year()) {
+                parsedYearOfEra = savedFields[i].iValue;
+            }
+        }
+        if (sawWeekOfWeekyear && !sawWeekyear) {
+            // default the weekyear to the parsed yyyy if present, otherwise to iDefaultYear
+            int weekyear = (parsedYearOfEra != null ? parsedYearOfEra : iDefaultYear);
+            saveField(DateTimeFieldType.weekyear(), weekyear);
+            // recurse to sort/include the new field
+            return computeMillis(resetFields, text);
+        }
+    }
+
+    // Now do the month/day default‐year logic exactly as before
     sort(savedFields, count);
     if (count > 0) {
         // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days   = DurationFieldType.days().getField(iChrono);
         DurationField first  = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
