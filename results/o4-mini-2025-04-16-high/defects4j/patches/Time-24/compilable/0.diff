diff --git a/tmp/adff2761-e42e-4bbb-85c4-caac2c6c51e0_buggy.java b/tmp/3430ed8c-2558-4204-ad94-240008d2eec8_fixed.java
index 99d6a44..fac1d4c 100644
--- a/tmp/adff2761-e42e-4bbb-85c4-caac2c6c51e0_buggy.java
+++ b/tmp/3430ed8c-2558-4204-ad94-240008d2eec8_fixed.java
@@ -1,58 +1,86 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
+        // default‐year hack for patterns starting with month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days   = DurationFieldType.days().getField(iChrono);
         DurationField first  = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
+        // week‐of‐weekyear hack: ensure a weekyear and a day‐of‐week when 'w' appears
+        boolean sawW    = false;
+        boolean sawDOW  = false;
+        boolean sawWY   = false;
+        boolean sawY    = false;
+        int     yearVal = iDefaultYear;
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType type = savedFields[i].iField.getType();
+            if      (type == DateTimeFieldType.weekOfWeekyear())   sawW   = true;
+            else if (type == DateTimeFieldType.dayOfWeek())        sawDOW= true;
+            else if (type == DateTimeFieldType.weekyear())         sawWY = true;
+            else if (type == DateTimeFieldType.year()) {
+                sawY = true;
+                yearVal = savedFields[i].iValue;
+            }
+        }
+        if (sawW && (!sawWY || !sawDOW)) {
+            // inject weekyear if none
+            if (!sawWY) {
+                saveField(DateTimeFieldType.weekyear(), sawY ? yearVal : iDefaultYear);
+            }
+            // inject day-of-week = first day of week
+            if (!sawDOW) {
+                saveField(DateTimeFieldType.dayOfWeek(),
+                          iChrono.dayOfWeek().getMinimumValue());
+            }
+            return computeMillis(resetFields, text);
+        }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
