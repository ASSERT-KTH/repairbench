diff --git a/tmp/6ef33018-98fc-4441-813a-643e482bc546_buggy.java b/tmp/56b86d36-e337-4eb1-84dd-9485ae8e075f_fixed.java
index 99d6a44..67aa1e4 100644
--- a/tmp/6ef33018-98fc-4441-813a-643e482bc546_buggy.java
+++ b/tmp/56b86d36-e337-4eb1-84dd-9485ae8e075f_fixed.java
@@ -1,58 +1,76 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
+
+    // insert default calendar-year when parsing starts with month or day
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
+    // insert default day-of-week when parsing a week-of-weekyear but no day-of-week was given
+    boolean sawWeekOfWeekyear = false;
+    boolean sawDayOfWeek = false;
+    for (int i = 0; i < count; i++) {
+        DateTimeFieldType type = savedFields[i].iField.getType();
+        if (type == DateTimeFieldType.weekOfWeekyear()) {
+            sawWeekOfWeekyear = true;
+        } else if (type == DateTimeFieldType.dayOfWeek()) {
+            sawDayOfWeek = true;
+        }
+    }
+    if (sawWeekOfWeekyear && !sawDayOfWeek) {
+        // default to the first day-of-week of the chronology (Monday in ISO/GJ)
+        saveField(DateTimeFieldType.dayOfWeek(), iChrono.dayOfWeek().getMinimumValue());
+        return computeMillis(resetFields, text);
+    }
+
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
