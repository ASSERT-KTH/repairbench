diff --git a/tmp/d78351b9-d7c4-4e27-a813-9681d1422b5f_buggy.java b/tmp/4b2f54a3-d53e-43da-a3a3-ebbbf1d94458_fixed.java
index 99d6a44..3044ae0 100644
--- a/tmp/d78351b9-d7c4-4e27-a813-9681d1422b5f_buggy.java
+++ b/tmp/4b2f54a3-d53e-43da-a3a3-ebbbf1d94458_fixed.java
@@ -1,58 +1,99 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
+    // Clone the saved fields array if it is shared
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
+
+    //
+    // BEGIN PATCH: Treat a 'yyyy' + 'ww' combination as if it were 'xxxx' + 'ww',
+    // so that week‐of‐weekyear uses the parsed year as its weekyear context.
+    //
+    DateTimeField yearField = DateTimeFieldType.year().getField(iChrono);
+    DateTimeField weekyearField = DateTimeFieldType.weekyear().getField(iChrono);
+    DateTimeField weekOfWeekyearField = DateTimeFieldType.weekOfWeekyear().getField(iChrono);
+
+    boolean hasYear = false;
+    boolean hasWeekyear = false;
+    boolean hasWeekOfWeekyear = false;
+    int yearValue = iDefaultYear;
+
+    // Scan the saved fields
+    for (int j = 0; j < count; j++) {
+        SavedField sf = savedFields[j];
+        DateTimeField f = sf.iField;
+        if (f == yearField) {
+            hasYear = true;
+            yearValue = sf.iValue;
+        } else if (f == weekyearField) {
+            hasWeekyear = true;
+        } else if (f == weekOfWeekyearField) {
+            hasWeekOfWeekyear = true;
+        }
+    }
+
+    // If the user supplied a year‐of‐era and a week‐of‐weekyear, but no explicit weekyear,
+    // remove the year‐of‐era field and inject a weekyear field in its place, then re‐run.
+    if (hasYear && hasWeekOfWeekyear && !hasWeekyear) {
+        // remove all year‐of‐era savedFields
+        int pos = 0;
+        for (int j = 0; j < count; j++) {
+            SavedField sf = savedFields[j];
+            if (sf.iField != yearField) {
+                savedFields[pos++] = sf;
+            }
+        }
+        iSavedFieldsCount = pos;
+        // now save the parsed year as a weekyear
+        saveField(DateTimeFieldType.weekyear(), yearValue);
+        // recurse to re‐sort & apply
+        return computeMillis(resetFields, text);
+    }
+    //
+    // END PATCH
+    //
+
+    // Original month/day injection logic
     sort(savedFields, count);
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
-            for (int i = 0; i < count; i++) {
-                millis = savedFields[i].set(millis, resetFields);
+        for (int j = 0; j < count; j++) {
+            millis = savedFields[j].set(millis, resetFields);
+            resetFields = false;
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
