diff --git a/tmp/57ebf424-754b-41fd-8dbb-f43d2d4cbe6e_buggy.java b/tmp/e4397c96-9eca-43ca-9cc0-e90d8c15507c_fixed.java
index 99d6a44..53f605d 100644
--- a/tmp/57ebf424-754b-41fd-8dbb-f43d2d4cbe6e_buggy.java
+++ b/tmp/e4397c96-9eca-43ca-9cc0-e90d8c15507c_fixed.java
@@ -1,58 +1,111 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
+
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
+        // First, if we have a week‐of‐weekyear but no weekyear, and we did parse a calendar year,
+        // inject the weekyear so that 'w' is interpreted against the correct year.
+        boolean haveWoW = false;
+        boolean haveWy  = false;
+        boolean haveY   = false;
+        int yearVal     = iDefaultYear;
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType type = savedFields[i].iField.getType();
+            if (type == DateTimeFieldType.weekOfWeekyear()) {
+                haveWoW = true;
+            } else if (type == DateTimeFieldType.weekyear()) {
+                haveWy = true;
+            } else if (type == DateTimeFieldType.year()) {
+                haveY = true;
+                yearVal = savedFields[i].iValue;
+            }
+        }
+        if (haveWoW && !haveWy && haveY) {
+            saveField(DateTimeFieldType.weekyear(), yearVal);
+            return computeMillis(resetFields, text);
+        }
+
+        // Next, if we now have both weekyear and week‐of‐weekyear, do a special
+        // two‐step set (weekyear then week‐of‐weekyear) and ignore any calendar
+        // year/month fields, which would corrupt the week‐year context.
+        if (haveWoW && haveWy) {
+            SavedField wyField = null;
+            SavedField wwField = null;
+            for (int i = 0; i < count; i++) {
+                DateTimeFieldType type = savedFields[i].iField.getType();
+                if (type == DateTimeFieldType.weekyear()) {
+                    wyField = savedFields[i];
+                } else if (type == DateTimeFieldType.weekOfWeekyear()) {
+                    wwField = savedFields[i];
+                }
+            }
+            long millis = iMillis;
+            try {
+                millis = wyField.set(millis, resetFields);
+                millis = wwField.set(millis, resetFields);
+            } catch (IllegalFieldValueException e) {
+                if (text != null) {
+                    e.prependMessage("Cannot parse \"" + text + '"');
+                }
+                throw e;
+            }
+            if (iZone == null) {
+                millis -= iOffset;
+            } else {
+                int offset = iZone.getOffsetFromLocal(millis);
+                millis -= offset;
+                if (offset != iZone.getOffset(millis)) {
+                    String msg = "Illegal instant due to time zone offset transition (" + iZone + ')';
+                    if (text != null) {
+                        msg = "Cannot parse \"" + text + "\": " + msg;
+                    }
+                    throw new IllegalArgumentException(msg);
+                }
+            }
+            return millis;
+        }
+
+        // Original logic for defaulting a base year when the first field is
+        // month, week, or day.
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days   = DurationFieldType.days().getField(iChrono);
         DurationField first  = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
+    // Fallback to the standard loop
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
-                String message =
-                    "Illegal instant due to time zone offset transition (" + iZone + ')';
+            String msg = "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
-                    message = "Cannot parse \"" + text + "\": " + message;
+                msg = "Cannot parse \"" + text + "\": " + msg;
             }
-                throw new IllegalArgumentException(message);
+            throw new IllegalArgumentException(msg);
         }
     }
-        
     return millis;
 }
\ No newline at end of file
