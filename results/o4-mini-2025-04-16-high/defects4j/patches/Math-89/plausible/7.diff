diff --git a/tmp/4ae2477a-ca4d-4921-b1d0-972461bfc00a_buggy.java b/tmp/f562bb20-f21b-41b6-8287-9635a13f356e_fixed.java
index 42b7b48..8421080 100644
--- a/tmp/4ae2477a-ca4d-4921-b1d0-972461bfc00a_buggy.java
+++ b/tmp/f562bb20-f21b-41b6-8287-9635a13f356e_fixed.java
@@ -1,16 +1,15 @@
-    /**
-     * Adds 1 to the frequency count for v.
-     * <p>
-     * If other objects have already been added to this Frequency, v must
-     * be comparable to those that have already been added.
-     * </p>
-     * 
-     * @param v the value to add.
-     * @throws IllegalArgumentException if <code>v</code> is not Comparable, 
-     *         or is not comparable with previous entries
-     * @deprecated use {@link #addValue(Comparable)} instead
-     */
 @Deprecated
 public void addValue(Object v) {
+    // reject non‚ÄêComparable (but allow nulls through to the Comparable API)
+    if (v != null && !(v instanceof Comparable<?>)) {
+        throw new IllegalArgumentException("Value must implement Comparable");
+    }
+    try {
+        // if v is null this will pass a null through to the Comparable API,
+        // otherwise a proper cast has been guaranteed
         addValue((Comparable<?>) v);
+    } catch (ClassCastException ex) {
+        // thrown if v.compareTo(...) fails due to incompatible types
+        throw new IllegalArgumentException("Value is not comparable with existing entries", ex);
+    }
 }
\ No newline at end of file
