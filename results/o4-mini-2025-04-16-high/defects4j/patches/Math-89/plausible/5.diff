diff --git a/tmp/993ec0ca-13d3-4245-a93d-dab2188ba715_buggy.java b/tmp/de48afee-141e-413e-ba7c-6159b742cd13_fixed.java
index 42b7b48..9b93426 100644
--- a/tmp/993ec0ca-13d3-4245-a93d-dab2188ba715_buggy.java
+++ b/tmp/de48afee-141e-413e-ba7c-6159b742cd13_fixed.java
@@ -1,16 +1,27 @@
     /**
      * Adds 1 to the frequency count for v.
      * <p>
      * If other objects have already been added to this Frequency, v must
      * be comparable to those that have already been added.
      * </p>
      * 
      * @param v the value to add.
      * @throws IllegalArgumentException if <code>v</code> is not Comparable, 
      *         or is not comparable with previous entries
      * @deprecated use {@link #addValue(Comparable)} instead
      */
     @Deprecated
     public void addValue(Object v) {
-            addValue((Comparable<?>) v);            
+        // reject non‚ÄêComparable objects (but allow null through to the Comparable overload)
+        if (v != null && !(v instanceof Comparable)) {
+            throw new IllegalArgumentException("Value must be Comparable");
+        }
+        try {
+            @SuppressWarnings("unchecked")
+            Comparable<Object> key = (Comparable<Object>) v;
+            addValue(key);
+        } catch (ClassCastException ex) {
+            // thrown if v cannot be compared to existing entries
+            throw new IllegalArgumentException("Values are not mutually comparable", ex);
+        }
     }
\ No newline at end of file
