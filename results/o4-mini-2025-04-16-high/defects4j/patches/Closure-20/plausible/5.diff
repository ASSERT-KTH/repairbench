diff --git a/tmp/96b1f8d6-af76-479d-a4dd-aed4482e51b1_buggy.java b/tmp/4b2a7262-0e77-430d-a4cc-c86879e99962_fixed.java
index d4e6d48..a54ee3f 100644
--- a/tmp/96b1f8d6-af76-479d-a4dd-aed4482e51b1_buggy.java
+++ b/tmp/4b2a7262-0e77-430d-a4cc-c86879e99962_fixed.java
@@ -1,23 +1,19 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+    if (callTarget != null && callTarget.isName()
+        && callTarget.getString().equals("String")) {
+      // Only fold String(a) â†’ '' + a when there's exactly one literal argument
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value != null && value.getNext() == null
+          && (value.isNumber() || value.isString())) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
 }
\ No newline at end of file
