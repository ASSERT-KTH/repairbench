diff --git a/tmp/41475d89-62ea-4bd3-ba77-955f2500a96a_buggy.java b/tmp/5c5f0966-84f6-4b22-a33c-b8ddaf8292f4_fixed.java
index d4e6d48..0a36ebf 100644
--- a/tmp/41475d89-62ea-4bd3-ba77-955f2500a96a_buggy.java
+++ b/tmp/5c5f0966-84f6-4b22-a33c-b8ddaf8292f4_fixed.java
@@ -1,23 +1,26 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+  if (callTarget != null
+      && callTarget.isName()
+      && "String".equals(callTarget.getString())) {
+    // Only fold when there is exactly one argument
+    // and it is an immutable literal (string, number, boolean or null).
+    Node arg = callTarget.getNext();
+    if (arg != null
+        && arg.getNext() == null
+        && (arg.isStringLit()
+            || arg.isNumber()
+            || arg.isTrue()
+            || arg.isFalse()
+            || arg.isNull())) {
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
-            value.detachFromParent());
+          arg.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
