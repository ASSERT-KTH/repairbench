diff --git a/tmp/67624e6b-a808-46a3-bfc6-7708e2553b90_buggy.java b/tmp/c1e615c1-c94c-475e-9b36-208b349873a4_fixed.java
index d4e6d48..8528c20 100644
--- a/tmp/67624e6b-a808-46a3-bfc6-7708e2553b90_buggy.java
+++ b/tmp/c1e615c1-c94c-475e-9b36-208b349873a4_fixed.java
@@ -1,23 +1,22 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+  if (callTarget != null
+      && callTarget.isName()
+      && callTarget.getString().equals("String")) {
+    // Only fold when there is exactly one argument
+    // and it is a simple literal (number or string).
     Node value = callTarget.getNext();
-      if (value != null) {
+    if (value != null
+        && value.getNext() == null
+        && (value.isStringLit() || value.isNumber())) {
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
           value.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
