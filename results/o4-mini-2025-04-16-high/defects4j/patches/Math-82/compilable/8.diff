diff --git a/tmp/5de6168c-f4ff-47a9-83ad-2545a7c4ff70_buggy.java b/tmp/d474f39a-7e4a-403d-bec2-527684134e6b_fixed.java
index 220820e..6c0ce4c 100644
--- a/tmp/5de6168c-f4ff-47a9-83ad-2545a7c4ff70_buggy.java
+++ b/tmp/d474f39a-7e4a-403d-bec2-527684134e6b_fixed.java
@@ -1,22 +1,36 @@
 /**
-     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
+ * Returns the row with the minimum ratio as given by the minimum ratio test (MRT),
+ * but prefers a strictly positive ratio over a zero‐ratio pivot (to avoid degeneracy)
+ * and only falls back to a zero ratio if no positive ratio is available.
  * @param tableau simple tableau for the problem
  * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
-     * @return row with the minimum ratio
+ * @return row with the minimum (positive) ratio, or if none positive, a zero‐ratio row, or null if unbounded
  */
 private Integer getPivotRow(final int col, final SimplexTableau tableau) {
-        double minRatio = Double.MAX_VALUE;
-        Integer minRatioPos = null;
+    double minPositiveRatio = Double.POSITIVE_INFINITY;
+    Integer positiveRow = null;
+    Integer zeroRatioRow = null;
+    // scan constraint rows
     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
         final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+        // only strictly positive entries are eligible
+        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
+            final double rhs   = tableau.getEntry(i, tableau.getWidth() - 1);
             final double ratio = rhs / entry;
-                if (ratio < minRatio) {
-                    minRatio = ratio;
-                    minRatioPos = i; 
+            if (MathUtils.compareTo(ratio, 0, epsilon) > 0) {
+                // strictly positive ratio: track the minimum
+                if (MathUtils.compareTo(ratio, minPositiveRatio, epsilon) < 0) {
+                    minPositiveRatio = ratio;
+                    positiveRow = i;
                 }
+            } else {
+                // zero ratio: remember the first such row
+                if (zeroRatioRow == null) {
+                    zeroRatioRow = i;
                 }
             }
-        return minRatioPos;
+        }
+    }
+    // if we found any positive ratio, use it; otherwise fall back to a zero‐ratio row
+    return (positiveRow != null) ? positiveRow : zeroRatioRow;
 }
\ No newline at end of file
