diff --git a/tmp/bc42f0e6-e60e-4fa8-aba5-b9711d5760f5_buggy.java b/tmp/2e296b30-bf2b-49bc-b3d1-44bac829fd3c_fixed.java
index 220820e..522e026 100644
--- a/tmp/bc42f0e6-e60e-4fa8-aba5-b9711d5760f5_buggy.java
+++ b/tmp/2e296b30-bf2b-49bc-b3d1-44bac829fd3c_fixed.java
@@ -1,22 +1,27 @@
 /**
  * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
-     * @param tableau simple tableau for the problem
  * @param col the column to test the ratio of. See {@link #getPivotColumn(SimplexTableau)}
-     * @return row with the minimum ratio
+ * @param tableau simple tableau for the problem
+ * @return row with the minimum ratio, or null if unbounded
  */
 private Integer getPivotRow(final int col, final SimplexTableau tableau) {
-        double minRatio = Double.MAX_VALUE;
+    double minRatio = Double.POSITIVE_INFINITY;
     Integer minRatioPos = null;
-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
+    final int width = tableau.getWidth();
+    final int height = tableau.getHeight();
+    final int startRow = tableau.getNumObjectiveFunctions();
+    for (int i = startRow; i < height; i++) {
         final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+        // only strictly positive pivot entries
+        if (MathUtils.compareTo(entry, 0.0, epsilon) > 0) {
+            final double rhs   = tableau.getEntry(i, width - 1);
             final double ratio = rhs / entry;
-                if (ratio < minRatio) {
+            // pick the smallest ratio (with tolerance)
+            if (MathUtils.compareTo(ratio, minRatio, epsilon) < 0) {
                 minRatio    = ratio;
                 minRatioPos = i;
             }
         }
     }
     return minRatioPos;
 }
\ No newline at end of file
