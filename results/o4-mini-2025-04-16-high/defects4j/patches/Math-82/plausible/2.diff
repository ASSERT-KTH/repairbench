diff --git a/tmp/805ea36a-fef9-493a-b661-2cac16f4e1cf_buggy.java b/tmp/2fc3b4c7-45ca-4b33-8253-cf3e69878754_fixed.java
index 220820e..e87fc65 100644
--- a/tmp/805ea36a-fef9-493a-b661-2cac16f4e1cf_buggy.java
+++ b/tmp/2fc3b4c7-45ca-4b33-8253-cf3e69878754_fixed.java
@@ -1,22 +1,28 @@
 /**
  * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
  * @param tableau simple tableau for the problem
  * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
  * @return row with the minimum ratio
  */
 private Integer getPivotRow(final int col, final SimplexTableau tableau) {
-        double minRatio = Double.MAX_VALUE;
-        Integer minRatioPos = null;
-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
+    final int height      = tableau.getHeight();
+    final int width       = tableau.getWidth();
+    final int startRow    = tableau.getNumObjectiveFunctions();
+    final int rhsColumn   = width - 1;
+    double      minRatio  = Double.POSITIVE_INFINITY;
+    Integer     minRow    = null;
+    for (int i = startRow; i < height; i++) {
         final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+        // only positive entries count
+        if (MathUtils.compareTo(entry, 0.0, epsilon) > 0) {
+            final double rhs   = tableau.getEntry(i, rhsColumn);
             final double ratio = rhs / entry;
-                if (ratio < minRatio) {
+            // pick the smallest non‐negative ratio
+            if (MathUtils.compareTo(ratio, minRatio, epsilon) < 0) {
                 minRatio = ratio;
-                    minRatioPos = i; 
+                minRow   = i;
             }
         }
     }
-        return minRatioPos;
+    return minRow;
 }
\ No newline at end of file
