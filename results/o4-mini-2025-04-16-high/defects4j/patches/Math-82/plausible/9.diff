diff --git a/tmp/f0a3d6cf-6a41-41ea-aa91-98ce70151939_buggy.java b/tmp/7f445a94-7ae5-438b-9517-63a70e67e909_fixed.java
index 220820e..3bb352b 100644
--- a/tmp/f0a3d6cf-6a41-41ea-aa91-98ce70151939_buggy.java
+++ b/tmp/7f445a94-7ae5-438b-9517-63a70e67e909_fixed.java
@@ -1,22 +1,28 @@
 /**
  * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
  * @param tableau simple tableau for the problem
  * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
-     * @return row with the minimum ratio
+ * @return row with the minimum ratio, or null if no valid pivot (unbounded)
  */
 private Integer getPivotRow(final int col, final SimplexTableau tableau) {
-        double minRatio = Double.MAX_VALUE;
+    // Only rows with a strictly positive entry in 'col' are eligible.
+    double minRatio = Double.POSITIVE_INFINITY;
     Integer minRatioPos = null;
-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
+    final int rows  = tableau.getHeight();
+    final int cols  = tableau.getWidth();
+    final int start = tableau.getNumObjectiveFunctions();
+    for (int i = start; i < rows; i++) {
         final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+        // require entry > 0 (not >= 0) to avoid zero/near‐zero pivots
+        if (MathUtils.compareTo(entry, 0.0, epsilon) > 0) {
+            final double rhs   = tableau.getEntry(i, cols - 1);
             final double ratio = rhs / entry;
-                if (ratio < minRatio) {
+            // pick the smallest non-negative ratio (with epsilon tolerance)
+            if (MathUtils.compareTo(ratio, minRatio, epsilon) < 0) {
                 minRatio    = ratio;
                 minRatioPos = i;
             }
         }
     }
     return minRatioPos;
 }
\ No newline at end of file
