diff --git a/tmp/688c456b-4981-4f21-931b-716f7ba3f018_buggy.java b/tmp/50062c6d-b956-4eff-86ec-ab0a8f7b9d02_fixed.java
index 85e6a42..793da82 100644
--- a/tmp/688c456b-4981-4f21-931b-716f7ba3f018_buggy.java
+++ b/tmp/50062c6d-b956-4eff-86ec-ab0a8f7b9d02_fixed.java
@@ -1,50 +1,60 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
-        // changing the name of a ZipArchiveEntry is going to change
-        // the hashcode - see COMPRESS-164
-        // Map needs to be reconstructed in order to keep central
-        // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
+        // Position at the two-byte filename-length field in the local header
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
-            byte[] b = new byte[SHORT];
-            archive.readFully(b);
-            int fileNameLen = ZipShort.getValue(b);
-            archive.readFully(b);
-            int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
+        byte[] buf = new byte[SHORT];
+        archive.readFully(buf);
+        int fileNameLen = ZipShort.getValue(buf);
+        archive.readFully(buf);
+        int extraFieldLen = ZipShort.getValue(buf);
+        // Skip over the file-name bytes
+        int toSkip = fileNameLen;
+        while (toSkip > 0) {
+            int skipped = archive.skipBytes(toSkip);
             if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
+                throw new RuntimeException(
+                    "failed to skip file name in local file header");
             }
-                lenToSkip -= skipped;
+            toSkip -= skipped;
         }
-            byte[] localExtraData = new byte[extraFieldLen];
-            archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
+        // Read the local‐header extra data, but do NOT discard the central‐directory
+        // extra fields – instead merge the new ones in
+        byte[] localExtra = new byte[extraFieldLen];
+        archive.readFully(localExtra);
+        if (extraFieldLen > 0) {
+            // parse the local extra fields and add them to the entry
+            ZipExtraField[] lfs = ExtraFieldUtils.parse(localExtra, false);
+            for (ZipExtraField f : lfs) {
+                ze.addExtraField(f);
+            }
+        }
+        // Compute where the file data actually starts
+        offsetEntry.dataOffset = offset
+            + LFH_OFFSET_FOR_FILENAME_LENGTH
+            + SHORT + SHORT
+            + fileNameLen + extraFieldLen;
 
+        // For entries recorded without the UTF-8 flag, apply the
+        // NameAndComment extracted from the central directory extra.
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
\ No newline at end of file
