diff --git a/tmp/4ac5bcc5-53be-4120-ad64-23a1e1f97f80_buggy.java b/tmp/b30ba91f-b3c2-4a42-98fb-43ea643a5326_fixed.java
index 85e6a42..1e26e04 100644
--- a/tmp/4ac5bcc5-53be-4120-ad64-23a1e1f97f80_buggy.java
+++ b/tmp/b30ba91f-b3c2-4a42-98fb-43ea643a5326_fixed.java
@@ -1,50 +1,63 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
+
+        // skip the file name bytes in the local file header
+        int toSkip = fileNameLen;
+        while (toSkip > 0) {
+            int skipped = archive.skipBytes(toSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
-                lenToSkip -= skipped;
+            toSkip -= skipped;
         }
+
+        // read the local extra field data
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
+
+        // merge central-directory extra fields (which may contain
+        // unicode path/comment) with the local extra fields
+        byte[] centralExtra = ze.getExtra();
+        if (extraFieldLen > 0) {
+            if (centralExtra != null && centralExtra.length > 0) {
+                byte[] merged = new byte[centralExtra.length + localExtraData.length];
+                System.arraycopy(centralExtra, 0, merged, 0, centralExtra.length);
+                System.arraycopy(localExtraData, 0, merged,
+                                 centralExtra.length, localExtraData.length);
+                ze.setExtra(merged);
+            } else {
                 ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
+            }
+        }
+
+        offsetEntry.dataOffset = offset
+            + LFH_OFFSET_FOR_FILENAME_LENGTH
+            + SHORT + SHORT
+            + fileNameLen + extraFieldLen;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
\ No newline at end of file
