diff --git a/tmp/f39515ed-e365-4ea0-a0ca-68b09c2215a0_buggy.java b/tmp/e5cff442-7bfd-4a23-8d61-d4265d4562d9_fixed.java
index 85e6a42..7ee6cb7 100644
--- a/tmp/f39515ed-e365-4ea0-a0ca-68b09c2215a0_buggy.java
+++ b/tmp/e5cff442-7bfd-4a23-8d61-d4265d4562d9_fixed.java
@@ -1,50 +1,63 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
-        // changing the name of a ZipArchiveEntry is going to change
-        // the hashcode - see COMPRESS-164
-        // Map needs to be reconstructed in order to keep central
-        // directory order
+    // We must remember the central‐directory Unicode name/comment
+    // before we overwrite the entry's extra data (which changes its hashCode).
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
+
+        NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
+        String origName = nc != null ? ze.getName() : null;
+
+        // seek to the file name and extra-field lengths
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
-            byte[] b = new byte[SHORT];
-            archive.readFully(b);
-            int fileNameLen = ZipShort.getValue(b);
-            archive.readFully(b);
-            int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
+        byte[] buf = new byte[SHORT];
+        archive.readFully(buf);
+        int fileNameLen = ZipShort.getValue(buf);
+        archive.readFully(buf);
+        int extraFieldLen = ZipShort.getValue(buf);
+
+        // skip the filename
+        int toSkip = fileNameLen;
+        while (toSkip > 0) {
+            int skipped = archive.skipBytes(toSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
-                lenToSkip -= skipped;
+            toSkip -= skipped;
         }
+
+        // read the local header extra data and overwrite the entry's extra
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
 
-            if (entriesWithoutUTF8Flag.containsKey(ze)) {
-                String orig = ze.getName();
-                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
-                if (!orig.equals(ze.getName())) {
-                    nameMap.remove(orig);
-                    nameMap.put(ze.getName(), ze);
+        // compute where the actual file data starts
+        offsetEntry.dataOffset = offset
+            + LFH_OFFSET_FOR_FILENAME_LENGTH
+            + SHORT   // the fileNameLen field
+            + SHORT   // the extraFieldLen field
+            + fileNameLen
+            + extraFieldLen;
+
+        // if this entry had a central-directory Unicode extra field,
+        // re-apply that name/comment now
+        if (nc != null) {
+            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
+            String newName = ze.getName();
+            if (!origName.equals(newName)) {
+                nameMap.remove(origName);
+                nameMap.put(newName, ze);
             }
         }
     }
 }
\ No newline at end of file
