diff --git a/tmp/9bd4bd40-2ba0-4f4b-bd12-f3a05cc37829_buggy.java b/tmp/c7ebc47a-010e-4171-b893-7fc267a53f8e_fixed.java
index 85e6a42..c162c39 100644
--- a/tmp/9bd4bd40-2ba0-4f4b-bd12-f3a05cc37829_buggy.java
+++ b/tmp/c7ebc47a-010e-4171-b893-7fc267a53f8e_fixed.java
@@ -1,50 +1,62 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
+
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
+
+        // skip the file name bytes
         int lenToSkip = fileNameLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
             lenToSkip -= skipped;
         }
+
+        // read the local extra fields
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
+
+        // merge central-directory extra fields (if any) with the local ones
+        byte[] centralExtra = ze.getExtra();
+        if (centralExtra != null && centralExtra.length > 0) {
+            byte[] merged = new byte[localExtraData.length + centralExtra.length];
+            System.arraycopy(localExtraData, 0, merged, 0, localExtraData.length);
+            System.arraycopy(centralExtra, 0, merged, localExtraData.length,
+                             centralExtra.length);
+            ze.setExtra(merged);
+        } else {
             ze.setExtra(localExtraData);
+        }
+
+        // compute where the file data actually starts
         offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
             + SHORT + SHORT + fileNameLen + extraFieldLen;
 
+        // for entries without the UTF-8 flag, re-apply any Unicode extra fields
+        // (now including central-directory ones) to name/comment
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
\ No newline at end of file
