diff --git a/tmp/12579350-7afa-414b-8941-1ec7c0f4b363_buggy.java b/tmp/d495be55-9deb-4558-acc7-05b519ba5f58_fixed.java
index 85e6a42..c3316ed 100644
--- a/tmp/12579350-7afa-414b-8941-1ec7c0f4b363_buggy.java
+++ b/tmp/d495be55-9deb-4558-acc7-05b519ba5f58_fixed.java
@@ -1,50 +1,49 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
-        // changing the name of a ZipArchiveEntry is going to change
-        // the hashcode - see COMPRESS-164
-        // Map needs to be reconstructed in order to keep central
-        // directory order
+    // changing the name of a ZipArchiveEntry may change its hashCode – see COMPRESS-164
+    // so wrap the incoming map in an identity‐based map to avoid hashCode/equal issues
+    Map<ZipArchiveEntry, NameAndComment> utf8Fixes =
+        new IdentityHashMap<ZipArchiveEntry, NameAndComment>(entriesWithoutUTF8Flag);
+
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
+
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
+
+        int toSkip = fileNameLen;
+        while (toSkip > 0) {
+            int skipped = archive.skipBytes(toSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
-                lenToSkip -= skipped;
+            toSkip -= skipped;
         }
+
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
 
-            if (entriesWithoutUTF8Flag.containsKey(ze)) {
+        offsetEntry.dataOffset = offset
+            + LFH_OFFSET_FOR_FILENAME_LENGTH
+            + SHORT + SHORT
+            + fileNameLen + extraFieldLen;
+
+        NameAndComment nc = utf8Fixes.get(ze);
+        if (nc != null) {
             String orig = ze.getName();
-                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
\ No newline at end of file
