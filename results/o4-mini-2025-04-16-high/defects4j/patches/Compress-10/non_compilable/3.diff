diff --git a/tmp/23528f53-4bd8-4c25-a9bf-c8ccfa03322e_buggy.java b/tmp/f73da504-9718-4eeb-853f-472d179715d4_fixed.java
index 85e6a42..e9439c8 100644
--- a/tmp/23528f53-4bd8-4c25-a9bf-c8ccfa03322e_buggy.java
+++ b/tmp/f73da504-9718-4eeb-853f-472d179715d4_fixed.java
@@ -1,50 +1,71 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
+
+        // skip the local file header file name
         int lenToSkip = fileNameLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
             lenToSkip -= skipped;
         }
+
+        // read the local extra-data
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
+        // set only the local extra fields here
         ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
 
+        // compute where the actual file data starts
+        offsetEntry.dataOffset = offset
+            + LFH_OFFSET_FOR_FILENAME_LENGTH
+            + SHORT + SHORT
+            + fileNameLen + extraFieldLen;
+
+        // if we saw a Unicode‐extra‐field in the central dir (but no UTF8 flag)
+        // apply it now, falling back to the central‐dir values if the local
+        // header had no Unicode‐field of its own
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
-                String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
-                if (!orig.equals(ze.getName())) {
-                    nameMap.remove(orig);
+            String origName = ze.getName();
+            // try to pick up a local Unicode‐extra‐field first
+            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
+            // if that did not change the name, fall back to the central‐dir value
+            if (ze.getName().equals(origName)) {
+                ze.setName(nc.name);
+            }
+            // likewise for the comment
+            if (nc.comment != null && !nc.comment.equals(ze.getComment())) {
+                ze.setComment(nc.comment);
+            }
+            // if the name really did change, update our name‐to‐entry map
+            if (!origName.equals(ze.getName())) {
+                nameMap.remove(origName);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
\ No newline at end of file
