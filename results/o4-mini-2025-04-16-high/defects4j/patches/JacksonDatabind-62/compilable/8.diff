diff --git a/tmp/9f0031ee-c44a-480a-a2dc-931fc9a04277_buggy.java b/tmp/43709697-4890-4ad1-90a3-feb739dd2beb_fixed.java
index 6c9090f..ab96fbc 100644
--- a/tmp/9f0031ee-c44a-480a-a2dc-931fc9a04277_buggy.java
+++ b/tmp/43709697-4890-4ad1-90a3-feb739dd2beb_fixed.java
@@ -1,45 +1,38 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
+    // resolve delegate‐based creator, if any (e.g. @JsonCreator on a single‐arg factory)
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
+        // instead of only checking canCreateUsingDelegate(), we look directly for a non‐null
+        // delegate type.  If the instantiator has declared one, bind a deserializer for it.
         JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
-                if (delegateType == null) {
-                    throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
-                            +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
-                }
+        if (delegateType != null) {
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
     }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+    // allow per‐property override of ACCEPT_SINGLE_VALUE_AS_ARRAY
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
+
+    // resolve (or re‐resolve) the element deserializer
     JsonDeserializer<?> valueDeser = _valueDeserializer;
-        
-        // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
-        final JavaType vt = _collectionType.getContentType();
+    final JavaType contentType = _collectionType.getContentType();
     if (valueDeser == null) {
-            valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
-            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
+        valueDeser = ctxt.findContextualValueDeserializer(contentType, property);
+    } else {
+        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, contentType);
     }
-        // and finally, type deserializer needs context as well
+
+    // and type‐deserializer for contents, if any
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
+
+    // return a new instance with the delegate deserializer (if one was found),
+    // the element deserializer, type‐deserializer, and unwrapSingle setting.
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
