diff --git a/tmp/e8e53be3-a559-47a0-b2f0-d332d1de6330_buggy.java b/tmp/6fb1f3d2-7485-4ff6-9b0e-6fd8cdd20f7a_fixed.java
index 6c9090f..9d4f818 100644
--- a/tmp/e8e53be3-a559-47a0-b2f0-d332d1de6330_buggy.java
+++ b/tmp/6fb1f3d2-7485-4ff6-9b0e-6fd8cdd20f7a_fixed.java
@@ -1,45 +1,44 @@
 /**
  * Method called to finalize setup of this deserializer,
  * when it is known for which property deserializer is needed
  * for.
  */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
+    // preserve any delegate deserializer already assigned; otherwise
+    // resolve delegate-based creator if one exists
+    @SuppressWarnings("unchecked")
+    JsonDeserializer<Object> delegateDeser = _delegateDeserializer;
+    if (delegateDeser == null && _valueInstantiator != null
+            && _valueInstantiator.canCreateUsingDelegate()) {
         JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
         if (delegateType == null) {
-                    throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+            throw new IllegalArgumentException("Invalid delegate-creator definition for "
+                    +_collectionType+": value instantiator ("
+                    +_valueInstantiator.getClass().getName()
                     +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
         }
         delegateDeser = findDeserializer(ctxt, delegateType, property);
     }
-        }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+    // [databind#1043]: allow per-property override of "unwrap single"
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
+    // resolve element deserializer
     JsonDeserializer<?> valueDeser = _valueDeserializer;
-        
-        // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else {
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
-        // and finally, type deserializer needs context as well
+    // and contextualize type deserializer for contents, if any:
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
+    // return a new instance (or 'this' if nothing changed)
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
