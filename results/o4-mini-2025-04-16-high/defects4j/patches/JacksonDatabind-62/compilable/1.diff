diff --git a/tmp/13fe8251-5849-4e43-832a-0a3549dcf22f_buggy.java b/tmp/ce6d15da-d475-4d83-80e1-08a68a66d10f_fixed.java
index 6c9090f..4f24e70 100644
--- a/tmp/13fe8251-5849-4e43-832a-0a3549dcf22f_buggy.java
+++ b/tmp/ce6d15da-d475-4d83-80e1-08a68a66d10f_fixed.java
@@ -1,45 +1,50 @@
 /**
  * Method called to finalize setup of this deserializer,
  * when it is known for which property deserializer is needed
  * for.
  */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
+    // start with any delegate we already have, so we don't drop it accidentally
+    @SuppressWarnings("unchecked")
+    JsonDeserializer<Object> delegateDeser = (JsonDeserializer<Object>) _delegateDeserializer;
+
+    // May need to resolve (or first resolve) types for delegate‚Äêbased creators:
+    if (delegateDeser == null && _valueInstantiator != null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                         +": value instantiator ("+_valueInstantiator.getClass().getName()
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
+            // use contextual lookup for delegate
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
     }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+
+    // [databind#1043]: allow per-property override of single-value unwrapping:
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
+
+    // now resolve content deserializer
     JsonDeserializer<?> valueDeser = _valueDeserializer;
-        
-        // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
-        final JavaType vt = _collectionType.getContentType();
+    final JavaType contentType = _collectionType.getContentType();
     if (valueDeser == null) {
-            valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
-            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
+        valueDeser = ctxt.findContextualValueDeserializer(contentType, property);
+    } else {
+        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, contentType);
     }
-        // and finally, type deserializer needs context as well
+
+    // and finally, type deserializer for contents
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
+
+    // return a new instance (or 'this' if nothing changed)
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
