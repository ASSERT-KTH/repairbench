diff --git a/tmp/08abb147-6eec-49ab-9d24-1d584e983aa3_buggy.java b/tmp/639b454e-b404-4648-8c1e-47b85a4f52a0_fixed.java
index 6c9090f..e34b7f8 100644
--- a/tmp/08abb147-6eec-49ab-9d24-1d584e983aa3_buggy.java
+++ b/tmp/639b454e-b404-4648-8c1e-47b85a4f52a0_fixed.java
@@ -1,45 +1,51 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
-        // May need to resolve types for delegate-based creators:
+        // May need to resolve types for delegate-based or array-delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
         if (_valueInstantiator != null) {
+            // handle "normal" delegate creator
             if (_valueInstantiator.canCreateUsingDelegate()) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
+            // handle "array-delegate" creator (single-array-arg @JsonCreator)
+            else if (_valueInstantiator.canCreateUsingArrayDelegate()) {
+                JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+                if (delegateType == null) {
+                    throw new IllegalArgumentException("Invalid array-delegate-creator definition for "+_collectionType
+                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                            +") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'");
                 }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+                delegateDeser = findDeserializer(ctxt, delegateType, property);
+            }
+        }
+
+        // [databind#1043]: allow per-property override of single‐value‐as‐array:
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
+
+        // contextualize content deserializer
         JsonDeserializer<?> valueDeser = _valueDeserializer;
-        
-        // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
-        final JavaType vt = _collectionType.getContentType();
+        final JavaType contentType = _collectionType.getContentType();
         if (valueDeser == null) {
-            valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
-            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
+            valueDeser = ctxt.findContextualValueDeserializer(contentType, property);
+        } else {
+            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, contentType);
         }
+
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
+
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
