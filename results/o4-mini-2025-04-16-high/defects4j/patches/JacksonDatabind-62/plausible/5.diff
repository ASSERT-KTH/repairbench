diff --git a/tmp/58d217fb-a8d7-4f10-9067-a7201d06a5b6_buggy.java b/tmp/89973f45-0376-445c-bcf3-b9a22d79ecb2_fixed.java
index 6c9090f..28fd2f4 100644
--- a/tmp/58d217fb-a8d7-4f10-9067-a7201d06a5b6_buggy.java
+++ b/tmp/89973f45-0376-445c-bcf3-b9a22d79ecb2_fixed.java
@@ -1,45 +1,49 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
+    // May need to resolve types for delegate‐based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator != null) {
+        // first: standard "delegate" creator (e.g. single‐arg @JsonCreator)
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
-                    throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                throw new IllegalArgumentException("Invalid delegate‐creator definition for "
+                        +_collectionType+": value instantiator ("
+                        +_valueInstantiator.getClass().getName()
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
+        // then: array‐delegate creator (for JSON arrays → factory taking a Collection/array)
+        else if (_valueInstantiator.canCreateUsingArrayDelegate()) {
+            JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+            if (delegateType == null) {
+                throw new IllegalArgumentException("Invalid array‐delegate‐creator definition for "
+                        +_collectionType+": value instantiator ("
+                        +_valueInstantiator.getClass().getName()
+                        +") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'");
             }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+            delegateDeser = findDeserializer(ctxt, delegateType, property);
+        }
+    }
+    // allow per‐property override for single‐value‐as‐array:
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
+    // resolve value deserializer
     JsonDeserializer<?> valueDeser = _valueDeserializer;
-        
-        // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else {
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
-        // and finally, type deserializer needs context as well
+    // and type deserializer
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
