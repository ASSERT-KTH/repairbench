diff --git a/tmp/d965fe5d-9a3b-47db-8d8d-2dfa8e0a51d7_buggy.java b/tmp/caffd6e7-55b1-47fe-ba9f-2cebc8fd7d6c_fixed.java
index 6c9090f..7d74e8d 100644
--- a/tmp/d965fe5d-9a3b-47db-8d8d-2dfa8e0a51d7_buggy.java
+++ b/tmp/caffd6e7-55b1-47fe-ba9f-2cebc8fd7d6c_fixed.java
@@ -1,45 +1,49 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
+    // May need to resolve types for delegate-based or array-based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator != null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
-                    throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
+                throw new IllegalArgumentException("Invalid delegate-creator definition for "
+                        +_collectionType+ ": value instantiator ("
+                        +_valueInstantiator.getClass().getName()
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
+        } else if (_valueInstantiator.canCreateUsingArrayDelegate()) {
+            JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+            if (delegateType == null) {
+                throw new IllegalArgumentException("Invalid array-delegate-creator definition for "
+                        +_collectionType+ ": value instantiator ("
+                        +_valueInstantiator.getClass().getName()
+                        +") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'");
             }
+            delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+    }
+
+    // [databind#1043]: allow per-property override of ACCEPT_SINGLE_VALUE_AS_ARRAY
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
-        JsonDeserializer<?> valueDeser = _valueDeserializer;
 
-        // May have a content converter
-        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
-        final JavaType vt = _collectionType.getContentType();
+    // resolve content deserializer
+    JsonDeserializer<?> valueDeser = findConvertingContentDeserializer(ctxt, property, _valueDeserializer);
+    final JavaType contentType = _collectionType.getContentType();
     if (valueDeser == null) {
-            valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
-            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
+        valueDeser = ctxt.findContextualValueDeserializer(contentType, property);
+    } else {
+        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, contentType);
     }
-        // and finally, type deserializer needs context as well
+
+    // resolve type deserializer for values, if any
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
+
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
