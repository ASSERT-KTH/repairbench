diff --git a/tmp/15cc6a3d-ab39-44d2-a1dc-768ca65df2f8_buggy.java b/tmp/db7cce30-3844-45d3-8b09-55f97d037a3e_fixed.java
index 210695a..aab8d4a 100644
--- a/tmp/15cc6a3d-ab39-44d2-a1dc-768ca65df2f8_buggy.java
+++ b/tmp/db7cce30-3844-45d3-8b09-55f97d037a3e_fixed.java
@@ -1,32 +1,23 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
+@Override
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+  // Delegate for union types, then swap the results
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
-    // other types
+  // If this and that are always equal, "!=" can never hold,
+  // so under the inequality branch both operands collapse to the bottom type.
   switch (this.testForEquality(that)) {
     case TRUE:
-        return new TypePair(null, null);
+      return new TypePair(JSType.NO_TYPE, JSType.NO_TYPE);
 
     case FALSE:
     case UNKNOWN:
+      // Either always unequal or maybe unequal: no further narrowing
       return new TypePair(this, that);
   }
 
-    // switch case is exhaustive
+  // Should be unreachable
   throw new IllegalStateException();
 }
\ No newline at end of file
