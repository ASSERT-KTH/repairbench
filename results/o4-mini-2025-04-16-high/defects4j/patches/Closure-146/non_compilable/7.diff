diff --git a/tmp/4e54e604-dd1d-4b2f-b983-aedf36ad0fd0_buggy.java b/tmp/48e40699-41f6-4a4f-b9aa-bf36703d0150_fixed.java
index 210695a..5950ff1 100644
--- a/tmp/4e54e604-dd1d-4b2f-b983-aedf36ad0fd0_buggy.java
+++ b/tmp/48e40699-41f6-4a4f-b9aa-bf36703d0150_fixed.java
@@ -1,32 +1,23 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
+@Override
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+  // union types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
-    // other types
   switch (this.testForEquality(that)) {
     case TRUE:
-        return new TypePair(null, null);
+      // The inequality v1 != v2 is always false, so the branch is unreachable â€“
+      // restrict both sides to the bottom type (NO_TYPE).
+      JSType none = registry.getNativeType(JSTypeNative.NO_TYPE);
+      return new TypePair(none, none);
 
     case FALSE:
     case UNKNOWN:
       return new TypePair(this, that);
   }
 
-    // switch case is exhaustive
+  // Exhaustive switch
   throw new IllegalStateException();
 }
\ No newline at end of file
