diff --git a/tmp/5ea7e1c1-5d7c-4a7b-a71e-c849b92cbef8_buggy.java b/tmp/6897ee41-3a5f-44e6-9bbb-815ccc0ce407_fixed.java
index 210695a..17a4c48 100644
--- a/tmp/5ea7e1c1-5d7c-4a7b-a71e-c849b92cbef8_buggy.java
+++ b/tmp/6897ee41-3a5f-44e6-9bbb-815ccc0ce407_fixed.java
@@ -1,32 +1,25 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
+@Override
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+  // union types: swap the result of the recursive call
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
   // other types
   switch (this.testForEquality(that)) {
     case TRUE:
-        return new TypePair(null, null);
+      // if two types are always equal, then the "!=" branch is impossible:
+      // restrict both to the bottom type (NO_TYPE)
+      JSType noType = this.getRegistry().getNativeType(JSTypeNative.NO_TYPE);
+      return new TypePair(noType, noType);
 
     case FALSE:
     case UNKNOWN:
+      // no further narrowing
       return new TypePair(this, that);
   }
 
-    // switch case is exhaustive
+  // should be unreachable
   throw new IllegalStateException();
 }
\ No newline at end of file
