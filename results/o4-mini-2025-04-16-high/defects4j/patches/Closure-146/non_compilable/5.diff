diff --git a/tmp/1993d7be-03bd-4c70-b59c-c6fc3f80d648_buggy.java b/tmp/2bb8ff71-7a7a-42ff-9d11-62d192022dfb_fixed.java
index 210695a..90994e4 100644
--- a/tmp/1993d7be-03bd-4c70-b59c-c6fc3f80d648_buggy.java
+++ b/tmp/2bb8ff71-7a7a-42ff-9d11-62d192022dfb_fixed.java
@@ -1,32 +1,30 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
+@Override
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+  // Handle union types by flipping the result.
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
-    // other types
+  // undefined != undefined or null != null is impossible → bottom (NO_TYPE)
+  if ((this.isVoidType() && that.isVoidType())
+      || (this.isNullType() && that.isNullType())) {
+    JSType none = registry.getNativeType(JSTypeNative.NO_TYPE);
+    return new TypePair(none, none);
+  }
+
+  // Otherwise, dispatch on the equality test
   switch (this.testForEquality(that)) {
     case TRUE:
-        return new TypePair(null, null);
-
+      // always equal → inequality branch is unreachable → bottom
+      JSType noneEq = registry.getNativeType(JSTypeNative.NO_TYPE);
+      return new TypePair(noneEq, noneEq);
     case FALSE:
     case UNKNOWN:
+      // either always or maybe not equal → no further restriction
       return new TypePair(this, that);
   }
 
-    // switch case is exhaustive
+  // Should be unreachable
   throw new IllegalStateException();
 }
\ No newline at end of file
