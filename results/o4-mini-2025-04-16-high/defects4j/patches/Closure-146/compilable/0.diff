diff --git a/tmp/f6088242-b64c-497f-a27d-33399d3afe7e_buggy.java b/tmp/221ea9f0-86fb-49a9-961e-211ec7780239_fixed.java
index 210695a..4baf4a1 100644
--- a/tmp/f6088242-b64c-497f-a27d-33399d3afe7e_buggy.java
+++ b/tmp/221ea9f0-86fb-49a9-961e-211ec7780239_fixed.java
@@ -1,32 +1,25 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+  // union types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
-    // other types
   switch (this.testForEquality(that)) {
     case TRUE:
-        return new TypePair(null, null);
+      // inequality is impossible (values always equal) → unreachable branch
+      JSType noType = registry.getNativeType(JSTypeNative.NO_TYPE);
+      return new TypePair(noType, noType);
 
     case FALSE:
-      case UNKNOWN:
+      // values are always unequal → no new information
       return new TypePair(this, that);
+
+    case UNKNOWN:
+      // may or may not be unequal → don't narrow
+      return new TypePair(null, null);
   }
 
-    // switch case is exhaustive
+  // Should never get here
   throw new IllegalStateException();
 }
\ No newline at end of file
