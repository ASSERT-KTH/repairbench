diff --git a/tmp/f6002640-ecd8-4657-a45c-4d92f2c9b5c6_buggy.java b/tmp/7bdc501e-677d-4348-ad93-0d202020190d_fixed.java
index d27c40c..f37930a 100644
--- a/tmp/f6002640-ecd8-4657-a45c-4d92f2c9b5c6_buggy.java
+++ b/tmp/7bdc501e-677d-4348-ad93-0d202020190d_fixed.java
@@ -1,49 +1,74 @@
 /** Compute two arguments arc tangent of a derivative structure.
  * @param y array holding the first operand
  * @param yOffset offset of the first operand in its array
  * @param x array holding the second operand
  * @param xOffset offset of the second operand in its array
  * @param result array where result must be stored (for
  * two arguments arc tangent the result array <em>cannot</em>
  * be the input array)
  * @param resultOffset offset of the result in its array
  */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
-        // compute r = sqrt(x^2+y^2)
-        double[] tmp1 = new double[getSize()];
-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
-        double[] tmp2 = new double[getSize()];
-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
+    final int n = getSize();
+    double x0 = x[xOffset];
+    double y0 = y[yOffset];
 
-        if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+    // special case: if any argument is NaN, all derivatives are NaN
+    if (Double.isNaN(x0) || Double.isNaN(y0)) {
+        for (int i = 0; i < n; i++) {
+            result[resultOffset + i] = Double.NaN;
         }
-
+        return;
+    }
+    // special case: both arguments are zero (+0/+0, +0/-0, -0/+0, -0/-0)
+    if (x0 == 0.0 && y0 == 0.0) {
+        boolean xNeg = (Double.doubleToRawLongBits(x0) < 0L);
+        double value;
+        if (!xNeg) {
+            // x is +0 => result is y (preserves sign of y)
+            value = y0;
         } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+            // x is -0 => result is ±π depending on sign of y
+            value = FastMath.copySign(FastMath.PI, y0);
         }
-
+        result[resultOffset] = value;
+        // derivatives are set to zero
+        for (int i = 1; i < n; i++) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
     }
 
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+    // general case: compute r = sqrt(x^2 + y^2)
+    double[] tmp1 = new double[n];
+    double[] tmp2 = new double[n];
+    multiply(x, xOffset, x, xOffset, tmp1, 0); // tmp1 = x^2
+    multiply(y, yOffset, y, yOffset, tmp2, 0); // tmp2 = y^2
+    add(tmp1, 0, tmp2, 0, tmp2, 0);            // tmp2 = x^2 + y^2
+    rootN(tmp2, 0, 2, tmp1, 0);                // tmp1 = sqrt(x^2 + y^2) = r
 
+    if (x0 >= 0.0) {
+        // atan2(y, x) = 2 * atan( y / (r + x) )
+        add(tmp1, 0, x, xOffset, tmp2, 0);      // tmp2 = r + x
+        divide(y, yOffset, tmp2, 0, tmp1, 0);   // tmp1 = y / (r + x)
+        atan(tmp1, 0, tmp2, 0);                 // tmp2 = atan(y / (r + x))
+        for (int i = 0; i < n; ++i) {
+            result[resultOffset + i] = 2.0 * tmp2[i];
+        }
+    } else {
+        // atan2(y, x) = copySign(π, y) - 2 * atan( y / (r - x) )
+        subtract(tmp1, 0, x, xOffset, tmp2, 0); // tmp2 = r - x
+        divide(y, yOffset, tmp2, 0, tmp1, 0);   // tmp1 = y / (r - x)
+        atan(tmp1, 0, tmp2, 0);                 // tmp2 = atan(y / (r - x))
+        double pi = FastMath.copySign(FastMath.PI, y0);
+        // value
+        result[resultOffset] = pi - 2.0 * tmp2[0];
+        // derivatives
+        for (int i = 1; i < n; ++i) {
+            result[resultOffset + i] = -2.0 * tmp2[i];
+        }
+    }
 }
\ No newline at end of file
