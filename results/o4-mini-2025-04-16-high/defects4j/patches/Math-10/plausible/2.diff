diff --git a/tmp/aaf0cdbf-11ef-4c02-8e44-e6b8ea539aa9_buggy.java b/tmp/d413c850-d7a0-4792-bc1e-2223035cbbc2_fixed.java
index d27c40c..8076f8c 100644
--- a/tmp/aaf0cdbf-11ef-4c02-8e44-e6b8ea539aa9_buggy.java
+++ b/tmp/d413c850-d7a0-4792-bc1e-2223035cbbc2_fixed.java
@@ -1,49 +1,118 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
-
+    double x0 = x[xOffset];
+    double y0 = y[yOffset];
+    int n = getSize();
+    // NaN propagation
+    if (Double.isNaN(x0) || Double.isNaN(y0)) {
+        result[resultOffset] = Double.NaN;
+        for (int i = 1; i < n; ++i) {
+            result[resultOffset + i] = Double.NaN;
+        }
+        return;
+    }
+    // Special cases when y == 0
+    if (y0 == 0.0) {
+        long yBits = Double.doubleToRawLongBits(y0);
+        boolean yNeg = (yBits < 0);
+        if (x0 == 0.0) {
+            // atan2(±0, ±0)
+            long xBits = Double.doubleToRawLongBits(x0);
+            boolean xNeg = (xBits < 0);
+            if (!xNeg) {
+                result[resultOffset] = y0; // ±0
+            } else {
+                result[resultOffset] = FastMath.copySign(FastMath.PI, y0);
+            }
+        } else if (x0 < 0.0) {
+            // atan2(±0, x<0)
+            result[resultOffset] = FastMath.copySign(FastMath.PI, y0);
+        } else {
+            // atan2(±0, x>0)
+            result[resultOffset] = y0; // ±0
+        }
+        // all derivatives are zero
+        for (int i = 1; i < n; ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
+    // Special cases when either argument is infinite
+    boolean xInf = Double.isInfinite(x0);
+    boolean yInf = Double.isInfinite(y0);
+    if (yInf && xInf) {
+        // atan2(±∞, ±∞)
+        long xBits = Double.doubleToRawLongBits(x0);
+        long yBits = Double.doubleToRawLongBits(y0);
+        boolean xNeg = (xBits < 0);
+        boolean yNeg = (yBits < 0);
+        double v;
+        if (!yNeg && !xNeg) {
+            v = FastMath.PI / 4;
+        } else if (!yNeg && xNeg) {
+            v = 3 * FastMath.PI / 4;
+        } else if (yNeg && !xNeg) {
+            v = -FastMath.PI / 4;
+        } else {
+            v = -3 * FastMath.PI / 4;
+        }
+        result[resultOffset] = v;
+        for (int i = 1; i < n; ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
+    if (yInf) {
+        // atan2(±∞, finite)
+        result[resultOffset] = FastMath.copySign(FastMath.PI / 2, y0);
+        for (int i = 1; i < n; ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
+    if (xInf) {
+        // atan2(finite, ±∞)
+        long xBits = Double.doubleToRawLongBits(x0);
+        boolean xNeg = (xBits < 0);
+        if (!xNeg) {
+            result[resultOffset] = FastMath.copySign(0.0, y0);
+        } else {
+            result[resultOffset] = FastMath.copySign(FastMath.PI, y0);
+        }
+        for (int i = 1; i < n; ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
+    // Generic case: finite y0 != 0 and finite x0
+    double[] tmp1 = new double[n];
+    double[] tmp2 = new double[n];
     // compute r = sqrt(x^2 + y^2)
-        double[] tmp1 = new double[getSize()];
-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
-        double[] tmp2 = new double[getSize()];
-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
-
-        if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+    multiply(x, xOffset, x, xOffset, tmp1, 0);
+    multiply(y, yOffset, y, yOffset, tmp2, 0);
+    add(tmp1, 0, tmp2, 0, tmp2, 0);
+    rootN(tmp2, 0, 2, tmp1, 0);
+    // branch on sign of x0
+    long xb = Double.doubleToRawLongBits(x0);
+    boolean xNeg = (xb < 0);
+    if (!xNeg) {
+        // atan2(y, x) = 2 * atan( y / (r + x) )
+        add(tmp1, 0, x, xOffset, tmp2, 0);
+        divide(y, yOffset, tmp2, 0, tmp1, 0);
+        atan(tmp1, 0, tmp2, 0);
+        for (int i = 0; i < n; ++i) {
+            result[resultOffset + i] = 2 * tmp2[i];
         }
-
     } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+        // atan2(y, x) = ±π - 2 * atan( y / (r - x) )
+        subtract(tmp1, 0, x, xOffset, tmp2, 0);
+        divide(y, yOffset, tmp2, 0, tmp1, 0);
+        atan(tmp1, 0, tmp2, 0);
+        double v = ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];
+        result[resultOffset] = v;
+        for (int i = 1; i < n; ++i) {
+            result[resultOffset + i] = -2 * tmp2[i];
         }
-
     }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
