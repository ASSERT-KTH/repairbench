diff --git a/tmp/bfda8e1d-fed2-4968-b352-f7943ed724d8_buggy.java b/tmp/8071bab6-089a-4bbd-9286-fd951af5e7f0_fixed.java
index d27c40c..a166f23 100644
--- a/tmp/bfda8e1d-fed2-4968-b352-f7943ed724d8_buggy.java
+++ b/tmp/8071bab6-089a-4bbd-9286-fd951af5e7f0_fixed.java
@@ -1,49 +1,62 @@
 /** Compute two arguments arc tangent of a derivative structure.
  * @param y array holding the first operand
  * @param yOffset offset of the first operand in its array
  * @param x array holding the second operand
  * @param xOffset offset of the second operand in its array
  * @param result array where result must be stored (for
  * two arguments arc tangent the result array <em>cannot</em>
  * be the input array)
  * @param resultOffset offset of the result in its array
  */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
+    double x0 = x[xOffset];
+    double y0 = y[yOffset];
+    // special case: +0/+0, +0/-0, -0/+0, -0/-0
+    if (x0 == 0.0 && y0 == 0.0) {
+        // detect negative zero on x
+        boolean xNeg = (1.0 / x0) < 0.0;
+        // if x is +0 => result = ±0, if x is -0 => result = ±π
+        double value = xNeg ? FastMath.PI : 0.0;
+        // propagate the sign of y to the result
+        result[resultOffset] = FastMath.copySign(value, y0);
+        // derivatives at the branch cut are undefined → NaN
+        int size = getSize();
+        for (int i = 1; i < size; ++i) {
+            result[resultOffset + i] = Double.NaN;
+        }
+        return;
+    }
+
     // compute r = sqrt(x^2 + y^2)
-        double[] tmp1 = new double[getSize()];
-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
-        double[] tmp2 = new double[getSize()];
-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
+    int size = getSize();
+    double[] tmp1 = new double[size];
+    double[] tmp2 = new double[size];
+    multiply(x, xOffset, x, xOffset, tmp1, 0);   // tmp1 = x^2
+    multiply(y, yOffset, y, yOffset, tmp2, 0);   // tmp2 = y^2
+    add(tmp1, 0, tmp2, 0, tmp2, 0);              // tmp2 = x^2 + y^2
+    rootN(tmp2, 0, 2, tmp1, 0);                  // tmp1 = r
 
-        if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+    if (x0 >= 0.0) {
+        // atan2(y, x) = 2 * atan( y / (r + x) )
+        add(tmp1, 0, x, xOffset, tmp2, 0);       // tmp2 = r + x
+        divide(y, yOffset, tmp2, 0, tmp1, 0);    // tmp1 = y / (r + x)
+        atan(tmp1, 0, tmp2, 0);                  // tmp2 = atan( y / (r + x) )
+        for (int i = 0; i < size; ++i) {
+            result[resultOffset + i] = 2 * tmp2[i];
         }
-
     } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+        // atan2(y, x) = ±π - 2 * atan( y / (r - x) )
+        subtract(tmp1, 0, x, xOffset, tmp2, 0);  // tmp2 = r - x
+        divide(y, yOffset, tmp2, 0, tmp1, 0);    // tmp1 = y / (r - x)
+        atan(tmp1, 0, tmp2, 0);                  // tmp2 = atan( y / (r - x) )
+        // choose base π with sign from tmp2[0] (<0 → -π, >0 → +π)
+        double base = tmp2[0] < 0.0 ? -FastMath.PI : FastMath.PI;
+        result[resultOffset] = base - 2 * tmp2[0];
+        for (int i = 1; i < size; ++i) {
+            result[resultOffset + i] = -2 * tmp2[i];
         }
-
     }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
