diff --git a/tmp/3da39c0a-f881-40f4-badd-d5027b9457f8_buggy.java b/tmp/418116eb-c29c-4a4c-9bf6-b9e742da6c0c_fixed.java
index d27c40c..16072f4 100644
--- a/tmp/3da39c0a-f881-40f4-badd-d5027b9457f8_buggy.java
+++ b/tmp/418116eb-c29c-4a4c-9bf6-b9e742da6c0c_fixed.java
@@ -1,49 +1,65 @@
 /** Compute two arguments arc tangent of a derivative structure.
  * @param y array holding the first operand
  * @param yOffset offset of the first operand in its array
  * @param x array holding the second operand
  * @param xOffset offset of the second operand in its array
  * @param result array where result must be stored (for
  * two arguments arc tangent the result array <em>cannot</em>
  * be the input array)
  * @param resultOffset offset of the result in its array
  */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
     // compute r = sqrt(x^2+y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
     if (x[xOffset] >= 0) {
 
         // compute atan2(y, x) = 2 atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
         for (int i = 0; i < tmp2.length; ++i) {
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
         }
 
     } else {
 
         // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
         result[resultOffset] =
                 ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
         for (int i = 1; i < tmp2.length; ++i) {
             result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
         }
 
     }
 
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+    // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0) correctly
+    double y0 = y[yOffset];
+    double x0 = x[xOffset];
+    if (y0 == 0.0 && x0 == 0.0) {
+        boolean xNeg = (Double.doubleToRawLongBits(x0) < 0);
+        boolean yNeg = (Double.doubleToRawLongBits(y0) < 0);
+        if (xNeg) {
+            // (+0,-0)->+pi, (-0,-0)->-pi
+            result[resultOffset] = yNeg ? -FastMath.PI : FastMath.PI;
+        } else {
+            // (+0,+0)->+0, (-0,+0)->-0
+            result[resultOffset] = FastMath.copySign(0.0, y0);
+        }
+        // derivatives at (0,0) are undefined â†’ propagate NaN
+        for (int i = 1; i < getSize(); ++i) {
+            result[resultOffset + i] = Double.NaN;
+        }
+    }
 }
\ No newline at end of file
