diff --git a/tmp/3439ba71-5a9b-431b-b46e-88ccb66afeff_buggy.java b/tmp/96acca3a-1386-4bfd-8f2b-3ab0bfcf1353_fixed.java
index d64eec3..c515c28 100644
--- a/tmp/3439ba71-5a9b-431b-b46e-88ccb66afeff_buggy.java
+++ b/tmp/96acca3a-1386-4bfd-8f2b-3ab0bfcf1353_fixed.java
@@ -1,122 +1,121 @@
 /**
  * Draws the axis label.
  *
  * @param label       the label text.
  * @param g2          the graphics device.
  * @param plotArea    the plot area.
  * @param dataArea    the area inside the axes.
  * @param edge        the location of the axis.
  * @param state       the axis state (<code>null</code> not permitted).
  * @param plotState   the plot state (<code>null</code> permitted).
  *
  * @return Information about the axis.
  */
-    protected AxisState drawLabel(String label, Graphics2D g2, 
-            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, 
-            AxisState state, PlotRenderingInfo plotState) {
+@Override
+protected AxisState drawLabel(String label,
+                              Graphics2D g2,
+                              Rectangle2D plotArea,
+                              Rectangle2D dataArea,
+                              RectangleEdge edge,
+                              AxisState state,
+                              PlotRenderingInfo plotState) {
 
-        // it is unlikely that 'state' will be null, but check anyway...
     if (state == null) {
         throw new IllegalArgumentException("Null 'state' argument.");
     }
-        
-        if ((label == null) || (label.equals(""))) {
+    if (label == null || label.length() == 0) {
+        // nothing to draw
         return state;
     }
 
-        Font font = getLabelFont();
-        RectangleInsets insets = getLabelInsets();
-        g2.setFont(font);
+    // save the original graphics settings
+    Font originalFont = g2.getFont();
+    Paint originalPaint = g2.getPaint();
+
+    // set up for drawing the label
+    Font labelFont = getLabelFont();
+    g2.setFont(labelFont);
     g2.setPaint(getLabelPaint());
+    RectangleInsets insets = getLabelInsets();
+
+    // measure the unrotated label
     FontMetrics fm = g2.getFontMetrics();
-        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
-        Shape hotspot = null;
+    Rectangle2D lb = TextUtilities.getTextBounds(label, g2, fm);
+    float w = (float) lb.getWidth();
+    float h = (float) lb.getHeight();
 
+    // compute the anchor point for the label
+    float x = 0f;
+    float y = 0f;
     if (edge == RectangleEdge.TOP) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() - insets.getBottom() 
-                    - h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorUp(insets.getTop() + labelBounds.getHeight() 
-                    + insets.getBottom());
+        x = (float) dataArea.getCenterX();
+        y = (float) (state.getCursor() - insets.getBottom() - h / 2f);
+        TextUtilities.drawRotatedString(
+                label, g2, x, y,
+                TextAnchor.CENTER,
+                getLabelAngle(),
+                TextAnchor.CENTER
+        );
+        state.cursorUp(insets.getTop() + h + insets.getBottom());
     }
     else if (edge == RectangleEdge.BOTTOM) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() + insets.getTop() 
-                    + h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorDown(insets.getTop() + labelBounds.getHeight() 
-                    + insets.getBottom());
+        x = (float) dataArea.getCenterX();
+        y = (float) (state.getCursor() + insets.getTop() + h / 2f);
+        TextUtilities.drawRotatedString(
+                label, g2, x, y,
+                TextAnchor.CENTER,
+                getLabelAngle(),
+                TextAnchor.CENTER
+        );
+        state.cursorDown(insets.getTop() + h + insets.getBottom());
     }
     else if (edge == RectangleEdge.LEFT) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() - insets.getRight() 
-                    - w / 2.0);
-            float labely = (float) dataArea.getCenterY();
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
-                    + insets.getRight());
+        x = (float) (state.getCursor() - insets.getRight() - w / 2f);
+        y = (float) dataArea.getCenterY();
+        TextUtilities.drawRotatedString(
+                label, g2, x, y,
+                TextAnchor.CENTER,
+                getLabelAngle() - Math.PI / 2.0,
+                TextAnchor.CENTER
+        );
+        state.cursorLeft(insets.getLeft() + w + insets.getRight());
     }
     else if (edge == RectangleEdge.RIGHT) {
-
-            AffineTransform t = AffineTransform.getRotateInstance(
+        x = (float) (state.getCursor() + insets.getLeft() + w / 2f);
+        y = (float) dataArea.getCenterY();
+        TextUtilities.drawRotatedString(
+                label, g2, x, y,
+                TextAnchor.CENTER,
                 getLabelAngle() + Math.PI / 2.0,
-                    labelBounds.getCenterX(), labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() 
-                            + insets.getLeft() + w / 2.0);
-            float labely = (float) (dataArea.getY() + dataArea.getHeight() 
-                    / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
-                    + insets.getRight());
-
+                TextAnchor.CENTER
+        );
+        state.cursorRight(insets.getLeft() + w + insets.getRight());
     }
-        if (plotState != null && hotspot != null) {
+
+    // restore the original graphics settings
+    g2.setFont(originalFont);
+    g2.setPaint(originalPaint);
+
+    // add an entity for the axis label if requested
+    if (plotState != null) {
         ChartRenderingInfo owner = plotState.getOwner();
+        if (owner != null) {
             EntityCollection entities = owner.getEntityCollection();
             if (entities != null) {
-                    entities.add(new AxisLabelEntity(this, hotspot, 
-                            this.labelToolTip, this.labelURL));
+                Shape hotspot = new Rectangle2D.Float(
+                        x - w / 2f,
+                        y - h / 2f,
+                        w,
+                        h
+                );
+                entities.add(new AxisLabelEntity(
+                        this, hotspot,
+                        getLabelToolTip(),
+                        getLabelURL()
+                ));
+            }
         }
     }
-        return state;
 
+    return state;
 }
\ No newline at end of file
