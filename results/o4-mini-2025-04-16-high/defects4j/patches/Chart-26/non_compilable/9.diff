diff --git a/tmp/896ee6be-64e1-4229-9db1-80fee5c1af15_buggy.java b/tmp/5095cb4b-5685-4995-892f-9020f25738d3_fixed.java
index d64eec3..83c0d98 100644
--- a/tmp/896ee6be-64e1-4229-9db1-80fee5c1af15_buggy.java
+++ b/tmp/5095cb4b-5685-4995-892f-9020f25738d3_fixed.java
@@ -1,122 +1,122 @@
 /**
  * Draws the axis label.
  *
-     * @param label  the label text.
+ * @param label       the label text (possibly empty/null).
  * @param g2          the graphics device.
-     * @param plotArea  the plot area.
-     * @param dataArea  the area inside the axes.
-     * @param edge  the location of the axis.
-     * @param state  the axis state (<code>null</code> not permitted).
-     * @param plotState  the plot state (<code>null</code> permitted).
+ * @param plotArea    the area within which the whole plot is drawn.
+ * @param dataArea    the area within the axes.
+ * @param edge        the edge of the plot for this axis.
+ * @param state       collects information about the axis (never null).
+ * @param plotState   collects information about the plot (possibly null).
  *
-     * @return Information about the axis.
+ * @return The updated AxisState.
  */
-    protected AxisState drawLabel(String label, Graphics2D g2, 
-            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, 
-            AxisState state, PlotRenderingInfo plotState) {
+protected AxisState drawLabel(String label,
+                             Graphics2D g2,
+                             Rectangle2D plotArea,
+                             Rectangle2D dataArea,
+                             RectangleEdge edge,
+                             AxisState state,
+                             PlotRenderingInfo plotState) {
 
-        // it is unlikely that 'state' will be null, but check anyway...
+    // we expect a non-null state
     if (state == null) {
         throw new IllegalArgumentException("Null 'state' argument.");
     }
-        
-        if ((label == null) || (label.equals(""))) {
+    // nothing to do if there's no label
+    if (label == null || label.length() == 0) {
         return state;
     }
 
-        Font font = getLabelFont();
-        RectangleInsets insets = getLabelInsets();
-        g2.setFont(font);
+    // set up the font and paint
+    g2.setFont(getLabelFont());
     g2.setPaint(getLabelPaint());
+
+    // measure the unrotated label
     FontMetrics fm = g2.getFontMetrics();
-        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
-        Shape hotspot = null;
+    Rectangle2D bounds = TextUtilities.getTextBounds(label, g2, fm);
+    double labelW = bounds.getWidth();
+    double labelH = bounds.getHeight();
 
+    // the insets around the label
+    RectangleInsets insets = getLabelInsets();
+
+    // common parameters
+    double angle = getLabelAngle();
+    double x = 0.0;
+    double y = 0.0;
+
+    // position and draw the label for each edge
     if (edge == RectangleEdge.TOP) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() - insets.getBottom() 
-                    - h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorUp(insets.getTop() + labelBounds.getHeight() 
-                    + insets.getBottom());
+        x = dataArea.getCenterX();
+        y = state.getCursor() - insets.getBottom() - (labelH / 2.0);
+        TextUtilities.drawRotatedString(
+            label, g2,
+            (float) x, (float) y,
+            TextAnchor.CENTER,
+            angle,
+            TextAnchor.CENTER
+        );
+        state.cursorUp(insets.getTop() + labelH + insets.getBottom());
     }
     else if (edge == RectangleEdge.BOTTOM) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() + insets.getTop() 
-                    + h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorDown(insets.getTop() + labelBounds.getHeight() 
-                    + insets.getBottom());
+        x = dataArea.getCenterX();
+        y = state.getCursor() + insets.getTop() + (labelH / 2.0);
+        TextUtilities.drawRotatedString(
+            label, g2,
+            (float) x, (float) y,
+            TextAnchor.CENTER,
+            angle,
+            TextAnchor.CENTER
+        );
+        state.cursorDown(insets.getTop() + labelH + insets.getBottom());
     }
     else if (edge == RectangleEdge.LEFT) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() - insets.getRight() 
-                    - w / 2.0);
-            float labely = (float) dataArea.getCenterY();
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
-                    + insets.getRight());
+        x = state.getCursor() - insets.getRight() - (labelH / 2.0);
+        y = dataArea.getCenterY();
+        TextUtilities.drawRotatedString(
+            label, g2,
+            (float) x, (float) y,
+            TextAnchor.CENTER,
+            angle - Math.PI / 2.0,
+            TextAnchor.CENTER
+        );
+        state.cursorLeft(insets.getLeft() + labelH + insets.getRight());
     }
     else if (edge == RectangleEdge.RIGHT) {
-
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() + Math.PI / 2.0, 
-                    labelBounds.getCenterX(), labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() 
-                            + insets.getLeft() + w / 2.0);
-            float labely = (float) (dataArea.getY() + dataArea.getHeight() 
-                    / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
-                    + insets.getRight());
-
+        x = state.getCursor() + insets.getLeft() + (labelH / 2.0);
+        y = dataArea.getCenterY();
+        TextUtilities.drawRotatedString(
+            label, g2,
+            (float) x, (float) y,
+            TextAnchor.CENTER,
+            angle + Math.PI / 2.0,
+            TextAnchor.CENTER
+        );
+        state.cursorRight(insets.getLeft() + labelH + insets.getRight());
     }
-        if (plotState != null && hotspot != null) {
+
+    // add an entity for interactivity (if requested)
+    if (plotState != null) {
         ChartRenderingInfo owner = plotState.getOwner();
+        if (owner != null) {
             EntityCollection entities = owner.getEntityCollection();
             if (entities != null) {
-                    entities.add(new AxisLabelEntity(this, hotspot, 
-                            this.labelToolTip, this.labelURL));
+                // compute the hotspot correctly for the rotated label
+                Rectangle2D hotspot = TextUtilities.calculateRotatedStringBounds(
+                    label, g2,
+                    (float) x, (float) y,
+                    TextAnchor.CENTER,
+                    angle,
+                    TextAnchor.CENTER
+                );
+                entities.add(new AxisLabelEntity(
+                    this, hotspot,
+                    getLabelToolTip(), getLabelURL()
+                ));
+            }
         }
     }
-        return state;
 
+    return state;
 }
\ No newline at end of file
