diff --git a/tmp/8e92572e-1313-4cc3-a022-d484c3b46bc4_buggy.java b/tmp/186588ba-e2b3-4672-9b55-69aa467fa8f9_fixed.java
index d8b0158..b89de00 100644
--- a/tmp/8e92572e-1313-4cc3-a022-d484c3b46bc4_buggy.java
+++ b/tmp/186588ba-e2b3-4672-9b55-69aa467fa8f9_fixed.java
@@ -1,113 +1,131 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 private Node tryFoldArrayJoin(Node n) {
   Node callTarget = n.getFirstChild();
-
   if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
     return n;
   }
 
+  // Only a single, immutable argument is allowed.
   Node right = callTarget.getNext();
   if (right != null) {
     if (!NodeUtil.isImmutableValue(right)) {
       return n;
     }
+    // Bail if there is more than one argument.
+    if (right.getNext() != null) {
+      return n;
+    }
   }
 
   Node arrayNode = callTarget.getFirstChild();
   Node functionName = arrayNode.getNext();
-
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
-        !functionName.getString().equals("join")) {
+  if (arrayNode.getType() != Token.ARRAYLIT
+      || !functionName.getString().equals("join")) {
     return n;
   }
 
-      // "," is the default, it doesn't need to be explicit
-
+  // "," is the default separator.
   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = null;
   int foldedSize = 0;
   Node prev = null;
   Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+
+  // Merge adjacent string-like elements (including null, undefined, numbers, booleans).
   while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
+    boolean isUndefinedName = elem.getType() == Token.NAME
+        && "undefined".equals(elem.getString());
+    if (NodeUtil.isImmutableValue(elem)
+        || elem.getType() == Token.EMPTY
+        || isUndefinedName) {
       if (sb == null) {
         sb = new StringBuilder();
       } else {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getArrayElementStringValue(elem));
     } else {
       if (sb != null) {
         Preconditions.checkNotNull(prev);
         // +2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(
             Node.newString(sb.toString()).copyInformationFrom(prev));
         sb = null;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
     prev = elem;
     elem = elem.getNext();
   }
 
   if (sb != null) {
     Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(
         Node.newString(sb.toString()).copyInformationFrom(prev));
   }
-    // one for each comma.
+  // account for commas between elements
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
     case 0:
+      // [] -> ""
       Node emptyStringNode = Node.newString("");
       n.getParent().replaceChild(n, emptyStringNode);
       reportCodeChange();
       return emptyStringNode;
+
     case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
+      // everything folded into a single string
+      Node foldedStringNode = arrayFoldedChildren.get(0);
       if (foldedSize > originalSize) {
         return n;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
+        // coerce to string if necessary
+        foldedStringNode = new Node(
+            Token.ADD,
             Node.newString("").copyInformationFrom(n),
             foldedStringNode);
-          foldedStringNode = replacement;
       }
       n.getParent().replaceChild(n, foldedStringNode);
       reportCodeChange();
       return foldedStringNode;
+
     default:
-        // No folding could actually be performed.
+      // partial folding into a smaller array
+      // bail if nothing actually merged
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return n;
       }
+      // compute cost of the remaining join()
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
+      // only count the separator argument if it's non-default
+      if (right != null && !",".equals(joinString)) {
+        foldedSize += InlineCostEstimator.getCost(right);
+      }
       if (foldedSize > originalSize) {
         return n;
       }
+      // drop explicit ',' argument since it is default
+      if (right != null && ",".equals(joinString)) {
+        right.detach();
+      }
+      // rebuild the array literal children
       arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+      for (Node c : arrayFoldedChildren) {
+        arrayNode.addChildToBack(c);
       }
       reportCodeChange();
       break;
   }
-
   return n;
 }
\ No newline at end of file
