diff --git a/tmp/8de45a34-1278-428f-8438-525762c5b318_buggy.java b/tmp/82f23e1a-5882-473f-8b5a-27ed527b334b_fixed.java
index d8b0158..c3895f9 100644
--- a/tmp/8de45a34-1278-428f-8438-525762c5b318_buggy.java
+++ b/tmp/82f23e1a-5882-473f-8b5a-27ed527b334b_fixed.java
@@ -1,113 +1,127 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
 private Node tryFoldArrayJoin(Node n) {
   Node callTarget = n.getFirstChild();
-
+  // Must be a .join call.
   if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
     return n;
   }
 
+  // Only zero or one argument allowed.
   Node right = callTarget.getNext();
   if (right != null) {
+    // The separator must be a literal.
     if (!NodeUtil.isImmutableValue(right)) {
       return n;
     }
+    // Bail out if there is more than one argument.
+    if (right.getNext() != null) {
+      return n;
+    }
   }
 
   Node arrayNode = callTarget.getFirstChild();
   Node functionName = arrayNode.getNext();
-
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
-        !functionName.getString().equals("join")) {
+  if (arrayNode.getType() != Token.ARRAYLIT ||
+      !"join".equals(functionName.getString())) {
     return n;
   }
 
-      // "," is the default, it doesn't need to be explicit
+  // Compute the join string; ',' is the default.
+  String joinString = (right == null)
+      ? ","
+      : NodeUtil.getStringValue(right);
 
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
+  // Drop an explicit ',' separator -- it's the default.
+  if (right != null && ",".equals(joinString)) {
+    right.detach();
+    right = null;
+  }
+
+  // Try to merge runs of immutable elements.
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = null;
   int foldedSize = 0;
   Node prev = null;
   Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
       if (sb == null) {
         sb = new StringBuilder();
       } else {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getArrayElementStringValue(elem));
     } else {
       if (sb != null) {
         Preconditions.checkNotNull(prev);
         // +2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(
             Node.newString(sb.toString()).copyInformationFrom(prev));
         sb = null;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
     prev = elem;
     elem = elem.getNext();
   }
-
   if (sb != null) {
     Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(
         Node.newString(sb.toString()).copyInformationFrom(prev));
   }
-    // one for each comma.
+  // Account for commas between folded elements.
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
     case 0:
+      // [] => ""
       Node emptyStringNode = Node.newString("");
       n.getParent().replaceChild(n, emptyStringNode);
       reportCodeChange();
       return emptyStringNode;
+
     case 1:
+      // Single element => drop the join completely.
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return n;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
+        // Coerce non-literal to string.
+        foldedStringNode = new Node(
+            Token.ADD,
             Node.newString("").copyInformationFrom(n),
             foldedStringNode);
-          foldedStringNode = replacement;
       }
       n.getParent().replaceChild(n, foldedStringNode);
       reportCodeChange();
       return foldedStringNode;
+
     default:
-        // No folding could actually be performed.
+      // If nothing actually merged, bail.
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return n;
       }
+      // Cost of "([].join())"
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
+      foldedSize += (right != null)
+          ? InlineCostEstimator.getCost(right)
+          : 0;
       if (foldedSize > originalSize) {
         return n;
       }
+      // Rebuild the array literal.
       arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+      for (Node child : arrayFoldedChildren) {
+        arrayNode.addChildToBack(child);
       }
       reportCodeChange();
       break;
   }
-
   return n;
 }
\ No newline at end of file
