diff --git a/tmp/0c3afb3d-51dc-4c84-88f8-5c5e5c584206_buggy.java b/tmp/657a07e2-1d45-4ffb-81f6-35bbbeeb1fe4_fixed.java
index d8b0158..d20838e 100644
--- a/tmp/0c3afb3d-51dc-4c84-88f8-5c5e5c584206_buggy.java
+++ b/tmp/657a07e2-1d45-4ffb-81f6-35bbbeeb1fe4_fixed.java
@@ -1,113 +1,123 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
-
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
+    // Only zero or one argument is allowed and it must be immutable.
     Node right = callTarget.getNext();
     if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
+      if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {
         return n;
       }
     }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
-
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
-
+    // "," is the default separator.
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
+
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
     int foldedSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+
+    // Merge adjacent immutable values into string builders.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
         if (sb != null) {
           Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+          foldedSize += sb.length() + 2;  // +2 for the quotes
           arrayFoldedChildren.add(
               Node.newString(sb.toString()).copyInformationFrom(prev));
           sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       prev = elem;
       elem = elem.getNext();
     }
-
     if (sb != null) {
       Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
-    // one for each comma.
+    // account for commas between the folded children
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
+        // [].join(...) => ""
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
+
       case 1:
+        // Single item => possibly fold to a single string literal or ""+expr
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return n;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
+          // coerce to string
+          Node replacement = new Node(
+              Token.ADD,
               Node.newString("").copyInformationFrom(n),
               foldedStringNode);
           foldedStringNode = replacement;
         }
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
+
       default:
-        // No folding could actually be performed.
+        // More than one child.
+        // If we didn't actually fold anything, skip.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return n;
         }
+        // Estimate cost: overhead of "join()" plus cost of argument only
+        // if it's non-default.
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
+        if (right != null && !",".equals(joinString)) {
+          foldedSize += InlineCostEstimator.getCost(right);
+        }
         if (foldedSize > originalSize) {
           return n;
         }
+        // Perform the fold: replace array children, drop default-arg ','.
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
+        if (right != null && ",".equals(joinString)) {
+          // drop the explicit ',' argument
+          right.detach();
+        }
         reportCodeChange();
         break;
     }
-
     return n;
   }
\ No newline at end of file
