diff --git a/tmp/b2ee22cd-aacc-402a-b9a2-d697284ad6c1_buggy.java b/tmp/9361e394-870e-4dc8-8cda-18f771c5797c_fixed.java
index ad4b0d8..5774282 100644
--- a/tmp/b2ee22cd-aacc-402a-b9a2-d697284ad6c1_buggy.java
+++ b/tmp/9361e394-870e-4dc8-8cda-18f771c5797c_fixed.java
@@ -1,47 +1,45 @@
-    /**
-     * Use K-means++ to choose the initial centers.
-     *
-     * @param <T> type of the points to cluster
-     * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
-     * @param random random generator to use
-     * @return the initial centers
-     */
 private static <T extends Clusterable<T>> List<Cluster<T>>
     chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
+    // Copy the input so we can remove selected centers
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
-        // Choose one center uniformly at random from among the data points.
+    // 1) Pick one center uniformly at random
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
+    // 2) Pick the remaining k-1 centers
     while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
-            for (int i = 0; i < pointSet.size(); i++) {
+        final int size = pointSet.size();
+        double[] dx2 = new double[size];
+        double sum = 0.0;
+
+        // Compute the cumulative probability distribution
+        for (int i = 0; i < size; i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
+            double d = p.distanceFrom(nearest.getCenter());
             sum += d * d;
             dx2[i] = sum;
         }
 
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
+        // Draw a random value in [0, sum)
+        double r = random.nextDouble() * sum;
+
+        // Find the index i with dx2[i] >= r
+        int nextIndex = 0;
+        for (int i = 0; i < size; i++) {
             if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
+                nextIndex = i;
                 break;
             }
         }
+
+        // Remove that point from the set and add it as a new center
+        T p = pointSet.remove(nextIndex);
+        resultSet.add(new Cluster<T>(p));
     }
 
     return resultSet;
-
 }
\ No newline at end of file
