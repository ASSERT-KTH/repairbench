diff --git a/tmp/695e7c39-d521-4e7b-a645-697cddc7d464_buggy.java b/tmp/10ac6234-77ee-48f7-a457-a8de21c58c7e_fixed.java
index ad4b0d8..77dadde 100644
--- a/tmp/695e7c39-d521-4e7b-a645-697cddc7d464_buggy.java
+++ b/tmp/10ac6234-77ee-48f7-a457-a8de21c58c7e_fixed.java
@@ -1,47 +1,48 @@
 /**
  * Use K-means++ to choose the initial centers.
  *
  * @param <T> type of the points to cluster
  * @param points the points to choose the initial centers from
  * @param k the number of centers to choose
  * @param random random generator to use
  * @return the initial centers
  */
-    private static <T extends Clusterable<T>> List<Cluster<T>>
-        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
+private static <T extends Clusterable<T>>
+List<Cluster<T>> chooseInitialCenters(final Collection<T> points,
+                                      final int k,
+                                      final Random random) {
 
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
     while (resultSet.size() < k) {
+        final int size = pointSet.size();
+        final double[] dx2 = new double[size];
+        double sum = 0;
+
         // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
-            for (int i = 0; i < pointSet.size(); i++) {
+        // the nearest center already chosen.
+        for (int i = 0; i < size; i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
             final double d = p.distanceFrom(nearest.getCenter());
             sum += d * d;
             dx2[i] = sum;
         }
 
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+        // Pick a new center with probability proportional to D(x)^2
         final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
+        for (int i = 0; i < size; i++) {
             if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
+                resultSet.add(new Cluster<T>(pointSet.remove(i)));
                 break;
             }
         }
     }
 
     return resultSet;
-
 }
\ No newline at end of file
