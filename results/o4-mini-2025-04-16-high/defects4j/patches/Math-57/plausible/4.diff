diff --git a/tmp/c090a612-8c1f-4888-9f2d-96079a7f4e7f_buggy.java b/tmp/fb2f0f22-6a9e-4a2a-82e0-3c774ac84137_fixed.java
index ad4b0d8..af04106 100644
--- a/tmp/c090a612-8c1f-4888-9f2d-96079a7f4e7f_buggy.java
+++ b/tmp/fb2f0f22-6a9e-4a2a-82e0-3c774ac84137_fixed.java
@@ -1,47 +1,49 @@
-    /**
-     * Use K-means++ to choose the initial centers.
-     *
-     * @param <T> type of the points to cluster
-     * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
-     * @param random random generator to use
-     * @return the initial centers
-     */
 private static <T extends Clusterable<T>> List<Cluster<T>>
     chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
+    // Choose the remaining centers.
     while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
-            for (int i = 0; i < pointSet.size(); i++) {
+
+        final int ps = pointSet.size();
+        // dx2[i] will hold the cumulative sum of squared distances up to index i.
+        final double[] dx2 = new double[ps];
+        double sum = 0.0;
+
+        // For each data point x, compute D(x)^2, where D(x) is the distance to the
+        // nearest center already chosen, and accumulate.
+        for (int i = 0; i < ps; i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
             final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
+            final double d2 = d * d;
+            sum += d2;
             dx2[i] = sum;
         }
 
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+        final T nextPoint;
+        // If all distances are zero, pick a center uniformly at random.
+        if (sum == 0.0) {
+            nextPoint = pointSet.remove(random.nextInt(ps));
+        } else {
+            // Otherwise choose a new center with probability proportional to D(x)^2.
             final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
-                    break;
+            int index = 0;
+            // find the first index where the cumulative sum exceeds r
+            while (index < ps - 1 && dx2[index] < r) {
+                index++;
             }
+            nextPoint = pointSet.remove(index);
         }
+
+        resultSet.add(new Cluster<T>(nextPoint));
     }
 
     return resultSet;
-
 }
\ No newline at end of file
