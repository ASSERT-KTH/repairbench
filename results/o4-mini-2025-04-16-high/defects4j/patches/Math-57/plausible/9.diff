diff --git a/tmp/e7529efd-d728-4ef7-93df-6e02c053b061_buggy.java b/tmp/d35c4fa1-d05d-4fa3-9d12-61be066d5039_fixed.java
index ad4b0d8..e060087 100644
--- a/tmp/e7529efd-d728-4ef7-93df-6e02c053b061_buggy.java
+++ b/tmp/d35c4fa1-d05d-4fa3-9d12-61be066d5039_fixed.java
@@ -1,47 +1,45 @@
-    /**
-     * Use K-means++ to choose the initial centers.
-     *
-     * @param <T> type of the points to cluster
-     * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
-     * @param random random generator to use
-     * @return the initial centers
-     */
-    private static <T extends Clusterable<T>> List<Cluster<T>>
-        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
+private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(
+        final Collection<T> points, final int k, final Random random) {
 
+    // Copy the input so we can remove elements
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
-        // Choose one center uniformly at random from among the data points.
-        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
-        resultSet.add(new Cluster<T>(firstPoint));
+    // 1) Choose one center uniformly at random
+    final T first = pointSet.remove(random.nextInt(pointSet.size()));
+    resultSet.add(new Cluster<T>(first));
 
-        final double[] dx2 = new double[pointSet.size()];
+    // 2) Choose the remaining k-1 centers
     while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
-            for (int i = 0; i < pointSet.size(); i++) {
+        final int size = pointSet.size();
+        // dx2[i] will hold the cumulative sum of squared distances up to i
+        final double[] dx2 = new double[size];
+        double sum = 0;
+
+        // For each point, compute its distance to the nearest chosen center
+        for (int i = 0; i < size; i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
             final double d = p.distanceFrom(nearest.getCenter());
             sum += d * d;
             dx2[i] = sum;
         }
 
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+        if (sum <= 0) {
+            // All points are identical (or at zero distance); pick one at random
+            final T p = pointSet.remove(random.nextInt(size));
+            resultSet.add(new Cluster<T>(p));
+        } else {
+            // Choose a new center with probability proportional to D(x)^2
             final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
-                    break;
+            int index = 0;
+            while (index < size && dx2[index] < r) {
+                index++;
             }
+            final T p = pointSet.remove(index);
+            resultSet.add(new Cluster<T>(p));
         }
     }
 
     return resultSet;
-
 }
\ No newline at end of file
