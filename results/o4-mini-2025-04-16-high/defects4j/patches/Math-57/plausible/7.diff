diff --git a/tmp/20d3dab3-dc15-419f-8935-52296c87b2c3_buggy.java b/tmp/05751cfc-ddaa-42d2-9265-0cf1f2b7bff9_fixed.java
index ad4b0d8..225e412 100644
--- a/tmp/20d3dab3-dc15-419f-8935-52296c87b2c3_buggy.java
+++ b/tmp/05751cfc-ddaa-42d2-9265-0cf1f2b7bff9_fixed.java
@@ -1,47 +1,53 @@
 /**
  * Use K-means++ to choose the initial centers.
  *
  * @param <T> type of the points to cluster
  * @param points the points to choose the initial centers from
  * @param k the number of centers to choose
  * @param random random generator to use
  * @return the initial centers
  */
 private static <T extends Clusterable<T>> List<Cluster<T>>
     chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
+    // Choose the remaining k - 1 centers.
     while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
+
+        // For each data point x, compute D(x)^2 = distance^2 to the nearest chosen center,
+        // and build the cumulative distribution.
+        final double[] dx2 = new double[pointSet.size()];
+        double sum = 0;
         for (int i = 0; i < pointSet.size(); i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
             final double d = p.distanceFrom(nearest.getCenter());
             sum += d * d;
             dx2[i] = sum;
         }
 
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+        // If all distances are zero, pick a center uniformly at random.
+        if (sum == 0) {
+            final T p = pointSet.remove(random.nextInt(pointSet.size()));
+            resultSet.add(new Cluster<T>(p));
+        } else {
+            // Otherwise pick a new center with probability proportional to D(x)^2.
             final double r = random.nextDouble() * sum;
             for (int i = 0; i < dx2.length; i++) {
                 if (dx2[i] >= r) {
                     final T p = pointSet.remove(i);
                     resultSet.add(new Cluster<T>(p));
                     break;
                 }
             }
         }
+    }
 
     return resultSet;
-
 }
\ No newline at end of file
