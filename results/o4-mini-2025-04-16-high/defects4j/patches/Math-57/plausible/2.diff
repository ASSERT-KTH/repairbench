diff --git a/tmp/c2692421-6b04-4c45-b8ee-8d5c1f961cf0_buggy.java b/tmp/370f9cda-0177-414a-8589-3b8b0e6694dd_fixed.java
index ad4b0d8..c56b648 100644
--- a/tmp/c2692421-6b04-4c45-b8ee-8d5c1f961cf0_buggy.java
+++ b/tmp/370f9cda-0177-414a-8589-3b8b0e6694dd_fixed.java
@@ -1,47 +1,46 @@
-    /**
-     * Use K-means++ to choose the initial centers.
-     *
-     * @param <T> type of the points to cluster
-     * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
-     * @param random random generator to use
-     * @return the initial centers
-     */
 private static <T extends Clusterable<T>> List<Cluster<T>>
     chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
     final List<T> pointSet = new ArrayList<T>(points);
-        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
+    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(k);
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
 
+    // Choose the remaining k-1 centers.
+    for (int i = 1; i < k; i++) {
+        // Compute squared distances to the nearest existing center.
         final double[] dx2 = new double[pointSet.size()];
-        while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
-            for (int i = 0; i < pointSet.size(); i++) {
-                final T p = pointSet.get(i);
+        double sum = 0;
+        for (int j = 0; j < pointSet.size(); j++) {
+            final T p = pointSet.get(j);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
             final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+            final double d2 = d * d;
+            dx2[j] = d2;
+            sum += d2;
         }
 
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+        // Pick a new center weighted by squared distance.
         final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
+        double cumsum = 0;
+        int selected = -1;
+        for (int j = 0; j < dx2.length; j++) {
+            cumsum += dx2[j];
+            if (cumsum >= r) {
+                selected = j;
                 break;
             }
         }
+        // Guard against rounding errors: pick last if none selected.
+        if (selected < 0) {
+            selected = dx2.length - 1;
+        }
+
+        final T nextPoint = pointSet.remove(selected);
+        resultSet.add(new Cluster<T>(nextPoint));
     }
 
     return resultSet;
-
 }
\ No newline at end of file
