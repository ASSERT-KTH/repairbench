diff --git a/tmp/5f22a34a-e4ce-484f-8f16-eb7231ad5713_buggy.java b/tmp/0ee4c001-4928-4038-9d4f-e3dbd3103554_fixed.java
index 940af3f..46d72c1 100644
--- a/tmp/5f22a34a-e4ce-484f-8f16-eb7231ad5713_buggy.java
+++ b/tmp/0ee4c001-4928-4038-9d4f-e3dbd3103554_fixed.java
@@ -1,82 +1,63 @@
     /**
      * Estimate a first guess of the amplitude and angular frequency.
      * This method assumes that the {@link #sortObservations()} method
      * has been called previously.
      *
      * @throws ZeroException if the abscissa range is zero.
      * @throws MathIllegalStateException when the guessing procedure cannot
      * produce sensible results.
      */
     private void guessAOmega() {
         // initialize the sums for the linear model between the two integrals
         double sx2 = 0;
         double sy2 = 0;
         double sxy = 0;
         double sxz = 0;
         double syz = 0;
 
         double currentX = observations[0].getX();
         double currentY = observations[0].getY();
         double f2Integral = 0;
         double fPrime2Integral = 0;
         final double startX = currentX;
         for (int i = 1; i < observations.length; ++i) {
             // one step forward
             final double previousX = currentX;
             final double previousY = currentY;
             currentX = observations[i].getX();
             currentY = observations[i].getY();
 
-                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
+            // update the integrals of f^2 and f'^2
             // considering a linear model for f (and therefore constant f')
             final double dx = currentX - previousX;
             final double dy = currentY - previousY;
             final double f2StepIntegral =
                 dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
             final double fPrime2StepIntegral = dy * dy / dx;
 
             final double x = currentX - startX;
             f2Integral += f2StepIntegral;
             fPrime2Integral += fPrime2StepIntegral;
 
             sx2 += x * x;
             sy2 += f2Integral * f2Integral;
             sxy += x * f2Integral;
             sxz += x * fPrime2Integral;
             syz += f2Integral * fPrime2Integral;
         }
 
         // compute the amplitude and pulsation coefficients
         double c1 = sy2 * sxz - sxy * syz;
         double c2 = sxy * sxz - sx2 * syz;
         double c3 = sx2 * sy2 - sxy * sxy;
+
+        // if any ratio is negative, we cannot get real sqrt => ill‚Äêconditioned
         if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
-                final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
-                if (xRange == 0) {
-                    throw new ZeroException();
+            // cf. MATH-844: fail fast on non-harmonic data
+            throw new MathIllegalStateException(LocalizedFormats.DIVERGING_FITTING_PARAMETERS);
         }
-                omega = 2 * Math.PI / xRange;
-
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
-                for (int i = 1; i < observations.length; ++i) {
-                    final double y = observations[i].getY();
-                    if (y < yMin) {
-                        yMin = y;
-                    }
-                    if (y > yMax) {
-                        yMax = y;
-                    }
-                }
-                a = 0.5 * (yMax - yMin);
-            } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
 
+        // otherwise return the straightforward sqrt estimates
         a     = FastMath.sqrt(c1 / c2);
         omega = FastMath.sqrt(c2 / c3);
     }
\ No newline at end of file
-        }
