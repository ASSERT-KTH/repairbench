diff --git a/tmp/7dd5311c-d734-4ba3-bfa6-b0721e7fc9be_buggy.java b/tmp/da9459b4-ade9-424e-a676-b1dad39d4294_fixed.java
index 97f28e5..ff4e2b7 100644
--- a/tmp/7dd5311c-d734-4ba3-bfa6-b0721e7fc9be_buggy.java
+++ b/tmp/da9459b4-ade9-424e-a676-b1dad39d4294_fixed.java
@@ -1,26 +1,31 @@
     /**
      * Creates a printer that will print values to the given stream following the CSVFormat.
      * <p>
      * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation
      * and escaping with a different character) are not supported.
      * </p>
      * 
      * @param out
      *        stream to which to print. Must not be null.
      * @param format
      *        the CSV format. Must not be null.
      * @throws IOException
      *         thrown if the optional header cannot be printed.
      * @throws IllegalArgumentException
      *         thrown if the parameters of the format are inconsistent or if either out or format are null.
      */
     public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {
         Assertions.notNull(out, "out");
         Assertions.notNull(format, "format");
 
         this.out = out;
         this.format = format;
         this.format.validate();
-        // TODO: Is it a good idea to do this here instead of on the first call to a print method?
-        // It seems a pain to have to track whether the header has already been printed or not.
+
+        // Print header if defined
+        final String[] header = format.getHeader();
+        if (header != null && header.length > 0) {
+            // cast to Object[] so varargs expand each header field
+            printRecord((Object[]) header);
+        }
     }
\ No newline at end of file
