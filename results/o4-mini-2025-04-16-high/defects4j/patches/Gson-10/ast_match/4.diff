diff --git a/tmp/e3d1e53c-9995-4829-8e61-c79bbaf65b44_buggy.java b/tmp/801a5402-c119-41d8-a7eb-afbfbb105e12_fixed.java
index 9d42346..3e5aed3 100644
--- a/tmp/e3d1e53c-9995-4829-8e61-c79bbaf65b44_buggy.java
+++ b/tmp/801a5402-c119-41d8-a7eb-afbfbb105e12_fixed.java
@@ -1,37 +1,44 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
     final Gson context, final Field field, final String name,
     final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
   final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
   JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
   TypeAdapter<?> mapped = null;
   if (annotation != null) {
     mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
   }
   final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
-
+  if (mapped == null) {
+    mapped = context.getAdapter(fieldType);
+  }
   final TypeAdapter<?> typeAdapter = mapped;
+
   return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
-      @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
+    @SuppressWarnings({"unchecked", "rawtypes"})
     @Override void write(JsonWriter writer, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+      // If there's a @JsonAdapter on this field, use it directly;
+      // otherwise fall back to the runtime‚Äêtype wrapper.
+      TypeAdapter t = jsonAdapterPresent
+          ? typeAdapter
+          : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
       t.write(writer, fieldValue);
     }
+
     @Override void read(JsonReader reader, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = typeAdapter.read(reader);
       if (fieldValue != null || !isPrimitive) {
         field.set(value, fieldValue);
       }
     }
-      @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
+
+    @Override public boolean writeField(Object value)
+        throws IOException, IllegalAccessException {
       if (!serialized) return false;
       Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
+      return fieldValue != value; // avoid recursion (e.g. Throwable.cause)
     }
   };
 }
\ No newline at end of file
