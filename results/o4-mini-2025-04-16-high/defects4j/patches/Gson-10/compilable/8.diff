diff --git a/tmp/6551ed78-f93c-4e85-a10b-b85b9464b957_buggy.java b/tmp/0a20f735-a791-4a55-86bb-448201f733b8_fixed.java
index 9d42346..a6abc2d 100644
--- a/tmp/6551ed78-f93c-4e85-a10b-b85b9464b957_buggy.java
+++ b/tmp/0a20f735-a791-4a55-86bb-448201f733b8_fixed.java
@@ -1,37 +1,51 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
     final Gson context, final Field field, final String name,
     final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
   final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
   JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
   TypeAdapter<?> mapped = null;
   if (annotation != null) {
-      mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
+    // If the field is a primitive, wrap it so that factories targeting the boxed type still match
+    TypeToken<?> annotationType = fieldType;
+    if (isPrimitive) {
+      annotationType = TypeToken.get(Primitives.wrap(fieldType.getRawType()));
+    }
+    mapped = getTypeAdapter(constructorConstructor, context, annotationType, annotation);
   }
   final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
+  if (mapped == null) {
+    mapped = context.getAdapter(fieldType);
+  }
 
   final TypeAdapter<?> typeAdapter = mapped;
   return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
-      @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     @Override void write(JsonWriter writer, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = field.get(value);
       TypeAdapter t =
           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
       t.write(writer, fieldValue);
     }
+
     @Override void read(JsonReader reader, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = typeAdapter.read(reader);
       if (fieldValue != null || !isPrimitive) {
         field.set(value, fieldValue);
       }
     }
-      @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
+
+    @Override public boolean writeField(Object value)
+        throws IOException, IllegalAccessException {
       if (!serialized) return false;
       Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
+      if (fieldValue == value) return false; // avoid recursion for example for Throwable.cause
+      if (fieldValue == null && isPrimitive && !jsonAdapterPresent) {
+        // skip default‚Äêprimitive values unless a custom @JsonAdapter is present
+        return false;
+      }
+      return true;
     }
   };
 }
\ No newline at end of file
