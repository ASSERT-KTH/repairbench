diff --git a/tmp/a7e2a8e0-8dde-4774-b17c-9d1de2992d8c_buggy.java b/tmp/3c1b6a60-76db-4bf4-bc02-2d35ef249cfb_fixed.java
index 227a4ef..c05a059 100644
--- a/tmp/a7e2a8e0-8dde-4774-b17c-9d1de2992d8c_buggy.java
+++ b/tmp/3c1b6a60-76db-4bf4-bc02-2d35ef249cfb_fixed.java
@@ -1,48 +1,46 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+@Override
+protected StringBuffer renderWrappedText(StringBuffer sb,
+                                         int width,
+                                         int nextLineTabStop,
+                                         String text)
 {
+    // first line
     int pos = findWrapPos(text, width, 0);
-
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    sb.append(rtrim(text.substring(0, pos)))
+      .append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop spaces
     final String padding = createPadding(nextLineTabStop);
 
+    // subsequent lines
     while (true)
     {
-            int lastPos = pos;
+        // strip off the portion we just rendered, trim leading WS, re-pad
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
+        // now find the next wrap position, but skip over the padding
+        pos = findWrapPos(text, width, nextLineTabStop);
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
         }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(text.substring(0, pos)))
+          .append(defaultNewLine);
     }
 }
\ No newline at end of file
