diff --git a/tmp/3f2d4fb3-e898-4c1f-8f65-e33d83baea66_buggy.java b/tmp/da101d21-da61-4f9d-9f8a-89ad5711be58_fixed.java
index 227a4ef..c7dc98f 100644
--- a/tmp/3f2d4fb3-e898-4c1f-8f65-e33d83baea66_buggy.java
+++ b/tmp/da101d21-da61-4f9d-9f8a-89ad5711be58_fixed.java
@@ -1,48 +1,40 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
-    {
+                                         int nextLineTabStop, String text) {
+    // initial wrap position
     int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+    // no wrap needed
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+
+    // first line
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // prepare padding for subsequent lines
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
+    while (true) {
         int lastPos = pos;
+        // trim leading whitespace and add padding
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
-            {
-                sb.append(text);
+        // skip the padding when looking for the next wrap
+        pos = findWrapPos(text, width, nextLineTabStop);
 
+        // if nothing more to wrap, append the rest
+        if (pos == -1) {
+            sb.append(text);
+            return sb;
+        }
+        // if we didn't make progress, append the rest to avoid infinite loop
+        if (pos == lastPos) {
+            sb.append(text);
             return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
         }
 
+        // output the next chunk
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
