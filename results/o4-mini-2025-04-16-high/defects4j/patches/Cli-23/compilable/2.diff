diff --git a/tmp/4bd9cdc4-2d50-40c1-8d6b-61d14086bfc2_buggy.java b/tmp/c15ee84a-5acf-4835-bcb7-03a325e6da67_fixed.java
index 227a4ef..13806d6 100644
--- a/tmp/4bd9cdc4-2d50-40c1-8d6b-61d14086bfc2_buggy.java
+++ b/tmp/c15ee84a-5acf-4835-bcb7-03a325e6da67_fixed.java
@@ -1,48 +1,29 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
-    {
+                                         int nextLineTabStop, String text) {
+    // find first wrap position
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
+        // no wrapping needed
         sb.append(rtrim(text));
-
         return sb;
     }
+    // append up to the wrap point and a newline
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // prepare the padding for subsequent lines
     final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            int lastPos = pos;
+    final int padLen = padding.length();
+    // wrap remaining text
+    while (true) {
+        // trim off the part we've already output and re‚Äêpad
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
+        // find a wrap position, now skipping over the padding area
+        pos = findWrapPos(text, width, padLen);
+        // if nothing to wrap, or no real progress beyond padding, append rest
+        if (pos == -1 || pos <= padLen) {
             sb.append(text);
-
             return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
         }
-
+        // otherwise output up to pos and continue
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
