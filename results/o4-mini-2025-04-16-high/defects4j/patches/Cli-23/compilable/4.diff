diff --git a/tmp/4b87e0a6-2838-43de-bb60-7b3be5711884_buggy.java b/tmp/ce0302f9-1e6a-4691-9c06-ad1c334a0a92_fixed.java
index 227a4ef..4c21633 100644
--- a/tmp/4b87e0a6-2838-43de-bb60-7b3be5711884_buggy.java
+++ b/tmp/ce0302f9-1e6a-4691-9c06-ad1c334a0a92_fixed.java
@@ -1,48 +1,52 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+protected StringBuffer renderWrappedText(StringBuffer sb,
+                                         int width,
+                                         int nextLineTabStop,
+                                         String text)
 {
+    // first line
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    sb.append(rtrim(text.substring(0, pos)))
+      .append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // prepare for remaining lines
     final String padding = createPadding(nextLineTabStop);
+    String remainder = text.substring(pos).trim();
+    // subsequent lines must wrap at (width - nextLineTabStop)
+    int wrapWidth = width - nextLineTabStop;
 
-        while (true)
-        {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
+    while (remainder.length() > 0) {
+        // if there's no room to wrap, dump the rest
+        if (wrapWidth <= 0) {
+            sb.append(padding).append(remainder);
+            break;
+        }
+        pos = findWrapPos(remainder, wrapWidth, 0);
+        // if no break position found, dump the rest
+        if (pos == -1) {
+            sb.append(padding).append(remainder);
+            break;
+        }
+        // emit this line
+        sb.append(padding)
+          .append(rtrim(remainder.substring(0, pos)))
+          .append(defaultNewLine);
+        // prepare next chunk
+        remainder = remainder.substring(pos).trim();
+    }
     return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
 }
\ No newline at end of file
