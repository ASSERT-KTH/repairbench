diff --git a/tmp/d28c663a-2b47-4751-9ac0-a3c2e01c543f_buggy.java b/tmp/869626cd-9086-4266-a172-54fea4dc5a11_fixed.java
index 4c1ed27..265b04e 100644
--- a/tmp/d28c663a-2b47-4751-9ac0-a3c2e01c543f_buggy.java
+++ b/tmp/869626cd-9086-4266-a172-54fea4dc5a11_fixed.java
@@ -1,32 +1,34 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
-        int len = input.length();
+    final int len = input.length();
     while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
+        // always look at the full code‐point first
+        final int codepoint = Character.codePointAt(input, pos);
+        final int charCount = Character.charCount(codepoint);
+        // if it's a supplementary (surrogate pair), emit it unchanged
+        if (charCount > 1) {
+            out.write(Character.toChars(codepoint));
+            pos += charCount;
             continue;
         }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+        // otherwise let the delegate translator handle it
+        final int consumed = translate(input, pos, out);
+        if (consumed == 0) {
+            // no translation: emit the BMP char as a code‐point
+            out.write(Character.toChars(codepoint));
+            pos += charCount;
+        } else {
+            // skip exactly the consumed code‐points
+            for (int i = 0; i < consumed; i++) {
+                final int cp = Character.codePointAt(input, pos);
+                pos += Character.charCount(cp);
+            }
         }
     }
 }
\ No newline at end of file
