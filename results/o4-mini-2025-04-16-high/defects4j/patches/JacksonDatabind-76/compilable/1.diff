diff --git a/tmp/01db6147-e30e-41e3-a659-f5e9d7bcf37b_buggy.java b/tmp/ede3f25b-5cb5-4904-bcf2-f9cbf1ba4e03_fixed.java
index 3effef5..2209470 100644
--- a/tmp/01db6147-e30e-41e3-a659-f5e9d7bcf37b_buggy.java
+++ b/tmp/ede3f25b-5cb5-4904-bcf2-f9cbf1ba4e03_fixed.java
@@ -1,73 +1,89 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
+    // we'll accumulate all "left‐over" JSON (unwrapped and normal props)
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
-            // creator property?
+        // is this a creator‐parameter?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
+            // assign; if true, we have all creator‐args and can build
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+                // advance past value
                 t = p.nextToken();
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                    // unreachable but for compiler
                     continue;
                 }
+                // copy any remaining fields into our token‐buffer
                 while (t == JsonToken.FIELD_NAME) {
+                    String name = p.getCurrentName();
+                    tokens.writeFieldName(name);
                     p.nextToken();
                     tokens.copyCurrentStructure(p);
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
+                // polymorphic check
                 if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                    ctxt.reportMappingException(
+                        "Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
+                // delegate to unwrapped handler, which will apply both
+                // regular and unwrapped props from 'tokens'
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
             continue;
         }
-            // Object Id property?
+        // maybe it's object‐id
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
+        // maybe a regular (non‐creator) POJO property
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
+        // ignorable?
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
+        // otherwise stash in token‐buffer
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
-            // "any property"?
+        // and maybe "any" setter
         if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            buffer.bufferAnyProperty(
+                _anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
-        // We hit END_OBJECT, so:
+    // reached end of input; build fully
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
+    // close our synthetic object in the token buffer
+    tokens.writeEndObject();
+    // apply unwrapped (and regular) props from tokens
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
