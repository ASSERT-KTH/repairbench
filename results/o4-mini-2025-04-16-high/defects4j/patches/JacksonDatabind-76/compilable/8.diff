diff --git a/tmp/a3405cce-af4e-48af-8bce-1551b522331a_buggy.java b/tmp/7186a9a2-94ab-4f58-936b-054150df5d79_fixed.java
index 3effef5..680a84d 100644
--- a/tmp/a3405cce-af4e-48af-8bce-1551b522331a_buggy.java
+++ b/tmp/7186a9a2-94ab-4f58-936b-054150df5d79_fixed.java
@@ -1,73 +1,73 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
+    // buffer for all non‐creator props (unwrapped + regular) to replay later
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+        p.nextToken(); // move to the property value
+
+        // 1) Creator‐parameter?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+                // All creator params have now been seen – build intermediate bean/builder:
                 t = p.nextToken();
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                     continue;
                 }
+                // Copy any remaining fields into our token buffer:
                 while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
                     tokens.copyCurrentStructure(p);
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
+                // must be same raw type (no polymorphic builder+unwrapped)
                 if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                    ctxt.reportMappingException(
+                        "Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
+                // Now replay all buffered tokens (unwrapped + other props) on the bean/builder:
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
             continue;
         }
-            // Object Id property?
+
+        // 2) Object‐id?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
-            SettableBeanProperty prop = _beanProperties.find(propName);
-            if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
-            }
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
-                handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
-            }
+
+        // 3) All other properties go into the token buffer, to be handled by processUnwrapped:
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
-            // "any property"?
+        // "any" setter still gets its values buffered
         if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            buffer.bufferAnyProperty(
+                _anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
-        // We hit END_OBJECT, so:
+    // No early‐build: build (or builder) now that we've seen all creator params
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
+    // And replay everything (unwrapped + other props)
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
