diff --git a/tmp/37a08dbc-ec80-4047-b3ab-5434fa985993_buggy.java b/tmp/8de6648d-3350-4239-b824-9c1b0e8e9bf8_fixed.java
index 3effef5..2391f4d 100644
--- a/tmp/37a08dbc-ec80-4047-b3ab-5434fa985993_buggy.java
+++ b/tmp/8de6648d-3350-4239-b824-9c1b0e8e9bf8_fixed.java
@@ -1,73 +1,88 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
+    // buffer for any unwrapped (or otherwise deferred) properties
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+    // iterate all fields
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+        p.nextToken(); // move to value
+
+        // is this a creator (constructor/factory) parameter?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
+            // deserialize into buffer; if this was the last needed param, we can build
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+                // all creator parameters have been collected -> build the bean
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                    // if wrapAndThrow returns, continue parsing
                     continue;
                 }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
+                // now copy any remaining fields into token buffer
+                JsonToken t2 = p.nextToken();
+                while (t2 == JsonToken.FIELD_NAME) {
+                    // copy the entire field (name + value/structure)
                     tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+                    t2 = p.nextToken();
                 }
                 tokens.writeEndObject();
+                // no polymorphic variations for unwrapped
                 if (bean.getClass() != _beanType.getRawClass()) {
                     ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
+                // process both regular and unwrapped properties from the buffer
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
+            // not ready to build yet: continue scanning
             continue;
         }
-            // Object Id property?
+
+        // not a creator prop: maybe Object Id?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
+        // regular bean property?
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
+        // ignorable?
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
+        // otherwise this is unwrapped or "any" property; copy to buffer
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
-            // "any property"?
         if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            Object value = _anySetter.deserialize(p, ctxt);
+            buffer.bufferAnyProperty(_anySetter, propName, value);
         }
     }
 
-        // We hit END_OBJECT, so:
+    // end of object, build now
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
+    // close the token-buffered object
+    tokens.writeEndObject();
+    // and process unwrapped
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
