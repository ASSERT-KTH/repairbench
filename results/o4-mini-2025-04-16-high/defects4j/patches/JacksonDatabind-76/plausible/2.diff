diff --git a/tmp/ba94aba7-3823-4557-8c3b-7f3bd2aeceeb_buggy.java b/tmp/75c50d0d-211a-4bfd-b055-2cb967267fe2_fixed.java
index 3effef5..a46ac2a 100644
--- a/tmp/ba94aba7-3823-4557-8c3b-7f3bd2aeceeb_buggy.java
+++ b/tmp/75c50d0d-211a-4bfd-b055-2cb967267fe2_fixed.java
@@ -1,73 +1,56 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
+    // start building (collect creator params, object id, etc)
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
+    // we need to buffer any unwrapped properties
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
-        JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+    // iterate over all fields
+    for (JsonToken t = p.getCurrentToken(); t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+        p.nextToken(); // move to the value
+        // is this a creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
-                    try {
-                        bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
-                    }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
-                }
-                continue;
-            }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
-                continue;
-            }
-            // regular property? needs buffering
+            // assign but do NOT build early; keep collecting everything
+            buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));
+        } else if (buffer.readIdProperty(propName)) {
+            // handled Object Id property
+        } else {
+            // any regular property?
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
-            }
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+            } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
-            }
+            } else {
+                // unknown / unwrapped property; buffer it
                 tokens.writeFieldName(propName);
                 tokens.copyCurrentStructure(p);
-            // "any property"?
                 if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                    Object val = _anySetter.deserialize(p, ctxt);
+                    buffer.bufferAnyProperty(_anySetter, propName, val);
                 }
             }
+        }
+    }
+
+    // close our token buffer
+    tokens.writeEndObject();
 
-        // We hit END_OBJECT, so:
+    // now that we've seen all fields, build the instance
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
+    // finally apply unwrapped values
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
