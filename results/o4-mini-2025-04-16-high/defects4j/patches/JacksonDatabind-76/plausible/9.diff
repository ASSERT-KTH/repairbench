diff --git a/tmp/62e082fb-099a-4f60-a97d-d780aa787efa_buggy.java b/tmp/59fe35ed-3ee6-455b-8ecd-ef9916e8eaba_fixed.java
index 3effef5..095c263 100644
--- a/tmp/62e082fb-099a-4f60-a97d-d780aa787efa_buggy.java
+++ b/tmp/59fe35ed-3ee6-455b-8ecd-ef9916e8eaba_fixed.java
@@ -1,73 +1,96 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
+    // we will accumulate any "unknown" (unwrapped) properties here
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+    // first pass: collect creator parameters, buffer others
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+        p.nextToken(); // move to value
+
+        // is this a creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+            Object value = creatorProp.deserialize(p, ctxt);
+            // assign, and if that completes all creator params, build
+            if (buffer.assignParameter(creatorProp, value)) {
+                // advance parser to next token after value
                 t = p.nextToken();
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
+                    // wrapAndThrow will signal error
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                    // in case wrapAndThrow doesn't throw
                     continue;
                 }
+                // process remaining fields: set on bean or buffer into tokens
                 while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
+                    String name = p.getCurrentName();
+                    p.nextToken(); // to value
+                    SettableBeanProperty prop = _beanProperties.find(name);
+                    if (prop != null) {
+                        // regular property: apply immediately
+                        prop.deserializeAndSet(p, ctxt, bean);
+                    } else if (_ignorableProps != null && _ignorableProps.contains(name)) {
+                        handleIgnoredProperty(p, ctxt, handledType(), name);
+                    } else {
+                        // unknown: buffer for unwrapped processing
+                        tokens.writeFieldName(name);
                         tokens.copyCurrentStructure(p);
+                        if (_anySetter != null) {
+                            _anySetter.deserializeAndSet(p, ctxt, bean, name);
+                        }
+                    }
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
+                // finally handle unwrapped values
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
+            // not ready to build yet
             continue;
         }
-            // Object Id property?
+
+        // Object Id?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
+        // non-creator bean property -> buffer for creator.build()
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
+        // ignorable?
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
+        // otherwise unknown: buffer for later unwrapped processing
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
-            // "any property"?
+        // and if there's an any-setter, feed that too
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
-        // We hit END_OBJECT, so:
+    // no more fields, build bean normally
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
