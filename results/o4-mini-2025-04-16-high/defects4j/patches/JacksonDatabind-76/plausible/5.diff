diff --git a/tmp/009d21a3-d44d-4b0c-93c0-6de76cda1b78_buggy.java b/tmp/0c9b077a-dd42-4d8b-8c4b-983b1ec7d89a_fixed.java
index 3effef5..1e65605 100644
--- a/tmp/009d21a3-d44d-4b0c-93c0-6de76cda1b78_buggy.java
+++ b/tmp/0c9b077a-dd42-4d8b-8c4b-983b1ec7d89a_fixed.java
@@ -1,73 +1,99 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
+
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+                // all creator parameters have been assigned; build the bean
                 t = p.nextToken();
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                    // wrapAndThrow will throw, so this continue is not really reached
                     continue;
                 }
+                // process remaining fields: set known props, buffer unwrapped
                 while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
+                    String name = p.getCurrentName();
+                    p.nextToken(); // to point to value
+                    // Object Id?
+                    if (buffer.readIdProperty(name)) {
+                        // already handled
+                    } else {
+                        SettableBeanProperty prop = _beanProperties.find(name);
+                        if (prop != null) {
+                            prop.deserializeAndSet(p, ctxt, bean);
+                        } else if (_ignorableProps != null && _ignorableProps.contains(name)) {
+                            handleIgnoredProperty(p, ctxt, handledType(), name);
+                        } else {
+                            tokens.writeFieldName(name);
                             tokens.copyCurrentStructure(p);
+                            if (_anySetter != null) {
+                                _anySetter.deserializeAndSet(p, ctxt, bean, name);
+                            }
+                        }
+                    }
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                    ctxt.reportMappingException(
+                        "Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
             continue;
         }
-            // Object Id property?
+
+        // not a creator property â†’ buffer or collect
+        // Object Id?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
+        // ignorable?
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
+        // fallback: collect for unwrapped
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
-            // "any property"?
+        // "any" setter for unknown
         if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            buffer.bufferAnyProperty(
+                _anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
-        // We hit END_OBJECT, so:
+    // finish up at END_OBJECT
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
