diff --git a/tmp/86b0e86c-65c0-4468-8100-e5afd4bb9a9e_buggy.java b/tmp/5d0b6853-c198-4a8f-a076-79d4e2ab0bf5_fixed.java
index 3effef5..528cb02 100644
--- a/tmp/86b0e86c-65c0-4468-8100-e5afd4bb9a9e_buggy.java
+++ b/tmp/5d0b6853-c198-4a8f-a076-79d4e2ab0bf5_fixed.java
@@ -1,73 +1,116 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
+    // we'll capture "unwrapped" fields here:
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+        p.nextToken(); // move to value
+        // Creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+                // got all creator params, can build
                 t = p.nextToken();
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                    // if exception, skip and continue
                     continue;
                 }
+                // now handle any remaining fields: set normal props on bean,
+                // and collect unwrapped ones into our token buffer
                 while (t == JsonToken.FIELD_NAME) {
+                    String name = p.getCurrentName();
                     p.nextToken();
+                    // (1) more creator props? unlikely but handle
+                    SettableBeanProperty cp = creator.findCreatorProperty(name);
+                    if (cp != null) {
+                        buffer.assignParameter(cp, cp.deserialize(p, ctxt));
+                        t = p.nextToken();
+                        continue;
+                    }
+                    // (2) object-id?
+                    if (buffer.readIdProperty(name)) {
+                        t = p.nextToken();
+                        continue;
+                    }
+                    // (3) regular bean property: apply on the built bean
+                    SettableBeanProperty prop = _beanProperties.find(name);
+                    if (prop != null) {
+                        prop.deserializeAndSet(p, ctxt, bean);
+                        t = p.nextToken();
+                        continue;
+                    }
+                    // (4) ignorable?
+                    if (_ignorableProps != null && _ignorableProps.contains(name)) {
+                        handleIgnoredProperty(p, ctxt, bean, name);
+                        t = p.nextToken();
+                        continue;
+                    }
+                    // (5) otherwise, treat as unwrapped: copy structure into buffer
+                    tokens.writeFieldName(name);
                     tokens.copyCurrentStructure(p);
+                    if (_anySetter != null) {
+                        _anySetter.deserializeAndSet(p, ctxt, bean, name);
+                    }
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
+                // ensure no polymorphic weirdness
                 if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                    ctxt.reportMappingException(
+                        "Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
+                // finally merge unwrapped fields
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
+            // still waiting for creator params
             continue;
         }
-            // Object Id property?
+        // object-id?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
+        // normal property: buffer for later
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
+        // ignorable?
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
+        // everything else goes into unwrapped token buffer
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
-            // "any property"?
         if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            buffer.bufferAnyProperty(_anySetter,
+                                     propName,
+                                     _anySetter.deserialize(p, ctxt));
         }
     }
 
-        // We hit END_OBJECT, so:
+    // if we get here, end of object before all creator params are seen
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
+    // merge unwrapped
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
