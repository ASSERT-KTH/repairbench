diff --git a/tmp/71fc1b27-8a84-436d-8f8b-92860e541867_buggy.java b/tmp/85e192eb-31e7-4257-b5d6-6f46bd96922c_fixed.java
index 1ad070d..fc6c357 100644
--- a/tmp/71fc1b27-8a84-436d-8f8b-92860e541867_buggy.java
+++ b/tmp/85e192eb-31e7-4257-b5d6-6f46bd96922c_fixed.java
@@ -1,38 +1,42 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
+    // the escape char has just been read (normally a backslash or custom escape)
     final int c = in.read();
+    if (c == END_OF_STREAM) {
+        throw new IOException("EOF whilst processing escape sequence");
+    }
     switch (c) {
+        // standard character escapes
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
+        // already‐escaped control characters (e.g. "\n" where '\n' is actually in the stream)
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
             return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            /* 
+             * meta‐characters that we do want to unescape (drop the escape
+             * and return the char itself): the delimiter, the quote, or the escape
+             */
+            if (c == delimiter || c == quoteChar || c == escapeChar) {
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            }
+            /*
+             * anything else is _not_ a recognized escape sequence;
+             * put the character back so it will be read next,
+             * and return the escape char itself
+             */
+            in.unread(c);
+            return escapeChar;
     }
 }
\ No newline at end of file
