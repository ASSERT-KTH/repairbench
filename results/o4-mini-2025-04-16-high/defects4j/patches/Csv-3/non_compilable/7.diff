diff --git a/tmp/9efd7330-c1f6-4b41-b3c1-2b6ef86fd567_buggy.java b/tmp/a6dd780a-d573-4476-bafc-e3c6831e52d5_fixed.java
index 1ad070d..6cac47e 100644
--- a/tmp/9efd7330-c1f6-4b41-b3c1-2b6ef86fd567_buggy.java
+++ b/tmp/a6dd780a-d573-4476-bafc-e3c6831e52d5_fixed.java
@@ -1,38 +1,34 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
+    // the escape char has just been read (normally a backslash or '/')
+    // we need to peek the next char to see if it's a "real" escape;
+    // only consume it if it's one of the known escape targets.
+    in.mark(1);
     final int c = in.read();
+    if (c == END_OF_STREAM) {
+        throw new IOException("EOF whilst processing escape sequence");
+    }
     switch (c) {
-        case 'r':
-            return CR;
-        case 'n':
-            return LF;
-        case 't':
-            return TAB;
-        case 'b':
-            return BACKSPACE;
-        case 'f':
-            return FF;
+        // standard Java‐style escapes
+        case 'r':  return CR;
+        case 'n':  return LF;
+        case 't':  return TAB;
+        case 'b':  return BACKSPACE;
+        case 'f':  return FF;
+        // direct escaping of control or CSV‐special chars
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
+        case escapeChar:
+        case quoteChar:
+        case delimiter:
+            // consume the character and return it
             return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
+            // not a recognized escape target: 
+            // undo the read and return the literal escape char
+            in.reset();
+            return escapeChar;
     }
 }
\ No newline at end of file
