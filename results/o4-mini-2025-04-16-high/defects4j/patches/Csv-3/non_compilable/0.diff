diff --git a/tmp/ecc62032-a5cd-4915-aefd-146416bb0b19_buggy.java b/tmp/4bfab935-87dc-497a-aaee-c7cdbc2f1c9d_fixed.java
index 1ad070d..3cf7ad6 100644
--- a/tmp/ecc62032-a5cd-4915-aefd-146416bb0b19_buggy.java
+++ b/tmp/4bfab935-87dc-497a-aaee-c7cdbc2f1c9d_fixed.java
@@ -1,38 +1,46 @@
 /**
  * Handle an escape sequence.
  * The current character must be the escape character.
  * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
  * on the input stream.
  *
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
+ * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following
+ *         the escape is invalid.
+ * @throws IOException if there is a problem reading the stream or the end of stream
+ *                     is detected: the escape character is not allowed at end of stream
  */
 int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
+    // mark so we can "un-read" one character if it's not a recognized escape
+    in.mark(1);
     final int c = in.read();
     switch (c) {
+        // standard escapes
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
+        // literal control characters
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // meta-characters that we do want to un-escape
+            if (c == delimiter || c == quote || c == escape) {
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            }
+            // unknown escape: push back the character and emit the escape itself
+            in.reset();
+            return escape;
     }
 }
\ No newline at end of file
