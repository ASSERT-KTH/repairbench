diff --git a/tmp/74ad019e-9d4a-4aa4-b2e6-388a3a53a40a_buggy.java b/tmp/79663ffa-2990-4d6f-9c90-d97b32ec7ad7_fixed.java
index 1ad070d..1b36648 100644
--- a/tmp/74ad019e-9d4a-4aa4-b2e6-388a3a53a40a_buggy.java
+++ b/tmp/79663ffa-2990-4d6f-9c90-d97b32ec7ad7_fixed.java
@@ -1,38 +1,37 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
+    // the escape char has just been read (normally a backslash or user‐supplied escape)
     final int c = in.read();
-        switch (c) {
-        case 'r':
+    if (c == END_OF_STREAM) {
+        throw new IOException("EOF whilst processing escape sequence");
+    }
+    // common Java‐style escapes
+    if (c == 'r') {
         return CR;
-        case 'n':
+    }
+    if (c == 'n') {
         return LF;
-        case 't':
+    }
+    if (c == 't') {
         return TAB;
-        case 'b':
+    }
+    if (c == 'b') {
         return BACKSPACE;
-        case 'f':
+    }
+    if (c == 'f') {
         return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
-        default:
-            // Now check for meta-characters
+    }
+    // valid literal escapes: escapeChar, delimiter, quoteChar, or actual control‐chars
+    if (c == escapeChar
+            || c == delimiter
+            || c == quoteChar
+            || c == CR
+            || c == LF
+            || c == FF
+            || c == TAB
+            || c == BACKSPACE) {
         return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
+    // not a legal escape – push the char back and treat the escape itself as literal
+    in.unread();
+    return escapeChar;
 }
\ No newline at end of file
