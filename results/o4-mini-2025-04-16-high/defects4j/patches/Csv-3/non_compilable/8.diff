diff --git a/tmp/f7979823-cea2-4c74-8529-6a23485ce2e9_buggy.java b/tmp/53735440-6115-4171-b287-b70811d24011_fixed.java
index 1ad070d..113f5e5 100644
--- a/tmp/f7979823-cea2-4c74-8529-6a23485ce2e9_buggy.java
+++ b/tmp/53735440-6115-4171-b287-b70811d24011_fixed.java
@@ -1,38 +1,48 @@
 /**
  * Handle an escape sequence.
  * The current character must be the escape character.
  * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
  * on the input stream.
  * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
+ * @return the unescaped character (as an int) or throws {@link IOException} if
+ *         the escape is at end of stream.
+ * @throws IOException if there is a problem reading the stream or the escape
+ *         character appears at end of stream.
  */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
+    // not allowed at end of stream
+    if (c == END_OF_STREAM) {
+        throw new IOException("EOF whilst processing escape sequence");
+    }
+    // escaped escape, delimiter or quote → literal output
+    if (c == escapeChar || c == delimiter || c == quoteChar) {
+        return c;
+    }
+    // standard Java-like escapes
     switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
+        // escaped control‐characters (e.g. "\\\n" → '\n')
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
             return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
+            // unknown escape → output the escape char literally,
+            // and push back this char so it will be re-read normally
+            in.unread(c);
+            return escapeChar;
     }
 }
\ No newline at end of file
