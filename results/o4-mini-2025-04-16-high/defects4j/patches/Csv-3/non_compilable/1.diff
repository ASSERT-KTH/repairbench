diff --git a/tmp/7bfef161-2796-4437-a369-21434c928b22_buggy.java b/tmp/0c6b732f-75d1-4924-9a2d-66c33be6984c_fixed.java
index 1ad070d..9022b63 100644
--- a/tmp/7bfef161-2796-4437-a369-21434c928b22_buggy.java
+++ b/tmp/0c6b732f-75d1-4924-9a2d-66c33be6984c_fixed.java
@@ -1,38 +1,37 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
+    // the escape char has just been read (normally a backslash or custom escape)
+    // we may need to unread the next char on an unknown escape, so mark the stream
+    in.mark(1);
     final int c = in.read();
+    if (c == END_OF_STREAM) {
+        throw new IOException("EOF whilst processing escape sequence");
+    }
     switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // recognized meta‐characters: delimiter, quote, escape or record‐separator chars
+            if (c == delimiter
+             || c == quoteChar
+             || c == escapeChar
+             || c == CR
+             || c == LF
+             || c == FF
+             || c == TAB
+             || c == BACKSPACE) {
                 return c;
-            // indicate unexpected char - available from in.getLastChar()
+            }
+            // unknown escape: push back the char so it will be re-read,
+            // and emit the escape char itself
+            in.reset();
+            return escapeChar;
     }
 }
\ No newline at end of file
