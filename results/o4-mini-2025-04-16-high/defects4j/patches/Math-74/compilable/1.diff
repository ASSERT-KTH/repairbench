diff --git a/tmp/d4487aba-0646-45ec-832e-8e089bd34ff7_buggy.java b/tmp/701d5d9f-67a0-4dfa-853e-f63533b1692e_fixed.java
index eb491d5..86c6d10 100644
--- a/tmp/d4487aba-0646-45ec-832e-8e089bd34ff7_buggy.java
+++ b/tmp/701d5d9f-67a0-4dfa-853e-f63533b1692e_fixed.java
@@ -1,170 +1,180 @@
 /** {@inheritDoc} */
 @Override
 public double integrate(final FirstOrderDifferentialEquations equations,
                         final double t0, final double[] y0,
                         final double t, final double[] y)
     throws DerivativeException, IntegratorException {
 
     sanityChecks(equations, t0, y0, t, y);
     setEquations(equations);
     resetEvaluations();
     final boolean forward = t > t0;
 
     // create some internal working arrays
     final int stages = c.length + 1;
     if (y != y0) {
         System.arraycopy(y0, 0, y, 0, y0.length);
     }
     final double[][] yDotK = new double[stages][y0.length];
     final double[]       yTmp  = new double[y0.length];
 
     // set up an interpolator sharing the integrator arrays
     AbstractStepInterpolator interpolator;
     if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {
-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
+        final RungeKuttaStepInterpolator rki =
+            (RungeKuttaStepInterpolator) prototype.copy();
         rki.reinitialize(this, yTmp, yDotK, forward);
         interpolator = rki;
     } else {
         interpolator = new DummyStepInterpolator(yTmp, forward);
     }
     interpolator.storeTime(t0);
 
     // set up integration control objects
     stepStart         = t0;
     double  hNew      = 0;
     boolean firstTime = true;
     for (StepHandler handler : stepHandlers) {
         handler.reset();
     }
-    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
+    CombinedEventsManager manager =
+        addEndTimeChecker(t0, t, eventsHandlersManager);
     boolean lastStep = false;
 
     // main integration loop
     while (! lastStep) {
 
         interpolator.shift();
 
         double error = 0;
+        // loop until a step is accepted
         for (boolean loop = true; loop;) {
 
+            // ----- compute first stage derivative if needed -----
             if (firstTime || !fsal) {
-          // first stage
                 computeDerivatives(stepStart, y, yDotK[0]);
             }
 
+            // ----- initial step size computation -----
             if (firstTime) {
+
+                // build the scaling array
                 final double[] scale;
                 if (vecAbsoluteTolerance == null) {
                     scale = new double[y0.length];
                     java.util.Arrays.fill(scale, scalAbsoluteTolerance);
                 } else {
                     scale = vecAbsoluteTolerance;
                 }
-          hNew = initializeStep(equations, forward, getOrder(), scale,
-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);
+
+                // first guess for h
+                hNew = initializeStep(equations, forward, getOrder(),
+                                      scale, stepStart, y, yDotK[0],
+                                      yTmp, yDotK[1]);
+
+                // ----- NEW: clamp the initial step to min/max -----
+                final double tentativeT  = stepStart + hNew;
+                final boolean nextIsLast = forward ? (tentativeT >= t)
+                                                   : (tentativeT <= t);
+                hNew = filterStep(hNew, forward, nextIsLast);
+
                 firstTime = false;
             }
 
+            // use the selected step size
             stepSize = hNew;
 
-        // next stages
+            // ----- compute the other stages -----
             for (int k = 1; k < stages; ++k) {
-
                 for (int j = 0; j < y0.length; ++j) {
                     double sum = a[k - 1][0] * yDotK[0][j];
                     for (int l = 1; l < k; ++l) {
                         sum += a[k - 1][l] * yDotK[l][j];
                     }
                     yTmp[j] = y[j] + stepSize * sum;
                 }
-
-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
-
+                computeDerivatives(stepStart + c[k - 1] * stepSize,
+                                   yTmp, yDotK[k]);
             }
 
-        // estimate the state at the end of the step
+            // ----- estimate state at end of step -----
             for (int j = 0; j < y0.length; ++j) {
                 double sum = b[0] * yDotK[0][j];
                 for (int l = 1; l < stages; ++l) {
                     sum += b[l] * yDotK[l][j];
                 }
                 yTmp[j] = y[j] + stepSize * sum;
             }
 
-        // estimate the error at the end of the step
+            // ----- estimate error -----
             error = estimateError(yDotK, y, yTmp, stepSize);
             if (error <= 1.0) {
-
-          // discrete events handling
+                // accepted (subject to end‐of‐integration event)
                 interpolator.storeTime(stepStart + stepSize);
                 if (manager.evaluateStep(interpolator)) {
                     final double dt = manager.getEventTime() - stepStart;
                     if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                  // rejecting the step would lead to a too small next step, we accept it
+                        // too small to reject, accept
                         loop = false;
                     } else {
-                  // reject the step to match exactly the next switch time
+                        // reject to match event time exactly
                         hNew = dt;
                     }
                 } else {
-            // accept the step
+                    // fully accepted
                     loop = false;
                 }
-
             } else {
-          // reject the step and attempt to reduce error by stepsize control
-          final double factor =
-              Math.min(maxGrowth,
-                       Math.max(minReduction, safety * Math.pow(error, exp)));
+                // reject and reduce h
+                final double factor = Math.min(maxGrowth,
+                    Math.max(minReduction,
+                             safety * Math.pow(error, exp)));
                 hNew = filterStep(stepSize * factor, forward, false);
             }
 
-      }
+        } // end of inner loop: a step has been accepted
 
-      // the step has been accepted
+        // ----- commit the step -----
         final double nextStep = stepStart + stepSize;
         System.arraycopy(yTmp, 0, y, 0, y0.length);
         manager.stepAccepted(nextStep, y);
         lastStep = manager.stop();
 
-      // provide the step data to the step handler
+        // handle the step for any step handlers
         interpolator.storeTime(nextStep);
         for (StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, lastStep);
         }
         stepStart = nextStep;
 
+        // if FSAL, save the last stage derivative for next step
         if (fsal) {
-        // save the last evaluation for the next step
             System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
         }
 
+        // if any event handler reset state, recompute derivative
         if (manager.reset(stepStart, y) && !lastStep) {
-        // some event handler has triggered changes that
-        // invalidate the derivatives, we need to recompute them
             computeDerivatives(stepStart, y, yDotK[0]);
         }
 
+        // prepare next hNew if not done
         if (!lastStep) {
-        // in some rare cases we may get here with stepSize = 0, for example
-        // when an event occurs at integration start, reducing the first step
-        // to zero; we have to reset the step to some safe non zero value
+            // guard against zero step
             stepSize = filterStep(stepSize, forward, true);
-
-        // stepsize control for next step
+            // compute next step size
             final double factor = Math.min(maxGrowth,
                 Math.max(minReduction,
                          safety * Math.pow(error, exp)));
             final double scaledH    = stepSize * factor;
             final double  nextT     = stepStart + scaledH;
-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
-        hNew = filterStep(scaledH, forward, nextIsLast);
+            final boolean isLast    = forward ? (nextT >= t)
+                                              : (nextT <= t);
+            hNew = filterStep(scaledH, forward, isLast);
         }
 
-    }
+    } // end of outer loop
 
     final double stopTime = stepStart;
     resetInternalState();
     return stopTime;
-
 }
\ No newline at end of file
