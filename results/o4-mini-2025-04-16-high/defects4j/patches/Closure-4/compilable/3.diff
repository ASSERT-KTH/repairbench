diff --git a/tmp/b616ada3-680f-438a-ba4d-0d6af2dd20c9_buggy.java b/tmp/a53cba17-f516-46b0-8d0c-2ac9d91bed42_fixed.java
index d6a560a..20f061a 100644
--- a/tmp/b616ada3-680f-438a-ba4d-0d6af2dd20c9_buggy.java
+++ b/tmp/a53cba17-f516-46b0-8d0c-2ac9d91bed42_fixed.java
@@ -1,33 +1,39 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // First try to resolve named types via the registry.
   boolean resolved = resolveViaRegistry(t, enclosing);
+  // If a prototype/implements cycle is detected, report and bail out early.
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return registry.isLastGeneration()
+        ? getReferencedType()
+        : this;
   }
 
   if (resolved) {
+    // Fully resolved via registry, finish up.
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration()
+        ? getReferencedType()
+        : this;
   }
 
+  // Otherwise try resolving record-types or property-qualified names.
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return registry.isLastGeneration()
+        ? getReferencedType()
+        : this;
   }
 
+  // Final resolution pass.
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return registry.isLastGeneration()
+      ? getReferencedType()
+      : this;
 }
\ No newline at end of file
