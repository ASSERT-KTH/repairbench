diff --git a/tmp/40b62904-2581-4484-97b0-1ee947325b96_buggy.java b/tmp/872be0b2-d67d-40ce-ad18-07d3b53620e2_fixed.java
index d6a560a..d1ff49c 100644
--- a/tmp/40b62904-2581-4484-97b0-1ee947325b96_buggy.java
+++ b/tmp/872be0b2-d67d-40ce-ad18-07d3b53620e2_fixed.java
@@ -1,33 +1,25 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
-    if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
+  // First try to resolve by name in the registry.
+  boolean registryResolved = resolveViaRegistry(t, enclosing);
+  // If that failed, fall back to resolving via property chains.
+  if (!registryResolved) {
     resolveViaProperties(t, enclosing);
+  }
+  // Before doing any further prototype/interface wiring, check for cycles
+  // in the inheritance/implements chain.  If we discover one, emit the
+  // parse‐error and bail out early to avoid spurious type‐checking errors
+  // or infinite recursion.
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
-
+  // Complete the resolution (this will hook up superclasses, interfaces, etc).
   super.resolveInternal(t, enclosing);
+  // Once fully resolved, flush any queued property continuations.
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  // In the last pass we replace this NamedType proxy with the real type.
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
