diff --git a/tmp/49a24840-da62-44fa-bcf4-9078191ed609_buggy.java b/tmp/3d05d648-97d3-4586-a684-586443829688_fixed.java
index d6a560a..63e19ba 100644
--- a/tmp/49a24840-da62-44fa-bcf4-9078191ed609_buggy.java
+++ b/tmp/3d05d648-97d3-4586-a684-586443829688_fixed.java
@@ -1,33 +1,31 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // First try to resolve by looking up the name in the registry.
   boolean resolved = resolveViaRegistry(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    // Stop resolving further to avoid infinite recursion on a cycle.
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
+  // If we didn't find it in the registry, fall back to resolving
+  // via properties (for dotted names, etc.).
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    // Again, abort further work on cycles.
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
