diff --git a/tmp/6d761189-ba47-41b3-9a59-771c9d92e83a_buggy.java b/tmp/05c74500-d89b-49d7-9ae6-41fa8a932943_fixed.java
index d6a560a..9b76e0a 100644
--- a/tmp/6d761189-ba47-41b3-9a59-771c9d92e83a_buggy.java
+++ b/tmp/05c74500-d89b-49d7-9ae6-41fa8a932943_fixed.java
@@ -1,33 +1,81 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // First, try registry-based resolution.
   boolean resolved = resolveViaRegistry(t, enclosing);
+  // Catch any immediate prototype-cycle errors.
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
   }
 
   if (resolved) {
+    // Finish resolving extends/implements on the referenced constructor/interface.
     super.resolveInternal(t, enclosing);
+
+    // Additional cycle detection: catch direct self-implements and mixed extends/implements loops.
+    JSType ref = getReferencedType();
+    // toMaybeFunctionType() returns non-null only for function/constructor/interface types
+    FunctionType ctor = ref.toMaybeFunctionType();
+    if (ctor != null) {
+      // If there is no explicit @extends, only look for a direct self-implement loop.
+      FunctionType sup = ctor.getSuperClassConstructor();
+      if (sup == null) {
+        for (JSType iface : ctor.getImplementedInterfaces()) {
+          FunctionType implCtor = iface.toMaybeFunctionType();
+          if (implCtor == ctor) {
+            // direct implements-of-self
+            handleTypeCycle(t);
+            break;
+          }
+        }
+      } else {
+        // Mixed extends/implements cycle detection via BFS
+        java.util.Deque<FunctionType> queue = new java.util.ArrayDeque<FunctionType>();
+        java.util.Set<FunctionType> visited = new java.util.HashSet<FunctionType>();
+        queue.add(ctor);
+        visited.add(ctor);
+        boolean foundCycle = false;
+        while (!queue.isEmpty() && !foundCycle) {
+          FunctionType curr = queue.removeFirst();
+          // follow the explicit extends edge
+          FunctionType e = curr.getSuperClassConstructor();
+          if (e != null) {
+            if (!visited.add(e)) {
+              foundCycle = true;
+              break;
+            }
+            queue.add(e);
+          }
+          // follow all implements edges
+          for (JSType iface : curr.getImplementedInterfaces()) {
+            FunctionType ic = iface.toMaybeFunctionType();
+            if (ic != null) {
+              if (!visited.add(ic)) {
+                foundCycle = true;
+                break;
+              }
+              queue.add(ic);
+            }
+          }
+        }
+        if (foundCycle) {
+          handleTypeCycle(t);
+        }
+      }
+    }
+
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
+  // Fallback to property-based resolution.
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
