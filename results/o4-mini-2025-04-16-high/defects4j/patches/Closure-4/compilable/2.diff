diff --git a/tmp/b54a9007-396a-4809-8cb5-566db8b38dd2_buggy.java b/tmp/05a9c9af-3fef-4ff5-be53-a5e7c61c1741_fixed.java
index d6a560a..6f7e9b6 100644
--- a/tmp/b54a9007-396a-4809-8cb5-566db8b38dd2_buggy.java
+++ b/tmp/05a9c9af-3fef-4ff5-be53-a5e7c61c1741_fixed.java
@@ -1,33 +1,30 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
-    if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
+    // First try registry-based resolution to avoid property‚Äêbased warnings.
+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);
+    if (!resolvedViaRegistry) {
+      // Fall back to the old "resolve by properties" mechanism.
       resolveViaProperties(t, enclosing);
+    }
+
+    // Perform the standard superclass resolution.
+    super.resolveInternal(t, enclosing);
+
+    // Now detect any cycles in the inheritance (extends/implements) chain.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      // Bail out immediately on cycle.
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
-    super.resolveInternal(t, enclosing);
+    // If we really got a resolution, finish up any property continuations.
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    // On the last generation pass, unwrap the NamedType to its real JSType.
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
