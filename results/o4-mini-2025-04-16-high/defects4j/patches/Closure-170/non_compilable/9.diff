diff --git a/tmp/4a508494-76a3-4cae-9b85-abe59a67461c_buggy.java b/tmp/6e67c518-4fe8-4376-922a-4891f746574b_fixed.java
index 5abdeb5..3d13afd 100644
--- a/tmp/4a508494-76a3-4cae-9b85-abe59a67461c_buggy.java
+++ b/tmp/6e67c518-4fe8-4376-922a-4891f746574b_fixed.java
@@ -1,29 +1,31 @@
 /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+ * Computes the number of uses of the variable varName and stores it in
+ * numUsesWithinCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
+        @Override
+        public boolean shouldTraverse(
+            NodeTraversal t, Node n, Node parent) {
+          // Override the default CFG‐based pruning so that we
+          // see every occurrence of varName (even in pure sub‐expressions).
+          return true;
+        }
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName()
+              && n.getString().equals(varName)
+              // still don't count the LHS of a top‐level assignment chain
+              && !(parent.isAssign()
+                   && parent.getFirstChild() == n)) {
             numUsesWithinCfgNode++;
           }
         }
-
       };
 
+  // Traverse the entire subtree of this cfgNode (no pruning).
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
