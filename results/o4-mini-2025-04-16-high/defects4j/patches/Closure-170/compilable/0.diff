diff --git a/tmp/7b4e7724-53d1-4ab5-8750-e8598fd3aee1_buggy.java b/tmp/f7dd42ef-6f9e-459b-987f-5941ff88b381_fixed.java
index 5abdeb5..09fbd7f 100644
--- a/tmp/7b4e7724-53d1-4ab5-8750-e8598fd3aee1_buggy.java
+++ b/tmp/f7dd42ef-6f9e-459b-987f-5941ff88b381_fixed.java
@@ -1,29 +1,19 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      // Count every occurrence of the name, including assignment LHS,
+      // so that writes to the variable also prevent inlining.
+      if (n.isName() && n.getString().equals(varName)) {
         numUsesWithinCfgNode++;
       }
     }
-
   };
-
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
