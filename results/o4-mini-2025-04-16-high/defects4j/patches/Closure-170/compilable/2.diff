diff --git a/tmp/531a7089-8992-44e7-9615-54d62b424561_buggy.java b/tmp/a0b805ed-4a6d-49ab-82fc-19f0fe28b48c_fixed.java
index 5abdeb5..bbaa0bd 100644
--- a/tmp/531a7089-8992-44e7-9615-54d62b424561_buggy.java
+++ b/tmp/a0b805ed-4a6d-49ab-82fc-19f0fe28b48c_fixed.java
@@ -1,29 +1,25 @@
 /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+ * Computes the number of uses of the variable varName and stores it in
+ * numUsesWithinCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // Only skip counting the LHS if this ASSIGN is the top‚Äêlevel
+        // chain of assignments (i.e. the ASSIGN node is a direct child of cfgNode).
+        boolean isLhsOfTopLevelAssign =
+            parent.isAssign()
+            && parent.getFirstChild() == n
+            && parent.getParent() == cfgNode;
+        if (!isLhsOfTopLevelAssign) {
           numUsesWithinCfgNode++;
         }
       }
-
+    }
   };
-
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
