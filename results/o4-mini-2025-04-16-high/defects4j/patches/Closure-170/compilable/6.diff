diff --git a/tmp/2826902a-5705-4d37-9d4d-5afff2a2591e_buggy.java b/tmp/118cbd2f-48f9-470b-93af-291f61cb2cc2_fixed.java
index 5abdeb5..5e8edae 100644
--- a/tmp/2826902a-5705-4d37-9d4d-5afff2a2591e_buggy.java
+++ b/tmp/118cbd2f-48f9-470b-93af-291f61cb2cc2_fixed.java
@@ -1,29 +1,23 @@
 /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+ * Computes the number of uses of the variable varName and stores it in
+ * numUsesWithinCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Only skip the lhs of a *top‚Äêlevel* assignment chain.
+            if (parent.isAssign()
+                && parent.getFirstChild() == n
+                && parent.getParent() == cfgNode) {
+              return;
+            }
             numUsesWithinCfgNode++;
           }
         }
-
       };
-
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
