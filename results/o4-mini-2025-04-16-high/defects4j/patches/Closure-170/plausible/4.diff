diff --git a/tmp/50fd4a88-5699-4508-8171-a49304f606dc_buggy.java b/tmp/948acd1f-691e-416d-837a-43bf1dd902e8_fixed.java
index 5abdeb5..9539c94 100644
--- a/tmp/50fd4a88-5699-4508-8171-a49304f606dc_buggy.java
+++ b/tmp/948acd1f-691e-416d-837a-43bf1dd902e8_fixed.java
@@ -1,29 +1,27 @@
 /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+ * Computes the number of uses of the variable varName and stores it in
+ * numUsesWithinCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (!n.isName() || !n.getString().equals(varName)) {
+        return;
+      }
+      // We only skip counting the LHS when this entire cfgNode is
+      // a top‚Äêlevel assignment statement (an EXPR_RESULT whose direct
+      // child is an ASSIGN).  In all other contexts (e.g. inside a hook)
+      // the write to varName must count as a use.
+      if (parent.isAssign()
+          && parent.getFirstChild() == n
+          && cfgNode.isExprResult()) {
+        return;
+      }
       numUsesWithinCfgNode++;
     }
-        }
-
   };
-
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
