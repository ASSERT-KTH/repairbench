diff --git a/tmp/43092f2d-253a-4dbc-bba1-cc5b293ccc5c_buggy.java b/tmp/4846da49-a24c-4ae0-a695-8416cdded7ba_fixed.java
index 5abdeb5..252629a 100644
--- a/tmp/43092f2d-253a-4dbc-bba1-cc5b293ccc5c_buggy.java
+++ b/tmp/4846da49-a24c-4ae0-a695-8416cdded7ba_fixed.java
@@ -1,29 +1,26 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
+  // Only skip LHS‐names when the entire cfgNode is a top‐level assignment chain:
+  final boolean skipLhsOfTopLevelAssignChain =
+      cfgNode.isAssign() ||
+      (cfgNode.isExprResult() && cfgNode.getFirstChild().isAssign());
+
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // If this is the LHS of an assign, only skip it in the
+        // special top‐level‐chain case.
+        if (parent.isAssign()
+            && parent.getFirstChild() == n
+            && skipLhsOfTopLevelAssignChain) {
+          return;
+        }
         numUsesWithinCfgNode++;
       }
     }
-
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
