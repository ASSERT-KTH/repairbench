diff --git a/tmp/2c166dd7-ac50-4c75-a36e-ee817a1ae15c_buggy.java b/tmp/9c04e9ac-d9d9-4af7-bf24-a8baca742eb5_fixed.java
index 5abdeb5..cd6c908 100644
--- a/tmp/2c166dd7-ac50-4c75-a36e-ee817a1ae15c_buggy.java
+++ b/tmp/9c04e9ac-d9d9-4af7-bf24-a8baca742eb5_fixed.java
@@ -1,29 +1,30 @@
 /**
  * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+ * numUsesWithinCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
+  // Only suppress counting the LHS when this node is really a top‐level
+  // assignment (or an ExprResult wrapping one), i.e. an assignment‐chain.
+  final boolean isAssignmentChain =
+      cfgNode.isAssign()
+      || (cfgNode.isExprResult() && cfgNode.getFirstChild().isAssign());
+
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Skip the LHS of a top‐level assignment chain only.
+            if (parent.isAssign()
+                && parent.getFirstChild() == n
+                && isAssignmentChain) {
+              return;
+            }
             numUsesWithinCfgNode++;
           }
         }
-
       };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
