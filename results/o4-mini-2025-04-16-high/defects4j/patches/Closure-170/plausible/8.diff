diff --git a/tmp/1966e413-40da-4fb8-9dd9-3aea9b46da39_buggy.java b/tmp/6821409d-35a3-4183-9bef-e079821e573b_fixed.java
index 5abdeb5..53d67d7 100644
--- a/tmp/1966e413-40da-4fb8-9dd9-3aea9b46da39_buggy.java
+++ b/tmp/6821409d-35a3-4183-9bef-e079821e573b_fixed.java
@@ -1,29 +1,34 @@
 /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+ * Computes the number of uses of the variable varName and stores it in
+ * numUsesWithinCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
+
+  // Only suppress counting the LHS of an assignment when that assignment
+  // is literally the entire CFG node (or an expression‐result/return
+  // whose direct child is an ASSIGN).  In all other cases (e.g. an
+  // assignment deep inside a hook), we want to count even the LHS.
+  final boolean isAssignmentChain =
+      cfgNode.isAssign()
+      || ((cfgNode.isExprResult() || cfgNode.isReturn())
+          && cfgNode.getFirstChild().isAssign());
+
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // Don't count the LHS of a top‐level assignment chain.
+        if (parent.isAssign()
+            && parent.getFirstChild() == n
+            && isAssignmentChain) {
+          return;
+        }
         numUsesWithinCfgNode++;
       }
     }
-
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
