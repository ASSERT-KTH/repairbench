diff --git a/tmp/3573b347-2303-48cd-b2e9-0d74d8191ed6_buggy.java b/tmp/36c57bf2-132c-48ee-96ee-f3a1f054ca6d_fixed.java
index cb1fb60..f2f257f 100644
--- a/tmp/3573b347-2303-48cd-b2e9-0d74d8191ed6_buggy.java
+++ b/tmp/36c57bf2-132c-48ee-96ee-f3a1f054ca6d_fixed.java
@@ -1,73 +1,81 @@
     /**
      * <p>
      * Decodes all of the provided data, starting at inPos, for inAvail bytes.  Should be called at least twice: once
      * with the data to decode, and once with inAvail set to "-1" to alert decoder that EOF has been reached.  The "-1"
      * call is not necessary when decoding, but it doesn't hurt, either.
      * </p>
      * <p>
      * Ignores all non-base64 characters.  This is how chunked (e.g. 76 character) data is handled, since CR and LF are
      * silently ignored, but has implications for other bytes, too.  This method subscribes to the garbage-in,
      * garbage-out philosophy: it will not check the provided data for validity.
      * </p>
      * <p>
      * Thanks to "commons" project in ws.apache.org for the bitwise operations, and general approach.
      *     http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      *
      * @param in
      *            byte[] array of ascii data to base64 decode.
      * @param inPos
      *            Position to start reading data from.
      * @param inAvail
-     *            Amount of bytes available from input for encoding.
+     *            Amount of bytes available from input for encoding, or -1 on EOF.
      */
     void decode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        // If we've already hit EOF on a prior call and this is not the final (-1) flush,
+        // just return.
+        if (eof && inAvail >= 0) {
             return;
         }
+        // Mark EOF on a -1 call
         if (inAvail < 0) {
             eof = true;
         }
+
+        // Main decode loop
         for (int i = 0; i < inAvail; i++) {
+            // Ensure we have room for at least a full decode block
             if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             byte b = in[inPos++];
+            // Padding character: end of meaningful data
             if (b == PAD) {
-                // We're done.
                 eof = true;
                 break;
-            } else {
+            }
+            // Only decode bytes in the table
             if (b >= 0 && b < DECODE_TABLE.length) {
                 int result = DECODE_TABLE[b];
                 if (result >= 0) {
                     modulus = (++modulus) % 4;
                     x = (x << 6) + result;
+                    // Whenever we've seen 4 6-bit values, write out 3 bytes
                     if (modulus == 0) {
                         buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                         buffer[pos++] = (byte) ((x >> 8)  & MASK_8BITS);
                         buffer[pos++] = (byte) ( x        & MASK_8BITS);
                     }
                 }
             }
         }
-        }
 
-        // Two forms of EOF as far as base64 decoder is concerned: actual
-        // EOF (-1) and first time '=' character is encountered in stream.
-        // This approach makes the '=' padding characters completely optional.
+        // If we're at EOF (either -1 call or saw '=') and there's a partial quantum, flush it
         if (eof && modulus != 0) {
-            
-            x = x << 6;
+            // Make sure there's room for up to 2 more bytes
+            if (buffer == null || buffer.length - pos < decodeSize) {
+                resizeBuffer();
+            }
+            x <<= 6;
             switch (modulus) {
                 case 2:
-                    x = x << 6;
+                    x <<= 6;
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     break;
                 case 3:
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     buffer[pos++] = (byte) ((x >> 8)  & MASK_8BITS);
                     break;
             }
         }
     }
\ No newline at end of file
