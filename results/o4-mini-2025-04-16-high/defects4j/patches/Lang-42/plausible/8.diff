diff --git a/tmp/4eb10111-3878-41a5-bafb-9d97fa5af8de_buggy.java b/tmp/368a292a-6e4d-474e-856d-e07e1a3794c8_fixed.java
index 822447c..12f3a7d 100644
--- a/tmp/4eb10111-3878-41a5-bafb-9d97fa5af8de_buggy.java
+++ b/tmp/368a292a-6e4d-474e-856d-e07e1a3794c8_fixed.java
@@ -1,37 +1,43 @@
 /**
  * <p>
  * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
  * passed.
  * </p>
  * 
  * @param writer
  *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
  * @param str
  *            The <code>String</code> to escape. Assumed to be a non-null value.
  * @throws IOException
  *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
  *             methods.
  * 
  * @see #escape(String)
  * @see Writer
  */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
-            if (entityName == null) {
-                if (c > 0x7F) {
-                    writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
-                    writer.write(';');
-                } else {
-                    writer.write(c);
+    for (int i = 0; i < len; ) {
+        int codepoint = str.codePointAt(i);
+        i += Character.charCount(codepoint);
+
+        String entityName = null;
+        // only look up named entities for BMP chars
+        if (codepoint <= 0xFFFF) {
+            entityName = this.entityName((char) codepoint);
         }
-            } else {
+
+        if (entityName != null) {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
+        } else if (codepoint > 0x7F) {
+            writer.write("&#");
+            writer.write(Integer.toString(codepoint, 10));
+            writer.write(';');
+        } else {
+            // for ASCII and control chars not needing escape
+            writer.write(codepoint);
         }
     }
 }
\ No newline at end of file
