diff --git a/tmp/be3adc88-ca31-4afa-a2ad-113bdcc81bce_buggy.java b/tmp/e5ceffe0-da72-44b4-b1fa-a1456a96a782_fixed.java
index 822447c..f23cdd0 100644
--- a/tmp/be3adc88-ca31-4afa-a2ad-113bdcc81bce_buggy.java
+++ b/tmp/e5ceffe0-da72-44b4-b1fa-a1456a96a782_fixed.java
@@ -1,37 +1,28 @@
-    /**
-     * <p>
-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
-     * passed.
-     * </p>
-     * 
-     * @param writer
-     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
-     * @param str
-     *            The <code>String</code> to escape. Assumed to be a non-null value.
-     * @throws IOException
-     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
-     * 
-     * @see #escape(String)
-     * @see Writer
-     */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
+    for (int i = 0; i < len; ) {
+        int cp = str.codePointAt(i);
+        i += Character.charCount(cp);
+        if (cp <= 0xFFFF) {
+            char c = (char) cp;
             String entityName = this.entityName(c);
             if (entityName == null) {
                 if (c > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(cp, 10));
                     writer.write(';');
                 } else {
                     writer.write(c);
                 }
             } else {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+        } else {
+            writer.write("&#");
+            writer.write(Integer.toString(cp, 10));
+            writer.write(';');
+        }
     }
 }
\ No newline at end of file
