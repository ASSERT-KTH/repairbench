diff --git a/tmp/e432bd07-e1b2-4709-b01d-f3a31b5231a2_buggy.java b/tmp/b42a0097-dc2f-41e9-bec6-a1c28b27083a_fixed.java
index 7e43c1c..17a0299 100644
--- a/tmp/e432bd07-e1b2-4709-b01d-f3a31b5231a2_buggy.java
+++ b/tmp/b42a0097-dc2f-41e9-bec6-a1c28b27083a_fixed.java
@@ -1,19 +1,28 @@
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
-    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
-      FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
+  // Get the raw type of the constructor, then strip null/undefined for error cases
+  JSType rawType = getJSType(constructor);
+  JSType type = rawType.restrictByNotNullOrUndefined();
+
+  // If it's the empty (bottom) type or an unknown type, just give the NEW expression
+  // an unknown type (don't crash), and don't report a NOT_A_CONSTRUCTOR.
+  if (type.isEmptyType() || type.isUnknownType()) {
+    ensureTyped(t, n);
+    return;
+  }
+
+  // See if it's really a @constructor function.
+  // We look at the raw type, not at the restricted wrapper, to preserve
+  // the .isConstructor flag and toMaybeFunctionType behavior.
+  FunctionType fnType = rawType.toMaybeFunctionType();
+  if (fnType != null && fnType.isConstructor()) {
     visitParameterList(t, n, fnType);
     ensureTyped(t, n, fnType.getInstanceType());
-      } else {
-        ensureTyped(t, n);
-      }
   } else {
     report(t, n, NOT_A_CONSTRUCTOR);
     ensureTyped(t, n);
   }
 }
\ No newline at end of file
