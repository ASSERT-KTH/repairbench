diff --git a/tmp/a6f057fb-0343-45f5-8e12-65fe703c53fb_buggy.java b/tmp/3388b829-d3ed-476d-a6d6-26decefea7f3_fixed.java
index 7e43c1c..ad02198 100644
--- a/tmp/a6f057fb-0343-45f5-8e12-65fe703c53fb_buggy.java
+++ b/tmp/3388b829-d3ed-476d-a6d6-26decefea7f3_fixed.java
@@ -1,19 +1,37 @@
-  /**
-   * Visits a NEW node.
-   */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+
+  // If the constructor expression is a union of constructors, handle each arm.
+  if (type.isUnionType()) {
+    UnionType unionType = type.toMaybeUnionType();
+    JSTypeRegistry registry = t.getCompiler().getTypeRegistry();
+    List<JSType> instanceTypes = new ArrayList<JSType>();
+    for (JSType alt : unionType.getMembers()) {
+      JSType altRestr = alt.restrictByNotNullOrUndefined();
+      FunctionType altCtor = altRestr.toMaybeFunctionType();
+      if (altCtor == null || !altCtor.isConstructor()) {
+        report(t, n, NOT_A_CONSTRUCTOR);
+        ensureTyped(t, n);
+        return;
+      }
+      visitParameterList(t, n, altCtor);
+      instanceTypes.add(altCtor.getInstanceType());
+    }
+    // The result of `new` is the union of all possible instance types.
+    ensureTyped(t, n, registry.createUnionType(instanceTypes));
+  } else {
+    // The normal (non‚Äêunion) case.
     FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
+    if (fnType != null && fnType.isConstructor()) {
       visitParameterList(t, n, fnType);
       ensureTyped(t, n, fnType.getInstanceType());
-      } else {
+    } else if (type.isEmptyType() || type.isUnknownType()) {
+      // Allow calls on empty/unknown without crashing.
       ensureTyped(t, n);
-      }
     } else {
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
   }
+}
\ No newline at end of file
