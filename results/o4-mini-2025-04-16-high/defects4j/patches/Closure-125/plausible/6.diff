diff --git a/tmp/a4d77efe-1506-4995-8871-b9de728daae2_buggy.java b/tmp/278e6437-54aa-4fe0-b3fb-a799380ff728_fixed.java
index 7e43c1c..261d203 100644
--- a/tmp/a4d77efe-1506-4995-8871-b9de728daae2_buggy.java
+++ b/tmp/278e6437-54aa-4fe0-b3fb-a799380ff728_fixed.java
@@ -1,19 +1,27 @@
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+
+  // If the constructor type is the empty (bottom) type—e.g. from an always-false equality—
+  // just assign that type to avoid an IllegalStateException.
+  if (type.isEmptyType()) {
+    ensureTyped(t, n, type);
+
+  } else if (type.isConstructor() || type.isUnknownType()) {
     FunctionType fnType = type.toMaybeFunctionType();
     if (fnType != null) {
       visitParameterList(t, n, fnType);
       ensureTyped(t, n, fnType.getInstanceType());
     } else {
+      // unknown or union constructor signature
       ensureTyped(t, n);
     }
+
   } else {
     report(t, n, NOT_A_CONSTRUCTOR);
     ensureTyped(t, n);
   }
 }
\ No newline at end of file
