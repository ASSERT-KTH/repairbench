diff --git a/tmp/9ac39bf0-118f-411c-b9d0-52207c979abe_buggy.java b/tmp/45b3bb02-4e14-4c62-8cb1-506372614d74_fixed.java
index 7e43c1c..254ecbe 100644
--- a/tmp/9ac39bf0-118f-411c-b9d0-52207c979abe_buggy.java
+++ b/tmp/45b3bb02-4e14-4c62-8cb1-506372614d74_fixed.java
@@ -1,19 +1,27 @@
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
-    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
-      FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
+  // Drop any null/undefined from the constructor type.
+  JSType targetType = getJSType(constructor).restrictByNotNullOrUndefined();
+  // See if it's really a FunctionType that we can new up.
+  FunctionType fnType = targetType.toMaybeFunctionType();
+  if (fnType != null && fnType.isConstructor()) {
+    // Good, it's a constructor – type‐check the arguments and record the
+    // instance type on the NEW node.
     visitParameterList(t, n, fnType);
     ensureTyped(t, n, fnType.getInstanceType());
-      } else {
+  } else if (targetType.isEmptyType() || targetType.isUnknownType()) {
+    // An empty or unknown type is "harmless" here – don't error, but give
+    // it an unknown result type.
     ensureTyped(t, n);
-      }
   } else {
-      report(t, n, NOT_A_CONSTRUCTOR);
+    // Definitely not a constructor – report it (and supply the missing
+    // name argument so we don't blow up in the error reporter).
+    String name = constructor.getQualifiedName();
+    report(t, n, NOT_A_CONSTRUCTOR,
+           name != null ? name : constructor.toString());
     ensureTyped(t, n);
   }
 }
\ No newline at end of file
