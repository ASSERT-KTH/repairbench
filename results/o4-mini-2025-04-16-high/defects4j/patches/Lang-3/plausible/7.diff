diff --git a/tmp/339b41f2-576f-4913-bfab-d380861c4d86_buggy.java b/tmp/02715c61-6bf6-4355-a7d9-ba4e1a9638fa_fixed.java
index b09cd82..456cf4e 100644
--- a/tmp/339b41f2-576f-4913-bfab-d380861c4d86_buggy.java
+++ b/tmp/02715c61-6bf6-4355-a7d9-ba4e1a9638fa_fixed.java
@@ -1,192 +1,171 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
-     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
-     * </p>
-     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
-     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
-    * 
-     * <p>
-     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
-     * </p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string (or null if the input is null)
-     * @throws NumberFormatException if the value cannot be converted
-     */
 public static Number createNumber(final String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
-        // Need to deal with all possible hex prefixes here
-        final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
+    // Hexadecimal prefix handling
+    final String[] hexPrefixes = { "0x", "0X", "-0x", "-0X", "#", "-#" };
     int pfxLen = 0;
-        for(final String pfx : hex_prefixes) {
+    for (String pfx : hexPrefixes) {
         if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+            pfxLen = pfx.length();
             break;
         }
     }
-        if (pfxLen > 0) { // we have a hex number
+    if (pfxLen > 0) {
         final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
+        if (hexDigits > 16) {
             return createBigInteger(str);
         }
-            if (hexDigits > 8) { // too many for an int
+        if (hexDigits > 8) {
             return createLong(str);
         }
         return createInteger(str);
     }
+
+    // Split off mantissa, decimal and exponent parts
     final char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
     String exp;
     final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // one of them is -1
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
-
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+    int numDecimals = 0;
+    if (decPos > -1) {
+        if (expPos > -1) {
+            if (expPos < decPos || expPos > str.length()) {
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             dec = str.substring(decPos + 1, expPos);
         } else {
             dec = str.substring(decPos + 1);
         }
         mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
+        numDecimals = dec.length();
     } else {
         if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+            if (expPos > str.length()) {
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             mant = str.substring(0, expPos);
         } else {
             mant = str;
         }
         dec = null;
     }
+
+    // Handle type qualifier suffix
     if (!Character.isDigit(lastChar) && lastChar != '.') {
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length() - 1);
         } else {
             exp = null;
         }
-            //Requesting a specific type..
         final String numeric = str.substring(0, str.length() - 1);
         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         switch (lastChar) {
-                case 'l' :
             case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+            case 'l':
+                if (dec == null && exp == null
+                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1))
+                            || isDigits(numeric))) {
                     try {
                         return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                    } catch (NumberFormatException nfe) {
+                        // too big for long
                     }
                     return createBigInteger(numeric);
-
                 }
                 throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
             case 'F':
+            case 'f':
                 try {
                     final Float f = NumberUtils.createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
-
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                } catch (NumberFormatException nfe) {
+                    // ignore
                 }
-                    //$FALL-THROUGH$
-                case 'd' :
+                // fall through to 'D'
             case 'D':
+            case 'd':
                 try {
                     final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                } catch (NumberFormatException nfe) {
+                    // ignore
                 }
                 try {
                     return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                } catch (NumberFormatException e) {
+                    // ignore
                 }
-                    //$FALL-THROUGH$
+                // fall through
             default:
                 throw new NumberFormatException(str + " is not a valid number.");
+        }
+    }
 
-            }
-        }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
+    // No suffix: user doesn't care, pick smallest type that has no precision loss
     if (expPos > -1 && expPos < str.length() - 1) {
         exp = str.substring(expPos + 1, str.length());
     } else {
         exp = null;
     }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+    if (dec == null && exp == null) {
+        // integer types
         try {
             return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
+        } catch (NumberFormatException nfe) {
+            // ignore
         }
         try {
             return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
+        } catch (NumberFormatException nfe) {
+            // ignore
         }
         return createBigInteger(str);
     }
 
-        //Must be a Float, Double, BigDecimal
+    // floating types: try Float, then Double, then BigDecimal, but ensure no precision loss
     final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
+    // try Float
     try {
         final Float f = createFloat(str);
         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+            // ensure exact match
+            BigDecimal bdFromFloat = new BigDecimal(f.toString());
+            BigDecimal bdOriginal = new BigDecimal(str);
+            if (bdFromFloat.compareTo(bdOriginal) == 0) {
                 return f;
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
         }
+    } catch (NumberFormatException nfe) {
+        // ignore
+    }
+
+    // try Double
     try {
         final Double d = createDouble(str);
         if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+            // ensure exact match
+            BigDecimal bdFromDouble = new BigDecimal(d.toString());
+            BigDecimal bdOriginal = new BigDecimal(str);
+            if (bdFromDouble.compareTo(bdOriginal) == 0) {
                 return d;
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+        }
+    } catch (NumberFormatException nfe) {
+        // ignore
     }
 
+    // fallback
     return createBigDecimal(str);
 }
\ No newline at end of file
