diff --git a/tmp/899a5cf8-21e4-4bd7-b0c9-39500253584b_buggy.java b/tmp/a43b4290-aa13-4866-9bd3-169327e8b5b0_fixed.java
index fb2b020..7db0c93 100644
--- a/tmp/899a5cf8-21e4-4bd7-b0c9-39500253584b_buggy.java
+++ b/tmp/a43b4290-aa13-4866-9bd3-169327e8b5b0_fixed.java
@@ -1,27 +1,24 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous (i.e. literal) types.
+  if (!isAnonymousType()) {
+    return;
+  }
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
+      // Only infer when the target has no declared type for that prop.
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
+        // If the literal didn't actually have the property, make it optional.
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
