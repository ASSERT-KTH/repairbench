diff --git a/tmp/e7f6f969-30c9-453f-b3a9-58cb933eda82_buggy.java b/tmp/51babca0-f8ed-4b05-96f3-300aaebb720f_fixed.java
index fb2b020..f418327 100644
--- a/tmp/e7f6f969-30c9-453f-b3a9-58cb933eda82_buggy.java
+++ b/tmp/51babca0-f8ed-4b05-96f3-300aaebb720f_fixed.java
@@ -1,27 +1,27 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
+  // We only want to match constraints on anonymous (i.e. object‚Äêliteral) types.
+  if (!isAnonymousType() || !constraintObj.isRecordType()) {
+    return;
+  }
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+  // taking each property on the record and trying to match
   // properties on this object.
-    if (constraintObj.isRecordType()) {
   for (String prop : constraintObj.getOwnPropertyNames()) {
     JSType propType = constraintObj.getPropertyType(prop);
     if (!isPropertyTypeDeclared(prop)) {
       JSType typeToInfer = propType;
       if (!hasProperty(prop)) {
         typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
             .getLeastSupertype(propType);
       }
       defineInferredProperty(prop, typeToInfer, null);
     }
   }
 }
\ No newline at end of file
-  }
