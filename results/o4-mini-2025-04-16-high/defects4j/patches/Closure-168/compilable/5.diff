diff --git a/tmp/96683b05-29b6-4b65-bb32-033e51d1ec64_buggy.java b/tmp/70c0667c-b209-4c2d-9a78-492b06cca51b_fixed.java
index b12de99..facc415 100644
--- a/tmp/96683b05-29b6-4b65-bb32-033e51d1ec64_buggy.java
+++ b/tmp/70c0667c-b209-4c2d-9a78-492b06cca51b_fixed.java
@@ -1,52 +1,55 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  // Don’t do any of this in the global scope.
   if (t.inGlobalScope()) {
     return;
   }
 
+  // Note if this function ever returns a non-void value.
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
+  // We only care about local-variable assignment/escape in truly
+  // nested scopes (depth > 2).
   if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
     return;
   }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+  // 1) Track simple-name assignments and any use of a local name from
+  //    an inner scope (“escaped”).
+  if (n.isName() && !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
+        // Assignment in the inner scope?
+        if (NodeUtil.isLValue(n)) {
           data.get(ownerScope.getRootNode()).recordAssignedName(name);
         }
-
-          if (scope != ownerScope && ownerScope.isLocal()) {
+        // Any reference in an inner scope is an “escape.”
+        if (scope != ownerScope) {
           data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
         }
       }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
+    }
+  }
+  // 2) Track qualified‐name (getprop) “escapes” from inner scopes.
+  else if (n.isGetProp()) {
+    Node root = NodeUtil.getRootOfQualifiedName(n);
+    if (root != null && root.isName()) {
+      String rootName = root.getString();
       Scope scope = t.getScope();
-        Var var = scope.getVar(name);
+      Var var = scope.getVar(rootName);
       if (var != null) {
         Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
+        if (ownerScope.isLocal() && scope != ownerScope) {
           data.get(ownerScope.getRootNode())
               .recordEscapedQualifiedName(n.getQualifiedName());
         }
       }
     }
   }
+}
\ No newline at end of file
