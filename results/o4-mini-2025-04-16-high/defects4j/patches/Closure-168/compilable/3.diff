diff --git a/tmp/86ebb326-c366-4e7d-93da-09868036cfe7_buggy.java b/tmp/59db5847-18b5-49ac-8464-ef0457338b57_fixed.java
index b12de99..00e758e 100644
--- a/tmp/86ebb326-c366-4e7d-93da-09868036cfe7_buggy.java
+++ b/tmp/59db5847-18b5-49ac-8464-ef0457338b57_fixed.java
@@ -1,52 +1,65 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
+  // Record any non-empty return in this function.
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
+  // We only collect "escaped" and "reassigned" locals in functions deeper
+  // than two levels (global + one function).
   if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
     return;
   }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+  // 1) Handle writes to simple names.
+  if (n.isName() && NodeUtil.isLValue(n)
+      && !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
+      // (a) multiple writes in the same function
+      if (ownerScope.isLocal() && scope == ownerScope) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
-
-          if (scope != ownerScope && ownerScope.isLocal()) {
+      // (b) writes to an outer-scope local => escaped var
+      if (ownerScope.isLocal() && scope != ownerScope) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
+
+  // 2) Handle _reads_ of simple names (free‐variable capture).
+  } else if (n.isName() && !NodeUtil.isLValue(n)
+             && !NodeUtil.isBleedingFunctionName(n)) {
+    String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
+      // any read of an outer‐scope local in a nested function is an escape
+      if (ownerScope.isLocal() && scope != ownerScope) {
+        data.get(t.getScopeRoot()).recordEscapedVarName(name);
+      }
+    }
+
+  // 3) Handle writes to qualified names (a.b = ...)
+  } else if (n.isGetProp()
+             && n.isUnscopedQualifiedName()
+             && NodeUtil.isLValue(n)) {
+    String root = NodeUtil.getRootOfQualifiedName(n).getString();
+    Scope scope = t.getScope();
+    Var var = scope.getVar(root);
+    if (var != null) {
+      Scope ownerScope = var.getScope();
+      if (ownerScope.isLocal() && scope != ownerScope) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
   }
 }
\ No newline at end of file
