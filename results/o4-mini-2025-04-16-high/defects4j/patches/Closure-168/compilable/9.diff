diff --git a/tmp/58c4ba11-d34f-467d-be80-1a3fa09085a6_buggy.java b/tmp/16946472-a64e-4870-9108-f791d8c0d102_fixed.java
index b12de99..b744e79 100644
--- a/tmp/58c4ba11-d34f-467d-be80-1a3fa09085a6_buggy.java
+++ b/tmp/16946472-a64e-4870-9108-f791d8c0d102_fixed.java
@@ -1,52 +1,50 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  // Never analyze in the global (script) scope.
   if (t.inGlobalScope()) {
     return;
   }
 
+  // Record any non-empty return (i.e. returning a value) on the
+  // current function.
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
+  // Only do the expensive name‐and‐property‐tracking in non-global scopes.
+  // (We treat globals as escaped by default, so skip them here.)
   if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
     return;
   }
 
+  // Track assignments to local names.
   if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
-
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
+
+  // Also treat *any* property‐read on an unscoped root name as an escape,
+  // not just when it’s on the left‐hand side of an assignment.
+  } else if (n.isGetProp() && n.isUnscopedQualifiedName()) {
+    String root = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
-        Var var = scope.getVar(name);
+    Var var = scope.getVar(root);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
   }
 }
\ No newline at end of file
