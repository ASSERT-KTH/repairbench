diff --git a/tmp/404436ed-4b8a-4524-a949-f2f38b61400b_buggy.java b/tmp/e0d18f9f-4c95-4770-931a-99fa58533b61_fixed.java
index b12de99..1f75f40 100644
--- a/tmp/404436ed-4b8a-4524-a949-f2f38b61400b_buggy.java
+++ b/tmp/e0d18f9f-4c95-4770-931a-99fa58533b61_fixed.java
@@ -1,52 +1,58 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
+  // Record if this function ever returns a non‐empty value
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
+  // Only record deeper‐scope assignments/escapes
   if (t.getScopeDepth() <= 2) {
     // The first-order function analyzer looks at two types of variables:
     //
     // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
     // 2) Local variables that are assigned more than once.
     //
     // We treat all global variables as escaped by default, so there's
     // no reason to do this extra computation for them.
     return;
   }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+  // Handle both writes and reads of simple names
+  if (n.isName() && !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
+        // If this name is being written to, record re-assignment
+        if (NodeUtil.isLValue(n)) {
           data.get(ownerScope.getRootNode()).recordAssignedName(name);
         }
-
-          if (scope != ownerScope && ownerScope.isLocal()) {
+        // If we're in a deeper scope than where it was declared,
+        // record that it "escapes" that scope
+        if (scope != ownerScope) {
           data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
         }
       }
+    }
+
+  // Also handle writes to qualified names (e.g. obj.prop = ...)
   } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
              NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
+    String root = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
-        Var var = scope.getVar(name);
+    Var var = scope.getVar(root);
     if (var != null) {
       Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
+      if (ownerScope.isLocal() && scope != ownerScope) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
   }
 }
\ No newline at end of file
