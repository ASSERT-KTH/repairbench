diff --git a/tmp/c87fbc28-a1cd-41ba-aa8b-3e1ff02debf2_buggy.java b/tmp/c9aefd8d-1b7f-4aa0-a173-13c68383ddaf_fixed.java
index b12de99..e5cfb25 100644
--- a/tmp/c87fbc28-a1cd-41ba-aa8b-3e1ff02debf2_buggy.java
+++ b/tmp/c9aefd8d-1b7f-4aa0-a173-13c68383ddaf_fixed.java
@@ -1,52 +1,52 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  // Don't do any of this in the global scope.
   if (t.inGlobalScope()) {
     return;
   }
 
+  // Track any non‐empty return (for higher‐order analysis).
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
-      if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
+  // Only skip the literal global scope — we still need to
+  // observe assignments (e.g. “var self = this”) in first‐order functions.
+  if (t.getScopeDepth() <= 1) {
     return;
   }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+  // Record simple name assignments and escapes.
+  if (n.isName()
+      && NodeUtil.isLValue(n)
+      // Skip specially “bleeding” function names.
+      && !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
-
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
+
+  // Record qualified‐name escapes (e.g. obj.prop = ...).
+  } else if (n.isGetProp()
+             && n.isUnscopedQualifiedName()
+             && NodeUtil.isLValue(n)) {
+    String root = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
-        Var var = scope.getVar(name);
+    Var var = scope.getVar(root);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
   }
 }
\ No newline at end of file
