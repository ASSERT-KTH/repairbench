diff --git a/tmp/0c10909c-3caf-4054-8a13-5bd6e815bf30_buggy.java b/tmp/be29c4b7-9114-4e9c-9849-d3f30b0f0d6b_fixed.java
index 39981f0..d8888a6 100644
--- a/tmp/0c10909c-3caf-4054-8a13-5bd6e815bf30_buggy.java
+++ b/tmp/be29c4b7-9114-4e9c-9849-d3f30b0f0d6b_fixed.java
@@ -1,65 +1,63 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+    // If we're looking at a GETPROP, see if the property is actually inherited
+    // from some prototype or interface.  Only show a ".foo" on the owner
+    // if it lives up the chain, not if it's an own-instance field.
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
+        ObjectType initial = objectType;
+        ObjectType owner = objectType;
+        if (objectType.getConstructor() != null
+            && objectType.getConstructor().isInterface()) {
+          owner = FunctionType.getTopDefiningInterface(objectType, propName);
         } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+          // climb the prototype chain
+          while (owner != null && !owner.hasOwnProperty(propName)) {
+            owner = owner.getImplicitPrototype();
           }
         }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+        // only show "X.foo" if foo came from a prototype/interface,
+        // not if it's defined directly on the instance
+        if (owner != null
+            && owner != initial
+            && (owner.getConstructor() != null
+                || owner.isFunctionPrototypeType())) {
+          return owner.toString() + "." + propName;
         }
       }
     }
 
+    // fallback: just show the type or qualified name
     JSType type = getJSType(n);
     if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
+      ObjectType deref = type.dereference();
+      if (deref != null) {
+        type = deref;
       }
     }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
+    if (type.isFunctionPrototypeType()
+        || (type.toObjectType() != null
+            && type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
-      // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
\ No newline at end of file
