diff --git a/tmp/dd0ef1d4-56ff-4bdf-94c2-e081a0aef369_buggy.java b/tmp/991a1745-91e9-4232-8a53-6d7e16cd1434_fixed.java
index 39981f0..ee5bb25 100644
--- a/tmp/dd0ef1d4-56ff-4bdf-94c2-e081a0aef369_buggy.java
+++ b/tmp/991a1745-91e9-4232-8a53-6d7e16cd1434_fixed.java
@@ -1,65 +1,61 @@
 /**
  * Given a node, get a human-readable name for the type of that node so
  * that will be easy for the programmer to find the original declaration.
  *
  * For example, if SubFoo's property "bar" might have the human-readable
  * name "Foo.prototype.bar".
  *
  * @param n The node.
  * @param dereference If true, the type of the node will be dereferenced
  *     to an Object type, if possible.
  */
 String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+  // Special-case prototype methods and interface properties.
   if (n.isGetProp()) {
     ObjectType objectType = getJSType(n.getFirstChild()).dereference();
     if (objectType != null) {
       String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
+      // If it's an interface, find the top defining interface.
+      if (objectType.getConstructor() != null
+          && objectType.getConstructor().isInterface()) {
+        ObjectType iface =
+            FunctionType.getTopDefiningInterface(objectType, propName);
+        if (iface != null) {
+          return iface.toString() + "." + propName;
+        }
       } else {
-          // classes
+        // Otherwise climb the prototype chain to find where the prop was defined.
         while (objectType != null && !objectType.hasOwnProperty(propName)) {
           objectType = objectType.getImplicitPrototype();
         }
-        }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
+        // Only show X.prototype.foo for real prototype methods.
+        if (objectType != null && objectType.isFunctionPrototypeType()) {
           return objectType.toString() + "." + propName;
         }
       }
     }
+  }
 
+  // Fallback: show the type itself or the qualified name.
   JSType type = getJSType(n);
   if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
+    ObjectType deref = type.dereference();
+    if (deref != null) {
+      type = deref;
     }
   }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
+  if (type.isFunctionPrototypeType()
+      || (type.toObjectType() != null
+          && type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
-    String qualifiedName = n.getQualifiedName();
-    if (qualifiedName != null) {
-      return qualifiedName;
+  String qname = n.getQualifiedName();
+  if (qname != null) {
+    return qname;
   } else if (type.isFunctionType()) {
-      // Don't show complex function names.
+    // Don't show complex function signatures.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
