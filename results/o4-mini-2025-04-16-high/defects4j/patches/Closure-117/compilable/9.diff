diff --git a/tmp/ce8551f1-5cac-4d18-964d-4a78a8af2fa9_buggy.java b/tmp/25f2af97-e5c7-4e99-92f1-fad60ceb4314_fixed.java
index 39981f0..78bfeea 100644
--- a/tmp/ce8551f1-5cac-4d18-964d-4a78a8af2fa9_buggy.java
+++ b/tmp/25f2af97-e5c7-4e99-92f1-fad60ceb4314_fixed.java
@@ -1,65 +1,65 @@
 /**
  * Given a node, get a human-readable name for the type of that node so
  * that will be easy for the programmer to find the original declaration.
  *
  * For example, if SubFoo's property "bar" might have the human-readable
  * name "Foo.prototype.bar".
  *
  * @param n The node.
  * @param dereference If true, the type of the node will be dereferenced
  *     to an Object type, if possible.
  */
 String getReadableJSTypeName(Node n, boolean dereference) {
-
   // The best type name is the actual type name.
 
   // If we're analyzing a GETPROP, the property may be inherited by the
   // prototype chain. So climb the prototype chain and find out where
   // the property was originally defined.
   if (n.isGetProp()) {
     ObjectType objectType = getJSType(n.getFirstChild()).dereference();
     if (objectType != null) {
       String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
+      // Remember the base type in case the property isn't found.
+      ObjectType definingType = objectType;
+      if (definingType.getConstructor() != null &&
+          definingType.getConstructor().isInterface()) {
+        definingType = FunctionType.getTopDefiningInterface(
+            definingType, propName);
       } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
+        while (definingType != null && !definingType.hasOwnProperty(propName)) {
+          definingType = definingType.getImplicitPrototype();
         }
       }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+      // If we found a prototype or interface that defines it, show that.
+      if (definingType != null &&
+          (definingType.getConstructor() != null ||
+           definingType.isFunctionPrototypeType())) {
+        return definingType.toString() + "." + propName;
       }
+      // Otherwise, fall back to the base object type name.
+      return objectType.toString();
     }
   }
 
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
       (type.toObjectType() != null &&
        type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName != null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
     // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
