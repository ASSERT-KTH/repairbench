diff --git a/tmp/00bcd506-4870-4dd3-8931-4e7c8de5edf7_buggy.java b/tmp/de7e82cf-40ed-43bf-b71b-66b72d8f07bb_fixed.java
index 7ea7ac9..1c6e157 100644
--- a/tmp/00bcd506-4870-4dd3-8931-4e7c8de5edf7_buggy.java
+++ b/tmp/de7e82cf-40ed-43bf-b71b-66b72d8f07bb_fixed.java
@@ -1,63 +1,61 @@
-    /**
-     * Gets a copy of this date with the specified field set to a new value.
-     * <p>
-     * If this partial did not previously support the field, the new one will.
-     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
-     * <p>
-     * For example, if the field type is <code>dayOfMonth</code> then the day
-     * would be changed/added in the returned instance.
-     *
-     * @param fieldType  the field type to set, not null
-     * @param value  the value to set
-     * @return a copy of this instance with the field set
-     * @throws IllegalArgumentException if the value is null or invalid
-     */
 public Partial with(DateTimeFieldType fieldType, int value) {
     if (fieldType == null) {
         throw new IllegalArgumentException("The field type must not be null");
     }
     int index = indexOf(fieldType);
     if (index == -1) {
+        // Prevent adding an alias of an existing field (e.g. clockhourOfDay when hourOfDay is present)
+        DurationField unitField = fieldType.getDurationType().getField(iChronology);
+        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
+        if (unitField.isSupported()) {
+            for (DateTimeFieldType existing : iTypes) {
+                DurationField existingUnit = existing.getDurationType().getField(iChronology);
+                if (unitField.compareTo(existingUnit) == 0) {
+                    DurationField existingRange = existing.getRangeDurationType().getField(iChronology);
+                    if (rangeField.compareTo(existingRange) == 0) {
+                        throw new IllegalArgumentException("Field '" + fieldType + "' is already supported");
+                    }
+                }
+            }
+        }
+        // Now insert the new field in the correct sorted position
         DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
         int[] newValues = new int[newTypes.length];
-            
-            // find correct insertion point to keep largest-smallest order
         int i = 0;
-            DurationField unitField = fieldType.getDurationType().getField(iChronology);
         if (unitField.isSupported()) {
             for (; i < iTypes.length; i++) {
                 DateTimeFieldType loopType = iTypes[i];
                 DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                 if (loopUnitField.isSupported()) {
-                        int compare = unitField.compareTo(loopUnitField);
-                        if (compare > 0) {
+                    int cmp = unitField.compareTo(loopUnitField);
+                    if (cmp > 0) {
                         break;
-                        } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
+                    } else if (cmp == 0) {
+                        DurationField loopRangeField =
+                            loopType.getRangeDurationType().getField(iChronology);
                         if (rangeField.compareTo(loopRangeField) > 0) {
                             break;
                         }
                     }
                 }
             }
         }
         System.arraycopy(iTypes, 0, newTypes, 0, i);
         System.arraycopy(iValues, 0, newValues, 0, i);
         newTypes[i] = fieldType;
         newValues[i] = value;
         System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
         System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-            // use public constructor to ensure full validation
-            // this isn't overly efficient, but is safe
         Partial newPartial = new Partial(iChronology, newTypes, newValues);
         iChronology.validate(newPartial, newValues);
         return newPartial;
     }
+    // If the value is the same, return this
     if (value == getValue(index)) {
         return this;
     }
+    // Otherwise replace the existing field
     int[] newValues = getValues();
     newValues = getField(index).set(this, index, newValues, value);
     return new Partial(this, newValues);
 }
\ No newline at end of file
