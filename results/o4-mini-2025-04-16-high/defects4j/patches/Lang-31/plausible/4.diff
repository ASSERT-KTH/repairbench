diff --git a/tmp/e2d261ad-5551-4584-9e1a-c3a4ca33a904_buggy.java b/tmp/2fe64146-4088-494e-a74e-009c1d59470d_fixed.java
index eea9e73..16840e6 100644
--- a/tmp/e2d261ad-5551-4584-9e1a-c3a4ca33a904_buggy.java
+++ b/tmp/2fe64146-4088-494e-a74e-009c1d59470d_fixed.java
@@ -1,41 +1,34 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
-	public static boolean containsAny(CharSequence cs, char[] searchChars) {
+public static boolean containsAny(final CharSequence cs, final char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+    // Build an int[] of code points from the searchChars (grouping any surrogate pairs)
+    int len = searchChars.length;
+    int[] searchCps = new int[len];
+    int searchCount = 0;
+    for (int i = 0; i < len; ) {
+        char c1 = searchChars[i];
+        if (Character.isHighSurrogate(c1) 
+                && i + 1 < len 
+                && Character.isLowSurrogate(searchChars[i + 1])) {
+            // valid surrogate pair
+            searchCps[searchCount++] = Character.toCodePoint(c1, searchChars[i + 1]);
+            i += 2;
+        } else {
+            searchCps[searchCount++] = c1;
+            i++;
+        }
+    }
+    // Scan the input CharSequence by code point
+    int csLen = cs.length();
+    for (int i = 0; i < csLen; ) {
+        int cp = Character.codePointAt(cs, i);
+        for (int j = 0; j < searchCount; j++) {
+            if (searchCps[j] == cp) {
                 return true;
             }
         }
+        i += Character.charCount(cp);
     }
     return false;
 }
\ No newline at end of file
