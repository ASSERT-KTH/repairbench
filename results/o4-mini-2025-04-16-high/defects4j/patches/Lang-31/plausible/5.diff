diff --git a/tmp/478a2227-d57a-4d68-88c4-c4b87ca36fe2_buggy.java b/tmp/7e0590a3-cac9-483c-b2f9-8c173ec49848_fixed.java
index eea9e73..059c821 100644
--- a/tmp/478a2227-d57a-4d68-88c4-c4b87ca36fe2_buggy.java
+++ b/tmp/7e0590a3-cac9-483c-b2f9-8c173ec49848_fixed.java
@@ -1,41 +1,46 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
+    // Build an array of code points from searchChars (grouping surrogate pairs)
+    int[] searchCps = new int[searchLength];
+    int cpCount = 0;
     for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+        char sc = searchChars[j];
+        if (Character.isHighSurrogate(sc) && j + 1 < searchLength) {
+            char sc2 = searchChars[j + 1];
+            if (Character.isLowSurrogate(sc2)) {
+                searchCps[cpCount++] = Character.toCodePoint(sc, sc2);
+                j++;
+                continue;
+            }
+        }
+        searchCps[cpCount++] = sc;
+    }
+    // Scan cs by code point and look for any match
+    for (int i = 0; i < csLength; i++) {
+        char c = cs.charAt(i);
+        if (Character.isHighSurrogate(c) && i + 1 < csLength) {
+            char c2 = cs.charAt(i + 1);
+            if (Character.isLowSurrogate(c2)) {
+                int cp = Character.toCodePoint(c, c2);
+                for (int j = 0; j < cpCount; j++) {
+                    if (searchCps[j] == cp) {
+                        return true;
+                    }
+                }
+                i++; // skip the low‐surrogate
+                continue;
+            }
+        }
+        int cVal = c;
+        for (int j = 0; j < cpCount; j++) {
+            if (searchCps[j] == cVal) {
                 return true;
             }
         }
     }
     return false;
 }
\ No newline at end of file
