diff --git a/tmp/ad7e7598-5674-4410-9577-e13c5275a79f_buggy.java b/tmp/f417ce23-77ea-4163-88ae-904ef0310815_fixed.java
index eea9e73..b149af3 100644
--- a/tmp/ad7e7598-5674-4410-9577-e13c5275a79f_buggy.java
+++ b/tmp/f417ce23-77ea-4163-88ae-904ef0310815_fixed.java
@@ -1,41 +1,48 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+    // Convert the searchChars array into codepoints, so we handle
+    // surrogate pairs as single codepoints
+    int scLen = searchChars.length;
+    int[] searchCps = new int[scLen];
+    int scpCount = 0;
+    for (int i = 0; i < scLen; i++) {
+        char c = searchChars[i];
+        if (Character.isHighSurrogate(c) && i < scLen - 1) {
+            char low = searchChars[i + 1];
+            if (Character.isLowSurrogate(low)) {
+                searchCps[scpCount++] = Character.toCodePoint(c, low);
+                i++;
+                continue;
+            }
+        }
+        searchCps[scpCount++] = c;
+    }
+    // Scan the input CharSequence by codepoint
+    int csLen = cs.length();
+    for (int i = 0; i < csLen; ) {
+        char c = cs.charAt(i);
+        int cp;
+        int inc = 1;
+        if (Character.isHighSurrogate(c) && i < csLen - 1) {
+            char low = cs.charAt(i + 1);
+            if (Character.isLowSurrogate(low)) {
+                cp = Character.toCodePoint(c, low);
+                inc = 2;
+            } else {
+                cp = c;
+            }
+        } else {
+            cp = c;
+        }
+        // Check against all search codepoints
+        for (int j = 0; j < scpCount; j++) {
+            if (searchCps[j] == cp) {
                 return true;
             }
         }
+        i += inc;
     }
     return false;
 }
\ No newline at end of file
