diff --git a/tmp/32c769da-de1e-4aff-b905-6b4fb0cd9899_buggy.java b/tmp/f676082b-44aa-42a8-91fd-9da8194db934_fixed.java
index eea9e73..68fb5b1 100644
--- a/tmp/32c769da-de1e-4aff-b905-6b4fb0cd9899_buggy.java
+++ b/tmp/f676082b-44aa-42a8-91fd-9da8194db934_fixed.java
@@ -1,41 +1,54 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
+    // Decode the searchChars into code points (to handle surrogate pairs)
+    int searchLen = searchChars.length;
+    int codePointCount = 0;
+    for (int i = 0; i < searchLen; ) {
+        char ch = searchChars[i];
+        if (Character.isHighSurrogate(ch)
+            && i + 1 < searchLen
+            && Character.isLowSurrogate(searchChars[i + 1])) {
+            codePointCount++;
+            i += 2;
+        } else {
+            codePointCount++;
+            i++;
+        }
+    }
+    int[] searchCps = new int[codePointCount];
+    for (int i = 0, j = 0; i < searchLen; ) {
+        char ch = searchChars[i];
+        if (Character.isHighSurrogate(ch)
+            && i + 1 < searchLen
+            && Character.isLowSurrogate(searchChars[i + 1])) {
+            searchCps[j++] = Character.toCodePoint(ch, searchChars[i + 1]);
+            i += 2;
+        } else {
+            searchCps[j++] = ch;
+            i++;
+        }
+    }
+    // Scan the input CharSequence by code point
+    int csLen = cs.length();
+    for (int i = 0; i < csLen; ) {
         char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+        int cp;
+        if (Character.isHighSurrogate(ch)
+            && i + 1 < csLen
+            && Character.isLowSurrogate(cs.charAt(i + 1))) {
+            cp = Character.toCodePoint(ch, cs.charAt(i + 1));
+            i += 2;
+        } else {
+            cp = ch;
+            i++;
+        }
+        for (int scp : searchCps) {
+            if (scp == cp) {
                 return true;
             }
         }
     }
     return false;
 }
\ No newline at end of file
