diff --git a/tmp/42ff0e2d-f699-4ee1-9dcf-b74d01af1a89_buggy.java b/tmp/50c38856-a48f-4924-a786-41c4dde1af39_fixed.java
index 30d7266..8c2c546 100644
--- a/tmp/42ff0e2d-f699-4ee1-9dcf-b74d01af1a89_buggy.java
+++ b/tmp/50c38856-a48f-4924-a786-41c4dde1af39_fixed.java
@@ -1,69 +1,64 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+    // Don't traverse constructors or functions with @this or @override.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
+    // Don't traverse functions that are getting lent to a prototype via @lends {X.prototype}.
+    for (Node cur = n.getParent(); cur != null; cur = cur.getParent()) {
+      JSDocInfo info = cur.getJSDocInfo();
+      if (info != null
+          && info.hasLendsName()
+          && info.getLendsName().endsWith(".prototype")) {
+        return false;
+      }
+    }
+
     // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {}; // or
-      // var a = {x: function() {}};
+    // be able to have a @this annotation associated with them.
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN ||
-
           // object literal keys
           pType == Token.STRING ||
           pType == Token.NUMBER)) {
       return false;
     }
-
-      // Don't traverse functions that are getting lent to a prototype.
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
+    //Node rhs = lhs.getNext();
 
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+      // Always traverse the left side of the assignment.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
       if (NodeUtil.isGet(lhs)) {
         if (lhs.getType() == Token.GETPROP &&
             lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
         Node llhs = lhs.getFirstChild();
         if (llhs.getType() == Token.GETPROP &&
             llhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
