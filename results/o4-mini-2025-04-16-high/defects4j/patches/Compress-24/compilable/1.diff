diff --git a/tmp/1de67a63-9ebc-487c-a52f-81676b5237cc_buggy.java b/tmp/e09b14d7-eb1e-45bd-90d7-58002f3aaced_fixed.java
index d9d2789..b2a2c5e 100644
--- a/tmp/1de67a63-9ebc-487c-a52f-81676b5237cc_buggy.java
+++ b/tmp/e09b14d7-eb1e-45bd-90d7-58002f3aaced_fixed.java
@@ -1,73 +1,60 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
+    // If the very first byte is NUL, treat it as a missing field => 0
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
+    /*
+     * Trim trailing NULs and spaces if present.
+     * If the last byte is a valid octal digit, assume there is no trailer
+     * (some implementations use the full buffer for big values).
+     */
     byte trailer = buffer[end - 1];
     if (trailer == 0 || trailer == ' ') {
+        // remove one trailer byte
         end--;
+        // remove any additional trailing NULs/spaces, but leave at least one byte
+        while (start < end - 1) {
+            byte b = buffer[end - 1];
+            if (b == 0 || b == ' ') {
+                end--;
+            } else {
+                break;
+            }
+        }
+    } else if (trailer >= '0' && trailer <= '7') {
+        // no trailer, parse the entire field as octal digits
     } else {
         throw new IllegalArgumentException(
             exceptionMessage(buffer, offset, length, end - 1, trailer));
     }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
-        }
 
+    // Parse octal digits
     for (; start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+        byte current = buffer[start];
+        if (current < '0' || current > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, start, current));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (current - '0');
     }
 
     return result;
 }
\ No newline at end of file
