diff --git a/tmp/41b22d4a-de4c-43b4-a9d7-d9d3843646fe_buggy.java b/tmp/64825b1a-69d8-4bc3-8ea5-8164ccec81ed_fixed.java
index 574b43c..d5701a0 100644
--- a/tmp/41b22d4a-de4c-43b4-a9d7-d9d3843646fe_buggy.java
+++ b/tmp/64825b1a-69d8-4bc3-8ea5-8164ccec81ed_fixed.java
@@ -1,57 +1,68 @@
 /**
  * Method that will construct a regular bean property setter using
  * the given setter method.
  *
  * @return Property constructed, if any; or null to indicate that
  *   there should be no property based on given definitions.
  */
 protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
         BeanDescription beanDesc, BeanPropertyDefinition propDef,
         JavaType propType0)
     throws JsonMappingException
 {
-        // need to ensure method is callable (for non-public)
+    // need to ensure method/field is callable (for non-public)
     AnnotatedMember mutator = propDef.getNonConstructorMutator();
 
     if (ctxt.canOverrideAccessModifiers()) {
-            // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
-            // never needed and attempts may cause problems on some platforms.
-            // !!! NOTE: should be handled better for 2.8 and later
+        // [databind#877]: explicitly prevent forced access to `cause` of Throwable;
+        // never needed (always call initCause()) and attempts may fail under certain SecurityManagers
+        if (!(mutator.getDeclaringClass() == Throwable.class
+              && "cause".equals(propDef.getName()))) {
             mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
         }
+    }
+
     // note: this works since we know there's exactly one argument for methods
-        BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
+    BeanProperty.Std property = new BeanProperty.Std(
+            propDef.getFullName(),
             propType0, propDef.getWrapperName(),
-                beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
+            beanDesc.getClassAnnotations(),
+            mutator, propDef.getMetadata());
+
+    // resolve generic types, annotations, etc
     JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
-        // did type change?
     if (type != propType0) {
         property = property.withType(type);
     }
 
-        // First: does the Method specify the deserializer to use? If so, let's use it.
+    // allow annotation-based override of deserializer
     JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
     type = modifyTypeByAnnotation(ctxt, mutator, type);
     TypeDeserializer typeDeser = type.getTypeHandler();
+
+    // construct the actual SettableBeanProperty
     SettableBeanProperty prop;
     if (mutator instanceof AnnotatedMethod) {
         prop = new MethodProperty(propDef, type, typeDeser,
                 beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
     } else {
         prop = new FieldProperty(propDef, type, typeDeser,
                 beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
     }
+
     if (propDeser != null) {
         prop = prop.withValueDeserializer(propDeser);
     }
-        // need to retain name of managed forward references:
+
+    // handle managed forward references
     AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
     if (ref != null && ref.isManagedReference()) {
         prop.setManagedReferenceName(ref.getName());
     }
+    // handle Object Id
     ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
     if (objectIdInfo != null) {
         prop.setObjectIdInfo(objectIdInfo);
     }
     return prop;
 }
\ No newline at end of file
