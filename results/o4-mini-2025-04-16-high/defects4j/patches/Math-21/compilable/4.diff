diff --git a/tmp/76d487c9-6bf8-45ce-bf8f-c67b7d6430fa_buggy.java b/tmp/a32e7068-0a49-4330-ae84-415fcd1812be_fixed.java
index 6708762..8fca74d 100644
--- a/tmp/76d487c9-6bf8-45ce-bf8f-c67b7d6430fa_buggy.java
+++ b/tmp/a32e7068-0a49-4330-ae84-415fcd1812be_fixed.java
@@ -1,99 +1,91 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
+     * @param small Diagonal elements threshold under which columns are
      *              considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      *            positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
         final double[][] c = matrix.getData();
         final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
+        // Permutation of rows/columns
         int[] index = new int[order];
-        for (int i = 0; i < order; ++i) {
+        for (int i = 0; i < order; i++) {
             index[i] = i;
         }
 
         int r = 0;
-        for (boolean loop = true; loop;) {
+        boolean loop = true;
+        while (loop) {
 
-            // find maximal diagonal element
-            swap[r] = r;
-            for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+            // 1) Pivot selection: find the largest diagonal entry among
+            //    the rows/columns r..order-1
+            int pivot = r;
+            double max = c[index[r]][index[r]];
+            for (int i = r + 1; i < order; i++) {
+                double diag = c[index[i]][index[i]];
+                if (diag > max) {
+                    max = diag;
+                    pivot = i;
                 }
             }
-
-
-            // swap elements
-            if (swap[r] != r) {
+            // 2) Swap the chosen pivot into position r
+            if (pivot != r) {
                 int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+                index[r] = index[pivot];
+                index[pivot] = tmp;
             }
 
-            // check diagonal element
             int ir = index[r];
+            // 3) Check for (near) zero pivot
             if (c[ir][ir] < small) {
-
                 if (r == 0) {
                     throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                 }
-
-                // check remaining diagonal elements
-                for (int i = r; i < order; ++i) {
+                // verify no significantly negative diagonal remains
+                for (int i = r; i < order; i++) {
                     if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
                         throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                     }
                 }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
+                // treat the rest as zero â€” we have our rank
+                r++;
                 loop = false;
-
             } else {
-
-                // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
+                // 4) Perform the Cholesky step on the pivot
+                double sqrt = FastMath.sqrt(c[ir][ir]);
                 b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
-                for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
+                double inv = 1.0 / sqrt;
+                for (int i = r + 1; i < order; i++) {
+                    int ii = index[i];
+                    double e = inv * c[ii][ir];
                     b[i][r] = e;
                     c[ii][ii] -= e * e;
-                    for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                    for (int j = r + 1; j < i; j++) {
+                        int ij = index[j];
+                        double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
                         c[ij][ii] = f;
                     }
                 }
-
-                // prepare next iteration
-                loop = ++r < order;
+                // 5) Move to the next pivot
+                r++;
+                loop = (r < order);
             }
         }
 
-        // build the root matrix
+        // build the root matrix from b and the permutation
         rank = r;
         root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
+        for (int i = 0; i < order; i++) {
+            for (int j = 0; j < r; j++) {
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
-
     }
\ No newline at end of file
