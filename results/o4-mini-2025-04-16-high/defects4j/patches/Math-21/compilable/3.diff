diff --git a/tmp/f02f78c2-1cb2-4a8b-9e88-ddadc7ad73a7_buggy.java b/tmp/b5f61bf1-5a42-43f2-b7db-cd03ed41aa18_fixed.java
index 6708762..f686e7c 100644
--- a/tmp/f02f78c2-1cb2-4a8b-9e88-ddadc7ad73a7_buggy.java
+++ b/tmp/b5f61bf1-5a42-43f2-b7db-cd03ed41aa18_fixed.java
@@ -1,99 +1,84 @@
-    /**
-     * Decompose a symmetric positive semidefinite matrix.
-     *
-     * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
-     * considered to be dependent on previous ones and are discarded.
-     * @exception NonPositiveDefiniteMatrixException if the matrix is not
-     * positive semidefinite.
-     */
 public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
     throws NonPositiveDefiniteMatrixException {
 
     final int order = matrix.getRowDimension();
+    // work on a copy of the data
     final double[][] c = matrix.getData();
+    // b will accumulate the Cholesky factors in the pivoted order
     final double[][] b = new double[order][order];
 
     int[] swap  = new int[order];
     int[] index = new int[order];
     for (int i = 0; i < order; ++i) {
         index[i] = i;
     }
 
     int r = 0;
     for (boolean loop = true; loop; ) {
 
-            // find maximal diagonal element
+        // 1) find the pivot: the largest diagonal element among c[index[r..end]][index[r..end]]
         swap[r] = r;
+        double max = c[index[r]][index[r]];
         for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
+            double di = c[index[i]][index[i]];
+            if (di > max) {
+                max = di;
                 swap[r] = i;
             }
         }
 
-
-            // swap elements
+        // 2) apply the pivot to our index array
         if (swap[r] != r) {
             int tmp = index[r];
             index[r] = index[swap[r]];
             index[swap[r]] = tmp;
         }
 
-            // check diagonal element
+        // 3) inspect the pivoted diagonal
         int ir = index[r];
-            if (c[ir][ir] < small) {
-
+        double pivot = c[ir][ir];
+        if (pivot < small) {
+            // if even the largest remaining diagonal is too small, we're done
             if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
+                throw new NonPositiveDefiniteMatrixException(pivot, ir, small);
             }
-
-                // check remaining diagonal elements
+            // verify no significantly negative diagonals remain
             for (int i = r; i < order; ++i) {
                 if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
                     throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                 }
             }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
+            // close enough to zero: stop here, rank = r
             loop = false;
-
         } else {
-
-                // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+            // 4) compute the r-th column of the factor
+            double s = FastMath.sqrt(pivot);
+            b[r][r] = s;
+            double invS = 1.0 / s;
             for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
+                int ii = index[i];
+                double e = c[ii][ir] * invS;
                 b[i][r] = e;
                 c[ii][ii] -= e * e;
+                // update the remaining submatrix
                 for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                    int ij = index[j];
+                    double f = c[ii][ij] - e * b[j][r];
                     c[ii][ij] = f;
                     c[ij][ii] = f;
                 }
             }
-
-                // prepare next iteration
+            // move to the next pivot
             loop = ++r < order;
         }
     }
 
-        // build the root matrix
+    // 5) build the root matrix of size (order x r)
     rank = r;
     root = MatrixUtils.createRealMatrix(order, r);
     for (int i = 0; i < order; ++i) {
         for (int j = 0; j < r; ++j) {
             root.setEntry(index[i], j, b[i][j]);
         }
     }
-
 }
\ No newline at end of file
