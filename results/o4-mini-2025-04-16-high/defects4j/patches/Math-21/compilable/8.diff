diff --git a/tmp/e419894b-0868-4866-9da5-4d2570c86cb7_buggy.java b/tmp/cb43f829-c8b3-472e-b2cc-80a77ecaf50a_fixed.java
index 6708762..cdd01b4 100644
--- a/tmp/e419894b-0868-4866-9da5-4d2570c86cb7_buggy.java
+++ b/tmp/cb43f829-c8b3-472e-b2cc-80a77ecaf50a_fixed.java
@@ -1,99 +1,89 @@
 /**
  * Decompose a symmetric positive semidefinite matrix.
  *
  * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
+ * @param small Diagonal elements threshold under which columns are
  *              considered to be dependent on previous ones and are discarded.
  * @exception NonPositiveDefiniteMatrixException if the matrix is not
  *            positive semidefinite.
  */
 public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
     throws NonPositiveDefiniteMatrixException {
 
     final int order = matrix.getRowDimension();
     final double[][] c = matrix.getData();
     final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
-        int[] index = new int[order];
-        for (int i = 0; i < order; ++i) {
+    // pivot indices
+    final int[] index = new int[order];
+    for (int i = 0; i < order; i++) {
         index[i] = i;
     }
 
     int r = 0;
-        for (boolean loop = true; loop;) {
-
-            // find maximal diagonal element
-            swap[r] = r;
-            for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+    // pivoted Cholesky iteration
+    while (r < order) {
+        // 1) find the largest remaining diagonal entry
+        int swap = r;
+        double max = c[index[r]][index[r]];
+        for (int i = r + 1; i < order; i++) {
+            double diag = c[index[i]][index[i]];
+            if (diag > max) {
+                max = diag;
+                swap = i;
             }
         }
-
-
-            // swap elements
-            if (swap[r] != r) {
+        // 2) pivot rows/columns
+        if (swap != r) {
             int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+            index[r] = index[swap];
+            index[swap] = tmp;
         }
 
-            // check diagonal element
         int ir = index[r];
+        // 3) check pivot for positive definiteness / semidefiniteness
         if (c[ir][ir] < small) {
-
             if (r == 0) {
                 throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
             }
-
-                // check remaining diagonal elements
-                for (int i = r; i < order; ++i) {
+            // ensure no significantly negative diagonals remain
+            for (int i = r; i < order; i++) {
                 if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                    throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]],
+                                                                 index[i], small);
                 }
             }
+            // all remaining pivots are (near) zero => stop
+            break;
+        }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
-
-            } else {
-
-                // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
-                for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
+        // 4) perform the Cholesky update
+        final double diagSqrt = FastMath.sqrt(c[ir][ir]);
+        b[r][r] = diagSqrt;
+        final double inv = 1.0 / diagSqrt;
+        for (int i = r + 1; i < order; i++) {
+            int ii = index[i];
+            double e = c[ii][ir] * inv;
             b[i][r] = e;
             c[ii][ii] -= e * e;
-                    for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+            for (int j = r + 1; j < i; j++) {
+                int ij = index[j];
+                double f = c[ii][ij] - e * b[j][r];
                 c[ii][ij] = f;
                 c[ij][ii] = f;
             }
         }
 
-                // prepare next iteration
-                loop = ++r < order;
-            }
+        // move to next pivot
+        r++;
     }
 
     // build the root matrix
     rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
+    root = MatrixUtils.createRealMatrix(order, rank);
+    for (int i = 0; i < order; i++) {
+        for (int j = 0; j < rank; j++) {
             root.setEntry(index[i], j, b[i][j]);
         }
     }
-
 }
\ No newline at end of file
