diff --git a/tmp/3f74c8a3-ecbc-4df8-aa3d-08a5b48cc312_buggy.java b/tmp/a977ca34-071a-41ea-97fb-ac779a05f090_fixed.java
index 6708762..06c9bb6 100644
--- a/tmp/3f74c8a3-ecbc-4df8-aa3d-08a5b48cc312_buggy.java
+++ b/tmp/a977ca34-071a-41ea-97fb-ac779a05f090_fixed.java
@@ -1,99 +1,97 @@
 /**
  * Decompose a symmetric positive semidefinite matrix.
  *
  * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
-     * considered to be dependent on previous ones and are discarded.
+ * @param small Diagonal elements threshold under which
+ *              columns are considered to be dependent on
+ *              previous ones and are discarded.
  * @exception NonPositiveDefiniteMatrixException if the matrix is not
  *            positive semidefinite.
  */
 public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
     throws NonPositiveDefiniteMatrixException {
 
     final int order = matrix.getRowDimension();
+    // make a working copy of the data
     final double[][] c = matrix.getData();
+    // will hold the cholesky factor in permuted order
     final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
+    // index will track row/column pivots
     int[] index = new int[order];
-        for (int i = 0; i < order; ++i) {
+    for (int i = 0; i < order; i++) {
         index[i] = i;
     }
 
     int r = 0;
-        for (boolean loop = true; loop;) {
+    boolean loop = true;
+    while (loop) {
 
-            // find maximal diagonal element
-            swap[r] = r;
-            for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+        // 1) find the pivot: the largest diagonal element among
+        //    rows/cols r..order-1
+        int pivot = r;
+        double maxDiag = c[index[r]][index[r]];
+        for (int i = r + 1; i < order; i++) {
+            double dii = c[index[i]][index[i]];
+            if (dii > maxDiag) {
+                maxDiag = dii;
+                pivot = i;
             }
         }
-
-
-            // swap elements
-            if (swap[r] != r) {
+        // 2) swap row/col r and row/col pivot in the index array
+        if (pivot != r) {
             int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+            index[r] = index[pivot];
+            index[pivot] = tmp;
         }
 
-            // check diagonal element
+        // 3) test for positive semidefiniteness
         int ir = index[r];
         if (c[ir][ir] < small) {
-
+            // if even the first pivot is too small, fail
             if (r == 0) {
                 throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
             }
-
-                // check remaining diagonal elements
-                for (int i = r; i < order; ++i) {
+            // check remaining diagonals are not significantly negative
+            for (int i = r; i < order; i++) {
                 if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                    throw new NonPositiveDefiniteMatrixException(
+                        c[index[i]][index[i]], index[i], small);
                 }
             }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
+            // remaining pivots are ~zero: stop, rank = r+1
+            r++;
             loop = false;
-
         } else {
-
-                // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
-                for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
+            // 4) perform the Cholesky step for pivot r
+            double s = FastMath.sqrt(c[ir][ir]);
+            b[r][r] = s;
+            double inv = 1.0 / s;
+            for (int i = r + 1; i < order; i++) {
+                int ii = index[i];
+                double e = c[ii][ir] * inv;
                 b[i][r] = e;
+                // update the Schur complement
                 c[ii][ii] -= e * e;
-                    for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                for (int j = r + 1; j < i; j++) {
+                    int ij = index[j];
+                    double f = c[ii][ij] - e * b[j][r];
                     c[ii][ij] = f;
                     c[ij][ii] = f;
                 }
             }
-
-                // prepare next iteration
-                loop = ++r < order;
+            // move to next pivot
+            r++;
+            loop = (r < order);
         }
     }
 
-        // build the root matrix
+    // build the root matrix in original ordering
     rank = r;
     root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
+    for (int i = 0; i < order; i++) {
+        for (int j = 0; j < r; j++) {
             root.setEntry(index[i], j, b[i][j]);
         }
     }
-
 }
\ No newline at end of file
