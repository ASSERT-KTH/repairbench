diff --git a/tmp/62ee2986-2881-4283-a844-85eaad6684bc_buggy.java b/tmp/8902ac54-0991-4eaa-b472-4e73540315a1_fixed.java
index 1bbc082..7e4d757 100644
--- a/tmp/62ee2986-2881-4283-a844-85eaad6684bc_buggy.java
+++ b/tmp/8902ac54-0991-4eaa-b472-4e73540315a1_fixed.java
@@ -1,36 +1,40 @@
 /**
  * Write an long integer into a buffer as an octal string if this
  * will fit, or as a binary number otherwise.
  * 
  * Uses {@link #formatUnsignedOctalString} to format
  * the value as an octal string with leading zeros.
  * The converted number is followed by a space.
  * 
  * @param value The value to write into the buffer.
  * @param buf The destination buffer.
  * @param offset The starting offset into the buffer.
  * @param length The length of the buffer.
  * @return The updated offset.
  * @throws IllegalArgumentException if the value (and trailer)
  * will not fit in the buffer.
  * @since 1.4
  */
 public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
     // Check whether we are dealing with UID/GID or SIZE field
-        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
+    final long maxAsOctalChar = length == TarConstants.UIDLEN
+            ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
     if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
+    // Otherwise use binary
     if (length < 9) {
         formatLongBinary(value, buf, offset, length, negative);
-        }
+    } else {
         formatBigIntegerBinary(value, buf, offset, length, negative);
+    }
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+    // mark binary format in first byte
+    buf[offset] = (byte) (negative ? 0xFF : 0x80);
     return offset + length;
 }
\ No newline at end of file
