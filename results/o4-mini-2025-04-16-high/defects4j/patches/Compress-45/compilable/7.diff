diff --git a/tmp/4dc1e6bd-6566-44d5-ad17-61fee023a703_buggy.java b/tmp/bd6bea29-7c51-43bd-8e5c-cd614ef116c5_fixed.java
index 1bbc082..5d2160b 100644
--- a/tmp/4dc1e6bd-6566-44d5-ad17-61fee023a703_buggy.java
+++ b/tmp/bd6bea29-7c51-43bd-8e5c-cd614ef116c5_fixed.java
@@ -1,36 +1,28 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
 public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
-        // Check whether we are dealing with UID/GID or SIZE field
-        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
+    // Check whether we are dealing with UID/GID (8 bytes) or SIZE/etc. (12 bytes)
+    final long maxAsOctalChar = length == TarConstants.UIDLEN
+            ? TarConstants.MAXID
+            : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+    if (!negative && value <= maxAsOctalChar) {
+        // It fits as an octal string
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
+    // Otherwise write in binary form:
+    //   use the fast long-based version for small fields
     if (length < 9) {
         formatLongBinary(value, buf, offset, length, negative);
-        }
+    } else {
+        // for larger fields use the BigInteger-based version
         formatBigIntegerBinary(value, buf, offset, length, negative);
+    }
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+    // set the high bit of the first byte to mark “binary” (0x80 for positive,
+    // 0xFF for negative)
+    buf[offset] = (byte) (negative ? 0xFF : 0x80);
     return offset + length;
 }
\ No newline at end of file
