diff --git a/tmp/c62e1919-40ef-4cfa-a7f2-e0ae1294e5b6_buggy.java b/tmp/6eb02a4a-beee-4c3a-82c1-bc053993aa98_fixed.java
index eb9ce9f..8614c8e 100644
--- a/tmp/c62e1919-40ef-4cfa-a7f2-e0ae1294e5b6_buggy.java
+++ b/tmp/6eb02a4a-beee-4c3a-82c1-bc053993aa98_fixed.java
@@ -1,60 +1,62 @@
-    /**
-     * Look for a type declaration on a property assignment
-     * (in an ASSIGN or an object literal key).
-     *
-     * @param info The doc info for this property.
-     * @param lValue The l-value node.
-     * @param rValue The node that {@code n} is being initialized to,
-     *     or {@code null} if this is a stub declaration.
-     */
 private JSType getDeclaredType(String sourceName, JSDocInfo info,
     Node lValue, @Nullable Node rValue) {
+  // 1) If the LHS has its own @type, use that.
   if (info != null && info.hasType()) {
     return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
-          shouldUseFunctionLiteralType(
+
+  // 2) Otherwise if the RHS (initializer) carries a @type, use that.
+  } else if (rValue != null
+      && rValue.getJSDocInfo() != null
+      && rValue.getJSDocInfo().hasType()) {
+    return getDeclaredTypeInAnnotation(
+        sourceName, lValue, rValue.getJSDocInfo());
+
+  // 3) Otherwise if it's a function literal and we should
+  //    use its literal type, grab that.
+  } else if (rValue != null && rValue.isFunction()
+      && shouldUseFunctionLiteralType(
           JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
     return rValue.getJSType();
+
+  // 4) Otherwise fall back to various JSDocInfo flags on the LHS.
   } else if (info != null) {
     if (info.hasEnumParameterType()) {
       if (rValue != null && rValue.isObjectLit()) {
         return rValue.getJSType();
       } else {
         return createEnumTypeFromNodes(
             rValue, lValue.getQualifiedName(), info, lValue);
       }
     } else if (info.isConstructor() || info.isInterface()) {
       return createFunctionTypeFromNodes(
           rValue, lValue.getQualifiedName(), info, lValue);
     } else {
-          // Check if this is constant, and if it has a known type.
+      // Check if this is a @const and the initializer has a known type.
       if (info.isConstant()) {
-            JSType knownType = null;
         if (rValue != null) {
+          // If the init already has a concrete type, use it.
           if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
             return rValue.getJSType();
-              } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+          }
+          // Or handle the special `var x = x || TYPE;` idiom.
+          if (rValue.isOr()) {
             Node firstClause = rValue.getFirstChild();
             Node secondClause = firstClause.getNext();
             boolean namesMatch = firstClause.isName()
                 && lValue.isName()
                 && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
+            if (namesMatch
+                && secondClause.getJSType() != null
                 && !secondClause.getJSType().isUnknownType()) {
               return secondClause.getJSType();
             }
           }
         }
       }
     }
   }
 
+  // 5) As a last resort, re-use whatever (possibly empty) @type
+  //    was on the LHS.
   return getDeclaredTypeInAnnotation(sourceName, lValue, info);
 }
\ No newline at end of file
