diff --git a/tmp/4133f038-59ce-4ab5-9810-3d0337cfaab2_buggy.java b/tmp/47d3fdb3-ff93-46fe-b4be-16d5a28b5b29_fixed.java
index eb9ce9f..69082ff 100644
--- a/tmp/4133f038-59ce-4ab5-9810-3d0337cfaab2_buggy.java
+++ b/tmp/47d3fdb3-ff93-46fe-b4be-16d5a28b5b29_fixed.java
@@ -1,60 +1,71 @@
 /**
  * Look for a type declaration on a property assignment
  * (in an ASSIGN or an object literal key).
  *
  * @param info The doc info for this property.
  * @param lValue The l-value node.
  * @param rValue The node that {@code n} is being initialized to,
  *     or {@code null} if this is a stub declaration.
  */
 private JSType getDeclaredType(String sourceName, JSDocInfo info,
     Node lValue, @Nullable Node rValue) {
+  // 1) If the l-value itself has an explicit @type, use it.
   if (info != null && info.hasType()) {
     return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
-          shouldUseFunctionLiteralType(
+  }
+
+  // 2) Otherwise, if the right-hand side has an inline @type cast, use that.
+  if (rValue != null) {
+    JSDocInfo rvInfo = rValue.getJSDocInfo();
+    if (rvInfo != null && rvInfo.hasType()) {
+      return getDeclaredTypeInAnnotation(sourceName, lValue, rvInfo);
+    }
+  }
+
+  // 3) If it's a function literal and we are allowed to use its literal type,
+  //    do so.
+  if (rValue != null && rValue.isFunction()
+      && shouldUseFunctionLiteralType(
           JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
     return rValue.getJSType();
-      } else if (info != null) {
+  }
+
+  // 4) Otherwise fall back to handling enums, ctors, interfaces, or consts.
+  if (info != null) {
     if (info.hasEnumParameterType()) {
       if (rValue != null && rValue.isObjectLit()) {
         return rValue.getJSType();
       } else {
         return createEnumTypeFromNodes(
             rValue, lValue.getQualifiedName(), info, lValue);
       }
     } else if (info.isConstructor() || info.isInterface()) {
       return createFunctionTypeFromNodes(
           rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
+    } else if (info.isConstant()) {
       if (rValue != null) {
+        // If the RHS already has a non-unknown type, use it.
         if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
           return rValue.getJSType();
-              } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+        }
+        // Check for the idiom: var x = x || TYPE;
+        if (rValue.isOr()) {
           Node firstClause = rValue.getFirstChild();
           Node secondClause = firstClause.getNext();
           boolean namesMatch = firstClause.isName()
               && lValue.isName()
               && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
+          if (namesMatch
+              && secondClause.getJSType() != null
               && !secondClause.getJSType().isUnknownType()) {
             return secondClause.getJSType();
           }
         }
       }
     }
   }
-      }
 
+  // 5) Default: if we saw no usable RHS type or explicit @type, defer to any
+  //    @type on the declaration itself (may be null).
   return getDeclaredTypeInAnnotation(sourceName, lValue, info);
 }
\ No newline at end of file
