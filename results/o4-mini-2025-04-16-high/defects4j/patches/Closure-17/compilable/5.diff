diff --git a/tmp/0ac53650-7c14-40b8-9233-599c796846d6_buggy.java b/tmp/eb478f55-999b-48c6-810b-509fc8bc1fd7_fixed.java
index eb9ce9f..6eb646c 100644
--- a/tmp/0ac53650-7c14-40b8-9233-599c796846d6_buggy.java
+++ b/tmp/eb478f55-999b-48c6-810b-509fc8bc1fd7_fixed.java
@@ -1,60 +1,76 @@
 /**
  * Look for a type declaration on a property assignment
  * (in an ASSIGN or an object literal key).
  *
  * @param info The doc info for this property.
  * @param lValue The l-value node.
  * @param rValue The node that {@code n} is being initialized to,
  *     or {@code null} if this is a stub declaration.
  */
-    private JSType getDeclaredType(String sourceName, JSDocInfo info,
-        Node lValue, @Nullable Node rValue) {
+private JSType getDeclaredType(
+    String sourceName, JSDocInfo info, Node lValue, @Nullable Node rValue) {
+
+  // 1) If the property itself has an explicit @type, use that.
   if (info != null && info.hasType()) {
     return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
-          shouldUseFunctionLiteralType(
+  }
+
+  // 2) If the initializer has its own @type (e.g. a cast on the RHS),
+  //    honor that before inferring anything else.
+  if (rValue != null) {
+    JSDocInfo rInfo = rValue.getJSDocInfo();
+    if (rInfo != null && rInfo.hasType()) {
+      return getDeclaredTypeInAnnotation(sourceName, lValue, rInfo);
+    }
+  }
+
+  // 3) If we're assigning a function literal and it makes sense to use its
+  //    literal type, do so.
+  if (rValue != null && rValue.isFunction()
+      && shouldUseFunctionLiteralType(
             JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
     return rValue.getJSType();
-      } else if (info != null) {
+  }
+
+  // 4) Otherwise, if we have any JSDoc on the property at all, handle
+  //    enums, constructors, interfaces, or constants specially.
+  if (info != null) {
     if (info.hasEnumParameterType()) {
       if (rValue != null && rValue.isObjectLit()) {
         return rValue.getJSType();
       } else {
         return createEnumTypeFromNodes(
             rValue, lValue.getQualifiedName(), info, lValue);
       }
     } else if (info.isConstructor() || info.isInterface()) {
       return createFunctionTypeFromNodes(
           rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
+    } else if (info.isConstant()) {
       if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
-                return rValue.getJSType();
-              } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
-                Node firstClause = rValue.getFirstChild();
-                Node secondClause = firstClause.getNext();
-                boolean namesMatch = firstClause.isName()
+        // If the right-hand side already has a meaningful type, use it.
+        JSType rhsType = rValue.getJSType();
+        if (rhsType != null && !rhsType.isUnknownType()) {
+          return rhsType;
+        }
+        // Special "x = x || TYPE" constant initialization idiom.
+        if (rValue.isOr()) {
+          Node first = rValue.getFirstChild();
+          Node second = first.getNext();
+          boolean sameName =
+              first.isName()
               && lValue.isName()
-                    && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
-                    && !secondClause.getJSType().isUnknownType()) {
-                  return secondClause.getJSType();
+              && first.getString().equals(lValue.getString());
+          if (sameName) {
+            JSType secondType = second.getJSType();
+            if (secondType != null && !secondType.isUnknownType()) {
+              return secondType;
             }
           }
         }
       }
     }
   }
 
+  // 5) Fallback: re-use whatever type annotation (if any) is on the property.
   return getDeclaredTypeInAnnotation(sourceName, lValue, info);
 }
\ No newline at end of file
