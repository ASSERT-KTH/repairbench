diff --git a/tmp/1df0f739-7b7d-45db-b3d7-872c1766762a_buggy.java b/tmp/c802efbb-2495-48b6-a7f8-9fa3ec207cd0_fixed.java
index 1530b34..6ebf560 100644
--- a/tmp/1df0f739-7b7d-45db-b3d7-872c1766762a_buggy.java
+++ b/tmp/c802efbb-2495-48b6-a7f8-9fa3ec207cd0_fixed.java
@@ -1,23 +1,32 @@
 /**
  * Declares all of a function's arguments.
  */
 private void declareArguments(Node functionNode) {
+  // The AST children are: FUNCTION -> name -> params -> body
   Node astParameters = functionNode.getFirstChild().getNext();
+  // We don't actually use the body here, but keep for symmetry with the old code.
+  @SuppressWarnings("unused")
   Node body = astParameters.getNext();
+
   FunctionType functionType = (FunctionType) functionNode.getJSType();
-      if (functionType != null) {
-        Node jsDocParameters = functionType.getParametersNode();
-        if (jsDocParameters != null) {
-          Node jsDocParameter = jsDocParameters.getFirstChild();
+  Node jsDocParameters = (functionType == null)
+      ? null
+      : functionType.getParametersNode();
+  Node jsDocParameter = (jsDocParameters == null)
+      ? null
+      : jsDocParameters.getFirstChild();
+
+  // Always declare each AST parameter.  If there is a matching JSDoc
+  // param node, use its JSType and mark it as an explicit (declared) type;
+  // otherwise give it a null type (to be inferred later).
   for (Node astParameter : astParameters.children()) {
+    JSType paramType = null;
+    boolean inferred = true;
     if (jsDocParameter != null) {
-              defineSlot(astParameter, functionNode,
-                  jsDocParameter.getJSType(), true);
+      paramType = jsDocParameter.getJSType();
       jsDocParameter = jsDocParameter.getNext();
-            } else {
-              defineSlot(astParameter, functionNode, null, true);
+      inferred = false;  // this type came from @param, not from inference
     }
+    defineSlot(astParameter, functionNode, paramType, inferred);
   }
 }
\ No newline at end of file
-      }
-    } // end declareArguments
