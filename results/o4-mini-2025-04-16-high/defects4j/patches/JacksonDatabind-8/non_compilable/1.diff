diff --git a/tmp/097854b5-25d8-4dd1-a664-309f06d4aca7_buggy.java b/tmp/9a95359b-87e5-4384-a7a3-50bcc304d674_fixed.java
index c9da1b7..45c300e 100644
--- a/tmp/097854b5-25d8-4dd1-a664-309f06d4aca7_buggy.java
+++ b/tmp/9a95359b-87e5-4384-a7a3-50bcc304d674_fixed.java
@@ -1,33 +1,33 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+@Override
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
+        // [databind#667]: may see the very same underlying constructor/method twice (e.g. via mix‐ins);
+        // if so, just merge explicitness and maybe replace the wrapper, but do NOT error
+        if (oldOne.getAnnotated() == newOne.getAnnotated()) {
+            if (explicit) {
+                _explicitCreators |= mask;
+                _creators[typeIndex] = _fixAccess(newOne);
+            }
             return;
         }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+        // already had an explicitly marked one? if so, and new is not explicit, skip
+        if (((_explicitCreators & mask) != 0) && !explicit) {
+            return;
         }
-
-            // one more thing: ok to override in sub-class
+        // otherwise, if the two wrappers are of same kind, that's a genuine conflict
         if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
             throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                    + " creators: already had"
+                    + (((_explicitCreators & mask) != 0) ? " explicitly marked " : " ")
+                    + oldOne + ", encountered " + newOne);
         }
+        // else: different kinds of creators (e.g. sub-class override), allow fall-through
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
