diff --git a/tmp/469edafd-a433-4ca3-b110-8cb600cf73f7_buggy.java b/tmp/608c6d28-f9a0-4c09-ae9e-2bc00b29c774_fixed.java
index c9da1b7..cdae600 100644
--- a/tmp/469edafd-a433-4ca3-b110-8cb600cf73f7_buggy.java
+++ b/tmp/608c6d28-f9a0-4c09-ae9e-2bc00b29c774_fixed.java
@@ -1,33 +1,39 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
+        boolean oldExplicit = (_explicitCreators & mask) != 0;
+        // if we already had an explicit creator, ignore this one if it isn't explicit
+        if (oldExplicit && !explicit) {
             return;
         }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+        // if neither old nor new is explicit, try to resolve by parameter specificity
+        if (!oldExplicit && !explicit) {
+            if (oldOne.getParameterCount() == 1 && newOne.getParameterCount() == 1) {
+                Class<?> oldType = oldOne.getRawParameterType(0);
+                Class<?> newType = newOne.getRawParameterType(0);
+                if (oldType != null && newType != null) {
+                    // new is subtype of old -> override
+                    if (oldType.isAssignableFrom(newType) && !oldType.equals(newType)) {
+                        // ok, let new replace old
+                    }
+                    // new is supertype of old -> keep old
+                    else if (newType.isAssignableFrom(oldType) && !oldType.equals(newType)) {
+                        return;
+                    }
+                    // otherwise fall through to error
+                }
             }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
+        // conflict (either both explicit or no clear subtype relation)
+        throw new IllegalArgumentException("Conflicting "
+                + TYPE_DESCS[typeIndex]
+                + " creators: already had " + oldOne
+                + ", encountered " + newOne);
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
