diff --git a/tmp/528bbbfb-4058-4e0a-a898-c5c2ea425304_buggy.java b/tmp/ed640bc6-2fce-4642-b32e-5c5e6d4f4595_fixed.java
index c9da1b7..ca8b687 100644
--- a/tmp/528bbbfb-4058-4e0a-a898-c5c2ea425304_buggy.java
+++ b/tmp/ed640bc6-2fce-4642-b32e-5c5e6d4f4595_fixed.java
@@ -1,33 +1,44 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        // [databind#667] – if this is literally the same constructor/factory, just skip it
+        if (oldOne.getAnnotated().equals(newOne.getAnnotated())) {
+            // if the new one is explicit, carry over the flag and replace the wrapper
+            if (explicit) {
+                _explicitCreators |= mask;
+                _creators[typeIndex] = _fixAccess(newOne);
+            }
+            return;
+        }
+        // already had an explicitly marked one?
+        if ((_explicitCreators & mask) != 0) {
+            // if new one isn't explicit, keep the existing
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+            // otherwise both explicit: conflict check below
         }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+        // one more thing: ok to override in sub‐class
+        Class<?> oldDecl = oldOne.getDeclaringClass();
+        Class<?> newDecl = newOne.getDeclaringClass();
+        if (oldDecl != newDecl) {
+            if (oldDecl.isAssignableFrom(newDecl)) {
+                // newOne is in a subclass of oldOne's declaring class: allow override
+            } else if (newDecl.isAssignableFrom(oldDecl)) {
+                // newOne is in a superclass: keep old
+                return;
+            }
+        } else {
+            // same declaring class but different member: real conflict
             throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                    + " creators: already had explicitly marked " + oldOne
+                    + ", encountered " + newOne);
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
