diff --git a/tmp/9c6837b0-add7-4e17-a83c-bcd22d6b9ba7_buggy.java b/tmp/8b34f8f5-b79d-48e6-8ec9-867069451e87_fixed.java
index c9da1b7..240ac50 100644
--- a/tmp/9c6837b0-add7-4e17-a83c-bcd22d6b9ba7_buggy.java
+++ b/tmp/8b34f8f5-b79d-48e6-8ec9-867069451e87_fixed.java
@@ -1,33 +1,48 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
-
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
         }
-
+        // avoid duplicate for same underlying element (e.g. mix-in)
+        if (oldOne.getAnnotated() == newOne.getAnnotated()) {
+            return;
+        }
+        // handle overloaded non-explicit single-arg creators
+        // (for example StringBuilder(CharSequence) vs StringBuilder(String))
+        if (!explicit && (_explicitCreators & mask) == 0
+                && oldOne.getParameterCount() == 1
+                && newOne.getParameterCount() == 1) {
+            Class<?> oldType = oldOne.getRawParameterType(0);
+            Class<?> newType = newOne.getRawParameterType(0);
+            if (oldType != newType) {
+                if (oldType.isAssignableFrom(newType)) {
+                    // new is more specific: override old
+                    /* fall through to replacement */
+                } else if (newType.isAssignableFrom(oldType)) {
+                    // old is more specific: keep old
+                    return;
+                }
+            }
+        }
         // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
             // [databind#667]: avoid one particular class of bogus problems
-
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                     +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
