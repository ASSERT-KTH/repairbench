diff --git a/tmp/9ded3838-c8ba-4925-b444-6d1a363e6cc2_buggy.java b/tmp/665cbe42-f19a-4874-9bb5-2456b96d7b8f_fixed.java
index c9da1b7..193d819 100644
--- a/tmp/9ded3838-c8ba-4925-b444-6d1a363e6cc2_buggy.java
+++ b/tmp/665cbe42-f19a-4874-9bb5-2456b96d7b8f_fixed.java
@@ -1,33 +1,44 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
+        boolean oldExplicit = (_explicitCreators & mask) != 0;
+        // If we already had an explicit creator, ignore a non-explicit new one:
+        if (oldExplicit && !explicit) {
             return;
         }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+        // If neither is explicit, try to disambiguate by parameter type specificity
+        if (!oldExplicit && !explicit) {
+            // only makes sense for single-arg creators
+            if (oldOne.getParameterCount() == 1 && newOne.getParameterCount() == 1) {
+                Class<?> oldType = oldOne.getRawParameterType(0);
+                Class<?> newType = newOne.getRawParameterType(0);
+                if (oldType != null && newType != null && oldType != newType) {
+                    if (oldType.isAssignableFrom(newType)) {
+                        // new is more specific -> accept newOne
+                    } else if (newType.isAssignableFrom(oldType)) {
+                        // old is more specific -> keep oldOne
+                        return;
+                    }
+                }
+            }
+            // if ambiguous, fall through to conflict below
+        }
+        // If new is explicit and old not, allow override:
+        else if (!oldExplicit && explicit) {
+            // accept newOne
         }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+        // Otherwise (both explicit, or ambiguous), error out:
+        else {
+            throw new IllegalArgumentException("Conflicting "
+                + TYPE_DESCS[typeIndex]
+                + " creators: already had explicitly marked "
+                + oldOne + ", encountered " + newOne);
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
