diff --git a/tmp/9f5036c1-f254-4e1e-b22d-93a2bb7f2d7b_buggy.java b/tmp/14aaf7e6-b4fb-4867-825d-6e3202e7a95c_fixed.java
index c9da1b7..15da796 100644
--- a/tmp/9f5036c1-f254-4e1e-b22d-93a2bb7f2d7b_buggy.java
+++ b/tmp/14aaf7e6-b4fb-4867-825d-6e3202e7a95c_fixed.java
@@ -1,33 +1,46 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
+        if ((_explicitCreators & mask) != 0) {
+            // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
         }
-
         // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // same underlying element? just skip
+            if (oldOne.getAnnotated().equals(newOne.getAnnotated())) {
+                return;
+            }
+            // if single-arg creators, pick the more specific parameter type
+            if (oldOne.getParameterCount() == 1 && newOne.getParameterCount() == 1) {
+                Class<?> oldType = oldOne.getRawParameterType(0);
+                Class<?> newType = newOne.getRawParameterType(0);
+                if (oldType != newType) {
+                    if (oldType.isAssignableFrom(newType)) {
+                        // new is more specific -> override old
+                        // fall through to replace
+                    } else if (newType.isAssignableFrom(oldType)) {
+                        // old is more specific -> keep old
+                        return;
+                    }
+                }
+            }
+            // otherwise conflict
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                     +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
