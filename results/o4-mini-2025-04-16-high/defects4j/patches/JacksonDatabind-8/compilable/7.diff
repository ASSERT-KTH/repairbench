diff --git a/tmp/c7171fb3-c8f6-4b1a-be39-b444bff4587f_buggy.java b/tmp/cca4d2cd-3c6c-4624-9859-e60e4b21978b_fixed.java
index c9da1b7..bf6eae1 100644
--- a/tmp/c7171fb3-c8f6-4b1a-be39-b444bff4587f_buggy.java
+++ b/tmp/cca4d2cd-3c6c-4624-9859-e60e4b21978b_fixed.java
@@ -1,33 +1,48 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
+        boolean oldExplicit = (_explicitCreators & mask) != 0;
+        // if we already have an explicit creator and the new one isn't explicit, skip it
+        if (oldExplicit && !explicit) {
+            return;
+        }
+        // if neither old nor new is explicit, choose the one with the more specific single-arg type
+        if (!oldExplicit && !explicit) {
+            int oldCount = oldOne.getParameterCount();
+            int newCount = newOne.getParameterCount();
+            if (oldCount == 1 && newCount == 1) {
+                Class<?> oldParam = oldOne.getRawParameterType(0);
+                Class<?> newParam = newOne.getRawParameterType(0);
+                if (oldParam != newParam) {
+                    if (oldParam.isAssignableFrom(newParam)) {
+                        // newParam is more specific: fall through to override
+                    } else if (newParam.isAssignableFrom(oldParam)) {
+                        // oldParam is more specific: keep old creator
+                        return;
+                    } else {
+                        // types unrelated: keep old creator
+                        return;
+                    }
+                } else {
+                    // exactly same parameter type: duplicate, skip new
+                    return;
+                }
+            } else {
+                // not a single-arg creator: skip new
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
         }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+        // if both are explicit, that's a real conflict
+        if (oldExplicit && explicit) {
             throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                     + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
+        // otherwise (new explicit overriding old implicit), fall through
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
