diff --git a/tmp/a0ffd704-b45e-4280-8a38-2202d3fa61e6_buggy.java b/tmp/9ca1b4cf-d519-4ae2-92a1-d4e24c07dff3_fixed.java
index c9da1b7..834faa7 100644
--- a/tmp/a0ffd704-b45e-4280-8a38-2202d3fa61e6_buggy.java
+++ b/tmp/9ca1b4cf-d519-4ae2-92a1-d4e24c07dff3_fixed.java
@@ -1,33 +1,54 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
+        boolean oldExplicit = (_explicitCreators & mask) != 0;
+        // if we already had an explicit creator, ignore a non-explicit one
+        if (oldExplicit && !explicit) {
             return;
         }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+        // if both are explicit or both are implicit, try to resolve by parameter‐type specificity
+        if (oldExplicit == explicit) {
+            java.lang.reflect.Member m1 = oldOne.getMember();
+            java.lang.reflect.Member m2 = newOne.getMember();
+            Class<?> cls1 = null, cls2 = null;
+            if (m1 instanceof java.lang.reflect.Method && m2 instanceof java.lang.reflect.Method) {
+                java.lang.reflect.Method md1 = (java.lang.reflect.Method) m1;
+                java.lang.reflect.Method md2 = (java.lang.reflect.Method) m2;
+                if (md1.getParameterCount() == 1 && md2.getParameterCount() == 1) {
+                    cls1 = md1.getParameterTypes()[0];
+                    cls2 = md2.getParameterTypes()[0];
                 }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            } else if (m1 instanceof java.lang.reflect.Constructor && m2 instanceof java.lang.reflect.Constructor) {
+                java.lang.reflect.Constructor<?> ct1 = (java.lang.reflect.Constructor<?>) m1;
+                java.lang.reflect.Constructor<?> ct2 = (java.lang.reflect.Constructor<?>) m2;
+                if (ct1.getParameterCount() == 1 && ct2.getParameterCount() == 1) {
+                    cls1 = ct1.getParameterTypes()[0];
+                    cls2 = ct2.getParameterTypes()[0];
+                }
+            }
+            if (cls1 != null && cls2 != null) {
+                if (cls1.isAssignableFrom(cls2)) {
+                    // new parameter type more specific -> override oldOne
+                } else if (cls2.isAssignableFrom(cls1)) {
+                    // old parameter type more specific -> keep oldOne
+                    return;
+                } else {
+                    // ambiguous -> error
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
                 }
+            } else {
+                // not a single-param case we can resolve -> error
+                throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                    +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+            }
+        }
+        // else: old was implicit and new is explicit, so fall through and override
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
