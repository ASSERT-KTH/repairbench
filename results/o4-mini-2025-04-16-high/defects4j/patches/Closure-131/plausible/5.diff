diff --git a/tmp/be4a1c26-0b72-49f8-b2b3-3c474d9fb165_buggy.java b/tmp/1c4c9bb0-d985-4ec0-87ce-18cc4e1ee278_fixed.java
index 19fe1b4..1a1d219 100644
--- a/tmp/be4a1c26-0b72-49f8-b2b3-3c474d9fb165_buggy.java
+++ b/tmp/1c4c9bb0-d985-4ec0-87ce-18cc4e1ee278_fixed.java
@@ -1,17 +1,36 @@
 public static boolean isJSIdentifier(String s) {
     int length = s.length();
-
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+    if (length == 0) {
         return false;
     }
-
+    // First character must be ASCII letter, '$' or '_'
+    char c = s.charAt(0);
+    if (!(c == '$' || c == '_' ||
+          (c >= 'A' && c <= 'Z') ||
+          (c >= 'a' && c <= 'z'))) {
+        return false;
+    }
+    // Subsequent characters may also be ASCII digits
     for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+        c = s.charAt(i);
+        if (!(c == '$' || c == '_' ||
+              (c >= 'A' && c <= 'Z') ||
+              (c >= 'a' && c <= 'z') ||
+              (c >= '0' && c <= '9'))) {
             return false;
         }
     }
-
+    // Reject JS reserved words (we don't convert these)
+    if ("break".equals(s)      || "case".equals(s)     || "catch".equals(s)    ||
+        "continue".equals(s)   || "default".equals(s)  || "delete".equals(s)   ||
+        "do".equals(s)         || "else".equals(s)     || "finally".equals(s)  ||
+        "for".equals(s)        || "function".equals(s) || "if".equals(s)       ||
+        "in".equals(s)         || "instanceof".equals(s)|| "new".equals(s)     ||
+        "return".equals(s)     || "switch".equals(s)   || "this".equals(s)     ||
+        "throw".equals(s)      || "try".equals(s)      || "typeof".equals(s)   ||
+        "var".equals(s)        || "void".equals(s)     || "while".equals(s)    ||
+        "with".equals(s)) {
+      return false;
+    }
     return true;
 }
\ No newline at end of file
