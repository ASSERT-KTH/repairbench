diff --git a/tmp/d0f5241e-6ab4-45d9-8e6d-df030731ad3e_buggy.java b/tmp/798e507e-4ae6-4cd8-a9fc-d6122406286c_fixed.java
index 19fe1b4..fa429df 100644
--- a/tmp/d0f5241e-6ab4-45d9-8e6d-df030731ad3e_buggy.java
+++ b/tmp/798e507e-4ae6-4cd8-a9fc-d6122406286c_fixed.java
@@ -1,17 +1,49 @@
 public static boolean isJSIdentifier(String s) {
   int length = s.length();
 
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+  // must be non-empty and start with ASCII letter, _ or $
+  if (length == 0) {
+    return false;
+  }
+  char first = s.charAt(0);
+  if (!(first == '$'
+        || first == '_'
+        || (first >= 'A' && first <= 'Z')
+        || (first >= 'a' && first <= 'z'))) {
     return false;
   }
 
+  // subsequent chars may be ASCII letter, digit, _ or $
   for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+    char c = s.charAt(i);
+    if (!(c == '$'
+          || c == '_'
+          || (c >= 'A' && c <= 'Z')
+          || (c >= 'a' && c <= 'z')
+          || (c >= '0' && c <= '9'))) {
+      return false;
+    }
+  }
+
+  // disallow JavaScript keywords, future reserved words and literal tokens
+  String[] reserved = {
+    "break", "case", "catch", "continue", "debugger", "default", "delete", "do",
+    "else", "finally", "for", "function", "if", "in", "instanceof", "new",
+    "return", "switch", "this", "throw", "try", "typeof", "var", "void",
+    "while", "with",
+    // ES5+ future reserved
+    "class", "const", "enum", "export", "extends", "import", "super",
+    // strict mode reserved
+    "implements", "interface", "let", "package", "private", "protected",
+    "public", "static", "yield",
+    // literals
+    "null", "true", "false"
+  };
+  for (String r : reserved) {
+    if (r.equals(s)) {
       return false;
     }
   }
 
   return true;
 }
\ No newline at end of file
