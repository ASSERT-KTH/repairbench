diff --git a/tmp/04cefc5d-70c1-470d-ac52-5fadc3f28f5b_buggy.java b/tmp/e14eb805-8aa7-4db1-af9c-5a7372be7a66_fixed.java
index 602226b..f4e369b 100644
--- a/tmp/04cefc5d-70c1-470d-ac52-5fadc3f28f5b_buggy.java
+++ b/tmp/e14eb805-8aa7-4db1-af9c-5a7372be7a66_fixed.java
@@ -1,26 +1,28 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
         // Bleeding functions already get a BAD_PARAMETERS error, so just
         // do nothing.
         // Parameters of the scope function also get a BAD_PARAMETERS
         // error.
       } else {
         // TODO(robbyw): Support using locals for private variables.
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
+    } else if (parent.isFunction()) {
+      // Disallow function declarations in goog.scope
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
