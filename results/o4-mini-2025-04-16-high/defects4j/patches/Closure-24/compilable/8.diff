diff --git a/tmp/51865fad-a0b0-48b6-a7cc-de17b774daa5_buggy.java b/tmp/ea39a14d-1364-4427-b920-c08e8a99ec94_fixed.java
index 602226b..5692f4e 100644
--- a/tmp/51865fad-a0b0-48b6-a7cc-de17b774daa5_buggy.java
+++ b/tmp/ea39a14d-1364-4427-b920-c08e8a99ec94_fixed.java
@@ -1,26 +1,26 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
+    // Handle var declarations.
     if (parent.isVar()) {
+      // Only qualified‐name initializers become aliases.
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
       } else {
-          // TODO(robbyw): Support using locals for private variables.
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
+    // Also report plain function declarations as non‐alias locals.
+    else if (parent.isFunction()) {
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+    }
   }
 }
\ No newline at end of file
