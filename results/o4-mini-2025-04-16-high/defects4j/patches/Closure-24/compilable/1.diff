diff --git a/tmp/e6918725-2a5c-44bd-a021-88202e206d15_buggy.java b/tmp/88149248-e431-4cda-a2a5-fcb909f27a72_fixed.java
index 602226b..b0cc960 100644
--- a/tmp/e6918725-2a5c-44bd-a021-88202e206d15_buggy.java
+++ b/tmp/88149248-e431-4cda-a2a5-fcb909f27a72_fixed.java
@@ -1,26 +1,25 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
+    if (parent != null && parent.isVar()) {
+      // var X = ...;
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+        // This is an alias for a qualified name.
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
       } else {
-          // TODO(robbyw): Support using locals for private variables.
+        // Non‐alias local variable in goog.scope → error.
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
+    } else if (parent != null && parent.isFunction()) {
+      // function f() {} inside goog.scope → also a non‐alias local.
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
