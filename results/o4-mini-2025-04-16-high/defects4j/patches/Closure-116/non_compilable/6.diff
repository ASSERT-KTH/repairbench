diff --git a/tmp/a1d48c51-f465-4bbe-accb-b0323d1eb099_buggy.java b/tmp/67784380-71f4-4359-a145-6ee0e2804d09_fixed.java
index 233a867..c73212c 100644
--- a/tmp/a1d48c51-f465-4bbe-accb-b0323d1eb099_buggy.java
+++ b/tmp/67784380-71f4-4359-a145-6ee0e2804d09_fixed.java
@@ -1,73 +1,91 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
+  // The function body block.
   Node block = fnNode.getLastChild();
 
+  // Collect the parameter names.
+  java.util.Set<String> paramNames = new java.util.HashSet<>();
+  for (Node p = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+       p != null; p = p.getNext()) {
+    paramNames.add(p.getString());
+  }
+
+  // Walk the entire body and reject if there is any CALL or NEW,
+  // or any assignment whose target is not a property of one of the parameters.
+  java.util.List<Node> worklist = new java.util.ArrayList<>();
+  worklist.add(block);
+  for (int i = 0; i < worklist.size(); i++) {
+    Node n = worklist.get(i);
+    if (n.isCall() || n.isNew()) {
+      return CanInlineResult.NO;
+    }
+    if (n.isAssign()) {
+      Node lhs = n.getFirstChild();
+      if (lhs.isGetProp() || lhs.isGetElem()) {
+        Node obj = lhs.getFirstChild();
+        // Only allow assignments to a parameter's property.
+        if (!obj.isName() || !paramNames.contains(obj.getString())) {
+          return CanInlineResult.NO;
+        }
+      } else {
+        // Disallow any other kind of assignment in a direct inline.
+        return CanInlineResult.NO;
+      }
+    }
+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+      worklist.add(c);
+    }
+  }
+
+  // ------------------------------------------------------------------
+  // Now check the usual argument‐side‐effects criteria:
 
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // Handle foo.call(thisObj, ...) calls specially.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
+      // We only support inlining if the "this" is explicit.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
+      // ".apply" calls should not reach here.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+  // Iterate parameters vs. call arguments.
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
+        // If the call argument has mutable effects, the parameter
+        // must only be referenced once in the body.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
             && NodeUtil.getNameReferenceCount(
                 block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
       }
-
-        // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+    // Even if there's no matching parameter, we must ensure
+    // that no argument has any side-effects (so we don't drop them).
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
