diff --git a/tmp/ea73f0ca-0b2e-4f47-ad8c-381f86035e8b_buggy.java b/tmp/1e9cba5d-cd11-41bc-9816-90c42591b96b_fixed.java
index 233a867..b69a9cf 100644
--- a/tmp/ea73f0ca-0b2e-4f47-ad8c-381f86035e8b_buggy.java
+++ b/tmp/1e9cba5d-cd11-41bc-9816-90c42591b96b_fixed.java
@@ -1,73 +1,110 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
-
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+    // For each named parameter check if a mutable argument use more than once.
     if (fnParam != null) {
       if (cArg != null) {
-
         // Check for arguments that are evaluated more than once.
         // Note: Unlike block inlining, there it is not possible that a
         // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)
             && NodeUtil.getNameReferenceCount(
                 block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
       }
-
-        // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
     // For every call argument check for side-effects, even if there
     // isn't a named parameter to match.
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
+  //
+  // ORDERING CHECK:
+  // A direct inline moves parameter evaluation into the body. If the body
+  // has side-effects before a parameter reference, the order is changed.
+  //
+  Node returnNode = block.getFirstChild();
+  if (returnNode != null && returnNode.isReturn()) {
+    Node returnValue = returnNode.getFirstChild();
+    if (returnValue != null) {
+      // Prepare parallel traversal of params and args again.
+      Node p = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+      Node a = callNode.getFirstChild().getNext();
+      if (!callNode.getFirstChild().isName()
+          && NodeUtil.isFunctionObjectCall(callNode)) {
+        a = (a != null) ? a.getNext() : null;
+      }
+      // For each parameter with an argument, check its uses in the return
+      // expression for any preceding side-effects.
+      while (p != null && a != null) {
+        final String name = p.getString();
+        // Traverse the return expression to find all references to 'name'.
+        List<Node> stack = new ArrayList<>();
+        stack.add(returnValue);
+        for (int idx = 0; idx < stack.size(); idx++) {
+          Node cur = stack.get(idx);
+          // If this node is a reference to the parameter, check siblings.
+          if (cur.isName() && name.equals(cur.getString())) {
+            // Walk up from the use to the root of the return expression.
+            Node child = cur;
+            while (child != returnValue) {
+              Node parent = child.getParent();
+              // For each sibling before 'child', if it may have side-effects,
+              // inlining would reorder them before the parameter.
+              for (Node sib = parent.getFirstChild();
+                   sib != child; sib = sib.getNext()) {
+                if (NodeUtil.mayHaveSideEffects(sib, compiler)) {
+                  return CanInlineResult.NO;
+                }
+              }
+              child = parent;
+            }
+          }
+          // Add children for traversal.
+          for (Node c = cur.getFirstChild(); c != null; c = c.getNext()) {
+            stack.add(c);
+          }
+        }
+        p = p.getNext();
+        a = a.getNext();
+      }
+    }
+  }
+
   return CanInlineResult.YES;
 }
\ No newline at end of file
