diff --git a/tmp/17cc561d-380c-4485-9aef-5a5b3482da73_buggy.java b/tmp/0cf672ea-0763-4f6e-938e-a80568189639_fixed.java
index 233a867..72fe513 100644
--- a/tmp/17cc561d-380c-4485-9aef-5a5b3482da73_buggy.java
+++ b/tmp/0cf672ea-0763-4f6e-938e-a80568189639_fixed.java
@@ -1,73 +1,63 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
+  // First, ensure the function is the simple single-return form
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
-    Node block = fnNode.getLastChild();
+  // Next, for direct call‐site replacement we only allow a pure return
+  // expression (no side‐effects in the returned expression).
+  Node block = fnNode.getLastChild();  // the function body
+  Node firstStmt = block.getFirstChild();
+  if (firstStmt != null && firstStmt.isReturn()) {
+    Node returnExpr = firstStmt.getFirstChild();
+    if (returnExpr != null
+        && NodeUtil.mayHaveSideEffects(returnExpr, compiler)) {
+      return CanInlineResult.NO;
+    }
+  }
 
-
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+  // Now check the call arguments.
+  // CALL NODE shape: [ FUN, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // Handle calls via .call or .apply (skip the 'this' argument)
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
+      // only allow if the first arg is 'this', otherwise bail
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+  // Walk through parameters and arguments in tandem.
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
+        // If the argument can mutate state and the parameter is referenced
+        // more than once in the function, we cannot inline.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
             && NodeUtil.getNameReferenceCount(
                    block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
       }
-
-        // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+    // If the argument itself has side‐effects, we cannot inline it here.
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
