diff --git a/tmp/9aed5775-73d3-4149-916a-4c7008c3fa3a_buggy.java b/tmp/ad58e7be-ad3e-4125-b975-efa1c366307e_fixed.java
index 233a867..4c885ac 100644
--- a/tmp/9aed5775-73d3-4149-916a-4c7008c3fa3a_buggy.java
+++ b/tmp/ad58e7be-ad3e-4125-b975-efa1c366307e_fixed.java
@@ -1,73 +1,76 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
+  // Grab the sole return‐expression (we know by
+  // isDirectCallNodeReplacementPossible that there is exactly one).
   Node block = fnNode.getLastChild();
-
+  Node returnStmt = block.getFirstChild();
+  Node returnExpr = (returnStmt != null && returnStmt.isReturn())
+      ? returnStmt.getFirstChild() : null;
 
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // 'call' and 'apply' invade the arg list with a 'this' value.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
+      // We don't support rewriting 'this' yet.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+  // Now walk the formal parameters vs. the actuals.
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
+        // 1) If the actual has mutating side effects, the
+        //    corresponding parameter must be referenced at most once.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
             && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
+        // 2) Even if the actual is pure, we must not
+        //    reorder a side‐effect in the function return
+        //    past the evaluation of the parameter.  In
+        //    a simple binary ADD or COMMA expression, the
+        //    left side is evaluated before the right.
+        if (!NodeUtil.mayEffectMutableState(cArg, compiler)
+            && returnExpr != null
+            && (returnExpr.isAdd() || returnExpr.isComma())) {
+          Node lhs = returnExpr.getFirstChild();
+          Node rhs = lhs.getNext();
+          // If the parameter lives in the right subtree but the
+          // left subtree has side effects, inlining would
+          // invert the order.
+          if (NodeUtil.getNameReferenceCount(
+                  rhs, fnParam.getString()) > 0
+              && NodeUtil.mayHaveSideEffects(lhs, compiler)) {
+            return CanInlineResult.NO;
+          }
+        }
       }
-
-        // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+    // 3) Finally, no actual argument may itself have side effects
+    //    if there's no matching formal.
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
