diff --git a/tmp/fcb63ea3-51f4-49e4-819a-a53f716fc288_buggy.java b/tmp/e837e357-4344-4b4e-bae1-797f71d3d91f_fixed.java
index 233a867..0b10958 100644
--- a/tmp/fcb63ea3-51f4-49e4-819a-a53f716fc288_buggy.java
+++ b/tmp/e837e357-4344-4b4e-bae1-797f71d3d91f_fixed.java
@@ -1,73 +1,62 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
+  // Only simple single-return functions are candidates.
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
-    Node block = fnNode.getLastChild();
-
+  // We only allow *direct* inlining of truly side‐effect-free return
+  // expressions.  If the body’s return expression does any calls,
+  // assignments, etc., inlining it directly at the call site would
+  // reorder those side-effects relative to argument evaluation.
+  Node block = fnNode.getLastChild();  // the BLOCK node
+  Node stmt = block.getFirstChild();
+  if (stmt != null && stmt.isReturn()) {
+    Node retExpr = stmt.getFirstChild();
+    if (retExpr != null && NodeUtil.mayHaveSideEffects(retExpr, compiler)) {
+      return CanInlineResult.NO;
+    }
+  }
 
+  // Now fall back to our existing checks on arguments and parameters.
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // Handle a .call() special case.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+  // FUNCTION PARAM LIST -> [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
+        // If the actual argument can mutate state, ensure
+        // the corresponding parameter is only used once.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
       }
-
-        // Move to the next name.
       fnParam = fnParam.getNext();
     }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
     if (cArg != null) {
+      // Even pure references could have side-effects (e.g. getters),
+      // so we bail if the argument itself isn't side-effect-free.
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
