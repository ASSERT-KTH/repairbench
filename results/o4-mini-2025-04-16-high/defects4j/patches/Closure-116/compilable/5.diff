diff --git a/tmp/e5da5bf6-a4c9-4ab8-bcb9-00cec76e1752_buggy.java b/tmp/c607fe49-a85e-4484-a2d0-422bc6ee0fff_fixed.java
index 233a867..eedb1bf 100644
--- a/tmp/e5da5bf6-a4c9-4ab8-bcb9-00cec76e1752_buggy.java
+++ b/tmp/c607fe49-a85e-4484-a2d0-422bc6ee0fff_fixed.java
@@ -1,73 +1,93 @@
 /**
  * Determines whether a function can be inlined at a particular call site.
  * There are several criteria that the function and reference must hold in
  * order for the functions to be inlined:
  * 1) If a call's arguments have side effects,
  * the corresponding argument in the function must only be referenced once.
  * For instance, this will not be inlined:
  * <pre>
  *     function foo(a) { return a + a }
  *     x = foo(i++);
  * </pre>
  */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
+  // Only simple single-return functions whose return expr is "safe"
+  // may be direct-inlined.  In particular, we must avoid inlining
+  // return-expressions where a parameter is used after some
+  // side-effectful sub-expression (e.g. binary +, comma, etc).
   Node block = fnNode.getLastChild();
-
+  Node returnNode = block.getFirstChild();
+  if (returnNode != null && returnNode.isReturn()) {
+    Node expr = returnNode.getFirstChild();
+    if (expr != null
+        && !expr.isCall()
+        && !expr.isNew()
+        && !expr.isAssign()
+        && !expr.isGetProp()
+        && !expr.isGetElem()
+        && !expr.isName()
+        && !expr.isString()
+        && !expr.isNumber()
+        && !expr.isTrue()
+        && !expr.isFalse()
+        && !expr.isNull()) {
+      // e.g. return a + 1, return (x.prop=2),a, return a?b:c, etc.
+      return CanInlineResult.NO;
+    }
+  }
 
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
     // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
-
         // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
+        // Note: Unlike block inlining, here it is not possible that a
         // parameter reference will be in a loop.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
             && NodeUtil.getNameReferenceCount(
                 block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
       }
-
       // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
     // For every call argument check for side-effects, even if there
     // isn't a named parameter to match.
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
