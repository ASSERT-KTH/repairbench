diff --git a/tmp/09c963d7-2cf9-47d0-9a8a-c9a2fab5290c_buggy.java b/tmp/11dbf857-65b4-49c7-9990-941776a13457_fixed.java
index 81a6e8b..88a43a6 100644
--- a/tmp/09c963d7-2cf9-47d0-9a8a-c9a2fab5290c_buggy.java
+++ b/tmp/11dbf857-65b4-49c7-9990-941776a13457_fixed.java
@@ -1,19 +1,29 @@
 /**
  * Tells if the token looks like a short option.
  * 
  * @param token
  */
-    private boolean isShortOption(String token)
-    {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        if (!token.startsWith("-") || token.length() == 1)
-        {
+private boolean isShortOption(String token) {
+    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2 or concatenated like -ab)
+    if (!token.startsWith("-") || token.length() == 1) {
         return false;
     }
 
-        // remove leading "-" and "=value"
-        int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+    // strip leading "-" and any "=value"
+    int eq = token.indexOf('=');
+    String optName = (eq == -1) ? token.substring(1) : token.substring(1, eq);
+
+    // direct match of a (possibly multi‐char) short option
+    if (options.hasShortOption(optName)) {
+        return true;
+    }
+
+    // check for several concatenated single‐char short options
+    for (int i = 0; i < optName.length(); i++) {
+        String single = String.valueOf(optName.charAt(i));
+        if (!options.hasShortOption(single)) {
+            return false;
+        }
+    }
+    return true;
 }
\ No newline at end of file
