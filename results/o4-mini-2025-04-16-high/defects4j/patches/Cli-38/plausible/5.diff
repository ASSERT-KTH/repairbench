diff --git a/tmp/f0e26d7c-acc9-4a9b-9033-8c1c3fec05e6_buggy.java b/tmp/130073f8-c318-4904-aa31-0ec7bf5ab6b6_fixed.java
index 81a6e8b..78956ef 100644
--- a/tmp/f0e26d7c-acc9-4a9b-9033-8c1c3fec05e6_buggy.java
+++ b/tmp/130073f8-c318-4904-aa31-0ec7bf5ab6b6_fixed.java
@@ -1,19 +1,33 @@
-    /**
-     * Tells if the token looks like a short option.
-     * 
-     * @param token
-     */
-    private boolean isShortOption(String token)
-    {
+private boolean isShortOption(String token) {
     // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        if (!token.startsWith("-") || token.length() == 1)
-        {
+    if (!token.startsWith("-") || token.length() == 1) {
         return false;
     }
 
-        // remove leading "-" and "=value"
+    // strip leading "-" and anything after "="
     int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+    String optName = (pos == -1)
+        ? token.substring(1)
+        : token.substring(1, pos);
+
+    // a single short option (possibly multi‐character) wins
+    if (options.hasShortOption(optName)) {
+        return true;
+    }
+
+    // if there is an "=", we don't attempt grouping
+    if (pos != -1) {
+        return false;
+    }
+
+    // check for concatenated single‐char short options, none may take an arg
+    String chars = token.substring(1);
+    for (int i = 0; i < chars.length(); i++) {
+        String name = String.valueOf(chars.charAt(i));
+        if (!options.hasShortOption(name)
+            || options.getOption(name).hasArg()) {
+            return false;
+        }
+    }
+    return true;
 }
\ No newline at end of file
