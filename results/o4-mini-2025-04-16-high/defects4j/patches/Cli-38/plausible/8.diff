diff --git a/tmp/5972f577-2554-4f5f-a8f3-ab8217cb1bcc_buggy.java b/tmp/492c8b67-d5ee-4b3c-a049-0a70ca30f8a0_fixed.java
index 81a6e8b..1354bdf 100644
--- a/tmp/5972f577-2554-4f5f-a8f3-ab8217cb1bcc_buggy.java
+++ b/tmp/492c8b67-d5ee-4b3c-a049-0a70ca30f8a0_fixed.java
@@ -1,19 +1,37 @@
 /**
  * Tells if the token looks like a short option.
  * 
  * @param token
  */
-    private boolean isShortOption(String token)
-    {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        if (!token.startsWith("-") || token.length() == 1)
-        {
+private boolean isShortOption(String token) {
+    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2, concatenated -ab)
+    if (!token.startsWith("-") || token.length() == 1) {
         return false;
     }
 
-        // remove leading "-" and "=value"
-        int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+    // strip leading "-" and any "=value"
+    int eq = token.indexOf("=");
+    String optName = (eq == -1)
+        ? token.substring(1)
+        : token.substring(1, eq);
+
+    // exact match (including multi‐char short options)
+    if (options.hasShortOption(optName)) {
+        return true;
+    }
+
+    // check for several concatenated single‐char short options, e.g. "-ab"
+    if (eq == -1 && optName.length() > 1) {
+        for (int i = 0; i < optName.length(); i++) {
+            String s = Character.toString(optName.charAt(i));
+            // each must exist and must not require its own argument
+            if (!options.hasShortOption(s)
+                || options.getOption(s).hasArg()) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    return false;
 }
\ No newline at end of file
