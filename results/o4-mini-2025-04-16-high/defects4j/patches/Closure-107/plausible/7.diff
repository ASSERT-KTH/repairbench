diff --git a/tmp/b4d558c0-72e0-4c5b-a562-a5c39cc8514f_buggy.java b/tmp/eb7d86e9-602f-47c1-8498-ff3b0cfed0e5_fixed.java
index fa9dfcc..d9f98ee 100644
--- a/tmp/b4d558c0-72e0-4c5b-a562-a5c39cc8514f_buggy.java
+++ b/tmp/eb7d86e9-602f-47c1-8498-ff3b0cfed0e5_fixed.java
@@ -1,61 +1,57 @@
 @Override
 protected CompilerOptions createOptions() {
   CompilerOptions options = new CompilerOptions();
+
+  // Pick the right coding convention.
   if (flags.processJqueryPrimitives) {
     options.setCodingConvention(new JqueryCodingConvention());
   } else {
     options.setCodingConvention(new ClosureCodingConvention());
   }
 
+  // Carry forward any extra user‐defined JSDoc annotations.
   options.setExtraAnnotationNames(flags.extraAnnotationName);
 
+  // Set up the various compilation levels.
   CompilationLevel level = flags.compilationLevel;
   level.setOptionsForCompilationLevel(options);
-
   if (flags.debug) {
     level.setDebugOptionsForCompilationLevel(options);
   }
-
   if (flags.useTypesForOptimization) {
     level.setTypeBasedOptimizationOptions(options);
   }
-
   if (flags.generateExports) {
     options.setGenerateExports(flags.generateExports);
   }
 
+  // Warning level and formatting.
   WarningLevel wLevel = flags.warningLevel;
   wLevel.setOptionsForWarningLevel(options);
-    for (FormattingOption formattingOption : flags.formatting) {
-      formattingOption.applyToOptions(options);
+  for (FormattingOption fmt : flags.formatting) {
+    fmt.applyToOptions(options);
   }
 
+  // Closure/library‐specific flags.
   options.closurePass = flags.processClosurePrimitives;
-
-    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&
-        flags.processJqueryPrimitives;
-
+  options.jqueryPass = level == CompilationLevel.ADVANCED_OPTIMIZATIONS
+      && flags.processJqueryPrimitives;
   options.angularPass = flags.angularPass;
 
+  // Only wire up the new i18n‐translation pipeline if the user actually
+  // supplied a translations file.  In particular, do NOT inject an
+  // EmptyMessageBundle for ADVANCED_OPTIMIZATIONS anymore, so that
+  // legacy "var MSG_FOO = 1;" patterns get treated as ordinary code
+  // (and can be dead‐coded away without spurious warnings).
   if (!flags.translationsFile.isEmpty()) {
     try {
       options.messageBundle = new XtbMessageBundle(
           new FileInputStream(flags.translationsFile),
           flags.translationsProject);
     } catch (IOException e) {
       throw new RuntimeException("Reading XTB file", e);
     }
-    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {
-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a
-      // translations file, they might reasonably try to write their own
-      // implementation of goog.getMsg that makes the substitution at
-      // run-time.
-      //
-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,
-      // so we might as well inline it. But shut off the i18n warnings,
-      // because the user didn't really ask for i18n.
-      options.messageBundle = new EmptyMessageBundle();
   }
 
   return options;
 }
\ No newline at end of file
