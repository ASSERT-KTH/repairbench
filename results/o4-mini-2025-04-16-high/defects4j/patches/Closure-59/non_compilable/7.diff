diff --git a/tmp/86d1cea0-84ef-453f-b326-094d81ca52f6_buggy.java b/tmp/bbd8e8f4-b518-40bf-b2b3-b5bb842115f7_fixed.java
index 29fabfa..2c9c5cc 100644
--- a/tmp/86d1cea0-84ef-453f-b326-094d81ca52f6_buggy.java
+++ b/tmp/bbd8e8f4-b518-40bf-b2b3-b5bb842115f7_fixed.java
@@ -1,67 +1,86 @@
-  /**
-   * Initialize the compiler options. Only necessary if you're not doing
-   * a normal compile() job.
-   */
 public void initOptions(CompilerOptions options) {
   this.options = options;
   if (errorManager == null) {
     if (outStream == null) {
       setErrorManager(
           new LoggerErrorManager(createMessageFormatter(), logger));
     } else {
       PrintStreamErrorManager printer =
           new PrintStreamErrorManager(createMessageFormatter(), outStream);
       printer.setSummaryDetailLevel(options.summaryDetailLevel);
       setErrorManager(printer);
     }
   }
 
   // DiagnosticGroups override the plain checkTypes option.
   if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = true;
   } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = false;
   } else if (!options.checkTypes) {
     // If DiagnosticGroups did not override the plain checkTypes
     // option, and checkTypes is enabled, then turn off the
     // parser type warnings.
     options.setWarningLevel(
-          DiagnosticGroup.forType(
-              RhinoErrorReporter.TYPE_PARSE_ERROR),
+        DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),
         CheckLevel.OFF);
   }
 
+  // DiagnosticGroups override the plain checkGlobalThis option.
+  if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {
+    // --jscomp_on=globalThis
+    // Use whatever warning level was configured (e.g. by --warning_level).
+    options.checkGlobalThisLevel =
+        options.getWarningLevel(DiagnosticGroups.GLOBAL_THIS);
+    options.setWarningLevel(
+        DiagnosticGroups.GLOBAL_THIS,
+        options.checkGlobalThisLevel);
+  } else if (options.disables(DiagnosticGroups.GLOBAL_THIS)) {
+    // --jscomp_off=globalThis
+    options.checkGlobalThisLevel = CheckLevel.OFF;
+    options.setWarningLevel(
+        DiagnosticGroups.GLOBAL_THIS,
+        CheckLevel.OFF);
+  } else if (options.checkGlobalThisLevel.isOn()) {
+    // Explicitly requested via --check_global_this (or similar)
+    options.setWarningLevel(
+        DiagnosticGroups.GLOBAL_THIS,
+        options.checkGlobalThisLevel);
+  }
+
   if (options.checkGlobalThisLevel.isOn()) {
+    // Ensure the compiler will actually run the globalThis check
+    // at the chosen level.
     options.setWarningLevel(
         DiagnosticGroups.GLOBAL_THIS,
         options.checkGlobalThisLevel);
   }
 
   if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {
     options.setWarningLevel(
         DiagnosticGroups.ES5_STRICT,
         CheckLevel.ERROR);
   }
 
   // Initialize the warnings guard.
   List<WarningsGuard> guards = Lists.newArrayList();
   guards.add(
       new SuppressDocWarningsGuard(
           getDiagnosticGroups().getRegisteredGroups()));
   guards.add(options.getWarningsGuard());
 
   ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);
 
   // All passes must run the variable check. This synthesizes
   // variables later so that the compiler doesn't crash. It also
   // checks the externs file for validity. If you don't want to warn
   // about missing variable declarations, we shut that specific
   // error off.
   if (!options.checkSymbols &&
       !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
     composedGuards.addGuard(new DiagnosticGroupWarningsGuard(
         DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
   }
 
   this.warningsGuard = composedGuards;
 }
\ No newline at end of file
