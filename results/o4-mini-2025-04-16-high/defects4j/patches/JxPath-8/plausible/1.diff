diff --git a/tmp/549d4d4b-99ec-4a3f-99c1-f343a98d8eec_buggy.java b/tmp/ef479027-4357-4174-9298-998c3fe9cf94_fixed.java
index 98d89dc..cd70e60 100644
--- a/tmp/549d4d4b-99ec-4a3f-99c1-f343a98d8eec_buggy.java
+++ b/tmp/ef479027-4357-4174-9298-998c3fe9cf94_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
-            return findMatch((Iterator) left, (Iterator) right);
+        return findMatch((Iterator<?>) left, (Iterator<?>) right);
     }
     if (left instanceof Iterator) {
-            return containsMatch((Iterator) left, right);
+        return containsMatch((Iterator<?>) left, right);
     }
     if (right instanceof Iterator) {
-            return containsMatch((Iterator) right, left);
+        return containsMatch((Iterator<?>) right, left);
     }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+    // Handle NaN according to XPath semantics:
+    //   Any comparison with NaN is false, except NaN = NaN which is true.
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return evaluateCompare(0);
+        }
+        return false;
+    }
+
+    return evaluateCompare(ld == rd ? 0 : (ld < rd ? -1 : 1));
 }
\ No newline at end of file
