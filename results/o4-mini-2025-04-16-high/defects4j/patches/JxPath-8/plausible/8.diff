diff --git a/tmp/f6987db1-95af-4258-b126-78f1bc378aee_buggy.java b/tmp/00336b09-77bd-4784-8f8c-402a815a92fd_fixed.java
index 98d89dc..8c19359 100644
--- a/tmp/f6987db1-95af-4258-b126-78f1bc378aee_buggy.java
+++ b/tmp/00336b09-77bd-4784-8f8c-402a815a92fd_fixed.java
@@ -1,23 +1,48 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN according to XPath semantics:
+    //  - = returns true only if both are NaN
+    //  - != returns true if exactly one is NaN
+    //  - all other comparisons return false if any operand is NaN
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        boolean bothNaN = Double.isNaN(ld) && Double.isNaN(rd);
+        // Detect operator by probing evaluateCompare:
+        boolean isLt  = evaluateCompare(-1);
+        boolean isEq  = evaluateCompare(0);
+        boolean isGt  = evaluateCompare(1);
+        // '=' operator
+        if (isEq && !isLt && !isGt) {
+            return bothNaN;
+        }
+        // '!=' operator
+        if (!isEq && isLt && isGt) {
+            return !bothNaN;
+        }
+        // <,>,<=,>= with NaN â†’ false
+        return false;
+    }
+
+    // Normal numeric compare
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
