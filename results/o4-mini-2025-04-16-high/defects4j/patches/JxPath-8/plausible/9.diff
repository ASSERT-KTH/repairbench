diff --git a/tmp/bcbf333e-1497-47a8-b65e-854023574976_buggy.java b/tmp/84ac553c-0e3e-4ba3-96d2-20a08c6578b2_fixed.java
index 98d89dc..f31d14a 100644
--- a/tmp/bcbf333e-1497-47a8-b65e-854023574976_buggy.java
+++ b/tmp/84ac553c-0e3e-4ba3-96d2-20a08c6578b2_fixed.java
@@ -1,23 +1,35 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+    // Handle NaN: NaN compared to NaN is "equal", otherwise all comparisons are false
+    if (Double.isNaN(ld) && Double.isNaN(rd)) {
+        // force comparison result = 0 so "=" yields true, "<" and ">" yield false
+        return evaluateCompare(0);
+    }
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // any comparison with exactly one NaN is false
+        return false;
+    }
+
+    return evaluateCompare(ld == rd ? 0 : (ld < rd ? -1 : 1));
 }
\ No newline at end of file
