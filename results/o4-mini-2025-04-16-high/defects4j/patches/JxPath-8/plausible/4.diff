diff --git a/tmp/e52abc9b-9120-4983-88ef-da6f2f2ef76c_buggy.java b/tmp/59267b49-5a8c-4b7a-9236-6f8e73929831_fixed.java
index 98d89dc..0a154c3 100644
--- a/tmp/e52abc9b-9120-4983-88ef-da6f2f2ef76c_buggy.java
+++ b/tmp/59267b49-5a8c-4b7a-9236-6f8e73929831_fixed.java
@@ -1,23 +1,36 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    // Special‐case NaN per XPath tests: 
+    //   NaN > anything => false
+    //   NaN < anything => false
+    //   NaN = NaN      => true
+    //   NaN = non‐NaN  => false
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            // both NaN: treat as equal (compare == 0)
+            return evaluateCompare(0);
+        }
+        // any other NaN comparison is false
+        return false;
+    }
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
