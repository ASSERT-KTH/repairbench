diff --git a/tmp/adaf55f2-6209-40f5-a566-b89654a2f328_buggy.java b/tmp/f3d57429-7187-4796-bb78-fea6a17ea320_fixed.java
index 98d89dc..2d0b5e9 100644
--- a/tmp/adaf55f2-6209-40f5-a566-b89654a2f328_buggy.java
+++ b/tmp/f3d57429-7187-4796-bb78-fea6a17ea320_fixed.java
@@ -1,23 +1,53 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+    // Special‐case NaN comparisons
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // Evaluate operator against 0, 1 and -1 to detect "=", "!=", "<", ">" etc.
+        boolean r0  = evaluateCompare(0);
+        boolean r1  = evaluateCompare(1);
+        boolean r_1 = evaluateCompare(-1);
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            // Both NaN: only "=" should be true
+            if (r0 && !r1 && !r_1) {
+                return true;
+            }
+            return false;
+        }
+        // One NaN: only "!=" should be true
+        if (r1 && r_1) {
+            return true;
+        }
+        return false;
+    }
+
+    int cmp;
+    if (ld < rd) {
+        cmp = -1;
+    } else if (ld > rd) {
+        cmp = 1;
+    } else {
+        cmp = 0;
+    }
+    return evaluateCompare(cmp);
 }
\ No newline at end of file
