diff --git a/tmp/4951665e-7a65-4d5d-8349-4d36d0c67fc2_buggy.java b/tmp/7cd2b4f9-1ef2-4aa8-9f31-7d3fbbd7acfd_fixed.java
index 98d89dc..cdf1c33 100644
--- a/tmp/4951665e-7a65-4d5d-8349-4d36d0c67fc2_buggy.java
+++ b/tmp/7cd2b4f9-1ef2-4aa8-9f31-7d3fbbd7acfd_fixed.java
@@ -1,23 +1,42 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+    boolean ldNaN = Double.isNaN(ld);
+    boolean rdNaN = Double.isNaN(rd);
+    if (ldNaN || rdNaN) {
+        // Any comparison with NaN other than "=" or "!=" yields false
+        switch (operator) {
+            case EQUAL:
+                // only true if both are NaN
+                return ldNaN && rdNaN;
+            case NOT_EQUAL:
+                // true if exactly one is NaN
+                return !(ldNaN && rdNaN);
+            default:
+                return false;
+        }
+    }
+
+    // normal numeric comparison
+    int cmp = ld == rd ? 0 : (ld < rd ? -1 : 1);
+    return evaluateCompare(cmp);
 }
\ No newline at end of file
