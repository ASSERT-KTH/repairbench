diff --git a/tmp/c5c57064-b3fb-43e3-9b18-35347da9e5c3_buggy.java b/tmp/919719d4-dde6-4330-87d0-5e80e2751130_fixed.java
index 5481b94..c9c4ccb 100644
--- a/tmp/c5c57064-b3fb-43e3-9b18-35347da9e5c3_buggy.java
+++ b/tmp/919719d4-dde6-4330-87d0-5e80e2751130_fixed.java
@@ -1,49 +1,56 @@
 public Object handle(Invocation invocation) throws Throwable {
     if (invocationContainerImpl.hasAnswersForStubbing()) {
         // stubbing voids with stubVoid() or doAnswer() style
-            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
-                            .getArgumentMatcherStorage(), invocation);
+        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(
+                mockingProgress.getArgumentMatcherStorage(), invocation);
         invocationContainerImpl.setMethodForStubbing(invocationMatcher);
         return null;
     }
+
     VerificationMode verificationMode = mockingProgress.pullVerificationMode();
-
-        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
-                        invocation);
+    InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(
+            mockingProgress.getArgumentMatcherStorage(), invocation);
 
     mockingProgress.validateState();
 
     // if verificationMode is not null then someone is doing verify()
     if (verificationMode != null) {
         // We need to check if verification was started on the correct mock
         // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
-                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
+        if (verificationMode instanceof MockAwareVerificationMode
+                && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+            VerificationDataImpl data =
+                    new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
             verificationMode.verify(data);
             return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
+        } else {
+            // this means there is an invocation on a different mock.
+            // Re-adding verification mode so it will be used by the next invocation
             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+            mockingProgress.verificationStarted(verificationMode);
         }
     }
 
     invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
-        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
+    OngoingStubbingImpl<T> ongoingStubbing =
+            new OngoingStubbingImpl<T>(invocationContainerImpl);
     mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
-        StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
+    StubbedInvocationMatcher stubbedInvocation =
+            invocationContainerImpl.findAnswerFor(invocation);
 
     if (stubbedInvocation != null) {
         stubbedInvocation.captureArgumentsFrom(invocation);
         return stubbedInvocation.answer(invocation);
     } else {
         Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
         // redo setting invocation for potential stubbing in case of partial
-            // mocks / spies.
-            // Without it, the real method inside 'when' might have delegated
-            // to other self method and overwrite the intended stubbed method
-            // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
+        // mocks / spies. Without it, the real method inside 'when' might have
+        // delegated to other self method and overwrite the intended stubbed
+        // method with a different one. The reset is required to avoid runtime
+        // exception that validates return type with stubbed method signature.
         invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
         return ret;
     }
 }
\ No newline at end of file
