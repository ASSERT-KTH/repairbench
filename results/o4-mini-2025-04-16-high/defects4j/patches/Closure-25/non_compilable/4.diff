diff --git a/tmp/4df4564e-0de0-474a-9d1e-1df04d72ec5f_buggy.java b/tmp/05cfeded-b258-4b41-a1bf-9db4220ff86e_fixed.java
index b98f0a7..4b16d2d 100644
--- a/tmp/4df4564e-0de0-474a-9d1e-1df04d72ec5f_buggy.java
+++ b/tmp/05cfeded-b258-4b41-a1bf-9db4220ff86e_fixed.java
@@ -1,29 +1,58 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
+  // First traverse the “constructor” expression.
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
+
+  // Figure out the instance type.
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+        // NoObjectType implements FunctionType so it can still construct.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+      } else {
+        ct = null;  // not really a constructor
       }
     }
   }
   n.setJSType(type);
+
+  // If we know the FunctionType of the constructor, do backwards‐inference
+  // on its parameters.  Otherwise just traverse the args normally.
+  if (ct != null) {
+    Iterator<JSType> paramIt = ct.getParameters().iterator();
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      JSType formalType = null;
+      if (paramIt.hasNext()) {
+        formalType = paramIt.next()
+                            .restrictByNotNullOrUndefined();
+        if (formalType.isUnknownType()) {
+          formalType = null;
+        }
+      }
+      if (formalType != null) {
+        // If the argument is a simple qualified name, narrow it:
+        String qname = arg.getQualifiedName();
+        if (qname != null) {
+          scope = scope.inferQualifiedName(qname, formalType);
+        }
+      }
       scope = traverse(arg, scope);
     }
+  } else {
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      scope = traverse(arg, scope);
+    }
+  }
+
   return scope;
 }
\ No newline at end of file
