diff --git a/tmp/f25b230b-f563-4dfe-8998-83a7cd98f752_buggy.java b/tmp/4695f5d0-a374-474d-8e8d-58b5c3451cd9_fixed.java
index b98f0a7..32f9082 100644
--- a/tmp/f25b230b-f563-4dfe-8998-83a7cd98f752_buggy.java
+++ b/tmp/4695f5d0-a374-474d-8e8d-58b5c3451cd9_fixed.java
@@ -1,29 +1,63 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
+  // First do the usual forward traversal of the constructor expression.
   scope = traverse(constructor, scope);
+
+  // Figure out the return (instance) type of the new-expression.
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+        // If constructorType is a NoObjectType, toMaybeFunctionType returns null,
+        // but NoObjectType implements FunctionType so we can cast it.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+      } else {
+        // Not a real constructor, disable backward‐inference.
+        ct = null;
       }
     }
   }
   n.setJSType(type);
+
+  // --- Begin backward inference of the constructor arguments ---
+  // If we know the FunctionType of the constructor, pull its declared
+  // parameter types and use them to refine each argument's type.
+  if (ct != null) {
+    Node arg = constructor.getNext();
+    for (JSType paramType : ct.getParameters()) {
+      if (arg == null) {
+        break;
+      }
+      if (paramType != null) {
+        if (arg.isName()) {
+          // e.g. new F(y)  ==>  refine y to have the declared paramType
+          scope = scope.inferQualifiedName(arg.getString(), paramType);
+        } else if (arg.isGetProp()) {
+          // e.g. new F(obj.prop)  ==>  refine obj.prop to paramType
+          Node owner = arg.getFirstChild();
+          String propName = arg.getLastChild().getString();
+          if (owner.isName()) {
+            scope = scope.inferQualifiedProp(owner.getString(), propName, paramType);
+          }
+        }
+      }
+      arg = arg.getNext();
+    }
+  }
+  // --- End backward inference ---
+
+  // Finally traverse all the argument subexpressions themselves.
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
