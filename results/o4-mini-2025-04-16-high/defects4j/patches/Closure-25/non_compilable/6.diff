diff --git a/tmp/7f7e6f67-ee4b-4b9b-8f7e-64275f986c6e_buggy.java b/tmp/499f4efd-bded-4a57-bcd2-1ea03a1c0c7d_fixed.java
index b98f0a7..c2e6b7c 100644
--- a/tmp/7f7e6f67-ee4b-4b9b-8f7e-64275f986c6e_buggy.java
+++ b/tmp/499f4efd-bded-4a57-bcd2-1ea03a1c0c7d_fixed.java
@@ -1,29 +1,54 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
+  // Traverse the constructor expression first.
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
+
+  // Figure out the instantiated type of the "new" expression.
   JSType constructorType = constructor.getJSType();
-    JSType type = null;
+  JSType instanceType = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
+      instanceType = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+        // handle the NoObjectType‐as‐FunctionType case
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+        instanceType = ct.getInstanceType();
       }
     }
   }
-    n.setJSType(type);
+  n.setJSType(instanceType);
+
+  // --- START BACKWARD INFERENCE FOR "new" ARGUMENTS ---
+  // If we have a concrete ctor signature, try to refine each arg
+  // based on the declared @param type.
+  if (ct != null) {
+    List<JSType> paramTypes = ct.getParameters();
+    int i = 0;
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), i++) {
+      if (i < paramTypes.size()) {
+        JSType formal = paramTypes.get(i);
+        if (formal != null && !formal.isUnknownType()) {
+          // Try to get a qualified name for this arg (e.g. "y" or "obj.prop")
+          FlowScope.QualifiedName qname = FlowScope.QualifiedName.of(arg);
+          if (qname != null) {
+            // Refine the flow‐scope binding at this call site.
+            scope = scope.inferQualifiedSlot(qname, formal, /* equalityComparison= */ false);
+          }
+        }
+      }
+    }
+  }
+  // --- END BACKWARD INFERENCE ---
+
+  // Now traverse the arguments normally.
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
