diff --git a/tmp/ad323cd1-d105-4da6-8df3-09cc6a5acfe0_buggy.java b/tmp/8774b0c5-9b5b-4343-81b0-e6c3326d0307_fixed.java
index b98f0a7..737fb1b 100644
--- a/tmp/ad323cd1-d105-4da6-8df3-09cc6a5acfe0_buggy.java
+++ b/tmp/8774b0c5-9b5b-4343-81b0-e6c3326d0307_fixed.java
@@ -1,29 +1,42 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
+  // Traverse the "new" expression's constructor
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
+
+  // Figure out the instantiated type
   JSType constructorType = constructor.getJSType();
-    JSType type = null;
+  JSType newExprType = null;
+  FunctionType ctorFn = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
+      newExprType = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
+      ctorFn = constructorType.toMaybeFunctionType();
+      if (ctorFn == null && constructorType instanceof FunctionType) {
+        ctorFn = (FunctionType) constructorType;
       }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+      if (ctorFn != null && ctorFn.isConstructor()) {
+        newExprType = ctorFn.getInstanceType();
+      } else {
+        ctorFn = null;  // not actually a constructor
       }
     }
   }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+  n.setJSType(newExprType);
+
+  // Now traverse and (backwards) infer each argument
+  int i = 0;
+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), i++) {
     scope = traverse(arg, scope);
+    if (ctorFn != null) {
+      JSType paramType = ctorFn.getParameterType(i);
+      if (paramType != null) {
+        // Propagate the parameter's declared type back into the argument
+        scope = assignToLValue(arg, paramType, scope);
+        arg.setJSType(paramType);
+      }
+    }
   }
   return scope;
 }
\ No newline at end of file
