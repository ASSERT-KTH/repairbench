diff --git a/tmp/4880176f-83bd-4927-a109-6e6db8e9753e_buggy.java b/tmp/c84dcf5f-a653-4efd-835e-3f75b680d5e2_fixed.java
index b98f0a7..b242237 100644
--- a/tmp/4880176f-83bd-4927-a109-6e6db8e9753e_buggy.java
+++ b/tmp/c84dcf5f-a653-4efd-835e-3f75b680d5e2_fixed.java
@@ -1,29 +1,50 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
+  // Evaluate the constructor expression first.
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
+
+  // Figure out the instance type produced by "new".
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+        // NoObjectType implements FunctionType but toMaybeFunctionType() returns null.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
+
+  // BACKWARDS INFERENCE: Propagate declared parameter types into the arguments.
+  if (ct != null) {
+    Node params = ct.getParameters();
+    if (params != null) {
+      Node arg = constructor.getNext();
+      for (Node param = params.getFirstChild();
+           param != null && arg != null;
+           param = param.getNext(), arg = arg.getNext()) {
+        JSType pType = param.getJSType();
+        if (pType != null && !pType.isUnknownType()) {
+          // Temporarily tag the argument with the expected type;
+          // traverse(arg, ...) will then record the refinement.
+          arg.setJSType(pType);
+        }
+      }
+    }
+  }
+
+  // Now traverse each argument in turn (with any refinements applied).
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
