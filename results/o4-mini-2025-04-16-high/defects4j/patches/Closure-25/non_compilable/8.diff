diff --git a/tmp/e5f0863e-492a-4d79-b4c1-3774e0e27555_buggy.java b/tmp/02bbbf44-c7df-4098-963c-5aa18a5b2897_fixed.java
index b98f0a7..3a38f96 100644
--- a/tmp/e5f0863e-492a-4d79-b4c1-3774e0e27555_buggy.java
+++ b/tmp/02bbbf44-c7df-4098-963c-5aa18a5b2897_fixed.java
@@ -1,29 +1,46 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
+  // First do the usual forward traversal on the constructor expression.
   scope = traverse(constructor, scope);
+
+  // Compute the result type of `new`
   JSType constructorType = constructor.getJSType();
-    JSType type = null;
+  JSType newType = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
+      newType = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+        // NoObjectType implements FunctionType so we still want to treat
+        // it as a constructor if it was annotated that way.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+        // Forward inference: the type of the `new` expression itself
+        newType = ct.getInstanceType();
+
+        // Backward inference: use the declared parameter types to
+        // refine the actual argument slots before we traverse them.
+        Node arg = constructor.getNext();
+        for (int i = 0; arg != null; i++, arg = arg.getNext()) {
+          JSType formal = ct.getParameterType(i);
+          if (formal != null) {
+            // inferSlotType will meet the existing type of `arg` with `formal`
+            scope = scope.inferSlotType(arg, formal);
           }
         }
       }
-    n.setJSType(type);
+    }
+  }
+
+  // Assign the computed type to the `new` node.
+  n.setJSType(newType);
+
+  // Now traverse the arguments under the (possibly) refined scope.
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
