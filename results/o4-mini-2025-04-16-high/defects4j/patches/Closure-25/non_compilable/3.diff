diff --git a/tmp/38e98a84-3f09-4ae5-8770-f3c420463711_buggy.java b/tmp/af21b854-25c4-4627-84a4-1cc84a374cea_fixed.java
index b98f0a7..886b7c9 100644
--- a/tmp/38e98a84-3f09-4ae5-8770-f3c420463711_buggy.java
+++ b/tmp/af21b854-25c4-4627-84a4-1cc84a374cea_fixed.java
@@ -1,29 +1,46 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
+  // Traverse the constructor expression first.
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
+
+  // Compute the type of the "new" expression.
   JSType constructorType = constructor.getJSType();
-    JSType type = null;
+  JSType instanceType = null;
+  FunctionType ctorFn = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
+      instanceType = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
+      // Try to get the FunctionType representing the constructor.
+      ctorFn = constructorType.toMaybeFunctionType();
+      if (ctorFn == null && constructorType instanceof FunctionType) {
+        ctorFn = (FunctionType) constructorType;
       }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+      if (ctorFn != null && ctorFn.isConstructor()) {
+        instanceType = ctorFn.getInstanceType();
       }
     }
   }
-    n.setJSType(type);
+  n.setJSType(instanceType);
+
+  // Forward-traverse the new-expression arguments.
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
+
+  // Backward-infer argument types: if a parameter has a declared type,
+  // refine the corresponding argument's type in the current scope.
+  if (ctorFn != null && ctorFn.isConstructor()) {
+    int i = 0;
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), i++) {
+      JSType expected = ctorFn.getParameterType(i);
+      if (expected != null && arg.isName()) {
+        // Refine simple name arguments to the expected parameter type.
+        scope = scope.assignQualifiedName(arg.getString(), expected);
+      }
+    }
+  }
+
   return scope;
 }
\ No newline at end of file
