diff --git a/tmp/90e10fba-10d5-4458-a02c-be939442ad7f_buggy.java b/tmp/24d1a36d-8455-4cdf-924a-ef8b511c6d5e_fixed.java
index b98f0a7..cf6796a 100644
--- a/tmp/90e10fba-10d5-4458-a02c-be939442ad7f_buggy.java
+++ b/tmp/24d1a36d-8455-4cdf-924a-ef8b511c6d5e_fixed.java
@@ -1,29 +1,40 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
+  // First, traverse the constructor expression itself.
   scope = traverse(constructor, scope);
+
+  // Figure out the instantiated type.
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+        // In some cases (e.g. NoObjectType) toMaybeFunctionType()
+        // returns null even though it is a FunctionType.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
+        // --- BEGIN FIX: backward‐infer the formal parameter types onto the args ---
+        // This will refine the types of the actual argument expressions
+        // (e.g. give `y` its {foo:(number|undefined)} type in `new F(y)`).
+        scope = inferParameterTypes(
+            ct,
+            NodeUtil.getInvocationArgs(n),
+            scope);
+        // --- END FIX ---
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
+
+  // Finally, traverse the “new” arguments in the (possibly) refined scope.
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
