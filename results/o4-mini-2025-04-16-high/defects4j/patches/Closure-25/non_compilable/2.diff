diff --git a/tmp/6247c5d1-6788-4299-932b-5a7cf612667c_buggy.java b/tmp/3b475774-1287-4abb-a02f-2148a4f59b21_fixed.java
index b98f0a7..369ccb8 100644
--- a/tmp/6247c5d1-6788-4299-932b-5a7cf612667c_buggy.java
+++ b/tmp/3b475774-1287-4abb-a02f-2148a4f59b21_fixed.java
@@ -1,29 +1,45 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
+  // Traverse the constructor expression first.
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
+
+  // Figure out what the "new" yields, and collect the FunctionType if available.
   JSType constructorType = constructor.getJSType();
-    JSType type = null;
+  FunctionType ctorFn = null;
+  JSType instanceType = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
+      instanceType = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
+      ctorFn = constructorType.toMaybeFunctionType();
+      if (ctorFn == null && constructorType instanceof FunctionType) {
+        // NoObjectType implements FunctionType so that it can still construct.
+        ctorFn = (FunctionType) constructorType;
       }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+      if (ctorFn != null && ctorFn.isConstructor()) {
+        instanceType = ctorFn.getInstanceType();
+      } else {
+        // Not really a constructor; drop it.
+        ctorFn = null;
       }
     }
   }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+  n.setJSType(instanceType);
+
+  // Now traverse each argument and—if we have a constructor signature—
+  // do backwards inference from @param to the actual.
+  int i = 0;
+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), i++) {
     scope = traverse(arg, scope);
+    if (ctorFn != null) {
+      // Infer the i-th parameter's annotated type, if any.
+      JSType expected = ctorFn.getParameterType(i);
+      if (expected != null) {
+        // Assign (narrow) the argument to match the @param.
+        scope = assign(scope, arg, expected);
+      }
+    }
   }
   return scope;
 }
\ No newline at end of file
