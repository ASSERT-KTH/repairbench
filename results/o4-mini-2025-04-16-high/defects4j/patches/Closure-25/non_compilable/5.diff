diff --git a/tmp/8120a6d6-8b9e-45bd-978b-a325caf9ce8b_buggy.java b/tmp/06f87062-b69e-4f34-8fe5-2592cf1c43e8_fixed.java
index b98f0a7..47299e6 100644
--- a/tmp/8120a6d6-8b9e-45bd-978b-a325caf9ce8b_buggy.java
+++ b/tmp/06f87062-b69e-4f34-8fe5-2592cf1c43e8_fixed.java
@@ -1,29 +1,56 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
+    // Traverse the constructor expression first.
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
+
+    // Figure out the new-expression's result type, and collect
+    // its formal parameter nodes for backward inference.
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    JSType instanceType = null;
+    Iterable<Node> formals = null;
+    FunctionType ct = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
+        instanceType = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+          instanceType = ct.getInstanceType();
+          formals = ct.getParameters();
         }
       }
     }
-    n.setJSType(type);
+    // Record the type of the `new` expression.
+    n.setJSType(instanceType);
+
+    // Now traverse the arguments, passing each through the contextual
+    // type of its corresponding formal (if available).
+    if (formals != null) {
+      Iterator<Node> fit = formals.iterator();
       for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        if (fit.hasNext()) {
+          Node formal = fit.next();
+          JSType formalType = formal.getJSType();
+          if (formalType != null) {
+            formalType = formalType.restrictByNotNullOrUndefined();
+            if (!formalType.isUnknownType()) {
+              scope = traverse(arg, scope.withContextualType(formalType));
+              continue;
+            }
+          }
+        }
         scope = traverse(arg, scope);
       }
+    } else {
+      // No constructor signature => just traverse normally.
+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        scope = traverse(arg, scope);
+      }
+    }
+
     return scope;
   }
\ No newline at end of file
