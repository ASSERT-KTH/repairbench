diff --git a/tmp/f5e7c15b-170e-4778-8cd9-38a04c59d306_buggy.java b/tmp/f77680b3-56e5-4ef1-8857-a15d40b80881_fixed.java
index 03b03d7..e4f13d0 100644
--- a/tmp/f5e7c15b-170e-4778-8cd9-38a04c59d306_buggy.java
+++ b/tmp/f77680b3-56e5-4ef1-8857-a15d40b80881_fixed.java
@@ -1,25 +1,31 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
+ * @param instant        the UTC‐based instant to adjust
+ * @param earlierOrLater false for earlier offset, true for later offset
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
+    // a bit messy, but will work in all non‐pathological cases
     
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+    // pick two instants well outside any one‐hour overlap/gap
+    long beforeInstant = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
+    long afterInstant  = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
+    
+    // map those to local times
+    long beforeLocal = convertUTCToLocal(beforeInstant);
+    long afterLocal  = convertUTCToLocal(afterInstant);
+    
+    // if they collapse to the same local time, there is no overlap here
+    if (beforeLocal == afterLocal) {
+        return instant;
     }
     
-        // work out range of instants that have duplicate local times
+    // get the local time at the instant in question
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // now convert that local back to UTC, choosing the mapping
+    // closest to either beforeInstant (earlier) or afterInstant (later)
+    long original = earlierOrLater ? afterInstant : beforeInstant;
+    return convertLocalToUTC(local, false, original);
 }
\ No newline at end of file
