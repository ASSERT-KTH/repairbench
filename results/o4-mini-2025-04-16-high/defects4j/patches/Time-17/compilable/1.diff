diff --git a/tmp/8fd5e3d8-2cc6-4cd8-b86f-ce066e4d7cef_buggy.java b/tmp/4030d272-73cb-4cd7-bf94-a96ff197b0c3_fixed.java
index 03b03d7..ba9dcd6 100644
--- a/tmp/8fd5e3d8-2cc6-4cd8-b86f-ce066e4d7cef_buggy.java
+++ b/tmp/4030d272-73cb-4cd7-bf94-a96ff197b0c3_fixed.java
@@ -1,25 +1,20 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
-        }
-        
-        // work out range of instants that have duplicate local times
+    // Convert to local millis
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Compute the two candidate UTC instants for this local time
+    long earliest = convertLocalToUTC(local, false, Long.MIN_VALUE);
+    long latest   = convertLocalToUTC(local, false, Long.MAX_VALUE);
+    // If they are the same, there is no overlap â€“ return the original
+    if (earliest == latest) {
+        return instant;
+    }
+    // Otherwise pick the earlier or later candidate
+    return earlierOrLater ? latest : earliest;
 }
\ No newline at end of file
