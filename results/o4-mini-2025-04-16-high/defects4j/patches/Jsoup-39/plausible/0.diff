diff --git a/tmp/4a6909de-fc88-48f7-a69d-cf165b3b67d9_buggy.java b/tmp/e1a0f7b8-e967-4362-98b1-a4c12307ba67_fixed.java
index c4b260c..43e2d64 100644
--- a/tmp/4a6909de-fc88-48f7-a69d-cf165b3b67d9_buggy.java
+++ b/tmp/e1a0f7b8-e967-4362-98b1-a4c12307ba67_fixed.java
@@ -1,51 +1,58 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // UTF-8 BOM indicator takes precedence over everything else
+        byteData.rewind();
+        docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+            // strip BOM and parse immediately as UTF-8
+            docData = docData.substring(1);
+            doc = parser.parseInput(docData, baseUri);
+            doc.outputSettings().charset(defaultCharset);
+            return doc;
+        }
+        // no BOM detected â€“ rewind and proceed
+        byteData.rewind();
+        if (charsetName == null) {
+            // safe parse as UTF-8, then look for meta charset
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            if (meta != null) {
+                String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
-                    if (foundCharset == null && meta.hasAttr("charset")) {
+                    if ((foundCharset == null || foundCharset.isEmpty()) && meta.hasAttr("charset")) {
+                        String cs = meta.attr("charset");
                         try {
-                            if (Charset.isSupported(meta.attr("charset"))) {
-                                foundCharset = meta.attr("charset");
+                            if (Charset.isSupported(cs)) {
+                                foundCharset = cs;
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
-                } else {
+                } else if (meta.hasAttr("charset")) {
                     foundCharset = meta.attr("charset");
                 }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && !foundCharset.isEmpty()
+                        && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        } else {
+            // charset was specified by header or user
+            Validate.notEmpty(charsetName,
+                "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
