diff --git a/tmp/c241c3f2-45bd-4aee-94be-6cff435fcae5_buggy.java b/tmp/088c095a-62f9-45dd-8d84-2556d2678db0_fixed.java
index c4b260c..e7e16ae 100644
--- a/tmp/c241c3f2-45bd-4aee-94be-6cff435fcae5_buggy.java
+++ b/tmp/088c095a-62f9-45dd-8d84-2556d2678db0_fixed.java
@@ -1,51 +1,62 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+
+    // if no charset given, try UTF-8 and look for a meta tag to override
+    if (charsetName == null) {
+        // safe parse as UTF-8
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
+
+        // look for <meta http-equiv="Content-Type" content="text/html;charset=..."> or <meta charset="...">
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null
+                && foundCharset.length() != 0
+                && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
+        // user/specified charset, just decode once
+        Validate.notEmpty(charsetName,
+            "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+
+    // UTF-8 BOM marker. If present, strip it and re–decode & re–parse
+    if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
         byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
+        docData = Charset.forName(defaultCharset).decode(byteData).toString().substring(1);
         charsetName = defaultCharset;
+        doc = null;  // force re-parse with BOM removed
     }
+
+    // final parse (if we haven't already)
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
+        // if charsetName still null here, outputSettings will default to UTF-8
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
\ No newline at end of file
