diff --git a/tmp/74018670-d8aa-4db2-a9f4-7846a96f3f7e_buggy.java b/tmp/bd606b24-6c89-4bf9-98b2-f5c2f8416d5e_fixed.java
index 2c4ed06..dfb6fff 100644
--- a/tmp/74018670-d8aa-4db2-a9f4-7846a96f3f7e_buggy.java
+++ b/tmp/bd606b24-6c89-4bf9-98b2-f5c2f8416d5e_fixed.java
@@ -1,111 +1,113 @@
-    /** Accept a step, triggering events and step handlers.
-     * @param interpolator step interpolator
-     * @param y state vector at step end time, must be reset if an event
-     * asks for resetting or if an events stops integration during the step
-     * @param yDot placeholder array where to put the time derivative of the state vector
-     * @param tEnd final integration time
-     * @return time at end of step
-     * @exception MathIllegalStateException if the value of one event state cannot be evaluated
-     * @since 2.2
-     */
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MathIllegalStateException {
 
-            double previousT = interpolator.getGlobalPreviousTime();
-            final double currentT = interpolator.getGlobalCurrentTime();
+    // save the full interpolation bounds so we can restore them before any return
+    final double globalPreviousTime = interpolator.getGlobalPreviousTime();
+    final double globalCurrentTime  = interpolator.getGlobalCurrentTime();
+
+    double previousT = globalPreviousTime;
+    final double currentT = globalCurrentTime;
     resetOccurred = false;
 
     // initialize the events states if needed
     if (!statesInitialized) {
         for (EventState state : eventsStates) {
             state.reinitializeBegin(interpolator);
         }
         statesInitialized = true;
     }
 
     // search for next events that may occur during the step
     final int orderingSign = interpolator.isForward() ? +1 : -1;
     SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
-
-                /** {@inheritDoc} */
         public int compare(EventState es0, EventState es1) {
             return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
         }
-
     });
 
-            for (final EventState state : eventsStates) {
+    for (EventState state : eventsStates) {
         if (state.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
             occuringEvents.add(state);
         }
     }
 
+    // process all events in chronological order
     while (!occuringEvents.isEmpty()) {
 
-                // handle the chronologically first event
-                final Iterator<EventState> iterator = occuringEvents.iterator();
-                final EventState currentEvent = iterator.next();
+        // pick the earliest event
+        Iterator<EventState> iterator = occuringEvents.iterator();
+        EventState currentEvent = iterator.next();
         iterator.remove();
 
-                // restrict the interpolator to the first part of the step, up to the event
         final double eventT = currentEvent.getEventTime();
+        // restrict interpolation to [previousT, eventT]
         interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(eventT);
 
-                // trigger the event
+        // interpolate at the event time
         interpolator.setInterpolatedTime(eventT);
         final double[] eventY = interpolator.getInterpolatedState();
         currentEvent.stepAccepted(eventT, eventY);
         isLastStep = currentEvent.stop();
 
-                // handle the first part of the step, up to the event
-                for (final StepHandler handler : stepHandlers) {
+        // let the step handlers handle this sub-step
+        for (StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, isLastStep);
         }
 
         if (isLastStep) {
-                    // the event asked to stop integration
+            // event requested stop
             System.arraycopy(eventY, 0, y, 0, y.length);
+            // restore full interpolation bounds
+            interpolator.setSoftPreviousTime(globalPreviousTime);
+            interpolator.setSoftCurrentTime(globalCurrentTime);
             return eventT;
         }
 
         if (currentEvent.reset(eventT, eventY)) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
+            // event requested a state reset
             System.arraycopy(eventY, 0, y, 0, y.length);
             computeDerivatives(eventT, y, yDot);
             resetOccurred = true;
+            // restore full interpolation bounds
+            interpolator.setSoftPreviousTime(globalPreviousTime);
+            interpolator.setSoftCurrentTime(globalCurrentTime);
             return eventT;
         }
 
-                // prepare handling of the remaining part of the step
+        // prepare for the remainder of the step
         previousT = eventT;
         interpolator.setSoftPreviousTime(eventT);
         interpolator.setSoftCurrentTime(currentT);
 
-                // check if the same event occurs again in the remaining part of the step
+        // check if this same event fires again in the remainder
         if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
             occuringEvents.add(currentEvent);
         }
 
     }
 
+    // no more events, finish the step on [previousT, currentT]
+    interpolator.setSoftPreviousTime(previousT);
+    interpolator.setSoftCurrentTime(currentT);
+
     interpolator.setInterpolatedTime(currentT);
     final double[] currentY = interpolator.getInterpolatedState();
-            for (final EventState state : eventsStates) {
+    for (EventState state : eventsStates) {
         state.stepAccepted(currentT, currentY);
         isLastStep = isLastStep || state.stop();
     }
     isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
-            // handle the remaining part of the step, after all events if any
+    // let the step handlers handle this final sub-step
     for (StepHandler handler : stepHandlers) {
         handler.handleStep(interpolator, isLastStep);
     }
 
+    // restore full interpolation bounds before returning
+    interpolator.setSoftPreviousTime(globalPreviousTime);
+    interpolator.setSoftCurrentTime(globalCurrentTime);
+
     return currentT;
-
 }
\ No newline at end of file
