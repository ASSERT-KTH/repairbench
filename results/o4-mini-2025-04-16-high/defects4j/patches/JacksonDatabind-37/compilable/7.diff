diff --git a/tmp/65ebdc98-7541-4236-8088-9159ac449b7f_buggy.java b/tmp/d0c4536a-ad65-41c2-b6a0-9ec0134abd1f_fixed.java
index e5ad041..bec609e 100644
--- a/tmp/65ebdc98-7541-4236-8088-9159ac449b7f_buggy.java
+++ b/tmp/d0c4536a-ad65-41c2-b6a0-9ec0134abd1f_fixed.java
@@ -1,19 +1,28 @@
 @Override
 protected JavaType _narrow(Class<?> subclass)
 {
+    // if already same class, no change
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
+    // sanity check: must be a true subclass
     if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+        throw new IllegalArgumentException("Class "+subclass.getName()
+                +" not sub-type of "+_class.getName());
     }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+    // fully re-resolve the new type (so supertypes, bindings, etc, are recomputed)
+    com.fasterxml.jackson.databind.type.TypeFactory tf = com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance();
+    JavaType base = tf.constructType(subclass);
+    // propagate any handlers from the original
+    if (_valueHandler != null) {
+        base = base.withValueHandler(_valueHandler);
+    }
+    if (_typeHandler != null) {
+        base = base.withTypeHandler(_typeHandler);
+    }
+    // preserve static-typing flag
+    if (_asStatic) {
+        base = base.withStaticTyping();
+    }
+    return base;
 }
\ No newline at end of file
