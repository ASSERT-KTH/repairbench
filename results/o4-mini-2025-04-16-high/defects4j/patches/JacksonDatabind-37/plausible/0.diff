diff --git a/tmp/961e563f-29b6-406b-9323-2bfe382a374f_buggy.java b/tmp/d1b6a951-ed20-40ec-9040-2830247dcb7c_fixed.java
index e5ad041..8abd647 100644
--- a/tmp/961e563f-29b6-406b-9323-2bfe382a374f_buggy.java
+++ b/tmp/d1b6a951-ed20-40ec-9040-2830247dcb7c_fixed.java
@@ -1,19 +1,31 @@
     @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+    protected JavaType _narrow(Class<?> subclass) {
+        // no change if already the same
         if (_class == subclass) {
             return this;
         }
+        // preserve the old comments about checking assignability, etc:
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+        // fully re-resolve the new subtype (so that super-classes/interfaces
+        // and any type‚Äêbindings get correctly rebuilt), then copy any handlers/static
+        TypeFactory tf = TypeFactory.defaultInstance();
+        JavaType resolved = tf.constructType(subclass);
+        if (_valueHandler != null) {
+            resolved = resolved.withValueHandler(_valueHandler);
+        }
+        if (_typeHandler != null) {
+            resolved = resolved.withTypeHandler(_typeHandler);
+        }
+        if (_asStatic) {
+            resolved = resolved.withStaticTyping();
+        }
+        return resolved;
     }
\ No newline at end of file
