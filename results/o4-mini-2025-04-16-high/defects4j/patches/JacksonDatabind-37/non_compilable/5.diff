diff --git a/tmp/be98d5b9-7e71-498f-99a9-a5f9bc80d129_buggy.java b/tmp/2df2b896-c69f-4f61-b3a7-4e059996d6ac_fixed.java
index e5ad041..e00f205 100644
--- a/tmp/be98d5b9-7e71-498f-99a9-a5f9bc80d129_buggy.java
+++ b/tmp/2df2b896-c69f-4f61-b3a7-4e059996d6ac_fixed.java
@@ -1,19 +1,24 @@
 @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
+    // no change if already the same class
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-        }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+    // Instead of blindly copying the old super‐class/interfaces,
+    // re‐resolve the JavaType for the new subclass so that
+    // its supertypes (and hence its bean properties, annotations, etc.)
+    // are correctly discovered
+    com.fasterxml.jackson.databind.TypeFactory tf = com.fasterxml.jackson.databind.TypeFactory.defaultInstance();
+    JavaType newType = tf.constructType(subclass);
+    // preserve any handlers and static‐typing flag
+    if (_valueHandler != null) {
+        newType = newType.withValueHandler(_valueHandler);
+    }
+    if (_typeHandler != null) {
+        newType = newType.withTypeHandler(_typeHandler);
+    }
+    if (_asStatic) {
+        newType = newType.withStaticTyping();
+    }
+    return newType;
 }
\ No newline at end of file
