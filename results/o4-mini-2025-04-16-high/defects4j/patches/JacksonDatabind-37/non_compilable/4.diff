diff --git a/tmp/a675242d-6657-42bd-9c37-fcef6da2853e_buggy.java b/tmp/71099425-7b29-46a1-982f-431a8393e7ab_fixed.java
index e5ad041..e059361 100644
--- a/tmp/a675242d-6657-42bd-9c37-fcef6da2853e_buggy.java
+++ b/tmp/71099425-7b29-46a1-982f-431a8393e7ab_fixed.java
@@ -1,19 +1,23 @@
 @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-        }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+    // Should we check that there is a sub‐class relationship? (omitted for placeholder types)
+    // Re-resolve everything via the global TypeFactory so that
+    // super-class, interfaces and bindings are correct for the subclass:
+    com.fasterxml.jackson.databind.type.TypeFactory tf = com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance();
+    // construct a new SimpleType for the subclass, carrying over the old bindings
+    com.fasterxml.jackson.databind.type.SimpleType narrowed = tf.simpleType(subclass, _bindings);
+    // copy any handlers and static‐typing flag
+    if (_valueHandler != null) {
+        narrowed = narrowed.withValueHandler(_valueHandler);
+    }
+    if (_typeHandler != null) {
+        narrowed = narrowed.withTypeHandler(_typeHandler);
+    }
+    if (_asStatic) {
+        narrowed = narrowed.withStaticTyping();
+    }
+    return narrowed;
 }
\ No newline at end of file
