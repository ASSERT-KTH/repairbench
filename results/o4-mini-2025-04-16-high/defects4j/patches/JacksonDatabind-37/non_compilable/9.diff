diff --git a/tmp/b2e57b33-5588-491f-9936-635c2abdc721_buggy.java b/tmp/d99470b0-a3b8-469c-a07e-8147c8e683fb_fixed.java
index e5ad041..31258db 100644
--- a/tmp/b2e57b33-5588-491f-9936-635c2abdc721_buggy.java
+++ b/tmp/d99470b0-a3b8-469c-a07e-8147c8e683fb_fixed.java
@@ -1,19 +1,32 @@
 @Override
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
+    // Should we check that there is a sub‐class relationship?
     // 15-Jan-2016, tatu: Almost yes, but there are some complications with
     //    placeholder values, so no.
     /*
     if (!_class.isAssignableFrom(subclass)) {
         throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                 +_class.getName());
     }
     */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+    // Instead of reusing our old super‐type info, re-resolve for the new subclass:
+    TypeFactory tf = _bindings.getTypeFactory();
+    // resolve its (possibly generic) super‐class
+    JavaType newSuper = null;
+    Type genericSuper = subclass.getGenericSuperclass();
+    if (genericSuper != null) {
+        newSuper = tf.constructType(genericSuper);
+    }
+    // resolve its (possibly generic) interfaces
+    Type[] genericInts = subclass.getGenericInterfaces();
+    JavaType[] newInts = new JavaType[genericInts.length];
+    for (int i = 0; i < genericInts.length; i++) {
+        newInts[i] = tf.constructType(genericInts[i]);
+    }
+    return new SimpleType(subclass, _bindings, newSuper, newInts,
             _valueHandler, _typeHandler, _asStatic);
 }
\ No newline at end of file
