diff --git a/tmp/19f8f4d5-48da-41a3-a87e-6506f22745a2_buggy.java b/tmp/069bbb2b-ca49-4dda-a006-da067cdfdbf8_fixed.java
index e5ad041..e39c32b 100644
--- a/tmp/19f8f4d5-48da-41a3-a87e-6506f22745a2_buggy.java
+++ b/tmp/069bbb2b-ca49-4dda-a006-da067cdfdbf8_fixed.java
@@ -1,19 +1,27 @@
 @Override
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
+    // sanity check: subclass really is a subtype of this raw class
     if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+        throw new IllegalArgumentException("Class "+subclass.getName()
+                +" not sub-type of "+_class.getName());
     }
+    /*
+      Instead of re-using the old super‐type information we must re‐resolve
+      supertypes/interfaces for the new raw class so that any generic
+      bindings, etc, are correct.
     */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+    TypeFactory tf = TypeFactory.defaultInstance();
+    JavaType newSuper = tf._resolveSuperClass(subclass, _bindings);
+    JavaType[] newInts = tf._resolveSuperInterfaces(subclass, _bindings);
+    return new SimpleType(subclass,
+                          _bindings,
+                          newSuper,
+                          newInts,
+                          _valueHandler,
+                          _typeHandler,
+                          _asStatic);
 }
\ No newline at end of file
