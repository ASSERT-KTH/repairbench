diff --git a/tmp/8bf4e88a-742f-4d3f-b4da-9b33ce5690b8_buggy.java b/tmp/91c64148-475b-4253-a796-660f5b53b1f1_fixed.java
index 851ffc2..d2c1d7f 100644
--- a/tmp/8bf4e88a-742f-4d3f-b4da-9b33ce5690b8_buggy.java
+++ b/tmp/91c64148-475b-4253-a796-660f5b53b1f1_fixed.java
@@ -1,70 +1,71 @@
 /**
  * Replace the provide statement.
  *
  * If we're providing a name with no definition, then create one.
  * If we're providing a name with a duplicate definition, then make sure
  * that definition becomes a declaration.
  */
 void replace() {
-      if (firstNode == null) {
   // Don't touch the base case ('goog').
+  if ("goog".equals(namespace)) {
     replacementNode = candidateDefinition;
     return;
   }
 
   // Handle the case where there is a duplicate definition for an explicitly
   // provided symbol.
   if (candidateDefinition != null && explicitNode != null) {
+    // Remove the extra provide call.
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
 
-        // Does this need a VAR keyword?
+    // Reuse the existing namespace definition, possibly converting it to 'var'.
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
       candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
-            // Need to convert this assign to a var declaration.
+        // Convert "a.b = {}" to "var a = {}" if needed.
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
         nameNode.addChildToFront(valueNode);
         Node varNode = new Node(Token.VAR, nameNode);
         varNode.copyInformationFrom(candidateDefinition);
         candidateDefinition.getParent().replaceChild(
             candidateDefinition, varNode);
         nameNode.setJSDocInfo(assignNode.getJSDocInfo());
         compiler.reportCodeChange();
         replacementNode = varNode;
       }
     }
   } else {
     // Handle the case where there's not a duplicate definition.
     replacementNode = createDeclarationNode();
     if (firstModule == minimumModule) {
+      // Insert right before the original provide().
       firstNode.getParent().addChildBefore(replacementNode, firstNode);
     } else {
-          // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
+      // Move this code up to the common module of all users.
       int indexOfDot = namespace.indexOf('.');
       if (indexOfDot == -1) {
-            // Any old place is fine.
+        // Top-level namespace with no dot: append anywhere in the common module.
         compiler.getNodeForCodeInsertion(minimumModule)
             .addChildToBack(replacementNode);
       } else {
-            // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
+        // Insert immediately after the declaration of the parent namespace.
+        String parent = namespace.substring(0, indexOfDot);
+        ProvidedName parentName = providedNames.get(parent);
         Preconditions.checkNotNull(parentName);
         Preconditions.checkNotNull(parentName.replacementNode);
         parentName.replacementNode.getParent().addChildAfter(
             replacementNode, parentName.replacementNode);
       }
     }
     if (explicitNode != null) {
       explicitNode.detachFromParent();
     }
     compiler.reportCodeChange();
   }
 }
\ No newline at end of file
