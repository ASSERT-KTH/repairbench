diff --git a/tmp/9575f275-50b4-4792-b285-d48be17c9116_buggy.java b/tmp/cbb70aaa-10d0-4234-9816-16af4a681812_fixed.java
index 851ffc2..536f3cb 100644
--- a/tmp/9575f275-50b4-4792-b285-d48be17c9116_buggy.java
+++ b/tmp/cbb70aaa-10d0-4234-9816-16af4a681812_fixed.java
@@ -1,70 +1,74 @@
 /**
  * Replace the provide statement.
  *
  * If we're providing a name with no definition, then create one.
  * If we're providing a name with a duplicate definition, then make sure
  * that definition becomes a declaration.
  */
 void replace() {
   if (firstNode == null) {
     // Don't touch the base case ('goog').
     replacementNode = candidateDefinition;
     return;
   }
 
   // Handle the case where there is a duplicate definition for an explicitly
   // provided symbol.
   if (candidateDefinition != null && explicitNode != null) {
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
 
     // Does this need a VAR keyword?
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
       candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
         // Need to convert this assign to a var declaration.
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
         nameNode.addChildToFront(valueNode);
         Node varNode = new Node(Token.VAR, nameNode);
         varNode.copyInformationFrom(candidateDefinition);
         candidateDefinition.getParent().replaceChild(
             candidateDefinition, varNode);
         nameNode.setJSDocInfo(assignNode.getJSDocInfo());
         compiler.reportCodeChange();
         replacementNode = varNode;
       }
     }
+
   } else {
     // Handle the case where there's not a duplicate definition.
     replacementNode = createDeclarationNode();
-        if (firstModule == minimumModule) {
+
+    // If this is an explicit goog.provide() in the earliest module, insert
+    // right before the provide call; otherwise treat it like an implicit
+    // namespace and move it to the common (minimum) module.
+    if (explicitNode != null && firstModule == minimumModule) {
       firstNode.getParent().addChildBefore(replacementNode, firstNode);
     } else {
-          // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
       int indexOfDot = namespace.indexOf('.');
       if (indexOfDot == -1) {
-            // Any old place is fine.
+        // Top‚Äêlevel namespace: put it at the end of the minimum module.
         compiler.getNodeForCodeInsertion(minimumModule)
             .addChildToBack(replacementNode);
       } else {
-            // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
+        // Nested namespace: place it just after its parent namespace node.
+        String parentNs = namespace.substring(0, indexOfDot);
+        ProvidedName parentName = providedNames.get(parentNs);
         Preconditions.checkNotNull(parentName);
         Preconditions.checkNotNull(parentName.replacementNode);
         parentName.replacementNode.getParent().addChildAfter(
             replacementNode, parentName.replacementNode);
       }
     }
+
     if (explicitNode != null) {
       explicitNode.detachFromParent();
     }
     compiler.reportCodeChange();
   }
 }
\ No newline at end of file
