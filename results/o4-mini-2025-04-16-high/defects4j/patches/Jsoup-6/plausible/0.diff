diff --git a/tmp/8059440b-51d3-4dda-b5b3-8c2657c1a2fd_buggy.java b/tmp/d0b488d3-b869-4ff1-a2bb-63c56d09c17a_fixed.java
index 99141e0..c8bd9c2 100644
--- a/tmp/8059440b-51d3-4dda-b5b3-8c2657c1a2fd_buggy.java
+++ b/tmp/d0b488d3-b869-4ff1-a2bb-63c56d09c17a_fixed.java
@@ -1,33 +1,37 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    Matcher m = unescapePattern.matcher(string);
+    StringBuffer accum = new StringBuffer(string.length());
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num != null) {
             try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                int base = m.group(2) != null ? 16 : 10;
+                charval = Integer.parseInt(num, base);
             } catch (NumberFormatException e) {
-                } // skip
+                // skip invalid number
+            }
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+        String replacement;
+        // if we resolved an entity (or it was out of BMP)
+        if (charval != -1 || charval > 0xFFFF) {
+            replacement = Character.toString((char) charval);
         } else {
-                m.appendReplacement(accum, m.group(0));
+            // leave the original text (&...;)
+            replacement = m.group(0);
         }
+        // quoteReplacement protects against $ and \ in the replacement
+        m.appendReplacement(accum, Matcher.quoteReplacement(replacement));
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
