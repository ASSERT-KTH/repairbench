diff --git a/tmp/2bea3075-0702-459d-bea5-c2a33aef40d1_buggy.java b/tmp/95bd4d57-3624-4190-81df-1789e756a814_fixed.java
index 99141e0..c7a7776 100644
--- a/tmp/2bea3075-0702-459d-bea5-c2a33aef40d1_buggy.java
+++ b/tmp/95bd4d57-3624-4190-81df-1789e756a814_fixed.java
@@ -1,33 +1,34 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    Matcher m = unescapePattern.matcher(string);
+    StringBuffer accum = new StringBuffer(string.length());
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num != null) {
             try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                int base = m.group(2) != null ? 16 : 10;
+                charval = Integer.parseInt(num, base);
             } catch (NumberFormatException e) {
-                } // skip
+                // skip invalid numeric
+            }
         } else {
             String name = m.group(1);
-                if (full.containsKey(name))
-                    charval = full.get(name);
+            Integer val = full.get(name);
+            if (val != null)
+                charval = val;
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+        if (charval != -1 && charval <= 0xFFFF) {
             String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            m.appendReplacement(accum, Matcher.quoteReplacement(c));
         } else {
-                m.appendReplacement(accum, m.group(0));
+            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
