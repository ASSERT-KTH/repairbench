diff --git a/tmp/0df7609c-53ab-4438-ac83-f259ef42b886_buggy.java b/tmp/cf0b3825-fc53-4efb-a7b9-52e599150595_fixed.java
index ef65dd9..e18f783 100644
--- a/tmp/0df7609c-53ab-4438-ac83-f259ef42b886_buggy.java
+++ b/tmp/cf0b3825-fc53-4efb-a7b9-52e599150595_fixed.java
@@ -1,92 +1,108 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
-
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
+  if (arrayNode.getType() != Token.ARRAYLIT ||
       !functionName.getString().equals("join")) {
     return;
   }
 
+  // Remember the original children in case we need to fall back.
+  List<Node> originalChildren = Lists.newLinkedList();
+  for (Node c = arrayNode.getFirstChild(); c != null; c = c.getNext()) {
+    originalChildren.add(c);
+  }
+
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
   int foldedSize = 0;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
+  int groupCount = 0;
+
+  // Merge consecutive immutable values into sb, inserting joinString between them.
+  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {
     if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+      if (groupCount > 0) {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
+      groupCount++;
     } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+      if (groupCount > 0) {
+        foldedSize += sb.length() + 2;  // +2 for the quotes
         arrayFoldedChildren.add(Node.newString(sb.toString()));
         sb = new StringBuilder();
+        groupCount = 0;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
-      elem = elem.getNext();
   }
-
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
+  if (groupCount > 0) {
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(Node.newString(sb.toString()));
   }
-    // one for each comma.
+  // One cost unit per comma.
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
     case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
+      // [] -> ""
+      parent.replaceChild(n, Node.newString(""));
       break;
 
     case 1:
+      // Single element: try to collapse entirely.
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
+        // Too big to collapse into a literal.  If the original array was all
+        // immutable and had more than one element, fall back to rebuilding
+        // the array with fresh string literals (so we at least normalize quotes).
+        if (originalChildren.size() > 1) {
+          arrayNode.detachChildren();
+          for (Node orig : originalChildren) {
+            if (NodeUtil.isImmutableValue(orig)) {
+              arrayNode.addChildToBack(
+                  Node.newString(NodeUtil.getStringValue(orig)));
+            } else {
+              arrayNode.addChildToBack(orig);
+            }
+          }
+          break;
+        }
+        // Otherwise bail out with no change.
         return;
       }
+      // It is cheaper to collapse to a single literal.
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
+        foldedStringNode = new Node(
+            Token.ADD, Node.newString(""), foldedStringNode);
       }
       parent.replaceChild(n, foldedStringNode);
       break;
 
     default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+      // Partial folding: rebuild the array if anything changed.
+      if (arrayFoldedChildren.size() == originalChildren.size()) {
         return;
       }
       int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
+      foldedSize += kJoinOverhead + InlineCostEstimator.getCost(right);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+      for (Node ch : arrayFoldedChildren) {
+        arrayNode.addChildToBack(ch);
       }
       break;
   }
+
   t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
