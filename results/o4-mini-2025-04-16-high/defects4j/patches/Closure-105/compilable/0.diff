diff --git a/tmp/8d8b92ed-9d38-40fb-a9a4-7d7f161877b7_buggy.java b/tmp/246d837c-12c0-46a2-ad20-3eaa5d060fae_fixed.java
index ef65dd9..2ec2a3a 100644
--- a/tmp/8d8b92ed-9d38-40fb-a9a4-7d7f161877b7_buggy.java
+++ b/tmp/246d837c-12c0-46a2-ad20-3eaa5d060fae_fixed.java
@@ -1,92 +1,93 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
-
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
-        !functionName.getString().equals("join")) {
+    if (arrayNode.getType() != Token.ARRAYLIT
+        || !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
+    int runCount = 0;
     int foldedSize = 0;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
+
+    // Merge runs of immutable values (strings, numbers, booleans) into one literal.
+    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {
       if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+        String value = NodeUtil.getStringValue(elem);
+        if (runCount > 0) {
           sb.append(joinString);
         }
-        sb.append(NodeUtil.getStringValue(elem));
+        sb.append(value);
+        runCount++;
       } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+        if (runCount > 0) {
+          String merged = sb.toString();
+          // +2 for the surrounding quotes.
+          foldedSize += merged.length() + 2;
+          arrayFoldedChildren.add(Node.newString(merged));
+          sb.setLength(0);
+          runCount = 0;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
-      elem = elem.getNext();
     }
-
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(Node.newString(sb.toString()));
+    if (runCount > 0) {
+      String merged = sb.toString();
+      foldedSize += merged.length() + 2;
+      arrayFoldedChildren.add(Node.newString(merged));
     }
-    // one for each comma.
+    // Account for commas in an array literal.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
+        // [] -> ""
+        parent.replaceChild(n, Node.newString(""));
         break;
 
       case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
+        // [x] -> "x", only if it's a literal string
+        Node only = arrayFoldedChildren.get(0);
+        if (only.getType() != Token.STRING) {
+          return;
+        }
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        parent.replaceChild(n, foldedStringNode);
+        parent.replaceChild(n, only);
         break;
 
       default:
-        // No folding could actually be performed.
+        // Partially folded: rebuild the array literal if we actually changed it.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
+        // Cost of "[]\.join()" plus the argument.
+        int joinOverhead = "[].join()".length();
+        foldedSize += joinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+        for (Node newChild : arrayFoldedChildren) {
+          arrayNode.addChildToBack(newChild);
         }
         break;
     }
+
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
