diff --git a/tmp/c48785cc-d88d-4a11-845b-7fbc47b79980_buggy.java b/tmp/8de385a0-16e9-424a-a4af-6435b35eec7b_fixed.java
index ef65dd9..874bf00 100644
--- a/tmp/c48785cc-d88d-4a11-845b-7fbc47b79980_buggy.java
+++ b/tmp/8de385a0-16e9-424a-a4af-6435b35eec7b_fixed.java
@@ -1,92 +1,106 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
-
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
+  if (arrayNode.getType() != Token.ARRAYLIT ||
       !functionName.getString().equals("join")) {
     return;
   }
 
+  // Save the original children in case we need to fall back.
+  List<Node> originalChildren = Lists.newArrayList();
+  for (Node c = arrayNode.getFirstChild(); c != null; c = c.getNext()) {
+    originalChildren.add(c);
+  }
+
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
+  int sbEntries = 0;
   int foldedSize = 0;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
+
+  // Merge adjacent immutable values into sb.
+  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {
     if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+      if (sbEntries > 0) {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
+      sbEntries++;
     } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+      if (sbEntries > 0) {
+        // Flush the sb as one string node.
+        foldedSize += sb.length() + 2; // +2 for the quotes
         arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+        sb.setLength(0);
+        sbEntries = 0;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
-      elem = elem.getNext();
   }
-
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
+  // Flush any trailing sb content.
+  if (sbEntries > 0) {
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(Node.newString(sb.toString()));
   }
-    // one for each comma.
+  // Account for commas between array elements.
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
+
   switch (arrayFoldedChildren.size()) {
     case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
-        break;
+      // [] -> ""
+      parent.replaceChild(n, Node.newString(""));
+      t.getCompiler().reportCodeChange();
+      return;
 
     case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
+      // Single item: maybe fold to a string literal or ""+expr
+      Node foldedNode = arrayFoldedChildren.get(0);
+      if (foldedSize <= originalSize) {
+        // It's a win: replace the whole call with the literal or coerced node.
+        arrayNode.detachChildren();
+        if (foldedNode.getType() != Token.STRING) {
+          foldedNode = new Node(Token.ADD, Node.newString(""), foldedNode);
+        }
+        parent.replaceChild(n, foldedNode);
+        t.getCompiler().reportCodeChange();
+      } else {
+        // Not a size win: restore the original array children (forces a rewrite
+        // so that the code is reprinted uniformly, e.g. with consistent quoting).
+        arrayNode.detachChildren();
+        for (Node orig : originalChildren) {
+          arrayNode.addChildToBack(orig);
+        }
+        t.getCompiler().reportCodeChange();
+      }
       return;
-        }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        parent.replaceChild(n, foldedStringNode);
-        break;
 
     default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+      // Multiple items: only apply if we actually merged something.
+      boolean mergedSomething = arrayFoldedChildren.size()
+                                < originalChildren.size();
+      if (!mergedSomething) {
         return;
       }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
+      // Add join() overhead and the cost of the join argument.
+      foldedSize += "[].join()".length();
       foldedSize += InlineCostEstimator.getCost(right);
       if (foldedSize > originalSize) {
         return;
       }
+      // Rebuild the array literal with the folded children.
       arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
-        break;
+      for (Node c : arrayFoldedChildren) {
+        arrayNode.addChildToBack(c);
       }
       t.getCompiler().reportCodeChange();
+      return;
+  }
 }
\ No newline at end of file
