diff --git a/tmp/b045f085-005a-4210-b9ff-7578a07e9927_buggy.java b/tmp/adc8b41b-55a7-4c56-b542-4638d64a4a09_fixed.java
index ef65dd9..cfd9f84 100644
--- a/tmp/b045f085-005a-4210-b9ff-7578a07e9927_buggy.java
+++ b/tmp/adc8b41b-55a7-4c56-b542-4638d64a4a09_fixed.java
@@ -1,92 +1,92 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
-
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
+  if (arrayNode.getType() != Token.ARRAYLIT ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
+  int sbCount = 0;
   int foldedSize = 0;
+
   Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+  // Merge adjacent immutable values, even empty strings, honoring the join separator.
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+      if (sbCount > 0) {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
+      sbCount++;
     } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
+      if (sbCount > 0) {
+        // +2 for the quotes around the folded string literal.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+        sb.setLength(0);
+        sbCount = 0;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
     elem = elem.getNext();
   }
-
-    if (sb.length() > 0) {
+  if (sbCount > 0) {
     // +2 for the quotes.
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(Node.newString(sb.toString()));
   }
-    // one for each comma.
+  // +1 cost for each comma between array elements.
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
     case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
+      // [].join(...) => ""
+      parent.replaceChild(n, Node.newString(""));
       break;
-
     case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
+      // Only one element after folding => just that element (coerced to string if needed).
+      Node foldedNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
+      if (foldedNode.getType() != Token.STRING) {
+        // Coerce to string.
+        foldedNode = new Node(Token.ADD, Node.newString(""), foldedNode);
       }
-        parent.replaceChild(n, foldedStringNode);
+      parent.replaceChild(n, foldedNode);
       break;
-
     default:
-        // No folding could actually be performed.
+      // More than one element: rebuild the array literal if any constants merged.
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+        // No actual folding happened.
         return;
       }
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += InlineCostEstimator.getCost(right);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+      for (Node newChild : arrayFoldedChildren) {
+        arrayNode.addChildToBack(newChild);
       }
       break;
   }
+
   t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
