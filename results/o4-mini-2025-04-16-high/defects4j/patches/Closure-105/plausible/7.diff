diff --git a/tmp/af8c9915-2938-4b20-a7f0-c74d01d43368_buggy.java b/tmp/c6293b8e-53fb-4896-9d32-9449a3432b09_fixed.java
index ef65dd9..dc37571 100644
--- a/tmp/af8c9915-2938-4b20-a7f0-c74d01d43368_buggy.java
+++ b/tmp/c6293b8e-53fb-4896-9d32-9449a3432b09_fixed.java
@@ -1,92 +1,102 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
+  if (arrayNode.getType() != Token.ARRAYLIT ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
+
+  // Build a new list of children by merging adjacent immutable values.
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
+  int groupCount = 0;
   int foldedSize = 0;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
+
+  // 1) Group together immutable values.
+  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {
     if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+      // If this is not the first in the group, insert the joinString.
+      if (groupCount > 0) {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
+      groupCount++;
     } else {
-        if (sb.length() > 0) {
+      // Flush any pending group.
+      if (groupCount > 0) {
+        String s = sb.toString();
+        arrayFoldedChildren.add(Node.newString(s));
         // +2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
+        foldedSize += s.length() + 2;
         sb = new StringBuilder();
+        groupCount = 0;
       }
+      // Add the non-immutable element.
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
-      elem = elem.getNext();
   }
-
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(Node.newString(sb.toString()));
+  // Flush the final group if any.
+  if (groupCount > 0) {
+    String s = sb.toString();
+    arrayFoldedChildren.add(Node.newString(s));
+    foldedSize += s.length() + 2;
   }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+  // One cost unit per comma between elements.
+  foldedSize += Math.max(0, arrayFoldedChildren.size() - 1);
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
     case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
+      // No elements => always the empty string.
+      parent.replaceChild(n, Node.newString(""));
       break;
 
     case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
+      // Exactly one element => we can remove the .join call entirely.
+      Node foldedNode = arrayFoldedChildren.get(0);
+      // Only apply if it's a win.
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
+      // If it's not already a string literal, force a string coercion.
+      if (foldedNode.getType() != Token.STRING) {
+        foldedNode = new Node(Token.ADD, Node.newString(""), foldedNode);
       }
-        parent.replaceChild(n, foldedStringNode);
+      parent.replaceChild(n, foldedNode);
       break;
 
     default:
-        // No folding could actually be performed.
+      // More than one element. If nothing was actually merged, bail.
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return;
       }
+      // Include the cost of ".join()" and the argument.
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += InlineCostEstimator.getCost(right);
       if (foldedSize > originalSize) {
         return;
       }
+      // Rewrite the array literal to use the folded children.
       arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+      for (Node child : arrayFoldedChildren) {
+        arrayNode.addChildToBack(child);
       }
       break;
   }
+
   t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
