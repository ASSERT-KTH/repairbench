diff --git a/tmp/a9605c7d-6777-4743-bf20-0704c7f3ad51_buggy.java b/tmp/c9de59c9-3282-4937-b757-e33e960c5f97_fixed.java
index 40f74f7..a44548e 100644
--- a/tmp/a9605c7d-6777-4743-bf20-0704c7f3ad51_buggy.java
+++ b/tmp/c9de59c9-3282-4937-b757-e33e960c5f97_fixed.java
@@ -1,50 +1,63 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
+        // only elements can match a name‚Äêtest
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
-
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName      testName     = nodeNameTest.getNodeName();
         String     namespaceURI = nodeNameTest.getNamespaceURI();
         boolean    wildcard     = nodeNameTest.isWildcard();
         String     testPrefix   = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
+        String     localName    = DOMNodePointer.getLocalName(node);
+
+        if (wildcard) {
+            // "*" matches any element regardless of namespace
+            if (testPrefix == null) {
                 return true;
             }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+            // prefix:* matches any element in that namespace
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
             return equalStrings(namespaceURI, nodeNS);
         }
+
+        // specific name test
+        if (!testName.getName().equals(localName)) {
             return false;
         }
+        // if unprefixed, ignore the node's namespace
+        if (testPrefix == null) {
+            return true;
+        }
+        // prefixed name must match namespace
+        String nodeNS = DOMNodePointer.getNamespaceURI(node);
+        return equalStrings(namespaceURI, nodeNS);
+    }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE:
                 return nodeType == Node.ELEMENT_NODE
                     || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT:
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT:
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI:
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
