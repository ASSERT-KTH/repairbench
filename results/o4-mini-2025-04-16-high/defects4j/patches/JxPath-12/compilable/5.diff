diff --git a/tmp/4f472668-d75e-43b3-9673-b7eeca3e28f7_buggy.java b/tmp/948a9187-c58c-448d-960c-f6cb558efa25_fixed.java
index 40f74f7..e603076 100644
--- a/tmp/4f472668-d75e-43b3-9673-b7eeca3e28f7_buggy.java
+++ b/tmp/948a9187-c58c-448d-960c-f6cb558efa25_fixed.java
@@ -1,50 +1,83 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
+        // Normalize empty prefix to null
+        if (testPrefix != null && testPrefix.length() == 0) {
+            testPrefix = null;
+        }
+
+        // A "*" with no prefix matches any element
         if (wildcard && testPrefix == null) {
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+
+        String localName = DOMNodePointer.getLocalName(node);
+        // Match either "*" or exact local name
+        if (wildcard || testName.getName().equals(localName)) {
+            // First try the standard DOM namespaceURI
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
+            // If there's no DOM-based namespace, fall back to xmlns declarations in ancestors
+            if (nodeNS == null || nodeNS.length() == 0) {
+                Node current = node;
+                while (current != null && current.getNodeType() == Node.ELEMENT_NODE) {
+                    NamedNodeMap atts = current.getAttributes();
+                    if (atts != null) {
+                        if (testPrefix == null) {
+                            // default namespace
+                            Node def = atts.getNamedItem("xmlns");
+                            if (def != null) {
+                                nodeNS = def.getNodeValue();
+                                break;
+                            }
+                        } else {
+                            // prefixed namespace
+                            Node attr = atts.getNamedItem("xmlns:" + testPrefix);
+                            if (attr != null) {
+                                nodeNS = attr.getNodeValue();
+                                break;
+                            }
+                        }
+                    }
+                    current = current.getParentNode();
+                }
+            }
             return equalStrings(namespaceURI, nodeNS);
         }
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE:
                 return nodeType == Node.ELEMENT_NODE
                    || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT:
                 return nodeType == Node.CDATA_SECTION_NODE
                    || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT:
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI:
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
