diff --git a/tmp/78efd049-9c05-4454-8d35-e2285738ca81_buggy.java b/tmp/b6874ac6-b226-4824-af0d-cfa58d54ec84_fixed.java
index 40f74f7..82bb739 100644
--- a/tmp/78efd049-9c05-4454-8d35-e2285738ca81_buggy.java
+++ b/tmp/b6874ac6-b226-4824-af0d-cfa58d54ec84_fixed.java
@@ -1,50 +1,67 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
+        String localName = DOMNodePointer.getLocalName(node);
+
+        if (wildcard) {
             String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
+            // "*:*" matches any element, regardless of namespace
+            if (testPrefix == null || testPrefix.length() == 0) {
                 return true;
             }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+            // "ns:*" matches any element in that namespace
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
             return equalStrings(namespaceURI, nodeNS);
         }
+        else {
+            // local-name must match
+            if (!testName.getName().equals(localName)) {
                 return false;
             }
+            // if no namespace was specified in the test, skip namespace check
+            if (namespaceURI == null || namespaceURI.length() == 0) {
+                return true;
+            }
+            // otherwise, namespace must match
+            String nodeNS = DOMNodePointer.getNamespaceURI(node);
+            return equalStrings(namespaceURI, nodeNS);
+        }
+    }
+
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE :
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT :
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT :
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI :
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
+
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
+
     return false;
 }
\ No newline at end of file
