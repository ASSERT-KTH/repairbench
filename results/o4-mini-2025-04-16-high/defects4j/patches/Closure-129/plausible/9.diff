diff --git a/tmp/335b9502-290a-4d00-93b2-3f12855632b0_buggy.java b/tmp/57b0424b-dd30-49b8-b3a8-b74b4e15fada_fixed.java
index e8705ac..5cf7e12 100644
--- a/tmp/335b9502-290a-4d00-93b2-3f12855632b0_buggy.java
+++ b/tmp/57b0424b-dd30-49b8-b3a8-b74b4e15fada_fixed.java
@@ -1,24 +1,26 @@
 /**
  * There are two types of calls we are interested in calls without explicit
  * "this" values (what we are call "free" calls) and direct call to eval.
  */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
+  // peel off any cast nodes so we look at the real call target
   Node first = n.getFirstChild();
+  Node target = first;
+  while (target.isCast()) {
+    target = target.getFirstChild();
+  }
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  // Keep track of the "this" context of a call. A call without an
+  // explicit "this" is a free call.
+  if (!NodeUtil.isGet(target)) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+  if (target.isName() && "eval".equals(target.getString())) {
+    target.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
