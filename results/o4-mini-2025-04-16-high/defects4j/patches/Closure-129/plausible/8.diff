diff --git a/tmp/521ac0a7-1dfa-40e9-a551-32f302aad83e_buggy.java b/tmp/d111a535-157c-4506-b5df-5e179a0619bb_fixed.java
index e8705ac..07aaf50 100644
--- a/tmp/521ac0a7-1dfa-40e9-a551-32f302aad83e_buggy.java
+++ b/tmp/d111a535-157c-4506-b5df-5e179a0619bb_fixed.java
@@ -1,24 +1,21 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
-      Node first = n.getFirstChild();
+  // Peel off any cast nodes so that we correctly detect
+  // property accesses hidden under a /** @type */ cast.
+  Node target = n.getFirstChild();
+  while (target.isCast()) {
+    target = target.getFirstChild();
+  }
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  // A call without an explicit "this" is a free call.
+  if (!NodeUtil.isGet(target)) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+  // Mark direct eval() calls so that we can distinguish
+  // "(0, eval)()" (indirect) from "eval()" (direct).
+  if (target.isName() && "eval".equals(target.getString())) {
+    target.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
