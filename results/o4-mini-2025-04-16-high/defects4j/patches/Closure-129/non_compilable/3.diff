diff --git a/tmp/9ee01222-bb6f-4796-839a-71a3280b7b00_buggy.java b/tmp/4f33cecd-6a21-4302-87f7-034b034cf54c_fixed.java
index e8705ac..7cd4593 100644
--- a/tmp/9ee01222-bb6f-4796-839a-71a3280b7b00_buggy.java
+++ b/tmp/4f33cecd-6a21-4302-87f7-034b034cf54c_fixed.java
@@ -1,24 +1,27 @@
 /**
  * There are two types of calls we are interested in calls without explicit
  * "this" values (what we are call "free" calls) and direct call to eval.
  */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
+  // The first child of a CALL is the function being invoked.
   Node first = n.getFirstChild();
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  // Keep track of the "this" context of a call.
+  // A call without an explicit "this" is a free call.
+  // Ignore any intervening CAST nodes.
+  Node target = first;
+  while (NodeUtil.isCast(target)) {
+    target = target.getFirstChild();
+  }
+  if (!NodeUtil.isGet(target)) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+  // Keep track of the context in which eval is called.
+  // It is important to distinguish between "(0, eval)()" and "eval()".
+  if (first.isName() && "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
