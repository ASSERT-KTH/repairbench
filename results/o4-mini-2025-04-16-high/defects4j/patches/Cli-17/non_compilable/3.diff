diff --git a/tmp/a834bfda-9ecc-4dac-a91c-bbc99c4bef18_buggy.java b/tmp/01f3689f-a444-4376-a030-d4732aaa3577_fixed.java
index 43fb5fd..a255ca0 100644
--- a/tmp/a834bfda-9ecc-4dac-a91c-bbc99c4bef18_buggy.java
+++ b/tmp/01f3689f-a444-4376-a030-d4732aaa3577_fixed.java
@@ -1,55 +1,58 @@
 /**
  * <p>Breaks <code>token</code> into its constituent parts
  * using the following algorithm.
  * <ul>
  *  <li>ignore the first character ("<b>-</b>")</li>
  *  <li>foreach remaining character check if an {@link Option}
  *  exists with that id.</li>
  *  <li>if an {@link Option} does exist then add that character
  *  prepended with "<b>-</b>" to the list of processed tokens.</li>
  *  <li>if the {@link Option} can have an argument value and there 
  *  are remaining characters in the token then add the remaining 
  *  characters as a token to the list of processed tokens.</li>
  *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> 
-     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
-     *  "<b>--</b>" followed by the remaining characters and also 
-     *  the remaining tokens directly to the processed tokens list.</li>
+ *  <code>stopAtNonOption</code> <b>IS</b> set then delegate the
+ *  remainder of the token to <code>process(...)</code> and stop bursting.</li>
  *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
  *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
  *  character prepended with "<b>-</b>".</li>
  * </ul>
  * </p>
  *
  * @param token The current token to be <b>burst</b>
  * @param stopAtNonOption Specifies whether to stop processing
  * at the first non-Option encountered.
  */
+@Override
 protected void burstToken(String token, boolean stopAtNonOption)
 {
     for (int i = 1; i < token.length(); i++)
     {
         String ch = String.valueOf(token.charAt(i));
 
         if (options.hasOption(ch))
         {
             tokens.add("-" + ch);
             currentOption = options.getOption(ch);
 
-                if (currentOption.hasArg() && (token.length() != (i + 1)))
+            if (currentOption.hasArg() && (i + 1 < token.length()))
             {
                 tokens.add(token.substring(i + 1));
-
                 break;
             }
         }
         else if (stopAtNonOption)
         {
+            // once we hit a non‐option in a compound token and are
+            // told to stop, delegate the rest and break out
             process(token.substring(i));
+            break;
         }
         else
         {
+            // not a known option, but we're continuing to burst
             tokens.add(token);
             break;
         }
     }
 }
\ No newline at end of file
