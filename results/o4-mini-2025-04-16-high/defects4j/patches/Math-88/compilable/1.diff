diff --git a/tmp/49a11526-3db3-4850-af01-2aae96bd27c9_buggy.java b/tmp/29eb30e9-4029-4d39-8654-cf1761a0c5d0_fixed.java
index 544303b..dcc9886 100644
--- a/tmp/49a11526-3db3-4850-af01-2aae96bd27c9_buggy.java
+++ b/tmp/29eb30e9-4029-4d39-8654-cf1761a0c5d0_fixed.java
@@ -1,29 +1,42 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
+    // Compute the offset if variables are unrestricted
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    double mostNegative = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));
+    // Extract each original variable's value
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
+        if (basicRow == null) {
+            // non‐basic variable = 0
+            coefficients[i] = 0;
+        } else {
+            double value = getEntry(basicRow, getRhsOffset());
+            if (restrictToNonNegative) {
+                // standard non‐negative simplex: no offset
+                coefficients[i] = value;
+            } else {
+                // free‐variable case: shift and handle degeneracy
+                coefficients[i] = value - mostNegative;
+                // if multiple representations of a free variable are basic
+                // choose the first one and zero out the rest
+                for (int j = getNumObjectiveFunctions();
+                     j < getNumObjectiveFunctions() + i;
+                     j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
                         coefficients[i] = 0;
+                        break;
+                    }
                 }
             }
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
