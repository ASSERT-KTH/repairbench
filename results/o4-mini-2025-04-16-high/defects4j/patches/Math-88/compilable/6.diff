diff --git a/tmp/0fce1f8f-b17f-4875-912d-31ba8ed69951_buggy.java b/tmp/2460a318-08ad-4d7f-9c41-b5537ae77bfa_fixed.java
index 544303b..ec81c37 100644
--- a/tmp/0fce1f8f-b17f-4875-912d-31ba8ed69951_buggy.java
+++ b/tmp/2460a318-08ad-4d7f-9c41-b5537ae77bfa_fixed.java
@@ -1,29 +1,33 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
+    // Compute any shift if variables are free (i.e. not restricted to non-negative).
+    Integer shiftRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    double mostNegative = shiftRow == null ? 0 : getEntry(shiftRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        // Value of variable i is its RHS entry (or zero if non-basic),
+        // minus the shift if variables can be negative.
+        double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))
+                       - (restrictToNonNegative ? 0 : mostNegative);
+        // Only when variables are free (restrictToNonNegative == false)
+        // do we need to guard against multiple basics in one row.
+        if (!restrictToNonNegative && basicRow != null) {
             for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                 if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+                    value = 0;
+                    break;
                 }
             }
         }
+        coefficients[i] = value;
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
