diff --git a/tmp/4dca9401-a651-4b08-ac3e-4da3db809013_buggy.java b/tmp/69b3fc4d-fdb2-4eda-9c51-708ebdd64a67_fixed.java
index 544303b..4414eb3 100644
--- a/tmp/4dca9401-a651-4b08-ac3e-4da3db809013_buggy.java
+++ b/tmp/69b3fc4d-fdb2-4eda-9c51-708ebdd64a67_fixed.java
@@ -1,29 +1,45 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
-        double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
-        for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+        final int n = getOriginalNumDecisionVariables();
+        final double[] coefficients = new double[n];
+
+        /*
+         * If the decision variables were allowed to go negative, we shifted
+         * them all by the same amount to keep the tableau non‐negative.
+         * Find that shift (the most negative basic value) so we can undo it.
+         */
+        double mostNegative = 0;
+        if (!restrictToNonNegative) {
+            final int offset = getNumObjectiveFunctions();
+            final int rhsCol = getRhsOffset();
+            for (int i = 0; i < n; i++) {
+                Integer row = getBasicRow(offset + i);
+                if (row != null) {
+                    double v = getEntry(row, rhsCol);
+                    if (v < mostNegative) {
+                        mostNegative = v;
                     }
                 }
             }
         }
+
+        /*
+         * Now extract each original variable.  If it is basic, take its
+         * RHS value; otherwise it is zero.  Then undo the shift if needed.
+         */
+        final int offset = getNumObjectiveFunctions();
+        final int rhsCol = getRhsOffset();
+        for (int i = 0; i < n; i++) {
+            Integer row = getBasicRow(offset + i);
+            double v = (row == null ? 0.0 : getEntry(row, rhsCol));
+            coefficients[i] = restrictToNonNegative ? v : (v - mostNegative);
+        }
+
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
