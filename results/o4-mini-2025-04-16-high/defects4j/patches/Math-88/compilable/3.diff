diff --git a/tmp/6b796514-3e3f-4eb6-a8ab-e53aff58d8fe_buggy.java b/tmp/0fefd95e-eebb-44c8-8c83-40ed74a28ceb_fixed.java
index 544303b..1f161d3 100644
--- a/tmp/6b796514-3e3f-4eb6-a8ab-e53aff58d8fe_buggy.java
+++ b/tmp/0fefd95e-eebb-44c8-8c83-40ed74a28ceb_fixed.java
@@ -1,29 +1,30 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
-        double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
-        for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
+    int n = getOriginalNumDecisionVariables();
+    double[] coefficients = new double[n];
+    int offset = getNumObjectiveFunctions();
+    if (restrictToNonNegative) {
+        // Simple case: each original variable x_i is in column (offset + i)
+        for (int i = 0; i < n; i++) {
+            Integer row = getBasicRow(offset + i);
+            coefficients[i] = (row == null ? 0.0 : getEntry(row, getRhsOffset()));
         }
+    } else {
+        // Unrestricted variables: x_i = x_i' - psi
+        int psiCol = offset + n;
+        Integer psiRow = getBasicRow(psiCol);
+        double psi = (psiRow == null ? 0.0 : getEntry(psiRow, getRhsOffset()));
+        for (int i = 0; i < n; i++) {
+            Integer row = getBasicRow(offset + i);
+            double val = (row == null ? 0.0 : getEntry(row, getRhsOffset()));
+            coefficients[i] = val - psi;
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
