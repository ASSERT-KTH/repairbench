diff --git a/tmp/a2132bfa-ea4d-43e1-80a6-14ea4e074861_buggy.java b/tmp/6a975104-323e-48f8-aeba-059023e158e2_fixed.java
index 544303b..63841ea 100644
--- a/tmp/a2132bfa-ea4d-43e1-80a6-14ea4e074861_buggy.java
+++ b/tmp/6a975104-323e-48f8-aeba-059023e158e2_fixed.java
@@ -1,29 +1,29 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
+        // prepare array for the original decision variables only
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
+        // if we allow negative values shift the solution so that the smallest
+        // basic value becomes zero
+        Integer offsetRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        double mostNegative = (offsetRow == null) ? 0.0
+                                                   : getEntry(offsetRow, getRhsOffset());
+        // extract each variable's value from the tableau
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
-            }
-        }
-        return new RealPointValuePair(coefficients, f.getValue(coefficients));
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            double value = (basicRow == null) ? 0.0
+                                              : getEntry(basicRow, getRhsOffset());
+            coefficients[i] = restrictToNonNegative
+                              ? value
+                              : value - mostNegative;
+        }
+        // compute objective value and return
+        return new RealPointValuePair(coefficients,
+                                      f.getValue(coefficients));
     }
\ No newline at end of file
