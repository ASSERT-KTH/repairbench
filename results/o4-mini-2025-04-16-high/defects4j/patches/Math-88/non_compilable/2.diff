diff --git a/tmp/108b2261-e239-4ce0-8a1c-36ada28416ec_buggy.java b/tmp/1a068bd3-74a3-4bf6-a231-d5f9a5ccf888_fixed.java
index 544303b..0387c9e 100644
--- a/tmp/108b2261-e239-4ce0-8a1c-36ada28416ec_buggy.java
+++ b/tmp/1a068bd3-74a3-4bf6-a231-d5f9a5ccf888_fixed.java
@@ -1,29 +1,37 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
+@Override
 protected RealPointValuePair getSolution() {
-        double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
-        for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+    int n = getOriginalNumDecisionVariables();
+    double[] coefficients = new double[n];
+    // compute shift if variables were allowed to be negative
+    Integer shiftRow = getBasicRow(getNumObjectiveFunctions() + n);
+    double mostNegative = (shiftRow == null) ? 0 : getEntry(shiftRow, getRhsOffset());
+    for (int i = 0; i < n; i++) {
+        int col = getNumObjectiveFunctions() + i;
+        Integer row = getBasicRow(col);
+        // get the raw value (or zero if non‐basic)
+        double value = (row == null ? 0 : getEntry(row, getRhsOffset()));
+        // undo shift if we allowed negative variables
+        if (!restrictToNonNegative) {
+            value -= mostNegative;
         }
+        // if more than one variable is basic in the same row, only keep the first one
+        if (row != null) {
+            for (int j = 0; j < i; j++) {
+                Integer prevRow = getBasicRow(getNumObjectiveFunctions() + j);
+                if (row.equals(prevRow)) {
+                    value = 0;
+                    break;
                 }
             }
         }
+        coefficients[i] = value;
+    }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
