diff --git a/tmp/12fd610d-b3dd-418d-b016-8df337799f18_buggy.java b/tmp/a012d7af-fea3-4d73-925c-2282dd0c171a_fixed.java
index 544303b..fb5bbf5 100644
--- a/tmp/12fd610d-b3dd-418d-b016-8df337799f18_buggy.java
+++ b/tmp/a012d7af-fea3-4d73-925c-2282dd0c171a_fixed.java
@@ -1,29 +1,24 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
+@Override
 protected RealPointValuePair getSolution() {
-        double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
-        for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
+    // Number of original decision variables
+    final int n = getOriginalNumDecisionVariables();
+    double[] coefficients = new double[n];
+    // If variables are unrestricted we may have shifted them by "mostNegative"
+    Integer shiftRow = getBasicRow(getNumObjectiveFunctions() + n);
+    double mostNegative = (shiftRow == null) ? 0.0 : getEntry(shiftRow, getRhsOffset());
+
+    // For each original variable, if its column is basic read the RHS, else zero
+    for (int i = 0; i < n; i++) {
+        Integer row = getBasicRow(getNumObjectiveFunctions() + i);
+        if (row != null) {
+            double value = getEntry(row, getRhsOffset());
+            coefficients[i] = restrictToNonNegative
+                              ? value
+                              : (value - mostNegative);
+        } else {
+            coefficients[i] = 0.0;
         }
     }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
