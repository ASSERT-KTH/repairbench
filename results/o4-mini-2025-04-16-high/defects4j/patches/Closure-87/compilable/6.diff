diff --git a/tmp/839e7def-bde4-4a7c-94db-0899446a380c_buggy.java b/tmp/dd38e090-b576-41eb-ac1f-ef0186067bb2_fixed.java
index 19fd63e..c9d62a1 100644
--- a/tmp/839e7def-bde4-4a7c-94db-0899446a380c_buggy.java
+++ b/tmp/dd38e090-b576-41eb-ac1f-ef0186067bb2_fixed.java
@@ -1,24 +1,35 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
     Node maybeExpr = n.getFirstChild();
     // IE has a bug where event handlers behave differently when
     // their return value is used vs. when their return value is in
     // an EXPR_RESULT. It's pretty freaking weird. See:
     // http://code.google.com/p/closure-compiler/issues/detail?id=291
     // We try to detect this case, and not fold EXPR_RESULTs
     // into other expressions.
-
     // We only have to worry about methods with an implicit 'this'
     // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+    if (!NodeUtil.isExpressionNode(maybeExpr)) {
+      return false;
+    }
+    // Don't fold into other expressions if it's a call to a ".onXXX" handler.
+    if (maybeExpr.getType() == Token.EXPR_RESULT) {
+      Node call = maybeExpr.getFirstChild();
+      if (call != null && call.getType() == Token.CALL) {
+        Node target = call.getFirstChild();
+        if (target != null && target.getType() == Token.GETPROP) {
+          String prop = target.getLastChild().getString();
+          if (prop != null && prop.startsWith("on")) {
+            return false;
+          }
+        }
+      }
     }
+    return true;
   }
-
   return false;
 }
\ No newline at end of file
