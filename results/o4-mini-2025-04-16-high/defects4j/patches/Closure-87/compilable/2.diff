diff --git a/tmp/7d23a272-9f95-49ee-ad89-d8f743bf7282_buggy.java b/tmp/980e2b01-3c82-4409-91d7-b6d7b5b5173c_fixed.java
index 19fd63e..49149aa 100644
--- a/tmp/7d23a272-9f95-49ee-ad89-d8f743bf7282_buggy.java
+++ b/tmp/980e2b01-3c82-4409-91d7-b6d7b5b5173c_fixed.java
@@ -1,24 +1,26 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression (and not a call to an “on*” event handler, which
+ *     IE treats differently in EXPR_RESULT vs. expression context).
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
+    Node stmt = n.getFirstChild();
+    if (stmt.getType() == Token.EXPR_RESULT) {
+      // Unwrap the expression.
+      Node expr = stmt.getFirstChild();
+      // IE bug workaround: do not fold calls to .on* handlers.
+      if (expr.getType() == Token.CALL) {
+        Node target = expr.getFirstChild();
+        if (target.getType() == Token.GETPROP) {
+          String name = target.getLastChild().getString();
+          if (name.startsWith("on")) {
+            return false;
+          }
+        }
+      }
+      return NodeUtil.isExpressionNode(expr);
     }
   }
-
   return false;
 }
\ No newline at end of file
