diff --git a/tmp/ef567051-e94f-4a11-ab58-a9aa53a12466_buggy.java b/tmp/61a76882-f9cb-4f2f-9485-0e1c638bd52e_fixed.java
index 19fd63e..cdec4f5 100644
--- a/tmp/ef567051-e94f-4a11-ab58-a9aa53a12466_buggy.java
+++ b/tmp/61a76882-f9cb-4f2f-9485-0e1c638bd52e_fixed.java
@@ -1,24 +1,36 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression and is safe to fold into another expression
+ *     (i.e. not an IE event-handler call).
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
     Node maybeExpr = n.getFirstChild();
+
     // IE has a bug where event handlers behave differently when
     // their return value is used vs. when their return value is in
     // an EXPR_RESULT. It's pretty freaking weird. See:
     // http://code.google.com/p/closure-compiler/issues/detail?id=291
     // We try to detect this case, and not fold EXPR_RESULTs
     // into other expressions.
-
     // We only have to worry about methods with an implicit 'this'
     // param, or this doesn't happen.
+    if (maybeExpr.getType() == Token.EXPR_RESULT) {
+      Node expr = maybeExpr.getFirstChild();
+      if (expr != null && expr.getType() == Token.CALL) {
+        Node target = expr.getFirstChild();
+        if (target != null && target.getType() == Token.GETPROP) {
+          String propName = target.getLastChild().getString();
+          // Skip folding calls whose property name starts with "on"
+          // (event handlers) into an expression context.
+          if (propName.startsWith("on")) {
+            return false;
+          }
+        }
+      }
+    }
 
     return NodeUtil.isExpressionNode(maybeExpr);
   }
-    }
-
   return false;
 }
\ No newline at end of file
