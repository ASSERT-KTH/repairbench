diff --git a/tmp/fa183ae0-b846-451f-ba4e-99bfe3c2ccfa_buggy.java b/tmp/78d99f0b-ae43-4c58-b525-fbc2c2544062_fixed.java
index 19fd63e..9de96fd 100644
--- a/tmp/fa183ae0-b846-451f-ba4e-99bfe3c2ccfa_buggy.java
+++ b/tmp/78d99f0b-ae43-4c58-b525-fbc2c2544062_fixed.java
@@ -1,24 +1,31 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, excluding IE‚Äêsensitive event handlers or bracket
+ *     property calls (which can't be safely folded into &&/|| forms).
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {
+    return false;
+  }
+  Node stmt = n.getFirstChild();
+  if (!NodeUtil.isExpressionNode(stmt)) {
+    return false;
   }
+  // Unwrap EXPR_RESULT to inspect the actual expression.
+  Node expr = (stmt.getType() == Token.EXPR_RESULT)
+      ? stmt.getFirstChild()
+      : stmt;
+  // If it's a CALL, reject GETPROP("on*") and any GETELEM.
+  if (expr.getType() == Token.CALL) {
+    Node callTarget = expr.getFirstChild();
+    if (callTarget.getType() == Token.GETPROP) {
+      String propName = callTarget.getLastChild().getString();
+      if (propName.startsWith("on")) {
+        return false;
       }
-
+    } else if (callTarget.getType() == Token.GETELEM) {
       return false;
     }
+  }
+  return true;
+}
\ No newline at end of file
