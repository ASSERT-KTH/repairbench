diff --git a/tmp/c0bfc075-f73d-4438-ab99-e705dbf669ea_buggy.java b/tmp/1281d48f-47cf-4c46-bf0c-51ef8062fac8_fixed.java
index 19fd63e..07e3b09 100644
--- a/tmp/c0bfc075-f73d-4438-ab99-e705dbf669ea_buggy.java
+++ b/tmp/1281d48f-47cf-4c46-bf0c-51ef8062fac8_fixed.java
@@ -1,24 +1,31 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, and safe to fold into another expression.  We
+ *     exclude dynamic property calls and event-handler calls (on*)
+ *     because of IE bugs when their return values are folded into
+ *     other expressions.
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
     Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+    if (NodeUtil.isExpressionNode(maybeExpr)) {
+      // Don't fold a CALL whose target is a dynamic property
+      // (GETELEM) or an event handler (GETPROP whose name starts with "on").
+      Node expr = maybeExpr.getFirstChild();
+      if (expr.getType() == Token.CALL) {
+        Node target = expr.getFirstChild();
+        if (target.getType() == Token.GETELEM) {
+          return false;
+        }
+        if (target.getType() == Token.GETPROP) {
+          String propName = target.getLastChild().getString();
+          if (propName.startsWith("on")) {
+            return false;
+          }
+        }
+      }
+      return true;
     }
   }
-
   return false;
 }
\ No newline at end of file
