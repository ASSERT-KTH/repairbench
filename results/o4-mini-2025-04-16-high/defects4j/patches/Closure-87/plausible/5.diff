diff --git a/tmp/30c37d8e-b186-418d-a348-e4433200e689_buggy.java b/tmp/7be20be9-2207-4efc-a1b6-f5f215e095c6_fixed.java
index 19fd63e..f94ccd0 100644
--- a/tmp/30c37d8e-b186-418d-a348-e4433200e689_buggy.java
+++ b/tmp/7be20be9-2207-4efc-a1b6-f5f215e095c6_fixed.java
@@ -1,24 +1,31 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, and (for fold‐into‐expression rewrites) not an
+ *     IE event‐handler or computed‐property call.
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
     Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+    // Only fold single EXPR_RESULT statements.
+    if (!NodeUtil.isExpressionNode(maybeExpr)) {
+      return false;
+    }
+    // Detect calls we should NOT fold into other expressions:
+    // 1) f.onchange() (event handlers named "on*")
+    // 2) any computed‐property call f['x']()
+    Node expr = maybeExpr.getFirstChild();
+    if (expr != null && expr.getType() == Token.CALL) {
+      Node target = expr.getFirstChild();
+      if (target.getType() == Token.GETPROP) {
+        String propName = target.getLastChild().getString();
+        if (propName.startsWith("on")) {
+          return false;
+        }
+      } else if (target.getType() == Token.GETELEM) {
+        return false;
+      }
     }
+    return true;
   }
-
   return false;
 }
\ No newline at end of file
