diff --git a/tmp/f4a1c37e-4c17-4074-aa5f-836296ffa7ae_buggy.java b/tmp/d2750c2d-ee98-43e9-b222-b059ffa5a934_fixed.java
index 19fd63e..a26465d 100644
--- a/tmp/f4a1c37e-4c17-4074-aa5f-836296ffa7ae_buggy.java
+++ b/tmp/d2750c2d-ee98-43e9-b222-b059ffa5a934_fixed.java
@@ -1,24 +1,37 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression (and safe to fold).  We special‐case out
+ *     event‐handler calls (e.g. obj.onchange()) and bracket calls
+ *     (e.g. obj['x']()) because of IE’s strange return‐value bug.
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
     Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
+    // If this is a lone EXPR_RESULT and that is a CALL,
+    // see if the callee is a GETPROP("on...") or a GETELEM;
+    // if so, do NOT fold it into another expression.
+    if (maybeExpr.getType() == Token.EXPR_RESULT) {
+      Node call = maybeExpr.getFirstChild();
+      if (call != null && call.getType() == Token.CALL) {
+        Node callee = call.getFirstChild();
+        if (callee != null) {
+          // skip bracket notation calls
+          if (callee.getType() == Token.GETELEM) {
+            return false;
+          }
+          // skip event‐handler calls (properties beginning with "on")
+          if (callee.getType() == Token.GETPROP) {
+            String propName = callee.getLastChild().getString();
+            if (propName != null && propName.startsWith("on")) {
+              return false;
+            }
+          }
+        }
+      }
+    }
 
     return NodeUtil.isExpressionNode(maybeExpr);
   }
-    }
-
   return false;
 }
\ No newline at end of file
