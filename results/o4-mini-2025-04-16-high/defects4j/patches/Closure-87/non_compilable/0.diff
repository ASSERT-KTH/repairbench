diff --git a/tmp/f3f9a13e-b168-4cb5-9410-267b3d637e32_buggy.java b/tmp/a9c61692-26dc-4d38-8a9c-83d4f47bd0df_fixed.java
index 19fd63e..0b196b7 100644
--- a/tmp/f3f9a13e-b168-4cb5-9410-267b3d637e32_buggy.java
+++ b/tmp/a9c61692-26dc-4d38-8a9c-83d4f47bd0df_fixed.java
@@ -1,24 +1,35 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression and whose expression can be safely folded into
+ *     another expression (i.e. not an event‐handler call or a GETELEM call).
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
-      }
-    }
-
+  // Must be a BLOCK with exactly one child.
+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {
     return false;
   }
+  Node stmt = n.getFirstChild();
+  // That child must be an expression statement (EXPR_RESULT, RETURN, etc.).
+  if (!NodeUtil.isExpressionNode(stmt)) {
+    return false;
+  }
+  // If it's a call, make sure it isn't a bracket-call or an "onX" event-handler.
+  Node expr = stmt.getFirstChild();
+  if (expr != null && expr.isCall()) {
+    Node target = expr.getFirstChild();
+    if (target != null) {
+      if (target.isGetElem()) {
+        // f['x']() – we do not fold GETELEM calls.
+        return false;
+      }
+      if (target.isGetProp()) {
+        // f.onchange() – skip folding event-handler calls into expressions.
+        String propName = target.getLastChild().getString();
+        if (NodeUtil.isEventHandlerName(propName)) {
+          return false;
+        }
+      }
+    }
+  }
+  return true;
+}
\ No newline at end of file
