diff --git a/tmp/bcc0df5d-e57f-418e-ab8f-65a9bccaa50a_buggy.java b/tmp/e4bd13ef-6f7b-4cd0-bba9-63cafe697239_fixed.java
index 19fd63e..5d04866 100644
--- a/tmp/bcc0df5d-e57f-418e-ab8f-65a9bccaa50a_buggy.java
+++ b/tmp/e4bd13ef-6f7b-4cd0-bba9-63cafe697239_fixed.java
@@ -1,24 +1,24 @@
-  /**
-   * @return Whether the node is a block with a single statement that is
-   *     an expression.
-   */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
     Node maybeExpr = n.getFirstChild();
     // IE has a bug where event handlers behave differently when
     // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
-      }
-    }
-
+    // an EXPR_RESULT. We avoid folding those into && expressions.
+    if (NodeUtil.isExpressionNode(maybeExpr)) {
+      // If it's a call to a .on* property, bail out.
+      // maybeExpr is an EXPR_RESULT, its first child is the real expr.
+      Node expr = maybeExpr.getFirstChild();
+      if (expr != null && expr.isCall()) {
+        Node callee = expr.getFirstChild();
+        if (callee != null && callee.isGetProp()) {
+          String propName = callee.getLastChild().getString();
+          if (propName.startsWith("on") && propName.length() > 2) {
+            return false;
+          }
+        }
+      }
+      return true;
+    }
+  }
   return false;
 }
\ No newline at end of file
