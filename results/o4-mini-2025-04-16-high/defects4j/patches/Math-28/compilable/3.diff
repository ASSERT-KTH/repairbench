diff --git a/tmp/5a0cefb1-7a40-4e53-834f-34a4277304e7_buggy.java b/tmp/d42d11e6-7c9a-4319-97bf-726e46d33140_fixed.java
index c3944a7..c347c6b 100644
--- a/tmp/5a0cefb1-7a40-4e53-834f-34a4277304e7_buggy.java
+++ b/tmp/d42d11e6-7c9a-4319-97bf-726e46d33140_fixed.java
@@ -1,71 +1,67 @@
 /**
  * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
  * @param tableau simple tableau for the problem
-     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
+ * @param col the column to test the ratio of.
  * @return row with the minimum ratio
  */
 private Integer getPivotRow(SimplexTableau tableau, final int col) {
-        // create a list of all the rows that tie for the lowest score in the minimum ratio test
+    // 1) find the minimum positive ratio
     List<Integer> minRatioPositions = new ArrayList<Integer>();
     double minRatio = Double.MAX_VALUE;
     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
         final double entry = tableau.getEntry(i, col);
-
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+            final double rhs   = tableau.getEntry(i, tableau.getWidth() - 1);
             final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
-                final int cmp = Double.compare(ratio, minRatio);
-                if (cmp == 0) {
-                    minRatioPositions.add(i);
-                } else if (cmp < 0) {
+            int cmp = Double.compare(ratio, minRatio);
+            if (cmp < 0) {
                 minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
+                minRatioPositions.clear();
+                minRatioPositions.add(i);
+            } else if (cmp == 0) {
                 minRatioPositions.add(i);
             }
         }
     }
 
-        if (minRatioPositions.size() == 0) {
+    // no valid pivot row => unbounded
+    if (minRatioPositions.isEmpty()) {
         return null;
-        } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
+    }
+
+    // if there is a tie, apply degeneracy handling
+    if (minRatioPositions.size() > 1) {
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
-                for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
+        // (a) try to force an artificial variable out of the basis first
+        for (int r : minRatioPositions) {
+            for (int j = 0; j < tableau.getNumArtificialVariables(); j++) {
+                int artCol = j + tableau.getArtificialVariableOffset();
+                if (Precision.equals(tableau.getEntry(r, artCol), 1d, maxUlps)
+                    && r == tableau.getBasicRow(artCol)) {
+                    return r;
                 }
             }
         }
 
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
+        // (b) Bland's rule: pick the row whose basic variable has the smallest column index
         Integer minRow   = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
+        int     minIndex = Integer.MAX_VALUE;
+        int     width    = tableau.getWidth();
+        for (int r : minRatioPositions) {
+            // find the column of the basic variable for row r
+            for (int c = 0; c < width - 1; c++) {
+                if (r == tableau.getBasicRow(c)) {
+                    if (c < minIndex) {
+                        minIndex = c;
+                        minRow   = r;
                     }
+                    break;
                 }
             }
         }
         return minRow;
     }
+
+    // unique minimum ratio
     return minRatioPositions.get(0);
 }
\ No newline at end of file
