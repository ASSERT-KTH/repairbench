diff --git a/tmp/e623a4b9-b0b1-4cd0-be64-cbd6bb85cfe5_buggy.java b/tmp/a11a4504-37a7-42e1-bfa1-34b32f3b6112_fixed.java
index c3944a7..0ebe84c 100644
--- a/tmp/e623a4b9-b0b1-4cd0-be64-cbd6bb85cfe5_buggy.java
+++ b/tmp/a11a4504-37a7-42e1-bfa1-34b32f3b6112_fixed.java
@@ -1,71 +1,73 @@
 /**
  * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
  * @param tableau simple tableau for the problem
  * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
  * @return row with the minimum ratio
  */
 private Integer getPivotRow(SimplexTableau tableau, final int col) {
-        // create a list of all the rows that tie for the lowest score in the minimum ratio test
     List<Integer> minRatioPositions = new ArrayList<Integer>();
     double minRatio = Double.MAX_VALUE;
-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-            final double entry = tableau.getEntry(i, col);
+    final int width  = tableau.getWidth();
+    final int height = tableau.getHeight();
+    final int numObj = tableau.getNumObjectiveFunctions();
+    final int artOff = tableau.getArtificialVariableOffset();
+    final int numArt = tableau.getNumArtificialVariables();
 
+    // 1) find all rows that achieve the minimal positive ratio
+    for (int row = numObj; row < height; row++) {
+        final double entry = tableau.getEntry(row, col);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+            final double rhs   = tableau.getEntry(row, width - 1);
             final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
             final int cmp = Double.compare(ratio, minRatio);
-                if (cmp == 0) {
-                    minRatioPositions.add(i);
-                } else if (cmp < 0) {
+            if (cmp < 0) {
                 minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
-                    minRatioPositions.add(i);
+                minRatioPositions.clear();
+                minRatioPositions.add(row);
+            } else if (cmp == 0) {
+                minRatioPositions.add(row);
             }
         }
     }
 
-        if (minRatioPositions.size() == 0) {
+    // no valid pivot row
+    if (minRatioPositions.isEmpty()) {
         return null;
-        } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
-
-            // 1. check if there's an artificial variable that can be forced out of the basis
-                for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
-                        }
-                    }
     }
 
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
-                Integer minRow = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
-                            }
-                        }
-                    }
-                }
-                return minRow;
-        }
+    // exactly one, return it
+    if (minRatioPositions.size() == 1) {
         return minRatioPositions.get(0);
     }
+
+    // 2) degeneracy: more than one candidate
+    // 2.a) try to drop an artificial variable first
+    for (Integer row : minRatioPositions) {
+        for (int j = 0; j < numArt; j++) {
+            int colIndex = artOff + j;
+            final double v = tableau.getEntry(row, colIndex);
+            if (Precision.equals(v, 1d, maxUlps)
+                && row.equals(tableau.getBasicRow(colIndex))) {
+                return row;
+            }
+        }
+    }
+
+    // 2.b) Bland's rule: choose the row whose basic variable has the smallest column index
+    Integer bestRow = null;
+    int bestVarIndex = Integer.MAX_VALUE;
+    for (Integer row : minRatioPositions) {
+        for (int j = 0; j < width - 1; j++) {
+            if (row.equals(tableau.getBasicRow(j))) {
+                if (j < bestVarIndex) {
+                    bestVarIndex = j;
+                    bestRow = row;
+                }
+                break;
+            }
+        }
+    }
+
+    // fallback to the top‐most if something went wrong
+    return (bestRow == null) ? minRatioPositions.get(0) : bestRow;
+}
\ No newline at end of file
