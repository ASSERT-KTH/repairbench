diff --git a/tmp/2c65bc17-54cb-49ad-bca3-f9b38c784ecb_buggy.java b/tmp/02510215-cc44-4aac-8c64-43aa11dc0786_fixed.java
index 70ac98c..c3edfff 100644
--- a/tmp/2c65bc17-54cb-49ad-bca3-f9b38c784ecb_buggy.java
+++ b/tmp/02510215-cc44-4aac-8c64-43aa11dc0786_fixed.java
@@ -1,95 +1,106 @@
 /**
  * Create a fraction given the double value and either the maximum error
  * allowed or the maximum number of denominator digits.
  * <p>
  *
  * NOTE: This constructor is called with EITHER
  *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
  *     (that way the maxDenominator has no effect).
  * OR
  *   - a valid maxDenominator value and the epsilon value set to zero
  *     (that way epsilon only has effect if there is an exact match before
  *     the maxDenominator value is reached).
  * </p><p>
-     *
  * It has been done this way so that the same code can be (re)used for both
  * scenarios. However this could be confusing to users if it were part of
  * the public API and this constructor should therefore remain PRIVATE.
  * </p>
  *
  * See JIRA issue ticket MATH-181 for more details:
  *
  *     https://issues.apache.org/jira/browse/MATH-181
  *
  * @param value the double value to convert to a fraction.
  * @param epsilon maximum error allowed.  The resulting fraction is within
  *        {@code epsilon} of {@code value}, in absolute terms.
  * @param maxDenominator maximum denominator value allowed.
  * @param maxIterations maximum number of convergents
  * @throws FractionConversionException if the continued fraction failed to
-     *         converge.
+ *         converge or an integer overflow would occur.
  */
 private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
-        throws FractionConversionException
-    {
-        long overflow = Integer.MAX_VALUE;
+    throws FractionConversionException {
+
+    // the largest (absolute) numerator or denominator we can safely cast to int
+    final long max = Integer.MAX_VALUE;
+
+    // 1) extract integer part of value
     double r0 = value;
     long a0 = (long) FastMath.floor(r0);
-        if (a0 > overflow) {
-            throw new FractionConversionException(value, a0, 1l);
+    // if the integer part is already outside int range, bail out
+    if (a0 > max || a0 < -max) {
+        throw new FractionConversionException(value, a0, 1L);
     }
 
-        // check for (almost) integer arguments, which should not go
-        // to iterations.
+    // 2) check for (almost) integer arguments, which should not go to iterations.
     if (FastMath.abs(a0 - value) < epsilon) {
         this.numerator = (int) a0;
         this.denominator = 1;
         return;
     }
 
-        long p0 = 1;
-        long q0 = 0;
-        long p1 = a0;
-        long q1 = 1;
+    // 3) set up initial convergents: p0/q0 = 1/0, p1/q1 = a0/1
+    long p0 = 1, q0 = 0;
+    long p1 = a0, q1 = 1;
+    long p2 = 0, q2 = 1;
 
-        long p2 = 0;
-        long q2 = 1;
-
-        int n = 0;
+    int iterations = 0;
     boolean stop = false;
-        do {
-            ++n;
+
+    // 4) continued fraction loop
+    while (!stop) {
+        iterations++;
         double r1 = 1.0 / (r0 - a0);
         long a1 = (long) FastMath.floor(r1);
-            p2 = (a1 * p1) + p0;
-            q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+
+        // next convergent p2/q2 = a1 * p1 + p0   /   a1 * q1 + q0
+        p2 = a1 * p1 + p0;
+        q2 = a1 * q1 + q0;
+
+        // check for overflow of the int range
+        if (p2 > max || p2 < -max || q2 > max) {
             throw new FractionConversionException(value, p2, q2);
         }
 
         double convergent = (double) p2 / (double) q2;
-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
-                p0 = p1;
-                p1 = p2;
-                q0 = q1;
-                q1 = q2;
-                a0 = a1;
-                r0 = r1;
+
+        // continue until one of the stop conditions is met:
+        //   a) reached maxIterations
+        //   b) reached desired precision epsilon
+        //   c) exceeded maximum denominator
+        if (iterations < maxIterations
+            && FastMath.abs(convergent - value) > epsilon
+            && q2 < maxDenominator) {
+            // shift the window: (p0,p1) <- (p1,p2), (q0,q1) <- (q1,q2)
+            p0 = p1;  p1 = p2;
+            q0 = q1;  q1 = q2;
+            a0 = a1;  r0 = r1;
         } else {
             stop = true;
         }
-        } while (!stop);
+    }
 
-        if (n >= maxIterations) {
+    // if we ran out of iterations, it's a failure
+    if (iterations >= maxIterations) {
         throw new FractionConversionException(value, maxIterations);
     }
 
+    // select the best valid convergent
     if (q2 < maxDenominator) {
         this.numerator   = (int) p2;
         this.denominator = (int) q2;
     } else {
         this.numerator   = (int) p1;
         this.denominator = (int) q1;
     }
-
 }
\ No newline at end of file
