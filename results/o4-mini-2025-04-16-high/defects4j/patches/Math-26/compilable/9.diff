diff --git a/tmp/79784fe8-4f90-44d3-9dd0-5cff6eacc820_buggy.java b/tmp/a8b4da24-967c-42a0-8ea7-0245a6e37821_fixed.java
index 70ac98c..1b94955 100644
--- a/tmp/79784fe8-4f90-44d3-9dd0-5cff6eacc820_buggy.java
+++ b/tmp/a8b4da24-967c-42a0-8ea7-0245a6e37821_fixed.java
@@ -1,95 +1,98 @@
 /**
  * Create a fraction given the double value and either the maximum error
  * allowed or the maximum number of denominator digits.
-     * <p>
  *
  * NOTE: This constructor is called with EITHER
  *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
  *     (that way the maxDenominator has no effect).
  * OR
  *   - a valid maxDenominator value and the epsilon value set to zero
  *     (that way epsilon only has effect if there is an exact match before
  *     the maxDenominator value is reached).
-     * </p><p>
  *
  * It has been done this way so that the same code can be (re)used for both
  * scenarios. However this could be confusing to users if it were part of
  * the public API and this constructor should therefore remain PRIVATE.
-     * </p>
-     *
-     * See JIRA issue ticket MATH-181 for more details:
-     *
-     *     https://issues.apache.org/jira/browse/MATH-181
  *
  * @param value the double value to convert to a fraction.
  * @param epsilon maximum error allowed.  The resulting fraction is within
  *        {@code epsilon} of {@code value}, in absolute terms.
  * @param maxDenominator maximum denominator value allowed.
  * @param maxIterations maximum number of convergents
  * @throws FractionConversionException if the continued fraction failed to
-     *         converge.
+ *         converge or no exact match was found when epsilon == 0
  */
 private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
-        throws FractionConversionException
-    {
-        long overflow = Integer.MAX_VALUE;
+    throws FractionConversionException {
+
+    // The largest (resp. smallest) integer we can safely cast to int
+    final long maxInt = Integer.MAX_VALUE;
+    final long minInt = Integer.MIN_VALUE;
+
     double r0 = value;
     long a0 = (long) FastMath.floor(r0);
-        if (a0 > overflow) {
-            throw new FractionConversionException(value, a0, 1l);
+    // check initial integer overflow in either direction
+    if (a0 > maxInt || a0 < minInt) {
+        throw new FractionConversionException(value, a0, 1L);
     }
-
-        // check for (almost) integer arguments, which should not go
-        // to iterations.
-        if (FastMath.abs(a0 - value) < epsilon) {
+    // check for (almost) integer arguments
+    if (FastMath.abs(a0 - value) <= epsilon) {
         this.numerator   = (int) a0;
         this.denominator = 1;
         return;
     }
 
-        long p0 = 1;
-        long q0 = 0;
-        long p1 = a0;
-        long q1 = 1;
-
-        long p2 = 0;
-        long q2 = 1;
+    long p0 = 1,    q0 = 0;
+    long p1 = a0,   q1 = 1;
+    long p2 = 0,    q2 = 1;
 
     int n = 0;
-        boolean stop = false;
-        do {
+    double convergent = 0;
+    while (true) {
         ++n;
+        // compute next term of the continued fraction
         double r1 = 1.0 / (r0 - a0);
         long a1 = (long) FastMath.floor(r1);
-            p2 = (a1 * p1) + p0;
-            q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+        // update convergents
+        p2 = a1 * p1 + p0;
+        q2 = a1 * q1 + q0;
+        // check overflow of numerator or denominator
+        if (p2 > maxInt || p2 < minInt ||
+            q2 > maxInt || q2 < minInt) {
             throw new FractionConversionException(value, p2, q2);
         }
-
-            double convergent = (double)p2 / (double)q2;
-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
-                p0 = p1;
-                p1 = p2;
-                q0 = q1;
-                q1 = q2;
-                a0 = a1;
-                r0 = r1;
+        convergent = (double) p2 / (double) q2;
+        // decide whether to stop
+        if (n < maxIterations &&
+            FastMath.abs(convergent - value) > epsilon &&
+            q2 < maxDenominator) {
+            // shift for next iteration
+            p0 = p1;  p1 = p2;
+            q0 = q1;  q1 = q2;
+            a0 = a1;  r0 = r1;
         } else {
-                stop = true;
+            break;
+        }
     }
-        } while (!stop);
 
+    // check for too many iterations
     if (n >= maxIterations) {
         throw new FractionConversionException(value, maxIterations);
     }
 
+    // pick the best convergent not exceeding the denominator limit
     if (q2 < maxDenominator) {
         this.numerator   = (int) p2;
         this.denominator = (int) q2;
     } else {
         this.numerator   = (int) p1;
         this.denominator = (int) q1;
     }
 
+    // if no tolerance allowed but result is not exact, fail
+    if (FastMath.abs(((double) this.numerator / this.denominator) - value) > epsilon) {
+        throw new FractionConversionException(value,
+                                              this.numerator,
+                                              this.denominator);
+    }
 }
\ No newline at end of file
