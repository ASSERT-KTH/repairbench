diff --git a/tmp/a5590e3a-f20a-4c49-acbb-0ebd3025ddc3_buggy.java b/tmp/c4c8cb34-be8b-442e-9a17-7fa31cc27edf_fixed.java
index 66e3d01..5368481 100644
--- a/tmp/a5590e3a-f20a-4c49-acbb-0ebd3025ddc3_buggy.java
+++ b/tmp/c4c8cb34-be8b-442e-9a17-7fa31cc27edf_fixed.java
@@ -1,34 +1,51 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
+  if (val == null) {
+    return false;
+  }
   switch (val.getType()) {
+    // Literal values are always fine.
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
-      // Binary operators are only valid if both children are valid.
+    // Unary operators: just check the single child.
+    case Token.NEG:
+    case Token.NOT:
+    case Token.BITNOT: {
+      Node child = val.getFirstChild();
+      return child != null && isValidDefineValue(child, defines);
+    }
+
+    // Binary operators: both operands must be valid.
+    case Token.ADD:
+    case Token.SUB:
+    case Token.MUL:
+    case Token.DIV:
+    case Token.MOD:
     case Token.BITAND:
-      case Token.BITNOT:
     case Token.BITOR:
-      case Token.BITXOR:
+    case Token.BITXOR: {
+      Node left = val.getFirstChild();
+      if (left == null) {
+        return false;
+      }
+      Node right = left.getNext();
+      return right != null
+          && isValidDefineValue(left, defines)
+          && isValidDefineValue(right, defines);
+    }
 
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
+    // Names or qualified names must be in the define‚Äêset.
     case Token.NAME:
     case Token.GETPROP:
       if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
       }
-    }
       return false;
+
+    default:
+      return false;
+  }
 }
\ No newline at end of file
