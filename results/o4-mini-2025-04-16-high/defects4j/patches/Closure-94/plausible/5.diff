diff --git a/tmp/0d9e7077-1451-44b5-8b7c-a6d2cddb66ec_buggy.java b/tmp/1e5b61a9-dda0-4ed1-8680-3cde69710162_fixed.java
index 66e3d01..15af3e5 100644
--- a/tmp/0d9e7077-1451-44b5-8b7c-a6d2cddb66ec_buggy.java
+++ b/tmp/1e5b61a9-dda0-4ed1-8680-3cde69710162_fixed.java
@@ -1,34 +1,34 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
   switch (val.getType()) {
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
+    // Unary operators are valid if their single child is valid.
     case Token.NOT:
     case Token.NEG:
+    case Token.BITNOT:
       return isValidDefineValue(val.getFirstChild(), defines);
 
-      // Names are valid if and only if they are defines themselves.
+    // Binary operators are valid if both children are valid.
+    case Token.BITAND:
+    case Token.BITOR:
+    case Token.BITXOR:
+    case Token.ADD:
+      Node left = val.getFirstChild();
+      Node right = left.getNext();
+      return isValidDefineValue(left, defines)
+          && isValidDefineValue(right, defines);
+
+    // Names/qualified names are only valid if they've been declared as defines.
     case Token.NAME:
     case Token.GETPROP:
       if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
       }
+      break;
   }
   return false;
 }
\ No newline at end of file
