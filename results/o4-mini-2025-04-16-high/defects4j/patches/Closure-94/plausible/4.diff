diff --git a/tmp/ed061fff-fd1d-4abc-90ff-0ac9324b3366_buggy.java b/tmp/4f750181-2d98-4b35-b65e-0d403116f15f_fixed.java
index 66e3d01..8c349fd 100644
--- a/tmp/ed061fff-fd1d-4abc-90ff-0ac9324b3366_buggy.java
+++ b/tmp/4f750181-2d98-4b35-b65e-0d403116f15f_fixed.java
@@ -1,34 +1,46 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
   switch (val.getType()) {
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
+    case Token.NAME:
+    case Token.GETPROP:
+      // Only allow refering to another @define name.
+      return val.isQualifiedName() &&
+             defines.contains(val.getQualifiedName());
 
-      // Uniary operators are valid if the child is valid.
+    // Unary operators: valid if their single child is valid.
     case Token.NOT:
     case Token.NEG:
+    case Token.BITNOT:
       return isValidDefineValue(val.getFirstChild(), defines);
 
-      // Names are valid if and only if they are defines themselves.
-      case Token.NAME:
-      case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
-        }
-    }
+    // Binary operators: valid if both children are valid.
+    case Token.BITAND:
+    case Token.BITOR:
+    case Token.BITXOR:
+    case Token.ADD:
+    case Token.SUB:
+    case Token.MUL:
+    case Token.DIV:
+    case Token.MOD:
+      Node left = val.getFirstChild();
+      Node right = (left != null) ? left.getNext() : null;
+      return left != null
+          && right != null
+          && isValidDefineValue(left, defines)
+          && isValidDefineValue(right, defines);
+
+    default:
       return false;
   }
+}
\ No newline at end of file
