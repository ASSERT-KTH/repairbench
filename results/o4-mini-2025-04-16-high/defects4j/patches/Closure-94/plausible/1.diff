diff --git a/tmp/5ac9d653-d21d-4f8a-af3b-fba7cc1ffede_buggy.java b/tmp/39128b2f-3118-4aa2-b76b-80dbcf9288d8_fixed.java
index 66e3d01..a855ddd 100644
--- a/tmp/5ac9d653-d21d-4f8a-af3b-fba7cc1ffede_buggy.java
+++ b/tmp/39128b2f-3118-4aa2-b76b-80dbcf9288d8_fixed.java
@@ -1,34 +1,44 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
   switch (val.getType()) {
     case Token.STRING:
     case Token.NUMBER:
     case Token.TRUE:
     case Token.FALSE:
       return true;
 
-      // Binary operators are only valid if both children are valid.
+    // Binary operators: both operands must be valid.
+    case Token.ADD:
+    case Token.SUB:
+    case Token.MUL:
+    case Token.DIV:
+    case Token.MOD:
     case Token.BITAND:
-      case Token.BITNOT:
     case Token.BITOR:
     case Token.BITXOR:
+    case Token.LSH:
+    case Token.RSH:
+    case Token.URSH: {
+      for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+        if (!isValidDefineValue(child, defines)) {
+          return false;
+        }
+      }
+      return true;
+    }
 
-      // Uniary operators are valid if the child is valid.
+    // Unary operators: single operand must be valid.
     case Token.NOT:
     case Token.NEG:
+    case Token.BITNOT:
       return isValidDefineValue(val.getFirstChild(), defines);
 
-      // Names are valid if and only if they are defines themselves.
+    // Names or qualified names only if present in the defines set.
     case Token.NAME:
     case Token.GETPROP:
       if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
       }
+      break;
   }
   return false;
 }
\ No newline at end of file
