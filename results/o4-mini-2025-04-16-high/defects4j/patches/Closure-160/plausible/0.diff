diff --git a/tmp/39b2166c-ec53-45fe-8519-84c7c5901528_buggy.java b/tmp/328434eb-1bf4-4950-957c-b6b4dba26c1c_fixed.java
index b05b859..64611b8 100644
--- a/tmp/39b2166c-ec53-45fe-8519-84c7c5901528_buggy.java
+++ b/tmp/328434eb-1bf4-4950-957c-b6b4dba26c1c_fixed.java
@@ -1,61 +1,62 @@
-  /**
-   * Initialize the compiler options. Only necessary if you're not doing
-   * a normal compile() job.
-   */
 public void initOptions(CompilerOptions options) {
   this.options = options;
   if (errorManager == null) {
     if (outStream == null) {
       setErrorManager(
           new LoggerErrorManager(createMessageFormatter(), logger));
     } else {
       PrintStreamErrorManager printer =
           new PrintStreamErrorManager(createMessageFormatter(), outStream);
       printer.setSummaryDetailLevel(options.summaryDetailLevel);
       setErrorManager(printer);
     }
   }
 
   // DiagnosticGroups override the plain checkTypes option.
   if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = true;
   } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = false;
   } else if (!options.checkTypes) {
     // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
+    // option, and checkTypes is disabled, then turn off the
     // parser type warnings.
     options.setWarningLevel(
-          DiagnosticGroup.forType(
-              RhinoErrorReporter.TYPE_PARSE_ERROR),
+        DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),
         CheckLevel.OFF);
   }
 
   if (options.checkGlobalThisLevel.isOn()) {
     options.setWarningLevel(
         DiagnosticGroups.GLOBAL_THIS,
         options.checkGlobalThisLevel);
   }
 
   // Initialize the warnings guard.
   List<WarningsGuard> guards = Lists.newArrayList();
+  // Always suppress @nocompile doc warnings first.
   guards.add(
       new SuppressDocWarningsGuard(
           getDiagnosticGroups().getRegisteredGroups()));
-    guards.add(options.getWarningsGuard());
 
+  // Capture the user-specified guard so we can detect overrides.
+  WarningsGuard userGuard = options.getWarningsGuard();
 
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
+  // Only shut off the missing-variable warnings if the user has
+  // not explicitly overridden them.
   if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
-      guards.add(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+      (userGuard == null ||
+       !userGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {
+    guards.add(
+        new DiagnosticGroupWarningsGuard(
+            DiagnosticGroups.CHECK_VARIABLES,
+            CheckLevel.OFF));
+  }
+
+  // Finally add the user guard so explicit --jscomp_* flags win.
+  if (userGuard != null) {
+    guards.add(userGuard);
   }
 
   this.warningsGuard = new ComposeWarningsGuard(guards);
 }
\ No newline at end of file
