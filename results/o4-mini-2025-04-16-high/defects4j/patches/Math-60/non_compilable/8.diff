diff --git a/tmp/6e03ea29-dd35-4589-9090-9d40e3b60a3f_buggy.java b/tmp/049e5164-3256-41e6-97dc-a3a117e4813c_fixed.java
index 3127f85..bd0de12 100644
--- a/tmp/6e03ea29-dd35-4589-9090-9d40e3b60a3f_buggy.java
+++ b/tmp/049e5164-3256-41e6-97dc-a3a117e4813c_fixed.java
@@ -1,24 +1,33 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
+
+    // Top‐code extreme values beyond 40σ
+    if (dev <= -40.0 * standardDeviation) {
+        return 0.0;
+    }
+    if (dev >=  40.0 * standardDeviation) {
+        return 1.0;
+    }
+
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
+    } catch (ConvergenceException ex) {
+        // In some JDKs Erf.erf/erfc may fail for very large arguments;
+        // for |x - mean| > 20σ we simply return 0 or 1
+        if (dev <= -20.0 * standardDeviation) {
+            return 0.0;
+        } else if (dev >= 20.0 * standardDeviation) {
+            return 1.0;
+        }
         throw ex;
     }
 }
\ No newline at end of file
-    }
