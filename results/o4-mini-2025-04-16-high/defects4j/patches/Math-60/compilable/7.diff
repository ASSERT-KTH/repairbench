diff --git a/tmp/538dcd0d-c102-42e6-9fab-ddaa810b97ed_buggy.java b/tmp/fe3520a7-c313-4092-9ff2-b37aecb3dd6c_fixed.java
index 3127f85..4ad4615 100644
--- a/tmp/538dcd0d-c102-42e6-9fab-ddaa810b97ed_buggy.java
+++ b/tmp/fe3520a7-c313-4092-9ff2-b37aecb3dd6c_fixed.java
@@ -1,24 +1,23 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
+    // explicitly handle infinities so Erf.erf is never called with ±∞
+    if (x == Double.POSITIVE_INFINITY) {
+        return 1.0;
+    }
+    if (x == Double.NEGATIVE_INFINITY) {
+        return 0.0;
+    }
     final double dev = x - mean;
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+        return 0.5 * (1.0 +
+               Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
+        // fall back to top‐coding if extreme values blow up
+        if (x < (mean - 20 * standardDeviation)) {
+            return 0.0;
         } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
+            return 1.0;
+        }
+        // otherwise rethrow
         throw ex;
     }
 }
\ No newline at end of file
-    }
