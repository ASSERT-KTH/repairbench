diff --git a/tmp/ce0f7d60-f980-4c6f-a8d4-4b55cc6812d8_buggy.java b/tmp/80069220-064e-4de4-8eff-e54458b25cc6_fixed.java
index 3127f85..0d20891 100644
--- a/tmp/ce0f7d60-f980-4c6f-a8d4-4b55cc6812d8_buggy.java
+++ b/tmp/80069220-064e-4de4-8eff-e54458b25cc6_fixed.java
@@ -1,24 +1,31 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
+    // extreme values: beyond 40σ, return exact 0 or 1
+    if (dev <= -40.0 * standardDeviation) {
+        return 0.0;
+    }
+    if (dev >= 40.0 * standardDeviation) {
+        return 1.0;
+    }
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+        return 0.5 * (1.0 +
+                      Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
+        // fallback for JDK issues beyond ~20σ
+        if (dev <= -20.0 * standardDeviation) {
+            return 0.0;
+        } else if (dev >= 20.0 * standardDeviation) {
+            return 1.0;
+        }
         throw ex;
     }
 }
\ No newline at end of file
-    }
