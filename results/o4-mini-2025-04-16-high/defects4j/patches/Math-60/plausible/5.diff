diff --git a/tmp/c2a06dbd-0d6b-4104-984e-b43298bc37ff_buggy.java b/tmp/b2632f49-18a1-4ebe-a3b3-7692c575bc15_fixed.java
index 3127f85..b8a51d9 100644
--- a/tmp/c2a06dbd-0d6b-4104-984e-b43298bc37ff_buggy.java
+++ b/tmp/b2632f49-18a1-4ebe-a3b3-7692c575bc15_fixed.java
@@ -1,24 +1,12 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
+    // shortcut for extreme values (including infinities)
     final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
+    if (dev <= -20.0 * standardDeviation) {
+        return 0.0;
     }
+    if (dev >=  20.0 * standardDeviation) {
+        return 1.0;
     }
+    // normal region
+    return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
 }
\ No newline at end of file
