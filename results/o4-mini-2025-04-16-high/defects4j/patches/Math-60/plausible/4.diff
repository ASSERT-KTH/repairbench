diff --git a/tmp/74f6ef15-beaa-4504-9283-67e324d854dc_buggy.java b/tmp/546a0b66-1e98-4c02-a126-b88add6387b4_fixed.java
index 3127f85..b70cd21 100644
--- a/tmp/74f6ef15-beaa-4504-9283-67e324d854dc_buggy.java
+++ b/tmp/546a0b66-1e98-4c02-a126-b88add6387b4_fixed.java
@@ -1,24 +1,34 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
+    // handle NaN and infinities explicitly
+    if (Double.isNaN(x)) {
+        return Double.NaN;
+    }
+    if (x == Double.POSITIVE_INFINITY) {
+        return 1.0;
+    }
+    if (x == Double.NEGATIVE_INFINITY) {
+        return 0.0;
+    }
     final double dev = x - mean;
+    final double sd  = standardDeviation;
+    // top-code at 40 standard deviations
+    final double limit = 40.0 * sd;
+    if (dev <= -limit) {
+        return 0.0;
+    }
+    if (dev >= limit) {
+        return 1.0;
+    }
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
+        return 0.5 * (1.0 + Erf.erf(dev / (sd * FastMath.sqrt(2.0))));
+    } catch (MathException ex) {
+        // if the internal algorithm fails, fall back to 20 Ïƒ top-coding
+        final double fallback = 20.0 * sd;
+        if (dev <= -fallback) {
+            return 0.0;
+        } else if (dev >= fallback) {
+            return 1.0;
+        }
         throw ex;
     }
 }
\ No newline at end of file
-    }
