diff --git a/tmp/1ee3954e-fe56-4f81-85de-b8943bf33839_buggy.java b/tmp/b1817ee0-8009-452c-ac79-ffbd79701be1_fixed.java
index 14b78fb..0bef925 100644
--- a/tmp/1ee3954e-fe56-4f81-85de-b8943bf33839_buggy.java
+++ b/tmp/b1817ee0-8009-452c-ac79-ffbd79701be1_fixed.java
@@ -1,56 +1,30 @@
-    /**
-     * Finds the next text wrap position after <code>startPos</code> for the
-     * text in <code>text</code> with the column width <code>width</code>.
-     * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
-     *
-     * @param text The text being searched for the wrap position
-     * @param width width of the wrapped text
-     * @param startPos position from which to start the lookup whitespace
-     * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
-     */
-    protected int findWrapPos(String text, int width, int startPos)
-    {
-        int pos;
+protected int findWrapPos(String text, int width, int startPos) {
+    int textLen = text.length();
+    int end = startPos + width;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
-            return pos + 1;
+    // break at an explicit newline or carriage return if within the wrap width
+    int nl = text.indexOf('\n', startPos);
+    if (nl != -1 && nl <= end) {
+        return nl + 1;
     }
-        else if (startPos + width >= text.length())
-        {
+    int cr = text.indexOf('\r', startPos);
+    if (cr != -1 && cr <= end) {
+        return cr + 1;
+    }
+
+    // no more text to wrap
+    if (end >= textLen) {
         return -1;
     }
 
-
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
-            --pos;
-        }
-
-        // if we found it - just return
-        if (pos > startPos)
-        {
+    // look backwards for the last whitespace before or at 'end'
+    for (int pos = end; pos > startPos; pos--) {
+        char c = text.charAt(pos);
+        if (c == ' ' || c == '\n' || c == '\r') {
             return pos;
         }
+    }
 
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+    // no whitespace found -> cut at width
+    return end;
 }
\ No newline at end of file
