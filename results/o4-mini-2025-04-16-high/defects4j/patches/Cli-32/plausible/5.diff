diff --git a/tmp/5494508b-2172-43ee-a1f8-a56abeb621e4_buggy.java b/tmp/f54de558-26d3-45d0-9e07-cef41235efee_fixed.java
index 14b78fb..11bf6da 100644
--- a/tmp/5494508b-2172-43ee-a1f8-a56abeb621e4_buggy.java
+++ b/tmp/f54de558-26d3-45d0-9e07-cef41235efee_fixed.java
@@ -1,56 +1,43 @@
 /**
  * Finds the next text wrap position after <code>startPos</code> for the
  * text in <code>text</code> with the column width <code>width</code>.
  * The wrap point is the last position before startPos+width having a 
  * whitespace character (space, \n, \r). If there is no whitespace character
  * before startPos+width, it will return startPos+width.
  *
  * @param text The text being searched for the wrap position
  * @param width width of the wrapped text
  * @param startPos position from which to start the lookup whitespace
  * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
+ * @return position on which the text must be wrapped or -1 if the wrap
  * position is at the end of the text
  */
-    protected int findWrapPos(String text, int width, int startPos)
-    {
+protected int findWrapPos(String text, int width, int startPos) {
     int pos;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
+    // check for a newline or tab before the wrap limit
+    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= startPos + width)
+        || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= startPos + width)) {
         return pos + 1;
     }
-        else if (startPos + width >= text.length())
-        {
+    // if the remaining text is shorter than the width, no more wraps
+    if (startPos + width >= text.length()) {
         return -1;
     }
 
-
     // look for the last whitespace character before startPos+width
     pos = startPos + width;
-
     char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
-            --pos;
+    while (pos >= startPos
+           && ( (c = text.charAt(pos)) != ' '
+             && c != '\n' && c != '\r' )) {
+        pos--;
     }
-
-        // if we found it - just return
-        if (pos > startPos)
-        {
+    // if we found a whitespace before startPos+width, wrap there
+    if (pos > startPos) {
         return pos;
     }
 
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
+    // no whitespace found in the window, cut exactly at width
+    return startPos + width;
 }
\ No newline at end of file
