diff --git a/tmp/3414b75e-7a02-4190-ab8e-75e1f4a8f30f_buggy.java b/tmp/b42c329d-522d-4118-8971-1bd74cab43cf_fixed.java
index 670114d..2f75644 100644
--- a/tmp/3414b75e-7a02-4190-ab8e-75e1f4a8f30f_buggy.java
+++ b/tmp/b42c329d-522d-4118-8971-1bd74cab43cf_fixed.java
@@ -1,48 +1,60 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
+
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
+
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns != null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
   if (n.isAssign()) {
     Node nameNode = n.getFirstChild();
-
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null) {
       if (ns.isPrototype) {
         recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
       } else {
         recordSet(ns.name, nameNode);
       }
     }
+
   } else if (n.isCall()) {
     Node nameNode = n.getFirstChild();
+    // Special‐case goog.inherits so its call is treated purely as a
+    // "class‐defining" invocation and can be removed under smartNameRemoval.
+    String qname = NodeUtil.getQualifiedName(nameNode);
+    if ("goog.inherits".equals(qname)) {
+      JsName fnName = getName(qname, false);
+      if (fnName != null) {
+        refNodes.add(new ClassDefiningFunctionNode(
+            fnName, n, parent, parent.getParent()));
+      }
+    } else {
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null && ns.onlyAffectsClassDef) {
-          JsName name = getName(ns.name, false);
-          if (name != null) {
+        JsName fnName = getName(ns.name, false);
+        if (fnName != null) {
           refNodes.add(new ClassDefiningFunctionNode(
-              name, n, parent, parent.getParent()));
+              fnName, n, parent, parent.getParent()));
+        }
       }
     }
   }
 }
\ No newline at end of file
