diff --git a/tmp/aba1e0a7-1968-4814-8d05-69c31506124e_buggy.java b/tmp/655111c2-3fc9-4811-b616-af0dd32be65a_fixed.java
index 670114d..c1d7dfa 100644
--- a/tmp/aba1e0a7-1968-4814-8d05-69c31506124e_buggy.java
+++ b/tmp/655111c2-3fc9-4811-b616-af0dd32be65a_fixed.java
@@ -1,48 +1,58 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns != null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
   if (n.isAssign()) {
     Node nameNode = n.getFirstChild();
-
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null) {
       if (ns.isPrototype) {
         recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
       } else {
         recordSet(ns.name, nameNode);
       }
     }
   } else if (n.isCall()) {
-        Node nameNode = n.getFirstChild();
-        NameInformation ns = createNameInformation(t, nameNode, n);
+    // only treat calls like goog.inherits(...) as a class-defining function
+    Node callTarget = n.getFirstChild();
+    NameInformation ns = createNameInformation(t, callTarget, n);
     if (ns != null && ns.onlyAffectsClassDef) {
-          JsName name = getName(ns.name, false);
-          if (name != null) {
+      // only record the inherits call if both subclass and superclass were actually declared
+      Node subclassNode = callTarget.getNext();
+      Node superNode = (subclassNode != null) ? subclassNode.getNext() : null;
+      String subclassName = (subclassNode != null)
+          ? NodeUtil.getQualifiedName(subclassNode) : null;
+      String superName = (superNode != null)
+          ? NodeUtil.getQualifiedName(superNode) : null;
+      if (subclassName != null && superName != null
+          && getName(subclassName, false) != null
+          && getName(superName, false) != null) {
+        JsName fnName = getName(ns.name, false);
+        if (fnName != null) {
           refNodes.add(new ClassDefiningFunctionNode(
-              name, n, parent, parent.getParent()));
+              fnName, n, parent, parent.getParent()));
+        }
       }
     }
   }
 }
\ No newline at end of file
