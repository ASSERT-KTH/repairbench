diff --git a/tmp/3c53366d-dd77-4729-97d9-8525a694de23_buggy.java b/tmp/210c81dd-ed8d-44a6-a413-fab4eef12207_fixed.java
index 670114d..ac1bd88 100644
--- a/tmp/3c53366d-dd77-4729-97d9-8525a694de23_buggy.java
+++ b/tmp/210c81dd-ed8d-44a6-a413-fab4eef12207_fixed.java
@@ -1,48 +1,52 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
 
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
+
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
+
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns != null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
   if (n.isAssign()) {
     Node nameNode = n.getFirstChild();
-
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null) {
       if (ns.isPrototype) {
         recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
       } else {
         recordSet(ns.name, nameNode);
       }
     }
+
   } else if (n.isCall()) {
     Node nameNode = n.getFirstChild();
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null && ns.onlyAffectsClassDef) {
-          JsName name = getName(ns.name, false);
-          if (name != null) {
-          refNodes.add(new ClassDefiningFunctionNode(
-              name, n, parent, parent.getParent()));
+      JsName fn = getName(ns.name, false);
+      if (fn != null) {
+        // pass the actual callee‚Äêname node and its true parent (the CALL) 
+        // and grandparent (usually EXPR) into the helper
+        refNodes.add(
+            new ClassDefiningFunctionNode(fn, nameNode, n, parent));
       }
     }
   }
 }
\ No newline at end of file
