diff --git a/tmp/bf458f87-8a11-405e-a522-b428e4aa6c93_buggy.java b/tmp/e3022565-827a-45ca-b8b2-d61f1c6179f1_fixed.java
index 670114d..33f035a 100644
--- a/tmp/bf458f87-8a11-405e-a522-b428e4aa6c93_buggy.java
+++ b/tmp/e3022565-827a-45ca-b8b2-d61f1c6179f1_fixed.java
@@ -1,48 +1,53 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns != null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
   if (n.isAssign()) {
     Node nameNode = n.getFirstChild();
-
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null) {
       if (ns.isPrototype) {
         recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
       } else {
         recordSet(ns.name, nameNode);
       }
     }
   } else if (n.isCall()) {
-        Node nameNode = n.getFirstChild();
-        NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null && ns.onlyAffectsClassDef) {
-          JsName name = getName(ns.name, false);
+    // For calls like goog.inherits(childCtor, superCtor), onlyAffectsClassDef
+    // is set on the callee (e.g. goog.inherits).  But we actually want to
+    // record the subclass (first argument) as the defining function.
+    Node callee = n.getFirstChild();
+    NameInformation calleeInfo = createNameInformation(t, callee, n);
+    if (calleeInfo != null && calleeInfo.onlyAffectsClassDef) {
+      Node subclassNode = callee.getNext();  // first argument
+      NameInformation subclassInfo = createNameInformation(t, subclassNode, n);
+      if (subclassInfo != null) {
+        JsName name = getName(subclassInfo.name, false);
         if (name != null) {
           refNodes.add(new ClassDefiningFunctionNode(
               name, n, parent, parent.getParent()));
         }
       }
     }
   }
+}
\ No newline at end of file
