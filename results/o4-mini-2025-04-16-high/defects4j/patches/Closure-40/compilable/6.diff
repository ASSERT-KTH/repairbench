diff --git a/tmp/90d8778d-f10e-4bb3-9c8e-8b5ee17a4180_buggy.java b/tmp/bf1099ed-deb3-45d7-81ea-f898b0057bd9_fixed.java
index 670114d..6e4863e 100644
--- a/tmp/90d8778d-f10e-4bb3-9c8e-8b5ee17a4180_buggy.java
+++ b/tmp/bf1099ed-deb3-45d7-81ea-f898b0057bd9_fixed.java
@@ -1,48 +1,59 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
 
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
+
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
+
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns != null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
   if (n.isAssign()) {
     Node nameNode = n.getFirstChild();
-
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null) {
       if (ns.isPrototype) {
         recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
       } else {
         recordSet(ns.name, nameNode);
       }
     }
+
   } else if (n.isCall()) {
-        Node nameNode = n.getFirstChild();
-        NameInformation ns = createNameInformation(t, nameNode, n);
+    // Catch goog.inherits-like class‚Äêdefining calls
+    Node callee = n.getFirstChild();
+    NameInformation ns = createNameInformation(t, callee, n);
     if (ns != null && ns.onlyAffectsClassDef) {
-          JsName name = getName(ns.name, false);
-          if (name != null) {
+      JsName fnName = getName(ns.name, false);
+      if (fnName != null) {
         refNodes.add(new ClassDefiningFunctionNode(
-              name, n, parent, parent.getParent()));
+            fnName, n, parent, parent.getParent()));
+        // Also record the first argument as a definition of the subclass.
+        Node subclassCtor = callee.getNext();
+        if (subclassCtor != null) {
+          NameInformation subNs = createNameInformation(t, subclassCtor, n);
+          if (subNs != null) {
+            recordSet(subNs.name, subclassCtor);
+          }
+        }
       }
     }
   }
 }
\ No newline at end of file
