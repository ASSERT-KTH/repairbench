diff --git a/tmp/2836a3e1-f4d8-4899-b929-7674efd1db2c_buggy.java b/tmp/9ad37eb6-0f15-457c-90b3-24a7c1760cad_fixed.java
index b6b11b6..0aa0b1f 100644
--- a/tmp/2836a3e1-f4d8-4899-b929-7674efd1db2c_buggy.java
+++ b/tmp/9ad37eb6-0f15-457c-90b3-24a7c1760cad_fixed.java
@@ -1,38 +1,48 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+    final int start = pos.getIndex();
+    final int length = pattern.length();
+    // Handle escaped quote at beginning: two single‐quotes -> one literal quote
+    if (escapingOn
+            && start + ESCAPED_QUOTE.length() <= length
+            && pattern.startsWith(ESCAPED_QUOTE, start)) {
+        pos.setIndex(start + ESCAPED_QUOTE.length());
+        if (appendTo != null) {
+            appendTo.append(QUOTE);
         }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
-                continue;
+        return appendTo;
     }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+    // Must be a starting single quote
+    if (start >= length || pattern.charAt(start) != QUOTE) {
+        return appendTo;
     }
+    // Skip the opening quote
+    pos.setIndex(start + 1);
+    // Consume until closing quote
+    while (pos.getIndex() < length) {
+        int idx = pos.getIndex();
+        // Inside a quoted string, handle escaped quotes
+        if (escapingOn
+                && idx + ESCAPED_QUOTE.length() <= length
+                && pattern.startsWith(ESCAPED_QUOTE, idx)) {
+            // two single-quotes => one literal quote
+            pos.setIndex(idx + ESCAPED_QUOTE.length());
+            if (appendTo != null) {
+                appendTo.append(QUOTE);
             }
+        } else if (pattern.charAt(idx) == QUOTE) {
+            // Found the closing quote
+            pos.setIndex(idx + 1);
+            return appendTo;
+        } else {
+            // Regular character inside quotes
+            if (appendTo != null) {
+                appendTo.append(pattern.charAt(idx));
+            }
+            pos.setIndex(idx + 1);
+        }
+    }
+    // If we get here, no closing quote was found
     throw new IllegalArgumentException(
         "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
