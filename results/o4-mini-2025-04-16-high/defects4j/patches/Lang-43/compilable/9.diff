diff --git a/tmp/a158443f-264d-472b-8ead-89698ff21ec6_buggy.java b/tmp/9b80bfe6-f373-4043-8b52-98a294e48115_fixed.java
index b6b11b6..0b687df 100644
--- a/tmp/a158443f-264d-472b-8ead-89698ff21ec6_buggy.java
+++ b/tmp/9b80bfe6-f373-4043-8b52-98a294e48115_fixed.java
@@ -1,38 +1,61 @@
 /**
  * Consume a quoted string, adding it to <code>appendTo</code> if
  * specified.
  *
  * @param pattern pattern to parse
  * @param pos current parse position
  * @param appendTo optional StringBuffer to append
  * @param escapingOn whether to process escaped quotes
  * @return <code>appendTo</code>
  */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+    int length = pattern.length();
+    // 1) two consecutive quotes => one literal quote
+    if (escapingOn
+            && start + ESCAPED_QUOTE.length() <= length
+            && pattern.startsWith(ESCAPED_QUOTE, start)) {
+        pos.setIndex(start + ESCAPED_QUOTE.length());
+        if (appendTo != null) {
+            appendTo.append(QUOTE);
         }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+        return appendTo;
+    }
+    // 2) otherwise it's a quoted string delimited by single quotes
+    //    skip the opening quote
+    pos.setIndex(start + 1);
+    int lastHold = pos.getIndex();
+    while (pos.getIndex() < length) {
+        // 2a) escaped quote inside quoted string
+        if (escapingOn
+                && pos.getIndex() + ESCAPED_QUOTE.length() <= length
+                && pattern.startsWith(ESCAPED_QUOTE, pos.getIndex())) {
+            if (appendTo != null) {
+                // append text up to the escape
+                appendTo.append(pattern.substring(lastHold, pos.getIndex()));
+                // append one literal quote
+                appendTo.append(QUOTE);
+            }
+            // skip over the two-quote escape
+            pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());
             lastHold = pos.getIndex();
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        char ch = pattern.charAt(pos.getIndex());
+        if (ch == QUOTE) {
+            // end of quoted string
+            if (appendTo != null) {
+                appendTo.append(pattern.substring(lastHold, pos.getIndex()));
             }
+            // skip closing quote
+            pos.setIndex(pos.getIndex() + 1);
+            return appendTo;
         }
+        // normal character inside quoted string
+        pos.setIndex(pos.getIndex() + 1);
+    }
+    // unterminated quoted string
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
