diff --git a/tmp/681f95ae-7438-4846-a99d-ed711444826f_buggy.java b/tmp/a62839d0-639e-44b4-b23c-157fa2b07342_fixed.java
index b6b11b6..e2910e1 100644
--- a/tmp/681f95ae-7438-4846-a99d-ed711444826f_buggy.java
+++ b/tmp/a62839d0-639e-44b4-b23c-157fa2b07342_fixed.java
@@ -1,38 +1,46 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+    int length = pattern.length();
+    char[] chars = pattern.toCharArray();
+    // Handle escaped quote (two consecutive quotes => literal single quote)
+    if (escapingOn && start + 1 < length
+            && chars[start] == QUOTE && chars[start + 1] == QUOTE) {
+        pos.setIndex(start + 2);
+        if (appendTo != null) {
+            appendTo.append(QUOTE);
+            return appendTo;
         }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+        return null;
+    }
+    // Otherwise this is the start of a quoted literal: skip the opening quote
+    pos.setIndex(start + 1);
+    int lastHold = pos.getIndex();
+    while (pos.getIndex() < length) {
+        int i = pos.getIndex();
+        char ch = chars[i];
+        // an escaped quote inside the quoted string?
+        if (escapingOn && ch == QUOTE
+                && i + 1 < length && chars[i + 1] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(chars, lastHold, i - lastHold)
+                        .append(QUOTE);
+            }
+            pos.setIndex(i + 2);
             lastHold = pos.getIndex();
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        // closing quote -> end of literal
+        if (ch == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(chars, lastHold, i - lastHold);
             }
+            pos.setIndex(i + 1);
+            return appendTo;
+        }
+        // otherwise consume this character
+        pos.setIndex(i + 1);
     }
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
