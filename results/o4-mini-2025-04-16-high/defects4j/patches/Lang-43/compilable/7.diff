diff --git a/tmp/ba73747e-61f8-42ca-8f58-bf61f0e690bd_buggy.java b/tmp/47e7c8de-f2bb-4dd0-a015-4dd24a712ca9_fixed.java
index b6b11b6..5f7ba60 100644
--- a/tmp/ba73747e-61f8-42ca-8f58-bf61f0e690bd_buggy.java
+++ b/tmp/47e7c8de-f2bb-4dd0-a015-4dd24a712ca9_fixed.java
@@ -1,38 +1,52 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+    int length = pattern.length();
+
+    // If escaping is turned off, treat a single quote as a literal and consume it
+    if (!escapingOn) {
+        if (appendTo != null) {
+            appendTo.append(QUOTE);
+        }
+        pos.setIndex(start + 1);
+        return appendTo;
+    }
+
+    // Handle escaped quote outside of a quoted string: two single‐quotes => one literal quote
+    if (start + ESCAPED_QUOTE.length() <= length
+            && pattern.startsWith(ESCAPED_QUOTE, start)) {
+        if (appendTo != null) {
+            appendTo.append(QUOTE);
+        }
+        pos.setIndex(start + ESCAPED_QUOTE.length());
+        return appendTo;
+    }
+
+    // Otherwise this is the start of a quoted literal: consume until the matching quote
+    int i = start + 1;
+    while (i < length) {
+        char ch = pattern.charAt(i);
+        if (ch == QUOTE) {
+            // An escaped quote inside a quoted string (“''” => “‘”)
+            if (i + 1 < length && pattern.charAt(i + 1) == QUOTE) {
+                if (appendTo != null) {
+                    appendTo.append(QUOTE);
+                }
+                i += 2;
                 continue;
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+            // A single quote ends the quoted string
+            pos.setIndex(i + 1);
+            return appendTo;
         }
+        // Ordinary character inside quoted string
+        if (appendTo != null) {
+            appendTo.append(ch);
         }
+        i++;
+    }
+
+    // If we get here, there was no closing quote
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
