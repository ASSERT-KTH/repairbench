diff --git a/tmp/ffde724a-bf12-4fd6-8aa0-893ec33d203e_buggy.java b/tmp/629ead0b-64eb-4ec8-8566-8c4feb5da854_fixed.java
index b6b11b6..b0bcadd 100644
--- a/tmp/ffde724a-bf12-4fd6-8aa0-893ec33d203e_buggy.java
+++ b/tmp/629ead0b-64eb-4ec8-8566-8c4feb5da854_fixed.java
@@ -1,38 +1,39 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+    int len = c.length;
+    // Handle escaped quote: two single‚Äêquotes yield one literal quote
+    if (escapingOn && start + 1 < len && c[start] == QUOTE && c[start + 1] == QUOTE) {
+        pos.setIndex(start + 2);
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+    // Handle a quoted literal: skip the opening quote
+    pos.setIndex(start + 1);
+    int lastHold = pos.getIndex();
+    while (pos.getIndex() < len) {
+        int i = pos.getIndex();
+        // Check for escaped quote inside the literal
+        if (escapingOn && i + 1 < len && c[i] == QUOTE && c[i + 1] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
+            }
+            pos.setIndex(i + 2);
             lastHold = pos.getIndex();
-                continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        // Check for closing quote
+        else if (c[i] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(c, lastHold, i - lastHold);
             }
+            pos.setIndex(i + 1);
+            return appendTo == null ? null : appendTo;
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+        // Regular character inside the literal
+        else {
+            pos.setIndex(i + 1);
+        }
+    }
+    // No closing quote found
+    throw new IllegalArgumentException("Unterminated quoted string at position " + start);
 }
\ No newline at end of file
