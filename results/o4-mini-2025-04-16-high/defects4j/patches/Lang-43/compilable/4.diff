diff --git a/tmp/1a4ede54-4580-47a8-a45c-4a4f83e8bc2c_buggy.java b/tmp/bc16cc6e-7909-486e-9625-413cc7a8555c_fixed.java
index b6b11b6..c953019 100644
--- a/tmp/1a4ede54-4580-47a8-a45c-4a4f83e8bc2c_buggy.java
+++ b/tmp/bc16cc6e-7909-486e-9625-413cc7a8555c_fixed.java
@@ -1,38 +1,77 @@
 /**
  * Consume a quoted string, adding it to <code>appendTo</code> if
  * specified.
  * 
  * @param pattern pattern to parse
  * @param pos current parse position
  * @param appendTo optional StringBuffer to append
  * @param escapingOn whether to process escaped quotes
  * @return <code>appendTo</code>
  */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+    // Handle an escaped quote at the very start: two single quotes => one literal quote
+    if (escapingOn
+            && start + 1 < c.length
+            && c[start] == QUOTE
+            && c[start + 1] == QUOTE) {
+        pos.setIndex(start + 2);
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+    // Skip the opening quote
+    pos.setIndex(start + 1);
+    // If we're not accumulating, just skip until the matching quote
+    if (appendTo == null) {
+        while (pos.getIndex() < c.length) {
+            int idx = pos.getIndex();
+            // skip escaped quotes inside
+            if (escapingOn
+                    && idx + 1 < c.length
+                    && c[idx] == QUOTE
+                    && c[idx + 1] == QUOTE) {
+                pos.setIndex(idx + 2);
+            }
+            else if (c[idx] == QUOTE) {
+                pos.setIndex(idx + 1);
+                return null;
+            }
+            else {
+                pos.setIndex(idx + 1);
+            }
+        }
+        throw new IllegalArgumentException(
+                "Unterminated quoted string at position " + start);
+    }
+    // Accumulate into appendTo
+    int lastHold = pos.getIndex();
+    while (pos.getIndex() < c.length) {
+        int idx = pos.getIndex();
+        // escaped quote inside quoted string
+        if (escapingOn
+                && idx + 1 < c.length
+                && c[idx] == QUOTE
+                && c[idx + 1] == QUOTE) {
+            // append everything up to here
+            appendTo.append(c, lastHold, idx - lastHold);
+            // then one literal quote
+            appendTo.append(QUOTE);
+            // advance past the two quotes
+            pos.setIndex(idx + 2);
             lastHold = pos.getIndex();
-                continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        // closing quote
+        else if (c[idx] == QUOTE) {
+            appendTo.append(c, lastHold, idx - lastHold);
+            pos.setIndex(idx + 1);
+            return appendTo;
+        }
+        // normal character
+        else {
+            pos.setIndex(idx + 1);
         }
     }
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
