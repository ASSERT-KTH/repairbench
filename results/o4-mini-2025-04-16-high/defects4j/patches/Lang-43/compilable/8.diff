diff --git a/tmp/b2b928ed-ed7d-405d-ae0a-96236723cdde_buggy.java b/tmp/430c2573-e036-4f6f-a136-d2bd124f5864_fixed.java
index b6b11b6..d1b3387 100644
--- a/tmp/b2b928ed-ed7d-405d-ae0a-96236723cdde_buggy.java
+++ b/tmp/430c2573-e036-4f6f-a136-d2bd124f5864_fixed.java
@@ -1,38 +1,39 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
                                         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+    // Handle escaped single‚Äêquote (two consecutive quotes) before a quoted literal
+    if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, start)) {
+        pos.setIndex(start + ESCAPED_QUOTE.length());
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
+    // Skip the opening quote
+    next(pos);
+    int lastHold = pos.getIndex();
+    int len = c.length;
+    // Consume until the matching closing quote
+    while (pos.getIndex() < len) {
+        int i = pos.getIndex();
+        // Inside a quoted string, handle escaped quotes
+        if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, i)) {
+            if (appendTo != null) {
+                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
+            }
             pos.setIndex(i + ESCAPED_QUOTE.length());
             lastHold = pos.getIndex();
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
+        // Found the closing quote
+        if (c[i] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(c, lastHold, i - lastHold);
+            }
             next(pos);
+            return appendTo;
         }
+        // Advance one character
+        next(pos);
     }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+    // No closing quote found
+    throw new IllegalArgumentException("Unterminated quoted string at position " + start);
 }
\ No newline at end of file
