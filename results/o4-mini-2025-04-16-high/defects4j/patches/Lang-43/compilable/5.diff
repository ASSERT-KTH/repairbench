diff --git a/tmp/00835e58-48fd-4ca9-a204-393afac0d40e_buggy.java b/tmp/c6ff2f8b-d135-4904-9769-15ea9c2333b9_fixed.java
index b6b11b6..2e43d64 100644
--- a/tmp/00835e58-48fd-4ca9-a204-393afac0d40e_buggy.java
+++ b/tmp/c6ff2f8b-d135-4904-9769-15ea9c2333b9_fixed.java
@@ -1,38 +1,42 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+    int length = pattern.length();
+    // 1) Handle escaped quote at the very beginning: two consecutive single quotes => one literal quote
+    if (escapingOn
+            && start + 1 < length
+            && pattern.charAt(start) == QUOTE
+            && pattern.charAt(start + 1) == QUOTE) {
+        pos.setIndex(start + 2);
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+    // 2) Otherwise this is the start of a quoted literal. Skip the opening quote.
+    pos.setIndex(start + 1);
+    int i = pos.getIndex();
+    while (i < length) {
+        char ch = pattern.charAt(i);
+        // 2a) Escaped quote inside a quoted string => append one quote and skip both
+        if (escapingOn
+                && ch == QUOTE
+                && i + 1 < length
+                && pattern.charAt(i + 1) == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(QUOTE);
+            }
+            i += 2;
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        // 2b) Closing quote => consume it and return
+        if (ch == QUOTE) {
+            pos.setIndex(i + 1);
+            return appendTo == null ? null : appendTo;
         }
+        // 2c) Ordinary character inside quotes
+        if (appendTo != null) {
+            appendTo.append(ch);
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+        i++;
+    }
+    // If we reach here, no closing quote was found
+    throw new IllegalArgumentException("Unterminated quoted string at position " + start);
 }
\ No newline at end of file
