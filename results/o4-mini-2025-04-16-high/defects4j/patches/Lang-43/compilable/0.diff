diff --git a/tmp/7c9e7b3a-1c11-4859-9238-202a2c2fb3b6_buggy.java b/tmp/eea12bb9-8392-4581-a466-f5d5d4fa8f7a_fixed.java
index b6b11b6..7a0ce0e 100644
--- a/tmp/7c9e7b3a-1c11-4859-9238-202a2c2fb3b6_buggy.java
+++ b/tmp/eea12bb9-8392-4581-a466-f5d5d4fa8f7a_fixed.java
@@ -1,38 +1,53 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
+    int len = pattern.length();
     char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+
+    // Handle two consecutive single‚Äêquotes as an escaped literal quote.
+    if (escapingOn
+            && start + 1 < len
+            && c[start] == QUOTE
+            && c[start + 1] == QUOTE) {
+        pos.setIndex(start + 2);
+        if (appendTo != null) {
+            appendTo.append(QUOTE);
         }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+        return appendTo;
+    }
+
+    // Otherwise this is a real opening quote; skip it.
+    pos.setIndex(start + 1);
+    int index = pos.getIndex();
+    int lastHold = index;
+
+    while (index < len) {
+        // Inside quoted string, two quotes in a row => literal quote
+        if (escapingOn
+                && index + 1 < len
+                && c[index] == QUOTE
+                && c[index + 1] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(c, lastHold, index - lastHold)
+                        .append(QUOTE);
+            }
+            index += 2;
+            pos.setIndex(index);
+            lastHold = index;
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        // End of quoted string
+        if (c[index] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(c, lastHold, index - lastHold);
             }
+            pos.setIndex(index + 1);
+            return appendTo;
         }
+        index++;
+    }
+
+    // If we get here, we never saw a closing quote.
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
