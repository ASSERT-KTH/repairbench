diff --git a/tmp/884edc68-8e62-444d-830f-d94d3f8bf5dd_buggy.java b/tmp/c13aff09-6afa-43be-8033-58704bc0e1c8_fixed.java
index e0ecec8..107b9e1 100644
--- a/tmp/884edc68-8e62-444d-830f-d94d3f8bf5dd_buggy.java
+++ b/tmp/c13aff09-6afa-43be-8033-58704bc0e1c8_fixed.java
@@ -1,35 +1,50 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
-    Iterator<Node> arguments = call.children().iterator();
-    arguments.next(); // skip the function name
+  // Iterate the actual arguments (skip the first child, which is the callee).
+  Iterator<Node> args = call.children().iterator();
+  args.next();
+
+  // Copy the formal parameters so we can index them.
+  List<Node> params = new ArrayList<Node>();
+  for (Node p : functionType.getParameters()) {
+    params.add(p);
+  }
+  boolean isVarArgs = functionType.isVarArgs();
+  int totalParams = params.size();
+  // If it's var_args, the last parameter is the repeating one.
+  int fixedParams = isVarArgs ? totalParams - 1 : totalParams;
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+  while (args.hasNext()) {
+    Node arg = args.next();
     ordinal++;
+    Node paramNode = null;
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+    if (ordinal <= fixedParams) {
+      // Match against the corresponding fixed parameter.
+      paramNode = params.get(ordinal - 1);
+    } else if (isVarArgs) {
+      // All extra arguments match the var_args parameter.
+      paramNode = params.get(totalParams - 1);
+    } else {
+      // No more formals to match; we'll catch this later as a wrong-arg-count.
+      break;
     }
 
+    validator.expectArgumentMatchesParameter(
+        t, arg, getJSType(arg), getJSType(paramNode), call, ordinal);
+  }
+
+  // Finally, check overall argument count against min/max.
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+  if (numArgs < minArgs || numArgs > maxArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+        String.valueOf(numArgs),
+        String.valueOf(minArgs),
+        maxArgs != Integer.MAX_VALUE
+            ? " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
