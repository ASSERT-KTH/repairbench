diff --git a/tmp/5540d316-62e3-4322-8203-527ba4c07288_buggy.java b/tmp/db30e722-ff13-411c-8c90-ae8323ec0439_fixed.java
index e0ecec8..89141cf 100644
--- a/tmp/5540d316-62e3-4322-8203-527ba4c07288_buggy.java
+++ b/tmp/db30e722-ff13-411c-8c90-ae8323ec0439_fixed.java
@@ -1,35 +1,54 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
+    // Pull out the declared parameters and detect the var_args parameter (if any).
+    List<Node> params = functionType.getParameters();
+    Iterator<Node> parameters = params.iterator();
+    Node varArgsParameter = null;
+    if (functionType.isVarArgs() && !params.isEmpty()) {
+      // The last declared parameter is the rest (var_args) parameter.
+      varArgsParameter = params.get(params.size() - 1);
+    }
+
     int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+    // Match up each declared parameter (including the first var_args) in order.
+    while (arguments.hasNext() && parameters.hasNext()) {
+      Node parameter = parameters.next();
+      Node argument = arguments.next();
       ordinal++;
+      validator.expectArgumentMatchesParameter(
+          t, argument,
+          getJSType(argument), getJSType(parameter),
+          call, ordinal);
+    }
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+    // If this is a var_args function, match any extra arguments
+    // against the var_args parameter's type.
+    if (varArgsParameter != null) {
+      while (arguments.hasNext()) {
+        Node argument = arguments.next();
+        ordinal++;
+        validator.expectArgumentMatchesParameter(
+            t, argument,
+            getJSType(argument), getJSType(varArgsParameter),
+            call, ordinal);
+      }
     }
 
+    // Finally, check for a wrong number of arguments.
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
           validator.getReadableJSTypeName(call.getFirstChild(), false),
           String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+          maxArgs != Integer.MAX_VALUE
+              ? " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
