diff --git a/tmp/6fba6d5d-0e60-4787-9319-442fd676c84e_buggy.java b/tmp/26225285-3970-4ed0-9dc7-b777cdc9a3db_fixed.java
index e0ecec8..7dcb52a 100644
--- a/tmp/6fba6d5d-0e60-4787-9319-442fd676c84e_buggy.java
+++ b/tmp/26225285-3970-4ed0-9dc7-b777cdc9a3db_fixed.java
@@ -1,35 +1,47 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+  // match arguments to formal parameters
+  while (arguments.hasNext() && parameters.hasNext()) {
     parameter = parameters.next();
     argument = arguments.next();
     ordinal++;
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+    validator.expectArgumentMatchesParameter(
+        t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
+  // if this is a var_args function, match any remaining arguments
+  if (functionType.isVarArgs()) {
+    while (arguments.hasNext()) {
+      argument = arguments.next();
+      ordinal++;
+      // reuse the last 'parameter' which will be the var_args param
+      validator.expectArgumentMatchesParameter(
+          t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
+    }
+  }
+
+  // finally, check for wrong argument count
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+        String.valueOf(numArgs),
+        String.valueOf(minArgs),
+        maxArgs != Integer.MAX_VALUE
+            ? " and no more than " + maxArgs + " argument(s)"
+            : "");
   }
 }
\ No newline at end of file
