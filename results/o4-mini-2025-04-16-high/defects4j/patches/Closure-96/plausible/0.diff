diff --git a/tmp/9e351ba6-7a27-484e-9bf2-24953884c0bf_buggy.java b/tmp/7c5efbdd-2e86-44b8-b665-bcba8e89a380_fixed.java
index e0ecec8..2f975e7 100644
--- a/tmp/9e351ba6-7a27-484e-9bf2-24953884c0bf_buggy.java
+++ b/tmp/7c5efbdd-2e86-44b8-b665-bcba8e89a380_fixed.java
@@ -1,35 +1,47 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+    // Process all declared parameters.
+    while (arguments.hasNext() && parameters.hasNext()) {
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
+      validator.expectArgumentMatchesParameter(
+          t, argument,
+          getJSType(argument), getJSType(parameter),
+          call, ordinal);
+    }
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+    // If there are leftover arguments and the function is variadic,
+    // match them all against the last (var_args) parameter.
+    if (arguments.hasNext() && functionType.getMaxArguments() == Integer.MAX_VALUE) {
+      while (arguments.hasNext()) {
+        argument = arguments.next();
+        ordinal++;
+        validator.expectArgumentMatchesParameter(
+            t, argument,
+            getJSType(argument), getJSType(parameter),
+            call, ordinal);
+      }
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
           validator.getReadableJSTypeName(call.getFirstChild(), false),
           String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+          maxArgs != Integer.MAX_VALUE
+              ? " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
