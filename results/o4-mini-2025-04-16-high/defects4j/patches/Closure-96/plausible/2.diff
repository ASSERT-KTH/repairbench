diff --git a/tmp/aa28369c-0b41-413c-a11f-13f10a837283_buggy.java b/tmp/57e2aa67-9f3b-4eac-a3e5-0e22fa732109_fixed.java
index e0ecec8..1f061fc 100644
--- a/tmp/aa28369c-0b41-413c-a11f-13f10a837283_buggy.java
+++ b/tmp/57e2aa67-9f3b-4eac-a3e5-0e22fa732109_fixed.java
@@ -1,35 +1,44 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+
+    // Match declared parameters.
+    while (arguments.hasNext() && parameters.hasNext()) {
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(parameter), call, ordinal);
+    }
 
+    // If this is a var_args function, match all remaining args
+    // against the last (rest) parameter.
+    if (arguments.hasNext() && functionType.getMaxArguments() == Integer.MAX_VALUE) {
+      while (arguments.hasNext()) {
+        argument = arguments.next();
+        ordinal++;
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
       }
+    }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
           validator.getReadableJSTypeName(call.getFirstChild(), false),
           String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+          maxArgs != Integer.MAX_VALUE
+              ? " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
