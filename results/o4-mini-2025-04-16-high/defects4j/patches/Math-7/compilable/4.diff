diff --git a/tmp/b48c3a50-7c3f-46ad-9f6f-153a7c0ae375_buggy.java b/tmp/d4f2619c-30ac-4ad1-8977-4732cbc91bc6_fixed.java
index b4d4f38..0724b26 100644
--- a/tmp/b48c3a50-7c3f-46ad-9f6f-153a7c0ae375_buggy.java
+++ b/tmp/d4f2619c-30ac-4ad1-8977-4732cbc91bc6_fixed.java
@@ -1,123 +1,123 @@
 /** Accept a step, triggering events and step handlers.
  * @param interpolator step interpolator
  * @param y state vector at step end time, must be reset if an event
  * asks for resetting or if an events stops integration during the step
  * @param yDot placeholder array where to put the time derivative of the state vector
  * @param tEnd final integration time
  * @return time at end of step
  * @exception MaxCountExceededException if the interpolator throws one because
  * the number of functions evaluations is exceeded
  * @exception NoBracketingException if the location of an event cannot be bracketed
  * @exception DimensionMismatchException if arrays dimensions do not match equations settings
  * @since 2.2
  */
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
     double previousT = interpolator.getGlobalPreviousTime();
     final double currentT = interpolator.getGlobalCurrentTime();
 
     // initialize the events states if needed
     if (! statesInitialized) {
         for (EventState state : eventsStates) {
             state.reinitializeBegin(interpolator);
         }
         statesInitialized = true;
     }
 
     // search for next events that may occur during the step
     final int orderingSign = interpolator.isForward() ? +1 : -1;
     SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
-
-                /** {@inheritDoc} */
         public int compare(EventState es0, EventState es1) {
             return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
         }
-
     });
-
     for (final EventState state : eventsStates) {
         if (state.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
             occuringEvents.add(state);
         }
     }
 
+    // process all the events in chronological order
     while (!occuringEvents.isEmpty()) {
 
-                // handle the chronologically first event
-                final Iterator<EventState> iterator = occuringEvents.iterator();
-                final EventState currentEvent = iterator.next();
+        // chronological first event
+        Iterator<EventState> iterator = occuringEvents.iterator();
+        EventState currentEvent = iterator.next();
         iterator.remove();
 
-                // restrict the interpolator to the first part of the step, up to the event
+        // restrict to [previousT, eventT]
         final double eventT = currentEvent.getEventTime();
         interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(eventT);
-
-                // get state at event time
         interpolator.setInterpolatedTime(eventT);
         final double[] eventY = interpolator.getInterpolatedState().clone();
 
-                // advance all event states to current time
+        // notify the triggering event
         currentEvent.stepAccepted(eventT, eventY);
         isLastStep = currentEvent.stop();
 
-                // handle the first part of the step, up to the event
-                for (final StepHandler handler : stepHandlers) {
+        // handle the part of the step up to the event
+        for (StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, isLastStep);
         }
 
+        // if the event wants to stop the integration, we're done
         if (isLastStep) {
-                    // the event asked to stop integration
             System.arraycopy(eventY, 0, y, 0, y.length);
-                    for (final EventState remaining : occuringEvents) {
+            for (EventState remaining : occuringEvents) {
                 remaining.stepAccepted(eventT, eventY);
             }
             return eventT;
         }
 
+        // if the event requests a reset, apply it and exit
         boolean needReset = currentEvent.reset(eventT, eventY);
         if (needReset) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
             System.arraycopy(eventY, 0, y, 0, y.length);
             computeDerivatives(eventT, y, yDot);
             resetOccurred = true;
-                    for (final EventState remaining : occuringEvents) {
+            for (EventState remaining : occuringEvents) {
                 remaining.stepAccepted(eventT, eventY);
             }
             return eventT;
         }
 
-                // prepare handling of the remaining part of the step
+        // prepare for the remainder of the step
         previousT = eventT;
-                interpolator.setSoftPreviousTime(eventT);
+        interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(currentT);
 
-                // check if the same event occurs again in the remaining part of the step
+        // check if the same event fires again in [eventT, currentT]
         if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
             occuringEvents.add(currentEvent);
         }
 
     }
 
-            // last part of the step, after the last event
+    // --- no more events in this step, finish up the last part ---
+
+    // restrict to [previousT, currentT]
+    interpolator.setSoftPreviousTime(previousT);
+    interpolator.setSoftCurrentTime(currentT);
     interpolator.setInterpolatedTime(currentT);
     final double[] currentY = interpolator.getInterpolatedState();
-            for (final EventState state : eventsStates) {
+    for (EventState state : eventsStates) {
         state.stepAccepted(currentT, currentY);
         isLastStep = isLastStep || state.stop();
     }
     isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
-            // handle the remaining part of the step, after all events if any
+    // handle the final part of the step
     for (StepHandler handler : stepHandlers) {
         handler.handleStep(interpolator, isLastStep);
     }
 
+    // copy the new state and compute its derivatives for the next step
+    System.arraycopy(currentY, 0, y, 0, y.length);
+    computeDerivatives(currentT, y, yDot);
+
     return currentT;
 
 }
\ No newline at end of file
