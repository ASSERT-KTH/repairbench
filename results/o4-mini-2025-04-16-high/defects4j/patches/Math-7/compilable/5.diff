diff --git a/tmp/c0fbc9df-c78c-4fe9-95c5-e21095719184_buggy.java b/tmp/5b73a5ac-2305-433b-897b-19a68845ae77_fixed.java
index b4d4f38..2ec9ad3 100644
--- a/tmp/c0fbc9df-c78c-4fe9-95c5-e21095719184_buggy.java
+++ b/tmp/5b73a5ac-2305-433b-897b-19a68845ae77_fixed.java
@@ -1,123 +1,136 @@
 /** Accept a step, triggering events and step handlers.
  * @param interpolator step interpolator
  * @param y state vector at step end time, must be reset if an event
  * asks for resetting or if an events stops integration during the step
  * @param yDot placeholder array where to put the time derivative of the state vector
  * @param tEnd final integration time
  * @return time at end of step
  * @exception MaxCountExceededException if the interpolator throws one because
  * the number of functions evaluations is exceeded
  * @exception NoBracketingException if the location of an event cannot be bracketed
  * @exception DimensionMismatchException if arrays dimensions do not match equations settings
  * @since 2.2
  */
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
     double previousT = interpolator.getGlobalPreviousTime();
     final double currentT = interpolator.getGlobalCurrentTime();
 
     // initialize the events states if needed
     if (!statesInitialized) {
         for (EventState state : eventsStates) {
             state.reinitializeBegin(interpolator);
         }
         statesInitialized = true;
     }
 
+    // make sure the interpolator covers the full step for initial checks
+    interpolator.setSoftPreviousTime(previousT);
+    interpolator.setSoftCurrentTime(currentT);
+
     // search for next events that may occur during the step
     final int orderingSign = interpolator.isForward() ? +1 : -1;
-            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
-
-                /** {@inheritDoc} */
+    SortedSet<EventState> occuringEvents =
+        new TreeSet<EventState>(new Comparator<EventState>() {
             public int compare(EventState es0, EventState es1) {
-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+                int c = orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+                if (c == 0 && es0 != es1) {
+                    // tie‐breaker to avoid dropping distinct handlers
+                    return System.identityHashCode(es0) - System.identityHashCode(es1);
+                }
+                return c;
             }
-
         });
-
-            for (final EventState state : eventsStates) {
+    for (EventState state : eventsStates) {
         if (state.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
             occuringEvents.add(state);
         }
     }
 
+    // process events in chronological order within this step
     while (!occuringEvents.isEmpty()) {
 
-                // handle the chronologically first event
-                final Iterator<EventState> iterator = occuringEvents.iterator();
-                final EventState currentEvent = iterator.next();
-                iterator.remove();
+        // pick the earliest event
+        EventState currentEvent = occuringEvents.first();
+        occuringEvents.remove(currentEvent);
+        double eventT = currentEvent.getEventTime();
 
-                // restrict the interpolator to the first part of the step, up to the event
-                final double eventT = currentEvent.getEventTime();
+        // restrict the interpolator to [previousT, eventT]
         interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(eventT);
 
-                // get state at event time
+        // get the state at event time
         interpolator.setInterpolatedTime(eventT);
         final double[] eventY = interpolator.getInterpolatedState().clone();
 
-                // advance all event states to current time
-                currentEvent.stepAccepted(eventT, eventY);
+        // advance all event states to the event time
+        for (EventState state : eventsStates) {
+            state.stepAccepted(eventT, eventY);
+        }
         isLastStep = currentEvent.stop();
 
-                // handle the first part of the step, up to the event
-                for (final StepHandler handler : stepHandlers) {
+        // handle the part of the step up to the event
+        for (StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, isLastStep);
         }
 
         if (isLastStep) {
-                    // the event asked to stop integration
+            // an event asked to stop integration
             System.arraycopy(eventY, 0, y, 0, y.length);
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
+            for (EventState state : eventsStates) {
+                // finalize other states
+                state.stepAccepted(eventT, eventY);
             }
             return eventT;
         }
 
+        // check for a reset request
         boolean needReset = currentEvent.reset(eventT, eventY);
         if (needReset) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
+            // a handler has reset the state, we must recompute derivatives
             System.arraycopy(eventY, 0, y, 0, y.length);
             computeDerivatives(eventT, y, yDot);
             resetOccurred = true;
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
+            for (EventState state : eventsStates) {
+                // bring all states up to date
+                state.stepAccepted(eventT, eventY);
             }
             return eventT;
         }
 
-                // prepare handling of the remaining part of the step
+        // prepare to handle the remainder of the step
         previousT = eventT;
-                interpolator.setSoftPreviousTime(eventT);
+        interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(currentT);
 
-                // check if the same event occurs again in the remaining part of the step
-                if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
+        // find any further events in the remaining sub‐interval
+        occuringEvents.clear();
+        for (EventState state : eventsStates) {
+            if (state.evaluateStep(interpolator)) {
+                occuringEvents.add(state);
+            }
         }
 
     }
 
-            // last part of the step, after the last event
+    // no more events, finish the step
+    interpolator.setSoftPreviousTime(previousT);
+    interpolator.setSoftCurrentTime(currentT);
     interpolator.setInterpolatedTime(currentT);
     final double[] currentY = interpolator.getInterpolatedState();
-            for (final EventState state : eventsStates) {
+    for (EventState state : eventsStates) {
         state.stepAccepted(currentT, currentY);
         isLastStep = isLastStep || state.stop();
     }
     isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
-            // handle the remaining part of the step, after all events if any
+    // handle the final part of the step
     for (StepHandler handler : stepHandlers) {
         handler.handleStep(interpolator, isLastStep);
     }
 
     return currentT;
 
 }
\ No newline at end of file
