diff --git a/tmp/b799ccda-ec04-4f2b-92b2-1d6f1c71db53_buggy.java b/tmp/9ab02166-3114-4a62-88a3-9e8b621cc57d_fixed.java
index b4d4f38..8de9382 100644
--- a/tmp/b799ccda-ec04-4f2b-92b2-1d6f1c71db53_buggy.java
+++ b/tmp/9ab02166-3114-4a62-88a3-9e8b621cc57d_fixed.java
@@ -1,123 +1,133 @@
 /** Accept a step, triggering events and step handlers.
  * @param interpolator step interpolator
  * @param y state vector at step end time, must be reset if an event
-     * asks for resetting or if an events stops integration during the step
+ * asks for resetting or if an event stops integration during the step
  * @param yDot placeholder array where to put the time derivative of the state vector
  * @param tEnd final integration time
  * @return time at end of step
  * @exception MaxCountExceededException if the interpolator throws one because
  * the number of functions evaluations is exceeded
  * @exception NoBracketingException if the location of an event cannot be bracketed
  * @exception DimensionMismatchException if arrays dimensions do not match equations settings
  * @since 2.2
  */
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
     double previousT = interpolator.getGlobalPreviousTime();
     final double currentT  = interpolator.getGlobalCurrentTime();
 
     // initialize the events states if needed
     if (!statesInitialized) {
         for (EventState state : eventsStates) {
             state.reinitializeBegin(interpolator);
         }
         statesInitialized = true;
     }
 
-            // search for next events that may occur during the step
-            final int orderingSign = interpolator.isForward() ? +1 : -1;
-            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
+    final boolean forward      = interpolator.isForward();
+    final int     orderingSign = forward ? +1 : -1;
 
-                /** {@inheritDoc} */
+    // collect all events strictly inside the step [previousT, currentT]
+    SortedSet<EventState> occuringEvents =
+        new TreeSet<EventState>(new Comparator<EventState>() {
             public int compare(EventState es0, EventState es1) {
-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+                return orderingSign * Double.compare(es0.getEventTime(),
+                                                     es1.getEventTime());
             }
-
         });
 
+    // initial scan for events inside the step
     for (final EventState state : eventsStates) {
         if (state.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
+            final double eventT = state.getEventTime();
+            if (forward ? (eventT > previousT && eventT < currentT)
+                        : (eventT < previousT && eventT > currentT)) {
                 occuringEvents.add(state);
             }
         }
+    }
 
+    // handle all the events found, in chronological order
     while (!occuringEvents.isEmpty()) {
 
-                // handle the chronologically first event
-                final Iterator<EventState> iterator = occuringEvents.iterator();
-                final EventState currentEvent = iterator.next();
-                iterator.remove();
-
-                // restrict the interpolator to the first part of the step, up to the event
+        // the first event to occur
+        final Iterator<EventState> it = occuringEvents.iterator();
+        final EventState currentEvent = it.next();
+        it.remove();
         final double eventT = currentEvent.getEventTime();
+
+        // restrict the interpolator to [previousT, eventT]
         interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(eventT);
 
-                // get state at event time
+        // get the state at the event time
         interpolator.setInterpolatedTime(eventT);
         final double[] eventY = interpolator.getInterpolatedState().clone();
 
-                // advance all event states to current time
+        // inform the event states
         currentEvent.stepAccepted(eventT, eventY);
         isLastStep = currentEvent.stop();
 
-                // handle the first part of the step, up to the event
+        // handle the segment up to the event
         for (final StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, isLastStep);
         }
 
         if (isLastStep) {
             // the event asked to stop integration
             System.arraycopy(eventY, 0, y,    0, y.length);
             for (final EventState remaining : occuringEvents) {
                 remaining.stepAccepted(eventT, eventY);
             }
             return eventT;
         }
 
-                boolean needReset = currentEvent.reset(eventT, eventY);
+        // handle a possible state reset
+        final boolean needReset = currentEvent.reset(eventT, eventY);
         if (needReset) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
+            // state has changed, recompute derivatives
             System.arraycopy(eventY, 0, y,    0, y.length);
             computeDerivatives(eventT, y, yDot);
             resetOccurred = true;
             for (final EventState remaining : occuringEvents) {
                 remaining.stepAccepted(eventT, eventY);
             }
             return eventT;
         }
 
-                // prepare handling of the remaining part of the step
+        // prepare the remaining part of the step [eventT, currentT]
         previousT = eventT;
-                interpolator.setSoftPreviousTime(eventT);
+        interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(currentT);
 
-                // check if the same event occurs again in the remaining part of the step
-                if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
+        // scan again for any events in the remaining substep
+        for (final EventState state : eventsStates) {
+            if (state.evaluateStep(interpolator)) {
+                final double nextT = state.getEventTime();
+                if (forward ? (nextT > previousT && nextT < currentT)
+                            : (nextT < previousT && nextT > currentT)) {
+                    occuringEvents.add(state);
+                }
+            }
         }
-
     }
 
-            // last part of the step, after the last event
+    // no more events in this step, handle the final segment [previousT, currentT]
     interpolator.setInterpolatedTime(currentT);
     final double[] currentY = interpolator.getInterpolatedState();
     for (final EventState state : eventsStates) {
         state.stepAccepted(currentT, currentY);
         isLastStep = isLastStep || state.stop();
     }
     isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
-            // handle the remaining part of the step, after all events if any
-            for (StepHandler handler : stepHandlers) {
+    // notify the step handlers of the last part of the step
+    for (final StepHandler handler : stepHandlers) {
         handler.handleStep(interpolator, isLastStep);
     }
 
     return currentT;
 
 }
\ No newline at end of file
