diff --git a/tmp/409b9450-5da4-4bb4-9744-ff7ce7f8ac04_buggy.java b/tmp/757822fa-913d-42f4-bc25-d96291896ae6_fixed.java
index b4d4f38..978b47d 100644
--- a/tmp/409b9450-5da4-4bb4-9744-ff7ce7f8ac04_buggy.java
+++ b/tmp/757822fa-913d-42f4-bc25-d96291896ae6_fixed.java
@@ -1,123 +1,107 @@
-    /** Accept a step, triggering events and step handlers.
-     * @param interpolator step interpolator
-     * @param y state vector at step end time, must be reset if an event
-     * asks for resetting or if an events stops integration during the step
-     * @param yDot placeholder array where to put the time derivative of the state vector
-     * @param tEnd final integration time
-     * @return time at end of step
-     * @exception MaxCountExceededException if the interpolator throws one because
-     * the number of functions evaluations is exceeded
-     * @exception NoBracketingException if the location of an event cannot be bracketed
-     * @exception DimensionMismatchException if arrays dimensions do not match equations settings
-     * @since 2.2
-     */
+@Override
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
     double previousT = interpolator.getGlobalPreviousTime();
     final double currentT = interpolator.getGlobalCurrentTime();
 
-            // initialize the events states if needed
+    // initialize the event states if needed
     if (!statesInitialized) {
         for (EventState state : eventsStates) {
             state.reinitializeBegin(interpolator);
         }
         statesInitialized = true;
     }
 
     // search for next events that may occur during the step
     final int orderingSign = interpolator.isForward() ? +1 : -1;
-            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
-
-                /** {@inheritDoc} */
+    SortedSet<EventState> occurringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
         public int compare(EventState es0, EventState es1) {
             return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
         }
-
     });
-
-            for (final EventState state : eventsStates) {
+    for (EventState state : eventsStates) {
         if (state.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(state);
+            occurringEvents.add(state);
         }
     }
 
-            while (!occuringEvents.isEmpty()) {
+    // process all occurring events in chronological order
+    while (!occurringEvents.isEmpty()) {
 
-                // handle the chronologically first event
-                final Iterator<EventState> iterator = occuringEvents.iterator();
-                final EventState currentEvent = iterator.next();
-                iterator.remove();
-
-                // restrict the interpolator to the first part of the step, up to the event
+        // pick the first event
+        final Iterator<EventState> it = occurringEvents.iterator();
+        final EventState currentEvent = it.next();
+        it.remove();
         final double eventT = currentEvent.getEventTime();
+
+        // restrict interpolator to [previousT, eventT]
         interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(eventT);
 
-                // get state at event time
+        // compute the state at event time
         interpolator.setInterpolatedTime(eventT);
         final double[] eventY = interpolator.getInterpolatedState().clone();
 
-                // advance all event states to current time
-                currentEvent.stepAccepted(eventT, eventY);
-                isLastStep = currentEvent.stop();
+        // advance all event states to this time
+        for (EventState state : eventsStates) {
+            state.stepAccepted(eventT, eventY);
+        }
 
         // handle the first part of the step, up to the event
-                for (final StepHandler handler : stepHandlers) {
-                    handler.handleStep(interpolator, isLastStep);
+        for (StepHandler handler : stepHandlers) {
+            handler.handleStep(interpolator, false);
         }
 
-                if (isLastStep) {
-                    // the event asked to stop integration
+        // eventOccurred may ask to stop
+        if (currentEvent.stop()) {
             System.arraycopy(eventY, 0, y, 0, y.length);
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
-                    }
             return eventT;
         }
 
-                boolean needReset = currentEvent.reset(eventT, eventY);
-                if (needReset) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
+        // eventOccurred may ask to reset
+        if (currentEvent.reset(eventT, eventY)) {
             System.arraycopy(eventY, 0, y, 0, y.length);
             computeDerivatives(eventT, y, yDot);
             resetOccurred = true;
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
+            // reinitialize all states at the reset time
+            for (EventState state : eventsStates) {
+                state.stepAccepted(eventT, eventY);
             }
             return eventT;
         }
 
-                // prepare handling of the remaining part of the step
+        // prepare for the remaining part of the step
         previousT = eventT;
-                interpolator.setSoftPreviousTime(eventT);
+        interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(currentT);
 
-                // check if the same event occurs again in the remaining part of the step
-                if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
+        // re-evaluate all events over [previousT, currentT]
+        occurringEvents.clear();
+        for (EventState state : eventsStates) {
+            if (state.evaluateStep(interpolator)) {
+                occurringEvents.add(state);
+            }
         }
-
     }
 
-            // last part of the step, after the last event
+    // no more events, finish the step
+    interpolator.setSoftPreviousTime(previousT);
+    interpolator.setSoftCurrentTime(currentT);
     interpolator.setInterpolatedTime(currentT);
     final double[] currentY = interpolator.getInterpolatedState();
-            for (final EventState state : eventsStates) {
+    for (EventState state : eventsStates) {
         state.stepAccepted(currentT, currentY);
         isLastStep = isLastStep || state.stop();
     }
     isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
-            // handle the remaining part of the step, after all events if any
+    // handle the remaining part of the step
     for (StepHandler handler : stepHandlers) {
         handler.handleStep(interpolator, isLastStep);
     }
+    System.arraycopy(currentY, 0, y, 0, y.length);
 
     return currentT;
-
 }
\ No newline at end of file
