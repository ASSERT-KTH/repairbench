diff --git a/tmp/5f29824e-81af-4a7c-bd7b-2e303776fc07_buggy.java b/tmp/3763918a-c6e5-41b9-ae58-46d0531a8da3_fixed.java
index fa6828a..6b624ed 100644
--- a/tmp/5f29824e-81af-4a7c-bd7b-2e303776fc07_buggy.java
+++ b/tmp/3763918a-c6e5-41b9-ae58-46d0531a8da3_fixed.java
@@ -1,5 +1,26 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+    // First collect all fields and sort them so that more specific types (subclasses) come before supertypes
+    List<Field> fields = new ArrayList<Field>();
+    for (Field f : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        fields.add(f);
+    }
+    Collections.sort(fields, new Comparator<Field>() {
+        public int compare(Field f1, Field f2) {
+            Class<?> t1 = f1.getType();
+            Class<?> t2 = f2.getType();
+            // if t1 is a supertype of t2, then t2 is more specific => f2 should come before f1
+            if (t1.isAssignableFrom(t2) && !t2.isAssignableFrom(t1)) {
+                return 1;
+            }
+            // if t2 is a supertype of t1, then t1 is more specific => f1 should come before f2
+            if (t2.isAssignableFrom(t1) && !t1.isAssignableFrom(t2)) {
+                return -1;
+            }
+            return 0;
+        }
+    });
+    // Now inject in that order
+    for (Field field : fields) {
         mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
     }
 }
\ No newline at end of file
