diff --git a/tmp/2d3f9aa7-bedd-4d02-a226-b184082e1933_buggy.java b/tmp/7f460827-31eb-4e0e-b355-ed1939f7650c_fixed.java
index fa6828a..da6e17c 100644
--- a/tmp/2d3f9aa7-bedd-4d02-a226-b184082e1933_buggy.java
+++ b/tmp/7f460827-31eb-4e0e-b355-ed1939f7650c_fixed.java
@@ -1,5 +1,24 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+    // reorder fields so that more specific types (subtypes) are injected before their supertypes
+    List<Field> fields = new ArrayList<Field>(orderedInstanceFieldsFrom(awaitingInjectionClazz));
+    Collections.sort(fields, new Comparator<Field>() {
+        public int compare(Field f1, Field f2) {
+            Class<?> t1 = f1.getType();
+            Class<?> t2 = f2.getType();
+            if (t1 != t2) {
+                // if t1 is a strict subtype of t2, f1 is more specific → comes first
+                if (t2.isAssignableFrom(t1) && !t1.isAssignableFrom(t2)) {
+                    return -1;
+                }
+                // if t2 is a strict subtype of t1, f2 is more specific → comes first
+                if (t1.isAssignableFrom(t2) && !t2.isAssignableFrom(t1)) {
+                    return 1;
+                }
+            }
+            return 0;
+        }
+    });
+    for (Field field : fields) {
         mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
     }
 }
\ No newline at end of file
