diff --git a/tmp/f1e3f96d-2b5a-4d75-b72f-a61b5e222519_buggy.java b/tmp/f94f4776-88b1-42f6-afc2-59fa2bb89211_fixed.java
index fa6828a..7166495 100644
--- a/tmp/f1e3f96d-2b5a-4d75-b72f-a61b5e222519_buggy.java
+++ b/tmp/f94f4776-88b1-42f6-afc2-59fa2bb89211_fixed.java
@@ -1,5 +1,26 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+    // sort fields so that more specific types (subclasses) come before their ancestors
+    List<Field> fields = new ArrayList<Field>(orderedInstanceFieldsFrom(awaitingInjectionClazz));
+    Collections.sort(fields, new Comparator<Field>() {
+        public int compare(Field f1, Field f2) {
+            Class<?> t1 = f1.getType();
+            Class<?> t2 = f2.getType();
+            if (t1.equals(t2)) {
+                return 0;
+            }
+            // if t2 is a subtype of t1, t2 is more specific → f2 should come first
+            if (t1.isAssignableFrom(t2)) {
+                return 1;
+            }
+            // if t1 is a subtype of t2, t1 is more specific → f1 should come first
+            if (t2.isAssignableFrom(t1)) {
+                return -1;
+            }
+            // otherwise keep original order
+            return 0;
+        }
+    });
+    for (Field field : fields) {
         mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
     }
 }
\ No newline at end of file
