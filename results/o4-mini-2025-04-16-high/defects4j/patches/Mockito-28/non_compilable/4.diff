diff --git a/tmp/261c3a6d-3c94-494c-91b7-d2559076fa04_buggy.java b/tmp/ebda33a6-81a0-4e62-97bd-353f27e16254_fixed.java
index fa6828a..139083d 100644
--- a/tmp/261c3a6d-3c94-494c-91b7-d2559076fa04_buggy.java
+++ b/tmp/ebda33a6-81a0-4e62-97bd-353f27e16254_fixed.java
@@ -1,5 +1,30 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+    // reorder fields so that more specific types (subtypes) are injected before their supertypes
+    List<Field> fields = new ArrayList<Field>(orderedInstanceFieldsFrom(awaitingInjectionClazz));
+    Collections.sort(fields, new Comparator<Field>() {
+        @Override
+        public int compare(Field f1, Field f2) {
+            Class<?> t1 = f1.getType();
+            Class<?> t2 = f2.getType();
+            if (t1.equals(t2)) {
+                return 0;
+            }
+            // if f2's type is a subtype of f1's, f2 is more specific → should come first
+            if (t1.isAssignableFrom(t2)) {
+                return 1;
+            }
+            // if f1's type is a subtype of f2's, f1 is more specific → should come first
+            if (t2.isAssignableFrom(t1)) {
+                return -1;
+            }
+            // unrelated types → keep original order
+            return 0;
+        }
+    });
+
+    for (Field field : fields) {
+        mockCandidateFilter
+            .filterCandidate(mocks, field, fieldInstance)
+            .thenInject();
     }
 }
\ No newline at end of file
