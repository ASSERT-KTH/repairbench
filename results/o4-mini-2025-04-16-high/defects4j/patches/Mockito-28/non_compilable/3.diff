diff --git a/tmp/389ae902-d050-406c-b233-0e66510d0745_buggy.java b/tmp/9250fedb-8fb0-4ebd-a6d5-3b873e649a9b_fixed.java
index fa6828a..7598e49 100644
--- a/tmp/389ae902-d050-406c-b233-0e66510d0745_buggy.java
+++ b/tmp/9250fedb-8fb0-4ebd-a6d5-3b873e649a9b_fixed.java
@@ -1,5 +1,36 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+    // copy fields into a list so we can reorder them
+    List<Field> fields = new ArrayList<Field>();
     for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        fields.add(field);
+    }
+    // sort by how specifically the field type matches any mock:
+    // exact match (0) first, then assignable supertypes (1), then non‚Äêmatches (2)
+    final Set<Object> mockSet = mocks;
+    Collections.sort(fields, new Comparator<Field>() {
+        public int compare(Field f1, Field f2) {
+            return specificity(f1) - specificity(f2);
+        }
+        private int specificity(Field f) {
+            Class<?> type = f.getType();
+            // 0 = exact type match
+            for (Object mock : mockSet) {
+                if (type.equals(mock.getClass())) {
+                    return 0;
+                }
+            }
+            // 1 = assignable (ancestor) match
+            for (Object mock : mockSet) {
+                if (type.isAssignableFrom(mock.getClass())) {
+                    return 1;
+                }
+            }
+            // 2 = no match
+            return 2;
+        }
+    });
+    // perform injection in the new order
+    for (Field field : fields) {
         mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
     }
 }
\ No newline at end of file
