diff --git a/tmp/a0531628-419d-4c33-bcf9-5a735ddb1a6d_buggy.java b/tmp/540df1a3-a119-4e84-9add-2ecb6ecc5f5a_fixed.java
index fa6828a..f7df57b 100644
--- a/tmp/a0531628-419d-4c33-bcf9-5a735ddb1a6d_buggy.java
+++ b/tmp/540df1a3-a119-4e84-9add-2ecb6ecc5f5a_fixed.java
@@ -1,5 +1,32 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+    // collect fields in original order
+    List<Field> fields = new ArrayList<Field>();
     for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        fields.add(field);
+    }
+    // split into exact‚Äêtype matches and ancestor matches
+    List<Field> exactMatchFields = new ArrayList<Field>();
+    List<Field> ancestorFields   = new ArrayList<Field>();
+    for (Field field : fields) {
+        boolean exactMatch = false;
+        Class<?> fieldType = field.getType();
+        for (Object mock : mocks) {
+            if (mock.getClass().equals(fieldType)) {
+                exactMatch = true;
+                break;
+            }
+        }
+        if (exactMatch) {
+            exactMatchFields.add(field);
+        } else {
+            ancestorFields.add(field);
+        }
+    }
+    // first inject exact matches, then inject by ancestor (supertype) matches
+    for (Field field : exactMatchFields) {
+        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+    }
+    for (Field field : ancestorFields) {
         mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
     }
 }
\ No newline at end of file
