diff --git a/tmp/52dfc46a-1dab-4459-bdab-a0282fb27ce5_buggy.java b/tmp/94dcc685-e4f5-45ec-89fd-29a294517590_fixed.java
index fa6828a..5cc46c2 100644
--- a/tmp/52dfc46a-1dab-4459-bdab-a0282fb27ce5_buggy.java
+++ b/tmp/94dcc685-e4f5-45ec-89fd-29a294517590_fixed.java
@@ -1,5 +1,37 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+    List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+
+    // First pass: inject mocks whose concrete class exactly matches the field type
+    for (Field field : fields) {
+        for (Iterator<Object> it = mocks.iterator(); it.hasNext(); ) {
+            Object mock = it.next();
+            if (field.getType().equals(mock.getClass())) {
+                field.setAccessible(true);
+                try {
+                    field.set(fieldInstance, mock);
+                } catch (IllegalAccessException e) {
+                    throw new RuntimeException("Failed to inject mock into field " + field, e);
+                }
+                it.remove();
+                break;
+            }
+        }
+    }
+
+    // Second pass: inject remaining mocks into fields where the field type is a supertype
+    for (Field field : fields) {
+        for (Iterator<Object> it = mocks.iterator(); it.hasNext(); ) {
+            Object mock = it.next();
+            if (field.getType().isAssignableFrom(mock.getClass())) {
+                field.setAccessible(true);
+                try {
+                    field.set(fieldInstance, mock);
+                } catch (IllegalAccessException e) {
+                    throw new RuntimeException("Failed to inject mock into field " + field, e);
+                }
+                it.remove();
+                break;
+            }
+        }
     }
 }
\ No newline at end of file
