diff --git a/tmp/a361d909-861f-46d9-9082-93bf14c22b2b_buggy.java b/tmp/55c55cfe-263d-47cf-be6a-c8aae5b78003_fixed.java
index 81872ca..fb559dc 100644
--- a/tmp/a361d909-861f-46d9-9082-93bf14c22b2b_buggy.java
+++ b/tmp/55c55cfe-263d-47cf-be6a-c8aae5b78003_fixed.java
@@ -1,70 +1,66 @@
 /**
  * Parse an octal string from a buffer.
  *
  * <p>Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.</p>
  *
  * <p>The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).</p>
  *
  * <p>To work-around some tar implementations that insert a
  * leading NUL this method returns 0 if it detects a leading NUL
  * since Commons Compress 1.4.</p>
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
-        int     end = offset + length;
     int start = offset;
+    int end = offset + length;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
+    // If the very first byte is NUL, treat it as a missing field => 0
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    while (start < end && buffer[start] == ' ') {
         start++;
-            } else {
-                break;
-            }
     }
 
     // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
     byte trailer = buffer[end - 1];
     while (start < end && (trailer == 0 || trailer == ' ')) {
         end--;
         trailer = buffer[end - 1];
     }
+
+    // If after skipping/trimming there are no digits, treat as zero
     if (start == end) {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, trailer));
+        return 0L;
     }
 
+    // Parse the octal digits
     for (; start < end; start++) {
-            final byte currentByte = buffer[start];
+        final byte current = buffer[start];
         // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+        if (current < '0' || current > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, start, current));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+        result = (result << 3) + (current - '0');
         // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
