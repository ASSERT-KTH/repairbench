diff --git a/tmp/33859a74-56db-4012-a290-78d8e82b4d53_buggy.java b/tmp/65e2f3e8-f065-458b-a9c8-95fa61db92f7_fixed.java
index b4af58a..60772ee 100644
--- a/tmp/33859a74-56db-4012-a290-78d8e82b4d53_buggy.java
+++ b/tmp/65e2f3e8-f065-458b-a9c8-95fa61db92f7_fixed.java
@@ -1,53 +1,54 @@
 /**
  * Creates a new timeseries by copying a subset of the data in this time
  * series.
  *
-     * @param start  the first time period to copy (<code>null</code> not
-     *         permitted).
-     * @param end  the last time period to copy (<code>null</code> not
-     *         permitted).
+ * @param start  the first time period to copy (null not permitted).
+ * @param end    the last time period to copy (null not permitted).
  *
  * @return A time series containing a copy of this time series from start
  *         until end.
  *
  * @throws CloneNotSupportedException if there is a cloning problem.
  */
 public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
     if (start == null) {
         throw new IllegalArgumentException("Null 'start' argument.");
     }
     if (end == null) {
         throw new IllegalArgumentException("Null 'end' argument.");
     }
     if (start.compareTo(end) > 0) {
-            throw new IllegalArgumentException(
-                    "Requires start on or before end.");
+        throw new IllegalArgumentException("Requires start on or before end.");
     }
+
     boolean emptyRange = false;
+    // locate the first index >= start
     int startIndex = getIndex(start);
     if (startIndex < 0) {
         startIndex = -(startIndex + 1);
         if (startIndex == this.data.size()) {
             emptyRange = true;  // start is after last data item
         }
     }
+
+    // locate the last index <= end
     int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
+    if (endIndex < 0) {
+        // not an exact match, compute insertion point - 1
+        endIndex = -(endIndex + 1) - 1;
     }
     if (endIndex < 0) {
-            emptyRange = true;
+        emptyRange = true;  // end is before first data item
     }
-        if (emptyRange) {
+
+    // if the computed range is invalid or empty, return an empty clone
+    if (emptyRange || startIndex > endIndex) {
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
         return copy;
     }
-        else {
+    // otherwise delegate to the indexed copy
     return createCopy(startIndex, endIndex);
 }
\ No newline at end of file
-
-    }
