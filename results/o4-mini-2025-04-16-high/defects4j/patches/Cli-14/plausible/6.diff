diff --git a/tmp/5a99aee4-ebdb-43cb-bd96-1b1cec68cc61_buggy.java b/tmp/7068c9bd-e096-48d7-a5e1-2c6fa3620abb_fixed.java
index 71189c3..21232c3 100644
--- a/tmp/5a99aee4-ebdb-43cb-bd96-1b1cec68cc61_buggy.java
+++ b/tmp/7068c9bd-e096-48d7-a5e1-2c6fa3620abb_fixed.java
@@ -1,46 +1,50 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
-
-        // reference to first unexpected option
+    // keep track of the first option that overruns the max
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+        // if this is a required option or a nested Group, do an early validation
+        boolean validatedEarly = false;
+        if (option.isRequired() || option instanceof Group) {
             option.validate(commandLine);
+            validatedEarly = true;
         }
 
-            // if the child option is present then validate it
+        // now handle presence-based validation
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
+            // avoid double-validating something we already validated above
+            if (!validatedEarly) {
                 option.validate(commandLine);
             }
         }
+    }
 
-        // too many options
+    // too many
     if (unexpected != null) {
-            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
-                                      unexpected.getPreferredName());
+        throw new OptionException(
+            this,
+            ResourceConstants.UNEXPECTED_TOKEN,
+            unexpected.getPreferredName()
+        );
     }
 
-        // too few option
+    // too few
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
-        // validate each anonymous argument
+    // finally validate any anonymous arguments
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
-            final Option option = (Option) i.next();
-            option.validate(commandLine);
+        final Option anon = (Option) i.next();
+        anon.validate(commandLine);
     }
 }
\ No newline at end of file
