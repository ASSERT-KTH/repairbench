diff --git a/tmp/b7390439-da04-4b20-a837-958e2479f2e6_buggy.java b/tmp/8a33bdd8-fb32-4051-876f-c0029b7c13af_fixed.java
index 71189c3..d5648f7 100644
--- a/tmp/b7390439-da04-4b20-a837-958e2479f2e6_buggy.java
+++ b/tmp/8a33bdd8-fb32-4051-876f-c0029b7c13af_fixed.java
@@ -1,46 +1,47 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+        // only do the "required" or nested‐group check once
+        final boolean initial = option.isRequired() || option instanceof Group;
+        if (initial) {
             option.validate(commandLine);
         }
 
-            // if the child option is present then validate it
+        // if the option is actually present, count and validate it (only once)
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
+            if (!initial) {
                 option.validate(commandLine);
             }
         }
+    }
 
     // too many options
     if (unexpected != null) {
-            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
+        throw new OptionException(this,
+                                  ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // too few options in this group
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
