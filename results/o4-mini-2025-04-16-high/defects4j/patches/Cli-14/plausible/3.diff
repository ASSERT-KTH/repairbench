diff --git a/tmp/3c45e413-08fd-4f5b-b44c-5ca99841abf9_buggy.java b/tmp/0f7c7193-3e0b-45e0-9948-661508908311_fixed.java
index 71189c3..feb6a7e 100644
--- a/tmp/3c45e413-08fd-4f5b-b44c-5ca99841abf9_buggy.java
+++ b/tmp/0f7c7193-3e0b-45e0-9948-661508908311_fixed.java
@@ -1,46 +1,50 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+        // if this is a subgroup, recurse into it once
+        if (option instanceof Group) {
             option.validate(commandLine);
+            continue;
         }
 
-            // if the child option is present then validate it
+        // if the option was actually provided, validate it exactly once
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
+            option.validate(commandLine);
+        }
+        // if it wasn't provided but is required, trigger its own validation
+        else if (option.isRequired()) {
             option.validate(commandLine);
         }
     }
 
     // too many options
     if (unexpected != null) {
-            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
+        throw new OptionException(this,
+                                  ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // too few options
     if (present < minimum) {
-            throw new OptionException(this, ResourceConstants.MISSING_OPTION);
+        throw new OptionException(this,
+                                  ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
-            final Option option = (Option) i.next();
-            option.validate(commandLine);
+        final Option anon = (Option) i.next();
+        anon.validate(commandLine);
     }
 }
\ No newline at end of file
