diff --git a/tmp/2739e0f2-2bdc-4028-ab7d-8e5a9e5a9981_buggy.java b/tmp/dd4bdd10-12ff-4e7a-861e-7cebfb038793_fixed.java
index 71189c3..8a6d1b9 100644
--- a/tmp/2739e0f2-2bdc-4028-ab7d-8e5a9e5a9981_buggy.java
+++ b/tmp/dd4bdd10-12ff-4e7a-861e-7cebfb038793_fixed.java
@@ -1,46 +1,43 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
-        // number of options found
     int present = 0;
-
-        // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+        // always validate nested groups
+        if (option instanceof Group) {
             option.validate(commandLine);
-            }
 
-            // if the child option is present then validate it
-            if (commandLine.hasOption(option)) {
+        // validate each option exactly once if present
+        } else if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
+            option.validate(commandLine);
 
+        // still validate required options that are missing (will throw)
+        } else if (option.isRequired()) {
             option.validate(commandLine);
         }
     }
 
-        // too many options
     if (unexpected != null) {
-            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
+        throw new OptionException(this,
+            ResourceConstants.UNEXPECTED_TOKEN,
             unexpected.getPreferredName());
     }
 
-        // too few option
     if (present < minimum) {
-            throw new OptionException(this, ResourceConstants.MISSING_OPTION);
+        throw new OptionException(this,
+            ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
-            final Option option = (Option) i.next();
-            option.validate(commandLine);
+        final Option opt = (Option) i.next();
+        opt.validate(commandLine);
     }
 }
\ No newline at end of file
