diff --git a/tmp/c6669081-f561-4fd9-a630-27caa4bda24e_buggy.java b/tmp/f6da862b-8f44-49e3-be7f-b03b9cb0d17b_fixed.java
index 71189c3..48cb9c2 100644
--- a/tmp/c6669081-f561-4fd9-a630-27caa4bda24e_buggy.java
+++ b/tmp/f6da862b-8f44-49e3-be7f-b03b9cb0d17b_fixed.java
@@ -1,46 +1,42 @@
 public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+        // validate required, grouped or present options exactly once
         option.validate(commandLine);
-            }
 
-            // if the child option is present then validate it
+        // count if the option was actually present on the command line
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
-                option.validate(commandLine);
         }
     }
 
     // too many options
     if (unexpected != null) {
-            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
+        throw new OptionException(this,
+                                  ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // too few options
     if (present < minimum) {
-            throw new OptionException(this, ResourceConstants.MISSING_OPTION);
+        throw new OptionException(this,
+                                  ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
