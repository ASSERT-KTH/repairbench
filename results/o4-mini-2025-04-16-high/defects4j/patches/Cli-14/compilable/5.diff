diff --git a/tmp/82c792ba-a5bb-4af5-b895-df1b90c4274b_buggy.java b/tmp/3e7586f6-b531-4f08-9eef-3a43180fc191_fixed.java
index 71189c3..0b6553f 100644
--- a/tmp/82c792ba-a5bb-4af5-b895-df1b90c4274b_buggy.java
+++ b/tmp/3e7586f6-b531-4f08-9eef-3a43180fc191_fixed.java
@@ -1,46 +1,49 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
-        // number of options found
     int present = 0;
-
-        // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+        // validate nested groups first
+        if (option instanceof Group) {
             option.validate(commandLine);
         }
 
-            // if the child option is present then validate it
+        // if this option (or nested group) is present, count and validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
+            // only validate non‐group options here (groups were validated above)
+            if (!(option instanceof Group)) {
                 option.validate(commandLine);
             }
         }
+        // missing required child option
+        else if (option.isRequired()) {
+            throw new OptionException(option, ResourceConstants.MISSING_OPTION);
+        }
+    }
 
-        // too many options
+    // too many options chosen
     if (unexpected != null) {
-            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
+        throw new OptionException(this,
+                                  ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // too few options chosen at the group level
     if (present < minimum) {
-            throw new OptionException(this, ResourceConstants.MISSING_OPTION);
+        throw new OptionException(this,
+                                  ResourceConstants.MISSING_OPTION);
     }
 
-        // validate each anonymous argument
+    // validate anonymous (un‐named) arguments
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
-            final Option option = (Option) i.next();
-            option.validate(commandLine);
+        final Option opt = (Option) i.next();
+        opt.validate(commandLine);
     }
 }
\ No newline at end of file
