diff --git a/tmp/b16a0de5-ecb5-48d3-831d-8edd7c4106e3_buggy.java b/tmp/7a8a7a0f-0d94-41f4-8bbc-c298b0e2abfe_fixed.java
index cd412d2..271b08c 100644
--- a/tmp/b16a0de5-ecb5-48d3-831d-8edd7c4106e3_buggy.java
+++ b/tmp/7a8a7a0f-0d94-41f4-8bbc-c298b0e2abfe_fixed.java
@@ -1,76 +1,146 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+    char last = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // plain date, e.g. "yyyy-MM-dd"
+    if (len <= 10 && Character.isDigit(last)) {
         df = _formatPlain;
         if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+            df = _formatPlain = _cloneFormat(
+                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,
+                _timezone, _locale
+            );
         }
-        } else if (c == 'Z') {
+    }
+    // ends-with-Z (Zulu) form
+    else if (last == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+            df = _formatISO8601_z = _cloneFormat(
+                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+                _timezone, _locale
+            );
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
+        // might be missing milliseconds, e.g. "yyyy-MM-ddTHH:mmZ" or "...HH:mm:ssZ"
+        // we ensure ".000" is there
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
         }
-        } else {
-            // Let's see if we have timezone indicator or not...
+    }
+    // has a timezone offset ("+hh:mm" or "-hh:mm") or none
+    else {
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            // strip optional colon in timezone offset
+            int tzColon = dateStr.length() - 3;
+            char tzC = dateStr.charAt(tzColon);
+            if (tzC == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                sb.delete(tzColon, tzColon + 1);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
+            } else if (tzC == '+' || tzC == '-') {
+                // "+hh" => "+hh00"
+                dateStr = dateStr + "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+            // split off the timezone offset
+            int total = dateStr.length();
+            String tzOffset = dateStr.substring(total - 5);
+            String core = dateStr.substring(0, total - 5);
+
+            // split date/time at the 'T'
+            int tPos = core.indexOf('T');
+            String datePart = core.substring(0, tPos + 1);
+            String timePart = core.substring(tPos + 1);
+
+            // separate seconds and fractional
+            String secondsPart;
+            String fracPart = "";
+            int dot = timePart.indexOf('.');
+            if (dot >= 0) {
+                secondsPart = timePart.substring(0, dot);
+                fracPart = timePart.substring(dot + 1);
+            } else {
+                secondsPart = timePart;
+            }
+            // if only "HH:mm", add ":00"
+            if (secondsPart.indexOf(':') == secondsPart.lastIndexOf(':')) {
+                secondsPart = secondsPart + ":00";
             }
+            // normalize fraction to exactly 3 digits
+            if (dot < 0) {
+                fracPart = "000";
+            } else {
+                if (fracPart.length() == 1) {
+                    fracPart = fracPart + "00";
+                } else if (fracPart.length() == 2) {
+                    fracPart = fracPart + "0";
+                } else if (fracPart.length() > 3) {
+                    fracPart = fracPart.substring(0, 3);
+                }
+            }
+            // rebuild canonical ISO8601 with "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
+            StringBuilder sb = new StringBuilder();
+            sb.append(datePart)
+              .append(secondsPart)
+              .append('.')
+              .append(fracPart)
+              .append(tzOffset);
+            dateStr = sb.toString();
+
             df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
+            if (df == null) {
+                df = _formatISO8601 = _cloneFormat(
+                    DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,
+                    _timezone, _locale
+                );
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
+            // no timezone at all: treat as Zulu after fixing time
+            int tPos = dateStr.indexOf('T');
+            String datePart = (tPos >= 0) ? dateStr.substring(0, tPos + 1) : dateStr;
+            String timePart = (tPos >= 0) ? dateStr.substring(tPos + 1) : "";
+
+            String secondsPart;
+            String fracPart = "";
+            int dot = timePart.indexOf('.');
+            if (dot >= 0) {
+                secondsPart = timePart.substring(0, dot);
+                fracPart = timePart.substring(dot + 1);
+            } else {
+                secondsPart = timePart;
+            }
+            if (secondsPart.indexOf(':') == secondsPart.lastIndexOf(':')) {
+                secondsPart = secondsPart + ":00";
+            }
+            if (dot < 0) {
+                fracPart = "000";
+            } else {
+                if (fracPart.length() == 1) {
+                    fracPart = fracPart + "00";
+                } else if (fracPart.length() == 2) {
+                    fracPart = fracPart + "0";
+                } else if (fracPart.length() > 3) {
+                    fracPart = fracPart.substring(0, 3);
+                }
+            }
+            StringBuilder sb = new StringBuilder();
+            sb.append(datePart)
+              .append(secondsPart)
+              .append('.')
+              .append(fracPart)
+              .append('Z');
             dateStr = sb.toString();
+
             df = _formatISO8601_z;
             if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+                df = _formatISO8601_z = _cloneFormat(
+                    DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+                    _timezone, _locale
+                );
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
