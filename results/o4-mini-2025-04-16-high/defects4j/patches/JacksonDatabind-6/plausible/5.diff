diff --git a/tmp/67ca69eb-5b6d-493d-abee-9940b393ad6c_buggy.java b/tmp/de4762b4-9d41-48b9-afac-82188f58aa89_fixed.java
index cd412d2..fc98bb1 100644
--- a/tmp/67ca69eb-5b6d-493d-abee-9940b393ad6c_buggy.java
+++ b/tmp/de4762b4-9d41-48b9-afac-82188f58aa89_fixed.java
@@ -1,76 +1,133 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+    char last = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // [JACKSON-200]: support plain date ("yyyy-MM-dd")
+    if (len <= 10 && Character.isDigit(last)) {
         df = _formatPlain;
         if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+            df = _formatPlain = _cloneFormat(
+                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,
+                _timezone, _locale
+            );
         }
-        } else if (c == 'Z') {
+        return df.parse(dateStr, pos);
+    }
+
+    // General ISO-8601: normalize into "yyyy-MM-dd'T'HH:mm:ss.SSSZ" or "...'Z'"
+    boolean hasTZ = false;
+    boolean zulu = false;
+    String tz = null;
+    String input = dateStr;
+
+    // 1) detect literal 'Z' (Zulu)
+    if (input.endsWith("Z")) {
+        hasTZ = true;
+        zulu = true;
+        tz = "Z";
+        input = input.substring(0, input.length() - 1);
+    } else {
+        // 2) detect offset (+/-HH:mm or +/-HHmm or +/-HH)
+        int tzPos = -1;
+        int plus = input.lastIndexOf('+');
+        int minus = input.lastIndexOf('-');
+        if (plus > 10) {
+            tzPos = plus;
+        }
+        if (minus > 10 && minus > tzPos) {
+            tzPos = minus;
+        }
+        if (tzPos > 10) {
+            hasTZ = true;
+            tz = input.substring(tzPos);
+            input = input.substring(0, tzPos);
+        }
+    }
+
+    // split date and time parts
+    String datePart;
+    String timePart = null;
+    int tPos = input.indexOf('T');
+    if (tPos >= 0) {
+        datePart = input.substring(0, tPos);
+        timePart = input.substring(tPos + 1);
+    } else {
+        datePart = input;
+    }
+
+    // pick apart H, m, s, fraction
+    String hour = "00", minute = "00", second = "00", msec = "000";
+    if (timePart != null && !timePart.isEmpty()) {
+        String base = timePart;
+        String frac = null;
+        int dot = base.indexOf('.');
+        if (dot >= 0) {
+            frac = base.substring(dot + 1);
+            base = base.substring(0, dot);
+        }
+        String[] parts = base.split(":");
+        if (parts.length > 0) hour   = parts[0];
+        if (parts.length > 1) minute = parts[1];
+        if (parts.length > 2) second = parts[2];
+        if (frac != null && !frac.isEmpty()) {
+            // pad or truncate fraction to 3 digits
+            if (frac.length() == 1) {
+                msec = frac + "00";
+            } else if (frac.length() == 2) {
+                msec = frac + "0";
+            } else {
+                msec = frac.substring(0, 3);
+            }
+        }
+    }
+
+    // rebuild into full ISO-8601 string
+    StringBuilder sb = new StringBuilder(32);
+    sb.append(datePart)
+      .append('T')
+      .append(hour).append(':').append(minute).append(':').append(second)
+      .append('.').append(msec);
+
+    if (hasTZ) {
+        if (zulu) {
+            sb.append('Z');
             df = _formatISO8601_z;
             if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
-            }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+                df = _formatISO8601_z = _cloneFormat(
+                    DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+                    _timezone, _locale
+                );
             }
         } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+            // normalize "+HH:mm" -> "+HHmm", "+HH" -> "+HH00"
+            String off = tz;
+            if (off.length() > 3 && off.charAt(3) == ':') {
+                off = off.substring(0, 3) + off.substring(4);
+            } else if (off.length() == 3) {
+                off = off + "00";
             }
+            sb.append(off);
             df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
+            if (df == null) {
+                df = _formatISO8601 = _cloneFormat(
+                    DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,
+                    _timezone, _locale
+                );
+            }
         }
     } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
+        // no timezone: assume Zulu
         sb.append('Z');
-                dateStr = sb.toString();
         df = _formatISO8601_z;
         if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
+            df = _formatISO8601_z = _cloneFormat(
+                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+                _timezone, _locale
+            );
         }
     }
+
+    dateStr = sb.toString();
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
