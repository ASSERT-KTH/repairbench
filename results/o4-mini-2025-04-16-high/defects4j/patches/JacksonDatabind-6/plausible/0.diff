diff --git a/tmp/4ddc8d85-0edc-4faa-a926-0b775f393fdc_buggy.java b/tmp/0a1d7f48-d94d-4592-99c6-abf71edaf23b_fixed.java
index cd412d2..a3a15c5 100644
--- a/tmp/4ddc8d85-0edc-4faa-a926-0b775f393fdc_buggy.java
+++ b/tmp/0a1d7f48-d94d-4592-99c6-abf71edaf23b_fixed.java
@@ -1,76 +1,126 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+    char last = dateStr.charAt(len - 1);
     DateFormat df;
-
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // plain "yyyy-MM-dd"?
+    if (len <= 10 && Character.isDigit(last)) {
         df = _formatPlain;
         if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
-            }
-        } else if (c == 'Z') {
-            df = _formatISO8601_z;
-            if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
-            }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
-            }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
-                df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+            df = _formatPlain = _cloneFormat(
+                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,
                 _timezone, _locale);
         }
-            }
-        }
         return df.parse(dateStr, pos);
     }
+    // split off timezone part
+    String main = dateStr;
+    String tz = null;
+    if (last == 'Z') {
+        main = dateStr.substring(0, len - 1);
+        tz = "Z";
+    } else {
+        int tPos = dateStr.indexOf('T');
+        if (tPos >= 0) {
+            int plus = dateStr.indexOf('+', tPos + 1);
+            int minus = dateStr.indexOf('-', tPos + 1);
+            int tzPos = -1;
+            if (plus > 0 && minus > 0) {
+                tzPos = Math.max(plus, minus);
+            } else if (plus > 0) {
+                tzPos = plus;
+            } else if (minus > 0) {
+                tzPos = minus;
+            }
+            if (tzPos > 0) {
+                main = dateStr.substring(0, tzPos);
+                tz = dateStr.substring(tzPos);
+            }
+        }
+    }
+    // normalize timezone string
+    String tzStr;
+    if (tz == null || tz.isEmpty()) {
+        tzStr = "Z";
+    } else if ("Z".equals(tz)) {
+        tzStr = "Z";
+    } else {
+        tzStr = tz.replace(":", "");
+        if (tzStr.length() == 3) { // +HH or -HH
+            tzStr = tzStr + "00";
+        }
+    }
+    // normalize the "main" part into hh:mm:ss.SSS
+    String datePart;
+    String timePart = null;
+    int tIndex = main.indexOf('T');
+    if (tIndex >= 0) {
+        datePart = main.substring(0, tIndex);
+        timePart = main.substring(tIndex + 1);
+    } else {
+        datePart = main;
+    }
+    String hour = "00", minute = "00", second = "00", frac = "000";
+    if (timePart != null) {
+        String[] parts = timePart.split(":", 3);
+        hour = parts[0];
+        if (parts.length > 1) {
+            minute = parts[1];
+        }
+        if (parts.length > 2) {
+            String secAndMs = parts[2];
+            int dot = secAndMs.indexOf('.');
+            if (dot < 0) {
+                second = secAndMs;
+            } else {
+                second = secAndMs.substring(0, dot);
+                frac = secAndMs.substring(dot + 1);
+            }
+        }
+    }
+    // pad hour/min/sec
+    if (hour.length() == 1) {
+        hour = "0" + hour;
+    }
+    if (minute.length() == 1) {
+        minute = "0" + minute;
+    }
+    if (second.length() == 0) {
+        second = "00";
+    } else if (second.length() == 1) {
+        second = "0" + second;
+    }
+    // pad or trim fraction to exactly 3 digits
+    if (frac.length() > 3) {
+        frac = frac.substring(0, 3);
+    } else if (frac.length() == 1) {
+        frac = frac + "00";
+    } else if (frac.length() == 2) {
+        frac = frac + "0";
+    } else if (frac.length() == 0) {
+        frac = "000";
+    }
+    // rebuild normalized string
+    StringBuilder sb = new StringBuilder(30);
+    sb.append(datePart)
+      .append('T').append(hour).append(':').append(minute)
+      .append(':').append(second).append('.').append(frac)
+      .append(tzStr);
+    String norm = sb.toString();
+    // choose correct DateFormat
+    if ("Z".equals(tzStr)) {
+        df = _formatISO8601_z;
+        if (df == null) {
+            df = _formatISO8601_z = _cloneFormat(
+                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+                _timezone, _locale);
+        }
+    } else {
+        df = _formatISO8601;
+        if (df == null) {
+            df = _formatISO8601 = _cloneFormat(
+                DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,
+                _timezone, _locale);
+        }
+    }
+    return df.parse(norm, pos);
+}
\ No newline at end of file
