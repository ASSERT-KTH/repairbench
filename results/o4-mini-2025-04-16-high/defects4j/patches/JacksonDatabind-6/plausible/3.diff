diff --git a/tmp/c909e20a-66b1-479d-8225-8bd265811903_buggy.java b/tmp/ec771476-e02f-432f-8fa0-bdc3b09357a5_fixed.java
index cd412d2..245c5ab 100644
--- a/tmp/c909e20a-66b1-479d-8225-8bd265811903_buggy.java
+++ b/tmp/ec771476-e02f-432f-8fa0-bdc3b09357a5_fixed.java
@@ -1,76 +1,121 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+    char last = dateStr.charAt(len - 1);
+    // simple plain-date?
+    if (len <= 10 && Character.isDigit(last)) {
+        DateFormat df = _formatPlain;
+        if (df == null) {
+            df = _formatPlain = _cloneFormat(
+                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+        }
+        return df.parse(dateStr, pos);
+    }
+    // must have a 'T' for time
+    int tPos = dateStr.indexOf('T');
+    if (tPos < 0) {
+        // fallback to plain date if no time separator
+        DateFormat df = _formatPlain;
+        if (df == null) {
+            df = _formatPlain = _cloneFormat(
+                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+        }
+        return df.parse(dateStr, pos);
+    }
+    // split off date/time and zone
+    String datePart = dateStr.substring(0, tPos + 1);
+    String timePart;
+    String tzPart;
+    boolean useZulu = false;
+    if (last == 'Z') {
+        // explicit 'Z' → UTC
+        useZulu = true;
+        timePart = dateStr.substring(tPos + 1, len - 1);
+        tzPart = "Z";
+    } else {
+        // look for + or - after the 'T'
+        int plus = dateStr.lastIndexOf('+');
+        int minus = dateStr.lastIndexOf('-');
+        int signPos = (plus > tPos ? plus : -1);
+        if (minus > tPos && minus > signPos) {
+            signPos = minus;
+        }
+        if (signPos > tPos) {
+            timePart = dateStr.substring(tPos + 1, signPos);
+            String rawTz = dateStr.substring(signPos);
+            // normalize "+HH", "+HH:MM", or "+HHMM" into "+HHMM"
+            if (rawTz.length() == 3) { // "+HH"
+                tzPart = rawTz + "00";
+            } else if (rawTz.length() == 6 && rawTz.charAt(3) == ':') { // "+HH:MM"
+                tzPart = rawTz.substring(0, 3) + rawTz.substring(4);
+            } else {
+                tzPart = rawTz;
+            }
+        } else {
+            // no zone info: treat as UTC
+            useZulu = true;
+            timePart = dateStr.substring(tPos + 1);
+            tzPart = "Z";
+        }
+    }
+    // normalize time-part to "HH:mm:ss.SSS"
+    String canonicalTime;
+    int dot = timePart.indexOf('.');
+    if (dot >= 0) {
+        // has a fractional part
+        String secs = timePart.substring(0, dot);
+        String frac = timePart.substring(dot + 1);
+        // pad or truncate to exactly 3 digits
+        if (frac.length() >= 3) {
+            frac = frac.substring(0, 3);
+        } else if (frac.length() == 2) {
+            frac = frac + '0';
+        } else if (frac.length() == 1) {
+            frac = frac + "00";
+        } else {
+            frac = "000";
+        }
+        // if only "HH:mm" (one colon), add missing seconds
+        if (secs.indexOf(':') == secs.lastIndexOf(':')) {
+            secs = secs + ":00";
+        }
+        canonicalTime = secs + "." + frac;
+    } else {
+        // no fractional part
+        int colonCount = 0;
+        for (int i = 0, n = timePart.length(); i < n; i++) {
+            if (timePart.charAt(i) == ':') {
+                colonCount++;
+            }
+        }
+        if (colonCount == 1) {
+            // "HH:mm" → add ":00.000"
+            canonicalTime = timePart + ":00.000";
+        } else {
+            // "HH:mm:ss" → add ".000"
+            canonicalTime = timePart + ".000";
+        }
+    }
+    // rebuild the full ISO string
+    StringBuilder sb = new StringBuilder(
+        datePart.length() + canonicalTime.length() + tzPart.length());
+    sb.append(datePart).append(canonicalTime).append(tzPart);
+    dateStr = sb.toString();
+    // pick the correct DateFormat
     DateFormat df;
-
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
-            df = _formatPlain;
-            if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
-            }
-        } else if (c == 'Z') {
+    if (useZulu) {
         df = _formatISO8601_z;
         if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
-            }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+            df = _formatISO8601_z = _cloneFormat(
+                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+                _timezone, _locale);
         }
     } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
         df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
         if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+            df = _formatISO8601 = _cloneFormat(
+                DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,
                 _timezone, _locale);
         }
     }
-        }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
