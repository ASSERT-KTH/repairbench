diff --git a/tmp/02351ca7-bc1a-4525-b006-dfcdb1e62dba_buggy.java b/tmp/e8f37b09-1c39-491d-9790-6bce93702e5d_fixed.java
index cd412d2..3d1fb47 100644
--- a/tmp/02351ca7-bc1a-4525-b006-dfcdb1e62dba_buggy.java
+++ b/tmp/e8f37b09-1c39-491d-9790-6bce93702e5d_fixed.java
@@ -1,76 +1,113 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+    char last = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // simple plain-date: "yyyy-MM-dd"
+    if (len <= 10 && Character.isDigit(last)) {
+        if (_formatPlain == null) {
+            _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,
+                    _timezone, _locale);
+        }
         df = _formatPlain;
-            if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+        return df.parse(dateStr, pos);
+    }
+
+    // split off the time‐zone part, or treat missing TZ as 'Z'
+    int tPos = dateStr.indexOf('T');
+    String main;
+    String tz;
+    if (last == 'Z') {
+        main = dateStr.substring(0, len - 1);
+        tz = "Z";
+    } else if (tPos >= 0) {
+        int tzStart = -1;
+        // find last '+' or '-' after the 'T'
+        for (int i = dateStr.length() - 1; i > tPos; --i) {
+            char c = dateStr.charAt(i);
+            if (c == '+' || c == '-') {
+                tzStart = i;
+                break;
+            }
+        }
+        if (tzStart >= 0) {
+            main = dateStr.substring(0, tzStart);
+            tz = dateStr.substring(tzStart);
+            // normalize "+HH:mm" to "+HHmm", or pad "+HH" to "+HH00"
+            if (tz.length() > 3 && tz.charAt(3) == ':') {
+                tz = tz.substring(0, 3) + tz.substring(4);
+            } else if (tz.length() == 3) {
+                tz = tz + "00";
+            }
+        } else {
+            // no explicit timezone => treat as UTC
+            main = dateStr;
+            tz = "Z";
+        }
+    } else {
+        // no 'T' => no time, treat as UTC
+        main = dateStr;
+        tz = "Z";
+    }
+
+    // split date and time parts
+    String datePart;
+    String timePart = null;
+    int tPos2 = main.indexOf('T');
+    if (tPos2 >= 0) {
+        datePart = main.substring(0, tPos2);
+        timePart = main.substring(tPos2 + 1);
+    } else {
+        datePart = main;
+    }
+
+    // defaults for time fields
+    String hour = "00", minute = "00", second = "00", fraction = "000";
+    if (timePart != null) {
+        // pull off fractional part if any
+        int dot = timePart.indexOf('.');
+        String frac = null;
+        if (dot >= 0) {
+            frac = timePart.substring(dot + 1);
+            timePart = timePart.substring(0, dot);
+        }
+        String[] parts = timePart.split(":");
+        if (parts.length > 0) hour = parts[0];
+        if (parts.length > 1) minute = parts[1];
+        if (parts.length > 2) second = parts[2];
+        // normalize fraction to exactly 3 digits
+        if (frac != null) {
+            if (frac.length() == 1) {
+                fraction = frac + "00";
+            } else if (frac.length() == 2) {
+                fraction = frac + "0";
+            } else {
+                fraction = frac.length() > 3 ? frac.substring(0, 3) : frac;
+            }
+        }
+    }
+
+    // rebuild into strict "yyyy-MM-dd'T'HH:mm:ss.SSSZ" or "...'Z'"
+    StringBuilder sb = new StringBuilder(datePart);
+    sb.append('T')
+      .append(hour).append(':').append(minute).append(':').append(second)
+      .append('.').append(fraction)
+      .append(tz);
+    dateStr = sb.toString();
+
+    // pick the correct DateFormat
+    if ("Z".equals(tz)) {
+        if (_formatISO8601_z == null) {
+            _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z,
+                    DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-        } else if (c == 'Z') {
         df = _formatISO8601_z;
-            if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
-            }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
-            }
     } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
-                df = _formatISO8601;
         if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
+            _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601,
+                    DATE_FORMAT_STR_ISO8601, _timezone, _locale);
         }
+        df = _formatISO8601;
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
