diff --git a/tmp/2e8c2b65-be6a-4063-b0f8-2ed9e5d9bf48_buggy.java b/tmp/83ce71dd-188b-4496-b682-75a7c6ba4129_fixed.java
index cd412d2..c41d8f0 100644
--- a/tmp/2e8c2b65-be6a-4063-b0f8-2ed9e5d9bf48_buggy.java
+++ b/tmp/83ce71dd-188b-4496-b682-75a7c6ba4129_fixed.java
@@ -1,76 +1,82 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
-        DateFormat df;
-
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
-            df = _formatPlain;
+    char last = dateStr.charAt(len - 1);
+    // simple "yyyy-MM-dd"?
+    if (len <= 10 && Character.isDigit(last)) {
+        DateFormat df = _formatPlain;
         if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
-            }
-        } else if (c == 'Z') {
-            df = _formatISO8601_z;
-            if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
-            }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
-            }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
-                df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
-            }
+            df = _formatPlain = _cloneFormat(
+                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,
+                _timezone, _locale
+            );
         }
         return df.parse(dateStr, pos);
     }
+    // split off time‐zone part
+    String dt = dateStr;
+    String tz = null;
+    if (last == 'Z') {
+        tz = "+0000";
+        dt = dt.substring(0, len - 1);
+    } else {
+        int tPos = dt.indexOf('T');
+        int plus = dt.lastIndexOf('+');
+        int minus = dt.lastIndexOf('-');
+        int tzPos = Math.max(plus, minus);
+        if (tzPos > 0 && tzPos > tPos) {
+            tz = dt.substring(tzPos);
+            dt = dt.substring(0, tzPos);
+        }
+    }
+    // normalize timezone to "+HHmm" or "-HHmm"
+    if (tz == null) {
+        tz = "+0000";
+    } else if (tz.length() == 3) {
+        // e.g. "+05" -> "+0500"
+        tz = tz + "00";
+    } else if (tz.length() == 6 && tz.charAt(3) == ':') {
+        // e.g. "+05:30" -> "+0530"
+        tz = tz.substring(0, 3) + tz.substring(4);
+    }
+    // split date and time
+    int tIndex = dt.indexOf('T');
+    String datePart, timePart;
+    if (tIndex < 0) {
+        datePart = dt;
+        timePart = "00:00:00.000";
+    } else {
+        datePart = dt.substring(0, tIndex);
+        timePart = dt.substring(tIndex + 1);
+        // if only one ":", we have "HH:mm" -> add seconds
+        int c0 = timePart.indexOf(':');
+        if (c0 >= 0 && timePart.indexOf(':', c0 + 1) < 0) {
+            timePart = timePart + ":00";
+        }
+        // normalize fractional seconds
+        int dot = timePart.indexOf('.');
+        if (dot < 0) {
+            timePart = timePart + ".000";
+        } else {
+            int fracLen = timePart.length() - dot - 1;
+            if (fracLen < 3) {
+                StringBuilder sb = new StringBuilder(timePart);
+                for (int i = fracLen; i < 3; i++) {
+                    sb.append('0');
+                }
+                timePart = sb.toString();
+            } else if (fracLen > 3) {
+                timePart = timePart.substring(0, dot + 4);
+            }
+        }
+    }
+    // rebuild normalized ISO‐8601 string
+    String normalized = datePart + "T" + timePart + tz;
+    DateFormat df = _formatISO8601;
+    if (df == null) {
+        df = _formatISO8601 = _cloneFormat(
+            DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,
+            _timezone, _locale
+        );
+    }
+    return df.parse(normalized, pos);
+}
\ No newline at end of file
