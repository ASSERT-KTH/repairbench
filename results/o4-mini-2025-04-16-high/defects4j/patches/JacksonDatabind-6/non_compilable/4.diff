diff --git a/tmp/5a80f1cf-039b-4c21-825e-04d510a4d836_buggy.java b/tmp/427409c2-da00-40aa-9f1b-edbfdb65893a_fixed.java
index cd412d2..5819f48 100644
--- a/tmp/5a80f1cf-039b-4c21-825e-04d510a4d836_buggy.java
+++ b/tmp/427409c2-da00-40aa-9f1b-edbfdb65893a_fixed.java
@@ -1,76 +1,147 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+@Override
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // simple date-only case: "yyyy-MM-dd"
+    if (len <= 10 && Character.isDigit(dateStr.charAt(len - 1))) {
         df = _formatPlain;
         if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
-            }
-        } else if (c == 'Z') {
-            df = _formatISO8601_z;
-            if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
-            }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
-            }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
-                df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+            df = _formatPlain = _cloneFormat(
+                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,
                 _timezone, _locale);
         }
-            }
-        }
         return df.parse(dateStr, pos);
     }
+
+    // work on a modifiable copy
+    String str = dateStr;
+    String timezone = null;
+
+    // 1) handle trailing 'Z'
+    if (str.endsWith("Z")) {
+        timezone = "Z";
+        str = str.substring(0, str.length() - 1);
+    } else {
+        // 2) find a timezone offset (+/-) after the 'T'
+        int tIndex = str.indexOf('T');
+        int tzIndex = -1;
+        if (tIndex >= 0) {
+            for (int i = str.length() - 1; i > tIndex; --i) {
+                char c = str.charAt(i);
+                if (c == '+' || c == '-') {
+                    tzIndex = i;
+                    break;
+                }
+            }
+        }
+        if (tzIndex > tIndex) {
+            timezone = str.substring(tzIndex);
+            str = str.substring(0, tzIndex);
+        }
+    }
+
+    // 3) normalize timezone into "+hhmm" or "-hhmm"
+    if (timezone != null && !timezone.equals("Z")) {
+        char sign = timezone.charAt(0);
+        String tzRest = timezone.substring(1);
+        String hours;
+        String minutes;
+        if (tzRest.length() >= 4 && tzRest.charAt(2) == ':') {
+            hours   = tzRest.substring(0, 2);
+            minutes = tzRest.substring(3, 5);
+        } else if (tzRest.length() >= 4) {
+            hours   = tzRest.substring(0, 2);
+            minutes = tzRest.substring(2, 4);
+        } else if (tzRest.length() == 2) {
+            hours   = tzRest;
+            minutes = "00";
+        } else {
+            // fallback for odd lengths
+            hours = tzRest.length() >= 2
+                ? tzRest.substring(0, 2)
+                : ("0" + tzRest);
+            String mm = tzRest.length() > 2
+                ? tzRest.substring(2)
+                : "00";
+            if (mm.length() == 1) {
+                minutes = "0" + mm;
+            } else if (mm.length() > 2) {
+                minutes = mm.substring(0, 2);
+            } else {
+                minutes = mm;
+            }
+        }
+        timezone = String.valueOf(sign) + hours + minutes;
+    }
+
+    // 4) fix the time part: ensure seconds and millisecond‐fraction
+    int t = str.indexOf('T');
+    if (t >= 0) {
+        String datePart = str.substring(0, t);
+        String timePart = str.substring(t + 1);
+
+        // if we see only one colon, seconds are missing
+        int colonCount = 0;
+        for (int i = 0; i < timePart.length(); ++i) {
+            if (timePart.charAt(i) == ':') {
+                ++colonCount;
+            }
+        }
+        if (colonCount == 1) {
+            timePart = timePart + ":00";
+        }
+
+        // handle millisecond fraction
+        int dot = timePart.indexOf('.');
+        if (dot < 0) {
+            // no fraction: add ".000"
+            timePart = timePart + ".000";
+        } else {
+            // pad or truncate to exactly 3 digits
+            int start = dot + 1;
+            int end = start;
+            while (end < timePart.length()
+                   && Character.isDigit(timePart.charAt(end))) {
+                ++end;
+            }
+            String frac = timePart.substring(start, end);
+            if (frac.length() < 3) {
+                StringBuilder sb = new StringBuilder(frac);
+                while (sb.length() < 3) {
+                    sb.append('0');
+                }
+                frac = sb.toString();
+            } else if (frac.length() > 3) {
+                frac = frac.substring(0, 3);
+            }
+            timePart = timePart.substring(0, start)
+                     + frac
+                     + timePart.substring(end);
+        }
+
+        str = datePart + "T" + timePart;
+    }
+
+    // 5) rebuild final string and choose correct formatter
+    if (timezone != null) {
+        str = str + timezone;
+        df = _formatISO8601;
+        if (df == null) {
+            df = _formatISO8601 = _cloneFormat(
+                DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,
+                _timezone, _locale);
+        }
+    } else {
+        // no TZ: treat as Zulu
+        str = str + "Z";
+        df = _formatISO8601_z;
+        if (df == null) {
+            df = _formatISO8601_z = _cloneFormat(
+                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+                _timezone, _locale);
+        }
+    }
+
+    return df.parse(str, pos);
+}
\ No newline at end of file
