diff --git a/tmp/0578c5c8-a011-4b4e-9f21-8e7fed259c66_buggy.java b/tmp/b24eb729-b762-4147-be80-fe5fa07091e7_fixed.java
index cd412d2..2377953 100644
--- a/tmp/0578c5c8-a011-4b4e-9f21-8e7fed259c66_buggy.java
+++ b/tmp/b24eb729-b762-4147-be80-fe5fa07091e7_fixed.java
@@ -1,76 +1,121 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
-        int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+@Override
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
+    String str = dateStr;
+    int len = str.length();
+    char last = str.charAt(len - 1);
+
+    // 1) Plain date "yyyy-MM-dd"
+    if (len <= 10 && Character.isDigit(last)) {
+        DateFormat df = _formatPlain;
+        if (df == null) {
+            df = _formatPlain = _cloneFormat(
+                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,
+                _timezone, _locale);
+        }
+        return df.parse(str, pos);
+    }
+
+    // 2) Split off timezone (either 'Z' or "+/-hh[:]?mm")
+    boolean hasZ = (last == 'Z');
+    int tzIndex = -1;
+    if (!hasZ) {
+        int plus  = str.lastIndexOf('+');
+        int minus = str.lastIndexOf('-');
+        tzIndex = Math.max(plus, minus);
+        // ignore date‐part hyphens
+        int tPos = str.indexOf('T');
+        if (tzIndex <= tPos) {
+            tzIndex = -1;
+        }
+    }
+
+    String dateTime;
+    String tz;
+    if (hasZ) {
+        dateTime = str.substring(0, len - 1);
+        tz = "Z";
+    } else if (tzIndex > 0) {
+        dateTime = str.substring(0, tzIndex);
+        tz       = str.substring(tzIndex);
+    } else {
+        // no explicit timezone: assume Z
+        dateTime = str;
+        tz       = "Z";
+    }
+
+    // 3) Normalize timezone string to either 'Z' or "+hhmm"/"-hhmm"
+    if (!"Z".equals(tz)) {
+        // remove optional colon in offset
+        if (tz.length() > 3 && tz.charAt(3) == ':') {
+            tz = tz.substring(0, 3) + tz.substring(4);
+        }
+        // if only "+hh" or "-hh", append "00"
+        if (tz.length() == 3) {
+            tz = tz + "00";
+        }
+    }
+
+    // 4) Normalize the time‐part: ensure seconds and 3‐digit milliseconds
+    int tPos = dateTime.indexOf('T');
+    if (tPos >= 0) {
+        String prefix = dateTime.substring(0, tPos + 1);
+        String rest   = dateTime.substring(tPos + 1);
+        String main;
+        String frac = null;
+
+        int dot = rest.indexOf('.');
+        if (dot >= 0) {
+            main = rest.substring(0, dot);
+            frac = rest.substring(dot + 1);
+        } else {
+            main = rest;
+        }
+
+        // ensure seconds present
+        int colonCount = 0;
+        for (int i = 0; i < main.length(); i++) {
+            if (main.charAt(i) == ':') {
+                colonCount++;
+            }
+        }
+        if (colonCount == 1) {
+            // only "hh:mm" → add ":00"
+            main = main + ":00";
+        }
+
+        // normalize fractional part to exactly 3 digits
+        if (frac == null) {
+            frac = "000";
+        } else if (frac.length() == 1) {
+            frac = frac + "00";
+        } else if (frac.length() == 2) {
+            frac = frac + "0";
+        } else if (frac.length() > 3) {
+            frac = frac.substring(0, 3);
+        }
+
+        dateTime = prefix + main + "." + frac;
+    }
+
+    // 5) Reconstruct full ISO string
+    String normalized = dateTime + tz;
+
+    // 6) Pick the right formatter
     DateFormat df;
-
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
-            df = _formatPlain;
-            if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
-            }
-        } else if (c == 'Z') {
+    if ("Z".equals(tz)) {
         df = _formatISO8601_z;
         if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
-            }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+            df = _formatISO8601_z = _cloneFormat(
+                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+                _timezone, _locale);
         }
     } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
         df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
         if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+            df = _formatISO8601 = _cloneFormat(
+                DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,
                 _timezone, _locale);
         }
     }
-        }
-        return df.parse(dateStr, pos);
+    return df.parse(normalized, pos);
 }
\ No newline at end of file
