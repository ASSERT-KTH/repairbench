diff --git a/tmp/baf4c12a-dc16-4ac4-9a6f-fb625a0e5e11_buggy.java b/tmp/16b9033b-d7a6-4d30-90a1-c92f82fc6eba_fixed.java
index cd412d2..3e1c673 100644
--- a/tmp/baf4c12a-dc16-4ac4-9a6f-fb625a0e5e11_buggy.java
+++ b/tmp/16b9033b-d7a6-4d30-90a1-c92f82fc6eba_fixed.java
@@ -1,76 +1,179 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+@Override
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+    char last = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // 1) Plain date, no time part: "yyyy-MM-dd"
+    if (len <= 10 && Character.isDigit(last)) {
         df = _formatPlain;
         if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+            df = _formatPlain = _cloneFormat(
+                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,
+                _timezone, _locale
+            );
+        }
+        return df.parse(dateStr, pos);
+    }
+
+    // 2) Zulu ("Z") timezone
+    if (last == 'Z') {
+        String s = dateStr;
+        int dot = s.indexOf('.');
+        if (dot < 0) {
+            // no fractional seconds: insert ".000" before 'Z'
+            s = s.substring(0, len - 1) + ".000Z";
+        } else {
+            // pad or truncate fractional part to exactly 3 digits
+            String dateTime = s.substring(0, dot);
+            String frac     = s.substring(dot + 1, len - 1); // exclude 'Z'
+            StringBuilder sb = new StringBuilder(dateTime).append('.');
+            if (frac.length() == 3) {
+                sb.append(frac);
+            } else if (frac.length() < 3) {
+                sb.append(frac);
+                for (int i = frac.length(); i < 3; ++i) {
+                    sb.append('0');
+                }
+            } else {
+                sb.append(frac, 0, 3);
+            }
+            sb.append('Z');
+            s = sb.toString();
         }
-        } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+            df = _formatISO8601_z = _cloneFormat(
+                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+                _timezone, _locale
+            );
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+        return df.parse(s, pos);
     }
-        } else {
-            // Let's see if we have timezone indicator or not...
+
+    // 3) Timezone offset "+HH:MM" or "-HH:MM" etc.
     if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
+        String s = dateStr;
+        // find start of offset (first '+' or '-' after the 'T')
+        int t = s.indexOf('T');
+        int off = s.lastIndexOf('+');
+        int m   = s.lastIndexOf('-');
+        if (m > off && m > t) {
+            off = m;
         }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+        String tz = s.substring(off);
+        // remove optional colon in offset: "+HH:MM" -> "+HHMM"
+        if (tz.length() > 5 && tz.charAt(3) == ':') {
+            tz = tz.substring(0, 3) + tz.substring(4);
+        } else if (tz.length() == 3) {
+            // offset like "+H" or "-H": append minutes "00"
+            tz = tz + "00";
         }
+
+        // pad the time‐of‐day portion to "HH:mm:ss.SSS"
+        String base = s.substring(0, off);
+        int    tpos = base.indexOf('T');
+        String datePart = base.substring(0, tpos);
+        String timePart = base.substring(tpos + 1);
+
+        // split off seconds vs. fractional
+        String secsPart;
+        String fracPart = null;
+        int    dotPos   = timePart.indexOf('.');
+        if (dotPos >= 0) {
+            secsPart = timePart.substring(0, dotPos);
+            fracPart = timePart.substring(dotPos + 1);
+        } else {
+            secsPart = timePart;
+        }
+
+        // split HH:mm[:ss]
+        String[] parts = secsPart.split(":");
+        String hh = parts.length > 0 ? parts[0] : "00";
+        String mm = parts.length > 1 ? parts[1] : "00";
+        String ss = parts.length > 2 ? parts[2] : "00";
+
+        // build exactly 3‐digit millisecond
+        String msec;
+        if (fracPart == null) {
+            msec = "000";
+        } else if (fracPart.length() == 3) {
+            msec = fracPart;
+        } else if (fracPart.length() < 3) {
+            StringBuilder msb = new StringBuilder(fracPart);
+            while (msb.length() < 3) {
+                msb.append('0');
+            }
+            msec = msb.toString();
+        } else {
+            msec = fracPart.substring(0, 3);
+        }
+
+        // reassemble
+        base = datePart + "T" + hh + ":" + mm + ":" + ss + "." + msec;
+        s    = base + tz;
+
         df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
+        if (df == null) {
+            df = _formatISO8601 = _cloneFormat(
+                DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,
+                _timezone, _locale
+            );
         }
+        return df.parse(s, pos);
+    }
+
+    // 4) No timezone at all: treat as Z
+    {
+        String s = dateStr;
+        int    tpos = s.indexOf('T');
+        if (tpos >= 0) {
+            String datePart = s.substring(0, tpos);
+            String timePart = s.substring(tpos + 1);
+
+            String secsPart;
+            String fracPart = null;
+            int    dotPos   = timePart.indexOf('.');
+            if (dotPos >= 0) {
+                secsPart = timePart.substring(0, dotPos);
+                fracPart = timePart.substring(dotPos + 1);
+            } else {
+                secsPart = timePart;
+            }
+
+            String[] parts = secsPart.split(":");
+            String hh = parts.length > 0 ? parts[0] : "00";
+            String mm = parts.length > 1 ? parts[1] : "00";
+            String ss = parts.length > 2 ? parts[2] : "00";
+
+            String msec;
+            if (fracPart == null) {
+                msec = "000";
+            } else if (fracPart.length() == 3) {
+                msec = fracPart;
+            } else if (fracPart.length() < 3) {
+                StringBuilder msb = new StringBuilder(fracPart);
+                while (msb.length() < 3) {
+                    msb.append('0');
+                }
+                msec = msb.toString();
             } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
+                msec = fracPart.substring(0, 3);
+            }
+
+            s = datePart + "T" + hh + ":" + mm + ":" + ss + "." + msec + "Z";
+        } else {
+            // no 'T', just a date—append midnight
+            s = s + "T00:00:00.000Z";
+        }
+
         df = _formatISO8601_z;
         if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+            df = _formatISO8601_z = _cloneFormat(
+                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
+                _timezone, _locale
+            );
         }
+        return df.parse(s, pos);
     }
 }
\ No newline at end of file
-        return df.parse(dateStr, pos);
-    }
