diff --git a/tmp/933d6c40-b78c-4d84-a96c-4fd80c64149b_buggy.java b/tmp/8d614664-ed99-4743-86e9-448ef528dad4_fixed.java
index cd412d2..a8bb64b 100644
--- a/tmp/933d6c40-b78c-4d84-a96c-4fd80c64149b_buggy.java
+++ b/tmp/8d614664-ed99-4743-86e9-448ef528dad4_fixed.java
@@ -1,76 +1,139 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
+    char last = dateStr.charAt(len - 1);
     DateFormat df;
-
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
+    // [JACKSON-200]: support "plain" date (yyyy-MM-dd)
+    if (len <= 10 && Character.isDigit(last)) {
         df = _formatPlain;
         if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+            df = _formatPlain = _cloneFormat(
+                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
-        } else if (c == 'Z') {
+    }
+    // UTC 'Z' suffix
+    else if (last == 'Z') {
+        String prefix = dateStr.substring(0, len - 1);
+        int tIndex = prefix.indexOf('T');
+        if (tIndex >= 0) {
+            StringBuilder sb = new StringBuilder();
+            sb.append(prefix, 0, tIndex + 1);
+            String time = prefix.substring(tIndex + 1);
+            int dot = time.indexOf('.');
+            String sec = (dot >= 0) ? time.substring(0, dot) : time;
+            String ms = (dot >= 0) ? time.substring(dot + 1) : null;
+            // ensure seconds
+            int colonCount = 0;
+            for (char ch : sec.toCharArray()) {
+                if (ch == ':') colonCount++;
+            }
+            if (colonCount < 2) {
+                sec = sec + ":00";
+            }
+            // ensure milliseconds
+            if (ms == null) {
+                ms = "000";
+            } else if (ms.length() == 1) {
+                ms = ms + "00";
+            } else if (ms.length() == 2) {
+                ms = ms + "0";
+            } else if (ms.length() > 3) {
+                ms = ms.substring(0, 3);
+            }
+            sb.append(sec).append('.').append(ms);
+            prefix = sb.toString();
+        }
+        dateStr = prefix + "Z";
         df = _formatISO8601_z;
         if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+            df = _formatISO8601_z = _cloneFormat(
+                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
     }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
+    // timezone offset like +01:00 or -0500
+    else if (hasTimeZone(dateStr)) {
+        // find offset-start (last '+' or '-' after the 'T')
+        int tIndex = dateStr.indexOf('T');
+        int sign = dateStr.lastIndexOf('+');
+        if (sign < tIndex) {
+            sign = dateStr.lastIndexOf('-');
         }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+        String prefix = dateStr.substring(0, sign);
+        String tz = dateStr.substring(sign).replace(":", "");
+        // fix the time part in prefix
+        int t2 = prefix.indexOf('T');
+        if (t2 >= 0) {
+            StringBuilder sb = new StringBuilder();
+            sb.append(prefix, 0, t2 + 1);
+            String time = prefix.substring(t2 + 1);
+            int dot = time.indexOf('.');
+            String sec = (dot >= 0) ? time.substring(0, dot) : time;
+            String ms = (dot >= 0) ? time.substring(dot + 1) : null;
+            // ensure seconds
+            int colonCount = 0;
+            for (char ch : sec.toCharArray()) {
+                if (ch == ':') colonCount++;
             }
+            if (colonCount < 2) {
+                sec = sec + ":00";
+            }
+            // ensure milliseconds
+            if (ms == null) {
+                ms = "000";
+            } else if (ms.length() == 1) {
+                ms = ms + "00";
+            } else if (ms.length() == 2) {
+                ms = ms + "0";
+            } else if (ms.length() > 3) {
+                ms = ms.substring(0, 3);
+            }
+            sb.append(sec).append('.').append(ms);
+            prefix = sb.toString();
+        }
+        dateStr = prefix + tz;
         df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
+        if (df == null) {
+            df = _formatISO8601 = _cloneFormat(
+                DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
+        }
+    }
+    // no timezone marker at all -> assume UTC
+    else {
+        String prefix = dateStr;
+        int tIndex = prefix.indexOf('T');
+        if (tIndex >= 0) {
+            StringBuilder sb = new StringBuilder();
+            sb.append(prefix, 0, tIndex + 1);
+            String time = prefix.substring(tIndex + 1);
+            int dot = time.indexOf('.');
+            String sec = (dot >= 0) ? time.substring(0, dot) : time;
+            String ms = (dot >= 0) ? time.substring(dot + 1) : null;
+            // ensure seconds
+            int colonCount = 0;
+            for (char ch : sec.toCharArray()) {
+                if (ch == ':') colonCount++;
+            }
+            if (colonCount < 2) {
+                sec = sec + ":00";
+            }
+            // ensure milliseconds
+            if (ms == null) {
+                ms = "000";
+            } else if (ms.length() == 1) {
+                ms = ms + "00";
+            } else if (ms.length() == 2) {
+                ms = ms + "0";
+            } else if (ms.length() > 3) {
+                ms = ms.substring(0, 3);
+            }
+            sb.append(sec).append('.').append(ms);
+            prefix = sb.toString();
+        }
+        dateStr = prefix + "Z";
         df = _formatISO8601_z;
         if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
+            df = _formatISO8601_z = _cloneFormat(
+                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
