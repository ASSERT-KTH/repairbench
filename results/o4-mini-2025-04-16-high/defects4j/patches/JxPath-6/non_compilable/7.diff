diff --git a/tmp/c9e7a59d-6d44-487d-b031-b8e0fff2ed47_buggy.java b/tmp/122d0308-dfcf-4141-939d-f04013171edd_fixed.java
index f650982..6924fa0 100644
--- a/tmp/c9e7a59d-6d44-487d-b031-b8e0fff2ed47_buggy.java
+++ b/tmp/122d0308-dfcf-4141-939d-f04013171edd_fixed.java
@@ -1,42 +1,52 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right)
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
-        if (l instanceof InitialContext || l instanceof SelfContext) {
-            l = ((EvalContext) l).getSingleNodePointer();
+    // If either side is a node‚Äêset (an EvalContext), flatten it to an Iterator of NodePointers
+    if (l instanceof EvalContext) {
+        EvalContext lc = (EvalContext) l;
+        java.util.List nodes = new java.util.ArrayList();
+        while (lc.next()) {
+            nodes.add(lc.getSingleNodePointer());
         }
-
-        if (r instanceof InitialContext || r instanceof SelfContext) {
-            r = ((EvalContext) r).getSingleNodePointer();
+        l = nodes.iterator();
     }
-
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+    if (r instanceof EvalContext) {
+        EvalContext rc = (EvalContext) r;
+        java.util.List nodes = new java.util.ArrayList();
+        while (rc.next()) {
+            nodes.add(rc.getSingleNodePointer());
+        }
+        r = nodes.iterator();
     }
 
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+    // If either side is a Java Collection, turn it into an Iterator
+    if (l instanceof java.util.Collection) {
+        l = ((java.util.Collection) l).iterator();
+    }
+    if (r instanceof java.util.Collection) {
+        r = ((java.util.Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    // Iterator vs atomic
+    if ((l instanceof java.util.Iterator) && !(r instanceof java.util.Iterator)) {
+        return contains((java.util.Iterator) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+    if (!(l instanceof java.util.Iterator) && (r instanceof java.util.Iterator)) {
+        return contains((java.util.Iterator) r, l);
     }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+    // Iterator vs Iterator
+    if (l instanceof java.util.Iterator && r instanceof java.util.Iterator) {
+        return findMatch((java.util.Iterator) l, (java.util.Iterator) r);
     }
+
+    // Both atomic
     return equal(l, r);
 }
\ No newline at end of file
