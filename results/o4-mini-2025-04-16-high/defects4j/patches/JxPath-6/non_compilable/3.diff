diff --git a/tmp/52cbe305-9412-4d48-8c22-ff9daea3d0c3_buggy.java b/tmp/6361d85d-67f1-463c-ad10-777f75ed440c_fixed.java
index f650982..5586408 100644
--- a/tmp/52cbe305-9412-4d48-8c22-ff9daea3d0c3_buggy.java
+++ b/tmp/6361d85d-67f1-463c-ad10-777f75ed440c_fixed.java
@@ -1,42 +1,57 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right)
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
-        if (l instanceof InitialContext || l instanceof SelfContext) {
-            l = ((EvalContext) l).getSingleNodePointer();
+    // If either side is itself an EvalContext (a node-set or variable
+    // context), turn it into an Iterator.  But if there's only one
+    // node, we'll compare it as a single pointer.
+    if (l instanceof EvalContext) {
+        EvalContext lc = (EvalContext) l;
+        // getPointerCount() is the number of pointers/nodes under this context
+        int count = lc.getPointerCount();
+        if (count > 1) {
+            l = lc.iteratePointers();    // an Iterator over the node-set
+        } else {
+            l = lc.getSingleNodePointer();
+        }
+    }
+    if (r instanceof EvalContext) {
+        EvalContext rc = (EvalContext) r;
+        int count = rc.getPointerCount();
+        if (count > 1) {
+            r = rc.iteratePointers();
+        } else {
+            r = rc.getSingleNodePointer();
         }
-
-        if (r instanceof InitialContext || r instanceof SelfContext) {
-            r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // If it's a plain Collection, iterate it
     if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        l = ((Collection<?>) l).iterator();
     }
-
     if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        r = ((Collection<?>) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    // Now apply XPath‐style '=' semantics: 
+    // node-set = atomic => true if any node equals the atomic
+    if (l instanceof Iterator && !(r instanceof Iterator)) {
+        return contains((Iterator<?>) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+    if (!(l instanceof Iterator) && r instanceof Iterator) {
+        return contains((Iterator<?>) r, l);
     }
+    // node-set = node-set => true if any pair matches
     if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        return findMatch((Iterator<?>) l, (Iterator<?>) r);
     }
+    // neither is a node-set: compare scalars or pointers directly
     return equal(l, r);
 }
\ No newline at end of file
