diff --git a/tmp/c6e2dd41-ac25-4b14-9ce0-6494e77c4d73_buggy.java b/tmp/bf615182-1438-47ae-a65c-4de1b76a2f79_fixed.java
index f650982..ac59ba6 100644
--- a/tmp/c6e2dd41-ac25-4b14-9ce0-6494e77c4d73_buggy.java
+++ b/tmp/bf615182-1438-47ae-a65c-4de1b76a2f79_fixed.java
@@ -1,42 +1,42 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // If either side is a context, unwrap it to its actual value
     if (l instanceof InitialContext || l instanceof SelfContext) {
-            l = ((EvalContext) l).getSingleNodePointer();
+        org.apache.commons.jxpath.ri.model.NodePointer np =
+            ((EvalContext) l).getSingleNodePointer();
+        l = (np != null ? np.getValue() : null);
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
-            r = ((EvalContext) r).getSingleNodePointer();
+        org.apache.commons.jxpath.ri.model.NodePointer np =
+            ((EvalContext) r).getSingleNodePointer();
+        r = (np != null ? np.getValue() : null);
     }
 
+    // If it's a collection, iterate over its elements
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
-
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
+    // Handle iterator vs. scalar, or iterator vs. iterator comparisons
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+
+    // Fallback to atomic comparison
     return equal(l, r);
 }
\ No newline at end of file
