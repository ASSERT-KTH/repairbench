diff --git a/tmp/b5a93761-baf2-4f66-b20c-96f2895fbfca_buggy.java b/tmp/555bcae3-2d0a-413f-839c-bf9bdf65f216_fixed.java
index f650982..1b2a07f 100644
--- a/tmp/b5a93761-baf2-4f66-b20c-96f2895fbfca_buggy.java
+++ b/tmp/555bcae3-2d0a-413f-839c-bf9bdf65f216_fixed.java
@@ -1,42 +1,52 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    /*
+     * If one of the sides is still a context (e.g. a path or
+     * a variable that was wrapped as a SelfContext/InitialContext),
+     * unwrap it to its single node‐pointer, then pull out the real
+     * value from that pointer.  In particular, if the pointer
+     * refers to a List, getValue() will return the List itself
+     * and fall through to the Collection→Iterator logic below.
+     */
     if (l instanceof InitialContext || l instanceof SelfContext) {
-            l = ((EvalContext) l).getSingleNodePointer();
+        NodePointer ptr = ((EvalContext) l).getSingleNodePointer();
+        l = (ptr == null ? null : ptr.getValue());
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
-            r = ((EvalContext) r).getSingleNodePointer();
+        NodePointer ptr = ((EvalContext) r).getSingleNodePointer();
+        r = (ptr == null ? null : ptr.getValue());
     }
 
+    /* Collections become Iterators */
     if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        l = ((Collection<?>) l).iterator();
     }
-
     if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        r = ((Collection<?>) r).iterator();
     }
 
+    /* Iterator vs. atomic: contains semantics */
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        return contains((Iterator<?>) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        return contains((Iterator<?>) r, l);
     }
+
+    /* Two Iterators: cross‐match any pair */
     if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        return findMatch((Iterator<?>) l, (Iterator<?>) r);
     }
+
+    /* Both atomic: direct compare */
     return equal(l, r);
 }
\ No newline at end of file
