diff --git a/tmp/7c2a5f31-f68e-4d59-999d-69d45f9d97e6_buggy.java b/tmp/11f0444b-975f-45a1-ad49-fea89966ed1f_fixed.java
index f650982..587c56b 100644
--- a/tmp/7c2a5f31-f68e-4d59-999d-69d45f9d97e6_buggy.java
+++ b/tmp/11f0444b-975f-45a1-ad49-fea89966ed1f_fixed.java
@@ -1,42 +1,46 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
-        if (l instanceof InitialContext || l instanceof SelfContext) {
-            l = ((EvalContext) l).getSingleNodePointer();
+        // Peel off any context‐wrapper
+        if (l instanceof EvalContext) {
+            // If it's a multi‐node context, get its node‐set
+            Iterator<?> it = ((EvalContext) l).getPointers();
+            l = it.hasNext() ? it : null;
         }
-
-        if (r instanceof InitialContext || r instanceof SelfContext) {
-            r = ((EvalContext) r).getSingleNodePointer();
+        if (r instanceof EvalContext) {
+            Iterator<?> it = ((EvalContext) r).getPointers();
+            r = it.hasNext() ? it : null;
         }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        // Convert collections to iterators
+        if (l instanceof Collection<?>) {
+            l = ((Collection<?>) l).iterator();
         }
-
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        if (r instanceof Collection<?>) {
+            r = ((Collection<?>) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        // XPath '=' semantics:
+        //   NodeSet = NodeSet: true if any pair of nodes has equal string‐values
+        //   NodeSet = scalar:  true if any node’s string‐value equals the scalar
+        if (l instanceof Iterator<?> && !(r instanceof Iterator<?>)) {
+            return contains((Iterator<?>) l, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        if (!(l instanceof Iterator<?>) && (r instanceof Iterator<?>)) {
+            return contains((Iterator<?>) r, l);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        if (l instanceof Iterator<?> && r instanceof Iterator<?>) {
+            return findMatch((Iterator<?>) l, (Iterator<?>) r);
         }
+
+        // both are atomic: do a normal equality
         return equal(l, r);
     }
\ No newline at end of file
