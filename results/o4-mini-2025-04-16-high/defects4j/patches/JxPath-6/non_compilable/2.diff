diff --git a/tmp/6aa23688-8aa1-41b2-8913-6005854d8e1f_buggy.java b/tmp/d5083a22-2071-49ca-926f-570848b30e17_fixed.java
index f650982..1396d29 100644
--- a/tmp/6aa23688-8aa1-41b2-8913-6005854d8e1f_buggy.java
+++ b/tmp/d5083a22-2071-49ca-926f-570848b30e17_fixed.java
@@ -1,42 +1,57 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
-        if (l instanceof InitialContext || l instanceof SelfContext) {
-            l = ((EvalContext) l).getSingleNodePointer();
+        // If either operand is a JXPath context, turn it into
+        // either a single NodePointer or an iterator of pointers.
+        if (l instanceof EvalContext) {
+            EvalContext ec = (EvalContext) l;
+            if (ec instanceof InitialContext || ec instanceof SelfContext) {
+                l = ec.getSingleNodePointer();
+            }
+            else {
+                l = ec.iteratePointers();
+            }
+        }
+        if (r instanceof EvalContext) {
+            EvalContext ec = (EvalContext) r;
+            if (ec instanceof InitialContext || ec instanceof SelfContext) {
+                r = ec.getSingleNodePointer();
+            }
+            else {
+                r = ec.iteratePointers();
             }
-
-        if (r instanceof InitialContext || r instanceof SelfContext) {
-            r = ((EvalContext) r).getSingleNodePointer();
         }
 
+        // Turn any Java collections into iterators
         if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+            l = ((Collection<?>) l).iterator();
         }
-
         if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+            r = ((Collection<?>) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        // XPath "=" semantics:
+        //   node-set = non-node-set  → true if any node equals the value
+        //   non-node-set = node-set  → same
+        //   node-set = node-set      → true if any node on the left equals any node on the right
+        if (l instanceof Iterator && !(r instanceof Iterator)) {
+            return contains((Iterator<?>) l, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        if (!(l instanceof Iterator) && r instanceof Iterator) {
+            return contains((Iterator<?>) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+            return findMatch((Iterator<?>) l, (Iterator<?>) r);
         }
+
+        // Both are singletons: do a simple comparison
         return equal(l, r);
     }
\ No newline at end of file
