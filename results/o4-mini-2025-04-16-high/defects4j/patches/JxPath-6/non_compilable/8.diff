diff --git a/tmp/e5eab003-51c4-43a8-ac2e-546b84f65d6a_buggy.java b/tmp/6a2b4e95-5baf-48ce-b2d9-d747303a5ca6_fixed.java
index f650982..59d3b58 100644
--- a/tmp/e5eab003-51c4-43a8-ac2e-546b84f65d6a_buggy.java
+++ b/tmp/6a2b4e95-5baf-48ce-b2d9-d747303a5ca6_fixed.java
@@ -1,42 +1,39 @@
 /**
  * Compares two values
  */
+@Override
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // If either side is a context holding one or more node‐pointers,
+    // treat it as a node‐set (iterator) rather than unwrap to a single node.
     if (l instanceof InitialContext || l instanceof SelfContext) {
-            l = ((EvalContext) l).getSingleNodePointer();
+        l = ((EvalContext) l).getPointerIterator();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
-            r = ((EvalContext) r).getSingleNodePointer();
+        r = ((EvalContext) r).getPointerIterator();
     }
 
     if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        l = ((Collection<?>) l).iterator();
     }
-
     if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        r = ((Collection<?>) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    if (l instanceof Iterator && !(r instanceof Iterator)) {
+        return contains((Iterator<?>) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+    if (!(l instanceof Iterator) && r instanceof Iterator) {
+        return contains((Iterator<?>) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        return findMatch((Iterator<?>) l, (Iterator<?>) r);
     }
     return equal(l, r);
 }
\ No newline at end of file
