diff --git a/tmp/da87ec42-efbe-4dd0-865c-0db1e5e856fc_buggy.java b/tmp/de85eebb-111a-41ab-91b8-be5854f7661e_fixed.java
index f650982..30012c3 100644
--- a/tmp/da87ec42-efbe-4dd0-865c-0db1e5e856fc_buggy.java
+++ b/tmp/de85eebb-111a-41ab-91b8-be5854f7661e_fixed.java
@@ -1,42 +1,55 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right)
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // If either side is a context, get its single NodePointer
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // If either side is a NodePointer whose value is a Collection, turn it into an Iterator
+    if (l instanceof NodePointer) {
+        Object v = ((NodePointer) l).getValue();
+        if (v instanceof Collection) {
+            l = ((Collection) v).iterator();
+        }
+    }
+    if (r instanceof NodePointer) {
+        Object v = ((NodePointer) r).getValue();
+        if (v instanceof Collection) {
+            r = ((Collection) v).iterator();
+        }
+    }
+
+    // If either side is a bare Collection, turn it into an Iterator
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
-
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
+    // XPath semantics: if one side is a node‐set (Iterator) and the other is atomic, test containment
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
+    // If both are node‐sets, see if any pair of nodes is equal
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+    // Otherwise do a simple atomic comparison
     return equal(l, r);
 }
\ No newline at end of file
