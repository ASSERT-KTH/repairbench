diff --git a/tmp/544ae48a-6599-4e13-899a-0165b6c3d281_buggy.java b/tmp/4a3017ec-d7a0-4a7b-be78-47919d7430ce_fixed.java
index f650982..7e1638b 100644
--- a/tmp/544ae48a-6599-4e13-899a-0165b6c3d281_buggy.java
+++ b/tmp/4a3017ec-d7a0-4a7b-be78-47919d7430ce_fixed.java
@@ -1,42 +1,46 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
-        if (l instanceof InitialContext || l instanceof SelfContext) {
-            l = ((EvalContext) l).getSingleNodePointer();
+    //
+    // If the result of compute() is actually a node‐set context,
+    // turn it into a full iterator of values, not a single node pointer.
+    //
+    if (l instanceof EvalContext) {
+        l = left.iterate(context);
     }
-
-        if (r instanceof InitialContext || r instanceof SelfContext) {
-            r = ((EvalContext) r).getSingleNodePointer();
+    if (r instanceof EvalContext) {
+        r = right.iterate(context);
     }
 
+    // If it's a Java Collection, turn it into an iterator
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
-
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+    // Now apply the XPath '=' semantics:
+    // node-set = atomic ⇒ true if any node in the set equals the atomic
+    if (l instanceof Iterator && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
+    // node-set = node-set ⇒ true if there is any pair of nodes whose
+    // string-values are equal
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+    // atomic = atomic
     return equal(l, r);
 }
\ No newline at end of file
