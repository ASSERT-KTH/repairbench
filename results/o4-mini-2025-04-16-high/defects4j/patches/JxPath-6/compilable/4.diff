diff --git a/tmp/b1aeed4c-e75d-4957-b652-8013488c5148_buggy.java b/tmp/52e5fecf-e45e-49e3-90b1-6ec338609638_fixed.java
index f650982..15f8f3a 100644
--- a/tmp/b1aeed4c-e75d-4957-b652-8013488c5148_buggy.java
+++ b/tmp/52e5fecf-e45e-49e3-90b1-6ec338609638_fixed.java
@@ -1,42 +1,48 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
-        if (l instanceof InitialContext || l instanceof SelfContext) {
+    /*
+     * If either side is an EvalContext (including
+     * InitialContext, SelfContext, or a variable‚Äêcontext),
+     * unwrap it to its single node pointer.
+     */
+    if (l instanceof EvalContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
-        if (r instanceof InitialContext || r instanceof SelfContext) {
+    if (r instanceof EvalContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+    /*
+     * If either side is a Collection, turn it into an Iterator.
+     */
+    if (l instanceof Collection<?>) {
+        l = ((Collection<?>) l).iterator();
     }
-
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+    if (r instanceof Collection<?>) {
+        r = ((Collection<?>) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    /*
+     * XPath "=" semantics:
+     *   - If one side is an iterator and the other is not, check containment.
+     *   - If both sides are iterators, check for any matching pair.
+     *   - Otherwise, do a simple atomic comparison.
+     */
+    if (l instanceof Iterator<?> && !(r instanceof Iterator<?>)) {
+        return contains((Iterator<?>) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+    if (!(l instanceof Iterator<?>) && (r instanceof Iterator<?>)) {
+        return contains((Iterator<?>) r, l);
     }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+    if (l instanceof Iterator<?> && r instanceof Iterator<?>) {
+        return findMatch((Iterator<?>) l, (Iterator<?>) r);
     }
+
     return equal(l, r);
 }
\ No newline at end of file
