diff --git a/tmp/dfd1e2f1-3fe9-4bdb-b419-25bbcc4693f3_buggy.java b/tmp/d9cc2eba-07ba-446b-872d-3173352dcc2b_fixed.java
index 7c7fdc2..9d5b8a1 100644
--- a/tmp/dfd1e2f1-3fe9-4bdb-b419-25bbcc4693f3_buggy.java
+++ b/tmp/d9cc2eba-07ba-446b-872d-3173352dcc2b_fixed.java
@@ -1,81 +1,100 @@
 static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {
-        if (input == null) // empty body
+    if (input == null)
         return new Document(baseUri);
     input = ConstrainableInputStream.wrap(input, bufferSize, 0);
 
     Document doc = null;
     boolean fullyRead = false;
 
     // read the start of the stream and look for a BOM or meta charset
     input.mark(bufferSize);
-        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.
+    ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1);
     fullyRead = input.read() == -1;
     input.reset();
 
     // look for BOM - overrides any other header or input
     BomCharset bomCharset = detectCharsetFromBom(firstBytes);
     if (bomCharset != null)
         charsetName = bomCharset.charset;
 
-        if (charsetName == null) { // determine from meta. safe first parse as UTF-8
+    if (charsetName == null) {
+        // safe first parse as UTF-8 to look for a meta charset
         String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();
         doc = parser.parseInput(docData, baseUri);
 
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // look for <meta http-equiv="Content-Type" ...> or HTML5 <meta charset=...>
         Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");
-            String foundCharset = null; // if not found, will keep utf-8 as best attempt
+        String foundCharset = null;
         for (Element meta : metaElements) {
             if (meta.hasAttr("http-equiv"))
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             if (foundCharset == null && meta.hasAttr("charset"))
                 foundCharset = meta.attr("charset");
             if (foundCharset != null)
                 break;
         }
-
-            // look for <?xml encoding='ISO-8859-1'?>
+        // look for <?xml encoding=...?>
         if (foundCharset == null && doc.childNodeSize() > 0) {
             Node first = doc.childNode(0);
             XmlDeclaration decl = null;
-                if (first instanceof XmlDeclaration)
+            if (first instanceof XmlDeclaration) {
                 decl = (XmlDeclaration) first;
-                else if (first instanceof Comment) {
+            } else if (first instanceof Comment) {
                 Comment comment = (Comment) first;
                 if (comment.isXmlDeclaration())
                     decl = comment.asXmlDeclaration();
             }
-                if (decl != null) {
-                    if (decl.name().equalsIgnoreCase("xml"))
+            if (decl != null && "xml".equalsIgnoreCase(decl.name()))
                 foundCharset = decl.attr("encoding");
         }
-            }
         foundCharset = validateCharset(foundCharset);
-            if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)
+
+        if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) {
+            // got a real charset, re-decode
             foundCharset = foundCharset.trim().replaceAll("[\"']", "");
             charsetName = foundCharset;
             doc = null;
         } else if (!fullyRead) {
             doc = null;
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
+        // user or HTTP header specified charset
+        Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to detect from HTML");
     }
+
     if (doc == null) {
         if (charsetName == null)
             charsetName = defaultCharset;
         BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);
-            if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here
+        if (bomCharset != null && bomCharset.offset)
             reader.skip(1);
         try {
             doc = parser.parseInput(reader, baseUri);
         } catch (UncheckedIOException e) {
-                // io exception when parsing (not seen before because reading the stream as we go)
             throw e.ioException();
         }
+
+        // set output charset
         Charset charset = Charset.forName(charsetName);
         doc.outputSettings().charset(charset);
-                // some charsets can read but not encode; switch to an encodable charset and update the meta el
+
+        // some charsets can read but not encode; switch to UTF-8 and update meta
+        if (!charset.canEncode()) {
+            Charset utf = Charset.forName(defaultCharset);
+            doc.outputSettings().charset(utf);
+            // update HTML5 <meta charset=...>
+            Elements html5 = doc.select("meta[charset]");
+            for (Element meta : html5) {
+                meta.attr("charset", defaultCharset);
             }
+            // update HTML4 <meta http-equiv=content-type>
+            Elements html4 = doc.select("meta[http-equiv=content-type]");
+            for (Element meta : html4) {
+                meta.attr("content", "text/html; charset=" + defaultCharset);
+            }
+        }
+    }
+
     input.close();
     return doc;
 }
\ No newline at end of file
