diff --git a/tmp/988d9806-aac7-4b31-b18c-01c0a299a1c3_buggy.java b/tmp/6b7befca-5c38-43d2-a4b4-fad4f7d6cbce_fixed.java
index 57c40b2..7ba4e92 100644
--- a/tmp/988d9806-aac7-4b31-b18c-01c0a299a1c3_buggy.java
+++ b/tmp/6b7befca-5c38-43d2-a4b4-fad4f7d6cbce_fixed.java
@@ -1,27 +1,36 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
   // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
   Node property = n.getLastChild();
   Node objNode = n.getFirstChild();
   JSType childType = getJSType(objNode);
 
+  // Dictionary types allow any property access via ["x"], but not obj.x
   if (childType.isDict()) {
     report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
+  } else {
+    // Always reject null/undefined bases (even on the lhs of an assignment).
+    if (!validator.expectNotNullOrUndefined(
+            t, n, childType,
+            "No properties on this expression",
+            getNativeType(OBJECT_TYPE))) {
+      ensureTyped(t, n);
       return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
-      checkPropertyAccess(childType, property.getString(), t, n);
     }
+
+    String propName = property.getString();
+    // If the base is the 'unknown' type (e.g. an un‐typed parameter),
+    // treat any property access as a missing‐property error.
+    if (childType.isUnknownType()) {
+      String baseName = objNode.isName()
+          ? objNode.getString()
+          : childType.toString();
+      report(t, property, TypeValidator.PROPERTY_NOT_DEFINED,
+             propName, baseName);
+    } else {
+      // For a known (non‐dict, non‐unknown) type, do the normal lookup
+      checkPropertyAccess(childType, propName, t, n);
+    }
+  }
+
   ensureTyped(t, n);
 }
\ No newline at end of file
