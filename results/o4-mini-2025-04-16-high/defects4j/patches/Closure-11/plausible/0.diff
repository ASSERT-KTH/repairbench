diff --git a/tmp/3741ae33-8b0d-4a97-be6a-d895712097d4_buggy.java b/tmp/01ddc752-c652-4e5f-b2e3-a0a010e64d47_fixed.java
index 57c40b2..60facb3 100644
--- a/tmp/3741ae33-8b0d-4a97-be6a-d895712097d4_buggy.java
+++ b/tmp/01ddc752-c652-4e5f-b2e3-a0a010e64d47_fixed.java
@@ -1,27 +1,22 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
   // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
   Node property = n.getLastChild();
   Node objNode = n.getFirstChild();
   JSType childType = getJSType(objNode);
 
   if (childType.isDict()) {
     report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+  } else if (parent.isAssign() && n == parent.getFirstChild()) {
+    // In an assignment's LHS: only check for null/undefined, skip existence checks.
+    validator.expectNotNullOrUndefined(
+        t, n, childType,
+        "No properties on this expression",
+        getNativeType(OBJECT_TYPE));
+  } else if (validator.expectNotNullOrUndefined(
+      t, n, childType,
+      "No properties on this expression",
+      getNativeType(OBJECT_TYPE))) {
     checkPropertyAccess(childType, property.getString(), t, n);
   }
   ensureTyped(t, n);
 }
\ No newline at end of file
