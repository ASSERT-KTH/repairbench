diff --git a/tmp/20e59040-a6fc-4b79-8388-4570df6e0940_buggy.java b/tmp/1506f29d-293b-4618-af56-354aff1e6b29_fixed.java
index 57c40b2..75cfbed 100644
--- a/tmp/20e59040-a6fc-4b79-8388-4570df6e0940_buggy.java
+++ b/tmp/1506f29d-293b-4618-af56-354aff1e6b29_fixed.java
@@ -1,27 +1,26 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
   // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
   Node property = n.getLastChild();
   Node objNode = n.getFirstChild();
   JSType childType = getJSType(objNode);
 
+  // Report dict‚Äêstyle property access first.
   if (childType.isDict()) {
     report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+  } else {
+    // Always check for null/undefined on the receiver.
+    if (validator.expectNotNullOrUndefined(
+            t, n, childType,
+            "No properties on this expression",
+            getNativeType(OBJECT_TYPE))) {
+      // If this GETPROP is the left side of an assignment, it's a write
+      // (i.e. defining a property), so skip the "unknown property" error.
+      boolean isWrite =
+          parent.isAssign() && parent.getFirstChild() == n;
+      if (!isWrite) {
         checkPropertyAccess(childType, property.getString(), t, n);
       }
+    }
+  }
   ensureTyped(t, n);
 }
\ No newline at end of file
