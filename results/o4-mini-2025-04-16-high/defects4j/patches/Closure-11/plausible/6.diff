diff --git a/tmp/94aa5766-b87b-4f06-940c-d71144d0dc13_buggy.java b/tmp/3b507aea-8b13-4d23-8b49-276f81c80f2a_fixed.java
index 57c40b2..de1573a 100644
--- a/tmp/94aa5766-b87b-4f06-940c-d71144d0dc13_buggy.java
+++ b/tmp/3b507aea-8b13-4d23-8b49-276f81c80f2a_fixed.java
@@ -1,27 +1,28 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
   // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
   Node property = n.getLastChild();
   Node objNode = n.getFirstChild();
   JSType childType = getJSType(objNode);
 
+  // 1) dicts can never have properties
   if (childType.isDict()) {
-      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+    report(t, property,
+           TypeValidator.ILLEGAL_PROPERTY_ACCESS,
+           "'.'", "dict");
+  } else {
+    // 2) null/undefined never have properties
+    if (validator.expectNotNullOrUndefined(
+            t, n, childType,
+            "No properties on this expression",
+            getNativeType(OBJECT_TYPE))) {
+      // 3) for a property assignment LHS we allow new props,
+      //    so skip the "never defined" check only in that case
+      if (!(parent.isAssign() && parent.getFirstChild() == n)) {
         checkPropertyAccess(childType, property.getString(), t, n);
       }
+    }
+  }
+
+  // Ensure the GETPROP node has a type
   ensureTyped(t, n);
 }
\ No newline at end of file
