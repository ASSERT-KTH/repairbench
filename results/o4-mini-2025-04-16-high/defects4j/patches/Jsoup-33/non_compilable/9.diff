diff --git a/tmp/88bc10d9-f180-42f7-959f-f56ce1dfae8c_buggy.java b/tmp/b8e3459b-6aea-4a92-a38b-234b8d2e041d_fixed.java
index dc93be3..80d0fe4 100644
--- a/tmp/88bc10d9-f180-42f7-959f-f56ce1dfae8c_buggy.java
+++ b/tmp/b8e3459b-6aea-4a92-a38b-234b8d2e041d_fixed.java
@@ -1,14 +1,21 @@
-    Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
-            return el;
+private Element insert(Token.StartTag startTag) {
+    // look up the HTML semantics of this tag
+    Tag tag = Tag.valueOf(startTag.name());
+
+    // if it’s a “void” element by spec (img, hr, br, etc.), always treat as empty
+    if (tag.isEmpty()) {
+        return insertEmpty(startTag);
     }
 
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    // otherwise, normal element insertion
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
+
+    // if the author supplied a self‐close slash on a non‐void tag,
+    // force a fake end tag so it closes immediately
+    if (startTag.isSelfClosing()) {
+        tokeniser.emit(new Token.EndTag(el.tagName()));
+    }
+
     return el;
 }
\ No newline at end of file
