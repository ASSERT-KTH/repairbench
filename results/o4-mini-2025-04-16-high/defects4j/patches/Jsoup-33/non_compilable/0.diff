diff --git a/tmp/c64f0f3c-042c-4417-a4e0-4d944ff5d6aa_buggy.java b/tmp/8e4da894-e3fb-43fe-9fb2-0bcf84feedde_fixed.java
index dc93be3..59552f7 100644
--- a/tmp/c64f0f3c-042c-4417-a4e0-4d944ff5d6aa_buggy.java
+++ b/tmp/8e4da894-e3fb-43fe-9fb2-0bcf84feedde_fixed.java
@@ -1,14 +1,19 @@
+@Override
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
+    // look up the tag definition
+    Tag tag = Tag.valueOf(startTag.name());
+    // only force a fake end tag on self‐closing for non‐void (non‐empty) tags.
+    // void elements (img, hr, br, etc.) are handled in the state machine and never hit this branch.
+    if (startTag.isSelfClosing() && !tag.isEmpty()) {
         Element el = insertEmpty(startTag);
+        // push so that the fake end tag will match
         stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        // emit a matching end tag to close it immediately
+        tokeniser.emit(new Token.EndTag(el.tagName()));
         return el;
     }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    // normal insertion for other start tags
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
