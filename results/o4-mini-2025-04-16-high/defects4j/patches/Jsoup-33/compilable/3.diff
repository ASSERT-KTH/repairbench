diff --git a/tmp/bfd97fd7-b4a5-4095-8956-e9068df9a5e7_buggy.java b/tmp/2164b421-01ac-4c17-9fba-24b86f71ec06_fixed.java
index dc93be3..827fff8 100644
--- a/tmp/bfd97fd7-b4a5-4095-8956-e9068df9a5e7_buggy.java
+++ b/tmp/2164b421-01ac-4c17-9fba-24b86f71ec06_fixed.java
@@ -1,14 +1,19 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+    // xml‐style self‐closing ("/>") outside of void elements:
+    // – known HTML tags: treat as empty by forcing a synthetic end tag
+    // – unknown tags: truly self‐close with no extra end tag
     if (startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
+        if (Tag.isKnownTag(startTag.name())) {
+            // for a known (non‐void) tag, push & emit a matching end tag so it pops immediately
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));
+        }
         return el;
     }
 
+    // normal start tag
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
