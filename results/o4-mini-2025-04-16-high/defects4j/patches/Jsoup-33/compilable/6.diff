diff --git a/tmp/70c4bed9-9b8d-48b8-9b2e-ae7942066fca_buggy.java b/tmp/f457f5cc-c716-4968-8631-0fa53ceef621_fixed.java
index dc93be3..c12d22a 100644
--- a/tmp/70c4bed9-9b8d-48b8-9b2e-ae7942066fca_buggy.java
+++ b/tmp/f457f5cc-c716-4968-8631-0fa53ceef621_fixed.java
@@ -1,14 +1,16 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
+    // treat either an explicit self‐closing tag or any known empty tag as empty
+    Tag tag = Tag.valueOf(startTag.name());
+    if (startTag.isSelfClosing() || tag.isEmpty()) {
         Element el = insertEmpty(startTag);
+        // push then immediately pop via a synthetic end‐tag so the treebuilder state is correct
         stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        tokeniser.emit(new Token.EndTag(el.tagName()));
         return el;
     }
     
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    // normal start‐tag
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
