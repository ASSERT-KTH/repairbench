diff --git a/tmp/f32a9992-79db-40f1-91c9-f07ae5aeb6ff_buggy.java b/tmp/6cd6c096-42a7-4e90-b6de-d47a4761d5f8_fixed.java
index dc93be3..fb40536 100644
--- a/tmp/f32a9992-79db-40f1-91c9-f07ae5aeb6ff_buggy.java
+++ b/tmp/6cd6c096-42a7-4e90-b6de-d47a4761d5f8_fixed.java
@@ -1,14 +1,17 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
+    Tag tag = Tag.valueOf(startTag.name());
+    // handle void elements (spec‐defined empty tags) and explicit self‐closing tags
+    if (tag.isEmpty() || startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
+        // if the author wrote a self‐closing slash on a non‐void tag, force a fake end tag
+        if (startTag.isSelfClosing()) {
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));
+        }
         return el;
     }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    // normal start tag
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
