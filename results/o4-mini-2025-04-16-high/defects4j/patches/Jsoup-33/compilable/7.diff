diff --git a/tmp/0372886a-4ca3-480a-893e-b5ea6ae1ba0a_buggy.java b/tmp/54ec1af3-ef0b-4eb0-8b17-c47fe21819ec_fixed.java
index dc93be3..53b78cf 100644
--- a/tmp/0372886a-4ca3-480a-893e-b5ea6ae1ba0a_buggy.java
+++ b/tmp/54ec1af3-ef0b-4eb0-8b17-c47fe21819ec_fixed.java
@@ -1,14 +1,18 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
+    Tag tag = Tag.valueOf(startTag.name());
+    // handle empty tags (void elements per spec) or explicit self‐closing
+    if (startTag.isSelfClosing() || tag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
+        // for an explicit slash on a non‐void tag, emit a fake end tag so we exit any raw/rcdata mode
+        if (startTag.isSelfClosing() && !tag.isSelfClosing()) {
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));
+        }
         return el;
     }
     
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    // normal insertion for non‐empty start tags
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
