diff --git a/tmp/439a44e5-8c9b-4e66-ae5e-bf59bf1a8d07_buggy.java b/tmp/15552ccb-6e59-4627-a3c3-eed15fb8b4ef_fixed.java
index dc93be3..280948a 100644
--- a/tmp/439a44e5-8c9b-4e66-ae5e-bf59bf1a8d07_buggy.java
+++ b/tmp/15552ccb-6e59-4627-a3c3-eed15fb8b4ef_fixed.java
@@ -1,14 +1,11 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
-            return el;
-        }
-        
+    // all tags, self‐closing or not, should go through the normal insert() routine,
+    // but if the token was self‐closing, immediately queue a fake end tag so that
+    // the element is popped right away.
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
+    if (startTag.isSelfClosing()) {
+        tokeniser.emit(new Token.EndTag(el.tagName()));
+    }
     return el;
 }
\ No newline at end of file
