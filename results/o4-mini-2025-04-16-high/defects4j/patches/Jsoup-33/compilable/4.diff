diff --git a/tmp/7f62f717-ec7f-404d-a153-042fa01047d6_buggy.java b/tmp/3f961b92-fa55-4878-bb47-74b0243ac561_fixed.java
index dc93be3..10edd10 100644
--- a/tmp/7f62f717-ec7f-404d-a153-042fa01047d6_buggy.java
+++ b/tmp/3f961b92-fa55-4878-bb47-74b0243ac561_fixed.java
@@ -1,14 +1,18 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+    Tag tag = Tag.valueOf(startTag.name());
+    // handle void (empty) elements (e.g. <hr>, <img>) – always empty, no fake end tag
+    if (tag.isEmpty()) {
+        return insertEmpty(startTag);
+    }
+    // handle explicit self‐closing start tags on non‐void elements: insert then force an end tag
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        Element el = new Element(tag, baseUri, startTag.attributes);
+        insert(el);
+        tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we exit any special state
         return el;
     }
-        
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    // normal start tag
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
