diff --git a/tmp/2f2e8906-de80-441e-b860-9a499a05e059_buggy.java b/tmp/6bc150d4-e0eb-4f57-8a24-3e1eaa373545_fixed.java
index 5f96616..7e58b63 100644
--- a/tmp/2f2e8906-de80-441e-b860-9a499a05e059_buggy.java
+++ b/tmp/6bc150d4-e0eb-4f57-8a24-3e1eaa373545_fixed.java
@@ -1,20 +1,23 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+  // If it's a plain record, match it.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
+  // If it's a union, look for record-type members and match each one.
+  else if (constraint.isUnionType()) {
+    UnionType ut = constraint.toMaybeUnionType();
+    if (ut != null) {
+      for (JSType alt : ut.getAlternates()) {
+        if (alt.isRecordType()) {
+          matchRecordTypeConstraint(alt.toObjectType());
+        }
+      }
+    }
+  }
 }
\ No newline at end of file
