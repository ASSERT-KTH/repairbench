diff --git a/tmp/8558665b-2c08-4d99-9bcf-47c3de506c39_buggy.java b/tmp/3bbacd77-4c73-4322-8d03-a3cc06e989b6_fixed.java
index db19f52..cca7836 100644
--- a/tmp/8558665b-2c08-4d99-9bcf-47c3de506c39_buggy.java
+++ b/tmp/3bbacd77-4c73-4322-8d03-a3cc06e989b6_fixed.java
@@ -1,32 +1,41 @@
-    // switching the chartset midstream when a meta http-equiv tag defines the charset.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+
+    if (charsetName == null) {
+        // determine from meta. safe parse as defaultCharset (usually UTF-8)
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+        if (meta != null) {
+            String foundCharset = meta.hasAttr("http-equiv")
+                ? getCharsetFromContentType(meta.attr("content"))
+                : meta.attr("charset");
+            if (foundCharset != null
+                && foundCharset.length() != 0
+                && !foundCharset.equals(defaultCharset)) {
+                // re-decode with the correct charset
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
+        // specified by content-type header or user
+        Validate.notEmpty(charsetName,
+            "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
     if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
-            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
-
+        // strip spurious BOM if present
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+            docData = docData.substring(1);
+        }
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
\ No newline at end of file
