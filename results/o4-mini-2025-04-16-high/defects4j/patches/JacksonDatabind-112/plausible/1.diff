diff --git a/tmp/6f3bea1a-4666-4065-85d9-fb2abed08d36_buggy.java b/tmp/de3780cf-70c3-4082-a1dd-784295fe5d73_fixed.java
index 4ebe4f9..80b6a72 100644
--- a/tmp/6f3bea1a-4666-4065-85d9-fb2abed08d36_buggy.java
+++ b/tmp/de3780cf-70c3-4082-a1dd-784295fe5d73_fixed.java
@@ -1,41 +1,53 @@
-    /*
-    /**********************************************************
-    /* Validation, post-processing
-    /**********************************************************
-     */
 @Override
 public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
+    // 1) May need to resolve types for delegate‐based creators:
     JsonDeserializer<Object> delegate = null;
     if (_valueInstantiator != null) {
-            // [databind#2324]: check both array-delegating and delegating
+        // [databind#2324]: check both array‐delegating and normal delegating creators
         AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
+        JavaType delegateType = null;
+        if (delegateCreator == null) {
+            // try array‐delegating creator
+            delegateCreator = _valueInstantiator.getArrayDelegateCreator();
             if (delegateCreator != null) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+                delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+            }
+        }
+        if (delegateCreator != null) {
+            // if we didn't pick up an array delegate type, fall back on the regular one
+            if (delegateType == null) {
+                delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+            }
+            // find (and contextualize) the deserializer for that delegate
             delegate = findDeserializer(ctxt, delegateType, property);
         }
     }
+
+    // 2) Then handle element (content) deserializer:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     final JavaType valueType = _containerType.getContentType();
     if (valueDeser == null) {
-            // [databind#125]: May have a content converter
-            valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
+        // May have a content converter
+        valueDeser = findConvertingContentDeserializer(ctxt, property, null);
         if (valueDeser == null) {
-            // And we may also need to get deserializer for String
+            // And if none, ask for a contextual deserializer for the element type
             valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
         }
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else {
+        // if already assigned, probably needs secondary contextualization
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
     }
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+
+    // 3) Handle format features (e.g. ACCEPT_SINGLE_VALUE_AS_ARRAY) and nulls:
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
     if (isDefaultDeserializer(valueDeser)) {
         valueDeser = null;
     }
+
+    // 4) Return a new instance with resolved delegate and value deserializer
     return withResolved(delegate, valueDeser, nuller, unwrapSingle);
 }
\ No newline at end of file
