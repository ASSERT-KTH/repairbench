diff --git a/tmp/10e3707b-757e-476b-bf4c-4d83a15e533b_buggy.java b/tmp/b1e85588-86c7-432a-8d23-e5cdd1a6c329_fixed.java
index 4ebe4f9..e3c3879 100644
--- a/tmp/10e3707b-757e-476b-bf4c-4d83a15e533b_buggy.java
+++ b/tmp/b1e85588-86c7-432a-8d23-e5cdd1a6c329_fixed.java
@@ -1,41 +1,49 @@
-    /*
-    /**********************************************************
-    /* Validation, post-processing
-    /**********************************************************
-     */
 @Override
 public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
+    // May need to resolve types for delegate‐based creators:
     JsonDeserializer<Object> delegate = null;
     if (_valueInstantiator != null) {
-            // [databind#2324]: check both array-delegating and delegating
-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
-            if (delegateCreator != null) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        // [databind#2324]: check both array‐delegating and plain delegating creators
+        AnnotatedWithParams creator = _valueInstantiator.getArrayDelegateCreator();
+        JavaType delegateType = null;
+        if (creator != null) {
+            delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+        } else {
+            creator = _valueInstantiator.getDelegateCreator();
+            if (creator != null) {
+                delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+            }
+        }
+        if (delegateType != null) {
             delegate = findDeserializer(ctxt, delegateType, property);
         }
     }
+
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     final JavaType valueType = _containerType.getContentType();
     if (valueDeser == null) {
         // [databind#125]: May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         if (valueDeser == null) {
-            // And we may also need to get deserializer for String
+            // ... or fall back to standard lookup
             valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
         }
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else {
+        // if directly assigned, probably not yet contextual
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
     }
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+
+    // handle unwrap‐single‐element‐as‐array feature
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
+
+    // if it's just the JDK default String deserializer, drop it and
+    // we'll re‐look it up on the fly
     if (isDefaultDeserializer(valueDeser)) {
         valueDeser = null;
     }
     return withResolved(delegate, valueDeser, nuller, unwrapSingle);
 }
\ No newline at end of file
