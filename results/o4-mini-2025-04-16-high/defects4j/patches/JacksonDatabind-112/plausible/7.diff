diff --git a/tmp/0b0d70c2-d6dd-435e-af8b-d65edc10475a_buggy.java b/tmp/8aea1e23-d003-459e-bf22-07224f31a33b_fixed.java
index 4ebe4f9..74fa1ce 100644
--- a/tmp/0b0d70c2-d6dd-435e-af8b-d65edc10475a_buggy.java
+++ b/tmp/8aea1e23-d003-459e-bf22-07224f31a33b_fixed.java
@@ -1,41 +1,45 @@
-    /*
-    /**********************************************************
-    /* Validation, post-processing
-    /**********************************************************
-     */
 @Override
 public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
+    // May need to resolve types for delegate-based or array-delegating creators:
     JsonDeserializer<Object> delegate = null;
     if (_valueInstantiator != null) {
-            // [databind#2324]: check both array-delegating and delegating
-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
-            if (delegateCreator != null) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        AnnotatedWithParams creator = _valueInstantiator.getDelegateCreator();
+        boolean arrayDelegate = false;
+        if (creator == null) {
+            creator = _valueInstantiator.getArrayDelegateCreator();
+            arrayDelegate = true;
+        }
+        if (creator != null) {
+            JavaType delegateType = arrayDelegate
+                    ? _valueInstantiator.getArrayDelegateType(ctxt.getConfig())
+                    : _valueInstantiator.getDelegateType(ctxt.getConfig());
             delegate = findDeserializer(ctxt, delegateType, property);
         }
     }
+
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     final JavaType valueType = _containerType.getContentType();
     if (valueDeser == null) {
         // [databind#125]: May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         if (valueDeser == null) {
             // And we may also need to get deserializer for String
             valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
         }
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else {
+        // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
     }
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+
+    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined?
+    //   Mostly comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
     if (isDefaultDeserializer(valueDeser)) {
         valueDeser = null;
     }
     return withResolved(delegate, valueDeser, nuller, unwrapSingle);
 }
\ No newline at end of file
