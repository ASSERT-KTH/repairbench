diff --git a/tmp/34c3412a-d224-490f-ba09-79046d41d33c_buggy.java b/tmp/97f7da7b-fe98-4a11-8031-4a8750f020a2_fixed.java
index 4ebe4f9..687a1b9 100644
--- a/tmp/34c3412a-d224-490f-ba09-79046d41d33c_buggy.java
+++ b/tmp/97f7da7b-fe98-4a11-8031-4a8750f020a2_fixed.java
@@ -1,41 +1,53 @@
-    /*
-    /**********************************************************
-    /* Validation, post-processing
-    /**********************************************************
-     */
 @Override
 public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
+    // May need to resolve types for both array-delegating _and_ ordinary delegating creators:
     JsonDeserializer<Object> delegate = null;
     if (_valueInstantiator != null) {
-            // [databind#2324]: check both array-delegating and delegating
-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
-            if (delegateCreator != null) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        AnnotatedWithParams creator = _valueInstantiator.getDelegateCreator();
+        JavaType delegateType = null;
+        if (creator != null) {
+            // a normal delegating creator
+            delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+        } else {
+            // if no "standard" delegate, check for array-delegating creator
+            creator = _valueInstantiator.getArrayDelegateCreator();
+            if (creator != null) {
+                delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+            }
+        }
+        if (creator != null) {
             delegate = findDeserializer(ctxt, delegateType, property);
         }
     }
+
+    // then resolve the element‐value deserializer as before
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     final JavaType valueType = _containerType.getContentType();
     if (valueDeser == null) {
-            // [databind#125]: May have a content converter
+        // may have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         if (valueDeser == null) {
-            // And we may also need to get deserializer for String
+            // fallback to standard element deserializer
             valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
         }
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else {
+        // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
     }
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+
+    // find any ACCEPT_SINGLE_VALUE_AS_ARRAY setting on enclosing property
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+    // find null‐value provider for elements
     NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
+
+    // drop placeholder "default" deserializers so that we know to use
+    // the no‐arg creator path
     if (isDefaultDeserializer(valueDeser)) {
         valueDeser = null;
     }
+
     return withResolved(delegate, valueDeser, nuller, unwrapSingle);
 }
\ No newline at end of file
