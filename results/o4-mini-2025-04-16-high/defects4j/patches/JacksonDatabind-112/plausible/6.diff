diff --git a/tmp/2ac34e32-94bd-4a27-ad26-7c4f35385845_buggy.java b/tmp/67390f00-36f7-4897-b87a-7f540b36d036_fixed.java
index 4ebe4f9..a7bab1e 100644
--- a/tmp/2ac34e32-94bd-4a27-ad26-7c4f35385845_buggy.java
+++ b/tmp/67390f00-36f7-4897-b87a-7f540b36d036_fixed.java
@@ -1,41 +1,47 @@
-    /*
-    /**********************************************************
-    /* Validation, post-processing
-    /**********************************************************
-     */
 @Override
 public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
+    // May need to resolve types for delegate‐based creators (both normal and array‐delegating)
     JsonDeserializer<Object> delegate = null;
     if (_valueInstantiator != null) {
-            // [databind#2324]: check both array-delegating and delegating
         AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
+        boolean arrayCreator = false;
+        if (delegateCreator == null) {
+            // fall back to array‐delegate creator if one was registered
+            delegateCreator = _valueInstantiator.getArrayDelegateCreator();
+            arrayCreator = true;
+        }
         if (delegateCreator != null) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
-                delegate = findDeserializer(ctxt, delegateType, property);
+            JavaType dt = arrayCreator
+                ? _valueInstantiator.getArrayDelegateType(ctxt.getConfig())
+                : _valueInstantiator.getDelegateType(ctxt.getConfig());
+            delegate = findDeserializer(ctxt, dt, property);
         }
     }
+
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     final JavaType valueType = _containerType.getContentType();
     if (valueDeser == null) {
-            // [databind#125]: May have a content converter
+        // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         if (valueDeser == null) {
-            // And we may also need to get deserializer for String
+            // And we may also need to get deserializer for element type
             valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
         }
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else {
+        // if directly assigned, probably not yet contextual
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
     }
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+
+    // Single‐value‐as‐array setting
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+    // null‐element handling
     NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
+    // by default we drop default value deserializers
     if (isDefaultDeserializer(valueDeser)) {
         valueDeser = null;
     }
     return withResolved(delegate, valueDeser, nuller, unwrapSingle);
 }
\ No newline at end of file
