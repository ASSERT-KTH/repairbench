diff --git a/tmp/fdedc38b-33c9-4496-9c33-f18f3f817071_buggy.java b/tmp/c40180aa-bafa-48bd-a613-11aaf8241717_fixed.java
index 41ea16c..19fc1da 100644
--- a/tmp/fdedc38b-33c9-4496-9c33-f18f3f817071_buggy.java
+++ b/tmp/c40180aa-bafa-48bd-a613-11aaf8241717_fixed.java
@@ -1,63 +1,77 @@
 /**
  * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
  * Note that the resulting expression will always evaluate to
  * true, as would the x = {...} expression.
  */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                          Map<String, String> varmap) {
   // Compute all of the assignments necessary
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
+
+  // Build up a list of assignments for existing keys...
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
     String var = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
+    nodes.add(new Node(
+        Token.ASSIGN,
+        Node.newString(Token.NAME, varmap.get(var)),
+        value));
     all.remove(var);
   }
-
-      // TODO(user): Better source information.
+  // ...and assign undefined to any remaining props
   for (String var : all) {
-        nodes.add(
-          new Node(Token.ASSIGN,
+    nodes.add(new Node(
+        Token.ASSIGN,
         Node.newString(Token.NAME, varmap.get(var)),
         NodeUtil.newUndefinedNode(null)));
   }
 
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+  // Special‐case an empty literal: no assignments at all.
+  if (nodes.isEmpty()) {
+    Node replace = ref.getParent();
+    if (replace.getType() == Token.VAR) {
+      // Drop the entire var declaration.
+      replace.detach();
+    } else {
+      // Replace the standalone assignment with `true`.
+      Node trueNode = new Node(Token.TRUE);
+      trueNode.copyInformationFromForTree(replace);
+      replace.getParent().replaceChild(replace, trueNode);
+    }
+    return;
+  }
+
+  // Otherwise append `true` so the comma‐expression still returns true.
   nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
+  // And join everything with commas. A COMMA node must have exactly two children,
+  // so we build a little balanced tree.
   nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
+  Node replacement = new Node(Token.COMMA);
   Node cur = replacement;
   int i;
   for (i = 0; i < nodes.size() - 2; i++) {
     cur.addChildToFront(nodes.get(i));
     Node t = new Node(Token.COMMA);
     cur.addChildToFront(t);
     cur = t;
   }
   cur.addChildToFront(nodes.get(i));
   cur.addChildToFront(nodes.get(i + 1));
 
+  // Finally splice the new tree in.
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
-
   if (replace.getType() == Token.VAR) {
+    // wrap in an EXPR if we're replacing a var-decl
     replace.getParent().replaceChild(
         replace, NodeUtil.newExpr(replacement));
   } else {
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
