diff --git a/tmp/8e788dfa-8a7a-453d-916d-10e6ea4bfdcf_buggy.java b/tmp/52768c59-cf1e-4385-b49f-400e5729a54f_fixed.java
index 41ea16c..ed84ac7 100644
--- a/tmp/8e788dfa-8a7a-453d-916d-10e6ea4bfdcf_buggy.java
+++ b/tmp/52768c59-cf1e-4385-b49f-400e5729a54f_fixed.java
@@ -1,63 +1,76 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                          Map<String, String> varmap) {
+  // If there are no properties to inline, just remove the var or
+  // replace the assignment with a bare `true` literal.
+  if (varmap.isEmpty()) {
+    Node replace = ref.getParent();
+    if (replace.getType() == Token.VAR) {
+      // Drop the entire var-declaration statement.
+      replace.getParent().removeChild(replace);
+    } else {
+      // Replace the expression-statement with `true`.
+      Node trueNode = new Node(Token.TRUE);
+      trueNode.copyInformationFromForTree(replace);
+      replace.getParent().replaceChild(replace, trueNode);
+    }
+    return;
+  }
+
   // Compute all of the assignments necessary
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
     String var = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
     nodes.add(
         new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
+                 Node.newString(Token.NAME, varmap.get(var)),
+                 value));
     all.remove(var);
   }
 
-      // TODO(user): Better source information.
+  // Assign `undefined` to any properties not present in the literal.
   for (String var : all) {
     nodes.add(
         new Node(Token.ASSIGN,
                  Node.newString(Token.NAME, varmap.get(var)),
                  NodeUtil.newUndefinedNode(null)));
   }
 
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+  // Ensure the whole expression returns true.
   nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
+  Node replacement;
+  if (nodes.size() == 1) {
+    // Only the TRUE literal, no comma tree needed.
+    replacement = nodes.get(0);
+  } else {
+    // Build a binary COMMA tree so each COMMA node has exactly two children.
     nodes = Lists.reverse(nodes);
     replacement = new Node(Token.COMMA);
     Node cur = replacement;
     int i;
     for (i = 0; i < nodes.size() - 2; i++) {
       cur.addChildToFront(nodes.get(i));
       Node t = new Node(Token.COMMA);
       cur.addChildToFront(t);
       cur = t;
     }
     cur.addChildToFront(nodes.get(i));
     cur.addChildToFront(nodes.get(i + 1));
+  }
 
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
 
   if (replace.getType() == Token.VAR) {
     replace.getParent().replaceChild(
         replace, NodeUtil.newExpr(replacement));
   } else {
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
