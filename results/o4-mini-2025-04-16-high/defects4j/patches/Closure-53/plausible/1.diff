diff --git a/tmp/632a73b2-fff1-48d5-9383-a21c17da3b19_buggy.java b/tmp/56a4db1d-0cfe-4513-9c6e-a7029d96305a_fixed.java
index 41ea16c..7d86107 100644
--- a/tmp/632a73b2-fff1-48d5-9383-a21c17da3b19_buggy.java
+++ b/tmp/56a4db1d-0cfe-4513-9c6e-a7029d96305a_fixed.java
@@ -1,63 +1,70 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                          Map<String, String> varmap) {
   // Compute all of the assignments necessary
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
+
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
     String var = key.getString();
     Node value = key.removeFirstChild();
-        // TODO(user): Copy type information.
+    // TODO: copy type information if needed.
     nodes.add(
       new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
+               Node.newString(Token.NAME, varmap.get(var)),
+               value));
     all.remove(var);
   }
-
-      // TODO(user): Better source information.
+  // For any map entries not present in this literal, assign undefined.
   for (String var : all) {
     nodes.add(
       new Node(Token.ASSIGN,
                Node.newString(Token.NAME, varmap.get(var)),
                NodeUtil.newUndefinedNode(null)));
   }
 
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+  // All assignments evaluate to true, so append a TRUE literal.
   nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
+  // Build the replacement expression.
+  Node replacement;
+  if (nodes.size() == 1) {
+    // Only the TRUE; no real assignments.
+    replacement = nodes.get(0);
+  } else {
+    // Join these using COMMA. A COMMA node must have exactly 2 children,
+    // so we build a left-deep tree of commas.
     nodes = Lists.reverse(nodes);
     replacement = new Node(Token.COMMA);
     Node cur = replacement;
     int i;
     for (i = 0; i < nodes.size() - 2; i++) {
       cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+      Node nextComma = new Node(Token.COMMA);
+      cur.addChildToFront(nextComma);
+      cur = nextComma;
     }
+    // Last two nodes
     cur.addChildToFront(nodes.get(i));
     cur.addChildToFront(nodes.get(i + 1));
+  }
 
+  // Replace the original AST node.
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
-
   if (replace.getType() == Token.VAR) {
+    if (nodes.size() == 1) {
+      // No actual assignments => drop the var-statement entirely.
+      replace.getParent().removeChild(replace);
+    } else {
+      // Replace "var x = {...}" with an expression statement.
       replace.getParent().replaceChild(
           replace, NodeUtil.newExpr(replacement));
+    }
   } else {
+    // It's an assignment expression in an expr-stmt: drop in the replacement.
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
