diff --git a/tmp/905ab21a-d033-4eb2-8935-8791e94b947e_buggy.java b/tmp/bbf31b44-f9ed-4cd7-98c4-d048bdefdd13_fixed.java
index 41ea16c..880a8ab 100644
--- a/tmp/905ab21a-d033-4eb2-8935-8791e94b947e_buggy.java
+++ b/tmp/bbf31b44-f9ed-4cd7-98c4-d048bdefdd13_fixed.java
@@ -1,63 +1,68 @@
 /**
  * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
  * Note that the resulting expression will always evaluate to
  * true, as would the x = {...} expression.
  */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                          Map<String, String> varmap) {
   // Compute all of the assignments necessary
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
-        String var = key.getString();
+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
+    String prop = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
-        all.remove(var);
+    nodes.add(new Node(
+        Token.ASSIGN,
+        Node.newString(Token.NAME, varmap.get(prop)),
+        value));
+    all.remove(prop);
   }
-
-      // TODO(user): Better source information.
-      for (String var : all) {
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)),
+  // For any properties not in the literal, assign undefined.
+  for (String prop : all) {
+    nodes.add(new Node(
+        Token.ASSIGN,
+        Node.newString(Token.NAME, varmap.get(prop)),
         NodeUtil.newUndefinedNode(null)));
   }
 
-      Node replacement;
   // All assignments evaluate to true, so make sure that the
   // expr statement evaluates to true in case it matters.
   nodes.add(new Node(Token.TRUE));
 
+  Node replacement;
+  // If there's only the TRUE node, we don't need a comma tree.
+  if (nodes.size() == 1) {
+    replacement = nodes.get(0);
+  } else {
     // Join these using COMMA. A COMMA node must have 2 children, so we
     // create a tree. In the tree the first child be the COMMA to match
     // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
+    List<Node> rev = Lists.reverse(nodes);
     replacement = new Node(Token.COMMA);
     Node cur = replacement;
     int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
+    for (i = 0; i < rev.size() - 2; i++) {
+      cur.addChildToFront(rev.get(i));
       Node t = new Node(Token.COMMA);
       cur.addChildToFront(t);
       cur = t;
     }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
+    cur.addChildToFront(rev.get(i));
+    cur.addChildToFront(rev.get(i + 1));
+  }
 
-      Node replace = ref.getParent();
-      replacement.copyInformationFromForTree(replace);
+  Node replaceNode = ref.getParent();
+  replacement.copyInformationFromForTree(replaceNode);
 
-      if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
+  if (replaceNode.getType() == Token.VAR) {
+    replaceNode.getParent().replaceChild(
+        replaceNode, NodeUtil.newExpr(replacement));
   } else {
-        replace.getParent().replaceChild(replace, replacement);
+    replaceNode.getParent().replaceChild(
+        replaceNode, replacement);
   }
 }
\ No newline at end of file
