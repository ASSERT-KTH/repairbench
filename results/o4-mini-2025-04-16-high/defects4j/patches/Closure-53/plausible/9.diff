diff --git a/tmp/fe2df0fd-3519-4f5d-b061-47273d90da4f_buggy.java b/tmp/71f0419e-26db-436c-9340-952371a62a02_fixed.java
index 41ea16c..49eb3b7 100644
--- a/tmp/fe2df0fd-3519-4f5d-b061-47273d90da4f_buggy.java
+++ b/tmp/71f0419e-26db-436c-9340-952371a62a02_fixed.java
@@ -1,63 +1,81 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
+      Node replace = ref.getParent();
+      // If this is a var-declaration of an empty object literal
+      // and there is nothing to inline, just drop it.
+      if (replace.getType() == Token.VAR && varmap.isEmpty()) {
+        replace.getParent().removeChild(replace);
+        return;
+      }
+
       // Compute all of the assignments necessary
       List<Node> nodes = Lists.newArrayList();
       Node val = ref.getAssignedValue();
       blacklistVarReferencesInTree(val, v.scope);
       Preconditions.checkState(val.getType() == Token.OBJECTLIT);
       Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
       for (Node key = val.getFirstChild(); key != null;
            key = key.getNext()) {
         String var = key.getString();
         Node value = key.removeFirstChild();
         // TODO(user): Copy type information.
         nodes.add(
             new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
+                     Node.newString(Token.NAME, varmap.get(var)),
+                     value));
         all.remove(var);
       }
 
+      // For any property that wasn't in the literal, assign undefined.
       // TODO(user): Better source information.
       for (String var : all) {
         nodes.add(
             new Node(Token.ASSIGN,
                      Node.newString(Token.NAME, varmap.get(var)),
                      NodeUtil.newUndefinedNode(null)));
       }
 
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+      // All of these sub-expressions are true-ish, so ensure the
+      // whole thing evaluates to true as well.
       nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
+      // Build the comma-expression tree.  If there's only one node,
+      // just use it directly.
+      Node replacement;
+      if (nodes.size() == 1) {
+        replacement = nodes.get(0);
+      } else {
+        // A COMMA node must have exactly 2 children, so nest them.
         nodes = Lists.reverse(nodes);
         replacement = new Node(Token.COMMA);
         Node cur = replacement;
         int i;
         for (i = 0; i < nodes.size() - 2; i++) {
           cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+          Node nextComma = new Node(Token.COMMA);
+          cur.addChildToFront(nextComma);
+          cur = nextComma;
         }
+        // last two nodes
         cur.addChildToFront(nodes.get(i));
         cur.addChildToFront(nodes.get(i + 1));
+      }
 
-      Node replace = ref.getParent();
+      // Preserve source-information
       replacement.copyInformationFromForTree(replace);
 
+      // Splice it into the AST
       if (replace.getType() == Token.VAR) {
+        // var x = {...}  =>  EXPR(t1=…,t2=…,true)
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));
       } else {
+        // x = {...}  =>  t1=…,t2=…,true
         replace.getParent().replaceChild(replace, replacement);
       }
     }
\ No newline at end of file
