diff --git a/tmp/18db942a-029f-4d5a-ae44-ca804afa196a_buggy.java b/tmp/e8f0ae76-bcb4-4bc0-93e2-5fbee0560c24_fixed.java
index 5f8ac1a..e60e280 100644
--- a/tmp/18db942a-029f-4d5a-ae44-ca804afa196a_buggy.java
+++ b/tmp/e8f0ae76-bcb4-4bc0-93e2-5fbee0560c24_fixed.java
@@ -1,34 +1,50 @@
 private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
 {
+    // If the two pointers live in different trees, fall back to string‐based order
+    if (p1 != null && p2 != null) {
+        NodePointer root1 = p1.getRootNodePointer();
+        NodePointer root2 = p2.getRootNodePointer();
+        if (!root1.equals(root2)) {
+            String s1 = p1.toString();
+            String s2 = p2.toString();
+            if (s1 == null) s1 = "";
+            if (s2 == null) s2 = "";
+            return s1.compareTo(s2);
+        }
+    }
+
+    // Otherwise proceed with the normal, same‐tree comparison
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
-
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
-
+    // If we've reached the top of the same tree but the pointers differ,
+    // order them by their toString() values
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        String s1 = p1.toString();
+        String s2 = p2.toString();
+        if (s1 == null) s1 = "";
+        if (s2 == null) s2 = "";
+        return s1.compareTo(s2);
     }
+
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
-
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
