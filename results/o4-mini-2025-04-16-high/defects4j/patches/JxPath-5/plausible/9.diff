diff --git a/tmp/f72bca89-936d-447a-8f95-127a7d21eed3_buggy.java b/tmp/aa843b3b-f069-489a-8ea7-bf69724f2ccd_fixed.java
index 5f8ac1a..06c389e 100644
--- a/tmp/f72bca89-936d-447a-8f95-127a7d21eed3_buggy.java
+++ b/tmp/aa843b3b-f069-489a-8ea7-bf69724f2ccd_fixed.java
@@ -1,34 +1,41 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // First, bring both pointers to the same depth.
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
+
+    // If both are null or actually the same pointer, they're equal.
     if (p1 == null && p2 == null) {
         return 0;
     }
-
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
+    // If we're at the root of two *different* trees, fall back to
+    // a stable ordering rather than throwing an exception.
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Use the string representation of the pointer for a consistent order.
+        return p1.toString().compareTo(p2.toString());
     }
+
+    // Otherwise compare their parents first.
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
+    // Finally, they're siblings under the same parent, so delegate
+    // to the parent to decide the order of these two children.
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
