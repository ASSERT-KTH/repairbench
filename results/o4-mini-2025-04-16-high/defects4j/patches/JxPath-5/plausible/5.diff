diff --git a/tmp/59fc26c0-e2c6-4196-93e6-33af69675709_buggy.java b/tmp/5f734075-b63a-4d1e-8691-fa801b2ed150_fixed.java
index 5f8ac1a..3dfc1f4 100644
--- a/tmp/59fc26c0-e2c6-4196-93e6-33af69675709_buggy.java
+++ b/tmp/5f734075-b63a-4d1e-8691-fa801b2ed150_fixed.java
@@ -1,34 +1,39 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // Bring both pointers to the same depth
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
+
+    // If both are null or both refer to the same node, they're equal
     if (p1 == null && p2 == null) {
         return 0;
     }
-
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
+    // At depth 1 but not equal => different trees (e.g. a variable vs. a document node).
+    // Instead of throwing, order by their string‚Äêpaths.
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        return p1.toString().compareTo(p2.toString());
     }
+
+    // Compare their parents first
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
+    // Finally, compare siblings under the same parent
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
