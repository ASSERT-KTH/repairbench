diff --git a/tmp/e4c39b0f-8790-47eb-b63b-6e65680d9ec9_buggy.java b/tmp/b8235448-76fe-4fc5-9d35-4f3a90e92c87_fixed.java
index 5f8ac1a..6a38cd7 100644
--- a/tmp/e4c39b0f-8790-47eb-b63b-6e65680d9ec9_buggy.java
+++ b/tmp/b8235448-76fe-4fc5-9d35-4f3a90e92c87_fixed.java
@@ -1,34 +1,46 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // If the two pointers come from different root trees,
+    // fall back to simple string‐based ordering (e.g. "$var" vs "/MAIN/A").
+    NodePointer root1 = p1;
+    while (root1 != null && root1.parent != null) {
+        root1 = root1.parent;
+    }
+    NodePointer root2 = p2;
+    while (root2 != null && root2.parent != null) {
+        root2 = root2.parent;
+    }
+    if (root1 != root2) {
+        String s1 = p1 == null ? "" : p1.toString();
+        String s2 = p2 == null ? "" : p2.toString();
+        return s1.compareTo(s2);
+    }
+
+    // Same root – perform the original depth‐and‐ancestor comparison.
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
-
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
-        if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
-        }
+    // Climb up until a difference is found
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
-
+    // Finally compare siblings under the same parent
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
