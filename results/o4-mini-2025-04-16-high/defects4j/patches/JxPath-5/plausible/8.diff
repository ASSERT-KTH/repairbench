diff --git a/tmp/4437ef53-af40-4a11-b4cc-c3e4c28da535_buggy.java b/tmp/1c9c1148-b0e1-48f1-9c21-447e9ad36906_fixed.java
index 5f8ac1a..8ef700c 100644
--- a/tmp/4437ef53-af40-4a11-b4cc-c3e4c28da535_buggy.java
+++ b/tmp/1c9c1148-b0e1-48f1-9c21-447e9ad36906_fixed.java
@@ -1,34 +1,38 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
-
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
-
+    // If we've reached the top without finding a common ancestor,
+    // fall back to a stable ordering instead of throwing.
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        int h1 = System.identityHashCode(p1);
+        int h2 = System.identityHashCode(p2);
+        if (h1 != h2) {
+            return h1 < h2 ? -1 : 1;
+        }
+        String s1 = p1.toString();
+        String s2 = p2.toString();
+        return s1.compareTo(s2);
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
-
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
