diff --git a/tmp/d0154593-8952-45fe-9bcd-19f154187512_buggy.java b/tmp/315d13e0-6ca5-4e38-b3ed-90e76a33d1d1_fixed.java
index 5f8ac1a..1505183 100644
--- a/tmp/d0154593-8952-45fe-9bcd-19f154187512_buggy.java
+++ b/tmp/315d13e0-6ca5-4e38-b3ed-90e76a33d1d1_fixed.java
@@ -1,34 +1,41 @@
 private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
 {
+    // first bring the two pointers to the same depth
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
+
+    // now they are at the same depth
     if (p1 == null && p2 == null) {
         return 0;
     }
-
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
+    // if we've reached the root of each tree and they differ,  
+    // fall back to comparing their string representations
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        String s1 = p1 == null ? "" : p1.toString();
+        String s2 = p2 == null ? "" : p2.toString();
+        return s1.compareTo(s2);
     }
+
+    // climb up one level and compare again
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
+    // finally, if they share the same parent, compare by child order
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
