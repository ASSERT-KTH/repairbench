diff --git a/tmp/f3580d2b-b7f6-4b7b-bcb2-7da60cfc2fe4_buggy.java b/tmp/dfc13df6-c4de-4454-b3b5-c299f76b0b49_fixed.java
index 98dde53..2789e6b 100644
--- a/tmp/f3580d2b-b7f6-4b7b-bcb2-7da60cfc2fe4_buggy.java
+++ b/tmp/dfc13df6-c4de-4454-b3b5-c299f76b0b49_fixed.java
@@ -1,34 +1,65 @@
 public void head(org.jsoup.nodes.Node source, int depth) {
-            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack
+    // Inherit namespace mappings from the parent
+    namespacesStack.push(new HashMap<>(namespacesStack.peek()));
     if (source instanceof org.jsoup.nodes.Element) {
         org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;
 
+        // Update the in-scope namespaces and get the prefix for this element
         String prefix = updateNamespaces(sourceEl);
+        // Look up the namespace URI bound to that prefix (may be null)
         String namespace = namespacesStack.peek().get(prefix);
         String tagName = sourceEl.tagName();
 
-                Element el =
-                    doc.createElementNS(namespace, tagName);
+        Element el;
+        // If we have no namespace but the tagName is qualified (has a colon),
+        // then treat the whole name as a "local name" with no namespace.
+        if (namespace == null && tagName.contains(":")) {
+            // split off the local part
+            int colon = tagName.indexOf(':');
+            String local = tagName.substring(colon + 1);
+            // create with no namespace but with a local name so that
+            // getLocalName()==local and getNodeName()==qualified
+            el = doc.createElementNS(null, local);
+            // now override the nodeName (prefix:local) by resetting the tag
+            // (use reflection to avoid a second namespace error)
+            // in the RI (com.sun) implementation this will set the raw name
+            try {
+                java.lang.reflect.Field nameField = el.getClass()
+                    .getDeclaredField("name");
+                nameField.setAccessible(true);
+                nameField.set(el, tagName);
+            } catch (Exception e) {
+                // fallback: if we cannot hack the internal name field,
+                // just append a COLON node in front (best effort)
+                el = doc.createElement(tagName);
+            }
+        } else {
+            // normal namespace-aware element creation
+            el = doc.createElementNS(namespace, tagName);
+        }
+
         copyAttributes(sourceEl, el);
-                if (dest == null) { // sets up the root
+
+        if (dest == null) { // this is the root element
             doc.appendChild(el);
         } else {
             dest.appendChild(el);
         }
-                dest = el; // descend
+        dest = el; // descend into this element
+
     } else if (source instanceof org.jsoup.nodes.TextNode) {
-                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;
-                Text text = doc.createTextNode(sourceText.getWholeText());
-                dest.appendChild(text);
+        String text = ((org.jsoup.nodes.TextNode)source).getWholeText();
+        dest.appendChild(doc.createTextNode(text));
+
     } else if (source instanceof org.jsoup.nodes.Comment) {
-                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;
-                Comment comment = doc.createComment(sourceComment.getData());
-                dest.appendChild(comment);
+        String cm = ((org.jsoup.nodes.Comment)source).getData();
+        dest.appendChild(doc.createComment(cm));
+
     } else if (source instanceof org.jsoup.nodes.DataNode) {
-                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;
-                Text node = doc.createTextNode(sourceData.getWholeData());
-                dest.appendChild(node);
+        String data = ((org.jsoup.nodes.DataNode)source).getWholeData();
+        dest.appendChild(doc.createTextNode(data));
+
     } else {
-                // unhandled
+        // skip other node types
     }
 }
\ No newline at end of file
