diff --git a/tmp/f4a4ffac-0837-4cac-84ef-79d2d6eb3e83_buggy.java b/tmp/24f2f202-1c0c-4a6f-a064-16ca328e4be5_fixed.java
index 98dde53..94fa09b 100644
--- a/tmp/f4a4ffac-0837-4cac-84ef-79d2d6eb3e83_buggy.java
+++ b/tmp/24f2f202-1c0c-4a6f-a064-16ca328e4be5_fixed.java
@@ -1,34 +1,65 @@
 public void head(org.jsoup.nodes.Node source, int depth) {
-            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack
+    // inherit the namespace mappings from the parent
+    namespacesStack.push(new HashMap<>(namespacesStack.peek()));
+
     if (source instanceof org.jsoup.nodes.Element) {
         org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;
 
         String prefix = updateNamespaces(sourceEl);
         String namespace = namespacesStack.peek().get(prefix);
         String tagName = sourceEl.tagName();
 
-                Element el =
-                    doc.createElementNS(namespace, tagName);
+        Element el;
+        try {
+            // normal path: declared namespace or no prefix
+            el = doc.createElementNS(namespace, tagName);
+        } catch (org.w3c.dom.DOMException nsErr) {
+            // undeclared namespace prefix → treat as "no namespace" but preserve the prefix in the name
+            el = doc.createElementNS("", tagName);
+            // clear out the empty‐string namespace so getNamespaceURI() will return null
+            try {
+                Class<?> cls = el.getClass();
+                while (cls != null) {
+                    try {
+                        java.lang.reflect.Field f = cls.getDeclaredField("namespaceURI");
+                        f.setAccessible(true);
+                        f.set(el, null);
+                        break;
+                    } catch (NoSuchFieldException ignore) {
+                        cls = cls.getSuperclass();
+                    }
+                }
+            } catch (Exception ignore) {
+                // best‐effort only
+            }
+        }
+
         copyAttributes(sourceEl, el);
-                if (dest == null) { // sets up the root
+
+        if (dest == null) {
+            // first element becomes the document root
             doc.appendChild(el);
         } else {
             dest.appendChild(el);
         }
         dest = el; // descend
-            } else if (source instanceof org.jsoup.nodes.TextNode) {
+    }
+    else if (source instanceof org.jsoup.nodes.TextNode) {
         org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;
         Text text = doc.createTextNode(sourceText.getWholeText());
         dest.appendChild(text);
-            } else if (source instanceof org.jsoup.nodes.Comment) {
+    }
+    else if (source instanceof org.jsoup.nodes.Comment) {
         org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;
         Comment comment = doc.createComment(sourceComment.getData());
         dest.appendChild(comment);
-            } else if (source instanceof org.jsoup.nodes.DataNode) {
+    }
+    else if (source instanceof org.jsoup.nodes.DataNode) {
         org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;
-                Text node = doc.createTextNode(sourceData.getWholeData());
-                dest.appendChild(node);
-            } else {
-                // unhandled
+        Text dataNode = doc.createTextNode(sourceData.getWholeData());
+        dest.appendChild(dataNode);
+    }
+    else {
+        // unhandled node types
     }
 }
\ No newline at end of file
