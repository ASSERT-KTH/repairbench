diff --git a/tmp/8d03053e-4357-4bc9-a58c-ac51867d1eae_buggy.java b/tmp/4aa55080-051e-43e0-826d-7395c936b36c_fixed.java
index 98dde53..e44bd9f 100644
--- a/tmp/8d03053e-4357-4bc9-a58c-ac51867d1eae_buggy.java
+++ b/tmp/4aa55080-051e-43e0-826d-7395c936b36c_fixed.java
@@ -1,34 +1,53 @@
 public void head(org.jsoup.nodes.Node source, int depth) {
     namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack
     if (source instanceof org.jsoup.nodes.Element) {
         org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;
 
         String prefix = updateNamespaces(sourceEl);
         String namespace = namespacesStack.peek().get(prefix);
         String tagName = sourceEl.tagName();
 
-                Element el =
-                    doc.createElementNS(namespace, tagName);
+        org.w3c.dom.Element el;
+        // If there's a prefix but no namespace mapping, treat the prefix as part of the name
+        if (prefix != null && !prefix.isEmpty() && namespace == null) {
+            try {
+                // Use the internal ElementNSImpl constructor to bypass the QName check
+                Class<?> docClass = doc.getClass();
+                String pkg = docClass.getPackage().getName();
+                Class<?> elNSImpl = Class.forName(pkg + ".ElementNSImpl");
+                java.lang.reflect.Constructor<?> ctor =
+                    elNSImpl.getDeclaredConstructor(docClass, String.class, String.class);
+                ctor.setAccessible(true);
+                // Pass null for namespaceURI and the full qName as tagName
+                el = (org.w3c.dom.Element) ctor.newInstance(doc, null, tagName);
+            } catch (Exception e) {
+                // Fallback: normal creation (may still throw, but in standard JDK the reflection path works)
+                el = doc.createElementNS(null, tagName);
+            }
+        } else {
+            el = doc.createElementNS(namespace, tagName);
+        }
+
         copyAttributes(sourceEl, el);
         if (dest == null) { // sets up the root
             doc.appendChild(el);
         } else {
             dest.appendChild(el);
         }
         dest = el; // descend
     } else if (source instanceof org.jsoup.nodes.TextNode) {
         org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;
-                Text text = doc.createTextNode(sourceText.getWholeText());
+        org.w3c.dom.Text text = doc.createTextNode(sourceText.getWholeText());
         dest.appendChild(text);
     } else if (source instanceof org.jsoup.nodes.Comment) {
         org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;
-                Comment comment = doc.createComment(sourceComment.getData());
+        org.w3c.dom.Comment comment = doc.createComment(sourceComment.getData());
         dest.appendChild(comment);
     } else if (source instanceof org.jsoup.nodes.DataNode) {
         org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;
-                Text node = doc.createTextNode(sourceData.getWholeData());
+        org.w3c.dom.Text node = doc.createTextNode(sourceData.getWholeData());
         dest.appendChild(node);
     } else {
         // unhandled
     }
 }
\ No newline at end of file
