diff --git a/tmp/ab344d76-04f7-4486-8802-b8a260c911af_buggy.java b/tmp/38830d8c-3379-48c1-9ddc-745b4fe8188b_fixed.java
index e087f95..3ef2955 100644
--- a/tmp/ab344d76-04f7-4486-8802-b8a260c911af_buggy.java
+++ b/tmp/38830d8c-3379-48c1-9ddc-745b4fe8188b_fixed.java
@@ -1,53 +1,64 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    if (buffer == null) {
+        throw new IllegalArgumentException("Buffer is null");
+    }
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
+    if (offset < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset or length");
+    }
+    // Check for the special case: all NULs → missing field → 0
+    boolean allNulls = true;
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            allNulls = false;
             break;
         }
-
+    }
+    if (allNulls) {
+        return 0L;
+    }
+    int idx = offset;
+    final int end = offset + length;
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    while (idx < end && buffer[idx] == (byte) ' ') {
+        idx++;
     }
-                if (currentByte == (byte) ' ') {
+    long result = 0L;
+    boolean foundDigit = false;
+    // Parse octal digits until we hit a space or NUL
+    while (idx < end) {
+        byte b = buffer[idx];
+        if (b == 0 || b == (byte) ' ') {
             break;
         }
+        if (b < '0' || b > '7') {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, idx, b));
         }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+        foundDigit = true;
+        result = (result << 3) + (b - '0');
+        idx++;
+    }
+    if (!foundDigit) {
+        // No digits found before terminator
+        throw new IllegalArgumentException("No octal digits found");
+    }
+    if (idx >= end) {
+        // Ran out of buffer without finding a terminating space or NUL
+        throw new IllegalArgumentException("Missing trailing space or NUL");
+    }
+    // The first terminator must be a space or NUL
+    byte term = buffer[idx++];
+    if (term != 0 && term != (byte) ' ') {
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, idx - 1, term));
+    }
+    // Any remaining bytes must be spaces or NULs
+    while (idx < end) {
+        byte b = buffer[idx++];
+        if (b != 0 && b != (byte) ' ') {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, idx - 1, b));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
-
     return result;
 }
\ No newline at end of file
