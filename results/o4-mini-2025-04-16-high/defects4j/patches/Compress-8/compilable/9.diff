diff --git a/tmp/11629d96-5950-4a46-a99b-bfcf72990eb7_buggy.java b/tmp/058528ca-c439-4d3d-ae9a-c1b529fac588_fixed.java
index e087f95..34244f6 100644
--- a/tmp/11629d96-5950-4a46-a99b-bfcf72990eb7_buggy.java
+++ b/tmp/058528ca-c439-4d3d-ae9a-c1b529fac588_fixed.java
@@ -1,53 +1,63 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // Must have at least a digit and a terminator
+    if (length < 2) {
+        throw new IllegalArgumentException("Octal field length must be at least 2");
+    }
+    // Bounds check
+    if (offset < 0 || length < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset/length for parseOctal");
+    }
+
     long result = 0;
-        boolean stillPadding = true;
     int end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
+    int idx = offset;
 
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    while (idx < end && buffer[idx] == (byte) ' ') {
+        idx++;
     }
-                if (currentByte == (byte) ' ') {
+
+    boolean seenDigit = false;
+    // Parse octal digits until we hit NUL or space
+    while (idx < end) {
+        byte b = buffer[idx];
+        if (b == 0 || b == (byte) ' ') {
             break;
         }
+        if (b < (byte) '0' || b > (byte) '7') {
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, offset, b));
+        }
+        seenDigit = true;
+        result = (result << 3) + (b - (byte) '0');
+        idx++;
     }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+    // We must have stopped because of a terminator
+    if (idx >= end) {
+        throw new IllegalArgumentException("Missing trailing NUL or space in octal field");
+    }
+    // Skip the first terminator
+    idx++;
+    // Any remaining bytes must be NUL or space
+    while (idx < end) {
+        byte b = buffer[idx++];
+        if (b != 0 && b != (byte) ' ') {
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, offset, b));
+        }
+    }
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    // If we never saw any digit, only an all-NUL field is allowed
+    if (!seenDigit) {
+        for (int i = offset; i < end; i++) {
+            if (buffer[i] != 0) {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, offset, buffer[i]));
+            }
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        return 0L;
     }
 
     return result;
 }
\ No newline at end of file
