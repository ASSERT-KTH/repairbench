diff --git a/tmp/3914922c-aa8a-40fa-8676-c3210687e3a0_buggy.java b/tmp/f9e54518-d43e-4b19-9346-ad59cb0add5c_fixed.java
index e087f95..0caa5c8 100644
--- a/tmp/3914922c-aa8a-40fa-8676-c3210687e3a0_buggy.java
+++ b/tmp/f9e54518-d43e-4b19-9346-ad59cb0add5c_fixed.java
@@ -1,53 +1,58 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    // Must have at least one digit and one terminator
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
+    if (offset < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset/length");
+    }
     int end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    // If the entire field is NUL, that's allowed and means "missing field" â†’ 0
+    boolean allNulls = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNulls = false;
             break;
         }
+    }
+    if (allNulls) {
+        return 0L;
+    }
 
+    int idx = offset;
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    while (idx < end && buffer[idx] == (byte) ' ') {
+        idx++;
     }
-                if (currentByte == (byte) ' ') {
+
+    // Parse octal digits
+    long result = 0L;
+    int digitCount = 0;
+    while (idx < end) {
+        byte b = buffer[idx];
+        if (b < (byte) '0' || b > (byte) '7') {
             break;
         }
+        result = (result << 3) + (b - (byte) '0');
+        digitCount++;
+        idx++;
     }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    // Must have seen at least one octal digit
+    if (digitCount == 0) {
+        throw new IllegalArgumentException("Invalid octal value");
+    }
+    // Must have at least one trailing pad character
+    if (idx >= end) {
+        throw new IllegalArgumentException("Missing trailing space or NUL");
+    }
+    // The rest of the field must be only spaces or NULs
+    for (int i = idx; i < end; i++) {
+        byte b = buffer[i];
+        if (b != (byte) ' ' && b != (byte) 0) {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, i, b));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
-
     return result;
 }
\ No newline at end of file
