diff --git a/tmp/d589dbb6-04d6-4b75-85dc-46ad93853d54_buggy.java b/tmp/47c994e2-15e0-4458-a3b9-2cc3485792f5_fixed.java
index e087f95..6382040 100644
--- a/tmp/d589dbb6-04d6-4b75-85dc-46ad93853d54_buggy.java
+++ b/tmp/47c994e2-15e0-4458-a3b9-2cc3485792f5_fixed.java
@@ -1,53 +1,60 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    // Must have at least two bytes (one digit and one terminator)
+    if (length < 2) {
+        throw new IllegalArgumentException("Octal field length must be at least 2");
+    }
+    // Bounds check
+    if (offset < 0 || length < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset/length for parseOctal");
+    }
+    // If the entire field is NUL, interpret as zero
+    boolean allZeros = true;
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            allZeros = false;
+            break;
+        }
+    }
+    if (allZeros) {
+        return 0L;
+    }
+    long result = 0L;
+    boolean seenDigit = false;
     int end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    int i = offset;
+    // skip leading spaces
+    while (i < end && buffer[i] == ' ') {
+        i++;
+    }
+    // parse octal digits until a space or NUL
+    for (; i < end; i++) {
+        byte b = buffer[i];
+        if (b == 0 || b == ' ') {
+            // terminator found
             break;
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+        if (b < '0' || b > '7') {
+            // invalid byte in the middle of the number
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, offset, b));
+        }
+        seenDigit = true;
+        result = (result << 3) + (b - '0');
+    }
+    // must have seen at least one digit
+    if (!seenDigit) {
+        throw new IllegalArgumentException("No octal digits found");
+    }
+    // must have stopped because of a terminator, not by running off the end
+    if (i == end) {
+        throw new IllegalArgumentException("Missing space or NUL terminator");
+    }
+    // ensure that everything after the first terminator is only NUL or space
+    for (; i < end; i++) {
+        byte b = buffer[i];
+        if (b != 0 && b != ' ') {
+            throw new IllegalArgumentException("Invalid trailing character");
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
-
     return result;
 }
\ No newline at end of file
