diff --git a/tmp/1447fe41-c521-485e-952f-9c0cf60b6676_buggy.java b/tmp/82bbd041-8f37-4bd7-b87d-6ba2cff7b7c9_fixed.java
index e087f95..95c1456 100644
--- a/tmp/1447fe41-c521-485e-952f-9c0cf60b6676_buggy.java
+++ b/tmp/82bbd041-8f37-4bd7-b87d-6ba2cff7b7c9_fixed.java
@@ -1,53 +1,63 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    // Must have at least 2 bytes (one for digits and one for the trailing NUL/space)
+    if (length < 2 || offset < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid buffer length for octal parsing");
+    }
+    // Check for all NULs â€“ allowed; represents a missing field
+    boolean allNulls = true;
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            allNulls = false;
             break;
         }
+    }
+    if (allNulls) {
+        return 0L;
+    }
+
+    final int start = offset;
+    final int end = offset + length;
+    int idx = offset;
 
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+    while (idx < end && buffer[idx] == ' ') {
+        idx++;
     }
-                if (currentByte == (byte) ' ') {
+
+    long result = 0L;
+    boolean gotDigit = false;
+    boolean sawTerminator = false;
+
+    // Parse octal digits until we hit a NUL or space
+    while (idx < end) {
+        byte b = buffer[idx++];
+        if (b == 0 || b == ' ') {
+            sawTerminator = true;
             break;
         }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+        if (b < '0' || b > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, start, b));
+        }
+        gotDigit = true;
+        result = (result << 3) + (b - '0');
+    }
+
+    // Must have seen at least one digit and then a terminator
+    if (!gotDigit) {
+        throw new IllegalArgumentException("No octal digits found");
+    }
+    if (!sawTerminator) {
+        throw new IllegalArgumentException("Missing trailing space or NUL after octal digits");
+    }
+
+    // Any remaining bytes must be only spaces or NULs
+    for (int i = idx; i < end; i++) {
+        byte b = buffer[i];
+        if (b != 0 && b != ' ') {
+            throw new IllegalArgumentException("Invalid byte in octal padding");
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
