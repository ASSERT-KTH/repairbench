diff --git a/tmp/9cd75b7c-ffee-4876-b8cd-40800c65517c_buggy.java b/tmp/874fadf9-07cb-4050-9fc2-a686272d52c8_fixed.java
index e087f95..4e7209f 100644
--- a/tmp/9cd75b7c-ffee-4876-b8cd-40800c65517c_buggy.java
+++ b/tmp/874fadf9-07cb-4050-9fc2-a686272d52c8_fixed.java
@@ -1,53 +1,70 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    // length must be at least 2 bytes
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes long");
+    }
+    // bounds check
+    if (buffer == null || offset < 0 || length < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Buffer too small for parseOctal");
+    }
+    final int end = offset + length;
+    // if all bytes are NUL, that's allowed and returns 0
+    boolean allNulls = true;
+    for (int j = offset; j < end; j++) {
+        if (buffer[j] != 0) {
+            allNulls = false;
             break;
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
     }
-                if (currentByte == (byte) ' ') {
+    if (allNulls) {
+        return 0L;
+    }
+    int i = offset;
+    // skip leading spaces
+    while (i < end && buffer[i] == (byte) ' ') {
+        i++;
+    }
+    // parse octal digits until we hit a space or NUL
+    final int digitStart = i;
+    long result = 0L;
+    while (i < end) {
+        byte b = buffer[i];
+        if (b == (byte) ' ' || b == 0) {
             break;
         }
+        if (b < (byte) '0' || b > (byte) '7') {
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, i, b));
+        }
+        result = (result << 3) + (b - (byte) '0');
+        i++;
     }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    // must have seen at least one digit
+    if (i == digitStart) {
+        throw new IllegalArgumentException("No octal digits found");
+    }
+    // must have at least one terminator (space or NUL)
+    if (i >= end) {
+        throw new IllegalArgumentException("Missing octal terminator");
+    }
+    // consume first terminator
+    byte term = buffer[i++];
+    if (term != (byte) ' ' && term != 0) {
         throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            exceptionMessage(buffer, offset, length, i - 1, term));
+    }
+    // optionally consume a second terminator
+    if (i < end) {
+        term = buffer[i];
+        if (term == (byte) ' ' || term == 0) {
+            i++;
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
-
+    // any remaining non-pad bytes are invalid
+    if (i != end) {
+        byte b = buffer[i];
+        throw new IllegalArgumentException(
+            exceptionMessage(buffer, offset, length, i, b));
+    }
     return result;
 }
\ No newline at end of file
