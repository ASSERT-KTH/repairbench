diff --git a/tmp/c20114ba-0b92-485d-a19f-01a8decc833f_buggy.java b/tmp/839bacab-8ff0-473b-b123-7d95705f7ecc_fixed.java
index e087f95..5c8cef6 100644
--- a/tmp/c20114ba-0b92-485d-a19f-01a8decc833f_buggy.java
+++ b/tmp/839bacab-8ff0-473b-b123-7d95705f7ecc_fixed.java
@@ -1,53 +1,54 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    // Must have at least one digit and one trailer byte
+    if (length < 2 || offset < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset/length – must be at least 2 bytes");
+    }
     int end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    // Special case: all NULs → value 0
+    boolean allNulls = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNulls = false;
             break;
         }
+    }
+    if (allNulls) {
+        return 0L;
+    }
 
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
+    int idx = offset;
+    while (idx < end && buffer[idx] == (byte)' ') {
+        idx++;
     }
+    if (idx >= end) {
+        // Only spaces (and not all NULs) is invalid
+        throw new IllegalArgumentException("No octal digits found");
     }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+    // Parse octal digits
+    long result = 0L;
+    int startDigits = idx;
+    while (idx < end && buffer[idx] >= (byte)'0' && buffer[idx] <= (byte)'7') {
+        result = (result << 3) + (buffer[idx] - (byte)'0');
+        idx++;
+    }
+    if (idx == startDigits) {
+        // First non-space was not a valid octal digit
+        throw new IllegalArgumentException("Invalid octal digit at index " + idx);
+    }
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+    // Next byte must be a trailer: space or NUL
+    if (idx >= end || (buffer[idx] != (byte)' ' && buffer[idx] != 0)) {
+        throw new IllegalArgumentException("Missing or invalid trailer at index " + idx);
+    }
+    // Any remaining bytes in the field must also be space or NUL
+    for (int i = idx; i < end; i++) {
+        if (buffer[i] != (byte)' ' && buffer[i] != 0) {
+            throw new IllegalArgumentException("Invalid byte in trailer at index " + i);
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
