diff --git a/tmp/5a24b38d-c161-4c6a-96a2-64ade0c10027_buggy.java b/tmp/a53b80ef-77f1-46fb-86af-721d855e51a4_fixed.java
index e087f95..004f2c9 100644
--- a/tmp/5a24b38d-c161-4c6a-96a2-64ade0c10027_buggy.java
+++ b/tmp/a53b80ef-77f1-46fb-86af-721d855e51a4_fixed.java
@@ -1,53 +1,81 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing
+ *                                  or if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    // must have at least one digit + a trailer
+    if (length < 2) {
+        throw new IllegalArgumentException("Invalid length, must be at least 2");
+    }
+    // bounds check
+    if (offset < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Buffer overflow");
+    }
+    // if the entire field is NULs, that's allowed → value 0
+    boolean allNuls = true;
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+    long result = 0L;
+    boolean seenDigit = false;
     int end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+    int i = offset;
+    // parse until first space or NUL
+    for (; i < end; i++) {
+        byte b = buffer[i];
+        if (b == 0) {
+            // NUL terminator
             break;
         }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        if (b == ' ') {
+            if (!seenDigit) {
+                // skip leading spaces
                 continue;
-            }
-                if (currentByte == (byte) ' ') {
+            } else {
+                // space after digits → end of number
                 break;
             }
         }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
-        }
-
+        // must be octal digit
+        if (b < '0' || b > '7') {
+            throw new IllegalArgumentException("Invalid octal digit: " + b);
+        }
+        seenDigit = true;
+        result = (result << 3) + (b - '0');
+    }
+    // we must have consumed at least one digit
+    if (!seenDigit) {
+        throw new IllegalArgumentException("No octal digits found");
+    }
+    // we must have seen a terminator before running out
+    if (i >= end) {
+        throw new IllegalArgumentException("Missing trailing space or NUL");
+    }
+    // any bytes after the first terminator must be only space or NUL
+    for (int j = i; j < end; j++) {
+        byte b = buffer[j];
+        if (b != 0 && b != ' ') {
+            throw new IllegalArgumentException("Invalid trailing character: " + b);
+        }
+    }
     return result;
 }
\ No newline at end of file
