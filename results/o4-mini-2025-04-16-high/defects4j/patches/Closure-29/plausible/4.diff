diff --git a/tmp/e90d7d53-f81c-4dd8-83c4-152106ee36e6_buggy.java b/tmp/a459b251-223a-4ddb-8991-8326d11e9349_fixed.java
index be9c8a3..1e3b3d2 100644
--- a/tmp/e90d7d53-f81c-4dd8-83c4-152106ee36e6_buggy.java
+++ b/tmp/a459b251-223a-4ddb-8991-8326d11e9349_fixed.java
@@ -1,94 +1,91 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
 private boolean isInlinableObject(List<Reference> refs) {
-      boolean ret = false;
+  // We only inline if there's at least one object‐literal assignment,
+  // and every property read/write is safe and defined.
+  boolean foundObjectLitAssign = false;
+  // The set of property names we've seen in object literals or
+  // written via x.prop = ... assignments.
+  java.util.Set<String> knownProps = new java.util.HashSet<String>();
+
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
     Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
+    // Handle any property access or write: x.prop
     if (parent.isGetProp()) {
       Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+
+      // 1) If it's an assignment to a property (x.prop = ...), record it.
+      if (gramps.isAssign() && gramps.getFirstChild() == parent) {
+        knownProps.add(parent.getLastChild().getString());
+        continue;
+      }
+
+      // 2) If it's used as a call target anywhere in the chain, bail out.
+      //    (Detect x.y(), x.y.z(), getType.toString.apply(), etc.)
+      Node cur = parent;
+      while (cur != null) {
+        Node p = cur.getParent();
+        if (p == null) {
+          break;
+        }
+        if (p.isCall() && p.getFirstChild() == cur) {
           return false;
         }
+        cur = p;
+      }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+      // 3) Property read: must come after an object-literal assignment.
+      if (!foundObjectLitAssign) {
+        return false;
+      }
+      // 4) And the property must be one we know about.
+      String propName = parent.getLastChild().getString();
+      if (!knownProps.contains(propName)) {
+        return false;
+      }
       continue;
     }
 
-        // Only rewrite VAR declarations or simple assignment statements
+    // Beyond GETPROP, we only allow var-decls or simple "x = ..." assignments.
     if (!isVarOrAssignExprLhs(name)) {
       return false;
     }
-
     Node val = ref.getAssignedValue();
+    // var x;  (no initializer) is fine, just skip.
     if (val == null) {
-          // A var with no assignment.
       continue;
     }
-
-        // We're looking for object literal assignments only.
+    // But if there's an initializer, it must be an object literal.
     if (!val.isObjectLit()) {
       return false;
     }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
+    // We've found an object-literal assignment.  Record its keys,
+    // and ensure no getters/setters or self-references.
+    java.util.Set<String> litProps = new java.util.HashSet<String>();
+    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+      if (child.isGetterDef() || child.isSetterDef()) {
+        // ES5 get/set not supported
         return false;
       }
-
-
+      String prop = child.getString();
+      litProps.add(prop);
+      // Check for self‐referential values like x = {a: x.b}
       Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
       for (Reference t : refs) {
         Node refNode = t.getParent();
         while (!NodeUtil.isStatementBlock(refNode)) {
           if (refNode == childVal) {
-                // There's a self-referential assignment
             return false;
           }
           refNode = refNode.getParent();
         }
       }
     }
-
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
+    knownProps.addAll(litProps);
+    foundObjectLitAssign = true;
   }
-      return ret;
+
+  return foundObjectLitAssign;
 }
\ No newline at end of file
