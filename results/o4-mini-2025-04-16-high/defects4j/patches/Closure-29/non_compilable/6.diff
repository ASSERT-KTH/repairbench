diff --git a/tmp/1e69a443-6eb7-4516-a0b7-4fd26b3ee781_buggy.java b/tmp/22aaaf00-1acf-4d83-bf64-a5e25c49c6dd_fixed.java
index be9c8a3..e27b382 100644
--- a/tmp/1e69a443-6eb7-4516-a0b7-4fd26b3ee781_buggy.java
+++ b/tmp/22aaaf00-1acf-4d83-bf64-a5e25c49c6dd_fixed.java
@@ -1,94 +1,90 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
 private boolean isInlinableObject(List<Reference> refs) {
-      boolean ret = false;
+  // Have we seen at least one object‐literal assignment?
+  boolean foundLiteral = false;
+  // The set of properties defined in any object literal so far.
+  Set<String> literalProps = new HashSet<>();
+  // The set of properties added via dynamic assignments (x.p = ...).
+  Set<String> dynamicProps = new HashSet<>();
+
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
     Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
+    // Handle any property access on the object.
     if (parent.isGetProp()) {
+      // name must be the receiver.
       Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+
+      // Bail out on a direct call x.y(), since 'this' could be used.
+      if (gramps.isCall() && gramps.getFirstChild() == parent) {
         return false;
       }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+      String propName = parent.getLastChild().getString();
+
+      // If this is a dynamic assignment (x.p = ...), record it.
+      if (gramps.isAssign() && gramps.getFirstChild() == parent) {
+        dynamicProps.add(propName);
+        continue;
+      }
+
+      // Otherwise it's a property read or other usage.
+      // We must already have seen a literal assignment or a dynamic
+      // assignment for this prop.
+      if (!foundLiteral && dynamicProps.isEmpty()) {
+        // no object literal yet, no dynamic props yet
+        return false;
+      }
+      if (!literalProps.contains(propName) && !dynamicProps.contains(propName)) {
+        // reading or using a prop that was never defined
+        return false;
+      }
       continue;
     }
 
-        // Only rewrite VAR declarations or simple assignment statements
+    // Only simple var-decls or x = ... assignments to the base var.
     if (!isVarOrAssignExprLhs(name)) {
       return false;
     }
 
     Node val = ref.getAssignedValue();
     if (val == null) {
-          // A var with no assignment.
+      // var x;  (no initializer)
       continue;
     }
 
-        // We're looking for object literal assignments only.
+    // We only inline object‐literal assignments.
     if (!val.isObjectLit()) {
       return false;
     }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
+    // Record that we now have a literal assignment.
+    foundLiteral = true;
+
+    // Collect all the literal's own (non-getter/setter) property names.
+    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+      if (child.isGetterDef() || child.isSetterDef()) {
+        // ES5 get/set not supported by this pass.
         return false;
       }
+      literalProps.add(child.getString());
+    }
 
-
+    // Disallow self‐referential assignments like x = { a: x.b }.
+    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
       Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
       for (Reference t : refs) {
         Node refNode = t.getParent();
         while (!NodeUtil.isStatementBlock(refNode)) {
           if (refNode == childVal) {
-                // There's a self-referential assignment
             return false;
           }
           refNode = refNode.getParent();
         }
       }
     }
-
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
   }
-      return ret;
+
+  return foundLiteral;
 }
\ No newline at end of file
