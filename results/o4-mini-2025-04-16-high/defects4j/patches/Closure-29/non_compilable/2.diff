diff --git a/tmp/7f0f8d93-72c7-4b3a-b027-67ae0e935693_buggy.java b/tmp/dc55206a-e327-43e2-a83b-6adca8802cf4_fixed.java
index be9c8a3..fb10578 100644
--- a/tmp/7f0f8d93-72c7-4b3a-b027-67ae0e935693_buggy.java
+++ b/tmp/dc55206a-e327-43e2-a83b-6adca8802cf4_fixed.java
@@ -1,94 +1,88 @@
 /**
  * Counts the number of direct (full) references to an object.
  * Specifically we check for references of the following type:
  * <pre>
  *   x;
  *   x.fn();
  * </pre>
  */
 private boolean isInlinableObject(List<Reference> refs) {
   boolean ret = false;
+  // Keep track of all known property names (from object‐literals and
+  // from property assignments like x.foo = ...).
+  Set<String> props = new HashSet<>();
+
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
     Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
+    // Handle any x.y or x.y = ... forms
     if (parent.isGetProp()) {
       Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+
+      // Detect a call on a property chain (e.g. x.y(), x.y.z(), x.y.apply(...))
+      // by walking up any getProp nodes, then seeing if the next ancestor
+      // is a CALL whose target is that final getProp.
+      Node chain = parent;
+      Node up = gramps;
+      while (up != null && up.isGetProp()) {
+        chain = up;
+        up = up.getParent();
+      }
+      if (up != null && up.isCall() && up.getFirstChild() == chain) {
+        // we can't inline if the property is used as a call target
         return false;
       }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+      String key = parent.getLastChild().getString();
+      // If this is a property assignment (x.key = ...), record the key
+      if (gramps.isAssign() && gramps.getFirstChild() == parent) {
+        props.add(key);
+        continue;
+      }
+      // Otherwise it's a read of x.key – bail out if we've never seen it
+      // in an object literal or a prior x.key = ... assignment.
+      if (!props.contains(key)) {
+        return false;
+      }
       continue;
     }
 
-        // Only rewrite VAR declarations or simple assignment statements
+    // At this point we must be looking at either a VAR or a simple 'x = ...'
     if (!isVarOrAssignExprLhs(name)) {
       return false;
     }
-
     Node val = ref.getAssignedValue();
     if (val == null) {
-          // A var with no assignment.
+      // "var x;" with no initializer – that's fine
       continue;
     }
-
-        // We're looking for object literal assignments only.
+    // We only handle object‐literal initializers.
     if (!val.isObjectLit()) {
       return false;
     }
-
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
+    // Reject ES5 getters/setters and any self‐referential fields.
+    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+      if (child.isGetterDef() || child.isSetterDef()) {
         return false;
       }
-
-
       Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
       for (Reference t : refs) {
         Node refNode = t.getParent();
         while (!NodeUtil.isStatementBlock(refNode)) {
           if (refNode == childVal) {
-                // There's a self-referential assignment
             return false;
           }
           refNode = refNode.getParent();
         }
       }
     }
-
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
+    // Record all of the keys in this object literal.
+    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+      props.add(child.getString());
+    }
     ret = true;
   }
   return ret;
 }
\ No newline at end of file
