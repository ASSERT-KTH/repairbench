diff --git a/tmp/1557194f-7a08-4c39-b604-d3ac96c310e7_buggy.java b/tmp/044c3575-bde1-4469-95d5-da4086d61c4c_fixed.java
index be9c8a3..8c02754 100644
--- a/tmp/1557194f-7a08-4c39-b604-d3ac96c310e7_buggy.java
+++ b/tmp/044c3575-bde1-4469-95d5-da4086d61c4c_fixed.java
@@ -1,94 +1,86 @@
 /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
+ * Counts the number of direct (full) references to an object
+ * and decides whether it’s safe to inline it.  We keep track of
+ * which properties have been defined (via object‐literal
+ * assignments or via explicit “x.prop = …” statements), bail
+ * out on any unknown‐prop read or on any method‐call use of a
+ * property (x.m(), to preserve this), and make sure we saw at
+ * least one object‐literal assignment.
  */
 private boolean isInlinableObject(List<Reference> refs) {
-      boolean ret = false;
+  // The set of properties we've seen defined so far.
+  Set<String> definedProps = new HashSet<>();
+  // Did we see at least one object‐literal assignment?
+  boolean sawObjectLiteral = false;
+
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
-        Node gramps = ref.getGrandparent();
+    Node gramps = parent.getParent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
+    // 1) PROPERTY READ OR METHOD CALL
     if (parent.isGetProp()) {
-          Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+      // Bail on method calls (x.m()) to preserve 'this'
+      if (gramps.isCall() && gramps.getFirstChild() == parent) {
+        return false;
+      }
+      // Otherwise it's a property read: must have been defined
+      String propName = parent.getLastChild().getString();
+      if (!definedProps.contains(propName)) {
         return false;
       }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
       continue;
     }
 
-        // Only rewrite VAR declarations or simple assignment statements
+    // 2) MUST BE a VAR or simple ASSIGN LHS
     if (!isVarOrAssignExprLhs(name)) {
       return false;
     }
 
     Node val = ref.getAssignedValue();
+    // e.g. "var x;" with no initializer
     if (val == null) {
-          // A var with no assignment.
       continue;
     }
 
-        // We're looking for object literal assignments only.
-        if (!val.isObjectLit()) {
+    // 3) OBJECT‐LITERAL ASSIGNMENT: collect its keys
+    if (val.isObjectLit()) {
+      sawObjectLiteral = true;
+      for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+        if (child.isGetterDef() || child.isSetterDef()) {
+          // ES5 getters/setters not supported
           return false;
         }
+        String key = child.getString();
+        definedProps.add(key);
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
-            return false;
-          }
-
-
+        // Make sure we don't have self‐references like x = {a: x.b}
         Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
-          for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
-                // There's a self-referential assignment
+        for (Reference r2 : refs) {
+          Node scan = r2.getParent();
+          while (!NodeUtil.isStatementBlock(scan)) {
+            if (scan == childVal) {
               return false;
             }
-              refNode = refNode.getParent();
+            scan = scan.getParent();
           }
         }
       }
+      continue;
+    }
 
+    // 4) EXPLICIT PROPERTY ASSIGNMENT, e.g. x.c = c
+    //    We accept it and record the new prop.
+    if (name.isGetProp()) {
+      String key = name.getLastChild().getString();
+      definedProps.add(key);
+      continue;
+    }
 
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
+    // Any other kind of assignment (x = non‐object) is not inlineable
+    return false;
   }
-      return ret;
+
+  // We only inline if we saw at least one object‐literal assignment
+  return sawObjectLiteral;
 }
\ No newline at end of file
