diff --git a/tmp/d0376ada-6e4f-4c3c-8647-a396a6a78704_buggy.java b/tmp/1cdef973-015f-4475-9323-a6baf68ffd1d_fixed.java
index be9c8a3..c0686ae 100644
--- a/tmp/d0376ada-6e4f-4c3c-8647-a396a6a78704_buggy.java
+++ b/tmp/1cdef973-015f-4475-9323-a6baf68ffd1d_fixed.java
@@ -1,94 +1,92 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
 private boolean isInlinableObject(List<Reference> refs) {
+  boolean sawLiteralAssign = false;
   boolean ret = false;
+  // Track all property names we've ever defined (via literal or assignment).
+  Set<String> definedProps = new HashSet<>();
+
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
     Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
     if (parent.isGetProp()) {
+      // We're seeing x.foo or x.foo() or x.foo.bar...
       Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+
+      // Bail out if any part of this property chain is being called,
+      // since that may bind 'this' to the original object.
+      Node current = parent;
+      while (true) {
+        Node p = current.getParent();
+        if (p == null) {
+          break;
+        }
+        if (p.isCall() && p.getFirstChild() == current) {
+          return false;
+        }
+        if (!p.isGetProp()) {
+          break;
+        }
+        current = p;
+      }
+
+      // Can't use any property before we've seen an object‐literal assignment
+      if (!sawLiteralAssign) {
         return false;
       }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+      String propName = parent.getLastChild().getString();
+      // If this is a set (x.prop = ...), record it. Otherwise it's a get.
+      if (gramps.isAssign() && gramps.getFirstChild() == parent) {
+        definedProps.add(propName);
+      } else {
+        if (!definedProps.contains(propName)) {
+          return false;
+        }
+      }
       continue;
     }
 
-        // Only rewrite VAR declarations or simple assignment statements
+    // Anything that's not a property access must be a VAR or simple LHS-assign of the object itself.
     if (!isVarOrAssignExprLhs(name)) {
       return false;
     }
 
     Node val = ref.getAssignedValue();
+    // A bare "var x;" is fine.
     if (val == null) {
-          // A var with no assignment.
       continue;
     }
-
-        // We're looking for object literal assignments only.
+    // We only inline object literals.
     if (!val.isObjectLit()) {
       return false;
     }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
+    // Check for self‐referential values in the literal.
+    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+      if (child.isGetterDef() || child.isSetterDef()) {
         return false;
       }
-
-
       Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
       for (Reference t : refs) {
         Node refNode = t.getParent();
         while (!NodeUtil.isStatementBlock(refNode)) {
           if (refNode == childVal) {
-                // There's a self-referential assignment
             return false;
           }
           refNode = refNode.getParent();
         }
       }
     }
 
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
+    // We've found a safe object‐literal assignment.
+    sawLiteralAssign = true;
     ret = true;
+    // Add all of its properties to our set.
+    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+      definedProps.add(child.getString());
     }
+  }
+
   return ret;
 }
\ No newline at end of file
