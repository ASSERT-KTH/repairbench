diff --git a/tmp/9725a2c4-4292-4293-a94b-0f0bb8ddad61_buggy.java b/tmp/daabd48f-d05c-4ad9-82a2-656e78db48d8_fixed.java
index 7e64f1d..9ee81d3 100644
--- a/tmp/9725a2c4-4292-4293-a94b-0f0bb8ddad61_buggy.java
+++ b/tmp/daabd48f-d05c-4ad9-82a2-656e78db48d8_fixed.java
@@ -1,78 +1,77 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
     List tokens = new ArrayList();
-
     boolean eatTheRest = false;
 
-        for (int i = 0; i < arguments.length; i++)
-        {
+    for (int i = 0; i < arguments.length; i++) {
         String arg = arguments[i];
 
-            if ("--".equals(arg))
-            {
+        if ("--".equals(arg)) {
             eatTheRest = true;
-                tokens.add("--");
+            tokens.add(arg);
         }
-            else if ("-".equals(arg))
-            {
-                tokens.add("-");
+        else if ("-".equals(arg)) {
+            tokens.add(arg);
         }
-            else if (arg.startsWith("-"))
-            {
-                String opt = Util.stripLeadingHyphens(arg);
+        else if (arg.startsWith("-")) {
+            // split option and value on '=' if present
+            int eqIndex = arg.indexOf('=');
+            if (eqIndex > 0) {
+                String optPart = arg.substring(0, eqIndex);
+                String optName = Util.stripLeadingHyphens(optPart);
+                String optValue = arg.substring(eqIndex + 1);
 
-                if (options.hasOption(opt))
-                {
+                if (options.hasOption(optName)) {
+                    // --foo=bar or -f=bar or -foo=bar
+                    tokens.add(optPart);
+                    tokens.add(optValue);
+                } else {
+                    // special single-character option, e.g. -Dproperty=value
+                    String shortOptPart = arg.substring(0, 2);
+                    String shortOptName = Util.stripLeadingHyphens(shortOptPart);
+                    if (options.hasOption(shortOptName)) {
+                        tokens.add(shortOptPart);
+                        tokens.add(arg.substring(2));
+                    } else {
+                        eatTheRest = stopAtNonOption;
+                        tokens.add(arg);
+                    }
+                }
+            }
+            else {
+                // no '=' in the token
+                String optName = Util.stripLeadingHyphens(arg);
+                if (options.hasOption(optName)) {
+                    tokens.add(arg);
+                } else {
+                    // possible single-character option with trailing data, e.g. -Dproperty
+                    if (arg.length() > 2) {
+                        String shortOptPart = arg.substring(0, 2);
+                        String shortOptName = Util.stripLeadingHyphens(shortOptPart);
+                        if (options.hasOption(shortOptName)) {
+                            tokens.add(shortOptPart);
+                            tokens.add(arg.substring(2));
+                        } else {
+                            eatTheRest = stopAtNonOption;
                             tokens.add(arg);
                         }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
-                    }
-                    else
-                    {
+                    } else {
                         eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
                 }
             }
-            else
-            {
+        }
+        else {
             tokens.add(arg);
         }
 
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
+        if (eatTheRest) {
+            for (i = i + 1; i < arguments.length; i++) {
                 tokens.add(arguments[i]);
             }
+            break;
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
