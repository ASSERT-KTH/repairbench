diff --git a/tmp/91087d0d-e7bb-41a5-ba60-fae63da547f1_buggy.java b/tmp/f1263e7b-d25e-48ae-be1a-5fb165ed2b18_fixed.java
index 7e64f1d..dac2da4 100644
--- a/tmp/91087d0d-e7bb-41a5-ba60-fae63da547f1_buggy.java
+++ b/tmp/f1263e7b-d25e-48ae-be1a-5fb165ed2b18_fixed.java
@@ -1,78 +1,79 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
     List tokens = new ArrayList();
-
     boolean eatTheRest = false;
 
-        for (int i = 0; i < arguments.length; i++)
-        {
+    for (int i = 0; i < arguments.length; i++) {
         String arg = arguments[i];
 
-            if ("--".equals(arg))
-            {
+        // end of options marker
+        if ("--".equals(arg)) {
             eatTheRest = true;
-                tokens.add("--");
-            }
-            else if ("-".equals(arg))
-            {
-                tokens.add("-");
-            }
-            else if (arg.startsWith("-"))
-            {
-                String opt = Util.stripLeadingHyphens(arg);
+            tokens.add(arg);
 
-                if (options.hasOption(opt))
-                {
+        // single dash as argument
+        } else if ("-".equals(arg)) {
             tokens.add(arg);
+
+        // potential option
+        } else if (arg.startsWith("-")) {
+            // 1) handle inline equals: -f=bar, --foo=bar, -foo=bar
+            int eqPos = arg.indexOf('=');
+            if (eqPos > 0) {
+                String name    = arg.substring(0, eqPos);
+                String value   = arg.substring(eqPos + 1);
+                String optName = Util.stripLeadingHyphens(name);
+
+                if (options.hasOption(optName)) {
+                    // normalize long vs. short prefix
+                    String optionKey;
+                    if (name.startsWith("--")) {
+                        optionKey = name;
+                    } else if (name.startsWith("-") && optName.length() > 1) {
+                        // single-dash long option
+                        optionKey = "--" + optName;
+                    } else {
+                        // single-letter short option
+                        optionKey = name;
                     }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                    tokens.add(optionKey);
+                    tokens.add(value);
+                    // skip the rest of this loop; we've already consumed arg
+                    continue;
                 }
-                    else
-                    {
-                        eatTheRest = stopAtNonOption;
-                        tokens.add(arg);
             }
+
+            // 2) no inline '=', check if this is a known option
+            String stripped = Util.stripLeadingHyphens(arg);
+            if (options.hasOption(stripped)) {
+                // recognized option, leave as is
+                tokens.add(arg);
+
+            // 3) special single-letter option with attached value, e.g. -Dfoo or -fbar
+            } else if (arg.length() > 2 && options.hasOption(String.valueOf(arg.charAt(1)))) {
+                tokens.add(arg.substring(0, 2));  // e.g. "-D" or "-f"
+                tokens.add(arg.substring(2));     // the rest as argument
+
+            // 4) not an option
+            } else {
+                tokens.add(arg);
+                if (stopAtNonOption) {
+                    eatTheRest = true;
                 }
             }
-            else
-            {
+
+        // plain argument
+        } else {
             tokens.add(arg);
         }
 
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
+        // if we've hit a non-option and we're supposed to stop,
+        // absorb all remaining tokens as arguments
+        if (eatTheRest) {
+            for (i++; i < arguments.length; i++) {
                 tokens.add(arguments[i]);
             }
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
