diff --git a/tmp/4e06c138-b7b8-4150-983c-c0fc9e92a121_buggy.java b/tmp/4e13a351-8797-4dd3-b6c4-4b2bd4619776_fixed.java
index 7e64f1d..33270dc 100644
--- a/tmp/4e06c138-b7b8-4150-983c-c0fc9e92a121_buggy.java
+++ b/tmp/4e13a351-8797-4dd3-b6c4-4b2bd4619776_fixed.java
@@ -1,78 +1,62 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
-        List tokens = new ArrayList();
-
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
+    List<String> tokens = new ArrayList<String>();
     boolean eatTheRest = false;
 
-        for (int i = 0; i < arguments.length; i++)
-        {
+    for (int i = 0; i < arguments.length; i++) {
         String arg = arguments[i];
 
-            if ("--".equals(arg))
-            {
+        if ("--".equals(arg)) {
             eatTheRest = true;
             tokens.add("--");
         }
-            else if ("-".equals(arg))
-            {
+        else if ("-".equals(arg)) {
             tokens.add("-");
         }
-            else if (arg.startsWith("-"))
-            {
-                String opt = Util.stripLeadingHyphens(arg);
+        else if (arg.startsWith("-")) {
+            int hyphens = arg.startsWith("--") ? 2 : 1;
+            int indexEq = arg.indexOf('=');
 
-                if (options.hasOption(opt))
-                {
+            // handle --foo=bar or -foo=bar or -f=bar when foo/f is a known option
+            if (indexEq > hyphens) {
+                String optName = arg.substring(hyphens, indexEq);
+                if (options.hasOption(optName)) {
+                    tokens.add(arg.substring(0, indexEq));
+                    tokens.add(arg.substring(indexEq + 1));
+                    continue;
+                }
+            }
+
+            // no matching --opt=val or -opt=val, fall back to other rules
+            String optNameFull = arg.substring(hyphens);
+            if (options.hasOption(optNameFull)) {
+                // exact match of long or single-dash long
                 tokens.add(arg);
             }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+            else if (hyphens == 1 && optNameFull.length() > 0
+                     && options.hasOption(optNameFull.substring(0, 1))) {
+                // single-char option with the rest as its argument
+                tokens.add(arg.substring(0, 2));
+                if (arg.length() > 2) {
+                    tokens.add(arg.substring(2));
                 }
-                    else
-                    {
+            }
+            else {
+                // not an option, or stopAtNonOption forces remaining as args
                 eatTheRest = stopAtNonOption;
                 tokens.add(arg);
             }
         }
-            }
-            else
-            {
+        else {
             tokens.add(arg);
         }
 
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
+        if (eatTheRest) {
+            // add all remaining arguments as-is
+            for (i = i + 1; i < arguments.length; i++) {
                 tokens.add(arguments[i]);
             }
         }
     }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
