diff --git a/tmp/91a55d7e-4a9a-4760-a1fc-05eb2e92ade8_buggy.java b/tmp/2d4f13df-8b1d-41e0-8fca-88c44cf0a8ee_fixed.java
index 7e64f1d..dd970ea 100644
--- a/tmp/91a55d7e-4a9a-4760-a1fc-05eb2e92ade8_buggy.java
+++ b/tmp/2d4f13df-8b1d-41e0-8fca-88c44cf0a8ee_fixed.java
@@ -1,78 +1,84 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
     List tokens = new ArrayList();
-
     boolean eatTheRest = false;
 
-        for (int i = 0; i < arguments.length; i++)
-        {
+    for (int i = 0; i < arguments.length; i++) {
         String arg = arguments[i];
 
-            if ("--".equals(arg))
-            {
+        if ("--".equals(arg)) {
             eatTheRest = true;
             tokens.add("--");
         }
-            else if ("-".equals(arg))
-            {
+        else if ("-".equals(arg)) {
             tokens.add("-");
         }
-            else if (arg.startsWith("-"))
-            {
+        else if (arg.startsWith("-")) {
+            // special "-Dproperty=value" handling
+            if (arg.startsWith("-D") && arg.length() > 2 && options.hasOption("D")) {
+                tokens.add("-D");
+                tokens.add(arg.substring(2));
+            }
+            else {
+                int eqIndex = arg.indexOf('=');
+                if (eqIndex > 0) {
+                    String name = arg.substring(0, eqIndex);
+                    String value = arg.substring(eqIndex + 1);
+
+                    if (name.startsWith("--")) {
+                        // long option with "--foo=bar"
+                        String opt = Util.stripLeadingHyphens(name);
+                        if (options.hasOption(opt)) {
+                            tokens.add(name);
+                            tokens.add(value);
+                        } else {
+                            tokens.add(arg);
+                        }
+                    }
+                    else {
+                        // single-dash form, could be short "-f=bar" or single-dash long "-foo=bar"
+                        String opt = name.substring(1);
+                        if (opt.length() == 1) {
+                            // short option
+                            if (options.hasOption(opt)) {
+                                tokens.add("-" + opt);
+                                tokens.add(value);
+                            } else {
+                                tokens.add(arg);
+                            }
+                        }
+                        else {
+                            // single-dash long option
+                            if (options.hasOption(opt)) {
+                                tokens.add("--" + opt);
+                                tokens.add(value);
+                            } else {
+                                tokens.add(arg);
+                            }
+                        }
+                    }
+                }
+                else {
+                    // no "=" in arg, just pass through or stop
                     String opt = Util.stripLeadingHyphens(arg);
-
-                if (options.hasOption(opt))
-                {
+                    if (options.hasOption(opt)) {
                         tokens.add(arg);
-                }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
-                    }
-                    else
-                    {
+                    } else {
                         eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
                 }
             }
-            else
-            {
+        }
+        else {
             tokens.add(arg);
         }
 
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
+        if (eatTheRest) {
+            for (i++; i < arguments.length; i++) {
                 tokens.add(arguments[i]);
             }
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
