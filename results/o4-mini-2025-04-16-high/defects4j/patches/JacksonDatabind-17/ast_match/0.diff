diff --git a/tmp/cc82d1ff-4ce4-472c-ba42-59c4c9f7bc33_buggy.java b/tmp/ee9a6cea-2696-4ebb-af9a-cd88a24bbb02_fixed.java
index 01967cc..bf68afe 100644
--- a/tmp/cc82d1ff-4ce4-472c-ba42-59c4c9f7bc33_buggy.java
+++ b/tmp/ee9a6cea-2696-4ebb-af9a-cd88a24bbb02_fixed.java
@@ -1,35 +1,27 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
-        public boolean useForType(JavaType t)
-        {
+public boolean useForType(JavaType t) {
     switch (_appliesFor) {
     case NON_CONCRETE_AND_ARRAYS:
+        // for array types, inspect the element type
         while (t.isArrayType()) {
             t = t.getContentType();
         }
-                // fall through
+        // fall through to OBJECT_AND_NON_CONCRETE
     case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
+        // Should not apply to JSON tree models:
         return (t.getRawClass() == Object.class)
             || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
-
+                && !TreeNode.class.isAssignableFrom(t.getRawClass()));
     case NON_FINAL:
+        // for array types, inspect the element type
         while (t.isArrayType()) {
             t = t.getContentType();
         }
-                // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+        // Should not apply to JSON tree models:
+        return !t.isFinal()
+            && !TreeNode.class.isAssignableFrom(t.getRawClass());
     default:
         // case JAVA_LANG_OBJECT:
         //    return t.isJavaLangObject();
         return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
