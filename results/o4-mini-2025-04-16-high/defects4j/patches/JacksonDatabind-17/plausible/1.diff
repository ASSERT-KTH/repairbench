diff --git a/tmp/b9de0513-ccb3-4f6b-a7e4-0d4f0d3e5914_buggy.java b/tmp/fb7031d7-b916-4c77-9135-f0c02eb6acf8_fixed.java
index 01967cc..76ef0c6 100644
--- a/tmp/b9de0513-ccb3-4f6b-a7e4-0d4f0d3e5914_buggy.java
+++ b/tmp/fb7031d7-b916-4c77-9135-f0c02eb6acf8_fixed.java
@@ -1,35 +1,28 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
-        public boolean useForType(JavaType t)
-        {
+public boolean useForType(JavaType t) {
     switch (_appliesFor) {
         case NON_CONCRETE_AND_ARRAYS:
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
             // fall through
         case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
+            // never apply default‐typing to JSON tree models:
+            if (TreeNode.class.isAssignableFrom(t.getRawClass())) {
+                return false;
+            }
+            // apply for plain Object, or any non‐concrete type
             return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                    || !t.isConcrete();
 
         case NON_FINAL:
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
-                // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
-            default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
-                return (t.getRawClass() == Object.class);
+            // don't apply to tree models either
+            return !t.isFinal()
+                    && !TreeNode.class.isAssignableFrom(t.getRawClass());
+
+        default: // JAVA_LANG_OBJECT
+            return t.getRawClass() == Object.class;
     }
 }
\ No newline at end of file
