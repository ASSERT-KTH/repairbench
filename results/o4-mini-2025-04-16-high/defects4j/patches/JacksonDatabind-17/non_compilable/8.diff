diff --git a/tmp/5efec67a-1297-4fcf-a053-df2b29f54077_buggy.java b/tmp/0f6b0cc3-afe3-4abc-8a7c-adf64fbea166_fixed.java
index 01967cc..a806f63 100644
--- a/tmp/5efec67a-1297-4fcf-a053-df2b29f54077_buggy.java
+++ b/tmp/0f6b0cc3-afe3-4abc-8a7c-adf64fbea166_fixed.java
@@ -1,35 +1,30 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
-        public boolean useForType(JavaType t)
-        {
+@Override
+public boolean useForType(JavaType t) {
     switch (_appliesFor) {
     case NON_CONCRETE_AND_ARRAYS:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
         // fall through
     case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
+        // always include Object
+        if (t.getRawClass() == Object.class) {
+            return true;
+        }
         // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+        if (TreeNode.class.isAssignableFrom(t.getRawClass())) {
+            return false;
+        }
+        return !t.isConcrete();
 
     case NON_FINAL:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
         // [Issue#88] Should not apply to JSON tree models:
         return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
-            default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
+
+    default: // JAVA_LANG_OBJECT
         return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
