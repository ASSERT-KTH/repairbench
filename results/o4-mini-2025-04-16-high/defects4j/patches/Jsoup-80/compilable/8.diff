diff --git a/tmp/8526481b-f647-4101-ab47-e83e2ccc85bd_buggy.java b/tmp/ce9c69bb-da77-4fb0-a1e8-20361dcaf4c9_fixed.java
index cbfa753..4bce67b 100644
--- a/tmp/8526481b-f647-4101-ab47-e83e2ccc85bd_buggy.java
+++ b/tmp/ce9c69bb-da77-4fb0-a1e8-20361dcaf4c9_fixed.java
@@ -1,15 +1,51 @@
 void insert(Token.Comment commentToken) {
+    // Create a normal comment node by default
     Comment comment = new Comment(commentToken.getData());
     Node insert = comment;
-        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)
-            // so we do a bit of a hack and parse the data as an element to pull the attributes out
-            String data = comment.getData();
-            if (data.length() > 1 && (data.startsWith("!") || data.startsWith("?"))) {
-                Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri, Parser.xmlParser());
+
+    if (commentToken.bogus) {
+        // In XML mode, <?…?> and <!…> declarations come through as bogus comments.
+        // We detect XML declarations (<?xml …?>) and DOCTYPEs (<!DOCTYPE …>) here,
+        // re-parse them as a dummy element to pull out the tag name and attributes,
+        // then build a proper XmlDeclaration node.
+        String data = commentToken.getData();
+
+        // 1) XML declaration: starts with "xml" (case-insensitive)
+        if (data.toLowerCase().startsWith("xml")) {
+            // strip a trailing '?' if present (data may be "xml version='1.0'?")
+            String decl = data.endsWith("?")
+                ? data.substring(0, data.length() - 1)
+                : data;
+            // re-parse as a one-off element
+            Document doc = Jsoup.parse("<" + decl + ">", baseUri, Parser.xmlParser());
+            if (doc.childNodeSize() > 0) {
                 Element el = doc.child(0);
-                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith("!"));
-                    insert.attributes().addAll(el.attributes());
+                XmlDeclaration xd = new XmlDeclaration(
+                    settings.normalizeTag(el.tagName()),  // name (xml)
+                    true                                  // is processing instruction
+                );
+                xd.attributes().addAll(el.attributes());
+                insert = xd;
             }
         }
+        // 2) DOCTYPE or other "!" declarations: starts with "!"
+        else if (data.startsWith("!") && data.length() > 1) {
+            // strip leading '!' and optional trailing '?'
+            String decl = data;
+            if (decl.endsWith("?")) decl = decl.substring(0, decl.length() - 1);
+            decl = decl.substring(1);
+            Document doc = Jsoup.parse("<" + decl + ">", baseUri, Parser.xmlParser());
+            if (doc.childNodeSize() > 0) {
+                Element el = doc.child(0);
+                XmlDeclaration xd = new XmlDeclaration(
+                    settings.normalizeTag(el.tagName()),  // e.g. "DOCTYPE"
+                    false                                 // not a processing instruction
+                );
+                xd.attributes().addAll(el.attributes());
+                insert = xd;
+            }
+        }
+    }
+
     insertNode(insert);
 }
\ No newline at end of file
