diff --git a/tmp/8a837ab8-9ac4-47c6-af0c-0ab4e9ed7410_buggy.java b/tmp/e51a056b-fca7-4c1c-a9b4-8f066c25caf5_fixed.java
index ec6c9ee..98a845f 100644
--- a/tmp/8a837ab8-9ac4-47c6-af0c-0ab4e9ed7410_buggy.java
+++ b/tmp/e51a056b-fca7-4c1c-a9b4-8f066c25caf5_fixed.java
@@ -1,21 +1,39 @@
 //-----------------------------------------------------------------------
-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
+private static PeriodFormatter toFormatter(List<Object> elementPairs,
+                                           boolean notPrinter,
+                                           boolean notParser) {
     if (notPrinter && notParser) {
-            throw new IllegalStateException("Builder has created neither a printer nor a parser");
+        throw new IllegalStateException(
+            "Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
-            Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-                sep = sep.finish(f.getPrinter(), f.getParser());
+    //
+    // Handle any Separator found in the list (not just at index 0).
+    // When we see a Separator, split off the "after"‐part, recurse on it,
+    // finish the Separator with the sub‐formatter, and return.
+    //
+    for (int i = 0; i < size; i++) {
+        Object obj = elementPairs.get(i);
+        if (obj instanceof Separator) {
+            Separator sep = (Separator) obj;
+            // We assume the next element (i+1) is the integer marker
+            // so the remainder starts at i+2.
+            List<Object> remainder = elementPairs.subList(i + 2, size);
+            PeriodFormatter sub = toFormatter(remainder, notPrinter, notParser);
+            sep = sep.finish(sub.getPrinter(), sub.getParser());
             return new PeriodFormatter(sep, sep);
         }
+    }
+    //
+    // No Separator in the list, do the normal composite
+    //
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+        return new PeriodFormatter((PeriodPrinter) comp[0],
+                                   (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
