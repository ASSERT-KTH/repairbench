diff --git a/tmp/d0b923eb-dacd-45cd-af38-bedaccc670ed_buggy.java b/tmp/6f5f0ec6-51ab-49e3-84d8-c3a8fb724709_fixed.java
index ec6c9ee..f0bbf17 100644
--- a/tmp/d0b923eb-dacd-45cd-af38-bedaccc670ed_buggy.java
+++ b/tmp/6f5f0ec6-51ab-49e3-84d8-c3a8fb724709_fixed.java
@@ -1,21 +1,38 @@
 //-----------------------------------------------------------------------
-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
+private static PeriodFormatter toFormatter(List<Object> elementPairs,
+                                           boolean notPrinter,
+                                           boolean notParser) {
     if (notPrinter && notParser) {
-            throw new IllegalStateException("Builder has created neither a printer nor a parser");
+        throw new IllegalStateException(
+            "Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
+    // Handle a leading Separator specially
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        // Recurse into the "after" elements
+        PeriodFormatter f = toFormatter(elementPairs.subList(2, size),
+                                         notPrinter, notParser);
+        // Finish off the separator with the nested printer/parser
         sep = sep.finish(f.getPrinter(), f.getParser());
-                return new PeriodFormatter(sep, sep);
+        // Respect notPrinter / notParser flags on the result
+        if (notPrinter) {
+            return new PeriodFormatter(null, (PeriodParser) sep);
+        } else if (notParser) {
+            return new PeriodFormatter((PeriodPrinter) sep, null);
+        } else {
+            return new PeriodFormatter((PeriodPrinter) sep,
+                                       (PeriodParser) sep);
         }
+    }
+    // No separator at front â€” build a flat composite
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+        return new PeriodFormatter((PeriodPrinter) comp[0],
+                                   (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
