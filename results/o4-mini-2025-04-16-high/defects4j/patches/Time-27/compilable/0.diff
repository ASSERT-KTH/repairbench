diff --git a/tmp/09a71031-278f-4914-8fbf-66555dd58c8d_buggy.java b/tmp/e39d64f4-c399-4ce7-a459-c833de3d6f18_fixed.java
index ec6c9ee..f351c20 100644
--- a/tmp/09a71031-278f-4914-8fbf-66555dd58c8d_buggy.java
+++ b/tmp/e39d64f4-c399-4ce7-a459-c833de3d6f18_fixed.java
@@ -1,21 +1,28 @@
 //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
-            Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+    // Handle any Separator anywhere in the sequence
+    for (int i = 0; i < size; i += 2) {
+        Object element = elementPairs.get(i);
+        if (element instanceof Separator) {
+            Separator sep = (Separator) element;
+            // Skip the Separator marker and its associated entry
+            List<Object> rest = elementPairs.subList(i + 2, size);
+            PeriodFormatter f = toFormatter(rest, notPrinter, notParser);
             sep = sep.finish(f.getPrinter(), f.getParser());
             return new PeriodFormatter(sep, sep);
         }
+    }
+    // No separator, just build a straight composite
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
