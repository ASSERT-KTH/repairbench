diff --git a/tmp/795a5324-1208-4981-8ccf-ed80e828f820_buggy.java b/tmp/8b005aa5-72b1-4f41-a038-b38e7e9e3e85_fixed.java
index ec6c9ee..90edd79 100644
--- a/tmp/795a5324-1208-4981-8ccf-ed80e828f820_buggy.java
+++ b/tmp/8b005aa5-72b1-4f41-a038-b38e7e9e3e85_fixed.java
@@ -1,21 +1,57 @@
 //-----------------------------------------------------------------------
-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
+private static PeriodFormatter toFormatter(List<Object> elementPairs,
+                                           boolean notPrinter,
+                                           boolean notParser) {
     if (notPrinter && notParser) {
-            throw new IllegalStateException("Builder has created neither a printer nor a parser");
+        throw new IllegalStateException(
+            "Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
+    // Special‐case: a leading Separator wraps the entire remainder.
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-                sep = sep.finish(f.getPrinter(), f.getParser());
+        PeriodFormatter inner = toFormatter(
+            elementPairs.subList(2, size), notPrinter, notParser);
+        sep = sep.finish(inner.getPrinter(), inner.getParser());
         return new PeriodFormatter(sep, sep);
     }
+    // Look for a Separator in the middle of the list.
+    for (int i = 2; i < size; i += 2) {
+        Object obj = elementPairs.get(i);
+        if (obj instanceof Separator) {
+            Separator sep = (Separator) obj;
+            // Prefix (everything before the separator)
+            List<Object> prefix = elementPairs.subList(0, i);
+            // Suffix (everything after the separator pair)
+            List<Object> suffix = elementPairs.subList(i + 2, size);
+            // Build a formatter for the suffix
+            PeriodFormatter suffixFmt = toFormatter(suffix, notPrinter, notParser);
+            // Finish the separator around the suffix formatter
+            sep = sep.finish(suffixFmt.getPrinter(), suffixFmt.getParser());
+            // Merge prefix + the finished separator
+            List<Object> merged = new ArrayList<Object>(prefix.size() + 2);
+            merged.addAll(prefix);
+            merged.add(sep);
+            merged.add(sep);
+            Object[] comp = createComposite(merged);
+            if (notPrinter) {
+                return new PeriodFormatter(null, (PeriodParser) comp[1]);
+            } else if (notParser) {
+                return new PeriodFormatter((PeriodPrinter) comp[0], null);
+            } else {
+                return new PeriodFormatter(
+                    (PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+            }
+        }
+    }
+    // No Separator found: simple composite of all pairs.
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+        return new PeriodFormatter(
+            (PeriodPrinter) comp[0], (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
