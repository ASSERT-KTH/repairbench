diff --git a/tmp/f2394042-5a4d-4384-907b-584af63cb4fb_buggy.java b/tmp/b26bb719-de92-41e0-9618-086514c1146b_fixed.java
index ec6c9ee..b81f137 100644
--- a/tmp/f2394042-5a4d-4384-907b-584af63cb4fb_buggy.java
+++ b/tmp/b26bb719-de92-41e0-9618-086514c1146b_fixed.java
@@ -1,21 +1,28 @@
 //-----------------------------------------------------------------------
-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
+private static PeriodFormatter toFormatter(List<Object> elementPairs,
+                                           boolean notPrinter,
+                                           boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
+    // handle a leading Separator specially
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+        // recurse into the "after‐separator" elements
+        PeriodFormatter f = toFormatter(elementPairs.subList(2, size),
+                                        notPrinter,
+                                        notParser);
+        // finish off the Separator with the child printer/parser
         sep = sep.finish(f.getPrinter(), f.getParser());
-                return new PeriodFormatter(sep, sep);
+        // respect the notPrinter/notParser flags
+        PeriodPrinter printer = notPrinter ? null : sep;
+        PeriodParser parser = notParser ? null : sep;
+        return new PeriodFormatter(printer, parser);
     }
+    // no Separator marker => just build a composite
     Object[] comp = createComposite(elementPairs);
-        if (notPrinter) {
-            return new PeriodFormatter(null, (PeriodParser) comp[1]);
-        } else if (notParser) {
-            return new PeriodFormatter((PeriodPrinter) comp[0], null);
-        } else {
-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
-        }
+    PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) comp[0];
+    PeriodParser parser = notParser ? null : (PeriodParser) comp[1];
+    return new PeriodFormatter(printer, parser);
 }
\ No newline at end of file
