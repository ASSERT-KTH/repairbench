diff --git a/tmp/8ecfd951-bf2a-4c3c-a12f-b21dfb51dd02_buggy.java b/tmp/af1884a7-6b85-4f7a-b9f1-d3d8116c0ac8_fixed.java
index ec6c9ee..d7e693b 100644
--- a/tmp/8ecfd951-bf2a-4c3c-a12f-b21dfb51dd02_buggy.java
+++ b/tmp/af1884a7-6b85-4f7a-b9f1-d3d8116c0ac8_fixed.java
@@ -1,21 +1,35 @@
 //-----------------------------------------------------------------------
-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
+private static PeriodFormatter toFormatter(List<Object> elementPairs,
+                                           boolean notPrinter,
+                                           boolean notParser) {
     if (notPrinter && notParser) {
-            throw new IllegalStateException("Builder has created neither a printer nor a parser");
+        throw new IllegalStateException(
+            "Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
+    // Handle a leading Separator specially
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-                sep = sep.finish(f.getPrinter(), f.getParser());
-                return new PeriodFormatter(sep, sep);
+        // Recurse into the "after" part
+        PeriodFormatter f = toFormatter(elementPairs.subList(2, size),
+                                         notPrinter, notParser);
+        // Build separate printer and parser instances
+        PeriodPrinter pr = notPrinter
+            ? null
+            : sep.finish(f.getPrinter(), f.getParser());
+        PeriodParser ps = notParser
+            ? null
+            : sep.finish(f.getPrinter(), f.getParser());
+        return new PeriodFormatter(pr, ps);
     }
+    // No leading separator: just build a composite
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+        return new PeriodFormatter((PeriodPrinter) comp[0],
+                                   (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
