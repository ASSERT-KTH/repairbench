diff --git a/tmp/4cfd8c44-be87-474c-8076-a68c25094040_buggy.java b/tmp/1c9516df-57a9-4781-ba85-22f10d9935a0_fixed.java
index ec6c9ee..83462ec 100644
--- a/tmp/4cfd8c44-be87-474c-8076-a68c25094040_buggy.java
+++ b/tmp/1c9516df-57a9-4781-ba85-22f10d9935a0_fixed.java
@@ -1,21 +1,36 @@
 //-----------------------------------------------------------------------
-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
+private static PeriodFormatter toFormatter(List<Object> elementPairs,
+                                           boolean notPrinter,
+                                           boolean notParser) {
     if (notPrinter && notParser) {
-            throw new IllegalStateException("Builder has created neither a printer nor a parser");
+        throw new IllegalStateException(
+            "Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
+
+    /*
+     * Only treat a leading Separator as a group‐marker if there is
+     * actually content after it.  Flattening an existing formatter
+     * (which only contributes two entries) should not be seen as
+     * a new separator group.
+     */
+    if (size >= 3 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-                sep = sep.finish(f.getPrinter(), f.getParser());
+        // recurse into the sublist after the two separator markers
+        PeriodFormatter inner =
+            toFormatter(elementPairs.subList(2, size),
+                        notPrinter, notParser);
+        sep = sep.finish(inner.getPrinter(), inner.getParser());
         return new PeriodFormatter(sep, sep);
     }
+
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+        return new PeriodFormatter((PeriodPrinter) comp[0],
+                                   (PeriodParser)  comp[1]);
     }
 }
\ No newline at end of file
