diff --git a/tmp/f5a06fbd-8ccb-407b-9f40-76906bff4e1c_buggy.java b/tmp/2c8c9738-2c63-4326-8375-c482b7447524_fixed.java
index ec6c9ee..bd0f43a 100644
--- a/tmp/f5a06fbd-8ccb-407b-9f40-76906bff4e1c_buggy.java
+++ b/tmp/2c8c9738-2c63-4326-8375-c482b7447524_fixed.java
@@ -1,21 +1,31 @@
     //-----------------------------------------------------------------------
-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
+    private static PeriodFormatter toFormatter(List<Object> elementPairs,
+                                               boolean notPrinter,
+                                               boolean notParser) {
         if (notPrinter && notParser) {
             throw new IllegalStateException("Builder has created neither a printer nor a parser");
         }
         int size = elementPairs.size();
         if (size >= 2 && elementPairs.get(0) instanceof Separator) {
             Separator sep = (Separator) elementPairs.get(0);
-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+            // build the inner formatter first
+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size),
+                                            notPrinter, notParser);
+            // finish the separator with the inner printer & parser
             sep = sep.finish(f.getPrinter(), f.getParser());
-                return new PeriodFormatter(sep, sep);
+            // pull them back out of the separator
+            PeriodPrinter printer = notPrinter ? null : sep.getPrinter();
+            PeriodParser parser   = notParser ? null : sep.getParser();
+            return new PeriodFormatter(printer, parser);
         }
+        // the normal, non‚Äêseparator path
         Object[] comp = createComposite(elementPairs);
         if (notPrinter) {
             return new PeriodFormatter(null, (PeriodParser) comp[1]);
         } else if (notParser) {
             return new PeriodFormatter((PeriodPrinter) comp[0], null);
         } else {
-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+            return new PeriodFormatter((PeriodPrinter) comp[0],
+                                       (PeriodParser) comp[1]);
         }
     }
\ No newline at end of file
