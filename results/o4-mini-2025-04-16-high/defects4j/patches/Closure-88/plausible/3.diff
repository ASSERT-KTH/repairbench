diff --git a/tmp/d3b64d9c-887d-4907-a80c-2370739c0ee7_buggy.java b/tmp/2faced65-c83a-4cfc-8a85-c23dbba8895a_fixed.java
index 9353941..172eeea 100644
--- a/tmp/d3b64d9c-887d-4907-a80c-2370739c0ee7_buggy.java
+++ b/tmp/2faced65-c83a-4cfc-8a85-c23dbba8895a_fixed.java
@@ -1,30 +1,46 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+  private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
+    // Special-case simple assignments: the "kill" (write) happens after evaluating RHS.
+    if (NodeUtil.isAssignmentOp(n)) {
+      Node lhs = n.getFirstChild();
+      if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
+        // 1) Scan the LHS subtree (except the direct LHS name) for any READs.
+        for (Node c = lhs.getFirstChild(); c != null; c = c.getNext()) {
+          if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {
+            VariableLiveness st = isVariableReadBeforeKill(c, variable);
+            if (st != VariableLiveness.MAYBE_LIVE) {
+              return st;
+            }
+          }
+        }
+        // 2) Scan the RHS subtree for READ or a subsequent KILL.
+        Node rhs = lhs.getNext();
+        if (!ControlFlowGraph.isEnteringNewCfgNode(rhs)) {
+          VariableLiveness st = isVariableReadBeforeKill(rhs, variable);
+          if (st != VariableLiveness.MAYBE_LIVE) {
+            return st;
+          }
+        }
+        // No READ found before this assignment => KILL.
         return VariableLiveness.KILL;
-      } else {
+      }
+    }
+
+    // A plain read of the variable (not on an assignment LHS).
+    if (NodeUtil.isName(n)
+        && variable.equals(n.getString())
+        && !NodeUtil.isLhs(n, n.getParent())) {
       return VariableLiveness.READ;
     }
-    }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+    // Recurse into children in left-to-right, depth-first order.
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
+        VariableLiveness st = isVariableReadBeforeKill(child, variable);
+        if (st != VariableLiveness.MAYBE_LIVE) {
+          return st;
         }
       }
     }
+
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
