diff --git a/tmp/6587938e-d0b6-4262-a682-eaf0cba7a1c8_buggy.java b/tmp/e0223e36-6dfd-48db-bcd6-fe9bbc14aa29_fixed.java
index 9353941..2182038 100644
--- a/tmp/6587938e-d0b6-4262-a682-eaf0cba7a1c8_buggy.java
+++ b/tmp/e0223e36-6dfd-48db-bcd6-fe9bbc14aa29_fixed.java
@@ -1,30 +1,51 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
+  // If this is the variable we're looking for...
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+    Node parent = n.getParent();
+    // ...and it's on the left‐hand side of an assignment or var decl,
+    // that is a KILL, but only after any reads in the RHS/initializer.
+    if (NodeUtil.isLhs(n, parent)) {
+      // Special‐case simple “=” and “var x = …” so we can peek into the RHS.
+      if (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR) {
+        // For “x = expr” the RHS is the next sibling; for “var x = expr”
+        // the initializer is the first child of the NAME node.
+        Node rhs = (parent.getType() == Token.ASSIGN)
+                   ? n.getNext()
+                   : n.getFirstChild();
+        if (rhs != null) {
+          // Scan the entire RHS for any READ of 'variable'.
+          // If we find one, that read happens before the KILL.
+          java.util.Deque<Node> stack = new java.util.ArrayDeque<Node>();
+          stack.push(rhs);
+          while (!stack.isEmpty()) {
+            Node m = stack.pop();
+            if (NodeUtil.isName(m)
+                && variable.equals(m.getString())
+                && !NodeUtil.isLhs(m, m.getParent())) {
+              return VariableLiveness.READ;
+            }
+            for (Node c = m.getFirstChild(); c != null; c = c.getNext()) {
+              stack.push(c);
+            }
+          }
+        }
+      }
+      // No intervening read: this is a kill.
       return VariableLiveness.KILL;
     } else {
+      // A plain read of the variable
       return VariableLiveness.READ;
     }
   }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+  // Otherwise, recurse into children in evaluation order.
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
