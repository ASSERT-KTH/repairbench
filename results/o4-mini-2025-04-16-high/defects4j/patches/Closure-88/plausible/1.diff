diff --git a/tmp/64ae1114-3f65-4861-8492-f2228a5baa40_buggy.java b/tmp/1f4afa80-98df-4bfc-8427-c87401b2fb43_fixed.java
index 9353941..d4992c7 100644
--- a/tmp/64ae1114-3f65-4861-8492-f2228a5baa40_buggy.java
+++ b/tmp/1f4afa80-98df-4bfc-8427-c87401b2fb43_fixed.java
@@ -1,30 +1,33 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
+  // If this node is a simple assignment to our variable,
+  // the RHS is evaluated before the kill occurs.
+  if (n.getType() == Token.ASSIGN) {
+    Node lhs = n.getFirstChild();
+    if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
+      // Recurse into the RHS; if we see a read there, it's READ,
+      // otherwise it's a KILL of the previous value.
+      Node rhs = lhs.getNext();
+      VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+      return (state == VariableLiveness.READ)
+          ? VariableLiveness.READ
+          : VariableLiveness.KILL;
+    }
+  }
+
+  // Any other occurrence of the name is a read.
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
-        return VariableLiveness.KILL;
-      } else {
     return VariableLiveness.READ;
   }
-    }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+  // Otherwise, walk the children in eval‚Äêorder, skipping new CFG nodes.
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
