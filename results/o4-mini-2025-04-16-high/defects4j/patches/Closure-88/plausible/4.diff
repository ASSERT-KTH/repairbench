diff --git a/tmp/a3b48879-74a9-4205-96e2-9c3c2d37bf66_buggy.java b/tmp/cb4db563-450e-461c-9bfa-ab289aabc626_fixed.java
index 9353941..3cd3c39 100644
--- a/tmp/a3b48879-74a9-4205-96e2-9c3c2d37bf66_buggy.java
+++ b/tmp/cb4db563-450e-461c-9bfa-ab289aabc626_fixed.java
@@ -1,30 +1,36 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
+  // A direct “=” assignment to our variable is a KILL but only after
+  // evaluating its LHS and its RHS.  So we scan the children first.
+  if (n.getType() == Token.ASSIGN
+      && NodeUtil.isName(n.getFirstChild())
+      && variable.equals(n.getFirstChild().getString())) {
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
+        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+        if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
+    }
     return VariableLiveness.KILL;
-      } else {
+  }
+
+  // A use of the name that is not on the LHS of an assignment is a READ.
+  if (NodeUtil.isName(n)
+      && variable.equals(n.getString())
+      && !NodeUtil.isLhs(n, n.getParent())) {
     return VariableLiveness.READ;
   }
-    }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+  // Otherwise, recurse into children (left-to-right, depth‐first),
+  // skipping any new CFG nodes (FUNCTIONs).
+  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {
+      VariableLiveness state = isVariableReadBeforeKill(c, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
