diff --git a/tmp/c51e3d2f-57d2-404e-a49f-7c2ea8525215_buggy.java b/tmp/21f46488-3c85-4d71-afa1-a4d670dd29bf_fixed.java
index 9353941..90227e6 100644
--- a/tmp/c51e3d2f-57d2-404e-a49f-7c2ea8525215_buggy.java
+++ b/tmp/21f46488-3c85-4d71-afa1-a4d670dd29bf_fixed.java
@@ -1,30 +1,58 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
    */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+  private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
+    // Special‚Äêcase assignment ops so that we scan the RHS (and any reads there)
+    // before we consider the LHS name a KILL (since the kill actually happens
+    // only after the RHS is evaluated).
+    if (NodeUtil.isAssignmentOp(n)) {
+      Node lhs = n.getFirstChild();
+      Node rhs = lhs.getNext();
+      // If this assignment is to our variable, look for reads in the RHS first.
+      if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
+        if (!ControlFlowGraph.isEnteringNewCfgNode(rhs)) {
+          VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+          if (state != VariableLiveness.MAYBE_LIVE) {
+            return state;
+          }
+        }
+        // No read in the RHS, so the first true reference here is the kill.
         return VariableLiveness.KILL;
-      } else {
-        return VariableLiveness.READ;
       }
+      // Otherwise, walk both sides normally.
+      if (!ControlFlowGraph.isEnteringNewCfgNode(lhs)) {
+        VariableLiveness state = isVariableReadBeforeKill(lhs, variable);
+        if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
+      if (!ControlFlowGraph.isEnteringNewCfgNode(rhs)) {
+        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+        if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
+      return VariableLiveness.MAYBE_LIVE;
+    }
+
+    // A plain name use.
+    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+      // LHS of any assignment/var/catch is a KILL, otherwise it's a READ.
+      return NodeUtil.isLhs(n, n.getParent())
+          ? VariableLiveness.KILL
+          : VariableLiveness.READ;
     }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+    // Recurse left-to-right, depth-first, skipping new CFG entries (FUNCTIONs).
+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+      if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {
+        VariableLiveness state = isVariableReadBeforeKill(c, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
