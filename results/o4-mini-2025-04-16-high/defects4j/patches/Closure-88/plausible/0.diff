diff --git a/tmp/4e8eb239-f071-4677-9ec6-193946aeb16c_buggy.java b/tmp/b205415a-b992-4984-8c91-f4dcf9a509d2_fixed.java
index 9353941..8f9634d 100644
--- a/tmp/4e8eb239-f071-4677-9ec6-193946aeb16c_buggy.java
+++ b/tmp/b205415a-b992-4984-8c91-f4dcf9a509d2_fixed.java
@@ -1,30 +1,47 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+ * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
-        return VariableLiveness.KILL;
-      } else {
+  // 1) A plain name use is a READ unless it's on the LHS of an assignment.
+  if (NodeUtil.isName(n)
+      && variable.equals(n.getString())
+      && !NodeUtil.isLhs(n, n.getParent())) {
     return VariableLiveness.READ;
   }
+
+  // 2) If this node is an assignment to our variable ("variable = ..."),
+  //    we must scan its RHS first (reads happen before the kill), and only
+  //    if there are no reads do we declare the kill.
+  Node firstChild = n.getFirstChild();
+  if (firstChild != null
+      && NodeUtil.isName(firstChild)
+      && variable.equals(firstChild.getString())
+      && NodeUtil.isLhs(firstChild, n)) {
+    // Skip the LHS, scan the rest (the RHS and any other children).
+    for (Node child = firstChild.getNext(); child != null; child = child.getNext()) {
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
+        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+        if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
+    }
+    // No reads in the RHS â€“ the first thing we saw is the kill.
+    return VariableLiveness.KILL;
   }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+  // 3) Otherwise, recurse into children (left-to-right, depth-first).
+  for (Node child = firstChild; child != null; child = child.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
+
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
