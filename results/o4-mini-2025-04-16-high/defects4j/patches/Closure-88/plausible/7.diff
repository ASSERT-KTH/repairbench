diff --git a/tmp/0bcbe824-9f9c-4085-822d-047f21dda888_buggy.java b/tmp/202bb262-c067-4397-a3ef-a6b199fa1c73_fixed.java
index 9353941..0e110c6 100644
--- a/tmp/0bcbe824-9f9c-4085-822d-047f21dda888_buggy.java
+++ b/tmp/202bb262-c067-4397-a3ef-a6b199fa1c73_fixed.java
@@ -1,30 +1,58 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+ * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
+  // Handle assignment‐operators specially so that the "kill" (the write
+  // to the variable) is only reported after we have scanned the entire RHS
+  // (and any reads it may contain).
+  if (NodeUtil.isAssignmentOp(n)) {
+    Node lhs = n.getFirstChild();
+    Node rhs = lhs.getNext();
+    // 1) scan the LHS subtree for reads of the variable (e.g. in
+    //    a GETPROP like x.y = ...)
+    for (Node child = lhs.getFirstChild();
+         child != null; child = child.getNext()) {
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
+        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+        if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
+    }
+    // 2) scan the RHS for reads or nested kills
+    VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+    if (state != VariableLiveness.MAYBE_LIVE) {
+      return state;
+    }
+    // 3) only now do we report the kill of the variable itself
+    if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
+      return VariableLiveness.KILL;
+    }
+    return VariableLiveness.MAYBE_LIVE;
+  }
+
+  // Non‐assignment context: any matching NAME is a read or (if it
+  // appears on the LHS of some other assign) a kill.
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
-    // Expressions are evaluated left-right, depth first.
+  // Otherwise recurse left‐to‐right, skipping into new CFG nodes.
   for (Node child = n.getFirstChild();
        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
