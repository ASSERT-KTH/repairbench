diff --git a/tmp/e3f1bd40-351a-446a-a43d-2c1efc28da66_buggy.java b/tmp/837a6f1e-23dc-4607-adc3-cb8d43c75e25_fixed.java
index 9353941..3e24739 100644
--- a/tmp/e3f1bd40-351a-446a-a43d-2c1efc28da66_buggy.java
+++ b/tmp/837a6f1e-23dc-4607-adc3-cb8d43c75e25_fixed.java
@@ -1,30 +1,38 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
+  // Special‐case a direct “=” assignment to our variable: the kill
+  // actually occurs after the RHS is evaluated, so we must scan the
+  // RHS first for any reads or nested kills.
+  if (n.isAssign()
+      && NodeUtil.isName(n.getFirstChild())
+      && variable.equals(n.getFirstChild().getString())) {
+    // Evaluate RHS before the kill
+    Node rhs = n.getFirstChild().getNext();
+    VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);
+    if (rhsState != VariableLiveness.MAYBE_LIVE) {
+      return rhsState;
+    }
+    // No read in the RHS, so this assignment is the first reference (a kill).
+    return VariableLiveness.KILL;
+  }
+
+  // If this node is our variable name, decide READ vs KILL immediately.
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+  // Otherwise, recurse left‐to‐right, depth‐first (skipping new CFG subnodes).
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
