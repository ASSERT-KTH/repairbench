diff --git a/tmp/4fddd3fb-e094-40ab-a48a-9bea8e298d6c_buggy.java b/tmp/aef1f081-6743-4494-9de6-56b4e49df567_fixed.java
index 9353941..bf96b37 100644
--- a/tmp/4fddd3fb-e094-40ab-a48a-9bea8e298d6c_buggy.java
+++ b/tmp/aef1f081-6743-4494-9de6-56b4e49df567_fixed.java
@@ -1,30 +1,41 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
+  // If this is a reference to the variable, decide if it's a read or a
+  // kill.  Simple (“=”) assignments and var‐decl initializers kill only
+  // after their RHS is done, so we defer reporting those until after
+  // we scan their children.  All other LHS contexts (compound‐assign,
+  // ++/--, etc.) read the old value first.
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
-        return VariableLiveness.KILL;
-      } else {
+    Node parent = n.getParent();
+    if (!NodeUtil.isLhs(n, parent)) {
+      // a plain read of the variable
       return VariableLiveness.READ;
     }
+    // LHS occurrence: see what kind of LHS it is
+    Token pType = parent.getType();
+    if (pType != Token.ASSIGN && pType != Token.VAR) {
+      // compound‐assign or update: the old value is read first
+      return VariableLiveness.READ;
+    }
+    // otherwise (simple "=" or var declaration) we defer the kill
   }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+  // Recurse into children in evaluation order.
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
+
+  // After visiting children, simple‐assignment nodes kill the variable.
+  if (n.getType() == Token.ASSIGN) {
+    Node lhs = n.getFirstChild();
+    if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
+      return VariableLiveness.KILL;
+    }
+  }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
