diff --git a/tmp/b90e065f-c526-4200-9fca-3a3febb36db6_buggy.java b/tmp/1b3ba031-e9c6-488e-81fe-24bddfed4451_fixed.java
index 9353941..613a31c 100644
--- a/tmp/b90e065f-c526-4200-9fca-3a3febb36db6_buggy.java
+++ b/tmp/1b3ba031-e9c6-488e-81fe-24bddfed4451_fixed.java
@@ -1,30 +1,31 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+ * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
-    // Expressions are evaluated left-right, depth first.
+  // Expressions are evaluated left-to-right, depth first.
+  // Only skip descending into actual FUNCTION nodes, not other CFG boundaries.
   for (Node child = n.getFirstChild();
        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+    if (!child.isFunction()) {
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
