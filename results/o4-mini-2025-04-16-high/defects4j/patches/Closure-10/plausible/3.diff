diff --git a/tmp/d1bc6f0b-01e2-4ec8-9398-65ae5940bada_buggy.java b/tmp/e68bf8ff-7320-4d5a-b381-61c238f1302e_fixed.java
index 6fecc90..c870188 100644
--- a/tmp/d1bc6f0b-01e2-4ec8-9398-65ae5940bada_buggy.java
+++ b/tmp/e68bf8ff-7320-4d5a-b381-61c238f1302e_fixed.java
@@ -1,7 +1,29 @@
 static boolean mayBeString(Node n, boolean recurse) {
   if (recurse) {
+    switch (n.getType()) {
+      case Token.HOOK: {
+        // The ?: operator can return either its "then" or its "else" branch.
+        Node thenBranch = n.getFirstChild().getNext();
+        Node elseBranch = thenBranch.getNext();
+        return mayBeString(thenBranch, true)
+            || mayBeString(elseBranch, true);
+      }
+      case Token.OR:
+      case Token.AND: {
+        // || and && may return any of their operands,
+        // so if any operand may be a string, the whole may be a string.
+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          if (mayBeString(c, true)) {
+            return true;
+          }
+        }
+        return false;
+      }
+      default:
+        // For every other node, require all "results" to match the string predicate
         return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
+    }
   } else {
     return mayBeStringHelper(n);
   }
 }
\ No newline at end of file
