diff --git a/tmp/29e9b9f5-9e92-4e1f-a61a-b19fc105fd02_buggy.java b/tmp/3333dbd8-978b-4028-870c-60b13ed9d099_fixed.java
index e69de29..7fdf81e 100644
--- a/tmp/29e9b9f5-9e92-4e1f-a61a-b19fc105fd02_buggy.java
+++ b/tmp/3333dbd8-978b-4028-870c-60b13ed9d099_fixed.java
@@ -0,0 +1,34 @@
+@Override
+public List<Connection.KeyVal> formData() {
+    List<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();
+    // re‚Äêquery the live DOM for current form controls, so removed inputs are not included
+    for (Element el : this.select("input, textarea, select")) {
+        // must have a non-empty name and not be disabled
+        if (!el.hasAttr("name")) continue;
+        String name = el.attr("name").trim();
+        if (name.isEmpty() || el.hasAttr("disabled")) continue;
+
+        String tag = el.tagName();
+        if ("input".equals(tag)) {
+            String type = el.attr("type").toLowerCase();
+            // skip submit/button/image inputs
+            if ("submit".equals(type) || "button".equals(type) || "image".equals(type))
+                continue;
+            // for checkbox/radio, only include if checked
+            if (("checkbox".equals(type) || "radio".equals(type)) && !el.hasAttr("checked"))
+                continue;
+            data.add(HttpConnection.KeyVal.create(name, el.val()));
+
+        } else if ("textarea".equals(tag)) {
+            data.add(HttpConnection.KeyVal.create(name, el.text()));
+
+        } else if ("select".equals(tag)) {
+            // only options that are currently selected
+            for (Element opt : el.select("option[selected]")) {
+                String val = opt.hasAttr("value") ? opt.attr("value") : opt.text();
+                data.add(HttpConnection.KeyVal.create(name, val));
+            }
+        }
+    }
+    return data;
+}
\ No newline at end of file
