diff --git a/tmp/98a73b80-c29d-4436-9f5c-ac2cb86c6c09_buggy.java b/tmp/902b9fa8-f2e1-49f8-b582-072661afb415_fixed.java
index 2d9cf24..355c276 100644
--- a/tmp/98a73b80-c29d-4436-9f5c-ac2cb86c6c09_buggy.java
+++ b/tmp/902b9fa8-f2e1-49f8-b582-072661afb415_fixed.java
@@ -1,33 +1,33 @@
-    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
-    {
-        // There are certain nasty classes that could cause problems, mostly
-        // via default typing -- catch them here.
+public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {
     final Class<?> raw = type.getRawClass();
     String full = raw.getName();
 
+    // Allow JDK classes (bootstrap‐loaded) unless they are explicitly black‐listed
+    if (raw.getClassLoader() == null && !_cfgIllegalClassNames.contains(full)) {
+        return;
+    }
+
     main_check:
     do {
+        // 1) explicit class‐name blacklist
         if (_cfgIllegalClassNames.contains(full)) {
             break;
         }
-
-            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
-            //    for some Spring framework types
-            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
+        // 2) special Spring checks (only for actual classes, not interfaces)
         if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+            for (Class<?> cls = raw; cls != null && cls != Object.class; cls = cls.getSuperclass()) {
                 String name = cls.getSimpleName();
-                    // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                 if ("AbstractPointcutAdvisor".equals(name)
-                            // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                         || "AbstractApplicationContext".equals(name)) {
                     break main_check;
                 }
             }
         }
+        // otherwise fine
         return;
     } while (false);
 
+    // if we get here, it was in the blacklist
     throw JsonMappingException.from(ctxt,
         String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
 }
\ No newline at end of file
