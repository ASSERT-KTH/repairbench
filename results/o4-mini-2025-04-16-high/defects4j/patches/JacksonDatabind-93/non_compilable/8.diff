diff --git a/tmp/85fb8ee3-b01a-4cf3-8143-7351172e9912_buggy.java b/tmp/02bdb168-8a8c-4ca0-821b-7cd9a1542b48_fixed.java
index 2d9cf24..df6b37c 100644
--- a/tmp/85fb8ee3-b01a-4cf3-8143-7351172e9912_buggy.java
+++ b/tmp/02bdb168-8a8c-4ca0-821b-7cd9a1542b48_fixed.java
@@ -1,33 +1,36 @@
-    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
-    {
-        // There are certain nasty classes that could cause problems, mostly
-        // via default typing -- catch them here.
+@Override
+public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {
     final Class<?> raw = type.getRawClass();
     String full = raw.getName();
 
+    // [databind#1872] – allow any JDK‐provided types by default (unless explicitly banned)
+    if ((full.startsWith("java.") || full.startsWith("javax."))
+            && !_cfgIllegalClassNames.contains(full)) {
+        return;
+    }
+
     main_check:
     do {
+        // explicit block‐list (exact names)
         if (_cfgIllegalClassNames.contains(full)) {
             break;
         }
-
-            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
-            //    for some Spring framework types
-            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
-            if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+        // [databind#1855] – special handling for some Spring classes (only real classes, not interfaces)
+        if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {
+            for (Class<?> cls = raw; cls != null && cls != Object.class; cls = cls.getSuperclass()) {
                 String name = cls.getSimpleName();
-                    // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
+                // block the two nasties in Spring
                 if ("AbstractPointcutAdvisor".equals(name)
-                            // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                         || "AbstractApplicationContext".equals(name)) {
                     break main_check;
                 }
             }
         }
+        // allowed
         return;
     } while (false);
 
+    // if we get here, the type was disallowed
     throw JsonMappingException.from(ctxt,
         String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
 }
\ No newline at end of file
