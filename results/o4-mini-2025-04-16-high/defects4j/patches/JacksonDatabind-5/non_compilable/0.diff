diff --git a/tmp/b7e77e95-e23d-4b16-a69d-b4a720c266e4_buggy.java b/tmp/37a107b6-3a84-4c47-9573-3d6ecb7ab72f_fixed.java
index b2db1d6..f9fa3f6 100644
--- a/tmp/b7e77e95-e23d-4b16-a69d-b4a720c266e4_buggy.java
+++ b/tmp/37a107b6-3a84-4c47-9573-3d6ecb7ab72f_fixed.java
@@ -1,29 +1,40 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
+            // first see if we already have a real method mapping
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
+                // merge mix-in annotations into it
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // no direct mapping yet, try to find the actual method on the target
+                Method real = ClassUtil.findMethod(targetClass, m.getName(), m.getParameterTypes());
+                if (real != null) {
+                    // found a real method: add or reuse in methods, then merge
+                    AnnotatedMethod realAm = methods.find(real);
+                    if (realAm == null) {
+                        realAm = _constructMethod(real);
+                        methods.add(realAm);
+                    }
+                    _addMixUnders(m, realAm);
+                } else {
+                    // no real method: multi‐level mix‐in, merge into existing placeholder if present
+                    AnnotatedMethod placeholder = mixIns.find(m);
+                    if (placeholder != null) {
+                        _addMixUnders(m, placeholder);
+                    } else {
                         mixIns.add(_constructMethod(m));
                     }
                 }
             }
         }
+    }
+}
\ No newline at end of file
