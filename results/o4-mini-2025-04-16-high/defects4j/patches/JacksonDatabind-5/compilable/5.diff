diff --git a/tmp/8281776a-c1c0-4c25-890b-738cd58bbe86_buggy.java b/tmp/71698015-3a9e-40ff-9f90-fdee38ad6ccf_fixed.java
index b2db1d6..52bf34c 100644
--- a/tmp/8281776a-c1c0-4c25-890b-738cd58bbe86_buggy.java
+++ b/tmp/71698015-3a9e-40ff-9f90-fdee38ad6ccf_fixed.java
@@ -1,29 +1,31 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
+    // collect mix‐in class plus its super‐types
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
+    // process in reverse so that more general mix-ins are applied first,
+    // then more specific ones override them
+    for (int i = parents.size() - 1; i >= 0; --i) {
+        Class<?> mixin = parents.get(i);
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
+                // real target method found: merge mix-in annotations into it
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // no target yet: add or merge into a placeholder for later
+                AnnotatedMethod pm = mixIns.find(m);
+                if (pm != null) {
+                    _addMixUnders(m, pm);
+                } else {
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+}
\ No newline at end of file
