diff --git a/tmp/d41df400-9a2f-46bb-b9cf-ee49a52a7f53_buggy.java b/tmp/3dbb2b34-7902-419c-84ac-64f918179420_fixed.java
index b2db1d6..42679c9 100644
--- a/tmp/d41df400-9a2f-46bb-b9cf-ee49a52a7f53_buggy.java
+++ b/tmp/3dbb2b34-7902-419c-84ac-64f918179420_fixed.java
@@ -1,29 +1,48 @@
+    @SuppressWarnings("unchecked")
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
                                     Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
+        // first, collect mix-in class and its supertypes (up to targetClass)
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
+
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
+                // do we already have an entry in our methods map?
                 AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
                 if (am != null) {
+                    // yes: just merge annotations from mix-in onto it
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
+                } else {
+                    /*
+                     * No entry yet: but mix-in may be annotating a real
+                     * method on the targetClass that was not auto-detected.
+                     * So try to locate that real method by signature;
+                     * if found, register+merge into our methods map.
                      */
+                    Method real = null;
+                    try {
+                        real = targetClass.getMethod(m.getName(), m.getParameterTypes());
+                    } catch (Exception e) { }
+                    if (real != null) {
+                        AnnotatedMethod realAm = methods.find(real);
+                        if (realAm == null) {
+                            realAm = _constructMethod(real);
+                            methods.add(realAm);
+                        }
+                        _addMixUnders(m, realAm);
                     } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                        /*
+                         * No real method in target: treat this as a
+                         * mix-in-only (placeholder) for multi-level merges
+                         */
                         mixIns.add(_constructMethod(m));
                     }
                 }
             }
         }
+    }
\ No newline at end of file
