diff --git a/tmp/51acce33-a28d-493e-8619-b3b0a4d89166_buggy.java b/tmp/d8346d0f-c7a3-44fd-a01b-06830f476c6c_fixed.java
index 88bb3a1..97e14bf 100644
--- a/tmp/51acce33-a28d-493e-8619-b3b0a4d89166_buggy.java
+++ b/tmp/d8346d0f-c7a3-44fd-a01b-06830f476c6c_fixed.java
@@ -1,57 +1,56 @@
-    /**
-     * Helper method called when there is the explicit "is-creator", but no mode declaration.
-     *
-     * @since 2.9.2
-     */
 protected void _addExplicitAnyCreator(DeserializationContext ctxt,
         BeanDescription beanDesc, CreatorCollector creators,
         CreatorCandidate candidate)
     throws JsonMappingException
 {
     // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
     if (1 != candidate.paramCount()) {
         // Ok: for delegates, we want one and exactly one parameter without
         // injection AND without name
         int oneNotInjected = candidate.findOnlyParamWithoutInjection();
         if (oneNotInjected >= 0) {
-                // getting close; but most not have name
+            // getting close; but must not have name
             if (candidate.paramName(oneNotInjected) == null) {
                 _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                 return;
             }
         }
         _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
         return;
     }
     AnnotatedParameter param = candidate.parameter(0);
     JacksonInject.Value injectId = candidate.injection(0);
     PropertyName paramName = candidate.explicitParamName(0);
     BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
     // If there's injection or explicit name, should be properties-based
     boolean useProps = (paramName != null) || (injectId != null);
     if (!useProps && (paramDef != null)) {
         // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
-
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
+        // or field, we'll consider it property-based as well.
+        // As per [databind#2051], need to honor naming strategy:
+        PropertyName implicit = candidate.findImplicitParamName(0);
+        if (implicit != null) {
+            paramName = implicit;
+        } else {
+            // fall back to the property definition's name (already
+            // renamed by the configured naming strategy)
+            paramName = paramDef.getFullName();
+        }
+        useProps = paramDef.couldSerialize();
     }
     if (useProps) {
-            SettableBeanProperty[] properties = new SettableBeanProperty[] {
+        SettableBeanProperty[] props = new SettableBeanProperty[] {
             constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
         };
-            creators.addPropertyCreator(candidate.creator(), true, properties);
+        creators.addPropertyCreator(candidate.creator(), true, props);
         return;
     }
+    // otherwise it's a single-arg "delegate" or "scalar" creator
     _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
-        // one more thing: sever link to creator property, to avoid possible later
-        // problems with "unresolved" constructor property
+    // sever link to constructor property to avoid later unresolved props
     if (paramDef != null) {
         ((POJOPropertyBuilder) paramDef).removeConstructors();
     }
 }
\ No newline at end of file
