diff --git a/tmp/03d12e2b-7b30-4d36-b708-00a56caad8ee_buggy.java b/tmp/155c798a-17d4-4173-a45d-6b46e6ffd0b5_fixed.java
index 88bb3a1..d05b0b8 100644
--- a/tmp/03d12e2b-7b30-4d36-b708-00a56caad8ee_buggy.java
+++ b/tmp/155c798a-17d4-4173-a45d-6b46e6ffd0b5_fixed.java
@@ -1,57 +1,63 @@
-    /**
-     * Helper method called when there is the explicit "is-creator", but no mode declaration.
-     *
-     * @since 2.9.2
-     */
+@Override
 protected void _addExplicitAnyCreator(DeserializationContext ctxt,
         BeanDescription beanDesc, CreatorCollector creators,
         CreatorCandidate candidate)
     throws JsonMappingException
 {
     // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
-        if (1 != candidate.paramCount()) {
+    if (candidate.paramCount() != 1) {
         // Ok: for delegates, we want one and exactly one parameter without
         // injection AND without name
         int oneNotInjected = candidate.findOnlyParamWithoutInjection();
         if (oneNotInjected >= 0) {
             // getting close; but most not have name
             if (candidate.paramName(oneNotInjected) == null) {
                 _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                 return;
             }
         }
         _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
         return;
     }
+
     AnnotatedParameter param = candidate.parameter(0);
     JacksonInject.Value injectId = candidate.injection(0);
     PropertyName paramName = candidate.explicitParamName(0);
     BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
     // If there's injection or explicit name, should be properties-based
     boolean useProps = (paramName != null) || (injectId != null);
-        if (!useProps && (paramDef != null)) {
+    if (!useProps && paramDef != null) {
         // One more thing: if implicit name matches property with a getter
         // or field, we'll consider it property-based as well
+        // and as per [databind#2051] need to apply naming-strategy to it.
 
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
-            paramName = candidate.findImplicitParamName(0);
-            useProps = (paramName != null) && paramDef.couldSerialize();
+        PropertyName implicit = candidate.findImplicitParamName(0);
+        if (implicit != null) {
+            // first, raw name from parameter
+            String name = implicit.getSimpleName();
+            // then, apply configured naming strategy if any
+            PropertyNamingStrategy pns = ctxt.getConfig().getPropertyNamingStrategy();
+            if (pns != null) {
+                name = pns.nameForConstructorParameter(ctxt.getConfig(), param, name);
             }
+            paramName = new PropertyName(name);
+            useProps = paramDef.couldSerialize();
+        }
+    }
+
     if (useProps) {
-            SettableBeanProperty[] properties = new SettableBeanProperty[] {
+        SettableBeanProperty[] props = new SettableBeanProperty[] {
             constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
         };
-            creators.addPropertyCreator(candidate.creator(), true, properties);
+        creators.addPropertyCreator(candidate.creator(), true, props);
         return;
     }
+
     _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
-        // one more thing: sever link to creator property, to avoid possible later
-        // problems with "unresolved" constructor property
+    // sever link to creator property to avoid problems with "unresolved" ctor prop
     if (paramDef != null) {
         ((POJOPropertyBuilder) paramDef).removeConstructors();
     }
 }
\ No newline at end of file
