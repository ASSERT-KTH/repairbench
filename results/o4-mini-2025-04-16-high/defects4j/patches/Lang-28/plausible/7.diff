diff --git a/tmp/9984b424-875f-4ac5-9b64-4015e810a121_buggy.java b/tmp/af93d0c9-be6f-448c-97a6-00f561f6a7d4_fixed.java
index 4bbd561..2a8f448 100644
--- a/tmp/9984b424-875f-4ac5-9b64-4015e810a121_buggy.java
+++ b/tmp/af93d0c9-be6f-448c-97a6-00f561f6a7d4_fixed.java
@@ -1,37 +1,54 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // must have at least "&#"
+    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    int len = input.length();
     int start = index + 2;
     boolean isHex = false;
-
+    // optional hex marker
+    if (start < len) {
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
-                start++;
             isHex = true;
+            start++;
+        }
+    } else {
+        return 0;
+    }
+    // find ';'
+    if (start >= len) {
+        return 0;
     }
-
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < len && input.charAt(end) != ';') {
         end++;
     }
-
+    if (end == len) {
+        return 0;
+    }
+    // parse the number
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
+        String seq = input.subSequence(start, end).toString();
+        entityValue = Integer.parseInt(seq, isHex ? 16 : 10);
+    } catch (NumberFormatException e) {
         return 0;
     }
-
+    // write out either a single char or a surrogate pair
+    if (entityValue <= Character.MAX_VALUE) {
         out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
+    } else if (entityValue <= Character.MAX_CODE_POINT) {
+        char[] chars = Character.toChars(entityValue);
+        out.write(chars, 0, chars.length);
+    } else {
+        // invalid code point
         return 0;
     }
+    // return number of characters consumed ("&" "#" [ "x" ] digits ";" )
+    return end + 1 - index;
+}
\ No newline at end of file
