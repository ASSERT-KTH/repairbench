diff --git a/tmp/87a74afa-d40e-4267-908c-1f549b9afbf3_buggy.java b/tmp/c3daae97-5b71-4771-be23-5bedf23075df_fixed.java
index 4bbd561..a802295 100644
--- a/tmp/87a74afa-d40e-4267-908c-1f549b9afbf3_buggy.java
+++ b/tmp/c3daae97-5b71-4771-be23-5bedf23075df_fixed.java
@@ -1,37 +1,42 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     // TODO: Protect from ArrayIndexOutOfBounds
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
         while (input.charAt(end) != ';') {
             end++;
         }
 
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String number = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Handle supplementary characters (code points > U+FFFF)
+        if (Character.isSupplementaryCodePoint(entityValue)) {
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars, 0, chars.length);
+        } else {
             out.write(entityValue);
+        }
+
+        // return length consumed: '&' '#' [ 'x' ] digits ';'
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
