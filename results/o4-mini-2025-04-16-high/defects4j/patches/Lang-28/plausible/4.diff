diff --git a/tmp/5b7f271c-4be7-473a-b77b-97cabea799ae_buggy.java b/tmp/9498f8f4-8c9b-483a-936e-b95b6cfbfcc6_fixed.java
index 4bbd561..cc994d8 100644
--- a/tmp/5b7f271c-4be7-473a-b77b-97cabea799ae_buggy.java
+++ b/tmp/9498f8f4-8c9b-483a-936e-b95b6cfbfcc6_fixed.java
@@ -1,37 +1,47 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Quick check for "&#"
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        // Check for hexadecimal marker
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
-                start++;
             isHex = true;
+            start++;
         }
 
+        // Find the terminating semicolon
         int end = start;
         while (input.charAt(end) != ';') {
             end++;
         }
 
+        // Parse the number
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String number = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Write either a single BMP character or a supplementary pair
+        if (Character.isSupplementaryCodePoint(entityValue)) {
+            out.write(Character.toChars(entityValue));
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+
+        // Return number of characters consumed in the input
+        return 2                 // "&#"
+             + (isHex ? 1 : 0)   // optional 'x' or 'X'
+             + (end - start)     // the digits
+             + 1;                // the trailing ';'
     }
     return 0;
 }
\ No newline at end of file
