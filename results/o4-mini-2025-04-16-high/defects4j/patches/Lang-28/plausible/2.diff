diff --git a/tmp/788446c3-c321-4c2a-a189-f6b44cf93c46_buggy.java b/tmp/860abcbc-ec4f-4c7f-b0e2-60df0838f87e_fixed.java
index 4bbd561..b60c365 100644
--- a/tmp/788446c3-c321-4c2a-a189-f6b44cf93c46_buggy.java
+++ b/tmp/860abcbc-ec4f-4c7f-b0e2-60df0838f87e_fixed.java
@@ -1,37 +1,49 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // quickly bail if it can't be a numeric entity
+    if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+        // check for hex marker
+        if (start < input.length()) {
+            char fc = input.charAt(start);
+            if (fc == 'x' || fc == 'X') {
                 isHex = true;
+                start++;
+            }
         }
 
+        // find the ';'
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
+        if (end == input.length()) {
+            // no closing ';' found
+            return 0;
+        }
 
-            int entityValue;
+        // parse the number
+        int codePoint;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+            String num = input.subSequence(start, end).toString();
+            codePoint = Integer.parseInt(num, isHex ? 16 : 10);
+        } catch (NumberFormatException e) {
+            return 0;
+        }
+
+        // write either a BMP char or a surrogate‐pair for supplementary
+        if (Character.isSupplementaryCodePoint(codePoint)) {
+            char[] chars = Character.toChars(codePoint);
+            out.write(chars);
         } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-                return 0;
+            out.write(codePoint);
         }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // number of characters consumed: from '&' to ';' inclusive
+        return end - index + 1;
     }
+
     return 0;
 }
\ No newline at end of file
