diff --git a/tmp/9cba9f00-bcbf-4887-b512-5b68e7595028_buggy.java b/tmp/2ca18365-207d-4a42-a40c-7976bd23f773_fixed.java
index 4bbd561..66b211e 100644
--- a/tmp/9cba9f00-bcbf-4887-b512-5b68e7595028_buggy.java
+++ b/tmp/2ca18365-207d-4a42-a40c-7976bd23f773_fixed.java
@@ -1,37 +1,35 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // guard against too-short input
+    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
     int start = index + 2;
     boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+    if (start < input.length()) {
+        char c = input.charAt(start);
+        if (c == 'x' || c == 'X') {
             isHex = true;
+            start++;
+        }
     }
-
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
-
+    if (end >= input.length()) {
+        return 0;
+    }
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+        String number = input.subSequence(start, end).toString();
+        entityValue = Integer.parseInt(number, isHex ? 16 : 10);
     } catch (NumberFormatException nfe) {
         return 0;
     }
-
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    // write BMP or supplementary characters correctly
+    char[] chars = Character.toChars(entityValue);
+    out.write(chars, 0, chars.length);
+    // consumed: "&" "#" [ "x" ] digits ";"
+    return 2 + (isHex ? 1 : 0) + (end - start) + 1;
 }
\ No newline at end of file
