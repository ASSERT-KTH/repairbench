diff --git a/tmp/9edef1dc-2bb2-43aa-a28d-b3272d64b5db_buggy.java b/tmp/97db7b6a-4e2a-470d-a7db-3a8425938eec_fixed.java
index 4bbd561..ffe2fcf 100644
--- a/tmp/9edef1dc-2bb2-43aa-a28d-b3272d64b5db_buggy.java
+++ b/tmp/97db7b6a-4e2a-470d-a7db-3a8425938eec_fixed.java
@@ -1,37 +1,44 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    int len = input.length();
+    // Protect against too-short sequences
+    if (index + 1 >= len || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
     int start = index + 2;
     boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+    // Check for hex marker
+    if (start < len) {
+        char c = input.charAt(start);
+        if (c == 'x' || c == 'X') {
             isHex = true;
+            start++;
         }
-
+    }
+    // No room for digits
+    if (start >= len) {
+        return 0;
+    }
+    // Find the semicolon
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < len && input.charAt(end) != ';') {
         end++;
     }
-
+    // If we ran off the end, bail out
+    if (end == len) {
+        return 0;
+    }
+    // Parse the number
+    String num = input.subSequence(start, end).toString();
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+        entityValue = Integer.parseInt(num, isHex ? 16 : 10);
     } catch (NumberFormatException nfe) {
         return 0;
     }
-
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    // Write the code point (handles BMP and supplementary via surrogate pairs)
+    char[] chars = Character.toChars(entityValue);
+    out.write(chars);
+    // Return the length consumed: from '&' to ';' inclusive
+    return end - index + 1;
 }
\ No newline at end of file
