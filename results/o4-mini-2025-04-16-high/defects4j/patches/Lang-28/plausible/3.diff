diff --git a/tmp/96f78c2c-dd13-4435-8d6c-3f102b5be84a_buggy.java b/tmp/f14bb3d9-c6c7-4669-8361-a47df809edf6_fixed.java
index 4bbd561..93152b9 100644
--- a/tmp/96f78c2c-dd13-4435-8d6c-3f102b5be84a_buggy.java
+++ b/tmp/f14bb3d9-c6c7-4669-8361-a47df809edf6_fixed.java
@@ -1,37 +1,53 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // basic bounds check and look for "&#"
+    if (index < 0 || index + 2 >= input.length() ||
+        input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
     int start = index + 2;
     boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+    // check for hex marker
+    if (start < input.length()) {
+        char first = input.charAt(start);
+        if (first == 'x' || first == 'X') {
             isHex = true;
+            start++;
+            if (start >= input.length()) {
+                return 0;
             }
-
+        }
+    }
+    // find the terminating semicolon
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
-
-            int entityValue;
+    if (end == input.length()) {
+        return 0; // no semicolon â†’ not a valid entity
+    }
+    // parse the number
+    String num = input.subSequence(start, end).toString();
+    int value;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+        value = Integer.parseInt(num, isHex ? 16 : 10);
+    } catch (NumberFormatException ex) {
+        return 0;
+    }
+    // ensure it's a valid Unicode code point
+    if (value < 0 || value > Character.MAX_CODE_POINT) {
+        return 0;
+    }
+    // write either a single char or a surrogate pair
+    if (value > Character.MAX_VALUE) {
+        char[] surrogates = Character.toChars(value);
+        out.write(surrogates);
     } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+        out.write(value);
     }
-            } catch(NumberFormatException nfe) {
-                return 0;
-            }
-
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    // return the number of characters consumed, from '&' through ';'
+    return end - index + 1;
 }
\ No newline at end of file
