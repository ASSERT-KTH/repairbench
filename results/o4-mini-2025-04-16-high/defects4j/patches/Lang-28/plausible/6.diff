diff --git a/tmp/ba10223c-49cb-4067-9d1d-c6924fec9576_buggy.java b/tmp/21647783-a632-477b-93af-6a71f5e76e45_fixed.java
index 4bbd561..0a9bdda 100644
--- a/tmp/ba10223c-49cb-4067-9d1d-c6924fec9576_buggy.java
+++ b/tmp/21647783-a632-477b-93af-6a71f5e76e45_fixed.java
@@ -1,37 +1,36 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // protect from ArrayIndexOutOfBounds
+    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
     int start = index + 2;
     boolean isHex = false;
-
+    if (start < input.length()) {
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
-                start++;
             isHex = true;
+            start++;
+        }
+    }
+    if (start >= input.length()) {
+        return 0;
     }
-
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
-
+    if (end >= input.length()) {
+        return 0;
+    }
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);
     } catch (NumberFormatException nfe) {
         return 0;
     }
-
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    // correctly handle supplementary code points
+    char[] chars = Character.toChars(entityValue);
+    out.write(chars, 0, chars.length);
+    return end - index + 1;
 }
\ No newline at end of file
