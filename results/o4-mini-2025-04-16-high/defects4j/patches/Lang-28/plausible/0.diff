diff --git a/tmp/809af106-144e-4dc0-a341-a0ab39aa274f_buggy.java b/tmp/5fb61197-9d98-4fba-a71a-0a0bb37552ea_fixed.java
index 4bbd561..7f06581 100644
--- a/tmp/809af106-144e-4dc0-a341-a0ab39aa274f_buggy.java
+++ b/tmp/5fb61197-9d98-4fba-a71a-0a0bb37552ea_fixed.java
@@ -1,37 +1,47 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // guard against short inputs
+    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
     int start = index + 2;
     boolean isHex = false;
 
+    // check for hex indicator
+    if (start < input.length()) {
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
-                start++;
             isHex = true;
+            start++;
+        }
     }
 
+    // find the end ';'
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
+    if (end >= input.length()) {
+        // no closing ';'
+        return 0;
+    }
 
+    // parse the number
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
+        String number = input.subSequence(start, end).toString();
+        entityValue = Integer.parseInt(number, isHex ? 16 : 10);
+    } catch (NumberFormatException e) {
         return 0;
     }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    // write out the character(s), handling supplementary code points correctly
+    char[] chars = Character.toChars(entityValue);
+    out.write(chars);
+
+    // consumed length = "&#" (2) + optional "x" (1 if hex) + digits + ";" (1)
+    return 2 + (isHex ? 1 : 0) + (end - start) + 1;
 }
\ No newline at end of file
