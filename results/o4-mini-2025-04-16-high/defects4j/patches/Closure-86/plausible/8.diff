diff --git a/tmp/230f1357-eeac-4c9d-87a0-0d3ba11e8255_buggy.java b/tmp/3de2ea5d-76a2-4457-adc1-95301464d942_fixed.java
index a3709ee..0b3b749 100644
--- a/tmp/230f1357-eeac-4c9d-87a0-0d3ba11e8255_buggy.java
+++ b/tmp/3de2ea5d-76a2-4457-adc1-95301464d942_fixed.java
@@ -1,71 +1,82 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
+      // A result that is aliased by a non-local name, is effectively
+      // the same as returning a non-local name, but this doesn't matter
+      // if the value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
           || (locals.apply(value)
               && evaluatesToLocalValue(value.getLastChild(), locals));
+
     case Token.COMMA:
+      // Only the last sub‚Äêexpression matters for the value.
       return evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.AND:
     case Token.OR:
+      // Both sides must be local.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.HOOK:
-        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
+      // Only the "then" and "else" arms matter.
+      return evaluatesToLocalValue(
+                 value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.INC:
     case Token.DEC:
+      // Postfix returns the old value; prefix returns a primitive.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+        // postfix: old value
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
+        // prefix: always a primitive
         return true;
       }
+
     case Token.THIS:
       return locals.apply(value);
+
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
+
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // We have no general guarantee about properties.
       return locals.apply(value);
+
     case Token.CALL:
+      // A few calls we know return a fresh/primitive value.
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
+
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // We cannot assume a "new" expression is local
+      // unless we know the constructor never aliases 'this'.
+      return false;
+
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // All of these produce a fresh value.
       return true;
+
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // "in" always yields a boolean.
       return true;
+
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other operators that produce primitives.
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node " + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
