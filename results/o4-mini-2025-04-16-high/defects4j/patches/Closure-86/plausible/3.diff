diff --git a/tmp/4853cc9d-af2f-4a8f-8ee2-32532cf32d89_buggy.java b/tmp/5ca081c7-2907-4774-87e3-548edc83a990_fixed.java
index a3709ee..4d203eb 100644
--- a/tmp/4853cc9d-af2f-4a8f-8ee2-32532cf32d89_buggy.java
+++ b/tmp/5ca081c7-2907-4774-87e3-548edc83a990_fixed.java
@@ -1,71 +1,87 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
+      // A result that is aliased by a non-local name is effectively the
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
           || (locals.apply(value)
               && evaluatesToLocalValue(value.getLastChild(), locals));
+
     case Token.COMMA:
+      // Only the right‚Äêmost value of the comma matters.
       return evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.AND:
     case Token.OR:
+      // Both operands must be local values.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.HOOK:
+      // Only the two result branches matter.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.INC:
     case Token.DEC:
+      // Pre-increment/decrement produces a fresh number; post returns old value.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+        // postfix: result is original value
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
+        // prefix: always a new primitive
         return true;
       }
+
     case Token.THIS:
       return locals.apply(value);
+
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
+
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // No locality info about object properties themselves.
       return locals.apply(value);
+
     case Token.CALL:
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
+
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // The new object may be aliased from inside its constructor,
+      // so we conservatively assume it's not a purely local value.
+      return false;
+
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals and functions are always local values.
       return true;
+
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // 'in' yields a boolean primitive.
       return true;
+
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other operators that force a local result:
+      //   x = '' + g   (x is a local string)
+      //   x -= g       (x is a local number)
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node " + value +
           "\n parent: " + value.getParent());
   }
 }
\ No newline at end of file
