diff --git a/tmp/7567a9de-cb28-476d-98c0-c037cca19aaa_buggy.java b/tmp/b68fcf60-8445-48a1-87d1-f088008b82d8_fixed.java
index a3709ee..40ebac4 100644
--- a/tmp/7567a9de-cb28-476d-98c0-c037cca19aaa_buggy.java
+++ b/tmp/b68fcf60-8445-48a1-87d1-f088008b82d8_fixed.java
@@ -1,71 +1,98 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
+      // A result that is aliased by a non-local name is effectively
+      // the same as returning a non-local name, but this doesn't matter
+      // if the value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
           || (locals.apply(value)
               && evaluatesToLocalValue(value.getLastChild(), locals));
+
     case Token.COMMA:
+      // Only the right-hand side of a comma matters.
       return evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.AND:
     case Token.OR:
+      // Both operands of && and || must be local.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.HOOK:
+      // Only the 'then' and 'else' matters, not the condition.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.INC:
     case Token.DEC:
-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+      // Prefix ++/-- yield a new primitive number; postfix yields
+      // the old value, which may be non-local.
+      if (value.getBooleanProp(Node.INCRDECR_PROP)) { // postfix
         return evaluatesToLocalValue(value.getFirstChild(), locals);
-        } else {
+      } else { // prefix
         return true;
       }
+
     case Token.THIS:
       return locals.apply(value);
+
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
+
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // No inherent locality info for a bare property reference.
       return locals.apply(value);
-      case Token.CALL:
+
+    case Token.CALL: {
+      // A method call on a freshly constructed or otherwise local object
+      // can be considered to return a local value.
+      Node callee = value.getFirstChild();
+      if ((callee.getType() == Token.GETPROP || callee.getType() == Token.GETELEM)) {
+        Node target = callee.getFirstChild();
+        if (target.getType() == Token.NEW
+            || evaluatesToLocalValue(target, locals)) {
+          return true;
+        }
+      }
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
+    }
+
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // We only consider a 'new' expression local if the user-supplied
+      // predicate says so.
+      return locals.apply(value);
+
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Function/regexp/array/object literals are always local.
       return true;
+
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // The 'in' operator returns a primitive boolean.
       return true;
+
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other ops force a local value:
+      //   '' + g  (string)
+      //   g - 0   (number)
+      //   etc.
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node " + value +
           "\n parent: " + value.getParent());
   }
 }
\ No newline at end of file
