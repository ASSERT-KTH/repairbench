diff --git a/tmp/047e96b8-d72e-4e35-963c-3c0fe583dda0_buggy.java b/tmp/fc3290f8-55e8-4404-be0f-9c546b210b26_fixed.java
index a3709ee..e690802 100644
--- a/tmp/047e96b8-d72e-4e35-963c-3c0fe583dda0_buggy.java
+++ b/tmp/fc3290f8-55e8-4404-be0f-9c546b210b26_fixed.java
@@ -1,71 +1,81 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
+      // A result that is aliased by a non-local name is effectively
+      // the same as returning a non-local name, but this doesn't matter if
+      // the value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
           || (locals.apply(value)
               && evaluatesToLocalValue(value.getLastChild(), locals));
+
     case Token.COMMA:
+      // Only the rightmost operand matters.
       return evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.AND:
     case Token.OR:
+      // Both operands must be local values.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.HOOK:
-        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
+      // Only the two result arms matter.
+      Node thenBranch = value.getFirstChild().getNext();
+      return evaluatesToLocalValue(thenBranch, locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.INC:
     case Token.DEC:
+      // Prefix yields a new primitive; postfix yields the old value.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+        // Postfix: result is the original child.
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
+        // Prefix: always a local number.
         return true;
       }
+
     case Token.THIS:
       return locals.apply(value);
+
     case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
+      return NodeUtil.isImmutableValue(value) || locals.apply(value);
+
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // We have no general knowledge of whether a property read is local.
       return locals.apply(value);
+
     case Token.CALL:
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
+
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // A newly constructed object is only local if the "locals" predicate
+      // tells us it is (i.e., we know it wasn't aliased inside its constructor).
+      return locals.apply(value);
+
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // These literals (and literal-like nodes) are always local values.
       return true;
+
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // The 'in' operator always yields a primitive boolean.
       return true;
+
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other operators produce local primitives, or are immutable.
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node " + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
