diff --git a/tmp/20ae88c5-a02d-42b2-abe0-15363bebc769_buggy.java b/tmp/de7b04f6-e0e1-46d5-8c04-da319499e12f_fixed.java
index a3709ee..61a6c1b 100644
--- a/tmp/20ae88c5-a02d-42b2-abe0-15363bebc769_buggy.java
+++ b/tmp/de7b04f6-e0e1-46d5-8c04-da319499e12f_fixed.java
@@ -1,71 +1,105 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
+      // A result that is aliased by a non-local name is effectively the
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
           || (locals.apply(value)
               && evaluatesToLocalValue(value.getLastChild(), locals));
+
     case Token.COMMA:
+      // Only the right side of a comma matters.
       return evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.AND:
     case Token.OR:
+      // Both operands must be local.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.HOOK:
+      // Only the "then" and "else" arms matter.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.INC:
     case Token.DEC:
+      // Post-inc/dec yields the old value; pre-inc/dec yields a number.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
         return true;
       }
+
     case Token.THIS:
       return locals.apply(value);
+
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
+
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // We have no information about property reads, so only if the user
+      // explicitly told us it's a local.
       return locals.apply(value);
+
     case Token.CALL:
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
+
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
+      // By default we only trust constructors we know don't leak 'this'
+      // (via callHasLocalResult), or nodes the user marked local.
+      // However, if the NEW → GETPROP → CALL pattern occurs (i.e.,
+      // new X().m()), then we know 'this' is the new instance, so any
+      // mutation is on a local object.
+      Node parent = value.getParent();
+      if (parent != null
+          && (parent.getType() == Token.GETPROP
+              || parent.getType() == Token.GETELEM)) {
+        // Skip through a chain of GETPROP/GETELEM to see if we're
+        // ultimately the callee of a CALL.
+        Node maybeCall = parent;
+        while (maybeCall != null
+            && (maybeCall.getType() == Token.GETPROP
+                || maybeCall.getType() == Token.GETELEM)) {
+          maybeCall = maybeCall.getParent();
+        }
+        if (maybeCall != null
+            && maybeCall.getType() == Token.CALL
+            && maybeCall.getFirstChild() == parent) {
           return true;
+        }
+      }
+      return callHasLocalResult(value) || locals.apply(value);
+
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals (even with non-literal children) are always local.
       return true;
+
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // The 'in' operator always produces a boolean.
       return true;
+
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other binary/unary ops yield a primitive or are simple.
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node " + value +
           "\n parent: " + value.getParent());
   }
 }
\ No newline at end of file
