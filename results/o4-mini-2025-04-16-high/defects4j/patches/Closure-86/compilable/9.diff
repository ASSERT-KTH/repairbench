diff --git a/tmp/e2a2c25d-eb99-4848-9a78-0e026ef848a8_buggy.java b/tmp/77c69344-2dfc-4fdd-90d5-ff284eb6fcf1_fixed.java
index a3709ee..b7a6d68 100644
--- a/tmp/e2a2c25d-eb99-4848-9a78-0e026ef848a8_buggy.java
+++ b/tmp/77c69344-2dfc-4fdd-90d5-ff284eb6fcf1_fixed.java
@@ -1,71 +1,78 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
+      // A result that is aliased by a non-local name, is effectively the
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
           || (locals.apply(value)
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
+      // Only the right-hand side of the comma matters for locality.
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
+      // Both operands must be local values.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
+      // Only the two result branches matter for locality.
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
+      // Postfix returns the old value, so we check the child;
+      // prefix always produces a primitive number.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+        // isPostfix == true
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
+        // prefix
         return true;
       }
     case Token.THIS:
       return locals.apply(value);
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // We have no guarantees about the locality of object properties.
       return locals.apply(value);
     case Token.CALL:
+      // A call that we know returns a fresh local object,
+      // or a toString call, or an explicitly-local value.
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // Only constructors that are known to return fully-local objects
+      // (i.e., no aliasing of `this` into outer scope) are safe.
+      return callHasLocalResult(value)
+          || locals.apply(value);
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals (and functions/regexps) are always local.
       return true;
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // `in` produces a boolean primitive.
       return true;
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other ops either force a primitive local result
+      // (e.g., +, -, *=, etc.), or are immutable values.
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node " + value +
           "\n parent: " + value.getParent());
   }
 }
\ No newline at end of file
