diff --git a/tmp/4d6dbd3a-90ce-4161-9307-cd779d60bdf5_buggy.java b/tmp/cd80f4ae-036d-4ebb-9585-16530caa9474_fixed.java
index a3709ee..40be293 100644
--- a/tmp/4d6dbd3a-90ce-4161-9307-cd779d60bdf5_buggy.java
+++ b/tmp/cd80f4ae-036d-4ebb-9585-16530caa9474_fixed.java
@@ -1,71 +1,90 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
+      // A result that is aliased by a non-local name is effectively
+      // the same as returning a non-local name, but this doesn't
+      // matter if the value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
           || (locals.apply(value)
               && evaluatesToLocalValue(value.getLastChild(), locals));
+
     case Token.COMMA:
+      // Only the right‐most expression in a comma matters.
       return evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.AND:
     case Token.OR:
+      // Both operands must be local.
       return evaluatesToLocalValue(value.getFirstChild(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.HOOK:
+      // Only the two branches (skip the condition).
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
           && evaluatesToLocalValue(value.getLastChild(), locals);
+
     case Token.INC:
     case Token.DEC:
+      // Prefix produces a new primitive; postfix returns the old value.
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+        // Postfix: must check the input.
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       } else {
+        // Prefix: always a primitive local.
         return true;
       }
+
     case Token.THIS:
       return locals.apply(value);
+
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
+
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
+      // No general info about property locality.
       return locals.apply(value);
+
     case Token.CALL:
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
+
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // A `new` expression only yields a local value if we know
+      // the constructor won’t alias `this` (via callHasLocalResult),
+      // or if it’s explicitly marked local.
+      return callHasLocalResult(value)
+          || locals.apply(value);
+
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Function literals, regexps, arrays, and object literals
+      // are always fresh/local.
       return true;
+
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+      // The `in` operator yields a boolean.
       return true;
+
     default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      // Other operations that yield a primitive or a fresh value:
+      //   x = '' + g   (x is a local string)
+      //   x -= g       (x is a local number)
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
-
       throw new IllegalStateException(
           "Unexpected expression node " + value +
           "\n parent: " + value.getParent());
   }
 }
\ No newline at end of file
