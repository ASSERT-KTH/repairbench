diff --git a/tmp/b91d9f61-86f9-448f-83f6-47f4af6d648f_buggy.java b/tmp/877a7b31-a7b1-4643-9562-d24b278ee7f1_fixed.java
index 10616db..ec24ab3 100644
--- a/tmp/b91d9f61-86f9-448f-83f6-47f4af6d648f_buggy.java
+++ b/tmp/877a7b31-a7b1-4643-9562-d24b278ee7f1_fixed.java
@@ -1,19 +1,32 @@
-    //-----------------------------------------------------------------------
+@Override
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+    // Only for fully‚Äêcontiguous partials use this shortcut
     if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
-            for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
-            }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        // Pick a base instant that will accept Feb-29 when there's no year field
+        long instant;
+        if (!partial.isSupported(DateTimeFieldType.year())) {
+            // Use a known leap year (e.g. 2000) so MonthDay(2,29) can be set
+            instant = iChronology.getDateTimeMillis(2000, 1, 1, 0, 0, 0, 0);
         } else {
+            // Year is present, epoch (1970-01-01) is safe
+            instant = 0L;
+        }
+        // Apply each field value to the base instant
+        for (int i = 0, size = partial.size(); i < size; i++) {
+            instant = partial.getFieldType(i)
+                             .getField(iChronology)
+                             .set(instant, values[i]);
+        }
+        // Now add to the specific field (month, day, etc.)
+        DateTimeField field = partial.getFieldType(fieldIndex)
+                                     .getField(iChronology);
+        instant = field.add(instant, valueToAdd);
+        // Extract and return the new partial values
+        return iChronology.get(partial, instant);
+    }
+    // Fallback to the generic algorithm
     return super.add(partial, fieldIndex, values, valueToAdd);
 }
\ No newline at end of file
-    }
