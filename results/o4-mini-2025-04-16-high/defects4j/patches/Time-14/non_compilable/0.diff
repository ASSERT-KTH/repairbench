diff --git a/tmp/b1a6033f-08ea-4dd6-beb5-92049412a672_buggy.java b/tmp/928ab214-5dd9-4fbc-b6e9-6926ea4a0849_fixed.java
index 10616db..09421a2 100644
--- a/tmp/b1a6033f-08ea-4dd6-beb5-92049412a672_buggy.java
+++ b/tmp/928ab214-5dd9-4fbc-b6e9-6926ea4a0849_fixed.java
@@ -1,19 +1,37 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
+    // no change if nothing to add
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+    // Special‐case MonthDay (no year) so that Feb-29 is handled on a leap‐year baseline
+    if (partial instanceof MonthDay) {
+        // pick a constant leap‐year so Feb-29 can be represented
+        final int BASE_LEAP_YEAR = 2000;
+        // build a full instant at midnight of BASE_LEAP_YEAR‐MM‐DD
+        long instant = iChronology.getDateTimeMillis(
+            BASE_LEAP_YEAR,
+            values[0],  // monthOfYear
+            values[1],  // dayOfMonth
+            0           // millisOfDay
+        );
+        // add the requested amount of the correct unit (months or days)
+        DurationFieldType durType = partial.getFieldType(fieldIndex).getDurationType();
+        instant = durType.getField(iChronology).add(instant, valueToAdd);
+        // extract back just the MonthDay fields
+        return iChronology.get(partial, instant);
+    }
+    // Original “contiguous” algorithm for all other partials
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+            instant = partial.getFieldType(i)
+                             .getField(iChronology)
+                             .set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
-        } else {
+    }
+    // Fallback for non‐contiguous partials
     return super.add(partial, fieldIndex, values, valueToAdd);
 }
\ No newline at end of file
-    }
