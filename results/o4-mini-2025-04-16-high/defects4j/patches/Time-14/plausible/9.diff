diff --git a/tmp/0869e303-fe48-4fb1-8d71-d69e997e908e_buggy.java b/tmp/1f1d1b95-544a-49b9-af4e-79cdaf32d7cc_fixed.java
index 10616db..9cfd76a 100644
--- a/tmp/0869e303-fe48-4fb1-8d71-d69e997e908e_buggy.java
+++ b/tmp/1f1d1b95-544a-49b9-af4e-79cdaf32d7cc_fixed.java
@@ -1,19 +1,26 @@
 //-----------------------------------------------------------------------
+@Override
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
+    // if nothing to add, just return
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+    // month/day (and other truly contiguous partials) can be handled
     if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+        // Use a leap‐year base (e.g. year 2000) so that FEB‐29 is valid
+        long instant = iChronology.year().set(0L, 2000);
+        // set all the partial fields on that base instant
         for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+            instant = partial.getFieldType(i)
+                             .getField(iChronology)
+                             .set(instant, values[i]);
         }
+        // do the actual add (months, days, etc.)
         instant = add(instant, valueToAdd);
+        // extract the fields back into an int[]
         return iChronology.get(partial, instant);
     } else {
+        // fall back to the default algorithm
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
