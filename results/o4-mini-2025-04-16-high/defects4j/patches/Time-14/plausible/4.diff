diff --git a/tmp/79c5cf22-19d6-4dfb-a907-9858ce42cb01_buggy.java b/tmp/b359ef70-ab98-4502-a3a7-b00507611261_fixed.java
index 10616db..6a09f9d 100644
--- a/tmp/79c5cf22-19d6-4dfb-a907-9858ce42cb01_buggy.java
+++ b/tmp/b359ef70-ab98-4502-a3a7-b00507611261_fixed.java
@@ -1,19 +1,27 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+        long instant;
+        // If the partial has a year field (e.g. YearMonth or YearMonthDay), start from epoch.
+        // Otherwise (e.g. MonthDay) pick a known leap‚Äêyear base so Feb 29 is valid.
+        if (partial.getFieldType(0).getDurationType() == org.joda.time.DurationFieldType.years()) {
+            instant = 0L;
+        } else {
+            instant = iChronology.getDateTimeMillis(2000, 1, 1, 0, 0, 0, 0);
+        }
+        // set all the fields
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
+        // do the add on the chosen field
         instant = add(instant, valueToAdd);
+        // extract the new partial values
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
