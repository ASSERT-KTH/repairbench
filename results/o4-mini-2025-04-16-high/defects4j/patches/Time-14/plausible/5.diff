diff --git a/tmp/fd2e49b0-1690-4499-b6af-2489bdd0b8c4_buggy.java b/tmp/d3325149-1141-4bb5-9bd5-509f73a41500_fixed.java
index 10616db..e5e0251 100644
--- a/tmp/fd2e49b0-1690-4499-b6af-2489bdd0b8c4_buggy.java
+++ b/tmp/d3325149-1141-4bb5-9bd5-509f73a41500_fixed.java
@@ -1,19 +1,29 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
+        long instant;
+        // If this partial has no year (i.e. it's a MonthDay or month‚Äêbased partial),
+        // seed a leap year so Feb-29 is valid.
+        if (partial.getFieldType(0) == DateTimeFieldType.monthOfYear()) {
+            // pick a known leap year (ISO rules) at midnight
+            instant = iChronology.getDateTimeMillis(2000, 1, 1, 0);
+        } else {
+            instant = 0L;
+        }
         for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+            instant = partial.getFieldType(i)
+                             .getField(iChronology)
+                             .set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
