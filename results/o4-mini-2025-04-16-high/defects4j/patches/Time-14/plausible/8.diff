diff --git a/tmp/e62ee9aa-8af6-47da-a29b-82f9d6436f21_buggy.java b/tmp/dc287d0b-bed2-45c0-8ab6-5432ba1bc7a8_fixed.java
index 10616db..438afc0 100644
--- a/tmp/e62ee9aa-8af6-47da-a29b-82f9d6436f21_buggy.java
+++ b/tmp/dc287d0b-bed2-45c0-8ab6-5432ba1bc7a8_fixed.java
@@ -1,19 +1,37 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
+        // If there's no year field but a dayOfMonth > 28, use a leap-year base
+        boolean needLeap = false;
+        DateTimeFieldType monthType = DateTimeFieldType.monthOfYear();
+        DateTimeFieldType dayType   = DateTimeFieldType.dayOfMonth();
+        if (partial.getFieldType(0).equals(monthType)) {
+            for (int i = 0, isize = partial.size(); i < isize; i++) {
+                if (partial.getFieldType(i).equals(dayType) && values[i] > 28) {
+                    needLeap = true;
+                    break;
+                }
+            }
+        }
+        if (needLeap) {
+            // Pick a leap year (2000) so Feb 29 is valid
+            instant = iChronology.year().set(instant, 2000);
+        }
+        // Set all the partial fields into the instant
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
+        // Perform the add on the instant and extract fields back
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
