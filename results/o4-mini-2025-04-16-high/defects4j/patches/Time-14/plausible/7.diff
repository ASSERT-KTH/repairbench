diff --git a/tmp/f8dff567-2d06-4ab2-aa54-0f5609d055fc_buggy.java b/tmp/ebf94a98-c082-4e4b-a2d4-1ef3d90c649d_fixed.java
index 10616db..b4b60dc 100644
--- a/tmp/f8dff567-2d06-4ab2-aa54-0f5609d055fc_buggy.java
+++ b/tmp/ebf94a98-c082-4e4b-a2d4-1ef3d90c649d_fixed.java
@@ -1,19 +1,29 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
+        // special‚Äêcase MonthDay (no year) so Feb 29 can be used
+        if (partial.size() == 2
+                && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())
+                && partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth())) {
+            // use a known leap year as the baseline (2000)
+            instant = DateTimeFieldType.year().getField(iChronology).set(instant, 2000);
+        }
+        // set each field in turn
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
-            instant = add(instant, valueToAdd);
+        // add the requested amount to the specified field
+        instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, valueToAdd);
+        // extract and return the new field values
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
