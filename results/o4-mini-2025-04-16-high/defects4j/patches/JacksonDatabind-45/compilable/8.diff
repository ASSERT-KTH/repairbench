diff --git a/tmp/0085a2a1-dd7a-42fb-9d1b-af84d2cb8d38_buggy.java b/tmp/75cd6af5-2e41-4832-b5f1-45c1d97ab160_fixed.java
index 0dbce00..c450f3e 100644
--- a/tmp/0085a2a1-dd7a-42fb-9d1b-af84d2cb8d38_buggy.java
+++ b/tmp/75cd6af5-2e41-4832-b5f1-45c1d97ab160_fixed.java
@@ -1,33 +1,57 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
+        // find any @JsonFormat on the property
+        JsonFormat.Value format = null;
         if (property != null) {
-            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());
-            if (format != null) {
+            format = serializers.getAnnotationIntrospector()
+                    .findFormat((Annotated) property.getMember());
+        }
+        // extract shape and flags
+        JsonFormat.Shape shape = (format == null) ? JsonFormat.Shape.ANY : format.getShape();
+        boolean hasPattern = (format != null && format.hasPattern());
+        boolean hasLocale  = (format != null && format.hasLocale());
+        boolean hasTimezone = (format != null && format.hasTimeZone());
 
-            	// Simple case first: serialize as numeric timestamp?
-                JsonFormat.Shape shape = format.getShape();
+        // explicit numeric shape always means timestamp
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
-
-                if (format.getShape() == JsonFormat.Shape.STRING) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-                    final Locale loc = format.hasLocale()
-                                    ? format.getLocale()
-                                    : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
+        // if "ANY", we may still force string if there is any pattern/locale/tz override
+        if (shape == JsonFormat.Shape.ANY) {
+            if (hasPattern || hasLocale || hasTimezone) {
+                shape = JsonFormat.Shape.STRING;
+            } else {
+                // fall back to global WRITE_DATES_AS_TIMESTAMPS setting
+                shape = serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)
+                        ? JsonFormat.Shape.NUMBER_INT
+                        : JsonFormat.Shape.STRING;
+            }
+        }
+        // second numeric check after ANYâ†’NUMBER_INT
+        if (shape.isNumeric()) {
+            return withFormat(Boolean.TRUE, null);
         }
+        // at this point we're doing STRING
+        // 1) explicit pattern
+        if (hasPattern) {
+            String pattern = format.getPattern();
+            Locale loc = hasLocale ? format.getLocale() : serializers.getLocale();
+            TimeZone tz = hasTimezone ? format.getTimeZone() : serializers.getTimeZone();
+            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
+        // 2) no pattern but locale or timezone override: use ISO8601 pattern with those settings
+        if (hasLocale || hasTimezone) {
+            String pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+            Locale loc = hasLocale ? format.getLocale() : serializers.getLocale();
+            TimeZone tz = hasTimezone ? format.getTimeZone() : serializers.getTimeZone();
+            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+            df.setTimeZone(tz);
+            return withFormat(Boolean.FALSE, df);
         }
-        }
-        return this;
+        // 3) plain string fallback (no annotation, or empty @JsonFormat): use default provider format
+        return withFormat(Boolean.FALSE, null);
     }
\ No newline at end of file
