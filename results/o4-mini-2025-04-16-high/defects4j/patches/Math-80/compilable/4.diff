diff --git a/tmp/227948cb-95e9-4788-889b-5367026edb51_buggy.java b/tmp/5a7fbdfa-9b7d-4b32-9128-a71b9541a1f9_fixed.java
index fbd0884..092c1f8 100644
--- a/tmp/227948cb-95e9-4788-889b-5367026edb51_buggy.java
+++ b/tmp/5a7fbdfa-9b7d-4b32-9128-a71b9541a1f9_fixed.java
@@ -1,23 +1,25 @@
 /**
  * Flip qd array if warranted.
  * @param n number of rows in the block
  * @param step within the array (1 for flipping all elements, 2 for flipping
  * only every other element)
  * @return true if qd array was flipped
  */
 private boolean flipIfWarranted(final int n, final int step) {
-        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
-            // flip array
-            int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
+    // compute start and end indices of the current ping‐pong array
+    final int start = pingPong;
+    final int end   = 4 * (n - 1) + pingPong;
+    // compare first and last element in the ping‐pong sequence
+    if (1.5 * work[start] < work[end]) {
+        // reverse the sequence of blocks of size 4, swapping only every 'step' entries
+        for (int i = start, j = end; i < j; i += 4, j -= 4) {
             for (int k = 0; k < 4; k += step) {
                 final double tmp     = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                work[i + k]          = work[j + k];
+                work[j + k]          = tmp;
             }
-                j -= 4;
         }
         return true;
     }
     return false;
 }
\ No newline at end of file
