diff --git a/tmp/37c125ac-33bc-489a-b345-c03b5ab0de9d_buggy.java b/tmp/146bf806-28cc-4eb7-af9b-fcbcba0defb9_fixed.java
index fbd0884..fd8401c 100644
--- a/tmp/37c125ac-33bc-489a-b345-c03b5ab0de9d_buggy.java
+++ b/tmp/146bf806-28cc-4eb7-af9b-fcbcba0defb9_fixed.java
@@ -1,23 +1,31 @@
 /**
  * Flip qd array if warranted.
  * @param n number of rows in the block
  * @param step within the array (1 for flipping all elements, 2 for flipping
  * only every other element)
  * @return true if qd array was flipped
  */
 private boolean flipIfWarranted(final int n, final int step) {
+    // test whether the "end" value dominates the "start" value
     if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
-            // flip array
+        /*
+         * We only need to swap floor(n/2) blocks when step==2
+         * (to avoid a self‐swap of the middle block when n is odd),
+         * but when step==1 we must run (n+1)/2 iterations to
+         * replicate the original full‐reverse behavior.
+         */
+        int numSwaps = (step == 1 ? (n + 1) / 2 : n / 2);
         int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
+        for (int s = 0; s < numSwaps; s++) {
+            int i = s * 4;
             for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
+                double tmp      = work[i + k];
                 work[i + k]     = work[j - k];
                 work[j - k]     = tmp;
             }
             j -= 4;
         }
         return true;
     }
     return false;
 }
\ No newline at end of file
