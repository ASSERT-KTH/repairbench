diff --git a/tmp/f9fc198e-4d2b-4c6d-8631-15eedf779e61_buggy.java b/tmp/08cd31c7-3c1c-4123-80c9-9fadfac84797_fixed.java
index abe09ae..aed87f1 100644
--- a/tmp/f9fc198e-4d2b-4c6d-8631-15eedf779e61_buggy.java
+++ b/tmp/08cd31c7-3c1c-4123-80c9-9fadfac84797_fixed.java
@@ -1,57 +1,44 @@
 @SuppressWarnings("unchecked")
 @Override
 public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
-        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
+    // try to see if we have a String value
     String text = p.getValueAsString();
-        if (text != null) { // has String representation
-            if (text.length() == 0 || (text = text.trim()).length() == 0) {
-                // 04-Feb-2013, tatu: Usually should become null; but not always
+    if (text != null) {
+        // trim or handle empty
+        text = text.trim();
+        if (text.isEmpty()) {
             return _deserializeFromEmptyString();
         }
-            Exception cause = null;
+        // try real conversion; allow null return as legitimate
         try {
-                // 19-May-2017, tatu: Used to require non-null result (assuming `null`
-                //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
             return _deserialize(text, ctxt);
-                }
-            } catch (IllegalArgumentException iae) {
-                cause = iae;
-            } catch (MalformedURLException me) {
-                cause = me;
-            }
+        } catch (IllegalArgumentException|MalformedURLException cause) {
+            // build failure message and let any ProblemHandler handle it
             String msg = "not a valid textual representation";
-            if (cause != null) {
-                String m2 = cause.getMessage();
-                if (m2 != null) {
-                    msg = msg + ", problem: "+m2;
+            String cm = cause.getMessage();
+            if (cm != null) {
+                msg += ", problem: " + cm;
             }
+            // will either return a handler‚Äêprovided value (possibly null),
+            // or throw a MismatchedInputException
+            return (T) ctxt.handleWeirdStringValue(_valueClass, text, msg);
         }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
-            if (cause != null) {
-                e.initCause(cause);
-            }
-            throw e;
-            // nothing to do here, yet? We'll fail anyway
     }
+    // if not a String, fall back on non-textual handling
     JsonToken t = p.getCurrentToken();
-        // [databind#381]
     if (t == JsonToken.START_ARRAY) {
         return _deserializeFromArray(p, ctxt);
     }
     if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
-            // Trivial cases; null to null, instance of type itself returned as is
         Object ob = p.getEmbeddedObject();
         if (ob == null) {
             return null;
         }
         if (_valueClass.isAssignableFrom(ob.getClass())) {
             return (T) ob;
         }
         return _deserializeEmbedded(ob, ctxt);
     }
     return (T) ctxt.handleUnexpectedToken(_valueClass, p);
 }
\ No newline at end of file
