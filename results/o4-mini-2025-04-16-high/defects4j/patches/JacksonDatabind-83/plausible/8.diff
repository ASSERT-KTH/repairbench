diff --git a/tmp/51751c5a-b9a1-469e-8cd9-d67a4a34148f_buggy.java b/tmp/319dfaae-2eb4-42a2-8295-95fc8f37b811_fixed.java
index abe09ae..6df97a5 100644
--- a/tmp/51751c5a-b9a1-469e-8cd9-d67a4a34148f_buggy.java
+++ b/tmp/319dfaae-2eb4-42a2-8295-95fc8f37b811_fixed.java
@@ -1,57 +1,54 @@
 @SuppressWarnings("unchecked")
 @Override
-    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
-    {
-        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
+public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+    // try coercion to String (covers String, numbers, booleans)
     String text = p.getValueAsString();
-        if (text != null) { // has String representation
+    if (text != null) {
         if (text.length() == 0 || (text = text.trim()).length() == 0) {
-                // 04-Feb-2013, tatu: Usually should become null; but not always
+            // empty or all-whitespace
             return _deserializeFromEmptyString();
         }
         Exception cause = null;
+        T value;
         try {
-                // 19-May-2017, tatu: Used to require non-null result (assuming `null`
-                //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
-                }
+            // delegate real parsing; may legitimately return null
+            value = _deserialize(text, ctxt);
+            return value;
         } catch (IllegalArgumentException iae) {
             cause = iae;
         } catch (MalformedURLException me) {
             cause = me;
         }
+        // did not parse cleanly, build a failure message
         String msg = "not a valid textual representation";
-            if (cause != null) {
-                String m2 = cause.getMessage();
-                if (m2 != null) {
-                    msg = msg + ", problem: "+m2;
+        if (cause != null && cause.getMessage() != null) {
+            msg += ", problem: " + cause.getMessage();
         }
-            }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
+        // allow user-registered ProblemHandler to handle this "weird" string
+        try {
+            return (T) ctxt.handleWeirdStringValue(_valueClass, text, msg);
+        } catch (JsonMappingException e) {
+            // if handler did not handle and threw, attach original cause
             if (cause != null) {
                 e.initCause(cause);
             }
             throw e;
-            // nothing to do here, yet? We'll fail anyway
         }
+    }
+    // no String representation: handle arrays or embedded object, or error out
     JsonToken t = p.getCurrentToken();
-        // [databind#381]
     if (t == JsonToken.START_ARRAY) {
         return _deserializeFromArray(p, ctxt);
     }
     if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
-            // Trivial cases; null to null, instance of type itself returned as is
         Object ob = p.getEmbeddedObject();
         if (ob == null) {
             return null;
         }
         if (_valueClass.isAssignableFrom(ob.getClass())) {
             return (T) ob;
         }
         return _deserializeEmbedded(ob, ctxt);
     }
     return (T) ctxt.handleUnexpectedToken(_valueClass, p);
 }
\ No newline at end of file
