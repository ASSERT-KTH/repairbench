diff --git a/tmp/f514c992-1bc6-4341-b9b6-cb448c33cb67_buggy.java b/tmp/9c76c29e-2305-4606-a2ca-8d454185f9fb_fixed.java
index eb0c9a2..49e913e 100644
--- a/tmp/f514c992-1bc6-4341-b9b6-cb448c33cb67_buggy.java
+++ b/tmp/9c76c29e-2305-4606-a2ca-8d454185f9fb_fixed.java
@@ -1,85 +1,89 @@
 /**
  * Update the index values for the maximum and minimum bounds.
  * 
  * @param period  the time period.
  * @param index   the index of the time period.
  */
 private void updateBounds(TimePeriod period, int index) {
-        
     long start = period.getStart().getTime();
     long end = period.getEnd().getTime();
     long middle = start + ((end - start) / 2);
 
+    // update min start
     if (this.minStartIndex >= 0) {
         long minStart = getDataItem(this.minStartIndex).getPeriod()
             .getStart().getTime();
         if (start < minStart) {
             this.minStartIndex = index;
         }
     }
     else {
         this.minStartIndex = index;
     }
 
+    // update max start
     if (this.maxStartIndex >= 0) {
         long maxStart = getDataItem(this.maxStartIndex).getPeriod()
             .getStart().getTime();
         if (start > maxStart) {
             this.maxStartIndex = index;
         }
     }
     else {
         this.maxStartIndex = index;
     }
 
+    // update min middle
     if (this.minMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long minMiddle = s + (e - s) / 2;
+        long s = getDataItem(this.minMiddleIndex).getPeriod()
+            .getStart().getTime();
+        long e = getDataItem(this.minMiddleIndex).getPeriod()
+            .getEnd().getTime();
+        long minMiddle = s + ((e - s) / 2);
         if (middle < minMiddle) {
             this.minMiddleIndex = index;
         }
     }
     else {
         this.minMiddleIndex = index;
     }
 
+    // update max middle (fixed: use maxMiddleIndex, not minMiddleIndex)
     if (this.maxMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long maxMiddle = s + (e - s) / 2;
+        long s = getDataItem(this.maxMiddleIndex).getPeriod()
+            .getStart().getTime();
+        long e = getDataItem(this.maxMiddleIndex).getPeriod()
+            .getEnd().getTime();
+        long maxMiddle = s + ((e - s) / 2);
         if (middle > maxMiddle) {
             this.maxMiddleIndex = index;
         }
     }
     else {
         this.maxMiddleIndex = index;
     }
 
+    // update min end
     if (this.minEndIndex >= 0) {
-            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()
-                .getTime();
+        long minEnd = getDataItem(this.minEndIndex).getPeriod()
+            .getEnd().getTime();
         if (end < minEnd) {
             this.minEndIndex = index;
         }
     }
     else {
         this.minEndIndex = index;
     }
 
+    // update max end
     if (this.maxEndIndex >= 0) {
-            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()
-                .getTime();
+        long maxEnd = getDataItem(this.maxEndIndex).getPeriod()
+            .getEnd().getTime();
         if (end > maxEnd) {
             this.maxEndIndex = index;
         }
     }
     else {
         this.maxEndIndex = index;
     }
-        
 }
\ No newline at end of file
