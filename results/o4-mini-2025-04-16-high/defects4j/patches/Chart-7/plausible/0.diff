diff --git a/tmp/d39058b7-f013-4a17-b3ab-168e7b3ff431_buggy.java b/tmp/ef988a09-7e09-4d79-bcd7-0e1e743cbf20_fixed.java
index eb0c9a2..84bb7a5 100644
--- a/tmp/d39058b7-f013-4a17-b3ab-168e7b3ff431_buggy.java
+++ b/tmp/ef988a09-7e09-4d79-bcd7-0e1e743cbf20_fixed.java
@@ -1,85 +1,83 @@
 /**
  * Update the index values for the maximum and minimum bounds.
  * 
  * @param period  the time period.
  * @param index   the index of the time period.
  */
 private void updateBounds(TimePeriod period, int index) {
-        
     long start = period.getStart().getTime();
     long end   = period.getEnd().getTime();
     long middle = start + ((end - start) / 2);
 
+    // min start
     if (this.minStartIndex >= 0) {
-            long minStart = getDataItem(this.minStartIndex).getPeriod()
+        long ms = getDataItem(this.minStartIndex).getPeriod()
                         .getStart().getTime();
-            if (start < minStart) {
+        if (start < ms) {
             this.minStartIndex = index;
         }
-        }
-        else {
+    } else {
         this.minStartIndex = index;
     }
 
+    // max start
     if (this.maxStartIndex >= 0) {
-            long maxStart = getDataItem(this.maxStartIndex).getPeriod()
+        long xs = getDataItem(this.maxStartIndex).getPeriod()
                         .getStart().getTime();
-            if (start > maxStart) {
+        if (start > xs) {
             this.maxStartIndex = index;
         }
-        }
-        else {
+    } else {
         this.maxStartIndex = index;
     }
 
+    // min middle
     if (this.minMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long minMiddle = s + (e - s) / 2;
-            if (middle < minMiddle) {
+        long s = getDataItem(this.minMiddleIndex).getPeriod()
+                        .getStart().getTime();
+        long e = getDataItem(this.minMiddleIndex).getPeriod()
+                        .getEnd().getTime();
+        long mm = s + ((e - s) / 2);
+        if (middle < mm) {
             this.minMiddleIndex = index;
         }
-        }
-        else {
+    } else {
         this.minMiddleIndex = index;
     }
 
+    // max middle (fixed to use maxMiddleIndex here)
     if (this.maxMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long maxMiddle = s + (e - s) / 2;
-            if (middle > maxMiddle) {
+        long s = getDataItem(this.maxMiddleIndex).getPeriod()
+                        .getStart().getTime();
+        long e = getDataItem(this.maxMiddleIndex).getPeriod()
+                        .getEnd().getTime();
+        long xm = s + ((e - s) / 2);
+        if (middle > xm) {
             this.maxMiddleIndex = index;
         }
-        }
-        else {
+    } else {
         this.maxMiddleIndex = index;
     }
 
+    // min end
     if (this.minEndIndex >= 0) {
-            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()
-                .getTime();
-            if (end < minEnd) {
+        long me = getDataItem(this.minEndIndex).getPeriod()
+                        .getEnd().getTime();
+        if (end < me) {
             this.minEndIndex = index;
         }
-        }
-        else {
+    } else {
         this.minEndIndex = index;
     }
 
+    // max end
     if (this.maxEndIndex >= 0) {
-            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()
-                .getTime();
-            if (end > maxEnd) {
+        long xe = getDataItem(this.maxEndIndex).getPeriod()
+                        .getEnd().getTime();
+        if (end > xe) {
             this.maxEndIndex = index;
         }
-        }
-        else {
+    } else {
         this.maxEndIndex = index;
     }
-        
 }
\ No newline at end of file
