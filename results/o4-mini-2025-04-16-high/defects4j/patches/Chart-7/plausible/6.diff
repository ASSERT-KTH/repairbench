diff --git a/tmp/2876cff0-99c7-438c-b8bc-9f6ed0faf8f4_buggy.java b/tmp/fc209fb5-2e59-438c-aab5-b53d0d3710a4_fixed.java
index eb0c9a2..1751ccd 100644
--- a/tmp/2876cff0-99c7-438c-b8bc-9f6ed0faf8f4_buggy.java
+++ b/tmp/fc209fb5-2e59-438c-aab5-b53d0d3710a4_fixed.java
@@ -1,85 +1,71 @@
-    /**
-     * Update the index values for the maximum and minimum bounds.
-     * 
-     * @param period  the time period.
-     * @param index  the index of the time period.
-     */
 private void updateBounds(TimePeriod period, int index) {
-        
     long start = period.getStart().getTime();
     long end   = period.getEnd().getTime();
     long middle = start + ((end - start) / 2);
 
+    // min start
     if (this.minStartIndex >= 0) {
-            long minStart = getDataItem(this.minStartIndex).getPeriod()
-                .getStart().getTime();
-            if (start < minStart) {
+        long ms = getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
+        if (start < ms) {
             this.minStartIndex = index;
         }
-        }
-        else {
+    } else {
         this.minStartIndex = index;
     }
 
+    // max start
     if (this.maxStartIndex >= 0) {
-            long maxStart = getDataItem(this.maxStartIndex).getPeriod()
-                .getStart().getTime();
-            if (start > maxStart) {
+        long MS = getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
+        if (start > MS) {
             this.maxStartIndex = index;
         }
-        }
-        else {
+    } else {
         this.maxStartIndex = index;
     }
 
+    // min middle
     if (this.minMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long minMiddle = s + (e - s) / 2;
-            if (middle < minMiddle) {
+        TimePeriod pm = getDataItem(this.minMiddleIndex).getPeriod();
+        long   s  = pm.getStart().getTime();
+        long   e  = pm.getEnd().getTime();
+        long   m0 = s + ((e - s) / 2);
+        if (middle < m0) {
             this.minMiddleIndex = index;
         }
-        }
-        else {
+    } else {
         this.minMiddleIndex = index;
     }
 
+    // max middle (fixed: refer to maxMiddleIndex, not minMiddleIndex)
     if (this.maxMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long maxMiddle = s + (e - s) / 2;
-            if (middle > maxMiddle) {
+        TimePeriod PM = getDataItem(this.maxMiddleIndex).getPeriod();
+        long   sM = PM.getStart().getTime();
+        long   eM = PM.getEnd().getTime();
+        long   M0 = sM + ((eM - sM) / 2);
+        if (middle > M0) {
             this.maxMiddleIndex = index;
         }
-        }
-        else {
+    } else {
         this.maxMiddleIndex = index;
     }
 
+    // min end
     if (this.minEndIndex >= 0) {
-            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()
-                .getTime();
-            if (end < minEnd) {
+        long me = getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
+        if (end < me) {
             this.minEndIndex = index;
         }
-        }
-        else {
+    } else {
         this.minEndIndex = index;
     }
 
+    // max end
     if (this.maxEndIndex >= 0) {
-            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()
-                .getTime();
-            if (end > maxEnd) {
+        long ME = getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
+        if (end > ME) {
             this.maxEndIndex = index;
         }
-        }
-        else {
+    } else {
         this.maxEndIndex = index;
     }
-        
 }
\ No newline at end of file
