diff --git a/tmp/4a668b96-5af1-4e71-a409-b4e5ac17bc15_buggy.java b/tmp/7827f45c-ac74-49e1-ad53-844f087e2b3d_fixed.java
index e81a2c6..c16ade2 100644
--- a/tmp/4a668b96-5af1-4e71-a409-b4e5ac17bc15_buggy.java
+++ b/tmp/7827f45c-ac74-49e1-ad53-844f087e2b3d_fixed.java
@@ -1,102 +1,93 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
     throws IOException
 {
-        // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped
-        //    value itself is NOT passed via `CreatorProperty` (which isn't supported).
-        //    Ok however to pass via setter or field.
-        
+    // Note: this IS legal to call, but only when unwrapped
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
+    // We'll buffer any unwrapped properties here
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+        p.nextToken(); // move to value
+        // is this a creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                // Last creator property to set?
+            // if this assignment completes all creator params, build bean
             if (buffer.assignParameter(creatorProp,
                     _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
+                // advance to next token (either FIELD_NAME or END_OBJECT)
+                t = p.nextToken();
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     bean = wrapInstantiationProblem(e, ctxt);
                 }
-                    // [databind#631]: Assign current value, to be accessible by custom serializers
+                // make it available to further deserializers
                 p.setCurrentValue(bean);
-                    // if so, need to copy all remaining tokens into buffer
+                // copy any remaining unwrapped fields
                 while (t == JsonToken.FIELD_NAME) {
-                        // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that
-                        p.nextToken();
+                    String name = p.getCurrentName();
+                    p.nextToken(); // move to the value/token for that name
+                    tokens.writeFieldName(name);
                     tokens.copyCurrentStructure(p);
                     t = p.nextToken();
                 }
-                    // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some
-                    //    problems if we maintain invariants
                 tokens.writeEndObject();
+                // no polymorphic variations for now
                 if (bean.getClass() != _beanType.getRawClass()) {
-                        // !!! 08-Jul-2011, tatu: Could probably support; but for now
-                        //   it's too complicated, so bail out
                     ctxt.reportInputMismatch(creatorProp,
                             "Cannot create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
             continue;
         }
-            // Object Id property?
+        // not a creator prop: maybe an Object Id?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
+        // or a regular property to buffer
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));
             continue;
         }
-            // Things marked as ignorable should not be passed to any setter
+        // ignorable?
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
-            // 29-Nov-2016, tatu: probably should try to avoid sending content
-            //    both to any setter AND buffer... but, for now, the only thing
-            //    we can do.
-            // how about any setter? We'll get copies but...
+        // else: unwrapped or any setter
         if (_anySetter == null) {
-                // but... others should be passed to unwrapped property deserializers
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
         } else {
-                // Need to copy to a separate buffer first
             TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
             tokens.writeFieldName(propName);
             tokens.append(b2);
             try {
                 buffer.bufferAnyProperty(_anySetter, propName,
                         _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));
             } catch (Exception e) {
                 wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
             }
-                continue;
         }
     }
 
-        // We hit END_OBJECT, so:
+    // no more fields: build normally, then apply unwrapped
     Object bean;
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         wrapInstantiationProblem(e, ctxt);
-            return null; // never gets here
+        return null; // never happens
     }
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
