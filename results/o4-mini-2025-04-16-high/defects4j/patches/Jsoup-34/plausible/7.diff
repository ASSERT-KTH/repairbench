diff --git a/tmp/59e8eae1-a764-4b29-b594-67d03571a476_buggy.java b/tmp/f78320e3-a0e6-4a41-b96b-16636740a0db_fixed.java
index 21f64c6..c83e27e 100644
--- a/tmp/59e8eae1-a764-4b29-b594-67d03571a476_buggy.java
+++ b/tmp/f78320e3-a0e6-4a41-b96b-16636740a0db_fixed.java
@@ -1,23 +1,26 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+    char first = seq.charAt(0);
+    int seqLen = seq.length();
+    // no need to scan positions where the full sequence won't fit
+    int max = length - seqLen;
+    for (int offset = pos; offset <= max; offset++) {
+        if (input[offset] != first) continue;
+        boolean match = true;
+        for (int j = 1; j < seqLen; j++) {
+            if (input[offset + j] != seq.charAt(j)) {
+                match = false;
+                break;
+            }
+        }
+        if (match) {
             return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
