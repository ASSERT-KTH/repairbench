diff --git a/tmp/77849277-51be-4764-ae12-c333d4d49ec8_buggy.java b/tmp/6dcab559-d204-468e-91ca-84c4d3311b29_fixed.java
index 21f64c6..582d537 100644
--- a/tmp/77849277-51be-4764-ae12-c333d4d49ec8_buggy.java
+++ b/tmp/6dcab559-d204-468e-91ca-84c4d3311b29_fixed.java
@@ -1,23 +1,24 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    int seqLen = seq.length();
+    // empty target trivially at current position
+    if (seqLen == 0) return 0;
+
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+    // last possible start is length - seqLen
+    int max = length - seqLen;
+    for (int offset = pos; offset <= max; offset++) {
+        // find the first char
+        if (input[offset] != startChar) 
+            continue;
+
+        // check the rest of the sequence
+        int j = 1;
+        while (j < seqLen && input[offset + j] == seq.charAt(j)) {
+            j++;
+        }
+        if (j == seqLen) {
             return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
