diff --git a/tmp/6584c48c-6642-4a19-9706-5b4e0c70c80b_buggy.java b/tmp/c73b279d-b40f-465f-8d08-48f6b40f4836_fixed.java
index 21f64c6..38b7297 100644
--- a/tmp/6584c48c-6642-4a19-9706-5b4e0c70c80b_buggy.java
+++ b/tmp/c73b279d-b40f-465f-8d08-48f6b40f4836_fixed.java
@@ -1,23 +1,20 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+    char first = seq.charAt(0);
+    int seqLen = seq.length();
+    // only scan up to a point where the full sequence could fit
+    int max = length - seqLen;
+    for (int offset = pos; offset <= max; offset++) {
+        if (input[offset] != first) {
+            continue;
+        }
+        int i = 1;
+        // check the rest of the sequence
+        while (i < seqLen && input[offset + i] == seq.charAt(i)) {
+            i++;
+        }
+        if (i == seqLen) {
             return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
