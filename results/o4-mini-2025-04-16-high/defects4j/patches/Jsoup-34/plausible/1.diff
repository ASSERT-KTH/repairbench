diff --git a/tmp/2a400a04-8def-4297-9907-18c0c6933d97_buggy.java b/tmp/6e486cda-5b5b-4899-bad2-0d0ff3ac59d3_fixed.java
index 21f64c6..5b16530 100644
--- a/tmp/2a400a04-8def-4297-9907-18c0c6933d97_buggy.java
+++ b/tmp/6e486cda-5b5b-4899-bad2-0d0ff3ac59d3_fixed.java
@@ -1,23 +1,29 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    char first = seq.charAt(0);
+    int seqLen = seq.length();
+    // the last index where a full seq could start
+    int max = length - seqLen;
+    for (int offset = pos; offset <= max; offset++) {
+        // skip until we find the first char
+        if (input[offset] != first) {
+            while (++offset <= max && input[offset] != first) ;
+        }
+        if (offset > max) break;
+        // we have a candidate at input[offset]; check the rest
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int j = 1;
+        while (j < seqLen && input[i] == seq.charAt(j)) {
+            i++; j++;
+        }
+        if (j == seqLen) {
             return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
