diff --git a/tmp/50eb72b5-ebf8-4c27-a3db-e3ec50080d6e_buggy.java b/tmp/dbcbc513-cb03-4a32-a63b-a8d3e971d228_fixed.java
index 6b09955..c8063fa 100644
--- a/tmp/50eb72b5-ebf8-4c27-a3db-e3ec50080d6e_buggy.java
+++ b/tmp/dbcbc513-cb03-4a32-a63b-a8d3e971d228_fixed.java
@@ -1,121 +1,81 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
-        // Get initial solution
+    // initial endpoints
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // check for exact root at endpoints
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
-        // Verify bracketing of initial solution.
+    // must bracket
     verifyBracketing(x0, x1);
 
-        // Get accuracies.
+    // tolerances
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
-        boolean inverted = false;
+    double x = Double.NaN;
+    double fx;
 
-        // Keep finding better approximations.
+    // iteration
     while (true) {
-            // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
-            final double fx = computeObjectiveValue(x);
+        // false position step
+        x = x1 - (f1 * (x1 - x0)) / (f1 - f0);
+        fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+        // exact root?
         if (fx == 0.0) {
             return x;
         }
 
-            // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
-            } else {
-                switch (method) {
-                case ILLINOIS:
-                    f0 *= 0.5;
-                    break;
-                case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
-                    break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
-                default:
-                    // Should never happen.
-                }
-            }
-            // Update from [x0, x1] to [x0, x].
+        // update bracket and scale stale endpoint
+        if (f0 * fx < 0.0) {
+            // root is in [x0, x]
             x1 = x;
             f1 = fx;
-
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
+            // scale f0 (stationary) for Illinois/Pegasus
+            switch (method) {
+            case ILLINOIS:
+                f0 *= 0.5;
                 break;
-                case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
+            case PEGASUS:
+                f0 *= fx / (f0 + fx);
                 break;
-                case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
+            default:
+                // no other methods
+            }
+        } else {
+            // root is in [x, x1]
+            x0 = x;
+            f0 = fx;
+            // scale f1 (stationary) for Illinois/Pegasus
+            switch (method) {
+            case ILLINOIS:
+                f1 *= 0.5;
                 break;
-                case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
+            case PEGASUS:
+                f1 *= fx / (f1 + fx);
                 break;
             default:
-                    throw new MathInternalError();
+                // no other methods
             }
         }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    return inverted ? x1 : x0;
-                case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
-                case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
-                case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
-                default:
-                    throw new MathInternalError();
+        // convergence on function value
+        if (FastMath.abs(fx) <= ftol) {
+            return x;
         }
+        // convergence on x
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x), atol)) {
+            return x;
         }
     }
 }
\ No newline at end of file
