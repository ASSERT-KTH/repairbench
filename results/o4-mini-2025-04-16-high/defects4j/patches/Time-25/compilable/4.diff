diff --git a/tmp/29b5415e-9015-4c5a-86da-b044a79feb7b_buggy.java b/tmp/dbc18265-534a-4289-a008-9219c1ee0569_fixed.java
index 05aaf2d..ceb6e96 100644
--- a/tmp/29b5415e-9015-4c5a-86da-b044a79feb7b_buggy.java
+++ b/tmp/dbc18265-534a-4289-a008-9219c1ee0569_fixed.java
@@ -1,56 +1,40 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
 public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
+    // First estimate: treat instantLocal as UTC to get an initial offset
     final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
     final long instantAdjusted = instantLocal - offsetLocal;
     final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+
+    // 1) Handle DST‐overlap (fall‐back) where a local time repeats.
+    //    We find the last transition before our adjusted instant,
+    //    compute the two local times just before/after the transition,
+    //    and if instantLocal lies in the overlap interval we choose
+    //    the larger offset (i.e. daylight time).
+    long prevTrans = previousTransition(instantAdjusted);
+    if (prevTrans != instantAdjusted) {
+        int offsetBefore = getOffset(prevTrans - 1);
+        int offsetAfter = getOffset(prevTrans);
+        if (offsetAfter < offsetBefore) {
+            long localAfter = prevTrans + offsetAfter;
+            long localBefore = prevTrans + offsetBefore;
+            if (instantLocal >= localAfter && instantLocal < localBefore) {
+                // ambiguous – favour daylight (summer) time
+                return Math.max(offsetBefore, offsetAfter);
+            }
+        }
+    }
+
+    // 2) Handle DST‐gap (spring‐forward) using the original logic.
     if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+        if (offsetLocal < offsetAdjusted) {
             long nextLocal = nextTransition(instantAdjusted);
             long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
             if (nextLocal != nextAdjusted) {
+                // in the gap, return the original estimate
                 return offsetLocal;
             }
         }
     }
+
+    // 3) Normal case
     return offsetAdjusted;
 }
\ No newline at end of file
