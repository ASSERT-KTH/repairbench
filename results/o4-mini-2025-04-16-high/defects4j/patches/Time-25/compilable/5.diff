diff --git a/tmp/c669b8c8-3eee-42a7-8709-7b7e4da529d6_buggy.java b/tmp/6fbda564-92b0-44dc-8ee7-efa86faf40f8_fixed.java
index 05aaf2d..744f7af 100644
--- a/tmp/c669b8c8-3eee-42a7-8709-7b7e4da529d6_buggy.java
+++ b/tmp/6fbda564-92b0-44dc-8ee7-efa86faf40f8_fixed.java
@@ -1,56 +1,44 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
 public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
+    // First estimate using the naive UTC‐based offset
     final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
+    // Apply that estimate to get a candidate UTC instant
     final long instantAdjusted = instantLocal - offsetLocal;
+    // Recalculate the offset based on the candidate UTC instant
     final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+
     if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+        // We’re near a DST boundary: either a gap or an overlap
+        int diff = offsetLocal - offsetAdjusted;
+        if (diff < 0) {
+            // DST gap (spring forward): favour the later offset to land
+            // after the missing local interval
             long nextLocal    = nextTransition(instantAdjusted);
             long nextAdjusted= nextTransition(instantLocal - offsetAdjusted);
             if (nextLocal != nextAdjusted) {
                 return offsetLocal;
             }
+        } else {
+            // DST overlap (fall back) detected by differing offsets:
+            // favour the earlier instant (i.e. the larger, DST offset)
+            return offsetLocal;
         }
+    } else {
+        // Offsets are equal under naive mapping—could still be an overlap
+        // Find the last transition before our candidate UTC instant
+        long trans = previousTransition(instantAdjusted + 1);
+        int before = getOffset(trans - 1);
+        int after  = getOffset(trans + 1);
+        // A downward jump in the offset indicates an overlap
+        if (before > after) {
+            long overlapStartLocal = trans + after;
+            long overlapEndLocal   = trans + before;
+            // If our local instant falls in that ambiguous window,
+            // pick the earlier occurrence (the larger, DST offset)
+            if (instantLocal >= overlapStartLocal && instantLocal < overlapEndLocal) {
+                return before;
             }
+        }
+    }
+    // Default: no special case, return the refined offset
     return offsetAdjusted;
 }
\ No newline at end of file
