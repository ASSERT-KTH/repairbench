diff --git a/tmp/0fc74346-325e-4033-9eec-fc9b3d010c2c_buggy.java b/tmp/12b2af41-f427-428c-8781-d2db45fb0375_fixed.java
index 05aaf2d..31cbe3b 100644
--- a/tmp/0fc74346-325e-4033-9eec-fc9b3d010c2c_buggy.java
+++ b/tmp/12b2af41-f427-428c-8781-d2db45fb0375_fixed.java
@@ -1,56 +1,36 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
 public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
+    // First estimate offset and adjust
     final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
     final long instantAdjusted = instantLocal - offsetLocal;
     final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+
+    // 1) Detect an overlap (when clocks go back) and choose the earlier offset (the larger one)
+    //    f = u + getOffset(u); in an overlap getOffset drops, so f zig-zags backwards.
+    //    The overlap interval in local time is [t + newOffset, t + oldOffset).
+    long candidateUTC = instantLocal - offsetAdjusted;
+    long prevTrans = previousTransition(candidateUTC);
+    if (prevTrans != candidateUTC) {
+        int offsetBefore = getOffset(prevTrans - 1);
+        int offsetAfter = getOffset(prevTrans);
+        if (offsetBefore > offsetAfter) {
+            long overlapStart = prevTrans + offsetAfter;
+            long overlapEnd   = prevTrans + offsetBefore;
+            if (instantLocal >= overlapStart && instantLocal < overlapEnd) {
+                // return the earlier instant's offset (offsetBefore), which is the larger/DST offset
+                return offsetBefore;
+            }
+        }
+    }
+
+    // 2) Handle a gap (when clocks go forward) as before
+    if (offsetLocal != offsetAdjusted && offsetLocal < offsetAdjusted) {
         long nextLocal    = nextTransition(instantAdjusted);
         long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
         if (nextLocal != nextAdjusted) {
             return offsetLocal;
         }
     }
-        }
+
+    // 3) Normal case
     return offsetAdjusted;
 }
\ No newline at end of file
