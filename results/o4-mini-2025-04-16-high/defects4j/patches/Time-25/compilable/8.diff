diff --git a/tmp/688df0d8-e775-4623-ab21-cbe67e4d4b61_buggy.java b/tmp/b5e0bb83-c833-4bba-8541-37c5bb7df8d8_fixed.java
index 05aaf2d..61f0ae1 100644
--- a/tmp/688df0d8-e775-4623-ab21-cbe67e4d4b61_buggy.java
+++ b/tmp/b5e0bb83-c833-4bba-8541-37c5bb7df8d8_fixed.java
@@ -1,56 +1,63 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
 public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
-        final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
-        final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
-                }
-            }
-        }
-        return offsetAdjusted;
+    // First guess: treat the input as if it were UTC to get an initial offset
+    int offsetLocal = getOffset(instantLocal);
+    // Convert that guess back to UTC
+    long instantAdjusted = instantLocal - offsetLocal;
+    // Get the real offset at that UTC instant
+    int offsetAdjusted = getOffset(instantAdjusted);
+    // Start with the adjusted offset as the default result
+    int result = offsetAdjusted;
+
+    // Examine the previous transition around the adjusted UTC instant
+    long prev = previousTransition(instantAdjusted);
+    if (prev != instantAdjusted) {
+        int before = getOffset(prev - 1);
+        int after  = getOffset(prev + 1);
+        if (before != after) {
+            if (before < after) {
+                // Gap: clocks jumped forward
+                long localStart = prev + before;
+                long localEnd   = prev + after;
+                if (instantLocal >= localStart && instantLocal < localEnd) {
+                    // Invalid local time, choose the later offset (after the gap)
+                    return after;
+                }
+            } else {
+                // Overlap: clocks rolled back
+                long localStart = prev + after;
+                long localEnd   = prev + before;
+                if (instantLocal >= localStart && instantLocal < localEnd) {
+                    // Ambiguous local time, choose the earlier instant (larger offset)
+                    return before;
+                }
+            }
+        }
+    }
+
+    // Examine the next transition around the adjusted UTC instant
+    long next = nextTransition(instantAdjusted);
+    if (next != instantAdjusted) {
+        int before = getOffset(next - 1);
+        int after  = getOffset(next + 1);
+        if (before != after) {
+            if (before < after) {
+                // Gap: clocks jumped forward
+                long localStart = next + before;
+                long localEnd   = next + after;
+                if (instantLocal >= localStart && instantLocal < localEnd) {
+                    return after;
+                }
+            } else {
+                // Overlap: clocks rolled back
+                long localStart = next + after;
+                long localEnd   = next + before;
+                if (instantLocal >= localStart && instantLocal < localEnd) {
+                    return before;
+                }
+            }
+        }
+    }
+
+    // No special case, return the adjusted offset
+    return result;
 }
\ No newline at end of file
