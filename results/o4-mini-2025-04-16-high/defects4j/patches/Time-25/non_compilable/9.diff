diff --git a/tmp/07b4b946-2d90-4472-8b1a-d74e4d21f15e_buggy.java b/tmp/00b7f506-48c9-4173-9403-05b74b9fe5c6_fixed.java
index 05aaf2d..0bc709b 100644
--- a/tmp/07b4b946-2d90-4472-8b1a-d74e4d21f15e_buggy.java
+++ b/tmp/00b7f506-48c9-4173-9403-05b74b9fe5c6_fixed.java
@@ -1,56 +1,46 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
+@Override
 public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
+    // First estimate of the offset, treating instantLocal as if it were UTC
     final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
+    // Adjust the instant by subtracting that estimate to get a provisional UTC instant
     final long instantAdjusted = instantLocal - offsetLocal;
+    // Re‐fetch the offset for the provisional UTC instant
     final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+
+    // If the two offsets differ, we must be right at a DST boundary (gap or overlap)
     if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+        // --- DST‐gap case (spring forward): offset jumps up ---
+        if (offsetLocal < offsetAdjusted) {
+            // If the two nextTransition() calls differ, we're in the gap
             long nextLocal    = nextTransition(instantAdjusted);
             long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
             if (nextLocal != nextAdjusted) {
+                // In a gap we always favour the later offsetLocal
                 return offsetLocal;
             }
         }
+        // Otherwise (or if not in a gap) return the adjusted offset
+        return offsetAdjusted;
+    }
+
+    // --- Possible DST overlap (fall back): offsets are equal but local time may be ambiguous ---
+    // Look for the last transition before our provisional UTC instant
+    long prev = previousTransition(instantAdjusted);
+    // Offsets immediately before and after that transition
+    int offsetBefore = getOffset(prev - 1);
+    int offsetAfter  = getOffset(prev + 1);
+
+    // If the offset decreased at that transition, we have an overlap window
+    if (offsetAfter < offsetBefore) {
+        // Compute the local‐time interval of the overlap
+        long overlapStart = prev + offsetAfter;
+        long overlapEnd   = prev + offsetBefore;
+        // If our local instant falls into that window, choose the earlier (larger) offset
+        if (instantLocal >= overlapStart && instantLocal < overlapEnd) {
+            return offsetBefore;
+        }
     }
+
+    // In all other cases, return the adjusted offset
     return offsetAdjusted;
 }
\ No newline at end of file
