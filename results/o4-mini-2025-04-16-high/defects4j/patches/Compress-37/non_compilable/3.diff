diff --git a/tmp/cd6ff7a5-2683-4d86-97c8-73541c7535f6_buggy.java b/tmp/e2070ee8-ee2c-4718-9644-e5ee63e583cc_fixed.java
index 4b7e1e4..7951a85 100644
--- a/tmp/cd6ff7a5-2683-4d86-97c8-73541c7535f6_buggy.java
+++ b/tmp/e2070ee8-ee2c-4718-9644-e5ee63e583cc_fixed.java
@@ -1,52 +1,85 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
-        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
+    final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
+    while (true) {
         int ch;
-            int len = 0;
-            int read = 0;
-            while((ch = i.read()) != -1) {
+        // 1) skip any stray blank lines
+        do {
+            ch = i.read();
+            if (ch == -1) {
+                return headers;
+            }
+        } while (ch == '\n');
+        // 2) if it doesn't start with a digit, skip the rest of the line
+        if (ch < '0' || ch > '9') {
+            while (ch != -1 && ch != '\n') {
+                ch = i.read();
+            }
+            continue;
+        }
+        // 3) parse the length field
+        int len = ch - '0';
+        int read = 1;
+        while (true) {
+            ch = i.read();
+            if (ch == -1) {
+                return headers;
+            }
+            if (ch >= '0' && ch <= '9') {
+                len = len * 10 + (ch - '0');
                 read++;
-                if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
+            } else {
+                break;
+            }
+        }
+        // if not followed by a space, it's malformed; skip to line end
+        if (ch != ' ') {
+            while (ch != -1 && ch != '\n') {
+                ch = i.read();
+            }
+            continue;
+        }
+        // consume the space
         read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
+        // 4) read the keyword up to '='
+        final ByteArrayOutputStream keyBuf = new ByteArrayOutputStream();
+        while (true) {
+            ch = i.read();
+            if (ch == -1) {
+                return headers;
+            }
+            read++;
+            if (ch == '=') {
+                break;
+            }
+            keyBuf.write((byte) ch);
+        }
+        final String keyword = keyBuf.toString(CharsetNames.UTF_8);
+        // 5) compute how many bytes remain in this record (value + newline)
         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+        if (restLen <= 0) {
+            // malformed or no payload, skip to end of line
+            while (ch != -1 && ch != '\n') {
+                ch = i.read();
+            }
+            continue;
+        }
+        if (restLen == 1) {
+            // only a newline => treat as deletion
+            i.read(); // consume the '\n'
             headers.remove(keyword);
         } else {
+            // read value bytes (including trailing '\n')
             final byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                throw new IOException("Failed to read PAX header. Expected "
+                                      + restLen + " bytes, read " + got);
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            // drop the trailing newline
+            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
     }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
-        }
-        return headers;
 }
\ No newline at end of file
