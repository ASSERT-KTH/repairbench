diff --git a/tmp/6a8ab21b-7e46-46e3-80df-4a8e4471fb70_buggy.java b/tmp/80bced47-b334-45e9-be36-2e40850e7a8f_fixed.java
index 4b7e1e4..f29fe95 100644
--- a/tmp/6a8ab21b-7e46-46e3-80df-4a8e4471fb70_buggy.java
+++ b/tmp/80bced47-b334-45e9-be36-2e40850e7a8f_fixed.java
@@ -1,52 +1,74 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
-            int len = 0;
-            int read = 0;
-            while((ch = i.read()) != -1) {
+    // Each record is "length keyword=value\n". We skip blank lines.
+    for (;;) {
+        int b = i.read();
+        if (b == -1) {
+            break;                // end of extended header stream
+        }
+        if (b == '\n') {
+            continue;             // skip blank lines
+        }
+        // First byte of length must be a digit
+        if (b < '0' || b > '9') {
+            // skip until end of this line
+            while (b != -1 && b != '\n') {
+                b = i.read();
+            }
+            continue;
+        }
+        // Parse the length field
+        int len = b - '0';
+        int read = 1;             // we've consumed one byte of the length
+        while ((b = i.read()) != -1 && b != ' ') {
+            if (b < '0' || b > '9') {
+                throw new IOException("Invalid PAX header length");
+            }
+            len = len * 10 + (b - '0');
             read++;
-                if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
+        }
+        if (b == -1) {
+            break;
+        }
+        read++;                    // count the space
+
+        // Read the keyword up to '='
+        final ByteArrayOutputStream keyBuf = new ByteArrayOutputStream();
+        while ((b = i.read()) != -1 && b != '=') {
+            keyBuf.write(b);
             read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
+        }
+        if (b == -1) {
+            break;
+        }
+        read++;                    // count the '='
+        final String key = keyBuf.toString(CharsetNames.UTF_8);
+
+        // Remaining bytes (value + trailing newline)
+        final int rest = len - read;
+        if (rest < 0) {
+            throw new IOException("Invalid PAX header length " + len
+                                  + " is less than header name length " + read);
+        }
+        if (rest == 1) {
+            // only a newline => remove this key
+            if (i.read() == -1) {
+                throw new IOException("Unexpected EOF reading PAX header");
+            }
+            headers.remove(key);
         } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
-                            }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
+            final byte[] data = new byte[rest];
+            int got = IOUtils.readFully(i, data);
+            if (got != rest) {
+                throw new IOException("Failed to read Paxheader. Expected "
+                                      + rest + " bytes, read " + got);
+            }
+            // drop the trailing newline
+            final String value = new String(data, 0, rest - 1, CharsetNames.UTF_8);
+            headers.put(key, value);
         }
     }
     return headers;
 }
\ No newline at end of file
