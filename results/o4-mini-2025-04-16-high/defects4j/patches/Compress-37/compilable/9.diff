diff --git a/tmp/e39b861e-3fdd-4715-b22c-af4df54c0be8_buggy.java b/tmp/92ecfe82-6a08-4354-97ea-3f1ae8623c73_fixed.java
index 4b7e1e4..080aeef 100644
--- a/tmp/e39b861e-3fdd-4715-b22c-af4df54c0be8_buggy.java
+++ b/tmp/92ecfe82-6a08-4354-97ea-3f1ae8623c73_fixed.java
@@ -1,52 +1,46 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
+    // start with any existing global Pax headers
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
-            int len = 0;
-            int read = 0;
-            while((ch = i.read()) != -1) {
-                read++;
-                if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
+    // slurp the entire Pax header block into memory
+    ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    byte[] buffer = new byte[8192];
+    int n;
+    while ((n = i.read(buffer)) != -1) {
+        baos.write(buffer, 0, n);
+    }
+    // decode as UTF-8 and split on newline
+    String all = new String(baos.toByteArray(), CharsetNames.UTF_8);
+    for (String line : all.split("\n")) {
+        // skip blank lines
+        if (line.trim().isEmpty()) {
+            continue;
+        }
+        // each record is "<len> <keyword>=<value>"
+        int sp = line.indexOf(' ');
+        if (sp <= 0) {
+            continue;
+        }
+        String lenStr = line.substring(0, sp);
+        // sanity‐check length field
+        try {
+            Integer.parseInt(lenStr);
+        } catch (NumberFormatException ex) {
+            continue;
+        }
+        String rest = line.substring(sp + 1);
+        int eq = rest.indexOf('=');
+        if (eq < 0) {
+            continue;
+        }
+        String key = rest.substring(0, eq);
+        String value = rest.substring(eq + 1);
+        // empty value means "remove" this key
+        if (value.isEmpty()) {
+            headers.remove(key);
         } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
-                            }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
+            headers.put(key, value);
         }
     }
     return headers;
 }
\ No newline at end of file
