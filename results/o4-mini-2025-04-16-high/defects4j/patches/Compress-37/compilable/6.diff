diff --git a/tmp/a4b4e104-7c57-4e27-ae4c-9bcaaf30625c_buggy.java b/tmp/2703d6ec-ea4f-439e-a2e6-2dd31da103aa_fixed.java
index 4b7e1e4..f043936 100644
--- a/tmp/a4b4e104-7c57-4e27-ae4c-9bcaaf30625c_buggy.java
+++ b/tmp/2703d6ec-ea4f-439e-a2e6-2dd31da103aa_fixed.java
@@ -1,52 +1,70 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
-            int len = 0;
-            int read = 0;
-            while((ch = i.read()) != -1) {
-                read++;
-                if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
+    while (true) {
+        int ch = i.read();
+        if (ch == -1) {
+            break;
+        }
+        // skip blank lines
+        if (ch == '\n') {
+            continue;
+        }
+        // if not a digit, skip until end of line
+        if (ch < '0' || ch > '9') {
+            while (ch != -1 && ch != '\n') {
+                ch = i.read();
+            }
+            continue;
+        }
+        // parse the length field
+        int len = ch - '0';
+        int digits = 1;
+        while ((ch = i.read()) != -1 && ch != ' ') {
+            if (ch < '0' || ch > '9') {
+                // malformed length, skip to end of line
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                break;
+            }
+            len = len * 10 + (ch - '0');
+            digits++;
+        }
+        if (ch == -1) {
+            break;
+        }
+        // compute how many bytes remain in this record
+        int restLen = len - digits - 1; // minus digits and the space
+        if (restLen <= 0) {
+            // nothing or malformed, skip remainder of line if any
+            if (restLen < 0) {
+                while ((ch = i.read()) != -1 && ch != '\n') {
+                    // skip
+                }
+            }
+            continue;
+        }
+        // read the rest of the record (key=value\n or just "\n")
+        byte[] rest = new byte[restLen];
+        int got = IOUtils.readFully(i, rest);
         if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+            throw new IOException("Failed to read Paxheader. Expected "
+                                  + restLen + " bytes, read " + got);
+        }
+        // drop the trailing NL
+        String entry = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
+        int idx = entry.indexOf('=');
+        if (idx != -1) {
+            String key = entry.substring(0, idx);
+            String value = entry.substring(idx + 1);
+            if (value.length() == 0) {
+                headers.remove(key);
+            } else {
+                headers.put(key, value);
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
-                            }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
         }
     }
     return headers;
 }
\ No newline at end of file
