diff --git a/tmp/f15e2864-3660-47e3-a6d4-329e2b2d423a_buggy.java b/tmp/3fbbdc3e-f865-4e46-8007-c61013b50951_fixed.java
index 4b7e1e4..7b9bcbb 100644
--- a/tmp/f15e2864-3660-47e3-a6d4-329e2b2d423a_buggy.java
+++ b/tmp/3fbbdc3e-f865-4e46-8007-c61013b50951_fixed.java
@@ -1,52 +1,57 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
-        while(true){ // get length
+    while (true) {
         int ch;
         int len = 0;
         int read = 0;
+        // Read the length field, but skip any blank lines (CR/LF)
         while ((ch = i.read()) != -1) {
+            if (read == 0 && (ch == '\n' || ch == '\r')) {
+                // blank line – skip it and restart length parsing
+                break;
+            }
             read++;
             if (ch == ' ') {
-                    // Get keyword
+                // end of the length, now read "keyword=value\n"
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
-                        if (ch == '='){ // end of keyword
+                    if (ch == '=') {
                         final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                        if (restLen == 1) {
+                            // only a trailing newline → remove the header
                             headers.remove(keyword);
-                            } else {
+                        } else if (restLen > 1) {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                                throw new IOException("Failed to read Paxheader. Expected "
+                                        + restLen + " bytes, read " + got);
                             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                            // drop trailing newline
+                            String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
-                    break; // Processed single header
+                break; // processed one header record
             }
-                len *= 10;
-                len += ch - '0';
+            // if it's not a digit, skip to end of line and restart
+            if (ch < '0' || ch > '9') {
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
                 }
-            if (ch == -1){ // EOF
+                break;
+            }
+            len = len * 10 + (ch - '0');
+        }
+        if (ch == -1) {
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
