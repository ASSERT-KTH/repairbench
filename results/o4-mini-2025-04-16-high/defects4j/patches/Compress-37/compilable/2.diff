diff --git a/tmp/2106f746-50dd-452c-a13b-e3ade1f432c0_buggy.java b/tmp/50b9c608-7671-4116-b75b-663bd95617da_fixed.java
index 4b7e1e4..6542850 100644
--- a/tmp/2106f746-50dd-452c-a13b-e3ade1f432c0_buggy.java
+++ b/tmp/50b9c608-7671-4116-b75b-663bd95617da_fixed.java
@@ -1,52 +1,87 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
-            int len = 0;
-            int read = 0;
-            while((ch = i.read()) != -1) {
+    int c;
+    while (true) {
+        // Read first byte of the next record
+        c = i.read();
+        if (c == -1) {
+            // End of the pax header stream
+            break;
+        }
+        // Skip blank lines or stray CR/LF
+        if (c == '\n' || c == '\r') {
+            continue;
+        }
+        // First non‚Äêblank char must be a digit (the length); otherwise skip to EOL
+        if (c < '0' || c > '9') {
+            do {
+                c = i.read();
+            } while (c != -1 && c != '\n');
+            continue;
+        }
+        // Parse the length field
+        int len = c - '0';
+        int read = 1;
+        while ((c = i.read()) != -1) {
             read++;
-                if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
+            if (c == ' ') {
+                break;
+            }
+            if (c >= '0' && c <= '9') {
+                len = len * 10 + (c - '0');
+            } else {
+                // Malformed length, skip rest of line
+                while (c != -1 && c != '\n') {
+                    c = i.read();
+                }
+                len = 0;
+                read = 0;
+                break;
+            }
+        }
+        if (c == -1) {
+            break;
+        }
+        if (read == 0) {
+            // We skipped a bad length line; go on to the next
+            continue;
+        }
+        // Read the keyword up to '='
+        final ByteArrayOutputStream keyBuf = new ByteArrayOutputStream();
+        while ((c = i.read()) != -1) {
             read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
+            if (c == '=') {
+                break;
+            }
+            keyBuf.write(c);
+        }
+        if (c == -1) {
+            break;
+        }
+        final String keyword = keyBuf.toString(CharsetNames.UTF_8);
+        // Compute how many bytes remain in this record (value + trailing newline)
         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+        if (restLen <= 0) {
+            // Nothing or malformed, skip
+            continue;
+        }
+        if (restLen == 1) {
+            // Only a newline remains => delete this key
+            i.read(); // consume the lone '\n'
             headers.remove(keyword);
         } else {
+            // Read value + newline
             final byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                throw new IOException("Failed to read Paxheader. Expected "
+                                      + restLen + " bytes, read " + got);
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            // Drop the trailing newline
+            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
