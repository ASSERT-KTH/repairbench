diff --git a/tmp/59e27235-e2be-491d-959e-de30342b72a7_buggy.java b/tmp/5cc2b64b-f9ba-407e-9aff-719af8576739_fixed.java
index 4b7e1e4..78dc3ee 100644
--- a/tmp/59e27235-e2be-491d-959e-de30342b72a7_buggy.java
+++ b/tmp/5cc2b64b-f9ba-407e-9aff-719af8576739_fixed.java
@@ -1,52 +1,84 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
-            int len = 0;
-            int read = 0;
-            while((ch = i.read()) != -1) {
-                read++;
-                if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+    while (true) {
+        // Read and skip blank lines (CR/LF)
+        int c = i.read();
+        if (c == -1) {
+            break;
+        }
+        while (c == '\n' || c == '\r') {
+            c = i.read();
+        }
+        if (c == -1) {
+            break;
+        }
+        // First non-blank must be a digit for length
+        if (c < '0' || c > '9') {
+            // skip to end of line
+            while (c != -1 && c != '\n') {
+                c = i.read();
+            }
+            continue;
+        }
+        // Read length digits
+        StringBuilder lenBuf = new StringBuilder();
+        do {
+            lenBuf.append((char) c);
+            c = i.read();
+        } while (c != -1 && c >= '0' && c <= '9');
+        // Expect a space after length
+        if (c != ' ') {
+            // skip malformed line
+            while (c != -1 && c != '\n') {
+                c = i.read();
+            }
+            continue;
+        }
+        int len;
+        try {
+            len = Integer.parseInt(lenBuf.toString());
+        } catch (NumberFormatException e) {
+            continue;
+        }
+        // Read the rest of the entry (len includes digits, space, data, newline)
+        int toRead = len - lenBuf.length() - 1;
+        if (toRead <= 0) {
+            // nothing to read or malformed; skip possible newline
+            if (toRead == 0) {
+                i.read();
+            }
+            continue;
+        }
+        byte[] entry = new byte[toRead];
+        int got = IOUtils.readFully(i, entry);
+        if (got != toRead) {
+            throw new IOException("Failed to read Paxheader. Expected " + toRead + " bytes, read " + got);
+        }
+        // entry must end with newline
+        if (entry[toRead - 1] != '\n') {
+            continue;
+        }
+        // Parse "keyword=value\n"
+        int eq = -1;
+        for (int j = 0; j < toRead; j++) {
+            if (entry[j] == '=') {
+                eq = j;
+                break;
+            }
+        }
+        if (eq == -1) {
+            continue;
+        }
+        String keyword = new String(entry, 0, eq, CharsetNames.UTF_8);
+        if (eq + 1 == toRead - 1) {
+            // only newline â‡’ removal
             headers.remove(keyword);
         } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            String value = new String(entry, eq + 1, toRead - eq - 2, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
