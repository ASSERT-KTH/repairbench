diff --git a/tmp/a31cc945-b4fd-462f-8c42-ec84f2402c98_buggy.java b/tmp/af2bc0a4-f4ba-4810-ad0e-774e7bbfa364_fixed.java
index 4b7e1e4..389df39 100644
--- a/tmp/a31cc945-b4fd-462f-8c42-ec84f2402c98_buggy.java
+++ b/tmp/af2bc0a4-f4ba-4810-ad0e-774e7bbfa364_fixed.java
@@ -1,52 +1,76 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
-            int len = 0;
-            int read = 0;
-            while((ch = i.read()) != -1) {
-                read++;
-                if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
+    while (true) {
+        int b = i.read();
+        if (b == -1) {
+            // end of stream
+            break;
+        }
+        if (b == '\n') {
+            // skip blank line
+            continue;
+        }
+        if (b < '0' || b > '9') {
+            // not a length field, skip to end of line
+            int c;
+            while ((c = i.read()) != -1 && c != '\n') {
+                // skip
+            }
+            continue;
+        }
+        // we've seen a digit, parse the length field
+        StringBuilder lenSb = new StringBuilder();
+        lenSb.append((char) b);
+        while ((b = i.read()) != -1 && b != ' ') {
+            if (b < '0' || b > '9') {
+                throw new IOException("Invalid PAX header length byte: " + b);
+            }
+            lenSb.append((char) b);
+        }
+        if (b != ' ') {
+            throw new IOException("Unexpected EOF reading PAX header length");
+        }
+        final int len;
+        try {
+            len = Integer.parseInt(lenSb.toString());
+        } catch (NumberFormatException e) {
+            throw new IOException("Invalid PAX header length: " + lenSb, e);
+        }
+        // subtract the digits and the space we just consumed
+        int toRead = len - lenSb.length() - 1;
+        if (toRead < 0) {
+            throw new IOException("Invalid PAX header, length=" + len);
+        }
+        // read the rest of the record
+        byte[] rest = new byte[toRead];
+        int got = IOUtils.readFully(i, rest);
+        if (got != toRead) {
+            throw new IOException("Failed to read PAX header. Expected "
+                                  + toRead + " bytes, read " + got);
+        }
+        if (toRead == 0) {
+            // nothing after the length/space
+            continue;
+        }
+        // must end in newline
+        if (rest[rest.length - 1] != '\n') {
+            throw new IOException("PAX header record does not end with NL: "
+                                  + new String(rest, CharsetNames.UTF_8));
+        }
+        // drop the trailing newline
+        String record = new String(rest, 0, rest.length - 1, CharsetNames.UTF_8);
+        int eq = record.indexOf('=');
+        if (eq < 0) {
+            // malformed entry
+            continue;
+        }
+        String key = record.substring(0, eq);
+        String value = record.substring(eq + 1);
+        if (value.isEmpty()) {
+            headers.remove(key);
         } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
-                            }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
+            headers.put(key, value);
         }
     }
     return headers;
 }
\ No newline at end of file
