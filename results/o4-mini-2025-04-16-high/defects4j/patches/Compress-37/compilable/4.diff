diff --git a/tmp/741870dd-f2b0-435a-8114-522630f0f16c_buggy.java b/tmp/cda14b84-15b7-40fa-ab36-be10e7b5d9b1_fixed.java
index 4b7e1e4..ed38135 100644
--- a/tmp/741870dd-f2b0-435a-8114-522630f0f16c_buggy.java
+++ b/tmp/cda14b84-15b7-40fa-ab36-be10e7b5d9b1_fixed.java
@@ -1,52 +1,93 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
     int ch;
-            int len = 0;
-            int read = 0;
+    outer:
+    while (true) {
+        // 1) Read the first byte of the next record; skip blank lines
+        ch = i.read();
+        if (ch == -1) {
+            break;
+        }
+        if (ch == '\n') {
+            // blank line, skip
+            continue;
+        }
+        // 2) If it's not a digit, skip until end of line
+        if (ch < '0' || ch > '9') {
+            while (ch != -1 && ch != '\n') {
+                ch = i.read();
+            }
+            continue;
+        }
+        // 3) Parse the length field
+        int len = ch - '0';
+        int read = 1;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
+                // end of length field
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                // malformed length, skip remainder of this line
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                continue outer;
+            }
+            len = len * 10 + (ch - '0');
+        }
+        if (ch == -1) {
+            break;
+        }
+        // if we didn't actually see the space, skip this record
+        if (ch != ' ') {
+            continue;
+        }
+        // 4) Compute how many bytes remain in this record
         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
+        if (restLen < 0) {
+            // invalid length, stop parsing
+            break;
+        }
+        // 5) Read the rest of the record in one shot
         final byte[] rest = new byte[restLen];
         final int got = IOUtils.readFully(i, rest);
         if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+            throw new IOException("Failed to read Paxheader. Expected "
+                                  + restLen + " bytes, read " + got);
         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
+        if (restLen == 0) {
+            continue;
         }
+        // rest[] now contains "keyword=value\n" or "keyword=\n"
+        // 6) Find the '=' separator
+        int eq = -1;
+        for (int j = 0; j < restLen; j++) {
+            if (rest[j] == '=') {
+                eq = j;
                 break;
             }
-                        coll.write((byte) ch);
         }
-                    break; // Processed single header
+        if (eq < 0) {
+            // no '=', skip
+            continue;
         }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
+        // 7) Extract key and value (dropping the trailing newline)
+        final String key = new String(rest, 0, eq, CharsetNames.UTF_8);
+        // deletion record if only newline follows the '='
+        if (restLen == eq + 2 && rest[restLen - 1] == '\n') {
+            headers.remove(key);
+        } else {
+            final String value = new String(
+                rest,                  // buffer
+                eq + 1,                // start of value
+                restLen - eq - 2,      // length = total - key - '=' - newline
+                CharsetNames.UTF_8
+            );
+            headers.put(key, value);
         }
     }
     return headers;
 }
\ No newline at end of file
