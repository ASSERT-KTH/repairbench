diff --git a/tmp/bd223b59-0f88-4f8b-9b73-1f0d936b9c3b_buggy.java b/tmp/dca727de-9e47-454e-be38-49987098d806_fixed.java
index 4b7e1e4..8adb009 100644
--- a/tmp/bd223b59-0f88-4f8b-9b73-1f0d936b9c3b_buggy.java
+++ b/tmp/dca727de-9e47-454e-be38-49987098d806_fixed.java
@@ -1,52 +1,74 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
-            int len = 0;
-            int read = 0;
+    while (true) {
+        // Read the first character of the length field
+        int ch = i.read();
+        if (ch == -1) {
+            break;
+        }
+        if (ch == '\n') {
+            // skip blank lines in PAX header
+            continue;
+        }
+        if (ch < '0' || ch > '9') {
+            // skip any invalid line until the next newline
+            do {
+                ch = i.read();
+            } while (ch != -1 && ch != '\n');
+            continue;
+        }
+        // Parse the length value
+        int len = ch - '0';
+        int read = 1;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Invalid PAX header length");
+            }
+            len = len * 10 + (ch - '0');
+        }
+        if (ch == -1) {
+            break;
+        }
+        // Read the keyword up to '='
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
             read++;
-                        if (ch == '='){ // end of keyword
+            if (ch == '=') {
+                break;
+            }
+            coll.write((byte) ch);
+        }
+        if (ch == -1) {
+            break;
+        }
         final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
+        // Calculate how many bytes remain in this record
         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
+        if (restLen < 0) {
+            throw new IOException("Invalid PAX header length for keyword: " + keyword);
+        }
+        if (restLen > 0) {
             final byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                throw new IOException("Failed to read PAX header. Expected "
+                                      + restLen + " bytes, read " + got);
             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            if (restLen == 1) {
+                // only a trailing newline => remove the key
+                headers.remove(keyword);
+            } else {
+                // drop the trailing newline from the value
+                final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                 headers.put(keyword, value);
             }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
         }
     }
     return headers;
 }
\ No newline at end of file
