diff --git a/tmp/2f9d6d9a-ac2c-4a68-86c1-5985cfad4cc8_buggy.java b/tmp/2676d4c8-b975-473f-8162-9cc075b754af_fixed.java
index 7f61a8c..c39cdbf 100644
--- a/tmp/2f9d6d9a-ac2c-4a68-86c1-5985cfad4cc8_buggy.java
+++ b/tmp/2676d4c8-b975-473f-8162-9cc075b754af_fixed.java
@@ -1,73 +1,92 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
+  // VOID nodes appear when there are extra semicolons at the BLOCK or SCRIPT level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+  // so we'll allow it here.
+  if (n.isComma() ||
+      (n.isEmpty() && parent != null && (parent.isBlock() || parent.isScript()))) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (parent.getType() == Token.COMMA) {
     Node gramps = parent.getParent();
-      if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
+    if (gramps != null && gramps.isCall()
+        && parent == gramps.getFirstChild()) {
+      if (n == parent.getFirstChild()
+          && parent.getChildCount() == 2
+          && n.getNext().isName()
+          && "eval".equals(n.getNext().getString())) {
         return;
       }
     }
-
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n == parent.getLastChild()) {
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
+        if (ancestorType == Token.COMMA) {
           continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+        }
+        if (ancestorType != Token.EXPR_RESULT
+            && ancestorType != Token.BLOCK) {
           return;
-          else
+        } else {
           break;
         }
       }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
+    }
+  } else if (parent.getType() != Token.EXPR_RESULT
+             && parent.getType() != Token.BLOCK) {
+    // Allow empty statements in other contexts (e.g., after `if(...) ;`)
+    // and the init/update slots of a for-loop.
+    if (n.isEmpty()
+        || (parent.getType() == Token.FOR
+            && parent.getChildCount() == 4
+            && (n == parent.getFirstChild()
+                || n == parent.getFirstChild().getNext().getNext()))) {
+      // fall through to the result-used check
     } else {
       return;
     }
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (!isResultUsed &&
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+  // Simple operators inside a comma expression are never truly used
+  // if the comma expression itself is unused.
+  if (isSimpleOp && parent.getType() == Token.COMMA) {
+    isResultUsed = false;
+  }
+
+  if (!isResultUsed
+      && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     } else if (n.isExprResult()) {
       return;
     }
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
-        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
-            "' operator is not being used.";
+      msg = "The result of the '"
+          + Token.name(n.getType()).toLowerCase()
+          + "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+    // If this isn't a full statement, mark it for the wrap-in-preserve pass.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
