diff --git a/tmp/874b9fbf-a5b1-4ed7-b7a0-23b153cf66b4_buggy.java b/tmp/3f8464f2-27b7-4c8c-a4d1-16501753764b_fixed.java
index 7f61a8c..1baca61 100644
--- a/tmp/874b9fbf-a5b1-4ed7-b7a0-23b153cf66b4_buggy.java
+++ b/tmp/3f8464f2-27b7-4c8c-a4d1-16501753764b_fixed.java
@@ -1,73 +1,91 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
-      return;
-    }
-
+  // We only care about expressions/statements with side‐effects or lack thereof.
   if (parent == null) {
     return;
   }
+  // Skip comma operator nodes themselves.
+  if (n.isComma()) {
+    return;
+  }
+
+  // Special case: an empty statement as the then‐clause of an if is useless.
+  if (n.isEmpty()
+      && parent.getType() == Token.IF
+      && n == parent.getFirstChild().getNext()) {
+    String msg = "This code lacks side-effects. Is there a bug?";
+    t.getCompiler().report(
+        t.makeError(n, level, USELESS_CODE_ERROR, msg));
+    return;
+  }
 
   // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+  // these cases when we visit the child, and peephole passes fix up
+  // the tree in more clever ways when these are removed.
   if (parent.getType() == Token.COMMA) {
     Node gramps = parent.getParent();
     if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
+      // skip the special (eval) case
+      if (n == parent.getFirstChild()
+          && parent.getChildCount() == 2
+          && n.getNext().isName()
+          && "eval".equals(n.getNext().getString())) {
         return;
       }
     }
-
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
+    // Allow the last child if it lives directly under an EXPR_RESULT or BLOCK,
+    // so that JSDoc no-op statements aren't flagged.
     if (n == parent.getLastChild()) {
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
+        if (ancestorType == Token.COMMA) {
           continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+        }
+        if (ancestorType != Token.EXPR_RESULT
+            && ancestorType != Token.BLOCK) {
           return;
-          else
+        } else {
           break;
         }
       }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
+    }
+  } else if (parent.getType() != Token.EXPR_RESULT
+             && parent.getType() != Token.BLOCK) {
+    // Allow init/update in for(;;) loops.
+    if (parent.getType() == Token.FOR
+        && parent.getChildCount() == 4
+        && (n == parent.getFirstChild()
+            || n == parent.getFirstChild().getNext().getNext())) {
+      // fall through
     } else {
       return;
     }
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (!isResultUsed &&
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+  if (!isResultUsed
+      && (isSimpleOp
+          || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    // Don't flag qualified names with JSDoc or EXPR_RESULT wrappers.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     } else if (n.isExprResult()) {
       return;
     }
+    // Build the user‐friendly message.
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
-        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
-            "' operator is not being used.";
+      msg = "The result of the '"
+          + Token.name(n.getType()).toLowerCase()
+          + "' operator is not being used.";
     }
-
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
