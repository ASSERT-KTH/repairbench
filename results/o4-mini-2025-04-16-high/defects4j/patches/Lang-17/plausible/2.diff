diff --git a/tmp/7574ce3c-1cd1-4d4e-b3d2-c0a849d167bb_buggy.java b/tmp/6035e667-0b17-4f95-9eee-cf07d4f3c297_fixed.java
index b86c1ea..4c2713a 100644
--- a/tmp/7574ce3c-1cd1-4d4e-b3d2-c0a849d167bb_buggy.java
+++ b/tmp/6035e667-0b17-4f95-9eee-cf07d4f3c297_fixed.java
@@ -1,38 +1,26 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
-            int consumed = translate(input, pos, out);
+    int index = 0;
+    int length = input.length();
+    while (index < length) {
+        int consumed = translate(input, index, out);
         if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+            // No translator consumed this code‐point, write it verbatim:
+            int cp = Character.codePointAt(input, index);
+            char[] chars = Character.toChars(cp);
+            out.write(chars);
+            index += chars.length;
         } else {
-                        pos++;
+            // Skip over the code points the translator has handled:
+            for (int i = 0; i < consumed; i++) {
+                int cp = Character.codePointAt(input, index);
+                index += Character.charCount(cp);
             }
         }
-                pos--;
-            }
-            pos++;
     }
 }
\ No newline at end of file
