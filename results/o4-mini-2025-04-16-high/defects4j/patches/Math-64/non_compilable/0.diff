diff --git a/tmp/477922df-44a7-4eb5-9a26-809a439780f0_buggy.java b/tmp/266975ce-e4ed-492b-acc0-cf2e9d203f5c_fixed.java
index 01c2462..b970575 100644
--- a/tmp/477922df-44a7-4eb5-9a26-809a439780f0_buggy.java
+++ b/tmp/266975ce-e4ed-492b-acc0-cf2e9d203f5c_fixed.java
@@ -1,226 +1,231 @@
 /** {@inheritDoc} */
 @Override
 protected VectorialPointValuePair doOptimize()
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     // arrays shared with the other private methods
     solvedCols  = Math.min(rows, cols);
     diagR       = new double[cols];
     jacNorm     = new double[cols];
     beta        = new double[cols];
     permutation = new int[cols];
     lmDir       = new double[cols];
 
     // local point
     double   delta   = 0;
     double   xNorm   = 0;
     double[] diag    = new double[cols];
     double[] oldX    = new double[cols];
     double[] oldRes  = new double[rows];
     double[] work1   = new double[cols];
     double[] work2   = new double[cols];
     double[] work3   = new double[cols];
 
-        // evaluate the function at the starting point and calculate its norm
+    // evaluate the function at the starting point
     updateResidualsAndCost();
 
     // outer loop
     lmPar = 0;
     boolean firstIteration = true;
     VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
     while (true) {
         incrementIterationsCounter();
 
-            // compute the Q.R. decomposition of the jacobian matrix
         VectorialPointValuePair previous = current;
         updateJacobian();
-            qrDecomposition();
-
-            // compute Qt.res
-            qTy(residuals);
-            // now we don't need Q anymore,
-            // so let jacobian contain the R matrix with its diagonal elements
-            for (int k = 0; k < solvedCols; ++k) {
-                int pk = permutation[k];
-                jacobian[k][pk] = diagR[pk];
-            }
 
+        // On the very first iteration compute the scaling of the problem
+        // from the *original* jacobian, before we do any QR decompositions.
         if (firstIteration) {
-
-                // scale the point according to the norms of the columns
-                // of the initial jacobian
             xNorm = 0;
             for (int k = 0; k < cols; ++k) {
-                    double dk = jacNorm[k];
+                double dk = 0;
+                for (int i = 0; i < rows; ++i) {
+                    double v = jacobian[i][k];
+                    dk += v * v;
+                }
+                dk = FastMath.sqrt(dk);
                 if (dk == 0) {
                     dk = 1.0;
                 }
+                diag[k] = dk;
                 double xk = dk * point[k];
                 xNorm  += xk * xk;
-                    diag[k] = dk;
             }
-                xNorm = Math.sqrt(xNorm);
+            xNorm = FastMath.sqrt(xNorm);
+            delta = (xNorm == 0) ?
+                    initialStepBoundFactor :
+                    initialStepBoundFactor * xNorm;
+        }
+
+        // compute the Q.R. decomposition of the jacobian matrix
+        qrDecomposition();
 
-                // initialize the step bound delta
-                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
+        // compute Q^T * residuals
+        qTy(residuals);
 
+        // now that Q^T * residuals is done we don't need Q any more;
+        // let 'jacobian' contain the R matrix (in the original column order).
+        for (int k = 0; k < solvedCols; ++k) {
+            int pk = permutation[k];
+            // <--- FIX: use diagR[k], not diagR[pk] --->
+            jacobian[k][pk] = diagR[k];
         }
 
         // check orthogonality between function vector and jacobian columns
         double maxCosine = 0;
         if (cost != 0) {
             for (int j = 0; j < solvedCols; ++j) {
                 int pj = permutation[j];
                 double s = jacNorm[pj];
                 if (s != 0) {
                     double sum = 0;
                     for (int i = 0; i <= j; ++i) {
                         sum += jacobian[i][pj] * residuals[i];
                     }
-                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));
+                    maxCosine = FastMath.max(maxCosine,
+                                             FastMath.abs(sum) / (s * cost));
                 }
             }
         }
         if (maxCosine <= orthoTolerance) {
             // convergence has been reached
             return current;
         }
 
         // rescale if necessary
         for (int j = 0; j < cols; ++j) {
-                diag[j] = Math.max(diag[j], jacNorm[j]);
+            diag[j] = FastMath.max(diag[j], jacNorm[j]);
         }
 
-            // inner loop
+        // inner loop: adjust lmPar until we get a sufficiently good step
         for (double ratio = 0; ratio < 1.0e-4;) {
 
             // save the state
             for (int j = 0; j < solvedCols; ++j) {
                 int pj = permutation[j];
                 oldX[pj] = point[pj];
             }
             double previousCost = cost;
-                double[] tmpVec = residuals;
+            double[] tmp = residuals;
             residuals = oldRes;
-                oldRes    = tmpVec;
+            oldRes    = tmp;
 
             // determine the Levenberg-Marquardt parameter
             determineLMParameter(oldRes, delta, diag, work1, work2, work3);
 
             // compute the new point and the norm of the evolution direction
             double lmNorm = 0;
             for (int j = 0; j < solvedCols; ++j) {
                 int pj = permutation[j];
                 lmDir[pj] = -lmDir[pj];
                 point[pj] = oldX[pj] + lmDir[pj];
                 double s = diag[pj] * lmDir[pj];
                 lmNorm  += s * s;
             }
-                lmNorm = Math.sqrt(lmNorm);
-                // on the first iteration, adjust the initial step bound.
+            lmNorm = FastMath.sqrt(lmNorm);
             if (firstIteration) {
-                    delta = Math.min(delta, lmNorm);
+                delta = FastMath.min(delta, lmNorm);
             }
 
-                // evaluate the function at x + p and calculate its norm
+            // evaluate at x + p
             updateResidualsAndCost();
             current = new VectorialPointValuePair(point, objective);
 
-                // compute the scaled actual reduction
-                double actRed = -1.0;
+            // actual reduction
+            double actRed = -1;
             if (0.1 * cost < previousCost) {
                 double r = cost / previousCost;
-                    actRed = 1.0 - r * r;
+                actRed = 1 - r * r;
             }
 
-                // compute the scaled predicted reduction
-                // and the scaled directional derivative
+            // predicted reduction and directional derivative
             for (int j = 0; j < solvedCols; ++j) {
                 int pj = permutation[j];
-                    double dirJ = lmDir[pj];
+                double dj = lmDir[pj];
                 work1[j] = 0;
                 for (int i = 0; i <= j; ++i) {
-                        work1[i] += jacobian[i][pj] * dirJ;
+                    work1[i] += jacobian[i][pj] * dj;
                 }
             }
             double coeff1 = 0;
             for (int j = 0; j < solvedCols; ++j) {
                 coeff1 += work1[j] * work1[j];
             }
             double pc2 = previousCost * previousCost;
-                coeff1 = coeff1 / pc2;
+            coeff1 /= pc2;
             double coeff2 = lmPar * lmNorm * lmNorm / pc2;
             double preRed = coeff1 + 2 * coeff2;
             double dirDer = -(coeff1 + coeff2);
 
-                // ratio of the actual to the predicted reduction
+            // ratio of actual to predicted
             ratio = (preRed == 0) ? 0 : (actRed / preRed);
 
             // update the step bound
             if (ratio <= 0.25) {
-                    double tmp =
+                double tmpRatio =
                     (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;
-                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {
-                            tmp = 0.1;
+                if ((0.1 * cost >= previousCost) || (tmpRatio < 0.1)) {
+                    tmpRatio = 0.1;
                 }
-                        delta = tmp * Math.min(delta, 10.0 * lmNorm);
-                        lmPar /= tmp;
+                delta = tmpRatio * FastMath.min(delta, 10 * lmNorm);
+                lmPar /= tmpRatio;
             } else if ((lmPar == 0) || (ratio >= 0.75)) {
-                    delta = 2 * lmNorm;
+                delta *= 2;
                 lmPar *= 0.5;
             }
 
-                // test for successful iteration.
+            // successful iteration?
             if (ratio >= 1.0e-4) {
-                    // successful iteration, update the norm
                 firstIteration = false;
                 xNorm = 0;
                 for (int k = 0; k < cols; ++k) {
-                        double xK = diag[k] * point[k];
-                        xNorm    += xK * xK;
+                    double d = diag[k] * point[k];
+                    xNorm += d * d;
                 }
-                    xNorm = Math.sqrt(xNorm);
-
-                    // tests for convergence.
-                    // we use the vectorial convergence checker
+                xNorm = FastMath.sqrt(xNorm);
             } else {
-                    // failed iteration, reset the previous values
+                // restore
                 cost = previousCost;
                 for (int j = 0; j < solvedCols; ++j) {
                     int pj = permutation[j];
                     point[pj] = oldX[pj];
                 }
-                    tmpVec    = residuals;
+                tmp      = residuals;
                 residuals = oldRes;
-                    oldRes    = tmpVec;
+                oldRes    = tmp;
             }
+
+            // check for convergence
             if (checker == null) {
-                	if (((Math.abs(actRed) <= costRelativeTolerance) &&
+                if (((FastMath.abs(actRed) <= costRelativeTolerance) &&
                      (preRed <=    costRelativeTolerance) &&
                      (ratio <= 2.0)) ||
                     (delta <= parRelativeTolerance * xNorm)) {
                     return current;
                 }
             } else {
                 if (checker.converged(getIterations(), previous, current)) {
                     return current;
                 }
             }
-                // tests for termination and stringent tolerances
-                // (2.2204e-16 is the machine epsilon for IEEE754)
-                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,
+
+            // stringent tolerances
+            if ((FastMath.abs(actRed) <= 2.2204e-16 &&
+                 preRed <=        2.2204e-16 &&
+                 ratio <=         2.0)) {
+                throw new OptimizationException(
+                    LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,
                     costRelativeTolerance);
             } else if (delta <= 2.2204e-16 * xNorm) {
-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,
+                throw new OptimizationException(
+                    LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,
                     parRelativeTolerance);
             } else if (maxCosine <= 2.2204e-16) {
-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,
+                throw new OptimizationException(
+                    LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,
                     orthoTolerance);
             }
-
         }
-
     }
-
 }
\ No newline at end of file
