diff --git a/tmp/ecf753a0-6902-4a23-9f37-fa49c16f9493_buggy.java b/tmp/a1c7b7f1-1cd2-4663-a658-366180bd7172_fixed.java
index 8e93a5e..be7b291 100644
--- a/tmp/ecf753a0-6902-4a23-9f37-fa49c16f9493_buggy.java
+++ b/tmp/a1c7b7f1-1cd2-4663-a658-366180bd7172_fixed.java
@@ -1,43 +1,51 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
+    // first, try to wrap at or before width
     int pos = findWrapPos(text, width, 0);
 
+    // no wrap needed: just trim trailing whitespace and return
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // wrap here
+    sb.append(rtrim(text.substring(0, pos)))
+      .append(defaultNewLine);
+
+    // prepare padding for subsequent lines
     final String padding = createPadding(nextLineTabStop);
 
+    // process the remainder in a loop
     while (true)
     {
+        // trim the whitespace before the wrap position, add padding
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
 
+        // attempt another wrap, always from column zero
+        pos = findWrapPos(text, width, 0);
         if (pos == -1)
         {
+            // no more wraps, append remainder
             sb.append(text);
-
             return sb;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // wrap and continue
+        sb.append(rtrim(text.substring(0, pos)))
+          .append(defaultNewLine);
     }
 }
\ No newline at end of file
