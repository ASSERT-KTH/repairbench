diff --git a/tmp/0de6a829-2274-44aa-a3b8-c8e19e4a4d33_buggy.java b/tmp/f0b3801c-ca6c-41fb-b9d1-f1e5b1956419_fixed.java
index 8e93a5e..53b68ff 100644
--- a/tmp/0de6a829-2274-44aa-a3b8-c8e19e4a4d33_buggy.java
+++ b/tmp/f0b3801c-ca6c-41fb-b9d1-f1e5b1956419_fixed.java
@@ -1,43 +1,33 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
+    while (true) {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
+        // Always wrap considering the full line width (including padding)
+        pos = findWrapPos(text, width, 0);
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
