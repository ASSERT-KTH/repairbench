diff --git a/tmp/f58057f8-f20f-489b-a892-850b1d1f17ab_buggy.java b/tmp/4c78d1a0-76a0-4e72-9704-ca56f6958184_fixed.java
index 8e93a5e..5fd601d 100644
--- a/tmp/f58057f8-f20f-489b-a892-850b1d1f17ab_buggy.java
+++ b/tmp/4c78d1a0-76a0-4e72-9704-ca56f6958184_fixed.java
@@ -1,43 +1,57 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    String nl = defaultNewLine;
+    // Split on the renderer's newline, to preserve original line breaks
+    String[] lines = text.split(nl, -1);
+    String padding = createPadding(nextLineTabStop);
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
+    for (int i = 0; i < lines.length; i++) {
+        // Trim trailing spaces of the original line
+        String toWrap = rtrim(lines[i]);
+        boolean firstSegment = true;
 
-            return sb;
+        // Wrap this one line (possibly into multiple)
+        while (true) {
+            // Decide the indent for this segment:
+            //   firstSegment && first original line → no indent
+            //   firstSegment && subsequent original line → padding
+            //   later segments → padding
+            String indent;
+            if (firstSegment) {
+                indent = (i == 0) ? "" : padding;
+            } else {
+                indent = padding;
             }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+            // Measure on the full line including indent
+            String fullLine = indent + toWrap;
+            int pos = findWrapPos(fullLine, width, 0);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            // If it fits, just append and break
+            if (pos == -1) {
+                sb.append(fullLine);
+                break;
+            }
 
-            if (pos == -1)
-            {
-                sb.append(text);
+            // Otherwise, break at pos, append that piece & newline
+            String piece = fullLine.substring(0, pos);
+            sb.append(rtrim(piece)).append(nl);
 
-                return sb;
+            // Compute the remainder: drop the broken‐off piece + indent
+            String remainder = fullLine.substring(pos);
+            if (remainder.startsWith(indent)) {
+                remainder = remainder.substring(indent.length());
+            }
+            toWrap = remainder.trim();
+            firstSegment = false;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // After each original input line (except last), re‐append its newline
+        if (i < lines.length - 1) {
+            sb.append(nl);
         }
     }
+
+    return sb;
+}
\ No newline at end of file
