diff --git a/tmp/0f544840-5f2b-4714-90cf-3b9ffba9554c_buggy.java b/tmp/e32e8339-7f1b-4645-91f8-63a4dcb3e6b5_fixed.java
index 8e93a5e..38dc862 100644
--- a/tmp/0f544840-5f2b-4714-90cf-3b9ffba9554c_buggy.java
+++ b/tmp/e32e8339-7f1b-4645-91f8-63a4dcb3e6b5_fixed.java
@@ -1,43 +1,63 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    final String newLine = defaultNewLine;
+    int textLen = text.length();
+    int offset = 0;
+    boolean firstLine = true;
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
+    while (offset < textLen) {
+        // split out an explicit line if present
+        int nl = text.indexOf(newLine, offset);
+        String segment;
+        boolean hasNewLine;
+        if (nl >= 0) {
+            segment = text.substring(offset, nl);
+            hasNewLine = true;
+        } else {
+            segment = text.substring(offset);
+            hasNewLine = false;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
+        // decide whether to indent this first wrap‐line of the segment
+        int initialIndent = firstLine ? 0 : nextLineTabStop;
+        // attempt to wrap the segment
+        int pos = findWrapPos(segment, width, 0);
+        if (pos == -1) {
+            // no wrap needed
+            if (initialIndent > 0) {
+                sb.append(createPadding(initialIndent));
+            }
+            sb.append(rtrim(segment));
+        } else {
+            // wrap first line
+            if (initialIndent > 0) {
+                sb.append(createPadding(initialIndent));
+            }
+            sb.append(rtrim(segment.substring(0, pos))).append(newLine);
+            // wrap any remaining text
+            String pad = createPadding(nextLineTabStop);
+            String rem = segment.substring(pos).trim();
+            while (true) {
+                int w = width - nextLineTabStop;
+                int p = findWrapPos(rem, w, 0);
+                if (p == -1) {
+                    sb.append(pad).append(rem);
+                    break;
+                }
+                sb.append(pad).append(rtrim(rem.substring(0, p))).append(newLine);
+                rem = rem.substring(p).trim();
+            }
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // if we consumed an explicit newline, output it and continue
+        if (hasNewLine) {
+            sb.append(newLine);
+            firstLine = false;
+            offset = nl + newLine.length();
+        } else {
+            break;
+        }
     }
+    return sb;
 }
\ No newline at end of file
