diff --git a/tmp/cf1b0cfa-5e0d-4c60-9783-a41d2fa7d2e3_buggy.java b/tmp/c60c3e35-8849-40fd-82c6-fb1e14a5c12c_fixed.java
index 8e93a5e..ff8c0d5 100644
--- a/tmp/cf1b0cfa-5e0d-4c60-9783-a41d2fa7d2e3_buggy.java
+++ b/tmp/c60c3e35-8849-40fd-82c6-fb1e14a5c12c_fixed.java
@@ -1,43 +1,57 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
-    {
+                                         int nextLineTabStop, String text) {
+    // If the text already contains line breaks, preserve them and just
+    // apply padding to subsequent lines.
+    if (text.indexOf(defaultNewLine) >= 0) {
+        int start = 0;
+        int nlLen = defaultNewLine.length();
+        int lineIndex = 0;
+        while (true) {
+            int idx = text.indexOf(defaultNewLine, start);
+            if (idx == -1) {
+                break;
+            }
+            String line = text.substring(start, idx);
+            if (lineIndex > 0 && nextLineTabStop > 0) {
+                sb.append(createPadding(nextLineTabStop));
+            }
+            sb.append(line).append(defaultNewLine);
+            start = idx + nlLen;
+            lineIndex++;
+        }
+        // last segment after the final newline
+        String lastLine = text.substring(start);
+        if (lineIndex > 0 && nextLineTabStop > 0) {
+            sb.append(createPadding(nextLineTabStop));
+        }
+        sb.append(lastLine);
+        return sb;
+    }
+
+    // Single‚Äêline wrapping logic
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
+        // no wrap needed
         sb.append(rtrim(text));
-
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+    // first line
+    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-            if (pos == -1)
-            {
-                sb.append(text);
+    // prepare for subsequent lines
+    String padding = createPadding(nextLineTabStop);
+    String remaining = text.substring(pos).trim();
+    int wrapWidth = width - nextLineTabStop;
 
-                return sb;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    // wrap the rest
+    while ((pos = findWrapPos(remaining, wrapWidth, 0)) != -1) {
+        sb.append(padding)
+          .append(rtrim(remaining.substring(0, pos)))
+          .append(defaultNewLine);
+        remaining = remaining.substring(pos).trim();
     }
+    // final fragment
+    sb.append(padding).append(remaining);
+    return sb;
 }
\ No newline at end of file
