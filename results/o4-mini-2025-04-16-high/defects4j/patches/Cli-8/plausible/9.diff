diff --git a/tmp/91375415-c4fb-4248-8fba-b206f5b6df62_buggy.java b/tmp/31d6a233-26dc-45e7-9119-ee60fadcaa14_fixed.java
index 8e93a5e..97fb6d0 100644
--- a/tmp/91375415-c4fb-4248-8fba-b206f5b6df62_buggy.java
+++ b/tmp/31d6a233-26dc-45e7-9119-ee60fadcaa14_fixed.java
@@ -1,43 +1,71 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+protected StringBuffer renderWrappedText(StringBuffer sb,
+                                         int width,
+                                         int nextLineTabStop,
+                                         String text)
 {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
+    if (text == null || text.length() == 0) {
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
+    final int newLineLen = defaultNewLine.length();
+    int start = 0;
+    boolean firstOriginal = true;
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+    // Manually split on existing new lines so we preserve them
+    while (start < text.length()) {
+        int idx = text.indexOf(defaultNewLine, start);
+        String segment;
+        if (idx >= 0) {
+            segment = text.substring(start, idx);
+        } else {
+            segment = text.substring(start);
+        }
 
-            if (pos == -1)
-            {
-                sb.append(text);
+        // Wrap this segment
+        boolean firstSegment = true;
+        String line = segment;
+        while (true) {
+            // compute available width and padding
+            int avail = (firstOriginal && firstSegment)
+                        ? width
+                        : (width - nextLineTabStop);
+            String pad = (firstOriginal && firstSegment)
+                         ? ""
+                         : padding;
+            // find wrap position in the current line
+            int pos = findWrapPos(line, avail, 0);
+            if (pos == -1) {
+                // no wrap -> output remainder
+                sb.append(pad).append(rtrim(line));
+                break;
+            }
+            // wrap here
+            sb.append(pad)
+              .append(rtrim(line.substring(0, pos)))
+              .append(defaultNewLine);
+            line = line.substring(pos).trim();
+            firstSegment = false;
+        }
 
+        // if there was an original newline, re-append it and continue
+        if (idx >= 0) {
+            sb.append(defaultNewLine);
+            start = idx + newLineLen;
+            firstOriginal = false;
+        } else {
+            break;
+        }
+    }
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
