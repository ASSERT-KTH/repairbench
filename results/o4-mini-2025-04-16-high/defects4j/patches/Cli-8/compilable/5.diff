diff --git a/tmp/c0c6f0f2-61fe-4c5c-a496-8b25bf0e5b11_buggy.java b/tmp/0f942dea-747c-4012-b492-51a61f550afb_fixed.java
index 8e93a5e..930a435 100644
--- a/tmp/c0c6f0f2-61fe-4c5c-a496-8b25bf0e5b11_buggy.java
+++ b/tmp/0f942dea-747c-4012-b492-51a61f550afb_fixed.java
@@ -1,43 +1,59 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
+    final String newLine = defaultNewLine;
+    final int newLineLen = newLine.length();
+    boolean firstLine = true;
 
-        while (true)
+    while (text.length() > 0)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
+        // find the next break position
+        int pos = findWrapPos(text, width, firstLine ? 0 : nextLineTabStop);
         if (pos == -1)
         {
-                sb.append(text);
+            // no more wraps needed
+            if (!firstLine)
+            {
+                sb.append(padding);
+            }
+            sb.append(rtrim(text));
+            break;
+        }
+
+        // if it's an existing newline, honor it
+        if (text.startsWith(newLine, pos))
+        {
+            String line = text.substring(0, pos);
+            if (!firstLine)
+            {
+                sb.append(padding);
+            }
+            sb.append(rtrim(line)).append(newLine);
+            text = text.substring(pos + newLineLen);
+        }
+        else
+        {
+            // wrap at the whitespace/width boundary
+            String line = text.substring(0, pos);
+            if (!firstLine)
+            {
+                sb.append(padding);
+            }
+            sb.append(rtrim(line)).append(newLine);
+            // skip any whitespace after the break
+            int start = pos;
+            while (start < text.length()
+                   && Character.isWhitespace(text.charAt(start))
+                   && !text.startsWith(newLine, start))
+            {
+                start++;
+            }
+            text = text.substring(start);
+        }
+
+        firstLine = false;
+    }
 
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
