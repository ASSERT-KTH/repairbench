diff --git a/tmp/327a43f7-db34-4826-8184-65ee9fb5e7ad_buggy.java b/tmp/c64c40f5-1ae8-4f9f-bfb5-8b6c60e0424e_fixed.java
index 8e93a5e..7c29068 100644
--- a/tmp/327a43f7-db34-4826-8184-65ee9fb5e7ad_buggy.java
+++ b/tmp/c64c40f5-1ae8-4f9f-bfb5-8b6c60e0424e_fixed.java
@@ -1,43 +1,50 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
+    String newLine = defaultNewLine;
+    int newLineLen = newLine.length();
+    int start = 0;
+    boolean firstParagraph = true;
+    // process each original line (paragraph) separated by newline
+    while (start < text.length()) {
+        int end = text.indexOf(newLine, start);
+        String paragraph;
+        if (end >= 0) {
+            paragraph = text.substring(start, end);
+        } else {
+            paragraph = text.substring(start);
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
+        // initial indent: none for first paragraph, else pad
+        String initialPad = firstParagraph ? "" : createPadding(nextLineTabStop);
+        String line = initialPad + paragraph;
+        // wrap the first line of this paragraph
+        int pos = findWrapPos(line, width, 0);
+        if (pos == -1) {
+            sb.append(rtrim(line));
+        } else {
+            sb.append(rtrim(line.substring(0, pos))).append(newLine);
+            // wrap subsequent lines
+            String remaining = line.substring(pos).trim();
+            String subsequentPad = createPadding(nextLineTabStop);
+            while (true) {
+                String nextLineStr = subsequentPad + remaining;
+                pos = findWrapPos(nextLineStr, width, nextLineTabStop);
+                if (pos == -1) {
+                    sb.append(nextLineStr);
+                    break;
+                }
+                sb.append(rtrim(nextLineStr.substring(0, pos))).append(newLine);
+                remaining = nextLineStr.substring(pos).trim();
             }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
+        // if there was a newline in the original text, preserve it and continue
+        if (end >= 0) {
+            sb.append(newLine);
+            start = end + newLineLen;
+            firstParagraph = false;
+        } else {
+            break;
+        }
+    }
+    return sb;
 }
\ No newline at end of file
