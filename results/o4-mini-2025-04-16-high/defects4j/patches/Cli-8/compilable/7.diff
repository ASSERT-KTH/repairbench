diff --git a/tmp/9e36bf51-a471-4734-a106-43d066462d0b_buggy.java b/tmp/4df324b6-d2a3-4683-af1b-53822fedaa95_fixed.java
index 8e93a5e..7a34c0f 100644
--- a/tmp/9e36bf51-a471-4734-a106-43d066462d0b_buggy.java
+++ b/tmp/4df324b6-d2a3-4683-af1b-53822fedaa95_fixed.java
@@ -1,43 +1,67 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
+    if (text == null) {
+        return sb;
+    }
+    final String lineSep = defaultNewLine;
+
+    // Preserve existing new‐lines: split text into "paragraphs"
+    if (text.indexOf(lineSep) != -1) {
+        int start = 0;
+        int sepLen = lineSep.length();
+        boolean firstParagraph = true;
+        while (start < text.length()) {
+            int end = text.indexOf(lineSep, start);
+            String segment;
+            if (end >= 0) {
+                segment = text.substring(start, end);
+            } else {
+                segment = text.substring(start);
+            }
+            if (!firstParagraph) {
+                sb.append(lineSep);
+            }
+            if (!firstParagraph && nextLineTabStop > 0) {
+                // indent the first line of subsequent paragraphs
+                sb.append(createPadding(nextLineTabStop));
+                // reduce width by the indent we just wrote
+                renderWrappedText(sb, width - nextLineTabStop,
+                                  nextLineTabStop, segment);
+            } else {
+                renderWrappedText(sb, width,
+                                  nextLineTabStop, segment);
+            }
+            if (end < 0) {
+                break;
+            }
+            start = end + sepLen;
+            firstParagraph = false;
+        }
+        return sb;
+    }
+
+    // Single "paragraph" – do the normal wrap
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // first line
+    sb.append(rtrim(text.substring(0, pos))).append(lineSep);
+
+    // following lines get the padding
     final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
+    String remainder = text.substring(pos).trim();
+    while (true) {
+        String line = padding + remainder;
+        pos = findWrapPos(line, width, nextLineTabStop);
+        if (pos == -1) {
+            sb.append(line);
             return sb;
         }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(line.substring(0, pos))).append(lineSep);
+        remainder = line.substring(pos).trim();
     }
 }
\ No newline at end of file
