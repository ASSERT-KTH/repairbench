diff --git a/tmp/83e26356-f599-47c8-ae16-8c80da6c8546_buggy.java b/tmp/b2654be1-959d-4775-873b-b9a89fabf0fe_fixed.java
index de9af32..a14f2cd 100644
--- a/tmp/83e26356-f599-47c8-ae16-8c80da6c8546_buggy.java
+++ b/tmp/b2654be1-959d-4775-873b-b9a89fabf0fe_fixed.java
@@ -1,18 +1,29 @@
 /**
  * @see #findCalledFunctions(Node)
  */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
+private void findCalledFunctions(Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    Node callee = node.getFirstChild();
+    // direct call: fn()
+    if (callee.getType() == Token.NAME) {
+      changed.add(callee.getString());
+    }
+    // calls via Function.prototype.call/apply: fn.call(this, ...)
+    else if (callee.getType() == Token.GETPROP) {
+      Node prop = callee.getSecondChild();
+      String propName = prop.getString();
+      if ("call".equals(propName) || "apply".equals(propName)) {
+        Node target = callee.getFirstChild();
+        if (target.getType() == Token.NAME) {
+          changed.add(target.getString());
+        }
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
