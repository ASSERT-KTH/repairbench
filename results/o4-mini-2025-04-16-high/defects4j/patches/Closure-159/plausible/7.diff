diff --git a/tmp/74cef1a4-abcb-47ae-9da3-7751ba656429_buggy.java b/tmp/00d3337b-3f49-41ba-96a0-570db9529e42_fixed.java
index de9af32..585d640 100644
--- a/tmp/74cef1a4-abcb-47ae-9da3-7751ba656429_buggy.java
+++ b/tmp/00d3337b-3f49-41ba-96a0-570db9529e42_fixed.java
@@ -1,18 +1,22 @@
-  /**
-   * @see #findCalledFunctions(Node)
-   */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    Node target = node.getFirstChild();
+    if (target.getType() == Token.NAME) {
+      changed.add(target.getString());
+    } else if (target.getType() == Token.GETPROP) {
+      // handle calls like foo.call(...) or foo.apply(...)
+      String prop = target.getLastChild().getString();
+      Node obj = target.getFirstChild();
+      if (("call".equals(prop) || "apply".equals(prop))
+          && obj.getType() == Token.NAME) {
+        changed.add(obj.getString());
+      }
     }
   }
-
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
