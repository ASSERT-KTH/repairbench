diff --git a/tmp/7605e371-dfbe-4b6d-bfdb-1477d82faffc_buggy.java b/tmp/0c7d091b-47f2-4631-afda-cb13311299b9_fixed.java
index de9af32..b122161 100644
--- a/tmp/7605e371-dfbe-4b6d-bfdb-1477d82faffc_buggy.java
+++ b/tmp/0c7d091b-47f2-4631-afda-cb13311299b9_fixed.java
@@ -1,18 +1,32 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    Node callee = node.getFirstChild();
+    // direct call: fn(...)
+    if (callee.getType() == Token.NAME) {
+      changed.add(callee.getString());
+    }
+    // method call: fn.call(...) or fn.apply(...)
+    else if (callee.getType() == Token.GETPROP) {
+      Node obj = callee.getFirstChild();
+      Node prop = callee.getLastChild();
+      if (obj != null
+          && obj.getType() == Token.NAME
+          && prop != null) {
+        String propName = prop.getString();
+        if ("call".equals(propName) || "apply".equals(propName)) {
+          changed.add(obj.getString());
+        }
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
