diff --git a/tmp/c3c91c21-b058-437b-af37-81830885807e_buggy.java b/tmp/71cc1e3d-357b-48de-aa29-2fb5b5bbee90_fixed.java
index de9af32..b40de60 100644
--- a/tmp/c3c91c21-b058-437b-af37-81830885807e_buggy.java
+++ b/tmp/71cc1e3d-357b-48de-aa29-2fb5b5bbee90_fixed.java
@@ -1,18 +1,30 @@
 /**
  * @see #findCalledFunctions(Node)
  */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
+private void findCalledFunctions(Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    Node callee = node.getFirstChild();
+    // direct call: foo()
+    if (callee.getType() == Token.NAME) {
+      changed.add(callee.getString());
+    }
+    // indirect call: foo.call(this, …) or foo.apply(this, …)
+    else if (callee.getType() == Token.GETPROP) {
+      Node target = callee.getFirstChild();
+      Node propName = callee.getLastChild();
+      if (target.getType() == Token.NAME
+          && propName.getType() == Token.STRING) {
+        String method = propName.getString();
+        if ("call".equals(method) || "apply".equals(method)) {
+          changed.add(target.getString());
+        }
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
