diff --git a/tmp/7fcbd730-e1bc-463d-a662-c2ce8ce98c60_buggy.java b/tmp/a6f7f89e-a028-463d-8577-d19be25e7999_fixed.java
index de9af32..6a1bb16 100644
--- a/tmp/7fcbd730-e1bc-463d-a662-c2ce8ce98c60_buggy.java
+++ b/tmp/a6f7f89e-a028-463d-8577-d19be25e7999_fixed.java
@@ -1,18 +1,32 @@
 /**
  * @see #findCalledFunctions(Node)
  */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
+private void findCalledFunctions(Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    Node target = node.getFirstChild();
+    if (target != null) {
+      // direct call: foo()
+      if (target.getType() == Token.NAME) {
+        changed.add(target.getString());
+      }
+      // call via .call or .apply: foo.call(this, …) or foo.apply(this, …)
+      else if (target.getType() == Token.GETPROP) {
+        Node receiver = target.getFirstChild();
+        Node propName = (receiver != null) ? receiver.getNext() : null;
+        if (receiver != null && propName != null) {
+          String name = propName.getString();
+          if ((name.equals("call") || name.equals("apply"))
+              && receiver.getType() == Token.NAME) {
+            changed.add(receiver.getString());
+          }
+        }
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
