diff --git a/tmp/9eab9523-74dc-4260-a800-e0faee76a95c_buggy.java b/tmp/34872a7e-2f1a-4960-919c-f29df891621b_fixed.java
index de9af32..3761210 100644
--- a/tmp/9eab9523-74dc-4260-a800-e0faee76a95c_buggy.java
+++ b/tmp/34872a7e-2f1a-4960-919c-f29df891621b_fixed.java
@@ -1,18 +1,26 @@
 /**
  * @see #findCalledFunctions(Node)
  */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
+private void findCalledFunctions(Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    Node fn = node.getFirstChild();
+    if (fn.getType() == Token.NAME) {
+      changed.add(fn.getString());
+    } else if (fn.getType() == Token.GETPROP) {
+      // detect patterns like initialize.call(this, ...)
+      Node prop = fn.getLastChild();
+      if (prop != null && "call".equals(prop.getString())) {
+        Node target = fn.getFirstChild();
+        if (target.getType() == Token.NAME) {
+          changed.add(target.getString());
+        }
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
