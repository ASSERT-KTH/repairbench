diff --git a/tmp/a90c2c7c-7490-46f8-acf3-d1ec9035de95_buggy.java b/tmp/01983db6-531e-432a-abc9-674f58caf395_fixed.java
index de9af32..b2f026b 100644
--- a/tmp/a90c2c7c-7490-46f8-acf3-d1ec9035de95_buggy.java
+++ b/tmp/01983db6-531e-432a-abc9-674f58caf395_fixed.java
@@ -1,18 +1,38 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    Node callee = node.getFirstChild();
+    // Direct call of a named function: foo()
+    if (callee.getType() == Token.NAME) {
+      changed.add(callee.getString());
+    }
+    // Indirect call via .call or .apply: fn.call(this, ...) or ns.fn.apply(...)
+    else if (callee.getType() == Token.GETPROP) {
+      Node propName = callee.getLastChild();
+      String name = propName.getString();
+      if ("call".equals(name) || "apply".equals(name)) {
+        Node target = callee.getFirstChild();
+        // fn.call(...)
+        if (target.getType() == Token.NAME) {
+          changed.add(target.getString());
+        }
+        // ns.fn.call(...)
+        else if (target.getType() == Token.GETPROP) {
+          Node leaf = target.getLastChild();
+          if (leaf.getType() == Token.NAME) {
+            changed.add(leaf.getString());
+          }
+        }
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
