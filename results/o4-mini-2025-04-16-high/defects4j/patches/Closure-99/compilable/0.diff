diff --git a/tmp/9b863d8a-f8cd-480e-87a6-ddc80dec6828_buggy.java b/tmp/884830d5-d18c-419e-bbb3-2c203cc25c48_fixed.java
index 86553f4..2796d57 100644
--- a/tmp/9b863d8a-f8cd-480e-87a6-ddc80dec6828_buggy.java
+++ b/tmp/884830d5-d18c-419e-bbb3-2c203cc25c48_fixed.java
@@ -1,57 +1,62 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
+@Override
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
+  // Since this pass reports errors only when a global `this` keyword
+  // is encountered, there is no reason to traverse non-global contexts.
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+    // Don't traverse functions that are constructors, interfaces,
+    // or have the @this or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
-          (jsDoc.isConstructor() ||
-           jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+        (jsDoc.isConstructor()
+         || jsDoc.isInterface()
+         || jsDoc.hasThisType()
+         || jsDoc.isOverride())) {
       return false;
     }
-
     // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
+    // be able to have a @this annotation associated with them.
     int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+    if (!(pType == Token.BLOCK
+          || pType == Token.SCRIPT
+          || pType == Token.NAME
+          || pType == Token.ASSIGN)) {
       return false;
     }
   }
 
+  // Handle methods assigned to prototype chains.
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
-      
+    // Always traverse the left side of the assignment.
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
+      // Don't traverse the right side (the function) if the LHS
+      // is assigning to a prototype property or any subproperty.
+      // e.g. a.prototype = …; a.prototype.foo = …; a.prototype['bar'] = …;
       if (lhs.getType() == Token.GETPROP &&
           lhs.getLastChild().getString().equals("prototype")) {
         return false;
       }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+      if (lhs.getQualifiedName() != null &&
+          lhs.getQualifiedName().contains(".prototype.")) {
         return false;
       }
+      if (lhs.getType() == Token.GETELEM) {
+        Node obj = lhs.getFirstChild();
+        if (obj.getType() == Token.GETPROP &&
+            obj.getLastChild().getString().equals("prototype")) {
+          return false;
+        }
+        String objQName = obj.getQualifiedName();
+        if (objQName != null && objQName.contains(".prototype.")) {
+          return false;
+        }
+      }
     }
   }
 
   return true;
 }
\ No newline at end of file
