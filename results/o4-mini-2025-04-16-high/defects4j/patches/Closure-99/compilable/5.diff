diff --git a/tmp/f0ed5f49-8e8a-4ff7-9b86-9c8b11bec635_buggy.java b/tmp/6f826b4d-ee16-4914-af31-54a1008aabf2_fixed.java
index 86553f4..cf2d733 100644
--- a/tmp/f0ed5f49-8e8a-4ff7-9b86-9c8b11bec635_buggy.java
+++ b/tmp/6f826b4d-ee16-4914-af31-54a1008aabf2_fixed.java
@@ -1,57 +1,50 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
+@Override
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
+  // Since this pass reports errors only when a global "this" keyword
+  // is encountered, we avoid traversing non‐global contexts.
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+    // Don't traverse constructors, interfaces, or functions with
+    // @this or @override annotations.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
+         jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
-
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
+    // Only traverse top‐level or simple assignment contexts.
     int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+    if (pType != Token.BLOCK &&
+        pType != Token.SCRIPT &&
+        pType != Token.NAME &&
+        pType != Token.ASSIGN) {
       return false;
     }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
-      
+    // If we're on the LHS, always traverse (for nested assignments).
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      // If we're on the RHS, skip any function assigned
+      // to a prototype property or its subproperties.
+      Node candidate = lhs;
+      while (candidate != null &&
+             (candidate.getType() == Token.GETPROP ||
+              candidate.getType() == Token.GETELEM)) {
+        if (candidate.getType() == Token.GETPROP &&
+            "prototype".equals(candidate.getLastChild().getString())) {
           return false;
         }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
-            return false;
+        candidate = candidate.getFirstChild();
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
