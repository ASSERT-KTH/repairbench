diff --git a/tmp/2a3152e2-4d37-45f3-ada2-6b49626d3f4e_buggy.java b/tmp/598b10a9-67f5-4b49-9e6f-305362c3c44c_fixed.java
index 86553f4..843f114 100644
--- a/tmp/2a3152e2-4d37-45f3-ada2-6b49626d3f4e_buggy.java
+++ b/tmp/598b10a9-67f5-4b49-9e6f-305362c3c44c_fixed.java
@@ -1,57 +1,58 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
+@Override
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
+  // Skip functions that are constructors, interfaces, have @this or @override.
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
-      if (jsDoc != null &&
-          (jsDoc.isConstructor() ||
-           jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+    if (jsDoc != null
+        && (jsDoc.isConstructor()
+            || jsDoc.isInterface()
+            || jsDoc.hasThisType()
+            || jsDoc.isOverride())) {
       return false;
     }
-
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
-      int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+    // Only traverse top‐level or simple assignments to functions.
+    int pType = (parent == null) ? -1 : parent.getType();
+    if (!(pType == Token.BLOCK
+          || pType == Token.SCRIPT
+          || pType == Token.NAME
+          || pType == Token.ASSIGN)) {
       return false;
     }
   }
 
+  // In an assignment, skip the RHS if it's assigning to a prototype chain.
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
-      
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+      // Always traverse the LHS once to track nested assignments.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      // Check for static prototype assignments: a.prototype = … or a.prototype.foo = …
+      if (lhs.getType() == Token.GETPROP) {
+        if (lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+        String qname = lhs.getQualifiedName();
+        if (qname != null && qname.contains(".prototype.")) {
           return false;
         }
       }
+      // Check for dynamic prototype assignments: a.prototype['x'] = …
+      else if (lhs.getType() == Token.GETELEM) {
+        Node obj = lhs.getFirstChild();
+        if (obj.getType() == Token.GETPROP
+            && obj.getLastChild().getString().equals("prototype")) {
+          return false;
+        }
+        String qname2 = obj.getQualifiedName();
+        if (qname2 != null && qname2.contains(".prototype.")) {
+          return false;
+        }
+      }
+    }
   }
 
   return true;
 }
\ No newline at end of file
