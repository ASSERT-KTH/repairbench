diff --git a/tmp/59473791-278a-4f21-8a65-044ade615f8b_buggy.java b/tmp/3b4c8318-63a1-4e19-acdc-a9e7fbae8677_fixed.java
index 86553f4..26c8845 100644
--- a/tmp/59473791-278a-4f21-8a65-044ade615f8b_buggy.java
+++ b/tmp/3b4c8318-63a1-4e19-acdc-a9e7fbae8677_fixed.java
@@ -1,57 +1,60 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
+@Override
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
+  // Skip any function that is a constructor, interface, or has an explicit
+  // @this or @override annotation.
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
+         jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
-
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
+    // Only traverse function expressions/declarations in BLOCK, SCRIPT, NAME or ASSIGN
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN)) {
       return false;
     }
   }
 
+  // If this function is the right‐hand side of an assignment to a
+  // prototype or a sub‐property of a prototype, skip it.
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
-      
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+      // Always traverse the left‐hand side to handle nested assignments.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
+      // Case 1: direct prototype assignment: a.prototype = …
       if (lhs.getType() == Token.GETPROP &&
           lhs.getLastChild().getString().equals("prototype")) {
         return false;
       }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+      // Case 2: dot‐chained prototype subproperty: a.prototype.foo = …
+      String qname = lhs.getQualifiedName();
+      if (qname != null && qname.contains(".prototype.")) {
         return false;
       }
+      // Case 3: computed prototype assignment: a.prototype['x'] = … or deeper.
+      if (lhs.getType() == Token.GETELEM) {
+        Node target = lhs.getFirstChild();
+        if (target.getType() == Token.GETPROP &&
+            target.getLastChild().getString().equals("prototype")) {
+          return false;
+        }
+        String targetName = target.getQualifiedName();
+        if (targetName != null && targetName.contains(".prototype.")) {
+          return false;
+        }
+      }
     }
   }
 
   return true;
 }
\ No newline at end of file
