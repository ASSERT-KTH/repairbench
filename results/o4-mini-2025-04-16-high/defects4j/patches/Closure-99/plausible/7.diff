diff --git a/tmp/ca7fc398-605a-4242-870e-953692eeecea_buggy.java b/tmp/02f08c56-9d42-4cd5-894f-7b54756c894d_fixed.java
index 86553f4..186748f 100644
--- a/tmp/ca7fc398-605a-4242-870e-953692eeecea_buggy.java
+++ b/tmp/02f08c56-9d42-4cd5-894f-7b54756c894d_fixed.java
@@ -1,57 +1,61 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
+@Override
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+    // Don't traverse constructors, @this, @override, or @interface functions.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
-          (jsDoc.isConstructor() ||
-           jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+        (jsDoc.isConstructor()
+         || jsDoc.hasThisType()
+         || jsDoc.isOverride()
+         || jsDoc.isInterface())) {
       return false;
     }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
+    // Only traverse functions in places where a @this could apply:
+    // block, script, a name, or an assignment.
+    if (parent != null) {
       int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+      if (!(pType == Token.BLOCK
+            || pType == Token.SCRIPT
+            || pType == Token.NAME
+            || pType == Token.ASSIGN)) {
         return false;
       }
     }
+  }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
-      
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+      // Always traverse the LHS of an assignment to handle nested assigns.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      // We're about to traverse the RHS.  Skip it if this is
+      // a direct assignment to Foo.prototype or one of its *direct* properties.
+      if (lhs.getType() == Token.GETPROP) {
+        // Skip Foo.prototype = ...
+        if (lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+        // Skip Foo.prototype.bar = ...
+        Node obj = lhs.getFirstChild();
+        if (obj.getType() == Token.GETPROP
+            && obj.getLastChild().getString().equals("prototype")) {
           return false;
         }
+      } else if (lhs.getType() == Token.GETELEM) {
+        // Skip Foo.prototype['bar'] = ...
+        Node obj = lhs.getFirstChild();
+        if (obj.getType() == Token.GETPROP
+            && obj.getLastChild().getString().equals("prototype")) {
+          return false;
+        }
+      }
     }
   }
 
   return true;
 }
\ No newline at end of file
