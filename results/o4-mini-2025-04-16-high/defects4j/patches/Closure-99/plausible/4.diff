diff --git a/tmp/9dafbcac-1781-4382-9853-6e39608eb449_buggy.java b/tmp/6f541961-e31b-4ccd-8b34-ce5ead5ae26f_fixed.java
index 86553f4..3161140 100644
--- a/tmp/9dafbcac-1781-4382-9853-6e39608eb449_buggy.java
+++ b/tmp/6f541961-e31b-4ccd-8b34-ce5ead5ae26f_fixed.java
@@ -1,57 +1,52 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
+@Override
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
+  // Skip any function that is known to bind `this` safely.
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
-      if (jsDoc != null &&
-          (jsDoc.isConstructor() ||
-           jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+    if (jsDoc != null
+        && (jsDoc.isConstructor()
+            || jsDoc.hasThisType()
+            || jsDoc.isOverride()
+            || jsDoc.isInterface())) {
       return false;
     }
-
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
     int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+    // Only traverse top‐level functions or functions assigned at top‐level.
+    if (!(pType == Token.BLOCK
+          || pType == Token.SCRIPT
+          || pType == Token.NAME
+          || pType == Token.ASSIGN)) {
       return false;
     }
   }
 
+  // Handle assignments specially: we only skip RHS functions when
+  // they are methods on `prototype` itself or its *immediate* properties.
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
-      
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+      // Always traverse the LHS so we can track nested assignments.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      // 1) a.prototype = ...
+      if (lhs.getType() == Token.GETPROP
+          && lhs.getLastChild().getString().equals("prototype")) {
         return false;
       }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+      // 2) a.prototype.x = ...  or  a.prototype[x] = ...
+      if (lhs.getType() == Token.GETPROP
+          || lhs.getType() == Token.GETELEM) {
+        Node qualifier = lhs.getFirstChild();
+        if (qualifier != null
+            && qualifier.getType() == Token.GETPROP
+            && qualifier.getLastChild().getString().equals("prototype")) {
           return false;
         }
       }
     }
+  }
 
   return true;
 }
\ No newline at end of file
