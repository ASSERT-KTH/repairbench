diff --git a/tmp/78c5b128-be10-4510-a1ae-d42f8976ab6f_buggy.java b/tmp/c43d406c-1991-4e14-bd6f-f1ffdccd2326_fixed.java
index 6f24eb6..fcfc795 100644
--- a/tmp/78c5b128-be10-4510-a1ae-d42f8976ab6f_buggy.java
+++ b/tmp/c43d406c-1991-4e14-bd6f-f1ffdccd2326_fixed.java
@@ -1,99 +1,96 @@
-  /**
-   * Determines whether the given property is visible in the current context.
-   * @param t The current traversal.
-   * @param getprop The getprop node.
-   */
 private void checkPropertyVisibility(NodeTraversal t,
     Node getprop, Node parent) {
   ObjectType objectType =
       ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
   String propertyName = getprop.getLastChild().getString();
 
   if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
+    // Determine whether this is an override of an existing property.
+    // We only treat it as an override if it's an assignment to a property
+    // and the assignment node has JSDoc (so pure reads or un-annotated
+    // prototype assignments still count as normal access).
+    boolean isOverride =
         parent.getType() == Token.ASSIGN &&
-          parent.getFirstChild() == getprop;
+        parent.getFirstChild() == getprop &&
+        parent.getJSDocInfo() != null &&
+        (t.inGlobalScope() || getprop.getFirstChild().isThis());
 
-      // Find the lowest property defined on a class with visibility
-      // information.
+    // Find the lowest property defined on a class with visibility info.
     if (isOverride) {
       objectType = objectType.getImplicitPrototype();
     }
     JSDocInfo docInfo = null;
     for (; objectType != null;
          objectType = objectType.getImplicitPrototype()) {
       docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
       if (docInfo != null &&
           docInfo.getVisibility() != Visibility.INHERITED) {
         break;
       }
     }
 
     if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+      // No visibility modifier found; assume public.
       return;
     }
 
     boolean sameInput =
         t.getInput().getName().equals(docInfo.getSourceName());
     Visibility visibility = docInfo.getVisibility();
     JSType ownerType = normalizeClassType(objectType);
+
     if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
+      // We're overriding a superclass property.
       JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
+      Visibility overridingVisibility =
+          (overridingInfo == null)
+          ? Visibility.INHERITED
+          : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
+      // (a) Can't override a private property from another file.
+      // (b) If you declare a visibility on the override, it must match.
       if (visibility == Visibility.PRIVATE && !sameInput) {
         compiler.report(
             t.makeError(getprop, PRIVATE_OVERRIDE,
                 objectType.toString()));
       } else if (overridingVisibility != Visibility.INHERITED &&
                  overridingVisibility != visibility) {
         compiler.report(
             t.makeError(getprop, VISIBILITY_MISMATCH,
                 visibility.name(), objectType.toString(),
                 overridingVisibility.name()));
       }
     } else {
+      // Normal access.
       if (sameInput) {
-          // private access is always allowed in the same file.
+        // Private access always allowed within the same file.
         return;
       } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
+                 (currentClass == null ||
+                  ownerType.differsFrom(currentClass))) {
+        // Allow private constructor calls in valid contexts.
         if (docInfo.isConstructor() &&
             isValidPrivateConstructorAccess(parent)) {
           return;
         }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
+        // Otherwise it's a bad private access.
         compiler.report(
-              t.makeError(getprop,
-                  BAD_PRIVATE_PROPERTY_ACCESS,
+            t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
                 propertyName,
                 validator.getReadableJSTypeName(
                     getprop.getFirstChild(), true)));
       } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
+        // Protected: same-file access or inside a subclass is OK.
+        // (Overrides already handled above.)
+        if (currentClass == null ||
+            !currentClass.isSubtype(ownerType)) {
           compiler.report(
               t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         }
       }
     }
   }
 }
\ No newline at end of file
