diff --git a/tmp/48e27a59-63d4-4d63-a0b4-e2a62214a205_buggy.java b/tmp/45a4a3d6-38b7-4f3a-9289-a001f2c9513b_fixed.java
index 6f24eb6..5181975 100644
--- a/tmp/48e27a59-63d4-4d63-a0b4-e2a62214a205_buggy.java
+++ b/tmp/45a4a3d6-38b7-4f3a-9289-a001f2c9513b_fixed.java
@@ -1,99 +1,100 @@
-  /**
-   * Determines whether the given property is visible in the current context.
-   * @param t The current traversal.
-   * @param getprop The getprop node.
-   */
 private void checkPropertyVisibility(NodeTraversal t,
     Node getprop, Node parent) {
   ObjectType objectType =
       ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
   String propertyName = getprop.getLastChild().getString();
 
   if (objectType != null) {
     // Is this a normal property access, or are we trying to override
     // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
+    boolean isOverride =
         parent.getType() == Token.ASSIGN &&
-          parent.getFirstChild() == getprop;
+        parent.getFirstChild() == getprop &&
+        (t.inGlobalScope()
+         || (getprop.getFirstChild().isThis() && currentClass != null));
+
+    // If we're overriding, skip the current type only for prototype
+    // overrides; keep 'this' for instance-property overrides.
+    if (isOverride && !getprop.getFirstChild().isThis()) {
+      objectType = objectType.getImplicitPrototype();
+    }
 
     // Find the lowest property defined on a class with visibility
     // information.
-      if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
-      }
     JSDocInfo docInfo = null;
     for (; objectType != null;
          objectType = objectType.getImplicitPrototype()) {
       docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
       if (docInfo != null &&
           docInfo.getVisibility() != Visibility.INHERITED) {
         break;
       }
     }
 
     if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+      // No visibility info â‡’ public.
       return;
     }
 
     boolean sameInput =
         t.getInput().getName().equals(docInfo.getSourceName());
     Visibility visibility = docInfo.getVisibility();
     JSType ownerType = normalizeClassType(objectType);
+
     if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
       JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
+      Visibility overridingVisibility = overridingInfo == null
+          ? Visibility.INHERITED
+          : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
+      // If the original is private and we're in a different file,
+      // we disallow overriding.  If there's no @private on the override
+      // we treat it as a bad access; if there is, we give the override
+      // error.
       if (visibility == Visibility.PRIVATE && !sameInput) {
+        if (overridingVisibility == Visibility.INHERITED) {
+          compiler.report(
+              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
+                  propertyName,
+                  validator.getReadableJSTypeName(
+                      getprop.getFirstChild(), true)));
+        } else {
           compiler.report(
               t.makeError(getprop, PRIVATE_OVERRIDE,
                   objectType.toString()));
+        }
       } else if (overridingVisibility != Visibility.INHERITED &&
           overridingVisibility != visibility) {
         compiler.report(
             t.makeError(getprop, VISIBILITY_MISMATCH,
                 visibility.name(), objectType.toString(),
                 overridingVisibility.name()));
       }
     } else {
       if (sameInput) {
         // private access is always allowed in the same file.
         return;
       } else if (visibility == Visibility.PRIVATE &&
           (currentClass == null || ownerType.differsFrom(currentClass))) {
         if (docInfo.isConstructor() &&
             isValidPrivateConstructorAccess(parent)) {
           return;
         }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
         compiler.report(
-              t.makeError(getprop,
-                  BAD_PRIVATE_PROPERTY_ACCESS,
+            t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
                 propertyName,
                 validator.getReadableJSTypeName(
                     getprop.getFirstChild(), true)));
       } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
+        if (currentClass == null ||
+            !currentClass.isSubtype(ownerType)) {
           compiler.report(
               t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         }
       }
     }
   }
 }
\ No newline at end of file
