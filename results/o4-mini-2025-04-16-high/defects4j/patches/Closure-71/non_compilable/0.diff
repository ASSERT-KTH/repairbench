diff --git a/tmp/9a6f1e5d-2cd1-47aa-8132-f6686a96ebf3_buggy.java b/tmp/096fc958-63d0-4ace-a825-ec8bb6c09912_fixed.java
index 6f24eb6..599097c 100644
--- a/tmp/9a6f1e5d-2cd1-47aa-8132-f6686a96ebf3_buggy.java
+++ b/tmp/096fc958-63d0-4ace-a825-ec8bb6c09912_fixed.java
@@ -1,99 +1,116 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
+   * @param parent The parent of the getprop node.
    */
   private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
     ObjectType objectType =
         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
     String propertyName = getprop.getLastChild().getString();
 
     if (objectType != null) {
       // Is this a normal property access, or are we trying to override
-      // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
-          parent.getType() == Token.ASSIGN &&
-          parent.getFirstChild() == getprop;
+      // an existing property?  We allow overrides at top-level (prototype
+      // assignments) or in a subclass constructor (this.prop_ = ...).
+      boolean isOverride = parent.getType() == Token.ASSIGN
+          && parent.getFirstChild() == getprop
+          && (t.inGlobalScope()
+              || (getprop.getFirstChild().isThis() && currentClass != null));
 
-      // Find the lowest property defined on a class with visibility
-      // information.
+      // If it's an override, start looking one level up the chain.
       if (isOverride) {
         objectType = objectType.getImplicitPrototype();
       }
+
+      // Find the lowest property defined on a class with visibility info.
       JSDocInfo docInfo = null;
       for (; objectType != null;
            objectType = objectType.getImplicitPrototype()) {
         docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
         if (docInfo != null &&
             docInfo.getVisibility() != Visibility.INHERITED) {
           break;
         }
       }
 
       if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+        // No visibility specified => public.
         return;
       }
 
       boolean sameInput =
           t.getInput().getName().equals(docInfo.getSourceName());
       Visibility visibility = docInfo.getVisibility();
       JSType ownerType = normalizeClassType(objectType);
+
       if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
+        // We're in an ASSIGN that's overriding a superclass property.
         JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
+        Visibility overridingVisibility = overridingInfo == null
+            ? Visibility.INHERITED
+            : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
+        // (1) Cannot override a private property from another file.
         if (visibility == Visibility.PRIVATE && !sameInput) {
+          if (overridingVisibility == Visibility.INHERITED) {
+            // No @private on the override => bad private access.
             compiler.report(
-              t.makeError(getprop, PRIVATE_OVERRIDE,
+                t.makeError(getprop,
+                    BAD_PRIVATE_PROPERTY_ACCESS,
+                    propertyName,
+                    validator.getReadableJSTypeName(
+                        getprop.getFirstChild(), true)));
+          } else {
+            // Marked @private but still overriding across files.
+            compiler.report(
+                t.makeError(getprop,
+                    PRIVATE_OVERRIDE,
                     objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
-            overridingVisibility != visibility) {
+          }
+        }
+        // (2) If the override has a visibility annotation, it must match.
+        else if (overridingVisibility != Visibility.INHERITED
+            && overridingVisibility != visibility) {
           compiler.report(
-              t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
+              t.makeError(getprop,
+                  VISIBILITY_MISMATCH,
+                  visibility.name(),
+                  objectType.toString(),
                   overridingVisibility.name()));
         }
       } else {
+        // Normal property access.
         if (sameInput) {
           // private access is always allowed in the same file.
           return;
-        } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
-          if (docInfo.isConstructor() &&
-              isValidPrivateConstructorAccess(parent)) {
+        } else if (visibility == Visibility.PRIVATE
+            && (currentClass == null
+                || ownerType.differsFrom(currentClass))) {
+          if (docInfo.isConstructor()
+              && isValidPrivateConstructorAccess(parent)) {
             return;
           }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
+          // private access is not allowed outside the file or class.
           compiler.report(
               t.makeError(getprop,
                   BAD_PRIVATE_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
+          // Protected: same file, override, or subclass method.
+          if (currentClass == null
+              || !currentClass.isSubtype(ownerType)) {
             compiler.report(
-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
+                t.makeError(getprop,
+                    BAD_PROTECTED_PROPERTY_ACCESS,
                     propertyName,
                     validator.getReadableJSTypeName(
                         getprop.getFirstChild(), true)));
           }
         }
       }
     }
   }
\ No newline at end of file
