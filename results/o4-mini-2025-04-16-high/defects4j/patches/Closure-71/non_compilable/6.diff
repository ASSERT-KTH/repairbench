diff --git a/tmp/896a9074-73e3-477f-ba44-478a879b2e7a_buggy.java b/tmp/a9606abd-25bb-4144-b30b-cf37341bf942_fixed.java
index 6f24eb6..72c70b4 100644
--- a/tmp/896a9074-73e3-477f-ba44-478a879b2e7a_buggy.java
+++ b/tmp/a9606abd-25bb-4144-b30b-cf37341bf942_fixed.java
@@ -1,99 +1,116 @@
 /**
  * Determines whether the given property is visible in the current context.
  * @param t The current traversal.
  * @param getprop The getprop node.
  */
-  private void checkPropertyVisibility(NodeTraversal t,
-      Node getprop, Node parent) {
+private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {
   ObjectType objectType =
       ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
   String propertyName = getprop.getLastChild().getString();
 
   if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
-          parent.getType() == Token.ASSIGN &&
-          parent.getFirstChild() == getprop;
+    // Determine if this is an override:
+    boolean isOverride = false;
+    if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop) {
+      // (1) prototype override at top level
+      if (t.inGlobalScope()) {
+        isOverride = true;
+      }
+      // (2) instance-property override in a subclass constructor
+      else if (getprop.getFirstChild().isThis() && currentClass != null) {
+        isOverride = true;
+      }
+    }
 
-      // Find the lowest property defined on a class with visibility
-      // information.
+    // If we're overriding, start the search on the superclass type.
     if (isOverride) {
       objectType = objectType.getImplicitPrototype();
     }
+
+    // Find the lowest property defined on a class with visibility info.
     JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
+    for (; objectType != null; objectType = objectType.getImplicitPrototype()) {
       docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
       if (docInfo != null &&
           docInfo.getVisibility() != Visibility.INHERITED) {
         break;
       }
     }
 
     if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+      // No visibility modifier found; assume public.
       return;
     }
 
     boolean sameInput =
         t.getInput().getName().equals(docInfo.getSourceName());
     Visibility visibility = docInfo.getVisibility();
     JSType ownerType = normalizeClassType(objectType);
+
     if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
+      // We're overriding a property on a superclass.
       JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
+      Visibility overridingVisibility = (overridingInfo == null)
+          ? Visibility.INHERITED
+          : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
+      // (a) Overriding a private property:
       if (visibility == Visibility.PRIVATE && !sameInput) {
+        if (overridingVisibility == Visibility.INHERITED) {
+          // Non-annotated override ⇒ illegal private access
           compiler.report(
-              t.makeError(getprop, PRIVATE_OVERRIDE,
+              t.makeError(getprop,
+                  BAD_PRIVATE_PROPERTY_ACCESS,
+                  propertyName,
+                  validator.getReadableJSTypeName(
+                      getprop.getFirstChild(), true)));
+        } else {
+          // Annotated override ⇒ illegal private override
+          compiler.report(
+              t.makeError(getprop,
+                  PRIVATE_OVERRIDE,
                   objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
+        }
+      }
+      // (b) Override visibility mismatch
+      else if (overridingVisibility != Visibility.INHERITED &&
                overridingVisibility != visibility) {
         compiler.report(
-              t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
+            t.makeError(getprop,
+                VISIBILITY_MISMATCH,
+                visibility.name(),
+                objectType.toString(),
                 overridingVisibility.name()));
       }
     } else {
+      // Non-override access checks.
       if (sameInput) {
         // private access is always allowed in the same file.
         return;
       } else if (visibility == Visibility.PRIVATE &&
                  (currentClass == null || ownerType.differsFrom(currentClass))) {
         if (docInfo.isConstructor() &&
             isValidPrivateConstructorAccess(parent)) {
           return;
         }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
         compiler.report(
             t.makeError(getprop,
                 BAD_PRIVATE_PROPERTY_ACCESS,
                 propertyName,
                 validator.getReadableJSTypeName(
                     getprop.getFirstChild(), true)));
       } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
+        // Allowed only in same file, or from within a subclass.
+        if (currentClass == null ||
+            !currentClass.isSubtype(ownerType)) {
           compiler.report(
-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
+              t.makeError(getprop,
+                  BAD_PROTECTED_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         }
       }
     }
   }
 }
\ No newline at end of file
