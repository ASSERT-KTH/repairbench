diff --git a/tmp/0e4b888c-8efd-47ad-b34a-221670d991e4_buggy.java b/tmp/27e21df2-b26f-453a-a8df-24e78f58bf51_fixed.java
index 6f24eb6..cc0b860 100644
--- a/tmp/0e4b888c-8efd-47ad-b34a-221670d991e4_buggy.java
+++ b/tmp/27e21df2-b26f-453a-a8df-24e78f58bf51_fixed.java
@@ -1,99 +1,109 @@
 /**
  * Determines whether the given property is visible in the current context.
  * @param t The current traversal.
  * @param getprop The getprop node.
+ * @param parent The parent node.
  */
 private void checkPropertyVisibility(NodeTraversal t,
     Node getprop, Node parent) {
   ObjectType objectType =
       ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
   String propertyName = getprop.getLastChild().getString();
 
   if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
+    // Are we performing an override (an assignment to an existing property),
+    // or just a normal access?
+    boolean isOverride =
         parent.getType() == Token.ASSIGN &&
         parent.getFirstChild() == getprop;
 
-      // Find the lowest property defined on a class with visibility
-      // information.
+    // If it's an override, skip the current class and look on the prototype chain.
     if (isOverride) {
       objectType = objectType.getImplicitPrototype();
     }
+
+    // Find the lowest property on the prototype chain with visibility info.
     JSDocInfo docInfo = null;
     for (; objectType != null;
          objectType = objectType.getImplicitPrototype()) {
       docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
       if (docInfo != null &&
           docInfo.getVisibility() != Visibility.INHERITED) {
         break;
       }
     }
 
     if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+      // No visibility annotation → public by default.
       return;
     }
 
     boolean sameInput =
         t.getInput().getName().equals(docInfo.getSourceName());
     Visibility visibility = docInfo.getVisibility();
     JSType ownerType = normalizeClassType(objectType);
+
     if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
+      // We're overriding a property on a superclass.
       JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
+      Visibility overridingVisibility = overridingInfo == null
+          ? Visibility.INHERITED
+          : overridingInfo.getVisibility();
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
       if (visibility == Visibility.PRIVATE && !sameInput) {
+        // Original is @private in another file.
+        if (overridingVisibility == Visibility.PRIVATE) {
+          // The override is also marked @private.
           compiler.report(
               t.makeError(getprop, PRIVATE_OVERRIDE,
                   objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
-            overridingVisibility != visibility) {
+        } else {
+          // Override lacks @private → treat as illegal private access.
+          compiler.report(
+              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
+                  propertyName,
+                  validator.getReadableJSTypeName(
+                      getprop.getFirstChild(), true)));
+        }
+      } else if (overridingVisibility != Visibility.INHERITED
+          && overridingVisibility != visibility) {
+        // The override has a visibility annotation that doesn't match.
         compiler.report(
             t.makeError(getprop, VISIBILITY_MISMATCH,
                 visibility.name(), objectType.toString(),
                 overridingVisibility.name()));
       }
+
     } else {
+      // A normal access (not defining/overriding a property).
       if (sameInput) {
-          // private access is always allowed in the same file.
+        // Private access is always allowed within the same file.
         return;
-        } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
-          if (docInfo.isConstructor() &&
-              isValidPrivateConstructorAccess(parent)) {
+      } else if (visibility == Visibility.PRIVATE
+          && (currentClass == null
+              || ownerType.differsFrom(currentClass))) {
+        // Check for the special "private constructor" pattern.
+        if (docInfo.isConstructor()
+            && isValidPrivateConstructorAccess(parent)) {
           return;
         }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
+        // Illegal @private access from another file/different class.
         compiler.report(
-              t.makeError(getprop,
-                  BAD_PRIVATE_PROPERTY_ACCESS,
+            t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
                 propertyName,
                 validator.getReadableJSTypeName(
                     getprop.getFirstChild(), true)));
       } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
+        // Protected: must be same file, an override, or inside a subclass.
+        if (currentClass == null
+            || !currentClass.isSubtype(ownerType)) {
           compiler.report(
               t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
                   propertyName,
                   validator.getReadableJSTypeName(
                       getprop.getFirstChild(), true)));
         }
       }
     }
   }
 }
\ No newline at end of file
