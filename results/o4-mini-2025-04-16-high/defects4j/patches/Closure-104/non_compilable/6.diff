diff --git a/tmp/ee4abf47-02df-479b-a023-6d20053e856d_buggy.java b/tmp/67c5c154-c5fe-459b-ace4-e45fffbb0b7c_fixed.java
index b36b2a9..a4224cb 100644
--- a/tmp/ee4abf47-02df-479b-a023-6d20053e856d_buggy.java
+++ b/tmp/67c5c154-c5fe-459b-ace4-e45fffbb0b7c_fixed.java
@@ -1,26 +1,33 @@
+@Override
 JSType meet(JSType that) {
   UnionTypeBuilder builder = new UnionTypeBuilder(registry);
+  // Add any alternates of this union that are subtypes of that.
   for (JSType alternate : alternates) {
     if (alternate.isSubtype(that)) {
       builder.addAlternate(alternate);
     }
   }
-
+  // Add any alternates of that union (or that itself) that are subtypes of this.
   if (that instanceof UnionType) {
     for (JSType otherAlternate : ((UnionType) that).alternates) {
       if (otherAlternate.isSubtype(this)) {
         builder.addAlternate(otherAlternate);
       }
     }
   } else if (that.isSubtype(this)) {
     builder.addAlternate(that);
   }
+  // If we found any common subtypes, return their union.
   JSType result = builder.build();
   if (result != null) {
     return result;
-    } else if (this.isObject() && that.isObject()) {
+  }
+  // Otherwise, if both operands are object‚Äêsubtypes, the greatest subtype
+  // is the empty object set; else it's the empty type.
+  JSType objectType = getNativeType(JSTypeNative.OBJECT_TYPE);
+  if (this.isSubtype(objectType) && that.isSubtype(objectType)) {
     return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
   } else {
     return getNativeType(JSTypeNative.NO_TYPE);
   }
 }
\ No newline at end of file
