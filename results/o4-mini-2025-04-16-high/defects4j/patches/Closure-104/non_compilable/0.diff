diff --git a/tmp/04088cb0-a489-4f3d-ac42-3b50b8094983_buggy.java b/tmp/0826e4d2-970c-4bd2-8336-8fbae3d6b863_fixed.java
index b36b2a9..0ba09e8 100644
--- a/tmp/04088cb0-a489-4f3d-ac42-3b50b8094983_buggy.java
+++ b/tmp/0826e4d2-970c-4bd2-8336-8fbae3d6b863_fixed.java
@@ -1,26 +1,36 @@
+@Override
 JSType meet(JSType that) {
   UnionTypeBuilder builder = new UnionTypeBuilder(registry);
+  // collect all alternates of this that are subtypes of that
   for (JSType alternate : alternates) {
     if (alternate.isSubtype(that)) {
       builder.addAlternate(alternate);
     }
   }
-
+  // if 'that' is a union, collect its alternates that are subtypes of this
   if (that instanceof UnionType) {
     for (JSType otherAlternate : ((UnionType) that).alternates) {
       if (otherAlternate.isSubtype(this)) {
         builder.addAlternate(otherAlternate);
       }
     }
   } else if (that.isSubtype(this)) {
     builder.addAlternate(that);
   }
+
+  // if we found any common subtype(s), return that union or single type
   JSType result = builder.build();
   if (result != null) {
     return result;
-    } else if (this.isObject() && that.isObject()) {
+  }
+
+  // otherwise, if both sides are subtypes of the object type,
+  // their greatest subtype is NO_OBJECT_TYPE
+  JSType objectType = getNativeType(JSTypeNative.OBJECT_TYPE);
+  if (this.isSubtype(objectType) && that.isSubtype(objectType)) {
     return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
-    } else {
+  }
+
+  // no common subtype at all
   return getNativeType(JSTypeNative.NO_TYPE);
 }
\ No newline at end of file
-  }
