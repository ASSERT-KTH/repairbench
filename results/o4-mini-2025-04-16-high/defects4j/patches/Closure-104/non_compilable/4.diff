diff --git a/tmp/b7c20c2a-da09-4f64-b2e4-38990aab43de_buggy.java b/tmp/59e9a396-9ff2-4b4c-a186-a60531ccf8ca_fixed.java
index b36b2a9..9f3ab75 100644
--- a/tmp/b7c20c2a-da09-4f64-b2e4-38990aab43de_buggy.java
+++ b/tmp/59e9a396-9ff2-4b4c-a186-a60531ccf8ca_fixed.java
@@ -1,26 +1,36 @@
+@Override
 JSType meet(JSType that) {
   UnionTypeBuilder builder = new UnionTypeBuilder(registry);
+  // Collect any alternates of this union that are subtypes of 'that'
   for (JSType alternate : alternates) {
     if (alternate.isSubtype(that)) {
       builder.addAlternate(alternate);
     }
   }
-
+  // If 'that' is also a union, collect its alternates that are subtypes of this
   if (that instanceof UnionType) {
     for (JSType otherAlternate : ((UnionType) that).alternates) {
       if (otherAlternate.isSubtype(this)) {
         builder.addAlternate(otherAlternate);
       }
     }
   } else if (that.isSubtype(this)) {
+    // If 'that' is a single type and is a subtype of this union
     builder.addAlternate(that);
   }
+
+  // If we found any common subtypes, build and return the result.
   JSType result = builder.build();
   if (result != null) {
     return result;
-    } else if (this.isObject() && that.isObject()) {
+  }
+
+  // Otherwise, if both this union and 'that' are (subtypes of) Object, return NO_OBJECT_TYPE.
+  JSType objectType = getNativeType(JSTypeNative.OBJECT_TYPE);
+  if (this.isSubtype(objectType) && that.isSubtype(objectType)) {
     return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
-    } else {
+  }
+
+  // No common subtype at all.
   return getNativeType(JSTypeNative.NO_TYPE);
 }
\ No newline at end of file
-  }
