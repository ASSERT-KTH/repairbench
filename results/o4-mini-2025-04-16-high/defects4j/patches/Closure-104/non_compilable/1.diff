diff --git a/tmp/fcf0a53b-b889-48ae-ad34-484b00755898_buggy.java b/tmp/e726dde4-94c0-481b-acd0-a13ecadc1cb3_fixed.java
index b36b2a9..fd627dc 100644
--- a/tmp/fcf0a53b-b889-48ae-ad34-484b00755898_buggy.java
+++ b/tmp/e726dde4-94c0-481b-acd0-a13ecadc1cb3_fixed.java
@@ -1,26 +1,32 @@
+@Override
 JSType meet(JSType that) {
   UnionTypeBuilder builder = new UnionTypeBuilder(registry);
+  // Collect all alternates of this union that are subtypes of 'that'
   for (JSType alternate : alternates) {
     if (alternate.isSubtype(that)) {
       builder.addAlternate(alternate);
     }
   }
-
+  // If 'that' is also a union, collect alternates of it that are subtypes of this
   if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
+    for (JSType otherAlt : ((UnionType) that).alternates) {
+      if (otherAlt.isSubtype(this)) {
+        builder.addAlternate(otherAlt);
       }
     }
   } else if (that.isSubtype(this)) {
     builder.addAlternate(that);
   }
+  // If we found any common alternates, build and return the intersection
   JSType result = builder.build();
   if (result != null) {
     return result;
-    } else if (this.isObject() && that.isObject()) {
+  }
+  // Otherwise, if both are (subtypes of) the Object type, return NO_OBJECT_TYPE
+  JSType objType = getNativeType(JSTypeNative.OBJECT_TYPE);
+  if (this.isSubtype(objType) && that.isSubtype(objType)) {
     return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
-    } else {
+  }
+  // No common subtype at all
   return getNativeType(JSTypeNative.NO_TYPE);
 }
\ No newline at end of file
-  }
