diff --git a/tmp/0422fdee-c186-476b-95a7-b5b75a28a887_buggy.java b/tmp/9a3da040-5fd7-4d08-abaf-452ece1af584_fixed.java
index 4aff4e4..6942bee 100644
--- a/tmp/0422fdee-c186-476b-95a7-b5b75a28a887_buggy.java
+++ b/tmp/9a3da040-5fd7-4d08-abaf-452ece1af584_fixed.java
@@ -1,15 +1,35 @@
 private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+    String key = attr.getKey();
+    // keep the original value handy
+    String origVal = attr.getValue() == null ? "" : attr.getValue().trim();
+    String origLower = origVal.toLowerCase();
 
+    // 1) if the raw value already starts with an allowed protocol, accept and leave it alone
     for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+        String prefix = protocol.toString() + ":";
+        if (origLower.startsWith(prefix)) {
+            return true;
+        }
+    }
+
+    // 2) otherwise try to resolve a relative URL to absolute
+    String abs = el.absUrl(key);
+    if (abs.isEmpty()) {
+        // couldn't resolve and didn't match an allowed protocol
+        return false;
+    }
+    // if we're normalizing out relative links, replace the attribute with the absolute
+    if (!preserveRelativeLinks) {
+        attr.setValue(abs);
+    }
+
+    // 3) check the resolved URL against allowed protocols
+    String absLower = abs.toLowerCase();
+    for (Protocol protocol : protocols) {
+        String prefix = protocol.toString() + ":";
+        if (absLower.startsWith(prefix)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
