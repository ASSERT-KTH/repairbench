diff --git a/tmp/4885eb10-ff56-4ffc-a2f4-0139a8d2adcb_buggy.java b/tmp/8b94d817-622f-4247-85c3-4899c1ec776e_fixed.java
index 4aff4e4..a429e31 100644
--- a/tmp/4885eb10-ff56-4ffc-a2f4-0139a8d2adcb_buggy.java
+++ b/tmp/8b94d817-622f-4247-85c3-4899c1ec776e_fixed.java
@@ -1,15 +1,20 @@
 private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
+    String key = attr.getKey();
+    String rawVal = attr.getValue();
+    // try to resolve to an absolute URL; if it fails (e.g. custom schemes), fall back to the raw value
+    String absVal = el.absUrl(key);
+    String value = (absVal != null && absVal.length() > 0) ? absVal : rawVal;
+    // if we’re not preserving relative links, update the attribute to the resolved value (or raw if that’s all we got)
+    if (!preserveRelativeLinks) {
         attr.setValue(value);
-        
+    }
+    // test against the allowed protocols
+    String low = value.trim().toLowerCase();
     for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+        String proto = protocol.toString() + ":";
+        if (low.startsWith(proto)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
