diff --git a/tmp/e6230263-aa00-405b-b5ed-9096e3a91a7a_buggy.java b/tmp/44b5d4cb-4fdb-4447-ba58-8ebb8c0edc35_fixed.java
index 1a63a66..1eff771 100644
--- a/tmp/e6230263-aa00-405b-b5ed-9096e3a91a7a_buggy.java
+++ b/tmp/44b5d4cb-4fdb-4447-ba58-8ebb8c0edc35_fixed.java
@@ -1,21 +1,43 @@
 @Override
 @Deprecated
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
+    // trivial case: same class
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
+    // must be a true subtype
+    if (!_class.isAssignableFrom(subclass)) {
+        throw new IllegalArgumentException("Class "+subclass.getName()
+            +" not sub-type of "+_class.getName());
+    }
+    // reuse existing bindings
+    TypeBindings bindings = _bindings;
+    // figure out the appropriate super‚Äêclass JavaType (if any)
+    JavaType newSuper = null;
+    Class<?> rawSup = subclass.getSuperclass();
+    if (rawSup != null && _class.isAssignableFrom(rawSup)) {
+        // if rawSup exactly matches our old _superClass, keep it; otherwise narrow recursively
+        if (_superClass != null && rawSup == _superClass.getRawClass()) {
+            newSuper = _superClass;
+        } else {
+            newSuper = _narrow(rawSup);
+        }
+    }
+    // collect any interfaces between subclass and our original _class
+    List<JavaType> intfs = new ArrayList<JavaType>();
+    for (Class<?> iface : subclass.getInterfaces()) {
+        if (_class.isAssignableFrom(iface)) {
+            if (iface == _class) {
+                intfs.add(this);
+            } else {
+                intfs.add(_narrow(iface));
+            }
+        }
+    }
+    JavaType[] newInts = intfs.isEmpty()
+        ? new JavaType[0]
+        : intfs.toArray(new JavaType[intfs.size()]);
+    // build the new SimpleType for the subclass
+    return new SimpleType(subclass, bindings, newSuper, newInts,
             _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
 }
\ No newline at end of file
