diff --git a/tmp/757570a1-9716-4d45-99ad-9cd03c1d0725_buggy.java b/tmp/25e9e045-ed6d-4a09-9529-b9d6a3aa4a13_fixed.java
index 1a63a66..dd636d6 100644
--- a/tmp/757570a1-9716-4d45-99ad-9cd03c1d0725_buggy.java
+++ b/tmp/25e9e045-ed6d-4a09-9529-b9d6a3aa4a13_fixed.java
@@ -1,21 +1,42 @@
 @Override
 @Deprecated
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
     // Should we check that there is a sub-class relationship?
     // 15-Jan-2016, tatu: Almost yes, but there are some complications with
     //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
     // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
+
+    // If the base type is an interface, subclass implements it,
+    // so we add the base interface to the new type's superInterfaces
+    if (_class.isInterface()) {
+        JavaType[] intfs = _superInterfaces;
+        boolean found = false;
+        if (intfs != null) {
+            for (JavaType t : intfs) {
+                if (t == this) {
+                    found = true;
+                    break;
+                }
+            }
+        }
+        if (!found) {
+            int len = (intfs == null) ? 0 : intfs.length;
+            JavaType[] newIntfs = new JavaType[len + 1];
+            if (len > 0) {
+                System.arraycopy(intfs, 0, newIntfs, 0, len);
+            }
+            newIntfs[len] = this;
+            intfs = newIntfs;
+        }
+        return new SimpleType(subclass, _bindings, _superClass, intfs,
                 _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+    }
+
+    // Otherwise (base is a class), treat the old type as the new superClass
+    return new SimpleType(subclass, _bindings, this,
+            _superInterfaces, _valueHandler, _typeHandler, _asStatic);
 }
\ No newline at end of file
