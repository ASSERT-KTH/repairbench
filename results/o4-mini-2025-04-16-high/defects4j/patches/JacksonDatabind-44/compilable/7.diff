diff --git a/tmp/a3c6a04f-68c4-445a-a158-14d27516c25f_buggy.java b/tmp/e1a556ae-d490-449f-9604-37aaddae0b33_fixed.java
index 1a63a66..f1a5116 100644
--- a/tmp/a3c6a04f-68c4-445a-a158-14d27516c25f_buggy.java
+++ b/tmp/e1a556ae-d490-449f-9604-37aaddae0b33_fixed.java
@@ -1,21 +1,33 @@
 @Override
 @Deprecated
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
+    // identical type -> nothing to do
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
+    // sanity check: must actually be a subtype
+    if (!_class.isAssignableFrom(subclass)) {
+        throw new IllegalArgumentException("Class "+subclass.getName()
+                +" not sub-type of "+_class.getName());
+    }
+    // When narrowing from an interface to an implementing class,
+    // the subclass's superClass should be the interface's superClass,
+    // and its superInterfaces should include the interface itself:
+    if (_class.isInterface()) {
+        JavaType superClass = _superClass;
+        JavaType[] superInts;
+        if (_superInterfaces == null || _superInterfaces.length == 0) {
+            superInts = new JavaType[] { this };
+        } else {
+            superInts = new JavaType[_superInterfaces.length + 1];
+            System.arraycopy(_superInterfaces, 0, superInts, 0, _superInterfaces.length);
+            superInts[_superInterfaces.length] = this;
+        }
+        return new SimpleType(subclass, _bindings, superClass, superInts,
+                _valueHandler, _typeHandler, _asStatic);
+    }
+    // Normal narrowing for a subclass of a concrete class:
+    // its immediate superClass is 'this', interfaces stay the same.
     return new SimpleType(subclass, _bindings, this, _superInterfaces,
             _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
 }
\ No newline at end of file
