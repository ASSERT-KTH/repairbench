diff --git a/tmp/e55da2da-42d5-4ad2-8078-1b1818e915df_buggy.java b/tmp/be08b2d0-ddba-4e17-9eeb-9d273e21e78d_fixed.java
index 1a63a66..dce8f90 100644
--- a/tmp/e55da2da-42d5-4ad2-8078-1b1818e915df_buggy.java
+++ b/tmp/be08b2d0-ddba-4e17-9eeb-9d273e21e78d_fixed.java
@@ -1,21 +1,36 @@
 @Override
 @Deprecated
 protected JavaType _narrow(Class<?> subclass)
 {
+    // no change if it's exactly the same class
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
+    // sanity check: must actually be a subtype
+    if (!_class.isAssignableFrom(subclass)) {
+        throw new IllegalArgumentException("Class " + subclass.getName()
+            + " not sub-type of " + _class.getName());
+    }
+    // first: find the correct super‚Äêtype in our JavaType chain for subclass
+    Class<?> rawSuper = subclass.getSuperclass();
+    JavaType superType = (rawSuper == _class)
+        ? this
+        : narrowBy(rawSuper);
+    // next: gather any interfaces of the subclass that are subtypes of our base
+    Class<?>[] interfaces = subclass.getInterfaces();
+    JavaType[] newInts = new JavaType[0];
+    if (interfaces != null && interfaces.length > 0) {
+        ArrayList<JavaType> tmp = new ArrayList<>(interfaces.length);
+        for (Class<?> iface : interfaces) {
+            if (_class.isAssignableFrom(iface)) {
+                tmp.add(narrowBy(iface));
+            }
+        }
+        if (!tmp.isEmpty()) {
+            newInts = tmp.toArray(new JavaType[tmp.size()]);
+        }
+    }
+    // and finally, build the specialized SimpleType for the subclass
+    return new SimpleType(subclass, _bindings, superType, newInts,
                           _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
 }
\ No newline at end of file
