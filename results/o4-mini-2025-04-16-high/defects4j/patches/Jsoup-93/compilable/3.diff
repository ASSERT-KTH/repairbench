diff --git a/tmp/1c324723-a08c-4ec2-a9ca-80a277de9632_buggy.java b/tmp/50e38f98-7255-4c42-8c10-59e23be4503b_fixed.java
index aa351ad..1d02c45 100644
--- a/tmp/1c324723-a08c-4ec2-a9ca-80a277de9632_buggy.java
+++ b/tmp/50e38f98-7255-4c42-8c10-59e23be4503b_fixed.java
@@ -1,41 +1,51 @@
 /**
  * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
  * list will not be reflected in the DOM.
  * @return a list of key vals
  */
 public List<Connection.KeyVal> formData() {
     ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
     // iterate the form control elements and accumulate their values
     for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
-            if (el.hasAttr("disabled")) continue; // skip disabled form inputs
+        if (!el.tag().isFormSubmittable()) continue;        // only submittable form elements
+        if (el.hasAttr("disabled")) continue;              // skip disabled controls
         String name = el.attr("name");
-            if (name.length() == 0) continue;
+        if (name.length() == 0) continue;                  // skip unnamed
+        String tag  = el.normalName();
         String type = el.attr("type");
 
+        // skip buttons and other non-successful controls
+        if (tag.equals("button")
+            || "button".equalsIgnoreCase(type)
+            || "submit".equalsIgnoreCase(type)
+            || "reset".equalsIgnoreCase(type)) {
+            continue;
+        }
 
-            if ("select".equals(el.normalName())) {
+        if ("select".equals(tag)) {
+            // handle <select> (may have multiple selected options)
             Elements options = el.select("option[selected]");
             boolean set = false;
             for (Element option: options) {
                 data.add(HttpConnection.KeyVal.create(name, option.val()));
                 set = true;
             }
             if (!set) {
-                    Element option = el.select("option").first();
-                    if (option != null)
-                        data.add(HttpConnection.KeyVal.create(name, option.val()));
+                Element first = el.select("option").first();
+                if (first != null)
+                    data.add(HttpConnection.KeyVal.create(name, first.val()));
             }
         } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
-                // only add checkbox or radio if they have the checked attribute
+            // only include if checked
             if (el.hasAttr("checked")) {
-                    final String val = el.val().length() >  0 ? el.val() : "on";
+                String val = el.val().length() > 0 ? el.val() : "on";
                 data.add(HttpConnection.KeyVal.create(name, val));
             }
         } else {
+            // all other inputs and <textarea>
             data.add(HttpConnection.KeyVal.create(name, el.val()));
         }
     }
     return data;
 }
\ No newline at end of file
