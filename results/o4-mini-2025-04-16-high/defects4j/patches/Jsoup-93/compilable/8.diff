diff --git a/tmp/e7d75070-0ad3-4ca1-9529-7c25b6b9d6a5_buggy.java b/tmp/c6ac3196-9b7c-4e63-91d6-90ed52abb722_fixed.java
index aa351ad..757c7c1 100644
--- a/tmp/e7d75070-0ad3-4ca1-9529-7c25b6b9d6a5_buggy.java
+++ b/tmp/c6ac3196-9b7c-4e63-91d6-90ed52abb722_fixed.java
@@ -1,41 +1,58 @@
-    /**
-     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
-     * list will not be reflected in the DOM.
-     * @return a list of key vals
-     */
 public List<Connection.KeyVal> formData() {
     ArrayList<Connection.KeyVal> data = new ArrayList<>();
 
     // iterate the form control elements and accumulate their values
     for (Element el : elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
-            if (el.hasAttr("disabled")) continue; // skip disabled form inputs
+        // only form‐submittable tags
+        if (!el.tag().isFormSubmittable())
+            continue;
+        // skip disabled fields
+        if (el.hasAttr("disabled"))
+            continue;
+
         String name = el.attr("name");
-            if (name.length() == 0) continue;
+        if (name.isEmpty())
+            continue;
+
         String type = el.attr("type");
+        String tagName = el.normalName();
 
+        // skip buttons and non‐successful input types
+        if ("button".equals(tagName)
+            || ("input".equals(tagName) && (
+                   "submit".equalsIgnoreCase(type)
+                || "button".equalsIgnoreCase(type)
+                || "reset".equalsIgnoreCase(type)
+                || "image".equalsIgnoreCase(type)
+            ))) {
+            continue;
+        }
 
-            if ("select".equals(el.normalName())) {
+        if ("select".equals(tagName)) {
             Elements options = el.select("option[selected]");
             boolean set = false;
             for (Element option : options) {
                 data.add(HttpConnection.KeyVal.create(name, option.val()));
                 set = true;
             }
             if (!set) {
-                    Element option = el.select("option").first();
-                    if (option != null)
-                        data.add(HttpConnection.KeyVal.create(name, option.val()));
+                Element first = el.select("option").first();
+                if (first != null)
+                    data.add(HttpConnection.KeyVal.create(name, first.val()));
             }
+
         } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
-                // only add checkbox or radio if they have the checked attribute
+            // only add checkbox or radio if checked
             if (el.hasAttr("checked")) {
-                    final String val = el.val().length() >  0 ? el.val() : "on";
+                String val = el.val().length() > 0 ? el.val() : "on";
                 data.add(HttpConnection.KeyVal.create(name, val));
             }
+
         } else {
+            // text, hidden, textarea, etc.
             data.add(HttpConnection.KeyVal.create(name, el.val()));
         }
     }
+
     return data;
 }
\ No newline at end of file
