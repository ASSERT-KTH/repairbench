diff --git a/tmp/0601a781-1e20-4214-bfe8-2d82ad4484dc_buggy.java b/tmp/1ac941b4-ee69-4e7f-9818-4de802782417_fixed.java
index 1c875ad..2b4df78 100644
--- a/tmp/0601a781-1e20-4214-bfe8-2d82ad4484dc_buggy.java
+++ b/tmp/1ac941b4-ee69-4e7f-9818-4de802782417_fixed.java
@@ -1,31 +1,25 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
+    Object[] rawArgs = invocation.getRawArguments();
     for (int position = 0; position < matchers.size(); position++) {
         Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+        if (!(m instanceof CapturesArguments) || rawArgs.length <= position) {
+            continue;
         }
+        CapturesArguments captor = (CapturesArguments) m;
+        // handle varargs: the last parameter is an array of vararg values
+        if (invocation.getMethod().isVarArgs() && position == rawArgs.length - 1) {
+            Object varargArray = rawArgs[position];
+            if (varargArray != null && varargArray.getClass().isArray()) {
+                int len = java.lang.reflect.Array.getLength(varargArray);
+                for (int i = 0; i < len; i++) {
+                    captor.captureFrom(java.lang.reflect.Array.get(varargArray, i));
+                }
+            }
+            // once we capture the vararg elements, we're done
+            return;
+        } else {
+            // normal (non‐vararg) capture
+            captor.captureFrom(rawArgs[position]);
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
