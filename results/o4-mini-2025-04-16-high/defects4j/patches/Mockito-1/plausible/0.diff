diff --git a/tmp/6f1102f9-1738-4f2a-b85b-9a6e4e1380e2_buggy.java b/tmp/a019bc16-0f33-4a5c-8fe4-16eb44fc07f9_fixed.java
index 1c875ad..7b6b5f9 100644
--- a/tmp/6f1102f9-1738-4f2a-b85b-9a6e4e1380e2_buggy.java
+++ b/tmp/a019bc16-0f33-4a5c-8fe4-16eb44fc07f9_fixed.java
@@ -1,31 +1,28 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
+    Object[] rawArguments = invocation.getRawArguments();
+    boolean isVarArgs = invocation.getMethod().isVarArgs();
     for (int position = 0; position < matchers.size(); position++) {
         Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+        if (!(m instanceof CapturesArguments)) {
+            continue;
         }
+        CapturesArguments captor = (CapturesArguments) m;
+        // handle the varargs slot: capture each element of the array
+        if (isVarArgs
+            && position == rawArguments.length - 1
+            && rawArguments[position] != null
+            && rawArguments[position].getClass().isArray()) {
+            Object varargArray = rawArguments[position];
+            int length = Array.getLength(varargArray);
+            for (int i = 0; i < length; i++) {
+                captor.captureFrom(Array.get(varargArray, i));
+            }
+            // once we've captured all varargs, we're done
+            return;
+        }
+        // normal (or null-array) case
+        if (rawArguments.length > position) {
+            captor.captureFrom(invocation.getArgumentAt(position, Object.class));
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
