diff --git a/tmp/68eb706c-d022-4f3e-a800-e90f2aab89ca_buggy.java b/tmp/1b4eb29c-f4a9-4e60-b3bc-dfd015e25a75_fixed.java
index 1c875ad..7ec5dfb 100644
--- a/tmp/68eb706c-d022-4f3e-a800-e90f2aab89ca_buggy.java
+++ b/tmp/1b4eb29c-f4a9-4e60-b3bc-dfd015e25a75_fixed.java
@@ -1,31 +1,30 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+    Object[] rawArgs = invocation.getRawArguments();
+    boolean isVarArgs = invocation.getMethod().isVarArgs();
 
-        } else {
     for (int position = 0; position < matchers.size(); position++) {
         Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
-                }
-            }
+        if (!(m instanceof CapturesArguments)) {
+            continue;
         }
+        CapturesArguments captor = (CapturesArguments) m;
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+        // handle var‐arg parameter: flatten the array
+        if (isVarArgs && position == rawArgs.length - 1) {
+            Object varArgArray = rawArgs[position];
+            if (varArgArray != null && varArgArray.getClass().isArray()) {
+                int length = java.lang.reflect.Array.getLength(varArgArray);
+                for (int i = 0; i < length; i++) {
+                    Object element = java.lang.reflect.Array.get(varArgArray, i);
+                    captor.captureFrom(element);
+                }
+            } else {
+                // a null varargs array is treated as a single null
+                captor.captureFrom(null);
+            }
+        } else if (position < rawArgs.length) {
+            // normal (non‐vararg) parameter
+            captor.captureFrom(invocation.getArgumentAt(position, Object.class));
+        }
+    }
 }
\ No newline at end of file
