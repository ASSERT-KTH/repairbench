diff --git a/tmp/66b3114c-d459-4c0b-af91-2c54ce01c8cf_buggy.java b/tmp/b5c70e85-8169-4b2e-a105-4ead10700606_fixed.java
index 1c875ad..5574279 100644
--- a/tmp/66b3114c-d459-4c0b-af91-2c54ce01c8cf_buggy.java
+++ b/tmp/b5c70e85-8169-4b2e-a105-4ead10700606_fixed.java
@@ -1,31 +1,31 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
+    Object[] rawArguments = invocation.getRawArguments();
     for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+        Matcher matcher = matchers.get(position);
+        if (!(matcher instanceof CapturesArguments)) {
+            continue;
         }
+        CapturesArguments captor = (CapturesArguments) matcher;
+
+        // special handling for var‐args: the last "raw" argument is an array
+        if (invocation.getMethod().isVarArgs() && position == rawArguments.length - 1) {
+            Object array = rawArguments[position];
+            if (array != null && array.getClass().isArray()) {
+                int len = java.lang.reflect.Array.getLength(array);
+                for (int i = 0; i < len; i++) {
+                    captor.captureFrom(java.lang.reflect.Array.get(array, i));
+                }
+            } else {
+                // null vararg‐array
+                captor.captureFrom(null);
             }
+            // once we've consumed the varargs, we're done
+            return;
         }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+        // normal (non‐varargs) argument
+        if (position < rawArguments.length) {
+            captor.captureFrom(rawArguments[position]);
+        }
+    }
 }
\ No newline at end of file
