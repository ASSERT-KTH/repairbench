diff --git a/tmp/eaf91f4c-39da-4049-902d-40b25eb30a00_buggy.java b/tmp/f771d319-0aea-4277-8610-b0364d871f4c_fixed.java
index 1c875ad..26d0600 100644
--- a/tmp/eaf91f4c-39da-4049-902d-40b25eb30a00_buggy.java
+++ b/tmp/f771d319-0aea-4277-8610-b0364d871f4c_fixed.java
@@ -1,31 +1,25 @@
+@Override
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
     for (int position = 0; position < matchers.size(); position++) {
         Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+        // we only care about matchers that capture arguments and positions that actually exist
+        if (!(m instanceof CapturesArguments) || invocation.getRawArguments().length <= position) {
+            continue;
         }
+        // special handling for var‐arg parameter at the last position
+        if (invocation.getMethod().isVarArgs()
+            && position == invocation.getRawArguments().length - 1) {
+            Object array = invocation.getRawArguments()[position];
+            if (array != null && array.getClass().isArray()) {
+                int len = Array.getLength(array);
+                for (int i = 0; i < len; i++) {
+                    ((CapturesArguments) m).captureFrom(Array.get(array, i));
                 }
             }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+            // once we captured all varargs, we're done
+            return;
+        }
+        // normal (non‐vararg or fixed) argument capture
+        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
+    }
 }
\ No newline at end of file
