diff --git a/tmp/ea8e689a-a8ee-40ac-8bd7-a3f0317ec41f_buggy.java b/tmp/184de6f6-56c3-4f55-978b-ef2a48a96960_fixed.java
index 1c875ad..118ea05 100644
--- a/tmp/ea8e689a-a8ee-40ac-8bd7-a3f0317ec41f_buggy.java
+++ b/tmp/184de6f6-56c3-4f55-978b-ef2a48a96960_fixed.java
@@ -1,31 +1,34 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+    Object[] rawArguments = invocation.getRawArguments();
+    Method method = invocation.getMethod();
+    Class<?>[] paramTypes = method.getParameterTypes();
+    boolean isVarArgs = method.isVarArgs();
+    int varargPosition = isVarArgs ? paramTypes.length - 1 : -1;
 
-        } else {
     for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+        Matcher matcher = matchers.get(position);
+        if (!(matcher instanceof CapturesArguments)) {
+            continue;
         }
+        if (position >= rawArguments.length) {
+            continue;
+        }
+        CapturesArguments captor = (CapturesArguments) matcher;
+
+        // handle the varargs parameter specially
+        if (isVarArgs && position == varargPosition) {
+            Object varArgArray = rawArguments[position];
+            if (varArgArray != null && varArgArray.getClass().isArray()) {
+                int length = Array.getLength(varArgArray);
+                for (int i = 0; i < length; i++) {
+                    captor.captureFrom(Array.get(varArgArray, i));
                 }
             }
+            // once varargs are captured, no need to process further matchers
+            return;
+        }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+        // non‐vararg or preceding parameters
+        captor.captureFrom(rawArguments[position]);
+    }
 }
\ No newline at end of file
