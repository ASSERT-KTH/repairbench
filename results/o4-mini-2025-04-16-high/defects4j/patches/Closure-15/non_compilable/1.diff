diff --git a/tmp/c2c24fa7-0722-4033-870a-64f8d33e706d_buggy.java b/tmp/cec757ad-b66c-4239-a495-5e9f622838b3_fixed.java
index b56897c..109eab4 100644
--- a/tmp/c2c24fa7-0722-4033-870a-64f8d33e706d_buggy.java
+++ b/tmp/cec757ad-b66c-4239-a495-5e9f622838b3_fixed.java
@@ -1,27 +1,28 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+  // When the node is null it means we've reached the implicit return
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // Deletion is a side‐effecting operation, so block inlining.
+  if (n.isDelProp() || n.isDelName()) {
+    return true;
+  }
+
+  // Calls and constructors that have side‐effects also block inlining.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
-
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
-
+  // Recurse, but skip new CFG‐node boundaries.
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
