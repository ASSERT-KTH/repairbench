diff --git a/tmp/10ac9f02-5afb-4f75-a639-9e8f4182445f_buggy.java b/tmp/5ae157d4-c896-4ce3-aea1-2010000359c5_fixed.java
index dbda381..7faed6c 100644
--- a/tmp/10ac9f02-5afb-4f75-a639-9e8f4182445f_buggy.java
+++ b/tmp/5ae157d4-c896-4ce3-aea1-2010000359c5_fixed.java
@@ -1,54 +1,76 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+    // Capture the original years and months
     int years = getYears();
     int months = getMonths();
+    // Sum up all the "lower" fields into milliseconds
+    long totalMillis = getMillis();
+    totalMillis += (long)getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;
+    totalMillis += (long)getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;
+    totalMillis += (long)getHours()   * DateTimeConstants.MILLIS_PER_HOUR;
+    totalMillis += (long)getDays()    * DateTimeConstants.MILLIS_PER_DAY;
+    totalMillis += (long)getWeeks()   * DateTimeConstants.MILLIS_PER_WEEK;
+    // Determine what the target type supports
+    boolean supportY = type.isSupported(DurationFieldType.years());
+    boolean supportM = type.isSupported(DurationFieldType.months());
+    // Normalize or merge years/months according to support
     if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+        if (supportY && supportM) {
+            // split months into years + remainder
+            int normYears  = FieldUtils.safeAdd(years, months / 12);
+            int normMonths = months % 12;
+            years  = normYears;
+            months = normMonths;
+        } else if (supportY) {
+            // convert all months into years (must divide evenly)
+            int extra = months / 12;
+            int rem   = months % 12;
+            int normYears = FieldUtils.safeAdd(years, extra);
+            if (rem != 0) {
+                throw new UnsupportedOperationException(
+                    "Cannot normalize months into years for type " + type);
             }
-            if (months != 0) {
-                result = result.withMonths(months);
+            years  = normYears;
+            months = 0;
+        } else if (supportM) {
+            // convert all years into months
+            int normMonths = FieldUtils.safeAdd(
+                FieldUtils.safeMultiply(years, 12), months);
+            years  = 0;
+            months = normMonths;
+        } else {
+            // neither years nor months supported
+            throw new UnsupportedOperationException(
+                "Fields 'years' and 'months' not supported by PeriodType " + type);
         }
     }
-        return result;
+    // Decompose the remaining milliseconds into the lower fields
+    long rem = totalMillis;
+    int w = 0, d = 0, h = 0, mi = 0, s = 0, ms = 0;
+    if (type.isSupported(DurationFieldType.weeks())) {
+        w   = (int)(rem / DateTimeConstants.MILLIS_PER_WEEK);
+        rem = rem - (long)w * DateTimeConstants.MILLIS_PER_WEEK;
+    }
+    if (type.isSupported(DurationFieldType.days())) {
+        d   = (int)(rem / DateTimeConstants.MILLIS_PER_DAY);
+        rem = rem - (long)d * DateTimeConstants.MILLIS_PER_DAY;
+    }
+    if (type.isSupported(DurationFieldType.hours())) {
+        h   = (int)(rem / DateTimeConstants.MILLIS_PER_HOUR);
+        rem = rem - (long)h * DateTimeConstants.MILLIS_PER_HOUR;
+    }
+    if (type.isSupported(DurationFieldType.minutes())) {
+        mi  = (int)(rem / DateTimeConstants.MILLIS_PER_MINUTE);
+        rem = rem - (long)mi * DateTimeConstants.MILLIS_PER_MINUTE;
+    }
+    if (type.isSupported(DurationFieldType.seconds())) {
+        s   = (int)(rem / DateTimeConstants.MILLIS_PER_SECOND);
+        rem = rem - (long)s * DateTimeConstants.MILLIS_PER_SECOND;
+    }
+    if (type.isSupported(DurationFieldType.millis())) {
+        ms = (int) rem;
+        rem = 0;
+    }
+    // Build and return the normalized period
+    return new Period(years, months, w, d, h, mi, s, ms, type);
 }
\ No newline at end of file
