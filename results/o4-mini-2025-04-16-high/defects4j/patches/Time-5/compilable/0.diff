diff --git a/tmp/560815af-f3c6-4436-a151-bb1b9981ce2e_buggy.java b/tmp/c2471233-ed4e-4afa-917e-762c4fcfad0d_fixed.java
index dbda381..3a23792 100644
--- a/tmp/560815af-f3c6-4436-a151-bb1b9981ce2e_buggy.java
+++ b/tmp/c2471233-ed4e-4afa-917e-762c4fcfad0d_fixed.java
@@ -1,54 +1,136 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+    // Extract original fields
     int years   = getYears();
     int months  = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+    long totalMillis  = getMillis();
+    long totalSeconds = getSeconds();
+    long totalMinutes = getMinutes();
+    long totalHours   = getHours();
+    long totalDays    = getDays();
+    long totalWeeks   = getWeeks();
+
+    // ---------------------------------------------------------------------
+    // 1) Normalize years/months according to type
+    //    - If years aren't supported, convert all years into months.
+    //    - If months aren't supported, throw if non-zero.
+    //    - If both years and months are supported, roll months into years.
+    // ---------------------------------------------------------------------
+    if (!type.isSupported(DurationFieldType.years())) {
+        // collapse years into months
+        months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));
+        years = 0;
     }
+    if (!type.isSupported(DurationFieldType.months())) {
         if (months != 0) {
-                result = result.withMonths(months);
+            throw new UnsupportedOperationException("Field is not supported: months");
         }
+    } else if (type.isSupported(DurationFieldType.years())) {
+        // roll overflow of months into years (months in 0..11)
+        int carryYears = months / 12;
+        years  = FieldUtils.safeAdd(years,  carryYears);
+        months = months % 12;
     }
-        return result;
+
+    // ---------------------------------------------------------------------
+    // 2) Normalize the time-based fields using fixed unit sizes:
+    //       1000 ms = 1 s
+    //       60 s    = 1 m
+    //       60 m    = 1 h
+    //       24 h    = 1 d
+    //       7 d     = 1 w
+    //    At each step, if the smaller unit isn't supported, collapse it
+    //    entirely into the next larger unit. If it is supported, keep
+    //    it in the 0..(unitSize-1) range.
+    // ---------------------------------------------------------------------
+    long carry;
+
+    // millis → seconds
+    carry = totalMillis / DateTimeConstants.MILLIS_PER_SECOND;
+    totalSeconds = FieldUtils.safeAdd(totalSeconds, carry);
+    if (type.isSupported(DurationFieldType.millis())) {
+        totalMillis = totalMillis % DateTimeConstants.MILLIS_PER_SECOND;
+    } else {
+        totalMillis = 0;
+    }
+
+    // seconds → minutes
+    carry = totalSeconds / DateTimeConstants.SECONDS_PER_MINUTE;
+    totalMinutes = FieldUtils.safeAdd(totalMinutes, carry);
+    if (type.isSupported(DurationFieldType.seconds())) {
+        totalSeconds = totalSeconds % DateTimeConstants.SECONDS_PER_MINUTE;
+    } else {
+        totalSeconds = 0;
+    }
+
+    // minutes → hours
+    carry = totalMinutes / DateTimeConstants.MINUTES_PER_HOUR;
+    totalHours = FieldUtils.safeAdd(totalHours, carry);
+    if (type.isSupported(DurationFieldType.minutes())) {
+        totalMinutes = totalMinutes % DateTimeConstants.MINUTES_PER_HOUR;
+    } else {
+        totalMinutes = 0;
+    }
+
+    // hours → days
+    carry = totalHours / DateTimeConstants.HOURS_PER_DAY;
+    totalDays = FieldUtils.safeAdd(totalDays, carry);
+    if (type.isSupported(DurationFieldType.hours())) {
+        totalHours = totalHours % DateTimeConstants.HOURS_PER_DAY;
+    } else {
+        totalHours = 0;
+    }
+
+    // days → weeks
+    if (type.isSupported(DurationFieldType.weeks())) {
+        carry = totalDays / DateTimeConstants.DAYS_PER_WEEK;
+        totalWeeks = FieldUtils.safeAdd(totalWeeks, carry);
+        if (type.isSupported(DurationFieldType.days())) {
+            totalDays = totalDays % DateTimeConstants.DAYS_PER_WEEK;
+        } else {
+            totalDays = 0;
+        }
+    } else {
+        // weeks not supported
+        if (!type.isSupported(DurationFieldType.days()) && totalDays != 0) {
+            throw new UnsupportedOperationException("Field is not supported: days");
+        }
+        // else leave totalDays as–is
+    }
+
+    // ---------------------------------------------------------------------
+    // 3) Finally, if any non-zero field remains that the type does not
+    //    support, throw an exception
+    // ---------------------------------------------------------------------
+    if (totalWeeks  != 0 && !type.isSupported(DurationFieldType.weeks())) {
+        throw new UnsupportedOperationException("Field is not supported: weeks");
+    }
+    if (totalHours  != 0 && !type.isSupported(DurationFieldType.hours())) {
+        throw new UnsupportedOperationException("Field is not supported: hours");
+    }
+    if (totalMinutes!= 0 && !type.isSupported(DurationFieldType.minutes())) {
+        throw new UnsupportedOperationException("Field is not supported: minutes");
+    }
+    if (totalSeconds!= 0 && !type.isSupported(DurationFieldType.seconds())) {
+        throw new UnsupportedOperationException("Field is not supported: seconds");
+    }
+    if (totalMillis != 0 && !type.isSupported(DurationFieldType.millis())) {
+        throw new UnsupportedOperationException("Field is not supported: millis");
+    }
+
+    // ---------------------------------------------------------------------
+    // 4) Build and return the fully normalized period
+    // ---------------------------------------------------------------------
+    return new Period(
+        years,
+        months,
+        FieldUtils.safeToInt(totalWeeks),
+        FieldUtils.safeToInt(totalDays),
+        FieldUtils.safeToInt(totalHours),
+        FieldUtils.safeToInt(totalMinutes),
+        FieldUtils.safeToInt(totalSeconds),
+        FieldUtils.safeToInt(totalMillis),
+        type
+    );
 }
\ No newline at end of file
