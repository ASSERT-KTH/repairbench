diff --git a/tmp/ce723089-2e7a-4826-a6c7-756979212535_buggy.java b/tmp/6e75bd7d-12de-49df-961f-fda487e8cdf7_fixed.java
index dbda381..2815fa3 100644
--- a/tmp/ce723089-2e7a-4826-a6c7-756979212535_buggy.java
+++ b/tmp/6e75bd7d-12de-49df-961f-fda487e8cdf7_fixed.java
@@ -1,54 +1,119 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
+    // Normalize the target PeriodType
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
+    // Extract original fields
     int years = getYears();
     int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+    int weeks = getWeeks();
+    int days = getDays();
+    int hours = getHours();
+    int minutes = getMinutes();
+    int seconds = getSeconds();
+    int millis = getMillis();
+
+    // Check that if there is any year/month content, the type supports at least one
+    boolean canYear = type.isSupported(DurationFieldType.years());
+    boolean canMonth = type.isSupported(DurationFieldType.months());
+    if ((years != 0 || months != 0) && !canYear && !canMonth) {
+        throw new UnsupportedOperationException(
+            "Period does not support years or months: " + type);
     }
-            if (months != 0) {
-                result = result.withMonths(months);
+
+    // Normalize years/months
+    int normYears = 0;
+    int normMonths = 0;
+    if (canYear) {
+        // overflow months into years
+        int carry = months / 12;
+        normYears  = FieldUtils.safeAdd(years, carry);
+        normMonths = months % 12;
+    } else {
+        // collapse years into months
+        // we know canMonth must be true here
+        int ym = FieldUtils.safeMultiply(years, 12);
+        normMonths = FieldUtils.safeAdd(ym, months);
     }
+
+    // Convert all time‐based fields into a single millisecond total
+    long total = millis;
+    total = FieldUtils.safeAdd(total,
+        FieldUtils.safeMultiply((long) seconds, DateTimeConstants.MILLIS_PER_SECOND));
+    total = FieldUtils.safeAdd(total,
+        FieldUtils.safeMultiply((long) minutes, DateTimeConstants.MILLIS_PER_MINUTE));
+    total = FieldUtils.safeAdd(total,
+        FieldUtils.safeMultiply((long) hours,   DateTimeConstants.MILLIS_PER_HOUR));
+    total = FieldUtils.safeAdd(total,
+        FieldUtils.safeMultiply((long) days,    DateTimeConstants.MILLIS_PER_DAY));
+    total = FieldUtils.safeAdd(total,
+        FieldUtils.safeMultiply((long) weeks,   DateTimeConstants.MILLIS_PER_WEEK));
+
+    // Split that millisecond total back into the time‐fields that the type supports
+    int normWeeks   = 0;
+    int normDays    = 0;
+    int normHours   = 0;
+    int normMinutes = 0;
+    int normSeconds = 0;
+    int normMillis  = 0;
+    long rem = total;
+
+    if (type.isSupported(DurationFieldType.weeks())) {
+        long w = rem / DateTimeConstants.MILLIS_PER_WEEK;
+        if (w < Integer.MIN_VALUE || w > Integer.MAX_VALUE) {
+            throw new ArithmeticException("Week value too large: " + w);
         }
-        return result;
+        normWeeks = (int) w;
+        rem -= w * DateTimeConstants.MILLIS_PER_WEEK;
+    }
+    if (type.isSupported(DurationFieldType.days())) {
+        long d = rem / DateTimeConstants.MILLIS_PER_DAY;
+        if (d < Integer.MIN_VALUE || d > Integer.MAX_VALUE) {
+            throw new ArithmeticException("Day value too large: " + d);
+        }
+        normDays = (int) d;
+        rem -= d * DateTimeConstants.MILLIS_PER_DAY;
+    }
+    if (type.isSupported(DurationFieldType.hours())) {
+        long h = rem / DateTimeConstants.MILLIS_PER_HOUR;
+        if (h < Integer.MIN_VALUE || h > Integer.MAX_VALUE) {
+            throw new ArithmeticException("Hour value too large: " + h);
+        }
+        normHours = (int) h;
+        rem -= h * DateTimeConstants.MILLIS_PER_HOUR;
+    }
+    if (type.isSupported(DurationFieldType.minutes())) {
+        long m = rem / DateTimeConstants.MILLIS_PER_MINUTE;
+        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {
+            throw new ArithmeticException("Minute value too large: " + m);
+        }
+        normMinutes = (int) m;
+        rem -= m * DateTimeConstants.MILLIS_PER_MINUTE;
+    }
+    if (type.isSupported(DurationFieldType.seconds())) {
+        long s = rem / DateTimeConstants.MILLIS_PER_SECOND;
+        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
+            throw new ArithmeticException("Second value too large: " + s);
+        }
+        normSeconds = (int) s;
+        rem -= s * DateTimeConstants.MILLIS_PER_SECOND;
+    }
+    if (type.isSupported(DurationFieldType.millis())) {
+        if (rem < Integer.MIN_VALUE || rem > Integer.MAX_VALUE) {
+            throw new ArithmeticException("Millisecond value too large: " + rem);
+        }
+        normMillis = (int) rem;
+    }
+
+    // Construct the normalized period
+    return new Period(
+        normYears,
+        normMonths,
+        normWeeks,
+        normDays,
+        normHours,
+        normMinutes,
+        normSeconds,
+        normMillis,
+        type
+    );
 }
\ No newline at end of file
