diff --git a/tmp/edf4b5ef-ab22-4e2e-8185-cd2372f47a39_buggy.java b/tmp/139bdedf-11ab-4092-93f2-02850745587a_fixed.java
index dbda381..f4f57d5 100644
--- a/tmp/edf4b5ef-ab22-4e2e-8185-cd2372f47a39_buggy.java
+++ b/tmp/139bdedf-11ab-4092-93f2-02850745587a_fixed.java
@@ -1,54 +1,48 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+    // convert all time-based fields to milliseconds
+    long millis = getMillis();
+    millis += (long)getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;
+    millis += (long)getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;
+    millis += (long)getHours()   * DateTimeConstants.MILLIS_PER_HOUR;
+    millis += (long)getDays()    * DateTimeConstants.MILLIS_PER_DAY;
+    millis += (long)getWeeks()   * DateTimeConstants.MILLIS_PER_WEEK;
+    // build a period for the time part
     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+    // now normalize the year/month part
     int years  = getYears();
     int months = getMonths();
     if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+        boolean supportsYears  = type.isSupported(DurationFieldType.years());
+        boolean supportsMonths = type.isSupported(DurationFieldType.months());
+        if (supportsYears && supportsMonths) {
+            // split months into years and remainder months
+            int totalYears = FieldUtils.safeAdd(years, months / 12);
+            int remMonths  = months % 12;
+            if (totalYears != 0) {
+                result = result.withYears(totalYears);
             }
-            if (months != 0) {
-                result = result.withMonths(months);
+            if (remMonths != 0) {
+                result = result.withMonths(remMonths);
+            }
+        } else if (!supportsYears && supportsMonths) {
+            // only months supported: fold years into months
+            long totalMonths = (long)years * 12 + months;
+            result = result.withMonths(FieldUtils.safeToInt(totalMonths));
+        } else if (supportsYears && !supportsMonths) {
+            // only years supported: fold whole groups of 12 months into years,
+            // remainder months cannot be represented
+            int addYears = months / 12;
+            int remMonths = months % 12;
+            if (remMonths != 0) {
+                throw new UnsupportedOperationException("Cannot normalize period as months are not supported");
+            }
+            int totalYears = FieldUtils.safeAdd(years, addYears);
+            result = result.withYears(totalYears);
+        } else {
+            // neither years nor months supported
+            throw new UnsupportedOperationException("Period type does not support years or months");
         }
     }
     return result;
 }
\ No newline at end of file
