diff --git a/tmp/a83319de-1692-4a6d-bf4c-663c4e8a23f5_buggy.java b/tmp/8174909d-f074-4473-ba90-8ac79b20cf07_fixed.java
index dbda381..12a3fa6 100644
--- a/tmp/a83319de-1692-4a6d-bf4c-663c4e8a23f5_buggy.java
+++ b/tmp/8174909d-f074-4473-ba90-8ac79b20cf07_fixed.java
@@ -1,54 +1,53 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+    // split off the year/month part
     int years = getYears();
     int months = getMonths();
+    // sum all lower fields into milliseconds
+    long millis = getMillis();
+    millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;
+    millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;
+    millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR;
+    millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY;
+    millis += (long) getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;
+    // convert the lower part (weeks, days, time) without touching years/months
+    PeriodType lowerType = type.withYearsRemoved().withMonthsRemoved();
+    Period lower = new Period(millis, lowerType, ISOChronology.getInstanceUTC());
+    // now re-apply normalized years/months according to the target type
+    boolean supportY = type.isSupported(DurationFieldType.years());
+    boolean supportM = type.isSupported(DurationFieldType.months());
+    int newYears = 0;
+    int newMonths = 0;
     if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
-            }
+        if (supportY) {
+            if (supportM) {
+                newYears = FieldUtils.safeAdd(years, months / 12);
+                newMonths = months % 12;
+            } else {
+                // months not supported
                 if (months != 0) {
-                result = result.withMonths(months);
+                    throw new UnsupportedOperationException("Field is not supported");
                 }
+                newYears = years;
             }
-        return result;
+        } else if (supportM) {
+            // collapse years into months
+            newMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);
+        } else {
+            // neither years nor months supported
+            throw new UnsupportedOperationException("Field is not supported");
+        }
+    }
+    // build the final period with the correct type
+    return new Period(
+        newYears,
+        newMonths,
+        lower.getWeeks(),
+        lower.getDays(),
+        lower.getHours(),
+        lower.getMinutes(),
+        lower.getSeconds(),
+        lower.getMillis(),
+        type
+    );
 }
\ No newline at end of file
