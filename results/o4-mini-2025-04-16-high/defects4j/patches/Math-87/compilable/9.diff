diff --git a/tmp/ef09b6e9-2ae9-4cfd-b099-14255f8d1323_buggy.java b/tmp/324d799d-0128-41be-a99e-fcca2227a5c1_fixed.java
index 70cafe0..21e3a0c 100644
--- a/tmp/ef09b6e9-2ae9-4cfd-b099-14255f8d1323_buggy.java
+++ b/tmp/324d799d-0128-41be-a99e-fcca2227a5c1_fixed.java
@@ -1,18 +1,26 @@
 /**
  * Checks whether the given column is basic.
  * @param col index of the column to check
  * @return the row that the variable is basic in.  null if the column is not basic
  */
 private Integer getBasicRow(final int col) {
     Integer row = null;
-        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+    // scan every row (including objective rows) so that
+    // only a true unit‐vector column counts as basic
+    for (int i = 0; i < getHeight(); i++) {
+        double entry = getEntry(i, col);
+        if (!MathUtils.equals(entry, 0.0, epsilon)) {
+            // non-zero entry must be exactly 1 to form a unit vector
+            if (!MathUtils.equals(entry, 1.0, epsilon)) {
+                return null;
+            }
+            // ensure there's only one '1' in the column
             if (row == null) {
                 row = i;
             } else {
                 return null;
             }
         }
     }
     return row;
 }
\ No newline at end of file
