diff --git a/tmp/e1fc83a3-66af-4a4b-a72a-d0876bac961c_buggy.java b/tmp/219452db-a304-42c2-9d03-6ee05d20691b_fixed.java
index e69de29..5aa1777 100644
--- a/tmp/e1fc83a3-66af-4a4b-a72a-d0876bac961c_buggy.java
+++ b/tmp/219452db-a304-42c2-9d03-6ee05d20691b_fixed.java
@@ -0,0 +1,56 @@
+/**
+ * Internal helper used by constructType(...) to handle recursion, supertypes
+ * and caching.
+ */
+protected JavaType _fromClass(Class<?> raw, TypeBindings bindings,
+        JavaType superClass, JavaType[] superInts, int modifiers)
+{
+    // First: try the canonical cache
+    TypeCache.Key key = TypeCache._key(raw, bindings, superClass, superInts);
+    JavaType cached = _typeCache.get(key);
+    if (cached != null) {
+        return cached;
+    }
+
+    // Next: set up recursion‐map if needed
+    boolean fullRecursion = (_recursions != null);
+    if (_recursions == null) {
+        _recursions = new HashMap<TypeCache.Key,JavaType>();
+    } else {
+        // if we are already building this exact type, return the placeholder
+        JavaType prev = _recursions.get(key);
+        if (prev != null) {
+            return prev;
+        }
+    }
+
+    // Create a placeholder so that recursive references won't loop infinitely
+    SimpleType result = new SimpleType(raw, bindings, superClass, superInts);
+    _recursions.put(key, result);
+
+    // Actually resolve the superclass (only if caller didn’t bind one in)
+    JavaType sc = (superClass == null)
+        ? _fromClass(raw.getGenericSuperclass(),
+                     TypeBindings.emptyBindings(),
+                     null, null,
+                     ClassUtil.findClassModifiers(raw))
+        : superClass;
+    // And any interfaces
+    JavaType[] sis = (superInts == null)
+        ? _resolveSuperInterfaces(raw, bindings)
+        : superInts;
+    result.setSuperClass(sc);
+    result.setSuperInterfaces(sis);
+
+    // Everything is now known: cache the real type
+    _typeCache.put(key, result);
+
+    // Finally clean up our recursion stub
+    _recursions.remove(key);
+    if (!fullRecursion) {
+        // only clear the map if *we* created it
+        _recursions = null;
+    }
+
+    return result;
+}
\ No newline at end of file
