diff --git a/tmp/9a82ffd2-72b1-4202-93df-3c118ade1238_buggy.java b/tmp/91cd4bdf-6ece-444e-888f-9cead646fcf4_fixed.java
index e69de29..caa7d2a 100644
--- a/tmp/9a82ffd2-72b1-4202-93df-3c118ade1238_buggy.java
+++ b/tmp/91cd4bdf-6ece-444e-888f-9cead646fcf4_fixed.java
@@ -0,0 +1,44 @@
+// In TypeFactory.java, replace the “simple‐type” branch in _fromClass so that we only cache
+// truly trivial types (no generics, no super‐class, no interfaces), and otherwise always
+// pass the computed superClass/interfaces into the new SimpleType:
+
+@Override
+protected JavaType _fromClass(Class<?> raw, TypeBindings bindings, ClassStack context) {
+    // 1) handle arrays as before
+    if (raw.isArray()) {
+        JavaType comp = _fromAny(raw.getComponentType(), context);
+        return ArrayType.construct(comp, /*valueHandler*/ null, /*typeHandler*/ null, _typeCache);
+    }
+    // 2) compute super‐class
+    JavaType superClass = null;
+    Type genericSuper = raw.getGenericSuperclass();
+    if (genericSuper != null) {
+        superClass = _fromAny(genericSuper, context);
+    }
+    // 3) compute interfaces
+    Type[] genericIfaces = raw.getGenericInterfaces();
+    JavaType[] interfaces;
+    if (genericIfaces == null || genericIfaces.length == 0) {
+        interfaces = NO_TYPES;
+    } else {
+        interfaces = new JavaType[genericIfaces.length];
+        for (int i = 0; i < genericIfaces.length; i++) {
+            interfaces[i] = _fromAny(genericIfaces[i], context);
+        }
+    }
+    // 4) only cache absolutely trivial types (no generics, no super, no interfaces)
+    if (bindings.isEmpty() && superClass == null && interfaces.length == 0) {
+        ClassKey key = new ClassKey(raw);
+        synchronized (_typeCache) {
+            SimpleType cached = (SimpleType) _typeCache.get(key);
+            if (cached != null) {
+                return cached;
+            }
+            SimpleType t = new SimpleType(raw, EMPTY_BINDINGS, null, NO_TYPES, /*valueHandler*/ null);
+            _typeCache.put(key, t);
+            return t;
+        }
+    }
+    // 5) otherwise include the computed superClass and interfaces
+    return new SimpleType(raw, bindings, superClass, interfaces, /*valueHandler*/ null);
+}
\ No newline at end of file
