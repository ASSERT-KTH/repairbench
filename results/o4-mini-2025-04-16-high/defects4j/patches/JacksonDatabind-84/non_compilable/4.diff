diff --git a/tmp/8e761690-aa8d-4d30-b26d-d050e04fa831_buggy.java b/tmp/11bfd9a3-8fce-4303-b1f5-ebf158fb96b2_fixed.java
index e69de29..1287e25 100644
--- a/tmp/8e761690-aa8d-4d30-b26d-d050e04fa831_buggy.java
+++ b/tmp/11bfd9a3-8fce-4303-b1f5-ebf158fb96b2_fixed.java
@@ -0,0 +1,55 @@
+// In TypeFactory.java
+@Override
+protected JavaType _fromClass(Class<?> cls, TypeBindings bindings) {
+    // 1) see if we already have it
+    RawClassKey key = new RawClassKey(cls);
+    JavaType cached = _typeCache.get(key, bindings);
+    if (cached != null) {
+        return cached;
+    }
+    // 2) array?
+    if (cls.isArray()) {
+        JavaType component = _fromClass(cls.getComponentType(), bindings);
+        ArrayType at = ArrayType.construct(component, bindings, /*value handler*/null);
+        _typeCache.put(key, bindings, at);
+        return at;
+    }
+    // 3) placeholder for possible recursive types
+    SimpleType placeholder = new SimpleType(cls, bindings, null, null);
+    _typeCache.put(key, bindings, placeholder);
+
+    // 4) ALWAYS resolve raw superclass (not only ParameterizedType)
+    Type rawSup = cls.getGenericSuperclass();
+    if (rawSup != null) {
+        JavaType superClass = constructType(rawSup, bindings);
+        placeholder.setSuperClass(superClass);
+    }
+    // 5) ALWAYS resolve raw interfaces
+    Type[] rawIfaces = cls.getGenericInterfaces();
+    if (rawIfaces != null && rawIfaces.length > 0) {
+        JavaType[] intfs = new JavaType[rawIfaces.length];
+        for (int i = 0; i < rawIfaces.length; i++) {
+            intfs[i] = constructType(rawIfaces[i], bindings);
+        }
+        placeholder.setSuperInterfaces(intfs);
+    }
+
+    // 6) special container types
+    if (Map.class.isAssignableFrom(cls)) {
+        MapType mt = MapType.construct(
+            cls, bindings,
+            placeholder.getSuperClass(), placeholder.getInterfaces(),
+            /*keyType*/null, /*valueType*/null);
+        _typeCache.replace(key, bindings, mt);
+        return mt;
+    }
+    if (Collection.class.isAssignableFrom(cls)) {
+        CollectionType ct = CollectionType.construct(
+            cls, bindings,
+            placeholder.getSuperClass(), placeholder.getInterfaces());
+        _typeCache.replace(key, bindings, ct);
+        return ct;
+    }
+    // 7) otherwise simple (POJO) type
+    return placeholder;
+}
\ No newline at end of file
