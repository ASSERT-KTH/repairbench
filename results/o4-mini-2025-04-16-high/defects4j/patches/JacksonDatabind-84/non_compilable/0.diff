diff --git a/tmp/7dec8e4a-1652-4c49-a70d-3b964ac07a77_buggy.java b/tmp/17902973-4513-42b3-a514-21668ed2e649_fixed.java
index e69de29..067e37a 100644
--- a/tmp/7dec8e4a-1652-4c49-a70d-3b964ac07a77_buggy.java
+++ b/tmp/17902973-4513-42b3-a514-21668ed2e649_fixed.java
@@ -0,0 +1,53 @@
+// in com.fasterxml.jackson.databind.type.TypeFactory
+@Override
+protected JavaType _fromClass(Class<?> cls, TypeBindings bindings, ClassStack parent) {
+    // 1) recursion‐detection: see if we are already in the middle of
+    //    resolving exactly this class
+    ClassStack.IncompleteRecursion rec = ClassStack.find(parent, cls);
+    if (rec != null) {
+        return rec.type;
+    }
+
+    // 2) cache lookup
+    TypeKey key = new TypeKey(cls, bindings);
+    JavaType cached = _typeCache.get(key);
+    if (cached != null) {
+        return cached;
+    }
+
+    // 3) array handling
+    if (cls.isArray()) {
+        JavaType comp = _fromClass(cls.getComponentType(),
+                                  EMPTY_BINDINGS,
+                                  parent);
+        return ArrayType.construct(comp, cls.getGenericComponentType());
+    }
+
+    // 4) create the "placeholder" for this type, register it for recursion
+    SimpleType result = new SimpleType(cls, bindings, null, null);
+    ClassStack.IncompleteRecursion newRec = new ClassStack.IncompleteRecursion(parent, cls);
+    newRec.type = result;
+    _incompleteRecursions.add(newRec);
+
+    // 5) resolve super‐class
+    Class<?> superCls = cls.getSuperclass();
+    if (superCls != null) {
+        JavaType superType = _fromClass(superCls, EMPTY_BINDINGS, newRec);
+        result.setSuperClass(superType);
+    }
+
+    // 6) resolve any interfaces
+    Class<?>[] interfaces = cls.getInterfaces();
+    if (interfaces != null && interfaces.length > 0) {
+        JavaType[] intTypes = new JavaType[interfaces.length];
+        for (int i = 0; i < interfaces.length; i++) {
+            intTypes[i] = _fromClass(interfaces[i], EMPTY_BINDINGS, newRec);
+        }
+        result.setSuperInterfaces(intTypes);
+    }
+
+    // 7) done with recursion, cache and return
+    _incompleteRecursions.remove(newRec);
+    _typeCache.put(key, result);
+    return result;
+}
\ No newline at end of file
