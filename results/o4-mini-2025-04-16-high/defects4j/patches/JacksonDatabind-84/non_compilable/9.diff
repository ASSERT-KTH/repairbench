diff --git a/tmp/528c6fa4-839c-4b49-ad23-861eb59f4e79_buggy.java b/tmp/3aabeec1-18b6-4164-a444-f1387d09d1e1_fixed.java
index e69de29..a8fd67d 100644
--- a/tmp/528c6fa4-839c-4b49-ad23-861eb59f4e79_buggy.java
+++ b/tmp/3aabeec1-18b6-4164-a444-f1387d09d1e1_fixed.java
@@ -0,0 +1,48 @@
+@Override
+protected JavaType _fromClass(Class<?> raw, TypeBindings bindings) {
+    ClassKey key = new ClassKey(raw, bindings);
+    // 1) check cache
+    synchronized (_typeCache) {
+        JavaType cached = _typeCache.get(key);
+        if (cached != null) {
+            return cached;
+        }
+    }
+
+    JavaType type;
+    // 2) array types
+    if (raw.isArray()) {
+        JavaType component = constructType(raw.getComponentType());
+        type = ArrayType.construct(component, bindings);
+    } else {
+        // 3) plain (non‐generic) types must still have their super‐types resolved
+        TypeVariable<?>[] vars = raw.getTypeParameters();
+        if ((vars == null || vars.length == 0) && bindings.isEmpty()) {
+            // resolve superclass
+            JavaType superClass = null;
+            Type sup = raw.getGenericSuperclass();
+            if (sup != null) {
+                superClass = _fromAny(sup, bindings);
+            }
+            // resolve interfaces
+            Type[] ints = raw.getGenericInterfaces();
+            JavaType[] superIfs = null;
+            if (ints != null && ints.length > 0) {
+                superIfs = new JavaType[ints.length];
+                for (int i = 0; i < ints.length; ++i) {
+                    superIfs[i] = _fromAny(ints[i], bindings);
+                }
+            }
+            type = SimpleType.construct(raw, superClass, superIfs);
+        } else {
+            // generic or parameterized type
+            type = _fromParamType(raw, null, bindings);
+        }
+    }
+
+    // 4) cache and return
+    synchronized (_typeCache) {
+        _typeCache.put(key, type);
+    }
+    return type;
+}
\ No newline at end of file
