diff --git a/tmp/a6618d4d-9b4a-46f5-a4bd-20fe9d9a2b1c_buggy.java b/tmp/f9a2dc91-fbd5-4392-bc6d-961613d8535e_fixed.java
index e69de29..f179ca3 100644
--- a/tmp/a6618d4d-9b4a-46f5-a4bd-20fe9d9a2b1c_buggy.java
+++ b/tmp/f9a2dc91-fbd5-4392-bc6d-961613d8535e_fixed.java
@@ -0,0 +1,40 @@
+// In TypeFactory.java, replace the old “_fromClass” (or its equivalent) with this version:
+protected JavaType _fromClass(Class<?> raw, TypeBindings parentBindings) {
+    // 1) build a canonical key for lookup
+    JavaTypeKey key = new JavaTypeKey(raw, parentBindings);
+    // 2) if we've already fully built this exact type, just return it
+    JavaType cached = _typeCache.get(key);
+    if (cached != null) {
+        return cached;
+    }
+    // 3) if we're already in the middle of building it (recursive reference),
+    //    return the placeholder so we don't infinite‐recurse
+    JavaType placeholder = _incomplete.get(key);
+    if (placeholder != null) {
+        return placeholder;
+    }
+    // 4) create a lightweight stub and mark it “incomplete”
+    SimpleType stub = new SimpleType(raw, parentBindings,
+            null, null, null, null, null);
+    _incomplete.put(key, stub);
+
+    // 5) now resolve its super‐class and interfaces
+    JavaType superClass = (raw == Object.class)
+            ? null
+            : constructType(raw.getSuperclass());
+    Class<?>[] interfaces = raw.getInterfaces();
+    JavaType[] resolvedIfaces = new JavaType[interfaces.length];
+    for (int i = 0, len = interfaces.length; i < len; ++i) {
+        resolvedIfaces[i] = constructType(interfaces[i]);
+    }
+
+    // 6) build the real, fully‐resolved SimpleType
+    SimpleType full = new SimpleType(raw, parentBindings,
+            superClass, resolvedIfaces, null, null, null);
+
+    // 7) remove the stub from “incomplete” and cache the real thing
+    _incomplete.remove(key);
+    _typeCache.put(new JavaTypeKey(full), full);
+
+    return full;
+}
\ No newline at end of file
