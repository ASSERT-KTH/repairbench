diff --git a/tmp/99f69721-2369-46b8-a15a-fc23d8840c28_buggy.java b/tmp/ae55b581-5505-4d1e-aa6b-076fd79d458e_fixed.java
index 6b8185e..449de30 100644
--- a/tmp/99f69721-2369-46b8-a15a-fc23d8840c28_buggy.java
+++ b/tmp/ae55b581-5505-4d1e-aa6b-076fd79d458e_fixed.java
@@ -1,77 +1,85 @@
-    // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations
 static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                    boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
 
     boolean lastWasWhite = false;
     boolean reachedNonWhite = false;
     final EscapeMode escapeMode = out.escapeMode();
     final CharsetEncoder encoder = out.encoder();
     final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
     final Map<Character, String> map = escapeMode.getMap();
     final int length = string.length();
 
     int codePoint;
     for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
         codePoint = string.codePointAt(offset);
 
         if (normaliseWhite) {
             if (StringUtil.isWhitespace(codePoint)) {
                 if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
                     continue;
                 accum.append(' ');
                 lastWasWhite = true;
                 continue;
             } else {
                 lastWasWhite = false;
                 reachedNonWhite = true;
             }
         }
-            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
+        // surrogate pairs, split implementation for efficiency on single char common case:
         if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
             final char c = (char) codePoint;
-                // html specific and required escapes:
             switch (c) {
                 case '&':
                     accum.append("&amp;");
                     break;
                 case 0xA0:
-                        if (escapeMode != EscapeMode.xhtml)
+                    if (escapeMode != EscapeMode.xhtml) {
+                        // non-breaking space: always &nbsp; in non-XHTML modes
                         accum.append("&nbsp;");
-                        else
+                    } else {
+                        // in XHTML, only raw if encodable, else numeric (or named) escape
+                        if (canEncode(coreCharset, c, encoder)) {
                             accum.append(c);
+                        } else if (map.containsKey(c)) {
+                            accum.append('&').append(map.get(c)).append(';');
+                        } else {
+                            accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+                        }
+                    }
                     break;
                 case '<':
                     if (!inAttribute)
                         accum.append("&lt;");
                     else
                         accum.append(c);
                     break;
                 case '>':
                     if (!inAttribute)
                         accum.append("&gt;");
                     else
                         accum.append(c);
                     break;
                 case '"':
                     if (inAttribute)
                         accum.append("&quot;");
                     else
                         accum.append(c);
                     break;
                 default:
-                        if (canEncode(coreCharset, c, encoder))
+                    if (canEncode(coreCharset, c, encoder)) {
                         accum.append(c);
-                        else if (map.containsKey(c))
+                    } else if (map.containsKey(c)) {
                         accum.append('&').append(map.get(c)).append(';');
-                        else
+                    } else {
                         accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
                     }
+            }
         } else {
             final String c = new String(Character.toChars(codePoint));
-                if (encoder.canEncode(c)) // uses fallback encoder for simplicity
+            if (encoder.canEncode(c))
                 accum.append(c);
             else
                 accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
         }
     }
 }
\ No newline at end of file
