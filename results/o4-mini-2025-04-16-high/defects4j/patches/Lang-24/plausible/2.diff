diff --git a/tmp/f0ee9164-606b-4a1f-8213-fad323289633_buggy.java b/tmp/79d29548-0fdd-465f-9893-407e7146ca41_fixed.java
index 33b47bc..0eb1cbf 100644
--- a/tmp/f0ee9164-606b-4a1f-8213-fad323289633_buggy.java
+++ b/tmp/79d29548-0fdd-465f-9893-407e7146ca41_fixed.java
@@ -1,116 +1,98 @@
-    /**
-     * <p>Checks whether the String a valid Java number.</p>
-     *
-     * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
-     * qualifier, scientific notation and numbers marked with a type
-     * qualifier (e.g. 123L).</p>
-     *
-     * <p><code>Null</code> and empty String will return
-     * <code>false</code>.</p>
-     *
-     * @param str  the <code>String</code> to check
-     * @return <code>true</code> if the string is a correctly formatted number
-     */
 public static boolean isNumber(String str) {
     if (StringUtils.isEmpty(str)) {
         return false;
     }
     char[] chars = str.toCharArray();
     int sz = chars.length;
     boolean hasExp = false;
     boolean hasDecPoint = false;
     boolean allowSigns = false;
     boolean foundDigit = false;
     // deal with any possible sign up front
     int start = (chars[0] == '-') ? 1 : 0;
+    // handle hex numbers
     if (sz > start + 1) {
         if (chars[start] == '0' && chars[start + 1] == 'x') {
             int i = start + 2;
             if (i == sz) {
-                    return false; // str == "0x"
+                // only "0x" is not valid
+                return false;
             }
-                // checking hex (it can't be anything else)
-                for (; i < chars.length; i++) {
-                    if ((chars[i] < '0' || chars[i] > '9')
-                        && (chars[i] < 'a' || chars[i] > 'f')
-                        && (chars[i] < 'A' || chars[i] > 'F')) {
+            // check the rest is a valid hex digit
+            for (; i < sz; i++) {
+                char c = chars[i];
+                if ((c < '0' || c > '9')
+                    && (c < 'a' || c > 'f')
+                    && (c < 'A' || c > 'F')) {
                     return false;
                 }
             }
             return true;
         }
     }
-        sz--; // don't want to loop to the last char, check it afterwords
-              // for type qualifiers
+    // reduce sz, so that last char can be handled separately
+    sz--;
     int i = start;
-        // loop to the next to last char or to the last char if we need another digit to
-        // make a valid number (e.g. chars[0..5] = "1234E")
+    // parse digits, decimal point, exponent and sign
     while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
-            if (chars[i] >= '0' && chars[i] <= '9') {
+        char c = chars[i];
+        if (c >= '0' && c <= '9') {
             foundDigit = true;
             allowSigns = false;
-
-            } else if (chars[i] == '.') {
+        } else if (c == '.') {
             if (hasDecPoint || hasExp) {
-                    // two decimal points or dec in exponent   
                 return false;
             }
             hasDecPoint = true;
-            } else if (chars[i] == 'e' || chars[i] == 'E') {
-                // we've already taken care of hex.
+        } else if (c == 'e' || c == 'E') {
             if (hasExp) {
-                    // two E's
                 return false;
             }
             if (!foundDigit) {
                 return false;
             }
             hasExp = true;
             allowSigns = true;
-            } else if (chars[i] == '+' || chars[i] == '-') {
+        } else if (c == '+' || c == '-') {
             if (!allowSigns) {
                 return false;
             }
             allowSigns = false;
-                foundDigit = false; // we need a digit after the E
+            foundDigit = false;
         } else {
             return false;
         }
         i++;
     }
+    // handle last character
     if (i < chars.length) {
-            if (chars[i] >= '0' && chars[i] <= '9') {
-                // no type qualifier, OK
+        char c = chars[i];
+        if (c >= '0' && c <= '9') {
+            // last char a digit, OK
             return true;
         }
-            if (chars[i] == 'e' || chars[i] == 'E') {
-                // can't have an E at the last byte
+        if (c == 'e' || c == 'E') {
+            // cannot end with an exponent symbol
             return false;
         }
-            if (chars[i] == '.') {
+        if (c == '.') {
+            // trailing decimal point is OK if no previous decimal/exponent
             if (hasDecPoint || hasExp) {
-                    // two decimal points or dec in exponent
                 return false;
             }
-                // single trailing decimal point after non-exponent is ok
             return foundDigit;
         }
-            if (!allowSigns
-                && (chars[i] == 'd'
-                    || chars[i] == 'D'
-                    || chars[i] == 'f'
-                    || chars[i] == 'F')) {
+        if (!allowSigns && (c == 'd' || c == 'D' || c == 'f' || c == 'F')) {
+            // trailing float/double qualifier
             return foundDigit;
         }
-            if (chars[i] == 'l'
-                || chars[i] == 'L') {
-                // not allowing L with an exponent or decimal point
-                return foundDigit && !hasExp;
+        if (c == 'l' || c == 'L') {
+            // trailing long qualifier; disallow if decimal point or exponent present
+            return foundDigit && !hasExp && !hasDecPoint;
         }
-            // last character is illegal
+        // illegal trailing character
         return false;
     }
-        // allowSigns is true iff the val ends in 'E'
-        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
+    // valid iff we have seen at least one digit and are not dangling on an exponent sign
     return !allowSigns && foundDigit;
 }
\ No newline at end of file
