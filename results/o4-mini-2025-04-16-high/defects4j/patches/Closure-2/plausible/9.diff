diff --git a/tmp/eae9ed47-9679-4382-8c68-fe573e507f32_buggy.java b/tmp/e969a2b9-1e2e-4a28-8842-e80814687ef4_fixed.java
index 8ff679b..da74f5f 100644
--- a/tmp/eae9ed47-9679-4382-8c68-fe573e507f32_buggy.java
+++ b/tmp/e969a2b9-1e2e-4a28-8842-e80814687ef4_fixed.java
@@ -1,39 +1,36 @@
-  /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
-   * @param t The node traversal object that supplies context
-   * @param n The node being visited
-   * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
-   * @param interfaceType The super interface that is being visited
-   */
 private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
     String functionName, HashMap<String, ObjectType> properties,
     HashMap<String, ObjectType> currentProperties,
     ObjectType interfaceType) {
+  // If the interfaceType is a proxy for a non-existent object,
+  // getImplicitPrototype() may return null.  Just bail out in that case.
   ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
-    for (String name : currentPropertyNames) {
-      ObjectType oType = properties.get(name);
-      if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
+  if (implicitProto == null) {
+    return;
+  }
+
+  // Otherwise, check all own properties on the implicit prototype.
+  for (String name : implicitProto.getOwnPropertyNames()) {
+    ObjectType prevType = properties.get(name);
+    if (prevType != null) {
+      if (!interfaceType.getPropertyType(name)
+            .isEquivalentTo(prevType.getPropertyType(name))) {
         compiler.report(
             t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-                  functionName, name, oType.toString(),
+                        functionName,
+                        name,
+                        prevType.toString(),
                         interfaceType.toString()));
       }
     }
     currentProperties.put(name, interfaceType);
   }
-    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
-      checkInterfaceConflictProperties(t, n, functionName, properties,
-          currentProperties, iType);
+
+  // Recurse into any interfaces this one extends.
+  for (ObjectType superIface : interfaceType.getCtorExtendedInterfaces()) {
+    if (superIface != null) {
+      checkInterfaceConflictProperties(
+          t, n, functionName, properties, currentProperties, superIface);
+    }
   }
 }
\ No newline at end of file
