diff --git a/tmp/9ab6f391-de53-4893-afe6-47c6daab5bb3_buggy.java b/tmp/132bf326-21e5-428d-8de9-b7a064de3c03_fixed.java
index 8ff679b..8ab4d3f 100644
--- a/tmp/9ab6f391-de53-4893-afe6-47c6daab5bb3_buggy.java
+++ b/tmp/132bf326-21e5-428d-8de9-b7a064de3c03_fixed.java
@@ -1,39 +1,41 @@
 /**
-   * Check whether there's any property conflict for for a particular super
+ * Check whether there's any property conflict for a particular super
  * interface
  * @param t The node traversal object that supplies context
  * @param n The node being visited
  * @param functionName The function name being checked
  * @param properties The property names in the super interfaces that have
  * been visited
  * @param currentProperties The property names in the super interface
  * that have been visited
  * @param interfaceType The super interface that is being visited
  */
-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
-      String functionName, HashMap<String, ObjectType> properties,
+private void checkInterfaceConflictProperties(
+    NodeTraversal t, Node n, String functionName,
+    HashMap<String, ObjectType> properties,
     HashMap<String, ObjectType> currentProperties,
     ObjectType interfaceType) {
+  // Skip if this interfaceType is a proxy for a non‚Äêexistent type.
   ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
-    for (String name : currentPropertyNames) {
+  if (implicitProto != null) {
+    for (String name : implicitProto.getOwnPropertyNames()) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
+        if (!interfaceType.getPropertyType(name)
+                          .isEquivalentTo(oType.getPropertyType(name))) {
           compiler.report(
               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-                  functionName, name, oType.toString(),
+                  functionName, name,
+                  oType.toString(),
                   interfaceType.toString()));
         }
       }
       currentProperties.put(name, interfaceType);
     }
+  }
+  // Recurse into any extended interfaces
   for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
-      checkInterfaceConflictProperties(t, n, functionName, properties,
-          currentProperties, iType);
+    checkInterfaceConflictProperties(
+        t, n, functionName, properties, currentProperties, iType);
   }
 }
\ No newline at end of file
