diff --git a/tmp/10e6ec07-d80d-4fdb-b8e9-9be8c90de5e8_buggy.java b/tmp/73a2137b-d71b-4ee5-b284-4f5429c06c83_fixed.java
index 8ff679b..317eedf 100644
--- a/tmp/10e6ec07-d80d-4fdb-b8e9-9be8c90de5e8_buggy.java
+++ b/tmp/73a2137b-d71b-4ee5-b284-4f5429c06c83_fixed.java
@@ -1,39 +1,40 @@
-  /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
-   * @param t The node traversal object that supplies context
-   * @param n The node being visited
-   * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
-   * @param interfaceType The super interface that is being visited
-   */
-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
-      String functionName, HashMap<String, ObjectType> properties,
+private void checkInterfaceConflictProperties(
+    NodeTraversal t, Node n, String functionName,
+    HashMap<String, ObjectType> properties,
     HashMap<String, ObjectType> currentProperties,
     ObjectType interfaceType) {
+  // Guard against missing or proxy (non-existent) interfaces.
+  if (interfaceType == null) {
+    return;
+  }
   ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
   // This can be the case if interfaceType is proxy to a non-existent
   // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
-    for (String name : currentPropertyNames) {
+  if (implicitProto == null) {
+    return;
+  }
+
+  // Check all own properties on the interface's implicit prototype.
+  for (String name : implicitProto.getOwnPropertyNames()) {
     ObjectType oType = properties.get(name);
     if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
+      JSType thisProp = interfaceType.getPropertyType(name);
+      JSType otherProp = oType.getPropertyType(name);
+      if (!thisProp.isEquivalentTo(otherProp)) {
         compiler.report(
             t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                 functionName, name, oType.toString(),
                 interfaceType.toString()));
       }
     }
     currentProperties.put(name, interfaceType);
   }
+
+  // Recurse into any interfaces extended by this interface's constructor.
   for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
-      checkInterfaceConflictProperties(t, n, functionName, properties,
-          currentProperties, iType);
+    if (iType != null) {
+      checkInterfaceConflictProperties(
+          t, n, functionName, properties, currentProperties, iType);
+    }
   }
 }
\ No newline at end of file
