diff --git a/tmp/10672483-e323-4cac-b81f-f1af4424f84e_buggy.java b/tmp/b1f8cd14-b463-4a7e-84ad-9dcaf7e88dff_fixed.java
index bada2b6..91b6787 100644
--- a/tmp/10672483-e323-4cac-b81f-f1af4424f84e_buggy.java
+++ b/tmp/b1f8cd14-b463-4a7e-84ad-9dcaf7e88dff_fixed.java
@@ -1,16 +1,45 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
 public Class getGenericType(Field field) {
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+    Type genericType = field.getGenericType();
+    if (genericType instanceof ParameterizedType) {
+        Type[] typeArgs = ((ParameterizedType) genericType).getActualTypeArguments();
+        if (typeArgs.length > 0) {
+            Type typeArg = typeArgs[0];
+            // plain class
+            if (typeArg instanceof Class) {
+                return (Class<?>) typeArg;
+            }
+            // nested generics: return the raw type (e.g. List for List<String>)
+            if (typeArg instanceof ParameterizedType) {
+                Type rawType = ((ParameterizedType) typeArg).getRawType();
+                if (rawType instanceof Class) {
+                    return (Class<?>) rawType;
+                }
+            }
+            // wildcard generics: use the upper bound (e.g. Number for <? extends Number>)
+            if (typeArg instanceof WildcardType) {
+                Type[] bounds = ((WildcardType) typeArg).getUpperBounds();
+                if (bounds.length > 0 && bounds[0] instanceof Class) {
+                    return (Class<?>) bounds[0];
+                }
+            }
+            // array generics (e.g. T[])
+            if (typeArg instanceof GenericArrayType) {
+                Type comp = ((GenericArrayType) typeArg).getGenericComponentType();
+                if (comp instanceof Class) {
+                    return java.lang.reflect.Array
+                        .newInstance((Class<?>) comp, 0)
+                        .getClass();
+                }
+                if (comp instanceof ParameterizedType) {
+                    Type rawComp = ((ParameterizedType) comp).getRawType();
+                    if (rawComp instanceof Class) {
+                        return java.lang.reflect.Array
+                            .newInstance((Class<?>) rawComp, 0)
+                            .getClass();
+                    }
+                }
+            }
+        }
     }
-        
     return Object.class;
 }
\ No newline at end of file
