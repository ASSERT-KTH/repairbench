diff --git a/tmp/75dbd781-5dd2-4e82-b7a9-1de8705f8873_buggy.java b/tmp/820f96d8-97d0-4273-a57f-4911bb70d335_fixed.java
index bada2b6..8bf20be 100644
--- a/tmp/75dbd781-5dd2-4e82-b7a9-1de8705f8873_buggy.java
+++ b/tmp/820f96d8-97d0-4273-a57f-4911bb70d335_fixed.java
@@ -1,16 +1,39 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
 public Class getGenericType(Field field) {
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+    Type type = field.getGenericType();
+    // unwrap generic array types (e.g. List<String>[] -> List<String>)
+    if (type instanceof GenericArrayType) {
+        type = ((GenericArrayType) type).getGenericComponentType();
+    }
+    if (type instanceof ParameterizedType) {
+        ParameterizedType pt = (ParameterizedType) type;
+        Type actual = pt.getActualTypeArguments()[0];
+        // nested parameterized type -> return its raw type
+        if (actual instanceof ParameterizedType) {
+            Type raw = ((ParameterizedType) actual).getRawType();
+            if (raw instanceof Class) {
+                return (Class) raw;
+            }
+        }
+        // wildcard type -> inspect upper bound
+        else if (actual instanceof WildcardType) {
+            WildcardType wt = (WildcardType) actual;
+            Type[] bounds = wt.getUpperBounds();
+            if (bounds.length > 0) {
+                Type bound = bounds[0];
+                if (bound instanceof ParameterizedType) {
+                    Type raw = ((ParameterizedType) bound).getRawType();
+                    if (raw instanceof Class) {
+                        return (Class) raw;
+                    }
+                } else if (bound instanceof Class) {
+                    return (Class) bound;
+                }
+            }
+        }
+        // simple class type
+        else if (actual instanceof Class) {
             return (Class) actual;
-                //in case of nested generics we don't go deep
         }
-        
+    }
     return Object.class;
 }
\ No newline at end of file
