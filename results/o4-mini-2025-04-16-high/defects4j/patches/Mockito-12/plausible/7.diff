diff --git a/tmp/5cf6d326-b743-47cb-b008-a20acd9e1824_buggy.java b/tmp/c4f33602-2cae-4302-ab1e-e475bb73d641_fixed.java
index bada2b6..c9209ac 100644
--- a/tmp/5cf6d326-b743-47cb-b008-a20acd9e1824_buggy.java
+++ b/tmp/c4f33602-2cae-4302-ab1e-e475bb73d641_fixed.java
@@ -1,16 +1,32 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
 public Class getGenericType(Field field) {
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+    Type genericType = field.getGenericType();
+    if (genericType instanceof ParameterizedType) {
+        ParameterizedType paramType = (ParameterizedType) genericType;
+        // the declared raw type of the field, e.g. List.class or ArgumentCaptor.class
+        Class<?> fieldRawType = field.getType();
+        // start with the first actual type argument
+        Type argType = paramType.getActualTypeArguments()[0];
+        // if you have nested generics of the same kind (e.g. List<List<â€¦>>),
+        // skip those wrapper levels
+        while (argType instanceof ParameterizedType
+            && ((ParameterizedType) argType).getRawType().equals(fieldRawType)) {
+            Type[] nestedArgs = ((ParameterizedType) argType).getActualTypeArguments();
+            if (nestedArgs.length == 0) {
+                break;
+            }
+            argType = nestedArgs[0];
+        }
+        // if it's a plain Class, return it
+        if (argType instanceof Class) {
+            return (Class) argType;
+        }
+        // if it's still a ParameterizedType, return its raw type
+        if (argType instanceof ParameterizedType) {
+            Type raw = ((ParameterizedType) argType).getRawType();
+            if (raw instanceof Class) {
+                return (Class) raw;
+            }
+        }
     }
-        
     return Object.class;
 }
\ No newline at end of file
