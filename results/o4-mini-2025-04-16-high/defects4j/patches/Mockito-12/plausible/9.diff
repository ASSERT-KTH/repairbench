diff --git a/tmp/ad1bf44d-5681-44f1-a0f3-0f6ccf771b3f_buggy.java b/tmp/c5bc95f7-b75d-4efb-a0b8-122e1077283a_fixed.java
index bada2b6..cb129d1 100644
--- a/tmp/ad1bf44d-5681-44f1-a0f3-0f6ccf771b3f_buggy.java
+++ b/tmp/c5bc95f7-b75d-4efb-a0b8-122e1077283a_fixed.java
@@ -1,16 +1,19 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
 public Class getGenericType(Field field) {
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+    Type genericType = field.getGenericType();
+    if (genericType instanceof ParameterizedType) {
+        ParameterizedType pt = (ParameterizedType) genericType;
+        Type arg = pt.getActualTypeArguments()[0];
+        // simple generic: List<String> or Set<String>
+        if (arg instanceof Class) {
+            return (Class) arg;
+        }
+        // nested generic: List<Set<String>> or Set<Set<String>>
+        if (arg instanceof ParameterizedType) {
+            Type raw = ((ParameterizedType) arg).getRawType();
+            if (raw instanceof Class) {
+                return (Class) raw;
+            }
+        }
     }
-        
     return Object.class;
 }
\ No newline at end of file
