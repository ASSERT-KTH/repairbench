diff --git a/tmp/7aa8a051-b264-4c92-a3d1-95978226ebea_buggy.java b/tmp/5253eeeb-d078-4958-8c23-65c50ec1db17_fixed.java
index bada2b6..5ad2b64 100644
--- a/tmp/7aa8a051-b264-4c92-a3d1-95978226ebea_buggy.java
+++ b/tmp/5253eeeb-d078-4958-8c23-65c50ec1db17_fixed.java
@@ -1,16 +1,39 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
 public Class getGenericType(Field field) {
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+    if (generic instanceof ParameterizedType) {
+        // start with the first type argument
+        Type arg = ((ParameterizedType) generic).getActualTypeArguments()[0];
+        Class result = null;
+        // drill down nested ParameterizedTypes, remembering the raw type at each level
+        while (true) {
+            if (arg instanceof Class) {
+                // if it's a plain Class and we haven't set a result yet, use it
+                if (result == null) {
+                    result = (Class) arg;
+                }
+                break;
+            } else if (arg instanceof ParameterizedType) {
+                ParameterizedType pt = (ParameterizedType) arg;
+                // remember the raw type of this ParameterizedType
+                Type raw = pt.getRawType();
+                if (raw instanceof Class) {
+                    result = (Class) raw;
+                }
+                // descend into its first type argument
+                Type[] args = pt.getActualTypeArguments();
+                if (args.length > 0) {
+                    arg = args[0];
+                    continue;
+                }
+                break;
+            } else {
+                // other Type (WildcardType, TypeVariable, etc.), give up
+                break;
+            }
+        }
+        if (result != null) {
+            return result;
+        }
     }
-        
     return Object.class;
 }
\ No newline at end of file
