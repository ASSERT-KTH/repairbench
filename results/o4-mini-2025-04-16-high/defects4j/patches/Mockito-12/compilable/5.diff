diff --git a/tmp/7646ad75-d8ac-4a7e-834c-c5168b03d424_buggy.java b/tmp/1b23a32f-7646-4d07-be75-c88d58a4e307_fixed.java
index bada2b6..4e037e9 100644
--- a/tmp/7646ad75-d8ac-4a7e-834c-c5168b03d424_buggy.java
+++ b/tmp/1b23a32f-7646-4d07-be75-c88d58a4e307_fixed.java
@@ -1,16 +1,29 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
  *
-     * @param field
-     * @return
+ * @param field the field to inspect
+ * @return the most‚Äênested raw class of the first type argument, or Object.class if none
  */
 public Class getGenericType(Field field) {
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
-        }
-        
-        return Object.class;
+    Type genericType = field.getGenericType();
+    Class result = Object.class;
+    // Walk down into nested parameterized types, always picking the first type argument,
+    // but remember the raw type at each level.
+    while (genericType instanceof ParameterizedType) {
+        ParameterizedType pt = (ParameterizedType) genericType;
+        // capture the raw type (e.g. List, Set, etc.)
+        Type raw = pt.getRawType();
+        if (raw instanceof Class) {
+            result = (Class) raw;
+        } else {
+            break;
+        }
+        // descend into the first type argument
+        Type[] args = pt.getActualTypeArguments();
+        if (args.length == 0) {
+            break;
+        }
+        genericType = args[0];
+    }
+    return result;
 }
\ No newline at end of file
