diff --git a/tmp/b1789eea-0de2-4db6-a139-a20704d085d1_buggy.java b/tmp/b9c4792b-ea75-4305-8b4e-f7494eaa3e44_fixed.java
index addeb8d..a469ed7 100644
--- a/tmp/b1789eea-0de2-4db6-a139-a20704d085d1_buggy.java
+++ b/tmp/b9c4792b-ea75-4305-8b4e-f7494eaa3e44_fixed.java
@@ -1,38 +1,35 @@
-    /**
-     * Searches the string builder to find the first reference to the specified
-     * string starting searching from the given index.
-     * <p>
-     * Note that a null input string will return -1, whereas the JDK throws an exception.
-     * 
-     * @param str  the string to find, null returns -1
-     * @param startIndex  the index to start at, invalid index rounded to edge
-     * @return the first index of the string, or -1 if not found
-     */
 public int indexOf(String str, int startIndex) {
-        startIndex = (startIndex < 0 ? 0 : startIndex);
-        if (str == null || startIndex >= size) {
+    // handle null and negative start
+    if (str == null) {
         return -1;
     }
+    if (startIndex < 0) {
+        startIndex = 0;
+    }
     int strLen = str.length();
+    // empty string always matches at startIndex (clamped to size)
+    if (strLen == 0) {
+        return startIndex <= size ? startIndex : size;
+    }
+    // if start past end or pattern longer than current contents, no match
+    if (startIndex >= size || strLen > size) {
+        return -1;
+    }
+    // single‐char case
     if (strLen == 1) {
         return indexOf(str.charAt(0), startIndex);
     }
-        if (strLen == 0) {
-            return startIndex;
-        }
-        if (strLen > size) {
-            return -1;
-        }
-        char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+    // now search only up to the used length (size), not the full buffer
+    final char[] buf = buffer;
+    final int max = size - strLen;
     outer:
-        for (int i = startIndex; i < len; i++) {
+    for (int i = startIndex; i <= max; i++) {
         for (int j = 0; j < strLen; j++) {
-                if (str.charAt(j) != thisBuf[i + j]) {
+            if (buf[i + j] != str.charAt(j)) {
                 continue outer;
             }
         }
         return i;
     }
     return -1;
 }
\ No newline at end of file
