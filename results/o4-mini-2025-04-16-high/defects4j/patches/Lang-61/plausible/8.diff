diff --git a/tmp/040740d5-5ebd-4c15-beb0-4803567c2d2f_buggy.java b/tmp/295c9d17-fc18-4c3d-b487-1b51045a5ce7_fixed.java
index addeb8d..eeac244 100644
--- a/tmp/040740d5-5ebd-4c15-beb0-4803567c2d2f_buggy.java
+++ b/tmp/295c9d17-fc18-4c3d-b487-1b51045a5ce7_fixed.java
@@ -1,38 +1,43 @@
 /**
  * Searches the string builder to find the first reference to the specified
  * string starting searching from the given index.
  * <p>
  * Note that a null input string will return -1, whereas the JDK throws an exception.
  * 
  * @param str  the string to find, null returns -1
  * @param startIndex  the index to start at, invalid index rounded to edge
  * @return the first index of the string, or -1 if not found
  */
 public int indexOf(String str, int startIndex) {
+    // clamp negative startIndex to zero
     startIndex = (startIndex < 0 ? 0 : startIndex);
     if (str == null || startIndex >= size) {
         return -1;
     }
     int strLen = str.length();
+    // single char search
     if (strLen == 1) {
         return indexOf(str.charAt(0), startIndex);
     }
+    // empty string
     if (strLen == 0) {
         return startIndex;
     }
+    // too long to match
     if (strLen > size) {
         return -1;
     }
     char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+    // last possible start index is size - strLen
+    int max = size - strLen;
     outer:
-        for (int i = startIndex; i < len; i++) {
+    for (int i = startIndex; i <= max; i++) {
         for (int j = 0; j < strLen; j++) {
-                if (str.charAt(j) != thisBuf[i + j]) {
+            if (thisBuf[i + j] != str.charAt(j)) {
                 continue outer;
             }
         }
         return i;
     }
     return -1;
 }
\ No newline at end of file
