diff --git a/tmp/a3a0ebd2-3b93-4cb5-97ec-a069c77b0d05_buggy.java b/tmp/73e8f3e1-eeb2-4592-ad41-86b6cd4fb096_fixed.java
index addeb8d..76a1814 100644
--- a/tmp/a3a0ebd2-3b93-4cb5-97ec-a069c77b0d05_buggy.java
+++ b/tmp/73e8f3e1-eeb2-4592-ad41-86b6cd4fb096_fixed.java
@@ -1,38 +1,37 @@
-    /**
-     * Searches the string builder to find the first reference to the specified
-     * string starting searching from the given index.
-     * <p>
-     * Note that a null input string will return -1, whereas the JDK throws an exception.
-     * 
-     * @param str  the string to find, null returns -1
-     * @param startIndex  the index to start at, invalid index rounded to edge
-     * @return the first index of the string, or -1 if not found
-     */
 public int indexOf(String str, int startIndex) {
-        startIndex = (startIndex < 0 ? 0 : startIndex);
-        if (str == null || startIndex >= size) {
+    if (str == null) {
         return -1;
     }
-        int strLen = str.length();
-        if (strLen == 1) {
-            return indexOf(str.charAt(0), startIndex);
+    int searchLen = str.length();
+    int thisLen = size;
+    // clamp startIndex to [0, thisLen]
+    if (startIndex < 0) {
+        startIndex = 0;
+    } else if (startIndex > thisLen) {
+        startIndex = thisLen;
     }
-        if (strLen == 0) {
+    // empty string always matches at the clamped startIndex
+    if (searchLen == 0) {
         return startIndex;
     }
-        if (strLen > size) {
+    // no room for the search string
+    if (searchLen > thisLen - startIndex) {
         return -1;
     }
-        char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+    // single‚Äêchar search optimization
+    if (searchLen == 1) {
+        return indexOf(str.charAt(0), startIndex);
+    }
+    char[] buf = buffer;
+    int max = thisLen - searchLen;
     outer:
-        for (int i = startIndex; i < len; i++) {
-            for (int j = 0; j < strLen; j++) {
-                if (str.charAt(j) != thisBuf[i + j]) {
+    for (int i = startIndex; i <= max; i++) {
+        for (int j = 0; j < searchLen; j++) {
+            if (buf[i + j] != str.charAt(j)) {
                 continue outer;
             }
         }
         return i;
     }
     return -1;
 }
\ No newline at end of file
