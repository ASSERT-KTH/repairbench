diff --git a/tmp/865f7417-ba6b-41a0-9607-dd8f84bdbca3_buggy.java b/tmp/0647c5d7-e993-4be4-b622-e665c00f9016_fixed.java
index 757067a..547a2f2 100644
--- a/tmp/865f7417-ba6b-41a0-9607-dd8f84bdbca3_buggy.java
+++ b/tmp/0647c5d7-e993-4be4-b622-e665c00f9016_fixed.java
@@ -1,63 +1,65 @@
 /**
  * Find a zero in the given interval with an initial guess.
  * <p>Throws <code>IllegalArgumentException</code> if the values of the
  * function at the three points have the same sign (note that it is
  * allowed to have endpoints with the same sign if the initial point has
  * opposite sign function-wise).</p>
  *
  * @param f function to solve.
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @param initial the start value to use (must be set to min if no
  * initial point is known).
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException the maximum iteration count
  * is exceeded
  * @throws FunctionEvaluationException if an error occurs evaluating
  *  the function
  * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+ * (even if it <em>is</em> a root), or if the three sample points do not
+ * bracket a root
  */
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifySequence(min, initial, max);
 
     // return the initial guess if it is good enough
-        double yInitial = f.value(initial);
+    final double yInitial = f.value(initial);
     if (Math.abs(yInitial) <= functionValueAccuracy) {
         setResult(initial, 0);
         return result;
     }
 
     // return the first endpoint if it is good enough
-        double yMin = f.value(min);
+    final double yMin = f.value(min);
     if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        setResult(min, 0);
         return result;
     }
 
     // reduce interval if min and initial bracket the root
     if (yInitial * yMin < 0) {
         return solve(f, min, yMin, initial, yInitial, min, yMin);
     }
 
     // return the second endpoint if it is good enough
-        double yMax = f.value(max);
+    final double yMax = f.value(max);
     if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+        setResult(max, 0);
         return result;
     }
 
     // reduce interval if initial and max bracket the root
     if (yInitial * yMax < 0) {
         return solve(f, initial, yInitial, max, yMax, initial, yInitial);
     }
 
-
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+    // no bracket: function values at min, initial and max are all the same sign
+    throw new IllegalArgumentException(
+        "Function values at endpoints and initial guess do not form a bracketing triplet: " +
+        "f(" + min + ")=" + yMin + ", f(" + initial + ")=" + yInitial + ", f(" + max + ")=" + yMax
+    );
 }
\ No newline at end of file
