diff --git a/tmp/b774faa9-53d7-4bae-a5d1-40edfe455a15_buggy.java b/tmp/06bc4a46-2f17-4804-8e76-7d512009176b_fixed.java
index 39dd8e7..9e5a04b 100644
--- a/tmp/b774faa9-53d7-4bae-a5d1-40edfe455a15_buggy.java
+++ b/tmp/06bc4a46-2f17-4804-8e76-7d512009176b_fixed.java
@@ -1,30 +1,72 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
+    // nothing left or at end of tag
+    if (tq.isEmpty() || tq.matchesAny("/>", ">")) {
+        return null;
+    }
+    // consume a potential key
     String key = tq.consumeAttributeKey();
+    // if no key, skip stray '='+value or consume one char to recover
+    if (key.length() == 0) {
+        if (tq.matchChomp("=")) {
+            // skip any value after '='
+            tq.consumeWhitespace();
+            if (tq.matchChomp(SQ)) {
+                tq.chompTo(SQ);
+                tq.matchChomp(SQ);
+            } else if (tq.matchChomp(DQ)) {
+                tq.chompTo(DQ);
+                tq.matchChomp(DQ);
+            } else {
+                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+                    tq.consume();
+                }
+            }
+        } else if (!tq.isEmpty()) {
+            tq.consume();
+        }
+        return null;
+    }
+    // parse optional value for a valid key
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
-
         if (tq.matchChomp(SQ)) {
+            // single-quoted
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
+            // double-quoted
             value = tq.chompTo(DQ);
         } else {
-                StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
+            // unquoted
+            StringBuilder sb = new StringBuilder();
             while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
-                    valueAccum.append(tq.consume());
+                sb.append(tq.consume());
             }
-                value = valueAccum.toString();
+            value = sb.toString();
+        }
+    }
+    // validate the key: must start with a letter, '_' or ':',
+    // subsequent chars may be letters, digits, '_', ':', '-', or '.'
+    char c0 = key.charAt(0);
+    if (!((c0 >= 'A' && c0 <= 'Z')
+        || (c0 >= 'a' && c0 <= 'z')
+        || c0 == '_'
+        || c0 == ':')) {
+        return null;
+    }
+    for (int i = 1; i < key.length(); i++) {
+        char c = key.charAt(i);
+        if (!((c >= 'A' && c <= 'Z')
+            || (c >= 'a' && c <= 'z')
+            || (c >= '0' && c <= '9')
+            || c == '_'
+            || c == ':'
+            || c == '-'
+            || c == '.')) {
+            return null;
         }
-            tq.consumeWhitespace();
     }
-        if (key.length() != 0)
     return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
-                
-            return null;
-        }
 }
\ No newline at end of file
