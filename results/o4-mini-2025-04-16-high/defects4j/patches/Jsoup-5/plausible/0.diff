diff --git a/tmp/35d7d34e-4ef2-4b8a-bfcc-778c132b3510_buggy.java b/tmp/1e0dc254-6156-4d04-b4ba-31b1f8c0caac_fixed.java
index 39dd8e7..246ed90 100644
--- a/tmp/35d7d34e-4ef2-4b8a-bfcc-778c132b3510_buggy.java
+++ b/tmp/1e0dc254-6156-4d04-b4ba-31b1f8c0caac_fixed.java
@@ -1,30 +1,41 @@
 private Attribute parseAttribute() {
+    // skip leading whitespace
     tq.consumeWhitespace();
+    // grab the key
     String key = tq.consumeAttributeKey();
+    // if there's no key, skip over the junk until we hit whitespace or a tag boundary
+    if (key.length() == 0) {
+        while (!tq.matchesAny("<", "/>", ">") 
+               && !tq.matchesWhitespace() 
+               && !tq.isEmpty()) {
+            tq.consume();
+        }
+        return null;
+    }
+    // otherwise we have a key, so try to read a value
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
-
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
+            // closing quote if present
+            tq.matchChomp(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
+            // closing quote if present
+            tq.matchChomp(DQ);
         } else {
-                StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
-                    valueAccum.append(tq.consume());
+            // unquoted value: read until whitespace or tag boundary
+            StringBuilder sb = new StringBuilder();
+            while (!tq.matchesAny("<", "/>", ">")
+                   && !tq.matchesWhitespace()
+                   && !tq.isEmpty()) {
+                sb.append(tq.consume());
             }
-                value = valueAccum.toString();
+            value = sb.toString();
         }
         tq.consumeWhitespace();
     }
-        if (key.length() != 0)
     return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
-                
-            return null;
-        }
 }
\ No newline at end of file
