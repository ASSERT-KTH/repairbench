diff --git a/tmp/c96ea9a1-33a1-4b5b-a4f4-7073a207d461_buggy.java b/tmp/c648f147-0494-469f-9a97-3cbb1a5f2959_fixed.java
index 39dd8e7..d9b7717 100644
--- a/tmp/c96ea9a1-33a1-4b5b-a4f4-7073a207d461_buggy.java
+++ b/tmp/c648f147-0494-469f-9a97-3cbb1a5f2959_fixed.java
@@ -1,30 +1,41 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
+    // read the key (may be empty if starts with = or invalid char)
     String key = tq.consumeAttributeKey();
     String value = "";
+    boolean hasEq = false;
     tq.consumeWhitespace();
+    // if there's an "=", consume it and parse the value
     if (tq.matchChomp("=")) {
+        hasEq = true;
         tq.consumeWhitespace();
-
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
             StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
+            // no quote to look for, so scan to end tag or space (or end of stream)
             while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                 valueAccum.append(tq.consume());
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
-        if (key.length() != 0)
+    // if we have a non-empty key, verify it starts with a letter; else drop it
+    if (key.length() != 0) {
+        char c0 = key.charAt(0);
+        if (Character.isLetter(c0)) {
             return Attribute.createFromEncoded(key, value);
-        else {
+        } else {
+            return null;
+        }
+    } else {
+        // no key: if we didn't just consume an "=", skip one char to avoid stalling
+        if (!hasEq && !tq.isEmpty()) {
             tq.consume();
-                
+        }
         return null;
     }
 }
\ No newline at end of file
