diff --git a/tmp/25429619-6b35-4800-928d-a907505c3596_buggy.java b/tmp/02475235-39e0-4bd1-bb2d-927befb584f9_fixed.java
index 39dd8e7..0e54a86 100644
--- a/tmp/25429619-6b35-4800-928d-a907505c3596_buggy.java
+++ b/tmp/02475235-39e0-4bd1-bb2d-927befb584f9_fixed.java
@@ -1,30 +1,47 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
+    // if next char is a '<', we're at the start of a new tag, so bail out
+    if (tq.isEmpty() || tq.matches("<")) {
+        return null;
+    }
+
     String key = tq.consumeAttributeKey();
     String value = "";
+
+    // drop any "attribute" whose key starts with an invalid name-start character (e.g. dots)
+    if (key.length() > 0) {
+        char c0 = key.charAt(0);
+        if (!(Character.isLetterOrDigit(c0) || c0 == '_' || c0 == ':' || c0 == '-')) {
+            return null;
+        }
+    }
+
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
 
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
             StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
+            // no ' or " to look for, so scan to end tag or space (or end-of-stream)
             while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                 valueAccum.append(tq.consume());
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
-        if (key.length() != 0)
+
+    if (key.length() != 0) {
         return Attribute.createFromEncoded(key, value);
-        else {
+    } else {
+        // skip one character to avoid stalling, but only if there is one
+        if (!tq.isEmpty()) {
             tq.consume();
-                
+        }
         return null;
     }
 }
\ No newline at end of file
