diff --git a/tmp/197dc122-341f-47fb-a985-0d6bf88505af_buggy.java b/tmp/f0c3f285-5867-484e-8dd6-19cae754d86e_fixed.java
index 39dd8e7..6d453df 100644
--- a/tmp/197dc122-341f-47fb-a985-0d6bf88505af_buggy.java
+++ b/tmp/f0c3f285-5867-484e-8dd6-19cae754d86e_fixed.java
@@ -1,30 +1,44 @@
 private Attribute parseAttribute() {
+    // skip leading whitespace
     tq.consumeWhitespace();
-        String key = tq.consumeAttributeKey();
+
+    // read the attribute key, stopping at whitespace, '=', '/', '>', or '<'
+    StringBuilder keyBuilder = new StringBuilder();
+    while (!tq.isEmpty() && !tq.matchesWhitespace() && !tq.matchesAny("=", "/", ">", "<")) {
+        keyBuilder.append(tq.consume());
+    }
+    String key = keyBuilder.toString();
+
     String value = "";
     tq.consumeWhitespace();
+
+    // if there's an '=', read the value (quoted or unquoted)
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
-
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
+            // note: do not insist on consuming the closing quote here
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
-                StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
+            StringBuilder valueBuilder = new StringBuilder();
+            // no quotes, scan until end tag, whitespace, or end of stream
             while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
-                    valueAccum.append(tq.consume());
+                valueBuilder.append(tq.consume());
             }
-                value = valueAccum.toString();
+            value = valueBuilder.toString();
         }
         tq.consumeWhitespace();
     }
-        if (key.length() != 0)
-            return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
 
+    // drop attributes with empty or non‐letter/digit keys
+    if (key.length() == 0 || !Character.isLetterOrDigit(key.charAt(0))) {
+        // if the next char is a '>', consume it so we don't leave it hanging
+        if (tq.matchChomp(">")) {
+            // no-op
+        }
         return null;
     }
+
+    return Attribute.createFromEncoded(key, value);
 }
\ No newline at end of file
