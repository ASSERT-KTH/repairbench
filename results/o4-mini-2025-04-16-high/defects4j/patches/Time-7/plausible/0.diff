diff --git a/tmp/15512a43-1ae8-479a-9584-d6bc8444a6bf_buggy.java b/tmp/38757542-c933-4366-b34b-1b24a9fd5fc7_fixed.java
index 0bbaab0..55d1cc4 100644
--- a/tmp/15512a43-1ae8-479a-9584-d6bc8444a6bf_buggy.java
+++ b/tmp/38757542-c933-4366-b34b-1b24a9fd5fc7_fixed.java
@@ -1,62 +1,80 @@
 /**
  * Parses a datetime from the given text, at the given position, saving the
  * result into the fields of the given ReadWritableInstant. If the parse
  * succeeds, the return value is the new text position. Note that the parse
  * may succeed without fully reading the text and in this case those fields
  * that were read will be set.
  * <p>
  * Only those fields present in the string will be changed in the specified
  * instant. All other fields will remain unaltered. Thus if the string only
  * contains a year and a month, then the day and time will be retained from
  * the input instant. If this is not the behaviour you want, then reset the
  * fields before calling this method, or use {@link #parseDateTime(String)}
  * or {@link #parseMutableDateTime(String)}.
  * <p>
  * If it fails, the return value is negative, but the instant may still be
  * modified. To determine the position where the parse failed, apply the
  * one's complement operator (~) on the return value.
  * <p>
  * This parse method ignores the {@link #getDefaultYear() default year} and
  * parses using the year from the supplied instant based on the chronology
  * and time-zone of the supplied instant.
  * <p>
  * The parse will use the chronology of the instant.
  *
  * @param instant  an instant that will be modified, not null
  * @param text     the text to parse
  * @param position position to start parsing from
  * @return new position, negative value means parse failed -
  *         apply complement operator (~) to get position of failure
  * @throws UnsupportedOperationException if parsing is not supported
  * @throws IllegalArgumentException      if the instant is null
  * @throws IllegalArgumentException      if any field is out of range
  */
 public int parseInto(ReadWritableInstant instant, String text, int position) {
     DateTimeParser parser = requireParser();
     if (instant == null) {
         throw new IllegalArgumentException("Instant must not be null");
     }
 
+    // The raw millis in UTC
     long instantMillis = instant.getMillis();
+    // Get the instant's chronology (which includes its zone)
     Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
+    // Allow any formatter‐override of the chronology
     chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
 
+    // Compute the default year once (using UTC‐millis so that .year().get does
+    // its own single zone‐conversion).  This avoids "double‐offsetting"
+    int defaultYear = chrono.year().get(instantMillis);
+
+    // Compute the local instant for the bucket
+    long instantLocal = chrono.getZone().convertUTCToLocal(instantMillis);
+
+    // Create the bucket with our corrected default year
     DateTimeParserBucket bucket = new DateTimeParserBucket(
             instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+
+    // Do the parse
     int newPos = parser.parseInto(bucket, text, position);
+
+    // Build the new millis and apply to the instant
     instant.setMillis(bucket.computeMillis(false, text));
+
+    // If an offset or zone was parsed, respect it
     if (iOffsetParsed && bucket.getOffsetInteger() != null) {
         int parsedOffset = bucket.getOffsetInteger();
         DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
         chrono = chrono.withZone(parsedZone);
     } else if (bucket.getZone() != null) {
         chrono = chrono.withZone(bucket.getZone());
     }
+
+    // Finally set chronology and any override zone on the instant
     instant.setChronology(chrono);
     if (iZone != null) {
         instant.setZone(iZone);
     }
+
     return newPos;
 }
\ No newline at end of file
