diff --git a/tmp/d1580fa3-97fb-41e7-aa35-e0d770971f18_buggy.java b/tmp/400b25d3-13bd-4953-9913-5a9acc2d8e2d_fixed.java
index 8da6fb2..35d49e4 100644
--- a/tmp/d1580fa3-97fb-41e7-aa35-e0d770971f18_buggy.java
+++ b/tmp/400b25d3-13bd-4953-9913-5a9acc2d8e2d_fixed.java
@@ -1,163 +1,144 @@
 /**
  * Parse a date from ISO-8601 formatted string. It expects a format
  * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]
  * 
  * @param date ISO string to parse in the appropriate format.
  * @param pos The position to start parsing from, updated to where parsing stopped.
  * @return the parsed date
  * @throws ParseException if the date is not in the appropriate format
  */
 public static Date parse(String date, ParsePosition pos) throws ParseException {
     Exception fail = null;
     try {
         int offset = pos.getIndex();
 
         // extract year
         int year = parseInt(date, offset, offset += 4);
         if (checkOffset(date, offset, '-')) {
             offset += 1;
         }
 
         // extract month
         int month = parseInt(date, offset, offset += 2);
         if (checkOffset(date, offset, '-')) {
             offset += 1;
         }
 
         // extract day
         int day = parseInt(date, offset, offset += 2);
         // default time value
         int hour = 0;
         int minutes = 0;
         int seconds = 0;
-            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
+        int milliseconds = 0;
 
-            // if the value has no time component (and no time zone), we are done
+        // if no time component and no timezone, we're done
         boolean hasT = checkOffset(date, offset, 'T');
-            
-            if (!hasT && (date.length() <= offset)) {
-                Calendar calendar = new GregorianCalendar(year, month - 1, day);
-
+        if (!hasT && date.length() <= offset) {
+            Calendar cal = new GregorianCalendar(year, month - 1, day);
             pos.setIndex(offset);
-                return calendar.getTime();
+            return cal.getTime();
         }
 
+        // time component
         if (hasT) {
-
-                // extract hours, minutes, seconds and milliseconds
-                hour = parseInt(date, offset += 1, offset += 2);
+            hour = parseInt(date, ++offset, offset += 2);
             if (checkOffset(date, offset, ':')) {
-                    offset += 1;
+                offset++;
             }
-
             minutes = parseInt(date, offset, offset += 2);
             if (checkOffset(date, offset, ':')) {
-                    offset += 1;
+                offset++;
             }
-                // second and milliseconds can be optional
+            // seconds and millis optional
             if (date.length() > offset) {
                 char c = date.charAt(offset);
                 if (c != 'Z' && c != '+' && c != '-') {
                     seconds = parseInt(date, offset, offset += 2);
-                        if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
-                        // milliseconds can be optional in the format
+                    if (seconds > 59 && seconds < 63) {
+                        seconds = 59; // drop leap seconds
+                    }
                     if (checkOffset(date, offset, '.')) {
-                            offset += 1;
-                            int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
-                            int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
-                            int fraction = parseInt(date, offset, parseEndOffset);
-                            // compensate for "missing" digits
-                            switch (parseEndOffset - offset) { // number of digits parsed
-                            case 2:
-                                milliseconds = fraction * 10;
-                                break;
-                            case 1:
-                                milliseconds = fraction * 100;
-                                break;
-                            default:
-                                milliseconds = fraction;
+                        offset++;
+                        int end = indexOfNonDigit(date, offset + 1);
+                        int fracEnd = Math.min(end, offset + 3);
+                        int frac = parseInt(date, offset, fracEnd);
+                        switch (fracEnd - offset) {
+                            case 2: milliseconds = frac * 10; break;
+                            case 1: milliseconds = frac * 100; break;
+                            default: milliseconds = frac;
                         }
-                            offset = endOffset;
+                        offset = end;
                     }
                 }
             }
         }
 
-            // extract timezone
+        // timezone
         if (date.length() <= offset) {
             throw new IllegalArgumentException("No time zone indicator");
         }
 
-            TimeZone timezone = null;
-            char timezoneIndicator = date.charAt(offset);
-
-            if (timezoneIndicator == 'Z') {
-                timezone = TIMEZONE_UTC;
-                offset += 1;
-            } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-                String timezoneOffset = date.substring(offset);
-
-                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
-
-                offset += timezoneOffset.length();
-                // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
-                if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
-                    timezone = TIMEZONE_UTC;
+        TimeZone tz;
+        char tzIndicator = date.charAt(offset);
+        if (tzIndicator == 'Z') {
+            tz = TIMEZONE_UTC;
+            offset++;
+        } else if (tzIndicator == '+' || tzIndicator == '-') {
+            // raw offset string
+            String rawOffset = date.substring(offset);
+            int rawLen = rawOffset.length();
+            offset += rawLen;
+            // normalize "+hh" to "+hh00"
+            String tzOffset = rawOffset;
+            if (rawOffset.length() == 3) { // e.g. "+01" or "-05"
+                tzOffset = rawOffset + "00";
+            }
+            // check for UTC
+            if ("+0000".equals(tzOffset) || "+00:00".equals(tzOffset)) {
+                tz = TIMEZONE_UTC;
             } else {
-                    // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
-                    //    not sure why, but that's the way it looks. Further, Javadocs for
-                    //    `java.util.TimeZone` specifically instruct use of GMT as base for
-                    //    custom timezones... odd.
-                    String timezoneId = "GMT" + timezoneOffset;
-//                    String timezoneId = "UTC" + timezoneOffset;
-
-                    timezone = TimeZone.getTimeZone(timezoneId);
-
-                    String act = timezone.getID();
-                    if (!act.equals(timezoneId)) {
-                        /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
-                         *    one without. If so, don't sweat.
-                         *   Yes, very inefficient. Hopefully not hit often.
-                         *   If it becomes a perf problem, add 'loose' comparison instead.
-                         */
-                        String cleaned = act.replace(":", "");
-                        if (!cleaned.equals(timezoneId)) {
-                            throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
-                                    +timezone.getID());
+                String tzId = "GMT" + tzOffset;
+                tz = TimeZone.getTimeZone(tzId);
+                String actual = tz.getID();
+                if (!actual.equals(tzId)) {
+                    String cleaned = actual.replace(":", "");
+                    if (!cleaned.equals(tzId)) {
+                        throw new IndexOutOfBoundsException(
+                            "Mismatching time zone indicator: " + tzId +
+                            " given, resolves to " + tz.getID());
                     }
                 }
             }
         } else {
-                throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
+            throw new IndexOutOfBoundsException(
+                "Invalid time zone indicator '" + tzIndicator + "'");
         }
 
-            Calendar calendar = new GregorianCalendar(timezone);
+        Calendar calendar = new GregorianCalendar(tz);
         calendar.setLenient(false);
         calendar.set(Calendar.YEAR, year);
         calendar.set(Calendar.MONTH, month - 1);
         calendar.set(Calendar.DAY_OF_MONTH, day);
         calendar.set(Calendar.HOUR_OF_DAY, hour);
         calendar.set(Calendar.MINUTE, minutes);
         calendar.set(Calendar.SECOND, seconds);
         calendar.set(Calendar.MILLISECOND, milliseconds);
 
         pos.setIndex(offset);
         return calendar.getTime();
-            // If we get a ParseException it'll already have the right message/offset.
-            // Other exception types can convert here.
-        } catch (IndexOutOfBoundsException e) {
-            fail = e;
-        } catch (NumberFormatException e) {
-            fail = e;
-        } catch (IllegalArgumentException e) {
+    } catch (IndexOutOfBoundsException | NumberFormatException | IllegalArgumentException e) {
         fail = e;
     }
-        String input = (date == null) ? null : ('"' + date + "'");
+    String input = (date == null) ? null : ('"' + date + '"');
     String msg = fail.getMessage();
     if (msg == null || msg.isEmpty()) {
         msg = "(" + fail.getClass().getName() + ")";
     }
-        ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
+    ParseException ex = new ParseException(
+        "Failed to parse date [" + input + "]: " + msg,
+        pos.getIndex()
+    );
     ex.initCause(fail);
     throw ex;
 }
\ No newline at end of file
