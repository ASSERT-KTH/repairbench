diff --git a/tmp/02904879-963f-47ba-a292-67bb42e501d7_buggy.java b/tmp/8439d50d-e584-4d6d-8db5-f80a25d91407_fixed.java
index be2af16..6562b83 100644
--- a/tmp/02904879-963f-47ba-a292-67bb42e501d7_buggy.java
+++ b/tmp/8439d50d-e584-4d6d-8db5-f80a25d91407_fixed.java
@@ -1,29 +1,39 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                      hourOfDay, minuteOfHour,
+                                      secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    long instant = 0;
+    boolean useJulian = false;
+    try {
+        // Try Gregorian first
+        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                                         hourOfDay, minuteOfHour,
+                                                         secondOfMinute, millisOfSecond);
+        // If it's before the cutover, switch to Julian
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            useJulian = true;
+        }
+    } catch (IllegalArgumentException e) {
+        // Invalid in Gregorian, try Julian
+        useJulian = true;
+    }
+
+    if (useJulian) {
+        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                                      hourOfDay, minuteOfHour,
+                                                      secondOfMinute, millisOfSecond);
+        // If that lands inside the cutover gap, it's invalid
         if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
     return instant;
 }
\ No newline at end of file
