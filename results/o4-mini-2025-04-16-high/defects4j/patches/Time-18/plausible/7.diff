diff --git a/tmp/91f905c0-776a-4615-ae47-1fe56e35a385_buggy.java b/tmp/2b470de5-ab85-41cb-868f-48c74ffbb706_fixed.java
index be2af16..50a83aa 100644
--- a/tmp/91f905c0-776a-4615-ae47-1fe56e35a385_buggy.java
+++ b/tmp/2b470de5-ab85-41cb-868f-48c74ffbb706_fixed.java
@@ -1,29 +1,43 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        return base.getDateTimeMillis(
+            year, monthOfYear, dayOfMonth,
             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // First try Gregorian.
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    try {
+        instant = iGregorianChronology.getDateTimeMillis(
+            year, monthOfYear, dayOfMonth,
             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    } catch (IllegalArgumentException e) {
+        // Not valid in Gregorian, maybe valid in Julian before the cutover.
+        long julianInstant = iJulianChronology.getDateTimeMillis(
+            year, monthOfYear, dayOfMonth,
+            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (julianInstant < iCutoverMillis) {
+            return julianInstant;
+        }
+        // It's invalid or after cutover in Julian too, rethrow original
+        throw e;
+    }
+
+    // If the Gregorian result is before the cutover, check Julian
     if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        long julianInstant = iJulianChronology.getDateTimeMillis(
+            year, monthOfYear, dayOfMonth,
             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+        if (julianInstant >= iCutoverMillis) {
+            // Falls into the illegal gap
             throw new IllegalArgumentException("Specified date does not exist");
         }
+        instant = julianInstant;
     }
     return instant;
 }
\ No newline at end of file
