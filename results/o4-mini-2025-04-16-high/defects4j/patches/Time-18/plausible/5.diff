diff --git a/tmp/22b435c6-6297-44c8-bbe8-d5a873b727aa_buggy.java b/tmp/dca05f75-109e-4416-ab36-3ff7fb8f96b2_fixed.java
index be2af16..e851873 100644
--- a/tmp/22b435c6-6297-44c8-bbe8-d5a873b727aa_buggy.java
+++ b/tmp/dca05f75-109e-4416-ab36-3ff7fb8f96b2_fixed.java
@@ -1,29 +1,46 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                      hourOfDay, minuteOfHour,
+                                      secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // Try Gregorian first
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    try {
+        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear,
+                                                         dayOfMonth,
+                                                         hourOfDay, minuteOfHour,
+                                                         secondOfMinute, millisOfSecond);
+    } catch (IllegalArgumentException ex) {
+        // If invalid in Gregorian, try Julian (only if before cutover)
+        long instantJulian = iJulianChronology.getDateTimeMillis(year, monthOfYear,
+                                                                 dayOfMonth,
+                                                                 hourOfDay, minuteOfHour,
+                                                                 secondOfMinute, millisOfSecond);
+        if (instantJulian >= iCutoverMillis) {
+            // It's in the cutover gap or after cutover, so illegal
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
+        return instantJulian;
+    }
+
+    // If the Gregorian instant is before cutover, switch to Julian
     if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+        long instantJulian = iJulianChronology.getDateTimeMillis(year, monthOfYear,
+                                                                 dayOfMonth,
+                                                                 hourOfDay, minuteOfHour,
+                                                                 secondOfMinute, millisOfSecond);
+        if (instantJulian >= iCutoverMillis) {
+            // Date falls into the illegal cutover gap
             throw new IllegalArgumentException("Specified date does not exist");
         }
+        instant = instantJulian;
     }
     return instant;
 }
\ No newline at end of file
