diff --git a/tmp/6e5e6a41-900c-4d41-994e-f6108a6cd11b_buggy.java b/tmp/b73ea438-5998-4814-9b75-efc88ab43998_fixed.java
index be2af16..e291de9 100644
--- a/tmp/6e5e6a41-900c-4d41-994e-f6108a6cd11b_buggy.java
+++ b/tmp/b73ea438-5998-4814-9b75-efc88ab43998_fixed.java
@@ -1,29 +1,31 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        return base.getDateTimeMillis(
+            year, monthOfYear, dayOfMonth,
             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    // First try Julian (pre‐cutover)
+    long instant = iJulianChronology.getDateTimeMillis(
+        year, monthOfYear, dayOfMonth,
         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        return instant;
+    }
+
+    // Then try Gregorian (post‐cutover)
+    instant = iGregorianChronology.getDateTimeMillis(
+        year, monthOfYear, dayOfMonth,
         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+        return instant;
+    }
+
+    // It falls in the cutover gap
     throw new IllegalArgumentException("Specified date does not exist");
 }
\ No newline at end of file
-        }
-        return instant;
-    }
