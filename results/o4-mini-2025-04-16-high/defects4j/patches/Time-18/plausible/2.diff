diff --git a/tmp/6d2fa361-f1f0-42d1-bbed-e3da406e9c8f_buggy.java b/tmp/1a840602-e86b-49c0-aba1-0c11c9ab0cea_fixed.java
index be2af16..04e76bf 100644
--- a/tmp/6d2fa361-f1f0-42d1-bbed-e3da406e9c8f_buggy.java
+++ b/tmp/1a840602-e86b-49c0-aba1-0c11c9ab0cea_fixed.java
@@ -1,29 +1,45 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                      hourOfDay, minuteOfHour,
+                                      secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    try {
+        // Try Gregorian first
+        instant = iGregorianChronology.getDateTimeMillis(
+            year, monthOfYear, dayOfMonth,
             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    } catch (org.joda.time.IllegalFieldValueException ifve) {
+        // If Gregorian rejects the date, it may be valid in Julian
+        instant = iJulianChronology.getDateTimeMillis(
+            year, monthOfYear, dayOfMonth,
             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            // Falls into the cutover gap
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
+        return instant;
+    }
+
+    if (instant < iCutoverMillis) {
+        // Before cutover according to Gregorian, so try Julian
+        long julianInstant = iJulianChronology.getDateTimeMillis(
+            year, monthOfYear, dayOfMonth,
+            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (julianInstant < iCutoverMillis) {
+            instant = julianInstant;
+        } else {
+            // In the illegal cutover gap
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
+
     return instant;
 }
\ No newline at end of file
