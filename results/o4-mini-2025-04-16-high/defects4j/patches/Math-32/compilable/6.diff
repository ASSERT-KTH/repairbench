diff --git a/tmp/d9bdb1a3-81ef-4e94-88c3-d0f53c3796c1_buggy.java b/tmp/ed9f93fd-6391-49ab-b8df-6ac0d7b337cf_fixed.java
index c53ca2a..e1ed3be 100644
--- a/tmp/d9bdb1a3-81ef-4e94-88c3-d0f53c3796c1_buggy.java
+++ b/tmp/ed9f93fd-6391-49ab-b8df-6ac0d7b337cf_fixed.java
@@ -1,54 +1,63 @@
 /** {@inheritDoc} */
 @Override
 protected void computeGeometricalProperties() {
 
     final Vector2D[][] v = getVertices();
 
     if (v.length == 0) {
+        // no finite loops: region is either empty or the whole plane
         final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
+        Object attr = tree.getAttribute();
+        if (attr instanceof Boolean) {
+            if ((Boolean) attr) {
                 // the instance covers the whole space
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
+                // the instance is empty
                 setSize(0);
                 setBarycenter(new Vector2D(0, 0));
             }
+        } else {
+            // boundary attributes present but no loops found â‡’ infinite region
+            setSize(Double.POSITIVE_INFINITY);
+            setBarycenter(Vector2D.NaN);
+        }
+
     } else if (v[0][0] == null) {
         // there is at least one open-loop: the polygon is infinite
         setSize(Double.POSITIVE_INFINITY);
         setBarycenter(Vector2D.NaN);
-        } else {
-            // all loops are closed, we compute some integrals around the shape
 
+    } else {
+        // all loops are closed, we compute the usual area / centroid integrals
         double sum  = 0;
         double sumX = 0;
         double sumY = 0;
 
         for (Vector2D[] loop : v) {
             double x1 = loop[loop.length - 1].getX();
             double y1 = loop[loop.length - 1].getY();
             for (final Vector2D point : loop) {
                 final double x0 = x1;
                 final double y0 = y1;
                 x1 = point.getX();
                 y1 = point.getY();
                 final double factor = x0 * y1 - y0 * x1;
                 sum  += factor;
                 sumX += factor * (x0 + x1);
                 sumY += factor * (y0 + y1);
             }
         }
 
         if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+            // the polygon has a finite outside surrounded by an infinite inside
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             setSize(sum / 2);
-                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
+            setBarycenter(new Vector2D(sumX / (3 * sum),
+                                       sumY / (3 * sum)));
         }
-
     }
-
 }
\ No newline at end of file
