diff --git a/tmp/7baa2ef2-b23c-4844-860d-d4757f4bcbfb_buggy.java b/tmp/edb80ede-f971-4201-b581-96814cc5233b_fixed.java
index c53ca2a..9958237 100644
--- a/tmp/7baa2ef2-b23c-4844-860d-d4757f4bcbfb_buggy.java
+++ b/tmp/edb80ede-f971-4201-b581-96814cc5233b_fixed.java
@@ -1,54 +1,63 @@
 /** {@inheritDoc} */
 @Override
 protected void computeGeometricalProperties() {
 
     final Vector2D[][] v = getVertices();
 
     if (v.length == 0) {
+        // no loops: region is either the whole plane or empty
         final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
+        Object attr = tree.getAttribute();
+        boolean inside;
+        if (attr instanceof Boolean) {
+            inside = (Boolean) attr;
+        } else {
+            // we got a BoundaryAttribute here, not a Boolean leaf:
+            // that means there are boundaries but no closed loops – treat as infinite
+            inside = true;
+        }
+        if (inside) {
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             setSize(0);
             setBarycenter(new Vector2D(0, 0));
         }
+
     } else if (v[0][0] == null) {
-            // there is at least one open-loop: the polygon is infinite
+        // there is at least one open‐loop: the polygon is infinite
         setSize(Double.POSITIVE_INFINITY);
         setBarycenter(Vector2D.NaN);
-        } else {
-            // all loops are closed, we compute some integrals around the shape
 
+    } else {
+        // all loops are closed, compute area and centroid via Green’s theorem
         double sum  = 0;
         double sumX = 0;
         double sumY = 0;
 
         for (Vector2D[] loop : v) {
             double x1 = loop[loop.length - 1].getX();
             double y1 = loop[loop.length - 1].getY();
-                for (final Vector2D point : loop) {
-                    final double x0 = x1;
-                    final double y0 = y1;
-                    x1 = point.getX();
-                    y1 = point.getY();
-                    final double factor = x0 * y1 - y0 * x1;
-                    sum  += factor;
-                    sumX += factor * (x0 + x1);
-                    sumY += factor * (y0 + y1);
+            for (final Vector2D p : loop) {
+                double x0 = x1;
+                double y0 = y1;
+                x1 = p.getX();
+                y1 = p.getY();
+                double f = x0 * y1 - y0 * x1;
+                sum  += f;
+                sumX += f * (x0 + x1);
+                sumY += f * (y0 + y1);
             }
         }
 
         if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+            // finite outside, infinite inside
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             setSize(sum / 2);
-                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
+            setBarycenter(new Vector2D(sumX / (3 * sum),
+                                        sumY / (3 * sum)));
         }
-
     }
-
 }
\ No newline at end of file
