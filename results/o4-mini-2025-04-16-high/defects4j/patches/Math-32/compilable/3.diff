diff --git a/tmp/2a9cafd4-4104-476e-a1a2-d0c81cd3e5eb_buggy.java b/tmp/4e2a03a6-82ae-4eb2-9a4c-0272f92d3034_fixed.java
index c53ca2a..50fa612 100644
--- a/tmp/2a9cafd4-4104-476e-a1a2-d0c81cd3e5eb_buggy.java
+++ b/tmp/4e2a03a6-82ae-4eb2-9a4c-0272f92d3034_fixed.java
@@ -1,54 +1,59 @@
 /** {@inheritDoc} */
 @Override
 protected void computeGeometricalProperties() {
 
     final Vector2D[][] v = getVertices();
 
     if (v.length == 0) {
+        // no boundary loops → region is either empty or the whole space
         final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
+        // only if the tree is a leaf is its attribute a Boolean
+        if (tree.getCut() == null) {
+            Boolean inside = (Boolean) tree.getAttribute();
+            if (inside) {
                 // the instance covers the whole space
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
                 setSize(0);
                 setBarycenter(new Vector2D(0, 0));
             }
+        } else {
+            // it has cuts but produced no loops → it is unbounded
+            setSize(Double.POSITIVE_INFINITY);
+            setBarycenter(Vector2D.NaN);
+        }
     } else if (v[0][0] == null) {
-            // there is at least one open-loop: the polygon is infinite
+        // there is at least one open‐loop: the polygon is infinite
         setSize(Double.POSITIVE_INFINITY);
         setBarycenter(Vector2D.NaN);
     } else {
-            // all loops are closed, we compute some integrals around the shape
-
+        // all loops are closed, compute area and barycenter via Green’s theorem
         double sum  = 0;
         double sumX = 0;
         double sumY = 0;
-
         for (Vector2D[] loop : v) {
             double x1 = loop[loop.length - 1].getX();
             double y1 = loop[loop.length - 1].getY();
-                for (final Vector2D point : loop) {
-                    final double x0 = x1;
-                    final double y0 = y1;
-                    x1 = point.getX();
-                    y1 = point.getY();
-                    final double factor = x0 * y1 - y0 * x1;
+            for (Vector2D p : loop) {
+                double x0 = x1;
+                double y0 = y1;
+                x1 = p.getX();
+                y1 = p.getY();
+                double factor = x0 * y1 - y0 * x1;
                 sum  += factor;
                 sumX += factor * (x0 + x1);
                 sumY += factor * (y0 + y1);
             }
         }
-
         if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+            // finite outside region surrounded by infinite inside
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             setSize(sum / 2);
             setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
         }
-
     }
 
 }
\ No newline at end of file
