diff --git a/tmp/5b029545-730c-4d98-a4bf-d72ce0502704_buggy.java b/tmp/e24c5ad7-fb34-40de-90b7-c50592d49467_fixed.java
index c53ca2a..de77a64 100644
--- a/tmp/5b029545-730c-4d98-a4bf-d72ce0502704_buggy.java
+++ b/tmp/e24c5ad7-fb34-40de-90b7-c50592d49467_fixed.java
@@ -1,54 +1,62 @@
 /** {@inheritDoc} */
 @Override
 protected void computeGeometricalProperties() {
 
     final Vector2D[][] v = getVertices();
 
     if (v.length == 0) {
+        // no vertex loops: region is either a uniform leaf (full or empty),
+        // or has boundaries but no finite loops (infinite)
         final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
+        if (tree.getCut() == null) {
+            // uniform leaf: attribute is Boolean
+            Object attr = tree.getAttribute();
+            if (attr instanceof Boolean && (Boolean) attr) {
+                // covers the whole space
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
+                // empty region
                 setSize(0);
                 setBarycenter(new Vector2D(0, 0));
             }
+        } else {
+            // boundaries exist but yielded no closed loops ⇒ infinite region
+            setSize(Double.POSITIVE_INFINITY);
+            setBarycenter(Vector2D.NaN);
+        }
     } else if (v[0][0] == null) {
-            // there is at least one open-loop: the polygon is infinite
+        // at least one open-loop ⇒ infinite region
         setSize(Double.POSITIVE_INFINITY);
         setBarycenter(Vector2D.NaN);
     } else {
-            // all loops are closed, we compute some integrals around the shape
-
+        // all loops are closed ⇒ compute area and centroid by Green's theorem
         double sum  = 0;
         double sumX = 0;
         double sumY = 0;
 
         for (Vector2D[] loop : v) {
             double x1 = loop[loop.length - 1].getX();
             double y1 = loop[loop.length - 1].getY();
             for (final Vector2D point : loop) {
                 final double x0 = x1;
                 final double y0 = y1;
                 x1 = point.getX();
                 y1 = point.getY();
                 final double factor = x0 * y1 - y0 * x1;
                 sum  += factor;
                 sumX += factor * (x0 + x1);
                 sumY += factor * (y0 + y1);
             }
         }
 
         if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+            // finite outside surrounded by infinite inside ⇒ treat as infinite
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             setSize(sum / 2);
             setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
         }
-
     }
-
 }
\ No newline at end of file
