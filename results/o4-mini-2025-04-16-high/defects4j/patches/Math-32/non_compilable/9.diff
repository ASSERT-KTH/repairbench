diff --git a/tmp/e614900b-5d30-497e-ac37-0d34c58bcb8b_buggy.java b/tmp/9784b493-7af9-4648-bae3-1db57f503686_fixed.java
index c53ca2a..fca4173 100644
--- a/tmp/e614900b-5d30-497e-ac37-0d34c58bcb8b_buggy.java
+++ b/tmp/9784b493-7af9-4648-bae3-1db57f503686_fixed.java
@@ -1,54 +1,55 @@
 /** {@inheritDoc} */
 @Override
 protected void computeGeometricalProperties() {
 
     final Vector2D[][] v = getVertices();
 
     if (v.length == 0) {
-            final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
+        // no boundary loops → either empty or full plane
+        if (isFull()) {
+            // covers the whole space
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
+            // empty
             setSize(0);
             setBarycenter(new Vector2D(0, 0));
         }
     } else if (v[0][0] == null) {
-            // there is at least one open-loop: the polygon is infinite
+        // at least one open‐loop → infinite
         setSize(Double.POSITIVE_INFINITY);
         setBarycenter(Vector2D.NaN);
     } else {
-            // all loops are closed, we compute some integrals around the shape
-
+        // all loops are closed → compute the usual area integrals
         double sum  = 0;
         double sumX = 0;
         double sumY = 0;
 
         for (Vector2D[] loop : v) {
             double x1 = loop[loop.length - 1].getX();
             double y1 = loop[loop.length - 1].getY();
             for (final Vector2D point : loop) {
                 final double x0 = x1;
                 final double y0 = y1;
                 x1 = point.getX();
                 y1 = point.getY();
                 final double factor = x0 * y1 - y0 * x1;
                 sum  += factor;
                 sumX += factor * (x0 + x1);
                 sumY += factor * (y0 + y1);
             }
         }
 
         if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+            // finite outside, infinite inside
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
+            // finite polygon
             setSize(sum / 2);
-                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
+            setBarycenter(new Vector2D(sumX / (3 * sum),
+                                       sumY / (3 * sum)));
         }
-
     }
 
 }
\ No newline at end of file
