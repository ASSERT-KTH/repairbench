diff --git a/tmp/088884c1-8b5e-41fb-80ec-fe699c6826ed_buggy.java b/tmp/83c65c32-1767-4040-9138-a4e5bcc147f7_fixed.java
index 8dfbd84..92eda67 100644
--- a/tmp/088884c1-8b5e-41fb-80ec-fe699c6826ed_buggy.java
+++ b/tmp/83c65c32-1767-4040-9138-a4e5bcc147f7_fixed.java
@@ -1,43 +1,42 @@
 private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
 {
     _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
     char[] outBuf = _textBuffer.getCurrentSegment();
     int outPtr = _textBuffer.getCurrentSegmentSize();
     final int maxCode = codes.length;
 
     while (true) {
         if (_inputPtr >= _inputEnd) {
             if (!_loadMore()) { // acceptable for now (will error out later)
                 break;
             }
         }
         char c = _inputBuffer[_inputPtr];
         int i = (int) c;
-            if (i <= maxCode) {
+        if (i < maxCode) {
             if (codes[i] != 0) {
                 break;
             }
         } else if (!Character.isJavaIdentifierPart(c)) {
             break;
+        } else {
+            // reject non-ASCII identifier parts in unquoted names
+            _reportError("Invalid character (" + _getCharDesc(i) + ") in unquoted name");
         }
         ++_inputPtr;
         hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
-            // Ok, let's add char to output:
         outBuf[outPtr++] = c;
 
-            // Need more room?
         if (outPtr >= outBuf.length) {
             outBuf = _textBuffer.finishCurrentSegment();
             outPtr = 0;
         }
     }
     _textBuffer.setCurrentLength(outPtr);
-        {
+
     TextBuffer tb = _textBuffer;
     char[] buf = tb.getTextBuffer();
     int start = tb.getTextOffset();
     int len = tb.size();
-
     return _symbols.findSymbol(buf, start, len, hash);
 }
\ No newline at end of file
-    }
