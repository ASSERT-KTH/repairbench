diff --git a/tmp/1c6b08da-126c-4521-bef6-1dcae300e5f9_buggy.java b/tmp/142d1a01-fad9-4326-9789-c51b244eec9b_fixed.java
index 8dfbd84..3a1965c 100644
--- a/tmp/1c6b08da-126c-4521-bef6-1dcae300e5f9_buggy.java
+++ b/tmp/142d1a01-fad9-4326-9789-c51b244eec9b_fixed.java
@@ -1,43 +1,37 @@
 private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
 {
     _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
     char[] outBuf = _textBuffer.getCurrentSegment();
     int outPtr = _textBuffer.getCurrentSegmentSize();
-        final int maxCode = codes.length;
+    // codes.length is the array size; highest valid index is length-1
+    final int maxCode = codes.length - 1;
 
     while (true) {
         if (_inputPtr >= _inputEnd) {
-                if (!_loadMore()) { // acceptable for now (will error out later)
+            if (!_loadMore()) { // no more input, exit loop
                 break;
             }
         }
         char c = _inputBuffer[_inputPtr];
         int i = (int) c;
         if (i <= maxCode) {
             if (codes[i] != 0) {
                 break;
             }
         } else if (!Character.isJavaIdentifierPart(c)) {
             break;
         }
         ++_inputPtr;
         hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
-            // Ok, let's add char to output:
+        // append character
         outBuf[outPtr++] = c;
-
-            // Need more room?
         if (outPtr >= outBuf.length) {
             outBuf = _textBuffer.finishCurrentSegment();
             outPtr = 0;
         }
     }
+
     _textBuffer.setCurrentLength(outPtr);
-        {
     TextBuffer tb = _textBuffer;
-            char[] buf = tb.getTextBuffer();
-            int start = tb.getTextOffset();
-            int len = tb.size();
-
-            return _symbols.findSymbol(buf, start, len, hash);
-        }
+    return _symbols.findSymbol(tb.getTextBuffer(), tb.getTextOffset(), tb.size(), hash);
 }
\ No newline at end of file
