diff --git a/tmp/142147d1-12fa-4166-9707-9cdce0ddeefc_buggy.java b/tmp/983a862e-9e82-483b-8d12-34b100803a0f_fixed.java
index 8dfbd84..b069bf0 100644
--- a/tmp/142147d1-12fa-4166-9707-9cdce0ddeefc_buggy.java
+++ b/tmp/983a862e-9e82-483b-8d12-34b100803a0f_fixed.java
@@ -1,43 +1,43 @@
 private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
 {
     _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
     char[] outBuf = _textBuffer.getCurrentSegment();
     int outPtr = _textBuffer.getCurrentSegmentSize();
     final int maxCode = codes.length;
 
     while (true) {
         if (_inputPtr >= _inputEnd) {
             if (!_loadMore()) { // acceptable for now (will error out later)
                 break;
             }
         }
         char c = _inputBuffer[_inputPtr];
         int i = (int) c;
-            if (i <= maxCode) {
+        // first, if outside our codes table, it's invalid in an unquoted name:
+        if (i >= maxCode) {
+            _reportError("Invalid unquoted character '" + c + "' (code " + i + ") in name");
+        }
+        // if this code signals a break (whitespace, delimiter, etc.), stop the name
         if (codes[i] != 0) {
             break;
         }
-            } else if (!Character.isJavaIdentifierPart(c)) {
-                break;
-            }
+        // otherwise absorb it as part of the name
         ++_inputPtr;
         hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
-            // Ok, let's add char to output:
         outBuf[outPtr++] = c;
 
-            // Need more room?
+        // expand output buffer if needed
         if (outPtr >= outBuf.length) {
             outBuf = _textBuffer.finishCurrentSegment();
             outPtr = 0;
         }
     }
     _textBuffer.setCurrentLength(outPtr);
-        {
+
+    // finalize and look up the name
     TextBuffer tb = _textBuffer;
     char[] buf = tb.getTextBuffer();
     int start = tb.getTextOffset();
     int len = tb.size();
-
     return _symbols.findSymbol(buf, start, len, hash);
 }
\ No newline at end of file
-    }
