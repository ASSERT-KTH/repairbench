diff --git a/tmp/9aea30aa-3ba8-423b-8c68-4859695d253a_buggy.java b/tmp/3481d787-9241-44d4-a0df-ef0a74c565b8_fixed.java
index 61ffdbf..8dd0538 100644
--- a/tmp/9aea30aa-3ba8-423b-8c68-4859695d253a_buggy.java
+++ b/tmp/3481d787-9241-44d4-a0df-ef0a74c565b8_fixed.java
@@ -1,44 +1,27 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
   // Notice that removing unreferenced function args breaks
   // Function.prototype.length. In advanced mode, we don't really care
   // about this: we consider "length" the equivalent of reflecting on
   // the function's lexical source.
   //
   // Rather than create a new option for this, we assume that if the user
   // is removing globals, then it's OK to remove unused function args.
   //
   // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
   Node function = fnScope.getRootNode();
-
   Preconditions.checkState(function.isFunction());
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
     // The parameters object literal setters can not be removed.
     return;
   }
 
-    Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
-      Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
-          compiler.reportCodeChange();
-        } else {
-          break;
+  // Only strip or rewrite arguments in advanced mode, when we
+  // are allowed to modify callers.  In simple or default modes
+  // we must keep the original parameter list intact.
+  if (!modifyCallSites || !callSiteOptimizer.canModifyCallers(function)) {
+    return;
   }
-      }
-    } else {
+
   callSiteOptimizer.optimize(fnScope, referenced);
 }
\ No newline at end of file
-  }
