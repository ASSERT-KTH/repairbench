diff --git a/tmp/09fe4b34-8460-48ad-b9c7-0bb2477a4767_buggy.java b/tmp/385a2545-705a-44bd-b461-0474eb9879e1_fixed.java
index 61ffdbf..b3a1b7c 100644
--- a/tmp/09fe4b34-8460-48ad-b9c7-0bb2477a4767_buggy.java
+++ b/tmp/385a2545-705a-44bd-b461-0474eb9879e1_fixed.java
@@ -1,44 +1,41 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
+      // We never strip params from getters/setters.
+      return;
+    }
+
+    // Only strip unused function parameters in advanced mode (when
+    // modifyCallSites==true).  In SIMPLE or WHITESPACE_ONLY modes
+    // we leave the signature alone to preserve Function.prototype.length
+    // and other reflective behaviors.
+    if (!modifyCallSites) {
       return;
     }
 
     Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
+    boolean modifyCallers = callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
+      // Advanced mode + safe to change callers: remove _and_ update call sites.
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
