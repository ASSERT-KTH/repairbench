diff --git a/tmp/e923436e-fa67-405b-8bc5-c5f4745f33c6_buggy.java b/tmp/8e59f970-ba47-4da1-adc2-b89fe0abb091_fixed.java
index 61ffdbf..4454dc0 100644
--- a/tmp/e923436e-fa67-405b-8bc5-c5f4745f33c6_buggy.java
+++ b/tmp/8e59f970-ba47-4da1-adc2-b89fe0abb091_fixed.java
@@ -1,44 +1,46 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
   Node function = fnScope.getRootNode();
-
   Preconditions.checkState(function.isFunction());
+
+  // Don't touch getters/setters in object literals.
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
+    return;
+  }
+
+  // If we're not removing globals, don't remove function parameters.
+  if (!removeGlobal) {
     return;
   }
 
   Node argList = getFunctionArgList(function);
   boolean modifyCallers = modifyCallSites
       && callSiteOptimizer.canModifyCallers(function);
+
   if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
+    // Skip functions assigned to properties (e.g., window.f = function(...) {...})
+    Node parent = function.getParent();
+    if (parent.isAssign() && parent.getFirstChild().isGetProp()) {
+      return;
+    }
+    // Strip unreferenced args off the end of the function's parameter list.
     Node lastArg;
     while ((lastArg = argList.getLastChild()) != null) {
       Var var = fnScope.getVar(lastArg.getString());
       if (!referenced.contains(var)) {
         argList.removeChild(lastArg);
         compiler.reportCodeChange();
       } else {
         break;
       }
     }
   } else {
+    // When we can modify callers, use the call-site optimizer.
     callSiteOptimizer.optimize(fnScope, referenced);
   }
 }
\ No newline at end of file
