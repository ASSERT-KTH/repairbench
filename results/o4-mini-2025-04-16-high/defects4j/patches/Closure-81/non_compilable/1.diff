diff --git a/tmp/5b10a683-ce0b-41fa-b77b-c1f65fa97b95_buggy.java b/tmp/c9924f8d-610f-48bc-9fc2-2353aa81fd7c_fixed.java
index 6e05e4b..3a3b421 100644
--- a/tmp/5b10a683-ce0b-41fa-b77b-c1f65fa97b95_buggy.java
+++ b/tmp/c9924f8d-610f-48bc-9fc2-2353aa81fd7c_fixed.java
@@ -1,51 +1,56 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
+  // Get the original function name (may be null for unnamed functions)
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+  boolean isUnnamedFunction = (name == null);
+
+  // ES5 disallows unnamed function *statements*, but allows unnamed function *expressions*.
+  if (isUnnamedFunction
+      && functionNode.getFunctionType() == FunctionNode.FUNCTION_STATEMENT) {
+    // Report a parse error on "function() {};" in statement position.
+    // (reportError is a helper in this class that pushes the error
+    //   into the shared ErrorReporter / JSError list.)
+    reportError(functionNode, "unnamed function statement");
+  }
+
+  // If there was no name, synthesize an empty one (so the IR stays well‚Äêformed).
   if (name == null) {
     name = new Name();
     name.setIdentifier("");
-        isUnnamedFunction = true;
   }
-      Node node = newNode(Token.FUNCTION);
+
+  // Build the FUNCTION node
+  Node fn = newNode(Token.FUNCTION);
+
+  // Transform the name into an IR NAME node
   Node newName = transform(name);
   if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
+    // Rhino used to tag the empty name with the decl line/col.
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
+  fn.addChildToBack(newName);
 
-      node.addChildToBack(newName);
+  // Build the parameter list "(" ... ")"
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
   Name fnName = functionNode.getFunctionName();
   if (fnName != null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+  int lparenCharno = functionNode.getAbsolutePosition() + functionNode.getLp();
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
-      node.addChildToBack(lp);
+  fn.addChildToBack(lp);
 
+  // Transform the function body
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
-      node.addChildToBack(bodyNode);
-     return node;
+  fn.addChildToBack(bodyNode);
+
+  return fn;
 }
\ No newline at end of file
