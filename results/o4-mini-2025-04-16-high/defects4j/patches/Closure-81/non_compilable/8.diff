diff --git a/tmp/bc80f228-51cb-40c2-975b-0bc2841b6c8f_buggy.java b/tmp/dc1a1689-1730-4ac1-a2bb-f8d884a5f0a5_fixed.java
index 6e05e4b..9344e9c 100644
--- a/tmp/bc80f228-51cb-40c2-975b-0bc2841b6c8f_buggy.java
+++ b/tmp/dc1a1689-1730-4ac1-a2bb-f8d884a5f0a5_fixed.java
@@ -1,51 +1,61 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+  boolean isUnnamedFunction = false;
+
+  // Unnamed "function" *statements* are illegal in ES5;
+  // only unnamed function *expressions* are allowed.
+  if (name == null && !functionNode.isExpressionClosure()) {
+    // Report a parse error and abort conversion.
+    // We throw here so that Parser.parse() will record this
+    // as a parse error "unnamed function statement".
+    throw new ParserException(
+        "unnamed function statement",
+        functionNode.getLineno(),
+        position2charno(functionNode.getAbsolutePosition() + functionNode.getLp()));
+  }
+
+  // For unnamed expressions we still create a dummy name so that
+  // our AST‐to‐IR converter has something to hang on to.
   if (name == null) {
     name = new Name();
     name.setIdentifier("");
     isUnnamedFunction = true;
   }
+
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
+
   if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
+    // Rhino tags the empty name node with the declaration line.
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
-        newName.setCharno(position2charno(lpColumn));
+    // TODO: record the '(' line/column properly.
+    int lpOffset = functionNode.getAbsolutePosition() + functionNode.getLp();
+    newName.setCharno(position2charno(lpOffset));
   }
 
   node.addChildToBack(newName);
+
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
+  // The left‐paren must appear on the same line as the function name
+  // (or keyword, if anonymous), otherwise ASI would fire.
   Name fnName = functionNode.getFunctionName();
   if (fnName != null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
+  int lparenOffset = functionNode.getAbsolutePosition() + functionNode.getLp();
+  lp.setCharno(position2charno(lparenOffset));
 
-      lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
+
   return node;
 }
\ No newline at end of file
