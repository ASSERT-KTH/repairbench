diff --git a/tmp/6911651d-24d9-4bcd-8d5e-f0a3dc42e3d9_buggy.java b/tmp/4e0ce855-149d-4568-965e-70290b25db33_fixed.java
index 6e05e4b..b07271e 100644
--- a/tmp/6911651d-24d9-4bcd-8d5e-f0a3dc42e3d9_buggy.java
+++ b/tmp/4e0ce855-149d-4568-965e-70290b25db33_fixed.java
@@ -1,51 +1,52 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
   Boolean isUnnamedFunction = false;
+
+  // Disallow anonymous functions in statement position.
   if (name == null) {
+    if (!functionNode.isExpression()) {
+      // Report a parse‚Äêerror: "unnamed function statement"
+      report(functionNode, "unnamed function statement");
+    }
+    // Synthesize an empty name for anonymous functions
     name = new Name();
     name.setIdentifier("");
     isUnnamedFunction = true;
   }
+
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
+
   if (isUnnamedFunction) {
     // Old Rhino tagged the empty name node with the line number of the
     // declaration.
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+    // TODO mark line number of paren correctly.
+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
-
   node.addChildToBack(newName);
+
+  // Build the parameter list
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
   Name fnName = functionNode.getFunctionName();
   if (fnName != null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+  int lparenCharno = functionNode.getAbsolutePosition() + functionNode.getLp();
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
+  // Build the function body
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
+
   return node;
 }
\ No newline at end of file
