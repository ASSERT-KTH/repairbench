diff --git a/tmp/98c694c1-9eaf-4d05-8896-7564790ce239_buggy.java b/tmp/b654050b-8875-4496-bcf9-c64291170016_fixed.java
index 6cfa79b..d4e3906 100644
--- a/tmp/98c694c1-9eaf-4d05-8896-7564790ce239_buggy.java
+++ b/tmp/b654050b-8875-4496-bcf9-c64291170016_fixed.java
@@ -1,12 +1,35 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X < x).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at x.
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double dev = x - mean;
+    double sd = standardDeviation;
+    double u  = dev / sd;
+
+    // top‚Äêcoding for extreme values
+    if (u <= -20.0) {
+        return 0.0;
+    }
+    if (u >=  20.0) {
+        return 1.0;
+    }
+
+    try {
+        return 0.5 * (1.0 + Erf.erf(u / Math.sqrt(2.0)));
+    } catch (MathException ex) {
+        // if still fails to converge for extreme u, return the tail
+        if (u <= -20.0) {
+            return 0.0;
+        }
+        if (u >=  20.0) {
+            return 1.0;
+        }
+        // otherwise propagate
+        throw ex;
+    }
 }
\ No newline at end of file
