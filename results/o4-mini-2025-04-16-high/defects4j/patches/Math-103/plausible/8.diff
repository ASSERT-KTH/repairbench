diff --git a/tmp/25142014-ff4e-444c-880e-16621b81e6ff_buggy.java b/tmp/c9c531d8-9a08-41aa-8e6b-b399e4f94960_fixed.java
index 6cfa79b..09d341c 100644
--- a/tmp/25142014-ff4e-444c-880e-16621b81e6ff_buggy.java
+++ b/tmp/c9c531d8-9a08-41aa-8e6b-b399e4f94960_fixed.java
@@ -1,12 +1,23 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X < <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
-     * x is more than 20 standard deviations from the mean, in which case the
-     * convergence exception is caught and 0 or 1 is returned.
+ * an extreme tail is detected, in which case 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double dev = (x - mean) / standardDeviation;
+    // if we're far out in the tails, just return 0 or 1
+    if (dev < -20.0) {
+        return 0.0;
+    }
+    if (dev > 20.0) {
+        return 1.0;
+    }
+    try {
+        return 0.5 * (1.0 + Erf.erf(dev / Math.sqrt(2.0)));
+    } catch (MathException ex) {
+        // on convergence failure assume tail
+        return (dev < 0) ? 0.0 : 1.0;
+    }
 }
\ No newline at end of file
