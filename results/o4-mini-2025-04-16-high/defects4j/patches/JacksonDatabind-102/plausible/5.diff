diff --git a/tmp/280fd7b3-2e7d-4f71-ba50-950668a27014_buggy.java b/tmp/137e3369-c1a9-4856-b0e7-124f3fbe572b_fixed.java
index 1b07d98..9fdb1cf 100644
--- a/tmp/280fd7b3-2e7d-4f71-ba50-950668a27014_buggy.java
+++ b/tmp/137e3369-c1a9-4856-b0e7-124f3fbe572b_fixed.java
@@ -1,76 +1,67 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
-        // Note! Should not skip if `property` null since that'd skip check
-        // for config overrides, in case of root value
-        if (property == null) {
-            return this;
-        }
+    // Do not skip when property is null: we still want to apply global config overrides
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+    // Custom pattern overrides everything
     if (format.hasPattern()) {
         final Locale loc = format.hasLocale()
                 ? format.getLocale()
                 : serializers.getLocale();
         SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
-            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
+        TimeZone tz = format.hasTimeZone()
+                ? format.getTimeZone()
                 : serializers.getTimeZone();
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
 
-        // Otherwise, need one of these changes:
+    // Otherwise, check locale, timezone, or shape=STRING
     final boolean hasLocale = format.hasLocale();
     final boolean hasTZ = format.hasTimeZone();
     final boolean asString = (shape == JsonFormat.Shape.STRING);
-
     if (!hasLocale && !hasTZ && !asString) {
         return this;
     }
 
     DateFormat df0 = serializers.getConfig().getDateFormat();
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
+    // Jackson's own StdDateFormat can be reconfigured
     if (df0 instanceof StdDateFormat) {
         StdDateFormat std = (StdDateFormat) df0;
-            if (format.hasLocale()) {
+        if (hasLocale) {
             std = std.withLocale(format.getLocale());
         }
-            if (format.hasTimeZone()) {
+        if (hasTZ) {
             std = std.withTimeZone(format.getTimeZone());
         }
         return withFormat(Boolean.FALSE, std);
     }
 
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
+    // Otherwise must be a SimpleDateFormat to adjust
     if (!(df0 instanceof SimpleDateFormat)) {
         serializers.reportBadDefinition(handledType(), String.format(
             "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
             df0.getClass().getName()));
     }
     SimpleDateFormat df = (SimpleDateFormat) df0;
     if (hasLocale) {
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
         df = new SimpleDateFormat(df.toPattern(), format.getLocale());
     } else {
         df = (SimpleDateFormat) df.clone();
     }
     TimeZone newTz = format.getTimeZone();
-        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
-        if (changeTZ) {
+    if (newTz != null && !newTz.equals(df.getTimeZone())) {
         df.setTimeZone(newTz);
     }
     return withFormat(Boolean.FALSE, df);
 }
\ No newline at end of file
