diff --git a/tmp/e1c4ec47-1d70-4100-8190-8da8afb5b303_buggy.java b/tmp/2372bd0e-3f5b-460d-b291-387a0d360cba_fixed.java
index 8b2f10f..c7e961b 100644
--- a/tmp/e1c4ec47-1d70-4100-8190-8da8afb5b303_buggy.java
+++ b/tmp/2372bd0e-3f5b-460d-b291-387a0d360cba_fixed.java
@@ -1,67 +1,64 @@
-  /**
-   * Updates the scope according to the result of a type change, like
-   * an assignment or a type cast.
-   */
 private void updateScopeForTypeChange(
     FlowScope scope, Node left, JSType leftType, JSType resultType) {
   Preconditions.checkNotNull(resultType);
   switch (left.getType()) {
     case Token.NAME:
       String varName = left.getString();
       Var var = syntacticScope.getVar(varName);
       boolean isVarDeclaration = left.hasChildren();
 
       // When looking at VAR initializers for declared VARs, we tend
       // to use the declared type over the type it's being
       // initialized to in the global scope.
       //
       // For example,
       // /** @param {number} */ var f = goog.abstractMethod;
       // it's obvious that the programmer wants you to use
       // the declared function signature, not the inferred signature.
       //
       // Or,
       // /** @type {Object.<string>} */ var x = {};
       // the one-time anonymous object on the right side
       // is as narrow as it can possibly be, but we need to make
       // sure we back-infer the <string> element constraint on
       // the left hand side, so we use the left hand side.
-
-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
-            // Makes it easier to check for NPEs.
-
-        // TODO(nicksantos): This might be a better check once we have
-        // back-inference of object/array constraints.  It will probably
-        // introduce more type warnings.  It uses the result type iff it's
-        // strictly narrower than the declared var type.
       //
-        //boolean isVarTypeBetter = isVarDeclaration &&
-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
-        //     || !resultType.isSubtype(varType));
-
+      // However, if the initializer is `null` (or `undefined`),
+      // we do want to use that initializer type so subsequent
+      // property accesses get the correct warning.
+      boolean isVarTypeBetter =
+          !isVarDeclaration
+          || var == null
+          || var.isTypeInferred()
+          // use the initializer type when it's null or void
+          || resultType.isNullType()
+          || resultType.isVoidType();
 
       if (isVarTypeBetter) {
         redeclareSimpleVar(scope, left, resultType);
       }
-        left.setJSType(isVarDeclaration || leftType == null ?
-            resultType : null);
+      left.setJSType(isVarDeclaration || leftType == null
+          ? resultType
+          : null);
 
       if (var != null && var.isTypeInferred()) {
         JSType oldType = var.getType();
-          var.setType(oldType == null ?
-              resultType : oldType.getLeastSupertype(resultType));
+        var.setType(oldType == null
+            ? resultType
+            : oldType.getLeastSupertype(resultType));
       }
       break;
+
     case Token.GETPROP:
       String qualifiedName = left.getQualifiedName();
       if (qualifiedName != null) {
-          scope.inferQualifiedSlot(left, qualifiedName,
+        scope.inferQualifiedSlot(
+            left, qualifiedName,
             leftType == null ? unknownType : leftType,
             resultType);
       }
-
       left.setJSType(resultType);
       ensurePropertyDefined(left, resultType);
       break;
   }
 }
\ No newline at end of file
