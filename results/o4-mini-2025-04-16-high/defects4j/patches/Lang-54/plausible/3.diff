diff --git a/tmp/019e23cd-93f8-4ff8-bdf6-7c7483d5585a_buggy.java b/tmp/2ae90ef4-87e2-4c19-8579-e55de428b6d7_fixed.java
index 90fe130..db234ef 100644
--- a/tmp/019e23cd-93f8-4ff8-bdf6-7c7483d5585a_buggy.java
+++ b/tmp/2ae90ef4-87e2-4c19-8579-e55de428b6d7_fixed.java
@@ -1,61 +1,81 @@
 /**
  * <p>Converts a String to a Locale.</p>
  *
  * <p>This method takes the string format of a locale and creates the
  * locale object from it.</p>
  *
  * <pre>
  *   LocaleUtils.toLocale("en")         = new Locale("en", "")
  *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+ *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")
+ *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
  * </pre>
  *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
  * <p>This method validates the input strictly.
  * The language code must be lowercase.
  * The country code must be uppercase.
  * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
+ * The length must be correct.</p>
  *
  * @param str  the locale String to convert, null returns null
  * @return a Locale, null if null input
  * @throws IllegalArgumentException if the string is an invalid format
  */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+    if (len < 2) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+    // validate language
     char ch0 = str.charAt(0);
     char ch1 = str.charAt(1);
     if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+    String language = str.substring(0, 2);
+    // language only
     if (len == 2) {
-            return new Locale(str, "");
-        } else {
+        return new Locale(language, "");
+    }
+    // must have separator
     if (str.charAt(2) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+    // too short to have country or variant
+    if (len == 3) {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
+    // variant-only: language__variant
+    if (str.charAt(3) == '_') {
+        String variant = str.substring(4);
+        if (variant.isEmpty()) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        return new Locale(language, "", variant);
+    }
+    // language_country or language_country_variant
+    if (len < 5) {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
     char ch3 = str.charAt(3);
     char ch4 = str.charAt(4);
     if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+    String country = str.substring(3, 5);
     if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+        return new Locale(language, country);
+    }
+    // must have second separator
     if (str.charAt(5) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
-            }
+    String variant = str.substring(6);
+    if (variant.isEmpty()) {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+    return new Locale(language, country, variant);
 }
\ No newline at end of file
