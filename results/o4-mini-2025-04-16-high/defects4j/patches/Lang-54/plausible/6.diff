diff --git a/tmp/53e4ae78-cba0-4b68-a97b-b181a4bcde52_buggy.java b/tmp/3cf92ad2-86c5-4a98-b62b-2e9289c8279d_fixed.java
index 90fe130..cce5a83 100644
--- a/tmp/53e4ae78-cba0-4b68-a97b-b181a4bcde52_buggy.java
+++ b/tmp/3cf92ad2-86c5-4a98-b62b-2e9289c8279d_fixed.java
@@ -1,61 +1,70 @@
 /**
  * <p>Converts a String to a Locale.</p>
  *
  * <p>This method takes the string format of a locale and creates the
  * locale object from it.</p>
  *
  * <pre>
  *   LocaleUtils.toLocale("en")         = new Locale("en", "")
  *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+ *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")
+ *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")  // LANG-328
  * </pre>
  *
  * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
  * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
  * Thus, the result from getVariant() may vary depending on your JDK.</p>
  *
  * <p>This method validates the input strictly.
  * The language code must be lowercase.
  * The country code must be uppercase.
  * The separator must be an underscore.
  * The length must be correct.
  * </p>
  *
  * @param str  the locale String to convert, null returns null
  * @return a Locale, null if null input
  * @throws IllegalArgumentException if the string is an invalid format
  */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
     if (len != 2 && len != 5 && len < 7) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     char ch0 = str.charAt(0);
     char ch1 = str.charAt(1);
     if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+    // language only
     if (len == 2) {
         return new Locale(str, "");
-        } else {
+    }
+    // must have underscore at pos 2
     if (str.charAt(2) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+    // language + variant only (no country) => "fr__POSIX"
+    if (len > 3 && str.charAt(3) == '_') {
+        String language = str.substring(0, 2);
+        String variant = str.substring(4);
+        return new Locale(language, "", variant);
+    }
+    // language + country
     char ch3 = str.charAt(3);
     char ch4 = str.charAt(4);
     if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (len == 5) {
         return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+    }
+    // language + country + variant
     if (str.charAt(5) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
 }
\ No newline at end of file
-        }
-    }
