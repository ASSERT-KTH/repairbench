diff --git a/tmp/b0ba5a5f-fff4-4ce2-a431-6b6d80d1c6f0_buggy.java b/tmp/940e886e-866d-46f1-a6f5-9eb58fab84d3_fixed.java
index a7e6997..fc0dfe8 100644
--- a/tmp/b0ba5a5f-fff4-4ce2-a431-6b6d80d1c6f0_buggy.java
+++ b/tmp/940e886e-866d-46f1-a6f5-9eb58fab84d3_fixed.java
@@ -1,12 +1,23 @@
 /**
  * Tells if the token looks like a short option.
  * 
-     * @param token
+ * @param token the command‐line token to check
  */
-    private boolean isShortOption(String token)
-    {
-        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
-
-        // remove leading "-" and "=value"
+private boolean isShortOption(String token) {
+    // must start with a single dash and have at least one character after it
+    if (token == null || !token.startsWith("-") || token.length() < 2) {
+        return false;
+    }
+    // strip the leading dash
+    String withoutDash = token.substring(1);
+    // if there's an '=' split it off (e.g. "-opt=val" → "opt")
+    int eq = withoutDash.indexOf('=');
+    String optPart = (eq > 0) ? withoutDash.substring(0, eq) : withoutDash;
+    // first try a multi‐character short option
+    if (options.hasShortOption(optPart)) {
+        return true;
+    }
+    // fallback to single‐character grouping e.g. "-abc" → 'a'
+    return optPart.length() > 1
+        && options.hasShortOption(optPart.substring(0, 1));
 }
\ No newline at end of file
