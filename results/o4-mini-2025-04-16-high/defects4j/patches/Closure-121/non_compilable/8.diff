diff --git a/tmp/af14f76d-d052-49cc-b59b-ae5fdaae4404_buggy.java b/tmp/d5281ed5-f03a-423b-95ce-7cf573570fb4_fixed.java
index 3a790cb..b71123a 100644
--- a/tmp/af14f76d-d052-49cc-b59b-ae5fdaae4404_buggy.java
+++ b/tmp/d5281ed5-f03a-423b-95ce-7cf573570fb4_fixed.java
@@ -1,74 +1,81 @@
 private void inlineNonConstants(
     Var v, ReferenceCollection referenceInfo,
     boolean maybeModifiedArguments) {
   int refCount = referenceInfo.references.size();
   Reference declaration = referenceInfo.references.get(0);
   Reference init = referenceInfo.getInitializingReference();
   int firstRefAfterInit = (declaration == init) ? 2 : 3;
 
   if (refCount > 1 &&
       isImmutableAndWellDefinedVariable(v, referenceInfo)) {
     // if the variable is referenced more than once, we can only
     // inline it if it's immutable and never defined before referenced.
     Node value;
     if (init != null) {
       value = init.getAssignedValue();
     } else {
       // Create a new node for variable that is never initialized.
       Node srcLocation = declaration.getNode();
       value = NodeUtil.newUndefinedNode(srcLocation);
     }
     Preconditions.checkNotNull(value);
     inlineWellDefinedVariable(v, value, referenceInfo.references);
     staleVars.add(v);
-      } else if (refCount == firstRefAfterInit) {
+
+  } else if (refCount == firstRefAfterInit && init != null) {
     // The variable likely only read once, try some more
-        // complex inlining heuristics.
+    // complex inlining heuristics, but only if the init value
+    // is a pure (immutable) literal/function/object.
+    Node value = init.getAssignedValue();
+    if (value != null && NodeUtil.isImmutableValue(value)) {
       Reference reference = referenceInfo.references.get(
           firstRefAfterInit - 1);
       if (canInline(declaration, init, reference)) {
         inline(v, declaration, init, reference);
         staleVars.add(v);
       }
+    }
+
   } else if (declaration != init && refCount == 2) {
     if (isValidDeclaration(declaration) && isValidInitialization(init)) {
       // The only reference is the initialization, remove the assignment and
       // the variable declaration.
       Node value = init.getAssignedValue();
       Preconditions.checkNotNull(value);
       inlineWellDefinedVariable(v, value, referenceInfo.references);
       staleVars.add(v);
     }
   }
 
   // If this variable was not inlined normally, check if we can
   // inline an alias of it. (If the variable was inlined, then the
-      // reference data is out of sync. We're better off just waiting for
-      // the next pass.)
+  // reference data is out of sync, so wait for the next pass.)
+  // Inlining based solely on well-defined & single assignment is *NOT*
+  // correct unless the variable was declared @const.
+  JSDocInfo jsdoc = v.getJSDocInfo();
   if (!maybeModifiedArguments &&
       !staleVars.contains(v) &&
       referenceInfo.isWellDefined() &&
-          referenceInfo.isAssignedOnceInLifetime()) {
-          // Inlining the variable based solely on well-defined and assigned
-          // once is *NOT* correct. We relax the correctness requirement if
-          // the variable is declared constant.
+      referenceInfo.isAssignedOnceInLifetime() &&
+      jsdoc != null &&
+      jsdoc.isConstant()) {
     List<Reference> refs = referenceInfo.references;
-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {
+    for (int i = 1; i < refs.size(); i++) {  // start from the first read
       Node nameNode = refs.get(i).getNode();
       if (aliasCandidates.containsKey(nameNode)) {
         AliasCandidate candidate = aliasCandidates.get(nameNode);
         if (!staleVars.contains(candidate.alias) &&
             !isVarInlineForbidden(candidate.alias)) {
-              Reference aliasInit;
-              aliasInit = candidate.refInfo.getInitializingReference();
-              Node value = aliasInit.getAssignedValue();
-              Preconditions.checkNotNull(value);
-              inlineWellDefinedVariable(candidate.alias,
-                  value,
+          Reference aliasInit =
+              candidate.refInfo.getInitializingReference();
+          Node aliasValue = aliasInit.getAssignedValue();
+          Preconditions.checkNotNull(aliasValue);
+          inlineWellDefinedVariable(
+              candidate.alias, aliasValue,
               candidate.refInfo.references);
           staleVars.add(candidate.alias);
         }
       }
     }
   }
 }
\ No newline at end of file
