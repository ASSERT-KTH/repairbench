diff --git a/tmp/9c026f56-4856-4c82-972c-f38bd6e19e0c_buggy.java b/tmp/f8ad33d3-967f-4026-9891-91a6ab0f82bb_fixed.java
index 3075782..b1c8062 100644
--- a/tmp/9c026f56-4856-4c82-972c-f38bd6e19e0c_buggy.java
+++ b/tmp/f8ad33d3-967f-4026-9891-91a6ab0f82bb_fixed.java
@@ -1,82 +1,65 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
+  // We only support direct inlining of single-return functions.
   Node block = fnNode.getLastChild();
-
-    boolean hasSideEffects = false;
+  Node stmt = null;
   if (block.hasChildren()) {
     Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
+    stmt = block.getFirstChild();
+    if (!stmt.isReturn()) {
+      return CanInlineResult.NO;
     }
+    // Disallow direct assignment to the parameter itself (e.g. f(a){return a=2;}).
+    Node returnExpr = stmt.getFirstChild();
+    if (returnExpr != null && returnExpr.isAssign()) {
+      Node lhs = returnExpr.getFirstChild();
+      if (lhs.isName()) {
+        return CanInlineResult.NO;
       }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+    }
+  }
+
+  // Prepare to walk through call arguments and function parameters.
   Node cArg = callNode.getFirstChild().getNext();
-
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // Handle .call / .apply style where "this" is implicit.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
+      // We should never see `.apply` here.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
+  while (fnParam != null || cArg != null) {
+    if (fnParam != null && cArg != null) {
+      // If an argument has side-effects, the corresponding parameter
+      // may only be referenced once inside the function.
+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)
+          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
         return CanInlineResult.NO;
       }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
-        }
-
-        // Move to the next name.
       fnParam = fnParam.getNext();
-      }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
+      cArg = cArg.getNext();
+    } else if (fnParam != null) {
+      // Missing argument => undefined, that's safe.
+      fnParam = fnParam.getNext();
+    } else {
+      // Extra arguments beyond the parameter list must be side-effect free.
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
