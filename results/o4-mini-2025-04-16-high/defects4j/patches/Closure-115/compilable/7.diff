diff --git a/tmp/a81fb1f7-ed45-40dc-b9c7-729c4a4e037a_buggy.java b/tmp/910625ab-2fe1-48e2-a435-7221c32e40e7_fixed.java
index 3075782..dd796d7 100644
--- a/tmp/a81fb1f7-ed45-40dc-b9c7-729c4a4e037a_buggy.java
+++ b/tmp/910625ab-2fe1-48e2-a435-7221c32e40e7_fixed.java
@@ -1,82 +1,61 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
+  // Only very simple one‐statement functions can be inlined here.
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
+  // The body/block of the function we're trying to inline.
   Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
-    Node cArg = callNode.getFirstChild().getNext();
+  // First real argument to the call.
+  Node arg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // Handle Function.prototype.call(…) which has an implicit "this" argument.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
-        if (cArg == null || !cArg.isThis()) {
+      // The first argument must literally be "this"
+      if (arg == null || !arg.isThis()) {
         return CanInlineResult.NO;
       }
-        cArg = cArg.getNext();
+      arg = arg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
+      // We never expect a raw .apply here.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+  // Walk through the matched parameter list vs. argument list.
+  Node param = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+  while (param != null && arg != null) {
+    // If this argument can modify mutable state AND the function
+    // references that parameter more than once, inlining would
+    // duplicate the side effect.  Bail out.
+    if (NodeUtil.mayEffectMutableState(arg, compiler)
+        && NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {
       return CanInlineResult.NO;
     }
+    param = param.getNext();
+    arg = arg.getNext();
   }
 
-        // Move to the next name.
-        fnParam = fnParam.getNext();
+  // Any extra arguments beyond the defined parameters must be
+  // side‐effect free, otherwise we’d lose them.
+  while (arg != null) {
+    if (NodeUtil.mayHaveSideEffects(arg, compiler)) {
+      return CanInlineResult.NO;
+    }
+    arg = arg.getNext();
   }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+  // If there are parameters with no corresponding argument,
+  // they must not actually be referenced inside the function.
+  while (param != null) {
+    if (NodeUtil.getNameReferenceCount(block, param.getString()) > 0) {
       return CanInlineResult.NO;
     }
-        cArg = cArg.getNext();
-      }
+    param = param.getNext();
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
