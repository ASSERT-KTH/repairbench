diff --git a/tmp/e84598c5-fef8-45eb-a67a-013e74145d12_buggy.java b/tmp/568ad54c-a417-44c7-a392-095c88d9b4a3_fixed.java
index 3075782..a72ec6d 100644
--- a/tmp/e84598c5-fef8-45eb-a67a-013e74145d12_buggy.java
+++ b/tmp/568ad54c-a417-44c7-a392-095c88d9b4a3_fixed.java
@@ -1,82 +1,66 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
+    // The function body must be exactly one "return" statement.
     Node block = fnNode.getLastChild();
-
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
+    Preconditions.checkState(block.hasOneChild(),
+        "Direct-call inlining requires exactly one statement");
     Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+    Preconditions.checkState(stmt.isReturn(),
+        "Direct-call inlining requires a return");
+
+    // Prepare to walk the call arguments.
+    // CALL NODE: [ FUNC, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+    // Handle Function.prototype.call(thisArg, ...) by skipping the "this"
+    // if necessary.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
-        // ".apply" call should be filtered before this.
+        // ".apply" should have been filtered out already.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+    // Walk through parameters and corresponding arguments.
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+    while (fnParam != null || cArg != null) {
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+          // If the call-argument has side effects and the parameter
+          // is referenced more than once in the function body,
+          // we cannot inline safely.
+          if (NodeUtil.mayHaveSideEffects(cArg, compiler)
+              && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
-
-        // Move to the next name.
         fnParam = fnParam.getNext();
       }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
       if (cArg != null) {
+        // Any extra arguments (beyond declared parameters) must be
+        // side‐effect‐free.
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
