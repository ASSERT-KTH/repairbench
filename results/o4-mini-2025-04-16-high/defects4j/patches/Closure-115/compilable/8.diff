diff --git a/tmp/fec9732c-0206-4553-a09e-bf70e6c8f459_buggy.java b/tmp/7fca973d-7807-461f-823b-ef8e1493e7be_fixed.java
index 3075782..1eba12a 100644
--- a/tmp/fec9732c-0206-4553-a09e-bf70e6c8f459_buggy.java
+++ b/tmp/7fca973d-7807-461f-823b-ef8e1493e7be_fixed.java
@@ -1,82 +1,68 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
+  // Check whether the function bodyâ€™s return expression has side effects.
   Node block = fnNode.getLastChild();
-
-    boolean hasSideEffects = false;
+  boolean bodyHasSideEffects = false;
   if (block.hasChildren()) {
     Preconditions.checkState(block.hasOneChild());
     Node stmt = block.getFirstChild();
     if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
+      Node returnValue = stmt.getFirstChild();
+      if (returnValue != null) {
+        bodyHasSideEffects = NodeUtil.mayHaveSideEffects(returnValue, compiler);
       }
     }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+  }
+
+  // First argument of the CALL node.
   Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // Handle .call(this, ...) form.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
+      // must pass a "this" for the this-parameter
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
+      // .apply should have been filtered out
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+  // The formal parameters of the function.
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
-            return CanInlineResult.NO;
-          }
-        }
 
-        // Move to the next name.
+  // Pair up parameters and arguments.
+  while (fnParam != null && cArg != null) {
+    // If the function body can mutate state, we can't inline it into
+    // an argument expression that itself might be side-effected.
+    if (bodyHasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
+      return CanInlineResult.NO;
+    }
+    // If the argument has side effects and the parameter is referenced
+    // more than once, we must not duplicate that side effect.
+    if (NodeUtil.mayHaveSideEffects(cArg, compiler)
+        && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+      return CanInlineResult.NO;
+    }
     fnParam = fnParam.getNext();
+    cArg = cArg.getNext();
   }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
+  // Any extra arguments beyond the last formal parameter
+  // would be dropped by inlining.  They must be side-effect free.
+  while (cArg != null) {
     if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
       return CanInlineResult.NO;
     }
     cArg = cArg.getNext();
   }
-    }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
