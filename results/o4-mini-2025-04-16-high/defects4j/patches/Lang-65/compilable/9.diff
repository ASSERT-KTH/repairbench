diff --git a/tmp/3a3239bd-5516-4511-be02-ecaab70d5571_buggy.java b/tmp/4cbb51b5-e9f6-41d8-bb0b-86d877eeb244_fixed.java
index cae0024..de4328e 100644
--- a/tmp/3a3239bd-5516-4511-be02-ecaab70d5571_buggy.java
+++ b/tmp/4cbb51b5-e9f6-41d8-bb0b-86d877eeb244_fixed.java
@@ -1,103 +1,106 @@
-    /**
-     * <p>Internal calculation method.</p>
-     * 
-     * @param val  the calendar
-     * @param field  the field constant
-     * @param round  true to round, false to truncate
-     * @throws ArithmeticException if the year is over 280 million
-     */
 private static void modify(Calendar val, int field, boolean round) {
     if (val.get(Calendar.YEAR) > 280000000) {
         throw new ArithmeticException("Calendar value too large for accurate calculations");
     }
 
-
     // ----------------- Fix for LANG-59 ---------------------- START ---------------
     // see http://issues.apache.org/jira/browse/LANG-59
     //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
+    // Manually truncate/round milliseconds, seconds and minutes, rather than using
+    // Calendar#set, which can mis‐compute across DST boundaries.
+    long time = val.getTimeInMillis();
+    switch (field) {
+        case Calendar.MILLISECOND:
+            // nothing to truncate
+            return;
+        case Calendar.SECOND: {
+            int ms = val.get(Calendar.MILLISECOND);
+            if (round) {
+                if (ms >= 500) {
+                    time += (1000 - ms);
+                } else {
+                    time -= ms;
+                }
+            } else {
+                time -= ms;
+            }
+            val.setTimeInMillis(time);
+            return;
+        }
+        case Calendar.MINUTE: {
+            int sec = val.get(Calendar.SECOND);
+            int ms  = val.get(Calendar.MILLISECOND);
+            long delta = sec * 1000L + ms;
+            if (round) {
+                if (delta >= 30000L) {
+                    time += (60000L - delta);
+                } else {
+                    time -= delta;
+                }
+            } else {
+                time -= delta;
+            }
+            val.setTimeInMillis(time);
+            return;
+        }
+        default:
+            // not a millisecond/second/minute truncation, fall through
+    }
     // ----------------- Fix for LANG-59 ----------------------- END ----------------
 
     boolean roundUp = false;
     for (int i = 0; i < fields.length; i++) {
         for (int j = 0; j < fields[i].length; j++) {
             if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                // found the target field
                 if (round && roundUp) {
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
+                        // special half‐month rounding
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
                         val.add(fields[i][0], 1);
                     }
                 }
                 return;
             }
         }
-            //We have various fields that are not easy roundings
+        // compute offset for fields[i][0]
         int offset = 0;
         boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
         switch (field) {
             case DateUtils.SEMI_MONTH:
                 if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
                     offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
                     if (offset >= 15) {
                         offset -= 15;
                     }
-                        //Record whether we're in the top or bottom half of that range
                     roundUp = offset > 7;
                     offsetSet = true;
                 }
                 break;
             case Calendar.AM_PM:
                 if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
                     offset = val.get(Calendar.HOUR_OF_DAY);
                     if (offset >= 12) {
                         offset -= 12;
                     }
                     roundUp = offset > 6;
                     offsetSet = true;
                 }
                 break;
         }
         if (!offsetSet) {
             int min = val.getActualMinimum(fields[i][0]);
             int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
             offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
             roundUp = offset > ((max - min) / 2);
         }
-            //We need to remove this field
         val.set(fields[i][0], val.get(fields[i][0]) - offset);
     }
     throw new IllegalArgumentException("The field " + field + " is not supported");
-
 }
\ No newline at end of file
