diff --git a/tmp/7e3412b4-c962-46b4-8e75-d813648e6e44_buggy.java b/tmp/e710200e-c977-4f3d-97ca-bfbeee8c5d32_fixed.java
index 72a422c..1ef9aa4 100644
--- a/tmp/7e3412b4-c962-46b4-8e75-d813648e6e44_buggy.java
+++ b/tmp/e710200e-c977-4f3d-97ca-bfbeee8c5d32_fixed.java
@@ -1,51 +1,62 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    // Need at least "&#", one more for a digit or 'x'
+    if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+        // Optional hex marker
+        char first = input.charAt(start);
+        if (first == 'x' || first == 'X') {
             isHex = true;
-
-                // Check there's more than just an x after the &#
-            }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
-            }
-
-            int entityValue;
+            start++;
+        }
+        // Must have at least one digit after "&#" or "&#x"
+        if (start >= seqEnd) {
+            return 0;
+        }
+        int pos = start;
+        // Consume all valid digits
+        while (pos < seqEnd) {
+            char c = input.charAt(pos);
+            if (isHex 
+                ? ((c >= '0' && c <= '9') ||
+                   (c >= 'a' && c <= 'f') ||
+                   (c >= 'A' && c <= 'F'))
+                : (c >= '0' && c <= '9')) {
+                pos++;
+            } else {
+                break;
+            }
+        }
+        // No digits means not a valid numeric entity
+        if (pos == start) {
+            return 0;
+        }
+        // Check for optional semicolon
+        boolean hasSemi = (pos < seqEnd && input.charAt(pos) == ';');
+        int numberEnd = pos;
+        String numStr = input.subSequence(start, numberEnd).toString();
+        int codePoint;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            codePoint = Integer.parseInt(numStr, isHex ? 16 : 10);
+        } catch (NumberFormatException ex) {
             return 0;
         }
-
-            if(entityValue > 0xFFFF) {
-                char[] chrs = Character.toChars(entityValue);
+        // Write out the character(s)
+        if (codePoint > 0xFFFF) {
+            char[] chrs = Character.toChars(codePoint);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
-                out.write(entityValue);
+            out.write(codePoint);
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Return the number of characters consumed from the input
+        // (digits + optional 'x' + 2 for '&#' + optional ';')
+        return (numberEnd - index) + (hasSemi ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
