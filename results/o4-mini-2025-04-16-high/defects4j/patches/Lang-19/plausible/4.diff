diff --git a/tmp/06704239-4b60-46a5-9b7c-24f3d005d7cc_buggy.java b/tmp/89224460-0d5f-4359-ba5f-fe6b1edad8c2_fixed.java
index 72a422c..b97571f 100644
--- a/tmp/06704239-4b60-46a5-9b7c-24f3d005d7cc_buggy.java
+++ b/tmp/89224460-0d5f-4359-ba5f-fe6b1edad8c2_fixed.java
@@ -1,51 +1,54 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+    int length = input.length();
+    if (input.charAt(index) == '&' && index + 1 < length && input.charAt(index + 1) == '#') {
+        int pos = index + 2;
         boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+        // detect hex marker
+        if (pos < length) {
+            char c = input.charAt(pos);
+            if (c == 'x' || c == 'X') {
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                pos++;
             }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
         }
-
+        int start = pos;
+        int base = isHex ? 16 : 10;
+        // scan digits
+        while (pos < length) {
+            char c = input.charAt(pos);
+            if (Character.digit(c, base) < 0) {
+                break;
+            }
+            pos++;
+        }
+        // must have at least one digit
+        if (pos == start) {
+            return 0;
+        }
+        int end = pos;
+        // optional semicolon
+        if (pos < length && input.charAt(pos) == ';') {
+            pos++;
+        }
+        // parse the number
+        String number = input.subSequence(start, end).toString();
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = Integer.parseInt(number, base);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
-
-            if(entityValue > 0xFFFF) {
-                char[] chrs = Character.toChars(entityValue);
-                out.write(chrs[0]);
-                out.write(chrs[1]);
+        // write the character(s)
+        if (entityValue > Character.MAX_VALUE) {
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars[0]);
+            out.write(chars[1]);
         } else {
             out.write(entityValue);
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // return characters consumed from input
+        return pos - index;
     }
     return 0;
 }
\ No newline at end of file
