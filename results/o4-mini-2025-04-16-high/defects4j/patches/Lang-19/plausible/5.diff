diff --git a/tmp/7aedc432-f1a9-4747-bbee-a198a4e48712_buggy.java b/tmp/d442520d-db17-496d-9858-03c5755811bd_fixed.java
index 72a422c..bf71ec3 100644
--- a/tmp/7aedc432-f1a9-4747-bbee-a198a4e48712_buggy.java
+++ b/tmp/d442520d-db17-496d-9858-03c5755811bd_fixed.java
@@ -1,51 +1,71 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+    int len = input.length();
+    // must start with "&#"
+    if (input.charAt(index) != '&' || index + 1 >= len || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    int pos = index + 2;
+    if (pos >= len) {
+        return 0;
+    }
+    // check for hex marker
     boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+    char c = input.charAt(pos);
+    if (c == 'x' || c == 'X') {
         isHex = true;
-
-                // Check there's more than just an x after the &#
+        pos++;
+        if (pos >= len) {
+            return 0;
         }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
     }
-
+    // scan digits
+    int start = pos;
+    while (pos < len) {
+        c = input.charAt(pos);
+        if (isHex) {
+            if ((c >= '0' && c <= '9') ||
+                (c >= 'a' && c <= 'f') ||
+                (c >= 'A' && c <= 'F')) {
+                pos++;
+                continue;
+            }
+        } else {
+            if (c >= '0' && c <= '9') {
+                pos++;
+                continue;
+            }
+        }
+        break;
+    }
+    // require at least one digit
+    if (pos == start) {
+        return 0;
+    }
+    // optional semicolon
+    boolean semi = false;
+    if (pos < len && input.charAt(pos) == ';') {
+        semi = true;
+    }
+    // parse the number
+    String num = input.subSequence(start, pos).toString();
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+        entityValue = Integer.parseInt(num, isHex ? 16 : 10);
     } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
         return 0;
     }
-
+    // output the character(s)
     if (entityValue > 0xFFFF) {
         char[] chrs = Character.toChars(entityValue);
         out.write(chrs[0]);
         out.write(chrs[1]);
     } else {
         out.write(entityValue);
     }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    // return the number of characters consumed
+    return (pos - index) + (semi ? 1 : 0);
 }
\ No newline at end of file
