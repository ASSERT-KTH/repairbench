diff --git a/tmp/02254a75-d4e8-4c4f-99df-5f23d6931ecd_buggy.java b/tmp/a16795c1-8650-4309-a4f0-9e1b49128d7f_fixed.java
index 72a422c..8ada5df 100644
--- a/tmp/02254a75-d4e8-4c4f-99df-5f23d6931ecd_buggy.java
+++ b/tmp/a16795c1-8650-4309-a4f0-9e1b49128d7f_fixed.java
@@ -1,51 +1,58 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    // must start with "&#"
+    if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {
         int start = index + 2;
+        if (start >= seqEnd) {
+            // no room for a digit or 'x'
+            return 0;
+        }
         boolean isHex = false;
-
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
-                start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            start++;
+            if (start >= seqEnd) {
+                // no room for any hex digit
+                return 0;
             }
-
+        }
+        // consume all valid digits (hex or decimal) up to an optional ';'
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd) {
+            char c = input.charAt(end);
+            if (isHex
+                ? ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))
+                : (c >= '0' && c <= '9')) {
                 end++;
+            } else {
+                break;
             }
-
-            int entityValue;
+        }
+        if (end == start) {
+            // no digits found
+            return 0;
+        }
+        boolean hasSemicolon = (end < seqEnd && input.charAt(end) == ';');
+        // parse the number
+        String number = input.subSequence(start, end).toString();
+        int codepoint;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            codepoint = Integer.parseInt(number, isHex ? 16 : 10);
+        } catch (NumberFormatException ex) {
             return 0;
         }
-
-            if(entityValue > 0xFFFF) {
-                char[] chrs = Character.toChars(entityValue);
+        // write the character(s)
+        if (codepoint > 0xFFFF) {
+            char[] chrs = Character.toChars(codepoint);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
-                out.write(entityValue);
+            out.write(codepoint);
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // return how many characters were consumed
+        return (end - index) + (hasSemicolon ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
