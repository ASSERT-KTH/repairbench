diff --git a/tmp/9beba92f-1d34-43f0-a073-38d9709f00f6_buggy.java b/tmp/c5fae71d-c1ac-400a-bf18-db6df5df1b0d_fixed.java
index 72a422c..40a53e2 100644
--- a/tmp/9beba92f-1d34-43f0-a073-38d9709f00f6_buggy.java
+++ b/tmp/c5fae71d-c1ac-400a-bf18-db6df5df1b0d_fixed.java
@@ -1,51 +1,68 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+    int len = input.length();
+    // Look for "&#"
+    if (index + 2 >= len || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    int i = index + 2;
     boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+    // Optional hex marker
+    if (i < len) {
+        char c = input.charAt(i);
+        if (c == 'x' || c == 'X') {
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            i++;
         }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
     }
-
+    int digitStart = i;
+    // Must have at least one digit
+    if (digitStart >= len) {
+        return 0;
+    }
+    // Scan digits
+    if (isHex) {
+        while (i < len) {
+            char c = input.charAt(i);
+            if ((c >= '0' && c <= '9') ||
+                (c >= 'a' && c <= 'f') ||
+                (c >= 'A' && c <= 'F')) {
+                i++;
+            } else {
+                break;
+            }
+        }
+    } else {
+        while (i < len && Character.isDigit(input.charAt(i))) {
+            i++;
+        }
+    }
+    // No digits found?
+    if (i == digitStart) {
+        return 0;
+    }
+    // Optional semicolon
+    boolean hasSemi = false;
+    if (i < len && input.charAt(i) == ';') {
+        hasSemi = true;
+        i++;
+    }
+    // Extract the number text
+    String number = input.subSequence(digitStart, i - (hasSemi ? 1 : 0)).toString();
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+        entityValue = Integer.parseInt(number, isHex ? 16 : 10);
+    } catch (NumberFormatException e) {
         return 0;
     }
-
+    // Write the character(s)
     if (entityValue > 0xFFFF) {
         char[] chrs = Character.toChars(entityValue);
         out.write(chrs[0]);
         out.write(chrs[1]);
     } else {
         out.write(entityValue);
     }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    // Return the number of characters consumed
+    return i - index;
 }
\ No newline at end of file
