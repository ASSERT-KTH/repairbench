diff --git a/tmp/daf1904a-3c74-4a15-9b4d-87af783c9c5d_buggy.java b/tmp/7ea4960e-90dc-425d-8b60-27c3b134e2af_fixed.java
index 72a422c..5f8e0cf 100644
--- a/tmp/daf1904a-3c74-4a15-9b4d-87af783c9c5d_buggy.java
+++ b/tmp/7ea4960e-90dc-425d-8b60-27c3b134e2af_fixed.java
@@ -1,51 +1,68 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    // quick check for "&#"
+    if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+        // check for hex marker
+        if (start < seqEnd) {
+            char c = input.charAt(start);
+            if (c == 'x' || c == 'X') {
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                start++;
             }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+        } else {
+            return 0;
         }
-
+        // must have at least one digit after '&#' or '&#x'
+        if (start >= seqEnd) {
+            return 0;
+        }
+        int pos = start;
+        boolean hasDigits = false;
+        boolean hasSemicolon = false;
+        // scan digits up to optional ';'
+        while (pos < seqEnd) {
+            char c = input.charAt(pos);
+            if (c == ';') {
+                hasSemicolon = true;
+                break;
+            }
+            int digit = Character.digit(c, isHex ? 16 : 10);
+            if (digit < 0) {
+                break;
+            }
+            hasDigits = true;
+            pos++;
+        }
+        if (!hasDigits) {
+            return 0;
+        }
+        // parse the number
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            entityValue = Integer.parseInt(
+                input.subSequence(start, pos).toString(),
+                isHex ? 16 : 10
+            );
+        } catch (NumberFormatException ex) {
             return 0;
         }
-
+        // write the character(s)
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // compute how many chars we consumed
+        int consumed = (pos - index) + (hasSemicolon ? 1 : 0);
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
