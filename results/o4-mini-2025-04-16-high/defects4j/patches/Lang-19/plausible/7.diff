diff --git a/tmp/7da9d452-9377-458d-ab7d-a62b5c4fefc6_buggy.java b/tmp/24a8f218-dd5d-46ab-8677-a03d0e0421a0_fixed.java
index 72a422c..5648297 100644
--- a/tmp/7da9d452-9377-458d-ab7d-a62b5c4fefc6_buggy.java
+++ b/tmp/24a8f218-dd5d-46ab-8677-a03d0e0421a0_fixed.java
@@ -1,51 +1,55 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    int len = input.length();
+    if (input.charAt(index) == '&' && index + 1 < len && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+        // optional hex marker
+        if (start < len) {
+            char c = input.charAt(start);
+            if (c == 'x' || c == 'X') {
                 isHex = true;
-
-                // Check there's more than just an x after the &#
-            }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
-            }
-
-            int entityValue;
+                start++;
+            }
+        }
+        // collect digits
+        int digitStart = start;
+        while (start < len) {
+            char c = input.charAt(start);
+            if ((c >= '0' && c <= '9')
+                || (isHex && ((c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')))) {
+                start++;
+            } else {
+                break;
+            }
+        }
+        // must have at least one digit
+        if (start == digitStart) {
+            return 0;
+        }
+        // optional semicolon
+        boolean semi = (start < len && input.charAt(start) == ';');
+        int numberEnd = start;
+        String num = input.subSequence(digitStart, numberEnd).toString();
+        int value;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            value = Integer.parseInt(num, isHex ? 16 : 10);
+        } catch (NumberFormatException e) {
             return 0;
         }
-
-            if(entityValue > 0xFFFF) {
-                char[] chrs = Character.toChars(entityValue);
-                out.write(chrs[0]);
-                out.write(chrs[1]);
+        // write output char(s)
+        if (value > 0xFFFF) {
+            char[] chars = Character.toChars(value);
+            out.write(chars[0]);
+            out.write(chars[1]);
         } else {
-                out.write(entityValue);
+            out.write((char) value);
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // return how many characters we consumed (&, #, maybe 'x', digits, and optional ';')
+        return (numberEnd - index) + (semi ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
