diff --git a/tmp/25749a3f-e371-41b9-ad5c-c0bed79636d7_buggy.java b/tmp/a9dcd33f-9101-4319-8a56-4ad22e36b522_fixed.java
index 72a422c..f9b6364 100644
--- a/tmp/25749a3f-e371-41b9-ad5c-c0bed79636d7_buggy.java
+++ b/tmp/a9dcd33f-9101-4319-8a56-4ad22e36b522_fixed.java
@@ -1,51 +1,66 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
+    int len = input.length();
+    // Must start with "&#"
+    if (input.charAt(index) == '&' && index + 1 < len && input.charAt(index + 1) == '#') {
+        int i = index + 2;
         boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+        // Check for optional hex indicator
+        if (i < len) {
+            char c = input.charAt(i);
+            if (c == 'x' || c == 'X') {
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                i++;
             }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
+        } else {
+            // no room for digits
+            return 0;
         }
-
-            int entityValue;
-            try {
+        int start = i;
+        int end = i;
+        // scan valid digits
+        while (end < len) {
+            char ch = input.charAt(end);
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                if ((ch >= '0' && ch <= '9') ||
+                    (ch >= 'a' && ch <= 'f') ||
+                    (ch >= 'A' && ch <= 'F')) {
+                    end++;
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    break;
                 }
+            } else {
+                if (ch >= '0' && ch <= '9') {
+                    end++;
+                } else {
+                    break;
+                }
+            }
+        }
+        // must have at least one digit
+        if (end == start) {
+            return 0;
+        }
+        // optional semicolon
+        boolean semi = end < len && input.charAt(end) == ';';
+        String numSequence = input.subSequence(start, end).toString();
+        int value;
+        try {
+            value = Integer.parseInt(numSequence, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
-
-            if(entityValue > 0xFFFF) {
-                char[] chrs = Character.toChars(entityValue);
+        // write the character(s)
+        if (value > 0xFFFF) {
+            char[] chrs = Character.toChars(value);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
-                out.write(entityValue);
+            out.write(value);
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // return how many input chars were consumed
+        // (end - index) covers '&', '#', optional 'x' and digits; plus one if ';'
+        return (end - index) + (semi ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
