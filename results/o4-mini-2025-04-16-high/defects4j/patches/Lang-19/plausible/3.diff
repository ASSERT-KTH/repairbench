diff --git a/tmp/50acab2c-2f43-4ab3-8bb1-9c705da7ca95_buggy.java b/tmp/4b465c07-3f06-459c-91be-be6300e0bc76_fixed.java
index 72a422c..0d329b2 100644
--- a/tmp/50acab2c-2f43-4ab3-8bb1-9c705da7ca95_buggy.java
+++ b/tmp/4b465c07-3f06-459c-91be-be6300e0bc76_fixed.java
@@ -1,51 +1,58 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    int len = input.length();
+    if (input.charAt(index) == '&' && index + 1 < len && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+        // optional hex marker
+        if (start < len) {
+            char c = input.charAt(start);
+            if (c == 'x' || c == 'X') {
                 isHex = true;
-
-                // Check there's more than just an x after the &#
-            }
-
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
-            }
-
-            int entityValue;
+                start++;
+            }
+        } else {
+            return 0;
+        }
+        // must have at least one digit after '&#' or '&#x'
+        if (start >= len) {
+            return 0;
+        }
+        // consume digits (and stop at ';' or first non‐digit)
+        int pos = start;
+        while (pos < len) {
+            char c = input.charAt(pos);
+            if (c == ';') {
+                break;
+            }
+            if (isHex ? Character.digit(c, 16) != -1 : (c >= '0' && c <= '9')) {
+                pos++;
+            } else {
+                break;
+            }
+        }
+        // no digits collected → not an entity
+        if (pos == start) {
+            return 0;
+        }
+        boolean hasSemicolon = pos < len && input.charAt(pos) == ';';
+        String number = input.subSequence(start, pos).toString();
+        int value;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            value = Integer.parseInt(number, isHex ? 16 : 10);
+        } catch (NumberFormatException ex) {
             return 0;
         }
-
-            if(entityValue > 0xFFFF) {
-                char[] chrs = Character.toChars(entityValue);
+        // write the character(s)
+        if (value > 0xFFFF) {
+            char[] chrs = Character.toChars(value);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
-                out.write(entityValue);
+            out.write((char) value);
         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // return the count of chars consumed (include ';' if present)
+        return (pos - index) + (hasSemicolon ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
