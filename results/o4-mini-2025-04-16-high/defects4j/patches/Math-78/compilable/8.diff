diff --git a/tmp/a901c251-a368-44ac-8ad9-a8d739bfc3e1_buggy.java b/tmp/e1ead066-3754-49cf-8f8b-ad5cbd0566ce_fixed.java
index 032fa8e..7a5810c 100644
--- a/tmp/a901c251-a368-44ac-8ad9-a8d739bfc3e1_buggy.java
+++ b/tmp/e1ead066-3754-49cf-8f8b-ad5cbd0566ce_fixed.java
@@ -1,108 +1,101 @@
-    /** Evaluate the impact of the proposed step on the event handler.
-     * @param interpolator step interpolator for the proposed step
-     * @return true if the event handler triggers an event before
-     * the end of the proposed step (this implies the step should be
-     * rejected)
-     * @exception DerivativeException if the interpolator fails to
-     * compute the switching function somewhere within the step
-     * @exception EventException if the switching function
-     * cannot be evaluated
-     * @exception ConvergenceException if an event cannot be located
-     */
 public boolean evaluateStep(final StepInterpolator interpolator)
     throws DerivativeException, EventException, ConvergenceException {
 
     try {
 
         forward = interpolator.isForward();
         final double t1 = interpolator.getCurrentTime();
-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
+        final int    n  = Math.max(1,
+                                (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
         final double h  = (t1 - t0) / n;
 
+        // initialize the sub‐interval start
         double ta = t0;
         double ga = g0;
-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+        // if we start exactly on an event (|g0| ≤ tol), shift ta slightly
+        // so we don't re‐detect the same event
+        if (Math.abs(ga) <= convergence) {
+            ta += (forward ? convergence : -convergence);
+            interpolator.setInterpolatedTime(ta);
+            ga = handler.g(ta, interpolator.getInterpolatedState());
+        }
+        double tb = ta;
+
         for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
+            // advance to the end of the substep
             tb += h;
             interpolator.setInterpolatedTime(tb);
             final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
-                // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
-                    // there is a sign change: an event is expected during this step
-
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
-                         
-                    // variation direction, with respect to the integration direction
+            // look for a sign change between ga and gb
+            if ((ga >= 0) ^ (gb >= 0)) {
+                // record the direction of the switch
                 increasing = gb >= ga;
 
+                // build the function for root finding
                 final UnivariateRealFunction f = new UnivariateRealFunction() {
-                        public double value(final double t) throws FunctionEvaluationException {
+                    public double value(final double t)
+                        throws FunctionEvaluationException {
                         try {
                             interpolator.setInterpolatedTime(t);
                             return handler.g(t, interpolator.getInterpolatedState());
-                            } catch (DerivativeException e) {
-                                throw new FunctionEvaluationException(e, t);
-                            } catch (EventException e) {
-                                throw new FunctionEvaluationException(e, t);
+                        } catch (DerivativeException ex) {
+                            throw new FunctionEvaluationException(ex, t);
+                        } catch (EventException ex) {
+                            throw new FunctionEvaluationException(ex, t);
                         }
                     }
                 };
+                // find the root
                 final BrentSolver solver = new BrentSolver();
                 solver.setAbsoluteAccuracy(convergence);
                 solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+                final double root = (ta <= tb) ?
+                    solver.solve(f, ta, tb) :
+                    solver.solve(f, tb, ta);
+
+                // filter out trivial or already‐seen events
                 if ((Math.abs(root - ta) <= convergence) &&
                     (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
+                    // ignore and continue searching
                     ta = tb;
                     ga = gb;
                 } else if (Double.isNaN(previousEventTime) ||
-                               (Math.abs(previousEventTime - root) > convergence)) {
+                           (Math.abs(root - previousEventTime) > convergence)) {
+                    // a new, valid event
                     pendingEventTime = root;
-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
-                            // we were already waiting for this event which was
-                            // found during a previous call for a step that was
-                            // rejected, this step must now be accepted since it
-                            // properly ends exactly at the event occurrence
+                    if (pendingEvent &&
+                        (Math.abs(t1 - pendingEventTime) <= convergence)) {
+                        // we were already pending at the end of the last step
                         return false;
                     }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
                     pendingEvent = true;
                     return true;
                 }
 
             } else {
-                    // no sign change: there is no event for now
+                // no sign change in this substep
                 ta = tb;
                 ga = gb;
             }
 
         }
 
-            // no event during the whole step
+        // nothing found on the whole step
         pendingEvent     = false;
         pendingEventTime = Double.NaN;
         return false;
 
     } catch (FunctionEvaluationException e) {
         final Throwable cause = e.getCause();
-            if ((cause != null) && (cause instanceof DerivativeException)) {
+        if (cause instanceof DerivativeException) {
             throw (DerivativeException) cause;
-            } else if ((cause != null) && (cause instanceof EventException)) {
+        } else if (cause instanceof EventException) {
             throw (EventException) cause;
-            }
+        } else {
             throw new EventException(e);
         }
+    }
 
 }
\ No newline at end of file
