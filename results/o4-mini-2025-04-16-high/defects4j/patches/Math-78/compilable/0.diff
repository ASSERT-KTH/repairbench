diff --git a/tmp/50e37b9c-9d87-4f79-8345-48ed3acac6f3_buggy.java b/tmp/6813c3f6-4091-48ad-92ba-2a869a2b17d8_fixed.java
index 032fa8e..20d8f11 100644
--- a/tmp/50e37b9c-9d87-4f79-8345-48ed3acac6f3_buggy.java
+++ b/tmp/6813c3f6-4091-48ad-92ba-2a869a2b17d8_fixed.java
@@ -1,108 +1,114 @@
     /** Evaluate the impact of the proposed step on the event handler.
      * @param interpolator step interpolator for the proposed step
      * @return true if the event handler triggers an event before
      * the end of the proposed step (this implies the step should be
      * rejected)
      * @exception DerivativeException if the interpolator fails to
      * compute the switching function somewhere within the step
      * @exception EventException if the switching function
      * cannot be evaluated
      * @exception ConvergenceException if an event cannot be located
      */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
+            // direction of integration
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
+            // number of subdivisions to respect max checking interval
             final int    n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h = (t1 - t0) / n;
 
+            // initialize the bracket endpoints
             double ta = t0;
             double ga = g0;
-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+            double tb = t0 + (forward ? convergence : -convergence);
+
             for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
+                // move to the end of the i-th substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
-                // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
-                    // there is a sign change: an event is expected during this step
+                // detect a sign change between ga and gb
+                if ((ga >= 0) ^ (gb >= 0)) {
 
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
+                    // corner case: if ga is very close to zero, shift it
+                    if (Math.abs(ga) <= convergence) {
+                        ta += (forward ? convergence : -convergence);
+                        interpolator.setInterpolatedTime(ta);
+                        ga = handler.g(ta, interpolator.getInterpolatedState());
+                    }
 
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    // record direction of g variation
+                    increasing = (gb >= ga);
 
+                    // build the function for root finding
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
+
+                    // solve for the root within [ta, tb]
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
+                    final double root = (ta <= tb)
+                                      ? solver.solve(f, ta, tb)
+                                      : solver.solve(f, tb, ta);
+
+                    // check if it's the same as a past event, ignore if so
+                    if (Math.abs(root - ta) <= convergence
+                        && Math.abs(root - previousEventTime) <= convergence) {
+                        // ignore this root, continue searching
                         ta = tb;
                         ga = gb;
-                    } else if (Double.isNaN(previousEventTime) ||
-                               (Math.abs(previousEventTime - root) > convergence)) {
+
+                    } else if (Double.isNaN(previousEventTime)
+                               || Math.abs(previousEventTime - root) > convergence) {
+                        // a new event has been found
                         pendingEventTime = root;
-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
-                            // we were already waiting for this event which was
-                            // found during a previous call for a step that was
-                            // rejected, this step must now be accepted since it
-                            // properly ends exactly at the event occurrence
+                        if (pendingEvent
+                            && Math.abs(t1 - pendingEventTime) <= convergence) {
+                            // we were already waiting for this event and now we land on it
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
                         pendingEvent = true;
                         return true;
                     }
 
                 } else {
-                    // no sign change: there is no event for now
+                    // no sign change on this substep, move on
                     ta = tb;
                     ga = gb;
                 }
 
             }
 
-            // no event during the whole step
+            // no event in the entire step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
-        } catch (FunctionEvaluationException e) {
-            final Throwable cause = e.getCause();
-            if ((cause != null) && (cause instanceof DerivativeException)) {
+        } catch (FunctionEvaluationException fee) {
+            final Throwable cause = fee.getCause();
+            if (cause instanceof DerivativeException) {
                 throw (DerivativeException) cause;
-            } else if ((cause != null) && (cause instanceof EventException)) {
+            } else if (cause instanceof EventException) {
                 throw (EventException) cause;
             }
-            throw new EventException(e);
+            throw new EventException(fee);
         }
 
     }
\ No newline at end of file
