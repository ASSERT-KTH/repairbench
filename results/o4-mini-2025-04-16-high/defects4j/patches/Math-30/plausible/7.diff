diff --git a/tmp/f0e7b925-ffca-4088-bccb-cbee66ef1d3e_buggy.java b/tmp/e000ee70-947a-45e3-9db8-c2d9a1969a2a_fixed.java
index 3c69e10..2424c28 100644
--- a/tmp/f0e7b925-ffca-4088-bccb-cbee66ef1d3e_buggy.java
+++ b/tmp/e000ee70-947a-45e3-9db8-c2d9a1969a2a_fixed.java
@@ -1,27 +1,29 @@
 /**
-     * @param Umin smallest Mann-Whitney U value
+ * @param Umin smallest Mann–Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
-     * @return two-sided asymptotic p-value
+ * @return two‐sided asymptotic p-value
  * @throws ConvergenceException if the p-value cannot be computed
  *         due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  *         iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
-
-        final int n1n2prod = n1 * n2;
-
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
-
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
-
-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
-
-        return 2 * standardNormal.cumulativeProbability(z);
+    // mean and variance of U under H0
+    final double n1n2 = (double) n1 * n2;
+    final double meanU = n1n2 / 2.0;
+    final double varU  = n1n2 * (n1 + n2 + 1) / 12.0;
+
+    // standardize
+    final double z = (Umin - meanU) / FastMath.sqrt(varU);
+
+    // two‐sided p‐value = 2 * P(Z >= |z|)
+    final NormalDistribution stdNorm = new NormalDistribution(0, 1);
+    final double tail = stdNorm.cumulativeProbability(-FastMath.abs(z));
+    final double p = 2.0 * tail;
+    // guard against rounding > 1
+    return p > 1.0 ? 1.0 : p;
 }
\ No newline at end of file
