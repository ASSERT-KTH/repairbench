diff --git a/tmp/e3bfb322-0bff-4545-9fb8-684b623e1eec_buggy.java b/tmp/bc2e30fe-39f3-4c9f-813d-e39982a946a5_fixed.java
index 3c69e10..bdb3a8d 100644
--- a/tmp/e3bfb322-0bff-4545-9fb8-684b623e1eec_buggy.java
+++ b/tmp/bc2e30fe-39f3-4c9f-813d-e39982a946a5_fixed.java
@@ -1,27 +1,30 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+    // promote to double immediately to avoid integer overflow
+    final double n1d = n1;
+    final double n2d = n2;
 
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+    // expected value and variance under H0 (no ties)
+    final double EU   = n1d * n2d / 2.0;
+    final double VarU = n1d * n2d * (n1d + n2d + 1.0) / 12.0;
 
+    // standardize
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
-
-        return 2 * standardNormal.cumulativeProbability(z);
+    // two‐sided p‐value = 2 * P(Z ≤ -|z|)
+    final NormalDistribution standardNormal = new NormalDistribution(0.0, 1.0);
+    return 2.0 * standardNormal.cumulativeProbability(-FastMath.abs(z));
 }
\ No newline at end of file
