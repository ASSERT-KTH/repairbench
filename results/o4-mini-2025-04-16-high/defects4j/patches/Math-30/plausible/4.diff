diff --git a/tmp/35cc01ab-d1b8-42c8-bec0-a8189eca49d7_buggy.java b/tmp/42fd6c05-7c3a-4fa1-9df6-696829a23070_fixed.java
index 3c69e10..eebf913 100644
--- a/tmp/35cc01ab-d1b8-42c8-bec0-a8189eca49d7_buggy.java
+++ b/tmp/42fd6c05-7c3a-4fa1-9df6-696829a23070_fixed.java
@@ -1,27 +1,32 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+    // avoid integer overflow by doing the product in double
+    final double n1n2 = (double) n1 * n2;
 
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+    // expected value of U
+    final double EU = n1n2 / 2.0;
+    // variance of U
+    final double VarU = n1n2 * (n1 + n2 + 1) / 12.0;
 
+    // standard normal deviate
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
+    // two‐sided p‐value
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
-
-        return 2 * standardNormal.cumulativeProbability(z);
+    double p = 2 * standardNormal.cumulativeProbability(z);
+    // clamp to [0,1]
+    return p > 1.0 ? 1.0 : (p < 0.0 ? 0.0 : p);
 }
\ No newline at end of file
