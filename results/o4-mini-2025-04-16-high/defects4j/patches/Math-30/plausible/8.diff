diff --git a/tmp/85874177-41fb-41b9-b654-4e87c988d148_buggy.java b/tmp/6fedfc2d-ccdf-4d4d-83ef-4871e37f4453_fixed.java
index 3c69e10..edcca2d 100644
--- a/tmp/85874177-41fb-41b9-b654-4e87c988d148_buggy.java
+++ b/tmp/6fedfc2d-ccdf-4d4d-83ef-4871e37f4453_fixed.java
@@ -1,27 +1,17 @@
-    /**
-     * @param Umin smallest Mann-Whitney U value
-     * @param n1 number of subjects in first sample
-     * @param n2 number of subjects in second sample
-     * @return two-sided asymptotic p-value
-     * @throws ConvergenceException if the p-value can not be computed
-     * due to a convergence error
-     * @throws MaxCountExceededException if the maximum number of
-     * iterations is exceeded
-     */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+    // avoid integer overflow by doing the products in double
+    final double n1n2 = (double) n1 * n2;
 
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+    // Mann–Whitney U normal approximation
+    final double meanU = n1n2 / 2.0;
+    final double varU  = n1n2 * (n1 + n2 + 1.0) / 12.0;
+    final double z     = (Umin - meanU) / FastMath.sqrt(varU);
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
-
-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
-
-        return 2 * standardNormal.cumulativeProbability(z);
+    final NormalDistribution nd = new NormalDistribution(0, 1);
+    // two‐sided p‐value = 2 * Φ(−|z|)
+    return 2.0 * nd.cumulativeProbability(-FastMath.abs(z));
 }
\ No newline at end of file
