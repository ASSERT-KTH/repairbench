diff --git a/tmp/8db6b6bd-2b96-475c-bd71-7cbe6875655b_buggy.java b/tmp/b2826e2e-339a-449b-916c-bd1ef9d8ea5e_fixed.java
index 3c69e10..314f719 100644
--- a/tmp/8db6b6bd-2b96-475c-bd71-7cbe6875655b_buggy.java
+++ b/tmp/b2826e2e-339a-449b-916c-bd1ef9d8ea5e_fixed.java
@@ -1,27 +1,28 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+    // promote to double before multiplying to avoid int overflow
+    final double n1n2 = (double) n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+    final double EU   = n1n2 / 2.0;
+    final double VarU = n1n2 * (n1 + n2 + 1) / 12.0;
 
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
-
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
+    // two‐sided p‐value
     return 2 * standardNormal.cumulativeProbability(z);
 }
\ No newline at end of file
