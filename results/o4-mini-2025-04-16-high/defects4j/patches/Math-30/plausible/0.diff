diff --git a/tmp/4e41e7d0-9ba8-4f46-bdaa-4d292da2b30a_buggy.java b/tmp/a097b171-dc8c-4dfc-bad9-b8b48aced5ba_fixed.java
index 3c69e10..54a4569 100644
--- a/tmp/4e41e7d0-9ba8-4f46-bdaa-4d292da2b30a_buggy.java
+++ b/tmp/a097b171-dc8c-4dfc-bad9-b8b48aced5ba_fixed.java
@@ -1,27 +1,29 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
-
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
-
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
-
-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
-
-        return 2 * standardNormal.cumulativeProbability(z);
+    // expectation and variance of U under H0
+    final double n1n2 = (double) n1 * n2;
+    final double meanU = n1n2 / 2.0;
+    final double varU  = n1n2 * (n1 + n2 + 1) / 12.0;
+    final double sdU   = FastMath.sqrt(varU);
+
+    // z‐score for the smaller U
+    final double z = (Umin - meanU) / sdU;
+
+    // two‐sided p‐value = 2 * P(Z ≥ |z|)
+    final NormalDistribution stdNorm = new NormalDistribution(0, 1);
+    double p = 2.0 * stdNorm.cumulativeProbability(-FastMath.abs(z));
+    return p > 1.0 ? 1.0 : p;
 }
\ No newline at end of file
