diff --git a/tmp/80cfabb1-5dc5-4e0d-828a-b5c5bcfa0a64_buggy.java b/tmp/8289671b-e0d4-4335-b2f7-4bac555c03dc_fixed.java
index d80b7d0..544a647 100644
--- a/tmp/80cfabb1-5dc5-4e0d-828a-b5c5bcfa0a64_buggy.java
+++ b/tmp/8289671b-e0d4-4335-b2f7-4bac555c03dc_fixed.java
@@ -1,61 +1,65 @@
 /**
  * Checks dimensions and values of boundaries and inputSigma if defined.
  */
 private void checkParameters() {
     final double[] init = getStartPoint();
     final double[] lB   = getLowerBound();
     final double[] uB   = getUpperBound();
 
     // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
-            if (!Double.isInfinite(lB[i]) ||
-                !Double.isInfinite(uB[i])) {
+        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {
             hasFiniteBounds = true;
             break;
         }
     }
-        // Checks whether there is at least one infinite bound value.
-        boolean hasInfiniteBounds = false;
+
+    // If we have any finite bounds, we must not mix finite and infinite.
     if (hasFiniteBounds) {
+        boolean hasInfiniteBounds = false;
         for (int i = 0; i < lB.length; i++) {
-                if (Double.isInfinite(lB[i]) ||
-                    Double.isInfinite(uB[i])) {
+            if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {
                 hasInfiniteBounds = true;
                 break;
             }
         }
-
         if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
+            // mixed infinite/finite bounds not supported
             throw new MathUnsupportedOperationException();
         } else {
-                // Convert API to internal handling of boundaries.
+            // store them for internal use
             boundaries = new double[2][];
             boundaries[0] = lB;
             boundaries[1] = uB;
-
-                // Abort early if the normalization will overflow (cf. "encode" method).
+            // Abort early if the normalization range will overflow
+            for (int i = 0; i < lB.length; i++) {
+                double diff = uB[i] - lB[i];
+                if (Double.isInfinite(diff)) {
+                    // range too large to normalize safely
+                    throw new NumberIsTooLargeException(diff, Double.MAX_VALUE, false);
+                }
+            }
         }
     } else {
-            // Convert API to internal handling of boundaries.
         boundaries = null;
     }
 
+    // check sigma if provided
     if (inputSigma != null) {
         if (inputSigma.length != init.length) {
             throw new DimensionMismatchException(inputSigma.length, init.length);
         }
         for (int i = 0; i < init.length; i++) {
             if (inputSigma[i] < 0) {
                 throw new NotPositiveException(inputSigma[i]);
             }
             if (boundaries != null) {
-                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
+                double range = boundaries[1][i] - boundaries[0][i];
+                if (inputSigma[i] > range) {
+                    throw new OutOfRangeException(inputSigma[i], 0, range);
                 }
             }
         }
     }
 }
\ No newline at end of file
