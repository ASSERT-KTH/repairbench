diff --git a/tmp/ebd29e6f-1ea7-448f-9dfc-8969e1f813ad_buggy.java b/tmp/33353816-2307-417f-879b-e7d3ba80f786_fixed.java
index b529d33..bdc2f09 100644
--- a/tmp/ebd29e6f-1ea7-448f-9dfc-8969e1f813ad_buggy.java
+++ b/tmp/33353816-2307-417f-879b-e7d3ba80f786_fixed.java
@@ -1,29 +1,30 @@
 /**
  * Used internally by the Soundex algorithm.
  *
  * Consonants from the same code group separated by W or H are treated as one.
  *
  * @param str
  *            the cleaned working string to encode (in upper case).
  * @param index
  *            the character position to encode
  * @return Mapping code for a particular character
  * @throws IllegalArgumentException
  *             if the character is not mapped
  */
 private char getMappingCode(final String str, final int index) {
     // map() throws IllegalArgumentException
     final char mappedChar = this.map(str.charAt(index));
-        // HW rule check
+    // HW‐rule: if this letter is a code and is preceded by H or W,
+    // only suppress it when the character before the separator has the same code
     if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+        final char sep = str.charAt(index - 1);
+        if (sep == 'H' || sep == 'W') {
+            final char prev = str.charAt(index - 2);
+            if (this.map(prev) == mappedChar) {
+                // suppress duplicate
+                return '0';
             }
         }
     }
     return mappedChar;
 }
\ No newline at end of file
