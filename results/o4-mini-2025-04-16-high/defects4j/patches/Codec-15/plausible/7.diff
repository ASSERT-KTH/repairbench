diff --git a/tmp/60e5fcfd-a765-4aaa-a07f-62eadaabe22a_buggy.java b/tmp/fc04c4a7-ecff-4001-a90a-24cdc8aaa5d1_fixed.java
index b529d33..4bea8f8 100644
--- a/tmp/60e5fcfd-a765-4aaa-a07f-62eadaabe22a_buggy.java
+++ b/tmp/fc04c4a7-ecff-4001-a90a-24cdc8aaa5d1_fixed.java
@@ -1,29 +1,34 @@
 /**
  * Used internally by the Soundex algorithm.
  *
  * Consonants from the same code group separated by W or H are treated as one.
  *
  * @param str
  *            the cleaned working string to encode (in upper case).
  * @param index
  *            the character position to encode
-     * @return Mapping code for a particular character
+ * @return Mapping code for a particular character, or 0 if it must be
+ *         suppressed by the H/W rule
  * @throws IllegalArgumentException
  *             if the character is not mapped
  */
 private char getMappingCode(final String str, final int index) {
     // map() throws IllegalArgumentException
     final char mappedChar = this.map(str.charAt(index));
-        // HW rule check
-        if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
+    // only apply HW‐separator logic to actual codes, not '0' (vowels/etc.)
+    if (mappedChar != '0') {
+        int prev = index - 1;
+        // if the immediately prior character is H or W, skip backward over
+        // any run of H/W and compare the real preceding letter's code
+        if (prev >= 0 && (str.charAt(prev) == 'H' || str.charAt(prev) == 'W')) {
+            while (prev >= 0 && (str.charAt(prev) == 'H' || str.charAt(prev) == 'W')) {
+                prev--;
+            }
+            if (prev >= 0 && this.map(str.charAt(prev)) == mappedChar) {
+                // suppress this code: same group separated only by H/W
                 return 0;
             }
         }
     }
     return mappedChar;
 }
\ No newline at end of file
