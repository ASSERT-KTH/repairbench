diff --git a/tmp/2753b93e-6621-4321-b54f-a3b5fbac46f3_buggy.java b/tmp/56a61909-4d33-4021-a476-ff9e60dbd5c8_fixed.java
index b529d33..aa401a1 100644
--- a/tmp/2753b93e-6621-4321-b54f-a3b5fbac46f3_buggy.java
+++ b/tmp/56a61909-4d33-4021-a476-ff9e60dbd5c8_fixed.java
@@ -1,29 +1,38 @@
 /**
  * Used internally by the Soundex algorithm.
  *
  * Consonants from the same code group separated by W or H are treated as one.
  *
  * @param str
  *                  the cleaned working string to encode (in upper case).
  * @param index
  *                  the character position to encode
-     * @return Mapping code for a particular character
+ * @return Mapping code for a particular character, or 0 to indicate "skip"
  * @throws IllegalArgumentException
  *                  if the character is not mapped
  */
 private char getMappingCode(final String str, final int index) {
-        // map() throws IllegalArgumentException
+    // map() may throw IllegalArgumentException for unsupported chars
     final char mappedChar = this.map(str.charAt(index));
-        // HW rule check
-        if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
+    // apply the HW‐rule only for consonants (i.e. mappedChar != '0') and if there's room to look back
+    if (mappedChar != '0' && index > 1) {
+        // if the immediately preceding character is H or W
+        char sep = str.charAt(index - 1);
+        if (sep == 'H' || sep == 'W') {
+            // walk back past any chain of H/W
+            int prevIdx = index - 2;
+            while (prevIdx >= 0 && (str.charAt(prevIdx) == 'H' || str.charAt(prevIdx) == 'W')) {
+                prevIdx--;
+            }
+            // if we found a real consonant/vowel before the H/W chain
+            if (prevIdx >= 0) {
+                char prevCode = this.map(str.charAt(prevIdx));
+                // if it maps to the same code, treat as the same group ⇒ skip this one
+                if (prevCode == mappedChar) {
                     return 0;
                 }
             }
         }
+    }
     return mappedChar;
 }
\ No newline at end of file
