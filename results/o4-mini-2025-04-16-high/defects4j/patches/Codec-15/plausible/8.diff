diff --git a/tmp/c2f3f78b-7183-4071-9213-19b558591d86_buggy.java b/tmp/02307de9-7dc7-43eb-873a-f109a2589a44_fixed.java
index b529d33..964290e 100644
--- a/tmp/c2f3f78b-7183-4071-9213-19b558591d86_buggy.java
+++ b/tmp/02307de9-7dc7-43eb-873a-f109a2589a44_fixed.java
@@ -1,29 +1,20 @@
-    /**
-     * Used internally by the Soundex algorithm.
-     *
-     * Consonants from the same code group separated by W or H are treated as one.
-     *
-     * @param str
-     *                  the cleaned working string to encode (in upper case).
-     * @param index
-     *                  the character position to encode
-     * @return Mapping code for a particular character
-     * @throws IllegalArgumentException
-     *                  if the character is not mapped
-     */
 private char getMappingCode(final String str, final int index) {
     // map() throws IllegalArgumentException
     final char mappedChar = this.map(str.charAt(index));
-        // HW rule check
-        if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
+    // if this char has a valid code and is preceded by H or W, apply the HW rule
+    if (mappedChar != '0' && index > 1) {
+        char prev = str.charAt(index - 1);
+        if (prev == 'H' || prev == 'W') {
+            // skip all H/W separators to find the preceding consonant
+            int j = index - 2;
+            while (j >= 0 && (str.charAt(j) == 'H' || str.charAt(j) == 'W')) {
+                j--;
+            }
+            // if that consonant has the same code, suppress this one
+            if (j >= 0 && this.map(str.charAt(j)) == mappedChar) {
                 return 0;
             }
         }
     }
     return mappedChar;
 }
\ No newline at end of file
