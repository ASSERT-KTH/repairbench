diff --git a/tmp/3f205b13-0434-4d32-b482-d0e5f153eefb_buggy.java b/tmp/d1a2fdaa-33e7-47d0-a27e-89ac4f95f931_fixed.java
index b529d33..6a16363 100644
--- a/tmp/3f205b13-0434-4d32-b482-d0e5f153eefb_buggy.java
+++ b/tmp/d1a2fdaa-33e7-47d0-a27e-89ac4f95f931_fixed.java
@@ -1,29 +1,33 @@
 /**
  * Used internally by the Soundex algorithm.
  *
  * Consonants from the same code group separated by W or H are treated as one.
  *
  * @param str
  *                  the cleaned working string to encode (in upper case).
  * @param index
  *                  the character position to encode
  * @return Mapping code for a particular character
  * @throws IllegalArgumentException
  *                  if the character is not mapped
  */
 private char getMappingCode(final String str, final int index) {
     // map() throws IllegalArgumentException
     final char mappedChar = this.map(str.charAt(index));
     // HW rule check
     if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
+        final char prev = str.charAt(index - 1);
+        if (prev == 'H' || prev == 'W') {
+            // skip any additional H/W
+            int pos = index - 2;
+            while (pos >= 0 && (str.charAt(pos) == 'H' || str.charAt(pos) == 'W')) {
+                pos--;
+            }
+            if (pos >= 0 && this.map(str.charAt(pos)) == mappedChar) {
+                // same code separated only by H/W â†’ skip
                 return 0;
             }
         }
     }
     return mappedChar;
 }
\ No newline at end of file
