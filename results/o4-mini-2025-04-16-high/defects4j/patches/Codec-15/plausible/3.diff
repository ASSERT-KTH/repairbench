diff --git a/tmp/863d4a01-5b30-4974-9129-f0bc80dcdcad_buggy.java b/tmp/b63e5554-218f-4b2c-87c1-0c3901f9765f_fixed.java
index b529d33..37cf508 100644
--- a/tmp/863d4a01-5b30-4974-9129-f0bc80dcdcad_buggy.java
+++ b/tmp/b63e5554-218f-4b2c-87c1-0c3901f9765f_fixed.java
@@ -1,29 +1,33 @@
 /**
  * Used internally by the Soundex algorithm.
  *
  * Consonants from the same code group separated by W or H are treated as one.
  *
  * @param str
  *                  the cleaned working string to encode (in upper case).
  * @param index
  *                  the character position to encode
-     * @return Mapping code for a particular character
+ * @return Mapping code for a particular character (or 0 to suppress)
  * @throws IllegalArgumentException
  *                  if the character is not mapped
  */
 private char getMappingCode(final String str, final int index) {
-        // map() throws IllegalArgumentException
+    // map() throws IllegalArgumentException for invalid chars
     final char mappedChar = this.map(str.charAt(index));
-        // HW rule check
-        if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
+    // apply the HW‐rule: if current char has a non‐zero code and is
+    // immediately preceded by H or W, skip back over any H/W run
+    // to find the last real letter; if that letter maps to the same
+    // code, suppress this one.
+    if (mappedChar != '0' && index > 1
+        && (str.charAt(index - 1) == 'H' || str.charAt(index - 1) == 'W')) {
+        int scan = index - 2;
+        // skip any chain of H/W
+        while (scan >= 0 && (str.charAt(scan) == 'H' || str.charAt(scan) == 'W')) {
+            scan--;
+        }
+        if (scan >= 0 && this.map(str.charAt(scan)) == mappedChar) {
             return 0;
         }
     }
-        }
     return mappedChar;
 }
\ No newline at end of file
