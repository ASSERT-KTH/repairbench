diff --git a/tmp/3c2c9697-d88f-481e-a479-548d2ea5da60_buggy.java b/tmp/56d107ba-05e6-46ec-8324-e8c9b9922ffb_fixed.java
index 388771b..efefca1 100644
--- a/tmp/3c2c9697-d88f-481e-a479-548d2ea5da60_buggy.java
+++ b/tmp/56d107ba-05e6-46ec-8324-e8c9b9922ffb_fixed.java
@@ -1,37 +1,41 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
+        // clone all of the non-data fields
         TimeSeries copy = (TimeSeries) super.clone();
+        // clear out the cloned data and reset the range bounds
         copy.data = new java.util.ArrayList();
-        if (this.data.size() > 0) {
+        copy.minY = Double.NaN;
+        copy.maxY = Double.NaN;
+        // copy the requested subset of items
         for (int index = start; index <= end; index++) {
             TimeSeriesDataItem item
                     = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
             }
             catch (SeriesException e) {
+                // this should not happen for a simple copy
                 e.printStackTrace();
             }
         }
-        }
         return copy;
     }
\ No newline at end of file
