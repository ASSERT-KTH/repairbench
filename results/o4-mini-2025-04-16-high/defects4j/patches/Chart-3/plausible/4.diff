diff --git a/tmp/f9578d40-276e-4529-9a8b-efb57d52b4dc_buggy.java b/tmp/bcf14b6c-fc73-4106-98f5-4dfb64d1f064_fixed.java
index 388771b..d5ee9cc 100644
--- a/tmp/f9578d40-276e-4529-9a8b-efb57d52b4dc_buggy.java
+++ b/tmp/bcf14b6c-fc73-4106-98f5-4dfb64d1f064_fixed.java
@@ -1,37 +1,44 @@
 /**
  * Creates a new timeseries by copying a subset of the data in this time
  * series.
  *
  * @param start  the index of the first time period to copy.
  * @param end    the index of the last time period to copy.
  *
  * @return A series containing a copy of this times series from start until
  *         end.
  *
  * @throws CloneNotSupportedException if there is a cloning problem.
  */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
+
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
+
+    // do a shallow clone of all the settings
     TimeSeries copy = (TimeSeries) super.clone();
+
+    // reset the data list and the range bounds
     copy.data = new java.util.ArrayList();
-        if (this.data.size() > 0) {
-            for (int index = start; index <= end; index++) {
-                TimeSeriesDataItem item
-                        = (TimeSeriesDataItem) this.data.get(index);
+    copy.minY = Double.POSITIVE_INFINITY;
+    copy.maxY = Double.NEGATIVE_INFINITY;
+
+    // copy the selected items
+    for (int i = start; i <= end && i < this.data.size(); i++) {
+        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);
         TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
         try {
             copy.add(clone);
         }
         catch (SeriesException e) {
+            // should not happen for a fresh clone
             e.printStackTrace();
         }
     }
-        }
     return copy;
 }
\ No newline at end of file
