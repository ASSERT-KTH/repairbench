diff --git a/tmp/6250cdd0-605a-43cf-b67b-f01ce3081ab5_buggy.java b/tmp/6f45fa9d-13aa-4b04-858c-bb4437727a66_fixed.java
index 388771b..4bd0b20 100644
--- a/tmp/6250cdd0-605a-43cf-b67b-f01ce3081ab5_buggy.java
+++ b/tmp/6f45fa9d-13aa-4b04-858c-bb4437727a66_fixed.java
@@ -1,37 +1,29 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
+    // clone the series (copies all settings, including old min/max)
     TimeSeries copy = (TimeSeries) super.clone();
+    // clear out the old data
     copy.data = new java.util.ArrayList();
-        if (this.data.size() > 0) {
-            for (int index = start; index <= end; index++) {
-                TimeSeriesDataItem item
-                        = (TimeSeriesDataItem) this.data.get(index);
-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
+    // reset the cached Y‐bounds so they will be recomputed
+    copy.minY = Double.NaN;
+    copy.maxY = Double.NaN;
+    // now copy the requested items
+    for (int i = start; i <= end && i < this.data.size(); i++) {
+        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);
+        TimeSeriesDataItem clonedItem = (TimeSeriesDataItem) item.clone();
         try {
-                    copy.add(clone);
+            copy.add(clonedItem);
         } 
         catch (SeriesException e) {
+            // shouldn't happen; if it does, just print the stack trace
             e.printStackTrace();
         }
     }
-        }
     return copy;
 }
\ No newline at end of file
