diff --git a/tmp/16edd01b-a862-44c2-aa4d-ee28026a7cea_buggy.java b/tmp/253f7c5a-a8d5-44a5-b2b1-67289cddf61e_fixed.java
index 3002587..9879bfd 100644
--- a/tmp/16edd01b-a862-44c2-aa4d-ee28026a7cea_buggy.java
+++ b/tmp/253f7c5a-a8d5-44a5-b2b1-67289cddf61e_fixed.java
@@ -1,10 +1,32 @@
-    /**
-     * Fits a Gaussian function to the observed points.
-     *
-     * @return the parameters of the Gaussian function that best fits the
-     * observed points (in the same order as above).
-     */
+@Override
 public double[] fit() {
-        final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // Initial guess for [amplitude, mean, sigma]
+    final double[] guess = new ParameterGuesser(getObservations()).guess();
+    // Underlying Gaussian.Parametric which may throw on σ≤0
+    final Gaussian.Parametric base = new Gaussian.Parametric();
+    // A "safe" wrapper that catches those exceptions and returns NaN
+    final Gaussian.Parametric safe = new Gaussian.Parametric() {
+        @Override
+        public double value(double x, double[] parameters) {
+            try {
+                return base.value(x, parameters);
+            } catch (Exception ex) {
+                // if σ≤0 (or any other problem), return NaN so optimizer can continue
+                return Double.NaN;
+            }
+        }
+        @Override
+        public double[] gradient(double x, double[] parameters) {
+            try {
+                return base.gradient(x, parameters);
+            } catch (Exception ex) {
+                // likewise, return a NaN‐filled gradient
+                double[] g = new double[parameters.length];
+                java.util.Arrays.fill(g, Double.NaN);
+                return g;
+            }
+        }
+    };
+    // Perform the fit with the safe wrapper
+    return fit(safe, guess);
 }
\ No newline at end of file
