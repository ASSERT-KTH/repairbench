diff --git a/tmp/381cb9a5-d9de-4dd9-bd13-dafbbee2a29e_buggy.java b/tmp/0865125b-1a0c-4ed9-91b2-cdd2697926fd_fixed.java
index 3002587..8dcceca 100644
--- a/tmp/381cb9a5-d9de-4dd9-bd13-dafbbee2a29e_buggy.java
+++ b/tmp/0865125b-1a0c-4ed9-91b2-cdd2697926fd_fixed.java
@@ -1,10 +1,38 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
+@Override
 public double[] fit() {
-        final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // compute a first guess for [amplitude, mean, sigma]
+    final double[] guess = new ParameterGuesser(getObservations()).guess();
+
+    // wrap the Gaussian.Parametric so that any X<=0 sigma trial
+    // does not throw, but returns NaN instead
+    final ParametricUnivariateFunction base = new Gaussian.Parametric();
+    final ParametricUnivariateFunction safeModel = new ParametricUnivariateFunction() {
+        @Override
+        public double value(double x, double... p) {
+            try {
+                return base.value(x, p);
+            } catch (RuntimeException ex) {
+                return Double.NaN;
+            }
+        }
+        @Override
+        public double[] gradient(double x, double... p) {
+            try {
+                return base.gradient(x, p);
+            } catch (RuntimeException ex) {
+                double[] g = new double[p.length];
+                java.util.Arrays.fill(g, Double.NaN);
+                return g;
+            }
+        }
+    };
+
+    // run the optimizer on the wrapped model
+    return fit(safeModel, guess);
 }
\ No newline at end of file
