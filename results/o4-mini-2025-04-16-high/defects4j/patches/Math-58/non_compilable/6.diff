diff --git a/tmp/934736ac-1e8f-4ab9-9fc1-30f3840f713a_buggy.java b/tmp/e03b3606-7290-4846-9d61-cdcd1f18d91d_fixed.java
index 3002587..6b7a04d 100644
--- a/tmp/934736ac-1e8f-4ab9-9fc1-30f3840f713a_buggy.java
+++ b/tmp/e03b3606-7290-4846-9d61-cdcd1f18d91d_fixed.java
@@ -1,10 +1,41 @@
 /**
-     * Fits a Gaussian function to the observed points.
+ * Fits a Gaussian function to the observed points, re‐parameterizing σ = exp(s)
+ * so that during optimization σ never becomes non‐positive.
  *
-     * @return the parameters of the Gaussian function that best fits the
-     * observed points (in the same order as above).
+ * @return the parameters [amplitude, mean, sigma] of the best‐fit Gaussian.
  */
 public double[] fit() {
-        final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // 1) get the usual [A, μ, σ] initial guess
+    final double[] guess = new ParameterGuesser(getObservations()).guess();
+
+    // 2) reparameterize σ → s = ln(σ)
+    guess[2] = Math.log(guess[2]);
+
+    // 3) wrap the Gaussian so that the optimizer works in [A, μ, s] space
+    final ParametricRealFunction logSpaceGaussian = new ParametricRealFunction() {
+        private final Gaussian.Parametric base = new Gaussian.Parametric();
+
+        @Override
+        public double value(double x, double[] p) {
+            // p = [A, μ, s], we recover σ = e^s
+            double sigma = Math.exp(p[2]);
+            return base.value(x, new double[] { p[0], p[1], sigma });
+        }
+
+        @Override
+        public double[] gradient(double x, double[] p) {
+            // base.gradient gives [∂/∂A, ∂/∂μ, ∂/∂σ]
+            double sigma = Math.exp(p[2]);
+            double[] g = base.gradient(x, new double[] { p[0], p[1], sigma });
+            // chain‐rule: ∂/∂s = (∂σ/∂s)·(∂/∂σ) = σ·(∂/∂σ)
+            return new double[] { g[0], g[1], g[2] * sigma };
+        }
+    };
+
+    // 4) run the fitter in [A, μ, s] space
+    double[] sol = fit(logSpaceGaussian, guess);
+
+    // 5) transform the final s back to σ
+    sol[2] = Math.exp(sol[2]);
+    return sol;
 }
\ No newline at end of file
