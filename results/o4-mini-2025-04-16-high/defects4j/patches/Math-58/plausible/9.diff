diff --git a/tmp/7d465f01-362b-41c9-b6cd-869b86f80642_buggy.java b/tmp/d9fca0c3-520e-41a4-952c-a957a54799bb_fixed.java
index 3002587..917dd97 100644
--- a/tmp/7d465f01-362b-41c9-b6cd-869b86f80642_buggy.java
+++ b/tmp/d9fca0c3-520e-41a4-952c-a957a54799bb_fixed.java
@@ -1,10 +1,38 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
-        final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    final double[] guess = new ParameterGuesser(getObservations()).guess();
+
+    // wrap the standard Gaussian parametrization so that
+    // any invalid (e.g. non‚Äêpositive sigma) trials just return NaN
+    final Gaussian.Parametric base = new Gaussian.Parametric();
+    ParametricUnivariateRealFunction safeFunc =
+        new ParametricUnivariateRealFunction() {
+            @Override
+            public double value(double x, double[] p) {
+                try {
+                    return base.value(x, p);
+                } catch (RuntimeException ex) {
+                    return Double.NaN;
+                }
+            }
+            @Override
+            public double[] gradient(double x, double[] p) {
+                try {
+                    return base.gradient(x, p);
+                } catch (RuntimeException ex) {
+                    double[] g = new double[p.length];
+                    for (int i = 0; i < g.length; i++) {
+                        g[i] = Double.NaN;
+                    }
+                    return g;
+                }
+            }
+        };
+
+    return fit(safeFunc, guess);
 }
\ No newline at end of file
