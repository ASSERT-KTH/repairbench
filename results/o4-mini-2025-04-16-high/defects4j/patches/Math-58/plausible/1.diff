diff --git a/tmp/512e990a-d963-495c-8749-b3d13cfca25b_buggy.java b/tmp/2215e579-d8c7-4143-8422-83f556e245fa_fixed.java
index 3002587..9c12873 100644
--- a/tmp/512e990a-d963-495c-8749-b3d13cfca25b_buggy.java
+++ b/tmp/2215e579-d8c7-4143-8422-83f556e245fa_fixed.java
@@ -1,10 +1,36 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // wrap the Gaussian.Parametric to catch non‚Äêpositive sigma exceptions
+    final Gaussian.Parametric original = new Gaussian.Parametric();
+    ParametricUnivariateRealFunction safeFunc = new ParametricUnivariateRealFunction() {
+        @Override
+        public double value(double x, double... p) {
+            try {
+                return original.value(x, p);
+            } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
+                // if sigma <= 0, signal an invalid evaluation
+                return Double.NaN;
+            }
+        }
+        @Override
+        public double[] gradient(double x, double... p) {
+            try {
+                return original.gradient(x, p);
+            } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
+                // if sigma <= 0, signal invalid derivatives
+                double[] nanGrad = new double[p.length];
+                for (int i = 0; i < nanGrad.length; i++) {
+                    nanGrad[i] = Double.NaN;
+                }
+                return nanGrad;
+            }
+        }
+    };
+    return fit(safeFunc, guess);
 }
\ No newline at end of file
