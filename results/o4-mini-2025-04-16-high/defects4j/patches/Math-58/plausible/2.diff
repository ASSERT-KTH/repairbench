diff --git a/tmp/bde52c63-841b-421f-8306-0431e09a8cef_buggy.java b/tmp/571ba789-ea16-4071-9eb3-4b8d9f8b2f93_fixed.java
index 3002587..76a7461 100644
--- a/tmp/bde52c63-841b-421f-8306-0431e09a8cef_buggy.java
+++ b/tmp/571ba789-ea16-4071-9eb3-4b8d9f8b2f93_fixed.java
@@ -1,10 +1,36 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
-        final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // get the initial guess
+    final double[] guess = new ParameterGuesser(getObservations()).guess();
+    // wrap the Gaussian parametric so that any illegal σ≤0 or a≤0
+    // does not abort the fit but returns NaN values
+    final Gaussian.Parametric safeParam = new Gaussian.Parametric() {
+        @Override
+        public double value(double x, double... p) {
+            try {
+                return super.value(x, p);
+            } catch (Exception ex) {
+                return Double.NaN;
+            }
+        }
+        @Override
+        public double[] gradient(double x, double... p) {
+            try {
+                return super.gradient(x, p);
+            } catch (Exception ex) {
+                double[] g = new double[p.length];
+                for (int i = 0; i < g.length; i++) {
+                    g[i] = Double.NaN;
+                }
+                return g;
+            }
+        }
+    };
+    // perform the fit with the safe parametric function
+    return fit(safeParam, guess);
 }
\ No newline at end of file
