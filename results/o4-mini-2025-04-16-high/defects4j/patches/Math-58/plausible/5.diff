diff --git a/tmp/b476824d-6ec2-41dc-bb1b-423f5844fe46_buggy.java b/tmp/b24a72b8-8ac8-4ef0-a60b-7aeaa5e1cbc2_fixed.java
index 3002587..d086760 100644
--- a/tmp/b476824d-6ec2-41dc-bb1b-423f5844fe46_buggy.java
+++ b/tmp/b24a72b8-8ac8-4ef0-a60b-7aeaa5e1cbc2_fixed.java
@@ -1,10 +1,35 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
-        final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        // wrap the Gaussian.Parametric so that any non‐positive sigma
+        // doesn’t throw but returns NaN, allowing the optimizer to reject
+        // those trial steps rather than aborting outright
+        final Gaussian.Parametric base = new Gaussian.Parametric();
+        final ParametricUnivariateRealFunction safe =
+            new ParametricUnivariateRealFunction() {
+                public double value(double x, double[] p) {
+                    try {
+                        return base.value(x, p);
+                    } catch (NotStrictlyPositiveException e) {
+                        return Double.NaN;
+                    }
+                }
+                public double[] gradient(double x, double[] p) {
+                    try {
+                        return base.gradient(x, p);
+                    } catch (NotStrictlyPositiveException e) {
+                        double[] g = new double[p.length];
+                        for (int i = 0; i < g.length; i++) {
+                            g[i] = Double.NaN;
+                        }
+                        return g;
+                    }
+                }
+            };
+        final double[] guess = new ParameterGuesser(getObservations()).guess();
+        return fit(safe, guess);
     }
\ No newline at end of file
