diff --git a/tmp/eaae2818-9d0e-4520-b758-8d6c08504d35_buggy.java b/tmp/78d9a600-a3da-4b67-b7c3-355957b62b4a_fixed.java
index 3002587..e62d393 100644
--- a/tmp/eaae2818-9d0e-4520-b758-8d6c08504d35_buggy.java
+++ b/tmp/78d9a600-a3da-4b67-b7c3-355957b62b4a_fixed.java
@@ -1,10 +1,36 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
+    // compute an initial guess for [norm, mean, sigma]
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // the "true" Gaussian function that may throw on sigma<=0
+    final ParametricUnivariateRealFunction gauss = new Gaussian.Parametric();
+    // wrap it so that any NotStrictlyPositiveException is caught
+    // and converted to NaN, allowing the optimizer to continue
+    ParametricUnivariateRealFunction safeGauss =
+        new ParametricUnivariateRealFunction() {
+            public double value(double x, double[] p) {
+                try {
+                    return gauss.value(x, p);
+                } catch (NotStrictlyPositiveException ex) {
+                    return Double.NaN;
+                }
+            }
+            public double[] gradient(double x, double[] p) {
+                try {
+                    return gauss.gradient(x, p);
+                } catch (NotStrictlyPositiveException ex) {
+                    double[] g = new double[p.length];
+                    for (int i = 0; i < g.length; i++) {
+                        g[i] = Double.NaN;
+                    }
+                    return g;
+                }
+            }
+        };
+    return fit(safeGauss, guess);
 }
\ No newline at end of file
