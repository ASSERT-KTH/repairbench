diff --git a/tmp/6c95d28d-8e00-4657-9990-b8b3a065f2f9_buggy.java b/tmp/ebe8d730-887d-4679-95cc-d33261d8aebf_fixed.java
index 3002587..2542b18 100644
--- a/tmp/6c95d28d-8e00-4657-9990-b8b3a065f2f9_buggy.java
+++ b/tmp/ebe8d730-887d-4679-95cc-d33261d8aebf_fixed.java
@@ -1,10 +1,36 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
-        final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // initial guess from the observations
+    final double[] guess = new ParameterGuesser(getObservations()).guess();
+    // the original (throws on non-positive sigma)
+    final ParametricUnivariateRealFunction original = new Gaussian.Parametric();
+    // a safe wrapper that catches exceptions and returns NaN
+    final ParametricUnivariateRealFunction safe =
+        new ParametricUnivariateRealFunction() {
+            @Override
+            public double value(double x, double... parameters) {
+                try {
+                    return original.value(x, parameters);
+                } catch (RuntimeException ex) {
+                    return Double.NaN;
+                }
+            }
+            @Override
+            public double[] gradient(double x, double... parameters) {
+                try {
+                    return original.gradient(x, parameters);
+                } catch (RuntimeException ex) {
+                    double[] nan = new double[parameters.length];
+                    java.util.Arrays.fill(nan, Double.NaN);
+                    return nan;
+                }
+            }
+        };
+    // perform the fit using the safe version
+    return fit(safe, guess);
 }
\ No newline at end of file
