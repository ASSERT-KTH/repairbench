diff --git a/tmp/bb4c9d74-6e6d-48a5-b5aa-3b9d3fb8bf55_buggy.java b/tmp/7ec390ee-388f-4525-98b3-666d87f4532c_fixed.java
index d666a67..e54b6d5 100644
--- a/tmp/bb4c9d74-6e6d-48a5-b5aa-3b9d3fb8bf55_buggy.java
+++ b/tmp/7ec390ee-388f-4525-98b3-666d87f4532c_fixed.java
@@ -1,36 +1,35 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
 private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
-        if (count > maxStringCacheLen)
+    // guard against zero or negative lengths
+    if (count <= 0) {
+        return "";
+    }
+
+    // too long to cache
+    if (count > maxStringCacheLen) {
         return new String(charBuf, start, count);
+    }
 
-        // calculate hash:
+    // compute hash
     int hash = 0;
     int offset = start;
     for (int i = 0; i < count; i++) {
         hash = 31 * hash + charBuf[offset++];
     }
 
-        // get from cache
-        final int index = hash & stringCache.length - 1;
+    // locate in cache
+    final int index = hash & (stringCache.length - 1);
     String cached = stringCache[index];
 
-        if (cached == null) { // miss, add
+    if (cached != null) {
+        // hash hit: verify contents
+        if (rangeEquals(charBuf, start, count, cached)) {
+            return cached;
+        }
+        // else: conflict, fall through to replace
+    }
+
+    // miss or conflict: create new and store
     cached = new String(charBuf, start, count);
     stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
-                return cached;
-            } else { // hashcode conflict
-                cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
-            }
-        }
     return cached;
 }
\ No newline at end of file
