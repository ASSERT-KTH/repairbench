diff --git a/tmp/205a8a49-0194-42b0-9a11-4ffa48870b61_buggy.java b/tmp/c4413968-8ae7-4ae6-8001-73d887db58a7_fixed.java
index d666a67..84c3416 100644
--- a/tmp/205a8a49-0194-42b0-9a11-4ffa48870b61_buggy.java
+++ b/tmp/c4413968-8ae7-4ae6-8001-73d887db58a7_fixed.java
@@ -1,36 +1,36 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
 private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
-        if (count > maxStringCacheLen)
+    // nothing to cache (or invalid request) – return empty
+    if (count <= 0) {
+        return "";
+    }
+    // too long – don't bother caching
+    if (count > maxStringCacheLen) {
         return new String(charBuf, start, count);
+    }
 
-        // calculate hash:
+    // compute a little hash
     int hash = 0;
     int offset = start;
     for (int i = 0; i < count; i++) {
         hash = 31 * hash + charBuf[offset++];
     }
 
-        // get from cache
-        final int index = hash & stringCache.length - 1;
+    // mask into the cache
+    final int index = hash & (stringCache.length - 1);
     String cached = stringCache[index];
-
-        if (cached == null) { // miss, add
+    if (cached == null) {
+        // miss: create & store
         cached = new String(charBuf, start, count);
         stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
+    } else {
+        // hit or collision?
+        if (rangeEquals(charBuf, start, count, cached)) {
+            // exact match
             return cached;
-            } else { // hashcode conflict
-                cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
         }
+        // collision – overwrite with this one
+        cached = new String(charBuf, start, count);
+        stringCache[index] = cached;
     }
     return cached;
 }
\ No newline at end of file
