diff --git a/tmp/e101a6f9-a338-4b42-896b-554bf915a471_buggy.java b/tmp/e77d6f97-7d73-4051-bbbe-4427e624b12b_fixed.java
index d666a67..ca77fb3 100644
--- a/tmp/e101a6f9-a338-4b42-896b-554bf915a471_buggy.java
+++ b/tmp/e77d6f97-7d73-4051-bbbe-4427e624b12b_fixed.java
@@ -1,36 +1,31 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
 private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
-        if (count > maxStringCacheLen)
+    // nothing to do for empty or negative length
+    if (count <= 0) {
+        return "";
+    }
+
+    // too long: skip cache
+    if (count > maxStringCacheLen) {
         return new String(charBuf, start, count);
+    }
 
-        // calculate hash:
+    // compute hash over the range
     int hash = 0;
-        int offset = start;
-        for (int i = 0; i < count; i++) {
-            hash = 31 * hash + charBuf[offset++];
+    for (int i = start, end = start + count; i < end; i++) {
+        hash = 31 * hash + charBuf[i];
     }
 
-        // get from cache
-        final int index = hash & stringCache.length - 1;
+    // mask into cache
+    int index = hash & (stringCache.length - 1);
     String cached = stringCache[index];
 
-        if (cached == null) { // miss, add
-            cached = new String(charBuf, start, count);
-            stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
+    // if hit and equal, return the cached instance
+    if (cached != null && rangeEquals(charBuf, start, count, cached)) {
         return cached;
-            } else { // hashcode conflict
-                cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
     }
-        }
-        return cached;
+
+    // miss or conflict: create, cache and return
+    String result = new String(charBuf, start, count);
+    stringCache[index] = result;
+    return result;
 }
\ No newline at end of file
