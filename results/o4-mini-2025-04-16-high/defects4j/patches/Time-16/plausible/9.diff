diff --git a/tmp/0795658d-b301-4c1a-a77a-b0c252e9d5d9_buggy.java b/tmp/273a9727-5b5a-4aee-a18e-1b93ccc6b046_fixed.java
index b9f1241..3b313c5 100644
--- a/tmp/0795658d-b301-4c1a-a77a-b0c252e9d5d9_buggy.java
+++ b/tmp/273a9727-5b5a-4aee-a18e-1b93ccc6b046_fixed.java
@@ -1,60 +1,38 @@
-    /**
-     * Parses a datetime from the given text, at the given position, saving the
-     * result into the fields of the given ReadWritableInstant. If the parse
-     * succeeds, the return value is the new text position. Note that the parse
-     * may succeed without fully reading the text and in this case those fields
-     * that were read will be set.
-     * <p>
-     * Only those fields present in the string will be changed in the specified
-     * instant. All other fields will remain unaltered. Thus if the string only
-     * contains a year and a month, then the day and time will be retained from
-     * the input instant. If this is not the behaviour you want, then reset the
-     * fields before calling this method, or use {@link #parseDateTime(String)}
-     * or {@link #parseMutableDateTime(String)}.
-     * <p>
-     * If it fails, the return value is negative, but the instant may still be
-     * modified. To determine the position where the parse failed, apply the
-     * one's complement operator (~) on the return value.
-     * <p>
-     * This parse method ignores the {@link #getDefaultYear() default year} and
-     * parses using the year from the supplied instant as the default.
-     * <p>
-     * The parse will use the chronology of the instant.
-     *
-     * @param instant  an instant that will be modified, not null
-     * @param text  the text to parse
-     * @param position  position to start parsing from
-     * @return new position, negative value means parse failed -
-     *  apply complement operator (~) to get position of failure
-     * @throws UnsupportedOperationException if parsing is not supported
-     * @throws IllegalArgumentException if the instant is null
-     * @throws IllegalArgumentException if any field is out of range
-     */
 public int parseInto(ReadWritableInstant instant, String text, int position) {
     DateTimeParser parser = requireParser();
     if (instant == null) {
         throw new IllegalArgumentException("Instant must not be null");
     }
-        
+    // Capture the base instant and chronology
     long instantMillis = instant.getMillis();
-        Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
+    Chronology baseChrono = instant.getChronology();
+    // Convert to local millis for parsing
+    long instantLocal = instantMillis + baseChrono.getZone().getOffset(instantMillis);
+    // Apply any forced chronology from the formatter
+    Chronology chrono = selectChronology(baseChrono);
+    // For parseInto we ignore iDefaultYear and use the year of the supplied instant
+    int defaultYear = baseChrono.year().get(instantMillis);
+
+    DateTimeParserBucket bucket =
+        new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, defaultYear);
 
-        DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
     int newPos = parser.parseInto(bucket, text, position);
+    // Compute the new millis and update the instant
     instant.setMillis(bucket.computeMillis(false, text));
+
+    // Handle parsed offset or zone
     if (iOffsetParsed && bucket.getOffsetInteger() != null) {
-            int parsedOffset = bucket.getOffsetInteger();
-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
+        int off = bucket.getOffsetInteger();
+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(off);
         chrono = chrono.withZone(parsedZone);
     } else if (bucket.getZone() != null) {
         chrono = chrono.withZone(bucket.getZone());
     }
     instant.setChronology(chrono);
+
+    // Finally apply any forced zone from the formatter
     if (iZone != null) {
         instant.setZone(iZone);
     }
     return newPos;
 }
\ No newline at end of file
