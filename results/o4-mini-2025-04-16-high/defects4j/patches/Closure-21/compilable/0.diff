diff --git a/tmp/c174aa63-0ab0-42eb-89b0-78059b45d28f_buggy.java b/tmp/8cae04d1-cf34-4c8b-b534-1b49d126f233_fixed.java
index 49a5702..4f02dab 100644
--- a/tmp/c174aa63-0ab0-42eb-89b0-78059b45d28f_buggy.java
+++ b/tmp/8cae04d1-cf34-4c8b-b534-1b49d126f233_fixed.java
@@ -1,66 +1,84 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+  // Skip comma‐operator nodes completely; we handle their children.
+  if (n.isComma()) {
+    return;
+  }
+
+  // EMPTY statements (extra semicolons) are only benign at BLOCK or SCRIPT level.
+  if (n.isEmpty()) {
+    if (parent != null &&
+        (parent.getType() == Token.BLOCK ||
+         parent.getType() == Token.SCRIPT)) {
+      // allow stray semicolons in blocks or at top‐level
+      return;
+    }
+    // Otherwise (e.g. empty statement as an if‐body), report it.
+    t.getCompiler().report(
+        t.makeError(n, level, USELESS_CODE_ERROR,
+            "This code lacks side-effects. Is there a bug?"));
     return;
   }
 
   if (parent == null) {
     return;
   }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+  // We don't touch bare EXPR_RESULT nodes or block nodes here.
   if (n.isExprResult()) {
     return;
   }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
+  // Preserve QUALIFIED_NAME nodes that carry JSDoc.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
   if (parent.getType() == Token.COMMA) {
+    // In a comma-expression context, only the very last child can be "used."
     if (isResultUsed) {
       return;
     }
     if (n == parent.getLastChild()) {
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
         if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {
+          return;
+        } else {
+          break;
+        }
       }
     }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+  } else if (parent.getType() != Token.EXPR_RESULT
+             && parent.getType() != Token.BLOCK) {
+    // Only allow un‐used expressions in FOR initialization or increment.
+    if (!(parent.getType() == Token.FOR
+          && parent.getChildCount() == 4
+          && (n == parent.getFirstChild()
+              || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  // If it's a simple operator or has no side‐effects, warn about it.
+  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
-        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
-            "' operator is not being used.";
+      msg = "The result of the '"
+          + Token.name(n.getType()).toLowerCase()
+          + "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
