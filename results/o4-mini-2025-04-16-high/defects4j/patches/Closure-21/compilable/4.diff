diff --git a/tmp/75991c4d-49c4-47cd-b325-12fe57cd5ed5_buggy.java b/tmp/07334447-ef66-4074-9363-672f1d90924a_fixed.java
index 49a5702..99a2bdf 100644
--- a/tmp/75991c4d-49c4-47cd-b325-12fe57cd5ed5_buggy.java
+++ b/tmp/07334447-ef66-4074-9363-672f1d90924a_fixed.java
@@ -1,66 +1,82 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+  // VOID nodes appear when there are extra semicolons at the BLOCK or SCRIPT level.
+  // We've seen no cases where these indicate a bug, and some folks like
+  // keeping these semicolons around, so we'll allow them there.
+  if (n.isEmpty()) {
+    if (parent != null && (parent.isBlock() || parent.isScript())) {
+      return;
+    }
+    // Empty statement in any other context is almost certainly a mistake.
+    String msg = "This code lacks side-effects. Is there a bug?";
+    t.getCompiler().report(
+        t.makeError(n, level, USELESS_CODE_ERROR, msg));
+    // Empty is a statement, so we do not add it to problemNodes for wrapping.
+    return;
+  }
+
+  // We do not flag the comma operator itself; we inspect its operands.
+  if (n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+  // Do not try to remove an expr-result statement itself; we handle its child.
   if (n.isExprResult()) {
     return;
   }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
+  // A no-op qualified name used only to hang JSDoc is fine.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
   if (parent.getType() == Token.COMMA) {
     if (isResultUsed) {
       return;
     }
     if (n == parent.getLastChild()) {
       for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+        int at = an.getType();
+        if (at == Token.COMMA) continue;
+        if (at != Token.EXPR_RESULT && at != Token.BLOCK) {
+          return;
+        } else {
+          break;
+        }
       }
     }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+  } else if (parent.getType() != Token.EXPR_RESULT
+          && parent.getType() != Token.BLOCK) {
+    // Allow certain FOR clauses, otherwise bail.
+    if (!(parent.getType() == Token.FOR
+          && parent.getChildCount() == 4
+          && (n == parent.getFirstChild()
+              || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
-        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
+      msg = "The result of the '" +
+          Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
-
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+    // Only wrap non-statement subexpressions.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
