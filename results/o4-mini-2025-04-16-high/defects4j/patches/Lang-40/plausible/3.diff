diff --git a/tmp/dcc7692a-f56f-436d-af23-94d5358ad48b_buggy.java b/tmp/00ede371-6e40-4c85-ae9b-b2771f293885_fixed.java
index 562001a..a0108b5 100644
--- a/tmp/dcc7692a-f56f-436d-af23-94d5358ad48b_buggy.java
+++ b/tmp/00ede371-6e40-4c85-ae9b-b2771f293885_fixed.java
@@ -1,29 +1,18 @@
-    /**
-     * <p>Checks if String contains a search String irrespective of case,
-     * handling <code>null</code>. Case-insensitivity is defined as by
-     * {@link String#equalsIgnoreCase(String)}.
-     *
-     * <p>A <code>null</code> String will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.contains(null, *) = false
-     * StringUtils.contains(*, null) = false
-     * StringUtils.contains("", "") = true
-     * StringUtils.contains("abc", "") = true
-     * StringUtils.contains("abc", "a") = true
-     * StringUtils.contains("abc", "z") = false
-     * StringUtils.contains("abc", "A") = true
-     * StringUtils.contains("abc", "Z") = false
-     * </pre>
-     *
-     * @param str  the String to check, may be null
-     * @param searchStr  the String to find, may be null
-     * @return true if the String contains the search String irrespective of
-     * case or false if not or <code>null</code> string input
-     */
 public static boolean containsIgnoreCase(String str, String searchStr) {
     if (str == null || searchStr == null) {
         return false;
     }
-        return contains(str.toUpperCase(), searchStr.toUpperCase());
+    int searchLen = searchStr.length();
+    // an empty search string always "matches"
+    if (searchLen == 0) {
+        return true;
+    }
+    int max = str.length() - searchLen;
+    for (int i = 0; i <= max; i++) {
+        // regionMatches(true, ...) does a locale‐independent, Unicode‐aware ignore‐case comparison
+        if (str.regionMatches(true, i, searchStr, 0, searchLen)) {
+            return true;
+        }
+    }
+    return false;
 }
\ No newline at end of file
