diff --git a/tmp/4f93cf9f-7108-4dea-8dd5-7460a9c8b547_buggy.java b/tmp/3a7e55da-12e5-446b-a9d1-359c3ac6e2ea_fixed.java
index 98f719c..469edcb 100644
--- a/tmp/4f93cf9f-7108-4dea-8dd5-7460a9c8b547_buggy.java
+++ b/tmp/3a7e55da-12e5-446b-a9d1-359c3ac6e2ea_fixed.java
@@ -1,72 +1,80 @@
 /** Helper to escape javascript string as well as regular expression */
-  static String strEscape(String s, char quote,
+static String strEscape(
+    String s, char quote,
     String doublequoteEscape,
     String singlequoteEscape,
     String backslashEscape,
     CharsetEncoder outputCharsetEncoder) {
   StringBuilder sb = new StringBuilder(s.length() + 2);
   sb.append(quote);
   for (int i = 0; i < s.length(); i++) {
     char c = s.charAt(i);
     switch (c) {
-        case '\0': sb.append("\\0"); break;
-        case '\n': sb.append("\\n"); break;
-        case '\r': sb.append("\\r"); break;
-        case '\t': sb.append("\\t"); break;
-        case '\\': sb.append(backslashEscape); break;
-        case '\"': sb.append(doublequoteEscape); break;
-        case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
+      case '\0':
+        sb.append("\\0");
+        break;
+      case '\n':
+        sb.append("\\n");
+        break;
+      case '\r':
+        sb.append("\\r");
+        break;
+      case '\t':
+        sb.append("\\t");
+        break;
+      case '\\':
+        sb.append(backslashEscape);
+        break;
+      case '\"':
+        sb.append(doublequoteEscape);
+        break;
+      case '\'':
+        sb.append(singlequoteEscape);
+        break;
+      case '>':
+        // Break --> into --\> or ]]> into ]]\>
         if (i >= 2 &&
             ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
              (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
           sb.append("\\>");
         } else {
           sb.append(c);
         }
         break;
       case '<':
         // Break </script into <\/script
         final String END_SCRIPT = "/script";
-
         // Break <!-- into <\!--
         final String START_COMMENT = "!--";
-
-          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
+        if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
           sb.append("<\\");
         } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                                    START_COMMENT.length())) {
           sb.append("<\\");
         } else {
           sb.append(c);
         }
         break;
       default:
-          // If we're given an outputCharsetEncoder, then check if the
-          //  character can be represented in this character set.
         if (outputCharsetEncoder != null) {
-            if (outputCharsetEncoder.canEncode(c)) {
+          // Only append raw if the charset can encode it and it's not a control
+          // (i.e. >= 0x20 and not DEL 0x7F).  All others get \uXXXX.
+          if (c >= 0x20 && c != 0x7F && outputCharsetEncoder.canEncode(c)) {
             sb.append(c);
           } else {
-              // Unicode-escape the character.
             appendHexJavaScriptRepresentation(sb, c);
           }
         } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
-            if (c > 0x1f && c <= 0x7f) {
+          // No charsetEncoder provided: only ASCII-printables (0x20..0x7E)
+          // get through raw; the rest become \uXXXX.
+          if (c >= 0x20 && c < 0x7F) {
             sb.append(c);
           } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
             appendHexJavaScriptRepresentation(sb, c);
           }
         }
     }
   }
   sb.append(quote);
   return sb.toString();
 }
\ No newline at end of file
