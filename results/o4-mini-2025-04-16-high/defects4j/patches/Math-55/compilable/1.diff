diff --git a/tmp/20c019ae-11ab-4273-a63c-5eaa4815ac4b_buggy.java b/tmp/320c23c3-7ed3-46fc-83ae-355d8450c197_fixed.java
index 1478ee1..f516150 100644
--- a/tmp/20c019ae-11ab-4273-a63c-5eaa4815ac4b_buggy.java
+++ b/tmp/320c23c3-7ed3-46fc-83ae-355d8450c197_fixed.java
@@ -1,24 +1,28 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    // pre‐condition to reduce cancellation (see Kahan)
+    double dotVV = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+    if (dotVV == 0.0) {
+        // v2 is zero ⇒ cross product is zero
+        return new Vector3D(0.0, 0.0, 0.0);
+    }
+    double dotV1V2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+    // exact ratio
+    double rho = dotV1V2 / dotVV;
+    // round rho to an 8-bit approximation (truncate mantissa to 8 bits)
+    long bits    = Double.doubleToRawLongBits(rho);
+    long signExp = bits & 0xFFF0000000000000L;       // sign + exponent
+    long mant    = bits & 0x000FFFFFFFFFFFFFL;       // full mantissa
+    long top8    = mant >> (52 - 8);                 // keep only top 8 bits
+    long trunc   = top8 << (52 - 8);                 // shift back
+    rho = Double.longBitsToDouble(signExp | trunc);
+    // form v3 = v1 − rho·v2 (now v3 and v2 are well‐conditioned)
+    double v3x = v1.x - rho * v2.x;
+    double v3y = v1.y - rho * v2.y;
+    double v3z = v1.z - rho * v2.z;
+    // compute cross‐product of v3 and v2
+    return new Vector3D(
+        v3y * v2.z - v3z * v2.y,
+        v3z * v2.x - v3x * v2.z,
+        v3x * v2.y - v3y * v2.x
+    );
 }
\ No newline at end of file
