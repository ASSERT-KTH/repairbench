diff --git a/tmp/63c535f8-d43e-4b9d-8204-e154e5e4619c_buggy.java b/tmp/18e15eca-add7-42c8-9ebe-f78622bfb3b6_fixed.java
index 1478ee1..e481451 100644
--- a/tmp/63c535f8-d43e-4b9d-8204-e154e5e4619c_buggy.java
+++ b/tmp/18e15eca-add7-42c8-9ebe-f78622bfb3b6_fixed.java
@@ -1,24 +1,32 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Extract components
+    double x1 = v1.getX();
+    double y1 = v1.getY();
+    double z1 = v1.getZ();
+    double x2 = v2.getX();
+    double y2 = v2.getY();
+    double z2 = v2.getZ();
 
+    // Precondition v1 by subtracting an 8-bit approximation of (v1·v2)/(v2·v2) times v2
+    double dot = x1 * x2 + y1 * y2 + z1 * z2;
+    double norm2 = x2 * x2 + y2 * y2 + z2 * z2;
+    double rho = 0;
+    if (norm2 != 0) {
+        // inv = (dot/norm2) * 2^8
+        double inv = FastMath.scalb(dot / norm2, 8);
+        // rho = round(inv) / 2^8
+        rho = FastMath.scalb(FastMath.rint(inv), -8);
+    }
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // v3 = v1 - rho * v2
+    double x3 = x1 - rho * x2;
+    double y3 = y1 - rho * y2;
+    double z3 = z1 - rho * z2;
 
+    // Return v3 × v2
+    return new Vector3D(
+        y3 * z2 - z3 * y2,
+        z3 * x2 - x3 * z2,
+        x3 * y2 - y3 * x2
+    );
 }
\ No newline at end of file
