diff --git a/tmp/ac6830b4-5cac-468a-bcde-021539193b23_buggy.java b/tmp/21ef3422-e9f1-4b71-a9b6-16c5db7d20fd_fixed.java
index 1478ee1..3f9f18e 100644
--- a/tmp/ac6830b4-5cac-468a-bcde-021539193b23_buggy.java
+++ b/tmp/21ef3422-e9f1-4b71-a9b6-16c5db7d20fd_fixed.java
@@ -1,24 +1,25 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    double x1 = v1.x;
+    double y1 = v1.y;
+    double z1 = v1.z;
+    double x2 = v2.x;
+    double y2 = v2.y;
+    double z2 = v2.z;
+    double dot2 = x2 * x2 + y2 * y2 + z2 * z2;
+    if (dot2 != 0.0) {
+        double dot = x1 * x2 + y1 * y2 + z1 * z2;
+        // approximate rho with 8 bits of precision to reduce cancellation
+        double rho = FastMath.scalb(
+            FastMath.round(FastMath.scalb(dot / dot2, 8)),
+            -8
+        );
+        x1 -= rho * x2;
+        y1 -= rho * y2;
+        z1 -= rho * z2;
+    }
+    return new Vector3D(
+        y1 * z2 - z1 * y2,
+        z1 * x2 - x1 * z2,
+        x1 * y2 - y1 * x2
+    );
 }
\ No newline at end of file
