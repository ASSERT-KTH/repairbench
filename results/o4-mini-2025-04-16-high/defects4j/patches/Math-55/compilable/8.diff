diff --git a/tmp/7903d580-1c92-4a50-8746-a966ed64c14e_buggy.java b/tmp/1a2f7e8c-c884-458e-a76a-df0556daad3b_fixed.java
index 1478ee1..7a98087 100644
--- a/tmp/7903d580-1c92-4a50-8746-a966ed64c14e_buggy.java
+++ b/tmp/1a2f7e8c-c884-458e-a76a-df0556daad3b_fixed.java
@@ -1,24 +1,28 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Kahan-style preconditioning to reduce cancellation error
+    double x1 = v1.x;
+    double y1 = v1.y;
+    double z1 = v1.z;
+    double x2 = v2.x;
+    double y2 = v2.y;
+    double z2 = v2.z;
 
+    // projection factor rho = (v1·v2)/(v2·v2)
+    double dot12 = x1 * x2 + y1 * y2 + z1 * z2;
+    double dot22 = x2 * x2 + y2 * y2 + z2 * z2;
+    double rho = (dot22 != 0.0) ? dot12 / dot22 : 0.0;
+    // approximate rho to 8 bits to limit precision and avoid cancellation
+    double rho8 = Math.rint(rho * 256.0) / 256.0;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // form the preconditioned vector v3 = v1 - rho8 * v2
+    double v3x = x1 - rho8 * x2;
+    double v3y = y1 - rho8 * y2;
+    double v3z = z1 - rho8 * z2;
 
+    // compute cross product of v3 and v2
+    return new Vector3D(
+        v3y * z2 - v3z * y2,
+        v3z * x2 - v3x * z2,
+        v3x * y2 - v3y * x2
+    );
 }
\ No newline at end of file
