diff --git a/tmp/e6f7f1f1-9bee-4500-999b-bc73813c974d_buggy.java b/tmp/8cc22ef4-bbf0-4d15-b3d8-7f349f48add5_fixed.java
index 1478ee1..1520274 100644
--- a/tmp/e6f7f1f1-9bee-4500-999b-bc73813c974d_buggy.java
+++ b/tmp/8cc22ef4-bbf0-4d15-b3d8-7f349f48add5_fixed.java
@@ -1,24 +1,35 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
+/** Compute the cross-product of two vectors with cancellation pre-conditioning. */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // extract components
+    double x1 = v1.x;
+    double y1 = v1.y;
+    double z1 = v1.z;
+    double x2 = v2.x;
+    double y2 = v2.y;
+    double z2 = v2.z;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+    // compute projection factor rho = (v1·v2)/(v2·v2) approximated to 8 bits
+    double dot   = x1 * x2 + y1 * y2 + z1 * z2;
+    double norm2 = x2 * x2 + y2 * y2 + z2 * z2;
+    double rho;
+    if (norm2 == 0.0) {
+        rho = 0.0;
+    } else {
+        rho = dot / norm2;
+        // quantize rho to 8-bit resolution to reduce cancellation
+        rho = FastMath.rint(rho * 256.0) / 256.0;
+    }
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // form v3 = v1 - rho * v2
+    double ux = x1 - rho * x2;
+    double uy = y1 - rho * y2;
+    double uz = z1 - rho * z2;
 
+    // compute cross(v3, v2)
+    return new Vector3D(
+        uy * z2 - uz * y2,
+        uz * x2 - ux * z2,
+        ux * y2 - uy * x2
+    );
 }
\ No newline at end of file
