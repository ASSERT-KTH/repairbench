diff --git a/tmp/77a653de-440d-40de-8d06-aa3cb00d56fa_buggy.java b/tmp/56fabe38-8abe-428e-83bf-127e4a75df57_fixed.java
index 1478ee1..87d43f7 100644
--- a/tmp/77a653de-440d-40de-8d06-aa3cb00d56fa_buggy.java
+++ b/tmp/56fabe38-8abe-428e-83bf-127e4a75df57_fixed.java
@@ -1,24 +1,28 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    // Kahan's trick: compute v3 = v1 - rho * v2 with rho an 8-bit approximation
+    // of (v1·v2)/(v2·v2), then cross(v1,v2) = cross(v3,v2) but with much less cancellation.
+    double x2 = v2.x;
+    double y2 = v2.y;
+    double z2 = v2.z;
+    // dot products
+    double dot    = v1.x * x2 + v1.y * y2 + v1.z * z2;
+    double norm2  = x2 * x2   + y2 * y2   + z2 * z2;
+    if (norm2 == 0) {
+        // v2 is zero ⇒ cross product is zero
+        return new Vector3D(0, 0, 0);
+    }
+    // exact ratio
+    double ratio = dot / norm2;
+    // 8-bit approximation of the ratio: round(ratio*256)/256
+    double rho = FastMath.scalb(FastMath.rint(FastMath.scalb(ratio, 8)), -8);
+    // build v3 = v1 - rho * v2
+    double x3 = v1.x - rho * x2;
+    double y3 = v1.y - rho * y2;
+    double z3 = v1.z - rho * z2;
+    // return cross(v3, v2)
+    return new Vector3D(
+        y3 * z2 - z3 * y2,
+        z3 * x2 - x3 * z2,
+        x3 * y2 - y3 * x2
+    );
 }
\ No newline at end of file
