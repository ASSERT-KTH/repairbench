diff --git a/tmp/f5b9b8ad-eae1-4bd7-a174-be193877baa5_buggy.java b/tmp/f74c00ac-8773-4061-8ffe-e91edc0a1052_fixed.java
index 1478ee1..05696d8 100644
--- a/tmp/f5b9b8ad-eae1-4bd7-a174-be193877baa5_buggy.java
+++ b/tmp/f74c00ac-8773-4061-8ffe-e91edc0a1052_fixed.java
@@ -1,24 +1,43 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+      // short‐circuit if v2 is zero
+      final double x2 = v2.x;
+      final double y2 = v2.y;
+      final double z2 = v2.z;
+      final double norm2 = x2 * x2 + y2 * y2 + z2 * z2;
+      if (norm2 == 0.0) {
+          return new Vector3D(0.0, 0.0, 0.0);
+      }
 
+      // precondition v1 = v3 + rho * v2 so that v3 = v1 - rho * v2 is small
+      final double x1 = v1.x;
+      final double y1 = v1.y;
+      final double z1 = v1.z;
+      double dot = x1 * x2 + y1 * y2 + z1 * z2;
+      double rho = dot / norm2;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+      // quantize rho to an 8‐bit approximation to avoid cancellation
+      if (rho != 0.0) {
+          int exp = FastMath.getExponent(rho);
+          double mant = FastMath.scalb(rho, -exp);      // bring to [1,2)
+          long   m    = FastMath.round(mant * 256.0);   // round to nearest 1/256
+          mant = m / 256.0;
+          rho  = FastMath.scalb(mant, exp);
+      }
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // compute the "small" component v3 = v1 - rho * v2
+      double x3 = x1 - rho * x2;
+      double y3 = y1 - rho * y2;
+      double z3 = z1 - rho * z2;
 
+      // now do the cross‐product of v3 with v2
+      return new Vector3D(
+          y3 * z2 - z3 * y2,
+          z3 * x2 - x3 * z2,
+          x3 * y2 - y3 * x2
+      );
   }
\ No newline at end of file
