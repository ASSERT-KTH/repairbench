diff --git a/tmp/e7385327-0a43-4831-8983-8098e8dfc60c_buggy.java b/tmp/2566c5ab-7d1d-4b85-a5d4-1c972c15bf2a_fixed.java
index a7d0787..cbc18c5 100644
--- a/tmp/e7385327-0a43-4831-8983-8098e8dfc60c_buggy.java
+++ b/tmp/2566c5ab-7d1d-4b85-a5d4-1c972c15bf2a_fixed.java
@@ -1,54 +1,43 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
-    @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+@SuppressWarnings("unchecked")
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    if (PatternOptionBuilder.STRING_VALUE == clazz) {
         return (T) str;
     }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
         return (T) createObject(str);
     }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
         return (T) createNumber(str);
     }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+    // support specific Number subclasses (Integer, Long, BigDecimal, etc.)
+    else if (Number.class.isAssignableFrom(clazz)) {
+        try {
+            java.lang.reflect.Constructor<?> ctor = clazz.getConstructor(String.class);
+            return (T) ctor.newInstance(str);
+        } catch (Exception e) {
+            throw new ParseException(
+                "Cannot create number value for " + clazz.getName() + ": " + e.getMessage());
+        }
+    }
+    else if (PatternOptionBuilder.DATE_VALUE == clazz) {
         return (T) createDate(str);
     }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
         return (T) createClass(str);
     }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.FILE_VALUE == clazz) {
         return (T) createFile(str);
     }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
         return (T) openFile(str);
     }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.FILES_VALUE == clazz) {
         return (T) createFiles(str);
     }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.URL_VALUE == clazz) {
         return (T) createURL(str);
     }
-        else
-        {
+    else {
         return null;
     }
 }
\ No newline at end of file
