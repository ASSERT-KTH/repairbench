diff --git a/tmp/121fca4e-939b-4aa0-b583-34ef5af7ba14_buggy.java b/tmp/325ba2a6-9086-45cf-9c42-46fa1b8c29fa_fixed.java
index a7d0787..0771756 100644
--- a/tmp/121fca4e-939b-4aa0-b583-34ef5af7ba14_buggy.java
+++ b/tmp/325ba2a6-9086-45cf-9c42-46fa1b8c29fa_fixed.java
@@ -1,54 +1,44 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    if (PatternOptionBuilder.STRING_VALUE == clazz) {
         return (T) str;
     }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
         return (T) createObject(str);
     }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
+    // exact Number.class
+    else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
         return (T) createNumber(str);
     }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+    // any subclass of Number (e.g. Integer, Long, Double, BigDecimalâ€¦)
+    else if (Number.class.isAssignableFrom(clazz)) {
+        try {
+            java.lang.reflect.Constructor<T> ctor = clazz.getConstructor(String.class);
+            return ctor.newInstance(str);
+        } catch (Exception e) {
+            // wrap any instantiation/parsing error as a ParseException
+            throw new ParseException("Cannot convert value \"" + str + "\" to " + clazz.getName());
+        }
+    }
+    else if (PatternOptionBuilder.DATE_VALUE == clazz) {
         return (T) createDate(str);
     }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
         return (T) createClass(str);
     }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.FILE_VALUE == clazz) {
         return (T) createFile(str);
     }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
         return (T) openFile(str);
     }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.FILES_VALUE == clazz) {
         return (T) createFiles(str);
     }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.URL_VALUE == clazz) {
         return (T) createURL(str);
     }
-        else
-        {
+    else {
         return null;
     }
 }
\ No newline at end of file
