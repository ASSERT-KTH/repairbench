diff --git a/tmp/efa3c579-cfb5-49e4-9115-58e79169e3f2_buggy.java b/tmp/1185c424-3fb3-4849-bb50-cd55c3b6f869_fixed.java
index a7d0787..7f71d40 100644
--- a/tmp/efa3c579-cfb5-49e4-9115-58e79169e3f2_buggy.java
+++ b/tmp/1185c424-3fb3-4849-bb50-cd55c3b6f869_fixed.java
@@ -1,54 +1,65 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    // support the standard wrapper number types
+    if (clazz == Byte.class) {
+        try {
+            return (T) Byte.decode(str);
+        } catch (NumberFormatException e) {
+            throw new ParseException(e.getMessage());
+        }
+    } else if (clazz == Short.class) {
+        try {
+            return (T) Short.decode(str);
+        } catch (NumberFormatException e) {
+            throw new ParseException(e.getMessage());
+        }
+    } else if (clazz == Integer.class) {
+        try {
+            return (T) Integer.decode(str);
+        } catch (NumberFormatException e) {
+            throw new ParseException(e.getMessage());
+        }
+    } else if (clazz == Long.class) {
+        try {
+            return (T) Long.decode(str);
+        } catch (NumberFormatException e) {
+            throw new ParseException(e.getMessage());
+        }
+    } else if (clazz == Float.class) {
+        try {
+            return (T) Float.valueOf(str);
+        } catch (NumberFormatException e) {
+            throw new ParseException(e.getMessage());
+        }
+    } else if (clazz == Double.class) {
+        try {
+            return (T) Double.valueOf(str);
+        } catch (NumberFormatException e) {
+            throw new ParseException(e.getMessage());
+        }
+    }
+    // existing handlers
+    else if (PatternOptionBuilder.STRING_VALUE == clazz) {
         return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
         return (T) createObject(str);
-        }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
         return (T) createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {
         return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
         return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {
         return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
         return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {
         return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.URL_VALUE == clazz) {
         return (T) createURL(str);
     }
-        else
-        {
+    // no handler found
+    else {
         return null;
     }
 }
\ No newline at end of file
