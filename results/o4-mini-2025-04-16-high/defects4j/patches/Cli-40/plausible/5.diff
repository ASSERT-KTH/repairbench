diff --git a/tmp/a499a66c-c644-4505-a14d-fb347a11d397_buggy.java b/tmp/053761c2-e002-403c-b64c-e2e28d2d1e91_fixed.java
index a7d0787..d5c16bc 100644
--- a/tmp/a499a66c-c644-4505-a14d-fb347a11d397_buggy.java
+++ b/tmp/053761c2-e002-403c-b64c-e2e28d2d1e91_fixed.java
@@ -1,54 +1,101 @@
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    if (PatternOptionBuilder.STRING_VALUE == clazz) {
         return (T) str;
     }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
         return (T) createObject(str);
     }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
+    // handle numeric wrapper types
+    else if (clazz == Byte.class) {
+        try {
+            return (T) Byte.valueOf(str);
+        } catch (NumberFormatException ex) {
+            throw new ParseException(ex.getMessage());
+        }
+    }
+    else if (clazz == Short.class) {
+        try {
+            return (T) Short.valueOf(str);
+        } catch (NumberFormatException ex) {
+            throw new ParseException(ex.getMessage());
+        }
+    }
+    else if (clazz == Integer.class) {
+        try {
+            return (T) Integer.valueOf(str);
+        } catch (NumberFormatException ex) {
+            throw new ParseException(ex.getMessage());
+        }
+    }
+    else if (clazz == Long.class) {
+        try {
+            return (T) Long.valueOf(str);
+        } catch (NumberFormatException ex) {
+            throw new ParseException(ex.getMessage());
+        }
+    }
+    else if (clazz == Float.class) {
+        try {
+            return (T) Float.valueOf(str);
+        } catch (NumberFormatException ex) {
+            throw new ParseException(ex.getMessage());
+        }
+    }
+    else if (clazz == Double.class) {
+        try {
+            return (T) Double.valueOf(str);
+        } catch (NumberFormatException ex) {
+            throw new ParseException(ex.getMessage());
+        }
+    }
+    else if (clazz == java.math.BigInteger.class) {
+        try {
+            return (T) new java.math.BigInteger(str);
+        } catch (NumberFormatException ex) {
+            throw new ParseException(ex.getMessage());
+        }
+    }
+    else if (clazz == java.math.BigDecimal.class) {
+        try {
+            return (T) new java.math.BigDecimal(str);
+        } catch (NumberFormatException ex) {
+            throw new ParseException(ex.getMessage());
+        }
+    }
+    // generic Number
+    else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
         return (T) createNumber(str);
     }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.DATE_VALUE == clazz) {
         return (T) createDate(str);
     }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
         return (T) createClass(str);
     }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.FILE_VALUE == clazz) {
         return (T) createFile(str);
     }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
         return (T) openFile(str);
     }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.FILES_VALUE == clazz) {
         return (T) createFiles(str);
     }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.URL_VALUE == clazz) {
         return (T) createURL(str);
     }
-        else
-        {
-            return null;
+    else {
+        throw new ParseException("Cannot convert \"" + str + "\" to " + clazz.getName());
     }
 }
\ No newline at end of file
