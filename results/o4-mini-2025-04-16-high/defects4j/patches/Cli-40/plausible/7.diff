diff --git a/tmp/8db0d489-d25c-4d91-a97e-67d538572ab7_buggy.java b/tmp/0fc42f05-d68f-456c-a3aa-9a267036fae8_fixed.java
index a7d0787..3062b98 100644
--- a/tmp/8db0d489-d25c-4d91-a97e-67d538572ab7_buggy.java
+++ b/tmp/0fc42f05-d68f-456c-a3aa-9a267036fae8_fixed.java
@@ -1,54 +1,54 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    // simple types
+    if (PatternOptionBuilder.STRING_VALUE == clazz) {
         return (T) str;
     }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
         return (T) createObject(str);
     }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
+    // numbers (Number.class and any subclass, e.g. Integer.class, Double.class, BigDecimal.class, …)
+    else if (PatternOptionBuilder.NUMBER_VALUE.isAssignableFrom(clazz)) {
+        // exactly Number
+        if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
             return (T) createNumber(str);
         }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+        // wrapper or BigInteger/BigDecimal etc. – try a String‐ctor
+        try {
+            java.lang.reflect.Constructor<T> ctor = clazz.getConstructor(String.class);
+            return ctor.newInstance(str);
+        }
+        catch (Exception e) {
+            // unwrap NumberFormatException from InvocationTargetException if present
+            Throwable t = (e instanceof java.lang.reflect.InvocationTargetException && e.getCause() != null)
+                        ? e.getCause() : e;
+            if (t instanceof NumberFormatException) {
+                throw new ParseException(t.getMessage());
+            }
+            throw new ParseException(t.getMessage());
+        }
+    }
+    // other built‐ins
+    else if (PatternOptionBuilder.DATE_VALUE == clazz) {
         return (T) createDate(str);
     }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
         return (T) createClass(str);
     }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.FILE_VALUE == clazz) {
         return (T) createFile(str);
     }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
         return (T) openFile(str);
     }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.FILES_VALUE == clazz) {
         return (T) createFiles(str);
     }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    else if (PatternOptionBuilder.URL_VALUE == clazz) {
         return (T) createURL(str);
     }
-        else
-        {
-            return null;
+    // nothing matched → error
+    else {
+        throw new ParseException("Cannot handle class: " + clazz.getName());
     }
 }
\ No newline at end of file
