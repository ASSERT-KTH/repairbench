diff --git a/tmp/ed6c2447-615e-41a7-82de-fd41d23e8f03_buggy.java b/tmp/b16329d6-ff46-46ae-a86c-0011d67ee0b3_fixed.java
index a7d0787..58734d6 100644
--- a/tmp/ed6c2447-615e-41a7-82de-fd41d23e8f03_buggy.java
+++ b/tmp/b16329d6-ff46-46ae-a86c-0011d67ee0b3_fixed.java
@@ -1,54 +1,60 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
-    @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+@SuppressWarnings("unchecked")
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    if (PatternOptionBuilder.STRING_VALUE == clazz) {
         return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
         return (T) createObject(str);
-        }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
         return (T) createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {
         return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
         return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {
         return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
         return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {
         return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.URL_VALUE == clazz) {
         return (T) createURL(str);
+    } else if (clazz == Byte.class) {
+        try {
+            return (T) Byte.valueOf(str);
+        } catch (NumberFormatException e) {
+            throw new ParseException("Failed to parse byte value: " + str);
         }
-        else
-        {
-            return null;
+    } else if (clazz == Short.class) {
+        try {
+            return (T) Short.valueOf(str);
+        } catch (NumberFormatException e) {
+            throw new ParseException("Failed to parse short value: " + str);
+        }
+    } else if (clazz == Integer.class) {
+        try {
+            return (T) Integer.valueOf(str);
+        } catch (NumberFormatException e) {
+            throw new ParseException("Failed to parse integer value: " + str);
+        }
+    } else if (clazz == Long.class) {
+        try {
+            return (T) Long.valueOf(str);
+        } catch (NumberFormatException e) {
+            throw new ParseException("Failed to parse long value: " + str);
+        }
+    } else if (clazz == Float.class) {
+        try {
+            return (T) Float.valueOf(str);
+        } catch (NumberFormatException e) {
+            throw new ParseException("Failed to parse float value: " + str);
+        }
+    } else if (clazz == Double.class) {
+        try {
+            return (T) Double.valueOf(str);
+        } catch (NumberFormatException e) {
+            throw new ParseException("Failed to parse double value: " + str);
+        }
+    } else {
+        throw new ParseException("Unsupported class: " + clazz.getName());
     }
 }
\ No newline at end of file
