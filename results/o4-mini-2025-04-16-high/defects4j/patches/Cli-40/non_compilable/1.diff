diff --git a/tmp/a666f203-7e10-408a-a3d1-dcac7452b593_buggy.java b/tmp/25d6e489-73db-4591-b22a-23dbcb50adff_fixed.java
index a7d0787..96ce47e 100644
--- a/tmp/a666f203-7e10-408a-a3d1-dcac7452b593_buggy.java
+++ b/tmp/25d6e489-73db-4591-b22a-23dbcb50adff_fixed.java
@@ -1,54 +1,56 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    if (PatternOptionBuilder.STRING_VALUE == clazz) {
         return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
         return (T) createObject(str);
-        }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
         return (T) createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {
         return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
         return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {
         return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
         return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {
         return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.URL_VALUE == clazz) {
         return (T) createURL(str);
+    } else {
+        // handle enums
+        if (clazz.isEnum()) {
+            try {
+                return (T) Enum.valueOf((Class) clazz, str);
+            } catch (IllegalArgumentException ex) {
+                throw new ParseException("Invalid enum value '" + str + "' for " + clazz.getName());
+            }
+        }
+        // try static valueOf(String) method
+        try {
+            Method m = clazz.getMethod("valueOf", String.class);
+            if (Modifier.isStatic(m.getModifiers())) {
+                return (T) m.invoke(null, str);
+            }
+        } catch (NoSuchMethodException ignored) {
+            // no static valueOf, fall through
+        } catch (InvocationTargetException ex) {
+            throw new ParseException(ex.getCause().getMessage());
+        } catch (Exception ex) {
+            throw new ParseException(ex.getMessage());
+        }
+        // try String constructor
+        try {
+            Constructor<?> ctor = clazz.getConstructor(String.class);
+            return (T) ctor.newInstance(str);
+        } catch (NoSuchMethodException ex) {
+            throw new ParseException("No String constructor for " + clazz.getName());
+        } catch (InvocationTargetException ex) {
+            Throwable cause = ex.getCause();
+            throw new ParseException(cause != null ? cause.getMessage() : ex.getMessage());
+        } catch (Exception ex) {
+            throw new ParseException(ex.getMessage());
         }
-        else
-        {
-            return null;
     }
 }
\ No newline at end of file
