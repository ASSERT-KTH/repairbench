diff --git a/tmp/0c5372b1-91b8-47e3-bf92-848fe48c800e_buggy.java b/tmp/a5547b51-638f-4045-b106-815ade2c4e72_fixed.java
index 800e6e1..770a86f 100644
--- a/tmp/0c5372b1-91b8-47e3-bf92-848fe48c800e_buggy.java
+++ b/tmp/a5547b51-638f-4045-b106-815ade2c4e72_fixed.java
@@ -1,32 +1,58 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n == scope.getRootNode()) return;
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  // Don't process the root of this local scope.
+  if (n == scope.getRootNode()) {
+    return;
+  }
 
+  // Handle a "stub" qualified name in an expression statement,
+  // e.g. /** @param {T} x */ a.b;
+  if (n.getType() == Token.EXPR_RESULT) {
+    Node expr = n.getFirstChild();
+    if (expr != null
+        && (expr.getType() == Token.GETPROP
+            || expr.getType() == Token.GETELEM)) {
+      JSDocInfo jsdoc = n.getJSDocInfo();
+      if (jsdoc != null) {
+        // Move the JSDoc down to the GETPROP/GETELEM
+        n.setJSDocInfo(null);
+        expr.setJSDocInfo(jsdoc);
+        // Now attach the stub type
+        attachLiteralTypes(expr);
+        // Clear it so we don't re‚Äêprocess on the child visit
+        expr.setJSDocInfo(null);
+      }
+    }
+  }
+
+  // Handle function parameters: the LP node immediately under the scope root.
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
+  // Attach any literal types (including names, number/string literals, etc.)
   attachLiteralTypes(n);
+
+  // Handle local declarations
   switch (n.getType()) {
     case Token.FUNCTION:
+      // Skip the NAME node when we have "function foo() {}"
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
+
     case Token.CATCH:
       defineCatch(n, parent);
       break;
+
     case Token.VAR:
       defineVar(n, parent);
       break;
+
+    default:
+      // nothing else to do here
   }
 }
\ No newline at end of file
