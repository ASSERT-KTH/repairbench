diff --git a/tmp/6dfb895f-68a7-42ff-b96a-f0d47e877e00_buggy.java b/tmp/efb65cce-82c3-41a4-b058-775c190b4dea_fixed.java
index 800e6e1..05e7b5b 100644
--- a/tmp/6dfb895f-68a7-42ff-b96a-f0d47e877e00_buggy.java
+++ b/tmp/efb65cce-82c3-41a4-b058-775c190b4dea_fixed.java
@@ -1,32 +1,42 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n == scope.getRootNode()) return;
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  // Don't re‐visit the scope root.
+  if (n == scope.getRootNode()) {
+    return;
+  }
 
+  // The LP under the FUNCTION is the parameter list.
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
+  // First hook up literal‐value types.
   attachLiteralTypes(n);
+
+  // Then handle any declared names in this local scope,
+  // including stub declarations on qualified names.
   switch (n.getType()) {
     case Token.FUNCTION:
+      // Skip the NAME node of a named function expression.
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
+
     case Token.CATCH:
       defineCatch(n, parent);
       break;
+
     case Token.VAR:
       defineVar(n, parent);
       break;
+
+    case Token.GETPROP:
+    case Token.GETELEM:
+      // Handle JSDoc “stubs” like /** @param {number} x */ goog.foo;
+      defineQualifiedName(n, parent);
+      break;
   }
 }
\ No newline at end of file
