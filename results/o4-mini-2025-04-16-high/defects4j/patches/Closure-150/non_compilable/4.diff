diff --git a/tmp/8b63af51-bd77-418c-ac24-d7d865ecd787_buggy.java b/tmp/50802150-aae4-4803-a84c-0b01241c0ca3_fixed.java
index 800e6e1..c785ebb 100644
--- a/tmp/8b63af51-bd77-418c-ac24-d7d865ecd787_buggy.java
+++ b/tmp/50802150-aae4-4803-a84c-0b01241c0ca3_fixed.java
@@ -1,32 +1,41 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n == scope.getRootNode()) return;
+  // Don't process the scope root itself.
+  if (n == scope.getRootNode()) {
+    return;
+  }
 
+  // Handle function parameter declarations once, at the LP under the root.
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
+  // First pull in any literal‐based types (object‐literals, vars initialized
+  // to {}, etc.)
   attachLiteralTypes(n);
+
+  // Then define any local symbols or catch‐params, and also
+  // pick up any qualified‐name (GETPROP) JSDoc stubs in a local scope.
   switch (n.getType()) {
     case Token.FUNCTION:
+      // Skip the NAME of a function declaration, only process the FUNCTION node.
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
+
     case Token.CATCH:
       defineCatch(n, parent);
       break;
+
     case Token.VAR:
       defineVar(n, parent);
       break;
+
+    case Token.GETPROP:
+      // Local stub‐declaration of a property function (e.g. /**…*/ goog.foo;)
+      defineQualifiedName(n, parent);
+      break;
   }
 }
\ No newline at end of file
