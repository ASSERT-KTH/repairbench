diff --git a/tmp/a6c2b581-124b-4f95-ba68-0971c8e940c3_buggy.java b/tmp/e4663454-a995-421d-bb2b-a7bf97c9f7b1_fixed.java
index 800e6e1..46cf076 100644
--- a/tmp/a6c2b581-124b-4f95-ba68-0971c8e940c3_buggy.java
+++ b/tmp/e4663454-a995-421d-bb2b-a7bf97c9f7b1_fixed.java
@@ -1,32 +1,47 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n == scope.getRootNode()) return;
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  // Don't re-enter the root of this scope.
+  if (n == scope.getRootNode()) {
+    return;
+  }
 
+  // Handle the parameter list for this function.
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
+  // Attach types to literal nodes.
   attachLiteralTypes(n);
+
+  // Create any "stub" declarations for qualified names or this-refs
+  // that carry JSDoc (e.g. /** @param */ goog.foo;  or  /** @return */ this.bar;).
+  JSDocInfo jsdoc = n.getJSDocInfo();
+  if (jsdoc != null && n.getType() == Token.GETPROP) {
+    defineQualifiedNameBasedStubDeclarations(n, parent);
+    return;
+  }
+
+  // Handle ordinary declarations.
   switch (n.getType()) {
     case Token.FUNCTION:
+      // Skip the NAME of a function declaration; that is handled
+      // in the FUNCTION node itself.
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
+
     case Token.CATCH:
       defineCatch(n, parent);
       break;
+
     case Token.VAR:
       defineVar(n, parent);
       break;
+
+    default:
+      // no-op
   }
 }
\ No newline at end of file
