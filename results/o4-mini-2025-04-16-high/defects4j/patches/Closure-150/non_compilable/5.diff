diff --git a/tmp/df7d5f60-f2de-4adb-ac64-7996c8b8b651_buggy.java b/tmp/2df61e5c-903b-4856-86f0-12555e777d51_fixed.java
index 800e6e1..9701c72 100644
--- a/tmp/df7d5f60-f2de-4adb-ac64-7996c8b8b651_buggy.java
+++ b/tmp/2df61e5c-903b-4856-86f0-12555e777d51_fixed.java
@@ -1,32 +1,41 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n == scope.getRootNode()) return;
+  // Don't re-enter the root.
+  if (n == scope.getRootNode()) {
+    return;
+  }
 
+  // Handle the function parameter list for a local function.
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
+  // Attach types for literals (booleans, numbers, strings).
   attachLiteralTypes(n);
+
+  // Handle JSDoc-backed "stub" declarations on qualified names,
+  // e.g. /** @param {number} x */ goog.foo;
+  if (n.getType() == Token.GETPROP && n.getJSDocInfo() != null) {
+    defineNameDeclaration(n, parent);
+    return;
+  }
+
+  // Now handle real declarations: functions, catches, vars.
   switch (n.getType()) {
     case Token.FUNCTION:
+      // Skip the NAME child of a function declaration
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
+
     case Token.CATCH:
       defineCatch(n, parent);
       break;
+
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
