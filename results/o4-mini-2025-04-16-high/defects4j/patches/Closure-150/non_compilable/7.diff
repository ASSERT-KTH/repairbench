diff --git a/tmp/8859570a-436e-4f48-8c7a-102387950f0b_buggy.java b/tmp/f266eb97-7bb6-4b55-a3c8-0aa63476526a_fixed.java
index 800e6e1..c4288a9 100644
--- a/tmp/8859570a-436e-4f48-8c7a-102387950f0b_buggy.java
+++ b/tmp/f266eb97-7bb6-4b55-a3c8-0aa63476526a_fixed.java
@@ -1,32 +1,76 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n == scope.getRootNode()) return;
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  // Skip the function node itself.
+  if (n == scope.getRootNode()) {
+    return;
+  }
 
+  // Handle the parameter list of the function that owns this scope.
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
+  // First attach any literal types (@type, @return, @param) to the node.
   attachLiteralTypes(n);
+
+  // Now handle stub declarations on qualified names, e.g.
+  //    /** @param {number} x */ goog.foo;
+  if ((n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
+    JSDocInfo jsdoc = n.getJSDocInfo();
+    // We only care about "stubs" that carry a @type, @return or @param declaration.
+    if (jsdoc != null
+        && (jsdoc.getType()         != null
+            || jsdoc.getReturnType() != null
+            || jsdoc.getParameterCount() > 0)) {
+      // The full qualified name, e.g. "goog.foo"
+      String qName = n.getQualifiedName();
+      // The JSType that attachLiteralTypes just stuck on this GETPROP/GETELEM.
+      JSType stubType = n.getJSType();
+      if (qName != null && stubType != null) {
+        // 1) Declare a pseudo‚Äêvariable in this scope called "goog.foo"
+        //    so that later lookups like getVar("goog.foo") will succeed.
+        Var stubVar = scope.declare(qName, n);
+        if (stubVar != null) {
+          stubVar.setType(stubType);
+          stubVar.setTypeInferred(false);
+        }
+        // 2) Define the property on the owner object's type
+        Node owner = n.getFirstChild();
+        JSType maybeOwnerType = null;
+        if (owner.isName() || owner.isThis()) {
+          Var ownerVar = scope.getVar(owner.getString());
+          if (ownerVar != null) {
+            maybeOwnerType = ownerVar.getType();
+          }
+        } else {
+          maybeOwnerType = owner.getJSType();
+        }
+        if (maybeOwnerType instanceof ObjectType) {
+          ObjectType ownerObj = (ObjectType) maybeOwnerType;
+          String propName = n.getLastChild().getString();
+          ownerObj.defineDeclaredProperty(propName, stubType, n);
+        }
+      }
+    }
+  }
+
+  // Finally handle ordinary function, catch and var declarations.
   switch (n.getType()) {
     case Token.FUNCTION:
+      // Skip the NAME node when it's the child of a FUNCTION.
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
+
     case Token.CATCH:
       defineCatch(n, parent);
       break;
+
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
