diff --git a/tmp/98e1935d-cb80-421e-94ed-a01c09ea2a54_buggy.java b/tmp/f474e7f0-a293-444b-9373-717c40e85eaf_fixed.java
index bfa2423..2c7dd03 100644
--- a/tmp/98e1935d-cb80-421e-94ed-a01c09ea2a54_buggy.java
+++ b/tmp/f474e7f0-a293-444b-9373-717c40e85eaf_fixed.java
@@ -1,23 +1,20 @@
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                                                sampleSize);
     }
-
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
-
+    // find the most specific common superclass of all support‐values
+    Class<?> componentType = singletons.get(0).getClass();
+    for (T v : singletons) {
+        Class<?> cls = v.getClass();
+        while (!componentType.isAssignableFrom(cls)) {
+            componentType = componentType.getSuperclass();
+        }
+    }
+    @SuppressWarnings("unchecked")
+    T[] out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
-
     return out;
-
 }
\ No newline at end of file
