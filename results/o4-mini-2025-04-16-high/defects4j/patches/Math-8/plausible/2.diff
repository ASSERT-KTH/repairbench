diff --git a/tmp/70d469c4-dc32-4aaf-8b65-66f507040e49_buggy.java b/tmp/0b84e3ed-cf24-4187-8581-24520f0b864f_fixed.java
index bfa2423..a74abe7 100644
--- a/tmp/70d469c4-dc32-4aaf-8b65-66f507040e49_buggy.java
+++ b/tmp/0b84e3ed-cf24-4187-8581-24520f0b864f_fixed.java
@@ -1,23 +1,38 @@
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                 sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Compute the most specific common superclass of all singleton values
+    Class<?> componentType = null;
+    for (T value : singletons) {
+        if (value == null) {
+            continue;
+        }
+        Class<?> cls = value.getClass();
+        if (componentType == null) {
+            componentType = cls;
+        } else if (!componentType.isAssignableFrom(cls)) {
+            if (cls.isAssignableFrom(componentType)) {
+                componentType = cls;
+            } else {
+                Class<?> temp = componentType;
+                while (temp != null && !temp.isAssignableFrom(cls)) {
+                    temp = temp.getSuperclass();
+                }
+                componentType = (temp != null) ? temp : Object.class;
+            }
+        }
+    }
+    if (componentType == null) {
+        componentType = Object.class;
+    }
 
+    @SuppressWarnings("unchecked")
+    final T[] out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
-
     return out;
-
 }
\ No newline at end of file
