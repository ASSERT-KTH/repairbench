diff --git a/tmp/5a8d8af4-190a-42be-8cc3-f2b0907c3e79_buggy.java b/tmp/dab58868-66b1-4da1-bfe0-570ab1012b85_fixed.java
index e4d90e7..973a4da 100644
--- a/tmp/5a8d8af4-190a-42be-8cc3-f2b0907c3e79_buggy.java
+++ b/tmp/dab58868-66b1-4da1-bfe0-570ab1012b85_fixed.java
@@ -1,45 +1,47 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+         current != null && !current.isNativeObjectType()
+             && (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
-
-        sb.append(property);
-        sb.append(": ");
+      sb.append(property).append(": ");
+      // Use annotation or normal toString depending on the flag.
+      if (forAnnotations) {
+        sb.append(getPropertyType(property).toAnnotationString());
+      } else {
         sb.append(getPropertyType(property).toString());
-
+      }
       ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      // Only truncate when not building an annotation string.
+      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(", ...");
         break;
       }
     }
 
     sb.append("}");
-
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
