diff --git a/tmp/671d3425-29a8-4cf0-adec-e1f812d76d39_buggy.java b/tmp/32a00f46-4b3e-4ad1-b978-c7d30c664afa_fixed.java
index e4d90e7..23be9fa 100644
--- a/tmp/671d3425-29a8-4cf0-adec-e1f812d76d39_buggy.java
+++ b/tmp/32a00f46-4b3e-4ad1-b978-c7d30c664afa_fixed.java
@@ -1,45 +1,51 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
+  // If this type has a reference name, just print it.
   if (hasReferenceName()) {
     return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
+  }
+  // We pretty‐print either when asked explicitly for annotations
+  // or when our 'prettyPrint' flag is set.
+  if (forAnnotations || prettyPrint) {
+    // Turn off prettyPrint to prevent recursive re‐entry.
     prettyPrint = false;
 
-      // Use a tree set so that the properties are sorted.
+    // Collect all property names in sorted order.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+         current != null && !current.isNativeObjectType()
+             && (forAnnotations
+                 || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
-      for (String property : propertyNames) {
+    for (String prop : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
+      sb.append(prop).append(": ");
+      JSType t = getPropertyType(prop);
+      // In annotation mode, use toAnnotationString(), else toString().
+      sb.append(forAnnotations ? t.toAnnotationString() : t.toString());
 
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      i++;
+      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(", ...");
         break;
       }
     }
 
     sb.append("}");
-
+    // Restore the flag.
     prettyPrint = true;
     return sb.toString();
   } else {
+    // We're in a recursive context and not pretty‐printing.
     return "{...}";
   }
 }
\ No newline at end of file
