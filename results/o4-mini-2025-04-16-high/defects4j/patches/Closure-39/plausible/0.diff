diff --git a/tmp/086b32a7-4bfc-4c16-a7ed-16a9980abc2b_buggy.java b/tmp/7613e113-c896-4369-9615-e5bdbf608787_fixed.java
index e4d90e7..2dbe762 100644
--- a/tmp/086b32a7-4bfc-4c16-a7ed-16a9980abc2b_buggy.java
+++ b/tmp/7613e113-c896-4369-9615-e5bdbf608787_fixed.java
@@ -1,45 +1,70 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
-      prettyPrint = false;
+  }
 
-      // Use a tree set so that the properties are sorted.
+  // Annotation mode: show all props, guard recursion with "?"
+  if (forAnnotations) {
+    if (!prettyPrint) {
+      return "?";
+    }
+    prettyPrint = false;
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+         current != null && !current.isNativeObjectType();
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
+    boolean first = true;
+    for (String property : propertyNames) {
+      if (!first) {
+        sb.append(", ");
+      }
+      sb.append(property).append(": ")
+        .append(getPropertyType(property).toAnnotationString());
+      first = false;
+    }
+    sb.append("}");
+    prettyPrint = true;
+    return sb.toString();
+  }
+
+  // Pretty‐print mode: limit to MAX_PRETTY_PRINTED_PROPERTIES, guard recursion with "{...}"
+  if (prettyPrint) {
+    prettyPrint = false;
+    Set<String> propertyNames = Sets.newTreeSet();
+    for (ObjectType current = this;
+         current != null
+             && !current.isNativeObjectType()
+             && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+         current = current.getImplicitPrototype()) {
+      propertyNames.addAll(current.getOwnPropertyNames());
+    }
 
+    StringBuilder sb = new StringBuilder();
+    sb.append("{");
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
-
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
+      sb.append(property).append(": ")
+        .append(getPropertyType(property).toString());
+      i++;
       if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(", ...");
         break;
       }
     }
-
     sb.append("}");
-
     prettyPrint = true;
     return sb.toString();
-    } else {
+  }
+
+  // Recursive case in non‐annotation, non‐pretty mode
   return "{...}";
 }
\ No newline at end of file
-  }
