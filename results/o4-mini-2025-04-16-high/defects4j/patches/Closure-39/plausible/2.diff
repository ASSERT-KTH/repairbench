diff --git a/tmp/73543baf-a766-4d1d-80cd-74c4a1a12c57_buggy.java b/tmp/d4143911-e7cb-4b6c-8bb8-ab4b6e01bc56_fixed.java
index e4d90e7..3149411 100644
--- a/tmp/73543baf-a766-4d1d-80cd-74c4a1a12c57_buggy.java
+++ b/tmp/d4143911-e7cb-4b6c-8bb8-ab4b6e01bc56_fixed.java
@@ -1,45 +1,46 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
-    } else if (prettyPrint) {
+  }
+  // Recursion guard: if we're already printing this type, stop here.
+  if (!prettyPrint) {
+    return forAnnotations ? "?" : "{...}";
+  }
+
   // Don't pretty print recursively.
   prettyPrint = false;
 
   // Use a tree set so that the properties are sorted.
   Set<String> propertyNames = Sets.newTreeSet();
   for (ObjectType current = this;
        current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+         (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);
        current = current.getImplicitPrototype()) {
     propertyNames.addAll(current.getOwnPropertyNames());
   }
 
   StringBuilder sb = new StringBuilder();
   sb.append("{");
 
   int i = 0;
   for (String property : propertyNames) {
     if (i > 0) {
       sb.append(", ");
     }
-
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+    sb.append(property).append(": ");
+    JSType propType = getPropertyType(property);
+    sb.append(forAnnotations
+              ? propType.toAnnotationString()
+              : propType.toString());
+    i++;
+    if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
       sb.append(", ...");
       break;
     }
   }
 
   sb.append("}");
-
   prettyPrint = true;
   return sb.toString();
-    } else {
-      return "{...}";
-    }
 }
\ No newline at end of file
