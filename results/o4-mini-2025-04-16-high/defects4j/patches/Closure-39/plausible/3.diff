diff --git a/tmp/9fc7253b-8214-4878-a9ab-4b952c633d7b_buggy.java b/tmp/2a0ca412-f993-435c-8bd8-19b00351301b_fixed.java
index e4d90e7..e386328 100644
--- a/tmp/9fc7253b-8214-4878-a9ab-4b952c633d7b_buggy.java
+++ b/tmp/2a0ca412-f993-435c-8bd8-19b00351301b_fixed.java
@@ -1,45 +1,58 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
+  // If this type has a reference name, just use it.
   if (hasReferenceName()) {
     return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
+  }
+  // Recursion guard: if we've already entered pretty‐printing on this instance,
+  // then for annotations we return "?" and for toString() we return "{...}".
+  if (!prettyPrint) {
+    return forAnnotations ? "?" : "{...}";
+  }
+  // Enter pretty‐print mode (turn off the guard).
   prettyPrint = false;
-
-      // Use a tree set so that the properties are sorted.
+  // Collect all property names in a sorted set.  If we're doing a normal toString(),
+  // stop collecting once we've exceeded the max; for annotations we collect them all.
   Set<String> propertyNames = Sets.newTreeSet();
-      for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
-           current = current.getImplicitPrototype()) {
-        propertyNames.addAll(current.getOwnPropertyNames());
+  for (ObjectType cur = this;
+       cur != null && !cur.isNativeObjectType();
+       cur = cur.getImplicitPrototype()) {
+    propertyNames.addAll(cur.getOwnPropertyNames());
+    if (!forAnnotations && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
+      break;
     }
-
+  }
+  // Build the output.
   StringBuilder sb = new StringBuilder();
   sb.append("{");
-
+  if (!forAnnotations) {
+    // Normal toString(): cap at MAX_PRETTY_PRINTED_PROPERTIES
     int i = 0;
-      for (String property : propertyNames) {
+    for (String prop : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
-
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
+      sb.append(prop).append(": ").append(getPropertyType(prop).toString());
+      i++;
       if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(", ...");
         break;
       }
     }
-
+  } else {
+    // Annotation string: list them all, and use toAnnotationString() on each type
+    int i = 0;
+    for (String prop : propertyNames) {
+      if (i > 0) {
+        sb.append(", ");
+      }
+      sb.append(prop).append(": ")
+        .append(getPropertyType(prop).toAnnotationString());
+      i++;
+    }
+  }
   sb.append("}");
-
+  // Restore the recursion guard.
   prettyPrint = true;
   return sb.toString();
-    } else {
-      return "{...}";
-    }
 }
\ No newline at end of file
