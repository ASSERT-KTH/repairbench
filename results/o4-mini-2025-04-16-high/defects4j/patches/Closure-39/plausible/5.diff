diff --git a/tmp/1d30b970-671a-4ca8-8ec3-b0980673f96f_buggy.java b/tmp/de53e25d-6331-4def-bf37-54c4b331032a_fixed.java
index e4d90e7..07d98aa 100644
--- a/tmp/1d30b970-671a-4ca8-8ec3-b0980673f96f_buggy.java
+++ b/tmp/de53e25d-6331-4def-bf37-54c4b331032a_fixed.java
@@ -1,45 +1,47 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+             (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
-
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      sb.append(property).append(": ");
+      JSType propType = getPropertyType(property);
+      sb.append(forAnnotations
+                ? propType.toAnnotationString()
+                : propType.toString());
+      i++;
+      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(", ...");
         break;
       }
     }
 
     sb.append("}");
-
+    // Restore the flag for outer calls.
     prettyPrint = true;
     return sb.toString();
   } else {
-      return "{...}";
+    // On recursive re‚Äêentry we show "{...}" for toString()
+    // but "?" in an annotation context.
+    return forAnnotations ? "?" : "{...}";
   }
 }
\ No newline at end of file
