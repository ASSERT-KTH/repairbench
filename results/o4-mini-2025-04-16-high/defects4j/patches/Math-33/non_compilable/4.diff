diff --git a/tmp/e79419c0-0e5b-4dc1-9abd-b88cb8dd6b08_buggy.java b/tmp/2f0ce549-3df5-425c-a838-64d11b0ee443_fixed.java
index 56b2d66..4825ab4 100644
--- a/tmp/e79419c0-0e5b-4dc1-9abd-b88cb8dd6b08_buggy.java
+++ b/tmp/2f0ce549-3df5-425c-a838-64d11b0ee443_fixed.java
@@ -1,45 +1,56 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
+    @Override
     protected void dropPhase1Objective() {
+        // if we never did a two‐phase solve, nothing to drop
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
+        // we will drop column 0 (the phase‐1 objective constant)
         List<Integer> columnsToDrop = new ArrayList<Integer>();
         columnsToDrop.add(0);
 
-        // positive cost non-artificial variables
+        // determine which objective‐row holds the original (phase‐2) costs
+        final int phase2Row = getNumObjectiveFunctions() - 1;
+        // scan all non‐artificial columns and drop those with positive phase‐2 cost
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
+            final double entry = tableau.getEntry(phase2Row, i);
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
-        // non-basic artificial variables
+        // drop any artificial variables that are not basic
         for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
+            final int col = i + getArtificialVariableOffset();
             if (getBasicRow(col) == null) {
                 columnsToDrop.add(col);
             }
         }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+        // build a new matrix without the dropped columns and without the phase‐1 row
+        final int newRows = getHeight() - 1;
+        final int newCols = getWidth() - columnsToDrop.size();
+        double[][] newData = new double[newRows][newCols];
+        for (int r = 1; r < getHeight(); r++) {
+            int destCol = 0;
+            for (int c = 0; c < getWidth(); c++) {
+                if (!columnsToDrop.contains(c)) {
+                    newData[r - 1][destCol++] = tableau.getEntry(r, c);
                 }
             }
         }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+        // remove the corresponding labels (in reverse order so indices stay valid)
+        Collections.sort(columnsToDrop, Collections.reverseOrder());
+        for (int colIndex : columnsToDrop) {
+            columnLabels.remove(colIndex);
         }
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+        // install the reduced tableau and clear out artificials
+        this.tableau = new Array2DRowRealMatrix(newData, false);
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
