diff --git a/tmp/44bc3dde-376c-4853-a35d-ac24c8b60f9a_buggy.java b/tmp/9be9077f-d17d-43de-b992-4cb10cc26d72_fixed.java
index 56b2d66..11c80fc 100644
--- a/tmp/44bc3dde-376c-4853-a35d-ac24c8b60f9a_buggy.java
+++ b/tmp/9be9077f-d17d-43de-b992-4cb10cc26d72_fixed.java
@@ -1,45 +1,58 @@
 /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
+ * Removes the phase 1 objective function, positive-cost non-artificial variables,
  * and the non-basic artificial variables from this tableau.
  */
+@Override
 protected void dropPhase1Objective() {
+    // if there is only one objective (no phase-1), nothing to do
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
+    // we will collect the indices of all columns to drop
     List<Integer> columnsToDrop = new ArrayList<Integer>();
+    // the first column is the "z" or objective helper column – drop it
     columnsToDrop.add(0);
 
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
+    // Determine which non‐artificial variables have positive cost
+    // in the PHASE-1 objective row.
+    // In a two‐phase tableau, the phase-1 objective is the last objective row:
+    final int phase1Row = getNumObjectiveFunctions() - 1;
+    // all non-artificial columns lie between the objective block and the artificial block
+    for (int col = getNumObjectiveFunctions(); col < getArtificialVariableOffset(); col++) {
+        double entry = tableau.getEntry(phase1Row, col);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                columnsToDrop.add(i);
+            columnsToDrop.add(col);
         }
     }
 
-        // non-basic artificial variables
+    // Drop all non‐basic artificial columns:
     for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
-          if (getBasicRow(col) == null) {
+        int col = getArtificialVariableOffset() + i;
+        Integer basicRow = getBasicRow(col);
+        if (basicRow == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+    // Build a new matrix: skip the phase-1 objective row (row 0) and drop the marked columns
+    double[][] newData = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+    for (int r = 1; r < getHeight(); r++) {
+        int destCol = 0;
+        for (int c = 0; c < getWidth(); c++) {
+            if (!columnsToDrop.contains(c)) {
+                newData[r - 1][destCol++] = tableau.getEntry(r, c);
             }
         }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // Remove the corresponding labels, in descending order so indices stay valid
+    Collections.sort(columnsToDrop, Collections.reverseOrder());
+    for (int colIndex : columnsToDrop) {
+        columnLabels.remove(colIndex);
     }
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+    // Install the reduced tableau and reset the artificial‐variable count
+    this.tableau = new Array2DRowRealMatrix(newData, false);
     this.numArtificialVariables = 0;
 }
\ No newline at end of file
