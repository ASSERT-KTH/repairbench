diff --git a/tmp/4f798c58-e3cd-4c18-a433-709423aeeca2_buggy.java b/tmp/c9d6fba8-2255-4303-b8da-579607c16eae_fixed.java
index 56b2d66..56c1f42 100644
--- a/tmp/4f798c58-e3cd-4c18-a433-709423aeeca2_buggy.java
+++ b/tmp/c9d6fba8-2255-4303-b8da-579607c16eae_fixed.java
@@ -1,45 +1,58 @@
 /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
+ * Removes the phase 1 objective function, positive cost non‐artificial variables,
+ * and the non‐basic artificial variables from this tableau.
  */
+@Override
 protected void dropPhase1Objective() {
+    // if we only have one objective function, nothing to drop
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
+    // collect the indices of all columns to be removed
     List<Integer> columnsToDrop = new ArrayList<Integer>();
+    // remove the phase‐1 objective function column (the first objective column)
     columnsToDrop.add(0);
 
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                columnsToDrop.add(i);
+    // remove any non‐artificial variable whose phase‐1 reduced cost is strictly positive
+    for (int j = getNumObjectiveFunctions(); j < getArtificialVariableOffset(); j++) {
+        double cost = tableau.getEntry(0, j);
+        if (Precision.compareTo(cost, 0d, maxUlps) > 0) {
+            columnsToDrop.add(j);
         }
     }
 
-        // non-basic artificial variables
-        for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
+    // remove any artificial variable that is not basic at the end of phase‐1
+    for (int k = 0; k < getNumArtificialVariables(); k++) {
+        int col = getArtificialVariableOffset() + k;
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+    // build a new matrix without the dropped row (phase‐1 objective) and dropped columns
+    int newRows = getHeight() - 1;
+    int newCols = getWidth() - columnsToDrop.size();
+    double[][] reduced = new double[newRows][newCols];
+
     for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+        int destCol = 0;
         for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+                reduced[i - 1][destCol++] = tableau.getEntry(i, j);
             }
         }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // remove labels in reverse‐sorted order to avoid shifting issues
+    Collections.sort(columnsToDrop);
+    for (int idx = columnsToDrop.size() - 1; idx >= 0; idx--) {
+        columnLabels.remove(columnsToDrop.get(idx).intValue());
     }
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+    // install the reduced tableau and update counters for phase‐2
+    this.tableau = new Array2DRowRealMatrix(reduced);
     this.numArtificialVariables = 0;
+    // we have dropped the phase‐1 objective, so only one objective remains
+    this.numObjectiveFunctions = 1;
 }
\ No newline at end of file
