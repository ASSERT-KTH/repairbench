diff --git a/tmp/fb4d74b8-2eff-46f0-9991-3e8e4b5503dc_buggy.java b/tmp/6d9aa2d2-8d8a-4e46-8e47-0fc50ecdb785_fixed.java
index 56b2d66..2afa75e 100644
--- a/tmp/fb4d74b8-2eff-46f0-9991-3e8e4b5503dc_buggy.java
+++ b/tmp/6d9aa2d2-8d8a-4e46-8e47-0fc50ecdb785_fixed.java
@@ -1,45 +1,57 @@
 /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
+ * Removes the phase 1 objective function column, positive‐cost slack/surplus
+ * variables (but not the decision‐variable columns when variables are free),
+ * and the non‐basic artificial variables from this tableau.
  */
+@Override
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
     List<Integer> columnsToDrop = new ArrayList<Integer>();
+    // drop the phase‐1 objective function column (the first z1 column)
     columnsToDrop.add(0);
 
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
+    // drop positive‐cost slack/surplus vars only; if variables are free (restrictToNonNegative==false)
+    // skip over the decision‐variable columns which were split
+    int start = getNumObjectiveFunctions();
+    if (!restrictToNonNegative) {
+        start += getNumDecisionVariables();
+    }
+    int artOffset = getArtificialVariableOffset();
+    for (int i = start; i < artOffset; i++) {
+        double entry = tableau.getEntry(0, i);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             columnsToDrop.add(i);
         }
     }
 
-        // non-basic artificial variables
+    // drop non‐basic artificial variable columns
     for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
+        int col = artOffset + i;
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
+    // build the new matrix skipping the phase‐1 objective row and the dropped columns
     double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
     for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+        int destCol = 0;
         for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+                matrix[i - 1][destCol++] = tableau.getEntry(i, j);
             }
         }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // remove the corresponding column labels (in descending order to keep indices valid)
+    Collections.sort(columnsToDrop, Collections.reverseOrder());
+    for (int colIdx : columnsToDrop) {
+        columnLabels.remove(colIdx);
     }
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+    this.tableau = new Array2DRowRealMatrix(matrix, false);
     this.numArtificialVariables = 0;
 }
\ No newline at end of file
