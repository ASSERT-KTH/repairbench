diff --git a/tmp/a2ba811a-158d-4934-b766-837eb32ddd49_buggy.java b/tmp/b31d3897-6723-4026-a65d-f7f576533004_fixed.java
index 56b2d66..8964a28 100644
--- a/tmp/a2ba811a-158d-4934-b766-837eb32ddd49_buggy.java
+++ b/tmp/b31d3897-6723-4026-a65d-f7f576533004_fixed.java
@@ -1,45 +1,57 @@
 /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
+ * Removes the phase 1 objective function, positive cost non‐artificial variables (only
+ * when variables are restricted to non‐negative), and the non‐basic artificial variables
+ * from this tableau.
  */
+@Override
 protected void dropPhase1Objective() {
+    // only one objective => nothing to drop
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
     List<Integer> columnsToDrop = new ArrayList<Integer>();
+    // drop the phase‐1 objective column
     columnsToDrop.add(0);
 
-        // positive cost non-artificial variables
+    // drop positive cost non‐artificial columns only if original variables are non‐negative
+    if (restrictToNonNegative) {
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
+            double entry = tableau.getEntry(0, i);
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
+    }
 
-        // non-basic artificial variables
+    // drop all non‐basic artificial variables
     for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
+        int col = getArtificialVariableOffset() + i;
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+    // build a new matrix skipping row 0 and the dropped columns
+    final int newRows = getHeight() - 1;
+    final int newCols = getWidth() - columnsToDrop.size();
+    double[][] matrix = new double[newRows][newCols];
+    for (int r = 1; r < getHeight(); r++) {
+        int c2 = 0;
+        for (int c = 0; c < getWidth(); c++) {
+            if (!columnsToDrop.contains(c)) {
+                matrix[r - 1][c2++] = tableau.getEntry(r, c);
             }
         }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // remove the column‐labels in reverse order to keep indices valid
+    Collections.sort(columnsToDrop, Collections.reverseOrder());
+    for (int colIndex : columnsToDrop) {
+        columnLabels.remove(colIndex);
     }
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+    // install the new tableau
+    this.tableau = new Array2DRowRealMatrix(matrix, false);
     this.numArtificialVariables = 0;
 }
\ No newline at end of file
