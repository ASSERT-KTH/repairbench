diff --git a/tmp/8fefcfab-d549-40d0-96d3-095a91c62858_buggy.java b/tmp/33bc8d31-d2aa-4377-8948-bf93ef8a1774_fixed.java
index 56b2d66..174c367 100644
--- a/tmp/8fefcfab-d549-40d0-96d3-095a91c62858_buggy.java
+++ b/tmp/33bc8d31-d2aa-4377-8948-bf93ef8a1774_fixed.java
@@ -1,45 +1,59 @@
 /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
+ * Removes the phase 1 objective function, positive‐cost slack variables,
+ * and the non‐basic artificial variables from this tableau.
  */
+@Override
 protected void dropPhase1Objective() {
+    // if there is only one objective function, there's nothing to drop
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
+    // we will rebuild the tableau without:
+    //  1) the phase‐1 objective column (index 0)
+    //  2) any slack columns whose cost in the phase‐1 row is strictly positive
+    //  3) any non‐basic artificial columns
     List<Integer> columnsToDrop = new ArrayList<Integer>();
+    // drop the phase‐1 objective variable column
     columnsToDrop.add(0);
 
-        // positive cost non-artificial variables
+    // drop only slack columns with positive cost in the phase‐1 objective row
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+        if (columnLabels.get(i).getColumnType() == ColumnType.SLACK) {
+            double cost = tableau.getEntry(0, i);
+            if (Precision.compareTo(cost, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
+    }
 
-        // non-basic artificial variables
-        for (int i = 0; i < getNumArtificialVariables(); i++) {
-          int col = i + getArtificialVariableOffset();
+    // drop any artificial variable columns that are not in the basis
+    for (int k = 0; k < getNumArtificialVariables(); k++) {
+        int col = getArtificialVariableOffset() + k;
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
-          for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+    // build a new matrix without the dropped columns, and without the top (phase‐1) row
+    int newRows = getHeight() - 1;
+    int newCols = getWidth() - columnsToDrop.size();
+    double[][] data = new double[newRows][newCols];
+    for (int r = 1; r < getHeight(); r++) {
+        int destCol = 0;
+        for (int c = 0; c < getWidth(); c++) {
+            if (!columnsToDrop.contains(c)) {
+                data[r - 1][destCol++] = tableau.getEntry(r, c);
             }
         }
     }
 
+    // remove the corresponding labels (in reverse order so indices stay valid)
     for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+        columnLabels.remove(columnsToDrop.get(i).intValue());
     }
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+    // install the trimmed tableau and reset the count of artificial variables
+    this.tableau = new Array2DRowRealMatrix(data);
     this.numArtificialVariables = 0;
 }
\ No newline at end of file
