diff --git a/tmp/081f37b2-07e9-4a74-bdaf-79bb78f31c4b_buggy.java b/tmp/5aa4a425-8403-4400-af81-df29b8c52fd7_fixed.java
index 56b2d66..41db0d9 100644
--- a/tmp/081f37b2-07e9-4a74-bdaf-79bb78f31c4b_buggy.java
+++ b/tmp/5aa4a425-8403-4400-af81-df29b8c52fd7_fixed.java
@@ -1,45 +1,54 @@
 /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
+ * Removes the phase 1 objective function, positive cost non‐artificial variables
+ * (w.r.t. the phase 2 objective), and the non‐basic artificial variables from this tableau.
  */
+@Override
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
+        // no phase‐1 in use
         return;
     }
 
     List<Integer> columnsToDrop = new ArrayList<Integer>();
+    // always drop the column used to carry the phase‐1 objective
     columnsToDrop.add(0);
 
-        // positive cost non-artificial variables
-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                columnsToDrop.add(i);
+    // drop any non‐artificial variable whose cost in the phase‐2 objective is positive
+    int phase2Row = getNumObjectiveFunctions() - 1;
+    for (int j = getNumObjectiveFunctions(); j < getArtificialVariableOffset(); j++) {
+        double cost = tableau.getEntry(phase2Row, j);
+        if (Precision.compareTo(cost, 0d, maxUlps) > 0) {
+            columnsToDrop.add(j);
         }
     }
 
-        // non-basic artificial variables
+    // drop all non‐basic artificial variable columns
     for (int i = 0; i < getNumArtificialVariables(); i++) {
         int col = i + getArtificialVariableOffset();
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+    // build the new matrix without the dropped row/columns
+    int newRows = getHeight() - 1;
+    int newCols = getWidth()  - columnsToDrop.size();
+    double[][] newData = new double[newRows][newCols];
     for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+        int destCol = 0;
         for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+                newData[i - 1][destCol++] = tableau.getEntry(i, j);
             }
         }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // remove the matching column labels (in reverse index order)
+    for (int k = columnsToDrop.size() - 1; k >= 0; k--) {
+        columnLabels.remove((int) columnsToDrop.get(k));
     }
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+    // install the new tableau and clear out artificial‐variable count
+    this.tableau = new Array2DRowRealMatrix(newData, false);
     this.numArtificialVariables = 0;
 }
\ No newline at end of file
