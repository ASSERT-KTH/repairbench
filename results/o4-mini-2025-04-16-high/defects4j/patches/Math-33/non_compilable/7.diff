diff --git a/tmp/d601075c-b7ea-4685-8279-e1d47d121876_buggy.java b/tmp/4a77e183-94d6-4dac-8aba-682967fc058f_fixed.java
index 56b2d66..cebfb54 100644
--- a/tmp/d601075c-b7ea-4685-8279-e1d47d121876_buggy.java
+++ b/tmp/4a77e183-94d6-4dac-8aba-682967fc058f_fixed.java
@@ -1,45 +1,58 @@
 /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
+ * Removes the phase 1 objective function, positive cost non‐artificial variables,
+ * and the non‐basic artificial variables from this tableau.
  */
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
+        // already in phase 2
         return;
     }
 
+    // collect the column indices to drop:
+    //   0 = the phase‐1 objective column,
+    //   any non‐artificial with positive cost in row 0,
+    //   any artificial that is non‐basic.
     List<Integer> columnsToDrop = new ArrayList<Integer>();
     columnsToDrop.add(0);
 
-        // positive cost non-artificial variables
+    // positive‐cost non‐artificial
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
-            final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+        double cost = tableau.getEntry(0, i);
+        if (Precision.compareTo(cost, 0d, maxUlps) > 0) {
             columnsToDrop.add(i);
         }
     }
 
-        // non-basic artificial variables
+    // non‐basic artificial
     for (int i = 0; i < getNumArtificialVariables(); i++) {
         int col = i + getArtificialVariableOffset();
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+    // build the new matrix: drop row 0 and the collected columns
+    int newH = getHeight() - 1;
+    int newW = getWidth() - columnsToDrop.size();
+    double[][] newData = new double[newH][newW];
     for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+        int destCol = 0;
         for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+                newData[i - 1][destCol++] = tableau.getEntry(i, j);
             }
         }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // remove the column labels in reverse order
+    Collections.sort(columnsToDrop, Collections.reverseOrder());
+    for (int col : columnsToDrop) {
+        columnLabels.remove(col);
     }
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+    // install the reduced tableau and reset counters:
+    this.tableau = new Array2DRowRealMatrix(newData);
     this.numArtificialVariables = 0;
+    // <--- fix: after dropping phase‐1 you only have one objective function left
+    this.numObjectiveFunctions = 1;
 }
\ No newline at end of file
