diff --git a/tmp/9f66f013-96b0-4220-84ee-e242d645523e_buggy.java b/tmp/28353b35-1d18-4070-a902-4411d64d21ea_fixed.java
index 08093b4..80cec9d 100644
--- a/tmp/9f66f013-96b0-4220-84ee-e242d645523e_buggy.java
+++ b/tmp/28353b35-1d18-4070-a902-4411d64d21ea_fixed.java
@@ -1,42 +1,51 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+        /*
+         * Build the PAX-header entry name under "./PaxHeaders.X/".
+         * We must strip non-ASCII and also remove any trailing slash
+         * so that this pseudo‐file is not treated as a directory
+         * (directories are forced to size=0 and cannot hold data).
+         */
+        String stripped = stripTo7Bits(entryName);
+        if (stripped.endsWith("/")) {
+            stripped = stripped.substring(0, stripped.length() - 1);
+        }
+        String name = "./PaxHeaders.X/" + stripped;
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
-        TarArchiveEntry pex = new TarArchiveEntry(name,
-                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);
+        TarArchiveEntry pex =
+            new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
+        /*
+         * Build the PAX data (key=value records with length prefixes).
+         */
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
+            // initial guess for the record length
             int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
+                + 3 /* space, '=', '\n' */
+                + 2 /* a small over‐estimate for the digit count */;
             String line = len + " " + key + "=" + value + "\n";
-            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
-            while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
-                len = actualLength;
+            int actualLen = line.getBytes(CharsetNames.UTF_8).length;
+            // adjust until the length prefix is accurate
+            while (len != actualLen) {
+                len = actualLen;
                 line = len + " " + key + "=" + value + "\n";
-                actualLength = line.getBytes(CharsetNames.UTF_8).length;
+                actualLen = line.getBytes(CharsetNames.UTF_8).length;
             }
             w.write(line);
         }
+
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
         pex.setSize(data.length);
         putArchiveEntry(pex);
         write(data);
         closeArchiveEntry();
     }
\ No newline at end of file
