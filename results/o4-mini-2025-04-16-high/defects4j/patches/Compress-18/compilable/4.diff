diff --git a/tmp/20be6444-3388-42d5-9f9b-37a67cf0211b_buggy.java b/tmp/96f98296-c962-42a3-a1ed-dcf663e73a7a_fixed.java
index 08093b4..4ca4993 100644
--- a/tmp/20be6444-3388-42d5-9f9b-37a67cf0211b_buggy.java
+++ b/tmp/96f98296-c962-42a3-a1ed-dcf663e73a7a_fixed.java
@@ -1,42 +1,56 @@
 /**
  * Writes a PAX extended header with the given map as contents.
  * @since 1.4
  */
 void writePaxHeaders(String entryName,
                      Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+    // Build a safe 7-bit version of the entry name for the PaxHeaders entry
+    String headerName = stripTo7Bits(entryName);
+    // If the original entry was a directory, strip the trailing slash
+    // so the PAX header entry itself is not mistaken for a directory.
+    if (headerName.endsWith("/")) {
+        headerName = headerName.substring(0, headerName.length() - 1);
+    }
+    // Prepend the PaxHeaders directory
+    String name = "./PaxHeaders.X/" + headerName;
+    // Enforce the classic Tar name length limit
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
+        // After truncation we might end up with a trailing slash again
+        if (name.endsWith("/")) {
+            name = name.substring(0, name.length() - 1);
         }
+    }
+
+    // Create the PAX header entry of type 'x'
     TarArchiveEntry pex = new TarArchiveEntry(name,
                                               TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
+    // Build the body of the PAX header
     StringWriter w = new StringWriter();
     for (Map.Entry<String, String> h : headers.entrySet()) {
         String key = h.getKey();
         String value = h.getValue();
+        // initial length guess: key + "=" + value + "\n" plus a space and
+        // a couple of extra digits for the length itself
         int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
+                + 3  /* space, equals, newline */
+                + 2  /* initial guess for number of digits in len */;
         String line = len + " " + key + "=" + value + "\n";
         int actualLength = line.getBytes(CharsetNames.UTF_8).length;
-            while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
+        // adjust until the byte-length of the line matches the length prefix
+        while (actualLength != len) {
             len = actualLength;
             line = len + " " + key + "=" + value + "\n";
             actualLength = line.getBytes(CharsetNames.UTF_8).length;
         }
         w.write(line);
     }
+
+    // Convert to bytes, set the entry size, and write it out
     byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
     pex.setSize(data.length);
     putArchiveEntry(pex);
     write(data);
     closeArchiveEntry();
 }
\ No newline at end of file
