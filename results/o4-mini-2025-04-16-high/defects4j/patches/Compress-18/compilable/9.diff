diff --git a/tmp/07a59a24-8948-4817-873e-ada2954d0595_buggy.java b/tmp/f772649e-89d5-49ca-b601-d8b755b03234_fixed.java
index 08093b4..aae02d7 100644
--- a/tmp/07a59a24-8948-4817-873e-ada2954d0595_buggy.java
+++ b/tmp/f772649e-89d5-49ca-b601-d8b755b03234_fixed.java
@@ -1,42 +1,48 @@
 /**
  * Writes a PAX extended header with the given map as contents.
  * @since 1.4
  */
 void writePaxHeaders(String entryName,
                      Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+    // Build a safe, ASCII‐only name for the PAX header itself.
+    String safe = stripTo7Bits(entryName);
+    // If the original entry was a directory (ends with '/'),
+    // strip that trailing slash so we don't look like a directory here.
+    if (safe.endsWith("/")) {
+        safe = safe.substring(0, safe.length() - 1);
+    }
+    String name = "./PaxHeaders.X/" + safe;
+    // Trim if it would overflow the 100‐byte name field.
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
     }
+    // Create a “local” PAX header entry (type 'x').
     TarArchiveEntry pex = new TarArchiveEntry(name,
                                               TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
+    // Build the in‐memory PAX payload.
     StringWriter w = new StringWriter();
     for (Map.Entry<String, String> h : headers.entrySet()) {
         String key = h.getKey();
         String value = h.getValue();
-            int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
+        // initial guess: key+value+space+equals+newline + a margin for the length digits
+        int len = key.length() + value.length() + 3 /* space, '=', '\n' */
+                + 2 /* assume two‐digit length */;
         String line = len + " " + key + "=" + value + "\n";
-            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
-            while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
-                len = actualLength;
+        int actual = line.getBytes(CharsetNames.UTF_8).length;
+        // adjust until the leading length field is correct
+        while (actual != len) {
+            len = actual;
             line = len + " " + key + "=" + value + "\n";
-                actualLength = line.getBytes(CharsetNames.UTF_8).length;
+            actual = line.getBytes(CharsetNames.UTF_8).length;
         }
         w.write(line);
     }
     byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
+
+    // Now set the size of the PAX entry and write it out.
     pex.setSize(data.length);
     putArchiveEntry(pex);
     write(data);
     closeArchiveEntry();
 }
\ No newline at end of file
