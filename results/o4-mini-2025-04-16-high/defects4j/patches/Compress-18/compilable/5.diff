diff --git a/tmp/55df9ef6-98da-40b8-b9eb-4a7b115898fe_buggy.java b/tmp/3cff00d6-a555-4ccf-978f-bdd950b822ca_fixed.java
index 08093b4..ece4abd 100644
--- a/tmp/55df9ef6-98da-40b8-b9eb-4a7b115898fe_buggy.java
+++ b/tmp/3cff00d6-a555-4ccf-978f-bdd950b822ca_fixed.java
@@ -1,42 +1,51 @@
 /**
  * Writes a PAX extended header with the given map as contents.
  * @since 1.4
  */
 void writePaxHeaders(String entryName,
                      Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+    // Convert the entry name to 7‐bit ASCII
+    String paxName = stripTo7Bits(entryName);
+    // If the original entry was a directory (ends with '/'), drop the '/'
+    // from the PAX header entry name so it isn't treated as a directory.
+    if (entryName.endsWith("/") && paxName.endsWith("/")) {
+        paxName = paxName.substring(0, paxName.length() - 1);
+    }
+    // Build the PAX header entry name
+    String name = "./PaxHeaders.X/" + paxName;
+    // Truncate if it exceeds the TAR name field
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
     }
-        TarArchiveEntry pex = new TarArchiveEntry(name,
-                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
+    // Create the special PAX header entry (type 'x')
+    TarArchiveEntry pex =
+        new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC);
+
+    // Build the PAX header body
     StringWriter w = new StringWriter();
-        for (Map.Entry<String, String> h : headers.entrySet()) {
-            String key = h.getKey();
-            String value = h.getValue();
-            int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
+    for (Map.Entry<String, String> hdr : headers.entrySet()) {
+        String key = hdr.getKey();
+        String value = hdr.getValue();
+        // initial guess: key + "=" + value + space + newline + overhead
+        int len = key.length() + value.length() + 3 /* space, '=' and '\n' */
+                + 2 /* approximate digits */;
         String line = len + " " + key + "=" + value + "\n";
-            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
-            while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
-                len = actualLength;
+        int actual = line.getBytes(CharsetNames.UTF_8).length;
+        // adjust length until it matches the byte count
+        while (actual != len) {
+            len = actual;
             line = len + " " + key + "=" + value + "\n";
-                actualLength = line.getBytes(CharsetNames.UTF_8).length;
+            actual = line.getBytes(CharsetNames.UTF_8).length;
         }
         w.write(line);
     }
+
     byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
+    // Set the correct size so TarArchiveOutputStream will allow writing
     pex.setSize(data.length);
+
     putArchiveEntry(pex);
     write(data);
     closeArchiveEntry();
 }
\ No newline at end of file
