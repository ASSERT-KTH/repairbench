diff --git a/tmp/acf9c19c-3576-4748-b66a-41ccf5606473_buggy.java b/tmp/2d24b57b-aabd-4f60-a529-bc40d1235433_fixed.java
index 08093b4..d7a4060 100644
--- a/tmp/acf9c19c-3576-4748-b66a-41ccf5606473_buggy.java
+++ b/tmp/2d24b57b-aabd-4f60-a529-bc40d1235433_fixed.java
@@ -1,42 +1,41 @@
-    /**
-     * Writes a PAX extended header with the given map as contents.
-     * @since 1.4
-     */
 void writePaxHeaders(String entryName,
                      Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+    // Build an ASCII‐only name for the PAX header file,
+    // and strip any trailing slash so it's treated as a file.
+    String asciiName = stripTo7Bits(entryName);
+    if (asciiName.endsWith("/")) {
+        asciiName = asciiName.substring(0, asciiName.length() - 1);
+    }
+    String name = "./PaxHeaders.X/" + asciiName;
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
     }
+
     TarArchiveEntry pex = new TarArchiveEntry(name,
                                               TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
+    // Create the PAX record(s)
     StringWriter w = new StringWriter();
     for (Map.Entry<String, String> h : headers.entrySet()) {
         String key = h.getKey();
         String value = h.getValue();
-            int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
+        // initial length estimate: digits + space + key + '=' + value + '\n'
+        int len = key.length() + value.length() + 3 /* space, '=', '\n' */
+                + 2 /* rough digit‐count guess */;
         String line = len + " " + key + "=" + value + "\n";
         int actualLength = line.getBytes(CharsetNames.UTF_8).length;
         while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
             len = actualLength;
             line = len + " " + key + "=" + value + "\n";
             actualLength = line.getBytes(CharsetNames.UTF_8).length;
         }
         w.write(line);
     }
+
     byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
     pex.setSize(data.length);
+
     putArchiveEntry(pex);
     write(data);
     closeArchiveEntry();
 }
\ No newline at end of file
