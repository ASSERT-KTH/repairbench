diff --git a/tmp/144065b5-12d1-4316-b396-c9459e7e8326_buggy.java b/tmp/5c3c59d8-f19e-4416-b265-41f846a7bccd_fixed.java
index 08093b4..e52e42d 100644
--- a/tmp/144065b5-12d1-4316-b396-c9459e7e8326_buggy.java
+++ b/tmp/5c3c59d8-f19e-4416-b265-41f846a7bccd_fixed.java
@@ -1,42 +1,50 @@
 /**
  * Writes a PAX extended header with the given map as contents.
  * @since 1.4
  */
 void writePaxHeaders(String entryName,
                      Map<String, String> headers) throws IOException {
+    // Build the PAX header filename.  We strip to 7-bit so it's valid ASCII,
+    // but if it still ends with a slash TarArchiveEntry will treat it as a directory
+    // and refuse any data, so we rtrim any trailing slash.
     String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+    if (name.endsWith("/")) {
+        name = name.substring(0, name.length() - 1);
+    }
+    // Ensure we don't exceed the POSIX name field
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
+        // after truncation it might again end with '/', so trim again
+        if (name.endsWith("/")) {
+            name = name.substring(0, name.length() - 1);
+        }
     }
     TarArchiveEntry pex = new TarArchiveEntry(name,
                                               TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
+    // Build the PAX record(s)
     StringWriter w = new StringWriter();
     for (Map.Entry<String, String> h : headers.entrySet()) {
         String key = h.getKey();
         String value = h.getValue();
-            int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
+        // initial length guess: key + "=" + value + "\n" + leading length and space
+        int len = key.length() + value.length() + 3 /* space, '=', '\n' */
+                  + 2 /* rough guess for the digit count */;
         String line = len + " " + key + "=" + value + "\n";
         int actualLength = line.getBytes(CharsetNames.UTF_8).length;
+        // adjust until the byte‐length of the line matches the declared length
         while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
             len = actualLength;
             line = len + " " + key + "=" + value + "\n";
             actualLength = line.getBytes(CharsetNames.UTF_8).length;
         }
         w.write(line);
     }
+
+    // Write out the header entry and its data
     byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
     pex.setSize(data.length);
     putArchiveEntry(pex);
     write(data);
     closeArchiveEntry();
 }
\ No newline at end of file
