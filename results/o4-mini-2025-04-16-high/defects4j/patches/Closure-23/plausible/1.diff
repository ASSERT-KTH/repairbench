diff --git a/tmp/e1cafad7-f0e4-4212-8005-1dd5ff65d235_buggy.java b/tmp/ab0f12db-b9ee-4d4e-93d9-0d3c68e791ba_fixed.java
index cfdcd9c..5722fa1 100644
--- a/tmp/e1cafad7-f0e4-4212-8005-1dd5ff65d235_buggy.java
+++ b/tmp/ab0f12db-b9ee-4d4e-93d9-0d3c68e791ba_fixed.java
@@ -1,51 +1,62 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
         return n;
     }
 
     if (!right.isNumber()) {
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
-      current = current.getNext();
+    // Locate the element at the given index.
+    Node elem = left.getFirstChild();
+    for (int i = 0; i < intIndex && elem != null; i++) {
+        elem = elem.getNext();
     }
 
     if (elem == null) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
+    // Only fold when no other elements have side effects (we'll still
+    // execute the selected element if it has side effects).
+    for (Node child = left.getFirstChild(); child != null; child = child.getNext()) {
+        if (child == elem) {
+            continue;
+        }
+        if (NodeUtil.mayHaveSideEffects(child)) {
+            return n;
+        }
+    }
+
+    Node replacement;
     if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+        replacement = NodeUtil.newUndefinedNode(elem);
     } else {
+        replacement = elem;
         left.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM with the value.
+    parent.replaceChild(n, replacement);
     reportCodeChange();
-    return elem;
+    return replacement;
 }
\ No newline at end of file
