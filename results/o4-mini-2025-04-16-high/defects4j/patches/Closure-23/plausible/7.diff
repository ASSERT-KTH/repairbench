diff --git a/tmp/cc30ab44-2ddd-402e-8c73-e0617a5ff813_buggy.java b/tmp/14267fa1-bd15-4f2e-809a-618bbc984964_fixed.java
index cfdcd9c..faef8e1 100644
--- a/tmp/cc30ab44-2ddd-402e-8c73-e0617a5ff813_buggy.java
+++ b/tmp/14267fa1-bd15-4f2e-809a-618bbc984964_fixed.java
@@ -1,51 +1,69 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
   Node parent = n.getParent();
   // If GETPROP/GETELEM is used as assignment target the array literal is
   // acting as a temporary we can't fold it here:
   //    "[][0] += 1"
   if (isAssignmentTarget(n)) {
     return n;
   }
 
   if (!right.isNumber()) {
     // Sometimes people like to use complex expressions to index into
     // arrays, or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
-
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
-      current = current.getNext();
+  // Locate the element at the given index
+  Node child = left.getFirstChild();
+  Node targetElem = null;
+  int i = 0;
+  while (child != null && i <= intIndex) {
+    if (i == intIndex) {
+      targetElem = child;
+      break;
     }
-
-    if (elem == null) {
+    child = child.getNext();
+    i++;
+  }
+  if (targetElem == null) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+  // Make sure dropping the other elements doesn't drop side-effects
+  for (Node other = left.getFirstChild(); other != null; other = other.getNext()) {
+    if (other == targetElem) {
+      continue;
+    }
+    // empty slots are just "undefined", no side-effects
+    if (!other.isEmpty() && NodeUtil.mayHaveSideEffects(other)) {
+      return n;
+    }
+  }
+
+  // Prepare the replacement node
+  Node replacement;
+  if (targetElem.isEmpty()) {
+    replacement = NodeUtil.newUndefinedNode(targetElem);
   } else {
-      left.removeChild(elem);
+    // Detach the chosen element so we can reinsert it
+    left.removeChild(targetElem);
+    replacement = targetElem;
   }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+  // Replace the entire GETELEM with the folded value
+  parent.replaceChild(n, replacement);
   reportCodeChange();
-    return elem;
+  return replacement;
 }
\ No newline at end of file
