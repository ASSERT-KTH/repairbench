diff --git a/tmp/9c41c26f-0d9a-4ced-b3b7-57db01cf2a60_buggy.java b/tmp/0e271992-f714-40c5-9ce8-494198bc2fab_fixed.java
index cfdcd9c..367df20 100644
--- a/tmp/9c41c26f-0d9a-4ced-b3b7-57db01cf2a60_buggy.java
+++ b/tmp/0e271992-f714-40c5-9ce8-494198bc2fab_fixed.java
@@ -1,51 +1,60 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
   Node parent = n.getParent();
   // If GETPROP/GETELEM is used as assignment target the array literal is
   // acting as a temporary we can't fold it here:
   //    "[][0] += 1"
   if (isAssignmentTarget(n)) {
     return n;
   }
 
   if (!right.isNumber()) {
     // Sometimes people like to use complex expressions to index into
     // arrays, or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
-
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
+  // Locate the element at the requested index.
   Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
+  for (int i = 0; i < intIndex && current != null; i++) {
     current = current.getNext();
   }
-
-    if (elem == null) {
+  if (current == null) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
+  // Don't fold if we'd drop any side-effectful elements.
+  for (Node c = left.getFirstChild(); c != null; c = c.getNext()) {
+    if (c == current) {
+      continue;
+    }
+    if (NodeUtil.mayHaveSideEffects(c)) {
+      return n;
+    }
+  }
+
+  // Prepare the replacement node.
+  Node replacement;
+  if (current.isEmpty()) {
+    replacement = NodeUtil.newUndefinedNode(current);
   } else {
-      left.removeChild(elem);
+    left.removeChild(current);
+    replacement = current;
   }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+  // Replace the entire GETELEM with the folded value.
+  parent.replaceChild(n, replacement);
   reportCodeChange();
-    return elem;
+  return replacement;
 }
\ No newline at end of file
