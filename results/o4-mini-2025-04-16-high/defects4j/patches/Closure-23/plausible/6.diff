diff --git a/tmp/b06e9c51-6826-42e6-bf97-0739cfd6af46_buggy.java b/tmp/c685381a-2ee3-40e5-9cf5-3aacf4e4d9d0_fixed.java
index cfdcd9c..0f45ba5 100644
--- a/tmp/b06e9c51-6826-42e6-bf97-0739cfd6af46_buggy.java
+++ b/tmp/c685381a-2ee3-40e5-9cf5-3aacf4e4d9d0_fixed.java
@@ -1,51 +1,65 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
   Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
+  // If GETPROP/GETELEM is used as assignment target, the array literal is
   // acting as a temporary we can't fold it here:
   //    "[][0] += 1"
   if (isAssignmentTarget(n)) {
     return n;
   }
 
   if (!right.isNumber()) {
     // Sometimes people like to use complex expressions to index into
     // arrays, or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
-
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
+  // Locate the intIndex-th element
   Node current = left.getFirstChild();
-    Node elem = null;
   for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
     current = current.getNext();
   }
-
-    if (elem == null) {
+  if (current == null) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
+  // Don't fold if any other element has side effects
+  for (Node sib = left.getFirstChild(); sib != null; sib = sib.getNext()) {
+    if (sib == current) {
+      continue;
+    }
+    if (sib.isEmpty()) {
+      // holes are safe
+      continue;
+    }
+    if (!NodeUtil.isLiteralValue(sib, true)) {
+      return n;
+    }
+  }
+
+  Node elem = current;
   if (elem.isEmpty()) {
+    // "[,x][0]" â‡’ void 0
     elem = NodeUtil.newUndefinedNode(elem);
   } else {
+    // Remove the extracted element from the literal so it doesn't stay
+    // attached when we replace the GETELEM node.
     left.removeChild(elem);
   }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+  // Replace the entire GETELEM with the constant value we've extracted.
+  parent.replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
