diff --git a/tmp/b6004078-36f5-43a4-beaf-4600e861cba9_buggy.java b/tmp/2d29b059-10f4-470e-8c33-7c1ed7908b9d_fixed.java
index cfdcd9c..bc12800 100644
--- a/tmp/b6004078-36f5-43a4-beaf-4600e861cba9_buggy.java
+++ b/tmp/2d29b059-10f4-470e-8c33-7c1ed7908b9d_fixed.java
@@ -1,51 +1,57 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
-
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Locate the element at the given index.
     Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
+    for (int i = 0; i < intIndex && current != null; i++) {
       current = current.getNext();
     }
-
-    if (elem == null) {
+    if (current == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Do not fold if dropping other elements would discard side-effects.
+    Node child = left.getFirstChild();
+    for (int i = 0; child != null; i++, child = child.getNext()) {
+      if (i != intIndex && NodeUtil.hasSideEffects(child)) {
+        return n;
+      }
+    }
+
+    // Extract or materialize the element.
+    Node elem = current;
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM with the folded value.
+    parent.replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
