diff --git a/tmp/8d2cdef2-1a98-402a-a4d1-f54a7552e11e_buggy.java b/tmp/0c57371a-8a36-4cf1-9adf-7e76b8fb5732_fixed.java
index 6dd359b..f85bc7c 100644
--- a/tmp/8d2cdef2-1a98-402a-a4d1-f54a7552e11e_buggy.java
+++ b/tmp/0c57371a-8a36-4cf1-9adf-7e76b8fb5732_fixed.java
@@ -1,125 +1,152 @@
 public void collect(JSModule module, Scope scope, Node n) {
   Node parent = n.getParent();
 
   String name;
   boolean isSet = false;
   Name.Type type = Name.Type.OTHER;
   boolean isPropAssign = false;
 
   switch (n.getType()) {
     case Token.GETTER_DEF:
     case Token.SETTER_DEF:
     case Token.STRING_KEY:
       // This may be a key in an object literal declaration.
       name = null;
       if (parent != null && parent.isObjectLit()) {
         name = getNameForObjLitKey(n);
       }
       if (name == null) {
         return;
       }
       isSet = true;
       switch (n.getType()) {
         case Token.STRING_KEY:
           type = getValueType(n.getFirstChild());
           break;
         case Token.GETTER_DEF:
           type = Name.Type.GET;
           break;
         case Token.SETTER_DEF:
           type = Name.Type.SET;
           break;
         default:
           throw new IllegalStateException("unexpected:" + n);
       }
       break;
+
     case Token.NAME:
       // This may be a variable get or set.
       if (parent != null) {
         switch (parent.getType()) {
           case Token.VAR:
             isSet = true;
             Node rvalue = n.getFirstChild();
             type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
             break;
           case Token.ASSIGN:
             if (parent.getFirstChild() == n) {
               isSet = true;
               type = getValueType(n.getNext());
             }
             break;
           case Token.GETPROP:
+            // skip the NAME child of a GETPROP; we'll handle it in the GETPROP case
             return;
           case Token.FUNCTION:
             Node gramps = parent.getParent();
             if (gramps == null || NodeUtil.isFunctionExpression(parent)) {
               return;
             }
             isSet = true;
             type = Name.Type.FUNCTION;
             break;
           case Token.INC:
           case Token.DEC:
             isSet = true;
             type = Name.Type.OTHER;
             break;
           default:
             if (NodeUtil.isAssignmentOp(parent) &&
                 parent.getFirstChild() == n) {
               isSet = true;
               type = Name.Type.OTHER;
             }
         }
       }
       name = n.getString();
       break;
+
     case Token.GETPROP:
+      // If this GETPROP is a property on a catch‐clause parameter (e.g. catch(e){…e.name…}),
+      // don't treat it as a global reference.
+      {
+        Node catchNode = parent;
+        while (catchNode != null && catchNode.getType() != Token.CATCH) {
+          catchNode = catchNode.getParent();
+        }
+        if (catchNode != null) {
+          Node catchParam = catchNode.getFirstChild();
+          if (catchParam != null && catchParam.isName()) {
+            // find the leftmost name in the GETPROP chain
+            Node root = n;
+            while (root.isGetProp()) {
+              root = root.getFirstChild();
+            }
+            if (root.isName() &&
+                root.getString().equals(catchParam.getString())) {
+              return;
+            }
+          }
+        }
+      }
       // This may be a namespaced name get or set.
       if (parent != null) {
         switch (parent.getType()) {
           case Token.ASSIGN:
             if (parent.getFirstChild() == n) {
               isSet = true;
               type = getValueType(n.getNext());
               isPropAssign = true;
             }
             break;
           case Token.INC:
           case Token.DEC:
             isSet = true;
             type = Name.Type.OTHER;
             break;
           case Token.GETPROP:
+            // chained GETPROP; skip here (we'll see it at the outermost GETPROP)
             return;
           default:
             if (NodeUtil.isAssignmentOp(parent) &&
                 parent.getFirstChild() == n) {
               isSet = true;
               type = Name.Type.OTHER;
             }
         }
       }
       name = n.getQualifiedName();
       if (name == null) {
         return;
       }
       break;
+
     default:
       return;
   }
 
   // We are only interested in global names.
   if (!isGlobalNameReference(name, scope)) {
     return;
   }
 
   if (isSet) {
     if (isGlobalScope(scope)) {
       handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);
     } else {
       handleSetFromLocal(module, scope, n, parent, name);
     }
   } else {
     handleGet(module, scope, n, parent, name);
   }
 }
\ No newline at end of file
