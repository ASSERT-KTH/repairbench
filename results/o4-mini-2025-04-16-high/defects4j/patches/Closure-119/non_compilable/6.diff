diff --git a/tmp/a83bb741-a575-4f7c-a4fe-2dcd1f3b1bd3_buggy.java b/tmp/80f5bc14-f3e8-44d2-9401-9856352a8955_fixed.java
index 6dd359b..009aebc 100644
--- a/tmp/a83bb741-a575-4f7c-a4fe-2dcd1f3b1bd3_buggy.java
+++ b/tmp/80f5bc14-f3e8-44d2-9401-9856352a8955_fixed.java
@@ -1,125 +1,172 @@
+@Override
 public void collect(JSModule module, Scope scope, Node n) {
   Node parent = n.getParent();
 
+  // --- START FIX: Do not treat the catch‐exception parameter as a global ---
+  // If we're inside a catch clause, and this NAME or GETPROP
+  // refers to the catch‐parameter, skip it entirely.
+  if (n.getType() == Token.NAME) {
+    // e.g. `catch (e) { ... }`
+    Node maybeCatch = n;
+    while (maybeCatch != null && maybeCatch.getType() != Token.CATCH) {
+      maybeCatch = maybeCatch.getParent();
+    }
+    if (maybeCatch != null) {
+      Node catchParam = maybeCatch.getFirstChild();
+      if (catchParam != null
+          && catchParam.isName()
+          && catchParam.getString().equals(n.getString())) {
+        return;
+      }
+    }
+  } else if (n.getType() == Token.GETPROP) {
+    // e.g. property on e inside catch: `e.name`
+    // find the root of the GETPROP chain
+    Node root = n;
+    while (root.getType() == Token.GETPROP) {
+      root = root.getFirstChild();
+    }
+    if (root.isName()) {
+      Node maybeCatch = n;
+      while (maybeCatch != null && maybeCatch.getType() != Token.CATCH) {
+        maybeCatch = maybeCatch.getParent();
+      }
+      if (maybeCatch != null) {
+        Node catchParam = maybeCatch.getFirstChild();
+        if (catchParam != null
+            && catchParam.isName()
+            && catchParam.getString().equals(root.getString())) {
+          return;
+        }
+      }
+    }
+  }
+  // --- END FIX -----------------------------------------------------------
+
   String name;
   boolean isSet = false;
   Name.Type type = Name.Type.OTHER;
   boolean isPropAssign = false;
 
   switch (n.getType()) {
     case Token.GETTER_DEF:
     case Token.SETTER_DEF:
     case Token.STRING_KEY:
       // This may be a key in an object literal declaration.
       name = null;
       if (parent != null && parent.isObjectLit()) {
         name = getNameForObjLitKey(n);
       }
       if (name == null) {
         return;
       }
       isSet = true;
       switch (n.getType()) {
         case Token.STRING_KEY:
           type = getValueType(n.getFirstChild());
           break;
         case Token.GETTER_DEF:
           type = Name.Type.GET;
           break;
         case Token.SETTER_DEF:
           type = Name.Type.SET;
           break;
         default:
           throw new IllegalStateException("unexpected:" + n);
       }
       break;
+
     case Token.NAME:
       // This may be a variable get or set.
       if (parent != null) {
         switch (parent.getType()) {
           case Token.VAR:
             isSet = true;
             Node rvalue = n.getFirstChild();
-                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
+            type = (rvalue == null) ? Name.Type.OTHER
+                                   : getValueType(rvalue);
             break;
           case Token.ASSIGN:
             if (parent.getFirstChild() == n) {
               isSet = true;
               type = getValueType(n.getNext());
             }
             break;
           case Token.GETPROP:
             return;
           case Token.FUNCTION:
             Node gramps = parent.getParent();
             if (gramps == null || NodeUtil.isFunctionExpression(parent)) {
               return;
             }
             isSet = true;
             type = Name.Type.FUNCTION;
             break;
           case Token.INC:
           case Token.DEC:
             isSet = true;
             type = Name.Type.OTHER;
             break;
           default:
-                if (NodeUtil.isAssignmentOp(parent) &&
-                    parent.getFirstChild() == n) {
+            if (NodeUtil.isAssignmentOp(parent)
+                && parent.getFirstChild() == n) {
               isSet = true;
               type = Name.Type.OTHER;
             }
         }
       }
       name = n.getString();
       break;
+
     case Token.GETPROP:
       // This may be a namespaced name get or set.
       if (parent != null) {
         switch (parent.getType()) {
           case Token.ASSIGN:
             if (parent.getFirstChild() == n) {
               isSet = true;
               type = getValueType(n.getNext());
               isPropAssign = true;
             }
             break;
           case Token.INC:
           case Token.DEC:
             isSet = true;
             type = Name.Type.OTHER;
             break;
           case Token.GETPROP:
             return;
           default:
-                if (NodeUtil.isAssignmentOp(parent) &&
-                    parent.getFirstChild() == n) {
+            if (NodeUtil.isAssignmentOp(parent)
+                && parent.getFirstChild() == n) {
               isSet = true;
               type = Name.Type.OTHER;
             }
         }
       }
       name = n.getQualifiedName();
       if (name == null) {
         return;
       }
       break;
+
     default:
       return;
   }
 
   // We are only interested in global names.
   if (!isGlobalNameReference(name, scope)) {
     return;
   }
 
   if (isSet) {
     if (isGlobalScope(scope)) {
-          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);
+      handleSetFromGlobal(
+          module, scope, n, parent, name, isPropAssign, type);
     } else {
       handleSetFromLocal(module, scope, n, parent, name);
     }
   } else {
     handleGet(module, scope, n, parent, name);
   }
 }
\ No newline at end of file
