diff --git a/tmp/c2aed978-0889-4f1c-87d6-f9adb0ed678c_buggy.java b/tmp/bfadf50d-ad60-4982-afc8-a105ccd12ca1_fixed.java
index 229b3e7..7fe74cc 100644
--- a/tmp/c2aed978-0889-4f1c-87d6-f9adb0ed678c_buggy.java
+++ b/tmp/bfadf50d-ad60-4982-afc8-a105ccd12ca1_fixed.java
@@ -1,55 +1,72 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
+@Override
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
+                                         int nextLineTabStop,
+                                         String text)
 {
+    // Special case: no room to render even one character at the normal indent.
+    // Fall back to breaking the text into single characters,
+    // indented to (width - 1) so each line is exactly 'width' long.
+    if (nextLineTabStop >= width)
+    {
+        final String padding = createPadding(width - 1);
+        text = rtrim(text);
+        for (int i = 0; i < text.length(); i++)
+        {
+            char c = text.charAt(i);
+            if (!Character.isWhitespace(c))
+            {
+                sb.append(padding)
+                  .append(c)
+                  .append(defaultNewLine);
+            }
+        }
+        return sb;
+    }
+
     int pos = findWrapPos(text, width, 0);
 
+    // if the text fits on one line, just append it
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
+    // otherwise render the first chunk and wrap the rest
+    sb.append(rtrim(text.substring(0, pos)))
+      .append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
+        // if a single "word" is longer than the line, force a chop
         if ((text.length() > width) && (pos == nextLineTabStop - 1))
         {
             pos = width;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(text.substring(0, pos)))
+          .append(defaultNewLine);
     }
 }
\ No newline at end of file
