diff --git a/tmp/6e9e4766-b589-4e0d-8abb-8e429d7fea4d_buggy.java b/tmp/c55e8ba2-912c-487d-b1fa-d085a5ec141f_fixed.java
index 229b3e7..c9fe4f9 100644
--- a/tmp/6e9e4766-b589-4e0d-8abb-8e429d7fea4d_buggy.java
+++ b/tmp/c55e8ba2-912c-487d-b1fa-d085a5ec141f_fixed.java
@@ -1,55 +1,65 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
+    // Special case: no room to join description on same line → emit one char per line
+    if (nextLineTabStop >= width) {
+        // remove any trailing spaces (from the option padding)
+        while (sb.length() > 0 && sb.charAt(sb.length() - 1) == ' ') {
+            sb.setLength(sb.length() - 1);
+        }
+        // compute a safe indent (so padding + 1 char ≤ width)
+        final int indent = width > 1 ? width - 1 : 0;
+        final String padding = createPadding(indent);
+        // trim outer whitespace, but skip internal spaces when breaking
+        String s = text.trim();
+        for (int i = 0; i < s.length(); i++) {
+            char c = s.charAt(i);
+            if (Character.isWhitespace(c)) {
+                continue;
+            }
+            sb.append(defaultNewLine)
+              .append(padding)
+              .append(c);
+        }
+        return sb;
+    }
+
+    // Normal word-wrapping when indent < width
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+    // first line
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
+    String remainder = text.substring(pos);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
+    // subsequent lines
+    while (true) {
+        String line = padding + remainder.trim();
+        pos = findWrapPos(line, width, 0);
+        if (pos == -1) {
+            sb.append(line);
             return sb;
         }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // if the only break is right after the padding, force a full-width break
+        if ((line.length() > width) && (pos == nextLineTabStop - 1)) {
             pos = width;
         }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+        remainder = line.substring(pos);
     }
 }
\ No newline at end of file
