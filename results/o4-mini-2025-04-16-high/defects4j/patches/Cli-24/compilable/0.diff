diff --git a/tmp/eef0ca44-1d2f-423b-9b9c-206af0f26a90_buggy.java b/tmp/6d6a2cc0-0826-42f2-bbca-72410e2bec96_fixed.java
index 229b3e7..c67666a 100644
--- a/tmp/eef0ca44-1d2f-423b-9b9c-206af0f26a90_buggy.java
+++ b/tmp/6d6a2cc0-0826-42f2-bbca-72410e2bec96_fixed.java
@@ -1,55 +1,82 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
+    // find first wrap position
     int pos = findWrapPos(text, width, 0);
 
+    // if no wrap needed, just append and return
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+    // special case: indent is at or beyond the available width
+    // so we cannot place any description text on the first line
     if (nextLineTabStop >= width)
     {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        // break at the first whitespace (or at width if none)
+        int firstSpace = text.indexOf(' ');
+        int split = (firstSpace != -1 ? firstSpace : width);
+
+        // first line: just up to the split (the option syntax)
+        sb.append(rtrim(text.substring(0, split)))
+          .append(defaultNewLine);
+
+        // then chunk every remaining character (skipping whitespace)
+        String padding = createPadding(nextLineTabStop);
+        String remainder = text.substring(split).trim();
+        for (int i = 0; i < remainder.length(); i++)
+        {
+            char c = remainder.charAt(i);
+            if (Character.isWhitespace(c))
+            {
+                continue;
+            }
+            sb.append(padding)
+              .append(c)
+              .append(defaultNewLine);
         }
+        return sb;
+    }
+
+    // normal case: we have room for at least some text on the first line
+    sb.append(rtrim(text.substring(0, pos)))
+      .append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // prepare padding for subsequent lines
     final String padding = createPadding(nextLineTabStop);
 
+    // wrap the rest
     while (true)
     {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
+        // guard against infinite loop when the only break is in the padding
         if ((text.length() > width) && (pos == nextLineTabStop - 1))
         {
             pos = width;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(text.substring(0, pos)))
+          .append(defaultNewLine);
     }
 }
\ No newline at end of file
