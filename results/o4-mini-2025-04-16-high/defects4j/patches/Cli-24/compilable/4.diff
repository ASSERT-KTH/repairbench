diff --git a/tmp/bef4f6ef-57ec-4e05-a123-d49af2f1a3ff_buggy.java b/tmp/06115c86-912a-4253-94a1-15a15195ff64_fixed.java
index 229b3e7..b5b4825 100644
--- a/tmp/bef4f6ef-57ec-4e05-a123-d49af2f1a3ff_buggy.java
+++ b/tmp/06115c86-912a-4253-94a1-15a15195ff64_fixed.java
@@ -1,55 +1,47 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
+    // Special‐case: if there is no room to render any text on the first line
+    // (nextLineTabStop >= width), then emit one non‐whitespace character per
+    // line, indented to column (width-1).
+    if (nextLineTabStop >= width) {
+        String trimmed = text.trim();
+        // indent so that each line is exactly 'width' characters long
+        final String padding = createPadding(width - 1);
+        for (int i = 0; i < trimmed.length(); i++) {
+            char c = trimmed.charAt(i);
+            if (Character.isWhitespace(c)) {
+                // skip spaces/tabs
+                continue;
+            }
+            // start a new line, then indent+char; the final newline
+            // will be added by the caller (printHelp → println)
+            sb.append(defaultNewLine).append(padding).append(c);
+        }
+        return sb;
+    }
+
+    // Normal wrapping logic when there is room on the first line
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // subsequent lines are padded to nextLineTabStop
     final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
+    while (true) {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // guard against infinite loop when a single word is longer than the width
+        if (text.length() > width && pos == nextLineTabStop - 1) {
             pos = width;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
