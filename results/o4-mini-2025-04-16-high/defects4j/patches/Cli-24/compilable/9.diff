diff --git a/tmp/8d500843-66ab-4e9f-b213-1f4fde19f76e_buggy.java b/tmp/a52cf444-15fd-4585-a14b-3b321b1b86dc_fixed.java
index 229b3e7..f7453b9 100644
--- a/tmp/8d500843-66ab-4e9f-b213-1f4fde19f76e_buggy.java
+++ b/tmp/a52cf444-15fd-4585-a14b-3b321b1b86dc_fixed.java
@@ -1,55 +1,52 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
-    {
+                                         int nextLineTabStop, String text) {
+    // If the indent is as large as (or larger than) the available width,
+    // we can't fit more than one character per line.  Chunk it char-by-char.
+    if (nextLineTabStop >= width) {
+        // Use an indent of width-1 so that exactly one char will fit each line
+        final String padding = createPadding(width - 1);
+        for (int i = 0; i < text.length(); i++) {
+            char c = text.charAt(i);
+            // skip pure-whitespace characters so we don't emit blank lines
+            if (!Character.isWhitespace(c)) {
+                sb.append(padding)
+                  .append(c)
+                  .append(defaultNewLine);
+            }
+        }
+        return sb;
+    }
+
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    // if it all fits on one line, just append it
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+
+    // otherwise, wrap at the first break
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // prepare the padding for subsequent lines
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
+    while (true) {
+        // trim leading whitespace on the remainder and re-prefix it
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
-            {
+        // last chunk?
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // guard against infinite loop when the only break is at the indent
+        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
             pos = width;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(text.substring(0, pos)))
+          .append(defaultNewLine);
     }
 }
\ No newline at end of file
