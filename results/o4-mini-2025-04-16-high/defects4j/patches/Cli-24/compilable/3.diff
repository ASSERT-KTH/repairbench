diff --git a/tmp/67e2d5ce-48db-4dbe-8041-a3244b8b18fa_buggy.java b/tmp/e354602d-f499-4622-94f9-ebe3067f2f85_fixed.java
index 229b3e7..6c45ed2 100644
--- a/tmp/67e2d5ce-48db-4dbe-8041-a3244b8b18fa_buggy.java
+++ b/tmp/e354602d-f499-4622-94f9-ebe3067f2f85_fixed.java
@@ -1,55 +1,49 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
+    // Fallback: if the indent is >= available width, emit one non‐space
+    // character per line at (width-1) indentation
+    if (nextLineTabStop >= width) {
+        String padding = createPadding(width - 1);
+        for (int i = 0; i < text.length(); i++) {
+            char ch = text.charAt(i);
+            if (!Character.isWhitespace(ch)) {
+                sb.append(padding).append(ch).append(defaultNewLine);
+            }
+        }
+        return sb;
+    }
+
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
+    while (true) {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
             pos = width;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
