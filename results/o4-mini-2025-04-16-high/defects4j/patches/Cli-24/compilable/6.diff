diff --git a/tmp/d4f73ff5-e972-43eb-a047-ed7d5e37c09a_buggy.java b/tmp/4075133b-5fb8-4310-91d3-6b4f13c5d2a8_fixed.java
index 229b3e7..9477b1a 100644
--- a/tmp/d4f73ff5-e972-43eb-a047-ed7d5e37c09a_buggy.java
+++ b/tmp/4075133b-5fb8-4310-91d3-6b4f13c5d2a8_fixed.java
@@ -1,55 +1,48 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
+    // If the indent is greater than or equal to the total width,
+    // chunk every non‐whitespace character on its own line.
+    if (nextLineTabStop >= width) {
+        String trimmed = text.trim();
+        // pad up to width-1 so that each line is exactly width chars wide
+        String padding = createPadding(width - 1);
+        for (int i = 0; i < trimmed.length(); i++) {
+            char c = trimmed.charAt(i);
+            if (!Character.isWhitespace(c)) {
+                sb.append(padding).append(c).append(defaultNewLine);
+            }
+        }
+        return sb;
+    }
+
     int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+    // no wrap required
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+
+    // first line
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // normal indent for subsequent lines
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
+    // wrap remaining text
+    while (true) {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // handle the case where a single word is longer than the width
+        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
             pos = width;
         }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
