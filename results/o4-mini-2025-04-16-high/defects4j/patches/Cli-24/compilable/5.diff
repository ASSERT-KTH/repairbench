diff --git a/tmp/844a5ac5-0ef5-47a0-a48a-38e60242a379_buggy.java b/tmp/9410d4b3-e59b-4fe6-b36b-0f4530efa101_fixed.java
index 229b3e7..ebcc1f0 100644
--- a/tmp/844a5ac5-0ef5-47a0-a48a-38e60242a379_buggy.java
+++ b/tmp/9410d4b3-e59b-4fe6-b36b-0f4530efa101_fixed.java
@@ -1,55 +1,43 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
+    // If the indent pushes us past the available width, ignore word‐wrap
+    // and emit one character per line at the last column.
+    if (nextLineTabStop >= width) {
+        int pad = Math.max(0, width - 1);
+        final String padding = createPadding(pad);
+        String trimmed = text.trim();
+        for (int i = 0; i < trimmed.length(); i++) {
+            sb.append(padding)
+              .append(trimmed.charAt(i))
+              .append(defaultNewLine);
+        }
+        return sb;
+    }
+
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
+    sb.append(rtrim(text.substring(0, pos)))
+      .append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
+    while (true) {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // Avoid infinite loop when the first break is at the indent boundary
+        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
             pos = width;
         }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(text.substring(0, pos)))
+          .append(defaultNewLine);
     }
 }
\ No newline at end of file
