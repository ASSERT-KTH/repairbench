diff --git a/tmp/cbb81f7b-f29f-45f0-a727-c24bff7a6f2a_buggy.java b/tmp/cdd3c7f2-e2fc-4039-8f9a-585c5a3b4127_fixed.java
index 229b3e7..a1a276b 100644
--- a/tmp/cbb81f7b-f29f-45f0-a727-c24bff7a6f2a_buggy.java
+++ b/tmp/cdd3c7f2-e2fc-4039-8f9a-585c5a3b4127_fixed.java
@@ -1,55 +1,59 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+protected StringBuffer renderWrappedText(StringBuffer sb,
+                                         int width,
+                                         int nextLineTabStop,
+                                         String text)
 {
+    // If the indent is as large as (or larger than) the available width,
+    // we have no room to put any text on the same line, so
+    // fall back to one‐char‐per‐line chunking, using width-1 spaces.
+    if (nextLineTabStop >= width) {
+        int effectiveIndent = (width > 1 ? width - 1 : 0);
+        String padding = createPadding(effectiveIndent);
+        for (int i = 0; i < text.length(); i++) {
+            sb.append(padding)
+              .append(text.charAt(i))
+              .append(defaultNewLine);
+        }
+        return sb;
+    }
+
+    // Normal wrapping logic
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    sb.append(rtrim(text.substring(0, pos)))
+      .append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
+    while (true) {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // Avoid infinite loop when the wrap position is exactly
+        // at the end of the padding
+        if (text.length() > width && pos == nextLineTabStop - 1) {
             pos = width;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(text.substring(0, pos)))
+          .append(defaultNewLine);
     }
 }
\ No newline at end of file
