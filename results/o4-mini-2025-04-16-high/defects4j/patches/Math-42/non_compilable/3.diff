diff --git a/tmp/aef12d2b-41b2-436d-afec-c79c109bbc5b_buggy.java b/tmp/56665238-53b1-4bdc-a6de-79ed28347a29_fixed.java
index efa499e..450fc19 100644
--- a/tmp/aef12d2b-41b2-436d-afec-c79c109bbc5b_buggy.java
+++ b/tmp/56665238-53b1-4bdc-a6de-79ed28347a29_fixed.java
@@ -1,35 +1,47 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
+@Override
 protected RealPointValuePair getSolution() {
+    // find the (global) negative‐variable column, if any
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+    Integer negativeVarBasicRow = (negativeVarColumn >= 0)
+        ? getBasicRow(negativeVarColumn)
+        : null;
+    double mostNegative = (negativeVarBasicRow == null)
+        ? 0
+        : getEntry(negativeVarBasicRow, getRhsOffset());
 
+    // we will record which constraint‐rows have already been used
+    // and we must also immediately ignore the objective‐function row (row 0)
     Set<Integer> basicRows = new HashSet<Integer>();
+    basicRows.add(0);
+
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
+        // look up the tableau column for x_i
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
+            // no such column -> variable is nonbasic -> value = 0 (up to offset)
             coefficients[i] = 0;
             continue;
         }
         Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
+
+        // if this row is null (nonbasic), is the objective row, or was already used,
+        // we treat it as nonbasic and assign zero (minus any global offset)
+        if (basicRow == null || basicRows.contains(basicRow)) {
             coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
         } else {
+            // first time seeing this basic‐row -> record it and read off the RHS
             basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            coefficients[i] = getEntry(basicRow, getRhsOffset())
+                              - (restrictToNonNegative ? 0 : mostNegative);
         }
     }
-      return new RealPointValuePair(coefficients, f.getValue(coefficients));
+
+    return new RealPointValuePair(coefficients,
+                                  f.getValue(coefficients));
 }
\ No newline at end of file
