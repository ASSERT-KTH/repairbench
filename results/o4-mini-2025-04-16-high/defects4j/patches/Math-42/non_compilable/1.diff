diff --git a/tmp/284881fd-485f-48a6-bca6-4161c5d0cf67_buggy.java b/tmp/e18394a5-11b0-4b9a-899e-b009fa2416d6_fixed.java
index efa499e..2ed758b 100644
--- a/tmp/284881fd-485f-48a6-bca6-4161c5d0cf67_buggy.java
+++ b/tmp/e18394a5-11b0-4b9a-899e-b009fa2416d6_fixed.java
@@ -1,35 +1,40 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
+@Override
 protected RealPointValuePair getSolution() {
-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+    final int n = getOriginalNumDecisionVariables();
+    final double[] sol = new double[n];
 
-      Set<Integer> basicRows = new HashSet<Integer>();
-      double[] coefficients = new double[getOriginalNumDecisionVariables()];
-      for (int i = 0; i < coefficients.length; i++) {
-          int colIndex = columnLabels.indexOf("x" + i);
-          if (colIndex < 0) {
-            coefficients[i] = 0;
-            continue;
+    // figure out the global shift (if we introduced a single negative‐variable column)
+    int negCol = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+    Integer negBasicRow = (negCol >= 0) ? getBasicRow(negCol) : null;
+    double shift = (negBasicRow == null) ? 0.0 : getEntry(negBasicRow, getRhsOffset());
+
+    // extract each original variable
+    for (int i = 0; i < n; i++) {
+        String var = "x" + i;
+        int col = columnLabels.indexOf(var);
+        double value = 0.0;
+        if (col >= 0) {
+            Integer row = getBasicRow(col);
+            if (row != null) {
+                value = getEntry(row, getRhsOffset());
+            }
+            // if we allowed negatives, undo the shift
+            if (!restrictToNonNegative) {
+                value -= shift;
             }
-          Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
-          } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
         }
+        // enforce non‐negativity if requested (guard against tiny negatives)
+        if (restrictToNonNegative && value < 0.0) {
+            value = 0.0;
         }
-      return new RealPointValuePair(coefficients, f.getValue(coefficients));
+        sol[i] = value;
+    }
+
+    // compute the objective value at the point
+    return new RealPointValuePair(sol, f.getValue(sol));
 }
\ No newline at end of file
