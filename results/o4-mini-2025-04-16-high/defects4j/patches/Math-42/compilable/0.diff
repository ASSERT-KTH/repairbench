diff --git a/tmp/9e458057-ef99-480a-ab1c-841719dc88fd_buggy.java b/tmp/5ad175a5-6207-4287-9c80-5d4fb466dcc8_fixed.java
index efa499e..d11c56d 100644
--- a/tmp/9e458057-ef99-480a-ab1c-841719dc88fd_buggy.java
+++ b/tmp/5ad175a5-6207-4287-9c80-5d4fb466dcc8_fixed.java
@@ -1,35 +1,41 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
+    // Locate the "shift" variable column (introduced for free/unrestricted vars)
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+    Integer negativeVarBasicRow = (negativeVarColumn >= 0) 
+        ? getBasicRow(negativeVarColumn) 
+        : null;
+    double mostNegative = (negativeVarBasicRow == null) 
+        ? 0.0 
+        : getEntry(negativeVarBasicRow, getRhsOffset());
 
     Set<Integer> basicRows = new HashSet<Integer>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
+        double value;
         if (colIndex < 0) {
-            coefficients[i] = 0;
-            continue;
-          }
+            // no column for this variable → it's purely in the shift var
+            value = 0.0;
+        } else {
             Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
             if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+                // same row used by another var → this one is zero
+                value = 0.0;
             } else {
                 basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+                value = (basicRow == null) 
+                    ? 0.0 
+                    : getEntry(basicRow, getRhsOffset());
             }
         }
+        // subtract the shift (mostNegative) to recover the original variable value
+        coefficients[i] = value - mostNegative;
+    }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
