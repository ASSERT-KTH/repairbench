diff --git a/tmp/1676781b-78ce-4a0a-a230-7eaf1e263fc4_buggy.java b/tmp/2288ae4a-091b-4471-ab43-6596c77adeaf_fixed.java
index efa499e..0475ffd 100644
--- a/tmp/1676781b-78ce-4a0a-a230-7eaf1e263fc4_buggy.java
+++ b/tmp/2288ae4a-091b-4471-ab43-6596c77adeaf_fixed.java
@@ -1,35 +1,37 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
+    // find if there was a "negative variable" column (for unrestricted variables)
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+    Integer negativeVarBasicRow = (negativeVarColumn >= 0) ?
+                                  getBasicRow(negativeVarColumn) : null;
+    // how much we have to shift back if variables were allowed negative
+    double mostNegative = (negativeVarBasicRow == null) ? 
+                          0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
-      Set<Integer> basicRows = new HashSet<Integer>();
+    // build solution over the original decision variables
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
+        // find the tableau column for x_i
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
+            // variable never appeared in the tableau => zero
             coefficients[i] = 0;
             continue;
         }
+        // if it is basic, take its RHS, otherwise it is zero
         Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
-          } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+        double value = (basicRow == null) ? 0
+                                          : getEntry(basicRow, getRhsOffset());
+        // if we introduced a global shift for unrestricted vars, undo it
+        if (!restrictToNonNegative) {
+            value -= mostNegative;
         }
+        coefficients[i] = value;
     }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
