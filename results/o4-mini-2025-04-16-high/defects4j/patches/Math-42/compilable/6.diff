diff --git a/tmp/5c043edb-f03a-4c77-bea1-16c5301fb0bc_buggy.java b/tmp/2af235c9-68fd-4293-bc16-87c37a254df1_fixed.java
index efa499e..519b728 100644
--- a/tmp/5c043edb-f03a-4c77-bea1-16c5301fb0bc_buggy.java
+++ b/tmp/2af235c9-68fd-4293-bc16-87c37a254df1_fixed.java
@@ -1,35 +1,33 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
-
-      Set<Integer> basicRows = new HashSet<Integer>();
+    // 1) recover values for the original decision variables
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
-          int colIndex = columnLabels.indexOf("x" + i);
-          if (colIndex < 0) {
-            coefficients[i] = 0;
-            continue;
-          }
-          Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+        int col = columnLabels.indexOf("x" + i);
+        if (col >= 0) {
+            Integer row = getBasicRow(col);
+            coefficients[i] = (row == null ? 0.0 : getEntry(row, getRhsOffset()));
         } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            coefficients[i] = 0.0;
         }
     }
+
+    // 2) if negative variables were allowed, subtract the common shift
+    if (!restrictToNonNegative) {
+        int negCol = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+        if (negCol >= 0) {
+            Integer negRow = getBasicRow(negCol);
+            double shift = (negRow == null ? 0.0 : getEntry(negRow, getRhsOffset()));
+            for (int i = 0; i < coefficients.length; i++) {
+                coefficients[i] -= shift;
+            }
+        }
+    }
+
+    // 3) build the RealPointValuePair with the original objective function
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
