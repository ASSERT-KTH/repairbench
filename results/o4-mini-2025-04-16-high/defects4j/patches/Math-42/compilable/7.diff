diff --git a/tmp/126020e6-fedc-420a-affc-91d8b509c054_buggy.java b/tmp/2d933d37-7b63-4865-a36e-1ca99c875c47_fixed.java
index efa499e..1b2b5c9 100644
--- a/tmp/126020e6-fedc-420a-affc-91d8b509c054_buggy.java
+++ b/tmp/2d933d37-7b63-4865-a36e-1ca99c875c47_fixed.java
@@ -1,35 +1,37 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
+    // compute the shift coming from the "negative‐part" column (if any)
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+    Integer negativeVarBasicRow =
+        (negativeVarColumn >= 0) ? getBasicRow(negativeVarColumn) : null;
+    double mostNegative =
+        (negativeVarBasicRow == null) ? 0.0
+                                      : getEntry(negativeVarBasicRow, getRhsOffset());
 
-      Set<Integer> basicRows = new HashSet<Integer>();
+    // extract the original decision variable values
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
-            coefficients[i] = 0;
-            continue;
-          }
-          Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+            // variable not in the tableau ⇒ value is zero
+            coefficients[i] = 0.0;
         } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            Integer basicRow = getBasicRow(colIndex);
+            // if basicRow==null ⇒ non-basic ⇒ zero; otherwise take RHS
+            double value = (basicRow == null)
+                         ? 0.0
+                         : getEntry(basicRow, getRhsOffset());
+            // if variables are allowed to go negative, apply the shift
+            if (!restrictToNonNegative) {
+                value -= mostNegative;
             }
+            coefficients[i] = value;
         }
+    }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
