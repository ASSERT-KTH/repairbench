diff --git a/tmp/b596408d-4fc0-4d31-aaa6-9b71d39ad78a_buggy.java b/tmp/94e1c1e0-3110-4c77-94f4-0594506c452c_fixed.java
index efa499e..1f619b4 100644
--- a/tmp/b596408d-4fc0-4d31-aaa6-9b71d39ad78a_buggy.java
+++ b/tmp/94e1c1e0-3110-4c77-94f4-0594506c452c_fixed.java
@@ -1,35 +1,35 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
+        // Locate the "negative‐variable" column (if any) and its basic row
         int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+        Integer negativeVarBasicRow =
+            (negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null);
+        double mostNegative = (negativeVarBasicRow == null ?
+                               0 : getEntry(negativeVarBasicRow, getRhsOffset()));
 
-      Set<Integer> basicRows = new HashSet<Integer>();
-      double[] coefficients = new double[getOriginalNumDecisionVariables()];
-      for (int i = 0; i < coefficients.length; i++) {
-          int colIndex = columnLabels.indexOf("x" + i);
-          if (colIndex < 0) {
+        // Reconstruct the original decision variables
+        int nVars = getOriginalNumDecisionVariables();
+        double[] coefficients = new double[nVars];
+        for (int i = 0; i < nVars; i++) {
+            // find the tableau column for x_i
+            int col = columnLabels.indexOf("x" + i);
+            if (col < 0) {
+                // variable not in tableau → zero in solution
                 coefficients[i] = 0;
                 continue;
             }
-          Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
-          } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
-          }
+            // get its value in the basis (or 0 if non‐basic)
+            Integer row = getBasicRow(col);
+            double entry = (row == null ? 0 : getEntry(row, getRhsOffset()));
+            // if we introduced a negative‐variable shift, subtract it
+            double value = (restrictToNonNegative ? entry : entry - mostNegative);
+            // discard tiny or negative values due to numeric noise
+            coefficients[i] = (value > 0 ? value : 0);
         }
+
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
