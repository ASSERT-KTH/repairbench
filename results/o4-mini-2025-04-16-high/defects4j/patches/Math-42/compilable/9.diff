diff --git a/tmp/44a22583-f4ea-43de-ba57-6f0323f436cf_buggy.java b/tmp/bdb2a5e7-b194-4a8c-a464-4d91c3ed250f_fixed.java
index efa499e..673dfff 100644
--- a/tmp/44a22583-f4ea-43de-ba57-6f0323f436cf_buggy.java
+++ b/tmp/bdb2a5e7-b194-4a8c-a464-4d91c3ed250f_fixed.java
@@ -1,35 +1,43 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
+    // find the “negative‐variable” column if one exists
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+    Integer negativeVarBasicRow = (negativeVarColumn >= 0)
+                                  ? getBasicRow(negativeVarColumn)
+                                  : null;
+    double mostNegative = (negativeVarBasicRow == null)
+                          ? 0.0
+                          : getEntry(negativeVarBasicRow, getRhsOffset());
 
-      Set<Integer> basicRows = new HashSet<Integer>();
-      double[] coefficients = new double[getOriginalNumDecisionVariables()];
-      for (int i = 0; i < coefficients.length; i++) {
+    // prepare result for the original variables
+    int n = getOriginalNumDecisionVariables();
+    double[] coefficients = new double[n];
+
+    // the last row in the tableau is the objective‐function row
+    int objectiveRow = getHeight() - 1;
+
+    for (int i = 0; i < n; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
-          if (colIndex < 0) {
-            coefficients[i] = 0;
-            continue;
-          }
+        double value = 0.0;
+        if (colIndex >= 0) {
             Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
-          } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            // only take values from actual constraint rows, not the objective row
+            if (basicRow != null && basicRow != objectiveRow) {
+                value = getEntry(basicRow, getRhsOffset());
             }
+            // if variables were allowed to go negative, shift back by the
+            // negative‐variable value
+            if (!restrictToNonNegative && negativeVarBasicRow != null) {
+                value -= mostNegative;
             }
-      return new RealPointValuePair(coefficients, f.getValue(coefficients));
+        }
+        coefficients[i] = value;
+    }
+
+    return new RealPointValuePair(coefficients,
+                                  f.getValue(coefficients));
 }
\ No newline at end of file
