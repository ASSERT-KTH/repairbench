diff --git a/tmp/6cff0674-db83-43fb-aa59-6346ec6a0573_buggy.java b/tmp/2ef29191-e513-49e3-8258-d86b0a2aa049_fixed.java
index efa499e..ea0f916 100644
--- a/tmp/6cff0674-db83-43fb-aa59-6346ec6a0573_buggy.java
+++ b/tmp/2ef29191-e513-49e3-8258-d86b0a2aa049_fixed.java
@@ -1,35 +1,32 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
-
-      Set<Integer> basicRows = new HashSet<Integer>();
-      double[] coefficients = new double[getOriginalNumDecisionVariables()];
-      for (int i = 0; i < coefficients.length; i++) {
-          int colIndex = columnLabels.indexOf("x" + i);
-          if (colIndex < 0) {
-            coefficients[i] = 0;
-            continue;
+    // For problems with unrestricted (can-be-negative) variables we
+    // introduced a single "shift" variable.  Here we recover its
+    // final value so we can shift back all original variables.
+    double shift = 0;
+    if (!restrictToNonNegative) {
+        int negCol = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+        if (negCol >= 0) {
+            Integer negRow = getBasicRow(negCol);
+            if (negRow != null) {
+                shift = getEntry(negRow, getRhsOffset());
+            }
         }
-          Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
-          } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
     }
+
+    // Now build the solution for the original decision variables.
+    int n = getOriginalNumDecisionVariables();
+    double[] point = new double[n];
+    for (int i = 0; i < n; i++) {
+        int col = columnLabels.indexOf("x" + i);
+        Integer basicRow = (col >= 0) ? getBasicRow(col) : null;
+        double value = (basicRow == null) ? 0.0 : getEntry(basicRow, getRhsOffset());
+        point[i] = value - shift;
     }
-      return new RealPointValuePair(coefficients, f.getValue(coefficients));
+
+    return new RealPointValuePair(point, f.getValue(point));
 }
\ No newline at end of file
