diff --git a/tmp/78aed642-f100-487f-94a1-dd2b5db20b1f_buggy.java b/tmp/8ffbafe8-a498-4488-b22a-40a0091fa67b_fixed.java
index d357c7e..a30e578 100644
--- a/tmp/78aed642-f100-487f-94a1-dd2b5db20b1f_buggy.java
+++ b/tmp/8ffbafe8-a498-4488-b22a-40a0091fa67b_fixed.java
@@ -1,16 +1,19 @@
 private InputStream getCurrentStream() throws IOException {
     if (deferredBlockStreams.isEmpty()) {
-            throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
+        // No streams have been set up. If we haven't called getNextEntry at all,
+        // that's an error; otherwise it's just an empty entry (size==0), so
+        // return an empty stream (read() will immediately return -1).
+        if (currentEntry == null) {
+            throw new IllegalStateException(
+                "No current 7z entry (call getNextEntry() first).");
         }
-        
+        return new java.io.ByteArrayInputStream(new byte[0]);
+    }
+    // If there are multiple folder‐streams queued, skip and close all but the last
     while (deferredBlockStreams.size() > 1) {
-            // In solid compression mode we need to decompress all leading folder'
-            // streams to get access to an entry. We defer this until really needed
-            // so that entire blocks can be skipped without wasting time for decompression.
         final InputStream stream = deferredBlockStreams.remove(0);
         IOUtils.skip(stream, Long.MAX_VALUE);
         stream.close();
     }
-
     return deferredBlockStreams.get(0);
 }
\ No newline at end of file
