diff --git a/tmp/87dd9ef5-5072-4a4b-9c2b-fb149aef38c1_buggy.java b/tmp/0a7f0948-6efa-4489-9a12-3226d87b6a6e_fixed.java
index d357c7e..69e9fcc 100644
--- a/tmp/87dd9ef5-5072-4a4b-9c2b-fb149aef38c1_buggy.java
+++ b/tmp/0a7f0948-6efa-4489-9a12-3226d87b6a6e_fixed.java
@@ -1,16 +1,16 @@
 private InputStream getCurrentStream() throws IOException {
+    // special-case zero‐length entries: just return an empty stream
+    if (currentEntry != null && currentEntry.getSize() == 0) {
+        return new java.io.ByteArrayInputStream(new byte[0]);
+    }
     if (deferredBlockStreams.isEmpty()) {
         throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
     }
-        
+    // in solid mode skip all but the last pending block
     while (deferredBlockStreams.size() > 1) {
-            // In solid compression mode we need to decompress all leading folder'
-            // streams to get access to an entry. We defer this until really needed
-            // so that entire blocks can be skipped without wasting time for decompression.
         final InputStream stream = deferredBlockStreams.remove(0);
         IOUtils.skip(stream, Long.MAX_VALUE);
         stream.close();
     }
-
     return deferredBlockStreams.get(0);
 }
\ No newline at end of file
