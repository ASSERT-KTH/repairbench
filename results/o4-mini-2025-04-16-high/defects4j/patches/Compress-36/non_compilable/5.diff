diff --git a/tmp/eacd7d01-3c19-4172-8e90-ab30cc6be8df_buggy.java b/tmp/c87cd0e3-d762-472b-aa76-2b36b609da55_fixed.java
index d357c7e..87f56f0 100644
--- a/tmp/eacd7d01-3c19-4172-8e90-ab30cc6be8df_buggy.java
+++ b/tmp/c87cd0e3-d762-472b-aa76-2b36b609da55_fixed.java
@@ -1,16 +1,19 @@
 private InputStream getCurrentStream() throws IOException {
+    // If there are no deferred streams, either no entry was selected
+    // (error) or it's a zero-length entry (return an empty stream).
     if (deferredBlockStreams.isEmpty()) {
+        if (currentEntry == null) {
             throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
         }
-        
+        // Zero‐length entry: return an empty stream that immediately EOFs.
+        return new java.io.ByteArrayInputStream(new byte[0]);
+    }
+    // In solid mode skip and close all but the first stream so that
+    // the head of the list is always the current entry's data.
     while (deferredBlockStreams.size() > 1) {
-            // In solid compression mode we need to decompress all leading folder'
-            // streams to get access to an entry. We defer this until really needed
-            // so that entire blocks can be skipped without wasting time for decompression.
         final InputStream stream = deferredBlockStreams.remove(0);
         IOUtils.skip(stream, Long.MAX_VALUE);
         stream.close();
     }
-
     return deferredBlockStreams.get(0);
 }
\ No newline at end of file
