diff --git a/tmp/d859a45b-90d1-43ea-a79e-0e68260d64da_buggy.java b/tmp/6d6983d3-a9da-4d32-bb4c-52eb33a336d0_fixed.java
index d907b39..c775abf 100644
--- a/tmp/d859a45b-90d1-43ea-a79e-0e68260d64da_buggy.java
+++ b/tmp/6d6983d3-a9da-4d32-bb4c-52eb33a336d0_fixed.java
@@ -1,56 +1,74 @@
+@Override
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
     if (inf.finished() || current == null) {
         return -1;
     }
+    // argument checks
+    if (buffer == null) {
+        throw new NullPointerException("buffer is null");
+    }
+    if (start < 0 || length < 0 || start > buffer.length || buffer.length - start < length) {
+        throw new ArrayIndexOutOfBoundsException();
+    }
+    if (length == 0) {
+        return 0;
+    }
 
-        // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
+    // STORED (uncompressed) entries
     if (current.getMethod() == ZipArchiveOutputStream.STORED) {
         int csize = (int) current.getSize();
         if (readBytesOfEntry >= csize) {
             return -1;
         }
         if (offsetInBuffer >= lengthOfLastRead) {
             offsetInBuffer = 0;
-                    if ((lengthOfLastRead = in.read(buf)) == -1) {
-                        return -1;
+            lengthOfLastRead = in.read(buf);
+            if (lengthOfLastRead == -1) {
+                throw new IOException("Truncated ZIP file");
             }
             count(lengthOfLastRead);
             bytesReadFromStream += lengthOfLastRead;
         }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
-                if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
+        int avail = lengthOfLastRead - offsetInBuffer;
+        int toRead = Math.min(avail, length);
+        int remain = csize - readBytesOfEntry;
+        if (remain < toRead) {
+            toRead = remain;
         }
         System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
         offsetInBuffer += toRead;
         readBytesOfEntry += toRead;
         crc.update(buffer, start, toRead);
         return toRead;
     }
+
+    // DEFLATED (compressed) entries
     if (inf.needsInput()) {
         fill();
-                if (lengthOfLastRead > 0) {
+        // if no more compressed data, the entry is truncated
+        if (lengthOfLastRead <= 0) {
+            throw new IOException("Truncated ZIP file");
+        }
         bytesReadFromStream += lengthOfLastRead;
     }
-            }
-            int read = 0;
+    int n;
     try {
-                read = inf.inflate(buffer, start, length);
+        n = inf.inflate(buffer, start, length);
     } catch (DataFormatException e) {
         throw new ZipException(e.getMessage());
     }
-            if (read == 0 && inf.finished()) {
+    if (n == 0) {
+        if (inf.finished()) {
             return -1;
         }
-            crc.update(buffer, start, read);
-            return read;
+        // needs more input but got none -> truncated
+        if (inf.needsInput()) {
+            throw new IOException("Truncated ZIP file");
         }
-        throw new ArrayIndexOutOfBoundsException();
+    }
+    crc.update(buffer, start, n);
+    return n;
 }
\ No newline at end of file
