diff --git a/tmp/a5b1c249-f243-4766-ac2b-27d8b8f125fc_buggy.java b/tmp/84b715b0-6579-4c2a-97a9-3179372659ad_fixed.java
index d907b39..b59d297 100644
--- a/tmp/a5b1c249-f243-4766-ac2b-27d8b8f125fc_buggy.java
+++ b/tmp/84b715b0-6579-4c2a-97a9-3179372659ad_fixed.java
@@ -1,56 +1,66 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
     if (inf.finished() || current == null) {
         return -1;
     }
 
     // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
+    if (start < 0 || length < 0 || start > buffer.length || buffer.length - start < length) {
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
     if (current.getMethod() == ZipArchiveOutputStream.STORED) {
         int csize = (int) current.getSize();
         if (readBytesOfEntry >= csize) {
             return -1;
         }
         if (offsetInBuffer >= lengthOfLastRead) {
             offsetInBuffer = 0;
             if ((lengthOfLastRead = in.read(buf)) == -1) {
                 return -1;
             }
             count(lengthOfLastRead);
             bytesReadFromStream += lengthOfLastRead;
         }
         int toRead = length > lengthOfLastRead
             ? lengthOfLastRead - offsetInBuffer
             : length;
         if ((csize - readBytesOfEntry) < toRead) {
             toRead = csize - readBytesOfEntry;
         }
         System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
         offsetInBuffer += toRead;
         readBytesOfEntry += toRead;
         crc.update(buffer, start, toRead);
         return toRead;
     }
+
+    // DEFLATED entry
+    while (true) {
         if (inf.needsInput()) {
             fill();
-                if (lengthOfLastRead > 0) {
+            if (lengthOfLastRead <= 0) {
+                // no more data but entry not finished -> truncated
+                throw new IOException("Truncated ZIP file");
+            }
             bytesReadFromStream += lengthOfLastRead;
         }
-            }
-            int read = 0;
+        int n;
         try {
-                read = inf.inflate(buffer, start, length);
+            n = inf.inflate(buffer, start, length);
         } catch (DataFormatException e) {
             throw new ZipException(e.getMessage());
         }
-            if (read == 0 && inf.finished()) {
+        if (n > 0) {
+            crc.update(buffer, start, n);
+            return n;
+        }
+        if (inf.finished()) {
+            // end of this entry
             return -1;
         }
-            crc.update(buffer, start, read);
-            return read;
+        // read == 0 but not finished, loop to fill more input
     }
-        throw new ArrayIndexOutOfBoundsException();
 }
\ No newline at end of file
