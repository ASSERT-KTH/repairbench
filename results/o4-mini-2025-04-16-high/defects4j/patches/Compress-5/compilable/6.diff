diff --git a/tmp/bd838841-f2e1-49fe-82db-0fd9e56c080a_buggy.java b/tmp/8997e99c-48f7-4a36-8a0d-fdd16913cffe_fixed.java
index d907b39..8480db3 100644
--- a/tmp/bd838841-f2e1-49fe-82db-0fd9e56c080a_buggy.java
+++ b/tmp/8997e99c-48f7-4a36-8a0d-fdd16913cffe_fixed.java
@@ -1,56 +1,64 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
     if (inf.finished() || current == null) {
         return -1;
     }
 
     // avoid int overflow, check null buffer
     if (start <= buffer.length && length >= 0 && start >= 0
         && buffer.length - start >= length) {
+
         if (current.getMethod() == ZipArchiveOutputStream.STORED) {
             int csize = (int) current.getSize();
             if (readBytesOfEntry >= csize) {
                 return -1;
             }
             if (offsetInBuffer >= lengthOfLastRead) {
                 offsetInBuffer = 0;
                 if ((lengthOfLastRead = in.read(buf)) == -1) {
                     return -1;
                 }
                 count(lengthOfLastRead);
                 bytesReadFromStream += lengthOfLastRead;
             }
             int toRead = length > lengthOfLastRead
                 ? lengthOfLastRead - offsetInBuffer
                 : length;
             if ((csize - readBytesOfEntry) < toRead) {
                 toRead = csize - readBytesOfEntry;
             }
             System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
             offsetInBuffer += toRead;
             readBytesOfEntry += toRead;
             crc.update(buffer, start, toRead);
             return toRead;
         }
+
+        // deflated entry
         if (inf.needsInput()) {
             fill();
-                if (lengthOfLastRead > 0) {
+            if (lengthOfLastRead <= 0) {
+                throw new ZipException("Truncated ZIP file");
+            }
             bytesReadFromStream += lengthOfLastRead;
         }
-            }
-            int read = 0;
+        int count;
         try {
-                read = inf.inflate(buffer, start, length);
+            count = inf.inflate(buffer, start, length);
         } catch (DataFormatException e) {
             throw new ZipException(e.getMessage());
         }
-            if (read == 0 && inf.finished()) {
+        if (count == 0) {
+            if (inf.finished()) {
                 return -1;
             }
-            crc.update(buffer, start, read);
-            return read;
+            // no progress and not finished => truncated archive
+            throw new ZipException("Truncated ZIP file");
+        }
+        crc.update(buffer, start, count);
+        return count;
     }
     throw new ArrayIndexOutOfBoundsException();
 }
\ No newline at end of file
