diff --git a/tmp/ab6905e7-b69a-4f3e-b314-c0e3500ef306_buggy.java b/tmp/73f08279-8a87-49a8-becc-a07b38d5acd8_fixed.java
index 4be01ab..9450650 100644
--- a/tmp/ab6905e7-b69a-4f3e-b314-c0e3500ef306_buggy.java
+++ b/tmp/73f08279-8a87-49a8-becc-a07b38d5acd8_fixed.java
@@ -1,115 +1,144 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
-
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
+  // Remember where the text starts.
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
+  // Grab the rest of the first line.
+  String firstLine = stream.getRemainingJSDocLine();
+  if (option != WhitespaceOption.PRESERVE) {
+    firstLine = firstLine.trim();
+  }
+
+  // --- Special case: PRESERVE mode must keep all spacing & newlines verbatim. ---
+  if (option == WhitespaceOption.PRESERVE) {
+    List<String> lines = new ArrayList<>();
+    lines.add(firstLine);
+
+    state = State.SEARCHING_ANNOTATION;
+    token = next();
+    // Skip any leftover tokens on the same (first) line.
+    while (token != JsDocToken.EOL &&
+           token != JsDocToken.EOC &&
+           token != JsDocToken.EOF) {
+      token = next();
+    }
+    // Now read each subsequent line until we hit end‐of‐comment.
+    while (token != JsDocToken.EOC && token != JsDocToken.EOF) {
+      // Consume the newline token if present.
+      if (token == JsDocToken.EOL) {
+        token = next();
+      }
+      if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
+        break;
+      }
+      // Mark the start of this line and grab its raw contents.
+      stream.update();
       String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
+      lines.add(line);
+      // Advance past any tokens on this line.
+      token = next();
+      while (token != JsDocToken.EOL &&
+             token != JsDocToken.EOC &&
+             token != JsDocToken.EOF) {
+        token = next();
+      }
+    }
+    // Reassemble the preserved lines.
+    StringBuilder sb = new StringBuilder();
+    for (int i = 0; i < lines.size(); i++) {
+      if (i > 0) {
+        sb.append("\n");
+      }
+      sb.append(lines.get(i));
+    }
+    String multilineText = sb.toString();
+    int endLineno = stream.getLineno();
+    int endCharno = stream.getCharno();
+
+    if (!multilineText.isEmpty()) {
+      jsdocBuilder.markText(
+          multilineText,
+          startLineno, startCharno,
+          endLineno, endCharno);
+    }
+    return new ExtractionInfo(multilineText, token);
   }
 
+  // --- Fallback: existing logic for non-PRESERVE cases. ---
   StringBuilder builder = new StringBuilder();
-    builder.append(line);
-
+  builder.append(firstLine);
   state = State.SEARCHING_ANNOTATION;
   token = next();
 
   boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
   do {
     switch (token) {
       case STAR:
         if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+          // Just update our notion of "start of line"
         } else {
-            // The star is part of the comment.
           if (builder.length() > 0) {
             builder.append(' ');
           }
-
           builder.append('*');
         }
-
         token = next();
         continue;
 
       case EOL:
         if (option != WhitespaceOption.SINGLE_LINE) {
           builder.append("\n");
         }
-
         ignoreStar = true;
         token = next();
         continue;
 
       default:
         ignoreStar = false;
         state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
+        // Terminate on end‐of‐comment, EOF, or a new annotation
+        // (unless we're in PRESERVE, which we already handled).
         if (token == JsDocToken.EOC ||
             token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+            (token == JsDocToken.ANNOTATION
+             && option != WhitespaceOption.PRESERVE)) {
           String multilineText = builder.toString();
-
           if (option != WhitespaceOption.PRESERVE) {
             multilineText = multilineText.trim();
           }
-
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
-
-            if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
+          if (!multilineText.isEmpty()) {
+            jsdocBuilder.markText(
+                multilineText,
+                startLineno, startCharno,
                 endLineno, endCharno);
           }
-
           return new ExtractionInfo(multilineText, token);
         }
 
+        // Otherwise, append a space and the token text, then the rest of
+        // the line.
         if (builder.length() > 0) {
           builder.append(' ');
         }
         builder.append(toString(token));
 
-          line = stream.getRemainingJSDocLine();
-
+        String tail = stream.getRemainingJSDocLine();
         if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+          tail = trimEnd(tail);
         }
-
-          builder.append(line);
+        builder.append(tail);
         token = next();
     }
   } while (true);
 }
\ No newline at end of file
