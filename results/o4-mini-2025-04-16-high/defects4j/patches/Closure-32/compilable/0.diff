diff --git a/tmp/d252077c-33e2-4a93-82ed-b124b5b53d65_buggy.java b/tmp/b007f894-b38d-4056-a134-ac3bd8561cd9_fixed.java
index 4be01ab..b8052f8 100644
--- a/tmp/d252077c-33e2-4a93-82ed-b124b5b53d65_buggy.java
+++ b/tmp/b007f894-b38d-4056-a134-ac3bd8561cd9_fixed.java
@@ -1,115 +1,111 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
-
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
+  // Mark the start position for jsdocBuilder.markText(...)
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
   // Read the content from the first line.
   String line = stream.getRemainingJSDocLine();
   if (option != WhitespaceOption.PRESERVE) {
     line = line.trim();
   }
-
   StringBuilder builder = new StringBuilder();
   builder.append(line);
 
   state = State.SEARCHING_ANNOTATION;
   token = next();
 
   boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
   do {
     switch (token) {
       case STAR:
         if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+          if (option == WhitespaceOption.PRESERVE) {
+            // Skip the leading '*' and pull in the raw rest of the line.
+            stream.update();
+            String raw = stream.getRemainingJSDocLine();
+            builder.append(raw);
+            token = next();
+            continue;
+          }
+          // otherwise (non‐preserve) we just skip the decorative star
         } else {
-            // The star is part of the comment.
+          // '*' is part of the text
           if (builder.length() > 0) {
             builder.append(' ');
           }
-
           builder.append('*');
         }
-
         token = next();
         continue;
 
       case EOL:
         if (option != WhitespaceOption.SINGLE_LINE) {
           builder.append("\n");
         }
-
         ignoreStar = true;
         token = next();
         continue;
 
       default:
+        // In PRESERVE mode, if we're at the start of a new line,
+        // grab the raw line in one shot (this preserves indentation).
+        if (option == WhitespaceOption.PRESERVE
+            && builder.length() > 0
+            && builder.charAt(builder.length() - 1) == '\n') {
+          stream.update();
+          String raw = stream.getRemainingJSDocLine();
+          builder.append(raw);
+          token = next();
+          continue;
+        }
+
         ignoreStar = false;
         state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+        // Termination conditions
+        if (token == JsDocToken.EOC
+            || token == JsDocToken.EOF
+            || (token == JsDocToken.ANNOTATION
+                && option != WhitespaceOption.PRESERVE)) {
           String multilineText = builder.toString();
-
           if (option != WhitespaceOption.PRESERVE) {
             multilineText = multilineText.trim();
           }
-
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
-
-            if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
+          if (!multilineText.isEmpty()) {
+            jsdocBuilder.markText(
+                multilineText, startLineno, startCharno,
                 endLineno, endCharno);
           }
-
           return new ExtractionInfo(multilineText, token);
         }
 
+        // Normal accumulation
+        if (option != WhitespaceOption.PRESERVE) {
           if (builder.length() > 0) {
             builder.append(' ');
           }
           builder.append(toString(token));
+        } else {
+          // PRESERVE mode: just append the token text
+          builder.append(toString(token));
+        }
 
         line = stream.getRemainingJSDocLine();
-
         if (option != WhitespaceOption.PRESERVE) {
           line = trimEnd(line);
         }
-
         builder.append(line);
         token = next();
     }
   } while (true);
 }
\ No newline at end of file
