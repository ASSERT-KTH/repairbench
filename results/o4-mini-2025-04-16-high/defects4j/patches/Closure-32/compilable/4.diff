diff --git a/tmp/47ad887a-b896-43ce-8f58-035046104274_buggy.java b/tmp/61bf3bc0-b4c2-4e2b-9e7f-b83705956cfe_fixed.java
index 4be01ab..8977679 100644
--- a/tmp/47ad887a-b896-43ce-8f58-035046104274_buggy.java
+++ b/tmp/61bf3bc0-b4c2-4e2b-9e7f-b83705956cfe_fixed.java
@@ -1,115 +1,115 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
-
+  // If there's nothing to read, bail out immediately.
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
+  // Record the start position.
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
+  // Read the remainder of the first line.
   String line = stream.getRemainingJSDocLine();
   if (option != WhitespaceOption.PRESERVE) {
     line = line.trim();
   }
-
   StringBuilder builder = new StringBuilder();
   builder.append(line);
 
   state = State.SEARCHING_ANNOTATION;
   token = next();
 
+  // --- PRESERVE mode: copy each line raw (minus the comment-asterisk) ---
+  if (option == WhitespaceOption.PRESERVE) {
+    while (token != JsDocToken.EOC && token != JsDocToken.EOF) {
+      if (token == JsDocToken.EOL) {
+        // Move the "line start" marker to just after this newline
+        stream.update();
+        // Grab the raw text of the next line
+        String rawLine = stream.getRemainingJSDocLine();
+        // Strip off a leading "*" (and any whitespace before it)
+        rawLine = rawLine.replaceFirst("^\\s*\\* ?", "");
+        builder.append("\n").append(rawLine);
+      }
+      token = next();
+    }
+    String multilineText = builder.toString();
+    int endLineno = stream.getLineno();
+    int endCharno = stream.getCharno();
+    if (!multilineText.isEmpty()) {
+      jsdocBuilder.markText(
+          multilineText, startLineno, startCharno,
+          endLineno, endCharno);
+    }
+    return new ExtractionInfo(multilineText, token);
+  }
+
+  // --- non‐PRESERVE modes: the old token‐by‐token logic ---
   boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
   do {
     switch (token) {
       case STAR:
         if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+          // We've just seen an EOL, so this STAR is the comment prefix.
+          // Reset the "line start" to after it.
+          stream.update();
         } else {
-            // The star is part of the comment.
+          // A real '*' in the text.
           if (builder.length() > 0) {
             builder.append(' ');
           }
-
           builder.append('*');
         }
-
         token = next();
         continue;
 
       case EOL:
         if (option != WhitespaceOption.SINGLE_LINE) {
           builder.append("\n");
         }
-
         ignoreStar = true;
+        // Update so that getRemainingJSDocLine() will start at the true new line.
+        stream.update();
         token = next();
         continue;
 
       default:
         ignoreStar = false;
         state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
+        // Stop if we hit end‐of‐comment or (for non‐PRESERVE) another annotation.
         if (token == JsDocToken.EOC ||
             token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+            (token == JsDocToken.ANNOTATION
+             && option != WhitespaceOption.PRESERVE)) {
           String multilineText = builder.toString();
-
           if (option != WhitespaceOption.PRESERVE) {
             multilineText = multilineText.trim();
           }
-
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
-
-            if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
+          if (!multilineText.isEmpty()) {
+            jsdocBuilder.markText(
+                multilineText, startLineno, startCharno,
                 endLineno, endCharno);
           }
-
           return new ExtractionInfo(multilineText, token);
         }
 
+        // Otherwise, consume one token and its remainder on the line.
         if (builder.length() > 0) {
           builder.append(' ');
         }
         builder.append(toString(token));
-
         line = stream.getRemainingJSDocLine();
-
         if (option != WhitespaceOption.PRESERVE) {
           line = trimEnd(line);
         }
-
         builder.append(line);
         token = next();
     }
   } while (true);
 }
\ No newline at end of file
