diff --git a/tmp/99f5f0a0-1357-421f-9435-7a115dcf9f28_buggy.java b/tmp/e89b9404-0b11-4468-9cba-e5ecdd3a506f_fixed.java
index 4be01ab..96324f1 100644
--- a/tmp/99f5f0a0-1357-421f-9435-7a115dcf9f28_buggy.java
+++ b/tmp/e89b9404-0b11-4468-9cba-e5ecdd3a506f_fixed.java
@@ -1,115 +1,123 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
-
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
   // Read the content from the first line.
   String line = stream.getRemainingJSDocLine();
   if (option != WhitespaceOption.PRESERVE) {
     line = line.trim();
   }
 
   StringBuilder builder = new StringBuilder();
   builder.append(line);
 
   state = State.SEARCHING_ANNOTATION;
   token = next();
 
+  // Special‐case PRESERVE: keep raw indentation.
+  if (option == WhitespaceOption.PRESERVE) {
+    while (true) {
+      if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
+        break;
+      }
+      if (token == JsDocToken.EOL) {
+        builder.append('\n');
+        String rawLine = stream.getRemainingJSDocLine();
+        // Strip a leading '*' if it's there, and one space after it.
+        if (!rawLine.isEmpty() && rawLine.charAt(0) == '*') {
+          rawLine = rawLine.substring(1);
+          if (!rawLine.isEmpty() && rawLine.charAt(0) == ' ') {
+            rawLine = rawLine.substring(1);
+          }
+        }
+        builder.append(rawLine);
+      } else {
+        // Any other token is part of the same line.
+        builder.append(toString(token));
+        String rest = stream.getRemainingJSDocLine();
+        builder.append(rest);
+      }
+      token = next();
+    }
+
+    String multilineText = builder.toString();
+    int endLineno = stream.getLineno();
+    int endCharno = stream.getCharno();
+    if (!multilineText.isEmpty()) {
+      jsdocBuilder.markText(
+          multilineText, startLineno, startCharno, endLineno, endCharno);
+    }
+    return new ExtractionInfo(multilineText, token);
+  }
+
+  // Fallback for non‐PRESERVE (default / single line).
   boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
   do {
     switch (token) {
       case STAR:
         if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+          // We skip the leading '*' on a new line.
         } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+          // A '*' within text.
+          if (builder.length() > 0 &&
+              builder.charAt(builder.length() - 1) != '\n') {
             builder.append(' ');
           }
-
           builder.append('*');
         }
-
         token = next();
         continue;
 
       case EOL:
         if (option != WhitespaceOption.SINGLE_LINE) {
-            builder.append("\n");
+          builder.append('\n');
         }
-
         ignoreStar = true;
         token = next();
         continue;
 
       default:
         ignoreStar = false;
         state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
+        // Stop on end‐of‐comment, EOF, or a new annotation (unless PRESERVE).
         if (token == JsDocToken.EOC ||
             token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
             (token == JsDocToken.ANNOTATION &&
              option != WhitespaceOption.PRESERVE)) {
           String multilineText = builder.toString();
-
           if (option != WhitespaceOption.PRESERVE) {
             multilineText = multilineText.trim();
           }
-
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
-
-            if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
-                  endLineno, endCharno);
+          if (!multilineText.isEmpty()) {
+            jsdocBuilder.markText(
+                multilineText, startLineno, startCharno, endLineno, endCharno);
           }
-
           return new ExtractionInfo(multilineText, token);
         }
 
-          if (builder.length() > 0) {
+        // Otherwise consume a token + the rest of its line.
+        if (builder.length() > 0 &&
+            builder.charAt(builder.length() - 1) != '\n') {
           builder.append(' ');
         }
         builder.append(toString(token));
-
         line = stream.getRemainingJSDocLine();
-
         if (option != WhitespaceOption.PRESERVE) {
           line = trimEnd(line);
         }
-
         builder.append(line);
         token = next();
     }
   } while (true);
 }
\ No newline at end of file
