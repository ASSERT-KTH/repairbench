diff --git a/tmp/29b1ee5a-bcf9-4fd3-8c72-bcae43d03835_buggy.java b/tmp/3f9e2614-b0b6-4622-a490-9ba77a871544_fixed.java
index 4be01ab..d9b8612 100644
--- a/tmp/29b1ee5a-bcf9-4fd3-8c72-bcae43d03835_buggy.java
+++ b/tmp/3f9e2614-b0b6-4622-a490-9ba77a871544_fixed.java
@@ -1,115 +1,98 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
-
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
+    // If we immediately hit end-of-comment or newline, there's no text.
+    if (token == JsDocToken.EOC ||
+        token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
+    // Record starting position.
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
+    // Grab the rest of the first line.
     String line = stream.getRemainingJSDocLine();
     if (option != WhitespaceOption.PRESERVE) {
       line = line.trim();
     }
-
     StringBuilder builder = new StringBuilder();
     builder.append(line);
 
+    // Advance into the block.
     state = State.SEARCHING_ANNOTATION;
     token = next();
 
     boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
     do {
       switch (token) {
         case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
+          // Skip leading JSDoc "*" on a new line.
+          if (!ignoreStar) {
+            // A real star in the text should be preserved,
+            // but only with spacing in non-PRESERVE mode.
+            if (option != WhitespaceOption.PRESERVE) {
               if (builder.length() > 0) {
                 builder.append(' ');
               }
-
+            }
             builder.append('*');
           }
-
+          // Reset the star-skip flag and continue.
           token = next();
+          ignoreStar = false;
           continue;
 
         case EOL:
+          // In SINGLE_LINE mode we stop at newlines; otherwise keep them.
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
-
+          // The next STAR (if any) is a comment prefix, not content.
           ignoreStar = true;
           token = next();
           continue;
 
         default:
           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
-            String multilineText = builder.toString();
-
+          // Terminate on end-of-comment, end-of-file, or
+          // a nested annotation (unless we're in PRESERVE).
+          if (token == JsDocToken.EOC
+              || token == JsDocToken.EOF
+              || (token == JsDocToken.ANNOTATION
+                  && option != WhitespaceOption.PRESERVE)) {
+            String text = builder.toString();
             if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
+              text = text.trim();
             }
-
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
-
-            if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
-                  endLineno, endCharno);
+            if (!text.isEmpty()) {
+              jsdocBuilder.markText(
+                  text, startLineno, startCharno, endLineno, endCharno);
             }
-
-            return new ExtractionInfo(multilineText, token);
+            return new ExtractionInfo(text, token);
           }
 
+          // Otherwise consume the rest of this line.
+          if (option == WhitespaceOption.PRESERVE) {
+            // PRESERVE: take the raw rest of the line.
+            builder.append(stream.getRemainingJSDocLine());
+          } else {
+            // NORMAL: separate tokens with a space and trim line-end.
             if (builder.length() > 0) {
               builder.append(' ');
             }
             builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+            String rest = stream.getRemainingJSDocLine();
+            rest = trimEnd(rest);
+            builder.append(rest);
           }
 
-          builder.append(line);
           token = next();
       }
     } while (true);
   }
\ No newline at end of file
