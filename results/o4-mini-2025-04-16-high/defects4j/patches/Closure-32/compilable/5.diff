diff --git a/tmp/ab9671db-4161-46be-9abe-fc3a59508d82_buggy.java b/tmp/6dad0747-288b-4e21-bd06-ba801503c90c_fixed.java
index 4be01ab..ef00895 100644
--- a/tmp/ab9671db-4161-46be-9abe-fc3a59508d82_buggy.java
+++ b/tmp/6dad0747-288b-4e21-bd06-ba801503c90c_fixed.java
@@ -1,115 +1,93 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
-
+  // If we immediately hit end-of-comment, return empty string.
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
+  // Mark the start of the first line.
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
   // Read the content from the first line.
   String line = stream.getRemainingJSDocLine();
   if (option != WhitespaceOption.PRESERVE) {
     line = line.trim();
   }
-
   StringBuilder builder = new StringBuilder();
   builder.append(line);
 
   state = State.SEARCHING_ANNOTATION;
   token = next();
 
   boolean ignoreStar = false;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
+  // Read until we hit another annotation (unless preserving), end-of-comment or EOF.
   do {
     switch (token) {
+
       case STAR:
         if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+          // We're at the start of a new line and we saw the '*' prefix.
+          // Skip it and reset our "start-of-line" point for getRemainingJSDocLine.
+          token = next();
+          stream.update();
         } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+          // A '*' in the middle of the block is actual content.
+          if (option != WhitespaceOption.PRESERVE && builder.length() > 0) {
             builder.append(' ');
           }
-
           builder.append('*');
-          }
-
           token = next();
+        }
         continue;
 
       case EOL:
+        // Preserve newlines unless we're in single-line mode.
         if (option != WhitespaceOption.SINGLE_LINE) {
           builder.append("\n");
         }
-
         ignoreStar = true;
         token = next();
         continue;
 
       default:
         ignoreStar = false;
         state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+        // Termination conditions.
+        if (token == JsDocToken.EOC || token == JsDocToken.EOF ||
+            (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {
           String multilineText = builder.toString();
-
           if (option != WhitespaceOption.PRESERVE) {
             multilineText = multilineText.trim();
           }
 
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
-
           if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
-                  endLineno, endCharno);
+            jsdocBuilder.markText(
+                multilineText, startLineno, startCharno, endLineno, endCharno);
           }
-
           return new ExtractionInfo(multilineText, token);
         }
 
-          if (builder.length() > 0) {
+        // Otherwise, append the next bit of text on this line.
+        if (option != WhitespaceOption.PRESERVE && builder.length() > 0) {
           builder.append(' ');
         }
         builder.append(toString(token));
 
         line = stream.getRemainingJSDocLine();
-
         if (option != WhitespaceOption.PRESERVE) {
           line = trimEnd(line);
         }
-
         builder.append(line);
+
         token = next();
     }
   } while (true);
 }
\ No newline at end of file
