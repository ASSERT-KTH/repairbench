diff --git a/tmp/f6b82e21-fac4-4866-8644-d3f12df6e7e6_buggy.java b/tmp/ff6e36c1-b797-4662-848e-d22b4ef82568_fixed.java
index e8b3baa..30b57f6 100644
--- a/tmp/f6b82e21-fac4-4866-8644-d3f12df6e7e6_buggy.java
+++ b/tmp/ff6e36c1-b797-4662-848e-d22b4ef82568_fixed.java
@@ -1,54 +1,42 @@
 protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
         String typeId) throws IOException
 {
     JsonDeserializer<Object> deser = _deserializers.get(typeId);
     if (deser == null) {
-            /* As per [databind#305], need to provide contextual info. But for
-             * backwards compatibility, let's start by only supporting this
-             * for base class, not via interface. Later on we can add this
-             * to the interface, assuming deprecation at base class helps.
-             */
-            JavaType type = _idResolver.typeFromId(ctxt, typeId);
+        // first: try to resolve the logical type id
+        JavaType type;
+        try {
+            type = _idResolver.typeFromId(ctxt, typeId);
+        } catch (Exception e) {
+            // if the resolver blows up (unknown id → exception), treat as "no type"
+            type = null;
+        }
         if (type == null) {
-                // use the default impl if no type id available:
+            // no real subtype from id, try default‐impl (if any)
             deser = _findDefaultImplDeserializer(ctxt);
             if (deser == null) {
-                    // 10-May-2016, tatu: We may get some help...
+                // no default, delegate to problem handler
                 JavaType actual = _handleUnknownTypeId(ctxt, typeId);
-                    if (actual == null) { // what should this be taken to mean?
-                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
-                        return null;
-                    }
-                    // ... would this actually work?
+                if (actual == null) {
+                    // per [databind#2221], do not return null – skip content instead
+                    deser = NullifyingDeserializer.instance;
+                } else if (actual.getRawClass() == Void.class) {
+                    // handler asked us to treat this as "void" → skip
+                    deser = NullifyingDeserializer.instance;
+                } else {
                     deser = ctxt.findContextualValueDeserializer(actual, _property);
                 }
-            } else {
-                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
-                 *   we actually now need to explicitly narrow from base type (which may have parameterization)
-                 *   using raw type.
-                 *
-                 *   One complication, though; cannot change 'type class' (simple type to container); otherwise
-                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
-                 *   type in process (getting SimpleType of Map.class which will not work as expected)
-                 */
-                if ((_baseType != null)
-                        && _baseType.getClass() == type.getClass()) {
-                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
-                     *   but it appears to check that JavaType impl class is the same which is
-                     *   important for some reason?
-                     *   Disabling the check will break 2 Enum-related tests.
-                     */
-                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
-                    //   generic type with custom type resolvers. If so, should try to retain them.
-                    //  Whether this is sufficient to avoid problems remains to be seen, but for
-                    //  now it should improve things.
-                    if (!type.hasGenericTypes()) {
-                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
             }
+        } else {
+            // we got a subtype; possibly narrow it if it is the same JavaType impl
+            if (_baseType != null && _baseType.getClass() == type.getClass()
+                    && !type.hasGenericTypes()) {
+                type = ctxt.getTypeFactory()
+                           .constructSpecializedType(_baseType, type.getRawClass());
             }
             deser = ctxt.findContextualValueDeserializer(type, _property);
         }
         _deserializers.put(typeId, deser);
     }
     return deser;
 }
\ No newline at end of file
