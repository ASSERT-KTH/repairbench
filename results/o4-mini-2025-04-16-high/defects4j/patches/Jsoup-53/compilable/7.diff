diff --git a/tmp/f1d63e06-2737-4321-972f-7a69df4430c1_buggy.java b/tmp/8499eb61-e81e-456c-b836-340ed8c32171_fixed.java
index fecb896..fcc1dad 100644
--- a/tmp/f1d63e06-2737-4321-972f-7a69df4430c1_buggy.java
+++ b/tmp/8499eb61-e81e-456c-b836-340ed8c32171_fixed.java
@@ -1,34 +1,40 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    char quote = 0;
 
     do {
         if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        char c = consume(); // unbox if consume() returns Character
+
+        // handle quoting and escaping
+        if (last != ESC) {
+            // open or close a quote
+            if (quote == 0 && (c == '\'' || c == '"')) {
+                quote = c;
+            } else if (quote != 0 && c == quote) {
+                quote = 0;
+            }
+            // only count braces if we're not in a quoted section
+            else if (quote == 0) {
+                if (c == open) {
                     depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                    if (start == -1) start = pos;
+                } else if (c == close) {
                     depth--;
                 }
+            }
+        }
+
+        // record end of the content (exclude the outer brackets)
+        if (depth > 0 && last != 0) {
+            end = pos;
+        }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
         last = c;
     } while (depth > 0);
+
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
