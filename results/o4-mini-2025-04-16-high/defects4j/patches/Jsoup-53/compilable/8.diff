diff --git a/tmp/861eadf0-fde8-4a33-a6c4-87e5e94773d4_buggy.java b/tmp/ecae7bfb-dfc6-4c93-be20-8be1cdf0e527_fixed.java
index fecb896..b580c2e 100644
--- a/tmp/861eadf0-fde8-4a33-a6c4-87e5e94773d4_buggy.java
+++ b/tmp/ecae7bfb-dfc6-4c93-be20-8be1cdf0e527_fixed.java
@@ -1,34 +1,35 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inSingleQuote = false;
+    boolean inDoubleQuote = false;
 
     do {
         if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        char c = consume();
+        // toggle quotes (ignore any opens/closes inside them)
+        if (last != ESC) {
+            if (c == '\'' && !inDoubleQuote) {
+                inSingleQuote = !inSingleQuote;
+            } else if (c == '"' && !inSingleQuote) {
+                inDoubleQuote = !inDoubleQuote;
+            } else if (!inSingleQuote && !inDoubleQuote) {
+                if (c == open) {
                     depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                    if (start == -1) start = pos;
+                } else if (c == close) {
                     depth--;
                 }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            }
+        }
+        // only update end when we're inside the balance and past the first char
+        if (depth > 0 && last != 0) {
+            end = pos;
+        }
         last = c;
     } while (depth > 0);
+
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
