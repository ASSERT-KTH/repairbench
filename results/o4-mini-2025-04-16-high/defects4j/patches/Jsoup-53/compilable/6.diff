diff --git a/tmp/21b9557a-6788-4456-b7f2-3be2b8949789_buggy.java b/tmp/fd69e8a6-12f1-4e4f-bd64-dde7b4f6e793_fixed.java
index fecb896..0df5360 100644
--- a/tmp/21b9557a-6788-4456-b7f2-3be2b8949789_buggy.java
+++ b/tmp/fd69e8a6-12f1-4e4f-bd64-dde7b4f6e793_fixed.java
@@ -1,34 +1,32 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
-
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+    char quote = 0;
+    while (!isEmpty()) {
+        char c = consume();
+        // if previous char wasn't an escape, handle quoting and bracket depth
+        if (last != ESC) {
+            // toggle in/out of quote when we see an unescaped ' or "
+            if ((c == '"' || c == '\'') && (quote == 0 || quote == c)) {
+                quote = (quote == 0 ? c : 0);
+            }
+            // only consider brackets when not inside a quote
+            else if (quote == 0) {
+                if (c == open) {
                     depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                    if (start == -1) start = pos;
+                } else if (c == close) {
                     depth--;
                 }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            }
+        }
+        // record end position while inside the outermost pair
+        if (depth > 0) end = pos;
         last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        // once we've seen the opening and then closed back to zero, stop
+        if (start != -1 && depth <= 0) break;
+    }
+    return (end >= 0 ? queue.substring(start, end) : "");
 }
\ No newline at end of file
