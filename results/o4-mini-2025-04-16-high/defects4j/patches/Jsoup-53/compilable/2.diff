diff --git a/tmp/0ce31a71-ebc5-4f34-a78f-e769beb07769_buggy.java b/tmp/2b3f9edc-a468-464a-a5ec-676b321c6eed_fixed.java
index fecb896..40c96aa 100644
--- a/tmp/0ce31a71-ebc5-4f34-a78f-e769beb07769_buggy.java
+++ b/tmp/2b3f9edc-a468-464a-a5ec-676b321c6eed_fixed.java
@@ -1,34 +1,42 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    char inQuote = 0;
 
     do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        if (isEmpty())
+            break;
+
+        // read next char
+        char c = consume();
+
+        // toggle in‐quote state if we see ' or " (and it isn't escaped)
+        if (last != ESC && (c == '\'' || c == '"')) {
+            if (inQuote == 0) {
+                inQuote = c;
+            } else if (inQuote == c) {
+                inQuote = 0;
+            }
+        }
+        // only count opens/closes when not inside a quote and not escaped
+        else if (inQuote == 0 && last != ESC) {
+            if (c == open) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
             }
+        }
 
+        // record the end index while we're inside the outermost pair
         if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            end = pos;
+
         last = c;
     } while (depth > 0);
+
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
