diff --git a/tmp/e14527fa-9ef8-456c-9a0a-b08853f9a606_buggy.java b/tmp/c5fa577b-e05b-4aa0-a324-82a53e2afab7_fixed.java
index fecb896..1cb78c6 100644
--- a/tmp/e14527fa-9ef8-456c-9a0a-b08853f9a606_buggy.java
+++ b/tmp/c5fa577b-e05b-4aa0-a324-82a53e2afab7_fixed.java
@@ -1,34 +1,39 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    char inQuote = 0;
 
     do {
         if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        char c = consume();
+
+        // if not escaped, handle quotes and nesting
+        if (last != ESC) {
+            if (inQuote != 0) {
+                // inside a quoted section, only end it when we see the matching quote
+                if (c == inQuote) {
+                    inQuote = 0;
+                }
+            } else if (c == '"' || c == '\'') {
+                // start a quoted section
+                inQuote = c;
+            } else if (c == open) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
             }
+        }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        // track the furthest point of the balanced content
+        if (depth > 0 && last != 0) {
+            end = pos;  // exclude the outer open/close characters
+        }
         last = c;
     } while (depth > 0);
+
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
