diff --git a/tmp/7e9d94b8-4aef-403b-b5a1-e3677bca35db_buggy.java b/tmp/d13efeea-6d56-44a9-8d49-e88a838239d4_fixed.java
index fecb896..609e459 100644
--- a/tmp/7e9d94b8-4aef-403b-b5a1-e3677bca35db_buggy.java
+++ b/tmp/d13efeea-6d56-44a9-8d49-e88a838239d4_fixed.java
@@ -1,34 +1,50 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
 
     do {
-            if (isEmpty()) break;
+        if (isEmpty()) {
+            break;
+        }
         Character c = consume();
-            if (last == 0 || last != ESC) {
+        // Skip any bracket chars inside quoted strings
+        if (last != ESC && depth > 0 && (c.equals('\'') || c.equals('"'))) {
+            char quote = c;
+            // include the opening quote
+            end = pos;
+            last = c;
+            // consume until matching quote (honoring escapes)
+            while (!isEmpty()) {
+                c = consume();
+                if (last != ESC && c.equals(quote)) {
+                    last = c;
+                    end = pos;
+                    break;
+                }
+                last = c;
+                end = pos;
+            }
+            continue;
+        }
+        // normal bracket depth tracking (ignoring escaped opens/closes)
+        if (last != ESC) {
             if (c.equals(open)) {
                 depth++;
-                    if (start == -1)
+                if (start == -1) {
                     start = pos;
                 }
-                else if (c.equals(close))
+            } else if (c.equals(close)) {
                 depth--;
             }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        }
+        // record end so we exclude the outermost brackets
+        if (depth > 0 && last != 0) {
+            end = pos;
+        }
         last = c;
     } while (depth > 0);
+
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
