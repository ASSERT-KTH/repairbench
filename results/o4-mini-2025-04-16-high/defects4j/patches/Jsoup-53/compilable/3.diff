diff --git a/tmp/0ca68a47-db5d-4e86-90a0-60a8e20f0a41_buggy.java b/tmp/337a6b5f-bb05-4a4f-82a5-1b65ae3ca8e8_fixed.java
index fecb896..50320e3 100644
--- a/tmp/0ca68a47-db5d-4e86-90a0-60a8e20f0a41_buggy.java
+++ b/tmp/337a6b5f-bb05-4a4f-82a5-1b65ae3ca8e8_fixed.java
@@ -1,34 +1,35 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
+    char inQuote = 0;
     char last = 0;
-
     do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        if (isEmpty())
+            break;
+        char c = consume();
+        if (last != ESC) {
+            // enter or exit a quoted segment
+            if (inQuote == 0 && (c == '"' || c == '\''))
+                inQuote = c;
+            else if (c == inQuote)
+                inQuote = 0;
+            // only count open/close when not inside a quote
+            if (inQuote == 0) {
+                if (c == open) {
                     depth++;
                     if (start == -1)
                         start = pos;
-                }
-                else if (c.equals(close))
+                } else if (c == close) {
                     depth--;
                 }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            }
+        }
+        // record the end position of the content while we're within the outermost pair
+        if (depth > 0 && start != -1) {
+            end = pos;
+        }
         last = c;
     } while (depth > 0);
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
