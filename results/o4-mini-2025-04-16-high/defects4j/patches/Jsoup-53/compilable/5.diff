diff --git a/tmp/88599bb9-9672-4202-a1dc-12ee76252082_buggy.java b/tmp/151c6566-6380-4708-8ea6-dce608177892_fixed.java
index fecb896..831b167 100644
--- a/tmp/88599bb9-9672-4202-a1dc-12ee76252082_buggy.java
+++ b/tmp/151c6566-6380-4708-8ea6-dce608177892_fixed.java
@@ -1,34 +1,42 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
 
     do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        if (isEmpty())
+            break;
+        char c = consume();
+        // only count opens/closes when not escaped
+        if (last != ESC) {
+            if (c == open) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
+            } else if (c == '\'' || c == '\"') {
+                // skip over a quoted string
+                char quote = c;
+                while (!isEmpty()) {
+                    char qc = consume();
+                    if (qc == ESC) {
+                        // skip escaped char
+                        if (!isEmpty())
+                            consume();
+                    } else if (qc == quote) {
+                        break;
                     }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+                }
+            }
+        }
+        if (depth > 0)
+            end = pos;
         last = c;
     } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+    return (end >= 0)
+        ? queue.substring(start, end)
+        : "";
 }
\ No newline at end of file
