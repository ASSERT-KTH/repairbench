diff --git a/tmp/d8ef80e3-e045-492c-8446-37e00cb94f43_buggy.java b/tmp/b6d891e1-8362-4500-b23d-b4862d14c5fe_fixed.java
index 3b9a3c0..4db0f43 100644
--- a/tmp/d8ef80e3-e045-492c-8446-37e00cb94f43_buggy.java
+++ b/tmp/b6d891e1-8362-4500-b23d-b4862d14c5fe_fixed.java
@@ -1,71 +1,49 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
-
-        if (buffer[start] == 0) {
+    // All NULs (missing field) => zero
+    if (buffer[offset] == 0) {
         return 0L;
     }
-
+    // Detect GNU base-256 (binary) encoding by high bit of first byte
+    if ((buffer[offset] & 0x80) != 0) {
+        long val = 0L;
+        final int end = offset + length;
+        for (int i = offset; i < end; i++) {
+            val = (val << 8) | (buffer[i] & 0xFF);
+        }
+        return val;
+    }
+    // ASCII octal parsing
+    long result = 0L;
+    int start = offset;
+    int end = offset + length;
     // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    while (start < end && buffer[start] == ' ') {
         start++;
-            } else {
-                break;
     }
-        }
-
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+    // Must have a trailing NUL or space
+    byte trailer = buffer[end - 1];
     if (trailer == 0 || trailer == ' ') {
         end--;
     } else {
         throw new IllegalArgumentException(
             exceptionMessage(buffer, offset, length, end - 1, trailer));
     }
-        // May have additional NULs or spaces
+    // Allow one more trailing NUL or space
     trailer = buffer[end - 1];
     if (trailer == 0 || trailer == ' ') {
         end--;
     }
-
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    // Parse octal digits
+    for (int i = start; i < end; i++) {
+        byte b = buffer[i];
+        if (b < '0' || b > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, i, b));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (b - '0');
     }
-
     return result;
 }
\ No newline at end of file
