diff --git a/tmp/a262c271-f19f-4633-8b3f-c4634987f23c_buggy.java b/tmp/b25711af-a544-44bd-aa13-171121dc374c_fixed.java
index 3b9a3c0..baac8eb 100644
--- a/tmp/a262c271-f19f-4633-8b3f-c4634987f23c_buggy.java
+++ b/tmp/b25711af-a544-44bd-aa13-171121dc374c_fixed.java
@@ -1,71 +1,37 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
+    int start = offset;
+    int end = offset + length;
 
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    // skip leading spaces
+    while (start < end && buffer[start] == ' ') {
         start++;
-            } else {
-                break;
     }
+    // if empty or leading NUL, it's all padding
+    if (start >= end || buffer[start] == 0) {
+        return 0L;
     }
-
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
+    // the last byte in the field must be NUL or space
+    byte trailer = buffer[offset + length - 1];
+    if (trailer != 0 && trailer != ' ') {
         throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+            exceptionMessage(buffer, offset, length, offset + length - 1, trailer));
     }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+    // skip all trailing NULs or spaces
+    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
         end--;
     }
-
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    // parse the octal digits
+    long result = 0L;
+    for (int i = start; i < end; i++) {
+        byte b = buffer[i];
+        if (b < '0' || b > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, i, b));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (b - '0');
     }
-
     return result;
 }
\ No newline at end of file
