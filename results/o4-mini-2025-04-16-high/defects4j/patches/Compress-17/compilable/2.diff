diff --git a/tmp/b626efe9-47ca-4453-939b-2c0a764c603f_buggy.java b/tmp/6af58f00-8eae-4e81-9d91-f147ade8b95e_fixed.java
index 3b9a3c0..1ef6413 100644
--- a/tmp/b626efe9-47ca-4453-939b-2c0a764c603f_buggy.java
+++ b/tmp/6af58f00-8eae-4e81-9d91-f147ade8b95e_fixed.java
@@ -1,71 +1,53 @@
 /**
-     * Parse an octal string from a buffer.
+ * Parse an octal (or base-256) number from a buffer.
  *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
+ * Leading spaces or NULs are ignored. Trailing spaces or NULs are ignored.
+ * If the first byte has its high bit set, the field is treated as
+ * a two's-complement big-endian binary number.
+ * If the field is entirely NULs, returns 0.
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @return The long value of the octal or binary string.
+ * @throws IllegalArgumentException if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
+    int start = offset;
+    int end = offset + length;
 
-        if (buffer[start] == 0) {
-            return 0L;
+    // Detect base-256 (binary) format: high bit set in first byte
+    if ((buffer[start] & 0x80) != 0) {
+        long val = 0;
+        for (int i = start; i < end; i++) {
+            val = (val << 8) | (buffer[i] & 0xFF);
+        }
+        // sign-extend to 64 bits
+        int bits = (end - start) * 8;
+        val = (val << (64 - bits)) >> (64 - bits);
+        return val;
     }
 
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    // ASCII octal: skip leading NULs and spaces
+    while (start < end && (buffer[start] == 0 || buffer[start] == ' ')) {
         start++;
-            } else {
-                break;
     }
-        }
-
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+    // skip trailing NULs and spaces
+    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
         end--;
     }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    long result = 0;
+    for (int i = start; i < end; i++) {
+        byte b = buffer[i];
+        if (b < '0' || b > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, i, b));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (b - '0');
     }
-
     return result;
 }
\ No newline at end of file
