diff --git a/tmp/0e2bc8e9-acd9-459d-8463-b7aa6d743672_buggy.java b/tmp/d8ec21e6-de7c-495e-83d9-8b117e906025_fixed.java
index 3b9a3c0..7f8b2cb 100644
--- a/tmp/0e2bc8e9-acd9-459d-8463-b7aa6d743672_buggy.java
+++ b/tmp/d8ec21e6-de7c-495e-83d9-8b117e906025_fixed.java
@@ -1,71 +1,53 @@
 /**
  * Parse an octal string from a buffer.
  *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
+ * <p>Leading spaces or NULs are ignored.
+ * The buffer must contain a trailing space or NUL.</p>
  *
-     * <p>The input buffer is allowed to contain all NULs,
+ * <p>The input buffer is allowed to contain all NULs or spaces,
  * in which case the method returns 0L
  * (this allows for missing fields).</p>
  *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
-
-        if (buffer[start] == 0) {
-            return 0L;
+    // Must have a trailing NUL or space
+    final int lastIdx = offset + length - 1;
+    final byte lastByte = buffer[lastIdx];
+    if (lastByte != 0 && lastByte != ' ') {
+        throw new IllegalArgumentException(
+            exceptionMessage(buffer, offset, length, lastIdx, lastByte));
     }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    // Skip leading NULs and spaces
+    int start = offset;
+    int end = lastIdx;
+    while (start <= end && (buffer[start] == 0 || buffer[start] == ' ')) {
         start++;
-            } else {
-                break;
     }
+    // If nothing left, it's zero
+    if (start > end) {
+        return 0L;
     }
-
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+    // Skip trailing NULs and spaces
+    while (end >= start && (buffer[end] == 0 || buffer[end] == ' ')) {
         end--;
     }
-
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    // Parse the octal digits
+    long result = 0L;
+    for (int i = start; i <= end; i++) {
+        byte b = buffer[i];
+        if (b < '0' || b > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, i, b));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (b - '0');
     }
-
     return result;
 }
\ No newline at end of file
