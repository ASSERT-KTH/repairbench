diff --git a/tmp/ea58c107-59d4-4dfa-aa6a-2ff645c29f43_buggy.java b/tmp/c1bd3c36-af59-44e4-b89d-e67f670f9324_fixed.java
index 875b31b..30b4783 100644
--- a/tmp/ea58c107-59d4-4dfa-aa6a-2ff645c29f43_buggy.java
+++ b/tmp/c1bd3c36-af59-44e4-b89d-e67f670f9324_fixed.java
@@ -1,54 +1,52 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb               The StringBuffer to place the rendered text into.
  * @param width            The number of characters to display per line
  * @param nextLineTabStop  The position on the next line for the first tab.
  * @param text             The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+protected StringBuffer renderWrappedText(StringBuffer sb,
+                                         int width,
+                                         int nextLineTabStop,
+                                         String text)
 {
+    // first wrap: no indent accounted in 'startPos'
     int pos = findWrapPos(text, width, 0);
-
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
+
+    // append first chunk
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+    // guard against infinite loop if indent >= width
     if (nextLineTabStop >= width)
     {
-            // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
 
+    // subsequent lines: include indent in the wrap calculation
     while (true)
     {
+        // trim leading whitespace then re‐prefix with padding
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
 
+        // now wrap text taking the indent into account
+        pos = findWrapPos(text, width, nextLineTabStop);
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
+        // append next chunk
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
