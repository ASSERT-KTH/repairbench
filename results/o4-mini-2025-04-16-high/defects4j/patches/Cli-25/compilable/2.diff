diff --git a/tmp/bc669d19-77db-4b2e-8826-98a4c756b036_buggy.java b/tmp/7952b238-1fad-4956-8e4b-ec72611232bd_fixed.java
index 875b31b..75dfc1c 100644
--- a/tmp/bc669d19-77db-4b2e-8826-98a4c756b036_buggy.java
+++ b/tmp/7952b238-1fad-4956-8e4b-ec72611232bd_fixed.java
@@ -1,54 +1,40 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
+    // first wrap/pass: break at the first legal wrap position
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
+    // avoid infinite loop if indent >= width
+    if (nextLineTabStop >= width) {
         nextLineTabStop = width - 1;
     }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines get this padding
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
+    // now wrap each subsequent line, respecting the indent
+    while (true) {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        // NOTE: use nextLineTabStop as the start position so we don't break
+        // on the padding itself
+        pos = findWrapPos(text, width, nextLineTabStop);
 
-            if (pos == -1)
-            {
+        if (pos == -1) {
+            // no further wrap point -- just append the rest
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // if the only whitespace found is at the very start of the content
+        // (i.e. no real break in the allowed region), force-wrap at width
+        if (text.length() > width && pos == nextLineTabStop) {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
