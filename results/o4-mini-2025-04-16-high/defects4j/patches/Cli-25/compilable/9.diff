diff --git a/tmp/a77054ec-bf9c-44bc-9197-62968431b22f_buggy.java b/tmp/0b1a942f-c339-4974-8c0b-5b7840f47432_fixed.java
index 875b31b..fd42dd8 100644
--- a/tmp/a77054ec-bf9c-44bc-9197-62968431b22f_buggy.java
+++ b/tmp/0b1a942f-c339-4974-8c0b-5b7840f47432_fixed.java
@@ -1,54 +1,38 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
-    {
+                                         int nextLineTabStop, String text) {
+    // first, find where to wrap the very first line
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
+        // no wrap needed
         sb.append(rtrim(text));
-
         return sb;
     }
+
+    // wrap first line
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
+    // ensure the indent for following lines is valid
+    if (nextLineTabStop >= width) {
         nextLineTabStop = width - 1;
     }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
+    // prepare the remainder of the text
+    String remaining = text.substring(pos).trim();
 
+    // wrap subsequent lines with the given indent
+    while (true) {
+        // compute wrap position in the remainder, accounting for indent
+        int wrapPos = findWrapPos(remaining, width - nextLineTabStop, 0);
+        if (wrapPos == -1) {
+            // no further wrap needed
+            sb.append(padding).append(rtrim(remaining));
             return sb;
         }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // wrap and append
+        sb.append(padding)
+          .append(rtrim(remaining.substring(0, wrapPos)))
+          .append(defaultNewLine);
+        remaining = remaining.substring(wrapPos).trim();
     }
 }
\ No newline at end of file
