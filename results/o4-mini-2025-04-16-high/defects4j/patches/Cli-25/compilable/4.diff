diff --git a/tmp/c7e87596-1c7f-4972-b1fa-467ca06250a5_buggy.java b/tmp/b7f1eca9-d698-4913-b58f-b8c05b473a1c_fixed.java
index 875b31b..17f6dd8 100644
--- a/tmp/c7e87596-1c7f-4972-b1fa-467ca06250a5_buggy.java
+++ b/tmp/b7f1eca9-d698-4913-b58f-b8c05b473a1c_fixed.java
@@ -1,54 +1,63 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb               The StringBuffer to place the rendered text into.
  * @param width            The number of characters to display per line
  * @param nextLineTabStop  The position on the next line for the first tab.
  * @param text             The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+protected StringBuffer renderWrappedText(StringBuffer sb,
+                                         int width,
+                                         int nextLineTabStop,
+                                         String text)
 {
+    // first wrap‐point
     int pos = findWrapPos(text, width, 0);
-
     if (pos == -1)
     {
+        // no wrap needed
         sb.append(rtrim(text));
-
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    // append first segment
+    sb.append(rtrim(text.substring(0, pos)))
+      .append(defaultNewLine);
 
+    // if the requested indent is wider than the console,
+    // disable the indent rather than push it off the edge
     if (nextLineTabStop >= width)
     {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
+        nextLineTabStop = 0;
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // build the padding string for subsequent lines
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+    // now wrap the rest
+    String remainder = text.substring(pos).trim();
+    while (remainder.length() > 0)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        // attempt to find a wrap position after indent
+        int availWidth = width - nextLineTabStop;
+        int wrapPos = findWrapPos(remainder, availWidth, 0);
 
-            if (pos == -1)
+        if (wrapPos == -1 || wrapPos > availWidth)
         {
-                sb.append(text);
+            // no natural break; chunk at the edge
+            wrapPos = availWidth;
+        }
+
+        // append the next line, with padding
+        sb.append(padding)
+          .append(rtrim(remainder.substring(0, wrapPos)))
+          .append(defaultNewLine);
+
+        // advance & trim leading whitespace
+        remainder = remainder.substring(wrapPos).trim();
+    }
 
     return sb;
 }
\ No newline at end of file
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
