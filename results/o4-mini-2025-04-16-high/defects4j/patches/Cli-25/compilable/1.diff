diff --git a/tmp/d3c7f479-3dec-4e1e-a946-685a9e7b04b7_buggy.java b/tmp/92f8287b-e2c0-4a8f-9f55-b84cfb643f89_fixed.java
index 875b31b..24a81f8 100644
--- a/tmp/d3c7f479-3dec-4e1e-a946-685a9e7b04b7_buggy.java
+++ b/tmp/92f8287b-e2c0-4a8f-9f55-b84cfb643f89_fixed.java
@@ -1,54 +1,54 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+    // nothing to wrap, just trim trailing spaces and return
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+
+    // append up to the wrap point
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
+    // if caller didn't supply an indent (e.g. usage), use the wrap offset
+    if (nextLineTabStop <= 0) {
+        nextLineTabStop = pos;
+    }
+    // guard against indent >= width to avoid an infinite loop
+    if (nextLineTabStop >= width) {
         nextLineTabStop = width - 1;
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
+    // now wrap the rest, always padding each new line
+    while (true) {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
-            {
+        // last chunk
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // catch the pathological case where the only break is in the padding area
+        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
