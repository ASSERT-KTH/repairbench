diff --git a/tmp/45af12f8-afac-4570-8b8e-c6a916151ebd_buggy.java b/tmp/5b8f0d97-420c-45ad-9401-f08c1a1d1dec_fixed.java
index 875b31b..22dca72 100644
--- a/tmp/45af12f8-afac-4570-8b8e-c6a916151ebd_buggy.java
+++ b/tmp/5b8f0d97-420c-45ad-9401-f08c1a1d1dec_fixed.java
@@ -1,54 +1,48 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
-    {
+                                         int nextLineTabStop, String text) {
+    // first, see if we need to wrap at all
     int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+    // append the first chunk and a newline
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
+    // guard against an indent that is too large
+    if (nextLineTabStop >= width) {
         nextLineTabStop = width - 1;
     }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // prepare the padding for subsequent lines
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
+    // now wrap the remaining text
+    text = text.substring(pos).trim();
+    while (text.length() > 0) {
+        // wrap at width minus the indent
+        pos = findWrapPos(text, width - nextLineTabStop, 0);
+        if (pos == -1) {
+            // no more wraps, append the rest
+            sb.append(padding).append(text);
             return sb;
         }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // append a chunk and a newline
+        sb.append(padding)
+          .append(rtrim(text.substring(0, pos)))
+          .append(defaultNewLine);
+        // trim off the part we just appended
+        text = text.substring(pos).trim();
     }
+    return sb;
 }
\ No newline at end of file
