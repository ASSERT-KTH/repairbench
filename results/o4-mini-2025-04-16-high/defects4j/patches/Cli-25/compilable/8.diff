diff --git a/tmp/57b8c536-0767-49e7-a085-4e8777730a16_buggy.java b/tmp/334034db-274a-4747-87da-015d5bf320a3_fixed.java
index 875b31b..4e6986a 100644
--- a/tmp/57b8c536-0767-49e7-a085-4e8777730a16_buggy.java
+++ b/tmp/334034db-274a-4747-87da-015d5bf320a3_fixed.java
@@ -1,54 +1,52 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
+    // first wrap pass (no indent)
     int pos = findWrapPos(text, width, 0);
-
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
+
+    // append the first chunk and newline
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+    // guard against nextLineTabStop >= width
     if (nextLineTabStop >= width)
     {
-            // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // create padding for subsequent lines
     final String padding = createPadding(nextLineTabStop);
 
+    // subsequent lines: prepend padding and wrap relative to that indent
     while (true)
     {
+        // build the next line to wrap, trimming leading whitespace
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
 
+        // now wrap, skipping over the padding
+        pos = findWrapPos(text, width, nextLineTabStop);
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
+        // append the next chunk and newline
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
