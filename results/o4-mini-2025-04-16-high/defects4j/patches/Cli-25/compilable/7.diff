diff --git a/tmp/41848262-03fa-487c-b343-7174e85625c2_buggy.java b/tmp/e6c6faf5-a321-4439-ba1c-87939d7a2163_fixed.java
index 875b31b..49dfadc 100644
--- a/tmp/41848262-03fa-487c-b343-7174e85625c2_buggy.java
+++ b/tmp/e6c6faf5-a321-4439-ba1c-87939d7a2163_fixed.java
@@ -1,54 +1,58 @@
 /**
-     * Render the specified text and return the rendered Options
+ * Render the specified text and return the rendered contents
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
+ * @param width The number of characters to display per line.
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
-     * @return the StringBuffer with the rendered Options contents.
+ * @return the StringBuffer with the rendered contents.
  */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+protected StringBuffer renderWrappedText(StringBuffer sb,
+                                         int width,
+                                         int nextLineTabStop,
+                                         String text)
 {
+    // first wrap position (no indent yet)
     int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+    // if no wrapping is required, just append the text
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
+    // append the first line and a newline
+    sb.append(rtrim(text.substring(0, pos)))
+      .append(defaultNewLine);
+
+    // guard against infinite loops
+    if (nextLineTabStop >= width) {
         nextLineTabStop = width - 1;
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // prepare the padding for subsequent lines
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
+    // now wrap the rest of the text
+    while (true) {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        // key change: skip the indent when looking for wrap
+        pos = findWrapPos(text, width, nextLineTabStop);
 
-            if (pos == -1)
-            {
+        // if the remainder is short enough, just append it
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        // catch cases where findWrapPos hits inside the pad
+        if ((text.length() > width) && (pos <= nextLineTabStop)) {
             pos = width;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(text.substring(0, pos)))
+          .append(defaultNewLine);
     }
 }
\ No newline at end of file
