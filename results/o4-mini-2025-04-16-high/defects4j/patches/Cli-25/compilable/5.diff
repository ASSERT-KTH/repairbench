diff --git a/tmp/9345e047-243b-48c5-aae5-b9d1a17c0795_buggy.java b/tmp/5159a771-edab-485c-aae9-6f40b830a75f_fixed.java
index 875b31b..533ff37 100644
--- a/tmp/9345e047-243b-48c5-aae5-b9d1a17c0795_buggy.java
+++ b/tmp/5159a771-edab-485c-aae9-6f40b830a75f_fixed.java
@@ -1,54 +1,58 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
+    // determine how much of 'text' will fit on the first line
     int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+    // if there's no natural break point but the text is longer than the width,
+    // force a break at 'width'; otherwise just append and return
+    if (pos == -1) {
+        if (text.length() > width) {
+            pos = width;
+        } else {
             sb.append(rtrim(text));
-
             return sb;
         }
+    }
+
+    // append the first chunk
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
+    // guard against indent >= width (to avoid an infinite loop)
+    if (nextLineTabStop >= width) {
         nextLineTabStop = width - 1;
     }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+    // handle all subsequent lines
+    while (true) {
+        // trim off the chunk we've just printed
+        text = text.substring(pos).trim();
+        if (text.length() == 0) {
+            return sb;
+        }
 
-            if (pos == -1)
-            {
+        // re‐prefix with the padding for the next line
+        text = padding + text;
+
+        // find the wrap position, skipping over the padding region
+        pos = findWrapPos(text, width, nextLineTabStop);
+
+        // if again there's no natural break but the line is too long,
+        // force a break; otherwise append the rest and exit
+        if (pos == -1) {
+            if (text.length() > width) {
+                pos = width;
+                sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+                // continue looping to handle any further remainder
+                continue;
+            } else {
                 sb.append(text);
-
                 return sb;
             }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
         }
 
+        // append the next chunk and repeat
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
