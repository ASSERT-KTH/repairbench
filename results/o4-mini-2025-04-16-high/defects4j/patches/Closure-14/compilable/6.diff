diff --git a/tmp/bac208d7-cd8f-4003-a959-4bcaa1194898_buggy.java b/tmp/43038a7a-47cc-4c88-8fbb-dab958063d9a_fixed.java
index bf9bb88..1f1d9d6 100644
--- a/tmp/bac208d7-cd8f-4003-a959-4bcaa1194898_buggy.java
+++ b/tmp/43038a7a-47cc-4c88-8fbb-dab958063d9a_fixed.java
@@ -1,108 +1,102 @@
 /**
  * Computes the follow() node of a given node and its parent. There is a side
  * effect when calling this function. If this function computed an edge that
  * exists a FINALLY, it'll attempt to connect the fromNode to the outer
  * FINALLY according to the finallyMap.
  *
  * @param fromNode The original source node since {@code node} is changed
  *        during recursion.
  * @param node The node that follow() should compute.
  */
 private static Node computeFollowNode(
     Node fromNode, Node node, ControlFlowAnalysis cfa) {
-    /*
-     * This is the case where:
-     *
-     * 1. Parent is null implies that we are transferring control to the end of
-     * the script.
-     *
-     * 2. Parent is a function implies that we are transferring control back to
-     * the caller of the function.
-     *
-     * 3. If the node is a return statement, we should also transfer control
-     * back to the caller of the function.
-     *
-     * 4. If the node is root then we have reached the end of what we have been
-     * asked to traverse.
-     *
-     * In all cases we should transfer control to a "symbolic return" node.
-     * This will make life easier for DFAs.
-     */
   Node parent = node.getParent();
   if (parent == null || parent.isFunction() ||
       (cfa != null && node == cfa.root)) {
     return null;
   }
 
-    // If we are just before a IF/WHILE/DO/FOR:
   switch (parent.getType()) {
-      // The follow() of any of the path from IF would be what follows IF.
     case Token.IF:
       return computeFollowNode(fromNode, parent, cfa);
+
     case Token.CASE:
     case Token.DEFAULT_CASE:
-        // After the body of a CASE, the control goes to the body of the next
-        // case, without having to go to the case condition.
       if (parent.getNext() != null) {
         if (parent.getNext().isCase()) {
           return parent.getNext().getFirstChild().getNext();
         } else if (parent.getNext().isDefaultCase()) {
           return parent.getNext().getFirstChild();
         } else {
           Preconditions.checkState(false, "Not reachable");
         }
       } else {
         return computeFollowNode(fromNode, parent, cfa);
       }
       break;
+
     case Token.FOR:
       if (NodeUtil.isForIn(parent)) {
         return parent;
       } else {
         return parent.getFirstChild().getNext().getNext();
       }
+
     case Token.WHILE:
     case Token.DO:
       return parent;
+
     case Token.TRY:
-        // If we are coming out of the TRY block...
+      // Exiting the TRY block normally or abruptly:
       if (parent.getFirstChild() == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
+        if (NodeUtil.hasFinally(parent)) {
+          // Any abrupt exit from the try should first go through all associated finally blocks.
+          if (cfa != null) {
+            for (Node finallyNode : cfa.finallyMap.get(parent)) {
+              // normal/branching exits use UNCOND here
+              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
+            }
+          }
           return computeFallThrough(parent.getLastChild());
-          } else { // and have no FINALLY.
+        } else {
           return computeFollowNode(fromNode, parent, cfa);
         }
-        // CATCH block.
+
+      // Exiting the CATCH block:
       } else if (NodeUtil.getCatchBlock(parent) == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
+        if (NodeUtil.hasFinally(parent)) {
+          if (cfa != null) {
+            for (Node finallyNode : cfa.finallyMap.get(parent)) {
+              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
+            }
+          }
           return computeFallThrough(node.getNext());
         } else {
           return computeFollowNode(fromNode, parent, cfa);
         }
-        // If we are coming out of the FINALLY block...
+
+      // Exiting the FINALLY block:
       } else if (parent.getLastChild() == node) {
         if (cfa != null) {
           for (Node finallyNode : cfa.finallyMap.get(parent)) {
-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
+            // propagation of an outstanding exceptional/abrupt exit
+            cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);
           }
         }
         return computeFollowNode(fromNode, parent, cfa);
       }
+      break;
   }
 
-    // Now that we are done with the special cases follow should be its
-    // immediate sibling, unless its sibling is a function
+  // Default: fall through to the next sibling (skipping function declarations).
   Node nextSibling = node.getNext();
-
-    // Skip function declarations because control doesn't get pass into it.
   while (nextSibling != null && nextSibling.isFunction()) {
     nextSibling = nextSibling.getNext();
   }
-
   if (nextSibling != null) {
     return computeFallThrough(nextSibling);
   } else {
-      // If there are no more siblings, control is transferred up the AST.
+    // No more siblings, bubble up.
     return computeFollowNode(fromNode, parent, cfa);
   }
 }
\ No newline at end of file
