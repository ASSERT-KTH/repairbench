diff --git a/tmp/ba0c5994-47b2-4439-8905-b855eaa6c22a_buggy.java b/tmp/baa5060e-839d-4d4f-887e-33bac17bea8d_fixed.java
index bf9bb88..223c049 100644
--- a/tmp/ba0c5994-47b2-4439-8905-b855eaa6c22a_buggy.java
+++ b/tmp/baa5060e-839d-4d4f-887e-33bac17bea8d_fixed.java
@@ -1,108 +1,137 @@
   /**
    * Computes the follow() node of a given node and its parent. There is a side
    * effect when calling this function. If this function computed an edge that
    * exists a FINALLY, it'll attempt to connect the fromNode to the outer
    * FINALLY according to the finallyMap.
    *
    * @param fromNode The original source node since {@code node} is changed
    *        during recursion.
    * @param node The node that follow() should compute.
    */
   private static Node computeFollowNode(
       Node fromNode, Node node, ControlFlowAnalysis cfa) {
-    /*
-     * This is the case where:
-     *
-     * 1. Parent is null implies that we are transferring control to the end of
-     * the script.
-     *
-     * 2. Parent is a function implies that we are transferring control back to
-     * the caller of the function.
-     *
-     * 3. If the node is a return statement, we should also transfer control
-     * back to the caller of the function.
-     *
-     * 4. If the node is root then we have reached the end of what we have been
-     * asked to traverse.
-     *
-     * In all cases we should transfer control to a "symbolic return" node.
-     * This will make life easier for DFAs.
-     */
+    //
+    // FIRST:  if this node aborts/changes control flow (return/throw/break/continue),
+    //         we must first wire it into any active finally blocks.
+    //
+    if (cfa != null) {
+      int t = node.getType();
+      if (t == Token.RETURN
+          || t == Token.THROW
+          || t == Token.BREAK
+          || t == Token.CONTINUE) {
+        // find the nearest enclosing TRY-with-FINALLY
+        Node ancestor = node.getParent();
+        while (ancestor != null) {
+          if (ancestor.getType() == Token.TRY && NodeUtil.hasFinally(ancestor)) {
+            Node finallyBlock = ancestor.getLastChild();
+            // throws go in the ON_EX channel, everything else is UNCOND
+            Branch br = (t == Token.THROW) ? Branch.ON_EX : Branch.UNCOND;
+            cfa.createEdge(fromNode, br, finallyBlock);
+            break;
+          }
+          ancestor = ancestor.getParent();
+        }
+      }
+    }
+
+    //
+    // SECOND:  the early exits: if we've hit the end of the script,
+    //          a function boundary, or a return itself, we stop.
+    //
     Node parent = node.getParent();
-    if (parent == null || parent.isFunction() ||
-        (cfa != null && node == cfa.root)) {
+    if (parent == null
+        || parent.isFunction()
+        || node.isReturn()
+        || (cfa != null && node == cfa.root)) {
       return null;
     }
 
-    // If we are just before a IF/WHILE/DO/FOR:
+    //
+    // THIRD:  special AST cases (if, loops, switch, try/catch/finally)
+    //
     switch (parent.getType()) {
-      // The follow() of any of the path from IF would be what follows IF.
       case Token.IF:
+        // both then- and else-branches rejoin at the same follow
         return computeFollowNode(fromNode, parent, cfa);
+
       case Token.CASE:
       case Token.DEFAULT_CASE:
-        // After the body of a CASE, the control goes to the body of the next
-        // case, without having to go to the case condition.
+        // after one case, fall into the next case's body
         if (parent.getNext() != null) {
           if (parent.getNext().isCase()) {
             return parent.getNext().getFirstChild().getNext();
           } else if (parent.getNext().isDefaultCase()) {
             return parent.getNext().getFirstChild();
           } else {
-            Preconditions.checkState(false, "Not reachable");
+            Preconditions.checkState(false, "Unreachable switch case");
           }
         } else {
           return computeFollowNode(fromNode, parent, cfa);
         }
         break;
+
       case Token.FOR:
         if (NodeUtil.isForIn(parent)) {
+          // for-in loops re-test the same node
           return parent;
         } else {
+          // for(init; cond; inc)  -> start at the increment
           return parent.getFirstChild().getNext().getNext();
         }
+
       case Token.WHILE:
       case Token.DO:
+        // loops go back to the condition
         return parent;
+
       case Token.TRY:
-        // If we are coming out of the TRY block...
+        // three sub‐cases: exiting try‐block, exiting catch, exiting finally
+        // 1) out of the "try { … }"
         if (parent.getFirstChild() == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
+          if (NodeUtil.hasFinally(parent)) {
+            // go into the finally block
             return computeFallThrough(parent.getLastChild());
-          } else { // and have no FINALLY.
+          } else {
             return computeFollowNode(fromNode, parent, cfa);
           }
-        // CATCH block.
+
+        // 2) out of the "catch (...) { … }"
         } else if (NodeUtil.getCatchBlock(parent) == node) {
-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
+          if (NodeUtil.hasFinally(parent)) {
+            // catch falls into finally
             return computeFallThrough(node.getNext());
           } else {
             return computeFollowNode(fromNode, parent, cfa);
           }
-        // If we are coming out of the FINALLY block...
+
+        // 3) out of the "finally { … }"
         } else if (parent.getLastChild() == node) {
+          // chain on any outer finally blocks
           if (cfa != null) {
-            for (Node finallyNode : cfa.finallyMap.get(parent)) {
-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
+            for (Node fn : cfa.finallyMap.get(parent)) {
+              cfa.createEdge(fromNode, Branch.UNCOND, fn);
             }
           }
+          // and then resume after the try
           return computeFollowNode(fromNode, parent, cfa);
         }
+        break;
     }
 
-    // Now that we are done with the special cases follow should be its
-    // immediate sibling, unless its sibling is a function
-    Node nextSibling = node.getNext();
-
-    // Skip function declarations because control doesn't get pass into it.
-    while (nextSibling != null && nextSibling.isFunction()) {
-      nextSibling = nextSibling.getNext();
+    //
+    // FOURTH:  default: fall to the next sibling (skipping function decls)
+    //
+    Node next = node.getNext();
+    while (next != null && next.isFunction()) {
+      next = next.getNext();
+    }
+    if (next != null) {
+      return computeFallThrough(next);
     }
 
-    if (nextSibling != null) {
-      return computeFallThrough(nextSibling);
-    } else {
-      // If there are no more siblings, control is transferred up the AST.
+    //
+    // FIFTH:  no more siblings: bubble up the tree
+    //
     return computeFollowNode(fromNode, parent, cfa);
   }
\ No newline at end of file
-  }
