diff --git a/tmp/ba5dd827-7ae8-47ce-8154-3484e153c684_buggy.java b/tmp/cd26e3f0-9ab2-47f3-9df2-6315fd7ae77d_fixed.java
index fe2e012..4ae236c 100644
--- a/tmp/ba5dd827-7ae8-47ce-8154-3484e153c684_buggy.java
+++ b/tmp/cd26e3f0-9ab2-47f3-9df2-6315fd7ae77d_fixed.java
@@ -1,140 +1,154 @@
 /** {@inheritDoc} */
 @Override
 public void integrate(final ExpandableStatefulODE equations, final double t)
     throws MathIllegalStateException, MathIllegalArgumentException {
 
   sanityChecks(equations, t);
   setEquations(equations);
   final boolean forward = t > equations.getTime();
 
   // create some internal working arrays
   final double[] y0  = equations.getCompleteState();
   final double[] y = y0.clone();
   final int stages = c.length + 1;
   final double[][] yDotK = new double[stages][y.length];
   final double[] yTmp    = y0.clone();
   final double[] yDotTmp = new double[y.length];
 
   // set up an interpolator sharing the integrator arrays
-    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
+  final RungeKuttaStepInterpolator interpolator =
+      (RungeKuttaStepInterpolator) prototype.copy();
   interpolator.reinitialize(this, yTmp, yDotK, forward,
                             equations.getPrimaryMapper(), equations.getSecondaryMappers());
   interpolator.storeTime(equations.getTime());
 
   // set up integration control objects
   stepStart         = equations.getTime();
   double  hNew      = 0;
   boolean firstTime = true;
   initIntegration(equations.getTime(), y0, t);
 
   // main integration loop
   isLastStep = false;
   do {
 
     interpolator.shift();
 
     // iterate over step size, ensuring local normalized error is smaller than 1
     double error = 10;
     while (error >= 1.0) {
 
       if (firstTime || !fsal) {
         // first stage
         computeDerivatives(stepStart, y, yDotK[0]);
       }
 
       if (firstTime) {
+        // --- INITIAL STEP SIZE ESTIMATE ---
         final double[] scale = new double[mainSetDimension];
         if (vecAbsoluteTolerance == null) {
           for (int i = 0; i < scale.length; ++i) {
             scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
           }
         } else {
           for (int i = 0; i < scale.length; ++i) {
             scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);
           }
         }
+        // compute an initial h
         hNew = initializeStep(forward, getOrder(), scale,
                               stepStart, y, yDotK[0], yTmp, yDotK[1]);
+        // clamp the first step to not overshoot the target
+        final double maxH = t - stepStart;
+        if (!Double.isFinite(hNew) ||
+            (forward  && hNew >  maxH) ||
+            (!forward && hNew <  maxH)) {
+          hNew = maxH;
+        }
         firstTime = false;
       }
 
       stepSize = hNew;
 
       // next stages
       for (int k = 1; k < stages; ++k) {
 
         for (int j = 0; j < y0.length; ++j) {
           double sum = a[k-1][0] * yDotK[0][j];
           for (int l = 1; l < k; ++l) {
             sum += a[k-1][l] * yDotK[l][j];
           }
           yTmp[j] = y[j] + stepSize * sum;
         }
 
         computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
 
       }
 
       // estimate the state at the end of the step
       for (int j = 0; j < y0.length; ++j) {
         double sum    = b[0] * yDotK[0][j];
         for (int l = 1; l < stages; ++l) {
           sum    += b[l] * yDotK[l][j];
         }
         yTmp[j] = y[j] + stepSize * sum;
       }
 
       // estimate the error at the end of the step
       error = estimateError(yDotK, y, yTmp, stepSize);
       if (error >= 1.0) {
         // reject the step and attempt to reduce error by stepsize control
         final double factor =
             FastMath.min(maxGrowth,
-                           FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+                         FastMath.max(minReduction,
+                                      safety * FastMath.pow(error, exp)));
         hNew = filterStep(stepSize * factor, forward, false);
       }
 
     }
 
     // local error is small enough: accept the step, trigger events and step handlers
     interpolator.storeTime(stepStart + stepSize);
     System.arraycopy(yTmp, 0, y, 0, y0.length);
     System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);
     stepStart = acceptStep(interpolator, y, yDotTmp, t);
     System.arraycopy(y, 0, yTmp, 0, y.length);
 
     if (!isLastStep) {
 
       // prepare next step
       interpolator.storeTime(stepStart);
 
       if (fsal) {
         // save the last evaluation for the next step
         System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);
       }
 
       // stepsize control for next step
       final double factor =
-              FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+          FastMath.min(maxGrowth,
+                       FastMath.max(minReduction,
+                                    safety * FastMath.pow(error, exp)));
       final double  scaledH    = stepSize * factor;
       final double  nextT      = stepStart + scaledH;
       final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
       hNew = filterStep(scaledH, forward, nextIsLast);
 
       final double  filteredNextT      = stepStart + hNew;
-          final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
+      final boolean filteredNextIsLast = forward ? (filteredNextT >= t)
+                                                 : (filteredNextT <= t);
       if (filteredNextIsLast) {
         hNew = t - stepStart;
       }
 
     }
 
   } while (!isLastStep);
 
   // dispatch results
   equations.setTime(stepStart);
   equations.setCompleteState(y);
 
   resetInternalState();
 
 }
\ No newline at end of file
