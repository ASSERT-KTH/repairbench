diff --git a/tmp/f7200a0f-cffc-43e2-a92d-18fbcd202f34_buggy.java b/tmp/8efcb109-1b4a-421a-8396-6ee3c6a6c9d5_fixed.java
index 42c5923..b05fe08 100644
--- a/tmp/f7200a0f-cffc-43e2-a92d-18fbcd202f34_buggy.java
+++ b/tmp/8efcb109-1b4a-421a-8396-6ee3c6a6c9d5_fixed.java
@@ -1,89 +1,102 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
 public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+    // Save the position before attempting an improper‐fraction parse
+    int saveIndex = pos.getIndex();
+    // 1) Try the superclass (improper fraction) parser first
     Fraction ret = super.parse(source, pos);
     if (ret != null) {
+        // Verify that any minus sign in the input was only at the very beginning
+        String segment = source.substring(saveIndex, pos.getIndex());
+        String trimmed = segment.trim();
+        int minusCount = 0;
+        for (int i = 0; i < segment.length(); i++) {
+            if (segment.charAt(i) == '-') {
+                minusCount++;
+            }
+        }
+        // If there's more than one '-' or a single '-' not at the front, reject
+        if (minusCount > 1 || (minusCount == 1 && !trimmed.startsWith("-"))) {
+            pos.setIndex(saveIndex);
+            // find the offending '-' position
+            int minusPosInSegment;
+            if (minusCount > 1) {
+                int first = segment.indexOf('-');
+                minusPosInSegment = segment.indexOf('-', first + 1);
+            } else {
+                minusPosInSegment = segment.indexOf('-');
+            }
+            pos.setErrorIndex(saveIndex + minusPosInSegment);
+            return null;
+        }
+        // otherwise accept the improper fraction
         return ret;
     }
 
+    // 2) Fall back to parsing a proper fraction form: "whole numerator/denominator"
     int initialIndex = pos.getIndex();
 
-        // parse whitespace
+    // skip leading whitespace
     parseAndIgnoreWhitespace(source, pos);
 
-        // parse whole
+    // parse the whole‐number part
     Number whole = getWholeFormat().parse(source, pos);
     if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
-        // parse whitespace
+    // skip whitespace
     parseAndIgnoreWhitespace(source, pos);
 
-        // parse numerator
+    // parse the numerator
+    int numStart = pos.getIndex();
     Number num = getNumeratorFormat().parse(source, pos);
     if (num == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
+    // reject a negative numerator (minus must only appear in the whole part)
+    if (num.intValue() < 0) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(numStart);
+        return null;
+    }
 
-            // minus signs should be leading, invalid expression
-
-        // parse '/'
-        int startIndex = pos.getIndex();
+    // parse the '/' separator
+    int slashIndex = pos.getIndex();
     char c = parseNextCharacter(source, pos);
     switch (c) {
     case 0:
-            // no '/'
-            // return num as a fraction
+        // no slash => treat as num/1
         return new Fraction(num.intValue(), 1);
     case '/':
-            // found '/', continue parsing denominator
+        // OK, continue to denominator
         break;
     default:
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
         pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+        pos.setErrorIndex(slashIndex);
         return null;
     }
 
-        // parse whitespace
+    // skip whitespace
     parseAndIgnoreWhitespace(source, pos);
 
-        // parse denominator
+    // parse the denominator
+    int denStart = pos.getIndex();
     Number den = getDenominatorFormat().parse(source, pos);
     if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
+    // reject a negative denominator
+    if (den.intValue() < 0) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(denStart);
+        return null;
+    }
 
-            // minus signs must be leading, invalid
-
+    // build the final Fraction
     int w = whole.intValue();
     int n = num.intValue();
     int d = den.intValue();
     return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
 }
\ No newline at end of file
