diff --git a/tmp/f55c4fbd-3549-4589-b54e-d5093b7d493d_buggy.java b/tmp/7190a0eb-8484-4de3-95e0-a1c3aeb23722_fixed.java
index 42c5923..76e29e0 100644
--- a/tmp/f55c4fbd-3549-4589-b54e-d5093b7d493d_buggy.java
+++ b/tmp/7190a0eb-8484-4de3-95e0-a1c3aeb23722_fixed.java
@@ -1,89 +1,78 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
 public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+    // try to parse an improper fraction first
     Fraction ret = super.parse(source, pos);
     if (ret != null) {
         return ret;
     }
 
     int initialIndex = pos.getIndex();
 
-        // parse whitespace
+    // parse leading whitespace
     parseAndIgnoreWhitespace(source, pos);
 
-        // parse whole
+    // parse whole part
     Number whole = getWholeFormat().parse(source, pos);
     if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
-        // parse whitespace
+    // parse whitespace between whole and numerator
     parseAndIgnoreWhitespace(source, pos);
 
     // parse numerator
+    int numStartIndex = pos.getIndex();
     Number num = getNumeratorFormat().parse(source, pos);
     if (num == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
+    // reject any minus in the numerator
+    if (num.intValue() < 0) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(numStartIndex);
+        return null;
+    }
 
-            // minus signs should be leading, invalid expression
-
-        // parse '/'
-        int startIndex = pos.getIndex();
+    // parse the slash
+    int slashIndex = pos.getIndex();
     char c = parseNextCharacter(source, pos);
     switch (c) {
     case 0:
-            // no '/'
-            // return num as a fraction
+        // no slash â†’ treat as a simple fraction num/1
         return new Fraction(num.intValue(), 1);
     case '/':
-            // found '/', continue parsing denominator
+        // OK, continue to denominator
         break;
     default:
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
+        // invalid character in place of '/'
         pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+        pos.setErrorIndex(slashIndex);
         return null;
     }
 
-        // parse whitespace
+    // parse whitespace between slash and denominator
     parseAndIgnoreWhitespace(source, pos);
 
     // parse denominator
+    int denStartIndex = pos.getIndex();
     Number den = getDenominatorFormat().parse(source, pos);
     if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
+    // reject any minus in the denominator
+    if (den.intValue() < 0) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(denStartIndex);
+        return null;
+    }
 
-            // minus signs must be leading, invalid
-
+    // build the final Fraction: (|whole|*den + num) with the sign of whole
     int w = whole.intValue();
     int n = num.intValue();
     int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+    int sign = MathUtils.sign(w);
+    int numerator = (Math.abs(w) * d + n) * sign;
+    return new Fraction(numerator, d);
 }
\ No newline at end of file
