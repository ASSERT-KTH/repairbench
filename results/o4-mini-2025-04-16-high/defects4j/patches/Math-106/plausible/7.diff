diff --git a/tmp/85c3bfb3-62fd-49ff-8858-fb7ab5a6987a_buggy.java b/tmp/b3c4e254-217b-4f4b-8b21-0c51b24b3d6c_fixed.java
index 42c5923..368c7b2 100644
--- a/tmp/85c3bfb3-62fd-49ff-8858-fb7ab5a6987a_buggy.java
+++ b/tmp/b3c4e254-217b-4f4b-8b21-0c51b24b3d6c_fixed.java
@@ -1,89 +1,77 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
+@Override
 public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+    // first try improper fraction or integer
     Fraction ret = super.parse(source, pos);
     if (ret != null) {
         return ret;
     }
 
     int initialIndex = pos.getIndex();
 
-        // parse whitespace
+    // parse leading whitespace
     parseAndIgnoreWhitespace(source, pos);
 
-        // parse whole
+    // parse whole part
     Number whole = getWholeFormat().parse(source, pos);
     if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
-        // parse whitespace
+    // parse whitespace between whole and numerator
     parseAndIgnoreWhitespace(source, pos);
 
-        // parse numerator
+    // remember where numerator starts, then parse numerator
+    int numIndex = pos.getIndex();
     Number num = getNumeratorFormat().parse(source, pos);
     if (num == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
+    // reject minus in numerator
+    if (num.intValue() < 0) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(numIndex);
+        return null;
+    }
 
-            // minus signs should be leading, invalid expression
-
-        // parse '/'
-        int startIndex = pos.getIndex();
+    // parse the '/' or detect end of input
+    int slashIndex = pos.getIndex();
     char c = parseNextCharacter(source, pos);
     switch (c) {
         case 0:
-            // no '/'
-            // return num as a fraction
+            // no slash => treat numerator as integer fraction
             return new Fraction(num.intValue(), 1);
         case '/':
-            // found '/', continue parsing denominator
+            // okay, continue to denominator
             break;
         default:
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
             pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+            pos.setErrorIndex(slashIndex);
             return null;
     }
 
-        // parse whitespace
+    // parse whitespace between slash and denominator
     parseAndIgnoreWhitespace(source, pos);
 
-        // parse denominator
+    // remember where denominator starts, then parse denominator
+    int denIndex = pos.getIndex();
     Number den = getDenominatorFormat().parse(source, pos);
     if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
+    // reject minus in denominator
+    if (den.intValue() < 0) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(denIndex);
+        return null;
+    }
 
-            // minus signs must be leading, invalid
-
+    // build the mixed fraction
     int w = whole.intValue();
     int n = num.intValue();
     int d = den.intValue();
+    // combine whole and fraction parts, preserving the sign of whole
     return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
 }
\ No newline at end of file
