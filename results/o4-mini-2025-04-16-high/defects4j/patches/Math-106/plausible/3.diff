diff --git a/tmp/8ab590f5-2ce1-4864-8e86-3a5fb38e324d_buggy.java b/tmp/a4f4a1a4-c0d8-481a-92f7-a985b7ba3cb6_fixed.java
index 42c5923..7006e33 100644
--- a/tmp/8ab590f5-2ce1-4864-8e86-3a5fb38e324d_buggy.java
+++ b/tmp/a4f4a1a4-c0d8-481a-92f7-a985b7ba3cb6_fixed.java
@@ -1,89 +1,89 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
+    @Override
     public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+        // try to parse improper fraction ("n/d") first
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
-        // parse whitespace
+        // parse optional whitespace
         parseAndIgnoreWhitespace(source, pos);
 
-        // parse whole
+        // parse whole part
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
-        // parse whitespace
+        // parse whitespace between whole and numerator
         parseAndIgnoreWhitespace(source, pos);
         
         // parse numerator
+        int numIndex = pos.getIndex();
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
+        // reject a minus in the numerator
+        if (num.intValue() < 0) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(numIndex);
+            return null;
+        }
         
-            // minus signs should be leading, invalid expression
-
-        // parse '/'
-        int startIndex = pos.getIndex();
+        // parse the slash or bail if none
+        int slashIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0:
-            // no '/'
-            // return num as a fraction
+            // no slash => treat numerator alone as a fraction
             return new Fraction(num.intValue(), 1);
         case '/':
-            // found '/', continue parsing denominator
+            // OK, fall through to parse denominator
             break;
         default:
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
             pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+            pos.setErrorIndex(slashIndex);
             return null;
         }
 
-        // parse whitespace
+        // parse whitespace between slash and denominator
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
+        int denIndex = pos.getIndex();
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
+        // reject a minus in the denominator
+        if (den.intValue() < 0) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(denIndex);
+            return null;
+        }
 
-            // minus signs must be leading, invalid
-
+        // build the final Fraction value
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
+        // mixed fraction: ((|w|*d)+n) with the sign of w
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
\ No newline at end of file
