diff --git a/tmp/46d30346-8ad6-44a7-9499-7381580793b8_buggy.java b/tmp/59f6b18f-95eb-494b-8b7d-4c290c125a86_fixed.java
index e69de29..3cafad9 100644
--- a/tmp/46d30346-8ad6-44a7-9499-7381580793b8_buggy.java
+++ b/tmp/59f6b18f-95eb-494b-8b7d-4c290c125a86_fixed.java
@@ -0,0 +1,61 @@
+// In TypeFactory.java, replace the old _fromClass(...) with this fixed version:
+
+protected JavaType _fromClass(Class<?> raw, TypeBindings bindings,
+                              JavaType superClass, JavaType[] interfaces)
+{
+    // 1) detect recursion first, so that self‐references in generic super‐types
+    //    will bind to a placeholder rather than returning a stale cached type
+    ClassStack.Node entry = _classStack.find(raw);
+    if (entry != null) {
+        // recursive reference: return a placeholder
+        ResolvedRecursiveType placeholder = new ResolvedRecursiveType(raw, bindings);
+        entry.addSelfReference(placeholder);
+        return placeholder;
+    }
+
+    // 2) now check cache; if we already built this exact combination, reuse it
+    SimpleTypeKey key = new SimpleTypeKey(raw, bindings, superClass, interfaces);
+    JavaType cached = _typeCache.get(key);
+    if (cached != null) {
+        return cached;
+    }
+
+    // 3) no recursion and not in cache, so build a fresh type
+    _classStack = _classStack.child(raw);
+    JavaType result;
+    try {
+        // ensure the super‐class is resolved
+        JavaType scls = superClass;
+        if (scls == null) {
+            Class<?> parent = raw.getSuperclass();
+            if (parent != null) {
+                scls = _fromClass(parent, TypeBindings.create(parent, null));
+            }
+        }
+        // ensure any interfaces are resolved
+        JavaType[] ifaces = interfaces;
+        if (ifaces == null) {
+            Class<?>[] rawIfaces = raw.getInterfaces();
+            int len = rawIfaces.length;
+            ifaces = new JavaType[len];
+            for (int i = 0; i < len; i++) {
+                ifaces[i] = _fromClass(rawIfaces[i], TypeBindings.create(rawIfaces[i], null));
+            }
+        }
+        // build the actual SimpleType (or other base type)
+        result = _buildSimple(raw, bindings, scls, ifaces);
+
+        // if any placeholders were created for this raw class, link them now
+        ClassStack.Node resolvedEntry = _classStack.find(raw);
+        if (resolvedEntry != null) {
+            resolvedEntry.resolveSelfReferences(result);
+        }
+    } finally {
+        // pop the stack
+        _classStack = _classStack.parent();
+    }
+
+    // 4) cache for future reuse
+    _typeCache.put(key, result);
+    return result;
+}
\ No newline at end of file
