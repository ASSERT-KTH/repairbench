diff --git a/tmp/4c4bcdb6-4c76-435f-b822-9b702d2bc794_buggy.java b/tmp/475b97b1-2ef7-4c65-88d9-919128426f6f_fixed.java
index e69de29..eb5defd 100644
--- a/tmp/4c4bcdb6-4c76-435f-b822-9b702d2bc794_buggy.java
+++ b/tmp/475b97b1-2ef7-4c65-88d9-919128426f6f_fixed.java
@@ -0,0 +1,54 @@
+// In com.fasterxml.jackson.databind.type.TypeFactory
+
+/**
+ * Internal helper for constructing a class-based JavaType.
+ * This version fixes a bug where non‐generic classes were never wired
+ * with their superclass/interfaces if they came from the cache.
+ */
+protected JavaType _fromClass(Class<?> rawType,
+                              TypeBindings bindings,
+                              JavaType superClass,
+                              JavaType[] superInterfaces,
+                              boolean asStatic)
+{
+    // 1) check cache first to avoid repeated work
+    final Object key = _typeCache.key(rawType, bindings, superClass, superInterfaces, asStatic);
+    JavaType cached = _typeCache.get(key);
+    if (cached != null) {
+        return cached;
+    }
+
+    // 2) if no type parameters, fast‐path simple type
+    if (!bindings.hasTypeVariables()) {
+        // ensure we compute the real superclass if not already passed in
+        JavaType sc = superClass;
+        if (sc == null) {
+            Class<?> parent = rawType.getSuperclass();
+            if (parent != null) {
+                sc = _fromClass(parent,
+                                TypeBindings.create(this, parent),
+                                null, null, asStatic);
+            }
+        }
+        // ensure we compute real interfaces if not already passed in
+        JavaType[] si = superInterfaces;
+        if (si == null) {
+            Class<?>[] ifcs = rawType.getInterfaces();
+            if (ifcs.length > 0) {
+                si = new JavaType[ifcs.length];
+                for (int i = 0; i < ifcs.length; ++i) {
+                    si[i] = _fromClass(ifcs[i],
+                                      TypeBindings.create(this, ifcs[i]),
+                                      null, null, asStatic);
+                }
+            }
+        }
+        // build and cache the resulting simple type
+        JavaType result = new SimpleType(rawType, bindings, sc, si, asStatic);
+        _typeCache.put(key, result);
+        return result;
+    }
+
+    // 3) otherwise handle generic/recursive cases in the full routine
+    return _fromClass2(rawType, bindings, superClass, superInterfaces, asStatic, key);
+}
\ No newline at end of file
