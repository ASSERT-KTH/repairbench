diff --git a/tmp/6d7a4a8a-0203-4c2e-8989-280c135c376e_buggy.java b/tmp/460b2250-1d34-4157-b36c-c58bb6d25be5_fixed.java
index e69de29..b28f5da 100644
--- a/tmp/6d7a4a8a-0203-4c2e-8989-280c135c376e_buggy.java
+++ b/tmp/460b2250-1d34-4157-b36c-c58bb6d25be5_fixed.java
@@ -0,0 +1,68 @@
+// In TypeFactory.java, adjust caching so that cached types are only
+// returned when we're at the root level (i.e. context==null), not
+// when building nested supertypes/interfaces.
+protected JavaType _constructType(Type type,
+                                  ClassStack context,
+                                  JavaType referencedType,
+                                  boolean asStatic)
+{
+    if (type instanceof Class<?>) {
+        Class<?> raw = (Class<?>) type;
+        // remember whether this is the root‐level call
+        boolean root = (context == null);
+
+        // recursion detection
+        if (root) {
+            context = new ClassStack(raw);
+        } else {
+            if (context.contains(raw)) {
+                // self‐reference placeholder
+                ResolvedRecursiveType selfRef = new ResolvedRecursiveType(raw, referencedType);
+                context.addSelfReference(selfRef);
+                return selfRef;
+            }
+            context = context.child(raw);
+        }
+
+        // only pull from the cache if we're at the root; nested
+        // calls for supertypes/interfaces must rebuild
+        ClassKey key = new ClassKey(raw);
+        JavaType cached = _typeCache.get(key);
+        if (cached != null && root) {
+            return cached;
+        }
+
+        // build super‐class
+        JavaType superClass = null;
+        Type genSup = raw.getGenericSuperclass();
+        if (genSup != null) {
+            superClass = _constructType(genSup, context, referencedType, asStatic);
+        }
+
+        // build interfaces
+        Type[] genIfs = raw.getGenericInterfaces();
+        JavaType[] interfaces = null;
+        if (genIfs != null && genIfs.length > 0) {
+            interfaces = new JavaType[genIfs.length];
+            for (int i = 0; i < genIfs.length; ++i) {
+                interfaces[i] = _constructType(genIfs[i], context, referencedType, asStatic);
+            }
+        }
+
+        // bindings for raw
+        TypeBindings bindings = _bindings.forClass(raw);
+
+        // create the actual type
+        SimpleType result = new SimpleType(raw, bindings, superClass, interfaces);
+
+        // resolve any recursive placeholders that pointed here
+        context.resolveSelfReferences(result);
+
+        // cache the new type (only one instance per raw class & bindings)
+        _typeCache.put(key, result);
+
+        return result;
+    }
+    // ... handle other Type implementations (ParameterizedType, array, etc.)
+    return _constructOther(type, context, referencedType, asStatic);
+}
\ No newline at end of file
