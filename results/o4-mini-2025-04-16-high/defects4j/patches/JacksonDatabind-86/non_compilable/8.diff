diff --git a/tmp/7eac7ed4-280a-4f3b-ac0f-75c05b2b4f91_buggy.java b/tmp/daf5187d-9953-4ed9-ae6d-13b19ea5d79f_fixed.java
index e69de29..e965ffe 100644
--- a/tmp/7eac7ed4-280a-4f3b-ac0f-75c05b2b4f91_buggy.java
+++ b/tmp/daf5187d-9953-4ed9-ae6d-13b19ea5d79f_fixed.java
@@ -0,0 +1,49 @@
+// In com.fasterxml.jackson.databind.type.TypeFactory:
+
+/**
+ * Internal helper to construct a JavaType for a Class.
+ * Fix: even for simple (non‐generic) raw types we must populate
+ * super‐class and interface hierarchy so that getSuperClass()
+ * is never left null.
+ */
+protected JavaType _fromClass(Class<?> raw, TypeBindings bindings,
+                              JavaType superClass, JavaType[] interfaces)
+{
+    // caching branch for simple raw (non‐generic) types
+    if ((bindings == null || bindings.isEmpty())
+            && superClass == null
+            && (interfaces == null || interfaces.length == 0)) {
+        synchronized (_typeCache) {
+            JavaType cached = _typeCache.get(raw);
+            if (cached != null) {
+                return cached;
+            }
+            // fully resolve the class hierarchy
+            // 1) super‐class
+            JavaType sc = null;
+            Type rawSup = raw.getGenericSuperclass();
+            if (rawSup != null) {
+                sc = _constructType(rawSup, null, null, null);
+            }
+            // 2) interfaces
+            Type[] rawIfaces = raw.getGenericInterfaces();
+            JavaType[] intfs = new JavaType[rawIfaces.length];
+            for (int i = 0; i < rawIfaces.length; ++i) {
+                intfs[i] = _constructType(rawIfaces[i], null, null, null);
+            }
+            // 3) build a SimpleType that includes hierarchy
+            SimpleType simple = new SimpleType(raw,
+                                               TypeBindings.create(raw, null, this),
+                                               sc, intfs,
+                                               /* no type‐params */ null,
+                                               /* asStatic */ _cfgStaticTyping);
+            _typeCache.put(raw, simple);
+            return simple;
+        }
+    }
+
+    // --- otherwise, fall back to full generic/recursive‐resolution path ---
+
+    // [the existing generic/recursive‐type logic follows here,
+    //  unchanged from the previous implementation]
+}
\ No newline at end of file
