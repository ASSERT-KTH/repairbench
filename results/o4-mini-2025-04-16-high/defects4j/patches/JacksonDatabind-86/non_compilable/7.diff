diff --git a/tmp/527a8a8f-3966-4b2e-9c94-f5e16724b7f6_buggy.java b/tmp/abc50b4a-e0f0-4dc9-b052-ac4736ef0991_fixed.java
index e69de29..9e73ad1 100644
--- a/tmp/527a8a8f-3966-4b2e-9c94-f5e16724b7f6_buggy.java
+++ b/tmp/abc50b4a-e0f0-4dc9-b052-ac4736ef0991_fixed.java
@@ -0,0 +1,89 @@
+// In TypeFactory.java, replace your existing _fromClass(...) with this corrected version:
+
+@Override
+protected JavaType _fromClass(Class<?> raw,
+                              TypeBindings binding,
+                              JavaType superClass,
+                              JavaType[] superInterfaces)
+{
+    // 1) check cache only for "simple" (no generics, no explicit supertypes) calls
+    boolean canCache = binding.isEmpty()
+                       && superClass == null
+                       && (superInterfaces == null || superInterfaces.length == 0);
+    if (canCache) {
+        JavaType cached = _typeCache.get(raw);
+        if (cached != null) {
+            return cached;
+        }
+    }
+
+    // 2) recursion‚Äêdetection (unchanged from Jackson)
+    if (_classStack == null) {
+        _classStack = new LinkedList<>();
+    } else {
+        for (ClassStackEntry entry : _classStack) {
+            if (entry.raw == raw) {
+                ResolvedRecursiveType rec = new ResolvedRecursiveType(raw, binding);
+                entry.recursiveTypes.add(rec);
+                return rec;
+            }
+        }
+    }
+    ClassStackEntry curr = new ClassStackEntry(raw, binding, superClass, superInterfaces);
+    _classStack.add(curr);
+
+    try {
+        // 3) resolve superclass by reflection if not provided
+        if (superClass == null) {
+            Type gen = raw.getGenericSuperclass();
+            if (gen != null) {
+                superClass = _constructType(gen, binding);
+            }
+        }
+        // 4) resolve interfaces by reflection if not provided
+        if (superInterfaces == null) {
+            Type[] ints = raw.getGenericInterfaces();
+            if (ints != null && ints.length > 0) {
+                superInterfaces = new JavaType[ints.length];
+                for (int i = 0; i < ints.length; ++i) {
+                    superInterfaces[i] = _constructType(ints[i], binding);
+                }
+            } else {
+                superInterfaces = NO_TYPES;
+            }
+        }
+
+        // 5) construct the result, making sure to pass in the
+        //    resolved superClass/superInterfaces even for raw types
+        final JavaType result;
+        if (binding.isEmpty() && superClass == null && superInterfaces.length == 0) {
+            // truly "plain" class, no generics, no supertypes
+            result = new SimpleType(raw);
+        } else if (binding.isEmpty()) {
+            // raw class but *has* a superclass or interfaces
+            result = new SimpleType(raw, TypeBindings.emptyBindings(),
+                                    superClass, superInterfaces);
+        } else {
+            // parameterized class
+            result = new ParameterizedType(raw, binding,
+                                           superClass, superInterfaces);
+        }
+
+        // 6) complete recursion linkages
+        _classStack.removeLast();
+        if (!curr.recursiveTypes.isEmpty()) {
+            for (ResolvedRecursiveType placeholder : curr.recursiveTypes) {
+                placeholder.setReference(result);
+            }
+        }
+
+        // 7) cache if appropriate
+        if (canCache) {
+            _typeCache.put(raw, result);
+        }
+        return result;
+    } catch (Exception e) {
+        throw new IllegalArgumentException(
+            "Failed to resolve type for class " + raw.getName() + ": " + e.getMessage(), e);
+    }
+}
\ No newline at end of file
