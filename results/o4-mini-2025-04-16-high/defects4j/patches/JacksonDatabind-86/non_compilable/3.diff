diff --git a/tmp/bb73a89e-caea-43e0-bc7d-a3932ea166cc_buggy.java b/tmp/48fe070f-9636-4f81-a82b-6713f64e79c2_fixed.java
index e69de29..edb70f4 100644
--- a/tmp/bb73a89e-caea-43e0-bc7d-a3932ea166cc_buggy.java
+++ b/tmp/48fe070f-9636-4f81-a82b-6713f64e79c2_fixed.java
@@ -0,0 +1,74 @@
+// In TypeFactory.java, replace the old “_fromParametrizedType” (or similarly named) method
+// with this version.  The only behavioral change is to refuse the raw‐type cache shortcut
+// when there *are* type arguments, so that “Sub extends Base<Sub>” really builds a
+// Base<Sub> JavaType instead of reusing a pre‐cached raw Base<>.
+
+@Override
+protected JavaType _fromParametrizedType(ParameterizedType ptype,
+                                         TypeBindings parentBindings,
+                                         JavaType contextType,
+                                         JavaType refType,
+                                         int depth)
+{
+    Class<?> raw = (Class<?>) ptype.getRawType();
+
+    // 1) Recursion‐placeholder?  If so, return it
+    JavaType recursive = _incompleteTypes.get(raw);
+    if (recursive != null) {
+        return recursive;
+    }
+
+    // 2) Raw‐type cache: only reuse if there are NO actual type arguments
+    JavaType cached = _typeCache.get(raw);
+    if (cached != null && (ptype.getActualTypeArguments() == null
+                           || ptype.getActualTypeArguments().length == 0))
+    {
+        return cached;
+    }
+
+    // 3) Otherwise we must build a fresh ParameterizedType instance
+    //    (same as original code after the cache‐check)
+    TypeVariable<?>[] vars = raw.getTypeParameters();
+    JavaType[] typeArgs;
+    if (vars.length == 0) {
+        typeArgs = NO_TYPES;
+    } else {
+        Type[] args = ptype.getActualTypeArguments();
+        typeArgs = new JavaType[vars.length];
+        for (int i = 0; i < vars.length; ++i) {
+            Type arg = (i < args.length ? args[i] : vars[i]);
+            typeArgs[i] = _constructType(arg, parentBindings, contextType, null, depth+1);
+        }
+    }
+
+    // 4) Bind and register placeholder before resolving supertypes
+    TypeBindings newBindings = TypeBindings.create(raw, vars, typeArgs, this);
+    SimpleType result = new SimpleType(raw, newBindings,
+                                       /*superClass*/null,
+                                       /*superInterfaces*/null,
+                                       _valueHandler, _typeHandler, false);
+    _incompleteTypes.put(raw, result);
+
+    // 5) Resolve superclass
+    Type sup = raw.getGenericSuperclass();
+    if (sup != null) {
+        JavaType supType = _constructType(sup, newBindings, result, null, depth+1);
+        result.setSuperClass(supType);
+    }
+
+    // 6) Resolve interfaces
+    Type[] ifaces = raw.getGenericInterfaces();
+    if (ifaces != null && ifaces.length > 0) {
+        List<JavaType> l = new ArrayList<>(ifaces.length);
+        for (Type intf : ifaces) {
+            l.add(_constructType(intf, newBindings, result, null, depth+1));
+        }
+        result.setInterfaces(l);
+    }
+
+    // 7) Finish up: remove placeholder, cache, and resolve any pending recursion
+    _incompleteTypes.remove(raw);
+    _typeCache.put(raw, result);
+    _resolveSelfReferences();
+    return result;
+}
\ No newline at end of file
