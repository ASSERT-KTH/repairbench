diff --git a/tmp/138cfbca-9a32-44f3-85bf-cb60bfa49ceb_buggy.java b/tmp/0d0afb97-bca0-4f49-84ba-1158b08c29f2_fixed.java
index e69de29..c8d65f2 100644
--- a/tmp/138cfbca-9a32-44f3-85bf-cb60bfa49ceb_buggy.java
+++ b/tmp/0d0afb97-bca0-4f49-84ba-1158b08c29f2_fixed.java
@@ -0,0 +1,24 @@
+@Override
+public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {
+    if (baseType == null) {
+        throw new IllegalArgumentException("Base type must not be null");
+    }
+    Class<?> rawSuper = baseType.getRawClass();
+    if (!rawSuper.isAssignableFrom(subclass)) {
+        throw new IllegalArgumentException("Class "
+            + subclass.getName()
+            + " not a subtype of base "
+            + rawSuper.getName());
+    }
+    /* Wrap the supplied base‐type in a recursion placeholder so that
+     * subType.getSuperClass() returns a ResolvedRecursiveType, and that
+     * placeholder in turn points back to the real baseType. This
+     * fixes databind#1647.
+     */
+    ResolvedRecursiveType placeholder = new ResolvedRecursiveType(rawSuper);
+    placeholder.setSelfReference(baseType);
+    // Bind any generic parameters from the baseType into the subclass
+    TypeBindings bindings = TypeBindings.create(subclass, baseType);
+    // Delegate to the core constructor, passing our placeholder as the super‐class
+    return _constructType(subclass, bindings, placeholder, null, _asStatic);
+}
\ No newline at end of file
