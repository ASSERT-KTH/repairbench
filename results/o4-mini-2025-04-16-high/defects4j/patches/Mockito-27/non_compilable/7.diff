diff --git a/tmp/6f70ce4a-a0f6-4d36-b537-ec99b0916fe4_buggy.java b/tmp/d4839790-78f6-4b4c-b1af-b08b7de55cd2_fixed.java
index 5c5286c..039aa9b 100644
--- a/tmp/6f70ce4a-a0f6-4d36-b537-ec99b0916fe4_buggy.java
+++ b/tmp/d4839790-78f6-4b4c-b1af-b08b7de55cd2_fixed.java
@@ -1,6 +1,19 @@
 public <T> void resetMock(T mock) {
-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);
-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);
-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));
-        ((Factory) mock).setCallback(0, newFilter);
+    // grab the existing interceptor so we can reuse its settings (including listeners)
+    Factory factory = (Factory) mock;
+    MethodInterceptorFilter oldFilter = (MethodInterceptorFilter) factory.getCallback(0);
+
+    // get the old handler and original mock‐settings
+    @SuppressWarnings("unchecked")
+    MockHandlerInterface<T> oldHandler = oldFilter.getMockHandler();
+    MockSettingsImpl originalSettings = oldFilter.getSettings();
+
+    // create a fresh handler (which will carry over stubbings, etc.) 
+    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);
+
+    // build a new interceptor filter, but reuse the original settings (so listeners aren’t lost)
+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, originalSettings);
+
+    // install the new filter on the proxy
+    factory.setCallback(0, newFilter);
 }
\ No newline at end of file
