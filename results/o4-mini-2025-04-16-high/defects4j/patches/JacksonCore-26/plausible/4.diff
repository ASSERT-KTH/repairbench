diff --git a/tmp/13f2a8db-69d5-41f5-b5e6-572cf03cd6ec_buggy.java b/tmp/4c530efd-039a-4de8-b955-917b197c28db_fixed.java
index 0722547..e14a198 100644
--- a/tmp/13f2a8db-69d5-41f5-b5e6-572cf03cd6ec_buggy.java
+++ b/tmp/4c530efd-039a-4de8-b955-917b197c28db_fixed.java
@@ -1,26 +1,34 @@
 @Override
 public void feedInput(byte[] buf, int start, int end) throws IOException
 {
     // Must not have remaining input
     if (_inputPtr < _inputEnd) {
-            _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
+        _reportError("Still have %d undecoded bytes, should not call 'feedInput'",
+                     _inputEnd - _inputPtr);
     }
     if (end < start) {
         _reportError("Input end (%d) may not be before start (%d)", end, start);
     }
-        // and shouldn't have been marked as end-of-input
     if (_endOfInput) {
         _reportError("Already closed, can not feed more input");
     }
-        // Time to update pointers first
+
+    // Accumulate fully‐consumed buffer length
     _currInputProcessed += _origBufferLen;
 
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
-        _currInputRowStart = start - (_inputEnd - _currInputRowStart);
+    // Adjust row‐start so columns compute correctly when we rebase pointer to 0
+    // old _inputEnd is still the previous buffer's end index
+    _currInputRowStart -= _inputEnd;
 
-        // And then update buffer settings
-        _inputBuffer = buf;
-        _inputPtr = start;
-        _inputEnd = end;
-        _origBufferLen = end - start;
+    // Copy only the requested slice into a fresh buffer so that
+    // _inputPtr can be zero‐based (avoiding absolute array‐index skew).
+    int len = end - start;
+    byte[] chunk = new byte[len];
+    System.arraycopy(buf, start, chunk, 0, len);
+
+    // Reset parser to the new chunk
+    _inputBuffer = chunk;
+    _inputPtr     = 0;
+    _inputEnd     = len;
+    _origBufferLen = len;
 }
\ No newline at end of file
