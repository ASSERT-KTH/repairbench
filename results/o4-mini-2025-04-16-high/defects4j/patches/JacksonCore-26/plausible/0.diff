diff --git a/tmp/dcc022fa-00d7-4693-aa84-0732fe6fb723_buggy.java b/tmp/9c789257-a6bc-4060-b368-920d3ed2395a_fixed.java
index 0722547..aefc030 100644
--- a/tmp/dcc022fa-00d7-4693-aa84-0732fe6fb723_buggy.java
+++ b/tmp/9c789257-a6bc-4060-b368-920d3ed2395a_fixed.java
@@ -1,26 +1,37 @@
 @Override
 public void feedInput(byte[] buf, int start, int end) throws IOException
 {
     // Must not have remaining input
     if (_inputPtr < _inputEnd) {
-            _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
+        _reportError("Still have %d undecoded bytes, should not call 'feedInput'",
+                     _inputEnd - _inputPtr);
     }
     if (end < start) {
         _reportError("Input end (%d) may not be before start (%d)", end, start);
     }
     // and shouldn't have been marked as end-of-input
     if (_endOfInput) {
         _reportError("Already closed, can not feed more input");
     }
-        // Time to update pointers first
-        _currInputProcessed += _origBufferLen;
-
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
-        _currInputRowStart = start - (_inputEnd - _currInputRowStart);
-
-        // And then update buffer settings
-        _inputBuffer = buf;
-        _inputPtr = start;
-        _inputEnd = end;
-        _origBufferLen = end - start;
+    // Save old state
+    int oldEnd = _inputEnd;
+    int oldRowStart = _currInputRowStart;
+    int oldLen = _origBufferLen;
+    // Update total processed bytes
+    _currInputProcessed += oldLen;
+    // Rebase row start for the new buffer slice
+    if (oldRowStart >= 0) {
+        _currInputRowStart = oldRowStart - oldEnd;
+    } else {
+        _currInputRowStart = -1;
+    }
+    // Copy the requested slice so that pointers start at 0
+    int newLen = end - start;
+    byte[] segment = new byte[newLen];
+    System.arraycopy(buf, start, segment, 0, newLen);
+    // Install the new buffer
+    _inputBuffer = segment;
+    _inputPtr = 0;
+    _inputEnd = newLen;
+    _origBufferLen = newLen;
 }
\ No newline at end of file
