diff --git a/tmp/de43f901-5fea-4fbe-b7ab-c4ff1c9e3ee9_buggy.java b/tmp/d24eea93-f143-4305-8ed5-78e649bf7489_fixed.java
index 0722547..7a0c73e 100644
--- a/tmp/de43f901-5fea-4fbe-b7ab-c4ff1c9e3ee9_buggy.java
+++ b/tmp/d24eea93-f143-4305-8ed5-78e649bf7489_fixed.java
@@ -1,26 +1,29 @@
 @Override
 public void feedInput(byte[] buf, int start, int end) throws IOException
 {
     // Must not have remaining input
     if (_inputPtr < _inputEnd) {
-            _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
+        _reportError("Still have %d undecoded bytes, should not call 'feedInput'",
+                     _inputEnd - _inputPtr);
     }
     if (end < start) {
         _reportError("Input end (%d) may not be before start (%d)", end, start);
     }
-        // and shouldn't have been marked as end-of-input
     if (_endOfInput) {
         _reportError("Already closed, can not feed more input");
     }
-        // Time to update pointers first
+    // FIRST: account for all bytes of the previous buffer
     _currInputProcessed += _origBufferLen;
+    // row‐start in the new buffer is the old row‐start moved back by the full length
+    // of the old buffer (so that column arithmetic still works)
+    _currInputRowStart -= _origBufferLen;
 
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
-        _currInputRowStart = start - (_inputEnd - _currInputRowStart);
-
-        // And then update buffer settings
-        _inputBuffer = buf;
-        _inputPtr = start;
-        _inputEnd = end;
-        _origBufferLen = end - start;
+    // Now slice out just the new bytes so that inputPtr/inputEnd are relative to 0
+    int newLen = end - start;
+    byte[] slice = new byte[newLen];
+    System.arraycopy(buf, start, slice, 0, newLen);
+    _inputBuffer = slice;
+    _inputPtr = 0;
+    _inputEnd = newLen;
+    _origBufferLen = newLen;
 }
\ No newline at end of file
