diff --git a/tmp/c5b933fc-28fb-4641-8757-e3720c9d6196_buggy.java b/tmp/ff2a0c3d-d32d-4eef-b551-5ec413142b7e_fixed.java
index 0722547..372c592 100644
--- a/tmp/c5b933fc-28fb-4641-8757-e3720c9d6196_buggy.java
+++ b/tmp/ff2a0c3d-d32d-4eef-b551-5ec413142b7e_fixed.java
@@ -1,26 +1,32 @@
 @Override
 public void feedInput(byte[] buf, int start, int end) throws IOException
 {
     // Must not have remaining input
     if (_inputPtr < _inputEnd) {
-            _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
+        _reportError("Still have %d undecoded bytes, should not call 'feedInput'",
+                     _inputEnd - _inputPtr);
     }
     if (end < start) {
         _reportError("Input end (%d) may not be before start (%d)", end, start);
     }
     // and shouldn't have been marked as end-of-input
     if (_endOfInput) {
         _reportError("Already closed, can not feed more input");
     }
-        // Time to update pointers first
+
+    // 1) advance total processed by length of previous chunk
     _currInputProcessed += _origBufferLen;
+    // 2) adjust row‐start so that it remains correct across the boundary
+    _currInputRowStart -= _origBufferLen;
 
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
-        _currInputRowStart = start - (_inputEnd - _currInputRowStart);
+    // 3) slice out the new input so that ptr/row‐start are relative to 0
+    int sliceLen = end - start;
+    byte[] slice = new byte[sliceLen];
+    System.arraycopy(buf, start, slice, 0, sliceLen);
 
-        // And then update buffer settings
-        _inputBuffer = buf;
-        _inputPtr = start;
-        _inputEnd = end;
-        _origBufferLen = end - start;
+    // 4) install the new buffer
+    _inputBuffer = slice;
+    _inputPtr     = 0;
+    _inputEnd     = sliceLen;
+    _origBufferLen = sliceLen;
 }
\ No newline at end of file
