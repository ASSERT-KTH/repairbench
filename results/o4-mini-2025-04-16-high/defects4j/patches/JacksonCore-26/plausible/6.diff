diff --git a/tmp/52cc95fc-f25f-4ad3-b94d-b4678f94dfa6_buggy.java b/tmp/68e053e1-e38b-4236-8465-7cc6ef953b7e_fixed.java
index 0722547..d2d2b5b 100644
--- a/tmp/52cc95fc-f25f-4ad3-b94d-b4678f94dfa6_buggy.java
+++ b/tmp/68e053e1-e38b-4236-8465-7cc6ef953b7e_fixed.java
@@ -1,26 +1,28 @@
     @Override
     public void feedInput(byte[] buf, int start, int end) throws IOException
     {
         // Must not have remaining input
         if (_inputPtr < _inputEnd) {
-            _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
+            _reportError("Still have %d undecoded bytes, should not call 'feedInput'",
+                         _inputEnd - _inputPtr);
         }
         if (end < start) {
             _reportError("Input end (%d) may not be before start (%d)", end, start);
         }
-        // and shouldn't have been marked as end-of-input
         if (_endOfInput) {
             _reportError("Already closed, can not feed more input");
         }
-        // Time to update pointers first
-        _currInputProcessed += _origBufferLen;
 
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
+        // Adjust row‐start so that offsets within new buffer
+        // reflect the total stream offset correctly
         _currInputRowStart = start - (_inputEnd - _currInputRowStart);
+        // Reset processed count so that getByteOffset() = (_currInputProcessed + _inputPtr)
+        // yields the correct byte‐count from the beginning of the (logical) stream
+        _currInputProcessed = -_currInputRowStart;
 
-        // And then update buffer settings
+        // Finally switch to the new input buffer
         _inputBuffer = buf;
         _inputPtr    = start;
         _inputEnd    = end;
         _origBufferLen = end - start;
     }
\ No newline at end of file
