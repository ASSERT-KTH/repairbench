diff --git a/tmp/3c6cadb6-43dc-46bc-87d1-b1743436664d_buggy.java b/tmp/f2ec9dea-882d-48de-86d2-7d20227edb1a_fixed.java
index 0ef85f2..a3458f7 100644
--- a/tmp/3c6cadb6-43dc-46bc-87d1-b1743436664d_buggy.java
+++ b/tmp/f2ec9dea-882d-48de-86d2-7d20227edb1a_fixed.java
@@ -1,50 +1,40 @@
-  /**
-   * Gets the source line for the indicated line number.
-   *
-   * @param lineNumber the line number, 1 being the first line of the file.
-   * @return The line indicated. Does not include the newline at the end
-   *     of the file. Returns {@code null} if it does not exist,
-   *     or if there was an IO exception.
-   */
 public String getLine(int lineNumber) {
-    String js = "";
+    String js;
     try {
-      // NOTE(nicksantos): Right now, this is optimized for few warnings.
-      // This is probably the right trade-off, but will be slow if there
-      // are lots of warnings in one file.
         js = getCode();
     } catch (IOException e) {
         return null;
     }
 
     int pos = 0;
     int startLine = 1;
-
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
     if (lineNumber >= lastLine) {
         pos = lastOffset;
         startLine = lastLine;
     }
 
+    // Advance to the start of the requested line
     for (int n = startLine; n < lineNumber; n++) {
         int nextpos = js.indexOf('\n', pos);
         if (nextpos == -1) {
             return null;
         }
         pos = nextpos + 1;
     }
 
-    // Remember this offset for the next search we do.
+    // Cache for next lookup
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
+    // Find the end of this line
+    int nextpos = js.indexOf('\n', pos);
+    if (nextpos == -1) {
+        // No trailing newline: if we're at EOF, return null, otherwise return rest
+        if (pos >= js.length()) {
             return null;
+        }
+        return js.substring(pos);
     } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+        return js.substring(pos, nextpos);
     }
 }
\ No newline at end of file
