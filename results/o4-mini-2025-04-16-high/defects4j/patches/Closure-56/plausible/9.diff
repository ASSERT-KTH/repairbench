diff --git a/tmp/ea22a98f-2eb4-4d5f-8550-552302fff13c_buggy.java b/tmp/a1d24daa-8d70-4d04-ab7e-d1d2d401d352_fixed.java
index 0ef85f2..5f051ba 100644
--- a/tmp/ea22a98f-2eb4-4d5f-8550-552302fff13c_buggy.java
+++ b/tmp/a1d24daa-8d70-4d04-ab7e-d1d2d401d352_fixed.java
@@ -1,50 +1,37 @@
-  /**
-   * Gets the source line for the indicated line number.
-   *
-   * @param lineNumber the line number, 1 being the first line of the file.
-   * @return The line indicated. Does not include the newline at the end
-   *     of the file. Returns {@code null} if it does not exist,
-   *     or if there was an IO exception.
-   */
 public String getLine(int lineNumber) {
-    String js = "";
+  String js;
   try {
-      // NOTE(nicksantos): Right now, this is optimized for few warnings.
-      // This is probably the right trade-off, but will be slow if there
-      // are lots of warnings in one file.
     js = getCode();
   } catch (IOException e) {
     return null;
   }
 
   int pos = 0;
   int startLine = 1;
-
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
   if (lineNumber >= lastLine) {
     pos = lastOffset;
     startLine = lastLine;
   }
 
+  // Skip up to the requested line.
   for (int n = startLine; n < lineNumber; n++) {
-      int nextpos = js.indexOf('\n', pos);
-      if (nextpos == -1) {
+    int nextPos = js.indexOf('\n', pos);
+    if (nextPos == -1) {
       return null;
     }
-      pos = nextpos + 1;
+    pos = nextPos + 1;
   }
 
-    // Remember this offset for the next search we do.
+  // Cache for future calls.
   lastOffset = pos;
   lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
-        return null;
+  // Find the end of this line.
+  int endPos = js.indexOf('\n', pos);
+  if (endPos == -1) {
+    // No newline â€“ either past EOF or last line without a trailing newline.
+    return (pos < js.length()) ? js.substring(pos) : null;
   } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+    return js.substring(pos, endPos);
   }
 }
\ No newline at end of file
