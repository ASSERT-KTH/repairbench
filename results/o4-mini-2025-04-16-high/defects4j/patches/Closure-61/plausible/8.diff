diff --git a/tmp/a68a0467-d0cc-4c4d-ad3c-deefc90790de_buggy.java b/tmp/88a78da6-d00a-463a-a265-48e6989a2179_fixed.java
index b36c3f0..858130c 100644
--- a/tmp/a68a0467-d0cc-4c4d-ad3c-deefc90790de_buggy.java
+++ b/tmp/88a78da6-d00a-463a-a265-48e6989a2179_fixed.java
@@ -1,58 +1,61 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
 static boolean functionCallHasSideEffects(
     Node callNode, @Nullable AbstractCompiler compiler) {
   if (callNode.getType() != Token.CALL) {
     throw new IllegalStateException(
         "Expected CALL node, got " + Token.name(callNode.getType()));
   }
 
+  // First, honor any explicit no-side-effects annotations.
   if (callNode.isNoSideEffectsCall()) {
     return false;
   }
 
   Node nameNode = callNode.getFirstChild();
 
-    // Built-in functions with no side effects.
+  // Bare names like alert, decodeURI, etc.
   if (nameNode.getType() == Token.NAME) {
     String name = nameNode.getString();
     if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
       return false;
     }
   } else if (nameNode.getType() == Token.GETPROP) {
+    // Math.* methods are pure.
+    Node obj = nameNode.getFirstChild();
+    if (obj.getType() == Token.NAME && "Math".equals(obj.getString())) {
+      return false;
+    }
+
+    // Object.prototype methods like toString/valueOf with a single arg
     if (callNode.hasOneChild()
         && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
             nameNode.getLastChild().getString())) {
       return false;
     }
 
+    // Methods that only modify 'this' on a known local object.
     if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
+        && evaluatesToLocalValue(obj)) {
       return false;
     }
 
-      // Functions in the "Math" namespace have no side effects.
-
+    // RegExp/String regexp methods when no global RegExp references exist.
     if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+      String method = nameNode.getLastChild().getString();
+      if (obj.getType() == Token.REGEXP
+          && REGEXP_METHODS.contains(method)) {
         return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+      } else if (obj.getType() == Token.STRING
+          && STRING_REGEXP_METHODS.contains(method)) {
         Node param = nameNode.getNext();
         if (param != null &&
             (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+             || param.getType() == Token.REGEXP)) {
           return false;
         }
       }
     }
+  }
 
+  // Conservatively assume the call has side effects.
   return true;
 }
\ No newline at end of file
