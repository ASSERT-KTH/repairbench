diff --git a/tmp/ff3aed67-a1b2-45d6-9737-6f99ac60e8cf_buggy.java b/tmp/014e1adc-b46a-4c3f-924f-0952ddaf40ac_fixed.java
index 25ca093..6c4fb8e 100644
--- a/tmp/ff3aed67-a1b2-45d6-9737-6f99ac60e8cf_buggy.java
+++ b/tmp/014e1adc-b46a-4c3f-924f-0952ddaf40ac_fixed.java
@@ -1,52 +1,127 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    String bomCharset = null;
+    int bomLength = 0;
+    ByteBuffer bb = byteData.duplicate();
+    // ensure we read from the start
+    bb.position(0);
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    // 4-byte BOMs (UTF-32BE/LE)
+    if (bb.remaining() >= 4) {
+        int b0 = bb.get(0) & 0xFF;
+        int b1 = bb.get(1) & 0xFF;
+        int b2 = bb.get(2) & 0xFF;
+        int b3 = bb.get(3) & 0xFF;
+        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {
+            bomCharset = "UTF-32BE";
+            bomLength = 4;
+        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {
+            bomCharset = "UTF-32LE";
+            bomLength = 4;
+        }
+    }
+    // 3-byte BOM (UTF-8)
+    if (bomCharset == null && bb.remaining() >= 3) {
+        int b0 = bb.get(0) & 0xFF;
+        int b1 = bb.get(1) & 0xFF;
+        int b2 = bb.get(2) & 0xFF;
+        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {
+            bomCharset = defaultCharset;  // UTF-8
+            bomLength = 3;
+        }
+    }
+    // 2-byte BOMs (UTF-16BE/LE)
+    if (bomCharset == null && bb.remaining() >= 2) {
+        int b0 = bb.get(0) & 0xFF;
+        int b1 = bb.get(1) & 0xFF;
+        if (b0 == 0xFE && b1 == 0xFF) {
+            bomCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if (b0 == 0xFF && b1 == 0xFE) {
+            bomCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+    }
+
+    if (bomCharset != null) {
+        // skip the BOM bytes and override any provided charsetName
+        charsetName = bomCharset;
+        byteData.position(bomLength);
+
+        // special‐case UTF-32: manual decode (JDK doesn't support UTF-32 natively)
+        if ("UTF-32BE".equals(bomCharset) || "UTF-32LE".equals(bomCharset)) {
+            boolean bigEndian = bomCharset.endsWith("BE");
+            ByteBuffer buf = byteData.duplicate().order(bigEndian
+                ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN);
+            StringBuilder sb = new StringBuilder();
+            while (buf.remaining() >= 4) {
+                int codePoint = buf.getInt();
+                // skip any stray BOM codepoint
+                if (codePoint == 0xFEFF) continue;
+                if (Character.isBmpCodePoint(codePoint)) {
+                    sb.append((char) codePoint);
+                } else {
+                    sb.append(Character.highSurrogate(codePoint));
+                    sb.append(Character.lowSurrogate(codePoint));
+                }
+            }
+            docData = sb.toString();
+            doc = parser.parseInput(docData, baseUri);
+            doc.outputSettings().charset(charsetName);
+            return doc;
+        }
+    }
+
+    if (charsetName == null) { 
+        // determine from meta. safe parse as UTF-8
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
+                    String cs = meta.attr("charset");
+                    if (Charset.isSupported(cs)) foundCharset = cs;
                 } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                    // invalid, ignore
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null 
+                && foundCharset.length() != 0 
+                && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                doc = null; // re-parse below
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
+        Validate.notEmpty(charsetName,
+            "Must set charset arg to character set of file to parse. "
+          + "Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
+    // strip a leading BOM char if still present
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
         byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
         charsetName = defaultCharset;
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
