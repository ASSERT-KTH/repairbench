diff --git a/tmp/f51da3c9-41a2-435c-be2f-9895249dfc6d_buggy.java b/tmp/18373470-6969-452d-a1c5-a0b31fe0b9de_fixed.java
index 25ca093..3a28e84 100644
--- a/tmp/f51da3c9-41a2-435c-be2f-9895249dfc6d_buggy.java
+++ b/tmp/18373470-6969-452d-a1c5-a0b31fe0b9de_fixed.java
@@ -1,52 +1,91 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
+    // 1) Detect BOM by peeking first bytes
+    ByteBuffer bb = byteData.duplicate();
+    bb.position(0);
+    int p = bb.position();
+    String bomCharset = null;
+    int bomLength = 0;
+    if (bb.remaining() >= 4) {
+        int b0 = bb.get(p) & 0xFF;
+        int b1 = bb.get(p + 1) & 0xFF;
+        int b2 = bb.get(p + 2) & 0xFF;
+        int b3 = bb.get(p + 3) & 0xFF;
+        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {
+            bomCharset = "UTF-32BE"; bomLength = 4;
+        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {
+            bomCharset = "UTF-32LE"; bomLength = 4;
+        }
+    }
+    if (bomCharset == null && bb.remaining() >= 3) {
+        int b0 = bb.get(p) & 0xFF;
+        int b1 = bb.get(p + 1) & 0xFF;
+        int b2 = bb.get(p + 2) & 0xFF;
+        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {
+            bomCharset = "UTF-8"; bomLength = 3;
+        }
+    }
+    if (bomCharset == null && bb.remaining() >= 2) {
+        int b0 = bb.get(p) & 0xFF;
+        int b1 = bb.get(p + 1) & 0xFF;
+        if (b0 == 0xFE && b1 == 0xFF) {
+            bomCharset = "UTF-16BE"; bomLength = 2;
+        } else if (b0 == 0xFF && b1 == 0xFE) {
+            bomCharset = "UTF-16LE"; bomLength = 2;
+        }
+    }
+    // BOM overrides any provided charset
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
+
     Document doc = null;
+    String docData;
+    ByteBuffer toDecode;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // 2) If still no charset, do a safe parse in default to look for <meta> tags
+    if (charsetName == null) {
+        toDecode = byteData.duplicate();
+        toDecode.position(bomLength);
+        docData = Charset.forName(defaultCharset).decode(toDecode).toString();
         doc = parser.parseInput(docData, baseUri);
+
+        // find a <meta http-equiv="content-type" ...> or <meta charset=...>
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
         String foundCharset = null;
+        if (meta != null) {
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
+                String cs = meta.attr("charset").trim();
                 try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
+                    if (Charset.isSupported(cs)) {
+                        foundCharset = cs;
                     }
                 } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                    // ignore
+                }
+            }
+        }
+        // if a new, non-default charset is found, re-decode
+        if (foundCharset != null
+            && foundCharset.length() > 0
+            && !foundCharset.equalsIgnoreCase(defaultCharset)) {
+            charsetName = foundCharset.replaceAll("[\"']", "").trim();
+            doc = null;
         }
     }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+    // 3) Final parse with the determined charset (from BOM, header, or meta)
     if (doc == null) {
+        Validate.notEmpty(charsetName,
+            "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        toDecode = byteData.duplicate();
+        toDecode.position(bomLength);
+        docData = Charset.forName(charsetName).decode(toDecode).toString();
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
\ No newline at end of file
