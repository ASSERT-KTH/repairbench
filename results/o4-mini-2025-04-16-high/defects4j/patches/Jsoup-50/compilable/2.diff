diff --git a/tmp/adb47031-f7bd-4637-a5af-a60f5bbd9fa2_buggy.java b/tmp/312eb6bd-782f-4f73-b6ae-6461663a60b3_fixed.java
index 25ca093..11861cb 100644
--- a/tmp/adb47031-f7bd-4637-a5af-a60f5bbd9fa2_buggy.java
+++ b/tmp/312eb6bd-782f-4f73-b6ae-6461663a60b3_fixed.java
@@ -1,52 +1,93 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    // look for BOM - overrides any other header or input
+    int start = byteData.position();
+    int remaining = byteData.remaining();
+    String bomCharset = null;
+    int bomLength = 0;
+
+    // UTF-32 BOMs
+    if (remaining >= 4) {
+        byte b0 = byteData.get(start);
+        byte b1 = byteData.get(start + 1);
+        byte b2 = byteData.get(start + 2);
+        byte b3 = byteData.get(start + 3);
+        if (b0 == 0x00 && b1 == 0x00 && b2 == (byte)0xFE && b3 == (byte)0xFF) {
+            bomCharset = "UTF-32BE"; bomLength = 4;
+        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE && b2 == 0x00 && b3 == 0x00) {
+            bomCharset = "UTF-32LE"; bomLength = 4;
+        }
+    }
+    // UTF-8 BOM
+    if (bomCharset == null && remaining >= 3) {
+        byte b0 = byteData.get(start);
+        byte b1 = byteData.get(start + 1);
+        byte b2 = byteData.get(start + 2);
+        if (b0 == (byte)0xEF && b1 == (byte)0xBB && b2 == (byte)0xBF) {
+            bomCharset = "UTF-8"; bomLength = 3;
+        }
+    }
+    // UTF-16 BOMs
+    if (bomCharset == null && remaining >= 2) {
+        byte b0 = byteData.get(start);
+        byte b1 = byteData.get(start + 1);
+        if (b0 == (byte)0xFE && b1 == (byte)0xFF) {
+            bomCharset = "UTF-16BE"; bomLength = 2;
+        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE) {
+            bomCharset = "UTF-16LE"; bomLength = 2;
+        }
+    }
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+        byteData.position(start + bomLength);
+    }
+
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) {
+        // determine from meta. safe parse as UTF-8
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
+        if (meta != null) {
+            String found = null;
             if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
+                found = getCharsetFromContentType(meta.attr("content"));
             }
-                if (foundCharset == null && meta.hasAttr("charset")) {
+            if (found == null && meta.hasAttr("charset")) {
                 try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
+                    if (Charset.isSupported(meta.attr("charset")))
+                        found = meta.attr("charset");
                 } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                    found = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+            if (found != null && found.length() != 0 && !found.equals(defaultCharset)) {
+                found = found.trim().replaceAll("[\"']", "");
+                charsetName = found;
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                docData = Charset.forName(found).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
+        Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. "
+            + "Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
+    // legacy BOM-as-character check
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
         byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
         charsetName = defaultCharset;
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
