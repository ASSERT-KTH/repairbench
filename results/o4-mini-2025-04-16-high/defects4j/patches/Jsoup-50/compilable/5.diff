diff --git a/tmp/0ba5efc3-0daa-40aa-973d-7c061645d24e_buggy.java b/tmp/e20e344a-988c-4e9a-a6c6-88d45315a658_fixed.java
index 25ca093..5b690d3 100644
--- a/tmp/0ba5efc3-0daa-40aa-973d-7c061645d24e_buggy.java
+++ b/tmp/e20e344a-988c-4e9a-a6c6-88d45315a658_fixed.java
@@ -1,52 +1,143 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    // sniff BOM - overrides any other header or input
+    byteData.rewind();
+    int start = byteData.position();
+    int end = byteData.limit();
+    int rem = end - start;
+    String bomCharset = null;
+    int bomLength = 0;
+    // UTF-32 BOMs
+    if (rem >= 4) {
+        int b0 = byteData.get(start) & 0xFF;
+        int b1 = byteData.get(start + 1) & 0xFF;
+        int b2 = byteData.get(start + 2) & 0xFF;
+        int b3 = byteData.get(start + 3) & 0xFF;
+        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {
+            bomCharset = "UTF-32BE"; bomLength = 4;
+        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {
+            bomCharset = "UTF-32LE"; bomLength = 4;
+        }
+    }
+    // UTF-8 BOM
+    if (bomCharset == null && rem >= 3) {
+        int b0 = byteData.get(start) & 0xFF;
+        int b1 = byteData.get(start + 1) & 0xFF;
+        int b2 = byteData.get(start + 2) & 0xFF;
+        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {
+            bomCharset = "UTF-8"; bomLength = 3;
+        }
+    }
+    // UTF-16 BOMs
+    if (bomCharset == null && rem >= 2) {
+        int b0 = byteData.get(start) & 0xFF;
+        int b1 = byteData.get(start + 1) & 0xFF;
+        if (b0 == 0xFE && b1 == 0xFF) {
+            bomCharset = "UTF-16BE"; bomLength = 2;
+        } else if (b0 == 0xFF && b1 == 0xFE) {
+            bomCharset = "UTF-16LE"; bomLength = 2;
+        }
+    }
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+        byteData.position(start + bomLength);
+    }
+
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    // no explicit charset: sniff meta
+    if (charsetName == null) {
+        // safe parse as UTF-8
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
+
+        // look for <meta http-equiv> or HTML5 <meta charset>
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
+        if (meta != null) {
+            String found = null;
             if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
+                found = getCharsetFromContentType(meta.attr("content"));
             }
-                if (foundCharset == null && meta.hasAttr("charset")) {
+            if (found == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                        found = meta.attr("charset");
                     }
+                } catch (IllegalCharsetNameException e) { }
             }
+            if (found != null
+                && found.trim().length() > 0
+                && !found.equals(defaultCharset)) {
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+                found = found.trim().replaceAll("[\"']", "");
+                charsetName = found;
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+
+                // re-decode with the new charset
+                if ("UTF-32BE".equalsIgnoreCase(found) || "UTF-32LE".equalsIgnoreCase(found)) {
+                    boolean big = "UTF-32BE".equalsIgnoreCase(found);
+                    ByteBuffer dup = byteData.duplicate();
+                    int s = dup.position(), l = dup.limit();
+                    StringBuilder sb = new StringBuilder((l - s) / 4);
+                    for (int i = s; i + 3 < l; i += 4) {
+                        int c0 = dup.get(i) & 0xFF;
+                        int c1 = dup.get(i + 1) & 0xFF;
+                        int c2 = dup.get(i + 2) & 0xFF;
+                        int c3 = dup.get(i + 3) & 0xFF;
+                        int cp = big
+                            ? ((c0 << 24) | (c1 << 16) | (c2 << 8) | c3)
+                            : ((c3 << 24) | (c2 << 16) | (c1 << 8) | c0);
+                        if (Character.isBmpCodePoint(cp)) {
+                            sb.append((char) cp);
+                        } else if (Character.isValidCodePoint(cp)) {
+                            sb.append(Character.highSurrogate(cp));
+                            sb.append(Character.lowSurrogate(cp));
+                        }
+                    }
+                    docData = sb.toString();
+                } else {
+                    docData = Charset.forName(found).decode(byteData).toString();
+                }
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
+        // explicit charset by header or BOM
+        Validate.notEmpty(charsetName,
+            "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+
+        if ("UTF-32BE".equalsIgnoreCase(charsetName)
+         || "UTF-32LE".equalsIgnoreCase(charsetName)) {
+
+            boolean big = "UTF-32BE".equalsIgnoreCase(charsetName);
+            ByteBuffer dup = byteData.duplicate();
+            int s = dup.position(), l = dup.limit();
+            StringBuilder sb = new StringBuilder((l - s) / 4);
+            for (int i = s; i + 3 < l; i += 4) {
+                int c0 = dup.get(i) & 0xFF;
+                int c1 = dup.get(i + 1) & 0xFF;
+                int c2 = dup.get(i + 2) & 0xFF;
+                int c3 = dup.get(i + 3) & 0xFF;
+                int cp = big
+                    ? ((c0 << 24) | (c1 << 16) | (c2 << 8) | c3)
+                    : ((c3 << 24) | (c2 << 16) | (c1 << 8) | c0);
+                if (Character.isBmpCodePoint(cp)) {
+                    sb.append((char) cp);
+                } else if (Character.isValidCodePoint(cp)) {
+                    sb.append(Character.highSurrogate(cp));
+                    sb.append(Character.lowSurrogate(cp));
+                }
+            }
+            docData = sb.toString();
+        } else {
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
+
+    // final parse if needed
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
