diff --git a/tmp/f6d5949d-1b7f-4638-af56-4f6c3cb942e8_buggy.java b/tmp/e4795c9a-14da-4db6-93ad-29580b672d90_fixed.java
index 25ca093..ab2992c 100644
--- a/tmp/f6d5949d-1b7f-4638-af56-4f6c3cb942e8_buggy.java
+++ b/tmp/e4795c9a-14da-4db6-93ad-29580b672d90_fixed.java
@@ -1,52 +1,90 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    ByteBuffer buf = byteData.duplicate();
+    buf.position(0);
+    int limit = buf.limit();
+    int b0 = limit > 0 ? buf.get(0) & 0xFF : -1;
+    int b1 = limit > 1 ? buf.get(1) & 0xFF : -1;
+    int b2 = limit > 2 ? buf.get(2) & 0xFF : -1;
+    int b3 = limit > 3 ? buf.get(3) & 0xFF : -1;
+    String bomCharset = null;
+    int bomLength = 0;
+    if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {
+        bomCharset = "UTF-32BE"; bomLength = 4;
+    } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {
+        bomCharset = "UTF-32LE"; bomLength = 4;
+    } else if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {
+        bomCharset = "UTF-8";    bomLength = 3;
+    } else if (b0 == 0xFE && b1 == 0xFF) {
+        bomCharset = "UTF-16BE"; bomLength = 2;
+    } else if (b0 == 0xFF && b1 == 0xFE) {
+        bomCharset = "UTF-16LE"; bomLength = 2;
+    }
+    if (bomCharset != null) {
+        // skip BOM bytes and decode
+        charsetName = bomCharset;
+        byteData.position(bomLength);
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+        doc = parser.parseInput(docData, baseUri);
+        doc.outputSettings().charset(charsetName);
+        return doc;
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    // no BOM detected, reset buffer
+    byteData.rewind();
+
+    if (charsetName == null) {
+        // safe parse as UTF-8 (defaultCharset)
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
+
+        // look for <meta http-equiv="Content-Type"...> or <meta charset=...>
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
+                // re-decode with the meta charset
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
+        Validate.notEmpty(charsetName,
+            "Must set charset arg to character set of file to parse. " +
+            "Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
+    // if there's a leading Unicode BOM character, remove it
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
         byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
         charsetName = defaultCharset;
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
+    }
     doc.outputSettings().charset(charsetName);
-        }
     return doc;
 }
\ No newline at end of file
