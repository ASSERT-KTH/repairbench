diff --git a/tmp/e320be1f-4054-4f8d-b1da-2312f5e52b7b_buggy.java b/tmp/9df0a58c-8c62-46ab-b43d-db95e04ba6b5_fixed.java
index 25ca093..da1663b 100644
--- a/tmp/e320be1f-4054-4f8d-b1da-2312f5e52b7b_buggy.java
+++ b/tmp/9df0a58c-8c62-46ab-b43d-db95e04ba6b5_fixed.java
@@ -1,52 +1,100 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    int start = byteData.position();
+    int limit = byteData.limit();
+    int length = limit - start;
+    String bomCharset = null;
+    int bomOffset = 0;
+    // UTF-32 BOM
+    if (length >= 4) {
+        int b0 = byteData.get(start)     & 0xFF;
+        int b1 = byteData.get(start + 1) & 0xFF;
+        int b2 = byteData.get(start + 2) & 0xFF;
+        int b3 = byteData.get(start + 3) & 0xFF;
+        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {
+            bomCharset = "UTF-32BE";
+            bomOffset = 4;
+        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {
+            bomCharset = "UTF-32LE";
+            bomOffset = 4;
+        }
+    }
+    // UTF-8 BOM
+    if (bomCharset == null && length >= 3) {
+        int b0 = byteData.get(start)     & 0xFF;
+        int b1 = byteData.get(start + 1) & 0xFF;
+        int b2 = byteData.get(start + 2) & 0xFF;
+        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {
+            bomCharset = defaultCharset;
+            bomOffset = 3;
+        }
+    }
+    // UTF-16 BOM
+    if (bomCharset == null && length >= 2) {
+        int b0 = byteData.get(start)     & 0xFF;
+        int b1 = byteData.get(start + 1) & 0xFF;
+        if (b0 == 0xFE && b1 == 0xFF) {
+            bomCharset = "UTF-16BE";
+            bomOffset = 2;
+        } else if (b0 == 0xFF && b1 == 0xFE) {
+            bomCharset = "UTF-16LE";
+            bomOffset = 2;
+        }
+    }
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+        byteData.position(start + bomOffset);
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null
+                && foundCharset.length() != 0
+                && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
-                    byteData.rewind();
+                byteData.position(start); // rewind to start (before BOM if none)
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else { // specified by BOM or by content type header
+        Validate.notEmpty(charsetName,
+            "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
+    // strip Unicode BOM if still present
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
+        byteData.position(start);
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
         charsetName = defaultCharset;
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
