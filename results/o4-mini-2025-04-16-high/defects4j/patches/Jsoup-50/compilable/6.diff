diff --git a/tmp/1ab23200-6a55-4687-9918-59e7d2338075_buggy.java b/tmp/a3e870cf-1e29-4146-9d9d-9dce97480bfb_fixed.java
index 25ca093..5793a9a 100644
--- a/tmp/1ab23200-6a55-4687-9918-59e7d2338075_buggy.java
+++ b/tmp/a3e870cf-1e29-4146-9d9d-9dce97480bfb_fixed.java
@@ -1,52 +1,107 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    // make a working copy of the bytes
+    ByteBuffer data = byteData.duplicate();
+    data.order(byteData.order());
+    data.rewind();
+
+    // 1) Look for BOM - overrides any other header or input
+    String bomCharset = null;
+    int bomLength = 0;
+    int limit = data.limit();
+
+    // UTF-32BE / UTF-32LE
+    if (limit >= 4) {
+        int b0 = data.get(0) & 0xFF, b1 = data.get(1) & 0xFF,
+            b2 = data.get(2) & 0xFF, b3 = data.get(3) & 0xFF;
+        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {
+            bomCharset = "UTF-32BE"; bomLength = 4;
+        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {
+            bomCharset = "UTF-32LE"; bomLength = 4;
+        }
+    }
+    // UTF-8 BOM
+    if (bomCharset == null && limit >= 3) {
+        int b0 = data.get(0) & 0xFF, b1 = data.get(1) & 0xFF, b2 = data.get(2) & 0xFF;
+        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {
+            bomCharset = "UTF-8"; bomLength = 3;
+        }
+    }
+    // UTF-16BE / UTF-16LE
+    if (bomCharset == null && limit >= 2) {
+        int b0 = data.get(0) & 0xFF, b1 = data.get(1) & 0xFF;
+        if (b0 == 0xFE && b1 == 0xFF) {
+            bomCharset = "UTF-16BE"; bomLength = 2;
+        } else if (b0 == 0xFF && b1 == 0xFE) {
+            bomCharset = "UTF-16LE"; bomLength = 2;
+        }
+    }
+
+    if (bomCharset != null) {
+        // decode skipping the BOM bytes
+        data.position(bomLength);
+        String docData = Charset.forName(bomCharset).decode(data).toString();
+        Document doc = parser.parseInput(docData, baseUri);
+        doc.outputSettings().charset(bomCharset);
+        return doc;
+    }
+
+    // 2) No BOM: fall back to user‐supplied charset or meta‐tag detection
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    if (charsetName == null) {
+        // safe parse as UTF-8 to look for a <meta> charset
+        data.rewind();
+        docData = Charset.forName(defaultCharset).decode(data).toString();
         doc = parser.parseInput(docData, baseUri);
+
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
+                    String cs = meta.attr("charset");
+                    if (Charset.isSupported(cs)) {
+                        foundCharset = cs;
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null
+                && foundCharset.length() != 0
+                && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                data.rewind();
+                docData = Charset.forName(foundCharset).decode(data).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+
+    } else {
+        Validate.notEmpty(charsetName,
+            "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        data.rewind();
+        docData = Charset.forName(charsetName).decode(data).toString();
     }
+
+    // 3) Strip stray BOM char if present
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        data.rewind();
+        docData = Charset.forName(defaultCharset).decode(data).toString();
         docData = docData.substring(1);
         charsetName = defaultCharset;
         doc = null;
     }
+
+    // 4) Final parse
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
