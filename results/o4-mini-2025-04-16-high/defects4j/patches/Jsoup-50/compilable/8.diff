diff --git a/tmp/df2602f9-c48f-4c66-a1b1-711ae94b1ffd_buggy.java b/tmp/fc3e5389-80ce-449f-a833-1d29efd34b4f_fixed.java
index 25ca093..0e7f026 100644
--- a/tmp/df2602f9-c48f-4c66-a1b1-711ae94b1ffd_buggy.java
+++ b/tmp/fc3e5389-80ce-449f-a833-1d29efd34b4f_fixed.java
@@ -1,52 +1,132 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    ByteBuffer buffer = byteData.duplicate();
+    buffer.position(0);
+    String bomCharset = null;
+    int bomLength = 0;
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // UTF-32 BOM
+    if (buffer.remaining() >= 4) {
+        int b0 = buffer.get() & 0xFF;
+        int b1 = buffer.get() & 0xFF;
+        int b2 = buffer.get() & 0xFF;
+        int b3 = buffer.get() & 0xFF;
+        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {
+            bomCharset = "UTF-32BE";
+            bomLength = 4;
+        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {
+            bomCharset = "UTF-32LE";
+            bomLength = 4;
+        }
+    }
+    // UTF-16 BOM
+    if (bomCharset == null) {
+        buffer = byteData.duplicate();
+        buffer.position(0);
+        if (buffer.remaining() >= 2) {
+            int b0 = buffer.get() & 0xFF;
+            int b1 = buffer.get() & 0xFF;
+            if (b0 == 0xFE && b1 == 0xFF) {
+                bomCharset = "UTF-16BE";
+                bomLength = 2;
+            } else if (b0 == 0xFF && b1 == 0xFE) {
+                bomCharset = "UTF-16LE";
+                bomLength = 2;
+            }
+        }
+    }
+    // UTF-8 BOM
+    if (bomCharset == null) {
+        buffer = byteData.duplicate();
+        buffer.position(0);
+        if (buffer.remaining() >= 3) {
+            int b0 = buffer.get() & 0xFF;
+            int b1 = buffer.get() & 0xFF;
+            int b2 = buffer.get() & 0xFF;
+            if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {
+                bomCharset = defaultCharset; // typically "UTF-8"
+                bomLength = 3;
+            }
+        }
+    }
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
+
+    if (charsetName == null) {
+        // auto-detect via meta, parse as UTF-8 first
+        ByteBuffer decodeBuf = byteData.duplicate();
+        decodeBuf.position(bomLength);
+        docData = Charset.forName(defaultCharset).decode(decodeBuf).toString();
         doc = parser.parseInput(docData, baseUri);
+
+        // meta charset detection
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
+                    String cs = meta.attr("charset");
+                    if (Charset.isSupported(cs)) foundCharset = cs;
                 } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                    // ignore
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null
+                && foundCharset.length() != 0
+                && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                ByteBuffer decodeBuf2 = byteData.duplicate();
+                decodeBuf2.position(bomLength);
+                docData = Charset.forName(foundCharset).decode(decodeBuf2).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+    } else {
+        Validate.notEmpty(charsetName, 
+            "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        ByteBuffer decodeBuf = byteData.duplicate();
+        decodeBuf.position(bomLength);
+
+        // manual UTF-32 decoding if needed
+        if (charsetName.equalsIgnoreCase("UTF-32BE") || charsetName.equalsIgnoreCase("UTF-32LE")) {
+            StringBuilder sb = new StringBuilder();
+            if (charsetName.equalsIgnoreCase("UTF-32BE")) {
+                while (decodeBuf.remaining() >= 4) {
+                    int b0 = decodeBuf.get() & 0xFF;
+                    int b1 = decodeBuf.get() & 0xFF;
+                    int b2 = decodeBuf.get() & 0xFF;
+                    int b3 = decodeBuf.get() & 0xFF;
+                    int cp = (b0 << 24) | (b1 << 16) | (b2 << 8) | b3;
+                    sb.append((char) cp);
+                }
+            } else {
+                while (decodeBuf.remaining() >= 4) {
+                    int b0 = decodeBuf.get() & 0xFF;
+                    int b1 = decodeBuf.get() & 0xFF;
+                    int b2 = decodeBuf.get() & 0xFF;
+                    int b3 = decodeBuf.get() & 0xFF;
+                    int cp = (b3 << 24) | (b2 << 16) | (b1 << 8) | b0;
+                    sb.append((char) cp);
+                }
+            }
+            docData = sb.toString();
+        } else {
+            docData = Charset.forName(charsetName).decode(decodeBuf).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
