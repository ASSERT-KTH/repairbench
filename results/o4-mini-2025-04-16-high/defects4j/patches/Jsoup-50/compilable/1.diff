diff --git a/tmp/695ce91e-894a-406e-8149-ab501c900090_buggy.java b/tmp/0ac366ea-8d93-4a70-ba83-313ec06f045e_fixed.java
index 25ca093..23583a7 100644
--- a/tmp/695ce91e-894a-406e-8149-ab501c900090_buggy.java
+++ b/tmp/0ac366ea-8d93-4a70-ba83-313ec06f045e_fixed.java
@@ -1,52 +1,115 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
+    // ---- 1. BOM sniffing (overrides any other) ----
+    byteData.mark();
+    String bomCharset = null;
+    int bomSkip = 0;
+    // 4-byte BOMs
+    if (byteData.remaining() >= 4) {
+        int b1 = byteData.get() & 0xFF;
+        int b2 = byteData.get() & 0xFF;
+        int b3 = byteData.get() & 0xFF;
+        int b4 = byteData.get() & 0xFF;
+        if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) {
+            bomCharset = "UTF-32BE"; bomSkip = 4;
+        } else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) {
+            bomCharset = "UTF-32LE"; bomSkip = 4;
+        }
+    }
+    // 3-byte UTF-8 BOM
+    if (bomCharset == null) {
+        byteData.reset();
+        if (byteData.remaining() >= 3) {
+            int b1 = byteData.get() & 0xFF;
+            int b2 = byteData.get() & 0xFF;
+            int b3 = byteData.get() & 0xFF;
+            if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {
+                bomCharset = "UTF-8"; bomSkip = 3;
+            }
+        }
+    }
+    // 2-byte UTF-16 BOMs
+    if (bomCharset == null) {
+        byteData.reset();
+        if (byteData.remaining() >= 2) {
+            int b1 = byteData.get() & 0xFF;
+            int b2 = byteData.get() & 0xFF;
+            if (b1 == 0xFE && b2 == 0xFF) {
+                bomCharset = "UTF-16BE"; bomSkip = 2;
+            } else if (b1 == 0xFF && b2 == 0xFE) {
+                bomCharset = "UTF-16LE"; bomSkip = 2;
+            }
+        }
+    }
+    // apply BOM skip & override charsetName
+    if (bomCharset != null) {
+        byteData.reset();
+        byteData.position(bomSkip);
+        charsetName = bomCharset;
+    } else {
+        byteData.reset();
+    }
+
+    // ---- 2. Decode to string, possibly sniff meta if no charset yet ----
     Document doc = null;
-
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    String docData;
+    if (charsetName == null) {
+        // safe parse as default (UTF-8) to find a meta charset
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
         String foundCharset = null;
+        if (meta != null) {
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
+                    String cs = meta.attr("charset");
+                    if (Charset.isSupported(cs)) foundCharset = cs;
                 } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+                    // ignore invalid names
+                }
+            }
+        }
+        // re-decode if we found a different charset
+        if (foundCharset != null
+            && foundCharset.length() != 0
+            && !foundCharset.equalsIgnoreCase(defaultCharset)) {
+            charsetName = foundCharset.trim().replaceAll("[\"']", "");
+            byteData.rewind();
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+            doc = null;
+        }
+    } else {
+        Validate.notEmpty(charsetName,
+            "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        // manual UTF-32 decode if needed
+        if ("UTF-32BE".equalsIgnoreCase(charsetName) || "UTF-32LE".equalsIgnoreCase(charsetName)) {
+            boolean isLE = charsetName.toUpperCase().endsWith("LE");
+            ByteBuffer buf = byteData.duplicate();
+            buf.position(byteData.position());
+            StringBuilder sb = new StringBuilder();
+            while (buf.remaining() >= 4) {
+                int b1 = buf.get() & 0xFF;
+                int b2 = buf.get() & 0xFF;
+                int b3 = buf.get() & 0xFF;
+                int b4 = buf.get() & 0xFF;
+                int codePoint = isLE
+                    ? ((b4 << 24) | (b3 << 16) | (b2 << 8) | b1)
+                    : ((b1 << 24) | (b2 << 16) | (b3 << 8) | b4);
+                sb.append(Character.toChars(codePoint));
+            }
+            docData = sb.toString();
+        } else {
+            docData = Charset.forName(charsetName).decode(byteData).toString();
         }
     }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+    // ---- 3. Final parse if we haven't already ----
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
     }
+    // set output charset
+    doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     return doc;
 }
\ No newline at end of file
