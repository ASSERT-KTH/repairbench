diff --git a/tmp/230e90a1-f672-4320-a64f-ea0863c5a87b_buggy.java b/tmp/dac62312-7ee1-4550-9197-9765dc37a186_fixed.java
index aab19c0..9b0ce86 100644
--- a/tmp/230e90a1-f672-4320-a64f-ea0863c5a87b_buggy.java
+++ b/tmp/dac62312-7ee1-4550-9197-9765dc37a186_fixed.java
@@ -1,76 +1,70 @@
-    /**
-     * Compute a linear combination accurately.
-     * This method computes the sum of the products
-     * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
-     * It does so by using specific multiplication and addition algorithms to
-     * preserve accuracy and reduce cancellation effects.
-     * <br/>
-     * It is based on the 2005 paper
-     * <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547">
-     * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,
-     * and Shin'ichi Oishi published in SIAM J. Sci. Comput.
-     *
-     * @param a Factors.
-     * @param b Factors.
-     * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
-     * @throws DimensionMismatchException if arrays dimensions don't match
-     */
 public static double linearCombination(final double[] a, final double[] b)
     throws DimensionMismatchException {
+
     final int len = a.length;
     if (len != b.length) {
         throw new DimensionMismatchException(len, b.length);
     }
 
-            // Revert to scalar multiplication.
+    // Handle trivial cases (empty or single-element arrays)
+    if (len < 2) {
+        double sum = 0;
+        for (int i = 0; i < len; i++) {
+            sum += a[i] * b[i];
+        }
+        return sum;
+    }
 
+    // Accurate dot‐product for length >= 2
     final double[] prodHigh = new double[len];
     double prodLowSum = 0;
 
     for (int i = 0; i < len; i++) {
         final double ai = a[i];
         final double ca = SPLIT_FACTOR * ai;
         final double aHigh = ca - (ca - ai);
         final double aLow = ai - aHigh;
 
         final double bi = b[i];
         final double cb = SPLIT_FACTOR * bi;
         final double bHigh = cb - (cb - bi);
         final double bLow = bi - bHigh;
+
         prodHigh[i] = ai * bi;
-            final double prodLow = aLow * bLow - (((prodHigh[i] -
-                                                    aHigh * bHigh) -
-                                                   aLow * bHigh) -
-                                                  aHigh * bLow);
+        final double prodLow = aLow * bLow
+            - (((prodHigh[i] - aHigh * bHigh)
+                - aLow * bHigh)
+               - aHigh * bLow);
         prodLowSum += prodLow;
     }
 
-
-        final double prodHighCur = prodHigh[0];
+    // Sum the high parts with compensated summation
+    double prodHighPrev = prodHigh[0];
     double prodHighNext = prodHigh[1];
-        double sHighPrev = prodHighCur + prodHighNext;
-        double sPrime = sHighPrev - prodHighNext;
-        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
+    double sHigh = prodHighPrev + prodHighNext;
+    double sPrime = sHigh - prodHighNext;
+    double sLowSum = (prodHighNext - (sHigh - sPrime))
+                  + (prodHighPrev - sPrime);
 
     final int lenMinusOne = len - 1;
     for (int i = 1; i < lenMinusOne; i++) {
         prodHighNext = prodHigh[i + 1];
-            final double sHighCur = sHighPrev + prodHighNext;
-            sPrime = sHighCur - prodHighNext;
-            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
-            sHighPrev = sHighCur;
+        final double sHighNew = sHigh + prodHighNext;
+        sPrime = sHighNew - prodHighNext;
+        sLowSum += (prodHighNext - (sHighNew - sPrime))
+                 + (sHigh - sPrime);
+        sHigh = sHighNew;
     }
 
-        double result = sHighPrev + (prodLowSum + sLowSum);
+    double result = sHigh + (prodLowSum + sLowSum);
 
     if (Double.isNaN(result)) {
-            // either we have split infinite numbers or some coefficients were NaNs,
-            // just rely on the naive implementation and let IEEE754 handle this
+        // Fallback on naive dot-product if something went wrong
         result = 0;
-            for (int i = 0; i < len; ++i) {
+        for (int i = 0; i < len; i++) {
             result += a[i] * b[i];
         }
     }
 
     return result;
 }
\ No newline at end of file
