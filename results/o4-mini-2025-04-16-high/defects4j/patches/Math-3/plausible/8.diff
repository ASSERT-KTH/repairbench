diff --git a/tmp/95498e64-c040-46dd-818e-0f72b2a52979_buggy.java b/tmp/d3ee5f4c-aa94-4f7b-a996-4f291c3519a3_fixed.java
index aab19c0..639a8b3 100644
--- a/tmp/95498e64-c040-46dd-818e-0f72b2a52979_buggy.java
+++ b/tmp/d3ee5f4c-aa94-4f7b-a996-4f291c3519a3_fixed.java
@@ -1,76 +1,84 @@
 /**
  * Compute a linear combination accurately.
  * This method computes the sum of the products
  * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
  * It does so by using specific multiplication and addition algorithms to
  * preserve accuracy and reduce cancellation effects.
  * <br/>
  * It is based on the 2005 paper
  * <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547">
  * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,
  * and Shin'ichi Oishi published in SIAM J. Sci. Comput.
  *
  * @param a Factors.
  * @param b Factors.
  * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
  * @throws DimensionMismatchException if arrays dimensions don't match
  */
 public static double linearCombination(final double[] a, final double[] b)
     throws DimensionMismatchException {
+
     final int len = a.length;
     if (len != b.length) {
         throw new DimensionMismatchException(len, b.length);
     }
 
-            // Revert to scalar multiplication.
+    // Handle trivial cases (empty or single-element arrays) with a simple loop
+    if (len < 2) {
+        double simpleSum = 0.0;
+        for (int i = 0; i < len; i++) {
+            simpleSum += a[i] * b[i];
+        }
+        return simpleSum;
+    }
 
+    // Revert to scalar multiplication with error-free splitting
     final double[] prodHigh = new double[len];
     double prodLowSum = 0;
-
     for (int i = 0; i < len; i++) {
         final double ai = a[i];
         final double ca = SPLIT_FACTOR * ai;
         final double aHigh = ca - (ca - ai);
         final double aLow = ai - aHigh;
 
         final double bi = b[i];
         final double cb = SPLIT_FACTOR * bi;
         final double bHigh = cb - (cb - bi);
         final double bLow = bi - bHigh;
+
         prodHigh[i] = ai * bi;
-            final double prodLow = aLow * bLow - (((prodHigh[i] -
-                                                    aHigh * bHigh) -
-                                                   aLow * bHigh) -
-                                                  aHigh * bLow);
+        // prodLow collects the rounding error of the product
+        final double prodLow = aLow * bLow - (
+                (prodHigh[i] - aHigh * bHigh)
+              - (aLow * bHigh)
+              - (aHigh * bLow)
+        );
         prodLowSum += prodLow;
     }
 
+    // Accurately sum the high parts using a pairwise K-fold style summation
+    double sHighPrev = prodHigh[0] + prodHigh[1];
+    double sPrime = sHighPrev - prodHigh[1];
+    double sLowSum = (prodHigh[1] - (sHighPrev - sPrime))
+                   + (prodHigh[0] - sPrime);
 
-        final double prodHighCur = prodHigh[0];
-        double prodHighNext = prodHigh[1];
-        double sHighPrev = prodHighCur + prodHighNext;
-        double sPrime = sHighPrev - prodHighNext;
-        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
-
-        final int lenMinusOne = len - 1;
-        for (int i = 1; i < lenMinusOne; i++) {
-            prodHighNext = prodHigh[i + 1];
-            final double sHighCur = sHighPrev + prodHighNext;
-            sPrime = sHighCur - prodHighNext;
-            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
+    for (int i = 1; i < len - 1; i++) {
+        final double next = prodHigh[i + 1];
+        final double sHighCur = sHighPrev + next;
+        sPrime = sHighCur - next;
+        sLowSum += (next - (sHighCur - sPrime)) + (sHighPrev - sPrime);
         sHighPrev = sHighCur;
     }
 
     double result = sHighPrev + (prodLowSum + sLowSum);
 
     if (Double.isNaN(result)) {
-            // either we have split infinite numbers or some coefficients were NaNs,
-            // just rely on the naive implementation and let IEEE754 handle this
+        // Fall back to naive dot-product if infinities or NaNs appear
         result = 0;
-            for (int i = 0; i < len; ++i) {
+        for (int i = 0; i < len; i++) {
             result += a[i] * b[i];
         }
     }
 
     return result;
 }
\ No newline at end of file
