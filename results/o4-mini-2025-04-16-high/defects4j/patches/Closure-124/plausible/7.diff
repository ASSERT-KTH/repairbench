diff --git a/tmp/f379250c-7052-4022-b64d-0038cae5c75c_buggy.java b/tmp/2414f0e5-5b92-4bf5-afc5-3e0b418f148f_fixed.java
index 2573d30..f4b1532 100644
--- a/tmp/f379250c-7052-4022-b64d-0038cae5c75c_buggy.java
+++ b/tmp/2414f0e5-5b92-4bf5-afc5-3e0b418f148f_fixed.java
@@ -1,20 +1,26 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
+  // We only expect a property access here.
   Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  // Drill down the property chain to its base object.
+  Node base = node;
+  while (base.isGetProp()) {
+    base = base.getFirstChild();
+  }
+
+  // If the base is a name and that name is assigned to
+  // in the replacement subtree, it's not safe to replace.
+  if (base.isName() && isNameAssignedTo(base.getString(), replacement)) {
     return false;
   }
-
   return true;
 }
\ No newline at end of file
