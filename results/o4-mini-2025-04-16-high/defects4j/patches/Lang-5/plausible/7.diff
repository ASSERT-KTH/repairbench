diff --git a/tmp/9f24a005-ce31-47f5-b89d-548d435064ea_buggy.java b/tmp/ba23a438-b9c0-4184-b4b2-274f33f974f6_fixed.java
index f843d29..8c6a640 100644
--- a/tmp/9f24a005-ce31-47f5-b89d-548d435064ea_buggy.java
+++ b/tmp/ba23a438-b9c0-4184-b4b2-274f33f974f6_fixed.java
@@ -1,68 +1,67 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(final String str) {
     if (str == null) {
         return null;
     }
     final int len = str.length();
     if (len < 2) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
+    // Special case for locales with no language, e.g. _GB or _GB_POSIX
+    if (str.charAt(0) == '_') {
+        if (len < 3) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        String country = str.substring(1, 3);
+        if (!Character.isUpperCase(country.charAt(0)) || !Character.isUpperCase(country.charAt(1))) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        if (len == 3) {
+            return new Locale("", country);
+        }
+        // Must have underscore before variant
+        if (str.charAt(3) != '_') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        if (len == 4) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        String variant = str.substring(4);
+        return new Locale("", country, variant);
+    }
+    // Normal case: language[_COUNTRY[_VARIANT]]
+    char ch0 = str.charAt(0);
+    char ch1 = str.charAt(1);
     if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (len == 2) {
         return new Locale(str);
     }
     if (len < 5) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (str.charAt(2) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            final char ch3 = str.charAt(3);
+    char ch3 = str.charAt(3);
     if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
+        // language + variant only
+        String variant = str.substring(4);
+        return new Locale(str.substring(0, 2), "", variant);
     }
-            final char ch4 = str.charAt(4);
+    char ch4 = str.charAt(4);
     if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (len == 5) {
         return new Locale(str.substring(0, 2), str.substring(3, 5));
     }
     if (len < 7) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (str.charAt(5) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+    String variant = str.substring(6);
+    return new Locale(str.substring(0, 2), str.substring(3, 5), variant);
 }
\ No newline at end of file
