diff --git a/tmp/0fb691f1-bf84-4774-b5a1-faea67edaa08_buggy.java b/tmp/d2368266-e04a-45c2-bdb5-e8432ad3f745_fixed.java
index f843d29..c673ddc 100644
--- a/tmp/0fb691f1-bf84-4774-b5a1-faea67edaa08_buggy.java
+++ b/tmp/d2368266-e04a-45c2-bdb5-e8432ad3f745_fixed.java
@@ -1,68 +1,69 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(final String str) {
     if (str == null) {
         return null;
     }
     final int len = str.length();
+    // special case: no language, just country/variant, starts with underscore
+    if (len > 0 && str.charAt(0) == '_') {
+        // must be at least "_CC"
+        if (len < 3) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        final char c1 = str.charAt(1);
+        final char c2 = str.charAt(2);
+        if (!Character.isUpperCase(c1) || !Character.isUpperCase(c2)) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        final String country = str.substring(1, 3);
+        if (len == 3) {
+            return new Locale("", country);
+        }
+        // must have underscore before variant
+        if (str.charAt(3) != '_') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        // must have at least one variant character
+        if (len < 5) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        final String variant = str.substring(4);
+        return new Locale("", country, variant);
+    }
+    // normal case: language first
     if (len < 2) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     final char ch0 = str.charAt(0);
     final char ch1 = str.charAt(1);
     if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (len == 2) {
         return new Locale(str);
     }
     if (len < 5) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (str.charAt(2) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     final char ch3 = str.charAt(3);
     if (ch3 == '_') {
+        // language + "_" + "_" + variant
         return new Locale(str.substring(0, 2), "", str.substring(4));
     }
     final char ch4 = str.charAt(4);
     if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (len == 5) {
         return new Locale(str.substring(0, 2), str.substring(3, 5));
     }
     if (len < 7) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (str.charAt(5) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
 }
\ No newline at end of file
