diff --git a/tmp/0d67f40e-0e63-40a0-b9bb-6ada73775853_buggy.java b/tmp/9b4e906e-39f0-45f9-8177-9eb39eb359f2_fixed.java
index 1c53d31..4fb37d2 100644
--- a/tmp/0d67f40e-0e63-40a0-b9bb-6ada73775853_buggy.java
+++ b/tmp/9b4e906e-39f0-45f9-8177-9eb39eb359f2_fixed.java
@@ -1,20 +1,31 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
   TypeAdapter<?> typeAdapter;
   if (TypeAdapter.class.isAssignableFrom(value)) {
-      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
+    Class<? extends TypeAdapter<?>> typeAdapterClass =
+        (Class<? extends TypeAdapter<?>>) value;
+    typeAdapter = constructorConstructor
+        .get(TypeToken.get(typeAdapterClass))
+        .construct();
   } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
-      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+    Class<? extends TypeAdapterFactory> factoryClass =
+        (Class<? extends TypeAdapterFactory>) value;
+    TypeAdapterFactory factory = constructorConstructor
+        .get(TypeToken.get(factoryClass))
+        .construct();
+    typeAdapter = factory.create(gson, fieldType);
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+  // If a factory returned null, fall back (no adapter), otherwise respect the
+  // annotation's nullSafe flag.
+  if (typeAdapter == null) {
+    return null;
+  }
+  return annotation.nullSafe()
+      ? typeAdapter.nullSafe()
+      : typeAdapter;
 }
\ No newline at end of file
