diff --git a/tmp/a9831054-51ba-4988-bb89-fa44b93bfbc4_buggy.java b/tmp/e299ebd3-0cda-4e28-aa6e-b38b7fd49d22_fixed.java
index 1c53d31..4dd57d9 100644
--- a/tmp/a9831054-51ba-4988-bb89-fa44b93bfbc4_buggy.java
+++ b/tmp/e299ebd3-0cda-4e28-aa6e-b38b7fd49d22_fixed.java
@@ -1,20 +1,28 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
   TypeAdapter<?> typeAdapter;
-    if (TypeAdapter.class.isAssignableFrom(value)) {
-      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
-    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
-      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+
+  // Instantiate the user‚Äêsupplied class (either a TypeAdapter or a TypeAdapterFactory)
+  Object instance = constructorConstructor
+      .get(TypeToken.get((Class<?>) value))
+      .construct();
+
+  if (instance instanceof TypeAdapter) {
+    typeAdapter = (TypeAdapter<?>) instance;
+  } else if (instance instanceof TypeAdapterFactory) {
+    typeAdapter = ((TypeAdapterFactory) instance).create(gson, fieldType);
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+
+  // If the factory returned null, skip this adapter and let Gson fall back
+  if (typeAdapter == null) {
+    return null;
+  }
+
+  // Honor the nullSafe flag on the annotation
+  return annotation.nullSafe() ? typeAdapter.nullSafe() : typeAdapter;
 }
\ No newline at end of file
