diff --git a/tmp/54bd8809-8d6a-409b-b300-10c0f7fb8fb6_buggy.java b/tmp/9b5cfd6b-3c1c-4cd2-8885-197e12c1d226_fixed.java
index 4b163f6..cf508a3 100644
--- a/tmp/54bd8809-8d6a-409b-b300-10c0f7fb8fb6_buggy.java
+++ b/tmp/9b5cfd6b-3c1c-4cd2-8885-197e12c1d226_fixed.java
@@ -1,28 +1,34 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+     * the requested number of bytes has been skipped, this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
-     * @param input stream to skip bytes in
+     * @param input the stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
-     * @throws IOException
+     * @throws IOException if an I/O error occurs
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        long remaining = numToSkip;
+        while (remaining > 0) {
+            long skipped = input.skip(remaining);
+            if (skipped > 0) {
+                remaining -= skipped;
+            } else {
+                // skip() returned 0; fall back to read()
+                int b = input.read();
+                if (b < 0) {
+                    // end of stream reached
                     break;
                 }
-            numToSkip -= skipped;
+                remaining--;
             }
-            
-        return available - numToSkip;
+        }
+        return numToSkip - remaining;
     }
\ No newline at end of file
