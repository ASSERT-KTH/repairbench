diff --git a/tmp/cb4afc36-0af1-4101-b4e4-56cbee0c3175_buggy.java b/tmp/970f971f-7cf3-42e3-a4f3-2d2ce5bae908_fixed.java
index 4b163f6..1314160 100644
--- a/tmp/cb4afc36-0af1-4101-b4e4-56cbee0c3175_buggy.java
+++ b/tmp/970f971f-7cf3-42e3-a4f3-2d2ce5bae908_fixed.java
@@ -1,28 +1,33 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+ * the requested number of bytes has been skipped this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
+    long remaining = numToSkip;
+    while (remaining > 0) {
+        long skipped = input.skip(remaining);
+        if (skipped > 0) {
+            remaining -= skipped;
+        } else {
+            // fallback to read when skip returns 0
+            int b = input.read();
+            if (b == -1) {
+                break; // end of stream
             }
-            numToSkip -= skipped;
+            remaining--;
         }
-            
-        return available - numToSkip;
+    }
+    return numToSkip - remaining;
 }
\ No newline at end of file
