diff --git a/tmp/c2b74101-554b-49ef-94f0-01fcef976d27_buggy.java b/tmp/4ca1e312-8bf8-48b5-bcf7-7979e5b59062_fixed.java
index ee10759..31808f8 100644
--- a/tmp/c2b74101-554b-49ef-94f0-01fcef976d27_buggy.java
+++ b/tmp/4ca1e312-8bf8-48b5-bcf7-7979e5b59062_fixed.java
@@ -1,151 +1,163 @@
-    /**
-     * Method called to figure out settable properties for the
-     * bean deserializer to use.
-     *<p>
-     * Note: designed to be overridable, and effort is made to keep interface
-     * similar between versions.
-     */
+@Override
 protected void addBeanProps(DeserializationContext ctxt,
         BeanDescription beanDesc, BeanDeserializerBuilder builder)
     throws JsonMappingException
 {
     final boolean isConcrete = !beanDesc.getType().isAbstract();
     final SettableBeanProperty[] creatorProps = isConcrete
             ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())
             : null;
     final boolean hasCreatorProps = (creatorProps != null);
 
-        // 01-May-2016, tatu: Which base type to use here gets tricky, since
-        //   it may often make most sense to use general type for overrides,
-        //   but what we have here may be more specific impl type. But for now
-        //   just use it as is.
+    // 1) class‐level ignorals (@JsonIgnoreProperties)
     JsonIgnoreProperties.Value ignorals = ctxt.getConfig()
             .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),
                     beanDesc.getClassInfo());
     Set<String> ignored;
-
     if (ignorals != null) {
         boolean ignoreAny = ignorals.getIgnoreUnknown();
         builder.setIgnoreUnknownProperties(ignoreAny);
-            // Or explicit/implicit definitions?
         ignored = ignorals.getIgnored();
         for (String propName : ignored) {
             builder.addIgnorable(propName);
         }
     } else {
         ignored = Collections.emptySet();
     }
 
-        // Also, do we have a fallback "any" setter?
+    // 2) any‐setter
     AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();
     AnnotatedMember anySetterField = null;
     if (anySetterMethod != null) {
         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));
-        }
-        else {
+    } else {
         anySetterField = beanDesc.findAnySetterField();
         if (anySetterField != null) {
             builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));
         }
     }
-        // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter
-        // Implicit ones via @JsonIgnore and equivalent?
+    // also skip explicit ignores from BeanDescription if no any‐setter
     if (anySetterMethod == null && anySetterField == null) {
         Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();
         if (ignored2 != null) {
             for (String propName : ignored2) {
-                    // allow ignoral of similarly named JSON property, but do not force;
-                    // latter means NOT adding this to 'ignored':
                 builder.addIgnorable(propName);
             }
         }
     }
+
     final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)
             && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);
 
-        // Ok: let's then filter out property definitions
-        List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,
-                beanDesc, builder, beanDesc.findProperties(), ignored);
+    // 3) manually filter bean properties so that @JsonIgnore on getter
+    //    does NOT block a non‐ignored setter
+    List<BeanPropertyDefinition> raw = beanDesc.findProperties();
+    List<BeanPropertyDefinition> propDefs = new ArrayList<>(raw.size());
+    for (BeanPropertyDefinition propDef : raw) {
+        String name = propDef.getName();
+        // a) skip class‐level ignores
+        if (ignored.contains(name)) {
+            continue;
+        }
+        // b) skip explicit @JsonIgnore only if it applies to setter/field (not mere getter)
+        if (propDef.isExplicitlyIgnored()) {
+            AnnotatedMethod setter = propDef.getSetter();
+            AnnotatedField  field  = propDef.getField();
+            boolean skip = true;
+            if (setter != null
+                && setter.getAnnotation(com.fasterxml.jackson.annotation.JsonIgnore.class) == null) {
+                // setter present and not ignored => keep
+                skip = false;
+            }
+            if (skip && field != null
+                && field.getAnnotation(com.fasterxml.jackson.annotation.JsonIgnore.class) == null) {
+                // field present and not ignored => keep
+                skip = false;
+            }
+            if (skip) {
+                builder.addIgnorable(name);
+                continue;
+            }
+        }
+        // c) require at least one mutator: setter or field, or (optionally) collection/map getter
+        if (propDef.hasSetter() || propDef.hasField()) {
+            // OK
+        } else if (useGettersAsSetters && propDef.hasGetter()) {
+            AnnotatedMethod gm = propDef.getGetter();
+            Class<?> rt = gm.getRawType();
+            if (Collection.class.isAssignableFrom(rt)
+                    || Map.class.isAssignableFrom(rt)) {
+                // OK, will be treated as setterless
+            } else {
+                continue;
+            }
+        } else {
+            continue;
+        }
+        propDefs.add(propDef);
+    }
 
-        // After which we can let custom code change the set
+    // 4) allow custom modifiers to tweak property list
     if (_factoryConfig.hasDeserializerModifiers()) {
         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
             propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);
         }
     }
 
-        // At which point we still have all kinds of properties; not all with mutators:
+    // 5) build SettableBeanProperty instances
     for (BeanPropertyDefinition propDef : propDefs) {
         SettableBeanProperty prop = null;
-            /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,
-             *   we need to do linkage (as per [databind#318]), and so need to start with
-             *   other types, and only then create constructor parameter, if any.
-             */
         if (propDef.hasSetter()) {
-                JavaType propertyType = propDef.getSetter().getParameterType(0);
-                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
+            JavaType type = propDef.getSetter().getParameterType(0);
+            prop = constructSettableProperty(ctxt, beanDesc, propDef, type);
         } else if (propDef.hasField()) {
-                JavaType propertyType = propDef.getField().getType();
-                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
+            JavaType type = propDef.getField().getType();
+            prop = constructSettableProperty(ctxt, beanDesc, propDef, type);
         } else if (useGettersAsSetters && propDef.hasGetter()) {
-                /* May also need to consider getters
-                 * for Map/Collection properties; but with lowest precedence
-                 */
             AnnotatedMethod getter = propDef.getGetter();
-                // should only consider Collections and Maps, for now?
-                Class<?> rawPropertyType = getter.getRawType();
-                if (Collection.class.isAssignableFrom(rawPropertyType)
-                        || Map.class.isAssignableFrom(rawPropertyType)) {
+            Class<?> rt = getter.getRawType();
+            if (Collection.class.isAssignableFrom(rt)
+                    || Map.class.isAssignableFrom(rt)) {
                 prop = constructSetterlessProperty(ctxt, beanDesc, propDef);
             }
         }
-            // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types
-            //   (since they are never used anyway)
+        // handle creator‐properties (constructor args)
         if (hasCreatorProps && propDef.hasConstructorParameter()) {
-                /* If property is passed via constructor parameter, we must
-                 * handle things in special way. Not sure what is the most optimal way...
-                 * for now, let's just call a (new) method in builder, which does nothing.
-                 */
-                // but let's call a method just to allow custom builders to be aware...
-                final String name = propDef.getName();
+            String pname = propDef.getName();
             CreatorProperty cprop = null;
             if (creatorProps != null) {
                 for (SettableBeanProperty cp : creatorProps) {
-                        if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {
+                    if (pname.equals(cp.getName()) && cp instanceof CreatorProperty) {
                         cprop = (CreatorProperty) cp;
                         break;
                     }
                 }
             }
             if (cprop == null) {
-                    List<String> n = new ArrayList<>();
+                List<String> names = new ArrayList<>();
                 for (SettableBeanProperty cp : creatorProps) {
-                        n.add(cp.getName());
+                    names.add(cp.getName());
                 }
                 ctxt.reportBadPropertyDefinition(beanDesc, propDef,
                         "Could not find creator property with name '%s' (known Creator properties: %s)",
-                            name, n);
+                        pname, names);
                 continue;
             }
             if (prop != null) {
                 cprop.setFallbackSetter(prop);
             }
             prop = cprop;
             builder.addCreatorProperty(cprop);
             continue;
         }
-
+        // finally add it
         if (prop != null) {
             Class<?>[] views = propDef.findViews();
-                if (views == null) {
-                    // one more twist: if default inclusion disabled, need to force empty set of views
-                    if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {
+            if (views == null && !ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {
                 views = NO_VIEWS;
             }
-                }
-                // one more thing before adding to builder: copy any metadata
             prop.setViews(views);
             builder.addProperty(prop);
         }
     }
 }
\ No newline at end of file
