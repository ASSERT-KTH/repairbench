diff --git a/tmp/29ba2523-d4e3-411c-b971-34a539e86af0_buggy.java b/tmp/beb73306-5597-472a-839b-75df2213954e_fixed.java
index 139579d..fb1dfd3 100644
--- a/tmp/29ba2523-d4e3-411c-b971-34a539e86af0_buggy.java
+++ b/tmp/beb73306-5597-472a-839b-75df2213954e_fixed.java
@@ -1,43 +1,23 @@
 // performance sensitive
 public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
-        final int len = classAttr.length();
+    final String classAttr = attr("class");
+    if (classAttr.isEmpty()) {
+        return false;
+    }
     final int wantLen = className.length();
-
-        if (len == 0 || len < wantLen) {
-            return false;
-        }
-
-        // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
-            return className.equalsIgnoreCase(classAttr);
-        }
-
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
-        boolean inClass = false;
+    final int len = classAttr.length();
     int start = 0;
-        for (int i = 0; i < len; i++) {
-            if (Character.isWhitespace(classAttr.charAt(i))) {
-                if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
-                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+    // scan through the classAttr string once, matching tokens against className
+    for (int i = 0; i <= len; i++) {
+        if (i == len || Character.isWhitespace(classAttr.charAt(i))) {
+            // we've reached the end of a token [start, i)
+            if (i - start == wantLen
+                && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                 return true;
             }
-                    inClass = false;
+            // advance to the start of the next token
+            start = i + 1;
         }
-            } else {
-                if (!inClass) {
-                    // we're in a class name : keep the start of the substring
-                    inClass = true;
-                    start = i;
     }
-            }
-        }
-
-        // check the last entry
-        if (inClass && len - start == wantLen) {
-            return classAttr.regionMatches(true, start, className, 0, wantLen);
-        }
-
     return false;
 }
\ No newline at end of file
