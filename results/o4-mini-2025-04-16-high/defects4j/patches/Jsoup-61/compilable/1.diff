diff --git a/tmp/2f6f20db-8f4b-4a57-bbb7-625181911fd7_buggy.java b/tmp/a3d269c9-f336-4680-ac7f-e9c95c3c6f0d_fixed.java
index 139579d..4b676e8 100644
--- a/tmp/2f6f20db-8f4b-4a57-bbb7-625181911fd7_buggy.java
+++ b/tmp/a3d269c9-f336-4680-ac7f-e9c95c3c6f0d_fixed.java
@@ -1,43 +1,33 @@
 // performance sensitive
 public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
-        final int len = classAttr.length();
-        final int wantLen = className.length();
-
-        if (len == 0 || len < wantLen) {
+    if (className == null || className.length() == 0) {
         return false;
     }
-
-        // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
-            return className.equalsIgnoreCase(classAttr);
+    String classAttr = attributes.get("class");
+    if (classAttr == null || classAttr.length() == 0) {
+        return false;
     }
 
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
-        boolean inClass = false;
-        int start = 0;
-        for (int i = 0; i < len; i++) {
-            if (Character.isWhitespace(classAttr.charAt(i))) {
-                if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
-                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+    int wantLen = className.length();
+    int len = classAttr.length();
+    int pos = 0;
+    // walk through the classAttr, tokenizing on whitespace
+    while (pos < len) {
+        // skip any leading whitespace
+        while (pos < len && Character.isWhitespace(classAttr.charAt(pos))) {
+            pos++;
+        }
+        if (pos >= len) break;
+        int start = pos;
+        // scan until end of this token
+        while (pos < len && !Character.isWhitespace(classAttr.charAt(pos))) {
+            pos++;
+        }
+        // if the token length matches, compare ignoring case
+        if (pos - start == wantLen
+            && classAttr.regionMatches(true, start, className, 0, wantLen)) {
             return true;
         }
-                    inClass = false;
     }
-            } else {
-                if (!inClass) {
-                    // we're in a class name : keep the start of the substring
-                    inClass = true;
-                    start = i;
-                }
-            }
-        }
-
-        // check the last entry
-        if (inClass && len - start == wantLen) {
-            return classAttr.regionMatches(true, start, className, 0, wantLen);
-        }
-
     return false;
 }
\ No newline at end of file
