diff --git a/tmp/9a2fedcf-335f-4677-98bc-a3f91e27eaed_buggy.java b/tmp/ebe47c4c-02ed-44a3-ad20-ef4c416af0c1_fixed.java
index 139579d..25d05b1 100644
--- a/tmp/9a2fedcf-335f-4677-98bc-a3f91e27eaed_buggy.java
+++ b/tmp/ebe47c4c-02ed-44a3-ad20-ef4c416af0c1_fixed.java
@@ -1,43 +1,22 @@
 // performance sensitive
 public boolean hasClass(String className) {
-        final String classAttr = attributes.get("class");
-        final int len = classAttr.length();
-        final int wantLen = className.length();
-
-        if (len == 0 || len < wantLen) {
-            return false;
-        }
-
-        // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
-            return className.equalsIgnoreCase(classAttr);
-        }
-
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
-        boolean inClass = false;
-        int start = 0;
-        for (int i = 0; i < len; i++) {
-            if (Character.isWhitespace(classAttr.charAt(i))) {
-                if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
-                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+    if (className == null || className.isEmpty()) return false;
+    String classAttr = attributes.get("class");
+    if (classAttr == null || classAttr.isEmpty()) return false;
+    int len = classAttr.length(), wantLen = className.length();
+    int i = 0;
+    while (i < len) {
+        // skip any leading whitespace
+        while (i < len && Character.isWhitespace(classAttr.charAt(i))) i++;
+        if (i >= len) break;
+        // mark the start of the next class token
+        int start = i;
+        while (i < len && !Character.isWhitespace(classAttr.charAt(i))) i++;
+        // if the length matches, compare ignoring case
+        if (i - start == wantLen
+            && classAttr.regionMatches(true, start, className, 0, wantLen)) {
             return true;
         }
-                    inClass = false;
     }
-            } else {
-                if (!inClass) {
-                    // we're in a class name : keep the start of the substring
-                    inClass = true;
-                    start = i;
-                }
-            }
-        }
-
-        // check the last entry
-        if (inClass && len - start == wantLen) {
-            return classAttr.regionMatches(true, start, className, 0, wantLen);
-        }
-
     return false;
 }
\ No newline at end of file
