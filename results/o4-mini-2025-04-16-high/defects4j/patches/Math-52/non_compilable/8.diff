diff --git a/tmp/91738cae-9288-4de6-8bff-025224186ac3_buggy.java b/tmp/b81bda97-e38e-4698-a308-de46ddbc6ade_fixed.java
index 0e110fe..4a29235 100644
--- a/tmp/91738cae-9288-4de6-8bff-025224186ac3_buggy.java
+++ b/tmp/b81bda97-e38e-4698-a308-de46ddbc6ade_fixed.java
@@ -1,96 +1,105 @@
 /** Build the rotation that transforms a pair of vector into another pair.
-
+ *
  * <p>Except for possible scale factors, if the instance were applied to
  * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
  * (v<sub>1</sub>, v<sub>2</sub>).</p>
-
+ *
  * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
  * not the same as the angular separation between v<sub>1</sub> and
  * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
  * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
  * v<sub>2</sub>) plane.</p>
-
+ *
  * @param u1 first vector of the origin pair
  * @param u2 second vector of the origin pair
  * @param v1 desired image of u1 by the rotation
  * @param v2 desired image of u2 by the rotation
  * @exception IllegalArgumentException if the norm of one of the vectors is zero
  */
 public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
-  // norms computation
+    // basic zero‐norm checks
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
+    if (u1u1 == 0 || u2u2 == 0 || v1v1 == 0 || v2v2 == 0) {
+        throw MathRuntimeException.createIllegalArgumentException(
+              LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
-
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
-
-  // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
-
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+    // build an orthonormal basis (u1Hat, u2Hat, u3Hat) from (u1, u2)
+    double u1Norm = FastMath.sqrt(u1u1);
+    Vector3D u1Hat  = new Vector3D(1.0 / u1Norm, u1);
+    double proj12  = u1Hat.dotProduct(u2);
+    Vector3D u2Proj = u2.subtract(u1Hat.scalarMultiply(proj12));
+    double u2ProjNorm = FastMath.sqrt(u2Proj.getNormSq());
+    if (u2ProjNorm == 0) {
+        // degenerate case, fallback to single-vector constructor
+        Rotation r = new Rotation(u1Hat, v1.normalize());
+        this.q0 = r.q0; this.q1 = r.q1; this.q2 = r.q2; this.q3 = r.q3;
+        return;
+    }
+    Vector3D u2Hat = u2Proj.scalarMultiply(1.0 / u2ProjNorm);
+    Vector3D u3Hat = Vector3D.crossProduct(u1Hat, u2Hat);
 
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
-        q0 = 1.0;
-        q1 = 0.0;
-        q2 = 0.0;
-        q3 = 0.0;
+    // build an orthonormal basis (v1Hat, v2Hat, v3Hat) from (v1, v2)
+    Vector3D v1Hat  = v1.normalize();
+    double proj34  = v1Hat.dotProduct(v2);
+    Vector3D v2Proj = v2.subtract(v1Hat.scalarMultiply(proj34));
+    double v2ProjNorm = FastMath.sqrt(v2Proj.getNormSq());
+    if (v2ProjNorm == 0) {
+        // degenerate case, fallback to single-vector constructor
+        Rotation r = new Rotation(u1Hat, v1Hat);
+        this.q0 = r.q0; this.q1 = r.q1; this.q2 = r.q2; this.q3 = r.q3;
         return;
     }
+    Vector3D v2Hat = v2Proj.scalarMultiply(1.0 / v2ProjNorm);
+    Vector3D v3Hat = Vector3D.crossProduct(v1Hat, v2Hat);
 
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
+    // rotation matrix M = V * U^T
+    double m00 = v1Hat.dotProduct(u1Hat);
+    double m01 = v1Hat.dotProduct(u2Hat);
+    double m02 = v1Hat.dotProduct(u3Hat);
+    double m10 = v2Hat.dotProduct(u1Hat);
+    double m11 = v2Hat.dotProduct(u2Hat);
+    double m12 = v2Hat.dotProduct(u3Hat);
+    double m20 = v3Hat.dotProduct(u1Hat);
+    double m21 = v3Hat.dotProduct(u2Hat);
+    double m22 = v3Hat.dotProduct(u3Hat);
 
+    // convert rotation matrix to quaternion (q0 = scalar part)
+    double trace = m00 + m11 + m22;
+    if (trace >= 0) {
+        double s = FastMath.sqrt(trace + 1.0) * 2.0;
+        q0 = 0.25 * s;
+        q1 = (m21 - m12) / s;
+        q2 = (m02 - m20) / s;
+        q3 = (m10 - m01) / s;
+    } else if (m00 > m11 && m00 > m22) {
+        double s = FastMath.sqrt(1.0 + m00 - m11 - m22) * 2.0;
+        q0 = (m21 - m12) / s;
+        q1 = 0.25 * s;
+        q2 = (m01 + m10) / s;
+        q3 = (m02 + m20) / s;
+    } else if (m11 > m22) {
+        double s = FastMath.sqrt(1.0 + m11 - m00 - m22) * 2.0;
+        q0 = (m02 - m20) / s;
+        q1 = (m01 + m10) / s;
+        q2 = 0.25 * s;
+        q3 = (m12 + m21) / s;
+    } else {
+        double s = FastMath.sqrt(1.0 + m22 - m00 - m11) * 2.0;
+        q0 = (m10 - m01) / s;
+        q1 = (m02 + m20) / s;
+        q2 = (m12 + m21) / s;
+        q3 = 0.25 * s;
     }
 
+    // normalize quaternion and ensure scalar part is non-negative
+    double norm = FastMath.sqrt(q0*q0 + q1*q1 + q2*q2 + q3*q3);
+    q0 /= norm; q1 /= norm; q2 /= norm; q3 /= norm;
+    if (q0 < 0) {
+        q0 = -q0; q1 = -q1; q2 = -q2; q3 = -q3;
     }
-
-  // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
-
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
-
 }
\ No newline at end of file
