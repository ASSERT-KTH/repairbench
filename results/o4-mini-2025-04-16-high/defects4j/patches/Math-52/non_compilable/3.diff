diff --git a/tmp/7bdbdfc9-bd7e-442a-9c80-6c9fa523a6b1_buggy.java b/tmp/78ed2775-00bc-43b0-9c70-f02a210fce29_fixed.java
index 0e110fe..0b658e0 100644
--- a/tmp/7bdbdfc9-bd7e-442a-9c80-6c9fa523a6b1_buggy.java
+++ b/tmp/78ed2775-00bc-43b0-9c70-f02a210fce29_fixed.java
@@ -1,96 +1,106 @@
-  /** Build the rotation that transforms a pair of vector into another pair.
-
-   * <p>Except for possible scale factors, if the instance were applied to
-   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
-   * (v<sub>1</sub>, v<sub>2</sub>).</p>
-
-   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
-   * not the same as the angular separation between v<sub>1</sub> and
-   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
-   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
-   * v<sub>2</sub>) plane.</p>
-
-   * @param u1 first vector of the origin pair
-   * @param u2 second vector of the origin pair
-   * @param v1 desired image of u1 by the rotation
-   * @param v2 desired image of u2 by the rotation
-   * @exception IllegalArgumentException if the norm of one of the vectors is zero
-   */
 public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
-  // norms computation
+    // check input vectors have non-zero norm
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
+    if (u1u1 == 0.0 || u2u2 == 0.0 || v1v1 == 0.0 || v2v2 == 0.0) {
+        throw MathRuntimeException.createIllegalArgumentException(
+            LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
-  // normalize v1 in order to have (v1'|v1') = (u1|u1)
-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
-
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
-  double u1u2   = u1.dotProduct(u2);
-  double v1v2   = v1.dotProduct(v2);
-  double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
-  double alpha  = coeffU - beta * coeffV;
-  v2 = new Vector3D(alpha, v1, beta, v2);
-
-  // preliminary computation
-  Vector3D uRef  = u1;
-  Vector3D vRef  = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
-
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
-
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
-        q0 = 1.0;
-        q1 = 0.0;
-        q2 = 0.0;
-        q3 = 0.0;
-        return;
+    // build orthonormal basis (e1,e2,e3) from (u1,u2)
+    double invNormU1 = 1.0 / FastMath.sqrt(u1u1);
+    Vector3D e1 = new Vector3D(invNormU1, u1);
+    double dot = e1.dotProduct(u2);
+    Vector3D tmp = u2.subtract(new Vector3D(dot, e1));
+    double tmpSq = tmp.getNormSq();
+    if (tmpSq == 0.0) {
+        // u1 and u2 are colinear, pick an arbitrary perpendicular direction
+        tmp = e1.crossProduct(Vector3D.PLUS_I);
+        if (tmp.getNormSq() == 0.0) {
+            tmp = e1.crossProduct(Vector3D.PLUS_J);
         }
-
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
-
+        tmpSq = tmp.getNormSq();
     }
+    double invNormU2 = 1.0 / FastMath.sqrt(tmpSq);
+    Vector3D e2 = new Vector3D(invNormU2, tmp);
+    Vector3D e3 = e1.crossProduct(e2);
 
+    // build orthonormal basis (f1,f2,f3) from (v1,v2)
+    double invNormV1 = 1.0 / FastMath.sqrt(v1v1);
+    Vector3D f1 = new Vector3D(invNormV1, v1);
+    dot = f1.dotProduct(v2);
+    tmp = v2.subtract(new Vector3D(dot, f1));
+    tmpSq = tmp.getNormSq();
+    if (tmpSq == 0.0) {
+        // v1 and v2 are colinear, pick an arbitrary perpendicular direction
+        tmp = f1.crossProduct(Vector3D.PLUS_I);
+        if (tmp.getNormSq() == 0.0) {
+            tmp = f1.crossProduct(Vector3D.PLUS_J);
+        }
+        tmpSq = tmp.getNormSq();
     }
+    double invNormV2 = 1.0 / FastMath.sqrt(tmpSq);
+    Vector3D f2 = new Vector3D(invNormV2, tmp);
+    Vector3D f3 = f1.crossProduct(f2);
 
-  // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
+    // compute rotation matrix M = B2 * B1^T
+    double m00 = f1.getX()*e1.getX() + f2.getX()*e2.getX() + f3.getX()*e3.getX();
+    double m01 = f1.getX()*e1.getY() + f2.getX()*e2.getY() + f3.getX()*e3.getY();
+    double m02 = f1.getX()*e1.getZ() + f2.getX()*e2.getZ() + f3.getX()*e3.getZ();
+    double m10 = f1.getY()*e1.getX() + f2.getY()*e2.getX() + f3.getY()*e3.getX();
+    double m11 = f1.getY()*e1.getY() + f2.getY()*e2.getY() + f3.getY()*e3.getY();
+    double m12 = f1.getY()*e1.getZ() + f2.getY()*e2.getZ() + f3.getY()*e3.getZ();
+    double m20 = f1.getZ()*e1.getX() + f2.getZ()*e2.getX() + f3.getZ()*e3.getX();
+    double m21 = f1.getZ()*e1.getY() + f2.getZ()*e2.getY() + f3.getZ()*e3.getY();
+    double m22 = f1.getZ()*e1.getZ() + f2.getZ()*e2.getZ() + f3.getZ()*e3.getZ();
 
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+    // extract quaternion from rotation matrix
+    double trace = m00 + m11 + m22;
+    if (trace >= 0.0) {
+        double s = FastMath.sqrt(trace + 1.0);
+        q0 = 0.5 * s;
+        double invS = 0.5 / s;
+        q1 = (m21 - m12) * invS;
+        q2 = (m02 - m20) * invS;
+        q3 = (m10 - m01) * invS;
+    } else {
+        if (m00 > m11 && m00 > m22) {
+            double s = FastMath.sqrt(1.0 + m00 - m11 - m22);
+            q1 = 0.5 * s;
+            double invS = 0.5 / s;
+            q2 = (m01 + m10) * invS;
+            q3 = (m02 + m20) * invS;
+            q0 = (m21 - m12) * invS;
+        } else if (m11 > m22) {
+            double s = FastMath.sqrt(1.0 + m11 - m00 - m22);
+            q2 = 0.5 * s;
+            double invS = 0.5 / s;
+            q1 = (m01 + m10) * invS;
+            q3 = (m12 + m21) * invS;
+            q0 = (m02 - m20) * invS;
+        } else {
+            double s = FastMath.sqrt(1.0 + m22 - m00 - m11);
+            q3 = 0.5 * s;
+            double invS = 0.5 / s;
+            q1 = (m02 + m20) * invS;
+            q2 = (m12 + m21) * invS;
+            q0 = (m10 - m01) * invS;
+        }
+    }
 
+    // normalize and enforce q0 >= 0
+    double normQ = FastMath.sqrt(q0*q0 + q1*q1 + q2*q2 + q3*q3);
+    q0 /= normQ;
+    q1 /= normQ;
+    q2 /= normQ;
+    q3 /= normQ;
+    if (q0 < 0) {
+        q0 = -q0;
+        q1 = -q1;
+        q2 = -q2;
+        q3 = -q3;
+    }
 }
\ No newline at end of file
