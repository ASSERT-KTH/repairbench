diff --git a/tmp/808bee6d-b5b6-46a3-ba44-b33105a07c51_buggy.java b/tmp/2388717a-6d8e-4b1a-90e0-825b797e05fb_fixed.java
index 5b8a4d2..285eb81 100644
--- a/tmp/808bee6d-b5b6-46a3-ba44-b33105a07c51_buggy.java
+++ b/tmp/2388717a-6d8e-4b1a-90e0-825b797e05fb_fixed.java
@@ -1,12 +1,29 @@
 /**
  * Creates a period from the given millisecond duration with the standard period type
  * and ISO rules, ensuring that the calculation is performed with the time-only period type.
-     * <p>
-     * The calculation uses the hour, minute, second and millisecond fields.
  *
  * @param duration  the duration, in milliseconds
  */
 protected BasePeriod(long duration) {
-        this(duration, null, null);
-        // bug [3264409]
+    // Always use UTC for a pure duration‐to‐time conversion
+    Chronology chrono = DateTimeUtils.getChronology(null).withUTC();
+    this.iChronology = chrono;
+    // Store the standard period type (years, months, weeks, days, hours, minutes, seconds, millis)
+    this.iType = DateTimeUtils.getPeriodType(null);
+
+    // Break the duration into hours, minutes, seconds and millis only
+    long hours   = duration / DateTimeConstants.MILLIS_PER_HOUR;
+    long rem     = duration - hours * DateTimeConstants.MILLIS_PER_HOUR;
+    long minutes = rem     / DateTimeConstants.MILLIS_PER_MINUTE;
+    rem          = rem     - minutes * DateTimeConstants.MILLIS_PER_MINUTE;
+    long seconds = rem     / DateTimeConstants.MILLIS_PER_SECOND;
+    int millis   = (int)(rem - seconds * DateTimeConstants.MILLIS_PER_SECOND);
+
+    // Populate an array of the correct size, leaving all date‐based fields at zero
+    int[] values = new int[this.iType.size()];
+    values[this.iType.indexOf(DurationFieldType.hours())]   = (int) hours;
+    values[this.iType.indexOf(DurationFieldType.minutes())] = (int) minutes;
+    values[this.iType.indexOf(DurationFieldType.seconds())] = (int) seconds;
+    values[this.iType.indexOf(DurationFieldType.millis())]  =       millis;
+    this.iValues = values;
 }
\ No newline at end of file
