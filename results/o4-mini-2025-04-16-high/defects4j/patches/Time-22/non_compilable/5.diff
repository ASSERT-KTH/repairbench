diff --git a/tmp/2ee9cb07-20bf-49e2-bce7-29984127a773_buggy.java b/tmp/7c5d25c3-06dc-4fc2-9bb8-eaae32b9d7ed_fixed.java
index 5b8a4d2..e058409 100644
--- a/tmp/2ee9cb07-20bf-49e2-bce7-29984127a773_buggy.java
+++ b/tmp/7c5d25c3-06dc-4fc2-9bb8-eaae32b9d7ed_fixed.java
@@ -1,12 +1,29 @@
 /**
  * Creates a period from the given millisecond duration with the standard period type
  * and ISO rules, ensuring that the calculation is performed with the time-only period type.
  * <p>
  * The calculation uses the hour, minute, second and millisecond fields.
  *
  * @param duration  the duration, in milliseconds
  */
 protected BasePeriod(long duration) {
-        this(duration, null, null);
-        // bug [3264409]
+    long millisRemaining = duration;
+    boolean negative = millisRemaining < 0;
+    if (negative) {
+        millisRemaining = -millisRemaining;
+    }
+    int hours = (int)(millisRemaining / DateTimeConstants.MILLIS_PER_HOUR);
+    millisRemaining -= (long) hours * DateTimeConstants.MILLIS_PER_HOUR;
+    int minutes = (int)(millisRemaining / DateTimeConstants.MILLIS_PER_MINUTE);
+    millisRemaining -= (long) minutes * DateTimeConstants.MILLIS_PER_MINUTE;
+    int seconds = (int)(millisRemaining / DateTimeConstants.MILLIS_PER_SECOND);
+    int millis = (int)(millisRemaining - (long) seconds * DateTimeConstants.MILLIS_PER_SECOND);
+    if (negative) {
+        hours = -hours;
+        minutes = -minutes;
+        seconds = -seconds;
+        millis = -millis;
+    }
+    // years, months, weeks and days all set to zero
+    this(0, 0, 0, 0, hours, minutes, seconds, millis);
 }
\ No newline at end of file
