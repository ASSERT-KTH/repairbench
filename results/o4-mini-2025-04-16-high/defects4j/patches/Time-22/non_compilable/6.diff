diff --git a/tmp/3c366289-7225-4e61-b793-1f6494801f98_buggy.java b/tmp/afc5b6e7-9730-4003-af42-2c3fe3eb9de6_fixed.java
index 5b8a4d2..4c40094 100644
--- a/tmp/3c366289-7225-4e61-b793-1f6494801f98_buggy.java
+++ b/tmp/afc5b6e7-9730-4003-af42-2c3fe3eb9de6_fixed.java
@@ -1,12 +1,30 @@
 /**
  * Creates a period from the given millisecond duration with the standard period type
  * and ISO rules, ensuring that the calculation is performed with the time-only period type.
  * <p>
  * The calculation uses the hour, minute, second and millisecond fields.
  *
  * @param duration  the duration, in milliseconds
  */
 protected BasePeriod(long duration) {
-        this(duration, null, null);
-        // bug [3264409]
+    // bug [3264409] â€“ convert using only time fields and leave date fields at zero
+    long millis = duration;
+    boolean negative = (millis < 0);
+    if (negative) {
+        millis = -millis;
+    }
+    int hours = (int)(millis / DateTimeConstants.MILLIS_PER_HOUR);
+    millis -= (long)hours * DateTimeConstants.MILLIS_PER_HOUR;
+    int minutes = (int)(millis / DateTimeConstants.MILLIS_PER_MINUTE);
+    millis -= (long)minutes * DateTimeConstants.MILLIS_PER_MINUTE;
+    int seconds = (int)(millis / DateTimeConstants.MILLIS_PER_SECOND);
+    int ms = (int)(millis - (long)seconds * DateTimeConstants.MILLIS_PER_SECOND);
+    if (negative) {
+        hours = -hours;
+        minutes = -minutes;
+        seconds = -seconds;
+        ms = -ms;
+    }
+    // delegate to the int-args constructor (zero years, months, weeks, days)
+    this(0, 0, 0, 0, hours, minutes, seconds, ms);
 }
\ No newline at end of file
