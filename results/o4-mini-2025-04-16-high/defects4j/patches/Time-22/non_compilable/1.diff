diff --git a/tmp/e46aa051-f0df-4a94-bde3-3f4ce59296ad_buggy.java b/tmp/f3f451ba-d000-4b0e-9e32-f24cb01bb5ff_fixed.java
index 5b8a4d2..5d4a3fb 100644
--- a/tmp/e46aa051-f0df-4a94-bde3-3f4ce59296ad_buggy.java
+++ b/tmp/f3f451ba-d000-4b0e-9e32-f24cb01bb5ff_fixed.java
@@ -1,12 +1,24 @@
 /**
  * Creates a period from the given millisecond duration with the standard period type
  * and ISO rules, ensuring that the calculation is performed with the time-only period type.
  * <p>
  * The calculation uses the hour, minute, second and millisecond fields.
  *
  * @param duration  the duration, in milliseconds
  */
 protected BasePeriod(long duration) {
-        this(duration, null, null);
-        // bug [3264409]
+    long remainder = duration;
+    // compute hours
+    int hours = FieldUtils.safeToInt(remainder / DateTimeConstants.MILLIS_PER_HOUR);
+    remainder -= (long) hours * DateTimeConstants.MILLIS_PER_HOUR;
+    // compute minutes
+    int minutes = FieldUtils.safeToInt(remainder / DateTimeConstants.MILLIS_PER_MINUTE);
+    remainder -= (long) minutes * DateTimeConstants.MILLIS_PER_MINUTE;
+    // compute seconds
+    int seconds = FieldUtils.safeToInt(remainder / DateTimeConstants.MILLIS_PER_SECOND);
+    remainder -= (long) seconds * DateTimeConstants.MILLIS_PER_SECOND;
+    // remaining milliseconds
+    int millis = FieldUtils.safeToInt(remainder);
+    // values array is {years, months, weeks, days, hours, minutes, seconds, millis}
+    this(new int[] {0, 0, 0, 0, hours, minutes, seconds, millis}, PeriodType.standard());
 }
\ No newline at end of file
