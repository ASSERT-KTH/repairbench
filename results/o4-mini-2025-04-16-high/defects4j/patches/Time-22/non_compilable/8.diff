diff --git a/tmp/11cbccf4-c9e0-490e-b137-759aa9657ff5_buggy.java b/tmp/cbdbb682-57ef-4198-9cf6-3eafd4421ee7_fixed.java
index 5b8a4d2..7b0f7ec 100644
--- a/tmp/11cbccf4-c9e0-490e-b137-759aa9657ff5_buggy.java
+++ b/tmp/cbdbb682-57ef-4198-9cf6-3eafd4421ee7_fixed.java
@@ -1,12 +1,38 @@
 /**
  * Creates a period from the given millisecond duration with the standard period type
  * and ISO rules, ensuring that the calculation is performed with the time-only period type.
  * <p>
  * The calculation uses the hour, minute, second and millisecond fields.
  *
  * @param duration  the duration, in milliseconds
  */
 protected BasePeriod(long duration) {
+    // perform the standard UTC‐based breakdown first
     this(duration, null, null);
-        // bug [3264409]
+
+    // bug [3264409] – treat all date fields as time-only by moving them into hours
+    PeriodType standard = PeriodType.standard();
+    Chronology utc = ISOChronology.getInstanceUTC();
+    int[] values = this.iValues;
+    int y = standard.indexOf(DurationFieldType.years());
+    int mo = standard.indexOf(DurationFieldType.months());
+    int w = standard.indexOf(DurationFieldType.weeks());
+    int d = standard.indexOf(DurationFieldType.days());
+    int h = standard.indexOf(DurationFieldType.hours());
+
+    // compute total milliseconds represented by the date fields
+    long totalMillis =
+          (long) values[y]  * utc.years().getUnitMillis()
+        + (long) values[mo] * utc.months().getUnitMillis()
+        + (long) values[w]  * utc.weeks().getUnitMillis()
+        + (long) values[d]  * utc.days().getUnitMillis();
+
+    // convert those milliseconds into hours and add to the existing hour value
+    values[h] += (int)(totalMillis / DateTimeConstants.MILLIS_PER_HOUR);
+
+    // clear out the date fields
+    values[y] = 0;
+    values[mo] = 0;
+    values[w] = 0;
+    values[d] = 0;
 }
\ No newline at end of file
