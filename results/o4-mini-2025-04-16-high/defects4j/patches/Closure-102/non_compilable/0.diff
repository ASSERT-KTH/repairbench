diff --git a/tmp/22ac2688-5eb0-4ce8-8e29-050ede39bc59_buggy.java b/tmp/0e63eb0f-118f-40da-8a17-3144ebcc2d50_fixed.java
index f47d784..746501c 100644
--- a/tmp/22ac2688-5eb0-4ce8-8e29-050ede39bc59_buggy.java
+++ b/tmp/0e63eb0f-118f-40da-8a17-3144ebcc2d50_fixed.java
@@ -1,12 +1,50 @@
 @Override
 public void process(Node externs, Node root) {
+  // First do the normal RenameVars work.
   NodeTraversal.traverse(compiler, root, this);
   if (MAKE_LOCAL_NAMES_UNIQUE) {
     MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
     NodeTraversal t = new NodeTraversal(compiler, renamer);
     t.traverseRoots(externs, root);
   }
+
+  // Special‐case "var arguments = …" → "arguments = …"
+  NodeTraversal remapArgs = new NodeTraversal(compiler, new NodeTraversal.Callback() {
+    @Override
+    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
+      return true;
+    }
+    @Override
+    public void visit(NodeTraversal t, Node n, Node parent) {
+      if (n.isVar()) {
+        for (Node child = n.getFirstChild(), next; child != null; child = next) {
+          next = child.getNext();
+          if (child.isName() && "arguments".equals(child.getString())) {
+            // Detach the initializer
+            Node init = child.removeFirstChild();
+            // If there was an initializer, create an assignment expr
+            if (init != null) {
+              Node assign = IR.exprResult(
+                  IR.assign(child.cloneNode(), init))
+                  .useSourceInfoIfMissingFromForTree(n);
+              parent.addChildBefore(assign, n);
+            }
+            // Remove the 'arguments' declaration from the var
+            n.removeChild(child);
+            t.reportCodeChange();
+          }
+        }
+        // If the var has no children left, drop it entirely
+        if (!n.hasChildren()) {
+          parent.removeChild(n);
+        }
+      }
+    }
+  });
+  remapArgs.traverseRoots(externs, root);
+
+  // Now do the duplicate‐var cleanup and constant‐annotation pass
   removeDuplicateDeclarations(root);
   new PropogateConstantAnnotations(compiler, assertOnChange)
       .process(externs, root);
 }
\ No newline at end of file
