diff --git a/tmp/9bab29a4-2138-4ff6-96aa-3c7388b1b2a7_buggy.java b/tmp/ba1b5442-536d-4d2c-8e5e-26a908b8f297_fixed.java
index f47d784..3981815 100644
--- a/tmp/9bab29a4-2138-4ff6-96aa-3c7388b1b2a7_buggy.java
+++ b/tmp/ba1b5442-536d-4d2c-8e5e-26a908b8f297_fixed.java
@@ -1,12 +1,53 @@
 @Override
 public void process(Node externs, Node root) {
+  // First do the normal traversal for this pass.
   NodeTraversal.traverse(compiler, root, this);
+
+  // Optionally make local names unique.
   if (MAKE_LOCAL_NAMES_UNIQUE) {
     MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
     NodeTraversal t = new NodeTraversal(compiler, renamer);
     t.traverseRoots(externs, root);
   }
+
+  // FIX FOR ISSUE 115: In SIMPLE_OPTIMIZATIONS, drop a "var arguments = â€¦;"
+  // since "arguments" is already a local, and "var arguments" is redundant.
+  if (compiler.getOptions().getCompilationLevel()
+        == CompilationLevel.SIMPLE_OPTIMIZATIONS) {
+    NodeTraversal.traverse(
+        compiler, root,
+        new NodeTraversal.AbstractPostOrderCallback() {
+          @Override
+          public void visit(NodeTraversal t, Node n, Node parent) {
+            // Look for a VAR statement whose sole declaration is "arguments"
+            // with an initializer.
+            if (n.isVar()
+                && n.hasOneChild()
+                && n.getFirstChild().isName()
+                && "arguments".equals(n.getFirstChild().getString())
+                && n.getFirstChild().hasOneChild()) {
+              // Detach the initializer.
+              Node varNameNode = n.getFirstChild();
+              Node init = varNameNode.removeFirstChild();
+              // Build `arguments = <init>;`
+              Node lhs = new Node(Token.NAME, "arguments")
+                  .useSourceInfoIfMissingFromForTree(varNameNode);
+              Node assign = new Node(Token.ASSIGN, lhs, init)
+                  .useSourceInfoIfMissingFromForTree(n);
+              Node expr = new Node(Token.EXPR_RESULT, assign)
+                  .useSourceInfoIfMissingFromForTree(n);
+              // Replace the VAR node with our new assignment.
+              parent.replaceChild(n, expr);
+              compiler.reportChangeToEnclosingScope(expr);
+            }
+          }
+        });
+  }
+
+  // Now remove any duplicate var-declarations (the existing logic).
   removeDuplicateDeclarations(root);
+
+  // And finally propagate constant annotations.
   new PropogateConstantAnnotations(compiler, assertOnChange)
       .process(externs, root);
 }
\ No newline at end of file
