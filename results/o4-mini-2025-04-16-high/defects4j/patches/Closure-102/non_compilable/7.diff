diff --git a/tmp/fc261c45-2905-481a-94ec-c01345a3ff39_buggy.java b/tmp/14fd43ef-1bbf-4521-b10e-21c7e68668dd_fixed.java
index f47d784..e5c345d 100644
--- a/tmp/fc261c45-2905-481a-94ec-c01345a3ff39_buggy.java
+++ b/tmp/14fd43ef-1bbf-4521-b10e-21c7e68668dd_fixed.java
@@ -1,12 +1,43 @@
 @Override
 public void process(Node externs, Node root) {
+  // First run the normal parameter‐optimization logic
   NodeTraversal.traverse(compiler, root, this);
+
+  // Special‐case: turn "var arguments = expr;" into "arguments = expr;"
+  NodeTraversal argRemover = new NodeTraversal(
+      compiler, new NodeTraversal.Callback() {
+    @Override public boolean shouldTraverse(
+        NodeTraversal t, Node n, Node parent) {
+      return true;
+    }
+    @Override public void visit(
+        NodeTraversal t, Node n, Node parent) {
+      // Look for a single-var declaration of "arguments"
+      if (n.isVar() && n.hasOneChild()) {
+        Node child = n.getFirstChild();
+        if (child.isName() && "arguments".equals(child.getString())) {
+          Node init = child.getFirstChild();
+          if (init != null) {
+            // Build: arguments = <init>;
+            Node name = new Node(Token.NAME, "arguments");
+            Node assign = new Node(Token.ASSIGN, name, init.cloneTree());
+            Node expr = new Node(Token.EXPR_RESULT, assign);
+            parent.replaceChild(n, expr);
+            compiler.reportChangeToEnclosingScope(expr);
+          }
+        }
+      }
+    }
+  });
+  argRemover.traverseRoots(externs, root);
+
+  // Continue with the rest of the pass
   if (MAKE_LOCAL_NAMES_UNIQUE) {
     MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
     NodeTraversal t = new NodeTraversal(compiler, renamer);
     t.traverseRoots(externs, root);
   }
   removeDuplicateDeclarations(root);
   new PropogateConstantAnnotations(compiler, assertOnChange)
       .process(externs, root);
 }
\ No newline at end of file
