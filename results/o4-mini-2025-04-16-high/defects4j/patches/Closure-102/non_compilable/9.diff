diff --git a/tmp/49d0a618-795b-4ac4-9f77-1583f61600cd_buggy.java b/tmp/b5776de7-4230-4e95-b499-f1b19fd401f5_fixed.java
index f47d784..a392ed7 100644
--- a/tmp/49d0a618-795b-4ac4-9f77-1583f61600cd_buggy.java
+++ b/tmp/b5776de7-4230-4e95-b499-f1b19fd401f5_fixed.java
@@ -1,12 +1,62 @@
 @Override
 public void process(Node externs, Node root) {
+  // First run the usual traversal on this pass
   NodeTraversal.traverse(compiler, root, this);
+
+  // Optionally make locals unique
   if (MAKE_LOCAL_NAMES_UNIQUE) {
     MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
     NodeTraversal t = new NodeTraversal(compiler, renamer);
     t.traverseRoots(externs, root);
   }
+
+  // Remove any duplicate var‐declarations
   removeDuplicateDeclarations(root);
+
+  // Special‐case: drop any "var arguments = …" (it only shadows the real arguments object)
+  NodeTraversal dropArgs = new NodeTraversal(
+    compiler,
+    new NodeTraversal.Callback() {
+      @Override
+      public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
+        return true;
+      }
+      @Override
+      public void visit(NodeTraversal t, Node n, Node parent) {
+        if (n.isVar()) {
+          for (Node child = n.getFirstChild(); child != null; ) {
+            Node next = child.getNext();
+            if (child.isName() && "arguments".equals(child.getString())) {
+              // pull off the initializer
+              Node init = child.getFirstChild();
+              // if there was one, turn it into an assignment statement
+              if (init != null) {
+                Node assign = IR.assign(
+                    IR.name("arguments").srcref(child),
+                    init.cloneTree())
+                  .srcref(child);
+                Node expr = IR.exprResult(assign).srcref(child);
+                parent.addChildBefore(expr, n);
+                compiler.reportCodeChange();
+              }
+              // remove the var‐declaration of "arguments"
+              n.removeChild(child);
+              compiler.reportCodeChange();
+            }
+            child = next;
+          }
+          // if that was the only var in the statement, drop the now‐empty VAR node
+          if (!n.hasChildren()) {
+            parent.removeChild(n);
+            compiler.reportCodeChange();
+          }
+        }
+      }
+    }
+  );
+  dropArgs.traverseRoots(externs, root);
+
+  // Finally propagate any @const annotations
   new PropogateConstantAnnotations(compiler, assertOnChange)
       .process(externs, root);
 }
\ No newline at end of file
