diff --git a/tmp/9e1879de-4379-49f9-a874-e62e583d8ec2_buggy.java b/tmp/c520ec69-5696-462a-960a-b74d3cfe6ff9_fixed.java
index f47d784..8455410 100644
--- a/tmp/9e1879de-4379-49f9-a874-e62e583d8ec2_buggy.java
+++ b/tmp/c520ec69-5696-462a-960a-b74d3cfe6ff9_fixed.java
@@ -1,12 +1,46 @@
 @Override
 public void process(Node externs, Node root) {
+  // Normal normalization & optional unique‐renaming
   NodeTraversal.traverse(compiler, root, this);
   if (MAKE_LOCAL_NAMES_UNIQUE) {
     MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
     NodeTraversal t = new NodeTraversal(compiler, renamer);
     t.traverseRoots(externs, root);
   }
+
+  // Special‐case: drop the redundant hoisted "var arguments" at the top
+  // of any function, leaving only the assignment that Normalize generated.
+  NodeTraversal argRemover =
+      new NodeTraversal(compiler, new NodeTraversal.Callback() {
+    @Override
+    public boolean shouldTraverse(NodeTraversal nt, Node n, Node parent) {
+      return true;
+    }
+    @Override
+    public void visit(NodeTraversal nt, Node n, Node parent) {
+      if (n.isFunction()) {
+        Node body = n.getLastChild();
+        Node first = body.getFirstChild();
+        if (first != null && first.isVar()) {
+          Node varNode = first;
+          for (Node child = varNode.getFirstChild(); child != null;) {
+            Node next = child.getNext();
+            if (child.isName() && "arguments".equals(child.getString())) {
+              varNode.removeChild(child);
+            }
+            child = next;
+          }
+          if (varNode.getFirstChild() == null) {
+            body.removeChild(varNode);
+          }
+        }
+      }
+    }
+  });
+  argRemover.traverseRoots(externs, root);
+
+  // Finish up
   removeDuplicateDeclarations(root);
   new PropogateConstantAnnotations(compiler, assertOnChange)
       .process(externs, root);
 }
\ No newline at end of file
