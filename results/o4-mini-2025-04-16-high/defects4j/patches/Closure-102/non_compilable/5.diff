diff --git a/tmp/c3957c27-a045-45d2-8f72-33b3d765d27e_buggy.java b/tmp/2d87e303-19b5-4270-9a35-ccd63db2af6a_fixed.java
index f47d784..ab16799 100644
--- a/tmp/c3957c27-a045-45d2-8f72-33b3d765d27e_buggy.java
+++ b/tmp/2d87e303-19b5-4270-9a35-ccd63db2af6a_fixed.java
@@ -1,12 +1,53 @@
 @Override
 public void process(Node externs, Node root) {
+  // First do the usual peephole work
   NodeTraversal.traverse(compiler, root, this);
+
+  // Then (optionally) make all locals unique
   if (MAKE_LOCAL_NAMES_UNIQUE) {
     MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
     NodeTraversal t = new NodeTraversal(compiler, renamer);
     t.traverseRoots(externs, root);
   }
+
+  // Special‐case: arguments is implicitly declared by JS,
+  // so drop any explicit "var arguments = ..." and turn it
+  // into just "arguments = ..."
+  NodeTraversal.traverse(
+      compiler, root,
+      new AbstractPostOrderCallback() {
+        @Override
+        public void visit(NodeTraversal t, Node n, Node parent) {
+          if (n.isVar()) {
+            for (Node nameNode = n.getFirstChild();
+                 nameNode != null;
+                 nameNode = nameNode.getNext()) {
+              if (nameNode.isName() &&
+                  "arguments".equals(nameNode.getString())) {
+                // detach the initializer, if any
+                Node init = nameNode.hasChildren()
+                    ? nameNode.removeFirstChild()
+                    : null;
+                // build "arguments = init;"
+                Node lhs = new Node(Token.NAME, "arguments")
+                    .copyInformationFrom(nameNode);
+                Node assign = new Node(Token.ASSIGN, lhs, init)
+                    .copyInformationFrom(n);
+                Node expr = new Node(Token.EXPR_RESULT, assign)
+                    .copyInformationFrom(n);
+                parent.replaceChild(n, expr);
+                compiler.reportChangeToEnclosingScope(expr);
+                break;
+              }
+            }
+          }
+        }
+      });
+
+  // Remove any other duplicate var‐declares
   removeDuplicateDeclarations(root);
+
+  // Finally propagate any constant annotations
   new PropogateConstantAnnotations(compiler, assertOnChange)
       .process(externs, root);
 }
\ No newline at end of file
