diff --git a/tmp/ea707c0b-4f15-46ad-be90-f2d87abc3b5b_buggy.java b/tmp/d078c1b1-0478-4640-aee0-42ea38b048c5_fixed.java
index 373b1e8..bfa6541 100644
--- a/tmp/ea707c0b-4f15-46ad-be90-f2d87abc3b5b_buggy.java
+++ b/tmp/d078c1b1-0478-4640-aee0-42ea38b048c5_fixed.java
@@ -1,37 +1,41 @@
 private static boolean looksLikeUtf8(byte[] input) {
     int i = 0;
-            // BOM:
-            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+    // check for BOM (EF BB BF)
+    if (input.length >= 3
+            && (input[0] & 0xFF) == 0xEF
+            && (input[1] & 0xFF) == 0xBB
+            && (input[2] & 0xFF) == 0xBF) {
         i = 3;
     }
 
-            int end;
-            for (int j = input.length; i < j; ++i) {
-                int o = input[i];
-                if ((o & 0x80) == 0) {
-                    continue; // ASCII
-                }
-
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
-                } else {
-                    return false;
-                }
-
-
-                while (i < end) {
+    int len = input.length;
+    while (i < len) {
+        int b = input[i] & 0xFF;
+        if ((b & 0x80) == 0) {
+            // ASCII
             i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+        } else if ((b & 0xE0) == 0xC0) {
+            // 2-byte UTF-8
+            if (i + 1 >= len) return false;
+            if ((input[i + 1] & 0xC0) != 0x80) return false;
+            i += 2;
+        } else if ((b & 0xF0) == 0xE0) {
+            // 3-byte UTF-8
+            if (i + 2 >= len) return false;
+            if ((input[i + 1] & 0xC0) != 0x80
+             || (input[i + 2] & 0xC0) != 0x80) return false;
+            i += 3;
+        } else if ((b & 0xF8) == 0xF0) {
+            // 4-byte UTF-8
+            if (i + 3 >= len) return false;
+            if ((input[i + 1] & 0xC0) != 0x80
+             || (input[i + 2] & 0xC0) != 0x80
+             || (input[i + 3] & 0xC0) != 0x80) return false;
+            i += 4;
+        } else {
+            // invalid leading byte
             return false;
         }
     }
-            }
     return true;
 }
\ No newline at end of file
