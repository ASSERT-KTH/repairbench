diff --git a/tmp/d7c85a16-a318-4762-965f-c62f3c345ec3_buggy.java b/tmp/eab1e618-cfa0-478f-8d2a-625f8e57afd3_fixed.java
index 373b1e8..b70639a 100644
--- a/tmp/d7c85a16-a318-4762-965f-c62f3c345ec3_buggy.java
+++ b/tmp/eab1e618-cfa0-478f-8d2a-625f8e57afd3_fixed.java
@@ -1,37 +1,43 @@
 private static boolean looksLikeUtf8(byte[] input) {
     int i = 0;
     // BOM:
-            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+    if (input.length >= 3
+        && (input[0] & 0xFF) == 0xEF
+        && (input[1] & 0xFF) == 0xBB
+        && (input[2] & 0xFF) == 0xBF) {
         i = 3;
     }
 
-            int end;
-            for (int j = input.length; i < j; ++i) {
-                int o = input[i];
-                if ((o & 0x80) == 0) {
-                    continue; // ASCII
-                }
-
-                // UTF-8 leading:
-                if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
-                } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
-                } else {
-                    return false;
-                }
-
-
-                while (i < end) {
+    int len = input.length;
+    while (i < len) {
+        int b = input[i] & 0xFF;
+        if ((b & 0x80) == 0) {
+            // ASCII
             i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+        } else {
+            int need;
+            if ((b & 0xE0) == 0xC0) {
+                need = 1;
+            } else if ((b & 0xF0) == 0xE0) {
+                need = 2;
+            } else if ((b & 0xF8) == 0xF0) {
+                need = 3;
+            } else {
                 return false;
             }
+            // not enough bytes left
+            if (i + need >= len) {
+                return false;
+            }
+            // check continuation bytes
+            for (int j = 1; j <= need; j++) {
+                int nb = input[i + j] & 0xFF;
+                if ((nb & 0xC0) != 0x80) {
+                    return false;
+                }
+            }
+            i += need + 1;
         }
     }
     return true;
 }
\ No newline at end of file
