diff --git a/tmp/049f8e8d-d6d4-4d32-b4e3-691ae533a1ff_buggy.java b/tmp/507cff4d-296d-4039-8eca-48cdcf4e36cf_fixed.java
index 63641d0..e4fd23b 100644
--- a/tmp/049f8e8d-d6d4-4d32-b4e3-691ae533a1ff_buggy.java
+++ b/tmp/507cff4d-296d-4039-8eca-48cdcf4e36cf_fixed.java
@@ -1,33 +1,58 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+  // Grab the template keys for this function.
+  final ImmutableList<TemplateType> keys =
+      fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+  // We'll accumulate inferred mappings here.
+  Map<TemplateType, JSType> inferred = new LinkedHashMap<>();
 
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  // First, try to infer from the actual "this" type (e.g. generic classes).
   Node callTarget = n.getFirstChild();
+  JSType declaredThis = fnType.getThisType();
+  if (declaredThis != null && callTarget.isGetProp()) {
+    Node thisObj = callTarget.getFirstChild();
+    if (thisObj != null) {
+      JSType actualThis = thisObj.getJSType();
+      if (actualThis != null) {
+        // If the actual "this" is a parameterized (templated) type, pull its map.
+        TemplatizedType asTemplated = actualThis.toMaybeTemplatizedType();
+        if (asTemplated != null) {
+          TemplateTypeMap thisMap = asTemplated.getTemplateTypeMap();
+          ImmutableList<TemplateType> thisKeys = thisMap.getTemplateKeys();
+          ImmutableList<JSType>   thisVals = thisMap.getTemplateValues();
+          for (int i = 0; i < thisKeys.size(); i++) {
+            TemplateType key = thisKeys.get(i);
+            if (keys.contains(key)) {
+              inferred.put(key, thisVals.get(i));
+            }
+          }
+        }
+      }
+    }
+  }
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+  // Next, infer from the call-site parameters, but do not override anything
+  // we've already pulled in from the "this" inference.
+  Map<TemplateType, JSType> paramInferred =
+      inferTemplateTypesFromParameters(fnType, n);
+  for (Map.Entry<TemplateType, JSType> e : paramInferred.entrySet()) {
+    inferred.putIfAbsent(e.getKey(), e.getValue());
+  }
 
-    callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+  // Now replace all template types in the function signature.  Missing
+  // entries are filled in with UNKNOWN.
+  TemplateTypeReplacer replacer =
+      new TemplateTypeReplacer(registry, inferred);
+  FunctionType instantiated = fnType.visit(replacer).toMaybeFunctionType();
+  Preconditions.checkNotNull(instantiated);
+
+  // Update the call-node and the call-target with the instantiated types.
+  callTarget.setJSType(instantiated);
+  n.setJSType(instantiated.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
