diff --git a/tmp/c4cafa11-0c1e-4ac2-a137-51c48423a23a_buggy.java b/tmp/bf087c6d-d8f6-46b7-a044-28f73ebf0fd3_fixed.java
index 63641d0..0cded95 100644
--- a/tmp/c4cafa11-0c1e-4ac2-a137-51c48423a23a_buggy.java
+++ b/tmp/bf087c6d-d8f6-46b7-a044-28f73ebf0fd3_fixed.java
@@ -1,33 +1,38 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+  // If there are no template parameters on this function, bail out.
+  final ImmutableList<TemplateType> keys =
+      fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
+  // First try to infer any of the template variables from the actual args.
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // For any template we couldn't infer, default it to UNKNOWN.
+  // Use a LinkedHashMap to preserve the order of keys for determinism.
+  Map<TemplateType, JSType> replacements = new LinkedHashMap<>();
+  for (TemplateType key : keys) {
+    JSType val = inferred.get(key);
+    if (val == null) {
+      val = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
+    }
+    replacements.put(key, val);
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  // Now apply the substitution.
+  TemplateTypeReplacer replacer =
+      new TemplateTypeReplacer(registry, replacements);
   Node callTarget = n.getFirstChild();
-
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType =
+      fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
+  // Update the AST with our new, partially‚Äêinstantiated types.
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
