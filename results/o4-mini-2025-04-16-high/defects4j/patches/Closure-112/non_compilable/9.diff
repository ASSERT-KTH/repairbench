diff --git a/tmp/2d9c4c5b-bba7-4855-a742-1e4a869ff241_buggy.java b/tmp/d2afda35-3f51-4eba-b457-81fe813fa2fd_fixed.java
index 63641d0..5e80a57 100644
--- a/tmp/2d9c4c5b-bba7-4855-a742-1e4a869ff241_buggy.java
+++ b/tmp/d2afda35-3f51-4eba-b457-81fe813fa2fd_fixed.java
@@ -1,33 +1,36 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+  final ImmutableList<TemplateType> keys =
+      fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Make a full map of replacements: use the inferred type when we have one,
+  // otherwise fall back to UNKNOWN.
+  Map<TemplateType, JSType> replacementMap =
+      new java.util.LinkedHashMap<TemplateType, JSType>();
+  JSType unknownType = registry.getNativeUnknownType();
+  for (TemplateType key : keys) {
+    JSType tgt = inferred.get(key);
+    replacementMap.put(key, (tgt != null) ? tgt : unknownType);
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  // Replace all template types in the function signature.
+  TemplateTypeReplacer replacer =
+      new TemplateTypeReplacer(registry, replacementMap);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType =
+      replacer.visit(fnType).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
