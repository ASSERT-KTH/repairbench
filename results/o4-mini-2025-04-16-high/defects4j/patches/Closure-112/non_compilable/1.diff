diff --git a/tmp/574d554e-0b4f-42ec-aea6-daf60cf443ca_buggy.java b/tmp/93126ac3-c10d-426a-877a-b732f708d202_fixed.java
index 63641d0..454ad15 100644
--- a/tmp/574d554e-0b4f-42ec-aea6-daf60cf443ca_buggy.java
+++ b/tmp/93126ac3-c10d-426a-877a-b732f708d202_fixed.java
@@ -1,33 +1,38 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+  // Only try inference if the function actually has its own template parameters.
+  final ImmutableList<TemplateType> keys =
+      fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
+  // Try to infer the template types from the actual call-site arguments.
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Only keep the entries for the templates that are declared on this function.
+  // (Don’t accidentally infer class‐level or other stray TemplateTypes.)
+  Map<TemplateType, JSType> mapForReplacer = new LinkedHashMap<>();
+  for (TemplateType key : keys) {
+    if (inferred.containsKey(key)) {
+      mapForReplacer.put(key, inferred.get(key));
+    }
+  }
+
+  // Replace all template occurrences in the function signature.
+  // Un‐inferred templates become UNKNOWN.
+  TemplateTypeReplacer replacer =
+      new TemplateTypeReplacer(registry, mapForReplacer);
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
   Node callTarget = n.getFirstChild();
-
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType =
+      fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
+  // Update the AST with the instantiated function type and its return type.
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
