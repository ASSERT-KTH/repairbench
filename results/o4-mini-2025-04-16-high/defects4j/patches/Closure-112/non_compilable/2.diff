diff --git a/tmp/2c91e8e2-e32b-4c75-b856-b2cce4e61a3a_buggy.java b/tmp/8f474389-2ae6-4fa2-876a-dc4e4a3231b2_fixed.java
index 63641d0..21e2bb5 100644
--- a/tmp/2c91e8e2-e32b-4c75-b856-b2cce4e61a3a_buggy.java
+++ b/tmp/8f474389-2ae6-4fa2-876a-dc4e4a3231b2_fixed.java
@@ -1,33 +1,38 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+  // If there are no template parameters, nothing to infer.
+  final ImmutableList<TemplateType> keys =
+      fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
+  // First, infer whatever template‐to‐JSType mappings we can get from the
+  // actual arguments.
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Make sure every declared template appears in our mapping.
+  // If we couldn't infer one, default it to UNKNOWN.
+  Map<TemplateType, JSType> fullMapping = new LinkedHashMap<>();
+  for (TemplateType key : keys) {
+    JSType t = inferred.get(key);
+    if (t == null) {
+      t = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
+    }
+    fullMapping.put(key, t);
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  // Replace all template types in the function's signature.
+  TemplateTypeReplacer replacer =
+      new TemplateTypeReplacer(registry, fullMapping);
   Node callTarget = n.getFirstChild();
-
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType =
+      fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
+  // Update the call‐target and the call node with the specialized types.
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
-
   return replacer.madeChanges;
 }
\ No newline at end of file
