diff --git a/tmp/99e19830-dfa9-4915-97f9-70a98ea3e4bf_buggy.java b/tmp/8f9052a8-0f00-4203-8b3e-977a092f0bca_fixed.java
index 63641d0..193ed7b 100644
--- a/tmp/99e19830-dfa9-4915-97f9-70a98ea3e4bf_buggy.java
+++ b/tmp/8f9052a8-0f00-4203-8b3e-977a092f0bca_fixed.java
@@ -1,33 +1,35 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
+ * actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
-    return replacer.madeChanges;
+  // We always want to re–type–check calls on templated functions, since
+  // even if no explicit inference succeeded, template variables have been
+  // stripped out (replaced with UNKNOWN).
+  return true;
 }
\ No newline at end of file
