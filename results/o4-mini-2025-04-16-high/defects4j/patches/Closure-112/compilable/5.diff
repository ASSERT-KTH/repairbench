diff --git a/tmp/f46b000f-391d-4b6a-8fa5-4c6f75664d21_buggy.java b/tmp/54c2cd0a-57c5-41aa-9a2a-929f3f0f16f8_fixed.java
index 63641d0..549d400 100644
--- a/tmp/f46b000f-391d-4b6a-8fa5-4c6f75664d21_buggy.java
+++ b/tmp/54c2cd0a-57c5-41aa-9a2a-929f3f0f16f8_fixed.java
@@ -1,33 +1,32 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+  // If there are no type‚Äêparameters declared on this function, skip.
+  final ImmutableList<TemplateType> keys =
+      fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
+  // Try to infer the template types from the actual arguments.
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // We only instantiate when *all* of the function's type parameters were inferred.
+  if (!inferred.keySet().containsAll(keys)) {
+    return false;
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  // Perform the instantiation (missing mappings will yield UNKNOWN).
+  TemplateTypeReplacer replacer =
+      new TemplateTypeReplacer(registry, inferred);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType =
+      fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
