diff --git a/tmp/39afd659-7574-4a4b-9093-0606404be722_buggy.java b/tmp/91d34efe-c25d-491a-b3b8-324e6431a532_fixed.java
index 63641d0..2e30a58 100644
--- a/tmp/39afd659-7574-4a4b-9093-0606404be722_buggy.java
+++ b/tmp/91d34efe-c25d-491a-b3b8-324e6431a532_fixed.java
@@ -1,33 +1,31 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+  // If the function has no type‐params, there's nothing to infer.
+  ImmutableList<TemplateType> keys =
+      fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
+  // Try to infer the template types from the actual arguments.
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // If we couldn't infer any of the function's own type‐params, don't
+  // replace at all (to avoid masking foo() in testIssue1058).
+  if (inferred.isEmpty()) {
+    return false;
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  // Otherwise we do the usual replace‐all (unmapped templates become UNKNOWN).
+  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType =
+      fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
