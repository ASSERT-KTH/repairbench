diff --git a/tmp/1b0cde69-593c-4fd1-a36f-fb7084751940_buggy.java b/tmp/31804a07-d276-4bd5-8e9a-ee5bac2e37ea_fixed.java
index 9d69396..68a49c6 100644
--- a/tmp/1b0cde69-593c-4fd1-a36f-fb7084751940_buggy.java
+++ b/tmp/31804a07-d276-4bd5-8e9a-ee5bac2e37ea_fixed.java
@@ -1,46 +1,55 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
     long storedSum = 0;
     long unsignedSum = 0;
     long signedSum = 0;
 
+    // Special‐case: if the entire header is zero (empty or end‐of‐archive block), treat as valid
+    boolean allZero = true;
+    for (byte b : header) {
+        if (b != 0) {
+            allZero = false;
+            break;
+        }
+    }
+    if (allZero) {
+        return true;
+    }
+
+    // Detect base‐256 (binary) checksum: high bit set in first checksum byte
+    if ((header[CHKSUM_OFFSET] & 0x80) != 0) {
+        // Decode two's‐complement big‐endian
+        byte[] chk = new byte[CHKSUMLEN];
+        System.arraycopy(header, CHKSUM_OFFSET, chk, 0, CHKSUMLEN);
+        java.math.BigInteger bi = new java.math.BigInteger(chk);
+        storedSum = bi.longValue();
+    } else {
+        // ASCII octal: ignore leading/trailing whitespace, read up to 6 octal digits
+        int end = CHKSUM_OFFSET + CHKSUMLEN;
         int digits = 0;
-        for (int i = 0; i < header.length; i++) {
+        for (int i = CHKSUM_OFFSET; i < end; i++) {
             byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
+            if (b >= '0' && b <= '7') {
+                if (digits < 6) {
+                    storedSum = storedSum * 8 + (b - '0');
+                    digits++;
+                }
             } else if (digits > 0) {
-                    digits = 6;
+                // end of the octal number
+                break;
             }
+        }
+    }
+
+    // Compute the real checksum, treating the checksum field bytes as ASCII spaces (0x20)
+    for (int i = 0; i < header.length; i++) {
+        byte b = header[i];
+        if (i >= CHKSUM_OFFSET && i < CHKSUM_OFFSET + CHKSUMLEN) {
             b = ' ';
         }
-            unsignedSum += 0xff & b;
+        unsignedSum += (b & 0xFF);
         signedSum += b;
     }
+
+    // Accept if either the unsigned or signed sum matches the stored value
     return storedSum == unsignedSum || storedSum == signedSum;
 }
\ No newline at end of file
