diff --git a/tmp/5cb9273b-f6d2-4b6e-9ab2-a154d80386a9_buggy.java b/tmp/f4e27938-fd91-4518-aa4a-b96b8dbf2529_fixed.java
index 9d69396..9d5cc36 100644
--- a/tmp/5cb9273b-f6d2-4b6e-9ab2-a154d80386a9_buggy.java
+++ b/tmp/f4e27938-fd91-4518-aa4a-b96b8dbf2529_fixed.java
@@ -1,46 +1,70 @@
 /**
  * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
  * <blockquote>
  * The checksum is calculated by taking the sum of the unsigned byte values
  * of the header block with the eight checksum bytes taken to be ascii
  * spaces (decimal value 32). It is stored as a six digit octal number with
  * leading zeroes followed by a NUL and then a space. Various
  * implementations do not adhere to this format. For better compatibility,
  * ignore leading and trailing whitespace, and get the first six digits. In
  * addition, some historic tar implementations treated bytes as signed.
  * Implementations typically calculate the checksum both ways, and treat it
  * as good if either the signed or unsigned sum matches the included
  * checksum.
  * </blockquote>
  * <p>
-     * The return value of this method should be treated as a best-effort
+ * The return value of this method should be treated as a best‐effort
  * heuristic rather than an absolute and final truth. The checksum
  * verification logic may well evolve over time as more special cases
  * are encountered.
  *
  * @param header tar header
  * @return whether the checksum is reasonably good
  * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
  * @since 1.5
  */
 public static boolean verifyCheckSum(byte[] header) {
     long storedSum = 0;
     long unsignedSum = 0;
     long signedSum = 0;
 
-        int digits = 0;
+    // 1) Parse the stored checksum field in the header.
+    //    Support both ASCII‐octal and base‐256 (binary) formats.
+    if ((header[CHKSUM_OFFSET] & 0x80) != 0) {
+        // Base-256: big-endian two's‐complement integer in the entire field.
+        for (int i = 0; i < CHKSUMLEN; i++) {
+            storedSum = (storedSum << 8) | (header[CHKSUM_OFFSET + i] & 0xFF);
+        }
+    } else {
+        // ASCII octal: ignore leading/trailing whitespace, read up to 6 octal digits.
+        int count = 0;
+        for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {
+            byte b = header[i];
+            if (b >= '0' && b <= '7') {
+                storedSum = (storedSum << 3) + (b - '0');
+                count++;
+                if (count == 6) {
+                    break;
+                }
+            } else if (count > 0) {
+                // once we've seen digits, stop at first non-octal
+                break;
+            }
+            // otherwise skip any leading NULs or spaces
+        }
+    }
+
+    // 2) Recompute the checksum over the entire header block,
+    //    treating the checksum field itself as if it were filled with spaces.
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
+        if (i >= CHKSUM_OFFSET && i < CHKSUM_OFFSET + CHKSUMLEN) {
             b = ' ';
         }
-            unsignedSum += 0xff & b;
+        unsignedSum += (b & 0xFF);
         signedSum += b;
     }
+
+    // 3) Accept if either the unsigned or signed sum matches the stored value.
     return storedSum == unsignedSum || storedSum == signedSum;
 }
\ No newline at end of file
