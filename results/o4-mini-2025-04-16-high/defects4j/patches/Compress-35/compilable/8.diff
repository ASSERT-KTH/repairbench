diff --git a/tmp/8beff9ae-dd93-4074-90a1-81c457b0ae13_buggy.java b/tmp/1656f5c2-6ef4-468c-8789-294e70163dd3_fixed.java
index 9d69396..eb6cb83 100644
--- a/tmp/8beff9ae-dd93-4074-90a1-81c457b0ae13_buggy.java
+++ b/tmp/1656f5c2-6ef4-468c-8789-294e70163dd3_fixed.java
@@ -1,46 +1,46 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
-        long storedSum = 0;
     long unsignedSum = 0;
     long signedSum = 0;
-
+    long storedSum = 0;
     int digits = 0;
+
+    // First pass: compute the unsigned and signed sums,
+    // and parse an ASCII‐octal checksum (up to 6 digits),
+    // treating the checksum field bytes as spaces.
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
+        if (i >= CHKSUM_OFFSET && i < CHKSUM_OFFSET + CHKSUMLEN) {
+            if (digits < 6 && b >= '0' && b <= '7') {
+                storedSum = storedSum * 8 + (b - '0');
+                digits++;
             } else if (digits > 0) {
+                // once we've seen digits, any non-octal ends parsing
                 digits = 6;
             }
+            // for the purpose of the checksum sum, treat this byte as a space
             b = ' ';
         }
-            unsignedSum += 0xff & b;
+        unsignedSum += (b & 0xFF);
         signedSum += b;
     }
-        return storedSum == unsignedSum || storedSum == signedSum;
+
+    // If the ASCII‐octal checksum matches either sum, we're good.
+    if (storedSum == unsignedSum || storedSum == signedSum) {
+        return true;
+    }
+
+    // Fallback: some historic tars store the checksum in binary
+    // (indicated by the high‐bit set in the first checksum byte).
+    if ((header[CHKSUM_OFFSET] & 0x80) != 0) {
+        storedSum = 0;
+        for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {
+            storedSum = (storedSum << 8) + (header[i] & 0xFF);
+        }
+        if (storedSum == unsignedSum || storedSum == signedSum) {
+            return true;
+        }
+    }
+
+    // No match
+    return false;
 }
\ No newline at end of file
