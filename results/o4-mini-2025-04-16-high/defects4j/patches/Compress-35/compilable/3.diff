diff --git a/tmp/415954f2-1051-43ef-ace5-e80843e950a4_buggy.java b/tmp/081a93d5-e25b-40e7-bf9f-a57e79f314de_fixed.java
index 9d69396..a05a725 100644
--- a/tmp/415954f2-1051-43ef-ace5-e80843e950a4_buggy.java
+++ b/tmp/081a93d5-e25b-40e7-bf9f-a57e79f314de_fixed.java
@@ -1,46 +1,33 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
     long storedSum = 0;
     long unsignedSum = 0;
     long signedSum = 0;
 
     int digits = 0;
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
         if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
             if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
+                storedSum = storedSum * 8 + (b - '0');
             } else if (digits > 0) {
                 digits = 6;
             }
+            // use ASCII space for checksum field when summing
             b = ' ';
         }
-            unsignedSum += 0xff & b;
+        unsignedSum += (b & 0xFF);
         signedSum += b;
     }
-        return storedSum == unsignedSum || storedSum == signedSum;
+
+    // first try the usual octal checksum
+    if (storedSum == unsignedSum || storedSum == signedSum) {
+        return true;
+    }
+
+    // fallback: some tars use a binary (base-256 two's-complement) checksum field
+    long binarySum = 0;
+    for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {
+        binarySum = (binarySum << 8) | (header[i] & 0xFF);
+    }
+    return binarySum == unsignedSum || binarySum == signedSum;
 }
\ No newline at end of file
