diff --git a/tmp/1f54598f-cb52-4588-9fd4-b209683f233e_buggy.java b/tmp/641396c1-a4b8-46a1-ae92-4e309c98b697_fixed.java
index 9d69396..5f73f18 100644
--- a/tmp/1f54598f-cb52-4588-9fd4-b209683f233e_buggy.java
+++ b/tmp/641396c1-a4b8-46a1-ae92-4e309c98b697_fixed.java
@@ -1,46 +1,46 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
     long storedSum = 0;
+    int offset = CHKSUM_OFFSET;
+    int len = CHKSUMLEN;
+    int idx = offset;
+    int end = offset + len;
+
+    // 1) parse the stored checksum: skip leading NULs/spaces, read up to 6 octal digits
+    while (idx < end && (header[idx] == 0 || header[idx] == ' ')) {
+        idx++;
+    }
+    int digitCount = 0;
+    while (idx < end && digitCount < 6) {
+        byte b = header[idx];
+        if (b >= '0' && b <= '7') {
+            storedSum = (storedSum << 3) + (b - '0');
+            digitCount++;
+            idx++;
+        } else {
+            break;
+        }
+    }
+
+    // 2) compute the two sums over the header, treating the checksum field as ASCII spaces
     long unsignedSum = 0;
     long signedSum   = 0;
-
-        int digits = 0;
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
+        if (i >= offset && i < offset + len) {
             b = ' ';
         }
-            unsignedSum += 0xff & b;
+        unsignedSum += (b & 0xFF);
         signedSum   += b;
     }
-        return storedSum == unsignedSum || storedSum == signedSum;
+
+    // 3) for some historic tars the checksum‐field was zeroed (NULs) not filled with spaces.
+    //    That would make the computed‐as‐space sum higher by 32*len.
+    long adjust = (' ' & 0xFF) * len;
+    long unsignedNullSum = unsignedSum - adjust;
+    long signedNullSum   = signedSum   - adjust;
+
+    return storedSum == unsignedSum
+        || storedSum == signedSum
+        || storedSum == unsignedNullSum
+        || storedSum == signedNullSum;
 }
\ No newline at end of file
