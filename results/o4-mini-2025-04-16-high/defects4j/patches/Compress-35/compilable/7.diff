diff --git a/tmp/c1b9507f-d331-479e-a7c9-c961187d3932_buggy.java b/tmp/04357bd2-c07d-4d81-ab1c-22449e0b524e_fixed.java
index 9d69396..af3a0b7 100644
--- a/tmp/c1b9507f-d331-479e-a7c9-c961187d3932_buggy.java
+++ b/tmp/04357bd2-c07d-4d81-ab1c-22449e0b524e_fixed.java
@@ -1,46 +1,49 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
+    // Parse the stored checksum (octal, up to 6 digits, ignore leading/trailing whitespace/NUL)
     long storedSum = 0;
-        long unsignedSum = 0;
-        long signedSum = 0;
-
-        int digits = 0;
-        for (int i = 0; i < header.length; i++) {
+    boolean gotDigit = false;
+    int digitCount = 0;
+    for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {
         byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
+        if (b >= '0' && b <= '7') {
+            gotDigit = true;
+            storedSum = (storedSum << 3) + (b - '0');
+            if (++digitCount >= 6) {
+                break;
             }
-                b = ' ';
+        } else if (gotDigit) {
+            // stop at first non‐octal after having seen digits
+            break;
         }
-            unsignedSum += 0xff & b;
-            signedSum += b;
+        // else skip leading whitespace/NUL
     }
-        return storedSum == unsignedSum || storedSum == signedSum;
+    // Compute four variants of the checksum:
+    //  1) unsigned sum, treating the checksum field as spaces
+    //  2) signed   sum, treating the checksum field as spaces
+    //  3) unsigned sum, treating the checksum field as NULs
+    //  4) signed   sum, treating the checksum field as NULs
+    long sumUnsignedSpace = 0;
+    long sumSignedSpace   = 0;
+    long sumUnsignedNull  = 0;
+    long sumSignedNull    = 0;
+    for (int i = 0; i < header.length; i++) {
+        if (i >= CHKSUM_OFFSET && i < CHKSUM_OFFSET + CHKSUMLEN) {
+            // checksum field: space (0x20) or NUL (0x00)
+            sumUnsignedSpace += ' ';
+            sumSignedSpace   += ' ';
+            // for NUL‐based checksum:
+            sumUnsignedNull  += 0;
+            sumSignedNull    += 0;
+        } else {
+            // outside checksum field: use actual byte
+            sumUnsignedSpace += header[i] & 0xFF;
+            sumSignedSpace   += header[i];
+            sumUnsignedNull  += header[i] & 0xFF;
+            sumSignedNull    += header[i];
+        }
+    }
+    return storedSum == sumUnsignedSpace
+        || storedSum == sumSignedSpace
+        || storedSum == sumUnsignedNull
+        || storedSum == sumSignedNull;
 }
\ No newline at end of file
