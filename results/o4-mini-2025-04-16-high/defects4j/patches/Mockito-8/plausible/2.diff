diff --git a/tmp/87e23f34-b6e0-4757-8730-5a09e3f7f8b3_buggy.java b/tmp/c820259f-a5d0-491d-821c-2c346de661b9_fixed.java
index 42b58d0..b762444 100644
--- a/tmp/87e23f34-b6e0-4757-8730-5a09e3f7f8b3_buggy.java
+++ b/tmp/c820259f-a5d0-491d-821c-2c346de661b9_fixed.java
@@ -1,19 +1,23 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    Class<?> rawType = (Class<?>) parameterizedType.getRawType();
+    TypeVariable<?>[] typeParameters = rawType.getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
-
-            if (actualTypeArgument instanceof WildcardType) {
-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
-            } else {
-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
+        // if it's a wildcard, use its bound, otherwise use the argument itself
+        Type toRegister = (actualTypeArgument instanceof WildcardType)
+            ? boundsOf((WildcardType) actualTypeArgument)
+            : actualTypeArgument;
+        // skip the trivial self‐mapping (T -> T) to avoid infinite recursion
+        if (toRegister.equals(typeParameter)) {
+            continue;
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+        contextualActualTypeParameters.put(typeParameter, toRegister);
     }
 }
\ No newline at end of file
