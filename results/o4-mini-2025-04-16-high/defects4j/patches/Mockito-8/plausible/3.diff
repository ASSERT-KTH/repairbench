diff --git a/tmp/19c66d1a-69d7-46b9-b763-3c24e67705b0_buggy.java b/tmp/1e9ed18d-221d-487b-8432-21a6fe399b8d_fixed.java
index 42b58d0..807e783 100644
--- a/tmp/19c66d1a-69d7-46b9-b763-3c24e67705b0_buggy.java
+++ b/tmp/1e9ed18d-221d-487b-8432-21a6fe399b8d_fixed.java
@@ -1,19 +1,28 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters =
+        ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        // avoid mapping a type‚Äêvariable to itself (self-referential generics)
+        if (actualTypeArgument instanceof TypeVariable
+                && actualTypeArgument.equals(typeParameter)) {
+            continue;
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
+            contextualActualTypeParameters.put(
+                typeParameter,
+                boundsOf((WildcardType) actualTypeArgument)
+            );
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
