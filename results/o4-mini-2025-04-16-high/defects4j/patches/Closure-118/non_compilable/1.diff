diff --git a/tmp/766257cb-46d8-4b9e-99d5-1f34ea26d823_buggy.java b/tmp/cbf126ef-837b-47d8-9841-92bc2917383d_fixed.java
index 0b7c52e..8c100a8 100644
--- a/tmp/766257cb-46d8-4b9e-99d5-1f34ea26d823_buggy.java
+++ b/tmp/cbf126ef-837b-47d8-9841-92bc2917383d_fixed.java
@@ -1,27 +1,29 @@
 /**
-     * Processes a OBJECTLIT node.
+ * Processes an OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
     // Maybe STRING, GET, SET
 
     // We should never see a mix of numbers and strings.
     String name = child.getString();
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
+    // In an object‚Äêliteral the first child of "child" is the value node,
+    // so treat it as a SET (not a GET) when classifying this occurrence.
+    Node value = child.getFirstChild();
+
     if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+                               processProperty(t, prop, type, value))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null ? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
