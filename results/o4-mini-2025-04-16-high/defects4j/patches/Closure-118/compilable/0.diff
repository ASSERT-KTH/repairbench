diff --git a/tmp/ce7bb27c-3ef8-43fe-812a-e33841b8731c_buggy.java b/tmp/c2d0f76c-2f7d-42f3-a9b4-3bb00c248e6c_fixed.java
index 0b7c52e..fdcbc73 100644
--- a/tmp/ce7bb27c-3ef8-43fe-812a-e33841b8731c_buggy.java
+++ b/tmp/c2d0f76c-2f7d-42f3-a9b4-3bb00c248e6c_fixed.java
@@ -1,27 +1,45 @@
 /**
-     * Processes a OBJECTLIT node.
+ * Processes an OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
+  // We need to pick up object‐literal definitions on Foo.prototype = { … }.
+  // When the OBJECTLIT is on the right side of an assignment to
+  // Foo.prototype, pass that GETPROP node to the type system, otherwise
+  // fall back to the literal itself.
+  Node parent = n.getParent();
+  Node typeRoot = n;
+  if (parent != null
+      && parent.isAssign()
+      && parent.getLastChild() == n) {
+    Node lhs = parent.getFirstChild();
+    if (lhs.isGetProp()
+        && "prototype".equals(lhs.getLastChild().getString())) {
+      typeRoot = lhs;
+    }
+  }
+
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
     // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
     String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
+    T type = typeSystem.getType(getScope(), typeRoot, name);
 
     Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
+    if (!prop.scheduleRenaming(
+            child,
             processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
-                t.getSourceName(), child, propertiesToErrorFor.get(name),
-                Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+            t.getSourceName(),
+            child,
+            propertiesToErrorFor.get(name),
+            Warnings.INVALIDATION,
+            name,
+            (type == null ? "null" : type.toString()),
+            n.toString(),
+            ""));
       }
     }
   }
 }
\ No newline at end of file
