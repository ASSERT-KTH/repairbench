diff --git a/tmp/1f353c77-99a4-49c6-9a06-7abd33d6cf31_buggy.java b/tmp/1bc385e4-4729-4b82-a7aa-86632da451ec_fixed.java
index 0b7c52e..8a8eda1 100644
--- a/tmp/1f353c77-99a4-49c6-9a06-7abd33d6cf31_buggy.java
+++ b/tmp/1bc385e4-4729-4b82-a7aa-86632da451ec_fixed.java
@@ -1,27 +1,32 @@
 /**
-     * Processes a OBJECTLIT node.
+ * Processes an OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    // Only rename unquoted property names (and getters/setters), skip quoted keys.
+    if (child.isQuotedString()) {
+      continue;
+    }
 
-        // We should never see a mix of numbers and strings.
+    // Maybe STRING (unquoted key), GET, SET
     String name = child.getString();
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
     if (!prop.scheduleRenaming(child,
                                processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+      // If renaming wasn't scheduled and we should error, report it.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
-                t.getSourceName(), child, propertiesToErrorFor.get(name),
-                Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+            t.getSourceName(),
+            child,
+            propertiesToErrorFor.get(name),
+            Warnings.INVALIDATION,
+            name,
+            (type == null ? "null" : type.toString()),
+            n.toString(),
+            ""));
       }
     }
   }
 }
\ No newline at end of file
