diff --git a/tmp/34fb5ad2-329e-49ac-a0bc-a9beabaa600d_buggy.java b/tmp/d4ed17bd-9801-437a-870a-0d619632ec32_fixed.java
index 0b7c52e..5016d05 100644
--- a/tmp/34fb5ad2-329e-49ac-a0bc-a9beabaa600d_buggy.java
+++ b/tmp/d4ed17bd-9801-437a-870a-0d619632ec32_fixed.java
@@ -1,27 +1,39 @@
 /**
-     * Processes a OBJECTLIT node.
+ * Processes an OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
        child != null;
        child = child.getNext()) {
     // Maybe STRING, GET, SET
 
+    // Skip quoted keys; they represent dynamic property names
+    // and should not participate in our renaming logic.
+    if (child.isQuotedString()) {
+      continue;
+    }
+
     // We should never see a mix of numbers and strings.
     String name = child.getString();
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
+    if (!prop.scheduleRenaming(
+            child,
             processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
-                t.getSourceName(), child, propertiesToErrorFor.get(name),
-                Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+            t.getSourceName(),
+            child,
+            propertiesToErrorFor.get(name),
+            Warnings.INVALIDATION,
+            name,
+            (type == null ? "null" : type.toString()),
+            n.toString(),
+            ""));
       }
     }
   }
 }
\ No newline at end of file
