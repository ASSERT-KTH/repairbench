diff --git a/tmp/3121e161-eb90-441c-86b6-f44b1cab9793_buggy.java b/tmp/61d8c3b5-4d1e-412d-8e47-26c274fec3c4_fixed.java
index 0b7c52e..c4e1130 100644
--- a/tmp/3121e161-eb90-441c-86b6-f44b1cab9793_buggy.java
+++ b/tmp/61d8c3b5-4d1e-412d-8e47-26c274fec3c4_fixed.java
@@ -1,27 +1,38 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
        child != null;
        child = child.getNext()) {
+    // Skip quoted property names in object literals (e.g. {'a': â€¦}),
+    // since they indicate dynamic keys that should not be renamed.
+    if (child.isQuotedString()) {
+      continue;
+    }
+
     // Maybe STRING, GET, SET
 
     // We should never see a mix of numbers and strings.
     String name = child.getString();
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+    if (!prop.scheduleRenaming(
+            child, processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
-                t.getSourceName(), child, propertiesToErrorFor.get(name),
-                Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+            t.getSourceName(),
+            child,
+            propertiesToErrorFor.get(name),
+            Warnings.INVALIDATION,
+            name,
+            (type == null ? "null" : type.toString()),
+            n.toString(),
+            ""));
       }
     }
   }
 }
\ No newline at end of file
