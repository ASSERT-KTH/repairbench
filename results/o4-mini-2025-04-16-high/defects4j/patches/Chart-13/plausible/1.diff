diff --git a/tmp/1750a23f-27f7-4b3b-bad0-7c355d8a9064_buggy.java b/tmp/8c0000fc-2df6-438f-b287-0e025503e96d_fixed.java
index 63a7c80..785855a 100644
--- a/tmp/1750a23f-27f7-4b3b-bad0-7c355d8a9064_buggy.java
+++ b/tmp/8c0000fc-2df6-438f-b287-0e025503e96d_fixed.java
@@ -1,77 +1,137 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
-        double[] w = new double[5];
-        double[] h = new double[5];
-        w[0] = constraint.getWidth();
+
+    double width = constraint.getWidth();
+    LengthConstraintType ht = constraint.getHeightConstraintType();
+
+    // 1. arrange top
+    double topH = 0.0;
     if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
+        RectangleConstraint c1 = (ht == LengthConstraintType.FIXED
+            ? new RectangleConstraint(
+                  width, null, LengthConstraintType.FIXED,
+                  0.0,
                   new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
-            Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+                  LengthConstraintType.RANGE)
+            : new RectangleConstraint(
+                  width, null, LengthConstraintType.FIXED,
+                  0.0, null, LengthConstraintType.NONE));
+        topH = this.topBlock.arrange(g2, c1).height;
     }
-        w[1] = w[0];
+
+    // 2. arrange bottom
+    double bottomH = 0.0;
     if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
-            Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+        RectangleConstraint c2 = (ht == LengthConstraintType.FIXED
+            ? new RectangleConstraint(
+                  width, null, LengthConstraintType.FIXED,
+                  0.0,
+                  new Range(0.0, Math.max(0.0, constraint.getHeight() - topH)),
+                  LengthConstraintType.RANGE)
+            : new RectangleConstraint(
+                  width, null, LengthConstraintType.FIXED,
+                  0.0, null, LengthConstraintType.NONE));
+        bottomH = this.bottomBlock.arrange(g2, c2).height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+    // 3. mid‐row height (only valid immediately if fixed)
+    double midH = (ht == LengthConstraintType.FIXED
+                   ? constraint.getHeight() - topH - bottomH
+                   : 0.0);
+
+    // 4. arrange left
+    double leftW = 0.0, leftH = 0.0;
     if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+        RectangleConstraint c3 = (ht == LengthConstraintType.FIXED
+            ? new RectangleConstraint(
+                  0.0,
+                  new Range(0.0, width),
+                  LengthConstraintType.RANGE,
+                  midH, null,
+                  LengthConstraintType.FIXED)
+            : new RectangleConstraint(
+                  0.0,
+                  new Range(0.0, width),
+                  LengthConstraintType.RANGE,
+                  0.0, null,
+                  LengthConstraintType.NONE));
+        Size2D s = this.leftBlock.arrange(g2, c3);
+        leftW = s.width;
+        leftH = s.height;
     }
-        h[3] = h[2];
+
+    // 5. arrange right
+    double rightW = 0.0, rightH = 0.0;
     if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+        RectangleConstraint c4 = (ht == LengthConstraintType.FIXED
+            ? new RectangleConstraint(
+                  0.0,
+                  new Range(0.0, Math.max(0.0, width - leftW)),
+                  LengthConstraintType.RANGE,
+                  midH, null,
+                  LengthConstraintType.FIXED)
+            : new RectangleConstraint(
+                  0.0,
+                  new Range(0.0, width),
+                  LengthConstraintType.RANGE,
+                  0.0, null,
+                  LengthConstraintType.NONE));
+        Size2D s = this.rightBlock.arrange(g2, c4);
+        rightW = s.width;
+        rightH = s.height;
     }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+
+    // 6. arrange center
+    double centerW = width - leftW - rightW;
+    double centerH = 0.0;
     if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+        RectangleConstraint c5 = (ht == LengthConstraintType.FIXED
+            ? new RectangleConstraint(centerW, midH)
+            : new RectangleConstraint(
+                  centerW, null,
+                  LengthConstraintType.FIXED,
+                  0.0, null,
+                  LengthConstraintType.NONE));
+        centerH = this.centerBlock.arrange(g2, c5).height;
     }
 
+    // 7. if height is not fixed, the mid‐row height is driven by the tallest
+    if (ht != LengthConstraintType.FIXED) {
+        midH = Math.max(centerH, Math.max(leftH, rightH));
+    }
+
+    // 8. assign the block bounds
+    double y = 0.0;
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
-        }
-        if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.topBlock.setBounds(new Rectangle2D.Double(
+            0.0, 0.0, width, topH
+        ));
+        y = topH;
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
-        }
-        if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.leftBlock.setBounds(new Rectangle2D.Double(
+            0.0, y, leftW, midH
+        ));
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(new Rectangle2D.Double(
+            leftW, y, centerW, midH
+        ));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+    if (this.rightBlock != null) {
+        this.rightBlock.setBounds(new Rectangle2D.Double(
+            leftW + centerW, y, rightW, midH
+        ));
+    }
+    if (this.bottomBlock != null) {
+        this.bottomBlock.setBounds(new Rectangle2D.Double(
+            0.0, y + midH, width, bottomH
+        ));
+    }
+
+    // 9. return the total size
+    double totalH = (ht == LengthConstraintType.FIXED
+                     ? constraint.getHeight()
+                     : topH + midH + bottomH);
+    return new Size2D(width, totalH);
 }
\ No newline at end of file
