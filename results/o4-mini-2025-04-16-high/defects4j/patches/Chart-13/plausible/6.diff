diff --git a/tmp/564463b3-438c-47b7-a4f4-7c5aeaa4ea8a_buggy.java b/tmp/04a9f226-90d3-499d-93ab-eb13852cf56f_fixed.java
index 63a7c80..aacb5e4 100644
--- a/tmp/564463b3-438c-47b7-a4f4-7c5aeaa4ea8a_buggy.java
+++ b/tmp/04a9f226-90d3-499d-93ab-eb13852cf56f_fixed.java
@@ -1,77 +1,117 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
-        w[0] = constraint.getWidth();
+
+    // the total available width and height
+    double totalW = constraint.getWidth();
+    double totalH = constraint.getHeight();
+
+    // ---- top ----
+    w[0] = totalW;
     if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
-            Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+        RectangleConstraint c1 = new RectangleConstraint(
+            w[0], null,
+            LengthConstraintType.FIXED,
+            0.0, new Range(0.0, totalH),
+            LengthConstraintType.RANGE
+        );
+        Size2D size1 = this.topBlock.arrange(g2, c1);
+        h[0] = size1.height;
     }
-        w[1] = w[0];
+
+    // ---- bottom ----
+    w[1] = totalW;
     if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
-            Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+        // guard against negative range
+        double availH = totalH - h[0];
+        if (availH < 0.0) {
+            availH = 0.0;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+        RectangleConstraint c2 = new RectangleConstraint(
+            w[1], null,
+            LengthConstraintType.FIXED,
+            0.0, new Range(0.0, availH),
+            LengthConstraintType.RANGE
+        );
+        Size2D size2 = this.bottomBlock.arrange(g2, c2);
+        h[1] = size2.height;
+    }
+
+    // ---- middle region height ----
+    h[2] = totalH - h[0] - h[1];
+    if (h[2] < 0.0) {
+        h[2] = 0.0;
+    }
+
+    // ---- left ----
     if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+        RectangleConstraint c3 = new RectangleConstraint(
+            0.0, new Range(0.0, totalW),
+            LengthConstraintType.RANGE,
+            h[2], null,
+            LengthConstraintType.FIXED
+        );
+        Size2D size3 = this.leftBlock.arrange(g2, c3);
+        w[2] = size3.width;
     }
+
+    // ---- right ----
     h[3] = h[2];
     if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+        double maxW = totalW - w[2];
+        if (maxW < 0.0) {
+            maxW = 0.0;
         }
+        RectangleConstraint c4 = new RectangleConstraint(
+            0.0, new Range(0.0, maxW),
+            LengthConstraintType.RANGE,
+            h[2], null,
+            LengthConstraintType.FIXED
+        );
+        Size2D size4 = this.rightBlock.arrange(g2, c4);
+        w[3] = size4.width;
+    }
+
+    // ---- center ----
     h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+    w[4] = totalW - w[2] - w[3];
+    if (w[4] < 0.0) {
+        w[4] = 0.0;
+    }
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
     }
 
+    // ---- set bounds ----
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(new Rectangle2D.Double(
+            0.0, 0.0, w[0], h[0]
+        ));
     }
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(new Rectangle2D.Double(
+            0.0, h[0] + h[2], w[1], h[1]
+        ));
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(new Rectangle2D.Double(
+            0.0, h[0], w[2], h[2]
+        ));
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(new Rectangle2D.Double(
+            w[2] + w[4], h[0], w[3], h[3]
+        ));
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(new Rectangle2D.Double(
+            w[2], h[0], w[4], h[4]
+        ));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+    // for a fixed‐width/fixed‐height arrangement we return exactly
+    // the constraint values (height clamped above prevents negatives)
+    return new Size2D(totalW, totalH);
 }
\ No newline at end of file
