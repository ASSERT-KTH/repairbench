diff --git a/tmp/b61787d3-31c8-4532-b208-fce81fd08fe3_buggy.java b/tmp/25ae94ca-b275-4262-85d4-fa8e92b8c478_fixed.java
index 63a7c80..e9fd209 100644
--- a/tmp/b61787d3-31c8-4532-b208-fce81fd08fe3_buggy.java
+++ b/tmp/25ae94ca-b275-4262-85d4-fa8e92b8c478_fixed.java
@@ -1,77 +1,115 @@
 /**
-     * Arranges the items within a container.
+ * Arranges the items within a container for the case where the width is
+ * fixed and the height is free.
  *
  * @param container   the container.
-     * @param constraint  the constraint.
  * @param g2          the graphics device.
+ * @param constraint  the constraint (fixed width, free height).
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
-        double[] w = new double[5];
-        double[] h = new double[5];
-        w[0] = constraint.getWidth();
+
+    // total available width is fixed
+    double totalW = constraint.getWidth();
+
+    // 1) arrange top block (fixed width, free height)
+    double topH = 0.0;
     if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
-            Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+        RectangleConstraint cTop = new RectangleConstraint(
+                totalW, null, LengthConstraintType.FIXED,
+                0.0,  null, LengthConstraintType.NONE
+        );
+        Size2D topSize = this.topBlock.arrange(g2, cTop);
+        topH = topSize.height;
     }
-        w[1] = w[0];
+
+    // 2) arrange bottom block (fixed width, free height)
+    double bottomH = 0.0;
     if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
-            Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+        RectangleConstraint cBottom = new RectangleConstraint(
+                totalW, null, LengthConstraintType.FIXED,
+                0.0,  null, LengthConstraintType.NONE
+        );
+        Size2D botSize = this.bottomBlock.arrange(g2, cBottom);
+        bottomH = botSize.height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+    // 3) arrange left block (free width, free height)
+    double leftW = 0.0;
+    double leftH = 0.0;
     if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+        RectangleConstraint cLeft = new RectangleConstraint(
+                0.0,  null, LengthConstraintType.NONE,
+                0.0,  null, LengthConstraintType.NONE
+        );
+        Size2D leftSize = this.leftBlock.arrange(g2, cLeft);
+        leftW = leftSize.width;
+        leftH = leftSize.height;
     }
-        h[3] = h[2];
+
+    // 4) arrange right block (free width, free height)
+    double rightW = 0.0;
+    double rightH = 0.0;
     if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+        RectangleConstraint cRight = new RectangleConstraint(
+                0.0,  null, LengthConstraintType.NONE,
+                0.0,  null, LengthConstraintType.NONE
+        );
+        Size2D rightSize = this.rightBlock.arrange(g2, cRight);
+        rightW = rightSize.width;
+        rightH = rightSize.height;
+    }
+
+    // 5) determine center width (fill remaining space)
+    double centerW = totalW - leftW - rightW;
+    if (centerW < 0.0) {
+        centerW = 0.0;
     }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+
+    // 6) arrange center block (fixed width, free height)
+    double centerH = 0.0;
     if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+        RectangleConstraint cCenter = new RectangleConstraint(
+                centerW, null, LengthConstraintType.FIXED,
+                0.0,     null, LengthConstraintType.NONE
+        );
+        Size2D cenSize = this.centerBlock.arrange(g2, cCenter);
+        centerH = cenSize.height;
     }
 
+    // 7) the middle‐row height is the max of left/center/right heights
+    double middleH = Math.max(centerH, Math.max(leftH, rightH));
+
+    // set the bounds for each block
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
-        }
-        if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.topBlock.setBounds(
+                new Rectangle2D.Double(0.0, 0.0, totalW, topH)
+        );
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(
+                new Rectangle2D.Double(0.0, topH, leftW, middleH)
+        );
+    }
+    if (this.centerBlock != null) {
+        this.centerBlock.setBounds(
+                new Rectangle2D.Double(leftW, topH, centerW, middleH)
+        );
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(
+                new Rectangle2D.Double(leftW + centerW, topH, rightW, middleH)
+        );
     }
-        if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+    if (this.bottomBlock != null) {
+        this.bottomBlock.setBounds(
+                new Rectangle2D.Double(0.0, topH + middleH, totalW, bottomH)
+        );
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+    // total height is sum of top, middle and bottom
+    double totalH = topH + middleH + bottomH;
+    return new Size2D(totalW, totalH);
 }
\ No newline at end of file
