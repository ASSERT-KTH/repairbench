diff --git a/tmp/67c7cf5a-1e6b-44e0-93d6-a01560019332_buggy.java b/tmp/594f29cb-093b-4da3-89e1-3962d428c40b_fixed.java
index 63a7c80..5f197da 100644
--- a/tmp/67c7cf5a-1e6b-44e0-93d6-a01560019332_buggy.java
+++ b/tmp/594f29cb-093b-4da3-89e1-3962d428c40b_fixed.java
@@ -1,77 +1,161 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+    // special handling: width fixed, height unconstrained
+    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {
+        double w0 = constraint.getWidth();
+        // top
+        double hTop = 0.0;
+        if (this.topBlock != null) {
+            RectangleConstraint tc = new RectangleConstraint(
+                w0, null, LengthConstraintType.FIXED,
+                0.0, null, LengthConstraintType.NONE
+            );
+            Size2D size = this.topBlock.arrange(g2, tc);
+            hTop = size.height;
+        }
+        // bottom
+        double hBottom = 0.0;
+        if (this.bottomBlock != null) {
+            RectangleConstraint bc = new RectangleConstraint(
+                w0, null, LengthConstraintType.FIXED,
+                0.0, null, LengthConstraintType.NONE
+            );
+            Size2D size = this.bottomBlock.arrange(g2, bc);
+            hBottom = size.height;
+        }
+        // left and right
+        double leftWidth = 0.0;
+        double rightWidth = 0.0;
+        double midHeight = 0.0;
+        if (this.leftBlock != null) {
+            RectangleConstraint lc = new RectangleConstraint(
+                0.0, new Range(0.0, w0),
+                LengthConstraintType.RANGE,
+                0.0, null, LengthConstraintType.NONE
+            );
+            Size2D size = this.leftBlock.arrange(g2, lc);
+            leftWidth = size.width;
+            midHeight = Math.max(midHeight, size.height);
+        }
+        if (this.rightBlock != null) {
+            double avail = Math.max(0.0, w0 - leftWidth);
+            RectangleConstraint rc = new RectangleConstraint(
+                0.0, new Range(0.0, avail),
+                LengthConstraintType.RANGE,
+                0.0, null, LengthConstraintType.NONE
+            );
+            Size2D size = this.rightBlock.arrange(g2, rc);
+            rightWidth = size.width;
+            midHeight = Math.max(midHeight, size.height);
+        }
+        // center
+        double centerWidth = Math.max(0.0, w0 - leftWidth - rightWidth);
+        if (this.centerBlock != null) {
+            RectangleConstraint cc = new RectangleConstraint(
+                centerWidth, null, LengthConstraintType.FIXED,
+                0.0, null, LengthConstraintType.NONE
+            );
+            Size2D size = this.centerBlock.arrange(g2, cc);
+            midHeight = Math.max(midHeight, size.height);
+        }
+        // set bounds
+        double y = 0.0;
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(
+                new Rectangle2D.Double(0.0, y, w0, hTop)
+            );
+            y += hTop;
+        }
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(
+                new Rectangle2D.Double(0.0, y, leftWidth, midHeight)
+            );
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(
+                new Rectangle2D.Double(leftWidth, y, centerWidth, midHeight)
+            );
+        }
+        if (this.rightBlock != null) {
+            this.rightBlock.setBounds(
+                new Rectangle2D.Double(leftWidth + centerWidth, y,
+                                       rightWidth, midHeight)
+            );
+        }
+        y += midHeight;
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(
+                new Rectangle2D.Double(0.0, y, w0, hBottom)
+            );
+        }
+        return new Size2D(w0, hTop + midHeight + hBottom);
+    }
+
+    // fixed-height logic (unchanged)
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
     if (this.topBlock != null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
                 new Range(0.0, constraint.getHeight()),
                 LengthConstraintType.RANGE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
     }
     w[1] = w[0];
     if (this.bottomBlock != null) {
         RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                LengthConstraintType.FIXED, 0.0,
+                new Range(0.0, constraint.getHeight() - h[0]),
+                LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
     h[2] = constraint.getHeight() - h[1] - h[0];
     if (this.leftBlock != null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
                 new Range(0.0, constraint.getWidth()),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
     }
     h[3] = h[2];
     if (this.rightBlock != null) {
         RectangleConstraint c4 = new RectangleConstraint(0.0,
                 new Range(0.0, constraint.getWidth() - w[2]),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
     }
     h[4] = h[2];
     w[4] = constraint.getWidth() - w[3] - w[2];
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
     }
 
     if (this.topBlock != null) {
         this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                 h[0]));
     }
     if (this.bottomBlock != null) {
         this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                 w[1], h[1]));
     }
     if (this.leftBlock != null) {
         this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                 h[2]));
     }
     if (this.rightBlock != null) {
         this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                 w[3], h[3]));
     }
     if (this.centerBlock != null) {
         this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                 h[4]));
     }
     return new Size2D(constraint.getWidth(), constraint.getHeight());
 }
\ No newline at end of file
