diff --git a/tmp/a4933cf4-9c1b-4618-85be-b4cf39e0cef4_buggy.java b/tmp/a929db08-2fea-491f-8af4-1d223774036c_fixed.java
index 63a7c80..77d1d30 100644
--- a/tmp/a4933cf4-9c1b-4618-85be-b4cf39e0cef4_buggy.java
+++ b/tmp/a929db08-2fea-491f-8af4-1d223774036c_fixed.java
@@ -1,77 +1,226 @@
 /**
-     * Arranges the items within a container.
+ * Arranges the items within a container when the width is fixed.
+ * If the height constraint is NONE (unbounded), we compute the
+ * total height dynamically (top‐middle‐bottom). Otherwise we
+ * fall back to the original fixed‐height algorithm.
  *
  * @param container   the container.
-     * @param constraint  the constraint.
  * @param g2          the graphics device.
+ * @param constraint  the constraint.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+
+    // --- if height is unconstrained, do a "fixed‐width / free‐height" layout ---
+    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {
+        final double totalWidth = constraint.getWidth();
+
+        // 1) top block
+        double topH = 0.0;
+        if (this.topBlock != null) {
+            RectangleConstraint c1 = new RectangleConstraint(
+                totalWidth, null, LengthConstraintType.FIXED,
+                0.0,       null, LengthConstraintType.NONE
+            );
+            Size2D size1 = this.topBlock.arrange(g2, c1);
+            topH = size1.height;
+        }
+
+        // 2) bottom block
+        double bottomH = 0.0;
+        if (this.bottomBlock != null) {
+            RectangleConstraint c2 = new RectangleConstraint(
+                totalWidth, null, LengthConstraintType.FIXED,
+                0.0,       null, LengthConstraintType.NONE
+            );
+            Size2D size2 = this.bottomBlock.arrange(g2, c2);
+            bottomH = size2.height;
+        }
+
+        // 3) left block
+        double leftW = 0.0;
+        Size2D leftSize = null;
+        if (this.leftBlock != null) {
+            RectangleConstraint c3 = new RectangleConstraint(
+                0.0,                        new Range(0.0, totalWidth),
+                LengthConstraintType.RANGE, 0.0,
+                null,                       LengthConstraintType.NONE
+            );
+            leftSize = this.leftBlock.arrange(g2, c3);
+            leftW = leftSize.width;
+        }
+
+        // 4) right block
+        double rightW = 0.0;
+        Size2D rightSize = null;
+        if (this.rightBlock != null) {
+            double availW = totalWidth - leftW;
+            if (availW < 0.0) {
+                availW = 0.0;
+            }
+            RectangleConstraint c4 = new RectangleConstraint(
+                0.0,                         new Range(0.0, availW),
+                LengthConstraintType.RANGE,  0.0,
+                null,                        LengthConstraintType.NONE
+            );
+            rightSize = this.rightBlock.arrange(g2, c4);
+            rightW = rightSize.width;
+        }
+
+        // 5) center block
+        double centerW = totalWidth - leftW - rightW;
+        if (centerW < 0.0) {
+            centerW = 0.0;
+        }
+        double centerH = 0.0;
+        if (this.centerBlock != null) {
+            RectangleConstraint c5 = new RectangleConstraint(
+                centerW, null, LengthConstraintType.FIXED,
+                0.0,     null, LengthConstraintType.NONE
+            );
+            Size2D size5 = this.centerBlock.arrange(g2, c5);
+            centerH = size5.height;
+        }
+
+        // compute the height of the "middle row"
+        double midH = 0.0;
+        if (leftSize   != null) midH = Math.max(midH, leftSize.height);
+        if (rightSize  != null) midH = Math.max(midH, rightSize.height);
+                               midH = Math.max(midH, centerH);
+
+        // now set the bounds
+        double y = 0.0;
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(
+                new Rectangle2D.Double(0.0,     y,
+                                       totalWidth, topH)
+            );
+        }
+        y += topH;
+
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(
+                new Rectangle2D.Double(0.0,        y,
+                                       leftW,      midH)
+            );
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(
+                new Rectangle2D.Double(leftW,      y,
+                                       centerW,    midH)
+            );
+        }
+        if (this.rightBlock != null) {
+            this.rightBlock.setBounds(
+                new Rectangle2D.Double(leftW + centerW, y,
+                                       rightW,           midH)
+            );
+        }
+
+        y += midH;
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(
+                new Rectangle2D.Double(0.0,        y,
+                                       totalWidth, bottomH)
+            );
+        }
+
+        // return the actual used size
+        return new Size2D(totalWidth, topH + midH + bottomH);
+    }
+
+    // --- else height is constrained (FIXED or RANGE): use the original code ---
+
     double[] w = new double[5];
     double[] h = new double[5];
+
+    // full‐width for top
     w[0] = constraint.getWidth();
     if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
-            Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+        RectangleConstraint c1 = new RectangleConstraint(
+            w[0],   null, LengthConstraintType.FIXED,
+            0.0, new Range(0.0, constraint.getHeight()),
+                 LengthConstraintType.RANGE
+        );
+        Size2D s1 = this.topBlock.arrange(g2, c1);
+        h[0] = s1.height;
     }
+
+    // full‐width for bottom
     w[1] = w[0];
     if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
-            Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+        RectangleConstraint c2 = new RectangleConstraint(
+            w[0],   null, LengthConstraintType.FIXED,
+            0.0, new Range(0.0, constraint.getHeight() - h[0]),
+                 LengthConstraintType.RANGE
+        );
+        Size2D s2 = this.bottomBlock.arrange(g2, c2);
+        h[1] = s2.height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+    // middle‐height region
+    h[2] = constraint.getHeight() - h[0] - h[1];
+
+    // left in middle
     if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+        RectangleConstraint c3 = new RectangleConstraint(
+            0.0, new Range(0.0, constraint.getWidth()),
+            LengthConstraintType.RANGE,
+            h[2], null, LengthConstraintType.FIXED
+        );
+        Size2D s3 = this.leftBlock.arrange(g2, c3);
+        w[2] = s3.width;
     }
     h[3] = h[2];
+
+    // right in middle
     if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
+        RectangleConstraint c4 = new RectangleConstraint(
+            0.0,
             new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+            LengthConstraintType.RANGE,
+            h[2], null, LengthConstraintType.FIXED
+        );
+        Size2D s4 = this.rightBlock.arrange(g2, c4);
+        w[3] = s4.width;
     }
+
+    // center in middle
     h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+    w[4] = constraint.getWidth() - w[2] - w[3];
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
     }
 
+    // set bounds (top, bottom, left, right, center)
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(
+            new Rectangle2D.Double(0.0, 0.0, w[0], h[0])
+        );
     }
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(
+            new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])
+        );
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(
+            new Rectangle2D.Double(0.0, h[0], w[2], h[2])
+        );
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(
+            new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])
+        );
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(
+            new Rectangle2D.Double(w[2], h[0], w[4], h[4])
+        );
     }
+
     return new Size2D(constraint.getWidth(), constraint.getHeight());
 }
\ No newline at end of file
