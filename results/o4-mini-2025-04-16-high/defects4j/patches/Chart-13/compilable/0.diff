diff --git a/tmp/54258590-d6a2-4576-a6d8-814d9b94195e_buggy.java b/tmp/ff6ab35a-b02d-4cce-9247-893fe7f3c253_fixed.java
index 63a7c80..45a4165 100644
--- a/tmp/54258590-d6a2-4576-a6d8-814d9b94195e_buggy.java
+++ b/tmp/ff6ab35a-b02d-4cce-9247-893fe7f3c253_fixed.java
@@ -1,77 +1,162 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+    // special case: fixed width, no height constraint (height NONE)
+    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {
+        double totalWidth = constraint.getWidth();
+        Size2D size;
+        // top
+        double hTop = 0.0;
+        if (this.topBlock != null) {
+            RectangleConstraint c1 = new RectangleConstraint(
+                totalWidth, null, LengthConstraintType.FIXED,
+                0.0,    null, LengthConstraintType.NONE
+            );
+            size = this.topBlock.arrange(g2, c1);
+            hTop = size.height;
+        }
+        // bottom
+        double hBottom = 0.0;
+        if (this.bottomBlock != null) {
+            RectangleConstraint c2 = new RectangleConstraint(
+                totalWidth, null, LengthConstraintType.FIXED,
+                0.0,       null, LengthConstraintType.NONE
+            );
+            size = this.bottomBlock.arrange(g2, c2);
+            hBottom = size.height;
+        }
+        // left
+        double wLeft = 0.0, hLeft = 0.0;
+        if (this.leftBlock != null) {
+            RectangleConstraint c3 = new RectangleConstraint(
+                0.0,
+                new Range(0.0, totalWidth),
+                LengthConstraintType.RANGE,
+                0.0, null, LengthConstraintType.NONE
+            );
+            size = this.leftBlock.arrange(g2, c3);
+            wLeft = size.width;
+            hLeft = size.height;
+        }
+        // right
+        double wRight = 0.0, hRight = 0.0;
+        if (this.rightBlock != null) {
+            RectangleConstraint c4 = new RectangleConstraint(
+                0.0,
+                new Range(0.0, totalWidth - wLeft),
+                LengthConstraintType.RANGE,
+                0.0, null, LengthConstraintType.NONE
+            );
+            size = this.rightBlock.arrange(g2, c4);
+            wRight = size.width;
+            hRight = size.height;
+        }
+        // center
+        double wCenter = totalWidth - wLeft - wRight;
+        double hCenter = 0.0;
+        if (this.centerBlock != null) {
+            RectangleConstraint c5 = new RectangleConstraint(
+                wCenter, null, LengthConstraintType.FIXED,
+                0.0,      null, LengthConstraintType.NONE
+            );
+            size = this.centerBlock.arrange(g2, c5);
+            hCenter = size.height;
+        }
+        // compute the height of the middle row
+        double hMiddle = Math.max(hLeft, Math.max(hCenter, hRight));
+        // set bounds for all blocks
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(new Rectangle2D.Double(
+                0.0, 0.0, totalWidth, hTop
+            ));
+        }
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(
+                0.0, hTop, wLeft, hMiddle
+            ));
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(new Rectangle2D.Double(
+                wLeft, hTop, wCenter, hMiddle
+            ));
+        }
+        if (this.rightBlock != null) {
+            this.rightBlock.setBounds(new Rectangle2D.Double(
+                wLeft + wCenter, hTop, wRight, hMiddle
+            ));
+        }
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(
+                0.0, hTop + hMiddle, totalWidth, hBottom
+            ));
+        }
+        return new Size2D(totalWidth, hTop + hMiddle + hBottom);
+    }
+
+    // original behavior for fixed width, fixed/range height
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
     if (this.topBlock != null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
                 new Range(0.0, constraint.getHeight()),
                 LengthConstraintType.RANGE);
-            Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+        Size2D size1 = this.topBlock.arrange(g2, c1);
+        h[0] = size1.height;
     }
     w[1] = w[0];
     if (this.bottomBlock != null) {
         RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
-            Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+                LengthConstraintType.FIXED, 0.0,
+                new Range(0.0, constraint.getHeight() - h[0]),
+                LengthConstraintType.RANGE);
+        Size2D size2 = this.bottomBlock.arrange(g2, c2);
+        h[1] = size2.height;
     }
     h[2] = constraint.getHeight() - h[1] - h[0];
     if (this.leftBlock != null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
                 new Range(0.0, constraint.getWidth()),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+        Size2D size3 = this.leftBlock.arrange(g2, c3);
+        w[2] = size3.width;
     }
     h[3] = h[2];
     if (this.rightBlock != null) {
         RectangleConstraint c4 = new RectangleConstraint(0.0,
                 new Range(0.0, constraint.getWidth() - w[2]),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+        Size2D size4 = this.rightBlock.arrange(g2, c4);
+        w[3] = size4.width;
     }
     h[4] = h[2];
     w[4] = constraint.getWidth() - w[3] - w[2];
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
     }
 
     if (this.topBlock != null) {
         this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                 h[0]));
     }
     if (this.bottomBlock != null) {
         this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                 w[1], h[1]));
     }
     if (this.leftBlock != null) {
         this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                 h[2]));
     }
     if (this.rightBlock != null) {
         this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                 w[3], h[3]));
     }
     if (this.centerBlock != null) {
         this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                 h[4]));
     }
     return new Size2D(constraint.getWidth(), constraint.getHeight());
 }
\ No newline at end of file
