diff --git a/tmp/a7103146-5e37-43dd-9e5a-fe0536534f0d_buggy.java b/tmp/bfe08b86-dd80-4b44-ad5b-ce699d941431_fixed.java
index 63a7c80..65eb28c 100644
--- a/tmp/a7103146-5e37-43dd-9e5a-fe0536534f0d_buggy.java
+++ b/tmp/bfe08b86-dd80-4b44-ad5b-ce699d941431_fixed.java
@@ -1,77 +1,201 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+
+    double totalWidth = constraint.getWidth();
+    LengthConstraintType heightType = constraint.getHeightConstraintType();
+
+    // free (or range) height: compute each child's preferred height and sum/stack
+    if (heightType != LengthConstraintType.FIXED) {
+        // 1. top block (width fixed, height free)
+        double topH = 0.0;
+        if (this.topBlock != null) {
+            RectangleConstraint c1 = new RectangleConstraint(
+                totalWidth, null, LengthConstraintType.FIXED,
+                0.0,    null, LengthConstraintType.NONE
+            );
+            Size2D s1 = this.topBlock.arrange(g2, c1);
+            topH = s1.height;
+        }
+        // 2. bottom block (width fixed, height free)
+        double bottomH = 0.0;
+        if (this.bottomBlock != null) {
+            RectangleConstraint c2 = new RectangleConstraint(
+                totalWidth, null, LengthConstraintType.FIXED,
+                0.0,       null, LengthConstraintType.NONE
+            );
+            Size2D s2 = this.bottomBlock.arrange(g2, c2);
+            bottomH = s2.height;
+        }
+        // 3. left block (height free, width range)
+        double leftW = 0.0, leftH = 0.0;
+        if (this.leftBlock != null) {
+            RectangleConstraint c3 = new RectangleConstraint(
+                0.0,
+                new Range(0.0, totalWidth),
+                LengthConstraintType.RANGE,
+                0.0, null,
+                LengthConstraintType.NONE
+            );
+            Size2D s3 = this.leftBlock.arrange(g2, c3);
+            leftW = s3.width;
+            leftH = s3.height;
+        }
+        // 4. right block (height free, width range)
+        double rightW = 0.0, rightH = 0.0;
+        if (this.rightBlock != null) {
+            RectangleConstraint c4 = new RectangleConstraint(
+                0.0,
+                new Range(0.0, Math.max(0.0, totalWidth - leftW)),
+                LengthConstraintType.RANGE,
+                0.0, null,
+                LengthConstraintType.NONE
+            );
+            Size2D s4 = this.rightBlock.arrange(g2, c4);
+            rightW = s4.width;
+            rightH = s4.height;
+        }
+        // 5. center block (width fixed by leftover, height free)
+        double centerW = Math.max(0.0, totalWidth - leftW - rightW);
+        double centerH = 0.0;
+        if (this.centerBlock != null) {
+            RectangleConstraint c5 = new RectangleConstraint(
+                centerW, null, LengthConstraintType.FIXED,
+                0.0,     null, LengthConstraintType.NONE
+            );
+            Size2D s5 = this.centerBlock.arrange(g2, c5);
+            centerH = s5.height;
+        }
+        // compute the maximum of the three middle-row heights
+        double midH = Math.max(centerH, Math.max(leftH, rightH));
+
+        // now set the bounds of each block
+        double y = 0.0;
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(new Rectangle2D.Double(
+                0.0, y, totalWidth, topH
+            ));
+        }
+        y += topH;
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(
+                0.0, y, leftW, midH
+            ));
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(new Rectangle2D.Double(
+                leftW, y, centerW, midH
+            ));
+        }
+        if (this.rightBlock != null) {
+            this.rightBlock.setBounds(new Rectangle2D.Double(
+                leftW + centerW, y, rightW, midH
+            ));
+        }
+        y += midH;
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(
+                0.0, y, totalWidth, bottomH
+            ));
+        }
+
+        // final container height is sum of top, mid, bottom
+        double resultH = topH + midH + bottomH;
+        // if there's a height-range constraint, clamp to [min, max]
+        if (heightType == LengthConstraintType.RANGE) {
+            Range hr = constraint.getHeightRange();
+            resultH = Math.max(hr.getLowerBound(),
+                               Math.min(resultH, hr.getUpperBound()));
+        }
+        return new Size2D(totalWidth, resultH);
+    }
+
+    // fixed height â€“ original implementation
     double[] w = new double[5];
     double[] h = new double[5];
-        w[0] = constraint.getWidth();
+
+    w[0] = totalWidth;
     if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
+        RectangleConstraint c1 = new RectangleConstraint(
+            w[0], null, LengthConstraintType.FIXED,
+            0.0,
             new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+            LengthConstraintType.RANGE
+        );
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
     }
+
     w[1] = w[0];
     if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+        RectangleConstraint c2 = new RectangleConstraint(
+            w[0], null, LengthConstraintType.FIXED,
+            0.0,
+            new Range(0.0, constraint.getHeight() - h[0]),
+            LengthConstraintType.RANGE
+        );
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+    h[2] = constraint.getHeight() - h[0] - h[1];
     if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+        RectangleConstraint c3 = new RectangleConstraint(
+            0.0,
+            new Range(0.0, totalWidth),
+            LengthConstraintType.RANGE,
+            h[2], null,
+            LengthConstraintType.FIXED
+        );
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
     }
+
     h[3] = h[2];
     if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+        RectangleConstraint c4 = new RectangleConstraint(
+            0.0,
+            new Range(0.0, totalWidth - w[2]),
+            LengthConstraintType.RANGE,
+            h[2], null,
+            LengthConstraintType.FIXED
+        );
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
     }
+
     h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+    w[4] = totalWidth - w[2] - w[3];
+
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
     }
 
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(new Rectangle2D.Double(
+            0.0, 0.0, w[0], h[0]
+        ));
     }
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(new Rectangle2D.Double(
+            0.0, h[0] + h[2], w[1], h[1]
+        ));
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(new Rectangle2D.Double(
+            0.0, h[0], w[2], h[2]
+        ));
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(new Rectangle2D.Double(
+            w[2] + w[4], h[0], w[3], h[3]
+        ));
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(new Rectangle2D.Double(
+            w[2], h[0], w[4], h[4]
+        ));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+    return new Size2D(totalWidth, constraint.getHeight());
 }
\ No newline at end of file
