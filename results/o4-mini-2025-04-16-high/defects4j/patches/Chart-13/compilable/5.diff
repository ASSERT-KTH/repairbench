diff --git a/tmp/04eb79ff-1eaf-4701-adf2-9d8d43d3b565_buggy.java b/tmp/1f2eabd6-7607-459e-9fba-76466239a86a_fixed.java
index 63a7c80..7dd41ec 100644
--- a/tmp/04eb79ff-1eaf-4701-adf2-9d8d43d3b565_buggy.java
+++ b/tmp/1f2eabd6-7607-459e-9fba-76466239a86a_fixed.java
@@ -1,77 +1,161 @@
 /**
-     * Arranges the items within a container.
+ * Arranges the items within a container (fixed‐width, possibly fixed/range/none‐height).
  *
  * @param container  the container.
  * @param constraint the constraint.
  * @param g2         the graphics device.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
-        double[] w = new double[5];
-        double[] h = new double[5];
-        w[0] = constraint.getWidth();
+
+    double containerWidth = constraint.getWidth();
+    LengthConstraintType hct = constraint.getHeightConstraintType();
+
+    // determine the "upper" height bound for children
+    double heightUpper;
+    if (hct == LengthConstraintType.FIXED) {
+        heightUpper = constraint.getHeight();
+    }
+    else if (hct == LengthConstraintType.RANGE) {
+        heightUpper = constraint.getHeightRange().getUpperBound();
+    }
+    else {  // NONE = unconstrained
+        heightUpper = Double.POSITIVE_INFINITY;
+    }
+
+    // --- arrange top block ---
+    double topH = 0.0;
+    Size2D topSize = null;
     if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
-            Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
-        }
-        w[1] = w[0];
+        RectangleConstraint c1 = new RectangleConstraint(
+            containerWidth, null, LengthConstraintType.FIXED,
+            0.0, new Range(0.0, heightUpper), LengthConstraintType.RANGE
+        );
+        topSize = this.topBlock.arrange(g2, c1);
+        topH = topSize.height;
+    }
+
+    // --- arrange bottom block ---
+    double bottomH = 0.0;
+    Size2D bottomSize = null;
     if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
-            Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+        double maxBottom = heightUpper - topH;
+        if (maxBottom < 0.0) {
+            maxBottom = 0.0;
+        }
+        RectangleConstraint c2 = new RectangleConstraint(
+            containerWidth, null, LengthConstraintType.FIXED,
+            0.0, new Range(0.0, maxBottom), LengthConstraintType.RANGE
+        );
+        bottomSize = this.bottomBlock.arrange(g2, c2);
+        bottomH = bottomSize.height;
+    }
+
+    // --- compute available height for left/center/right ---
+    double availableH;
+    if (hct == LengthConstraintType.FIXED || hct == LengthConstraintType.RANGE) {
+        availableH = heightUpper - topH - bottomH;
+        if (availableH < 0.0) {
+            availableH = 0.0;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+    }
+    else { // unconstrained
+        availableH = Double.POSITIVE_INFINITY;
+    }
+
+    // --- arrange left block ---
+    double leftW = 0.0;
+    Size2D leftSize = null;
     if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
-        }
-        h[3] = h[2];
+        RectangleConstraint c3 = new RectangleConstraint(
+            0.0, new Range(0.0, containerWidth),
+            LengthConstraintType.RANGE,
+            availableH, null, LengthConstraintType.FIXED
+        );
+        leftSize = this.leftBlock.arrange(g2, c3);
+        leftW = leftSize.width;
+    }
+
+    // --- arrange right block ---
+    double rightW = 0.0;
+    Size2D rightSize = null;
     if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
-        }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+        RectangleConstraint c4 = new RectangleConstraint(
+            0.0, new Range(0.0, containerWidth - leftW),
+            LengthConstraintType.RANGE,
+            availableH, null, LengthConstraintType.FIXED
+        );
+        rightSize = this.rightBlock.arrange(g2, c4);
+        rightW = rightSize.width;
+    }
+
+    // --- arrange center block ---
+    double centerW = containerWidth - leftW - rightW;
+    if (centerW < 0.0) {
+        centerW = 0.0;
+    }
+    Size2D centerSize = null;
+    RectangleConstraint c5 = new RectangleConstraint(centerW, availableH);
     if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+        centerSize = this.centerBlock.arrange(g2, c5);
+    }
+
+    // --- determine actual region height ---
+    double regionH;
+    if (hct == LengthConstraintType.FIXED) {
+        // fixed‐height: we must use the allotted space
+        regionH = availableH;
+    }
+    else {
+        // range or none: use the maximum of left/center/right actual heights
+        regionH = 0.0;
+        if (leftSize != null) {
+            regionH = Math.max(regionH, leftSize.height);
+        }
+        if (centerSize != null) {
+            regionH = Math.max(regionH, centerSize.height);
+        }
+        if (rightSize != null) {
+            regionH = Math.max(regionH, rightSize.height);
+        }
     }
 
+    // --- set the block bounds ---
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(new Rectangle2D.Double(
+            0.0, 0.0, containerWidth, topH
+        ));
     }
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(new Rectangle2D.Double(
+            0.0, topH + regionH, containerWidth, bottomH
+        ));
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(new Rectangle2D.Double(
+            0.0, topH, leftW, regionH
+        ));
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(new Rectangle2D.Double(
+            leftW + centerW, topH, rightW, regionH
+        ));
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(new Rectangle2D.Double(
+            leftW, topH, centerW, regionH
+        ));
+    }
+
+    // --- return the total size used ---
+    double totalHeight;
+    if (hct == LengthConstraintType.FIXED) {
+        totalHeight = heightUpper;
+    }
+    else {
+        totalHeight = topH + regionH + bottomH;
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+    return new Size2D(containerWidth, totalHeight);
 }
\ No newline at end of file
