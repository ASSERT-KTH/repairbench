diff --git a/tmp/dd134920-703d-4d67-a5fc-7b4bc0ce381f_buggy.java b/tmp/cb426f76-0770-4617-a034-470c79828e55_fixed.java
index 63a7c80..bb4d5bf 100644
--- a/tmp/dd134920-703d-4d67-a5fc-7b4bc0ce381f_buggy.java
+++ b/tmp/cb426f76-0770-4617-a034-470c79828e55_fixed.java
@@ -1,77 +1,170 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+    double totalWidth = constraint.getWidth();
+    LengthConstraintType heightType = constraint.getHeightConstraintType();
+
+    // Case 1: height is fixed – use the existing algorithm
+    if (heightType == LengthConstraintType.FIXED) {
         double[] w = new double[5];
         double[] h = new double[5];
-        w[0] = constraint.getWidth();
+        // top
+        w[0] = totalWidth;
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+            RectangleConstraint c1 = new RectangleConstraint(
+                    w[0], null, LengthConstraintType.FIXED,
+                    0.0, new Range(0.0, constraint.getHeight()),
                     LengthConstraintType.RANGE);
-            Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+            Size2D size1 = this.topBlock.arrange(g2, c1);
+            h[0] = size1.height;
         }
-        w[1] = w[0];
+        // bottom
+        w[1] = totalWidth;
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
-            Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+            double remHeight = constraint.getHeight() - h[0];
+            if (remHeight < 0) {
+                remHeight = 0.0;
             }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+            RectangleConstraint c2 = new RectangleConstraint(
+                    w[1], null, LengthConstraintType.FIXED,
+                    0.0, new Range(0.0, remHeight),
+                    LengthConstraintType.RANGE);
+            Size2D size2 = this.bottomBlock.arrange(g2, c2);
+            h[1] = size2.height;
+        }
+        // centre-row height
+        h[2] = constraint.getHeight() - h[0] - h[1];
+
+        // left
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+            RectangleConstraint c3 = new RectangleConstraint(
+                    0.0, new Range(0.0, totalWidth),
+                    LengthConstraintType.RANGE,
+                    h[2], null, LengthConstraintType.FIXED);
+            Size2D size3 = this.leftBlock.arrange(g2, c3);
+            w[2] = size3.width;
         }
+        // right
         h[3] = h[2];
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+            RectangleConstraint c4 = new RectangleConstraint(
+                    0.0,
+                    new Range(0.0, totalWidth - w[2]),
+                    LengthConstraintType.RANGE,
+                    h[2], null, LengthConstraintType.FIXED);
+            Size2D size4 = this.rightBlock.arrange(g2, c4);
+            w[3] = size4.width;
         }
+        // centre
         h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+        w[4] = totalWidth - w[2] - w[3];
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
 
+        // set bounds
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(
+                    0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(
+                    0.0, h[0] + h[2], w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(
+                    0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(
+                    w[2] + w[4], h[0], w[3], h[3]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(
+                    w[2], h[0], w[4], h[4]));
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+        return new Size2D(totalWidth, constraint.getHeight());
+    }
+
+    // Case 2: height is RANGE or NONE – compute heights freely
+    double hTop = 0.0;
+    if (this.topBlock != null) {
+        // width fixed, height unconstrained
+        RectangleConstraint cTop = new RectangleConstraint(
+                totalWidth, null, LengthConstraintType.FIXED,
+                0.0, null, LengthConstraintType.NONE);
+        Size2D sTop = this.topBlock.arrange(g2, cTop);
+        hTop = sTop.height;
+    }
+    double hBottom = 0.0;
+    if (this.bottomBlock != null) {
+        RectangleConstraint cBot = new RectangleConstraint(
+                totalWidth, null, LengthConstraintType.FIXED,
+                0.0, null, LengthConstraintType.NONE);
+        Size2D sBot = this.bottomBlock.arrange(g2, cBot);
+        hBottom = sBot.height;
+    }
+
+    // measure left and right
+    double wLeft = 0.0, hLeft = 0.0;
+    if (this.leftBlock != null) {
+        RectangleConstraint cLeft = new RectangleConstraint(
+                0.0, new Range(0.0, totalWidth),
+                LengthConstraintType.RANGE,
+                0.0, null, LengthConstraintType.NONE);
+        Size2D sLeft = this.leftBlock.arrange(g2, cLeft);
+        wLeft = sLeft.width;
+        hLeft = sLeft.height;
+    }
+    double wRight = 0.0, hRight = 0.0;
+    if (this.rightBlock != null) {
+        RectangleConstraint cRight = new RectangleConstraint(
+                0.0, new Range(0.0, totalWidth - wLeft),
+                LengthConstraintType.RANGE,
+                0.0, null, LengthConstraintType.NONE);
+        Size2D sRight = this.rightBlock.arrange(g2, cRight);
+        wRight = sRight.width;
+        hRight = sRight.height;
+    }
+
+    // measure centre
+    double wCentre = totalWidth - wLeft - wRight;
+    double hCentre = 0.0;
+    if (this.centerBlock != null) {
+        RectangleConstraint cCentre = new RectangleConstraint(
+                wCentre, null, LengthConstraintType.FIXED,
+                0.0, null, LengthConstraintType.NONE);
+        Size2D sCentre = this.centerBlock.arrange(g2, cCentre);
+        wCentre = sCentre.width;
+        hCentre = sCentre.height;
+    }
+
+    // the middle‐row height is the max of left/right/centre
+    double hMiddle = Math.max(Math.max(hLeft, hRight), hCentre);
+
+    // set bounds now that we know all dims
+    if (this.topBlock != null) {
+        this.topBlock.setBounds(new Rectangle2D.Double(
+                0.0, 0.0, totalWidth, hTop));
+    }
+    if (this.bottomBlock != null) {
+        this.bottomBlock.setBounds(new Rectangle2D.Double(
+                0.0, hTop + hMiddle, totalWidth, hBottom));
+    }
+    if (this.leftBlock != null) {
+        this.leftBlock.setBounds(new Rectangle2D.Double(
+                0.0, hTop, wLeft, hMiddle));
+    }
+    if (this.rightBlock != null) {
+        this.rightBlock.setBounds(new Rectangle2D.Double(
+                wLeft + wCentre, hTop, wRight, hMiddle));
+    }
+    if (this.centerBlock != null) {
+        this.centerBlock.setBounds(new Rectangle2D.Double(
+                wLeft, hTop, wCentre, hMiddle));
+    }
+
+    // total height is top + middle + bottom
+    return new Size2D(totalWidth, hTop + hMiddle + hBottom);
 }
\ No newline at end of file
