diff --git a/tmp/8164290b-d1f2-48ba-a090-a154c0f13ae0_buggy.java b/tmp/4c5ee39c-318b-4558-9aab-f0165e6434b4_fixed.java
index 63a7c80..4d28cb3 100644
--- a/tmp/8164290b-d1f2-48ba-a090-a154c0f13ae0_buggy.java
+++ b/tmp/4c5ee39c-318b-4558-9aab-f0165e6434b4_fixed.java
@@ -1,77 +1,147 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
+    final double width = constraint.getWidth();
+    // special case: fixed width, unconstrained height (NONE) => compute dynamic height
+    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {
+        // arrange top
+        double h0 = 0.0;
+        if (this.topBlock != null) {
+            RectangleConstraint cTop = new RectangleConstraint(
+                    width, null, LengthConstraintType.FIXED,
+                    0.0, null, LengthConstraintType.NONE);
+            Size2D s = this.topBlock.arrange(g2, cTop);
+            h0 = s.height;
+        }
+        // arrange bottom
+        double h1 = 0.0;
+        if (this.bottomBlock != null) {
+            RectangleConstraint cBottom = new RectangleConstraint(
+                    width, null, LengthConstraintType.FIXED,
+                    0.0, null, LengthConstraintType.NONE);
+            Size2D s = this.bottomBlock.arrange(g2, cBottom);
+            h1 = s.height;
+        }
+        // arrange left
+        double w2 = 0.0, h2 = 0.0;
+        if (this.leftBlock != null) {
+            RectangleConstraint cLeft = new RectangleConstraint(
+                    0.0, new Range(0.0, width), LengthConstraintType.RANGE,
+                    0.0, null, LengthConstraintType.NONE);
+            Size2D s = this.leftBlock.arrange(g2, cLeft);
+            w2 = s.width;
+            h2 = s.height;
+        }
+        // arrange right
+        double w3 = 0.0, h3 = 0.0;
+        if (this.rightBlock != null) {
+            RectangleConstraint cRight = new RectangleConstraint(
+                    0.0, new Range(0.0, width - w2), LengthConstraintType.RANGE,
+                    0.0, null, LengthConstraintType.NONE);
+            Size2D s = this.rightBlock.arrange(g2, cRight);
+            w3 = s.width;
+            h3 = s.height;
+        }
+        // arrange center
+        double w4 = width - w2 - w3;
+        double h4 = 0.0;
+        if (this.centerBlock != null) {
+            RectangleConstraint cCenter = new RectangleConstraint(
+                    w4, null, LengthConstraintType.FIXED,
+                    0.0, null, LengthConstraintType.NONE);
+            Size2D s = this.centerBlock.arrange(g2, cCenter);
+            h4 = s.height;
+        }
+        // the middle region height is the max of left, right, center
+        double hMiddle = Math.max(h2, Math.max(h3, h4));
+        // set block bounds
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(new Rectangle2D.Double(
+                    0.0, 0.0, width, h0));
+        }
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(
+                    0.0, h0 + hMiddle, width, h1));
+        }
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(
+                    0.0, h0, w2, hMiddle));
+        }
+        if (this.rightBlock != null) {
+            this.rightBlock.setBounds(new Rectangle2D.Double(
+                    w2 + w4, h0, w3, hMiddle));
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(new Rectangle2D.Double(
+                    w2, h0, w4, hMiddle));
+        }
+        // return total required size
+        return new Size2D(width, h0 + hMiddle + h1);
+    }
+
+    // original fixed‚Äêheight logic
     double[] w = new double[5];
     double[] h = new double[5];
-        w[0] = constraint.getWidth();
+    w[0] = width;
     if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+        RectangleConstraint c1 = new RectangleConstraint(
+            w[0], null, LengthConstraintType.FIXED,
+            0.0, new Range(0.0, constraint.getHeight()),
             LengthConstraintType.RANGE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
     }
     w[1] = w[0];
     if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+        RectangleConstraint c2 = new RectangleConstraint(
+            w[0], null, LengthConstraintType.FIXED,
+            0.0, new Range(0.0, constraint.getHeight() - h[0]),
+            LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
     h[2] = constraint.getHeight() - h[1] - h[0];
     if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+        RectangleConstraint c3 = new RectangleConstraint(
+            0.0, new Range(0.0, width),
+            LengthConstraintType.RANGE,
+            h[2], null, LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
     }
     h[3] = h[2];
     if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+        RectangleConstraint c4 = new RectangleConstraint(
+            0.0, new Range(0.0, width - w[2]),
+            LengthConstraintType.RANGE,
+            h[2], null, LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
     }
     h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+    w[4] = width - w[3] - w[2];
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
     }
-
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(new Rectangle2D.Double(
+            0.0, 0.0, w[0], h[0]));
     }
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(new Rectangle2D.Double(
+            0.0, h[0] + h[2], w[1], h[1]));
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(new Rectangle2D.Double(
+            0.0, h[0], w[2], h[2]));
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(new Rectangle2D.Double(
+            w[2] + w[4], h[0], w[3], h[3]));
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(new Rectangle2D.Double(
+            w[2], h[0], w[4], h[4]));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+    return new Size2D(width, constraint.getHeight());
 }
\ No newline at end of file
