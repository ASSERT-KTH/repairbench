diff --git a/tmp/8ba49700-aa54-4b7b-a3dd-e803dc0e94aa_buggy.java b/tmp/92a145be-3ef5-49e0-8f89-96e2c17f73a9_fixed.java
index 568865c..9e52bc3 100644
--- a/tmp/8ba49700-aa54-4b7b-a3dd-e803dc0e94aa_buggy.java
+++ b/tmp/92a145be-3ef5-49e0-8f89-96e2c17f73a9_fixed.java
@@ -1,121 +1,160 @@
 private Position decodePosition(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int status = buf.readUnsignedShort();
-
     position.setValid(BitUtil.check(status, 15));
-
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
     String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
-
     DateBuilder dateBuilder = new DateBuilder()
             .setYear(Integer.parseInt(time.substring(0, 2)))
             .setMonth(Integer.parseInt(time.substring(2, 4)))
             .setDay(Integer.parseInt(time.substring(4, 6)))
             .setHour(Integer.parseInt(time.substring(6, 8)))
             .setMinute(Integer.parseInt(time.substring(8, 10)))
             .setSecond(Integer.parseInt(time.substring(10, 12)));
     position.setTime(dateBuilder.getDate());
 
     position.setLongitude(buf.readInt() * 0.00001);
     position.setLatitude(buf.readInt() * 0.00001);
-
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
     position.setCourse(buf.readUnsignedShort());
     position.setAltitude(buf.readUnsignedShort());
 
     position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
     Network network = new Network();
 
     while (buf.readableBytes() > 4) {
         int subtype = buf.readUnsignedShort();
         int length = buf.readUnsignedShort() - 4;
         int endIndex = buf.readerIndex() + length;
         switch (subtype) {
+
+            // OBD data
             case 0x0001:
                 int coolantTemperature = buf.readUnsignedByte() - 40;
                 if (coolantTemperature <= 215) {
                     position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                 }
                 int rpm = buf.readUnsignedShort();
                 if (rpm <= 65535) {
                     position.set(Position.KEY_RPM, rpm);
                 }
                 position.set("averageSpeed", buf.readUnsignedByte());
                 buf.readUnsignedShort(); // interval fuel consumption
                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                 buf.readUnsignedInt(); // trip id
                 if (buf.readerIndex() < endIndex) {
                     position.set("adBlueLevel", buf.readUnsignedByte() * 0.4);
                 }
                 break;
+
+            // DTC trouble codes
+            case 0x0002:
+                List<String> dtcList = new ArrayList<>();
+                while (buf.readerIndex() + 2 <= endIndex) {
+                    int code = buf.readUnsignedShort();
+                    int prefixIndex = (code >> 14) & 0x03;
+                    char prefix;
+                    switch (prefixIndex) {
+                        case 0: prefix = 'P'; break;
+                        case 1: prefix = 'C'; break;
+                        case 2: prefix = 'B'; break;
+                        default: prefix = 'U'; break;
+                    }
+                    int codeValue = code & 0x0FFF;
+                    dtcList.add(prefix + String.format("%04X", codeValue));
+                }
+                if (!dtcList.isEmpty()) {
+                    position.set(Position.KEY_DTCS, String.join(" ", dtcList));
+                }
+                break;
+
+            // Signal and runtime
             case 0x0005:
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                 buf.readUnsignedInt(); // run time
                 break;
+
+            // VIN
             case 0x0009:
                 position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                        Position.KEY_VIN,
+                        buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                 break;
+
+            // Engine hours
             case 0x0011:
                 position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
                 break;
+
+            // Additional engine parameters
             case 0x0014:
                 position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                 position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                 position.set("airTemp", buf.readUnsignedByte() - 40);
                 position.set("airFlow", buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                 break;
+
+            // Cell towers
             case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
-                    for (String cell : cells) {
+                String cellData = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                if (!cellData.isEmpty()) {
+                    for (String cell : cellData.split("\\+")) {
                         String[] values = cell.split("@");
-                        network.addCellTower(CellTower.from(
-                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),
-                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                        if (values.length >= 4) {
+                            int mcc = Integer.parseInt(values[0]);
+                            int mnc = Integer.parseInt(values[1]);
+                            int lac = Integer.parseInt(values[2]);
+                            int cid = Integer.parseInt(values[3]);
+                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                        }
+                    }
                 }
                 break;
+
+            // Wiâ€‘Fi access points
             case 0x0021:
                 String[] points = buf.readCharSequence(
                         length, StandardCharsets.US_ASCII).toString().split("\\+");
                 for (String point : points) {
                     String[] values = point.split("@");
-                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                    network.addWifiAccessPoint(
+                            WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                 }
                 break;
+
             default:
                 buf.skipBytes(length);
                 break;
         }
         buf.readerIndex(endIndex);
     }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty())
+            || (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
-
     return position;
 }
\ No newline at end of file
