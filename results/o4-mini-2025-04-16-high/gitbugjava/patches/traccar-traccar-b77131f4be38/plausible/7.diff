diff --git a/tmp/a4b8c702-a54f-49eb-8302-a8de9e768f02_buggy.java b/tmp/0c3b6baa-d620-4e75-9961-a0ed0e96bcfb_fixed.java
index 7b8ee38..4ab50b5 100644
--- a/tmp/a4b8c702-a54f-49eb-8302-a8de9e768f02_buggy.java
+++ b/tmp/0c3b6baa-d620-4e75-9961-a0ed0e96bcfb_fixed.java
@@ -1,179 +1,201 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
+    // Reset index flag for each message
+    hasIndex = false;
+
     buf.skipBytes(1); // '[' header
     manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1); // '*' delimiter
 
-        int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+    // Read device ID
+    int idEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    String id = buf.readSlice(idEnd - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     buf.skipBytes(1); // '*' delimiter
 
+    // Optional index field
     String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+    int starPos = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (starPos + 5 < buf.writerIndex()
+            && buf.getByte(starPos + 5) == '*'
+            && buf.toString(starPos + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
+        int len = starPos - buf.readerIndex();
         hasIndex = true;
-            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
+        index = buf.readSlice(len).toString(StandardCharsets.US_ASCII);
+        buf.skipBytes(1); // '*' after index
     }
 
-        buf.skipBytes(4); // length
+    // Skip length (or index, if no real length field)
+    buf.skipBytes(4);
     buf.skipBytes(1); // '*' delimiter
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+    // Drop trailing ']'
+    buf.writerIndex(buf.writerIndex() - 1);
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+    // Read message type
+    int commaPos = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    if (commaPos < 0) {
+        commaPos = buf.writerIndex();
     }
-
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
-
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+    String type = buf.readSlice(commaPos - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+    if (commaPos < buf.writerIndex()) {
+        buf.readerIndex(commaPos + 1);
     }
 
+    // INIT
     if (type.equals("INIT")) {
-
+        if (index != null) {
             sendResponse(channel, id, index, "INIT,1");
+        }
+        return null;
+    }
 
-        } else if (type.equals("LK")) {
-
+    // LK
+    if (type.equals("LK")) {
+        if (index != null) {
             sendResponse(channel, id, index, "LK");
-
+        }
         if (buf.isReadable()) {
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
-                if (values.length >= 3) {
+            String[] parts = buf.toString(StandardCharsets.US_ASCII).split(",");
+            if (parts.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-
                 getLastLocation(position, null);
-
-                    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
-                    position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
-
+                position.set(Position.KEY_STEPS, Integer.parseInt(parts[0]));
+                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(parts[2]));
                 return position;
             }
         }
+        return null;
+    }
 
-        } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
-
+    // UD / AL / WT
+    if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
         Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
-
         if (type.startsWith("AL")) {
-                if (position != null) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
-                }
+            // send only, do not override alarm set by decodePosition
+            if (index != null) {
                 sendResponse(channel, id, index, "AL");
             }
-
+        }
         return position;
+    }
 
-        } else if (type.equals("TKQ") || type.equals("TKQ2")) {
-
+    // TKQ / TKQ2
+    if (type.equals("TKQ") || type.equals("TKQ2")) {
+        if (index != null) {
             sendResponse(channel, id, index, type);
+        }
+        return null;
+    }
 
-        } else if (type.equalsIgnoreCase("PULSE")
+    // PULSE, HEART, BLOOD, BPHRT, btemp2, TEMP
+    if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
-                || type.equalsIgnoreCase("btemp2")) {
+            || type.equalsIgnoreCase("btemp2")
+            || type.equals("TEMP")) {
 
-            if (buf.isReadable()) {
+        if (!buf.isReadable()) {
+            return null;
+        }
 
+        // Handle simple TEMP message
+        if (type.equals("TEMP")) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
+            getLastLocation(position, null);
+            String v = buf.toString(StandardCharsets.US_ASCII).trim();
+            if (!v.isEmpty()) {
+                position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(v));
+            }
+            return position;
+        }
 
+        // Other sensor readings
+        Position position = new Position(getProtocolName());
+        position.setDeviceId(deviceSession.getDeviceId());
         getLastLocation(position, new Date());
-
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
-                int valueIndex = 0;
+        String[] parts = buf.toString(StandardCharsets.US_ASCII).split(",");
+        int idx = 0;
 
         if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
-                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
+            if (Integer.parseInt(parts[idx++]) > 0) {
+                position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(parts[idx]));
             }
         } else {
             if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
-                        position.set("pressureHigh", values[valueIndex++]);
-                        position.set("pressureLow", values[valueIndex++]);
+                position.set("pressureHigh", parts[idx++]);
+                position.set("pressureLow", parts[idx++]);
             }
-                    if (valueIndex <= values.length - 1) {
-                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
+            if (idx < parts.length) {
+                position.set(Position.KEY_HEART_RATE, Integer.parseInt(parts[idx]));
             }
         }
-
         return position;
-
     }
 
-        } else if (type.equals("img")) {
-
+    // IMG
+    if (type.equals("img")) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
-
-            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
+        int t = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        buf.readerIndex(t + 12 + 2);
         position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
         return position;
+    }
 
-        } else if (type.equals("JXTK")) {
-
+    // JXTK (audio chunks)
+    if (type.equals("JXTK")) {
         int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
-            String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
-
-            int current = Integer.parseInt(values[2]);
-            int total = Integer.parseInt(values[3]);
+        String[] parts = buf.readCharSequence(dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII)
+                .toString().split(",");
+        int current = Integer.parseInt(parts[2]);
+        int total = Integer.parseInt(parts[3]);
 
         if (audio == null) {
             audio = Unpooled.buffer();
         }
         audio.writeBytes(buf);
 
+        if (index != null) {
             sendResponse(channel, id, index, "JXTKR,1");
+        }
 
         if (current < total) {
             return null;
         } else {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
             position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
             audio.release();
             audio = null;
             return position;
         }
+    }
 
-        } else if (type.equals("TK")) {
-
+    // TK (final audio)
+    if (type.equals("TK")) {
         if (buf.readableBytes() == 1) {
             return null;
         }
-
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
-
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
-
         return position;
-
     }
 
     return null;
 }
\ No newline at end of file
