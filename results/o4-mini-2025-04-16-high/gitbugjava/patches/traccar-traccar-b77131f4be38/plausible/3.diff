diff --git a/tmp/fdbde9d3-2208-4cd4-ba42-040b96dab860_buggy.java b/tmp/25c1b562-a1d3-4c1d-bc58-6d25e58e0995_fixed.java
index 7b8ee38..138a1b2 100644
--- a/tmp/fdbde9d3-2208-4cd4-ba42-040b96dab860_buggy.java
+++ b/tmp/25c1b562-a1d3-4c1d-bc58-6d25e58e0995_fixed.java
@@ -1,179 +1,210 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
+    // reset index flag on each call
+    hasIndex = false;
+
     ByteBuf buf = (ByteBuf) msg;
 
-        buf.skipBytes(1); // '[' header
+    // skip '[' header
+    buf.skipBytes(1);
+    // manufacturer, 2 chars
     manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1); // '*' delimiter
+    // skip '*' delimiter
+    buf.skipBytes(1);
 
+    // read device id
     int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
     String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
-        buf.skipBytes(1); // '*' delimiter
+    // skip '*' delimiter
+    buf.skipBytes(1);
 
+    // optional sequence index
     String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+    int starIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    // detect if there is an index before the length (4 hex digits)
+    if (starIndex + 5 < buf.writerIndex()
+            && buf.getByte(starIndex + 5) == '*'
+            && buf.toString(starIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
+        int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*')
+                - buf.readerIndex();
         hasIndex = true;
         index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
+        // skip '*' delimiter
+        buf.skipBytes(1);
     }
 
-        buf.skipBytes(4); // length
-        buf.skipBytes(1); // '*' delimiter
+    // skip length (4 chars) and '*' delimiter
+    buf.skipBytes(4);
+    buf.skipBytes(1);
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+    // drop trailing ']'
+    buf.writerIndex(buf.writerIndex() - 1);
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+    // parse message type
+    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    if (commaIndex < 0) {
+        commaIndex = buf.writerIndex();
     }
-
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
-
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+    String type = buf.readSlice(commaIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+    if (commaIndex < buf.writerIndex()) {
+        buf.readerIndex(commaIndex + 1);
     }
 
+    // handle INIT
     if (type.equals("INIT")) {
 
         sendResponse(channel, id, index, "INIT,1");
 
+    // handle heartbeat / link
     } else if (type.equals("LK")) {
 
         sendResponse(channel, id, index, "LK");
 
         if (buf.isReadable()) {
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             if (values.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-
                 getLastLocation(position, null);
-
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                 position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
-
                 return position;
             }
         }
 
-        } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
+    // handle simple temperature report
+    } else if (type.equalsIgnoreCase("TEMP")) {
+
+        if (buf.isReadable()) {
+            Position position = new Position(getProtocolName());
+            position.setDeviceId(deviceSession.getDeviceId());
+            // attach last known location timestamp
+            getLastLocation(position, new Date());
+            // parse temperature value
+            double temp = Double.parseDouble(buf.toString(StandardCharsets.US_ASCII));
+            // sensor channel is the sequence index if present, else 1
+            int sensor = hasIndex ? Integer.parseInt(index) : 1;
+            position.set(Position.PREFIX_TEMP + sensor, temp);
+            return position;
+        }
+
+    // handle UD*, AL*, WT*
+    } else if (type.startsWith("UD")
+            || type.startsWith("AL")
+            || type.startsWith("WT")) {
 
         Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
         if (type.startsWith("AL")) {
-                if (position != null) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
-                }
+            // acknowledge alarm
             sendResponse(channel, id, index, "AL");
         }
-
         return position;
 
+    // handle TKQ acknowledgements
     } else if (type.equals("TKQ") || type.equals("TKQ2")) {
 
         sendResponse(channel, id, index, type);
 
+    // handle health sensors: PULSE, HEART, BLOOD, BPHRT, btemp2
     } else if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
             || type.equalsIgnoreCase("btemp2")) {
 
         if (buf.isReadable()) {
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
-
             getLastLocation(position, new Date());
 
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             int valueIndex = 0;
 
             if (type.equalsIgnoreCase("btemp2")) {
                 if (Integer.parseInt(values[valueIndex++]) > 0) {
-                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
+                    position.set(Position.PREFIX_TEMP + 1,
+                            Double.parseDouble(values[valueIndex]));
                 }
             } else {
                 if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
                     position.set("pressureHigh", values[valueIndex++]);
                     position.set("pressureLow", values[valueIndex++]);
                 }
                 if (valueIndex <= values.length - 1) {
-                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
+                    position.set(Position.KEY_HEART_RATE,
+                            Integer.parseInt(values[valueIndex]));
                 }
             }
 
             return position;
-
         }
 
+    // handle image upload
     } else if (type.equals("img")) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
 
         int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
         buf.readerIndex(timeIndex + 12 + 2);
         position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
 
         return position;
 
+    // handle JXTK audio fragments
     } else if (type.equals("JXTK")) {
 
         int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
         String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
+                dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII)
+                .toString().split(",");
 
         int current = Integer.parseInt(values[2]);
         int total = Integer.parseInt(values[3]);
 
         if (audio == null) {
             audio = Unpooled.buffer();
         }
         audio.writeBytes(buf);
 
         sendResponse(channel, id, index, "JXTKR,1");
 
         if (current < total) {
             return null;
         } else {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
             position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
             audio.release();
             audio = null;
             return position;
         }
 
+    // handle direct audio
     } else if (type.equals("TK")) {
 
         if (buf.readableBytes() == 1) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
-
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
-
         return position;
-
     }
 
     return null;
 }
\ No newline at end of file
