diff --git a/tmp/2a384bbf-f5be-47f0-9961-9302beefd716_buggy.java b/tmp/267bf412-6718-4f2b-9f2b-48f3e6461bed_fixed.java
index 7b8ee38..06e4507 100644
--- a/tmp/2a384bbf-f5be-47f0-9961-9302beefd716_buggy.java
+++ b/tmp/267bf412-6718-4f2b-9f2b-48f3e6461bed_fixed.java
@@ -1,179 +1,184 @@
 @Override
-    protected Object decode(
-            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
+protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
+    // Reset index flag for each message
+    hasIndex = false;
 
-        buf.skipBytes(1); // '[' header
+    buf.skipBytes(1); // '['
     manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1); // '*' delimiter
+    buf.skipBytes(1); // '*'
 
-        int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+    // Read device ID
+    int idEnd = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    String id = buf.readSlice(idEnd - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
+    buf.skipBytes(1); // '*'
 
-        buf.skipBytes(1); // '*' delimiter
-
+    // Optional index
     String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+    int starIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (starIndex >= 0
+            && starIndex + 5 < buf.writerIndex()
+            && buf.getByte(starIndex + 5) == '*'
+            && buf.toString(starIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
         hasIndex = true;
+        int indexLength = starIndex - buf.readerIndex();
         index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
+        buf.skipBytes(1); // '*'
     }
 
+    // Skip length and delimiter
     buf.skipBytes(4); // length
-        buf.skipBytes(1); // '*' delimiter
+    buf.skipBytes(1); // '*'
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+    // Drop trailing ']'
+    buf.writerIndex(buf.writerIndex() - 1);
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+    // Extract message type
+    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    if (commaIndex < 0) {
+        commaIndex = buf.writerIndex();
     }
-
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
-
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+    String type = buf.readSlice(commaIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+    if (commaIndex < buf.writerIndex()) {
+        buf.readerIndex(commaIndex + 1);
     }
 
-        if (type.equals("INIT")) {
-
+    // Handle INIT
+    if ("INIT".equals(type)) {
+        if (channel != null) {
             sendResponse(channel, id, index, "INIT,1");
-
-        } else if (type.equals("LK")) {
-
+        }
+    }
+    // Handle raw temperature
+    else if ("TEMP".equalsIgnoreCase(type)) {
+        if (buf.isReadable()) {
+            String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+            if (values.length > 0) {
+                Position position = new Position(getProtocolName());
+                position.setDeviceId(deviceSession.getDeviceId());
+                getLastLocation(position, new Date());
+                position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[0]));
+                return position;
+            }
+        }
+    }
+    // Handle LK (heartbeat)
+    else if ("LK".equals(type)) {
+        if (channel != null) {
             sendResponse(channel, id, index, "LK");
-
+        }
         if (buf.isReadable()) {
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             if (values.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-
                 getLastLocation(position, null);
-
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                 position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
-
                 return position;
             }
         }
-
-        } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
-
+    }
+    // Handle GPS and alarm messages
+    else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
         Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
-
         if (type.startsWith("AL")) {
-                if (position != null) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
-                }
+            if (channel != null) {
                 sendResponse(channel, id, index, "AL");
             }
-
+        }
         return position;
-
-        } else if (type.equals("TKQ") || type.equals("TKQ2")) {
-
+    }
+    // Handle TKQ commands
+    else if ("TKQ".equals(type) || "TKQ2".equals(type)) {
+        if (channel != null) {
             sendResponse(channel, id, index, type);
-
-        } else if (type.equalsIgnoreCase("PULSE")
+        }
+    }
+    // Handle pulse, heart, blood pressure, secondary temperature
+    else if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
             || type.equalsIgnoreCase("btemp2")) {
-
         if (buf.isReadable()) {
-
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
-
             getLastLocation(position, new Date());
-
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
-                int valueIndex = 0;
-
+            int v = 0;
             if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
-                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
+                if (Integer.parseInt(values[v++]) > 0 && v < values.length) {
+                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[v]));
                 }
             } else {
                 if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
-                        position.set("pressureHigh", values[valueIndex++]);
-                        position.set("pressureLow", values[valueIndex++]);
+                    if (v < values.length) {
+                        position.set("pressureHigh", values[v++]);
                     }
-                    if (valueIndex <= values.length - 1) {
-                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
+                    if (v < values.length) {
+                        position.set("pressureLow", values[v++]);
+                    }
+                }
+                if (v <= values.length - 1) {
+                    position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[v]));
                 }
             }
-
             return position;
-
         }
-
-        } else if (type.equals("img")) {
-
+    }
+    // Handle image
+    else if ("img".equals(type)) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
-
-            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
+        int commaPos = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        buf.readerIndex(commaPos + 12 + 2);
         position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
         return position;
-
-        } else if (type.equals("JXTK")) {
-
+    }
+    // Handle JXTK audio fragments
+    else if ("JXTK".equals(type)) {
         int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
         String[] values = buf.readCharSequence(
                 dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
-
         int current = Integer.parseInt(values[2]);
         int total = Integer.parseInt(values[3]);
-
         if (audio == null) {
             audio = Unpooled.buffer();
         }
         audio.writeBytes(buf);
-
+        if (channel != null) {
             sendResponse(channel, id, index, "JXTKR,1");
-
+        }
         if (current < total) {
             return null;
         } else {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
             position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
             audio.release();
             audio = null;
             return position;
         }
-
-        } else if (type.equals("TK")) {
-
+    }
+    // Handle single-part audio
+    else if ("TK".equals(type)) {
         if (buf.readableBytes() == 1) {
             return null;
         }
-
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
-
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
-
         return position;
-
     }
 
     return null;
 }
\ No newline at end of file
