diff --git a/tmp/5c70dfcc-5bfb-4302-b9b7-0d909a3dc670_buggy.java b/tmp/8afc7013-80a0-4915-a886-7ac13d174ef1_fixed.java
index 7b8ee38..66d055c 100644
--- a/tmp/5c70dfcc-5bfb-4302-b9b7-0d909a3dc670_buggy.java
+++ b/tmp/8afc7013-80a0-4915-a886-7ac13d174ef1_fixed.java
@@ -1,179 +1,203 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
     buf.skipBytes(1); // '[' header
     manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1); // '*' delimiter
 
+    // Device ID
     int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
     String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
-
     buf.skipBytes(1); // '*' delimiter
 
+    // Optional index
     String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+    boolean hasIndex = false;
+    int nextAsterisk = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (nextAsterisk + 5 < buf.writerIndex()
+            && buf.getByte(nextAsterisk + 5) == '*'
+            && buf.toString(nextAsterisk + 1, 4, StandardCharsets.US_ASCII)
+                  .matches("\\p{XDigit}+")) {
+        int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*')
+                - buf.readerIndex();
         hasIndex = true;
         index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1); // '*' delimiter
     }
 
+    // Length
     buf.skipBytes(4); // length
     buf.skipBytes(1); // '*' delimiter
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+    // Ignore trailing ']'
+    buf.writerIndex(buf.writerIndex() - 1);
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    // Read message type
+    int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
     if (contentIndex < 0) {
         contentIndex = buf.writerIndex();
     }
-
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
-
+    String type = buf.readSlice(contentIndex - buf.readerIndex())
+            .toString(StandardCharsets.US_ASCII);
     if (contentIndex < buf.writerIndex()) {
         buf.readerIndex(contentIndex + 1);
     }
 
+    // INIT
     if (type.equals("INIT")) {
-
         sendResponse(channel, id, index, "INIT,1");
-
-        } else if (type.equals("LK")) {
-
+        return null;
+    }
+    // TEMP (fixed)
+    else if (type.equals("TEMP")) {
+        Position position = new Position(getProtocolName());
+        position.setDeviceId(deviceSession.getDeviceId());
+        getLastLocation(position, new Date());
+        if (buf.isReadable()) {
+            String value = buf.toString(StandardCharsets.US_ASCII);
+            try {
+                double temp = Double.parseDouble(value);
+                int sensorIndex = 1;
+                if (hasIndex && index != null) {
+                    try {
+                        sensorIndex = Integer.parseInt(index);
+                    } catch (NumberFormatException e) {
+                        // ignore, use default 1
+                    }
+                }
+                position.set(Position.PREFIX_TEMP + sensorIndex, temp);
+            } catch (NumberFormatException e) {
+                // skip invalid
+            }
+        }
+        return position;
+    }
+    // LK (location & battery/steps)
+    else if (type.equals("LK")) {
         sendResponse(channel, id, index, "LK");
-
         if (buf.isReadable()) {
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             if (values.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-
                 getLastLocation(position, null);
-
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                 position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
-
                 return position;
             }
         }
-
-        } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
-
+    }
+    // UD*, AL*, WT*
+    else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
         Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
-
         if (type.startsWith("AL")) {
             if (position != null) {
                 position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
             }
             sendResponse(channel, id, index, "AL");
         }
-
         return position;
-
-        } else if (type.equals("TKQ") || type.equals("TKQ2")) {
-
+    }
+    // TKQ / TKQ2
+    else if (type.equals("TKQ") || type.equals("TKQ2")) {
         sendResponse(channel, id, index, type);
-
-        } else if (type.equalsIgnoreCase("PULSE")
+    }
+    // PULSE / HEART / BLOOD / BPHRT / btemp2
+    else if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
             || type.equalsIgnoreCase("btemp2")) {
-
         if (buf.isReadable()) {
-
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
-
             getLastLocation(position, new Date());
-
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             int valueIndex = 0;
-
             if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
-                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
+                if (values.length > 1 && !values[0].isEmpty()) {
+                    try {
+                        if (Integer.parseInt(values[valueIndex++]) > 0
+                                && !values[valueIndex].isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + 1,
+                                Double.parseDouble(values[valueIndex]));
+                        }
+                    } catch (NumberFormatException e) {
+                        // ignore invalid
+                    }
                 }
             } else {
-                    if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                if ((type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD"))
+                        && values.length >= 2) {
                     position.set("pressureHigh", values[valueIndex++]);
                     position.set("pressureLow", values[valueIndex++]);
                 }
-                    if (valueIndex <= values.length - 1) {
-                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
+                if (valueIndex < values.length && !values[valueIndex].isEmpty()) {
+                    try {
+                        position.set(Position.KEY_HEART_RATE,
+                                Integer.parseInt(values[valueIndex]));
+                    } catch (NumberFormatException e) {
+                        // ignore
+                    }
                 }
             }
-
             return position;
-
         }
-
-        } else if (type.equals("img")) {
-
+    }
+    // Image
+    else if (type.equals("img")) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
-
         int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
         buf.readerIndex(timeIndex + 12 + 2);
-            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
+        position.set(Position.KEY_IMAGE,
+                writeMediaFile(id, buf, "jpg"));
         return position;
-
-        } else if (type.equals("JXTK")) {
-
+    }
+    // JXTK (audio chunks)
+    else if (type.equals("JXTK")) {
         int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
         String[] values = buf.readCharSequence(
                 dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
-
         int current = Integer.parseInt(values[2]);
         int total = Integer.parseInt(values[3]);
-
         if (audio == null) {
             audio = Unpooled.buffer();
         }
         audio.writeBytes(buf);
-
         sendResponse(channel, id, index, "JXTKR,1");
-
         if (current < total) {
             return null;
         } else {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
-                position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
+            position.set(Position.KEY_AUDIO,
+                    writeMediaFile(id, audio, "amr"));
             audio.release();
             audio = null;
             return position;
         }
-
-        } else if (type.equals("TK")) {
-
+    }
+    // TK (single audio)
+    else if (type.equals("TK")) {
         if (buf.readableBytes() == 1) {
             return null;
         }
-
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         getLastLocation(position, null);
-
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
-
         return position;
-
     }
 
     return null;
 }
\ No newline at end of file
