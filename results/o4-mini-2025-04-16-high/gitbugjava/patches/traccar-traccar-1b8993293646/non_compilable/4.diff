diff --git a/tmp/0f9ec690-eb0e-43b0-8601-f41af0516825_buggy.java b/tmp/7df7f160-e6c0-4b02-a3f0-5d94cfbb176b_fixed.java
index 7374e5f..913b419 100644
--- a/tmp/0f9ec690-eb0e-43b0-8601-f41af0516825_buggy.java
+++ b/tmp/7df7f160-e6c0-4b02-a3f0-5d94cfbb176b_fixed.java
@@ -1,61 +1,74 @@
 private Object decodeLocationNew(
         Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     String index = parser.next();
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
+    // Alarm code is hexadecimal
+    position.set(Position.KEY_ALARM, decodeAlarm(parser.nextHexInt()));
 
+    // Device timestamp
     position.setDeviceTime(parser.nextDateTime());
 
+    // Base cell tower
     Network network = new Network();
     network.addCellTower(CellTower.from(
-                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
+            parser.nextInt(),          // mcc
+            parser.nextInt(),          // mnc
+            parser.nextHexInt(),       // lac
+            parser.nextHexInt()));     // cid
 
+    // Battery and status
     position.set(Position.KEY_BATTERY, parser.nextDouble());
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
+    // Skip branch indicator (0 = GPS, >0 = Wi‑Fi)
+    if (parser.hasNext()) {
+        parser.next();
+    }
+
+    // GPS data: valid flag, satellites, speed, lat, lon
     if (parser.hasNext(5)) {
-
         position.setValid(parser.next().equals("A"));
         position.setFixTime(position.getDeviceTime());
         position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
-
-        } else {
-
+    }
+    // Wi‑Fi data: single field with MAC:RSSI pairs separated by '|'
+    else if (parser.hasNext()) {
         String[] points = parser.next().split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
             String mac = wifi[0].replaceAll("(..)", "$1:");
             network.addWifiAccessPoint(WifiAccessPoint.from(
-                        mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
+                    mac.substring(0, mac.length() - 1),
+                    Integer.parseInt(wifi[1])));
         }
-
     }
 
     position.setNetwork(network);
 
-        DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
-        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        String response = index + ",A03," + dateFormat.format(new Date());
+    // Send acknowledgment
+    DateFormat df = new SimpleDateFormat("yyMMddHHmmss");
+    df.setTimeZone(TimeZone.getTimeZone("UTC"));
+    String response = index + ",A03," + df.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
