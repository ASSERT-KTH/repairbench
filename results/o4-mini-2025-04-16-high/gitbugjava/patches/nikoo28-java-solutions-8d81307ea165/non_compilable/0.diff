diff --git a/tmp/8cd6fd5b-eb4d-44be-93e4-80333693b0fd_buggy.java b/tmp/1962e518-2078-46a7-887b-b771af29e2f6_fixed.java
index 9739964..c9eb1c7 100644
--- a/tmp/8cd6fd5b-eb4d-44be-93e4-80333693b0fd_buggy.java
+++ b/tmp/1962e518-2078-46a7-887b-b771af29e2f6_fixed.java
@@ -1,27 +1,20 @@
 public int[] calculateSpans(int[] prices) {
-
-    int[] spans = new int[prices.length];
-    spans[0] = 1; // Span of first element is always 1
+    int n = prices.length;
+    int[] spans = new int[n];
+    if (n == 0) return spans;
     
     Stack<Integer> indexStack = new Stack<>();
-
-    // Push the index of first element
+    spans[0] = 1;
     indexStack.push(0);
     
-    for (int i = 1; i < prices.length; i++) {
-      while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+    for (int i = 1; i < n; i++) {
+        // pop only strictly smaller prices, not equal ones
+        while (!indexStack.isEmpty() && prices[indexStack.peek()] < prices[i]) {
             indexStack.pop();
-
-      // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
-        spans[i] = i + 1;
-      else
-        spans[i] = i - indexStack.peek();
-
+        }
+        spans[i] = indexStack.isEmpty() ? i + 1 : i - indexStack.peek();
         indexStack.push(i);
     }
     
     return spans;
 }
\ No newline at end of file
