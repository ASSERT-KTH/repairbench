diff --git a/tmp/17e98358-797f-4601-a343-895e6a84832b_buggy.java b/tmp/8e4c966d-1f01-4c98-8a92-ba4a80f0d3c9_fixed.java
index 9739964..c3f82c0 100644
--- a/tmp/17e98358-797f-4601-a343-895e6a84832b_buggy.java
+++ b/tmp/8e4c966d-1f01-4c98-8a92-ba4a80f0d3c9_fixed.java
@@ -1,27 +1,19 @@
 public int[] calculateSpans(int[] prices) {
-
-    int[] spans = new int[prices.length];
-    spans[0] = 1; // Span of first element is always 1
-
+    int n = prices.length;
+    int[] spans = new int[n];
+    if (n == 0) {
+        return spans;
+    }
+    spans[0] = 1;
     Stack<Integer> indexStack = new Stack<>();
-
-    // Push the index of first element
     indexStack.push(0);
-
-    for (int i = 1; i < prices.length; i++) {
-      while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+    for (int i = 1; i < n; i++) {
+        // pop only strictly smaller prices (stop on equal or larger)
+        while (!indexStack.isEmpty() && prices[indexStack.peek()] < prices[i]) {
             indexStack.pop();
-
-      // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
-        spans[i] = i + 1;
-      else
-        spans[i] = i - indexStack.peek();
-
+        }
+        spans[i] = indexStack.isEmpty() ? i + 1 : i - indexStack.peek();
         indexStack.push(i);
     }
-
     return spans;
 }
\ No newline at end of file
