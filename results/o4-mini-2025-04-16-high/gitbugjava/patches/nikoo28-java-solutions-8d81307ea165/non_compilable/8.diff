diff --git a/tmp/e49e0c9c-5b76-43ec-a9da-bee079113e05_buggy.java b/tmp/7e5f5244-642a-4906-84e9-9118ebf23387_fixed.java
index 9739964..2600c1e 100644
--- a/tmp/e49e0c9c-5b76-43ec-a9da-bee079113e05_buggy.java
+++ b/tmp/7e5f5244-642a-4906-84e9-9118ebf23387_fixed.java
@@ -1,27 +1,20 @@
 public int[] calculateSpans(int[] prices) {
-
-    int[] spans = new int[prices.length];
-    spans[0] = 1; // Span of first element is always 1
-
+    if (prices == null || prices.length == 0) {
+        return new int[0];
+    }
+    int n = prices.length;
+    int[] spans = new int[n];
     Stack<Integer> indexStack = new Stack<>();
     
-    // Push the index of first element
-    indexStack.push(0);
-
-    for (int i = 1; i < prices.length; i++) {
-      while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+    for (int i = 0; i < n; i++) {
+        // Pop all indices whose prices are strictly less than current
+        while (!indexStack.isEmpty() && prices[indexStack.peek()] < prices[i]) {
             indexStack.pop();
-
-      // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
-        spans[i] = i + 1;
-      else
-        spans[i] = i - indexStack.peek();
-
+        }
+        // If stack empty, no greater-or-equal price to the left
+        spans[i] = indexStack.isEmpty() ? 1 : (i - indexStack.peek());
         indexStack.push(i);
     }
     
     return spans;
 }
\ No newline at end of file
