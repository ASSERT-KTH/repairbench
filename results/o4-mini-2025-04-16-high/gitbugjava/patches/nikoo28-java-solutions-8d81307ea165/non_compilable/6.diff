diff --git a/tmp/2cf82b8f-cf61-4363-9cff-0564fc5dfb3d_buggy.java b/tmp/f00310c1-64d3-41ba-8ca5-44592600900f_fixed.java
index 9739964..a0b8db6 100644
--- a/tmp/2cf82b8f-cf61-4363-9cff-0564fc5dfb3d_buggy.java
+++ b/tmp/f00310c1-64d3-41ba-8ca5-44592600900f_fixed.java
@@ -1,27 +1,23 @@
 public int[] calculateSpans(int[] prices) {
-
-    int[] spans = new int[prices.length];
+    if (prices == null || prices.length == 0) {
+        return new int[0];
+    }
+    int n = prices.length;
+    int[] spans = new int[n];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
-
-    // Push the index of first element
     indexStack.push(0);
 
-    for (int i = 1; i < prices.length; i++) {
-      while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+    for (int i = 1; i < n; i++) {
+        // Pop strictly smaller prices (stop at equal or greater)
+        while (!indexStack.isEmpty() && prices[indexStack.peek()] < prices[i]) {
             indexStack.pop();
-
-      // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
-        spans[i] = i + 1;
-      else
-        spans[i] = i - indexStack.peek();
-
+        }
+        // Compute span
+        spans[i] = indexStack.isEmpty() ? (i + 1) : (i - indexStack.peek());
         indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
