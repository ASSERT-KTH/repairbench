diff --git a/tmp/48bfac89-6000-40ff-82b6-fa934bf2da6f_buggy.java b/tmp/83df120f-bcf4-4648-b011-039473fb8b96_fixed.java
index 27f2719..433ef99 100644
--- a/tmp/48bfac89-6000-40ff-82b6-fa934bf2da6f_buggy.java
+++ b/tmp/83df120f-bcf4-4648-b011-039473fb8b96_fixed.java
@@ -1,90 +1,109 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
+    // Registration message
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
+        // store device session by IMEI
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
+    // All other messages require a valid session
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
-        if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
+    if (deviceSession == null) {
         return null;
     }
 
-        Position position = new Position(getProtocolName());
-        position.setDeviceId(deviceSession.getDeviceId());
-
+    // Determine message type
     String type = sentence.substring(1, 2);
-        position.set(Position.KEY_TYPE, type);
+    switch (type) {
 
-        if (type.equals("3")) {
-
-            getLastLocation(position, null);
-
-            position.set(Position.KEY_RESULT, sentence.substring(3));
-
-            return position;
-
-        } else if (type.equals("5")) {
+        // Acknowledgment
+        case "3":
+            // just return empty attributes
+            return new HashMap<String, Object>();
 
+        // Phone numbers configuration
+        case "4": {
             String[] values = sentence.split(",");
-
-            getLastLocation(position, null);
-
-            position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
+            Map<String, Object> result = new HashMap<>();
+            if (values.length >= 3 && !values[2].isEmpty()) {
+                result.put("phone1", values[2]);
+            }
+            if (values.length >= 4 && !values[3].isEmpty()) {
+                result.put("phone2", values[3]);
+            }
+            if (values.length >= 5 && !values[4].isEmpty()) {
+                result.put("phone3", values[4]);
+            }
+            return result;
+        }
+
+        // Status (battery level)
+        case "5": {
+            String[] values = sentence.split(",");
+            Map<String, Object> result = new HashMap<>();
             if (values.length >= 4) {
-                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
+                try {
+                    result.put(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+            }
+            return result;
         }
 
-            return position;
-
-        } else if (type.equals("B") || type.equals("D")) {
-
+        // Location reports
+        case "B":
+        case "D": {
             Parser parser = new Parser(PATTERN_BD, sentence);
             if (!parser.matches()) {
                 return null;
             }
-
+            Position position = new Position(getProtocolName());
+            position.setDeviceId(deviceSession.getDeviceId());
+            position.set(Position.KEY_TYPE, type);
             decodeFix(position, parser);
             decodeState(position, parser);
-
             position.set(Position.KEY_SATELLITES, parser.nextInt(0));
             position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
             position.set(Position.KEY_HDOP, parser.nextDouble(0));
-
             return position;
+        }
 
-        } else if (type.equals("C")) {
-
+        case "C": {
             Parser parser = new Parser(PATTERN_C, sentence);
             if (!parser.matches()) {
                 return null;
             }
-
+            Position position = new Position(getProtocolName());
+            position.setDeviceId(deviceSession.getDeviceId());
+            position.set(Position.KEY_TYPE, type);
             decodeFix(position, parser);
             decodeState(position, parser);
-
             return position;
+        }
 
-        } else if (type.equals("A")) {
-
+        case "A": {
             Parser parser = new Parser(PATTERN_A, sentence);
             if (!parser.matches()) {
                 return null;
             }
-
+            Position position = new Position(getProtocolName());
+            position.setDeviceId(deviceSession.getDeviceId());
+            position.set(Position.KEY_TYPE, type);
             decodeFix(position, parser);
-
             return position;
-
         }
 
+        default:
             return null;
     }
+}
\ No newline at end of file
