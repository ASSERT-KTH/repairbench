diff --git a/tmp/ade7c9a9-a8c7-47a9-b978-920dc1bb611d_buggy.java b/tmp/4c5cdd6e-c980-4da0-afb5-6cecadf3c26e_fixed.java
index 3b47cfa..6c50ebb 100644
--- a/tmp/ade7c9a9-a8c7-47a9-b978-920dc1bb611d_buggy.java
+++ b/tmp/4c5cdd6e-c980-4da0-afb5-6cecadf3c26e_fixed.java
@@ -1,141 +1,160 @@
 private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
-        int type = buf.readUnsignedByte();
+    // The first byte is a "transparent channel" header: F0â€“FF.
+    int header = buf.readUnsignedByte();
+    if ((header & 0xF0) != 0xF0) {
+        return null;
+    }
 
-        if (type == 0xF0) {
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
+    // Read and set the timestamp right away.
     Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
+    position.setTime(time);
 
+    // Archive flag
     if (buf.readUnsignedByte() > 0) {
         position.set(Position.KEY_ARCHIVE, true);
     }
 
-            buf.readUnsignedByte(); // vehicle type
+    // Vehicle type (we don't use it)
+    buf.readUnsignedByte();
 
     int count;
     int subtype = buf.readUnsignedByte();
     switch (subtype) {
+
+        // OBD PID data
         case 0x01:
             count = buf.readUnsignedByte();
             for (int i = 0; i < count; i++) {
                 int id = buf.readUnsignedShort();
                 int length = buf.readUnsignedByte();
                 switch (id) {
                     case 0x0102:
                     case 0x0528:
                     case 0x0546:
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
                         break;
                     case 0x0103:
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
                         break;
                     case 0x052A:
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
                         break;
                     case 0x0105:
                     case 0x052C:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
                         break;
                     case 0x014A:
                     case 0x0537:
                     case 0x0538:
                     case 0x0539:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         break;
                     case 0x052D:
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                         break;
                     case 0x0530:
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                         break;
                     case 0x0535:
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
                         break;
                     case 0x0536:
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
                         break;
                     case 0x0547:
                     case 0x0548:
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     default:
+                        // Generic IO
                         switch (length) {
                             case 1:
                                 position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                 break;
                             case 2:
                                 position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                 break;
                             case 4:
                                 position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                 break;
                             default:
                                 buf.skipBytes(length);
                                 break;
                         }
                         break;
                 }
             }
+            // Fill in last known location if needed, then read fresh coords
             getLastLocation(position, time);
             decodeCoordinates(position, buf);
             break;
+
+        // Diagnostic trouble codes
         case 0x02:
             count = buf.readUnsignedByte();
             for (int i = 0; i < count; i++) {
                 buf.readUnsignedInt(); // system id
                 int codeCount = buf.readUnsignedShort();
                 for (int j = 0; j < codeCount; j++) {
-                            buf.skipBytes(16); // code
+                    buf.skipBytes(16); // skip each code
                 }
             }
             getLastLocation(position, time);
             decodeCoordinates(position, buf);
             break;
+
+        // Driving behavior events
         case 0x03:
             count = buf.readUnsignedByte();
             for (int i = 0; i < count; i++) {
                 int id = buf.readUnsignedByte();
                 int length = buf.readUnsignedByte();
                 switch (id) {
                     case 0x1A:
                         position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                         break;
                     case 0x1B:
                         position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                         break;
                     case 0x1C:
                         position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                         break;
                     case 0x1D:
                     case 0x1E:
                     case 0x1F:
                         position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                         break;
                     case 0x23:
                         position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                         break;
                     default:
                         break;
                 }
                 buf.skipBytes(length);
             }
             getLastLocation(position, time);
             decodeCoordinates(position, buf);
             break;
+
+        // VIN update
         case 0x0B:
             if (buf.readUnsignedByte() > 0) {
-                        position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
+                position.set(
+                    Position.KEY_VIN,
+                    buf.readCharSequence(17, StandardCharsets.US_ASCII).toString()
+                );
             }
             getLastLocation(position, time);
             break;
+
         default:
+            // Unknown transparent subtype
             return null;
     }
 
     return position;
 }
\ No newline at end of file
-
-        return null;
-    }
