diff --git a/tmp/6b0f8cb7-a33d-4d65-a79e-f2f71cca68a6_buggy.java b/tmp/49a7b0ea-5537-46c5-a89e-a9c9a158f6b6_fixed.java
index 9e4d15c..c00a5f2 100644
--- a/tmp/6b0f8cb7-a33d-4d65-a79e-f2f71cca68a6_buggy.java
+++ b/tmp/49a7b0ea-5537-46c5-a89e-a9c9a158f6b6_fixed.java
@@ -1,137 +1,162 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
-        buf.skipBytes(2); // header
+    // Skip header and read packet type and size
+    buf.skipBytes(2);
     int type = buf.readUnsignedByte();
     buf.readUnsignedShort(); // size
 
-        if (type == MSG_LOGIN || type == MSG_ADMIN_NUMBER || type == MSG_SEND_TEXT
-                || type == MSG_SMS_ALARM_SWITCH || type == MSG_POSITION_REUPLOAD) {
+    // Always send confirmation for these message types
+    if (type == MSG_LOGIN
+            || type == MSG_ADMIN_NUMBER
+            || type == MSG_SEND_TEXT
+            || type == MSG_SMS_ALARM_SWITCH
+            || type == MSG_POSITION_REUPLOAD) {
 
+        // Build and send confirmation response
         ByteBuf response = Unpooled.buffer();
         response.writeByte(0x29);
-            response.writeByte(0x29); // header
+        response.writeByte(0x29);
         response.writeByte(MSG_CONFIRMATION);
-            response.writeShort(5); // size
+        response.writeShort(5);
         response.writeByte(buf.getByte(buf.writerIndex() - 2));
         response.writeByte(type);
-            response.writeByte(buf.writerIndex() > 9 ? buf.getByte(9) : 0); // 10th byte
+        response.writeByte(buf.writerIndex() > 9 ? buf.getByte(9) : 0);
         response.writeByte(Checksum.xor(response.nioBuffer()));
-            response.writeByte(0x0D); // ending
+        response.writeByte(0x0D);
 
         if (channel != null) {
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }
 
+        // For LOGIN messages, also parse and return a Position with battery level
+        if (type == MSG_LOGIN) {
+            // Read identifiers and establish device session
+            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, readIdentifiers(buf));
+            if (deviceSession == null) {
+                return null;
+            }
+            Position position = new Position(getProtocolName());
+            position.setDeviceId(deviceSession.getDeviceId());
+            // Battery percent is the low byte of the 2-byte field located at writerIndex - 20
+            int battery = buf.getUnsignedByte(buf.writerIndex() - 20);
+            position.set(Position.KEY_BATTERY_LEVEL, battery);
+            return position;
+        }
     }
 
-        if (type == MSG_ON_DEMAND || type == MSG_POSITION_UPLOAD || type == MSG_POSITION_REUPLOAD
-                || type == MSG_ALARM || type == MSG_REPLY || type == MSG_PERIPHERAL) {
+    // All other position‐reporting message types
+    if (type == MSG_ON_DEMAND
+            || type == MSG_POSITION_UPLOAD
+            || type == MSG_POSITION_REUPLOAD
+            || type == MSG_ALARM
+            || type == MSG_REPLY
+            || type == MSG_PERIPHERAL) {
 
         Position position = new Position(getProtocolName());
 
+        // Read identifiers and establish device session
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, readIdentifiers(buf));
         if (deviceSession == null) {
             return null;
         }
         position.setDeviceId(deviceSession.getDeviceId());
 
+        // Timestamp
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(BcdUtil.readInteger(buf, 2))
                 .setMonth(BcdUtil.readInteger(buf, 2))
                 .setDay(BcdUtil.readInteger(buf, 2))
                 .setHour(BcdUtil.readInteger(buf, 2))
                 .setMinute(BcdUtil.readInteger(buf, 2))
                 .setSecond(BcdUtil.readInteger(buf, 2));
         position.setTime(dateBuilder.getDate());
 
+        // Coordinates, speed, course, validity
         position.setLatitude(BcdUtil.readCoordinate(buf));
         position.setLongitude(BcdUtil.readCoordinate(buf));
         position.setSpeed(UnitsConverter.knotsFromKph(BcdUtil.readInteger(buf, 4)));
         position.setCourse(BcdUtil.readInteger(buf, 4));
         position.setValid((buf.readUnsignedByte() & 0x80) != 0);
 
         if (type != MSG_ALARM) {
 
+            // Odometer or fuel level
             int odometer = buf.readUnsignedMedium();
             if (BitUtil.to(odometer, 16) > 0) {
                 position.set(Position.KEY_ODOMETER, odometer);
             } else if (odometer > 0) {
                 position.set(Position.KEY_FUEL_LEVEL, BitUtil.from(odometer, 16));
             }
 
+            // Status
             position.set(Position.KEY_STATUS, buf.readUnsignedInt());
 
+            // Skip reserved fields
             buf.readUnsignedShort();
             buf.readUnsignedByte();
             buf.readUnsignedByte();
             buf.readUnsignedByte();
             buf.readUnsignedByte();
             buf.readUnsignedByte();
 
+            // Result code
             position.set(Position.KEY_RESULT, String.valueOf(buf.readUnsignedByte()));
 
+            // Peripheral data
             if (type == MSG_PERIPHERAL) {
-
                 buf.readUnsignedShort(); // data length
-
                 int dataType = buf.readUnsignedByte();
-
                 buf.readUnsignedByte();   // content length
-
                 switch (dataType) {
                     case 0x01:
                         position.set(Position.KEY_FUEL_LEVEL,
                                 buf.readUnsignedByte() * 100 + buf.readUnsignedByte());
                         break;
                     case 0x02:
                         position.set(Position.PREFIX_TEMP + 1,
                                 buf.readUnsignedByte() * 100 + buf.readUnsignedByte());
                         break;
                     case 0x18:
                         for (int i = 1; i <= 4; i++) {
                             double value = buf.readUnsignedShort();
                             if (value > 0x0000 && value < 0xFFFF) {
                                 position.set("fuel" + i, value / 0xFFFE);
                             }
                         }
                         break;
                     case 0x23:
                         Network network = new Network();
                         int count = buf.readUnsignedByte();
                         for (int i = 0; i < count; i++) {
                             network.addCellTower(CellTower.from(
                                     buf.readUnsignedShort(), buf.readUnsignedByte(),
                                     buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));
                         }
                         if (count > 0) {
                             position.setNetwork(network);
                         }
                         break;
                     default:
                         break;
                 }
-
             }
 
         } else {
 
+            // Alarm-specific data
             buf.readUnsignedByte(); // overloaded state
             buf.readUnsignedByte(); // logging status
-
             byte[] alarmStatus = new byte[8];
             buf.readBytes(alarmStatus);
-
             decodeAlarmStatus(position, alarmStatus);
-
         }
 
         return position;
-
     }
 
     return null;
 }
\ No newline at end of file
