diff --git a/tmp/bdc69b5d-55fc-41a5-93b1-f344531b9695_buggy.java b/tmp/b5bc4c74-02fe-4e51-9c40-31f02843021c_fixed.java
index 9240541..b3733e9 100644
--- a/tmp/bdc69b5d-55fc-41a5-93b1-f344531b9695_buggy.java
+++ b/tmp/b5bc4c74-02fe-4e51-9c40-31f02843021c_fixed.java
@@ -1,121 +1,172 @@
 private Position decodePosition(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int status = buf.readUnsignedShort();
-
     position.setValid(BitUtil.check(status, 15));
-
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
     String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
-
     DateBuilder dateBuilder = new DateBuilder()
             .setYear(Integer.parseInt(time.substring(0, 2)))
             .setMonth(Integer.parseInt(time.substring(2, 4)))
             .setDay(Integer.parseInt(time.substring(4, 6)))
             .setHour(Integer.parseInt(time.substring(6, 8)))
             .setMinute(Integer.parseInt(time.substring(8, 10)))
             .setSecond(Integer.parseInt(time.substring(10, 12)));
     position.setTime(dateBuilder.getDate());
 
     position.setLongitude(buf.readInt() * 0.00001);
     position.setLatitude(buf.readInt() * 0.00001);
 
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
     position.setCourse(buf.readUnsignedShort());
     position.setAltitude(buf.readUnsignedShort());
 
+    // Initial odometer (km â†’ m)
     position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
     Network network = new Network();
 
     while (buf.readableBytes() > 4) {
         int subtype = buf.readUnsignedShort();
         int length = buf.readUnsignedShort() - 4;
         int endIndex = buf.readerIndex() + length;
         switch (subtype) {
+
             case 0x0001:
                 int coolantTemperature = buf.readUnsignedByte() - 40;
                 if (coolantTemperature <= 215) {
                     position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                 }
                 int rpm = buf.readUnsignedShort();
                 if (rpm <= 65535) {
                     position.set(Position.KEY_RPM, rpm);
                 }
                 position.set("averageSpeed", buf.readUnsignedByte());
                 buf.readUnsignedShort(); // interval fuel consumption
                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                 buf.readUnsignedInt(); // trip id
                 if (buf.readerIndex() < endIndex) {
                     position.set("adBlueLevel", buf.readUnsignedByte() * 0.4);
                 }
                 break;
+
+            case 0x0002:
+                // Diagnostic trouble codes
+                java.util.List<String> dtcList = new java.util.ArrayList<>();
+                int count = length / 2;
+                for (int i = 0; i < count; i++) {
+                    int codeData = buf.readUnsignedShort();
+                    int typeBits = (codeData >> 14) & 0x3;
+                    char system;
+                    switch (typeBits) {
+                        case 0:
+                            system = 'P';
+                            break;
+                        case 1:
+                            system = 'C';
+                            break;
+                        case 2:
+                            system = 'B';
+                            break;
+                        case 3:
+                            system = 'U';
+                            break;
+                        default:
+                            system = '?';
+                    }
+                    int d1 = (codeData >> 12) & 0x3;
+                    int d2 = (codeData >> 8) & 0xF;
+                    int d3 = (codeData >> 4) & 0xF;
+                    int d4 = codeData & 0xF;
+                    String code = String.format("%c%d%X%X%X", system, d1, d2, d3, d4);
+                    dtcList.add(code);
+                }
+                if (!dtcList.isEmpty()) {
+                    position.set(Position.KEY_DTCS, String.join(" ", dtcList));
+                }
+                break;
+
             case 0x0005:
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                 buf.readUnsignedInt(); // run time
                 break;
+
             case 0x0009:
-                    position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                position.set(Position.KEY_VIN,
+                        buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                 break;
+
+            case 0x0010:
+                // Odometer override (ascii kilometers)
+                String odoText = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                try {
+                    double odoKm = Double.parseDouble(odoText);
+                    position.set(Position.KEY_ODOMETER, odoKm * 1000);
+                } catch (NumberFormatException e) {
+                    // ignore
+                }
+                break;
+
             case 0x0011:
                 position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
                 break;
+
             case 0x0014:
                 position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                 position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                 position.set("airTemp", buf.readUnsignedByte() - 40);
                 position.set("airFlow", buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                 break;
+
             case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                String[] cells = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().split("\\+");
                 for (String cell : cells) {
-                        String[] values = cell.split("@");
+                    String[] v = cell.split("@");
                     network.addCellTower(CellTower.from(
-                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),
-                                Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));
+                            Integer.parseInt(v[0]), Integer.parseInt(v[1]),
+                            Integer.parseInt(v[2], 16), Long.parseLong(v[3], 16)));
                 }
                 break;
+
             case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                String[] points = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().split("\\+");
                 for (String point : points) {
-                        String[] values = point.split("@");
-                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                    String[] v = point.split("@");
+                    network.addWifiAccessPoint(WifiAccessPoint.from(v[0], Integer.parseInt(v[1])));
                 }
                 break;
+
             default:
                 buf.skipBytes(length);
                 break;
         }
         buf.readerIndex(endIndex);
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
 
     return position;
 }
\ No newline at end of file
