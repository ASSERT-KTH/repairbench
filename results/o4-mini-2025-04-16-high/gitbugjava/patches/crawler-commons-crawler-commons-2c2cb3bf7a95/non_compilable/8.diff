diff --git a/tmp/b0ae388b-66c1-4c4d-af29-e52279181c8b_buggy.java b/tmp/4439a1bd-a424-4715-9b50-7daab1c1b9bf_fixed.java
index fd205cf..9f21ded 100644
--- a/tmp/b0ae388b-66c1-4c4d-af29-e52279181c8b_buggy.java
+++ b/tmp/4439a1bd-a424-4715-9b50-7daab1c1b9bf_fixed.java
@@ -1,151 +1,191 @@
-    private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {
+private SimpleRobotRules parseContent(String url, byte[] content, String contentType,
+                                      Collection<String> robotNames,
+                                      boolean exactUserAgentMatching) {
 
     // If there's nothing there, treat it like we have no restrictions.
     if ((content == null) || (content.length == 0)) {
         return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
     }
 
     int bytesLen = content.length;
     int offset = 0;
-        Charset encoding = StandardCharsets.US_ASCII;
+    // Default to UTF-8 so we correctly handle unescaped Unicode in robots.txt
+    Charset encoding = StandardCharsets.UTF_8;
 
     // Check for a UTF-8 BOM at the beginning (EF BB BF)
-        if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {
+    if ((bytesLen >= 3)
+        && (content[0] == (byte) 0xEF)
+        && (content[1] == (byte) 0xBB)
+        && (content[2] == (byte) 0xBF)) {
         offset = 3;
         bytesLen -= 3;
         encoding = StandardCharsets.UTF_8;
     }
     // Check for UTF-16LE BOM at the beginning (FF FE)
-        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {
+    else if ((bytesLen >= 2)
+             && (content[0] == (byte) 0xFF)
+             && (content[1] == (byte) 0xFE)) {
         offset = 2;
         bytesLen -= 2;
         encoding = StandardCharsets.UTF_16LE;
     }
     // Check for UTF-16BE BOM at the beginning (FE FF)
-        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {
+    else if ((bytesLen >= 2)
+             && (content[0] == (byte) 0xFE)
+             && (content[1] == (byte) 0xFF)) {
         offset = 2;
         bytesLen -= 2;
         encoding = StandardCharsets.UTF_16BE;
     }
 
-        String contentAsStr;
-        contentAsStr = new String(content, offset, bytesLen, encoding);
+    String contentAsStr = new String(content, offset, bytesLen, encoding);
 
     // Decide if we need to do special HTML processing.
-        boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith("text/html"));
+    boolean isHtmlType = (contentType != null)
+                         && contentType.toLowerCase(Locale.ROOT).startsWith("text/html");
 
-        // If it looks like it contains HTML, but doesn't have a user agent
-        // field, then
-        // assume somebody messed up and returned back to us a random HTML page
-        // instead
-        // of a robots.txt file.
+    // If it looks like HTML but has no User-agent, treat it as a blooper page.
     boolean hasHTML = false;
     if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {
         if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {
             LOGGER.trace("Found non-robots.txt HTML file: " + url);
             return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
         } else {
-                // We'll try to strip out HTML tags below.
             if (isHtmlType) {
                 LOGGER.debug("HTML content type returned for robots.txt file: " + url);
             } else {
                 LOGGER.debug("Found HTML in robots.txt file: " + url);
             }
-
             hasHTML = true;
         }
     }
 
-        // Break on anything that might be used as a line ending. Since
-        // tokenizer doesn't return empty tokens, a \r\n sequence still
-        // works since it looks like an empty string between the \r and \n.
-        StringTokenizer lineParser = new StringTokenizer(contentAsStr, "\n\r\u0085\u2028\u2029");
+    // Split on any line terminator
+    StringTokenizer lineParser =
+        new StringTokenizer(contentAsStr, "\n\r\u0085\u2028\u2029");
     ParseState parseState = new ParseState(url, robotNames);
 
     while (lineParser.hasMoreTokens()) {
         String line = lineParser.nextToken();
 
-            // Get rid of HTML markup, in case some brain-dead webmaster has
-            // created an HTML
-            // page for robots.txt. We could do more sophisticated processing
-            // here to better
-            // handle bad HTML, but that's a very tiny percentage of all
-            // robots.txt files.
+        // Strip HTML tags if needed
         if (hasHTML) {
             line = line.replaceAll("<[^>]+>", "");
         }
 
-            // trim out comments and whitespace
+        // Remove comments
         int hashPos = line.indexOf("#");
         if (hashPos >= 0) {
             line = line.substring(0, hashPos);
         }
 
         line = line.trim();
-            if (line.length() == 0) {
+        if (line.isEmpty()) {
             continue;
         }
 
         RobotToken token = tokenize(line);
         switch (token.getDirective()) {
+
             case USER_AGENT:
                 handleUserAgent(parseState, token);
                 break;
 
             case DISALLOW:
                 parseState.setFinishedAgentFields(true);
-                handleDisallow(parseState, token);
+                // Decode any percent-encoded UTF-8 octets into actual chars
+                String rawDisallow = token.getValue();
+                java.io.ByteArrayOutputStream baosD = new java.io.ByteArrayOutputStream();
+                for (int i = 0; i < rawDisallow.length();) {
+                    char c = rawDisallow.charAt(i);
+                    if (c == '%' && i + 2 < rawDisallow.length()) {
+                        int hi = Character.digit(rawDisallow.charAt(i + 1), 16);
+                        int lo = Character.digit(rawDisallow.charAt(i + 2), 16);
+                        if (hi >= 0 && lo >= 0) {
+                            baosD.write((hi << 4) + lo);
+                            i += 3;
+                            continue;
+                        }
+                    }
+                    byte[] b = Character.toString(c).getBytes(StandardCharsets.UTF_8);
+                    baosD.write(b, 0, b.length);
+                    i++;
+                }
+                String decodedDisallow =
+                    new String(baosD.toByteArray(), StandardCharsets.UTF_8);
+                handleDisallow(parseState,
+                              new RobotToken(token.getDirective(), decodedDisallow));
                 break;
 
             case ALLOW:
                 parseState.setFinishedAgentFields(true);
-                handleAllow(parseState, token);
+                // Decode any percent-encoded UTF-8 octets into actual chars
+                String rawAllow = token.getValue();
+                java.io.ByteArrayOutputStream baosA = new java.io.ByteArrayOutputStream();
+                for (int i = 0; i < rawAllow.length();) {
+                    char c = rawAllow.charAt(i);
+                    if (c == '%' && i + 2 < rawAllow.length()) {
+                        int hi = Character.digit(rawAllow.charAt(i + 1), 16);
+                        int lo = Character.digit(rawAllow.charAt(i + 2), 16);
+                        if (hi >= 0 && lo >= 0) {
+                            baosA.write((hi << 4) + lo);
+                            i += 3;
+                            continue;
+                        }
+                    }
+                    byte[] b = Character.toString(c).getBytes(StandardCharsets.UTF_8);
+                    baosA.write(b, 0, b.length);
+                    i++;
+                }
+                String decodedAllow =
+                    new String(baosA.toByteArray(), StandardCharsets.UTF_8);
+                handleAllow(parseState,
+                            new RobotToken(token.getDirective(), decodedAllow));
                 break;
 
             case CRAWL_DELAY:
                 parseState.setFinishedAgentFields(true);
                 handleCrawlDelay(parseState, token);
                 break;
 
             case SITEMAP:
                 parseState.setFinishedAgentFields(true);
                 handleSitemap(parseState, token);
                 break;
 
             case HTTP:
                 parseState.setFinishedAgentFields(true);
                 handleHttp(parseState, token);
                 break;
 
             case UNKNOWN:
-                reportWarning(parseState, "Unknown directive in robots.txt file: {}", line);
+                reportWarning(parseState,
+                              "Unknown directive in robots.txt file: {}", line);
                 parseState.setFinishedAgentFields(true);
                 break;
 
             case MISSING:
-                reportWarning(parseState, "Unknown line in robots.txt file (size {}): {}", content.length, line);
+                reportWarning(parseState,
+                              "Unknown line in robots.txt file (size {}): {}",
+                              content.length, line);
                 parseState.setFinishedAgentFields(true);
                 break;
 
             default:
-                    // All others we just ignore
-                    // TODO KKr - which of these should be setting
-                    // finishedAgentFields to true?
-                    // TODO KKr - handle no-index
-                    // TODO KKr - handle request-rate and visit-time
+                // ignore other directives
                 break;
         }
     }
 
     this._numWarningsDuringLastParse.set(parseState._numWarnings);
     SimpleRobotRules result = parseState.getRobotRules();
     if (result.getCrawlDelay() > _maxCrawlDelay) {
-            // Some evil sites use a value like 3600 (seconds) for the crawl
-            // delay, which would cause lots of problems for us.
-            LOGGER.debug("Crawl delay exceeds max value - so disallowing all URLs: {}", url);
+        // If crawl‐delay is unreasonably large, disallow all
+        LOGGER.debug("Crawl delay exceeds max value - so disallowing all URLs: {}",
+                     url);
         return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);
     } else {
         result.sortRules();
         return result;
     }
 }
\ No newline at end of file
