diff --git a/tmp/f288f309-5966-4a0a-92cd-b5dd2e990153_buggy.java b/tmp/db6899de-2d0c-49f0-bd2f-100ec6493d56_fixed.java
index fd205cf..aab603a 100644
--- a/tmp/f288f309-5966-4a0a-92cd-b5dd2e990153_buggy.java
+++ b/tmp/db6899de-2d0c-49f0-bd2f-100ec6493d56_fixed.java
@@ -1,151 +1,162 @@
 private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {
 
     // If there's nothing there, treat it like we have no restrictions.
     if ((content == null) || (content.length == 0)) {
         return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
     }
 
     int bytesLen = content.length;
     int offset = 0;
     Charset encoding = StandardCharsets.US_ASCII;
 
     // Check for a UTF-8 BOM at the beginning (EF BB BF)
     if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {
         offset = 3;
         bytesLen -= 3;
         encoding = StandardCharsets.UTF_8;
     }
     // Check for UTF-16LE BOM at the beginning (FF FE)
     else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {
         offset = 2;
         bytesLen -= 2;
         encoding = StandardCharsets.UTF_16LE;
     }
     // Check for UTF-16BE BOM at the beginning (FE FF)
     else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {
         offset = 2;
         bytesLen -= 2;
         encoding = StandardCharsets.UTF_16BE;
     }
 
-        String contentAsStr;
-        contentAsStr = new String(content, offset, bytesLen, encoding);
+    String contentAsStr = new String(content, offset, bytesLen, encoding);
 
     // Decide if we need to do special HTML processing.
     boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith("text/html"));
 
-        // If it looks like it contains HTML, but doesn't have a user agent
-        // field, then
-        // assume somebody messed up and returned back to us a random HTML page
-        // instead
-        // of a robots.txt file.
+    // If it looks like HTML but has no User-agent, assume it's not robots.txt
     boolean hasHTML = false;
     if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {
         if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {
             LOGGER.trace("Found non-robots.txt HTML file: " + url);
             return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
         } else {
-                // We'll try to strip out HTML tags below.
             if (isHtmlType) {
                 LOGGER.debug("HTML content type returned for robots.txt file: " + url);
             } else {
                 LOGGER.debug("Found HTML in robots.txt file: " + url);
             }
-
             hasHTML = true;
         }
     }
 
-        // Break on anything that might be used as a line ending. Since
-        // tokenizer doesn't return empty tokens, a \r\n sequence still
-        // works since it looks like an empty string between the \r and \n.
+    // Break on anything that might be used as a line ending.
     StringTokenizer lineParser = new StringTokenizer(contentAsStr, "\n\r\u0085\u2028\u2029");
     ParseState parseState = new ParseState(url, robotNames);
 
     while (lineParser.hasMoreTokens()) {
         String line = lineParser.nextToken();
 
-            // Get rid of HTML markup, in case some brain-dead webmaster has
-            // created an HTML
-            // page for robots.txt. We could do more sophisticated processing
-            // here to better
-            // handle bad HTML, but that's a very tiny percentage of all
-            // robots.txt files.
+        // Strip HTML if needed
         if (hasHTML) {
             line = line.replaceAll("<[^>]+>", "");
         }
 
-            // trim out comments and whitespace
+        // Trim comments and whitespace
         int hashPos = line.indexOf("#");
         if (hashPos >= 0) {
             line = line.substring(0, hashPos);
         }
-
         line = line.trim();
         if (line.length() == 0) {
             continue;
         }
 
         RobotToken token = tokenize(line);
         switch (token.getDirective()) {
             case USER_AGENT:
                 handleUserAgent(parseState, token);
                 break;
 
             case DISALLOW:
                 parseState.setFinishedAgentFields(true);
                 handleDisallow(parseState, token);
+
+                // --- NEW: support percent-decoded and percent-encoded variants ---
+                String disallowPath = token.getValue();
+                // 1) try to decode any %XX sequences (UTF-8)
+                try {
+                    String decoded = java.net.URLDecoder.decode(disallowPath, StandardCharsets.UTF_8.name());
+                    if (!decoded.equals(disallowPath)) {
+                        handleDisallow(parseState, new RobotToken(token.getDirective(), decoded));
+                    }
+                } catch (IllegalArgumentException e) {
+                    // malformed percent-encoding â†’ ignore
+                }
+                // 2) percent-encode any non-ASCII codepoints
+                StringBuilder sbEnc = new StringBuilder();
+                for (int i = 0; i < disallowPath.length(); ) {
+                    int cp = disallowPath.codePointAt(i);
+                    if (cp <= 0x7F) {
+                        sbEnc.append((char) cp);
+                    } else {
+                        byte[] bytes = new String(Character.toChars(cp)).getBytes(StandardCharsets.UTF_8);
+                        for (byte b : bytes) {
+                            sbEnc.append('%');
+                            sbEnc.append(String.format("%02X", b & 0xFF));
+                        }
+                    }
+                    i += Character.charCount(cp);
+                }
+                String encoded = sbEnc.toString();
+                if (!encoded.equals(disallowPath)) {
+                    handleDisallow(parseState, new RobotToken(token.getDirective(), encoded));
+                }
+                // --- END NEW HANDLING ---
                 break;
 
             case ALLOW:
                 parseState.setFinishedAgentFields(true);
                 handleAllow(parseState, token);
                 break;
 
             case CRAWL_DELAY:
                 parseState.setFinishedAgentFields(true);
                 handleCrawlDelay(parseState, token);
                 break;
 
             case SITEMAP:
                 parseState.setFinishedAgentFields(true);
                 handleSitemap(parseState, token);
                 break;
 
             case HTTP:
                 parseState.setFinishedAgentFields(true);
                 handleHttp(parseState, token);
                 break;
 
             case UNKNOWN:
                 reportWarning(parseState, "Unknown directive in robots.txt file: {}", line);
                 parseState.setFinishedAgentFields(true);
                 break;
 
             case MISSING:
                 reportWarning(parseState, "Unknown line in robots.txt file (size {}): {}", content.length, line);
                 parseState.setFinishedAgentFields(true);
                 break;
 
             default:
-                    // All others we just ignore
-                    // TODO KKr - which of these should be setting
-                    // finishedAgentFields to true?
-                    // TODO KKr - handle no-index
-                    // TODO KKr - handle request-rate and visit-time
+                // ignore everything else
                 break;
         }
     }
 
     this._numWarningsDuringLastParse.set(parseState._numWarnings);
     SimpleRobotRules result = parseState.getRobotRules();
     if (result.getCrawlDelay() > _maxCrawlDelay) {
-            // Some evil sites use a value like 3600 (seconds) for the crawl
-            // delay, which would cause lots of problems for us.
         LOGGER.debug("Crawl delay exceeds max value - so disallowing all URLs: {}", url);
         return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);
     } else {
         result.sortRules();
         return result;
     }
 }
\ No newline at end of file
