diff --git a/tmp/80370c4c-6844-4900-8966-c535ec9eabd4_buggy.java b/tmp/b887159e-4bca-45e5-a5ee-e76d55152bc1_fixed.java
index c6164f1..543be18 100644
--- a/tmp/80370c4c-6844-4900-8966-c535ec9eabd4_buggy.java
+++ b/tmp/b887159e-4bca-45e5-a5ee-e76d55152bc1_fixed.java
@@ -1,116 +1,150 @@
 private Position decodePosition(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int status = buf.readUnsignedShort();
-
     position.setValid(BitUtil.check(status, 15));
-
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
     String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
-
     DateBuilder dateBuilder = new DateBuilder()
             .setYear(Integer.parseInt(time.substring(0, 2)))
             .setMonth(Integer.parseInt(time.substring(2, 4)))
             .setDay(Integer.parseInt(time.substring(4, 6)))
             .setHour(Integer.parseInt(time.substring(6, 8)))
             .setMinute(Integer.parseInt(time.substring(8, 10)))
             .setSecond(Integer.parseInt(time.substring(10, 12)));
     position.setTime(dateBuilder.getDate());
 
     position.setLongitude(buf.readInt() * 0.00001);
     position.setLatitude(buf.readInt() * 0.00001);
 
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
     position.setCourse(buf.readUnsignedShort());
     position.setAltitude(buf.readUnsignedShort());
 
     position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
     Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+    while (buf.readableBytes() >= 4) {
         int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+        int lengthField = buf.readUnsignedShort();
+        int length = lengthField - 4;
+        // guard against malformed length
+        if (length < 0 || buf.readableBytes() < length) {
+            break;
+        }
         switch (subtype) {
             case 0x0001:
                 int coolantTemperature = buf.readUnsignedByte() - 40;
                 if (coolantTemperature <= 215) {
                     position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                 }
                 int rpm = buf.readUnsignedShort();
                 if (rpm <= 65535) {
                     position.set(Position.KEY_RPM, rpm);
                 }
                 position.set("averageSpeed", buf.readUnsignedByte());
                 buf.readUnsignedShort(); // interval fuel consumption
                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                 buf.readUnsignedInt(); // trip id
                 break;
             case 0x0005:
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                 buf.readUnsignedInt(); // run time
                 break;
             case 0x0009:
-                    position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                position.set(Position.KEY_VIN,
+                        buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                break;
+            case 0x0010:
+                // Decode OBD DTC codes
+                if (length > 0) {
+                    java.util.List<String> dtcList = new java.util.ArrayList<>();
+                    int count = length / 2;
+                    for (int i = 0; i < count; i++) {
+                        int raw = buf.readUnsignedShort();
+                        int type = raw >> 14;
+                        char letter;
+                        switch (type) {
+                            case 0:
+                                letter = 'P';
+                                break;
+                            case 1:
+                                letter = 'C';
+                                break;
+                            case 2:
+                                letter = 'B';
+                                break;
+                            default:
+                                letter = 'U';
+                                break;
+                        }
+                        int code = raw & 0x3FFF;
+                        dtcList.add(letter + String.format("%04X", code));
+                    }
+                    position.set(Position.KEY_DTCS, String.join(" ", dtcList));
+                }
                 break;
             case 0x0011:
                 position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
                 break;
             case 0x0014:
                 position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                 position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                 position.set("airTemp", buf.readUnsignedByte() - 40);
                 position.set("airFlow", buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                 break;
             case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                String[] cells = buf.readCharSequence(length, StandardCharsets.US_ASCII)
+                        .toString().split("\\+");
                 for (String cell : cells) {
                     String[] values = cell.split("@");
                     network.addCellTower(CellTower.from(
-                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),
-                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                            Integer.parseInt(values[0]),
+                            Integer.parseInt(values[1]),
+                            Integer.parseInt(values[2], 16),
+                            Integer.parseInt(values[3], 16)));
                 }
                 break;
             case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                String[] points = buf.readCharSequence(length, StandardCharsets.US_ASCII)
+                        .toString().split("\\+");
                 for (String point : points) {
                     String[] values = point.split("@");
-                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                    network.addWifiAccessPoint(WifiAccessPoint.from(
+                            values[0], Integer.parseInt(values[1])));
                 }
                 break;
             default:
                 buf.skipBytes(length);
                 break;
         }
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
 
     return position;
 }
\ No newline at end of file
