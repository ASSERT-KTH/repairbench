diff --git a/tmp/a54b204e-bd75-4ce4-845a-700bddee1ebb_buggy.java b/tmp/656d1727-ad5b-475d-996a-fbf616bb8428_fixed.java
index 5bf31b1..211a092 100644
--- a/tmp/a54b204e-bd75-4ce4-845a-700bddee1ebb_buggy.java
+++ b/tmp/656d1727-ad5b-475d-996a-fbf616bb8428_fixed.java
@@ -1,17 +1,36 @@
 private String consumeSubQuery() {
     StringBuilder sq = StringUtil.borrowBuilder();
     while (!tq.isEmpty()) {
-            if (tq.matches("("))
-                sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
-                sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+        // balanced parentheses
+        if (tq.matches("(")) {
+            sq.append("(")
+              .append(tq.chompBalanced('(', ')'))
+              .append(")");
+        }
+        // balanced attribute blocks
+        else if (tq.matches("[")) {
+            sq.append("[")
+              .append(tq.chompBalanced('[', ']'))
+              .append("]");
+        }
+        // comma is the top‐level selector splitter – stop here, leave the comma for the outer parser
+        else if (tq.matches(",")) {
             break;
-                else
+        }
+        // other combinators (> + ~ and whitespace)
+        else if (tq.matchesAny(Combinators)) {
+            if (sq.length() > 0) {
+                // we’ve consumed part of the token – break to return it
+                break;
+            } else {
+                // leading combinator, skip it
                 tq.consume();
-            else
+            }
+        }
+        // any other character: part of this sub‐query
+        else {
             sq.append(tq.consume());
         }
+    }
     return StringUtil.releaseBuilder(sq);
 }
\ No newline at end of file
