diff --git a/tmp/3e6e4dfe-6e86-45f3-a081-c804f24b44d1_buggy.java b/tmp/dc71d789-ec39-4200-87d1-3c8d5fa43a41_fixed.java
index 5bf31b1..9d838a1 100644
--- a/tmp/3e6e4dfe-6e86-45f3-a081-c804f24b44d1_buggy.java
+++ b/tmp/dc71d789-ec39-4200-87d1-3c8d5fa43a41_fixed.java
@@ -1,17 +1,34 @@
 private String consumeSubQuery() {
     StringBuilder sq = StringUtil.borrowBuilder();
     while (!tq.isEmpty()) {
-            if (tq.matches("("))
-                sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
-                sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+        // break on a comma when we've already read some of the sub‐query,
+        // or skip leading commas
+        if (tq.matches(",")) {
+            if (sq.length() > 0) {
                 break;
-                else
+            } else {
                 tq.consume();
-            else
+                continue;
+            }
+        }
+        if (tq.matches("(")) {
+            sq.append("(")
+              .append(tq.chompBalanced('(', ')'))
+              .append(")");
+        } else if (tq.matches("[")) {
+            sq.append("[")
+              .append(tq.chompBalanced('[', ']'))
+              .append("]");
+        } else if (tq.matchesAny(Combinators)) {
+            if (sq.length() > 0) {
+                break;
+            } else {
+                // skip leading combinators (>, +, ~, whitespace)
+                tq.consume();
+            }
+        } else {
             sq.append(tq.consume());
         }
+    }
     return StringUtil.releaseBuilder(sq);
 }
\ No newline at end of file
