diff --git a/tmp/ae610f73-2c8b-4f8f-b6a1-373eb793a80f_buggy.java b/tmp/23750636-a618-460f-b13d-715a238fc4fe_fixed.java
index 5bf31b1..8740d4e 100644
--- a/tmp/ae610f73-2c8b-4f8f-b6a1-373eb793a80f_buggy.java
+++ b/tmp/23750636-a618-460f-b13d-715a238fc4fe_fixed.java
@@ -1,17 +1,25 @@
 private String consumeSubQuery() {
     StringBuilder sq = StringUtil.borrowBuilder();
+    // skip any leading whitespace before the sub‐query
+    while (!tq.isEmpty() && Character.isWhitespace(tq.peek())) {
+        tq.consume();
+    }
     while (!tq.isEmpty()) {
-            if (tq.matches("("))
+        if (tq.matches("(")) {
             sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
+        } else if (tq.matches("[")) {
             sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+        } else if (tq.matchesAny(Combinators)) {
+            // if we've read some of the selector, stop at the combinator;
+            // otherwise (at start) break so the parser can pick up '>' '+', '~' as initial combinator
+            if (sq.length() > 0) {
                 break;
-                else
-                    tq.consume();
-            else
+            } else {
+                break;
+            }
+        } else {
             sq.append(tq.consume());
         }
+    }
     return StringUtil.releaseBuilder(sq);
 }
\ No newline at end of file
