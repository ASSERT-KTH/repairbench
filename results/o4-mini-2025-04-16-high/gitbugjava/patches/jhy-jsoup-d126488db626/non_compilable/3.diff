diff --git a/tmp/d7206716-9e26-4608-bff7-c4f975853d18_buggy.java b/tmp/df1f62cd-e24c-468a-8ced-799df239f2bb_fixed.java
index 5bf31b1..334cc74 100644
--- a/tmp/d7206716-9e26-4608-bff7-c4f975853d18_buggy.java
+++ b/tmp/df1f62cd-e24c-468a-8ced-799df239f2bb_fixed.java
@@ -1,17 +1,27 @@
 private String consumeSubQuery() {
     StringBuilder sq = StringUtil.borrowBuilder();
     while (!tq.isEmpty()) {
-            if (tq.matches("("))
+        if (tq.matches("(")) {
             sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
+        } else if (tq.matches("[")) {
             sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+        } else if (tq.matchesAny(Combinators)) {
+            if (sq.length() > 0) {
+                // we've read some of the subquery, so a combinator means we're done
                 break;
-                else
+            } else {
+                // at start: only skip whitespace, not other combinators (e.g. >, +, ~)
+                if (tq.matches(" ")) {
                     tq.consume();
-            else
+                    continue;
+                } else {
+                    // leave '>', '+', '~' (etc) for the parser to pick up
+                    break;
+                }
+            }
+        } else {
             sq.append(tq.consume());
         }
+    }
     return StringUtil.releaseBuilder(sq);
 }
\ No newline at end of file
