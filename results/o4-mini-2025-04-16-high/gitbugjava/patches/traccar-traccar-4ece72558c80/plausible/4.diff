diff --git a/tmp/04b886fd-1e2b-4585-afc3-da6da1ea9f41_buggy.java b/tmp/fa559586-98d4-40ee-a1ea-676da26d0d62_fixed.java
index 0a8838d..fdc1bc5 100644
--- a/tmp/04b886fd-1e2b-4585-afc3-da6da1ea9f41_buggy.java
+++ b/tmp/fa559586-98d4-40ee-a1ea-676da26d0d62_fixed.java
@@ -1,61 +1,77 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
     if (!connectionless) {
-            buf.readUnsignedInt(); // data length
+        buf.readUnsignedInt(); // data length (skip)
     }
 
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
     String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
-
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
-                buf.readUnsignedByte(); // type
+            int type = buf.readUnsignedByte();
             int length = buf.readInt() - 4;
-                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
+            Date time = new Date(buf.readUnsignedInt() * 1000);
+            getLastLocation(position, time);
+
+            if (type == 6) {
+                // Driver unique ID message
+                String data = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();
+                String[] parts = data.split("\\|");
+                if (parts.length > 4) {
+                    position.set(Position.KEY_DRIVER_UNIQUE_ID, parts[4]);
+                } else {
+                    // Fallback to raw if unexpected format
+                    position.set(Position.KEY_RESULT, data);
+                }
+            } else {
+                // Other CODEC_13 payloads
                 if (isPrintable(buf, length)) {
                     position.set(Position.KEY_RESULT,
                             buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
                 } else {
                     position.set(Position.KEY_RESULT,
                             ByteBufUtil.hexDump(buf.readSlice(length)));
                 }
+            }
+
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
+
         } else {
             decodeLocation(position, buf, codec, model);
         }
 
         if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
             positions.add(position);
         }
     }
 
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
