diff --git a/tmp/312aa78d-eef7-404b-8e06-d8be5eda1bda_buggy.java b/tmp/a8418dc1-2cd7-43bc-855c-261dc3a7ca3b_fixed.java
index eb0a5c8..40ff7ac 100644
--- a/tmp/312aa78d-eef7-404b-8e06-d8be5eda1bda_buggy.java
+++ b/tmp/a8418dc1-2cd7-43bc-855c-261dc3a7ca3b_fixed.java
@@ -1,27 +1,30 @@
 public static Try<Done> registerCallContext(
     final ActorRef<CallContextProviderMessage> callContextProvider,
     final String callContext,
     final AriCommand ariCommand) {
 
-    if (!ariCommand.extractCommandType().isCreationCommand()) {
+  // Do not register a call‐context on DELETE (or any non‐creation) commands
+  final var cmdType = ariCommand.extractCommandType();
+  if (cmdType.isDeletionCommand() || !cmdType.isCreationCommand()) {
     return Try.success(Done.done());
   }
 
+  // For creation commands, we must find the created resource
   final Option<AriResource> maybeResource =
       ariCommand
         .extractResourceRelations()
         .find(AriResourceRelation::isCreated)
         .map(AriResourceRelation::getResource);
 
   if (maybeResource.isEmpty()) {
     return Try.failure(
         new RuntimeException(
             String.format(
                 "Failed to extract resourceId from command '%s'", ariCommand.toString())));
   }
 
+  // Register the context for the newly created resource
   final AriResource resource = maybeResource.get();
-
   callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
   return Try.success(Done.done());
 }
\ No newline at end of file
