diff --git a/tmp/9fd9905a-f31c-4919-b35a-51a01ae07ca4_buggy.java b/tmp/fb5726cb-e4a0-47c6-b9d2-84dfce28b4a0_fixed.java
index 2189af9..9f00dca 100644
--- a/tmp/9fd9905a-f31c-4919-b35a-51a01ae07ca4_buggy.java
+++ b/tmp/fb5726cb-e4a0-47c6-b9d2-84dfce28b4a0_fixed.java
@@ -1,113 +1,141 @@
 private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
     int type = buf.readUnsignedByte();
+    if (type != 0xF0) {
+        return null;
+    }
 
-        if (type == 0xF0) {
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
     if (buf.readUnsignedByte() > 0) {
         position.set(Position.KEY_ARCHIVE, true);
     }
 
     buf.readUnsignedByte(); // vehicle type
 
-            int count;
     int subtype = buf.readUnsignedByte();
-            switch (subtype) {
-                case 0x01:
-                    count = buf.readUnsignedByte();
+    if (subtype == 0x01) {
+
+        int count = buf.readUnsignedByte();
         for (int i = 0; i < count; i++) {
-                        int id = buf.readUnsignedShort();
+            int id = buf.readUnsignedShortLE();
             int length = buf.readUnsignedByte();
+            int consumed = 0;
             switch (id) {
                 case 0x0102:
                 case 0x0528:
                 case 0x0546:
-                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    if (length >= 4) {
+                        long raw = buf.readUnsignedIntLE();
+                        position.set(Position.KEY_ODOMETER, raw * 100);
+                        consumed = 4;
+                    }
                     break;
                 case 0x0103:
-                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                    if (length >= 4) {
+                        long raw = buf.readUnsignedIntLE();
+                        position.set(Position.KEY_FUEL_LEVEL, raw * 0.01);
+                        consumed = 4;
+                    }
                     break;
                 case 0x052A:
-                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                    if (length >= 2) {
+                        int raw = buf.readUnsignedShortLE();
+                        position.set(Position.KEY_FUEL_LEVEL, raw * 0.01);
+                        consumed = 2;
+                    }
                     break;
                 case 0x0105:
                 case 0x052C:
-                                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                    if (length >= 4) {
+                        long raw = buf.readUnsignedIntLE();
+                        position.set(Position.KEY_FUEL_USED, raw * 0.01);
+                        consumed = 4;
+                    }
                     break;
                 case 0x014A:
                 case 0x0537:
                 case 0x0538:
                 case 0x0539:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                    if (length >= 2) {
+                        int raw = buf.readUnsignedShortLE();
+                        position.set(Position.KEY_FUEL_CONSUMPTION, raw * 0.01);
+                        consumed = 2;
+                    }
                     break;
                 default:
                     switch (length) {
                         case 1:
                             position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
+                            consumed = 1;
                             break;
                         case 2:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
+                            position.set(Position.PREFIX_IO + id, buf.readUnsignedShortLE());
+                            consumed = 2;
                             break;
                         case 4:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
-                                        break;
-                                    default:
-                                        buf.skipBytes(length);
+                            position.set(Position.PREFIX_IO + id, buf.readUnsignedIntLE());
+                            consumed = 4;
                             break;
                     }
                     break;
             }
+            if (consumed < length) {
+                buf.skipBytes(length - consumed);
+            }
         }
+
         decodeCoordinates(position, buf);
         position.setTime(time);
-                    break;
-                case 0x03:
-                    count = buf.readUnsignedByte();
+        return position;
+
+    } else if (subtype == 0x03) {
+
+        int count = buf.readUnsignedByte();
         for (int i = 0; i < count; i++) {
-                        int id = buf.readUnsignedShort();
+            int id = buf.readUnsignedShortLE();
             int length = buf.readUnsignedByte();
             switch (id) {
                 case 0x1A:
                     position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                     break;
                 case 0x1B:
                     position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                     break;
                 case 0x1C:
                     position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                     break;
                 case 0x1D:
                 case 0x1E:
                 case 0x1F:
                     position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                     break;
                 case 0x23:
                     position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                     break;
                 default:
                     break;
             }
             buf.skipBytes(length);
         }
+
         decodeCoordinates(position, buf);
         position.setTime(time);
-                    break;
-                case 0x0B:
+        return position;
+
+    } else if (subtype == 0x0B) {
+
         if (buf.readUnsignedByte() > 0) {
-                        position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
+            position.set(Position.KEY_VIN,
+                buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
         }
         getLastLocation(position, time);
-                    break;
-                default:
-                    return null;
-            }
-
         return position;
-        }
 
+    } else {
         return null;
     }
+}
\ No newline at end of file
