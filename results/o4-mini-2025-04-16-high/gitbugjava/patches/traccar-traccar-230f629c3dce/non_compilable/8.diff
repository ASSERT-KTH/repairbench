diff --git a/tmp/2d511873-71db-4c6c-abdc-3953546f0fad_buggy.java b/tmp/33ad9eb6-69e9-4206-9f92-22fdc9166d72_fixed.java
index 9410efa..28de276 100644
--- a/tmp/2d511873-71db-4c6c-abdc-3953546f0fad_buggy.java
+++ b/tmp/33ad9eb6-69e9-4206-9f92-22fdc9166d72_fixed.java
@@ -1,196 +1,210 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
     buf.readUnsignedShort(); // data length
 
     String imei = String.format("%015d", buf.readLong());
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     int type = buf.readUnsignedByte();
 
     if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {
 
         List<Position> positions = new LinkedList<>();
 
         buf.readUnsignedByte(); // records left
         int count = buf.readUnsignedByte();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             position.setTime(new Date(buf.readUnsignedInt() * 1000));
             buf.readUnsignedByte(); // timestamp extension
 
             if (type == MSG_EXTENDED_RECORDS) {
                 int recordExtension = buf.readUnsignedByte();
                 int mergeRecordCount = BitUtil.from(recordExtension, 4);
                 int currentRecord = BitUtil.to(recordExtension, 4);
-
                 if (currentRecord > 0 && currentRecord <= mergeRecordCount) {
                     position = positions.remove(positions.size() - 1);
                 }
             }
 
             buf.readUnsignedByte(); // priority (reserved)
 
-                position.setValid(true);
-                position.setLongitude(buf.readInt() / 10000000.0);
-                position.setLatitude(buf.readInt() / 10000000.0);
+            // Read raw longitude/latitude and handle sentinel
+            int rawLon = buf.readInt();
+            int rawLat = buf.readInt();
+            boolean validLocation = rawLon != Integer.MIN_VALUE && rawLat != Integer.MIN_VALUE;
+            position.setValid(validLocation);
+            if (validLocation) {
+                position.setLongitude(rawLon / 10000000.0);
+                position.setLatitude(rawLat / 10000000.0);
+            }
+
+            // Altitude and course
             position.setAltitude(buf.readUnsignedShort() / 10.0);
             position.setCourse(buf.readUnsignedShort() / 100.0);
 
+            // Satellites, speed, hdop
             position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
-
             position.set(Position.KEY_HDOP, buf.readUnsignedByte() / 10.0);
 
+            // Event code
             if (type == MSG_EXTENDED_RECORDS) {
                 position.set(Position.KEY_EVENT, buf.readUnsignedShort());
             } else {
                 position.set(Position.KEY_EVENT, buf.readUnsignedByte());
             }
 
-                // Read 1 byte data
+            // 1 byte IO parameters
             int valueCount = buf.readUnsignedByte();
             for (int j = 0; j < valueCount; j++) {
-                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id = buf.readUnsignedByte();
                 decodeParameter(position, id, buf, 1);
             }
-
-                // Read 2 byte data
+            // 2 byte IO parameters
             valueCount = buf.readUnsignedByte();
             for (int j = 0; j < valueCount; j++) {
-                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id = buf.readUnsignedByte();
                 decodeParameter(position, id, buf, 2);
             }
-
-                // Read 4 byte data
+            // 4 byte IO parameters
             valueCount = buf.readUnsignedByte();
             for (int j = 0; j < valueCount; j++) {
-                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id = buf.readUnsignedByte();
                 decodeParameter(position, id, buf, 4);
             }
-
-                // Read 8 byte data
+            // 8 byte IO parameters
             valueCount = buf.readUnsignedByte();
             for (int j = 0; j < valueCount; j++) {
-                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id = buf.readUnsignedByte();
                 decodeParameter(position, id, buf, 8);
             }
 
-                decodeDriver(position, Position.PREFIX_IO + 126, Position.PREFIX_IO + 127); // can driver
-                decodeDriver(position, Position.PREFIX_IO + 155, Position.PREFIX_IO + 156); // tco driver
+            // Driver IDs
+            decodeDriver(position, Position.PREFIX_IO + 126, Position.PREFIX_IO + 127);
+            decodeDriver(position, Position.PREFIX_IO + 155, Position.PREFIX_IO + 156);
 
+            // Combine tag ID parts
             Long tagIdPart1 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 760);
             Long tagIdPart2 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 761);
             if (tagIdPart1 != null && tagIdPart2 != null) {
-                    position.set("tagId", Long.toHexString(tagIdPart1) + Long.toHexString(tagIdPart2));
+                position.set("tagId",
+                        Long.toHexString(tagIdPart1) + Long.toHexString(tagIdPart2));
             }
 
             positions.add(position);
         }
 
         if (channel != null) {
             channel.writeAndFlush(new NetworkMessage(
-                        Unpooled.wrappedBuffer(DataConverter.parseHex("0002640113bc")), remoteAddress));
+                    Unpooled.wrappedBuffer(DataConverter.parseHex("0002640113bc")),
+                    remoteAddress));
         }
 
         return positions;
 
     } else if (type == MSG_DTCS) {
 
         List<Position> positions = new LinkedList<>();
 
         int count = buf.readUnsignedByte();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             buf.readUnsignedByte(); // reserved
 
             position.setTime(new Date(buf.readUnsignedInt() * 1000));
 
+            int rawLon = buf.readInt();
+            int rawLat = buf.readInt();
+            // DTCS always valid if it contains coords
             position.setValid(true);
-                position.setLongitude(buf.readInt() / 10000000.0);
-                position.setLatitude(buf.readInt() / 10000000.0);
+            position.setLongitude(rawLon / 10000000.0);
+            position.setLatitude(rawLat / 10000000.0);
 
             if (buf.readUnsignedByte() == 2) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
-                position.set(Position.KEY_DTCS, buf.readSlice(5).toString(StandardCharsets.US_ASCII));
+            position.set(Position.KEY_DTCS,
+                    buf.readSlice(5).toString(StandardCharsets.US_ASCII));
 
             positions.add(position);
         }
 
         if (channel != null) {
             channel.writeAndFlush(new NetworkMessage(
-                        Unpooled.wrappedBuffer(DataConverter.parseHex("00026d01c4a4")), remoteAddress));
+                    Unpooled.wrappedBuffer(DataConverter.parseHex("00026d01c4a4")),
+                    remoteAddress));
         }
 
         return positions;
 
     } else if (type == MSG_FILES) {
 
         int subtype = buf.readUnsignedByte();
         int source = buf.readUnsignedByte();
 
         if (subtype == 2) {
             ByteBuf filename = buf.readSlice(8);
             int total = buf.readUnsignedShort();
             int current = buf.readUnsignedShort();
             if (photo == null) {
                 photo = Unpooled.buffer();
             }
             photo.writeBytes(buf.readSlice(buf.readableBytes() - 2));
             if (current < total - 1) {
                 ByteBuf content = Unpooled.buffer();
                 content.writeByte(subtype);
                 content.writeByte(source);
                 content.writeBytes(filename);
                 content.writeShort(current + 1);
                 ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);
                 content.release();
                 if (channel != null) {
                     channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
                 }
             } else {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
                 getLastLocation(position, null);
-                    position.set(Position.KEY_IMAGE, writeMediaFile(imei, photo, "jpg"));
+                position.set(Position.KEY_IMAGE,
+                        writeMediaFile(imei, photo, "jpg"));
                 photo.release();
                 photo = null;
                 return position;
             }
         }
 
         return null;
 
     } else if (type == MSG_IDENTIFICATION) {
 
         ByteBuf content = Unpooled.buffer();
         content.writeByte(1);
         ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);
         content.release();
         if (channel != null) {
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }
 
         return null;
 
     } else {
 
         return decodeCommandResponse(deviceSession, type, buf);
 
     }
 }
\ No newline at end of file
