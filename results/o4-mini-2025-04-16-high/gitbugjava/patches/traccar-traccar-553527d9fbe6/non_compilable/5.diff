diff --git a/tmp/20fba2ec-a8c3-444f-a49a-5d539399e7df_buggy.java b/tmp/d8445a90-2fca-4d83-add4-a451eaaab0ba_fixed.java
index 921b73e..af5a17f 100644
--- a/tmp/20fba2ec-a8c3-444f-a49a-5d539399e7df_buggy.java
+++ b/tmp/d8445a90-2fca-4d83-add4-a451eaaab0ba_fixed.java
@@ -1,303 +1,470 @@
 private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
+    // Decode alarm (4 bytes)
     position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
+    // Decode coordinates (latitude, longitude)
     decodeCoordinates(position, buf);
 
+    // Altitude (2 bytes), speed (2 bytes, kph*0.1 -> knots), course (2 bytes)
     position.setAltitude(buf.readShort());
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
     position.setCourse(buf.readUnsignedShort());
+
+    // Timestamp (6 bytes)
     position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
+    /*
+     * Simple tail format:
+     * If after reading the fixed header there's exactly 20 bytes left,
+     * this is the "simple" format containing:
+     *   - skip 4 bytes (reserved battery/mileage)
+     *   - odometer (4 bytes)
+     *   - battery voltage (2 bytes * 0.1)
+     *   - area id (4 bytes)
+     *   - RSSI (1 byte)
+     *   - 3 bytes reserved
+     */
     if (buf.readableBytes() == 20) {
-
-            buf.skipBytes(4); // remaining battery and mileage
+        buf.skipBytes(4); // reserved
         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
         buf.readUnsignedInt(); // area id
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
         buf.skipBytes(3); // reserved
-
         return position;
-
     }
 
+    /*
+     * Extended TLV format:
+     * Iterate through type-length-value blocks until less than 2 bytes remain.
+     */
     while (buf.readableBytes() > 2) {
 
         int subtype = buf.readUnsignedByte();
         int length = buf.readUnsignedByte();
         int endIndex = buf.readerIndex() + length;
         String stringValue;
+
         switch (subtype) {
+
+            //
+            // ODOMETER / NESTED EXTENSIONS
+            //
             case 0x01:
+                if (length == 4) {
+                    // flat odometer
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                } else {
+                    // nested TLV group: parse inner TLVs to extract battery, etc.
+                    int nestedEnd = endIndex;
+                    while (buf.readerIndex() + 2 <= nestedEnd) {
+                        int ntype = buf.readUnsignedByte();
+                        int nlength = buf.readUnsignedByte();
+                        int nEndIndex = buf.readerIndex() + nlength;
+                        switch (ntype) {
+                            case 0xEE:
+                                // Example nested block: RSSI, power (mW?), battery (mV), satellites
+                                position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
+                                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
+                                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                                 break;
+                            case 0xD5:
+                                // nested battery voltage (0.01 V units)
+                                if (nlength == 2) {
+                                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
+                                } else {
+                                    // skip lock info (if any)
+                                    int count = buf.readUnsignedByte();
+                                    for (int i = 1; i <= count; i++) {
+                                        buf.skipBytes(5); // lock ID
+                                        buf.skipBytes(5); // card
+                                        buf.skipBytes(1); // battery
+                                        buf.skipBytes(2); // status
+                                    }
+                                }
+                                break;
+                            case 0xD4:
+                            case 0xE1:
+                                // battery level %
+                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                                break;
+                            case 0x60:
+                                // event code
+                                position.set(Position.KEY_EVENT, buf.readUnsignedShort());
+                                buf.skipBytes(nlength - 2);
+                                break;
+                            default:
+                                // skip unknown nested TLV
+                                break;
+                        }
+                        buf.readerIndex(nEndIndex);
+                    }
+                }
+                break;
+
+            //
+            // FUEL LEVEL
+            //
             case 0x02:
                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
                 break;
+
+            //
+            // FUEL CONSUMPTION
+            //
             case 0x2b:
                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
                 break;
+
+            //
+            // RSSI
+            //
             case 0x30:
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 break;
+
+            //
+            // SATELLITES
+            //
             case 0x31:
                 position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 break;
+
+            //
+            // *M00... string with embedded battery
+            //
             case 0x33:
                 stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                 if (stringValue.startsWith("*M00")) {
-                        String lockStatus = stringValue.substring(8, 8 + 7);
-                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
+                    String lockStatus = stringValue.substring(8, 15);
+                    position.set(Position.KEY_BATTERY,
+                            Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
                 }
                 break;
+
+            //
+            // EVENT
+            //
             case 0x60:
                 position.set(Position.KEY_EVENT, buf.readUnsignedShort());
                 buf.skipBytes(length - 2);
                 break;
+
+            //
+            // Nested extension (0x80) -- delegate
+            //
             case 0x80:
-                    buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
-                    decodeExtension(position, buf, endIndex);
+                buf.readUnsignedByte(); // skip content byte
+                // decodeExtension will parse until (writerIndex - 2)
+                decodeExtension(position, buf, buf.writerIndex() - 2);
                 break;
+
+            //
+            // OBD-II block (0x91)
+            //
             case 0x91:
                 position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                 position.set(Position.KEY_RPM, buf.readUnsignedShort());
                 position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
                 position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
                 position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                 buf.readUnsignedShort();
                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                 buf.readUnsignedShort();
                 buf.readUnsignedInt();
                 buf.readUnsignedShort();
                 position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
                 break;
+
+            //
+            // VIN
+            //
             case 0x94:
                 if (length > 0) {
                     stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                     position.set(Position.KEY_VIN, stringValue);
                 }
                 break;
+
+            //
+            // ADC inputs
+            //
             case 0xA7:
                 position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                 position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
                 break;
+
+            //
+            // ODOMETER (alternate)
+            //
             case 0xAC:
                 position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
                 break;
+
+            //
+            // DRIVER
+            //
             case 0xBC:
                 stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                 position.set("driver", stringValue.trim());
                 break;
+
             case 0xBD:
                 stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                 position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
                 break;
+
+            //
+            // VIBRATION ALARM
+            //
             case 0xD0:
                 long userStatus = buf.readUnsignedInt();
                 if (BitUtil.check(userStatus, 3)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                 }
                 break;
+
+            //
+            // POWER (voltage)
+            //
             case 0xD3:
                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
                 break;
+
+            //
+            // BATTERY LEVEL %
+            //
             case 0xD4:
             case 0xE1:
                 position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                 break;
+
+            //
+            // LOCK INFO or simple battery
+            //
             case 0xD5:
                 if (length == 2) {
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
                 } else {
                     int count = buf.readUnsignedByte();
                     for (int i = 1; i <= count; i++) {
                         position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                         position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                         position.set("lock" + i + "Battery", buf.readUnsignedByte());
                         int status = buf.readUnsignedShort();
                         position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                     }
                 }
                 break;
+
+            //
+            // DEVICE STATUS
+            //
             case 0xDA:
                 buf.readUnsignedShort(); // string cut count
                 int deviceStatus = buf.readUnsignedByte();
                 position.set("string", BitUtil.check(deviceStatus, 0));
                 position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                 position.set("cover", BitUtil.check(deviceStatus, 3));
                 break;
+
+            //
+            // CUSTOM SENSORS
+            //
             case 0xE6:
                 while (buf.readerIndex() < endIndex) {
                     int sensorIndex = buf.readUnsignedByte();
                     buf.skipBytes(6); // mac
                     position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                     position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                 }
                 break;
+
+            //
+            // NETWORK / CELLS
+            //
             case 0xEB:
                 if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
                     Network network = new Network();
                     int mcc = buf.readUnsignedShort();
                     int mnc = buf.readUnsignedByte();
                     while (buf.readerIndex() < endIndex) {
                         network.addCellTower(CellTower.from(
                                 mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                 buf.readUnsignedByte()));
                     }
                     position.setNetwork(network);
                 } else {
                     while (buf.readerIndex() < endIndex) {
-                            int extendedLength = buf.readUnsignedShort();
-                            int extendedType = buf.readUnsignedShort();
-                            switch (extendedType) {
+                        int extLen = buf.readUnsignedShort();
+                        int extType = buf.readUnsignedShort();
+                        switch (extType) {
                             case 0x0001:
                                 position.set("fuel1", buf.readUnsignedShort() * 0.1);
-                                    buf.readUnsignedByte(); // unused
+                                buf.readUnsignedByte();
                                 break;
                             case 0x0023:
                                 position.set("fuel2", Double.parseDouble(
                                         buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
                                 break;
                             case 0x00CE:
                                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                                 break;
                             case 0x00D8:
-                                    Network network = new Network();
-                                    network.addCellTower(CellTower.from(
+                                Network net = new Network();
+                                net.addCellTower(CellTower.from(
                                         buf.readUnsignedShort(), buf.readUnsignedByte(),
                                         buf.readUnsignedShort(), buf.readUnsignedInt()));
-                                    position.setNetwork(network);
+                                position.setNetwork(net);
                                 break;
                             case 0xE1:
                                 position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                                 break;
                             default:
-                                    buf.skipBytes(extendedLength - 2);
+                                buf.skipBytes(extLen - 2);
                                 break;
                         }
                     }
                 }
                 break;
+
+            //
+            // CARD
+            //
             case 0xED:
                 stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                 position.set(Position.KEY_CARD, stringValue.trim());
                 break;
+
+            //
+            // POWER / BATTERY info
+            //
             case 0xEE:
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                 position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                 position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 break;
+
+            //
+            // OBD-II EXT
+            //
             case 0xF3:
                 while (buf.readerIndex() < endIndex) {
-                        int extendedType = buf.readUnsignedShort();
-                        int extendedLength = buf.readUnsignedByte();
-                        switch (extendedType) {
+                    int extType = buf.readUnsignedShort();
+                    int extLen = buf.readUnsignedByte();
+                    switch (extType) {
                         case 0x0002:
                             position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
                             break;
                         case 0x0003:
                             position.set(Position.KEY_RPM, buf.readUnsignedShort());
                             break;
                         case 0x0004:
                             position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                             break;
                         case 0x0005:
                             position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
                             break;
                         case 0x0007:
                             position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
                             break;
                         case 0x0008:
                             position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
                             break;
                         case 0x0009:
                             position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
                             break;
                         case 0x000B:
                             position.set("intakePressure", buf.readUnsignedShort());
                             break;
                         case 0x000C:
                             position.set("intakeTemp", buf.readUnsignedShort() - 40);
                             break;
                         case 0x000D:
                             position.set("intakeFlow", buf.readUnsignedShort());
                             break;
                         case 0x000E:
                             position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
                             break;
                         case 0x0050:
-                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
+                            position.set(Position.KEY_VIN,
+                                    buf.readSlice(17).toString(StandardCharsets.US_ASCII));
                             break;
                         case 0x0100:
                             position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
                             break;
                         case 0x0102:
                             position.set("tripFuel", buf.readUnsignedShort() * 0.1);
                             break;
                         case 0x0112:
                             position.set("hardAccelerationCount", buf.readUnsignedShort());
                             break;
                         case 0x0113:
                             position.set("hardDecelerationCount", buf.readUnsignedShort());
                             break;
                         case 0x0114:
                             position.set("hardCorneringCount", buf.readUnsignedShort());
                             break;
                         default:
-                                buf.skipBytes(extendedLength);
+                            buf.skipBytes(extLen);
                             break;
                     }
                 }
                 break;
+
+            //
+            // ALARMS (0xFE)
+            //
             case 0xFE:
                 if (length == 1) {
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                 } else {
                     int mark = buf.readUnsignedByte();
                     if (mark == 0x7C) {
                         while (buf.readerIndex() < endIndex) {
-                                int extendedType = buf.readUnsignedByte();
-                                int extendedLength = buf.readUnsignedByte();
-                                switch (extendedType) {
-                                    case 0x01:
+                            int extType = buf.readUnsignedByte();
+                            int extLen = buf.readUnsignedByte();
+                            if (extType == 0x01) {
                                 long alarms = buf.readUnsignedInt();
                                 if (BitUtil.check(alarms, 0)) {
                                     position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 }
                                 if (BitUtil.check(alarms, 1)) {
                                     position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 }
                                 if (BitUtil.check(alarms, 2)) {
                                     position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 }
                                 if (BitUtil.check(alarms, 3)) {
                                     position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
                                 }
                                 if (BitUtil.check(alarms, 4)) {
                                     position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
                                 }
-                                        break;
-                                    default:
-                                        buf.skipBytes(extendedLength);
-                                        break;
+                            } else {
+                                buf.skipBytes(extLen);
                             }
                         }
                     }
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                 }
                 break;
+
             default:
+                // skip unknown TLV subtype
                 break;
         }
+
+        // jump to the end of this TLV block
         buf.readerIndex(endIndex);
     }
 
     return position;
 }
\ No newline at end of file
