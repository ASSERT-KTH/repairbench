diff --git a/tmp/31b9a46d-9176-4626-8e10-befbe31eda47_buggy.java b/tmp/6ea8fb08-c0c6-4f04-99a2-1d6c112a31f3_fixed.java
index b8e3fa3..d841ee7 100644
--- a/tmp/31b9a46d-9176-4626-8e10-befbe31eda47_buggy.java
+++ b/tmp/6ea8fb08-c0c6-4f04-99a2-1d6c112a31f3_fixed.java
@@ -1,65 +1,80 @@
 /**
  * Builds the {@link BackOffPolicy} with the given parameters.
  * @return the {@link BackOffPolicy} instance
  */
 public BackOffPolicy build() {
-		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
-			ExponentialBackOffPolicy policy;
-			if (Boolean.TRUE.equals(this.random)) {
-				policy = new ExponentialRandomBackOffPolicy();
-			}
-			else {
-				policy = new ExponentialBackOffPolicy();
-			}
-			if (this.delay != null) {
-				policy.setInitialInterval(this.delay);
-			}
+    // Exponential backoff if a multiplier (or multiplier-expression) was provided
+    if ((this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null) {
+        ExponentialBackOffPolicy policy = Boolean.TRUE.equals(this.random)
+                ? new ExponentialRandomBackOffPolicy()
+                : new ExponentialBackOffPolicy();
+        // initial interval: if supplied by expression, set the field and then the supplier
         if (this.delaySupplier != null) {
+            long initial = this.delaySupplier.get();
+            policy.setInitialInterval(initial);
             policy.initialIntervalSupplier(this.delaySupplier);
         }
-			if (this.multiplier != null) {
-				policy.setMultiplier(this.multiplier);
+        else if (this.delay != null) {
+            policy.setInitialInterval(this.delay);
         }
+        // multiplier: same treatment for supplier vs. fixed
         if (this.multiplierSupplier != null) {
+            double m = this.multiplierSupplier.get();
+            policy.setMultiplier(m);
             policy.multiplierSupplier(this.multiplierSupplier);
         }
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+        else if (this.multiplier != null) {
+            policy.setMultiplier(this.multiplier);
         }
+        // max interval: honor supplier first, then any fixed value
         if (this.maxDelaySupplier != null) {
+            long max = this.maxDelaySupplier.get();
+            policy.setMaxInterval(max);
             policy.maxIntervalSupplier(this.maxDelaySupplier);
         }
+        else if (this.maxDelay != null) {
+            policy.setMaxInterval(this.maxDelay);
+        }
+        // optional custom sleeper
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
+    // Uniform‐random backoff if both a fixed min and max delay were provided
     if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
         UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
-			if (this.delay != null) {
-				policy.setMinBackOffPeriod(this.delay);
-			}
         if (this.delaySupplier != null) {
+            long min = this.delaySupplier.get();
+            policy.setMinBackOffPeriod(min);
             policy.minBackOffPeriodSupplier(this.delaySupplier);
         }
-			if (this.maxDelay != null) {
-				policy.setMaxBackOffPeriod(this.maxDelay);
+        else {
+            policy.setMinBackOffPeriod(this.delay);
         }
         if (this.maxDelaySupplier != null) {
+            long max = this.maxDelaySupplier.get();
+            policy.setMaxBackOffPeriod(max);
             policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
         }
+        else {
+            policy.setMaxBackOffPeriod(this.maxDelay);
+        }
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
+    // Fallback to fixed backoff
     FixedBackOffPolicy policy = new FixedBackOffPolicy();
-		if (this.delay != null) {
+    if (this.delaySupplier != null) {
+        policy.setBackOffPeriod(this.delaySupplier.get());
+    }
+    else if (this.delay != null) {
         policy.setBackOffPeriod(this.delay);
     }
     if (this.sleeper != null) {
         policy.setSleeper(this.sleeper);
     }
     return policy;
 }
\ No newline at end of file
