diff --git a/tmp/e053e388-0839-42b3-9bb1-82c70738f97b_buggy.java b/tmp/cfcf3f62-826d-48c3-8b37-08cca3f60516_fixed.java
index b8e3fa3..ec2f05a 100644
--- a/tmp/e053e388-0839-42b3-9bb1-82c70738f97b_buggy.java
+++ b/tmp/cfcf3f62-826d-48c3-8b37-08cca3f60516_fixed.java
@@ -1,65 +1,80 @@
-	/**
-	 * Builds the {@link BackOffPolicy} with the given parameters.
-	 * @return the {@link BackOffPolicy} instance
-	 */
 public BackOffPolicy build() {
-		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
-			ExponentialBackOffPolicy policy;
-			if (Boolean.TRUE.equals(this.random)) {
-				policy = new ExponentialRandomBackOffPolicy();
-			}
-			else {
-				policy = new ExponentialBackOffPolicy();
-			}
-			if (this.delay != null) {
-				policy.setInitialInterval(this.delay);
-			}
+    // Exponential back off if a multiplier or multiplier-supplier is provided
+    if ((this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null) {
+        ExponentialBackOffPolicy policy =
+                Boolean.TRUE.equals(this.random) ? new ExponentialRandomBackOffPolicy() : new ExponentialBackOffPolicy();
+        // initial interval (literal or expression)
         if (this.delaySupplier != null) {
+            long initial = this.delaySupplier.get();
+            policy.setInitialInterval(initial);
             policy.initialIntervalSupplier(this.delaySupplier);
         }
-			if (this.multiplier != null) {
-				policy.setMultiplier(this.multiplier);
+        else if (this.delay != null) {
+            policy.setInitialInterval(this.delay);
         }
+        // multiplier (literal or expression)
         if (this.multiplierSupplier != null) {
+            double mult = this.multiplierSupplier.get();
+            policy.setMultiplier(mult);
             policy.multiplierSupplier(this.multiplierSupplier);
         }
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+        else if (this.multiplier != null) {
+            policy.setMultiplier(this.multiplier);
         }
+        // max interval (literal or expression)
         if (this.maxDelaySupplier != null) {
+            long max = this.maxDelaySupplier.get();
+            policy.setMaxInterval(max);
             policy.maxIntervalSupplier(this.maxDelaySupplier);
         }
+        else if (this.maxDelay != null) {
+            long initial = policy.getInitialInterval();
+            if (this.maxDelay > initial) {
+                policy.setMaxInterval(this.maxDelay);
+            }
+            else {
+                policy.setMaxInterval(ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+            }
+        }
+        // custom sleeper
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
+
+    // Uniform random back off if only delay & maxDelay are provided and maxDelay > delay
     if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
         UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
-			if (this.delay != null) {
-				policy.setMinBackOffPeriod(this.delay);
-			}
         if (this.delaySupplier != null) {
+            long min = this.delaySupplier.get();
+            policy.setMinBackOffPeriod(min);
             policy.minBackOffPeriodSupplier(this.delaySupplier);
         }
-			if (this.maxDelay != null) {
-				policy.setMaxBackOffPeriod(this.maxDelay);
+        else {
+            policy.setMinBackOffPeriod(this.delay);
         }
         if (this.maxDelaySupplier != null) {
+            long max = this.maxDelaySupplier.get();
+            policy.setMaxBackOffPeriod(max);
             policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
         }
+        else {
+            policy.setMaxBackOffPeriod(this.maxDelay);
+        }
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
+
+    // Fixed back off as default
     FixedBackOffPolicy policy = new FixedBackOffPolicy();
     if (this.delay != null) {
         policy.setBackOffPeriod(this.delay);
     }
     if (this.sleeper != null) {
         policy.setSleeper(this.sleeper);
     }
     return policy;
 }
\ No newline at end of file
