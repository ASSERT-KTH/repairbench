diff --git a/tmp/bf0c9a74-860e-43df-873d-04d86a05e692_buggy.java b/tmp/98d62adb-6cb2-48f0-84c5-20d6e9482de4_fixed.java
index b8e3fa3..4270613 100644
--- a/tmp/bf0c9a74-860e-43df-873d-04d86a05e692_buggy.java
+++ b/tmp/98d62adb-6cb2-48f0-84c5-20d6e9482de4_fixed.java
@@ -1,65 +1,88 @@
     /**
      * Builds the {@link BackOffPolicy} with the given parameters.
      * @return the {@link BackOffPolicy} instance
      */
     public BackOffPolicy build() {
-		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
-			ExponentialBackOffPolicy policy;
-			if (Boolean.TRUE.equals(this.random)) {
-				policy = new ExponentialRandomBackOffPolicy();
-			}
-			else {
-				policy = new ExponentialBackOffPolicy();
-			}
+        // Exponential backoff if a multiplier (direct or supplied) is present
+        if ((this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null) {
+            ExponentialBackOffPolicy policy = Boolean.TRUE.equals(this.random)
+                    ? new ExponentialRandomBackOffPolicy()
+                    : new ExponentialBackOffPolicy();
+            // initial interval
             if (this.delay != null) {
                 policy.setInitialInterval(this.delay);
             }
             if (this.delaySupplier != null) {
+                long initial = this.delaySupplier.get();
+                policy.setInitialInterval(initial);
                 policy.initialIntervalSupplier(this.delaySupplier);
             }
+            // multiplier
             if (this.multiplier != null) {
                 policy.setMultiplier(this.multiplier);
             }
             if (this.multiplierSupplier != null) {
+                double mult = this.multiplierSupplier.get();
+                policy.setMultiplier(mult);
                 policy.multiplierSupplier(this.multiplierSupplier);
             }
+            // max interval
             if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+                policy.setMaxInterval(this.maxDelay > this.delay
+                        ? this.maxDelay
+                        : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
             }
             if (this.maxDelaySupplier != null) {
+                long max = this.maxDelaySupplier.get();
+                policy.setMaxInterval(max);
                 policy.maxIntervalSupplier(this.maxDelaySupplier);
             }
+            // sleeper
             if (this.sleeper != null) {
                 policy.setSleeper(this.sleeper);
             }
             return policy;
         }
+
+        // Uniform random backoff if both min and max are specified (directly)
         if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
             UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+            // min period
             if (this.delay != null) {
                 policy.setMinBackOffPeriod(this.delay);
             }
             if (this.delaySupplier != null) {
+                long min = this.delaySupplier.get();
+                policy.setMinBackOffPeriod(min);
                 policy.minBackOffPeriodSupplier(this.delaySupplier);
             }
+            // max period
             if (this.maxDelay != null) {
                 policy.setMaxBackOffPeriod(this.maxDelay);
             }
             if (this.maxDelaySupplier != null) {
+                long max = this.maxDelaySupplier.get();
+                policy.setMaxBackOffPeriod(max);
                 policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
             }
+            // sleeper
             if (this.sleeper != null) {
                 policy.setSleeper(this.sleeper);
             }
             return policy;
         }
+
+        // Fixed backoff otherwise
         FixedBackOffPolicy policy = new FixedBackOffPolicy();
         if (this.delay != null) {
             policy.setBackOffPeriod(this.delay);
         }
+        if (this.delaySupplier != null) {
+            long period = this.delaySupplier.get();
+            policy.setBackOffPeriod(period);
+        }
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
\ No newline at end of file
