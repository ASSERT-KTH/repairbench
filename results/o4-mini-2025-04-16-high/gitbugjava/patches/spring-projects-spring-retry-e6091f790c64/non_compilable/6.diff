diff --git a/tmp/3dc9876f-3074-4c7d-b2a2-1b78a07ac91b_buggy.java b/tmp/69fe8e68-88ed-4c7e-b3fc-b7e2dd1f22e1_fixed.java
index b8e3fa3..e8b22b8 100644
--- a/tmp/3dc9876f-3074-4c7d-b2a2-1b78a07ac91b_buggy.java
+++ b/tmp/69fe8e68-88ed-4c7e-b3fc-b7e2dd1f22e1_fixed.java
@@ -1,65 +1,84 @@
-	/**
-	 * Builds the {@link BackOffPolicy} with the given parameters.
-	 * @return the {@link BackOffPolicy} instance
-	 */
+@Override
 public BackOffPolicy build() {
-		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
-			ExponentialBackOffPolicy policy;
-			if (Boolean.TRUE.equals(this.random)) {
-				policy = new ExponentialRandomBackOffPolicy();
-			}
-			else {
-				policy = new ExponentialBackOffPolicy();
-			}
-			if (this.delay != null) {
-				policy.setInitialInterval(this.delay);
-			}
-			if (this.delaySupplier != null) {
+    // Determine which back‑off settings have been supplied
+    boolean hasDelayValue = (this.delay != null);
+    boolean hasDelaySupplier = (this.delaySupplier != null);
+    boolean hasMultiplierValue = (this.multiplier != null && this.multiplier > 0);
+    boolean hasMultiplierSupplier = (this.multiplierSupplier != null);
+    boolean hasMaxDelayValue = (this.maxDelay != null);
+    boolean hasMaxDelaySupplier = (this.maxDelaySupplier != null);
+
+    // 1) Exponential back‑off if a multiplier was provided
+    if (hasMultiplierValue || hasMultiplierSupplier) {
+        ExponentialBackOffPolicy policy = Boolean.TRUE.equals(this.random)
+                ? new ExponentialRandomBackOffPolicy()
+                : new ExponentialBackOffPolicy();
+
+        // Initial interval
+        if (hasDelaySupplier) {
             policy.initialIntervalSupplier(this.delaySupplier);
         }
-			if (this.multiplier != null) {
-				policy.setMultiplier(this.multiplier);
+        else if (hasDelayValue) {
+            policy.setInitialInterval(this.delay);
         }
-			if (this.multiplierSupplier != null) {
+
+        // Multiplier
+        if (hasMultiplierSupplier) {
             policy.multiplierSupplier(this.multiplierSupplier);
         }
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+        else {
+            policy.setMultiplier(this.multiplier);
         }
-			if (this.maxDelaySupplier != null) {
+
+        // Max interval
+        if (hasMaxDelaySupplier) {
             policy.maxIntervalSupplier(this.maxDelaySupplier);
         }
+        else if (hasMaxDelayValue) {
+            policy.setMaxInterval(this.maxDelay);
+        }
+
+        // Sleeper
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
-		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
+
+    // 2) Uniform random back‑off if only max‑delay was provided
+    if (hasMaxDelayValue || hasMaxDelaySupplier) {
         UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
-			if (this.delay != null) {
-				policy.setMinBackOffPeriod(this.delay);
-			}
-			if (this.delaySupplier != null) {
+
+        // Min back‑off period
+        if (hasDelaySupplier) {
             policy.minBackOffPeriodSupplier(this.delaySupplier);
         }
-			if (this.maxDelay != null) {
-				policy.setMaxBackOffPeriod(this.maxDelay);
+        else if (hasDelayValue) {
+            policy.setMinBackOffPeriod(this.delay);
         }
-			if (this.maxDelaySupplier != null) {
+
+        // Max back‑off period
+        if (hasMaxDelaySupplier) {
             policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
         }
+        else {
+            policy.setMaxBackOffPeriod(this.maxDelay);
+        }
+
+        // Sleeper
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
+
+    // 3) Fixed back‑off otherwise
     FixedBackOffPolicy policy = new FixedBackOffPolicy();
-		if (this.delay != null) {
+    if (hasDelayValue) {
         policy.setBackOffPeriod(this.delay);
     }
     if (this.sleeper != null) {
         policy.setSleeper(this.sleeper);
     }
     return policy;
 }
\ No newline at end of file
