diff --git a/tmp/0c614281-d897-4625-a0e8-0b1fd95e1710_buggy.java b/tmp/b4a3aea2-98d0-47d0-bd1f-ce4cb6572593_fixed.java
index b8e3fa3..8c9b60f 100644
--- a/tmp/0c614281-d897-4625-a0e8-0b1fd95e1710_buggy.java
+++ b/tmp/b4a3aea2-98d0-47d0-bd1f-ce4cb6572593_fixed.java
@@ -1,65 +1,86 @@
 /**
  * Builds the {@link BackOffPolicy} with the given parameters.
  * @return the {@link BackOffPolicy} instance
  */
 public BackOffPolicy build() {
-		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
-			ExponentialBackOffPolicy policy;
-			if (Boolean.TRUE.equals(this.random)) {
-				policy = new ExponentialRandomBackOffPolicy();
+    // Exponential backoff if a multiplier was specified
+    if ((this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null) {
+        ExponentialBackOffPolicy policy = Boolean.TRUE.equals(this.random)
+                ? new ExponentialRandomBackOffPolicy()
+                : new ExponentialBackOffPolicy();
+
+        // resolve static values (give precedence to a numeric value or, if absent, evaluate the supplier)
+        Long initial = (this.delay != null
+                ? this.delay
+                : (this.delaySupplier != null ? this.delaySupplier.get() : null));
+        Double factor = (this.multiplier != null
+                ? this.multiplier
+                : (this.multiplierSupplier != null ? this.multiplierSupplier.get() : null));
+        Long max = (this.maxDelay != null
+                ? this.maxDelay
+                : (this.maxDelaySupplier != null ? this.maxDelaySupplier.get() : null));
+
+        if (initial != null) {
+            policy.setInitialInterval(initial);
         }
-			else {
-				policy = new ExponentialBackOffPolicy();
+        if (factor != null) {
+            policy.setMultiplier(factor);
         }
-			if (this.delay != null) {
-				policy.setInitialInterval(this.delay);
+        if (initial != null && max != null) {
+            policy.setMaxInterval(max > initial
+                    ? max
+                    : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
         }
+
+        // now register any suppliers for dynamic evaluation
         if (this.delaySupplier != null) {
             policy.initialIntervalSupplier(this.delaySupplier);
         }
-			if (this.multiplier != null) {
-				policy.setMultiplier(this.multiplier);
-			}
         if (this.multiplierSupplier != null) {
             policy.multiplierSupplier(this.multiplierSupplier);
         }
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
-			}
         if (this.maxDelaySupplier != null) {
             policy.maxIntervalSupplier(this.maxDelaySupplier);
         }
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
+
+    // Uniform‐random backoff if both a min and a max delay were explicitly provided
     if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
         UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+
         if (this.delay != null) {
             policy.setMinBackOffPeriod(this.delay);
         }
         if (this.delaySupplier != null) {
             policy.minBackOffPeriodSupplier(this.delaySupplier);
         }
         if (this.maxDelay != null) {
             policy.setMaxBackOffPeriod(this.maxDelay);
         }
         if (this.maxDelaySupplier != null) {
             policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
         }
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
+
+    // Fixed backoff otherwise
     FixedBackOffPolicy policy = new FixedBackOffPolicy();
     if (this.delay != null) {
         policy.setBackOffPeriod(this.delay);
     }
+    else if (this.delaySupplier != null) {
+        // support a supplier for fixed backoff as well
+        policy.backOffPeriodSupplier(this.delaySupplier);
+    }
     if (this.sleeper != null) {
         policy.setSleeper(this.sleeper);
     }
     return policy;
 }
\ No newline at end of file
