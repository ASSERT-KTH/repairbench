diff --git a/tmp/a68842fd-ffb8-4a29-9600-4cdd45a25976_buggy.java b/tmp/5bf22062-48ca-4455-b10c-2f59abeb8991_fixed.java
index f591bc6..82a3da2 100644
--- a/tmp/a68842fd-ffb8-4a29-9600-4cdd45a25976_buggy.java
+++ b/tmp/5bf22062-48ca-4455-b10c-2f59abeb8991_fixed.java
@@ -1,74 +1,182 @@
-    protected Object decodeAvrmc(
-            String sentence, Channel channel, SocketAddress remoteAddress) {
+protected Object decodeAvrmc(String sentence, Channel channel, SocketAddress remoteAddress) {
 
-        Parser parser = new Parser(PATTERN_AVRMC, sentence);
-        if (!parser.matches()) {
+    String s = sentence.trim();
+    // Only handle AVRMC sentences
+    if (!s.startsWith("$AVRMC")) {
         return null;
     }
-
-        DeviceSession deviceSession =
-            getDeviceSession(channel, remoteAddress, parser.next());
+    // Split off checksum
+    String checksum = null;
+    int asteriskIndex = s.indexOf('*');
+    if (asteriskIndex != -1) {
+        checksum = s.substring(asteriskIndex + 1);
+        s = s.substring(0, asteriskIndex);
+    }
+    // Split fields by comma
+    String[] parts = s.split(",");
+    // We need at least: type,id,time,status,lat,NS,lon,EW,speed,course,date,event
+    if (parts.length < 12) {
+        return null;
+    }
+    // Device session
+    String id = parts[1];
+    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
-
+    // Device model (for ADC2)
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
-
+    // Prepare position
     Position position = new Position(getProtocolName());
-
     position.setDeviceId(deviceSession.getDeviceId());
-        DateBuilder dateBuilder = new DateBuilder()
-                .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
-
-        String status = parser.next();
-        String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
+    // Parse time hhmmss
+    int hour = 0, minute = 0, second = 0;
+    String timeStr = parts[2];
+    if (timeStr.length() >= 6) {
+        try {
+            hour = Integer.parseInt(timeStr.substring(0, 2));
+            minute = Integer.parseInt(timeStr.substring(2, 4));
+            second = Integer.parseInt(timeStr.substring(4, 6));
+        } catch (NumberFormatException e) {
+            // ignore, default to 0
+        }
+    }
+    // Parse status (validity)
+    String status = parts[3];
+    String upperStatus = status.toUpperCase();
+    boolean valid = upperStatus.equals("A") || upperStatus.equals("R") || upperStatus.equals("P");
+    position.setValid(valid);
     position.set(Position.KEY_STATUS, status);
-
-        position.setLatitude(parser.nextCoordinate());
-        position.setLongitude(parser.nextCoordinate());
-        position.setSpeed(parser.nextDouble(0));
-        position.setCourse(parser.nextDouble(0));
-
-        dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
+    // Parse latitude
+    double latitude = 0.0;
+    if (parts.length > 5) {
+        try {
+            double latVal = Double.parseDouble(parts[4]);
+            int latDeg = (int) (latVal / 100);
+            double latMin = latVal - latDeg * 100;
+            latitude = latDeg + latMin / 60.0;
+            if ("S".equals(parts[5])) {
+                latitude = -latitude;
+            }
+        } catch (Exception e) {
+            // ignore
+        }
+    }
+    // Parse longitude
+    double longitude = 0.0;
+    if (parts.length > 7) {
+        try {
+            double lonVal = Double.parseDouble(parts[6]);
+            int lonDeg = (int) (lonVal / 100);
+            double lonMin = lonVal - lonDeg * 100;
+            longitude = lonDeg + lonMin / 60.0;
+            if ("W".equals(parts[7])) {
+                longitude = -longitude;
+            }
+        } catch (Exception e) {
+            // ignore
+        }
+    }
+    position.setLatitude(latitude);
+    position.setLongitude(longitude);
+    // Speed
+    if (parts.length > 8) {
+        try {
+            position.setSpeed(Double.parseDouble(parts[8]));
+        } catch (Exception e) {
+        }
+    }
+    // Course
+    if (parts.length > 9) {
+        try {
+            position.setCourse(Double.parseDouble(parts[9]));
+        } catch (Exception e) {
+        }
+    }
+    // Build date/time
+    DateBuilder dateBuilder = new DateBuilder()
+        .setTime(hour, minute, second);
+    if (parts.length > 10) {
+        String dateStr = parts[10];
+        if (dateStr.length() == 6) {
+            try {
+                int day = Integer.parseInt(dateStr.substring(0, 2));
+                int month = Integer.parseInt(dateStr.substring(2, 4));
+                int year = Integer.parseInt(dateStr.substring(4, 6));
+                dateBuilder.setDateReverse(day, month, year);
+            } catch (Exception e) {
+                // ignore
+            }
+        }
+    }
     position.setTime(dateBuilder.getDate());
-
-        String event = parser.next();
+    // Event / alarm
+    String event = parts.length > 11 ? parts[11] : null;
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
-        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-        position.set(Position.KEY_GPS, parser.nextInt());
-        position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
-
-        if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
-            position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
-        }
-
-        Integer lac = parser.nextHexInt();
-        Integer cid = parser.nextHexInt();
-        Integer mcc = parser.nextInt();
-        Integer mnc = parser.nextInt();
-        if (lac != null && cid != null && mcc != null && mnc != null) {
+    // Battery (mV -> V)
+    if (parts.length > 12) {
+        try {
+            String b = parts[12].replaceAll("\\.", "");
+            position.set(Position.KEY_BATTERY, Double.parseDouble(b) * 0.001);
+        } catch (Exception e) {
+        }
+    }
+    // Odometer (km -> m)
+    if (parts.length > 13) {
+        try {
+            position.set(Position.KEY_ODOMETER, Double.parseDouble(parts[13]) * 1000);
+        } catch (Exception e) {
+        }
+    }
+    // GPS count / fix
+    if (parts.length > 14) {
+        try {
+            position.set(Position.KEY_GPS, Integer.parseInt(parts[14]));
+        } catch (Exception e) {
+        }
+    }
+    // ADC1
+    if (parts.length > 15) {
+        try {
+            position.set(Position.PREFIX_ADC + 1, Double.parseDouble(parts[15]) * 0.001);
+        } catch (Exception e) {
+        }
+    }
+    int index = 16;
+    // ADC2 for specific models
+    if (("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) && parts.length > index) {
+        try {
+            position.set(Position.PREFIX_ADC + 2, Double.parseDouble(parts[index]) * 0.001);
+        } catch (Exception e) {
+        }
+        index++;
+    }
+    // Network (LAC,CID,MCC,MNC)
+    if (parts.length > index + 3) {
+        try {
+            int lac = Integer.parseInt(parts[index], 16);
+            int cid = Integer.parseInt(parts[index + 1], 16);
+            int mcc = Integer.parseInt(parts[index + 2]);
+            int mnc = Integer.parseInt(parts[index + 3]);
+            if (lac > 0 && cid > 0 && mcc > 0 && mnc > 0) {
                 position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
             }
-
-        parser.next(); // unused
-
-        String checksum = parser.next();
-
+        } catch (Exception e) {
+            // ignore
+        }
+    }
+    // Acknowledge / response
     if (channel != null) {
-
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
-
         String devicePassword = AttributeUtil.getDevicePassword(
-                    getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
+            getCacheManager(), deviceSession.getDeviceId(),
+            getProtocolName(), DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
-
     return position;
 }
\ No newline at end of file
