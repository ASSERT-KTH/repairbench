diff --git a/tmp/fdcc80f7-e5f4-40e3-956c-3a9e593e8b3a_buggy.java b/tmp/7f959b75-e610-4d72-8eba-0f82ce208fdb_fixed.java
index f591bc6..a27e801 100644
--- a/tmp/fdcc80f7-e5f4-40e3-956c-3a9e593e8b3a_buggy.java
+++ b/tmp/7f959b75-e610-4d72-8eba-0f82ce208fdb_fixed.java
@@ -1,74 +1,93 @@
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
-        Parser parser = new Parser(PATTERN_AVRMC, sentence);
-        if (!parser.matches()) {
+    // Only handle AVRMC sentences
+    if (sentence == null || !sentence.startsWith("$AVRMC,")) {
         return null;
     }
 
-        DeviceSession deviceSession =
-            getDeviceSession(channel, remoteAddress, parser.next());
+    // Strip checksum and split on commas
+    int asterisk = sentence.indexOf('*');
+    String body = (asterisk > 0) ? sentence.substring(0, asterisk) : sentence;
+    String[] parts = body.split(",");
+
+    // We need at least up to the date field (index 10)
+    if (parts.length < 11) {
+        return null;
+    }
+
+    // Device session
+    String id = parts[1];
+    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
-        String deviceModel = null;
-        Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
-        if (device != null) {
-            deviceModel = device.getModel();
-        }
-
+    // Prepare position
     Position position = new Position(getProtocolName());
-
     position.setDeviceId(deviceSession.getDeviceId());
+
+    // Parse time hhmmss
+    String time = parts[2];
+    int hour = 0, minute = 0, second = 0;
+    if (time.length() >= 6) {
+        hour = Integer.parseInt(time.substring(0, 2));
+        minute = Integer.parseInt(time.substring(2, 4));
+        second = Integer.parseInt(time.substring(4, 6));
+    }
+
+    // Parse date ddmmyy
+    String date = parts[10];
+    int day = 0, month = 0, year = 0;
+    if (date.length() == 6) {
+        day = Integer.parseInt(date.substring(0, 2));
+        month = Integer.parseInt(date.substring(2, 4));
+        year = Integer.parseInt(date.substring(4, 6));
+    }
+
+    // Build timestamp
     DateBuilder dateBuilder = new DateBuilder()
-                .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
-
-        String status = parser.next();
-        String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
-        position.set(Position.KEY_STATUS, status);
-
-        position.setLatitude(parser.nextCoordinate());
-        position.setLongitude(parser.nextCoordinate());
-        position.setSpeed(parser.nextDouble(0));
-        position.setCourse(parser.nextDouble(0));
-
-        dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
+            .setTime(hour, minute, second)
+            .setDateReverse(day, month, year);
     position.setTime(dateBuilder.getDate());
 
-        String event = parser.next();
-        position.set(Position.KEY_ALARM, decodeAlarm(event));
-        position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
-        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-        position.set(Position.KEY_GPS, parser.nextInt());
-        position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
+    // Validity flag
+    String status = parts[3];
+    boolean valid = "A".equalsIgnoreCase(status)
+            || "R".equalsIgnoreCase(status)
+            || "P".equalsIgnoreCase(status);
+    position.setValid(valid);
+    position.set(Position.KEY_STATUS, status);
 
-        if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
-            position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
+    // Latitude
+    double latitude = 0;
+    String latPart = parts[4];
+    String latHem = parts[5];
+    if (!latPart.isEmpty()) {
+        double raw = Double.parseDouble(latPart);
+        int deg = (int) (raw / 100);
+        double min = raw - deg * 100;
+        latitude = deg + min / 60;
+        if ("S".equalsIgnoreCase(latHem)) {
+            latitude = -latitude;
         }
-
-        Integer lac = parser.nextHexInt();
-        Integer cid = parser.nextHexInt();
-        Integer mcc = parser.nextInt();
-        Integer mnc = parser.nextInt();
-        if (lac != null && cid != null && mcc != null && mnc != null) {
-            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
+    position.setLatitude(latitude);
 
-        parser.next(); // unused
-
-        String checksum = parser.next();
-
-        if (channel != null) {
-
-            sendAcknowledge(status, event, checksum, channel, remoteAddress);
-
-            String devicePassword = AttributeUtil.getDevicePassword(
-                    getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
-            sendEventResponse(event, devicePassword, channel, remoteAddress);
+    // Longitude
+    double longitude = 0;
+    String lonPart = parts[6];
+    String lonHem = parts[7];
+    if (!lonPart.isEmpty()) {
+        double raw = Double.parseDouble(lonPart);
+        int deg = (int) (raw / 100);
+        double min = raw - deg * 100;
+        longitude = deg + min / 60;
+        if ("W".equalsIgnoreCase(lonHem)) {
+            longitude = -longitude;
+        }
     }
+    position.setLongitude(longitude);
 
     return position;
 }
\ No newline at end of file
