diff --git a/tmp/0522d91d-4a15-43b9-945f-6e9287c3e68d_buggy.java b/tmp/51b74347-20f0-4c10-a8d5-9edf00b1542e_fixed.java
index f591bc6..fb18ce1 100644
--- a/tmp/0522d91d-4a15-43b9-945f-6e9287c3e68d_buggy.java
+++ b/tmp/51b74347-20f0-4c10-a8d5-9edf00b1542e_fixed.java
@@ -1,74 +1,96 @@
+@Override
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
-        Parser parser = new Parser(PATTERN_AVRMC, sentence);
+    // Make the sentence uppercase so the regex will match lower‚Äêcase status/event letters
+    String s = sentence.toUpperCase(Locale.ENGLISH);
+    Parser parser = new Parser(PATTERN_AVRMC, s);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
         getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
-
     position.setDeviceId(deviceSession.getDeviceId());
+
+    // Time
     DateBuilder dateBuilder = new DateBuilder()
             .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
+    // Status
     String status = parser.next();
-        String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
+    String upperCaseStatus = status.toUpperCase(Locale.ENGLISH);
+    position.setValid(
+            upperCaseStatus.equals("A")
+         || upperCaseStatus.equals("R")
+         || upperCaseStatus.equals("P"));
     position.set(Position.KEY_STATUS, status);
 
+    // Coordinates
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
-        dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
+    // Date
+    dateBuilder.setDateReverse(
+            parser.nextInt(0),
+            parser.nextInt(0),
+            parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
+    // Event / alarms
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
-        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+
+    // Misc data
+    position.set(Position.KEY_BATTERY,
+            Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+    position.set(Position.KEY_ODOMETER,
+            parser.nextDouble() * 1000);
     position.set(Position.KEY_GPS, parser.nextInt());
-        position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
-
+    position.set(Position.PREFIX_ADC + 1,
+            parser.nextDouble() * 0.001);
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
-            position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
+        position.set(Position.PREFIX_ADC + 2,
+                parser.nextDouble() * 0.001);
     }
 
+    // Network
     Integer lac = parser.nextHexInt();
     Integer cid = parser.nextHexInt();
     Integer mcc = parser.nextInt();
     Integer mnc = parser.nextInt();
     if (lac != null && cid != null && mcc != null && mnc != null) {
         position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
 
-        parser.next(); // unused
-
+    // Skip unused and read checksum
+    parser.next();
     String checksum = parser.next();
 
+    // Send ack / response if live channel
     if (channel != null) {
-
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
-
         String devicePassword = AttributeUtil.getDevicePassword(
-                    getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
+                getCacheManager(),
+                deviceSession.getDeviceId(),
+                getProtocolName(),
+                DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
