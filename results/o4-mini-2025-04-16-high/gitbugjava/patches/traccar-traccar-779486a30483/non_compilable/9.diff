diff --git a/tmp/92c58e99-ca6b-48e4-87f7-a72ee062c4bd_buggy.java b/tmp/010b0756-4b57-411a-8913-0aebfcdf0d59_fixed.java
index f591bc6..c7c1efb 100644
--- a/tmp/92c58e99-ca6b-48e4-87f7-a72ee062c4bd_buggy.java
+++ b/tmp/010b0756-4b57-411a-8913-0aebfcdf0d59_fixed.java
@@ -1,74 +1,112 @@
+@Override
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
             getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
+    // get device model if available
     String deviceModel = null;
-        Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
+    Device device = getCacheManager().getObject(
+            Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
-
     position.setDeviceId(deviceSession.getDeviceId());
+
+    // time
     DateBuilder dateBuilder = new DateBuilder()
-                .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
+            .setTime(
+                parser.nextInt(0),  // hours
+                parser.nextInt(0),  // minutes
+                parser.nextInt(0)); // seconds
 
+    // status (A=valid, R=real‐time, P=parking)
     String status = parser.next();
-        String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
+    String statusUp = status.toUpperCase();
+    boolean valid = statusUp.equals("A")
+                 || statusUp.equals("R")
+                 || statusUp.equals("P");
+    position.setValid(valid);
     position.set(Position.KEY_STATUS, status);
 
+    // position
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
-        dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
+    // date
+    dateBuilder.setDateReverse(
+            parser.nextInt(0),  // day
+            parser.nextInt(0),  // month
+            parser.nextInt(0)); // year (2 digits)
     position.setTime(dateBuilder.getDate());
 
+    // event / alarm
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
-        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-        position.set(Position.KEY_GPS, parser.nextInt());
-        position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
 
+    // battery
+    String batt = parser.next();
+    double battery = 0;
+    if (batt != null && !batt.isEmpty()) {
+        battery = Double.parseDouble(batt.replaceAll("\\.", "")) * 0.001;
+    }
+    position.set(Position.KEY_BATTERY, battery);
+
+    // odometer
+    position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000);
+
+    // satellites
+    position.set(Position.KEY_GPS, parser.nextInt(0));
+
+    // ADC inputs
+    position.set(Position.PREFIX_ADC + 1, parser.nextDouble(0) * 0.001);
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
-            position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
+        position.set(Position.PREFIX_ADC + 2, parser.nextDouble(0) * 0.001);
     }
 
+    // network (only if lac & cid non‐zero)
     Integer lac = parser.nextHexInt();
     Integer cid = parser.nextHexInt();
     Integer mcc = parser.nextInt();
     Integer mnc = parser.nextInt();
-        if (lac != null && cid != null && mcc != null && mnc != null) {
-            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
+    if (lac != null && cid != null
+            && lac != 0 && cid != 0
+            && mcc != null && mnc != null) {
+        position.setNetwork(new Network(
+                CellTower.from(mcc, mnc, lac, cid)));
     }
 
-        parser.next(); // unused
-
-        String checksum = parser.next();
+    // compute checksum from raw sentence (last part after '*')
+    String checksum = null;
+    int star = sentence.lastIndexOf('*');
+    if (star != -1 && star + 1 < sentence.length()) {
+        checksum = sentence.substring(star + 1).trim();
+    }
 
+    // acknowledge / response
     if (channel != null) {
-
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
-
         String devicePassword = AttributeUtil.getDevicePassword(
-                    getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
+                getCacheManager(),
+                deviceSession.getDeviceId(),
+                getProtocolName(),
+                DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
