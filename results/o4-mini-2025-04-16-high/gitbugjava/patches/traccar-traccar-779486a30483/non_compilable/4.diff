diff --git a/tmp/acf299a7-5cf9-4fd8-a415-a5f936830965_buggy.java b/tmp/906de05c-2091-4f27-95da-57f80d9cada4_fixed.java
index f591bc6..17b7221 100644
--- a/tmp/acf299a7-5cf9-4fd8-a415-a5f936830965_buggy.java
+++ b/tmp/906de05c-2091-4f27-95da-57f80d9cada4_fixed.java
@@ -1,74 +1,100 @@
+@Override
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
-        DeviceSession deviceSession =
-            getDeviceSession(channel, remoteAddress, parser.next());
+    // Device session
+    DeviceSession deviceSession = getDeviceSession(
+            channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
+    // Device model
     String deviceModel = null;
-        Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
+    Device device = getCacheManager().getObject(
+            Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
+    // Prepare position
     Position position = new Position(getProtocolName());
-
     position.setDeviceId(deviceSession.getDeviceId());
+
+    // Time
     DateBuilder dateBuilder = new DateBuilder()
             .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
+    // Status (validity)
     String status = parser.next();
-        String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
+    String upper = status.toUpperCase();
+    position.setValid(upper.equals("A") || upper.equals("R") || upper.equals("P"));
     position.set(Position.KEY_STATUS, status);
 
+    // Location
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
-        dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
+    // Date
+    dateBuilder.setDateReverse(
+            parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
+    // Event / alarm
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
-        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-        position.set(Position.KEY_GPS, parser.nextInt());
-        position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
 
+    // Battery
+    String batt = parser.next();
+    position.set(Position.KEY_BATTERY,
+            Double.parseDouble(batt.replaceAll("\\.", "")) * 0.001);
+
+    // Odometer
+    position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000);
+
+    // GPS satellites
+    position.set(Position.KEY_GPS, parser.nextInt(0));
+
+    // ADC1
+    position.set(Position.PREFIX_ADC + 1, parser.nextDouble(0) * 0.001);
+
+    // ADC2 (only for specific models)
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
-            position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
+        position.set(Position.PREFIX_ADC + 2, parser.nextDouble(0) * 0.001);
     }
 
+    // Cell network (ignore all-zero values)
     Integer lac = parser.nextHexInt();
     Integer cid = parser.nextHexInt();
     Integer mcc = parser.nextInt();
     Integer mnc = parser.nextInt();
-        if (lac != null && cid != null && mcc != null && mnc != null) {
-            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
+    if (lac != null && cid != null
+            && mcc != null && mnc != null
+            && (lac != 0 || cid != 0 || mcc != 0 || mnc != 0)) {
+        position.setNetwork(new Network(
+                CellTower.from(mcc, mnc, lac, cid)));
     }
 
-        parser.next(); // unused
-
+    // Skip unused, read checksum
+    parser.next();
     String checksum = parser.next();
 
+    // Acknowledge / response (if connected)
     if (channel != null) {
-
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
-
         String devicePassword = AttributeUtil.getDevicePassword(
-                    getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
+                getCacheManager(), deviceSession.getDeviceId(),
+                getProtocolName(), DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
