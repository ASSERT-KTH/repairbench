diff --git a/tmp/45727e27-37b6-433a-ba08-90139b124c94_buggy.java b/tmp/12394082-d941-4dcf-bfe4-b3c11a30253b_fixed.java
index f591bc6..01dc786 100644
--- a/tmp/45727e27-37b6-433a-ba08-90139b124c94_buggy.java
+++ b/tmp/12394082-d941-4dcf-bfe4-b3c11a30253b_fixed.java
@@ -1,74 +1,97 @@
+@Override
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession =
             getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
-        Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
+    Device device = getCacheManager().getObject(
+            Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
-
     position.setDeviceId(deviceSession.getDeviceId());
+
+    // time
     DateBuilder dateBuilder = new DateBuilder()
             .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
+    // status / valid
     String status = parser.next();
     String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
+    position.setValid(
+            upperCaseStatus.equals("A")
+         || upperCaseStatus.equals("R")
+         || upperCaseStatus.equals("P"));
     position.set(Position.KEY_STATUS, status);
 
+    // position
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
-        dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
+    // date
+    dateBuilder.setDateReverse(
+            parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
+    // event / alarm
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+
+    // battery
+    position.set(Position.KEY_BATTERY,
+            Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+    // odometer
     position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-        position.set(Position.KEY_GPS, parser.nextInt());
+    // satellites
+    position.set(Position.KEY_SATELLITES, parser.nextInt());
+    // ADC1
     position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
 
+    // ADC2 for specific models
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
         position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
     }
 
+    // cell tower
     Integer lac = parser.nextHexInt();
     Integer cid = parser.nextHexInt();
     Integer mcc = parser.nextInt();
     Integer mnc = parser.nextInt();
-        if (lac != null && cid != null && mcc != null && mnc != null) {
-            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
+    if (lac != null && cid != null && mcc != null && mnc != null
+            && lac != 0 && cid != 0 && mcc != 0 && mnc != 0) {
+        position.setNetwork(new Network(
+                CellTower.from(mcc, mnc, lac, cid)));
     }
 
-        parser.next(); // unused
-
+    // skip unused
+    parser.next();
     String checksum = parser.next();
 
+    // acknowledge
     if (channel != null) {
-
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
-
         String devicePassword = AttributeUtil.getDevicePassword(
-                    getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
+                getCacheManager(),
+                deviceSession.getDeviceId(),
+                getProtocolName(),
+                DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
