diff --git a/tmp/5ecb3413-6a19-435a-842a-9520f6e2097a_buggy.java b/tmp/93dee241-2dc2-46e4-8b66-37e3ce65fca3_fixed.java
index 23f078d..bf86eee 100644
--- a/tmp/5ecb3413-6a19-435a-842a-9520f6e2097a_buggy.java
+++ b/tmp/93dee241-2dc2-46e4-8b66-37e3ce65fca3_fixed.java
@@ -1,14 +1,15 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
-            if (c == ' ') {
+    // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left asâ€‘is.
+    for (int i = 0; i < s.length(); ) {
+        int cp = s.codePointAt(i);
+        if (cp == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+        } else if (cp > 127) {
+            // handles supplementary chars in one go and skips both surrogates
+            sb.append(URLEncoder.encode(new String(Character.toChars(cp)), UTF_8.name()));
         } else {
-                sb.append((char) c);
+            sb.append((char) cp);
         }
+        i += Character.charCount(cp);
     }
 }
\ No newline at end of file
