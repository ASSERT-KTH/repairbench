diff --git a/tmp/13c3b0e7-ac97-48ae-bdc5-85d3069c2724_buggy.java b/tmp/281cb9df-15d4-4844-acaf-1fb539a41dac_fixed.java
index 23f078d..ec5e432 100644
--- a/tmp/13c3b0e7-ac97-48ae-bdc5-85d3069c2724_buggy.java
+++ b/tmp/281cb9df-15d4-4844-acaf-1fb539a41dac_fixed.java
@@ -1,14 +1,14 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
-            if (c == ' ') {
+    for (int offset = 0; offset < s.length(); ) {
+        int codePoint = s.codePointAt(offset);
+        if (codePoint == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+        } else if (codePoint > 127) {
+            String toEncode = new String(Character.toChars(codePoint));
+            sb.append(URLEncoder.encode(toEncode, UTF_8.name()));
         } else {
-                sb.append((char) c);
+            sb.append((char) codePoint);
         }
+        offset += Character.charCount(codePoint);
     }
 }
\ No newline at end of file
