diff --git a/tmp/5e8d57fc-f501-40ac-b9d5-b88d04d435a4_buggy.java b/tmp/d76e7352-2fa8-4a72-9c87-41983f543dd9_fixed.java
index 23f078d..a35cb02 100644
--- a/tmp/5e8d57fc-f501-40ac-b9d5-b88d04d435a4_buggy.java
+++ b/tmp/d76e7352-2fa8-4a72-9c87-41983f543dd9_fixed.java
@@ -1,14 +1,15 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+        } else if (c > 127) {
+            // properly handle supplementary code‚Äêpoints (skipping both surrogates)
+            String ch = new String(Character.toChars(c));
+            sb.append(URLEncoder.encode(ch, UTF_8.name()));
         } else {
             sb.append((char) c);
         }
+        i += Character.charCount(c);
     }
 }
\ No newline at end of file
