diff --git a/tmp/d59ef4b6-3623-4095-8ce3-93e8dd6e28c2_buggy.java b/tmp/bcac4d1d-7f81-4a09-89bd-06e7bd41b10c_fixed.java
index a4ebaaa..8d4625f 100644
--- a/tmp/d59ef4b6-3623-4095-8ce3-93e8dd6e28c2_buggy.java
+++ b/tmp/bcac4d1d-7f81-4a09-89bd-06e7bd41b10c_fixed.java
@@ -1,63 +1,88 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
+    // decode basic location fields (latitude, longitude, time, course, speed)
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
+    // signal and satellite info
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
+    // battery / charge
     int battery = buf.readUnsignedByte();
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
     } else if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
     }
 
+    // network cell info
     position.setNetwork(new Network(CellTower.fromCidLac(
             getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
+    // product, status, alarms
     int product = buf.readUnsignedByte();
     int status = buf.readUnsignedShort();
     int alarm = buf.readUnsignedShort();
 
     if (product == 1 || product == 2) {
         if (BitUtil.check(alarm, 0)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
     } else if (product == 3) {
         position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
         if (BitUtil.check(alarm, 1)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
         if (BitUtil.check(alarm, 2)) {
             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
         }
         if (BitUtil.check(alarm, 3)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
         }
     }
 
     position.set(Position.KEY_STATUS, status);
 
+    // optional fields
     while (buf.readableBytes() > 2) {
         int id = buf.readUnsignedByte();
         int length = buf.readUnsignedByte();
         switch (id) {
             case 0x02:
+                // altitude (2 bytes)
                 position.setAltitude(buf.readShort());
+                if (length > 2) {
+                    buf.skipBytes(length - 2);
+                }
+                break;
+            case 0x0A:
+                // tilt (3 signed bytes, skip any extra)
+                if (length >= 3) {
+                    int tiltX = buf.readByte();
+                    int tiltY = buf.readByte();
+                    int tiltZ = buf.readByte();
+                    position.set("tilt", "[" + tiltX + "," + tiltY + "," + tiltZ + "]");
+                    if (length > 3) {
+                        buf.skipBytes(length - 3);
+                    }
+                } else {
+                    buf.skipBytes(length);
+                }
                 break;
             case 0x0C:
-                    position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                // gyro data (hex dump)
+                position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(length)));
                 break;
             default:
                 buf.skipBytes(length);
                 break;
         }
     }
 
     return position;
 }
\ No newline at end of file
