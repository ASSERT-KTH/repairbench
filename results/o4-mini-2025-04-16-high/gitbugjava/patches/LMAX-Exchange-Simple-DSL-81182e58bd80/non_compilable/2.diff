diff --git a/tmp/b6f5ab22-1450-426c-90f2-f2ec1bf90e24_buggy.java b/tmp/dc8cca6f-7ad8-4719-ad90-4207d3033aa8_fixed.java
index f506479..fa350a1 100644
--- a/tmp/b6f5ab22-1450-426c-90f2-f2ec1bf90e24_buggy.java
+++ b/tmp/dc8cca6f-7ad8-4719-ad90-4207d3033aa8_fixed.java
@@ -1,64 +1,98 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
+    // Holds the raw values encountered for each argument in this group
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
-            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
+    // We still use the processor to pick up the required identity value
+    final SimpleArgumentProcessor processor =
+        new SimpleArgumentProcessor(valuesByArg,
+            "Did not supply a value for %s in group " + groupArg.getName());
     processor.consume(groupArg.getIdentity(), arguments);
 
+    // Build a quick lookup from lower‑cased name → arg
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
-                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
+        String key = dslArg.getName().toLowerCase();
+        if (argsByName.put(key, dslArg) != null)
         {
-                    throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
+            throw new IllegalArgumentException(
+                "Duplicate parameter '" + dslArg.getName() +
+                "' in group " + groupArg.getName());
         }
     }
 
+    // Now consume any further args that belong to this group
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
-
         if (argument.name == null)
         {
-                    throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
+            throw new IllegalArgumentException(
+                "Unexpected ambiguous argument " + argument.originalValue);
         }
 
+        // see if this name maps to one of our group‐args
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
         if (arg == null)
         {
             break;
         }
 
+        // if it's not multi‐valued and we've already seen it, stop
         final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
         if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
         {
             break;
         }
 
+        // split on commas if we're allowed multiple values
+        if (arg.isAllowMultipleValues())
+        {
+            for (String part : argument.value.split(","))
+            {
+                String trimmed = part.trim();
+                checkValidValue(arg, trimmed);
+                argValues.add(trimmed);
+            }
+        }
+        else
+        {
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
+        }
+
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
+    // Build the final name→values map for this group instance
     final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
+    for (Map.Entry<DslArg, List<String>> entry : valuesByArg.entrySet())
     {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
+        DslArg dslArg = entry.getKey();
+        List<String> raw = entry.getValue();
+        if (raw.isEmpty())
         {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+            continue;
         }
+        valuesByName.put(
+            dslArg.getName().toLowerCase(),
+            new ArrayList<>(raw));
     }
 
+    // Create the DslArg[] (identity first, then the other args)
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
-            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+
+    // And finally record this one group‐instance
+    groupsByArg
+        .computeIfAbsent(groupArg, k -> new ArrayList<>())
+        .add(new RepeatingParamValues(dslArgs, valuesByName));
 }
\ No newline at end of file
