diff --git a/tmp/2c0935ff-20ec-4cea-8676-0f9cee7348e0_buggy.java b/tmp/07a57fe5-7ab8-47f8-9ce2-3effacf9d4cc_fixed.java
index f506479..fe4a1c1 100644
--- a/tmp/2c0935ff-20ec-4cea-8676-0f9cee7348e0_buggy.java
+++ b/tmp/07a57fe5-7ab8-47f8-9ce2-3effacf9d4cc_fixed.java
@@ -1,64 +1,99 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
-            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
+    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(
+        valuesByArg,
+        "Did not supply a value for %s in group " + groupArg.getName()
+    );
 
+    // first consume the identity of the group
     processor.consume(groupArg.getIdentity(), arguments);
 
+    // build a lookup of all allowed args in this group (identity + otherArgs)
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(),
+                   groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
-                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
+        String key = dslArg.getName().toLowerCase();
+        if (argsByName.put(key, dslArg) != null)
         {
-                    throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
+            throw new IllegalArgumentException(
+                "Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName()
+            );
         }
     }
 
+    // now consume any following name‐value pairs that belong to this group
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
         if (argument.name == null)
         {
-                    throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
+            throw new IllegalArgumentException(
+                "Unexpected ambiguous argument " + argument.originalValue
+            );
         }
 
-                final DslArg arg = argsByName.get(argument.name.toLowerCase());
+        String lower = argument.name.toLowerCase();
+        final DslArg arg = argsByName.get(lower);
         if (arg == null)
         {
+            // not part of this group
             break;
         }
 
+        // start collecting values for this arg
         final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+        // if we've already seen it once and it doesn't allow multiple, stop
         if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
         {
             break;
         }
 
+        // split on the default separator (comma) if this arg allows multiple values
+        if (arg.isAllowMultipleValues())
+        {
+            String[] parts = argument.value.split(",");
+            for (String part : parts)
+            {
+                String v = part.trim();
+                checkValidValue(arg, v);
+                argValues.add(v);
+            }
+        }
+        else
+        {
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
+        }
+
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
+    // now collect into a simple name→values map for the final RepeatingParamValues
     final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
+    for (SimpleDslArg simple : argsByName.values())
     {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
+        SimpleDslParam param = processor.collect(simple);
         if (param.hasValue())
         {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+            valuesByName.put(param.getName().toLowerCase(),
+                             param.getValuesAsList());
         }
     }
 
+    // build the array of args and stash it in groupsByArg
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
-            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+    groupsByArg
+        .computeIfAbsent(groupArg, k -> new ArrayList<>())
+        .add(new RepeatingParamValues(dslArgs, valuesByName));
 }
\ No newline at end of file
