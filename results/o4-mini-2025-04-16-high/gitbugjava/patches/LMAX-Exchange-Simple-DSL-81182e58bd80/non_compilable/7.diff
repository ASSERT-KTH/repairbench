diff --git a/tmp/71803f01-a223-43aa-b87d-4ed0caed16e7_buggy.java b/tmp/652411e6-635c-46f0-a8ca-d21b2ccefdfa_fixed.java
index f506479..3587224 100644
--- a/tmp/71803f01-a223-43aa-b87d-4ed0caed16e7_buggy.java
+++ b/tmp/652411e6-635c-46f0-a8ca-d21b2ccefdfa_fixed.java
@@ -1,64 +1,106 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
-            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
+    final SimpleArgumentProcessor processor =
+        new SimpleArgumentProcessor(valuesByArg,
+            "Did not supply a value for %s in group " + groupArg.getName());
 
+    // first consume the identity (required) parameter of the group
     processor.consume(groupArg.getIdentity(), arguments);
 
+    // build a quick lookup of all the args in the group by lower‐cased name
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    final String identityNameLower = groupArg.getIdentity().getName().toLowerCase();
+    argsByName.put(identityNameLower, groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
-                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
+        String key = dslArg.getName().toLowerCase();
+        if (argsByName.put(key, dslArg) != null)
         {
-                    throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
+            throw new IllegalArgumentException("Duplicate parameter '"
+                + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    // now consume any of the other args that belong to this group instance
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
-
         if (argument.name == null)
         {
-                    throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
+            throw new IllegalArgumentException(
+                "Unexpected ambiguous argument " + argument.originalValue);
         }
 
-                final DslArg arg = argsByName.get(argument.name.toLowerCase());
+        String nameLower = argument.name.toLowerCase();
+        // if we hit the identity again, it's the start of the next group
+        if (nameLower.equals(identityNameLower))
+        {
+            break;
+        }
+
+        final DslArg arg = argsByName.get(nameLower);
         if (arg == null)
         {
             break;
         }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+        final List<String> argValues =
+            valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+
+        // if this arg is single‐valued and we've already seen it, stop
         if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
         {
             break;
         }
 
+        // split on comma for multi‐value parameters
+        if (arg.isAllowMultipleValues())
+        {
+            for (String raw : argument.value.split(","))
+            {
+                String token = raw.trim();
+                if (token.isEmpty())
+                {
+                    continue;
+                }
+                checkValidValue(arg, token);
+                argValues.add(token);
+            }
+        }
+        else
+        {
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
+        }
+
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
+    // collect into a name→list map for the RepeatingParamValues
     final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
+    for (SimpleDslArg simpleDslArg : argsByName.values())
     {
         final SimpleDslParam param = processor.collect(simpleDslArg);
         if (param.hasValue())
         {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+            valuesByName.put(
+                param.getName().toLowerCase(),
+                param.getValuesAsList());
         }
     }
 
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
-            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
-            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+    System.arraycopy(
+        groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
+
+    groupsByArg
+        .computeIfAbsent(groupArg, k -> new ArrayList<>())
+        .add(new RepeatingParamValues(dslArgs, valuesByName));
 }
\ No newline at end of file
