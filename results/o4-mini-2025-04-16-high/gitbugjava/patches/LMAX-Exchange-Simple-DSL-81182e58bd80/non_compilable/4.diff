diff --git a/tmp/da558e72-2235-403d-bf47-333fb3080658_buggy.java b/tmp/9ed15dce-8b5b-4b18-a7c6-3d0a60955a83_fixed.java
index f506479..89e8f71 100644
--- a/tmp/da558e72-2235-403d-bf47-333fb3080658_buggy.java
+++ b/tmp/9ed15dce-8b5b-4b18-a7c6-3d0a60955a83_fixed.java
@@ -1,64 +1,89 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
-            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
+    final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(
+            valuesByArg,
+            "Did not supply a value for %s in group " + groupArg.getName());
 
+    // first consume the identity (e.g. "group: Joe")
     processor.consume(groupArg.getIdentity(), arguments);
 
+    // build a lookup for the identity + any other params in the group
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
-                    throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
+            throw new IllegalArgumentException(
+                    "Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    // now pick up any parameters that belong to this group instance
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
         if (argument.name == null)
         {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
         if (arg == null)
         {
+            // this argument belongs to the next group or top‐level
             break;
         }
 
         final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
         if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
         {
+            // can't take any more values for this param
             break;
         }
 
+        // split on the default separator if this arg allows multiple values
+        if (arg.isAllowMultipleValues())
+        {
+            for (String part : argument.value.split(","))
+            {
+                String trimmed = part.trim();
+                checkValidValue(arg, trimmed);
+                argValues.add(trimmed);
+            }
+        }
+        else
+        {
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
+        }
+
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
+    // collect into a name→values map
     final Map<String, List<String>> valuesByName = new HashMap<>();
     for (final SimpleDslArg simpleDslArg : argsByName.values())
     {
         final SimpleDslParam param = processor.collect(simpleDslArg);
         if (param.hasValue())
         {
             valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
         }
     }
 
+    // record this group instance
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
-            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+    groupsByArg
+        .computeIfAbsent(groupArg, k -> new ArrayList<>())
+        .add(new RepeatingParamValues(dslArgs, valuesByName));
 }
\ No newline at end of file
