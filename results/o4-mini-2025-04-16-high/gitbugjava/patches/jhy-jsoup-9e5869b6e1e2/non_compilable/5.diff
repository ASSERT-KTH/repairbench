diff --git a/tmp/bf8813b1-f941-4c52-bf41-8c6a951a6ee0_buggy.java b/tmp/9bd1babf-7022-45c9-acb0-6031714831ad_fixed.java
index 0583946..b662dc5 100644
--- a/tmp/bf8813b1-f941-4c52-bf41-8c6a951a6ee0_buggy.java
+++ b/tmp/9bd1babf-7022-45c9-acb0-6031714831ad_fixed.java
@@ -1,30 +1,36 @@
+@Override
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+        // switch to formatAsBlock for custom tags as well as builtâ€‘ins
+        trimLeading  = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock())
+                     || parentNode instanceof Document;
+        trimTrailing = nextSibling() == null && parent != null && parent.tag().formatAsBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // if this text is just whitespace, and the next node will cause an indent, skip it
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                        || (next instanceof TextNode && ((TextNode) next).isBlank());
+        if (couldSkip && isBlank) {
+            return;
+        }
 
         Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)
+         || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+         || (siblingIndex > 0
+             && prev instanceof Element
+             && ((Element) prev).normalName().equals("br"))
+        ) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
