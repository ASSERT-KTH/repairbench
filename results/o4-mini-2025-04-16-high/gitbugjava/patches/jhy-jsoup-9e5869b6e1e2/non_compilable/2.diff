diff --git a/tmp/692d5a3f-82d8-4899-8a90-b0e959d4f8ea_buggy.java b/tmp/6954fc54-1298-401a-9ccb-c5a7365b904e_fixed.java
index 0583946..5fbef7d 100644
--- a/tmp/692d5a3f-82d8-4899-8a90-b0e959d4f8ea_buggy.java
+++ b/tmp/6954fc54-1298-401a-9ccb-c5a7365b904e_fixed.java
@@ -1,30 +1,46 @@
+@Override
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;
+    // normaliseWhite means collapse and trim runs of whitespace
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+        // trim leading if first in a block, or at document root
+        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock())
+                  || parentNode instanceof Document;
+        // trim trailing if last in a block
+        trimTrailing = (nextSibling() == null && parent != null && parent.tag().isBlock());
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // skip any blank text node that is either
+        //  - before an element that will indent
+        //  - before another blank text node
+        //  - or is the very last node in its parent
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        boolean shouldSkip = isBlank
+                           && ((next instanceof Element && ((Element) next).shouldIndent(out))
+                             || (next instanceof TextNode && ((TextNode) next).isBlank())
+                             || next == null);
+        if (shouldSkip) {
+            return;
+        }
 
+        // indent this text if it breaks a block context
         Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)
+         || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+         || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))) {
             indent(accum, depth, out);
         }
+    }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+    // finally, escape & append the text (with collapsing/trimming as flagged)
+    Entities.escape(accum, coreValue(), out,
+                    /* inAttribute= */ false,
+                    /* normaliseWhite= */ normaliseWhite,
+                    /* trimLeading=   */ trimLeading,
+                    /* trimTrailing=  */ trimTrailing);
 }
\ No newline at end of file
