diff --git a/tmp/f01cb992-35f9-428c-8502-04eedb9a7cde_buggy.java b/tmp/11739b86-ca6f-48ff-a49b-5079145521e5_fixed.java
index 0583946..1e44812 100644
--- a/tmp/f01cb992-35f9-428c-8502-04eedb9a7cde_buggy.java
+++ b/tmp/11739b86-ca6f-48ff-a49b-5079145521e5_fixed.java
@@ -1,30 +1,39 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
+        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock())
+            || parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+
+        // skip purely-blank text nodes before a block-indent or any indent-like whitespace
+        if (isBlank) {
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                || (next instanceof TextNode && ((TextNode) next).isBlank());
+            if (couldSkip) {
+                return;
+            }
+            // also drop any blank that contains a newline (indentation text)
+            String text = coreValue();
+            if (text.indexOf('\n') != -1) {
+                return;
+            }
+        }
 
         Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)
+         || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+         || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
