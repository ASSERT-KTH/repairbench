diff --git a/tmp/4566d551-8f33-4b97-8225-728bbbe757e2_buggy.java b/tmp/3a45d3b9-b931-49cb-9652-525f357042a3_fixed.java
index 016a7f6..f7e3542 100644
--- a/tmp/4566d551-8f33-4b97-8225-728bbbe757e2_buggy.java
+++ b/tmp/3a45d3b9-b931-49cb-9652-525f357042a3_fixed.java
@@ -1,29 +1,42 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // grab siblings upfront
         Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
-
         Node prev = previousSibling();
+
+        // determine trim flags
+        trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
+        trimTrailing = trimLikeBlock && (next == null);
+
+        boolean isBlank = isBlank();
+        // detect block‐level neighbors
+        boolean isPrevBlock = prev instanceof Element
+            && ((((Element) prev).tag().isBlock()) || ((Element) prev).tag().formatAsBlock());
+        boolean isNextBlock = next instanceof Element
+            && ((((Element) next).tag().isBlock()) || ((Element) next).tag().formatAsBlock());
+
+        // skip blank whitespace between block‐level siblings or around indenting elements
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && ((TextNode) next).isBlank())
+            || (isBlank && (isPrevBlock || isNextBlock));
+        if (couldSkip && isBlank)
+            return;
+
+        // indent before non-blank text in certain positions
         if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)
+            || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+            || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
+        ) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
