diff --git a/tmp/aae3849d-273e-4612-8304-6acff10ca717_buggy.java b/tmp/0580137e-1750-4ee8-b1c3-a214109b0861_fixed.java
index 016a7f6..89b9ffa 100644
--- a/tmp/aae3849d-273e-4612-8304-6acff10ca717_buggy.java
+++ b/tmp/0580137e-1750-4ee8-b1c3-a214109b0861_fixed.java
@@ -1,29 +1,39 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
+        Node prev = previousSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+
+        // trim leading if first in a block or follows a block-like element
+        trimLeading = (trimLikeBlock && (siblingIndex == 0
+                        || (prev instanceof Element
+                            && ( ((Element) prev).tag().isBlock()
+                              || ((Element) prev).tag().formatAsBlock() ))))
+                    || parentNode instanceof Document;
+        // trim trailing if last in a block
+        trimTrailing = trimLikeBlock && next == null;
+
+        // skip pure-whitespace nodes that either precede a block (indent) or follow a block-like element
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                          || (next instanceof TextNode && ((TextNode) next).isBlank())
+                          || (prev instanceof Element
+                              && ( ((Element) prev).tag().isBlock()
+                                || ((Element) prev).tag().formatAsBlock() ));
         if (couldSkip && isBlank) return;
 
-            Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        // indent if needed
+        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)
+         || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+         || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
