diff --git a/tmp/94b97708-d273-4ec2-95af-ff2e0e56ce17_buggy.java b/tmp/333c629c-681b-43d8-8e20-ab4efd4775fc_fixed.java
index acd5eb5..707420c 100644
--- a/tmp/94b97708-d273-4ec2-95af-ff2e0e56ce17_buggy.java
+++ b/tmp/333c629c-681b-43d8-8e20-ab4efd4775fc_fixed.java
@@ -1,32 +1,49 @@
 @Override
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
-        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
+    final boolean trimLikeBlock = parent != null
+        && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
+        trimLeading = (trimLikeBlock && siblingIndex == 0)
+            || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // if this text is just whitespace, and the next or previous node would
+        // cause an indent, skip this text entirely
         Node next = nextSibling();
         Node prev = previousSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && ((TextNode) next).isBlank())
             || (prev instanceof Element && ((Element) prev).isBlock())
-                ;
-            if (couldSkip && isBlank) return;
+            // special case: skip whitespace after inline <br>
+            || (siblingIndex > 0 && isNode(prev, "br"));
+        if (couldSkip && isBlank) {
+            return;
+        }
 
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        // if we're going to print non-blank text, do the usual indent checks
+        if ((siblingIndex == 0
+                && parent != null
+                && parent.tag().formatAsBlock()
+                && !isBlank)
+            || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+            || (siblingIndex > 0 && isNode(prev, "br"))) {
             indent(accum, depth, out);
         }
+    }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+    Entities.escape(
+        accum,
+        coreValue(),
+        out,
+        false,
+        normaliseWhite,
+        trimLeading,
+        trimTrailing
+    );
 }
\ No newline at end of file
