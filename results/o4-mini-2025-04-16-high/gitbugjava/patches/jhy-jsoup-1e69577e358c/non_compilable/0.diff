diff --git a/tmp/be340d01-7369-4c68-8756-e0d0eff9da78_buggy.java b/tmp/3b1a78d2-825c-43f1-867a-50cc936bdd80_fixed.java
index c9c77a4..acc94c9 100644
--- a/tmp/be340d01-7369-4c68-8756-e0d0eff9da78_buggy.java
+++ b/tmp/3b1a78d2-825c-43f1-867a-50cc936bdd80_fixed.java
@@ -1,35 +1,36 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
+        // convert the URL to a URI so we can pick up the raw (percent‐encoded) path
+        URI parent = u.toURI();
+        // rebuild a URI preserving any existing percent‐encodings in the path
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+            IDN.toASCII(decodePart(u.getHost())), // punycode the host if needed
             u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+            parent.getRawPath(),                 // preserve %2B, %20, etc.
+            null, null                           // query & fragment appended later
         );
 
         String normUrl = uri.toASCIIString();
         if (q != null || u.getRef() != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u = new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
+        // In development we want to catch any normalization problems; in production
+        // we'll just fall back to the original URL
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
