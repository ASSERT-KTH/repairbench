diff --git a/tmp/50382ed7-09b9-4fc8-9889-61e1e4cc76e4_buggy.java b/tmp/818cf72e-8d98-40e4-b356-479042bdf689_fixed.java
index c9c77a4..2ab9ae8 100644
--- a/tmp/50382ed7-09b9-4fc8-9889-61e1e4cc76e4_buggy.java
+++ b/tmp/818cf72e-8d98-40e4-b356-479042bdf689_fixed.java
@@ -1,35 +1,61 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
-            URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
-            );
+        // Puny‑code the host (decode any % escapes, then IDN‐toASCII)
+        String protocol = u.getProtocol();
+        String userInfo = u.getUserInfo();
+        String host = IDN.toASCII(decodePart(u.getHost()));
+        int port = u.getPort();
 
-            String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
+        // Preserve existing percent‐escapes in the path, but encode any non‑ASCII chars
+        String rawPath = u.getPath();
+        StringBuilder pathBuf = new StringBuilder();
+        for (int i = 0; i < rawPath.length(); i++) {
+            char c = rawPath.charAt(i);
+            if (c > 127) {
+                byte[] bytes = String.valueOf(c).getBytes("UTF-8");
+                for (byte b : bytes) {
+                    pathBuf.append('%');
+                    pathBuf.append(Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)));
+                    pathBuf.append(Character.toUpperCase(Character.forDigit(b & 0xF, 16)));
+                }
+            } else {
+                pathBuf.append(c);
+            }
+        }
+        String path = pathBuf.toString();
+
+        // Build the normalized URL string
+        StringBuilder sb = StringUtil.borrowBuilder()
+            .append(protocol).append("://");
+        if (userInfo != null && !userInfo.isEmpty()) {
+            sb.append(userInfo).append('@');
+        }
+        sb.append(host);
+        if (port != -1) {
+            sb.append(':').append(port);
+        }
+        if (path != null && !path.isEmpty()) {
+            if (!path.startsWith("/")) sb.append('/');
+            sb.append(path);
+        } else {
+            sb.append('/');
+        }
         if (q != null) {
             sb.append('?');
             appendToAscii(StringUtil.releaseBuilder(q), true, sb);
         }
         if (u.getRef() != null) {
             sb.append('#');
             appendToAscii(u.getRef(), false, sb);
         }
-                normUrl = StringUtil.releaseBuilder(sb);
-            }
+
+        String normUrl = StringUtil.releaseBuilder(sb);
         u = new URL(normUrl);
         return u;
-        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
+
+    } catch (MalformedURLException | UnsupportedEncodingException e) {
+        // In production fall back to the original URL
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
