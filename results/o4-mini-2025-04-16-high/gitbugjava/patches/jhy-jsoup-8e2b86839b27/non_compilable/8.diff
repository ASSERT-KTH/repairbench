diff --git a/tmp/5dd0c6d0-a28c-41e2-ac2a-0499b39ce1c2_buggy.java b/tmp/e9245d11-9b93-445a-a146-7c1644e70de3_fixed.java
index ae12a4d..d72b48a 100644
--- a/tmp/5dd0c6d0-a28c-41e2-ac2a-0499b39ce1c2_buggy.java
+++ b/tmp/e9245d11-9b93-445a-a146-7c1644e70de3_fixed.java
@@ -1,3 +1,25 @@
 private boolean isFormatAsBlock(Document.OutputSettings out) {
-        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();
+    // outline mode forces block formatting
+    if (out.outline()) {
+        return true;
+    }
+    // honor a CSS "display" declaration in the inline style
+    if (hasAttr("style")) {
+        String style = attr("style");
+        for (String decl : style.split(";")) {
+            String[] parts = decl.split(":", 2);
+            if (parts.length == 2 && parts[0].trim().equalsIgnoreCase("display")) {
+                String value = parts[1].trim().toLowerCase();
+                if ("inline".equals(value)) {
+                    return false;
+                } else if ("block".equals(value)) {
+                    return true;
+                }
+                // other display values fall through to default handling
+            }
+        }
+    }
+    // fallback to the tag's block‚Äêlevel setting or inherit from parent
+    return tag.formatAsBlock()
+        || (parent() != null && parent().isFormatAsBlock(out));
 }
\ No newline at end of file
