diff --git a/tmp/33a83122-848c-4543-b76a-9e9d7fdabca3_buggy.java b/tmp/323aea3f-b569-44d2-a703-3d68eb972bc4_fixed.java
index ae12a4d..04366a7 100644
--- a/tmp/33a83122-848c-4543-b76a-9e9d7fdabca3_buggy.java
+++ b/tmp/323aea3f-b569-44d2-a703-3d68eb972bc4_fixed.java
@@ -1,3 +1,32 @@
 private boolean isFormatAsBlock(Document.OutputSettings out) {
-        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();
+    // if the parent is a block‐level tag, or we're in outline mode, that forces block formatting
+    boolean parentBlock = parent() != null && parent().tag().formatAsBlock();
+    boolean outline = out.outline();
+
+    // honor an inline‐display style, but don't let it suppress a block parent or outline
+    String style = attr("style");
+    if (style != null && !style.isEmpty()) {
+        String lower = style.toLowerCase(Locale.ROOT);
+        for (String decl : lower.split(";")) {
+            int idx = decl.indexOf(':');
+            if (idx > 0) {
+                String key = decl.substring(0, idx).trim();
+                String val = decl.substring(idx + 1).trim();
+                if ("display".equals(key)) {
+                    if ("inline".equals(val)) {
+                        // inline only if not inside a block or outline mode
+                        return parentBlock || outline;
+                    }
+                    if ("block".equals(val)) {
+                        // force block if styled as block
+                        return true;
+                    }
+                    break;
+                }
+            }
+        }
+    }
+
+    // default: block if the tag itself is block, or parent is block, or outline mode
+    return tag.formatAsBlock() || parentBlock || outline;
 }
\ No newline at end of file
