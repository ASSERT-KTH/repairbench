diff --git a/tmp/f3fad3df-8d53-4441-a3f9-8845cd35930a_buggy.java b/tmp/409fb8c4-1875-48e6-906d-073ebfea1126_fixed.java
index 3da904d..e47372b 100644
--- a/tmp/f3fad3df-8d53-4441-a3f9-8845cd35930a_buggy.java
+++ b/tmp/409fb8c4-1875-48e6-906d-073ebfea1126_fixed.java
@@ -1,73 +1,95 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
+    // parse network info
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
     int cellCount = Integer.parseInt(values[index++]);
     if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-
+        // skip timing advance
+        index++;
+        // ensure there is at least MCC and MNC
+        if (values.length > index + 1) {
+            String mccStr = values[index++];
+            String mncStr = values[index++];
+            // skip the block if MCC or MNC is the invalid marker "FFFF"
+            if (!mccStr.isEmpty() && !mncStr.isEmpty()
+                    && !mccStr.equalsIgnoreCase("FFFF") && !mncStr.equalsIgnoreCase("FFFF")) {
+                int mcc = Integer.parseInt(mccStr);
+                int mnc = Integer.parseInt(mncStr);
                 for (int i = 0; i < cellCount; i++) {
+                    if (index + 2 >= values.length) {
+                        break;
+                    }
                     int lac = Integer.parseInt(values[index++]);
                     int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                    String rssiStr = values[index++];
+                    if (!rssiStr.isEmpty()) {
+                        network.addCellTower(
+                            CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiStr)));
                     } else {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                        network.addCellTower(
+                            CellTower.from(mcc, mnc, lac, cid));
+                    }
+                }
+            } else {
+                // skip over the invalid cell fields
+                index += cellCount * 3;
             }
         }
     }
 
+    // parse Wiâ€‘Fi info
     if (index < values.length && !values[index].isEmpty()) {
         int wifiCount = Integer.parseInt(values[index++]);
-
         for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+            index++; // skip wifi name
+            if (index + 1 >= values.length) {
+                break;
+            }
             String macAddress = values[index++];
             String rssi = values[index++];
             if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                network.addWifiAccessPoint(
+                    WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
             }
         }
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
