diff --git a/tmp/fad16dca-59ee-4715-8955-8caa61326496_buggy.java b/tmp/99a2c3d5-4a6a-4a15-be51-13bd41694e5d_fixed.java
index 3da904d..ebbeba5 100644
--- a/tmp/fad16dca-59ee-4715-8955-8caa61326496_buggy.java
+++ b/tmp/99a2c3d5-4a6a-4a15-be51-13bd41694e5d_fixed.java
@@ -1,73 +1,150 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
+    // Parse network (cell towers and Wi‑Fi)
     String[] values = parser.next().split(",");
     int index = 0;
-
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+    // Cell towers
+    int cellCount = 0;
+    try {
+        cellCount = Integer.parseInt(values[index++]);
+    } catch (Exception e) {
+        // invalid cell count, skip
+        cellCount = 0;
+        index++;
+    }
     if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-
-            for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
+        // skip timing advance
+        index++;
+        // parse MCC
+        int mcc = 0;
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                mcc = Integer.parseInt(values[index]);
+            } catch (NumberFormatException e) {
+                mcc = 0;
+            }
+        }
+        index++;
+        // parse MNC
+        int mnc = 0;
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                mnc = Integer.parseInt(values[index]);
+            } catch (NumberFormatException e) {
+                mnc = 0;
+            }
+        }
+        index++;
+        // only add towers if MCC/MNC are valid
+        if (mcc > 0 && mnc > 0) {
+            for (int i = 0; i < cellCount && index + 2 < values.length; i++) {
+                // parse LAC (decimal or hex)
+                int lac = 0;
+                if (!values[index].isEmpty()) {
+                    try {
+                        lac = Integer.parseInt(values[index]);
+                    } catch (NumberFormatException e) {
+                        try {
+                            lac = Integer.parseInt(values[index], 16);
+                        } catch (Exception ex) {
+                            lac = 0;
+                        }
+                    }
+                }
+                index++;
+                // parse CID (decimal or hex)
+                int cid = 0;
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        cid = Integer.parseInt(values[index]);
+                    } catch (NumberFormatException e) {
+                        try {
+                            cid = Integer.parseInt(values[index], 16);
+                        } catch (Exception ex) {
+                            cid = 0;
+                        }
+                    }
+                }
+                index++;
+                // parse RSSI
+                String rssi = "";
+                if (index < values.length) {
+                    rssi = values[index];
+                }
+                index++;
                 if (!rssi.isEmpty()) {
+                    try {
                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                    } catch (NumberFormatException e) {
+                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                    }
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
+        } else {
+            // skip invalid entries
+            index += cellCount * 3;
+        }
     }
 
-        if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
-
-            for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+    // Wi‑Fi access points
+    if (index < values.length) {
+        int wifiCount = 0;
+        try {
+            wifiCount = Integer.parseInt(values[index++]);
+        } catch (Exception e) {
+            wifiCount = 0;
+        }
+        for (int i = 0; i < wifiCount && index + 2 < values.length; i++) {
+            // skip SSID
+            index++;
+            String mac = values[index++];
+            String r = values[index++];
+            if (!mac.isEmpty() && !mac.equals("0") && !r.isEmpty()) {
+                try {
+                    network.addWifiAccessPoint(WifiAccessPoint.from(mac, Integer.parseInt(r)));
+                } catch (NumberFormatException e) {
+                    // ignore invalid RSSI
+                }
             }
         }
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
