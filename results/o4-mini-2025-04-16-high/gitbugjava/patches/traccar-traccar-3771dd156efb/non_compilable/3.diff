diff --git a/tmp/91a63107-061b-4e21-81e1-a88cf27f3ef7_buggy.java b/tmp/158f5497-f505-4f37-9049-9ae23fbeaaf7_fixed.java
index 3da904d..d5c273b 100644
--- a/tmp/91a63107-061b-4e21-81e1-a88cf27f3ef7_buggy.java
+++ b/tmp/158f5497-f505-4f37-9049-9ae23fbeaaf7_fixed.java
@@ -1,73 +1,84 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
-
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
-        String[] values = parser.next().split(",");
-        int index = 0;
-
+    // parse optional network information
+    String networkData = parser.next();
+    if (!networkData.isEmpty()) {
+        String[] values = networkData.split(",");
+        int idx = 0;
         Network network = new Network();
-
-        int cellCount = Integer.parseInt(values[index++]);
+        try {
+            // cells
+            int cellCount = Integer.parseInt(values[idx++]);
             if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-
+                idx++; // skip timing advance
+                String mccStr = values[idx++];
+                String mncStr = values[idx++];
+                // skip if invalid markers
+                if (!"FFFF".equalsIgnoreCase(mccStr) && !"FFFF".equalsIgnoreCase(mncStr)) {
+                    int mcc = mccStr.isEmpty() ? 0 : Integer.parseInt(mccStr);
+                    int mnc = mncStr.isEmpty() ? 0 : Integer.parseInt(mncStr);
                     for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                        int lac = Integer.parseInt(values[idx++]);
+                        int cid = Integer.parseInt(values[idx++]);
+                        String rssiStr = values[idx++];
+                        if (!rssiStr.isEmpty()) {
+                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiStr)));
                         } else {
                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                         }
                     }
+                } else {
+                    // skip invalid cell entries
+                    idx += cellCount * 3;
                 }
-
-        if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
-
+            }
+            // wifis
+            if (idx < values.length && !values[idx].isEmpty()) {
+                int wifiCount = Integer.parseInt(values[idx++]);
                 for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                    idx++; // skip SSID
+                    String mac = values[idx++];
+                    String rssiStr = values[idx++];
+                    if (!mac.isEmpty() && !"0".equals(mac) && !rssiStr.isEmpty()) {
+                        network.addWifiAccessPoint(WifiAccessPoint.from(mac, Integer.parseInt(rssiStr)));
                     }
                 }
             }
-
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+        } catch (Exception e) {
+            // ignore any malformed network data
+        }
+        if (!network.getCellTowers().isEmpty() || !network.getWifiAccessPoints().isEmpty()) {
             position.setNetwork(network);
         }
+    }
 
     return position;
 }
\ No newline at end of file
