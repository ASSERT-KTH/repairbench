diff --git a/tmp/8b6d1817-65a1-43ce-a057-9ff4a660482e_buggy.java b/tmp/dcbcfc78-5319-4976-acba-675a8861ad36_fixed.java
index 3da904d..a61cdcc 100644
--- a/tmp/8b6d1817-65a1-43ce-a057-9ff4a660482e_buggy.java
+++ b/tmp/dcbcfc78-5319-4976-acba-675a8861ad36_fixed.java
@@ -1,73 +1,156 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+    // Parse cell towers
+    int cellCount;
+    try {
+        cellCount = Integer.parseInt(values[index++]);
+    } catch (Exception e) {
+        cellCount = 0;
+    }
     if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+        // skip timing advance
+        index++;
 
+        // MCC
+        int mcc;
+        if (index < values.length) {
+            String mccStr = values[index++];
+            try {
+                mcc = Integer.parseInt(mccStr);
+            } catch (NumberFormatException ex) {
+                try {
+                    mcc = Integer.parseInt(mccStr, 16);
+                } catch (Exception ex2) {
+                    mcc = 0;
+                }
+            }
+        } else {
+            mcc = 0;
+        }
+
+        // MNC
+        int mnc;
+        if (index < values.length) {
+            String mncStr = values[index++];
+            try {
+                mnc = Integer.parseInt(mncStr);
+            } catch (NumberFormatException ex) {
+                try {
+                    mnc = Integer.parseInt(mncStr, 16);
+                } catch (Exception ex2) {
+                    mnc = 0;
+                }
+            }
+        } else {
+            mnc = 0;
+        }
+
+        // if MCC/MNC both 0xFFFF, skip all cell entries as invalid
+        if (mcc != 0xFFFF || mnc != 0xFFFF) {
             for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                if (index + 2 < values.length) {
+                    int lac;
+                    try {
+                        lac = Integer.parseInt(values[index++]);
+                    } catch (NumberFormatException ex) {
+                        try {
+                            lac = Integer.parseInt(values[index - 1], 16);
+                        } catch (Exception ex2) {
+                            lac = 0;
+                        }
+                    }
+                    int cid;
+                    try {
+                        cid = Integer.parseInt(values[index++]);
+                    } catch (NumberFormatException ex) {
+                        try {
+                            cid = Integer.parseInt(values[index - 1], 16);
+                        } catch (Exception ex2) {
+                            cid = 0;
+                        }
+                    }
+                    String rssiStr = values[index++];
+                    if (!rssiStr.isEmpty()) {
+                        try {
+                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssiStr)));
+                        } catch (NumberFormatException ex) {
+                            network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                        }
                     } else {
                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                     }
                 }
             }
+        } else {
+            // skip invalid cell data tokens
+            index += cellCount * 3;
+        }
+    }
 
+    // Parse Wiâ€‘Fi access points
     if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
-
+        int wifiCount;
+        try {
+            wifiCount = Integer.parseInt(values[index++]);
+        } catch (Exception e) {
+            wifiCount = 0;
+        }
         for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+            // skip SSID
+            if (index < values.length) {
+                index++;
+            }
+            if (index < values.length) {
+                String mac = values[index++];
+                String rssiStr = index < values.length ? values[index++] : "";
+                if (!mac.isEmpty() && !mac.equals("0") && !rssiStr.isEmpty()) {
+                    try {
+                        network.addWifiAccessPoint(WifiAccessPoint.from(mac, Integer.parseInt(rssiStr)));
+                    } catch (NumberFormatException ex) {
+                        // ignore invalid rssi
+                    }
+                }
             }
         }
     }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    if (!network.getCellTowers().isEmpty() || !network.getWifiAccessPoints().isEmpty()) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
