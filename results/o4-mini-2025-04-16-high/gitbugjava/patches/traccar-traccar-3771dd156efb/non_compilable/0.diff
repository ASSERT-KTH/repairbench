diff --git a/tmp/7c17e6c8-028b-4ea2-9251-02a69fde23b8_buggy.java b/tmp/b31326e3-56c7-4473-a009-4144e27be9dd_fixed.java
index 3da904d..4ffe9e9 100644
--- a/tmp/7c17e6c8-028b-4ea2-9251-02a69fde23b8_buggy.java
+++ b/tmp/b31326e3-56c7-4473-a009-4144e27be9dd_fixed.java
@@ -1,73 +1,137 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
-        if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-
-            for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+    // Parse cell towers
+    int cellCount = 0;
+    if (index < values.length && !values[index].isEmpty()) {
+        try {
+            cellCount = Integer.parseInt(values[index]);
+        } catch (NumberFormatException e) {
+            cellCount = 0;
+        }
+    }
+    index++;
+    if (cellCount > 0 && index + 2 < values.length) {
+        // skip timing advance
+        index++;
+        // MCC
+        String mccToken = values[index++];
+        int mcc = 0;
+        if (!mccToken.isEmpty()) {
+            try {
+                mcc = Integer.parseInt(mccToken);
+            } catch (NumberFormatException e) {
+                mcc = Integer.parseInt(mccToken, 16);
+            }
+        }
+        // MNC
+        String mncToken = values[index++];
+        int mnc = 0;
+        if (!mncToken.isEmpty()) {
+            try {
+                mnc = Integer.parseInt(mncToken);
+            } catch (NumberFormatException e) {
+                mnc = Integer.parseInt(mncToken, 16);
+            }
+        }
+        for (int i = 0; i < cellCount && index + 3 <= values.length; i++) {
+            // LAC
+            String lacToken = values[index++];
+            int lac = 0;
+            if (!lacToken.isEmpty()) {
+                try {
+                    lac = Integer.parseInt(lacToken);
+                } catch (NumberFormatException e) {
+                    lac = Integer.parseInt(lacToken, 16);
+                }
+            }
+            // CID
+            String cidToken = values[index++];
+            int cid = 0;
+            if (!cidToken.isEmpty()) {
+                try {
+                    cid = Integer.parseInt(cidToken);
+                } catch (NumberFormatException e) {
+                    cid = Integer.parseInt(cidToken, 16);
+                }
+            }
+            // RSSI
+            String rssiToken = values[index++];
+            if (!rssiToken.isEmpty()) {
+                try {
+                    int rssiValue = Integer.parseInt(rssiToken);
+                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssiValue));
+                } catch (NumberFormatException e) {
+                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                }
             } else {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
             }
         }
     }
 
+    // Parse Wiâ€‘Fi access points
     if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
-
-            for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+        int wifiCount;
+        try {
+            wifiCount = Integer.parseInt(values[index++]);
+        } catch (NumberFormatException e) {
+            wifiCount = 0;
+        }
+        for (int i = 0; i < wifiCount && index < values.length; i++) {
+            // skip name
+            index++;
+            if (index >= values.length) break;
             String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+            if (index >= values.length) break;
+            String rssiToken = values[index++];
+            if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssiToken.isEmpty()) {
+                try {
+                    int rssiValue = Integer.parseInt(rssiToken);
+                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, rssiValue));
+                } catch (NumberFormatException e) {
+                    // ignore invalid RSSI
+                }
             }
         }
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
