diff --git a/tmp/6dd1ceff-569e-48f8-8742-3ac8e9268eeb_buggy.java b/tmp/2489d85f-c9c8-433a-953a-db524c055e65_fixed.java
index 47a8941..cf3b54c 100644
--- a/tmp/6dd1ceff-569e-48f8-8742-3ac8e9268eeb_buggy.java
+++ b/tmp/2489d85f-c9c8-433a-953a-db524c055e65_fixed.java
@@ -1,53 +1,58 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Remember the original simple name so we can remove it from the old container
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
+    String oldName = clazz.name();
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
+        // Move into an enclosing class
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
+        writeSummary("\tMoving inner class " + clazz.fullName()
+                     + " to class " + grandParentClass.fullName());
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
+        // Move into the package
         JPackage grandParentPackage = (JPackage) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
+        writeSummary("\tMoving inner class " + clazz.fullName()
+                     + " to package " + grandParentPackage.name());
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
-
-			for (ClassOutline classOutline : outline.getClasses()) {
-				if (classOutline.implClass == clazz) {
-					XSComponent sc = classOutline.target.getSchemaComponent();
+        // If we've hoisted to the package level, clear the STATIC bit
+        setPrivateField(
+            clazz.mods(),
+            "mods",
+            Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC)
+        );
+    }
 
+    // In all cases, clear the 'anonymous' flag on the schema component
+    for (ClassOutline co : outline.getClasses()) {
+        if (co.implClass == clazz) {
+            XSComponent sc = co.target.getSchemaComponent();
             // FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+            assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();
             setPrivateField(sc, "anonymous", Boolean.FALSE);
-
             break;
         }
     }
-		}
 
+    // If there's a name clash in the new container, rename
     if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
+        writeSummary("\tRenaming class " + clazz.fullName()
+                     + " to " + parent.name() + clazz.name());
         setPrivateField(clazz, "name", parent.name() + clazz.name());
     }
 
+    // Remove it from the old container's map
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    parentClasses.remove(oldName);
+
+    // Finally, add it to the new container and update its outer reference
     classes.put(clazz.name(), clazz);
-
-		// Finally modify the class so that it refers back the container:
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
