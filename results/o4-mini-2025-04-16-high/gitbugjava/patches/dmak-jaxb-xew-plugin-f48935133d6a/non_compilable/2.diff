diff --git a/tmp/1a830792-42f9-430e-9aa9-0ceb295153d8_buggy.java b/tmp/225f3cfb-7184-442b-96db-a4fd74e004b2_fixed.java
index 47a8941..df23838 100644
--- a/tmp/1a830792-42f9-430e-9aa9-0ceb295153d8_buggy.java
+++ b/tmp/225f3cfb-7184-442b-96db-a4fd74e004b2_fixed.java
@@ -1,53 +1,57 @@
 /**
  * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
+    // Remember the original simple name so we can remove it from the old container
+    String oldName = clazz.name();
+
     // Modify the container so it now refers the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
+        writeSummary("\tMoving inner class " + clazz.fullName()
+                   + " to class " + grandParentClass.fullName());
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
+        writeSummary("\tMoving inner class " + clazz.fullName()
+                   + " to package " + grandParentPackage.name());
         classes = getPrivateField(grandParentPackage, "classes");
 
         // In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
-
-			for (ClassOutline classOutline : outline.getClasses()) {
-				if (classOutline.implClass == clazz) {
-					XSComponent sc = classOutline.target.getSchemaComponent();
+        setPrivateField(clazz.mods(), "mods",
+            Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
+        for (ClassOutline co : outline.getClasses()) {
+            if (co.implClass == clazz) {
+                XSComponent sc = co.target.getSchemaComponent();
                 // FIXME: Inner class is always a local declaration.
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
                 break;
             }
         }
     }
 
+    // Handle any name collisions in the new container:
     if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
+        writeSummary("\tRenaming class " + clazz.fullName()
+                   + " to class " + parent.name() + clazz.name());
         setPrivateField(clazz, "name", parent.name() + clazz.name());
     }
 
+    // Remove the class from its old container so we don't generate it twice:
+    @SuppressWarnings("unchecked")
+    Map<String, JDefinedClass> oldMap = getPrivateField(parent, "classes");
+    oldMap.remove(oldName);
+
+    // Finally add it to the new container and update its outer pointer:
     classes.put(clazz.name(), clazz);
-
-		// Finally modify the class so that it refers back the container:
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
