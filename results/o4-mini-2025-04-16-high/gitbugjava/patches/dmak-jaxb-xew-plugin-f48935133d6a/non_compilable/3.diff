diff --git a/tmp/4f78d56a-55a7-4a32-8765-36d43a82ff5e_buggy.java b/tmp/6b78d25e-ecd9-4a69-bd68-2a19604ea4bd_fixed.java
index 47a8941..9471b6b 100644
--- a/tmp/4f78d56a-55a7-4a32-8765-36d43a82ff5e_buggy.java
+++ b/tmp/6b78d25e-ecd9-4a69-bd68-2a19604ea4bd_fixed.java
@@ -1,53 +1,62 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
+@SuppressWarnings("unchecked")
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Remember the original simple name for collision‐detection and removal
+    String originalName = clazz.name();
+
+    // The class we are moving out of:
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
+    // Grab the parent's "classes" map so we can remove the entry after
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+
+    // The new container one level up:
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
+        writeSummary("\tMoving inner class " + clazz.fullName()
+                   + " to class " + grandParentClass.fullName());
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
+        writeSummary("\tMoving inner class " + clazz.fullName()
+                   + " to package " + grandParentPackage.name());
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
-
-			for (ClassOutline classOutline : outline.getClasses()) {
-				if (classOutline.implClass == clazz) {
-					XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
+        // If moving to package, clear STATIC bit (top‐level classes cannot be static)
+        setPrivateField(
+            clazz.mods(),
+            "mods",
+            Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC)
+        );
 
+        // Mark the associated schema component as non‐anonymous so it becomes a named
+        // top‐level class.
+        for (ClassOutline co : outline.getClasses()) {
+            if (co.implClass == clazz) {
+                XSComponent sc = co.target.getSchemaComponent();
+                assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
                 break;
             }
         }
     }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+    // Remove from the old parent so we don't generate it twice
+    parentClasses.remove(originalName);
+
+    // Handle name collisions in the new container
+    if (classes.containsKey(originalName)) {
+        writeSummary("\tRenaming class " + clazz.fullName()
+                   + " to class " + parent.name() + originalName);
+        setPrivateField(clazz, "name", parent.name() + originalName);
     }
 
+    // Finally add to the new container and update its outer reference
     classes.put(clazz.name(), clazz);
-
-		// Finally modify the class so that it refers back the container:
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
