diff --git a/tmp/a47e6ba7-5954-4dbc-9db2-6d16852aa7bc_buggy.java b/tmp/bec860cc-bd5c-4194-bb27-66ad8f43b3e6_fixed.java
index 47a8941..09abada 100644
--- a/tmp/a47e6ba7-5954-4dbc-9db2-6d16852aa7bc_buggy.java
+++ b/tmp/bec860cc-bd5c-4194-bb27-66ad8f43b3e6_fixed.java
@@ -1,53 +1,57 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // The class we are moving and its current parent
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+
+    // We'll need this for collision‐detection in the new container
     Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
-			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
-			classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
-			JPackage grandParentPackage = (JPackage) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
-			classes = getPrivateField(grandParentPackage, "classes");
-
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
-
-			for (ClassOutline classOutline : outline.getClasses()) {
-				if (classOutline.implClass == clazz) {
-					XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+        // Moving up into an enclosing class
+        JDefinedClass enclosing = (JDefinedClass) grandParent;
+        writeSummary("\tMoving inner class " + clazz.fullName()
+                     + " to class " + enclosing.fullName());
+        classes = getPrivateField(enclosing, "classes");
+    } else {
+        // Moving up into the package
+        JPackage pkg = (JPackage) grandParent;
+        writeSummary("\tMoving inner class " + clazz.fullName()
+                     + " to package " + pkg.name());
+        classes = getPrivateField(pkg, "classes");
+
+        // Inner‐scoped element must no longer be static
+        setPrivateField(
+            clazz.mods(),
+            "mods",
+            Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC)
+        );
+
+        // Mark the schema component as non‐anonymous
+        for (ClassOutline co : outline.getClasses()) {
+            if (co.implClass == clazz) {
+                XSComponent sc = co.target.getSchemaComponent();
+                assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
                 break;
             }
         }
     }
 
+    // ---- FIX: remove the class from its old parent so it isn't generated there too ----
+    Map<String, JDefinedClass> oldClasses = getPrivateField(parent, "classes");
+    oldClasses.remove(clazz.name());
+
+    // Handle name collisions in the new container
     if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
+        writeSummary("\tRenaming class " + clazz.fullName()
+                     + " to class " + parent.name() + clazz.name());
         setPrivateField(clazz, "name", parent.name() + clazz.name());
     }
 
+    // Finally, register it in the new container and update its outer pointer
     classes.put(clazz.name(), clazz);
-
-		// Finally modify the class so that it refers back the container:
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
