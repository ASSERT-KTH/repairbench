diff --git a/tmp/e95a4711-cbe4-4e3a-96ae-b2067c22205d_buggy.java b/tmp/7adb0619-ede1-4daf-8b30-f7fca04b958e_fixed.java
index 47a8941..a97233d 100644
--- a/tmp/e95a4711-cbe4-4e3a-96ae-b2067c22205d_buggy.java
+++ b/tmp/7adb0619-ede1-4daf-8b30-f7fca04b958e_fixed.java
@@ -1,53 +1,58 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz}
+ * should be an inner class.
  */
+@SuppressWarnings("unchecked")
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // First, detach it from its current parent so we don't end up generating it twice:
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
+    Map<String, JDefinedClass> parentClasses =
+        (Map<String, JDefinedClass>) getPrivateField(parent, "classes");
+    parentClasses.remove(clazz.name());
+
+    // Now compute the new container:
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+    // This will be the map into which we re‐register the class:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
-			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
-			classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
-			JPackage grandParentPackage = (JPackage) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
-			classes = getPrivateField(grandParentPackage, "classes");
-
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
-
-			for (ClassOutline classOutline : outline.getClasses()) {
-				if (classOutline.implClass == clazz) {
-					XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+        JDefinedClass gpClass = (JDefinedClass) grandParent;
+        writeSummary("\tMoving inner class " + clazz.fullName()
+                   + " to class " + gpClass.fullName());
+        classes = (Map<String, JDefinedClass>) getPrivateField(gpClass, "classes");
+    } else {
+        JPackage gpPkg = (JPackage) grandParent;
+        writeSummary("\tMoving inner class " + clazz.fullName()
+                   + " to package " + gpPkg.name());
+        classes = (Map<String, JDefinedClass>) getPrivateField(gpPkg, "classes");
+
+        // Reset the STATIC modifier so it compiles as a top‐level class
+        int modBits = clazz.mods().getValue();
+        setPrivateField(clazz.mods(), "mods", Integer.valueOf(modBits & ~JMod.STATIC));
+
+        // If this class came from a local element declaration, mark it non‐anonymous
+        for (ClassOutline co : outline.getClasses()) {
+            if (co.implClass == clazz) {
+                XSComponent sc = co.target.getSchemaComponent();
+                // we expect this to be a local declaration
+                assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
                 break;
             }
         }
     }
 
+    // Avoid name collisions at the new level:
     if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
+        writeSummary("\tRenaming class " + clazz.fullName()
+                   + " to class " + parent.name() + clazz.name());
         setPrivateField(clazz, "name", parent.name() + clazz.name());
     }
 
+    // Put it into its new container's class‐map:
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally rewire its outer pointer:
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
