diff --git a/tmp/a311a455-192b-4af2-8551-409588149194_buggy.java b/tmp/8137c100-c31f-4b1a-9e7f-cdf24bf0eea6_fixed.java
index ad77f15..9656a19 100644
--- a/tmp/a311a455-192b-4af2-8551-409588149194_buggy.java
+++ b/tmp/8137c100-c31f-4b1a-9e7f-cdf24bf0eea6_fixed.java
@@ -1,112 +1,233 @@
 private void decodeFragment(Position position, String fragment) {
-
     int dataIndex = fragment.indexOf(':');
-        int index = 0;
+    if (dataIndex < 0) {
+        // nothing to decode
+        return;
+    }
+    String key = fragment.substring(0, dataIndex);
     String[] values;
-        if (fragment.length() == dataIndex + 1) {
-            values = new String[0];
-        } else {
+    if (fragment.length() > dataIndex + 1) {
         values = fragment.substring(dataIndex + 1).split(";");
+    } else {
+        values = new String[0];
     }
+    int index = 0;
+    switch (key) {
 
-        switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+            // valid
+            if (index < values.length) {
+                position.setValid("A".equals(values[index]));
             }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+            index++;
+            // satellites
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
             }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+            index++;
+            // latitude
+            if (index < values.length && values[index].length() > 1) {
+                String s = values[index];
+                char hemi = s.charAt(0);
+                double lat = Double.parseDouble(s.substring(1));
+                if (hemi == 'S') {
+                    lat = -lat;
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                position.setLatitude(lat);
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+            index++;
+            // longitude
+            if (index < values.length && values[index].length() > 1) {
+                String s = values[index];
+                char hemi = s.charAt(0);
+                double lon = Double.parseDouble(s.substring(1));
+                if (hemi == 'W') {
+                    lon = -lon;
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                position.setLongitude(lon);
+            }
+            index++;
+            // speed (kph to knots)
+            if (index < values.length && !values[index].isEmpty()) {
+                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
+            }
+            index++;
+            // course
+            if (index < values.length && !values[index].isEmpty()) {
+                position.setCourse(Integer.parseInt(values[index]));
+            }
+            index++;
+            // altitude
+            if (index < values.length && !values[index].isEmpty()) {
+                position.setAltitude(Integer.parseInt(values[index]));
+            }
+            index++;
+            // HDOP
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+            }
+            index++;
+            // VDOP
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
             }
             break;
+
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+            // skip registration status and signal strength
+            index += 2;
+            if (values.length - index >= 5) {
+                String mcc = values[index++];
+                String mnc = values[index++];
+                String lac = values[index++];
+                String cid = values[index++];
+                String rssi = values[index++];
+                if (!mcc.isEmpty() && !mnc.isEmpty() && !lac.isEmpty() && !cid.isEmpty() && !rssi.isEmpty()) {
+                    try {
+                        CellTower ct = CellTower.from(
+                                Integer.parseInt(mcc),
+                                Integer.parseInt(mnc),
+                                Integer.parseInt(lac, 16),
+                                Integer.parseInt(cid, 16),
+                                Integer.parseInt(rssi)
+                        );
+                        position.setNetwork(new Network(ct));
+                    } catch (NumberFormatException e) {
+                        // ignore invalid GSM fields
+                    }
+                }
+            }
             break;
+
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            // odometer
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
             }
-                if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+            index++;
+            // engine hours
+            if (index < values.length && !values[index].isEmpty()) {
+                String[] h = values[index].split("-");
+                int hours = Integer.parseInt(h[0]);
+                int mins = h.length > 1 ? Integer.parseInt(h[1]) : 0;
+                int secs = h.length > 2 ? Integer.parseInt(h[2]) : 0;
+                position.set(Position.KEY_HOURS, (hours * 3600 + mins * 60 + secs) * 1000);
             }
             break;
+
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            // main power
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            index++;
+            // battery
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            index++;
+            // ADC1
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
+            }
+            index++;
+            // ADC2
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
             }
             break;
+
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            // status
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+            }
+            index++;
+            // IO port
+            if (index < values.length && !values[index].isEmpty()) {
+                int io = Integer.parseInt(values[index], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+            index++;
+            // geofence (two parts)
+            if (index + 1 < values.length) {
+                position.set(Position.KEY_GEOFENCE,
+                        values[index] + values[index + 1]);
+            }
+            index += 2;
+            // eventStatus
             if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                position.set("eventStatus", values[index]);
+            }
+            index++;
+            // packetType
+            if (index < values.length) {
+                position.set("packetType", values[index]);
             }
             break;
+
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("eventData", values[index]);
+            }
             break;
+
         case "OBD":
-                position.set("obd", values[index++]);
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("obd", values[index]);
+            }
             break;
+
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("tagData", values[index]);
+            }
             break;
+
         case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+            // in‐wheel device sensors
+            while (index + 1 < values.length) {
+                // parse sensor index and type
+                if (values[index].isEmpty() || values[index + 1].isEmpty()) {
+                    index += 2;
+                    continue;
+                }
+                int sensorIndex;
+                int dataType;
+                try {
+                    sensorIndex = Integer.parseInt(values[index]);
+                    dataType = Integer.parseInt(values[index + 1]);
+                } catch (NumberFormatException e) {
+                    break;
+                }
+                index += 2;
                 if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    // driver unique ID
+                    if (index < values.length && !values[index].isEmpty()) {
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                    }
+                    index++;
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    // temperature sensor
+                    index++; // skip serial
+                    if (index < values.length && !values[index].isEmpty()) {
+                        position.set(Position.PREFIX_TEMP + sensorIndex,
+                                Double.parseDouble(values[index]));
+                    }
+                    index++;
                 }
             }
             break;
+
         default:
+            // unsupported fragment
             break;
     }
 }
\ No newline at end of file
