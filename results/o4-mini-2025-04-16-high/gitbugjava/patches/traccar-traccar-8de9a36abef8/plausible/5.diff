diff --git a/tmp/e532b276-5a7d-46a1-94a9-01906a40d1ae_buggy.java b/tmp/68eb3f6b-3a31-4d1c-903c-26199f91cd1e_fixed.java
index ad77f15..7488d26 100644
--- a/tmp/e532b276-5a7d-46a1-94a9-01906a40d1ae_buggy.java
+++ b/tmp/68eb3f6b-3a31-4d1c-903c-26199f91cd1e_fixed.java
@@ -1,112 +1,212 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
-        int index = 0;
-        String[] values;
-        if (fragment.length() == dataIndex + 1) {
-            values = new String[0];
-        } else {
-            values = fragment.substring(dataIndex + 1).split(";");
+    if (dataIndex == -1) {
+        return;
     }
+    String key = fragment.substring(0, dataIndex);
+    String data = fragment.length() <= dataIndex + 1 ? "" : fragment.substring(dataIndex + 1);
+    String[] values = data.isEmpty() ? new String[0] : data.split(";");
+    int idx = 0;
+
+    switch (key) {
 
-        switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+            // Skip GS02 time field (HHMMSS)
+            if (idx < values.length && values[idx].matches("\\d{6}")) {
+                idx++;
             }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+            // Validity
+            if (idx < values.length) {
+                position.setValid("A".equals(values[idx]));
+                idx++;
             }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+            // Satellites (only if purely numeric)
+            if (idx < values.length && values[idx].matches("\\d+")) {
+                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[idx]));
+                idx++;
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+            // Latitude
+            if (idx < values.length
+                    && values[idx].length() > 1
+                    && (values[idx].charAt(0) == 'N' || values[idx].charAt(0) == 'S')) {
+                char hemi = values[idx].charAt(0);
+                String val = values[idx].substring(1);
+                if (!val.isEmpty()) {
+                    double lat = Double.parseDouble(val);
+                    if (hemi == 'S') {
+                        lat = -lat;
                     }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    position.setLatitude(lat);
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                idx++;
+            }
+            // Longitude
+            if (idx < values.length
+                    && values[idx].length() > 1
+                    && (values[idx].charAt(0) == 'E' || values[idx].charAt(0) == 'W')) {
+                char hemi = values[idx].charAt(0);
+                String val = values[idx].substring(1);
+                if (!val.isEmpty()) {
+                    double lon = Double.parseDouble(val);
+                    if (hemi == 'W') {
+                        lon = -lon;
+                    }
+                    position.setLongitude(lon);
+                }
+                idx++;
+            }
+            // Speed (convert Kph to knots)
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.setSpeed(UnitsConverter.knotsFromKph(
+                        Integer.parseInt(values[idx])));
+            }
+            idx++;
+            // Course
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.setCourse(Integer.parseInt(values[idx]));
+            }
+            idx++;
+            // Altitude
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.setAltitude(Integer.parseInt(values[idx]));
+            }
+            idx++;
+            // HDOP
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.KEY_HDOP, Double.parseDouble(values[idx]));
+            }
+            idx++;
+            // VDOP
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.KEY_VDOP, Double.parseDouble(values[idx]));
             }
             break;
+
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+            // Skip registration status & signal strength
+            idx += 2;
+            if (values.length > idx + 4) {
+                int mcc = Integer.parseInt(values[idx++]);
+                int mnc = Integer.parseInt(values[idx++]);
+                int lac = Integer.parseInt(values[idx++], 16);
+                int cid = Integer.parseInt(values[idx++], 16);
+                int rssi = Integer.parseInt(values[idx++]);
+                position.setNetwork(new Network(
+                        CellTower.from(mcc, mnc, lac, cid, rssi)));
+            }
             break;
+
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
-                }
-                if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.KEY_ODOMETER, Long.parseLong(values[idx]));
+            }
+            idx++;
+            if (idx < values.length && !values[idx].isEmpty()) {
+                String[] hours = values[idx].split("-");
+                int total = 0;
+                if (hours.length > 0 && !hours[0].isEmpty()) {
+                    total += Integer.parseInt(hours[0]) * 3600;
+                }
+                if (hours.length > 1 && !hours[1].isEmpty()) {
+                    total += Integer.parseInt(hours[1]) * 60;
+                }
+                if (hours.length > 2 && !hours[2].isEmpty()) {
+                    total += Integer.parseInt(hours[2]);
+                }
+                position.set(Position.KEY_HOURS, total * 1000);
             }
             break;
+
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.KEY_POWER, Double.parseDouble(values[idx]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            idx++;
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.KEY_BATTERY, Double.parseDouble(values[idx]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            idx++;
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1,
+                        Double.parseDouble(values[idx]));
+            }
+            idx++;
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 2,
+                        Double.parseDouble(values[idx]));
             }
             break;
+
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (idx < values.length && !values[idx].isEmpty()) {
+                position.set(Position.KEY_STATUS,
+                        Integer.parseInt(values[idx], 16));
+            }
+            idx++;
+            if (idx < values.length && !values[idx].isEmpty()) {
+                int io = Integer.parseInt(values[idx], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
-                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
-                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
-                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
-                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
-                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
-                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
-                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
-                }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                for (int i = 1; i <= 4; i++) {
+                    position.set(Position.PREFIX_IN + i, BitUtil.check(io, i));
+                }
+                for (int i = 1; i <= 3; i++) {
+                    position.set(Position.PREFIX_OUT + i, BitUtil.check(io, i + 4));
+                }
+            }
+            idx++;
+            if (values.length > idx + 1) {
+                position.set(Position.KEY_GEOFENCE,
+                        values[idx] + values[idx + 1]);
+            }
+            idx += 2;
+            if (idx < values.length) {
+                position.set("eventStatus", values[idx]);
+            }
+            idx++;
+            if (idx < values.length) {
+                position.set("packetType", values[idx]);
             }
             break;
+
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (idx < values.length) {
+                position.set("eventData", values[idx]);
+            }
             break;
+
         case "OBD":
-                position.set("obd", values[index++]);
+            if (idx < values.length) {
+                position.set("obd", values[idx]);
+            }
             break;
+
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (idx < values.length) {
+                position.set("tagData", values[idx]);
+            }
             break;
+
         case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+            while (idx + 1 < values.length) {
+                int sensorIndex = Integer.parseInt(values[idx++]);
+                int dataType = Integer.parseInt(values[idx++]);
                 if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    if (idx < values.length) {
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID,
+                                values[idx++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    idx++; // skip serial
+                    if (idx < values.length) {
+                        position.set(Position.PREFIX_TEMP + sensorIndex,
+                                Double.parseDouble(values[idx++]));
+                    }
                 }
             }
             break;
+
         default:
             break;
     }
 }
\ No newline at end of file
