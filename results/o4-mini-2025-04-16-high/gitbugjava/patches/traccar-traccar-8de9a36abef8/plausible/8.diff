diff --git a/tmp/57b92d8a-f713-437b-b62e-91f5ee0cb9ed_buggy.java b/tmp/2c122585-a424-4636-81b1-5a19c3b14e16_fixed.java
index ad77f15..f3fdd50 100644
--- a/tmp/57b92d8a-f713-437b-b62e-91f5ee0cb9ed_buggy.java
+++ b/tmp/2c122585-a424-4636-81b1-5a19c3b14e16_fixed.java
@@ -1,112 +1,216 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
+    // ignore fragments without data
+    if (dataIndex < 0) {
+        return;
+    }
+
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
-        switch (fragment.substring(0, dataIndex)) {
+    String key = fragment.substring(0, dataIndex);
+    switch (key) {
         case "GPS":
             position.setValid(values[index++].equals("A"));
             position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+            // latitude
+            if (index < values.length && values[index].length() > 1) {
+                double lat = Double.parseDouble(values[index].substring(1));
+                if (values[index].charAt(0) == 'S') {
+                    lat = -lat;
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+                position.setLatitude(lat);
             }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+            index++;
+            // longitude
+            if (index < values.length && values[index].length() > 1) {
+                double lon = Double.parseDouble(values[index].substring(1));
+                if (values[index].charAt(0) == 'W') {
+                    lon = -lon;
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
+                position.setLongitude(lon);
+            }
+            index++;
+            // speed (kph to knots)
+            if (index < values.length && !values[index].isEmpty()) {
+                position.setSpeed(UnitsConverter.knotsFromKph(
+                    Integer.parseInt(values[index]))
+                );
+            }
+            index++;
+            // course
+            if (index < values.length && !values[index].isEmpty()) {
+                position.setCourse(Integer.parseInt(values[index]));
+            }
+            index++;
+            // altitude
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                String alt = values[index];
+                if (!alt.isEmpty()) {
+                    position.setAltitude(Integer.parseInt(alt));
                 }
+            }
+            index++;
+            // HDOP
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                String hdop = values[index];
+                if (!hdop.isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(hdop));
+                }
             }
+            index++;
+            // VDOP
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                String vdop = values[index];
+                if (!vdop.isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(vdop));
+                }
             }
             break;
+
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
+            if (index + 4 < values.length) {
                 position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                    Integer.parseInt(values[index++]),
+                    Integer.parseInt(values[index++]),
+                    Integer.parseInt(values[index++], 16),
+                    Integer.parseInt(values[index++], 16),
+                    Integer.parseInt(values[index++])
+                )));
+            }
             break;
+
         case "COT":
+            // odometer
             if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                String odo = values[index++];
+                if (!odo.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odo));
                 }
+            }
+            // hours
             if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                String hoursVal = values[index++];
+                if (!hoursVal.isEmpty()) {
+                    String[] h = hoursVal.split("-");
+                    int total = Integer.parseInt(h[0]) * 3600
+                              + (h.length > 1 ? Integer.parseInt(h[1]) * 60 : 0)
+                              + (h.length > 2 ? Integer.parseInt(h[2]) : 0);
+                    position.set(Position.KEY_HOURS, total * 1000);
+                }
             }
             break;
+
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
             }
             break;
+
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+            }
+            index++;
+            // IO bits
+            if (index < values.length) {
+                String ioVal = values[index++];
+                if (!ioVal.isEmpty()) {
+                    int io = Integer.parseInt(ioVal, 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
+            }
+            // geofence
+            if (index + 1 < values.length) {
+                String gf1 = values[index++];
+                String gf2 = values[index++];
+                if (!gf1.isEmpty() || !gf2.isEmpty()) {
+                    position.set(Position.KEY_GEOFENCE, gf1 + gf2);
+                }
+            }
+            // event status
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("eventStatus", values[index]);
+            }
+            index++;
+            // packet type
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("packetType", values[index]);
             }
             break;
+
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (index < values.length) {
+                position.set("eventData", values[index]);
+            }
             break;
+
         case "OBD":
-                position.set("obd", values[index++]);
+            if (index < values.length) {
+                position.set("obd", values[index]);
+            }
             break;
+
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (index < values.length) {
+                position.set("tagData", values[index]);
+            }
             break;
+
         case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
+            while (index + 1 < values.length) {
+                String idxVal = values[index++];
+                String typeVal = values[index++];
+                if (idxVal.isEmpty() || typeVal.isEmpty()) {
+                    continue;
+                }
+                int sensorIndex = Integer.parseInt(idxVal);
+                int dataType = Integer.parseInt(typeVal);
+                if (dataType == 0 && index < values.length) {
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    // skip serial number
+                    if (index < values.length) {
+                        index++;
+                    }
+                    if (index < values.length && !values[index].isEmpty()) {
+                        position.set(Position.PREFIX_TEMP + sensorIndex,
+                            Double.parseDouble(values[index]));
+                    }
+                    index++;
                 }
             }
             break;
+
         default:
+            // unknown fragment type
             break;
     }
 }
\ No newline at end of file
