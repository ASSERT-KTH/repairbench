diff --git a/tmp/e02ab7f6-3d6f-44c9-a8ce-4fa87b9941c9_buggy.java b/tmp/f34ac3e6-a6c9-4283-bbb8-834df275da4a_fixed.java
index e883360..a21bec3 100644
--- a/tmp/e02ab7f6-3d6f-44c9-a8ce-4fa87b9941c9_buggy.java
+++ b/tmp/f34ac3e6-a6c9-4283-bbb8-834df275da4a_fixed.java
@@ -1,196 +1,361 @@
 private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
+
     Position position = new Position(getProtocolName());
 
-        int index = 0;
     String[] values = sentence.split(",");
+    int index = 0;
 
-        index += 1; // header
-        index += 1; // protocol version
+    // skip header and protocol version
+    index++; // header
+    index++; // protocol version
 
+    // device session and id
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     position.setDeviceId(deviceSession.getDeviceId());
 
-        index += 1; // device name
-        index += 1; // report type
-        index += 1; // canbus state
+    // skip device name, report type, canbus state
+    index++; // device name
+    index++; // report type
+    index++; // canbus state
+
+    // report mask
     long reportMask = Long.parseLong(values[index++], 16);
+
+    // extended mask (always present as next token)
     long reportMaskExt = 0;
+    if (index < values.length) {
+        String extMask = values[index++];
+        if (!extMask.isEmpty()) {
+            reportMaskExt = Long.parseLong(extMask, 16);
+        }
+    }
 
+    // parse fields according to reportMask bits
+
+    // bit 0: VIN
     if (BitUtil.check(reportMask, 0)) {
-            position.set(Position.KEY_VIN, values[index++]);
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.KEY_VIN, s);
         }
+    }
+
+    // bit 1: Ignition
     if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.KEY_IGNITION, Integer.parseInt(s) > 0);
         }
+    }
+
+    // bit 2: OBD Odometer
     if (BitUtil.check(reportMask, 2)) {
-            position.set(Position.KEY_OBD_ODOMETER, values[index++]);
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.KEY_OBD_ODOMETER, s);
         }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
     }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
+
+    // bit 3: Fuel used
+    if (BitUtil.check(reportMask, 3)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.KEY_FUEL_USED, Double.parseDouble(s));
         }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
     }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
+
+    // bit 4: OBD Speed
+    if (BitUtil.check(reportMask, 4)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.KEY_OBD_SPEED,
+                UnitsConverter.knotsFromKph(Integer.parseInt(s)));
         }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
     }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
+
+    // bit 5: RPM
+    if (BitUtil.check(reportMask, 5)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.KEY_RPM, Integer.parseInt(s));
         }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
-            position.set("range", Long.parseLong(values[index - 1]) * 100);
     }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
+
+    // bit 6: Coolant temperature
+    if (BitUtil.check(reportMask, 6)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(s));
         }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
     }
+
+    // bit 7: Fuel consumption
+    if (BitUtil.check(reportMask, 7)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            // leading character is a unit prefix
+            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(s.substring(1)));
+        }
+    }
+
+    // bit 8: Fuel level
+    if (BitUtil.check(reportMask, 8)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(s.substring(1)));
+        }
+    }
+
+    // bit 9: Range
+    if (BitUtil.check(reportMask, 9)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("range", Long.parseLong(s) * 100);
+        }
+    }
+
+    // bit 10: Throttle
+    if (BitUtil.check(reportMask, 10)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.KEY_THROTTLE, Integer.parseInt(s));
+        }
+    }
+
+    // bit 11: Hours
+    if (BitUtil.check(reportMask, 11)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.KEY_HOURS,
+                UnitsConverter.msFromHours(Double.parseDouble(s)));
+        }
+    }
+
+    // bit 12: Driving time
     if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(s));
         }
+    }
+
+    // bit 13: Idle hours
     if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("idleHours", Double.parseDouble(s));
         }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
-            position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
     }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
+
+    // bit 14: Idle fuel consumption
+    if (BitUtil.check(reportMask, 14)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("idleFuelConsumption", Double.parseDouble(s));
         }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
-            position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
     }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
-            position.set("indicators", Integer.parseInt(values[index - 1], 16));
+
+    // bit 15: Axle weight
+    if (BitUtil.check(reportMask, 15)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(s));
         }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
-            position.set("lights", Integer.parseInt(values[index - 1], 16));
     }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
-            position.set("doors", Integer.parseInt(values[index - 1], 16));
+
+    // bit 16: Tachograph info
+    if (BitUtil.check(reportMask, 16)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("tachographInfo", Integer.parseInt(s, 16));
         }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
-            position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
     }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
-            position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
+
+    // bit 17: Indicators
+    if (BitUtil.check(reportMask, 17)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("indicators", Integer.parseInt(s, 16));
         }
-        if (BitUtil.check(reportMask, 29)) {
-            reportMaskExt = Long.parseLong(values[index++], 16);
     }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
+
+    // bit 18: Lights
+    if (BitUtil.check(reportMask, 18)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("lights", Integer.parseInt(s, 16));
         }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
-            position.set("axleWeight1", Integer.parseInt(values[index - 1]));
     }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
-            position.set("axleWeight3", Integer.parseInt(values[index - 1]));
+
+    // bit 19: Doors
+    if (BitUtil.check(reportMask, 19)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("doors", Integer.parseInt(s, 16));
+        }
+    }
+
+    // bit 20: Vehicle overspeed
+    if (BitUtil.check(reportMask, 20)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("vehicleOverspeed", Double.parseDouble(s));
+        }
+    }
+
+    // bit 21: Engine overspeed
+    if (BitUtil.check(reportMask, 21)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("engineOverspeed", Double.parseDouble(s));
+        }
+    }
+
+    // parse extended mask fields
+    if (BitUtil.check(reportMaskExt, 0)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("adBlueLevel", Integer.parseInt(s));
+        }
+    }
+    if (BitUtil.check(reportMaskExt, 1)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("axleWeight1", Integer.parseInt(s));
+        }
+    }
+    if (BitUtil.check(reportMaskExt, 2)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("axleWeight3", Integer.parseInt(s));
+        }
+    }
+    if (BitUtil.check(reportMaskExt, 3)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("axleWeight4", Integer.parseInt(s));
         }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
-            position.set("axleWeight4", Integer.parseInt(values[index - 1]));
     }
     if (BitUtil.check(reportMaskExt, 4)) {
-            index += 1; // tachograph overspeed
+        index++; // tachograph overspeed
     }
     if (BitUtil.check(reportMaskExt, 5)) {
-            index += 1; // tachograph motion
+        index++; // tachograph motion
     }
     if (BitUtil.check(reportMaskExt, 6)) {
-            index += 1; // tachograph direction
+        index++; // tachograph direction
+    }
+    if (BitUtil.check(reportMaskExt, 7)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(s) * 0.001);
         }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
-            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
     }
     if (BitUtil.check(reportMaskExt, 8)) {
-            index += 1; // pedal breaking factor
+        index++; // pedal breaking factor
     }
     if (BitUtil.check(reportMaskExt, 9)) {
-            index += 1; // engine breaking factor
+        index++; // engine breaking factor
     }
     if (BitUtil.check(reportMaskExt, 10)) {
-            index += 1; // total accelerator kick-downs
+        index++; // total accelerator kick‑downs
     }
     if (BitUtil.check(reportMaskExt, 11)) {
-            index += 1; // total effective engine speed
+        index++; // total effective engine speed
     }
     if (BitUtil.check(reportMaskExt, 12)) {
-            index += 1; // total cruise control time
+        index++; // total cruise control time
     }
     if (BitUtil.check(reportMaskExt, 13)) {
-            index += 1; // total accelerator kick-down time
+        index++; // total accelerator kick‑down time
     }
     if (BitUtil.check(reportMaskExt, 14)) {
-            index += 1; // total brake application
+        index++; // total brake application
     }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
-            position.set("driver1Card", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 15)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("driver1Card", s);
         }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
-            position.set("driver2Card", values[index - 1]);
     }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
-            position.set("driver1Name", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 16)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("driver2Card", s);
         }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
-            position.set("driver2Name", values[index - 1]);
     }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
-            position.set("registration", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 17)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("driver1Name", s);
+        }
+    }
+    if (BitUtil.check(reportMaskExt, 18)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("driver2Name", s);
+        }
+    }
+    if (BitUtil.check(reportMaskExt, 19)) {
+        String s = values[index++];
+        if (!s.isEmpty()) {
+            position.set("registration", s);
+        }
     }
     if (BitUtil.check(reportMaskExt, 20)) {
-            index += 1; // expansion information
+        index++; // expansion information
     }
     if (BitUtil.check(reportMaskExt, 21)) {
-            index += 1; // rapid brakings
+        index++; // rapid brakings
     }
     if (BitUtil.check(reportMaskExt, 22)) {
-            index += 1; // rapid accelerations
+        index++; // rapid accelerations
     }
     if (BitUtil.check(reportMaskExt, 23)) {
-            index += 1; // engine torque
+        index++; // engine torque
     }
 
+    // prepare date parser
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
+    // bit 30: GPS data
     if (BitUtil.check(reportMask, 30)) {
-            while (values[index].isEmpty()) {
-                index += 1;
+        // skip empty tokens until valid flag
+        while (index < values.length && values[index].isEmpty()) {
+            index++;
         }
+        if (index < values.length) {
             position.setValid(Integer.parseInt(values[index++]) > 0);
-            if (!values[index].isEmpty()) {
+        }
+        if (index < values.length && !values[index].isEmpty()) {
             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
             position.setCourse(Integer.parseInt(values[index++]));
             position.setAltitude(Double.parseDouble(values[index++]));
             position.setLongitude(Double.parseDouble(values[index++]));
             position.setLatitude(Double.parseDouble(values[index++]));
             position.setTime(dateFormat.parse(values[index++]));
         } else {
-                index += 6; // no location
+            // no fix
+            index += 6;
             getLastLocation(position, null);
         }
     } else {
         getLastLocation(position, null);
     }
 
+    // bit 31: cell info
     if (BitUtil.check(reportMask, 31)) {
-            index += 4; // cell
-            index += 1; // reserved
+        index += 4; // cell fields
+        index++;   // reserved
     }
 
+    // final: device time
     if (ignoreFixTime) {
         position.setTime(dateFormat.parse(values[index]));
     } else {
         position.setDeviceTime(dateFormat.parse(values[index]));
     }
 
     return position;
 }
\ No newline at end of file
