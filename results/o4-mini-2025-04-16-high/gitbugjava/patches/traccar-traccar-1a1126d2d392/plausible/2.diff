diff --git a/tmp/471ef9cc-cafb-4431-88fd-07267142b7ce_buggy.java b/tmp/57bb6718-0e52-4d0e-83b0-938e94635e67_fixed.java
index 2a0dceb..147ac44 100644
--- a/tmp/471ef9cc-cafb-4431-88fd-07267142b7ce_buggy.java
+++ b/tmp/57bb6718-0e52-4d0e-83b0-938e94635e67_fixed.java
@@ -1,68 +1,123 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
     String type = values[index++].substring(5);
-
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
+    // firmware version
+    if (index < values.length) {
         position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
+    }
+    // skip model
+    index++;
 
+    // parse up to 7 cell towers
     Network network = new Network();
-
-        for (int i = 0; i < 7; i++) {
+    for (int i = 0; i < 7 && index + 5 < values.length; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
-            index += 1; // timing advance
+        index++; // timing advance
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
-
     position.setNetwork(network);
 
-        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
-        position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
-        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
-        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+    // battery
+    if (index < values.length && !values[index].isEmpty()) {
+        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
+    }
+    index++;
+
+    // archive flag
+    if (index < values.length) {
+        position.set(Position.KEY_ARCHIVE, values[index].equals("0") ? true : null);
+    }
+    index++;
+
+    // message index
+    if (index < values.length && !values[index].isEmpty()) {
+        position.set(Position.KEY_INDEX, Integer.parseInt(values[index]));
+    }
+    index++;
+
+    // status / input
+    if (index < values.length && !values[index].isEmpty()) {
+        position.set(Position.KEY_STATUS, Integer.parseInt(values[index]));
+    }
+    index++;
+
+    // skip collaborative network if present (length 3)
+    if (index < values.length && values[index].length() == 3) {
+        index++;
+    }
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+    // if no date/time fields, return with just attributes
+    if (index + 1 >= values.length || values[index].isEmpty() || values[index + 1].isEmpty()) {
+        return position;
     }
 
+    // parse date and time
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+    position.setTime(dateFormat.parse(values[index] + values[index + 1]));
+    index += 2;
 
-        position.setLatitude(Double.parseDouble(values[index++]));
-        position.setLongitude(Double.parseDouble(values[index++]));
-        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-        position.setCourse(Double.parseDouble(values[index++]));
+    // latitude
+    if (index < values.length && !values[index].isEmpty()) {
+        position.setLatitude(Double.parseDouble(values[index]));
+    }
+    index++;
 
-        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+    // longitude
+    if (index < values.length && !values[index].isEmpty()) {
+        position.setLongitude(Double.parseDouble(values[index]));
+    }
+    index++;
 
-        position.setValid(values[index++].equals("1"));
+    // speed
+    if (index < values.length && !values[index].isEmpty()) {
+        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));
+    }
+    index++;
+
+    // course
+    if (index < values.length && !values[index].isEmpty()) {
+        position.setCourse(Double.parseDouble(values[index]));
+    }
+    index++;
+
+    // satellites
+    if (index < values.length && !values[index].isEmpty()) {
+        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+    }
+    index++;
+
+    // valid
+    if (index < values.length) {
+        position.setValid(values[index].equals("1"));
+    }
 
     return position;
 }
\ No newline at end of file
