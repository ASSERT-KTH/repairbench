diff --git a/tmp/1eb83283-5ae7-47ae-8cd2-01429db8d488_buggy.java b/tmp/42ed7fa1-826e-4fe5-8f83-70b4b16c9775_fixed.java
index 2a0dceb..14b2236 100644
--- a/tmp/1eb83283-5ae7-47ae-8cd2-01429db8d488_buggy.java
+++ b/tmp/42ed7fa1-826e-4fe5-8f83-70b4b16c9775_fixed.java
@@ -1,68 +1,77 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
+
     int index = 0;
 
+    // Type: STT or ALT
     String type = values[index++].substring(5);
-
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
+    // Device session
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
+    // Initialize position
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
+    // Firmware version and model (skip)
     position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
+    index++;
 
+    // Cell‐tower network
     Network network = new Network();
-
     for (int i = 0; i < 7; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
-            index += 1; // timing advance
+        index++; // timing advance
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
-
     position.setNetwork(network);
 
+    // Battery, archive flag, index and status
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+    // Skip collaborative network code if present (3‐char field)
+    if (index < values.length && values[index].length() == 3) {
+        index++;
     }
 
-        DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
-        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+    // Only parse date/time and GPS fields if both are non‐empty
+    if (index + 1 < values.length
+            && !values[index].isEmpty()
+            && !values[index + 1].isEmpty()) {
+        DateFormat df = new SimpleDateFormat("yyyyMMddHH:mm:ss");
+        df.setTimeZone(TimeZone.getTimeZone("UTC"));
+        position.setTime(df.parse(values[index++] + values[index++]));
 
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
 
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-
         position.setValid(values[index++].equals("1"));
+    }
 
     return position;
 }
\ No newline at end of file
