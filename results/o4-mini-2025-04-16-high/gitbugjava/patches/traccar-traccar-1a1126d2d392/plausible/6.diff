diff --git a/tmp/5b06923e-a597-4002-97c9-320685ac7f5b_buggy.java b/tmp/2de0ca93-2024-4e9e-86ab-4ce6a84c5c04_fixed.java
index 2a0dceb..5b4a120 100644
--- a/tmp/5b06923e-a597-4002-97c9-320685ac7f5b_buggy.java
+++ b/tmp/2de0ca93-2024-4e9e-86ab-4ce6a84c5c04_fixed.java
@@ -1,68 +1,76 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
+    // values[0] is like "ST410STT" or "ST410ALT"
     String type = values[index++].substring(5);
-
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
+    // firmware version and skip model
     position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
+    index++;
 
+    // read 7 cell towers
     Network network = new Network();
-
     for (int i = 0; i < 7; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
-            int lac, rssi;
+        int lac;
+        int rssi;
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
-            index += 1; // timing advance
+        index++; // timing advance
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
-
     position.setNetwork(network);
 
+    // battery, archive flag, index, status
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+    // skip collaborative network tag if present (3 chars)
+    if (index < values.length && values[index].length() == 3) {
+        index++;
     }
 
+    // if there's no date (empty or not an 8‐digit yyyyMMdd), bail out
+    if (index + 1 >= values.length || values[index].length() != 8) {
+        return position;
+    }
+
+    // parse date & time
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
+    // position fields
     position.setLatitude(Double.parseDouble(values[index++]));
     position.setLongitude(Double.parseDouble(values[index++]));
     position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
     position.setCourse(Double.parseDouble(values[index++]));
-
     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-
     position.setValid(values[index++].equals("1"));
 
     return position;
 }
\ No newline at end of file
