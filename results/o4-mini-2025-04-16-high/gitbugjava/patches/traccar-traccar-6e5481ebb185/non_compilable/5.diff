diff --git a/tmp/220bb872-82c1-480b-bca1-cf774643f9f3_buggy.java b/tmp/eb6b8eaf-3244-4f51-becc-2f7569ba4ea4_fixed.java
index ee599aa..350fd5d 100644
--- a/tmp/220bb872-82c1-480b-bca1-cf774643f9f3_buggy.java
+++ b/tmp/eb6b8eaf-3244-4f51-becc-2f7569ba4ea4_fixed.java
@@ -1,50 +1,51 @@
 private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
     int length = 0;
+    // mark the start of the LBS‑data block (immediately after the length byte)
+    int dataStartIndex = buf.readerIndex();
     if (hasLength) {
         length = buf.readUnsignedByte();
         if (length == 0) {
-                boolean zeroedData = true;
-                for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
-                    if (buf.getByte(i) != 0) {
-                        zeroedData = false;
-                        break;
-                    }
-                }
-                if (zeroedData) {
-                    buf.skipBytes(Math.min(buf.readableBytes(), 45));
-                }
+            // no LBS data in this packet
             return false;
         }
+        // reset our data‑start to right after the length field
+        dataStartIndex = buf.readerIndex();
     }
 
+    // parse one LBS record
     int mcc = buf.readUnsignedShort();
     int mnc;
     if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
         mnc = buf.readUnsignedShort();
     } else {
         mnc = buf.readUnsignedByte();
     }
     int lac;
     if (type == MSG_LBS_ALARM) {
         lac = buf.readInt();
     } else {
         lac = buf.readUnsignedShort();
     }
     long cid;
     if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
         cid = buf.readLong();
     } else if (type == MSG_GPS_LBS_6) {
         cid = buf.readUnsignedInt();
     } else {
         cid = buf.readUnsignedMedium();
     }
 
-        position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
+    // set the cell‐tower network info
+    position.setNetwork(new Network(
+        CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
 
-        if (length > 9) {
-            buf.skipBytes(length - 9);
+    // skip any remaining LBS bytes (in case there are multiple towers)
+    if (hasLength) {
+        int readBytes = buf.readerIndex() - dataStartIndex;
+        if (length > readBytes) {
+            buf.skipBytes(length - readBytes);
+        }
     }
-
     return true;
 }
\ No newline at end of file
