diff --git a/tmp/04c41add-a3db-4c6f-b738-ae526b488909_buggy.java b/tmp/6625a34e-5ce4-42d9-94cf-10d8c7efa433_fixed.java
index 1098336..fb7905f 100644
--- a/tmp/04c41add-a3db-4c6f-b738-ae526b488909_buggy.java
+++ b/tmp/6625a34e-5ce4-42d9-94cf-10d8c7efa433_fixed.java
@@ -1,16 +1,27 @@
 @Override
 protected String doFormat(final String code, final LineEnding ending) throws IOException {
-
+    // parse the incoming CSS
     final var source = new InputSource(new StringReader(code));
     final var parser = new CSSOMParser(new SACParserCSS3());
     final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
-        var formattedCode = sheet.getCssText(this.formatter);
 
-        // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
+    // produce the formatted CSS
+    String formattedCode = sheet.getCssText(this.formatter);
+
+    // Patch converted 'tab' back to '\9' for the IE7/8/9 hack (cssparser turns "\9" into a tab char)
     formattedCode = formattedCode.replace("\t;", "\\9;");
 
-        if (code.equals(formattedCode)) {
+    // Normalize all CRLF / CR → LF so we can re‑inject the requested ending
+    formattedCode = formattedCode.replace("\r\n", "\n").replace("\r", "\n");
+
+    // Re‑apply the user‑requested line ending
+    if (ending != null) {
+        formattedCode = formattedCode.replace("\n", ending.getChars());
+    }
+
+    // if nothing really changed, signal "no change"
+    if (formattedCode.equals(code)) {
         return null;
     }
     return formattedCode;
 }
\ No newline at end of file
