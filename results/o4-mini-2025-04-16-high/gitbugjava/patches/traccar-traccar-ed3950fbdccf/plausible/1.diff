diff --git a/tmp/8b18aad6-4740-4793-9a6b-050b43fe1ae3_buggy.java b/tmp/ab491a50-c43e-427b-a009-912e0e90b8c1_fixed.java
index abd3198..4f988e7 100644
--- a/tmp/8b18aad6-4740-4793-9a6b-050b43fe1ae3_buggy.java
+++ b/tmp/ab491a50-c43e-427b-a009-912e0e90b8c1_fixed.java
@@ -1,28 +1,53 @@
 @Override
 protected Object encodeCommand(Command command) {
 
     ByteBuf content = Unpooled.buffer();
 
     switch (command.getType()) {
         case Command.TYPE_POSITION_SINGLE:
-                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_REQUEST, content);
+            return encodeContent(
+                command.getDeviceId(),
+                GatorProtocolDecoder.MSG_POSITION_REQUEST,
+                content
+            );
         case Command.TYPE_ENGINE_STOP:
-                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_CLOSE_THE_OIL_DUCT, content);
+            return encodeContent(
+                command.getDeviceId(),
+                GatorProtocolDecoder.MSG_CLOSE_THE_OIL_DUCT,
+                content
+            );
         case Command.TYPE_ENGINE_RESUME:
-                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_RESTORES_THE_OIL_DUCT, content);
+            return encodeContent(
+                command.getDeviceId(),
+                GatorProtocolDecoder.MSG_RESTORES_THE_OIL_DUCT,
+                content
+            );
         case Command.TYPE_SET_SPEED_LIMIT:
             content.writeByte(command.getInteger(Command.KEY_DATA));
-                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_SPEED_LIMIT, content);
+            return encodeContent(
+                command.getDeviceId(),
+                GatorProtocolDecoder.MSG_SET_SPEED_LIMIT,
+                content
+            );
         case Command.TYPE_SET_ODOMETER:
             content.writeShort(command.getInteger(Command.KEY_DATA));
-                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_ODOMETER, content);
+            return encodeContent(
+                command.getDeviceId(),
+                GatorProtocolDecoder.MSG_SET_ODOMETER,
+                content
+            );
         case Command.TYPE_POSITION_PERIODIC:
             String[] data = command.getString(Command.KEY_FREQUENCY).split(";");
-                content.writeShort(Integer.valueOf(data[0]));
-                content.writeShort(Integer.valueOf(data[1]));
-                content.writeShort(Integer.valueOf(data[2]));
-                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_PERIODIC, content);
+            content.writeShort(Integer.parseInt(data[0]));
+            content.writeShort(Integer.parseInt(data[1]));
+            // write the third interval as a single byte, not a short
+            content.writeByte(Integer.parseInt(data[2]));
+            return encodeContent(
+                command.getDeviceId(),
+                GatorProtocolDecoder.MSG_POSITION_PERIODIC,
+                content
+            );
         default:
             return null;
     }
 }
\ No newline at end of file
