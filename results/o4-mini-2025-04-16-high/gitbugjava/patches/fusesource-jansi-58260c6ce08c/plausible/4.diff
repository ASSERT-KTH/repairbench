diff --git a/tmp/0cf87d6e-ea53-458f-a5f3-8fdfd25ff113_buggy.java b/tmp/af99ceb5-5a58-4a64-9f0b-013c1a89292e_fixed.java
index 712f277..95cf3a8 100644
--- a/tmp/0cf87d6e-ea53-458f-a5f3-8fdfd25ff113_buggy.java
+++ b/tmp/af99ceb5-5a58-4a64-9f0b-013c1a89292e_fixed.java
@@ -1,48 +1,65 @@
 /**
  * Renders the given input to the target Appendable.
  *
  * @param input
  *            source to render
  * @param target
  *            render onto this target Appendable.
  * @return the given Appendable
  * @throws IOException
  *             If an I/O error occurs
  */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
-        int j, k;
 
     while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
+        // look ahead for any END_TOKEN before the next BEGIN_TOKEN
+        int nextEnd = input.indexOf(END_TOKEN, i);
+        int j = input.indexOf(BEGIN_TOKEN, i);
+        if (nextEnd != -1 && (j == -1 || nextEnd < j)) {
+            throw new IllegalArgumentException("Invalid end token before start token");
+        }
+
+        // no more BEGIN_TOKEN
         if (j == -1) {
             if (i == 0) {
                 target.append(input);
-                    return target;
-                }
+            } else {
                 target.append(input.substring(i));
+            }
             return target;
         }
+
+        // append text up to BEGIN_TOKEN
         target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
 
+        // find matching END_TOKEN
+        int k = input.indexOf(END_TOKEN, j);
+        // overlapping END_TOKEN (e.g. "@|@")
+        if (k != -1 && k < j + BEGIN_TOKEN_LEN) {
+            throw new IllegalArgumentException("Invalid end token before start token");
+        }
+        // no closing token at all
         if (k == -1) {
             target.append(input);
             return target;
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+        // extract spec between BEGIN_TOKEN and END_TOKEN
+        int specStart = j + BEGIN_TOKEN_LEN;
+        String spec = input.substring(specStart, k);
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
+        if (items.length < 2) {
+            // not a valid "style<sep>text" spec
             target.append(input);
             return target;
         }
+
+        // render inner text with the given style codes
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
 
+        // advance past the END_TOKEN
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
