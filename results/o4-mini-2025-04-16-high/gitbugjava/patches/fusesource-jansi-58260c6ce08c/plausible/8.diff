diff --git a/tmp/be5342ef-0292-4520-8649-4d85dadc1dba_buggy.java b/tmp/9efe3612-4c6e-463d-afc2-bf8c0cb8acaa_fixed.java
index 712f277..aa0807e 100644
--- a/tmp/be5342ef-0292-4520-8649-4d85dadc1dba_buggy.java
+++ b/tmp/9efe3612-4c6e-463d-afc2-bf8c0cb8acaa_fixed.java
@@ -1,48 +1,39 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
-        int j, k;
-
     while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
-            if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
+        int j0 = input.indexOf(BEGIN_TOKEN, i);
+        // no more begin‐tokens
+        if (j0 == -1) {
+            // append remainder (or whole input if we never consumed anything)
             target.append(input.substring(i));
             return target;
         }
-            target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
-
+        // if an end‐token appears before this begin‐token, that's invalid
+        int firstEnd = input.indexOf(END_TOKEN, i);
+        if (firstEnd != -1 && firstEnd < j0) {
+            throw new IllegalArgumentException(
+                "Invalid format: end token \"" + END_TOKEN + "\" before begin token \"" + BEGIN_TOKEN + "\" at index " + firstEnd);
+        }
+        // append text up to the begin‐token
+        target.append(input.substring(i, j0));
+        // find the matching end‐token after the begin‐token
+        int specStart = j0 + BEGIN_TOKEN_LEN;
+        int k = input.indexOf(END_TOKEN, specStart);
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException(
+                "Invalid format: no matching end token \"" + END_TOKEN + "\" for begin token at index " + j0);
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
-
-            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        // extract the "code text" spec between the tokens
+        String spec = input.substring(specStart, k);
+        String[] parts = spec.split(CODE_TEXT_SEPARATOR, 2);
+        if (parts.length != 2) {
+            throw new IllegalArgumentException(
+                "Invalid format inside tokens: \"" + spec + "\" (expected \"<codes>" + CODE_TEXT_SEPARATOR + "<text>\")");
         }
-            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
+        // perform the rendering for this segment
+        String replacement = render(parts[1], parts[0].split(CODE_LIST_SEPARATOR));
         target.append(replacement);
-
+        // advance past the end‐token
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
