diff --git a/tmp/043a9ed0-f1e3-4620-866d-fafae000c7ad_buggy.java b/tmp/9fbff8ec-2b84-4528-8dd0-d57b41789455_fixed.java
index 712f277..37962b5 100644
--- a/tmp/043a9ed0-f1e3-4620-866d-fafae000c7ad_buggy.java
+++ b/tmp/9fbff8ec-2b84-4528-8dd0-d57b41789455_fixed.java
@@ -1,48 +1,39 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
-        int j, k;
-
     while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
+        // Look for the next begin marker
+        int j = input.indexOf(BEGIN_TOKEN, i);
+        // Also look for any stray end marker before the next begin
+        int e = input.indexOf(END_TOKEN, i);
+        if (e != -1 && (j == -1 || e < j)) {
+            throw new IllegalArgumentException(
+                "Invalid end token \"" + END_TOKEN + "\" at index " + e + " without matching start");
+        }
+        // No more begin tokens: append the rest and we're done
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
             target.append(input.substring(i));
             return target;
         }
+        // Append text before the begin marker
         target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
-
+        // Find the matching end marker after the begin
+        int specStart = j + BEGIN_TOKEN_LEN;
+        int k = input.indexOf(END_TOKEN, specStart);
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException(
+                "Begin token \"" + BEGIN_TOKEN + "\" at index " + j + " is not closed");
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
-
+        // Extract the "code text" between the markers
+        String spec = input.substring(specStart, k);
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length < 2) {
+            throw new IllegalArgumentException(
+                "Invalid specification \"" + spec + "\": no separator \"" + CODE_TEXT_SEPARATOR + "\" found");
         }
+        // items[0] = list of codes, items[1] = the text to render
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
-
+        // Advance past the end marker and continue
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
