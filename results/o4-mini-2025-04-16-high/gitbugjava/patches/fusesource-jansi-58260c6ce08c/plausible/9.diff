diff --git a/tmp/574e6bf0-0226-41ae-aa94-f9554913376e_buggy.java b/tmp/701c74ba-2ccf-4752-b8ac-68ab398c0946_fixed.java
index 712f277..bef9d3b 100644
--- a/tmp/574e6bf0-0226-41ae-aa94-f9554913376e_buggy.java
+++ b/tmp/701c74ba-2ccf-4752-b8ac-68ab398c0946_fixed.java
@@ -1,48 +1,53 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
+    // guard against an END_TOKEN appearing before any BEGIN_TOKEN
+    int firstBegin = input.indexOf(BEGIN_TOKEN);
+    int firstEnd   = input.indexOf(END_TOKEN);
+    if (firstEnd != -1 && (firstBegin == -1 || firstEnd < firstBegin)) {
+        throw new IllegalArgumentException("Invalid end token before begin token at index " + firstEnd);
+    }
 
-        int i = 0;
-        int j, k;
-
+    int i = 0, j, k;
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
+            // no more BEGIN_TOKEN → append rest verbatim
             if (i == 0) {
                 target.append(input);
-                    return target;
-                }
+            } else {
                 target.append(input.substring(i));
+            }
             return target;
         }
+        // append text before the token
         target.append(input.substring(i, j));
+
+        // find matching END_TOKEN
         k = input.indexOf(END_TOKEN, j);
-
         if (k == -1) {
+            // no closing token → bail out, append whole input
             target.append(input);
             return target;
         }
+        // overlapping or premature END_TOKEN
+        if (k < j + BEGIN_TOKEN_LEN) {
+            throw new IllegalArgumentException("Invalid end token before begin token at index " + k);
+        }
+
+        // extract the spec inside @| ... |@
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
-
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
+            // malformed spec → treat whole input as literal
             target.append(input);
             return target;
         }
+
+        // recursively render inner text with the given codes
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
 
+        // advance past the end token
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
