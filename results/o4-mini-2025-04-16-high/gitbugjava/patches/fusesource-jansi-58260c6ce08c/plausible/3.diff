diff --git a/tmp/c75b494a-d955-4c09-a378-39d48d286591_buggy.java b/tmp/b5064810-a096-40de-bc94-b66e1be0a8e8_fixed.java
index 712f277..1da0995 100644
--- a/tmp/c75b494a-d955-4c09-a378-39d48d286591_buggy.java
+++ b/tmp/b5064810-a096-40de-bc94-b66e1be0a8e8_fixed.java
@@ -1,48 +1,42 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
             if (i == 0) {
                 target.append(input);
-                    return target;
-                }
+            } else {
                 target.append(input.substring(i));
+            }
             return target;
         }
         target.append(input.substring(i, j));
+
+        // locate any END_TOKEN and check for invalid overlap
         k = input.indexOf(END_TOKEN, j);
-
+        if (k != -1 && k < j + BEGIN_TOKEN_LEN) {
+            throw new IllegalArgumentException("Invalid end-before-start markup");
+        }
         if (k == -1) {
             target.append(input);
             return target;
         }
+
+        // now extract the spec (between BEGIN_TOKEN and END_TOKEN)
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
             target.append(input);
             return target;
         }
+
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
