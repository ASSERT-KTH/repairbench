diff --git a/tmp/dccff0e8-e2bd-4ab5-af66-8b5ebc29b4e8_buggy.java b/tmp/3751de2a-0c9c-47ae-87c8-e75cf88f843c_fixed.java
index 712f277..a14f4da 100644
--- a/tmp/dccff0e8-e2bd-4ab5-af66-8b5ebc29b4e8_buggy.java
+++ b/tmp/3751de2a-0c9c-47ae-87c8-e75cf88f843c_fixed.java
@@ -1,48 +1,47 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
-        int i = 0;
-        int j, k;
-
+    int i = 0, j, k;
     while (true) {
+        // find next begin‐token
         j = input.indexOf(BEGIN_TOKEN, i);
+        // detect an end‐token before any matching begin‐token
+        k = input.indexOf(END_TOKEN, i);
+        if (k != -1 && (j == -1 || k < j)) {
+            throw new IllegalArgumentException(
+                "Found '" + END_TOKEN + "' at index " + k +
+                " without matching '" + BEGIN_TOKEN + "'");
+        }
+        // no more begin‐tokens: append rest and return
         if (j == -1) {
             if (i == 0) {
                 target.append(input);
-                    return target;
-                }
+            } else {
                 target.append(input.substring(i));
+            }
             return target;
         }
+        // append text before the begin‐token
         target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
-
+        // locate the corresponding end‐token (after the begin‐token)
+        int specStart = j + BEGIN_TOKEN_LEN;
+        k = input.indexOf(END_TOKEN, specStart);
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException(
+                "Missing closing token '" + END_TOKEN +
+                "' for opening token '" + BEGIN_TOKEN +
+                "' at index " + j);
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
-
+        // extract the spec between the tokens
+        String spec = input.substring(specStart, k);
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
+            // no code/text separator, fall back to literal
             target.append(input);
             return target;
         }
+        // render the inner text with the parsed codes
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
-
+        // advance past the end‐token
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
