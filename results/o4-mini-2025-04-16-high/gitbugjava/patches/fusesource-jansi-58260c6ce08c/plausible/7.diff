diff --git a/tmp/59e5b6b0-2dc2-47c3-aeda-05eb650be119_buggy.java b/tmp/c32285a5-fa85-47be-b083-a9becc36e1f8_fixed.java
index 712f277..847978b 100644
--- a/tmp/59e5b6b0-2dc2-47c3-aeda-05eb650be119_buggy.java
+++ b/tmp/c32285a5-fa85-47be-b083-a9becc36e1f8_fixed.java
@@ -1,48 +1,50 @@
 /**
  * Renders the given input to the target Appendable.
  *
  * @param input
  *            source to render
  * @param target
  *            render onto this target Appendable.
  * @return the given Appendable
  * @throws IOException
  *             If an I/O error occurs
  */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
-        int j, k;
-
     while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
+        // find next BEGIN and END tokens from the current position
+        int j = input.indexOf(BEGIN_TOKEN, i);
+        int k = input.indexOf(END_TOKEN, i);
+        // if an END_TOKEN appears before the next BEGIN_TOKEN, that's invalid
+        if (k != -1 && (j == -1 || k < j)) {
+            throw new IllegalArgumentException(
+                  "Invalid end token before matching begin at index " + k);
+        }
+        // no more BEGIN_TOKEN â†’ append the remainder and return
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
             target.append(input.substring(i));
             return target;
         }
+        // append everything before the BEGIN_TOKEN
         target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
-
+        // locate the matching END_TOKEN after the BEGIN_TOKEN
+        int specStart = j + BEGIN_TOKEN_LEN;
+        k = input.indexOf(END_TOKEN, specStart);
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException(
+                  "Missing end token for begin token at index " + j);
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
-
+        // extract the style/text spec between the tokens
+        String spec = input.substring(specStart, k);
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) {
+            throw new IllegalArgumentException(
+                  "Invalid ANSI style specification: \"" + spec + "\"");
         }
+        // render the inner text with the given style codes
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
-
+        // advance past the END_TOKEN and continue
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
