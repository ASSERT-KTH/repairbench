diff --git a/tmp/d28bc972-02f6-4c6a-bfc4-6f5324ee20b9_buggy.java b/tmp/8040d125-0bd1-432c-b16b-67c7747fcb42_fixed.java
index 712f277..6d7ae08 100644
--- a/tmp/d28bc972-02f6-4c6a-bfc4-6f5324ee20b9_buggy.java
+++ b/tmp/8040d125-0bd1-432c-b16b-67c7747fcb42_fixed.java
@@ -1,48 +1,62 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
-
     while (true) {
+        // find next begin‐token
         j = input.indexOf(BEGIN_TOKEN, i);
-            if (j == -1) {
+        if (j < 0) {
+            // if there's any stray end‐token, that's an error
+            if (input.indexOf(END_TOKEN, i) >= 0) {
+                throw new IllegalArgumentException(
+                    "Found end token \"" + END_TOKEN + "\" without matching begin token \"" + BEGIN_TOKEN + "\"");
+            }
+            // otherwise append the rest and return
             if (i == 0) {
                 target.append(input);
-                    return target;
-                }
+            } else {
                 target.append(input.substring(i));
+            }
             return target;
         }
+
+        // if there is an end‐token before this begin‐token, that's also an error
+        int strayEnd = input.indexOf(END_TOKEN, i);
+        if (strayEnd >= 0 && strayEnd < j) {
+            throw new IllegalArgumentException(
+                "Found end token \"" + END_TOKEN + "\" without matching begin token \"" + BEGIN_TOKEN + "\"");
+        }
+
+        // append literal up to the begin‐token
         target.append(input.substring(i, j));
+
+        // find the matching end‐token
         k = input.indexOf(END_TOKEN, j);
-
-            if (k == -1) {
-                target.append(input);
-                return target;
+        if (k < 0) {
+            throw new IllegalArgumentException(
+                "No matching end token \"" + END_TOKEN + "\" for begin token \"" + BEGIN_TOKEN + "\" at index " + j);
         }
+
+        // move j past the begin‐token
         j += BEGIN_TOKEN_LEN;
+        // if the end‐token overlaps the begin‐token, that's invalid
+        if (k < j) {
+            throw new IllegalArgumentException(
+                "Found end token \"" + END_TOKEN + "\" before content start at index " + k);
+        }
+
+        // extract the "spec" between the tokens
         String spec = input.substring(j, k);
-
+        // spec must split into [codes] [text]
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length < 2) {
+            throw new IllegalArgumentException("Invalid token spec: \"" + spec + "\"");
         }
+
+        // recursively render the inner text with the specified codes
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
 
+        // advance past the end‐token and continue
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
