diff --git a/tmp/5185ea0e-e115-427f-8fb3-2c401046471e_buggy.java b/tmp/a76f89d6-4434-4b12-ba72-998b5cb47c2d_fixed.java
index 712f277..b04b5cc 100644
--- a/tmp/5185ea0e-e115-427f-8fb3-2c401046471e_buggy.java
+++ b/tmp/a76f89d6-4434-4b12-ba72-998b5cb47c2d_fixed.java
@@ -1,48 +1,42 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
+        k = input.indexOf(END_TOKEN, i);
+
+        if (k != -1 && (j == -1 || k < j)) {
+            throw new IllegalArgumentException("Invalid syntax: END_TOKEN found before BEGIN_TOKEN");
+        }
+
         if (j == -1) {
             if (i == 0) {
                 target.append(input);
-                    return target;
-                }
+            } else {
                 target.append(input.substring(i));
+            }
             return target;
         }
+
         target.append(input.substring(i, j));
         k = input.indexOf(END_TOKEN, j);
 
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Invalid syntax: BEGIN_TOKEN found without matching END_TOKEN");
         }
+
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
         if (items.length == 1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Invalid syntax: Missing CODE_TEXT_SEPARATOR");
         }
+
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
