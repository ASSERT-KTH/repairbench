diff --git a/tmp/d9d8f771-57cc-4b64-8acb-570bc450de5b_buggy.java b/tmp/d290b48f-a76a-4226-8a4f-6bbe7a824a79_fixed.java
index 1098336..ea0989d 100644
--- a/tmp/d9d8f771-57cc-4b64-8acb-570bc450de5b_buggy.java
+++ b/tmp/d290b48f-a76a-4226-8a4f-6bbe7a824a79_fixed.java
@@ -1,16 +1,44 @@
 @Override
 protected String doFormat(final String code, final LineEnding ending) throws IOException {
-
     final var source = new InputSource(new StringReader(code));
     final var parser = new CSSOMParser(new SACParserCSS3());
     final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
     var formattedCode = sheet.getCssText(this.formatter);
 
     // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
     formattedCode = formattedCode.replace("\t;", "\\9;");
 
+    // Preserve original line endings
+    if (ending == LineEnding.CRLF) {
+        formattedCode = formattedCode.replace("\n", "\r\n");
+    }
+
+    // Preserve whitespace at the beginning and end of the file
+    formattedCode = preserveOuterWhitespace(code, formattedCode);
+
     if (code.equals(formattedCode)) {
         return null;
     }
     return formattedCode;
 }
+
+private String preserveOuterWhitespace(String original, String formatted) {
+    String prefix = "";
+    String suffix = "";
+
+    // Preserve leading whitespace
+    int startIndex = 0;
+    while (startIndex < original.length() && Character.isWhitespace(original.charAt(startIndex))) {
+        prefix += original.charAt(startIndex);
+        startIndex++;
+    }
+
+    // Preserve trailing whitespace
+    int endIndex = original.length() - 1;
+    while (endIndex >= 0 && Character.isWhitespace(original.charAt(endIndex))) {
+        suffix = original.charAt(endIndex) + suffix;
+        endIndex--;
+    }
+
+    return prefix + formatted.trim() + suffix;
+}
\ No newline at end of file
