diff --git a/tmp/2839f445-7c87-4247-8c5f-f1eb1826664e_buggy.java b/tmp/65049491-2c14-4482-a7fd-0f59c4530fbe_fixed.java
index 47a8941..87e02a9 100644
--- a/tmp/2839f445-7c87-4247-8c5f-f1eb1826664e_buggy.java
+++ b/tmp/65049491-2c14-4482-a7fd-0f59c4530fbe_fixed.java
@@ -1,53 +1,40 @@
-	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
-	 */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
-		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
+    JClassContainer parent = clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
-		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
+    if (grandParent instanceof JDefinedClass) {
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else if (grandParent instanceof JPackage) {
         JPackage grandParentPackage = (JPackage) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+        // Reset static modifier
+        clazz.mods().setStatic(false);
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
-					setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+                if (sc instanceof XSDeclaration) {
+                    ((XSDeclaration) sc).setLocal(false);
+                }
                 break;
             }
         }
+    } else {
+        throw new IllegalStateException("Unexpected grandparent type: " + grandParent.getClass().getName());
     }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+    String newName = clazz.name();
+    if (classes.containsKey(newName)) {
+        newName = parent.name() + clazz.name();
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+        setPrivateField(clazz, "name", newName);
     }
 
-		classes.put(clazz.name(), clazz);
-
-		// Finally modify the class so that it refers back the container:
+    classes.put(newName, clazz);
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
