diff --git a/tmp/4c041fa4-2073-4d56-bef8-9f692a5356a6_buggy.java b/tmp/4fc00e26-f846-4ccc-b189-181aa6df00e9_fixed.java
index 0eef537..334fd87 100644
--- a/tmp/4c041fa4-2073-4d56-bef8-9f692a5356a6_buggy.java
+++ b/tmp/4fc00e26-f846-4ccc-b189-181aa6df00e9_fixed.java
@@ -1,74 +1,54 @@
-    /**
-     * Calculates the Cholesky decomposition of the given matrix.
-     * @param matrix the matrix to decompose
-     * @param relativeSymmetryThreshold threshold above which off-diagonal
-     * elements are considered too different and matrix not symmetric
-     * @param absolutePositivityThreshold threshold below which diagonal
-     * elements are considered null and matrix not positive definite
-     * @exception NonSquareMatrixException if matrix is not square
-     * @exception NotSymmetricMatrixException if matrix is not symmetric
-     * @exception NotPositiveDefiniteMatrixException if the matrix is not
-     * strictly positive definite
-     * @see #CholeskyDecompositionImpl(RealMatrix)
-     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
-     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
-     */
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                  final double relativeSymmetryThreshold,
                                  final double absolutePositivityThreshold)
     throws NonSquareMatrixException,
            NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                            matrix.getColumnDimension());
     }
 
     final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+    lTData   = new double[order][order];
     cachedL  = null;
     cachedLT = null;
 
     // check the matrix before transformation
     for (int i = 0; i < order; ++i) {
-
-            final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
+        if (matrix.getEntry(i, i) <= absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-            // check off-diagonal elements (and reset them to 0)
-            for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
-                final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
-                if (Math.abs(lIJ - lJI) > maxDelta) {
+        for (int j = 0; j < order; ++j) {
+            double mij = matrix.getEntry(i, j);
+            double mji = matrix.getEntry(j, i);
+            double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(mij), Math.abs(mji));
+            if (Math.abs(mij - mji) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
-                lJ[i] = 0;
+            lTData[i][j] = mij;
         }
     }
 
     // transform the matrix
     for (int i = 0; i < order; ++i) {
-
         final double[] ltI = lTData[i];
-
-            // check diagonal element
-
         ltI[i] = Math.sqrt(ltI[i]);
         final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
+        for (int q = i + 1; q < order; ++q) {
             ltI[q] *= inverse;
+        }
+
+        for (int q = i + 1; q < order; ++q) {
             final double[] ltQ = lTData[q];
+            double ltIq = ltI[q];
             for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+                ltQ[p] -= ltIq * ltI[p];
+            }
+            if (ltQ[q] <= absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
             }
         }
-
     }
-
 }
\ No newline at end of file
