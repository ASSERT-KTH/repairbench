diff --git a/tmp/b7b3f024-c023-4190-9a21-a5ff58bece02_buggy.java b/tmp/946c1e79-a417-413b-b2bf-64d3215197d2_fixed.java
index 5f96616..0ff5cf4 100644
--- a/tmp/b7b3f024-c023-4190-9a21-a5ff58bece02_buggy.java
+++ b/tmp/946c1e79-a417-413b-b2bf-64d3215197d2_fixed.java
@@ -1,20 +1,26 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
+    // Handle the case where the constraint object is a record type or union type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+        for (JSType alternateType : constraint.toMaybeUnionType().getAlternates()) {
+            if (alternateType.isRecordType()) {
+                matchRecordTypeConstraint(alternateType.toObjectType());
+            }
+        }
     }
 }
\ No newline at end of file
