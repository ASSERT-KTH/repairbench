diff --git a/tmp/bbf1feca-3afd-4833-a00c-d8c82b2a7a7a_buggy.java b/tmp/3f4a1ac5-28bc-4f06-9d3e-166958dfd92e_fixed.java
index 5f96616..e968197 100644
--- a/tmp/bbf1feca-3afd-4833-a00c-d8c82b2a7a7a_buggy.java
+++ b/tmp/3f4a1ac5-28bc-4f06-9d3e-166958dfd92e_fixed.java
@@ -1,20 +1,25 @@
 @Override
 public void matchConstraint(JSType constraint) {
-    // We only want to match constraints on anonymous types.
-    if (hasReferenceName()) {
-      return;
-    }
+    // We want to match constraints on both anonymous and named types.
+    // Remove the hasReferenceName() check to allow all types to be matched.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+        // Handle union types by matching against each member of the union
+        for (JSType alternateType : constraint.toMaybeUnionType().getAlternates()) {
+            if (alternateType.isRecordType()) {
+                matchRecordTypeConstraint(alternateType.toObjectType());
+            }
+        }
     }
 }
\ No newline at end of file
