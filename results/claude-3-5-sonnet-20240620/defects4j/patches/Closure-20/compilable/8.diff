diff --git a/tmp/85fd2eb7-f411-427a-b617-494cc5b69462_buggy.java b/tmp/1fb8684c-bebb-4648-aeb0-7baa2052d9f1_fixed.java
index d4e6d48..86a71af 100644
--- a/tmp/85fd2eb7-f411-427a-b617-494cc5b69462_buggy.java
+++ b/tmp/1fb8684c-bebb-4648-aeb0-7baa2052d9f1_fixed.java
@@ -1,23 +1,24 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
     // Fold String(a) to '' + (a) on immutable literals,
     // which allows further optimizations
     //
     // We can't do this in the general case, because String(a) has
     // slightly different semantics than '' + (a). See
     // http://code.google.com/p/closure-compiler/issues/detail?id=759
     Node value = callTarget.getNext();
-      if (value != null) {
+    if (value != null && n.getChildCount() == 2) {
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
           value.detachFromParent());
+      addition.useSourceInfoIfMissingFromForTree(n);
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
