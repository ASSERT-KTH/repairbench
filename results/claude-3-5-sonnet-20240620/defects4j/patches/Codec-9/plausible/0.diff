diff --git a/tmp/171f0ef2-22f5-4de7-b0d4-1728cd98a157_buggy.java b/tmp/5443a495-a182-47eb-9ebc-bc0ebb51fec9_fixed.java
index 51ebfca..a81314f 100644
--- a/tmp/171f0ef2-22f5-4de7-b0d4-1728cd98a157_buggy.java
+++ b/tmp/5443a495-a182-47eb-9ebc-bc0ebb51fec9_fixed.java
@@ -1,32 +1,33 @@
 /**
  * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
  * 
  * @param binaryData
  *            Array containing binary data to encode.
  * @param isChunked
  *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
  * @param urlSafe
  *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
  * @param maxResultSize
  *            The maximum result size to accept.
  * @return Base64-encoded data.
  * @throws IllegalArgumentException
  *             Thrown when the input array needs an output array bigger than maxResultSize
  * @since 1.4
  */
 public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
     if (binaryData == null || binaryData.length == 0) {
         return binaryData;
     }
 
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+    long len = isChunked ? getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR) : 
+               (binaryData.length + 2) / 3 * 4; // Calculate non-chunked length
     if (len > maxResultSize) {
         throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
             len +
             ") than the specified maxium size of " +
             maxResultSize);
     }
             
     Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
     return b64.encode(binaryData);
 }
\ No newline at end of file
