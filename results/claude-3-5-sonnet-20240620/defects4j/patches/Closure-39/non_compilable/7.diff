diff --git a/tmp/5d976e84-b56b-418c-a78f-f7821e7ee5e0_buggy.java b/tmp/67cfe155-c3bf-4a40-9bf3-4256a51b3db3_fixed.java
index e4d90e7..dd49259 100644
--- a/tmp/5d976e84-b56b-418c-a78f-f7821e7ee5e0_buggy.java
+++ b/tmp/67cfe155-c3bf-4a40-9bf3-4256a51b3db3_fixed.java
@@ -1,45 +1,53 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+         current != null && !current.isNativeObjectType();
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
       sb.append(getPropertyType(property).toString());
 
       ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      if (i == MAX_PRETTY_PRINTED_PROPERTIES && !forAnnotations) {
         sb.append(", ...");
         break;
       }
     }
 
+    if (i < propertyNames.size() && forAnnotations) {
+      for (String property : propertyNames.stream().skip(i).collect(Collectors.toList())) {
+        sb.append(", ");
+        sb.append(property);
+        sb.append(": ");
+        sb.append(getPropertyType(property).toString());
+      }
+    }
+
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
