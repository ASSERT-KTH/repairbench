diff --git a/tmp/208998b1-be00-4823-8461-9bec0ff3450e_buggy.java b/tmp/2ad2bb96-f6b5-4184-b210-ecf46f3d0170_fixed.java
index 5f1dcf2..bb45bb1 100644
--- a/tmp/208998b1-be00-4823-8461-9bec0ff3450e_buggy.java
+++ b/tmp/2ad2bb96-f6b5-4184-b210-ecf46f3d0170_fixed.java
@@ -1,41 +1,60 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
-                return;
-
-            }
-
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                // do nothing here, as the contracted simplex is already stored in 'simplex'
+            } else {
+                // perform a shrink step
+                RealPointValuePair[] shrunkSimplex = new RealPointValuePair[simplex.length];
+                shrunkSimplex[0] = simplex[0];
+                for (int i = 1; i < simplex.length; ++i) {
+                    final double[] xSmallest = simplex[0].getPointRef();
+                    final double[] xOriginal = original[i].getPointRef();
+                    final double[] xSmallestToOriginal = new double[xSmallest.length];
+                    for (int j = 0; j < xSmallest.length; ++j) {
+                        xSmallestToOriginal[j] = xOriginal[j] - xSmallest[j];
+                    }
+                    final double[] xNew = new double[xSmallest.length];
+                    for (int j = 0; j < xSmallest.length; ++j) {
+                        xNew[j] = xSmallest[j] + sigma * xSmallestToOriginal[j];
+                    }
+                    shrunkSimplex[i] = new RealPointValuePair(xNew, Double.NaN, false);
+                }
+                simplex = shrunkSimplex;
+                evaluateSimplex(comparator);
+            }
+        }
 
-            // check convergence
+        // Check convergence
+        final int iter = getIterations();
+        if (iter >= getMaxIterations()) {
+            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+        }
+        if (getConvergenceChecker().converged(iter, original[0], simplex[0])) {
             return;
         }
-
     }
-
 }
\ No newline at end of file
