diff --git a/tmp/2a60c3e8-da27-45b2-95a4-435111ba5290_buggy.java b/tmp/42350bf3-a00f-4c6c-8026-dc654ebc484a_fixed.java
index 5f1dcf2..d69dbbc 100644
--- a/tmp/2a60c3e8-da27-45b2-95a4-435111ba5290_buggy.java
+++ b/tmp/42350bf3-a00f-4c6c-8026-dc654ebc484a_fixed.java
@@ -1,41 +1,43 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+                simplex = evaluateNewSimplex(original, khi, comparator);
+            } else {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
-                return;
-
-            }
-
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = evaluateNewSimplex(original, gamma, comparator);
+            } else {
+                // perform a shrink step
+                simplex = evaluateNewSimplex(original, sigma, comparator);
+            }
+        }
 
-            // check convergence
+        // Check if convergence is achieved
+        if (checkConvergence()) {
             return;
         }
-
     }
-
 }
\ No newline at end of file
