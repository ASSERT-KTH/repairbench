diff --git a/tmp/dda11751-086c-46fd-b9a9-3e592fd65ef5_buggy.java b/tmp/6bbb31dd-dc11-45c6-bc0d-5039dd409660_fixed.java
index 5f1dcf2..d7be03c 100644
--- a/tmp/dda11751-086c-46fd-b9a9-3e592fd65ef5_buggy.java
+++ b/tmp/6bbb31dd-dc11-45c6-bc0d-5039dd409660_fixed.java
@@ -1,41 +1,43 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
-
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
-
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(expanded, reflected) < 0) {
+                    // accept the expanded simplex
+                    simplex = evaluateNewSimplex(original, khi, comparator);
+                } else {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
-
-                return;
-
-            }
-
+            } else {
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
+                    simplex = evaluateNewSimplex(original, gamma, comparator);
+                } else {
+                    // perform a shrink step
+                    simplex = evaluateNewSimplex(original, sigma, comparator);
+                }
+            }
 
             // check convergence
+            if (checkConvergence(getConvergenceChecker())) {
                 return;
             }
-
         }
-
     }
\ No newline at end of file
