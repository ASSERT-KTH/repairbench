diff --git a/tmp/d9649525-35fb-44df-b18b-46bf4db5ee71_buggy.java b/tmp/8b6b6492-8520-461f-8eea-c27b7145a82d_fixed.java
index 03b03d7..bdb6d36 100644
--- a/tmp/d9649525-35fb-44df-b18b-46bf4db5ee71_buggy.java
+++ b/tmp/8b6b6492-8520-461f-8eea-c27b7145a82d_fixed.java
@@ -1,25 +1,28 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
     
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long localBefore = convertUTCToLocal(convertLocalToUTC(local, false, instant));
+    long localAfter = convertUTCToLocal(convertLocalToUTC(local, true, instant));
     
     // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    if (localBefore != localAfter) {
+        return earlierOrLater ? convertLocalToUTC(local, true, instant) : convertLocalToUTC(local, false, instant);
+    }
+    return instant;  // not an overlap
 }
\ No newline at end of file
