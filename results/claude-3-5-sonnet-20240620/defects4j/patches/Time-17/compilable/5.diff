diff --git a/tmp/e164489e-13ae-4e2a-81d4-5c86418d4a5d_buggy.java b/tmp/ba49320c-6434-4b5f-8041-5fabf6c20731_fixed.java
index 03b03d7..6ca5206 100644
--- a/tmp/e164489e-13ae-4e2a-81d4-5c86418d4a5d_buggy.java
+++ b/tmp/ba49320c-6434-4b5f-8041-5fabf6c20731_fixed.java
@@ -1,25 +1,35 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
     
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long earlierLocal = convertUTCToLocal(convertLocalToUTC(local, false, instantBefore));
+    long laterLocal = convertUTCToLocal(convertLocalToUTC(local, false, instantAfter));
     
+    if (earlierLocal != laterLocal) {
         // calculate result
-          // currently in later offset
+        if (earlierOrLater) {
             // currently in earlier offset
+            return convertLocalToUTC(local, false, instantAfter);
+        } else {
+            // currently in later offset
+            return convertLocalToUTC(local, false, instantBefore);
+        }
+    }
+    
+    return instant;  // not an overlap
 }
\ No newline at end of file
