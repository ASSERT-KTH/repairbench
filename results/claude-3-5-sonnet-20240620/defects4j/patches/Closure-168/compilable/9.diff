diff --git a/tmp/dd67f811-3166-4ff3-a97c-8e0082dba943_buggy.java b/tmp/e50d805a-01e8-43a9-b4dd-cd87d4eead5b_fixed.java
index b12de99..bbef2dc 100644
--- a/tmp/dd67f811-3166-4ff3-a97c-8e0082dba943_buggy.java
+++ b/tmp/e50d805a-01e8-43a9-b4dd-cd87d4eead5b_fixed.java
@@ -1,52 +1,55 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (t.inGlobalScope()) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  if (t == null || t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
-        data.get(t.getScopeRoot()).recordNonEmptyReturn();
+    Node scopeRoot = t.getScopeRoot();
+    if (scopeRoot != null) {
+      data.get(scopeRoot).recordNonEmptyReturn();
+    }
   }
 
   if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
+    if (scope != null) {
       Var var = scope.getVar(name);
       if (var != null) {
         Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordAssignedName(name);
+        if (ownerScope != null && ownerScope.isLocal()) {
+          Node rootNode = ownerScope.getRootNode();
+          if (rootNode != null) {
+            data.get(rootNode).recordAssignedName(name);
           }
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+          if (scope != ownerScope) {
+            data.get(rootNode).recordEscapedVarName(name);
+          }
+        }
       }
     }
   } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
       NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
+    if (scope != null) {
       Var var = scope.getVar(name);
       if (var != null) {
         Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+        if (ownerScope != null && scope != ownerScope && ownerScope.isLocal()) {
+          Node rootNode = ownerScope.getRootNode();
+          if (rootNode != null) {
+            data.get(rootNode).recordEscapedQualifiedName(n.getQualifiedName());
+          }
+        }
       }
     }
   }
 }
\ No newline at end of file
