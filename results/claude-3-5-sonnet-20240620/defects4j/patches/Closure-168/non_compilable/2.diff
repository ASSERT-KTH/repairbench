diff --git a/tmp/f78200d3-09e8-478d-b8a6-9fdbeb320f93_buggy.java b/tmp/1801a293-8cab-4fbb-87ca-130ee897db1f_fixed.java
index b12de99..575572d 100644
--- a/tmp/f78200d3-09e8-478d-b8a6-9fdbeb320f93_buggy.java
+++ b/tmp/1801a293-8cab-4fbb-87ca-130ee897db1f_fixed.java
@@ -1,52 +1,53 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
-        data.get(t.getScopeRoot()).recordNonEmptyReturn();
+    ScopedData scopedData = data.get(t.getScopeRoot());
+    if (scopedData != null) {
+      scopedData.recordNonEmptyReturn();
+    }
   }
 
   if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordAssignedName(name);
+        ScopedData ownerScopedData = data.get(ownerScope.getRootNode());
+        if (ownerScopedData != null) {
+          ownerScopedData.recordAssignedName(name);
+        }
       }
 
       if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+        ScopedData ownerScopedData = data.get(ownerScope.getRootNode());
+        if (ownerScopedData != null) {
+          ownerScopedData.recordEscapedVarName(name);
+        }
       }
     }
   } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
       NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+        ScopedData ownerScopedData = data.get(ownerScope.getRootNode());
+        if (ownerScopedData != null) {
+          ownerScopedData.recordEscapedQualifiedName(n.getQualifiedName());
+        }
       }
     }
   }
 }
\ No newline at end of file
