diff --git a/tmp/fdf57a6b-fe38-4141-89f5-e94466172d6e_buggy.java b/tmp/4ca9aab5-63e9-4fa8-9f3c-e5372317eb11_fixed.java
index dc93be3..3a444cf 100644
--- a/tmp/fdf57a6b-fe38-4141-89f5-e94466172d6e_buggy.java
+++ b/tmp/4ca9aab5-63e9-4fa8-9f3c-e5372317eb11_fixed.java
@@ -1,14 +1,18 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
-            return el;
+        if (!el.tag().isKnownTag()) {
+            return el; // Only return for unknown tags
+        }
+        // For known tags, continue to add to stack and emit end tag
     }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
+    if (startTag.isSelfClosing() && el.tag().isKnownTag()) {
+        tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+    }
     return el;
 }
\ No newline at end of file
