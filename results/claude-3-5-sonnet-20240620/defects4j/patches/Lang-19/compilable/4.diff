diff --git a/tmp/3c914bb9-42e7-4394-826e-dcffd08dafe8_buggy.java b/tmp/f95b67c2-5cac-4a69-9d07-900a029ce80b_fixed.java
index 72a422c..663ad92 100644
--- a/tmp/3c914bb9-42e7-4394-826e-dcffd08dafe8_buggy.java
+++ b/tmp/f95b67c2-5cac-4a69-9d07-900a029ce80b_fixed.java
@@ -1,51 +1,52 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < seqEnd) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
                 // Check there's more than just an x after the &#
+                if (start == seqEnd) {
+                    return 0;
+                }
             }
 
             int end = start;
             // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
-            int entityValue;
+            String entityValue = input.subSequence(start, end).toString();
+            if (entityValue.isEmpty()) {
+                return 0;
+            }
+
             try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
+                int entityNum = Integer.parseInt(entityValue, isHex ? 16 : 10);
 
-            if(entityValue > 0xFFFF) {
-                char[] chrs = Character.toChars(entityValue);
+                if (entityNum > 0xFFFF) {
+                    char[] chrs = Character.toChars(entityNum);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
-                out.write(entityValue);
+                    out.write(entityNum);
                 }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                return end - index + 1;
+            } catch (NumberFormatException nfe) {
+                return 0;
+            }
+        }
     }
     return 0;
 }
\ No newline at end of file
