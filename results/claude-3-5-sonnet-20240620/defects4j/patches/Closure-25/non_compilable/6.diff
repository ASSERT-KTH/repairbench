diff --git a/tmp/8023ce60-8141-4b59-a6fa-b4f39745d964_buggy.java b/tmp/8603a1b8-7369-4de3-9c8d-10004f01e7ab_fixed.java
index b98f0a7..f67a4f9 100644
--- a/tmp/8023ce60-8141-4b59-a6fa-b4f39745d964_buggy.java
+++ b/tmp/8603a1b8-7369-4de3-9c8d-10004f01e7ab_fixed.java
@@ -1,29 +1,39 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        
+        // Apply type information from constructor parameters
+        Node firstArg = constructor.getNext();
+        if (firstArg != null) {
+          JSType paramType = ct.getParameterType(0);
+          if (paramType != null && paramType.isRecordType()) {
+            scope = traverse(firstArg, scope);
+            JSType argType = firstArg.getJSType();
+            if (argType != null) {
+              argType = argType.getLeastSupertype(paramType);
+              firstArg.setJSType(argType);
+            }
+          }
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
