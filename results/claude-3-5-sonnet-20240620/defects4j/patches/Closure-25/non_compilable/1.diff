diff --git a/tmp/915da75f-68b4-45d6-8ea3-dc3c63defeb5_buggy.java b/tmp/2a7d8c7d-c4bb-4ccd-8cfa-35b1036ca21c_fixed.java
index b98f0a7..5bde218 100644
--- a/tmp/915da75f-68b4-45d6-8ea3-dc3c63defeb5_buggy.java
+++ b/tmp/2a7d8c7d-c4bb-4ccd-8cfa-35b1036ca21c_fixed.java
@@ -1,29 +1,36 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+        
+        // Add this block to handle parameter types
+        int paramIndex = 0;
         for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+          JSType paramType = ct.getParameterType(paramIndex);
+          if (paramType != null) {
             scope = traverse(arg, scope);
+            JSType argType = arg.getJSType();
+            if (argType != null) {
+              scope = narrowScope(scope, arg, paramType);
             }
+          }
+          paramIndex++;
+        }
+      }
+    }
+  }
+  n.setJSType(type);
   return scope;
 }
\ No newline at end of file
