diff --git a/tmp/48c6ab9d-4a09-47c3-ba05-7b453e3502e0_buggy.java b/tmp/935dd005-630a-4515-a0f1-0f19870b4fdf_fixed.java
index b98f0a7..01113c9 100644
--- a/tmp/48c6ab9d-4a09-47c3-ba05-7b453e3502e0_buggy.java
+++ b/tmp/935dd005-630a-4515-a0f1-0f19870b4fdf_fixed.java
@@ -1,29 +1,42 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                
+                // Add this block to handle parameter types
+                Node argNode = constructor.getNext();
+                int paramIndex = 0;
+                for (Node param : ct.getParameters()) {
+                    if (argNode != null) {
+                        JSType paramType = param.getJSType();
+                        if (paramType != null) {
+                            scope = traverse(argNode, scope);
+                            JSType argType = argNode.getJSType();
+                            if (argType != null) {
+                                scope = scope.inferTypeFromMatch(argType, paramType);
+                            }
+                        }
+                        argNode = argNode.getNext();
+                        paramIndex++;
+                    } else {
+                        break;
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
     return scope;
 }
\ No newline at end of file
