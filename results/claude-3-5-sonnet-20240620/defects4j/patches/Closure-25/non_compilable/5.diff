diff --git a/tmp/ed37daf6-1478-4d55-805f-535cafc412e4_buggy.java b/tmp/af36c9f8-1a23-48fd-b846-8f1cac543d2f_fixed.java
index b98f0a7..00f597e 100644
--- a/tmp/ed37daf6-1478-4d55-805f-535cafc412e4_buggy.java
+++ b/tmp/af36c9f8-1a23-48fd-b846-8f1cac543d2f_fixed.java
@@ -1,29 +1,35 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        
+        // Add this block to handle parameter types
+        FunctionType.Parameter[] parameters = ct.getParameters();
+        Node arg = constructor.getNext();
+        for (int i = 0; i < parameters.length && arg != null; i++, arg = arg.getNext()) {
+          JSType paramType = parameters[i].getJSType();
+          if (paramType != null) {
+            scope = traverseEdge(arg, arg.getJSType(), paramType, scope);
+          }
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
