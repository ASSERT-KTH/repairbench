diff --git a/tmp/e8156d8c-afd0-44d0-b495-94bcea9a10cf_buggy.java b/tmp/3f2548da-dba8-4579-9e63-6a770dd81c69_fixed.java
index b98f0a7..ef7d2cb 100644
--- a/tmp/e8156d8c-afd0-44d0-b495-94bcea9a10cf_buggy.java
+++ b/tmp/3f2548da-dba8-4579-9e63-6a770dd81c69_fixed.java
@@ -1,29 +1,53 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        
+        // Apply type information from constructor parameters
+        Node firstArg = constructor.getNext();
+        if (firstArg != null) {
+          JSType paramType = ct.getParameterType(0);
+          if (paramType != null && paramType.isRecordType()) {
+            inferPropertyTypesToLocalScope(scope, firstArg, paramType);
+          }
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
+
+private void inferPropertyTypesToLocalScope(FlowScope scope, Node arg, JSType paramType) {
+  if (arg.isName()) {
+    String varName = arg.getString();
+    JSType varType = scope.getSlot(varName).getType();
+    if (varType != null && varType.isSubtype(getNativeType(OBJECT_TYPE))) {
+      ObjectType paramObjectType = paramType.toMaybeObjectType();
+      if (paramObjectType != null) {
+        for (String prop : paramObjectType.getOwnPropertyNames()) {
+          JSType propType = paramObjectType.getPropertyType(prop);
+          if (propType != null) {
+            varType = varType.toMaybeObjectType().withProperty(prop, propType);
+          }
+        }
+        scope.inferSlotType(varName, varType);
+      }
+    }
+  }
+}
\ No newline at end of file
