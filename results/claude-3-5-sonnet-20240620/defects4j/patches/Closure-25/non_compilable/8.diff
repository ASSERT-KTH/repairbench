diff --git a/tmp/ef3e3a92-857e-47c4-8dcf-633fc2673c19_buggy.java b/tmp/0a65574d-4d51-4af8-98d4-e7f502a94c58_fixed.java
index b98f0a7..6f6eb63 100644
--- a/tmp/ef3e3a92-857e-47c4-8dcf-633fc2673c19_buggy.java
+++ b/tmp/0a65574d-4d51-4af8-98d4-e7f502a94c58_fixed.java
@@ -1,29 +1,34 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                
+                // Apply type information from constructor parameters
+                Node secondChild = n.getSecond();
+                if (secondChild != null) {
+                    JSType paramType = ct.getParameterType(0);
+                    if (paramType != null && paramType.isRecordType()) {
+                        secondChild.setJSType(paramType);
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
