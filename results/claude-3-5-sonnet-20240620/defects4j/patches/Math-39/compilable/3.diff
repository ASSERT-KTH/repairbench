diff --git a/tmp/9eabb5c4-c294-40a5-ada8-18c8fc04bb68_buggy.java b/tmp/f2fb5cc2-28fd-4607-9e7a-53e0af60bc4e_fixed.java
index fe2e012..2a0aba6 100644
--- a/tmp/9eabb5c4-c294-40a5-ada8-18c8fc04bb68_buggy.java
+++ b/tmp/f2fb5cc2-28fd-4607-9e7a-53e0af60bc4e_fixed.java
@@ -1,140 +1,144 @@
 /** {@inheritDoc} */
 @Override
 public void integrate(final ExpandableStatefulODE equations, final double t)
     throws MathIllegalStateException, MathIllegalArgumentException {
 
   sanityChecks(equations, t);
   setEquations(equations);
   final boolean forward = t > equations.getTime();
 
   // create some internal working arrays
   final double[] y0  = equations.getCompleteState();
   final double[] y = y0.clone();
   final int stages = c.length + 1;
   final double[][] yDotK = new double[stages][y.length];
   final double[] yTmp    = y0.clone();
   final double[] yDotTmp = new double[y.length];
 
   // set up an interpolator sharing the integrator arrays
   final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
   interpolator.reinitialize(this, yTmp, yDotK, forward,
                             equations.getPrimaryMapper(), equations.getSecondaryMappers());
   interpolator.storeTime(equations.getTime());
 
   // set up integration control objects
   stepStart         = equations.getTime();
   double  hNew      = 0;
   boolean firstTime = true;
   initIntegration(equations.getTime(), y0, t);
 
   // main integration loop
   isLastStep = false;
   do {
 
     interpolator.shift();
 
     // iterate over step size, ensuring local normalized error is smaller than 1
     double error = 10;
+    boolean reject = false;
     while (error >= 1.0) {
 
-        if (firstTime || !fsal) {
+      if (firstTime || (!fsal && !reject)) {
         // first stage
         computeDerivatives(stepStart, y, yDotK[0]);
       }
 
       if (firstTime) {
         final double[] scale = new double[mainSetDimension];
         if (vecAbsoluteTolerance == null) {
             for (int i = 0; i < scale.length; ++i) {
               scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
             }
         } else {
             for (int i = 0; i < scale.length; ++i) {
               scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);
             }
         }
         hNew = initializeStep(forward, getOrder(), scale,
                               stepStart, y, yDotK[0], yTmp, yDotK[1]);
         firstTime = false;
       }
 
       stepSize = hNew;
 
       // next stages
       for (int k = 1; k < stages; ++k) {
 
         for (int j = 0; j < y0.length; ++j) {
           double sum = a[k-1][0] * yDotK[0][j];
           for (int l = 1; l < k; ++l) {
             sum += a[k-1][l] * yDotK[l][j];
           }
           yTmp[j] = y[j] + stepSize * sum;
         }
 
         computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
 
       }
 
       // estimate the state at the end of the step
       for (int j = 0; j < y0.length; ++j) {
         double sum    = b[0] * yDotK[0][j];
         for (int l = 1; l < stages; ++l) {
           sum    += b[l] * yDotK[l][j];
         }
         yTmp[j] = y[j] + stepSize * sum;
       }
 
       // estimate the error at the end of the step
       error = estimateError(yDotK, y, yTmp, stepSize);
       if (error >= 1.0) {
         // reject the step and attempt to reduce error by stepsize control
         final double factor =
             FastMath.min(maxGrowth,
                          FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
         hNew = filterStep(stepSize * factor, forward, false);
+        reject = true;
+      } else {
+        reject = false;
       }
 
     }
 
     // local error is small enough: accept the step, trigger events and step handlers
     interpolator.storeTime(stepStart + stepSize);
     System.arraycopy(yTmp, 0, y, 0, y0.length);
     System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);
     stepStart = acceptStep(interpolator, y, yDotTmp, t);
     System.arraycopy(y, 0, yTmp, 0, y.length);
 
     if (!isLastStep) {
 
         // prepare next step
         interpolator.storeTime(stepStart);
 
         if (fsal) {
             // save the last evaluation for the next step
             System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);
         }
 
         // stepsize control for next step
         final double factor =
             FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
         final double  scaledH    = stepSize * factor;
         final double  nextT      = stepStart + scaledH;
         final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
         hNew = filterStep(scaledH, forward, nextIsLast);
 
         final double  filteredNextT      = stepStart + hNew;
         final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
         if (filteredNextIsLast) {
             hNew = t - stepStart;
         }
 
     }
 
   } while (!isLastStep);
 
   // dispatch results
   equations.setTime(stepStart);
   equations.setCompleteState(y);
 
   resetInternalState();
 
 }
\ No newline at end of file
