diff --git a/tmp/5f0ae281-9f75-4e26-892d-720ad8ef701b_buggy.java b/tmp/c23b398a-ed17-4711-97e1-41c6eb22914f_fixed.java
index dbadad4..831f938 100644
--- a/tmp/5f0ae281-9f75-4e26-892d-720ad8ef701b_buggy.java
+++ b/tmp/c23b398a-ed17-4711-97e1-41c6eb22914f_fixed.java
@@ -1,50 +1,40 @@
-    /**
-     * Alternative to {@link #serializeAsField} that is used when a POJO
-     * is serialized as JSON Array; the difference is that no field names
-     * are written.
-     * 
-     * @since 2.1
-     */
 public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)
     throws Exception
 {
     Object value = get(bean);
-        if (value == null) { // nulls need specialized handling
-            if (_nullSerializer != null) {
-                _nullSerializer.serialize(null, jgen, prov);
-            } else { // can NOT suppress entries in tabular output
+    if (value == null) {
         jgen.writeNull();
-            }
+        return;
     }
     // otherwise find serializer to use
     JsonSerializer<Object> ser = _serializer;
     if (ser == null) {
         Class<?> cls = value.getClass();
         PropertySerializerMap map = _dynamicSerializers;
         ser = map.serializerFor(cls);
         if (ser == null) {
             ser = _findAndAddDynamic(map, cls, prov);
         }
     }
     // and then see if we must suppress certain values (default, empty)
     if (_suppressableValue != null) {
         if (MARKER_FOR_EMPTY == _suppressableValue) {
-                if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output
-                    serializeAsPlaceholder(bean, jgen, prov);
+            if (ser.isEmpty(value)) {
+                jgen.writeNull();
                 return;
             }
-            } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output
-                serializeAsPlaceholder(bean, jgen, prov);
+        } else if (_suppressableValue.equals(value)) {
+            jgen.writeNull();
             return;
         }
     }
     // For non-nulls: simple check for direct cycles
     if (value == bean) {
         _handleSelfReference(bean, ser);
     }
     if (_typeSerializer == null) {
         ser.serialize(value, jgen, prov);
     } else {
         ser.serializeWithType(value, jgen, prov, _typeSerializer);
     }
 }
\ No newline at end of file
