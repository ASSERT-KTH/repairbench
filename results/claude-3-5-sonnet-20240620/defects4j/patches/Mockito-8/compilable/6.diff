diff --git a/tmp/978b1439-4da6-4e91-8aac-5d4d8e9589ec_buggy.java b/tmp/1c0de1c9-8068-4410-a67b-ba7951aa1463_fixed.java
index 42b58d0..c418918 100644
--- a/tmp/978b1439-4da6-4e91-8aac-5d4d8e9589ec_buggy.java
+++ b/tmp/1c0de1c9-8068-4410-a67b-ba7951aa1463_fixed.java
@@ -1,19 +1,23 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    Class<?> rawType = (Class<?>) parameterizedType.getRawType();
+    TypeVariable<?>[] typeParameters = rawType.getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
+        } else if (actualTypeArgument instanceof TypeVariable && 
+                   ((TypeVariable<?>) actualTypeArgument).getGenericDeclaration().equals(rawType)) {
+            // Handle self-referencing generic type
+            contextualActualTypeParameters.put(typeParameter, typeParameter);
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
