diff --git a/tmp/af0b10b1-cfcd-4781-95a1-d7e86be7d4cf_buggy.java b/tmp/74c06346-a73c-4878-96f6-dac0fa5120b6_fixed.java
index 602226b..734c75a 100644
--- a/tmp/af0b10b1-cfcd-4781-95a1-d7e86be7d4cf_buggy.java
+++ b/tmp/74c06346-a73c-4878-96f6-dac0fa5120b6_fixed.java
@@ -1,26 +1,26 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
         // Bleeding functions already get a BAD_PARAMETERS error, so just
         // do nothing.
         // Parameters of the scope function also get a BAD_PARAMETERS
         // error.
       } else {
-          // TODO(robbyw): Support using locals for private variables.
+        // Report non-alias locals
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
