diff --git a/tmp/57d8deae-b512-48ad-b1c1-aec6a07127a0_buggy.java b/tmp/43b9654a-d027-4bd6-9464-696ed3750c92_fixed.java
index e1fc51f..31b09d1 100644
--- a/tmp/57d8deae-b512-48ad-b1c1-aec6a07127a0_buggy.java
+++ b/tmp/43b9654a-d027-4bd6-9464-696ed3750c92_fixed.java
@@ -1,9 +1,20 @@
 public boolean hasSameMethod(Invocation candidate) {
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+    if (m1.equals(m2)) {
+        return true;
+    }
+
+    // Check if methods have the same name and parameter types
+    if (m1.getName().equals(m2.getName()) && 
+        Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes())) {
+        // Check if one method is from a generic interface and the other is from an implementing class
+        Class<?> declaringClass1 = m1.getDeclaringClass();
+        Class<?> declaringClass2 = m2.getDeclaringClass();
+        return (declaringClass1.isAssignableFrom(declaringClass2) || 
+                declaringClass2.isAssignableFrom(declaringClass1));
+    }
+
+    return false;
 }
\ No newline at end of file
