diff --git a/tmp/f415a70a-5ad3-44fb-9aec-c693c22d2749_buggy.java b/tmp/fe738e30-0587-476c-a94b-f7daaa698b92_fixed.java
index bf9c086..bbe066d 100644
--- a/tmp/f415a70a-5ad3-44fb-9aec-c693c22d2749_buggy.java
+++ b/tmp/fe738e30-0587-476c-a94b-f7daaa698b92_fixed.java
@@ -1,54 +1,54 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
 private void visitCall(NodeTraversal t, Node n) {
   Node child = n.getFirstChild();
   JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
   if (!childType.canBeCalled()) {
     report(t, n, NOT_CALLABLE, childType.toString());
     ensureTyped(t, n);
     return;
   }
 
   // A couple of types can be called as if they were functions.
   // If it is a function type, then validate parameters.
   if (childType instanceof FunctionType) {
     FunctionType functionType = (FunctionType) childType;
 
     boolean isExtern = false;
     JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
     if(functionJSDocInfo != null) {
       String sourceName = functionJSDocInfo.getSourceName();
       CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
+      isExtern = functionSource != null && functionSource.isExtern();
     }
 
     // Non-native constructors should not be called directly
     // unless they specify a return type and are defined
     // in an extern.
     if (functionType.isConstructor() &&
         !functionType.isNativeObjectType() &&
         (functionType.getReturnType().isUnknownType() ||
          functionType.getReturnType().isVoidType() ||
          !isExtern)) {
       report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
     }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
+    // Functions with explicit 'this' types must be called in a GETPROP
     // or GETELEM.
+    if (functionType.getTypeOfThis() != null &&
+        !functionType.getTypeOfThis().isUnknownType() &&
+        !functionType.getTypeOfThis().isVoidType() &&
+        !(child.isGetProp() || child.isGetElem())) {
+      report(t, n, FUNCTION_LITERAL_EXPECTED_THIS, 
+             functionType.getTypeOfThis().toString());
+    }
 
     visitParameterList(t, n, functionType);
     ensureTyped(t, n, functionType.getReturnType());
   } else {
     ensureTyped(t, n);
   }
 
   // TODO: Add something to check for calls of RegExp objects, which is not
   // supported by IE.  Either say something about the return type or warn
   // about the non-portability of the call or both.
 }
\ No newline at end of file
