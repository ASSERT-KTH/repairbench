diff --git a/tmp/377cbecd-cf89-4c57-9a61-0537b30453d3_buggy.java b/tmp/eb6bff33-d2a4-44f2-bc85-d5231f845a35_fixed.java
index f9a9b5b..cc60161 100644
--- a/tmp/377cbecd-cf89-4c57-9a61-0537b30453d3_buggy.java
+++ b/tmp/eb6bff33-d2a4-44f2-bc85-d5231f845a35_fixed.java
@@ -1,30 +1,53 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Use the constructor if specified in settings
+        if (settings.getConstructorArgs() != null) {
+            mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs());
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+        
+        // Handle outer instance for inner classes
+        if (settings.getOuterClassInstance() != null) {
+            Field outerClassField = mockedProxyType.getDeclaredField("this$0");
+            outerClassField.setAccessible(true);
+            outerClassField.set(mockInstance, settings.getOuterClassInstance());
+        }
+        
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+        // Call any initializers or post-construct methods
+        if (settings.getTypeToMock().getDeclaredConstructors().length > 0) {
+            for (Method method : settings.getTypeToMock().getDeclaredMethods()) {
+                if (method.isAnnotationPresent(PostConstruct.class)) {
+                    method.setAccessible(true);
+                    method.invoke(mockInstance);
+                }
+            }
+        }
+
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+    } catch (org.mockito.internal.creation.instance.InstantiationException | NoSuchFieldException | IllegalAccessException | InvocationTargetException e) {
         throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
     }
 }
\ No newline at end of file
