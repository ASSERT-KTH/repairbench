diff --git a/tmp/8b375d8d-389d-4d6c-b80e-c28d6c524fd2_buggy.java b/tmp/48bd4821-9f3f-4f25-8b6d-554ab14a4002_fixed.java
index f9a9b5b..b9cd8ac 100644
--- a/tmp/8b375d8d-389d-4d6c-b80e-c28d6c524fd2_buggy.java
+++ b/tmp/48bd4821-9f3f-4f25-8b6d-554ab14a4002_fixed.java
@@ -1,30 +1,54 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        if (settings.getConstructorArgs() != null) {
+            mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs());
+        } else if (settings.getOuterClassInstance() != null) {
+            mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getOuterClassInstance());
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+        
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+        if (settings.getDefaultAnswer() == CALLS_REAL_METHODS) {
+            // Call the real constructor
+            constructorCall(mockInstance, settings);
+        }
+
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ),cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
         throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
     }
 }
+
+private <T> void constructorCall(T mockInstance, MockCreationSettings<T> settings) {
+    try {
+        if (settings.getOuterClassInstance() != null) {
+            settings.getTypeToMock().getDeclaredConstructor(settings.getOuterClassInstance().getClass()).newInstance(settings.getOuterClassInstance());
+        } else {
+            settings.getTypeToMock().getDeclaredConstructor().newInstance();
+        }
+    } catch (Exception e) {
+        // Ignore exceptions during real constructor call
+    }
+}
\ No newline at end of file
