diff --git a/tmp/35f91de5-211f-4583-bc58-d645a1149f14_buggy.java b/tmp/cf40463e-b49e-4281-9551-924c42b1ab06_fixed.java
index f9a9b5b..3fa0a46 100644
--- a/tmp/35f91de5-211f-4583-bc58-d645a1149f14_buggy.java
+++ b/tmp/cf40463e-b49e-4281-9551-924c42b1ab06_fixed.java
@@ -1,30 +1,53 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Use settings to determine if we should use a constructor
+        if (settings.isUsingConstructor()) {
+            mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs(), settings.getOuterClassInstance());
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+        // Call any initialization methods if necessary
+        if (settings.isUsingConstructor() && settings.getDefaultAnswer() == CALLS_REAL_METHODS) {
+            callRealMethodsForInitialization(mockInstance);
+        }
+
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ),cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
         throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
     }
 }
+
+private <T> void callRealMethodsForInitialization(T mockInstance) {
+    try {
+        for (Method method : mockInstance.getClass().getDeclaredMethods()) {
+            if (method.getName().startsWith("$init") && method.getParameterCount() == 0) {
+                method.setAccessible(true);
+                method.invoke(mockInstance);
+            }
+        }
+    } catch (Exception e) {
+        // Ignore exceptions during initialization
+    }
+}
\ No newline at end of file
