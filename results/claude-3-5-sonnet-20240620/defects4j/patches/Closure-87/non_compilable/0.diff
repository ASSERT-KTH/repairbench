diff --git a/tmp/86ef7db9-e25c-4eea-a906-5bee0cbd08bd_buggy.java b/tmp/cf979d08-af7a-4e64-901a-f03d5347916f_fixed.java
index 19fd63e..7c4b385 100644
--- a/tmp/86ef7db9-e25c-4eea-a906-5bee0cbd08bd_buggy.java
+++ b/tmp/cf979d08-af7a-4e64-901a-f03d5347916f_fixed.java
@@ -1,24 +1,33 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
       // IE has a bug where event handlers behave differently when
       // their return value is used vs. when their return value is in
       // an EXPR_RESULT. It's pretty freaking weird. See:
       // http://code.google.com/p/closure-compiler/issues/detail?id=291
       // We try to detect this case, and not fold EXPR_RESULTs
       // into other expressions.
 
       // We only have to worry about methods with an implicit 'this'
       // param, or this doesn't happen.
 
+      // Check if the expression is a method call
+      if (maybeExpr.isExprResult() && maybeExpr.getFirstChild().isCall()) {
+        Node callNode = maybeExpr.getFirstChild();
+        if (callNode.getFirstChild().isGetProp()) {
+          // Don't fold if it's a method call on an object
+          return false;
+        }
+      }
+
       return NodeUtil.isExpressionNode(maybeExpr);
     }
   }
 
   return false;
 }
\ No newline at end of file
