diff --git a/tmp/91472deb-b0ca-44cc-9a63-8ff71da15e84_buggy.java b/tmp/b323a421-c42c-47d2-a51b-9f16b6acb774_fixed.java
index 4be01ab..72982c5 100644
--- a/tmp/91472deb-b0ca-44cc-9a63-8ff71da15e84_buggy.java
+++ b/tmp/b323a421-c42c-47d2-a51b-9f16b6acb774_fixed.java
@@ -1,115 +1,86 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
 
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
-
   StringBuilder builder = new StringBuilder();
-    builder.append(line);
+  boolean firstLine = true;
 
   state = State.SEARCHING_ANNOTATION;
-    token = next();
-
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
 
   do {
     switch (token) {
       case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
         if (builder.length() > 0) {
           builder.append(' ');
         }
-
-            builder.append('*');
-          }
-
         token = next();
         continue;
 
       case EOL:
         if (option != WhitespaceOption.SINGLE_LINE) {
-            builder.append("\n");
+          if (!firstLine || option == WhitespaceOption.PRESERVE) {
+            builder.append('\n');
           }
-
-          ignoreStar = true;
+        }
+        firstLine = false;
         token = next();
         continue;
 
+      case EOF:
+      case EOC:
+      case ANNOTATION:
+        if (option != WhitespaceOption.PRESERVE) {
+          String multilineText = builder.toString().trim();
+          int endLineno = stream.getLineno();
+          int endCharno = stream.getCharno();
+
+          if (multilineText.length() > 0) {
+            jsdocBuilder.markText(multilineText, startLineno, startCharno,
+                endLineno, endCharno);
+          }
+
+          return new ExtractionInfo(multilineText, token);
+        }
+        // Fall through if preserving whitespace
+
       default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+        if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
           String multilineText = builder.toString();
-
-            if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
-            }
-
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
 
           if (multilineText.length() > 0) {
             jsdocBuilder.markText(multilineText, startLineno, startCharno,
                 endLineno, endCharno);
           }
 
           return new ExtractionInfo(multilineText, token);
         }
 
         if (builder.length() > 0) {
           builder.append(' ');
         }
+
         builder.append(toString(token));
 
-          line = stream.getRemainingJSDocLine();
+        String line = stream.getRemainingJSDocLine();
 
         if (option != WhitespaceOption.PRESERVE) {
           line = trimEnd(line);
         }
 
         builder.append(line);
+        firstLine = false;
         token = next();
     }
   } while (true);
 }
\ No newline at end of file
