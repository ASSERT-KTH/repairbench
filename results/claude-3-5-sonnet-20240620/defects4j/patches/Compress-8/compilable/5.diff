diff --git a/tmp/3140a1a5-27f8-4223-b656-91a0c330b279_buggy.java b/tmp/9d618064-76be-4f47-af3f-2674c1578425_fixed.java
index e087f95..29407b7 100644
--- a/tmp/3140a1a5-27f8-4223-b656-91a0c330b279_buggy.java
+++ b/tmp/9d618064-76be-4f47-af3f-2674c1578425_fixed.java
@@ -1,53 +1,56 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean hasDigits = false;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
+
         if (currentByte == 0) {
             break;
         }
 
-        // Skip leading spaces
+        // Skip leading spaces and zeros
         if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
             if (currentByte == (byte) ' ') {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Check for invalid characters
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
+
+        hasDigits = true;
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // Check if the input was valid
+    if (!hasDigits && !allNUL(buffer, offset, length)) {
+        throw new IllegalArgumentException("Invalid octal string");
     }
 
     return result;
 }
+
+private static boolean allNUL(final byte[] buffer, final int offset, final int length) {
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            return false;
+        }
+    }
+    return true;
+}
\ No newline at end of file
