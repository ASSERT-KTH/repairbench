diff --git a/tmp/9f0f2277-f4d1-4122-823c-615b31772d80_buggy.java b/tmp/f331c823-a64a-46bf-b0a5-3bd3203da794_fixed.java
index 4b7e1e4..43a92f3 100644
--- a/tmp/9f0f2277-f4d1-4122-823c-615b31772d80_buggy.java
+++ b/tmp/f331c823-a64a-46bf-b0a5-3bd3203da794_fixed.java
@@ -1,52 +1,66 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                // Invalid length, possibly a blank line
+                continue;
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (len == 0) {
+            // Blank line or invalid entry, skip to next line
+            while ((ch = i.read()) != -1 && ch != '\n');
+            if (ch == -1) {
+                break; // EOF
+            }
+            continue;
+        }
         // Get keyword
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while((ch = i.read()) != -1) {
             read++;
             if (ch == '='){ // end of keyword
                 final String keyword = coll.toString(CharsetNames.UTF_8);
                 // Get rest of entry
                 final int restLen = len - read;
+                if (restLen <= 0) {
+                    break; // Invalid entry, move to next
+                }
                 if (restLen == 1) { // only NL
                     headers.remove(keyword);
                 } else {
                     final byte[] rest = new byte[restLen];
                     final int got = IOUtils.readFully(i, rest);
                     if (got != restLen) {
                         throw new IOException("Failed to read "
                                               + "Paxheader. Expected "
                                               + restLen
                                               + " bytes, read "
                                               + got);
                     }
                     // Drop trailing NL
                     final String value = new String(rest, 0,
                                               restLen - 1, CharsetNames.UTF_8);
                     headers.put(keyword, value);
                 }
                 break;
             }
             coll.write((byte) ch);
         }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
         if (ch == -1){ // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
