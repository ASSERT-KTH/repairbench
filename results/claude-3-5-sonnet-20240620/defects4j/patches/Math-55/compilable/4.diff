diff --git a/tmp/97e7fa27-7d3d-4605-acec-084265cb5517_buggy.java b/tmp/1b8cbbc4-553e-4639-b3a7-4d61e789b6c1_fixed.java
index 1478ee1..b9bdc88 100644
--- a/tmp/97e7fa27-7d3d-4605-acec-084265cb5517_buggy.java
+++ b/tmp/1b8cbbc4-553e-4639-b3a7-4d61e789b6c1_fixed.java
@@ -1,24 +1,20 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute the cross product
+    double x = v1.y * v2.z - v1.z * v2.y;
+    double y = v1.z * v2.x - v1.x * v2.z;
+    double z = v1.x * v2.y - v1.y * v2.x;
 
+    // Handle cancellation errors
+    double scale = 1.0;
+    double maxAbs = Math.max(Math.abs(x), Math.max(Math.abs(y), Math.abs(z)));
+    if (maxAbs > 1e-12) {
+        if (maxAbs < 1e-100) {
+            scale = 1e80;
+        } else {
+            scale = 1.0 / maxAbs;
+        }
+    }
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    // Apply scaling to improve precision
+    return new Vector3D(x * scale, y * scale, z * scale).normalize();
 }
\ No newline at end of file
