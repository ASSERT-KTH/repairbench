diff --git a/tmp/52b48903-f232-4d3e-970a-dc29a3a0ca4b_buggy.java b/tmp/1097fb5c-6581-4b73-b9f4-b1046397f712_fixed.java
index 1478ee1..70da945 100644
--- a/tmp/52b48903-f232-4d3e-970a-dc29a3a0ca4b_buggy.java
+++ b/tmp/1097fb5c-6581-4b73-b9f4-b1046397f712_fixed.java
@@ -1,24 +1,16 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute the cross product
+    double x = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();
+    double y = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();
+    double z = v1.getX() * v2.getY() - v1.getY() * v2.getX();
+
+    // Normalize the result to handle potential cancellation
+    double norm = Math.sqrt(x * x + y * y + z * z);
+    if (norm != 0) {
+        x /= norm;
+        y /= norm;
+        z /= norm;
+    }
 
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    return new Vector3D(x, y, z);
 }
\ No newline at end of file
