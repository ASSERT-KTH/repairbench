diff --git a/tmp/c17004e0-222b-4462-b66f-6c7391912c72_buggy.java b/tmp/bd40d811-6ce3-460e-8a88-8e17a9c5cafd_fixed.java
index 1478ee1..6cad3dd 100644
--- a/tmp/c17004e0-222b-4462-b66f-6c7391912c72_buggy.java
+++ b/tmp/bd40d811-6ce3-460e-8a88-8e17a9c5cafd_fixed.java
@@ -1,24 +1,19 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute the cross product
+    double x = v1.y * v2.z - v1.z * v2.y;
+    double y = v1.z * v2.x - v1.x * v2.z;
+    double z = v1.x * v2.y - v1.y * v2.x;
 
+    // Compute the maximum absolute value of the components
+    double max = Math.max(Math.abs(x), Math.max(Math.abs(y), Math.abs(z)));
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    if (max > 0) {
+        // Scale up the result to avoid underflow
+        double scale = Math.pow(2, Math.getExponent(max) - 52);
+        x *= scale;
+        y *= scale;
+        z *= scale;
+    }
 
+    return new Vector3D(x, y, z);
 }
\ No newline at end of file
