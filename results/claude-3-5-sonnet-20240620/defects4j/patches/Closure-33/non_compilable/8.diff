diff --git a/tmp/db0a4818-cc10-41d1-b4fb-7dcc3b362c8b_buggy.java b/tmp/fc866c03-645e-47f0-924c-eb03ab266fff_fixed.java
index fb2b020..26b5f68 100644
--- a/tmp/db0a4818-cc10-41d1-b4fb-7dcc3b362c8b_buggy.java
+++ b/tmp/fc866c03-645e-47f0-924c-eb03ab266fff_fixed.java
@@ -1,27 +1,35 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
+      } else {
+        // If the property is already declared, ensure it's compatible
+        JSType existingType = getPropertyType(prop);
+        if (!existingType.isSubtypeOf(propType)) {
+          // If not compatible, update the property type to be the union
+          JSType unionType = existingType.getLeastSupertype(propType);
+          defineInferredProperty(prop, unionType, null);
+        }
       }
     }
   }
 }
\ No newline at end of file
