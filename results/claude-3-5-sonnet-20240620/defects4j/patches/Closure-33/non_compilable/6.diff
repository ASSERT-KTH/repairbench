diff --git a/tmp/dfe19410-2261-4e9f-9ee6-cdd491ca07a6_buggy.java b/tmp/61edb06e-d2c5-4f44-be55-d19adf76bfc1_fixed.java
index fb2b020..fa068b2 100644
--- a/tmp/dfe19410-2261-4e9f-9ee6-cdd491ca07a6_buggy.java
+++ b/tmp/61edb06e-d2c5-4f44-be55-d19adf76bfc1_fixed.java
@@ -1,27 +1,32 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
+          // Check if the property is optional
+          if (propType.isUnionType() && propType.toMaybeUnionType().getAlternates().contains(getNativeType(JSTypeNative.VOID_TYPE))) {
+            // For optional properties, we don't need to add them if they're not present
+            continue;
+          }
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
