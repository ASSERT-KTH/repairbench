diff --git a/tmp/d936a39e-992b-430c-be9f-6dadcb0fd4de_buggy.java b/tmp/25881c61-8300-4525-af83-a3e745a07cff_fixed.java
index fb2b020..5282502 100644
--- a/tmp/d936a39e-992b-430c-be9f-6dadcb0fd4de_buggy.java
+++ b/tmp/25881c61-8300-4525-af83-a3e745a07cff_fixed.java
@@ -1,27 +1,30 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
+        // Only define the inferred property if it's not already declared
+        if (getPropertyType(prop) == null) {
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
+}
\ No newline at end of file
