diff --git a/tmp/43f25a52-9cf5-44cd-9f2b-020085bc9280_buggy.java b/tmp/7cd94323-09fa-46ab-8f0c-02f4a23a6ad8_fixed.java
index fb2b020..546f104 100644
--- a/tmp/43f25a52-9cf5-44cd-9f2b-020085bc9280_buggy.java
+++ b/tmp/7cd94323-09fa-46ab-8f0c-02f4a23a6ad8_fixed.java
@@ -1,27 +1,36 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
+      } else {
+        // If the property is already declared, ensure it's compatible
+        JSType existingPropType = getPropertyType(prop);
+        if (existingPropType != null && !existingPropType.isSubtype(propType)) {
+          // If existing type is not a subtype of the constraint type,
+          // redefine it to be the intersection of both types
+          JSType newType = existingPropType.getGreatestSubtype(propType);
+          defineInferredProperty(prop, newType, null);
+        }
       }
     }
   }
 }
\ No newline at end of file
