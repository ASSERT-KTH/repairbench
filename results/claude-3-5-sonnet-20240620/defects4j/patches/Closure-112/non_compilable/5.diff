diff --git a/tmp/5dcd7bc7-de06-4c93-90b7-186762fe870d_buggy.java b/tmp/3510a51f-809b-42b0-b2cc-90029e4f7cea_fixed.java
index 63641d0..f9b4b7c 100644
--- a/tmp/5dcd7bc7-de06-4c93-90b7-186762fe870d_buggy.java
+++ b/tmp/3510a51f-809b-42b0-b2cc-90029e4f7cea_fixed.java
@@ -1,33 +1,36 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+  
+  // Check if the return type is a template type and replace it if necessary
+  JSType returnType = replacementFnType.getReturnType();
+  if (returnType.isTemplateType()) {
+    JSType replacedReturnType = replacer.replacement.getOrDefault(
+        (TemplateType) returnType, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+    n.setJSType(replacedReturnType);
+  } else {
+    n.setJSType(returnType);
+  }
 
   return replacer.madeChanges;
 }
\ No newline at end of file
