diff --git a/tmp/6aa743c4-736e-4b28-b5eb-0180751e5d99_buggy.java b/tmp/02b93690-0def-4edc-9070-f58ecd792379_fixed.java
index 63641d0..b28791c 100644
--- a/tmp/6aa743c4-736e-4b28-b5eb-0180751e5d99_buggy.java
+++ b/tmp/02b93690-0def-4edc-9070-f58ecd792379_fixed.java
@@ -1,33 +1,32 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
         return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+    
+    // Set the return type of the call node to the templated return type
+    JSType returnType = replacementFnType.getReturnType();
+    if (returnType.isTemplateType()) {
+        returnType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
+    }
+    n.setJSType(returnType);
 
     return replacer.madeChanges;
 }
\ No newline at end of file
