diff --git a/tmp/9da9cdb4-3cce-4cf6-a7e1-924ebea38e55_buggy.java b/tmp/5e98f13c-13c9-44b0-a386-2657a4824fde_fixed.java
index 63641d0..f0fed9a 100644
--- a/tmp/9da9cdb4-3cce-4cf6-a7e1-924ebea38e55_buggy.java
+++ b/tmp/5e98f13c-13c9-44b0-a386-2657a4824fde_fixed.java
@@ -1,33 +1,34 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+  
+  // Use getReturnType() only if it's not null
+  JSType returnType = replacementFnType.getReturnType();
+  if (returnType != null) {
+    n.setJSType(returnType);
+  } else {
+    n.setJSType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+  }
 
   return replacer.madeChanges;
 }
\ No newline at end of file
