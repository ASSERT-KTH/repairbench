diff --git a/tmp/752eba04-fc30-41a5-b552-a14e329b70f4_buggy.java b/tmp/563622a1-47f9-46ef-8a96-b999fa0e5b94_fixed.java
index d5b1b52..92229db 100644
--- a/tmp/752eba04-fc30-41a5-b552-a14e329b70f4_buggy.java
+++ b/tmp/563622a1-47f9-46ef-8a96-b999fa0e5b94_fixed.java
@@ -1,36 +1,42 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
     if (array1 == null) {
         return clone(array2);
     } else if (array2 == null) {
         return clone(array1);
     }
     final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+    final Class<?> type2 = array2.getClass().getComponentType();
+    final Class<?> commonType = findCommonSuperclass(type1, type2);
+    T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);
     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+    try {
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+    } catch (ArrayStoreException e) {
+        throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.getName(), e);
+    }
     return joinedArray;
 }
+
+private static Class<?> findCommonSuperclass(Class<?> c1, Class<?> c2) {
+    if (c1 == c2) {
+        return c1;
+    }
+    if (c1.isAssignableFrom(c2)) {
+        return c1;
+    }
+    if (c2.isAssignableFrom(c1)) {
+        return c2;
+    }
+    if (c1.isPrimitive() || c2.isPrimitive()) {
+        return Object.class;
+    }
+    Class<?> ancestor = c1;
+    while (ancestor != Object.class) {
+        if (ancestor.isAssignableFrom(c2)) {
+            return ancestor;
+        }
+        ancestor = ancestor.getSuperclass();
+    }
+    return Object.class;
+}
\ No newline at end of file
