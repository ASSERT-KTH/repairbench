diff --git a/tmp/e71f68ad-5e6a-48c1-bd3c-7fa0190fc407_buggy.java b/tmp/b6a2ac28-9a97-47ee-a6bc-386c432ba710_fixed.java
index d57736b..72e1c2f 100644
--- a/tmp/e71f68ad-5e6a-48c1-bd3c-7fa0190fc407_buggy.java
+++ b/tmp/b6a2ac28-9a97-47ee-a6bc-386c432ba710_fixed.java
@@ -1,39 +1,32 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
             typeToInfer =
                 getNativeType(VOID_TYPE).getLeastSupertype(propType);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
+      // Add properties from the original type that are not in the constraint
+      for (String prop : objType.getOwnPropertyNames()) {
+        if (!constraintObj.hasProperty(prop)) {
+          JSType propType = objType.getPropertyType(prop);
+          objType.defineInferredProperty(prop, propType, null);
+        }
+      }
     }
   }
 }
\ No newline at end of file
