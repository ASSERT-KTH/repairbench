diff --git a/tmp/99ebeaa8-d6d6-45e0-9157-314b498ad08b_buggy.java b/tmp/be7bc308-f356-4b6b-96be-c92754983a16_fixed.java
index c9da1b7..451d67f 100644
--- a/tmp/99ebeaa8-d6d6-45e0-9157-314b498ad08b_buggy.java
+++ b/tmp/be7bc308-f356-4b6b-96be-c92754983a16_fixed.java
@@ -1,33 +1,35 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
-
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
         }
 
         // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
             // [databind#667]: avoid one particular class of bogus problems
-
+            if (!oldOne.equals(newOne)) {
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+            }
+            // If they're equal, we don't need to throw an exception, just return
+            return;
+        }
         // otherwise, which one to choose?
         // new type more generic, use old
         // new type more specific, use it
     }
-        }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
