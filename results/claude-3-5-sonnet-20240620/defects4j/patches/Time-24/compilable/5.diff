diff --git a/tmp/f2969655-0443-4967-8b2f-dea01d7c0f34_buggy.java b/tmp/ade267f3-e3db-47b7-b9ad-191333b98031_fixed.java
index 99d6a44..8c68fd5 100644
--- a/tmp/f2969655-0443-4967-8b2f-dea01d7c0f34_buggy.java
+++ b/tmp/ade267f3-e3db-47b7-b9ad-191333b98031_fixed.java
@@ -1,58 +1,93 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
-        if (count > 0) {
-            // alter base year for parsing if first field is month or day
-            DurationField months = DurationFieldType.months().getField(iChrono);
-            DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
-                saveField(DateTimeFieldType.year(), iDefaultYear);
-                return computeMillis(resetFields, text);
+    
+    // Check if we have both week-of-year and year (or week-year) fields
+    boolean hasWeek = false;
+    boolean hasYear = false;
+    for (int i = 0; i < count; i++) {
+        DateTimeFieldType type = savedFields[i].iField.getType();
+        if (type == DateTimeFieldType.weekOfWeekyear()) {
+            hasWeek = true;
+        } else if (type == DateTimeFieldType.year() || type == DateTimeFieldType.weekyear()) {
+            hasYear = true;
+        }
+    }
+
+    // If we have both week and year, we need to handle the special case
+    if (hasWeek && hasYear) {
+        long millis = iMillis;
+        try {
+            for (int i = 0; i < count; i++) {
+                millis = savedFields[i].set(millis, resetFields);
+            }
+        } catch (IllegalFieldValueException e) {
+            if (text != null) {
+                e.prependMessage("Cannot parse \"" + text + '"');
+            }
+            throw e;
+        }
+
+        // Adjust the year if necessary
+        int weekYear = iChrono.weekyear().get(millis);
+        for (int i = 0; i < count; i++) {
+            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {
+                int year = savedFields[i].iValue;
+                if (year != weekYear) {
+                    millis = iChrono.weekyear().set(millis, year);
                 }
+                break;
+            }
+        }
+
+        if (iZone == null) {
+            millis -= iOffset;
+        } else {
+            int offset = iZone.getOffsetFromLocal(millis);
+            millis -= offset;
+            if (offset != iZone.getOffset(millis)) {
+                String message = "Illegal instant due to time zone offset transition (" + iZone + ')';
+                if (text != null) {
+                    message = "Cannot parse \"" + text + "\": " + message;
+                }
+                throw new IllegalArgumentException(message);
+            }
+        }
+
+        return millis;
     }
 
+    // Original logic for other cases
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
-                String message =
-                    "Illegal instant due to time zone offset transition (" + iZone + ')';
+            String message = "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
