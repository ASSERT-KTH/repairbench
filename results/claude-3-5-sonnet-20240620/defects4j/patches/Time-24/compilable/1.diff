diff --git a/tmp/c3c1c6d7-fffa-4409-9be2-d36ab666d821_buggy.java b/tmp/fa903f0a-0ae4-49a3-b8cd-2ef6006a59c1_fixed.java
index 99d6a44..0dc8c5b 100644
--- a/tmp/c3c1c6d7-fffa-4409-9be2-d36ab666d821_buggy.java
+++ b/tmp/fa903f0a-0ae4-49a3-b8cd-2ef6006a59c1_fixed.java
@@ -1,58 +1,67 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
-            DurationField months = DurationFieldType.months().getField(iChrono);
-            DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
-                saveField(DateTimeFieldType.year(), iDefaultYear);
-                return computeMillis(resetFields, text);
+        // Check if we have week-based fields
+        boolean hasWeekBasedField = false;
+        for (int i = 0; i < count; i++) {
+            if (savedFields[i].iField.getDurationField().equals(DurationFieldType.weeks().getField(iChrono))) {
+                hasWeekBasedField = true;
+                break;
+            }
+        }
+        
+        // If we have week-based fields, we need to handle them differently
+        if (hasWeekBasedField) {
+            // First, set the year
+            long millis = iMillis;
+            for (int i = 0; i < count; i++) {
+                if (savedFields[i].iField.getDurationField().equals(DurationFieldType.years().getField(iChrono))) {
+                    millis = savedFields[i].set(millis, resetFields);
+                    break;
+                }
+            }
+            // Then set all other fields
+            for (int i = 0; i < count; i++) {
+                if (!savedFields[i].iField.getDurationField().equals(DurationFieldType.years().getField(iChrono))) {
+                    millis = savedFields[i].set(millis, resetFields);
+                }
+            }
+            return millis;
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
