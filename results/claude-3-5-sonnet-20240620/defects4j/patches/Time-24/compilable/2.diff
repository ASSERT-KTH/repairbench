diff --git a/tmp/5902d353-5487-46d1-844b-57249b53b389_buggy.java b/tmp/b1773dc9-b236-447a-92e1-e4f69259e433_fixed.java
index 99d6a44..d81964f 100644
--- a/tmp/5902d353-5487-46d1-844b-57249b53b389_buggy.java
+++ b/tmp/b1773dc9-b236-447a-92e1-e4f69259e433_fixed.java
@@ -1,58 +1,53 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
-        if (count > 0) {
-            // alter base year for parsing if first field is month or day
-            DurationField months = DurationFieldType.months().getField(iChrono);
-            DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
-                saveField(DateTimeFieldType.year(), iDefaultYear);
-                return computeMillis(resetFields, text);
+    
+    boolean weekyearSet = false;
+    boolean weekSet = false;
+    
+    for (int i = 0; i < count; i++) {
+        if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {
+            weekyearSet = true;
+        } else if (savedFields[i].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {
+            weekSet = true;
         }
     }
     
+    if (weekyearSet && !weekSet) {
+        saveField(DateTimeFieldType.weekOfWeekyear(), 1);
+    }
+    
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
