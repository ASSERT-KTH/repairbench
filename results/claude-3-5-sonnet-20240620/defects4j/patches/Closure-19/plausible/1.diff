diff --git a/tmp/bf05bdf1-5035-4783-8eb0-086a03b21774_buggy.java b/tmp/0f9c9188-286d-4ba0-82e2-91a21bff7208_fixed.java
index fa42cd9..cd43ec7 100644
--- a/tmp/bf05bdf1-5035-4783-8eb0-086a03b21774_buggy.java
+++ b/tmp/0f9c9188-286d-4ba0-82e2-91a21bff7208_fixed.java
@@ -1,27 +1,30 @@
 /**
  * Declares a refined type in {@code scope} for the name represented by
  * {@code node}. It must be possible to refine the type of the given node in
  * the given scope, as determined by {@link #getTypeIfRefinable}.
  */
 protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
     switch (node.getType()) {
         case Token.NAME:
             scope.inferSlotType(node.getString(), type);
             break;
 
         case Token.GETPROP:
             String qualifiedName = node.getQualifiedName();
             Preconditions.checkNotNull(qualifiedName);
 
             JSType origType = node.getJSType();
             origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
             scope.inferQualifiedSlot(node, qualifiedName, origType, type);
             break;
 
-        // "this" references aren't currently modeled in the CFG.
+        case Token.THIS:
+            // Handle "this" references
+            scope.inferQualifiedSlot(node, "this", getNativeType(UNKNOWN_TYPE), type);
+            break;
 
         default:
             throw new IllegalArgumentException("Node cannot be refined. \n" +
                     node.toStringTree());
     }
 }
\ No newline at end of file
