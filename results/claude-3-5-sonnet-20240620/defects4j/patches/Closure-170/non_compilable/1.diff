diff --git a/tmp/5c9795b3-94a3-4cf0-9b5a-44b9f61135c9_buggy.java b/tmp/45018ad8-929f-478b-9617-4222913ef409_fixed.java
index 5abdeb5..f281a41 100644
--- a/tmp/5c9795b3-94a3-4cf0-9b5a-44b9f61135c9_buggy.java
+++ b/tmp/45018ad8-929f-478b-9617-4222913ef409_fixed.java
@@ -1,29 +1,28 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
     numUsesWithinCfgNode = 0;
     AbstractCfgNodeTraversalCallback gatherCb =
         new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+            if (n.isName() && n.getString().equals(varName)) {
                 // We make a special exception when the entire cfgNode is a chain
                 // of assignments, since in that case the assignment statements
                 // will happen after the inlining of the right hand side.
                 // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
                 //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+                if (!(parent.isAssign() && parent.getFirstChild() == n) &&
+                    !(parent.isHook() && parent.getSecondChild() == n)) {
+                    // Don't count lhs of top-level assignment chain or hook condition
                     numUsesWithinCfgNode++;
                 }
             }
-
+        }
     };
 
     NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
