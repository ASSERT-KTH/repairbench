diff --git a/tmp/c09ca479-ee5e-4966-8053-45d6f62a2b0c_buggy.java b/tmp/8e3e985e-6869-4222-b898-fd02be8600d0_fixed.java
index b2db1d6..4367dcd 100644
--- a/tmp/c09ca479-ee5e-4966-8053-45d6f62a2b0c_buggy.java
+++ b/tmp/8e3e985e-6869-4222-b898-fd02be8600d0_fixed.java
@@ -1,29 +1,28 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
+            }
             /* Otherwise will have precedence, but must wait
              * until we find the real method (mixIn methods are
              * just placeholder, can't be called)
              */
-                } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+            // Always add the mixin method, regardless of whether a matching method was found
             mixIns.add(_constructMethod(m));
         }
     }
 }
\ No newline at end of file
-    }
