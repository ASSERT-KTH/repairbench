diff --git a/tmp/0adf9ae6-9c9a-4a4c-b289-5a4c274c6296_buggy.java b/tmp/fc220927-3f44-4610-8381-f261eec99eb2_fixed.java
index b2db1d6..dd79582 100644
--- a/tmp/0adf9ae6-9c9a-4a4c-b289-5a4c274c6296_buggy.java
+++ b/tmp/fc220927-3f44-4610-8381-f261eec99eb2_fixed.java
@@ -1,29 +1,28 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
+            }
             /* Otherwise will have precedence, but must wait
              * until we find the real method (mixIn methods are
              * just placeholder, can't be called)
              */
-                } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+            // Always add the method to mixIns, regardless of whether it's in methods or not
             mixIns.add(_constructMethod(m));
         }
     }
 }
\ No newline at end of file
-    }
