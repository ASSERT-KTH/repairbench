diff --git a/tmp/2fa71de4-dd3a-487c-8c44-9008124f36a5_buggy.java b/tmp/01e5bf68-939c-4de2-a78a-6cf8bd84dd7f_fixed.java
index 6c0aa19..fb96036 100644
--- a/tmp/2fa71de4-dd3a-487c-8c44-9008124f36a5_buggy.java
+++ b/tmp/01e5bf68-939c-4de2-a78a-6cf8bd84dd7f_fixed.java
@@ -1,20 +1,36 @@
 /**
  * @param encoding the encoding to use for file names, use null
  * for the platform's default encoding
  * @param useUnicodeExtraFields whether to use InfoZIP Unicode
  * Extra Fields (if present) to set the file names.
  * @param allowStoredEntriesWithDataDescriptor whether the stream
  * will try to read STORED entries that use a data descriptor
  * @since 1.1
  */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
                              boolean allowStoredEntriesWithDataDescriptor) {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
     in = new PushbackInputStream(inputStream, buf.capacity());
     this.allowStoredEntriesWithDataDescriptor =
         allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+    // Initialize the stream by reading the first entry
+    try {
+        readFirstEntry();
+    } catch (IOException e) {
+        // Handle the exception appropriately, perhaps by logging it
+        // or throwing a runtime exception
+    }
+}
+
+private void readFirstEntry() throws IOException {
+    try {
+        readLeadingBytes();
+        positionAtCentralDirectory();
+        archive = createZipArchiveEntry(currentEntry);
+    } finally {
+        entriesRead = 0;
+    }
 }
\ No newline at end of file
