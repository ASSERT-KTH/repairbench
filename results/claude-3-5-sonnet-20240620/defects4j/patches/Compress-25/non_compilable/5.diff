diff --git a/tmp/7b0ed5ff-71dd-49cd-84f1-c9498c448746_buggy.java b/tmp/ce0fcfa3-ff1c-43a4-a157-ee1134f62dec_fixed.java
index 6c0aa19..38040f0 100644
--- a/tmp/7b0ed5ff-71dd-49cd-84f1-c9498c448746_buggy.java
+++ b/tmp/ce0fcfa3-ff1c-43a4-a157-ee1134f62dec_fixed.java
@@ -1,20 +1,31 @@
 /**
  * @param encoding the encoding to use for file names, use null
  * for the platform's default encoding
  * @param useUnicodeExtraFields whether to use InfoZIP Unicode
  * Extra Fields (if present) to set the file names.
  * @param allowStoredEntriesWithDataDescriptor whether the stream
  * will try to read STORED entries that use a data descriptor
  * @since 1.1
  */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
-                                 boolean allowStoredEntriesWithDataDescriptor) {
+                             boolean allowStoredEntriesWithDataDescriptor) throws IOException {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
+    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;
+    
+    // Initialize buf
+    buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE);
+    
+    // Wrap input stream with PushbackInputStream
     in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+    
+    // Read first bytes
+    int n = IOUtils.readFully(in, buf.array());
+    if (n > 0) {
+        buf.limit(n);
+        pushback(buf.array(), 0, n);
+        buf.rewind();
+    }
 }
\ No newline at end of file
