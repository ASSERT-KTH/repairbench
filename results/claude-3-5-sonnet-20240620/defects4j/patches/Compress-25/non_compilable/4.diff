diff --git a/tmp/6cea3b54-bf50-4248-819d-108725c1e71d_buggy.java b/tmp/54494fcb-f5e7-4713-8854-76061cb4f662_fixed.java
index 6c0aa19..ad9c9bf 100644
--- a/tmp/6cea3b54-bf50-4248-819d-108725c1e71d_buggy.java
+++ b/tmp/54494fcb-f5e7-4713-8854-76061cb4f662_fixed.java
@@ -1,20 +1,34 @@
 /**
  * @param encoding the encoding to use for file names, use null
  * for the platform's default encoding
  * @param useUnicodeExtraFields whether to use InfoZIP Unicode
  * Extra Fields (if present) to set the file names.
  * @param allowStoredEntriesWithDataDescriptor whether the stream
  * will try to read STORED entries that use a data descriptor
  * @since 1.1
  */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
                              boolean allowStoredEntriesWithDataDescriptor) {
-        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
+    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
+    this.in = new PushbackInputStream(inputStream, buf.capacity());
     this.allowStoredEntriesWithDataDescriptor =
         allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+    // Initialize the stream
+    this.buf.limit(0);
+    this.closed = false;
+    this.hitCentralDirectory = false;
+    this.entry = null;
+    this.entriesRead = 0;
+    this.bytesReadFromStream = 0;
+    this.zipFileComment = null;
+    // Prepare to read the first entry
+    try {
+        readFirstRecord();
+    } catch (IOException e) {
+        // Handle the exception (you might want to log it or throw a runtime exception)
+        throw new RuntimeException("Failed to read the first record", e);
+    }
 }
\ No newline at end of file
