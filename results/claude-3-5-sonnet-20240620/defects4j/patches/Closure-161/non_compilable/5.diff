diff --git a/tmp/3759e97f-5a56-4d1c-942b-817da821247a_buggy.java b/tmp/a8e6cd85-225a-48d5-a1fb-d493113d36db_fixed.java
index 1303a19..877f39b 100644
--- a/tmp/3759e97f-5a56-4d1c-942b-817da821247a_buggy.java
+++ b/tmp/a8e6cd85-225a-48d5-a1fb-d493113d36db_fixed.java
@@ -1,45 +1,55 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType() != Token.NUMBER) {
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
 
+    if (NodeUtil.isLhsByDestructuring(n)) {
+        // If this is an assignment to a destructuring pattern, we can't fold it.
+        return n;
+    }
+
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
+    if (left.getType() != Token.ARRAYLIT) {
+        // We only fold array literals
+        return n;
+    }
+
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
         elem = elem.getNext();
     }
 
     if (elem == null) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
         elem = NodeUtil.newUndefinedNode(elem);
     } else {
         left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
