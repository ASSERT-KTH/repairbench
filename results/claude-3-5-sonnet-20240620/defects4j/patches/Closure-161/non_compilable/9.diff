diff --git a/tmp/c68a7e59-cc8e-4485-8e53-d174c30abe8a_buggy.java b/tmp/59a283fc-5dc2-4c8d-b7d7-42ae533cca28_fixed.java
index 1303a19..3d77a7e 100644
--- a/tmp/c68a7e59-cc8e-4485-8e53-d174c30abe8a_buggy.java
+++ b/tmp/59a283fc-5dc2-4c8d-b7d7-42ae533cca28_fixed.java
@@ -1,45 +1,51 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType() != Token.NUMBER) {
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
+    // Check if left is an array literal
+    if (left.isArrayLit()) {
         Node elem = left.getFirstChild();
         for (int i = 0; elem != null && i < intIndex; i++) {
             elem = elem.getNext();
         }
 
         if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+            // Don't report an error, just return the original node
             return n;
         }
 
         if (elem.getType() == Token.EMPTY) {
             elem = NodeUtil.newUndefinedNode(elem);
         } else {
             left.removeChild(elem);
         }
 
         // Replace the entire GETELEM with the value
         n.getParent().replaceChild(n, elem);
         reportCodeChange();
         return elem;
     }
+
+    // If left is not an array literal, return the original node
+    return n;
+}
\ No newline at end of file
