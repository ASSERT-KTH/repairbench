diff --git a/tmp/2329ef78-3a39-4131-8296-9e5575f1e41c_buggy.java b/tmp/b59a8c3c-22d2-4e7b-b56e-fa937814d4f8_fixed.java
index f650982..0509925 100644
--- a/tmp/2329ef78-3a39-4131-8296-9e5575f1e41c_buggy.java
+++ b/tmp/b59a8c3c-22d2-4e7b-b56e-fa937814d4f8_fixed.java
@@ -1,42 +1,50 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
+        
+        // Handle the case where l is an Iterator and r is not
+        if (l instanceof Iterator) {
+            Iterator<?> iterator = (Iterator<?>) l;
+            while (iterator.hasNext()) {
+                if (equal(iterator.next(), r)) {
+                    return true;
+                }
+            }
+            return false;
+        }
+        
         return equal(l, r);
     }
\ No newline at end of file
