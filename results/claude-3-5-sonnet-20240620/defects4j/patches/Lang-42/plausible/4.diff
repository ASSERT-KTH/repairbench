diff --git a/tmp/0596ab97-1f34-4a33-a2f9-b80c7cd36e45_buggy.java b/tmp/9f712b28-5540-4529-9313-57c0b3a249b3_fixed.java
index 822447c..97f0d9c 100644
--- a/tmp/0596ab97-1f34-4a33-a2f9-b80c7cd36e45_buggy.java
+++ b/tmp/9f712b28-5540-4529-9313-57c0b3a249b3_fixed.java
@@ -1,37 +1,28 @@
-    /**
-     * <p>
-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
-     * passed.
-     * </p>
-     * 
-     * @param writer
-     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
-     * @param str
-     *            The <code>String</code> to escape. Assumed to be a non-null value.
-     * @throws IOException
-     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
-     * 
-     * @see #escape(String)
-     * @see Writer
-     */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
     for (int i = 0; i < len; i++) {
         char c = str.charAt(i);
         String entityName = this.entityName(c);
         if (entityName == null) {
             if (c > 0x7F) {
+                if (Character.isHighSurrogate(c) && i + 1 < len) {
+                    int codePoint = Character.toCodePoint(c, str.charAt(i + 1));
+                    writer.write("&#");
+                    writer.write(Integer.toString(codePoint, 10));
+                    writer.write(';');
+                    i++; // Skip the low surrogate
+                } else {
                     writer.write("&#");
                     writer.write(Integer.toString(c, 10));
                     writer.write(';');
+                }
             } else {
                 writer.write(c);
             }
         } else {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
         }
     }
 }
\ No newline at end of file
