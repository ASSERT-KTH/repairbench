diff --git a/tmp/135685ab-72cb-4f02-b64e-92db5eed3128_buggy.java b/tmp/5a66d288-b9aa-4d08-ad54-86daf62bb4cc_fixed.java
index 10616db..f209402 100644
--- a/tmp/135685ab-72cb-4f02-b64e-92db5eed3128_buggy.java
+++ b/tmp/5a66d288-b9aa-4d08-ad54-86daf62bb4cc_fixed.java
@@ -1,19 +1,37 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+    
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
+        
+        // Handle leap year cases
+        if (partial.size() == 2 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth())) {
+            int month = values[0];
+            int day = values[1];
+            
+            // Adjust for leap years
+            if (day == 29 && month == 2) {
+                month += valueToAdd;
+                if (month <= 0) month += 12;
+                if (month > 12) month -= 12;
+                
+                if (month != 2) {
+                    day = Math.min(day, iChronology.getDaysInMonthMax(0, month));
+                }
+                
+                instant = iChronology.getDateTimeMillis(0, month, day, 0);
+                return iChronology.get(partial, instant);
+            }
+        }
+        
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
