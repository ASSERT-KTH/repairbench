diff --git a/tmp/e626fa1f-b2a5-40f4-85be-6d8e3b53d7b2_buggy.java b/tmp/667b9e36-069e-4a43-a228-6c0b76b7075f_fixed.java
index 10616db..5af5dfc 100644
--- a/tmp/e626fa1f-b2a5-40f4-85be-6d8e3b53d7b2_buggy.java
+++ b/tmp/667b9e36-069e-4a43-a228-6c0b76b7075f_fixed.java
@@ -1,19 +1,30 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+    
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        int[] newValues = iChronology.get(partial, instant);
+        
+        // Special handling for MonthDay to preserve day in month if possible
+        if (partial instanceof MonthDay) {
+            int originalDay = values[1];
+            int newMonth = newValues[0];
+            int maxDay = iChronology.getDaysInMonthMax(newMonth);
+            if (originalDay > maxDay) {
+                newValues[1] = maxDay;
+            } else {
+                newValues[1] = originalDay;
+            }
+        }
+        
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
