diff --git a/tmp/6374cb6c-727f-48d7-8b81-830855ba7a4e_buggy.java b/tmp/6fe455a1-4983-4332-83a6-8c2993419834_fixed.java
index 10616db..0a4abba 100644
--- a/tmp/6374cb6c-727f-48d7-8b81-830855ba7a4e_buggy.java
+++ b/tmp/6fe455a1-4983-4332-83a6-8c2993419834_fixed.java
@@ -1,19 +1,35 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+    
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
+        
+        // Special handling for MonthDay
+        if (partial instanceof MonthDay) {
+            int month = values[0];
+            int day = values[1];
+            
+            // Adjust day if it's 29th of February and we're moving to a non-leap year
+            if (day == 29 && month == 2) {
+                DurationField months = iChronology.months();
+                long newInstant = months.add(instant, valueToAdd);
+                if (iChronology.dayOfMonth().get(newInstant) != 29) {
+                    day = iChronology.dayOfMonth().getMaximumValue(newInstant);
+                }
+            }
+            
+            instant = iChronology.monthOfYear().set(0, month);
+            instant = iChronology.dayOfMonth().set(instant, day);
+        }
+        
         instant = add(instant, valueToAdd);
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
