diff --git a/tmp/cf272b7e-f7cf-47e7-adf3-ede3e06bfd11_buggy.java b/tmp/c7954cfc-c537-44e8-aa55-d2320c35cf77_fixed.java
index 10616db..42dd6b6 100644
--- a/tmp/cf272b7e-f7cf-47e7-adf3-ede3e06bfd11_buggy.java
+++ b/tmp/c7954cfc-c537-44e8-aa55-d2320c35cf77_fixed.java
@@ -1,19 +1,30 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+    
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        int[] newValues = iChronology.get(partial, instant);
+        
+        // Special handling for February 29th
+        if (partial.size() == 2 && partial.getFieldType(0) == DateTimeFieldType.monthOfYear() &&
+            partial.getFieldType(1) == DateTimeFieldType.dayOfMonth()) {
+            int month = newValues[0];
+            int day = newValues[1];
+            if (month == 2 && day == 28 && values[1] == 29) {
+                // If original day was 29 and new day is 28, it means we're in February
+                // and the target year is not a leap year. Keep it as 29.
+                newValues[1] = 29;
+            }
+        }
+        
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
