diff --git a/tmp/7fec8c66-d1ff-46fd-bcd1-ed659a1f02c5_buggy.java b/tmp/317483ca-fe1a-4cda-9d7e-3ca1cf85d0e9_fixed.java
index 544303b..7046404 100644
--- a/tmp/7fec8c66-d1ff-46fd-bcd1-ed659a1f02c5_buggy.java
+++ b/tmp/317483ca-fe1a-4cda-9d7e-3ca1cf85d0e9_fixed.java
@@ -1,29 +1,25 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    Set<Integer> basicRows = new HashSet<>();
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+        if (basicRow != null && !basicRows.contains(basicRow)) {
+            basicRows.add(basicRow);
+            coefficients[i] = getEntry(basicRow, getRhsOffset()) -
                 (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+        } else {
             coefficients[i] = 0;
         }
     }
-            }
-        }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
