diff --git a/tmp/0be79f7e-0768-4aa3-bf8f-0d7397e8c81b_buggy.java b/tmp/82dea273-07fe-4a50-8da2-8e8cfecefcb5_fixed.java
index fa6828a..609fe5a 100644
--- a/tmp/0be79f7e-0768-4aa3-bf8f-0d7397e8c81b_buggy.java
+++ b/tmp/82dea273-07fe-4a50-8da2-8e8cfecefcb5_fixed.java
@@ -1,5 +1,28 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
     for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        Optional<Object> candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);
+        if (candidate.isPresent()) {
+            Object mock = candidate.get();
+            if (field.getType().equals(mock.getClass())) {
+                // Exact type match, inject immediately
+                injectMock(field, fieldInstance, mock);
+                return;
+            }
+        }
+    }
+    
+    // If no exact match found, try ancestor types
+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)
+            .ifPresent(mock -> injectMock(field, fieldInstance, mock));
+    }
+}
+
+private void injectMock(Field field, Object fieldInstance, Object mock) {
+    try {
+        field.setAccessible(true);
+        field.set(fieldInstance, mock);
+    } catch (IllegalAccessException e) {
+        throw new RuntimeException("Could not inject mock into field " + field, e);
     }
 }
\ No newline at end of file
