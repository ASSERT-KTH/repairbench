diff --git a/tmp/be06e3d7-42ea-484f-8acd-e6353722dd78_buggy.java b/tmp/8914f145-36bd-4976-810e-e9f62a466111_fixed.java
index 25ca093..472f128 100644
--- a/tmp/be06e3d7-42ea-484f-8acd-e6353722dd78_buggy.java
+++ b/tmp/8914f145-36bd-4976-810e-e9f62a466111_fixed.java
@@ -1,52 +1,68 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    // Look for BOM
+    Charset charset = detectCharset(byteData);
+    if (charset != null) {
+        charsetName = charset.name();
+        docData = charset.decode(byteData).toString();
+    } else if (charsetName == null) {
+        // Determine from meta. Safe parse as UTF-8
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
+        // Specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+private static Charset detectCharset(ByteBuffer byteData) {
+    int firstFourBytes = byteData.getInt(0);
+    byteData.rewind();
+    switch (firstFourBytes) {
+        case 0x0000FEFF:
+            return StandardCharsets.UTF_32BE;
+        case 0xFFFE0000:
+            return StandardCharsets.UTF_32LE;
+        case 0xFEFF:
+            return StandardCharsets.UTF_16BE;
+        case 0xFFFE:
+            return StandardCharsets.UTF_16LE;
+        case 0xEFBBBF:
+            return StandardCharsets.UTF_8;
+        default:
+            return null;
+    }
+}
\ No newline at end of file
