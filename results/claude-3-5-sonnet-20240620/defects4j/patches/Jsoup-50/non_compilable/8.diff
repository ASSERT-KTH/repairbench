diff --git a/tmp/5e937e5c-f142-4330-8d55-e4bbe9168682_buggy.java b/tmp/39b5a2bc-a0bd-4be6-ad5c-e5e5c4ea7e10_fixed.java
index 25ca093..90c3063 100644
--- a/tmp/5e937e5c-f142-4330-8d55-e4bbe9168682_buggy.java
+++ b/tmp/39b5a2bc-a0bd-4be6-ad5c-e5e5c4ea7e10_fixed.java
@@ -1,52 +1,73 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM
+    Charset charset = detectCharsetFromBOM(byteData);
+    if (charset != null) {
+        charsetName = charset.name();
+        byteData.position(charset.equals(StandardCharsets.UTF_8) ? 3 : 2);
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    if (charsetName == null) {
+        // Determine from meta. Safe parse as UTF-8
+        docData = StandardCharsets.UTF_8.decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equalsIgnoreCase("UTF-8")) {
+                charsetName = foundCharset.trim().replaceAll("[\"']", "");
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                docData = Charset.forName(charsetName).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+private static Charset detectCharsetFromBOM(ByteBuffer byteData) {
+    if (byteData.remaining() < 2) {
+        return null;
+    }
+    
+    int firstByte = byteData.get(0) & 0xFF;
+    int secondByte = byteData.get(1) & 0xFF;
+    
+    if (firstByte == 0xFE && secondByte == 0xFF) {
+        return StandardCharsets.UTF_16BE;
+    } else if (firstByte == 0xFF && secondByte == 0xFE) {
+        if (byteData.remaining() >= 4 && byteData.get(2) == 0 && byteData.get(3) == 0) {
+            return Charset.forName("UTF-32LE");
+        }
+        return StandardCharsets.UTF_16LE;
+    } else if (byteData.remaining() >= 3 && firstByte == 0xEF && secondByte == 0xBB && (byteData.get(2) & 0xFF) == 0xBF) {
+        return StandardCharsets.UTF_8;
+    } else if (byteData.remaining() >= 4 && firstByte == 0 && secondByte == 0 && (byteData.get(2) & 0xFF) == 0xFE && (byteData.get(3) & 0xFF) == 0xFF) {
+        return Charset.forName("UTF-32BE");
+    }
+    
+    return null;
+}
\ No newline at end of file
