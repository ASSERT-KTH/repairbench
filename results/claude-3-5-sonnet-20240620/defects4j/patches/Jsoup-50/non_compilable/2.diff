diff --git a/tmp/a5bbde50-10f9-4746-9e96-f7ec211167a6_buggy.java b/tmp/8cec7f47-8d85-4d2f-9bd0-de5937f8c2a0_fixed.java
index 25ca093..b1e0b8f 100644
--- a/tmp/a5bbde50-10f9-4746-9e96-f7ec211167a6_buggy.java
+++ b/tmp/8cec7f47-8d85-4d2f-9bd0-de5937f8c2a0_fixed.java
@@ -1,52 +1,68 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM
+    Charset charset = detectCharsetFromBOM(byteData);
+    if (charset != null) {
+        charsetName = charset.name();
+        byteData.position(charset == StandardCharsets.UTF_8 ? 3 : 2);
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    if (charsetName == null) {
+        // Determine from meta. Safe parse as UTF-8
+        docData = StandardCharsets.UTF_8.decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(StandardCharsets.UTF_8.name())) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+private static Charset detectCharsetFromBOM(ByteBuffer byteData) {
+    if (byteData.remaining() >= 4) {
+        int b1 = byteData.get(0) & 0xFF;
+        int b2 = byteData.get(1) & 0xFF;
+        int b3 = byteData.get(2) & 0xFF;
+        int b4 = byteData.get(3) & 0xFF;
+
+        if (b1 == 0xFE && b2 == 0xFF) return StandardCharsets.UTF_16BE;
+        if (b1 == 0xFF && b2 == 0xFE) {
+            if (b3 == 0x00 && b4 == 0x00) return Charset.forName("UTF-32LE");
+            return StandardCharsets.UTF_16LE;
+        }
+        if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) return StandardCharsets.UTF_8;
+        if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) return Charset.forName("UTF-32BE");
+    }
+    return null;
+}
\ No newline at end of file
