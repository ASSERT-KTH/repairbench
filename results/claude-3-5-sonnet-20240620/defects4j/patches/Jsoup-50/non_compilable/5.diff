diff --git a/tmp/fa565156-90ba-4c61-befb-e9974482f3cd_buggy.java b/tmp/75e11c57-93a0-4dea-9cfe-c2a3a58f3895_fixed.java
index 25ca093..1b82c2d 100644
--- a/tmp/fa565156-90ba-4c61-befb-e9974482f3cd_buggy.java
+++ b/tmp/75e11c57-93a0-4dea-9cfe-c2a3a58f3895_fixed.java
@@ -1,52 +1,51 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM and determine charset
+    Charset charset = detectCharset(byteData, charsetName);
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
-                if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
-                    }
-                }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+    // Decode the data using the detected or specified charset
     byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
+    docData = charset.decode(byteData).toString();
+
+    // Remove BOM if present
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
-        if (doc == null) {
+
+    // Parse the document
     doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
-        }
+    doc.outputSettings().charset(charset.name());
+
     return doc;
 }
+
+private static Charset detectCharset(ByteBuffer byteData, String charsetName) {
+    if (charsetName != null) {
+        return Charset.forName(charsetName);
+    }
+
+    // Check for BOM
+    byteData.mark();
+    byte[] bom = new byte[4];
+    if (byteData.remaining() >= 4) {
+        byteData.get(bom);
+    }
+    byteData.reset();
+
+    if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+        return StandardCharsets.UTF_8;
+    } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+        return StandardCharsets.UTF_16BE;
+    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+        return StandardCharsets.UTF_16LE;
+    } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+        return Charset.forName("UTF-32BE");
+    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+        return Charset.forName("UTF-32LE");
+    }
+
+    // If no BOM is detected, use the default charset (UTF-8)
+    return StandardCharsets.UTF_8;
+}
\ No newline at end of file
