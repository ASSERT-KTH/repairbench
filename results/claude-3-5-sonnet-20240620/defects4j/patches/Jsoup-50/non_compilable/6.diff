diff --git a/tmp/458d0a60-0e19-4563-be85-de539123a96b_buggy.java b/tmp/a6f50b07-d5b5-4180-b03c-b51bb93534ba_fixed.java
index 25ca093..47ec10c 100644
--- a/tmp/458d0a60-0e19-4563-be85-de539123a96b_buggy.java
+++ b/tmp/a6f50b07-d5b5-4180-b03c-b51bb93534ba_fixed.java
@@ -1,52 +1,75 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
-        Document doc = null;
+    // Check for BOM first
+    Charset charset = detectCharsetFromBOM(byteData);
+    if (charset == null) {
+        if (charsetName == null) {
+            charset = Charset.forName(defaultCharset);
+        } else {
+            charset = Charset.forName(charsetName);
+        }
+    }
 
-        // look for BOM - overrides any other header or input
+    byteData.rewind();
+    String docData = charset.decode(byteData).toString();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+    // Remove BOM if present
+    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+        docData = docData.substring(1);
+    }
+
+    Document doc = parser.parseInput(docData, baseUri);
+
+    // Check for <meta> charset
     Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+    if (meta != null) {
         String foundCharset = null;
         if (meta.hasAttr("http-equiv")) {
             foundCharset = getCharsetFromContentType(meta.attr("content"));
         }
         if (foundCharset == null && meta.hasAttr("charset")) {
             try {
                 if (Charset.isSupported(meta.attr("charset"))) {
                     foundCharset = meta.attr("charset");
                 }
             } catch (IllegalCharsetNameException e) {
                 foundCharset = null;
             }
         }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+        if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equalsIgnoreCase(charset.name())) {
+            // Re-decode with the new charset
+            charset = Charset.forName(foundCharset);
             byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
+            docData = charset.decode(byteData).toString();
             if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
             }
-        if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
         }
+    }
+
+    doc.outputSettings().charset(charset);
     return doc;
 }
+
+private static Charset detectCharsetFromBOM(ByteBuffer byteData) {
+    if (byteData.remaining() < 4) {
+        return null;
+    }
+    int firstFourBytes = byteData.getInt(0);
+    byteData.rewind();
+    switch (firstFourBytes) {
+        case 0x0000FEFF:
+            return StandardCharsets.UTF_32BE;
+        case 0xFFFE0000:
+            return StandardCharsets.UTF_32LE;
+        case 0xFEFF:
+            return StandardCharsets.UTF_16BE;
+        case 0xFFFE:
+            return StandardCharsets.UTF_16LE;
+        case 0xEFBBBF:
+            return StandardCharsets.UTF_8;
+        default:
+            return null;
+    }
+}
\ No newline at end of file
