diff --git a/tmp/b1af78c4-b27e-4432-ba56-c6de734bd2ed_buggy.java b/tmp/14d7ff54-df24-4225-bae6-3ffa45b76456_fixed.java
index 25ca093..1b5db88 100644
--- a/tmp/b1af78c4-b27e-4432-ba56-c6de734bd2ed_buggy.java
+++ b/tmp/14d7ff54-df24-4225-bae6-3ffa45b76456_fixed.java
@@ -1,52 +1,62 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
-        Document doc = null;
+    // Check for BOM first
+    String bomCharset = detectCharsetFromBOM(byteData);
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+    if (charsetName == null) {
+        // If charset is not specified, try to detect from meta tags
+        String docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        Document doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
+                charsetName = foundCharset.trim().replaceAll("[\"']", "");
+            } else {
+                charsetName = defaultCharset;
             }
+        } else {
+            charsetName = defaultCharset;
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+
+    // Decode the data with the determined charset
     byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
+    String docData = Charset.forName(charsetName).decode(byteData).toString();
+    Document doc = parser.parseInput(docData, baseUri);
     doc.outputSettings().charset(charsetName);
-        }
     return doc;
 }
+
+private static String detectCharsetFromBOM(ByteBuffer byteData) {
+    if (byteData.remaining() >= 4) {
+        int b1 = byteData.get(0) & 0xFF;
+        int b2 = byteData.get(1) & 0xFF;
+        int b3 = byteData.get(2) & 0xFF;
+        int b4 = byteData.get(3) & 0xFF;
+
+        if (b1 == 0xFE && b2 == 0xFF) return "UTF-16BE";
+        if (b1 == 0xFF && b2 == 0xFE) {
+            if (b3 == 0x00 && b4 == 0x00) return "UTF-32LE";
+            return "UTF-16LE";
+        }
+        if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) return "UTF-32BE";
+        if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) return "UTF-8";
+    }
+    return null;
+}
\ No newline at end of file
