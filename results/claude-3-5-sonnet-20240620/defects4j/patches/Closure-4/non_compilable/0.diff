diff --git a/tmp/5f347994-d103-41c2-b0fe-0dd993893c7b_buggy.java b/tmp/65e2983f-6cb0-4b3e-8ca8-90434ce4f6fc_fixed.java
index d6a560a..e81d2eb 100644
--- a/tmp/5f347994-d103-41c2-b0fe-0dd993893c7b_buggy.java
+++ b/tmp/65e2983f-6cb0-4b3e-8ca8-90434ce4f6fc_fixed.java
@@ -1,33 +1,37 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Prevent infinite recursion
+    if (isResolvingTypeDeclaration()) {
+        handleTypeCycle(t);
+        return this;
+    }
+
+    setResolvingTypeDeclaration(true);
+    try {
         boolean resolved = resolveViaRegistry(t, enclosing);
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
+            return this;
         }
 
         if (resolved) {
             super.resolveInternal(t, enclosing);
             finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+            return registry.isLastGeneration() ? getReferencedType() : this;
         }
 
         resolveViaProperties(t, enclosing);
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
+            return this;
         }
 
         super.resolveInternal(t, enclosing);
         if (isResolved()) {
             finishPropertyContinuations();
         }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+        return registry.isLastGeneration() ? getReferencedType() : this;
+    } finally {
+        setResolvingTypeDeclaration(false);
+    }
 }
\ No newline at end of file
