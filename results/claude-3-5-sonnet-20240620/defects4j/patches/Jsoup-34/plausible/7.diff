diff --git a/tmp/088acd7d-89e0-4252-a9d2-816f3921f687_buggy.java b/tmp/16bf98e1-460b-465b-b6e9-8cfcd8b55a23_fixed.java
index 21f64c6..47fee7c 100644
--- a/tmp/088acd7d-89e0-4252-a9d2-816f3921f687_buggy.java
+++ b/tmp/16bf98e1-460b-465b-b6e9-8cfcd8b55a23_fixed.java
@@ -1,23 +1,20 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
+        if (startChar != input[offset]) {
             while(++offset < length && startChar != input[offset]);
+        }
+        if (offset < length) {
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (last <= length) {
+                int j = 1;
+                for (; i < last && j < seq.length() && seq.charAt(j) == input[i]; i++, j++);
+                if (j == seq.length()) // found full sequence
                     return offset - pos;
             }
         }
+    }
     return -1;
 }
\ No newline at end of file
