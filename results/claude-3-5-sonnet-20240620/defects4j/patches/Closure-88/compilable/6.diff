diff --git a/tmp/bca17af4-e338-474a-b978-623eff245b4b_buggy.java b/tmp/34c93582-1d20-44f9-8cf1-6b79ad57abd5_fixed.java
index 9353941..4415533 100644
--- a/tmp/bca17af4-e338-474a-b978-623eff245b4b_buggy.java
+++ b/tmp/34c93582-1d20-44f9-8cf1-6b79ad57abd5_fixed.java
@@ -1,30 +1,35 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
+        if (state == VariableLiveness.READ && NodeUtil.isAssignmentOp(n)) {
+          // If we're in an assignment operation and we've found a READ,
+          // we need to keep looking to see if there's a KILL afterwards.
+          continue;
+        }
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
