diff --git a/tmp/1a16a37c-c903-41d1-b52b-7a0e3f53ed87_buggy.java b/tmp/d37c87d3-5301-4828-ad8a-53c80b617c5c_fixed.java
index 9353941..82bb8a3 100644
--- a/tmp/1a16a37c-c903-41d1-b52b-7a0e3f53ed87_buggy.java
+++ b/tmp/d37c87d3-5301-4828-ad8a-53c80b617c5c_fixed.java
@@ -1,30 +1,34 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      if (n.getParent().isAssign() && n.getNext() != null) {
+        // For simple assignments (=), check the RHS for reads
+        VariableLiveness state = isVariableReadBeforeKill(n.getNext(), variable);
+        if (state == VariableLiveness.READ) {
+          return VariableLiveness.READ;
+        }
+      }
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
