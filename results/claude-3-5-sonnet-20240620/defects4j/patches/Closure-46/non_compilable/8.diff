diff --git a/tmp/b7abc6c0-836d-4208-b32a-77334d7dbd8c_buggy.java b/tmp/9ead85c7-9535-483e-a086-e3bdce5144f3_fixed.java
index 46817a7..235c1ec 100644
--- a/tmp/b7abc6c0-836d-4208-b32a-77334d7dbd8c_buggy.java
+++ b/tmp/9ead85c7-9535-483e-a086-e3bdce5144f3_fixed.java
@@ -1,16 +1,25 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getOwnPropertyNames());
+    
+    for (String property : allProperties) {
+        if (hasProperty(property) && that.toMaybeRecordType().hasProperty(property)) {
+            JSType thisType = getPropertyType(property);
+            JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+            if (thisType.isEquivalentTo(thatType)) {
+                builder.addProperty(property, thisType, getPropertyNode(property));
             }
         }
-    return builder.build();
+    }
+    
+    JSType built = builder.build();
+    if (built.isEmptyType()) {
+        return registry.createUnionType(this, that);
+    }
+    return built;
 }
\ No newline at end of file
