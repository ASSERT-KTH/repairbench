diff --git a/tmp/2f590783-775b-4a45-a4af-869d9accdd06_buggy.java b/tmp/046ba8d1-0e06-4a36-a8a3-9918db63f87b_fixed.java
index 46817a7..096ff3b 100644
--- a/tmp/2f590783-775b-4a45-a4af-869d9accdd06_buggy.java
+++ b/tmp/046ba8d1-0e06-4a36-a8a3-9918db63f87b_fixed.java
@@ -1,16 +1,26 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getOwnPropertyNames());
+    
+    for (String property : allProperties) {
+        if (hasProperty(property) && that.toMaybeRecordType().hasProperty(property)) {
+            JSType thisPropertyType = getPropertyType(property);
+            JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);
+            if (thisPropertyType.isEquivalentTo(thatPropertyType)) {
+                builder.addProperty(property, thisPropertyType, getPropertyNode(property));
             }
         }
-    return builder.build();
+    }
+    
+    JSType builtType = builder.build();
+    if (builtType.isEquivalentTo(this) && builtType.isEquivalentTo(that)) {
+        return builtType;
+    } else {
+        return registry.createUnionType(this, that);
+    }
 }
\ No newline at end of file
