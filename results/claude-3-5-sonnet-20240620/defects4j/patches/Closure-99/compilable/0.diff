diff --git a/tmp/250be687-e6af-4298-bd58-17bb6781e0cd_buggy.java b/tmp/9317543a-41b2-4c17-ab81-d814361555a9_fixed.java
index 86553f4..0343882 100644
--- a/tmp/250be687-e6af-4298-bd58-17bb6781e0cd_buggy.java
+++ b/tmp/9317543a-41b2-4c17-ab81-d814361555a9_fixed.java
@@ -1,57 +1,46 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+         jsDoc.isOverride() ||
+         jsDoc.isInterface())) {
       return false;
     }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN)) {
       return false;
     }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
     
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      if (lhs.getType() == Token.GETPROP) {
+        Node obj = lhs.getFirstChild();
+        Node prop = lhs.getLastChild();
+        if (prop.getString().equals("prototype") ||
+            (obj.getType() == Token.GETPROP && obj.getLastChild().getString().equals("prototype"))) {
           return false;
         }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+      }
+      if (lhs.getQualifiedName() != null && 
+          (lhs.getQualifiedName().contains(".prototype.") || lhs.getQualifiedName().endsWith(".prototype"))) {
         return false;
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
