diff --git a/tmp/29b78cf9-63e8-4f43-b251-3d37595fd7c8_buggy.java b/tmp/d7440d49-bc97-42a2-9b09-4702e16765c9_fixed.java
index 862c60c..b8fde9c 100644
--- a/tmp/29b78cf9-63e8-4f43-b251-3d37595fd7c8_buggy.java
+++ b/tmp/d7440d49-bc97-42a2-9b09-4702e16765c9_fixed.java
@@ -1,25 +1,31 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = this.nextSibling();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank()) return;
 
         if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank()))
             indent(accum, depth, out);
     }
 
+    // Ensure we handle the case where the next sibling is a BR tag
+    Node nextSibling = nextSibling();
+    if (nextSibling != null && nextSibling.nodeName().equals("br")) {
+        accum.append("\n");
+    }
+
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
