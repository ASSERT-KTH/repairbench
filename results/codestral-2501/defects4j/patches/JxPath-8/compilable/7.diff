diff --git a/tmp/88888ed6-86ad-47ea-b0df-a449dc979cf5_buggy.java b/tmp/a854fbe1-c783-4d51-89a2-03dc707e0a01_fixed.java
index 98d89dc..b41b04b 100644
--- a/tmp/88888ed6-86ad-47ea-b0df-a449dc979cf5_buggy.java
+++ b/tmp/a854fbe1-c783-4d51-89a2-03dc707e0a01_fixed.java
@@ -1,23 +1,31 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN comparisons correctly
+    if (Double.isNaN(ld) && Double.isNaN(rd)) {
+        return true; // NaN is equal to NaN
+    } else if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        return false; // NaN is not equal to any other number
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
