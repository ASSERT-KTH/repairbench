diff --git a/tmp/e3a7578f-3fa1-4991-8af0-4e2c4e4900e3_buggy.java b/tmp/fb393ef7-6165-41b2-afa7-88c31099c117_fixed.java
index be2af16..6897a10 100644
--- a/tmp/e3a7578f-3fa1-4991-8af0-4e2c4e4900e3_buggy.java
+++ b/tmp/fb393ef7-6165-41b2-afa7-88c31099c117_fixed.java
@@ -1,29 +1,34 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
     // Assume date is Gregorian.
     long instant;
+    try {
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
+    } catch (IllegalArgumentException e) {
         // Maybe it's Julian.
+        try {
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
                 // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+        } catch (IllegalArgumentException e2) {
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
     }
     return instant;
 }
\ No newline at end of file
