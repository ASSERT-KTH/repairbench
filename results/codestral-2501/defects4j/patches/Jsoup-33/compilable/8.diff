diff --git a/tmp/f38f0ace-6fa2-4ad4-b359-c95823c3a85f_buggy.java b/tmp/c88d34c5-b076-4e02-969a-3a4d28ba0c45_fixed.java
index dc93be3..f82b5ed 100644
--- a/tmp/f38f0ace-6fa2-4ad4-b359-c95823c3a85f_buggy.java
+++ b/tmp/c88d34c5-b076-4e02-969a-3a4d28ba0c45_fixed.java
@@ -1,14 +1,22 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
         stack.add(el);
         tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
         return el;
     }
 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    if (!startTag.isSelfClosing()) {
         insert(el);
+    } else {
+        // Handle self-closing tags that should not be self-closing
+        if (Tag.valueOf(startTag.name()).isKnownTag()) {
+            tokeniser.emit(new Token.EndTag(el.tagName()));
+        }
+        insert(el);
+    }
     return el;
 }
\ No newline at end of file
