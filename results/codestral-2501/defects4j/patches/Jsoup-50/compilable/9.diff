diff --git a/tmp/4f36f0ab-d08f-4532-bf7b-219182bb5572_buggy.java b/tmp/ae0e9fa6-7b54-4b89-8a9b-47561a2b5b72_fixed.java
index 25ca093..952cb11 100644
--- a/tmp/4f36f0ab-d08f-4532-bf7b-219182bb5572_buggy.java
+++ b/tmp/ae0e9fa6-7b54-4b89-8a9b-47561a2b5b72_fixed.java
@@ -1,52 +1,85 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
+    String docData = null;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Determine charset from BOM if available
+    Charset bomCharset = getCharsetFromBOM(byteData);
+    if (bomCharset != null) {
+        charsetName = bomCharset.name();
+        byteData.rewind();
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    if (charsetName == null) {
+        // Determine charset from meta tags
+        docData = Charset.forName("UTF-8").decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.equals("UTF-8")) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
+        // Charset specified by content type header or user
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+
+    if (docData != null && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
         byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = Charset.forName("UTF-8").decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
+        charsetName = "UTF-8";
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
+
+private static Charset getCharsetFromBOM(ByteBuffer byteData) {
+    byteData.mark();
+    if (byteData.remaining() >= 4) {
+        int bom = byteData.getInt(0);
+        switch (bom) {
+            case 0x0000FEFF:
+                return Charset.forName("UTF-32BE");
+            case 0xFFFE0000:
+                return Charset.forName("UTF-32LE");
+            case 0x0000FFFE:
+                return Charset.forName("UTF-16BE");
+            case 0xFEFF0000:
+                return Charset.forName("UTF-16LE");
+            case 0xEFBBBF:
+                return Charset.forName("UTF-8");
+            default:
+                byteData.reset();
+                return null;
+        }
+    }
+    byteData.reset();
+    return null;
+}
\ No newline at end of file
