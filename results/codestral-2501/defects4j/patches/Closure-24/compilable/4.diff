diff --git a/tmp/90f6e429-cefa-42e6-8102-f27d8fef8407_buggy.java b/tmp/d473d558-31ba-4af5-b5a5-bc59eb2067a1_fixed.java
index 602226b..918e403 100644
--- a/tmp/90f6e429-cefa-42e6-8102-f27d8fef8407_buggy.java
+++ b/tmp/d473d558-31ba-4af5-b5a5-bc59eb2067a1_fixed.java
@@ -1,26 +1,21 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
       } else {
         // TODO(robbyw): Support using locals for private variables.
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
