diff --git a/tmp/946ae491-c768-4c45-a23c-c901ae2507f2_buggy.java b/tmp/b2d97afd-107d-47b0-a1fc-85797a0db493_fixed.java
index 602226b..54fc8de 100644
--- a/tmp/946ae491-c768-4c45-a23c-c901ae2507f2_buggy.java
+++ b/tmp/b2d97afd-107d-47b0-a1fc-85797a0db493_fixed.java
@@ -1,26 +1,25 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
+        if (parent != null && parent.isVar()) {
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
                 aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
                 transformation.addAlias(name, qualifiedName);
                 // Bleeding functions already get a BAD_PARAMETERS error, so just
                 // do nothing.
                 // Parameters of the scope function also get a BAD_PARAMETERS
                 // error.
             } else {
                 // TODO(robbyw): Support using locals for private variables.
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
         }
     }
 }
\ No newline at end of file
