diff --git a/tmp/c07d8e44-da91-491a-a71f-08a89ee4f758_buggy.java b/tmp/dcff815b-eb54-4ca0-b0a6-d67ab4179b23_fixed.java
index 10616db..7ac6843 100644
--- a/tmp/c07d8e44-da91-491a-a71f-08a89ee4f758_buggy.java
+++ b/tmp/dcff815b-eb54-4ca0-b0a6-d67ab4179b23_fixed.java
@@ -1,19 +1,26 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+
+        // Adjusting for leap year and month-end cases
+        int[] newValues = iChronology.get(partial, instant);
+        if (partial.getFieldType(0).getName().equals("monthOfYear") && partial.getFieldType(1).getName().equals("dayOfMonth")) {
+            int month = newValues[0];
+            int day = newValues[1];
+            if (day == 29 && month == 2) {
+                newValues[1] = 28;
+            }
+        }
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
