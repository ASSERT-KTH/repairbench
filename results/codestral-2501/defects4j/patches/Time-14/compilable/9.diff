diff --git a/tmp/caac0af3-fe05-456b-809c-bb99c224e7f9_buggy.java b/tmp/f3a787d0-87f6-41e1-8678-1fb520939a37_fixed.java
index 10616db..f2cdc3e 100644
--- a/tmp/caac0af3-fe05-456b-809c-bb99c224e7f9_buggy.java
+++ b/tmp/f3a787d0-87f6-41e1-8678-1fb520939a37_fixed.java
@@ -1,19 +1,31 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
+
+        // Adjust the instant by the valueToAdd
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+
+        // Get the new values from the adjusted instant
+        int[] newValues = iChronology.get(partial, instant);
+
+        // Ensure the day is valid for the new month
+        if (newValues[1] == 2 && newValues[2] == 29) {
+            int month = newValues[1];
+            int maxDaysInMonth = iChronology.monthOfYear().getMaximumValue(month);
+            if (newValues[2] > maxDaysInMonth) {
+                newValues[2] = maxDaysInMonth;
+            }
+        }
+
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
