diff --git a/tmp/c1ce8976-a5c6-4b4f-ac4f-5db9f5b834ee_buggy.java b/tmp/300d4005-d95f-49ef-9014-8182290ce334_fixed.java
index 10616db..87223c9 100644
--- a/tmp/c1ce8976-a5c6-4b4f-ac4f-5db9f5b834ee_buggy.java
+++ b/tmp/300d4005-d95f-49ef-9014-8182290ce334_fixed.java
@@ -1,19 +1,33 @@
-    //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
+
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+
+            // Adjust for leap years and end of month
+            int month = partial.getFieldType(0).get(instant);
+            int day = partial.getFieldType(1).get(instant);
+            if (day > 28) {
+                int maxDay = partial.getFieldType(1).getMaximumValue(month, iChronology);
+                day = Math.min(day, maxDay);
+            }
+
+            int[] result = new int[values.length];
+            for (int i = 0; i < values.length; i++) {
+                result[i] = partial.getFieldType(i).get(instant);
+            }
+            result[1] = day; // Ensure day is within valid range
+            return result;
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
