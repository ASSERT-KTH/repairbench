diff --git a/tmp/a331a95a-c81e-41a1-9f08-3681216bd7b9_buggy.java b/tmp/8657bc25-bc64-473b-afa8-d36a33d5175c_fixed.java
index 8e93a5e..9597773 100644
--- a/tmp/a331a95a-c81e-41a1-9f08-3681216bd7b9_buggy.java
+++ b/tmp/8657bc25-bc64-473b-afa8-d36a33d5175c_fixed.java
@@ -1,43 +1,52 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
     int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
+    while (true) {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, nextLineTabStop);
 
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
+
+private String createPadding(int length) {
+    StringBuilder padding = new StringBuilder(length);
+    for (int i = 0; i < length; i++) {
+        padding.append(' ');
+    }
+    return padding.toString();
+}
+
+private int findWrapPos(String text, int width, int nextLineTabStop) {
+    int pos = text.lastIndexOf(' ', width);
+    if (pos == -1) {
+        pos = text.indexOf(' ', width);
+        if (pos == -1) {
+            return -1;
+        }
+    }
+    return pos;
+}
+
+private String rtrim(String s) {
+    int i = s.length() - 1;
+    while (i >= 0 && Character.isWhitespace(s.charAt(i))) {
+        i--;
+    }
+    return s.substring(0, i + 1);
+}
\ No newline at end of file
