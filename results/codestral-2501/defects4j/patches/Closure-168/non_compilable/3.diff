diff --git a/tmp/5556a374-18e6-4548-8794-fdbb710c2742_buggy.java b/tmp/30e31be6-b424-481f-a8f5-0e599c049d39_fixed.java
index b12de99..951f2c3 100644
--- a/tmp/5556a374-18e6-4548-8794-fdbb710c2742_buggy.java
+++ b/tmp/30e31be6-b424-481f-a8f5-0e599c049d39_fixed.java
@@ -1,52 +1,80 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
     // The first-order function analyzer looks at two types of variables:
     //
     // 1) Local variables that are assigned in inner scopes ("escaped vars")
     //
     // 2) Local variables that are assigned more than once.
     //
     // We treat all global variables as escaped by default, so there's
     // no reason to do this extra computation for them.
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
       // Be careful of bleeding functions, which create variables
       // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
 
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
   } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
       NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
+  } else if (n.isCall()) {
+    // Handle function calls to ensure the parameters match the function signature
+    Node callee = n.getFirstChild();
+    if (callee != null && callee.isGetProp()) {
+      String methodName = callee.getLastChild().getString();
+      Scope scope = t.getScope();
+      Var methodVar = scope.getVar(methodName);
+      if (methodVar != null && methodVar.getType() != null) {
+        Node methodNode = methodVar.getNode();
+        if (methodNode != null && methodNode.isFunction()) {
+          Node paramList = methodNode.getFirstChild().getNext();
+          for (Node param = paramList.getFirstChild(); param != null; param = param.getNext()) {
+            if (param.isName()) {
+              String paramName = param.getString();
+              Node arg = n.getFirstChild().getNext();
+              if (arg != null && arg.isName()) {
+                Var argVar = scope.getVar(arg.getString());
+                if (argVar != null && !argVar.getType().isSubtypeOf(methodVar.getType())) {
+                  // Report type mismatch
+                  t.report(JSError.make(n, TypeValidator.TYPE_MISMATCH_WARNING));
+                }
+              }
+            }
+          }
+        }
+      }
+    }
   }
 }
\ No newline at end of file
