diff --git a/tmp/f3394a33-36ab-4055-803c-ba46403b72ae_buggy.java b/tmp/5bbdf642-4afa-49e0-aeb8-41de0cf282a1_fixed.java
index 6c0aa19..80a4676 100644
--- a/tmp/f3394a33-36ab-4055-803c-ba46403b72ae_buggy.java
+++ b/tmp/5bbdf642-4afa-49e0-aeb8-41de0cf282a1_fixed.java
@@ -1,20 +1,20 @@
-    /**
-     * @param encoding the encoding to use for file names, use null
-     * for the platform's default encoding
-     * @param useUnicodeExtraFields whether to use InfoZIP Unicode
-     * Extra Fields (if present) to set the file names.
-     * @param allowStoredEntriesWithDataDescriptor whether the stream
-     * will try to read STORED entries that use a data descriptor
-     * @since 1.1
-     */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
                              boolean allowStoredEntriesWithDataDescriptor) {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
     in = new PushbackInputStream(inputStream, buf.capacity());
     this.allowStoredEntriesWithDataDescriptor =
         allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+
+    // Initialize the buffer to read the initial part of the zip file
+    try {
+        int read = in.read(buf.array(), 0, buf.capacity());
+        if (read > 0) {
+            in.unread(buf.array(), 0, read);
+        }
+    } catch (IOException e) {
+        throw new IllegalStateException("Failed to initialize input stream buffer", e);
+    }
 }
\ No newline at end of file
