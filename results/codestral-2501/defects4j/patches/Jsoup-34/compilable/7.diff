diff --git a/tmp/b6e95a38-43a1-45f6-bded-f9ff0bcb840f_buggy.java b/tmp/b1733289-8036-4a9c-b691-f302a5123acd_fixed.java
index 21f64c6..1196374 100644
--- a/tmp/b6e95a38-43a1-45f6-bded-f9ff0bcb840f_buggy.java
+++ b/tmp/b1733289-8036-4a9c-b691-f302a5123acd_fixed.java
@@ -1,23 +1,26 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        if (startChar != input[offset]) {
+            while (++offset < length && startChar != input[offset]) {
+                // Do nothing, just increment offset
+            }
+            if (offset == length) {
+                return -1;
+            }
+        }
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        if (last >= length) {
+            return -1;
+        }
+        for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) {
+            // Do nothing, just increment i and j
+        }
+        if (i == last) { // found full sequence
             return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
