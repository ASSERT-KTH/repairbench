diff --git a/tmp/42d97d96-676d-413f-b127-58a8275b4714_buggy.java b/tmp/16c125e5-bfe1-46fb-8253-458c7f8e68c3_fixed.java
index 21f64c6..207cfd6 100644
--- a/tmp/42d97d96-676d-413f-b127-58a8275b4714_buggy.java
+++ b/tmp/16c125e5-bfe1-46fb-8253-458c7f8e68c3_fixed.java
@@ -1,23 +1,17 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+    // handle scanning for surrogates
+    int seqLength = seq.length();
+    for (int offset = pos; offset <= length - seqLength; offset++) {
+        boolean found = true;
+        for (int i = 0; i < seqLength; i++) {
+            if (seq.charAt(i) != input[offset + i]) {
+                found = false;
+                break;
+            }
+        }
+        if (found) {
             return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
