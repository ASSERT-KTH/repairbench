diff --git a/tmp/51694d40-83d2-41ff-acbf-ca95404a48f0_buggy.java b/tmp/3a1658e2-fc5a-43e3-989a-7016dfcbd075_fixed.java
index 21f64c6..a383cbd 100644
--- a/tmp/51694d40-83d2-41ff-acbf-ca95404a48f0_buggy.java
+++ b/tmp/3a1658e2-fc5a-43e3-989a-7016dfcbd075_fixed.java
@@ -1,23 +1,17 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    if (seq.length() == 0) return 0; // Handle empty sequence case
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    for (int offset = pos; offset <= length - seq.length(); offset++) {
+        // scan to first instance of startChar:
+        if (startChar != input[offset]) {
+            while (++offset <= length - seq.length() && startChar != input[offset]);
+            if (offset > length - seq.length()) break;
+        }
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
         for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
         if (i == last) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
