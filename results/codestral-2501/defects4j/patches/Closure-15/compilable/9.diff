diff --git a/tmp/7e3cc833-3b50-4c3c-ae55-80d7aaa4bfcc_buggy.java b/tmp/a411fad1-492c-4369-a4d0-0d05584d4d53_fixed.java
index b56897c..37be331 100644
--- a/tmp/7e3cc833-3b50-4c3c-ae55-80d7aaa4bfcc_buggy.java
+++ b/tmp/a411fad1-492c-4369-a4d0-0d05584d4d53_fixed.java
@@ -1,27 +1,27 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
   // where the function returns (possibly without an return statement)
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // We only care about calls to functions that pass one of the dependent
+  // variable to a non-side-effect free function.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
-
+  // Iterate over children nodes
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+    // Check if entering a new CFG node and recursively apply the function
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
