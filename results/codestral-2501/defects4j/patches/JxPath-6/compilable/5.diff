diff --git a/tmp/63b39939-a4cd-4280-8438-a9a3013c90ba_buggy.java b/tmp/7860a8ca-2804-4b71-8fc9-ea02c7317b7f_fixed.java
index f650982..f6f2718 100644
--- a/tmp/63b39939-a4cd-4280-8438-a9a3013c90ba_buggy.java
+++ b/tmp/7860a8ca-2804-4b71-8fc9-ea02c7317b7f_fixed.java
@@ -1,42 +1,48 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right)
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
 //    System.err.println("COMPARING: " +
 //        (l == null ? "null" : l.getClass().getName()) + " " +
 //        (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+
+    // Fix: Ensure both l and r are not iterators before comparing
+    if (l instanceof Iterator || r instanceof Iterator) {
+        return false;
+    }
+
     return equal(l, r);
 }
\ No newline at end of file
