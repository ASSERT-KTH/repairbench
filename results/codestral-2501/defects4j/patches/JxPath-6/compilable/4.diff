diff --git a/tmp/19f59419-24d5-4746-912b-c2cd9585642b_buggy.java b/tmp/c0230108-71a0-403d-953b-b4f6b7888f55_fixed.java
index f650982..79e11a4 100644
--- a/tmp/19f59419-24d5-4746-912b-c2cd9585642b_buggy.java
+++ b/tmp/c0230108-71a0-403d-953b-b4f6b7888f55_fixed.java
@@ -1,42 +1,48 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right)
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
 //    System.err.println("COMPARING: " +
 //        (l == null ? "null" : l.getClass().getName()) + " " +
 //        (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+
+    // Ensure both l and r are not iterators before comparing directly
+    if (!(l instanceof Iterator) && !(r instanceof Iterator)) {
         return equal(l, r);
     }
+
+    return false;
+}
\ No newline at end of file
