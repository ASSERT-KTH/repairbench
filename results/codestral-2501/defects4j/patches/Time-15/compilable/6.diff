diff --git a/tmp/3f629ec3-2df6-45f5-bdeb-c73d2f833fd0_buggy.java b/tmp/1a75fff1-9973-40ec-8d28-6b72b0004398_fixed.java
index a9a5e27..7f96b4e 100644
--- a/tmp/3f629ec3-2df6-45f5-bdeb-c73d2f833fd0_buggy.java
+++ b/tmp/1a75fff1-9973-40ec-8d28-6b72b0004398_fixed.java
@@ -1,24 +1,37 @@
-    /**
-     * Multiply two values throwing an exception if overflow occurs.
-     * 
-     * @param val1  the first value
-     * @param val2  the second value
-     * @return the new total
-     * @throws ArithmeticException if the value is too big or too small
-     * @since 1.2
-     */
 public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
+    // Handle special cases
+    if (val2 == -1) {
         return -val1;
-            case 0:
+    }
+    if (val2 == 0) {
         return 0L;
-            case 1:
+    }
+    if (val2 == 1) {
         return val1;
     }
-        long total = val1 * val2;
-        if (total / val2 != val1) {
+
+    // Check for overflow
+    if (val1 > 0) {
+        if (val2 > 0) {
+            if (val1 > (Long.MAX_VALUE / val2)) {
                 throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
             }
-        return total;
+        } else {
+            if (val2 < (Long.MIN_VALUE / val1)) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        }
+    } else {
+        if (val2 > 0) {
+            if (val1 < (Long.MIN_VALUE / val2)) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        } else {
+            if ((val1 != 0) && (val1 < (Long.MAX_VALUE / val2))) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        }
+    }
+
+    return val1 * val2;
 }
\ No newline at end of file
