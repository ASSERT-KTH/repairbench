diff --git a/tmp/8069a704-599e-4d96-9001-a51293f16501_buggy.java b/tmp/51de8f20-02f8-4e97-b1a1-5d358ed0b40f_fixed.java
index 5abdeb5..638ee4f 100644
--- a/tmp/8069a704-599e-4d96-9001-a51293f16501_buggy.java
+++ b/tmp/51de8f20-02f8-4e97-b1a1-5d358ed0b40f_fixed.java
@@ -1,29 +1,25 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
+  AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+      if (n.isName() && n.getString().equals(varName)) {
         // We make a special exception when the entire cfgNode is a chain
         // of assignments, since in that case the assignment statements
         // will happen after the inlining of the right hand side.
         // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
         //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+        if (!(parent.isAssign() && parent.getFirstChild() == n)) {
           // Don't count lhs of top-level assignment chain
           numUsesWithinCfgNode++;
         }
       }
-
+    }
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
