diff --git a/tmp/2adb3a60-1ce0-45c5-8882-93f32583e7ff_buggy.java b/tmp/ce28893c-ed5c-4db9-baa0-b226c2182f93_fixed.java
index 5abdeb5..289e22c 100644
--- a/tmp/2adb3a60-1ce0-45c5-8882-93f32583e7ff_buggy.java
+++ b/tmp/ce28893c-ed5c-4db9-baa0-b226c2182f93_fixed.java
@@ -1,29 +1,16 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
     numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
+    AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            if (n.isName() && n.getString().equals(varName)) {
+                // Ensure we are not counting the lhs of an assignment
+                if (!(parent.isAssign() && parent.getFirstChild() == n)) {
                     numUsesWithinCfgNode++;
                 }
             }
-
+        }
     };
 
     NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
