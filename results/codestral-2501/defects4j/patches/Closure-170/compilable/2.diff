diff --git a/tmp/6569c455-cbb6-4011-be83-a30667249b56_buggy.java b/tmp/460f4f59-3587-4a22-a2b1-e0880d212a69_fixed.java
index 5abdeb5..7c12f73 100644
--- a/tmp/6569c455-cbb6-4011-be83-a30667249b56_buggy.java
+++ b/tmp/460f4f59-3587-4a22-a2b1-e0880d212a69_fixed.java
@@ -1,29 +1,25 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
+  AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
           // We make a special exception when the entire cfgNode is a chain
           // of assignments, since in that case the assignment statements
           // will happen after the inlining of the right hand side.
           // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
           //   and remove this special case.
           !(parent.isAssign() &&
            (parent.getFirstChild() == n))) {
         // Don't count lhs of top-level assignment chain
         numUsesWithinCfgNode++;
+      } else if (parent.isAssign() && parent.getFirstChild() == n) {
+        // Special case: if the variable is on the left side of an assignment,
+        // and it's not part of a chain, we still need to count it.
+        numUsesWithinCfgNode++;
       }
     }
-
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
