diff --git a/tmp/44d75c47-b7bd-4fc1-8a0b-08c3648f5985_buggy.java b/tmp/bbff71ec-b227-4f0d-8f6c-1847003453f9_fixed.java
index 5abdeb5..571fc7a 100644
--- a/tmp/44d75c47-b7bd-4fc1-8a0b-08c3648f5985_buggy.java
+++ b/tmp/bbff71ec-b227-4f0d-8f6c-1847003453f9_fixed.java
@@ -1,29 +1,21 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
+  AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+      if (n.isName() && n.getString().equals(varName)) {
         // We make a special exception when the entire cfgNode is a chain
         // of assignments, since in that case the assignment statements
         // will happen after the inlining of the right hand side.
         // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
         //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+        if (!(parent.isAssign() && (parent.getFirstChild() == n))) {
           // Don't count lhs of top-level assignment chain
           numUsesWithinCfgNode++;
         }
       }
-
+    }
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
