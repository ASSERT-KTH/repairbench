diff --git a/tmp/c78430b9-b4e8-47e7-9154-92d8513fed8b_buggy.java b/tmp/5af6b274-6372-4eee-ac08-540b2461eec0_fixed.java
index 5abdeb5..01e6053 100644
--- a/tmp/c78430b9-b4e8-47e7-9154-92d8513fed8b_buggy.java
+++ b/tmp/5af6b274-6372-4eee-ac08-540b2461eec0_fixed.java
@@ -1,29 +1,18 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
     numUsesWithinCfgNode = 0;
     AbstractCfgNodeTraversalCallback gatherCb =
         new AbstractCfgNodeTraversalCallback() {
 
       @Override
       public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+        if (n.isName() && n.getString().equals(varName)) {
+          // Check if the parent node is an assignment and ensure it's not the left-hand side of the assignment
+          if (!(parent.isAssign() && parent.getFirstChild() == n)) {
             numUsesWithinCfgNode++;
           }
         }
-
+      }
     };
 
     NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
