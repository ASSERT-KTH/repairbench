diff --git a/tmp/a674ee40-6f91-4944-b3b2-46cf05ef7179_buggy.java b/tmp/2a5849e5-6d93-40d1-b7f9-6f15c977aaef_fixed.java
index 5abdeb5..2413505 100644
--- a/tmp/a674ee40-6f91-4944-b3b2-46cf05ef7179_buggy.java
+++ b/tmp/2a5849e5-6d93-40d1-b7f9-6f15c977aaef_fixed.java
@@ -1,29 +1,28 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
+  AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
           // We make a special exception when the entire cfgNode is a chain
           // of assignments, since in that case the assignment statements
           // will happen after the inlining of the right hand side.
           // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
           //   and remove this special case.
           !(parent.isAssign() &&
               (parent.getFirstChild() == n))) {
         // Don't count lhs of top-level assignment chain
         numUsesWithinCfgNode++;
       }
     }
 
+    @Override
+    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
+      // Ensure we traverse all nodes
+      return true;
+    }
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
