diff --git a/tmp/b7e5766c-2398-4d62-a20b-82d4e2b823ff_buggy.java b/tmp/b68d17bf-100b-4e36-bb08-c26dcb14f80a_fixed.java
index d57736b..712faf6 100644
--- a/tmp/b7e5766c-2398-4d62-a20b-82d4e2b823ff_buggy.java
+++ b/tmp/b68d17bf-100b-4e36-bb08-c26dcb14f80a_fixed.java
@@ -1,39 +1,31 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
+          } else {
+            // If the property is already declared, ensure it matches the constraint
+            JSType declaredType = objType.getPropertyType(prop);
+            if (!declaredType.isSubtypeOf(propType)) {
+              objType.defineInferredProperty(prop, propType, null);
+            }
           }
         }
       }
     }
   }
\ No newline at end of file
