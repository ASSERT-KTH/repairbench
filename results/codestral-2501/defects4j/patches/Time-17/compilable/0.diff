diff --git a/tmp/bb198e89-8291-415e-88bc-cfa5c489e5ec_buggy.java b/tmp/090e289e-38af-46d8-9d15-a71a316cae63_fixed.java
index 03b03d7..2c3b9f3 100644
--- a/tmp/bb198e89-8291-415e-88bc-cfa5c489e5ec_buggy.java
+++ b/tmp/090e289e-38af-46d8-9d15-a71a316cae63_fixed.java
@@ -1,25 +1,38 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  *
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
 
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
 
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long adjustedInstant = convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
     // calculate result
+    if (earlierOrLater) {
         // currently in later offset
+        if (adjustedInstant > instant) {
+            return adjustedInstant;
+        } else {
+            return instant;
+        }
+    } else {
         // currently in earlier offset
+        if (adjustedInstant < instant) {
+            return adjustedInstant;
+        } else {
+            return instant;
+        }
+    }
 }
\ No newline at end of file
