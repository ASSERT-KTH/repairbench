diff --git a/tmp/6582e9c3-5103-4a58-8ff1-e52c822c68a1_buggy.java b/tmp/71219edc-5e5e-4018-8b13-fdbbb2322adf_fixed.java
index 03b03d7..830be15 100644
--- a/tmp/6582e9c3-5103-4a58-8ff1-e52c822c68a1_buggy.java
+++ b/tmp/71219edc-5e5e-4018-8b13-fdbbb2322adf_fixed.java
@@ -1,25 +1,16 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
+    // Evaluate 3 hours before and after to determine if there is an overlap
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        return instant;  // Not an overlap (less than is a gap, equal is normal case)
     }
 
-        // work out range of instants that have duplicate local times
+    // Work out the range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    if (earlierOrLater) {
+        return convertLocalToUTC(local, false, instantAfter);
+    } else {
+        return convertLocalToUTC(local, false, instantBefore);
+    }
 }
\ No newline at end of file
