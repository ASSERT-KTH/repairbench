diff --git a/tmp/c2dbeef2-1fd6-4c61-a1c4-c71dd56234d5_buggy.java b/tmp/4ad7cbd6-c623-496d-80d9-3fc35d6d75cb_fixed.java
index 03b03d7..18c37c1 100644
--- a/tmp/c2dbeef2-1fd6-4c61-a1c4-c71dd56234d5_buggy.java
+++ b/tmp/4ad7cbd6-c623-496d-80d9-3fc35d6d75cb_fixed.java
@@ -1,25 +1,29 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  *
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
 
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
 
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long adjustedInstant = convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Ensure the result is within the correct offset range
+    long adjustedLocal = convertUTCToLocal(adjustedInstant);
+    if (adjustedLocal != local) {
+        return earlierOrLater ? instantAfter : instantBefore;
+    }
+
+    return adjustedInstant;
 }
\ No newline at end of file
