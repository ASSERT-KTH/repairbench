diff --git a/tmp/7eacfba3-39bc-43f7-bcd6-414b4af40508_buggy.java b/tmp/26011ef1-0e05-4d86-929e-2c3b39da4566_fixed.java
index e69de29..7ee36cc 100644
--- a/tmp/7eacfba3-39bc-43f7-bcd6-414b4af40508_buggy.java
+++ b/tmp/26011ef1-0e05-4d86-929e-2c3b39da4566_fixed.java
@@ -0,0 +1,97 @@
+public class MultiValueMap<K, V> extends AbstractMap<K, Collection<V>> implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private final Map<K, Collection<V>> map;
+    private final Class<? extends Collection> collectionClass;
+
+    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, Collection<V>> map, Class<? extends Collection> collectionClass) {
+        return new MultiValueMap<>(map, collectionClass);
+    }
+
+    private MultiValueMap(Map<K, Collection<V>> map, Class<? extends Collection> collectionClass) {
+        if (map == null) {
+            throw new IllegalArgumentException("Map must not be null");
+        }
+        if (collectionClass == null) {
+            throw new IllegalArgumentException("Collection class must not be null");
+        }
+        this.map = map;
+        this.collectionClass = collectionClass;
+    }
+
+    @Override
+    public Collection<V> get(Object key) {
+        Collection<V> values = map.get(key);
+        if (values == null) {
+            try {
+                values = collectionClass.getDeclaredConstructor().newInstance();
+            } catch (Exception e) {
+                throw new RuntimeException("Unable to instantiate collection class", e);
+            }
+            map.put((K) key, values);
+        }
+        return values;
+    }
+
+    @Override
+    public Collection<V> put(K key, Collection<V> value) {
+        return map.put(key, value);
+    }
+
+    @Override
+    public Collection<V> remove(Object key) {
+        return map.remove(key);
+    }
+
+    @Override
+    public void clear() {
+        map.clear();
+    }
+
+    @Override
+    public Set<K> keySet() {
+        return map.keySet();
+    }
+
+    @Override
+    public Collection<Collection<V>> values() {
+        return map.values();
+    }
+
+    @Override
+    public Set<Entry<K, Collection<V>>> entrySet() {
+        return map.entrySet();
+    }
+
+    private void writeObject(ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+        out.writeObject(collectionClass);
+    }
+
+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        Class<?> clazz = (Class<?>) in.readObject();
+        if (!Collection.class.isAssignableFrom(clazz)) {
+            throw new UnsupportedOperationException("Unsupported collection class: " + clazz);
+        }
+        this.collectionClass = (Class<? extends Collection>) clazz;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null || getClass() != obj.getClass()) {
+            return false;
+        }
+        MultiValueMap<?, ?> other = (MultiValueMap<?, ?>) obj;
+        return map.equals(other.map) && collectionClass.equals(other.collectionClass);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(map, collectionClass);
+    }
+}
\ No newline at end of file
