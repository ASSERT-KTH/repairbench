diff --git a/tmp/50db5ce8-7dd7-46cf-af7c-bebd3b7891be_buggy.java b/tmp/de0077e6-0eac-4aaa-8e2c-250af05534f3_fixed.java
index 3ec995f..704440e 100644
--- a/tmp/50db5ce8-7dd7-46cf-af7c-bebd3b7891be_buggy.java
+++ b/tmp/de0077e6-0eac-4aaa-8e2c-250af05534f3_fixed.java
@@ -1,26 +1,26 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
 static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+
+    String[] parts = version.split("\\.");
+    if (parts.length < 2) {
+        return 0;
+    }
+
+    int major = Integer.parseInt(parts[0]);
+    int minor = Integer.parseInt(parts[1]);
+
+    if (major == 1 && minor <= 8) {
+        return major * 100 + minor * 10;
+    } else if (major == 1 && minor == 3) {
+        if (parts.length > 2) {
+            int patch = Integer.parseInt(parts[2]);
+            return major * 100 + minor * 10 + patch;
+        } else {
+            return major * 100 + minor * 10;
+        }
+    } else {
+        return major * 100 + minor * 10;
+    }
 }
\ No newline at end of file
