diff --git a/tmp/67bb9ec2-b87e-4e57-b5eb-513fd399a3f4_buggy.java b/tmp/6c2d8374-d75c-4dc0-9dfc-2dcbeb54c850_fixed.java
index 3ec995f..7f98a81 100644
--- a/tmp/67bb9ec2-b87e-4e57-b5eb-513fd399a3f4_buggy.java
+++ b/tmp/6c2d8374-d75c-4dc0-9dfc-2dcbeb54c850_fixed.java
@@ -1,26 +1,22 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    static int toJavaVersionInt(String version) {
+        if (version == null || version.isEmpty()) {
+            return 0;
+        }
+        String[] versionParts = version.split("\\.");
+        if (versionParts.length < 2) {
+            return 0;
+        }
+        try {
+            int major = Integer.parseInt(versionParts[0]);
+            int minor = Integer.parseInt(versionParts[1]);
+            if (versionParts.length > 2) {
+                String patchStr = versionParts[2];
+                int patch = Integer.parseInt(patchStr.split("_")[0]);
+                return major * 100 + minor * 10 + patch;
+            } else {
+                return major * 100 + minor * 10;
+            }
+        } catch (NumberFormatException e) {
+            return 0;
+        }
     }
\ No newline at end of file
