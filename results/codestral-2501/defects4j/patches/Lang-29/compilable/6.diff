diff --git a/tmp/fc297f9b-a0bc-4280-8fbc-37824e0d1e96_buggy.java b/tmp/49c21126-e133-493d-b2e0-db0f79e9dad9_fixed.java
index 3ec995f..992e7fa 100644
--- a/tmp/fc297f9b-a0bc-4280-8fbc-37824e0d1e96_buggy.java
+++ b/tmp/49c21126-e133-493d-b2e0-db0f79e9dad9_fixed.java
@@ -1,26 +1,20 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
 static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+
+    // Remove any non-numeric characters and split by dots
+    String[] parts = version.replaceAll("[^0-9.]", "").split("\\.");
+
+    if (parts.length == 0) {
+        return 0;
+    }
+
+    // Extract the major and minor version numbers
+    int major = Integer.parseInt(parts[0]);
+    int minor = parts.length > 1 ? Integer.parseInt(parts[1]) : 0;
+    int micro = parts.length > 2 ? Integer.parseInt(parts[2]) : 0;
+
+    // Return the version as an int (e.g., 1.3.1 becomes 131)
+    return major * 100 + minor * 10 + micro;
 }
\ No newline at end of file
