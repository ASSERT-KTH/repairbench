diff --git a/tmp/f03d5534-7b01-43b6-a68e-ccb10d9c0183_buggy.java b/tmp/21ef78bc-e0ab-4a57-a180-b368a352c8b0_fixed.java
index 3ec995f..181f670 100644
--- a/tmp/f03d5534-7b01-43b6-a68e-ccb10d9c0183_buggy.java
+++ b/tmp/21ef78bc-e0ab-4a57-a180-b368a352c8b0_fixed.java
@@ -1,26 +1,19 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+
+    // Normalize the version string by removing any non-version parts
+    version = version.replaceAll("[^0-9\\.]", "");
+
+    String[] parts = version.split("\\.");
+    if (parts.length < 2) {
+        return 0;
+    }
+
+    int major = Integer.parseInt(parts[0]);
+    int minor = Integer.parseInt(parts[1]);
+    int micro = parts.length > 2 ? Integer.parseInt(parts[2]) : 0;
+
+    return major * 100 + minor * 10 + micro;
 }
\ No newline at end of file
