diff --git a/tmp/b10501e6-e2fd-43d9-a019-a5b2a81e2a4f_buggy.java b/tmp/8335a85b-2d6a-4c1d-a9c0-93d1f6175bcf_fixed.java
index b86c1ea..48a4e51 100644
--- a/tmp/b10501e6-e2fd-43d9-a019-a5b2a81e2a4f_buggy.java
+++ b/tmp/8335a85b-2d6a-4c1d-a9c0-93d1f6175bcf_fixed.java
@@ -1,38 +1,32 @@
 /**
  * Translate an input onto a Writer. This is intentionally final as its algorithm is
  * tightly coupled with the abstract method of this class.
  *
  * @param input CharSequence that is being translated
  * @param out Writer to translate the text to
  * @throws IOException if and only if the Writer produces an IOException
  */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = Character.codePointCount(input, 0, input.length());
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
             char[] c = Character.toChars(Character.codePointAt(input, pos));
             out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+        } else {
+            // contract with translators is that they have to understand codepoints
+            // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
-                    }
             }
-                pos--;
         }
         pos++;
     }
 }
\ No newline at end of file
