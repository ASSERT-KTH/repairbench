diff --git a/tmp/d27c4e51-f7ce-47c7-83c6-366b306fecac_buggy.java b/tmp/106d4f37-6407-438e-9efd-f3fe17e66c0c_fixed.java
index b98f0a7..9a69f22 100644
--- a/tmp/d27c4e51-f7ce-47c7-83c6-366b306fecac_buggy.java
+++ b/tmp/106d4f37-6407-438e-9efd-f3fe17e66c0c_fixed.java
@@ -1,29 +1,43 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
+
+    // Traverse arguments
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
+
+    // Backwards inference for the constructor arguments
+    if (constructorType != null && constructorType.isConstructor()) {
+        FunctionType functionType = (FunctionType) constructorType;
+        Node param = functionType.getParametersNode();
+        for (Node arg = constructor.getNext(); arg != null && param != null; arg = arg.getNext(), param = param.getNext()) {
+            JSType argType = arg.getJSType();
+            if (argType != null) {
+                param.setJSType(argType);
+            }
+        }
+    }
+
     return scope;
 }
\ No newline at end of file
