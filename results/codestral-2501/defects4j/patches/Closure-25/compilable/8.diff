diff --git a/tmp/65f94821-390e-4a66-b8bc-4c6456170173_buggy.java b/tmp/747f64a9-b68d-4748-9e25-f85e2e47eeb6_fixed.java
index b98f0a7..e9858b1 100644
--- a/tmp/65f94821-390e-4a66-b8bc-4c6456170173_buggy.java
+++ b/tmp/747f64a9-b68d-4748-9e25-f85e2e47eeb6_fixed.java
@@ -1,29 +1,44 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
+
+    // Traverse the arguments of the constructor call
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
+
+    // Backwards inference: Update the type of the constructor argument
+    if (constructorType != null && constructorType.isConstructor()) {
+        FunctionType ct = constructorType.toMaybeFunctionType();
+        if (ct != null && ct.isConstructor()) {
+            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+                JSType argType = arg.getJSType();
+                if (argType != null) {
+                    JSType argTypeRestricted = argType.restrictByNotNullOrUndefined();
+                    if (!argTypeRestricted.isUnknownType()) {
+                        arg.setJSType(argTypeRestricted);
+                    }
+                }
+            }
+        }
+    }
+
     return scope;
 }
\ No newline at end of file
