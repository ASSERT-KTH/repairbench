diff --git a/tmp/4a14a101-bc1e-47c8-ae63-bbcf401532a4_buggy.java b/tmp/e61c8908-f9f5-4a82-b065-ab009c99873d_fixed.java
index d6a560a..9f1b804 100644
--- a/tmp/4a14a101-bc1e-47c8-ae63-bbcf401532a4_buggy.java
+++ b/tmp/e61c8908-f9f5-4a82-b065-ab009c99873d_fixed.java
@@ -1,33 +1,29 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // Resolve via registry first to avoid triggering warnings
   boolean resolved = resolveViaRegistry(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
   }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
+  // If not resolved via registry, try resolving via properties
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
