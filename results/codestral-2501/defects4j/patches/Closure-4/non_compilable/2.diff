diff --git a/tmp/fca21aa9-9cfc-4afa-826e-29b9c515f11c_buggy.java b/tmp/220400a7-aea6-46a4-ad66-db6ebd5a0711_fixed.java
index d6a560a..7504903 100644
--- a/tmp/fca21aa9-9cfc-4afa-826e-29b9c515f11c_buggy.java
+++ b/tmp/220400a7-aea6-46a4-ad66-db6ebd5a0711_fixed.java
@@ -1,33 +1,30 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Resolve via registry first to avoid triggering warnings built into resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // Exit early if a cycle is detected
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
+    resolved = resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // Exit early if a cycle is detected
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
