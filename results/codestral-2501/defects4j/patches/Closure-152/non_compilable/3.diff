diff --git a/tmp/49e919cc-3032-4c08-a177-faa3eeb44e82_buggy.java b/tmp/cb646121-d95c-4050-a765-015e9ada50cc_fixed.java
index 58a1651..97f997b 100644
--- a/tmp/49e919cc-3032-4c08-a177-faa3eeb44e82_buggy.java
+++ b/tmp/cb646121-d95c-4050-a765-015e9ada50cc_fixed.java
@@ -1,32 +1,36 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  // Resolve typeOfThis correctly if it's a UnionType
+  JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+  if (resolvedTypeOfThis instanceof ObjectType) {
+    typeOfThis = (ObjectType) resolvedTypeOfThis;
+  } else if (resolvedTypeOfThis instanceof UnionType) {
+    typeOfThis = (UnionType) resolvedTypeOfThis;
+  } else {
+    t.report(JSError.make(t.location, TypeCheck.WRONG_THIS_TYPE, typeOfThis));
+  }
 
   boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+  ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
