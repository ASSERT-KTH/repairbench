diff --git a/tmp/9c0a173f-b704-4dda-a7a7-f102ef47d8c1_buggy.java b/tmp/fa518b2d-c8e0-4f27-b7a7-ec10a70d651e_fixed.java
index 58a1651..9d3f052 100644
--- a/tmp/9c0a173f-b704-4dda-a7a7-f102ef47d8c1_buggy.java
+++ b/tmp/fa518b2d-c8e0-4f27-b7a7-ec10a70d651e_fixed.java
@@ -1,32 +1,37 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    typeOfThis = safeResolve(typeOfThis, t, scope);
+    if (!(typeOfThis instanceof ObjectType)) {
+        t.warning("typeOfThis must resolve to an ObjectType");
+        // Handle the error appropriately, e.g., by setting typeOfThis to a default ObjectType
+        typeOfThis = scope.getTypeRegistry().getNativeObjectType(JSTypeNative.OBJECT_TYPE);
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
