diff --git a/tmp/64505277-b9f6-4b07-876f-482e133244bc_buggy.java b/tmp/c743f896-5705-46e5-ae3f-26810e54604c_fixed.java
index 710fcc0..d4866c8 100644
--- a/tmp/64505277-b9f6-4b07-876f-482e133244bc_buggy.java
+++ b/tmp/c743f896-5705-46e5-ae3f-26810e54604c_fixed.java
@@ -1,37 +1,24 @@
 Object returnValueFor(Class<?> type) {
     if (Primitives.isPrimitiveOrWrapper(type)) {
         return Primitives.defaultValueForPrimitiveOrWrapper(type);
-            //new instances are used instead of Collections.emptyList(), etc.
-            //to avoid UnsupportedOperationException if code under test modifies returned collection
-        } else if (type == Collection.class) {
-            return new LinkedList<Object>();
-        } else if (type == Set.class) {
-            return new HashSet<Object>();
-        } else if (type == HashSet.class) {
-            return new HashSet<Object>();
-        } else if (type == SortedSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == TreeSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == LinkedHashSet.class) {
-            return new LinkedHashSet<Object>();
-        } else if (type == List.class) {
-            return new LinkedList<Object>();
-        } else if (type == LinkedList.class) {
-            return new LinkedList<Object>();
-        } else if (type == ArrayList.class) {
+    } else if (type.isAssignableFrom(Collection.class)) {
+        if (type.isAssignableFrom(List.class)) {
             return new ArrayList<Object>();
-        } else if (type == Map.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == HashMap.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == SortedMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == TreeMap.class) {
+        } else if (type.isAssignableFrom(Set.class)) {
+            return new HashSet<Object>();
+        } else if (type.isAssignableFrom(SortedSet.class)) {
+            return new TreeSet<Object>();
+        } else {
+            return new LinkedList<Object>();
+        }
+    } else if (type.isAssignableFrom(Map.class)) {
+        if (type.isAssignableFrom(SortedMap.class)) {
             return new TreeMap<Object, Object>();
-        } else if (type == LinkedHashMap.class) {
-            return new LinkedHashMap<Object, Object>();
+        } else {
+            return new HashMap<Object, Object>();
+        }
+    } else if (type == Iterable.class) {
+        return Collections.emptyList();
     }
-        //Let's not care about the rest of collections.
     return null;
 }
\ No newline at end of file
