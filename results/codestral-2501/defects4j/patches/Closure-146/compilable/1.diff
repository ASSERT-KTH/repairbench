diff --git a/tmp/b1578040-8f36-46ac-b45e-7f260f36695e_buggy.java b/tmp/34634e35-a3de-4d11-af65-4dc1ee359351_fixed.java
index 210695a..2b8c8b9 100644
--- a/tmp/b1578040-8f36-46ac-b45e-7f260f36695e_buggy.java
+++ b/tmp/34634e35-a3de-4d11-af65-4dc1ee359351_fixed.java
@@ -1,32 +1,22 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
         return new TypePair(null, null);
 
       case FALSE:
+        return new TypePair(this, that);
+
       case UNKNOWN:
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
