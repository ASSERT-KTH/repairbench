diff --git a/tmp/88bca58e-0827-4328-9bd8-5deeaa7d2786_buggy.java b/tmp/a05e3e6d-95ba-4d09-9208-138805655494_fixed.java
index f674e52..e799ba9 100644
--- a/tmp/88bca58e-0827-4328-9bd8-5deeaa7d2786_buggy.java
+++ b/tmp/a05e3e6d-95ba-4d09-9208-138805655494_fixed.java
@@ -1,41 +1,21 @@
-    /**
-     * Test for the equality of two Complex objects.
-     * <p>
-     * If both the real and imaginary parts of two Complex numbers
-     * are exactly the same, and neither is <code>Double.NaN</code>, the two
-     * Complex objects are considered to be equal.</p>
-     * <p>
-     * All <code>NaN</code> values are considered to be equal - i.e, if either
-     * (or both) real and imaginary parts of the complex number are equal
-     * to <code>Double.NaN</code>, the complex number is equal to 
-     * <code>Complex.NaN</code>.</p>
-     *
-     * @param other Object to test for equality to this
-     * @return true if two Complex objects are equal, false if
-     *         object is null, not an instance of Complex, or
-     *         not equal to this Complex instance
-     * 
-     */
 public boolean equals(Object other) {
     boolean ret;
 
     if (this == other) {
         ret = true;
     } else if (other == null) {
         ret = false;
+    } else if (getClass() != other.getClass()) {
+        ret = false;
     } else {
-            try {
         Complex rhs = (Complex) other;
         if (rhs.isNaN()) {
             ret = this.isNaN();
         } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
-                }
-            } catch (ClassCastException ex) {
-                // ignore exception
-                ret = false;
+            ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) &&
+                  (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
         }
     }
 
     return ret;
 }
\ No newline at end of file
