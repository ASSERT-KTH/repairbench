diff --git a/tmp/7b92833a-ca35-4c5b-b801-ea76ce08a318_buggy.java b/tmp/ed8f8c24-a7bd-4287-bb40-5a32e95b7f62_fixed.java
index 1478ee1..4df17ab 100644
--- a/tmp/7b92833a-ca35-4c5b-b801-ea76ce08a318_buggy.java
+++ b/tmp/ed8f8c24-a7bd-4287-bb40-5a32e95b7f62_fixed.java
@@ -1,24 +1,16 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+      // Compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      double rho = (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z) / (v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);
+      rho = Math.round(rho * 255) / 255.0;
 
+      // Compute v3 = v1 - rho * v2
+      Vector3D v3 = new Vector3D(v1.x - rho * v2.x, v1.y - rho * v2.y, v1.z - rho * v2.z);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+      // Compute cross product from v3 and v2 instead of v1 and v2
+      return new Vector3D(v3.y * v2.z - v3.z * v2.y, v3.z * v2.x - v3.x * v2.z, v3.x * v2.y - v3.y * v2.x);
   }
\ No newline at end of file
