diff --git a/tmp/201f5cee-f5da-4ce0-9299-fdfed4a09bb1_buggy.java b/tmp/10dece61-d548-402f-aca1-e003384723cc_fixed.java
index 111ba5e..8f9fad2 100644
--- a/tmp/201f5cee-f5da-4ce0-9299-fdfed4a09bb1_buggy.java
+++ b/tmp/10dece61-d548-402f-aca1-e003384723cc_fixed.java
@@ -1,9 +1,72 @@
 public static boolean areEqual(Object o1, Object o2) {
     if (o1 == null || o2 == null) {
         return o1 == null && o2 == null;
     } else if (isArray(o1)) {
         return isArray(o2) && areArraysEqual(o1, o2);
     } else {
         return o1.equals(o2);
     }
 }
+
+private static boolean isArray(Object obj) {
+    return obj.getClass().isArray();
+}
+
+private static boolean areArraysEqual(Object o1, Object o2) {
+    if (!o1.getClass().isArray() || !o2.getClass().isArray()) {
+        return false;
+    }
+
+    Class<?> componentType1 = o1.getClass().getComponentType();
+    Class<?> componentType2 = o2.getClass().getComponentType();
+
+    if (componentType1 != componentType2) {
+        return false;
+    }
+
+    if (componentType1.isPrimitive()) {
+        return arePrimitiveArraysEqual(o1, o2);
+    } else {
+        return areObjectArraysEqual(o1, o2);
+    }
+}
+
+private static boolean arePrimitiveArraysEqual(Object o1, Object o2) {
+    Class<?> componentType = o1.getClass().getComponentType();
+    if (componentType == int.class) {
+        return Arrays.equals((int[]) o1, (int[]) o2);
+    } else if (componentType == long.class) {
+        return Arrays.equals((long[]) o1, (long[]) o2);
+    } else if (componentType == double.class) {
+        return Arrays.equals((double[]) o1, (double[]) o2);
+    } else if (componentType == float.class) {
+        return Arrays.equals((float[]) o1, (float[]) o2);
+    } else if (componentType == boolean.class) {
+        return Arrays.equals((boolean[]) o1, (boolean[]) o2);
+    } else if (componentType == byte.class) {
+        return Arrays.equals((byte[]) o1, (byte[]) o2);
+    } else if (componentType == short.class) {
+        return Arrays.equals((short[]) o1, (short[]) o2);
+    } else if (componentType == char.class) {
+        return Arrays.equals((char[]) o1, (char[]) o2);
+    } else {
+        throw new UnsupportedOperationException("Unsupported primitive type: " + componentType);
+    }
+}
+
+private static boolean areObjectArraysEqual(Object o1, Object o2) {
+    Object[] arr1 = (Object[]) o1;
+    Object[] arr2 = (Object[]) o2;
+
+    if (arr1.length != arr2.length) {
+        return false;
+    }
+
+    for (int i = 0; i < arr1.length; i++) {
+        if (!areEqual(arr1[i], arr2[i])) {
+            return false;
+        }
+    }
+
+    return true;
+}
\ No newline at end of file
