diff --git a/tmp/e6141674-2ed6-4414-9603-eff8e29f1fe8_buggy.java b/tmp/aaee6073-e117-4ca6-a4dd-2152e35808ac_fixed.java
index b36c3f0..ad1e6bd 100644
--- a/tmp/e6141674-2ed6-4414-9603-eff8e29f1fe8_buggy.java
+++ b/tmp/aaee6073-e117-4ca6-a4dd-2152e35808ac_fixed.java
@@ -1,58 +1,68 @@
 /**
  * Returns true if calls to this function have side effects.
  *
  * @param callNode The call node to inspected.
  * @param compiler A compiler object to provide program state changing
  *     context information. Can be null.
  */
 static boolean functionCallHasSideEffects(
     Node callNode, @Nullable AbstractCompiler compiler) {
   if (callNode.getType() != Token.CALL) {
     throw new IllegalStateException(
         "Expected CALL node, got " + Token.name(callNode.getType()));
   }
 
   if (callNode.isNoSideEffectsCall()) {
     return false;
   }
 
   Node nameNode = callNode.getFirstChild();
 
   // Built-in functions with no side effects.
-    if (nameNode.getType() == Token.NAME) {
+  switch (nameNode.getType()) {
+    case Token.NAME:
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
-    } else if (nameNode.getType() == Token.GETPROP) {
+      break;
+    case Token.GETPROP:
       if (callNode.hasOneChild()
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
       // Functions in the "Math" namespace have no side effects.
+      if (nameNode.getFirstChild().getType() == Token.NAME
+          && "Math".equals(nameNode.getFirstChild().getString())) {
+        String methodName = nameNode.getLastChild().getString();
+        if (MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(methodName)) {
+          return false;
+        }
+      }
 
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
           Node param = nameNode.getNext();
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
       }
+      break;
   }
 
   return true;
 }
\ No newline at end of file
