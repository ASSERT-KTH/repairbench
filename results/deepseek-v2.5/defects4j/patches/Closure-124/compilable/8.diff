diff --git a/tmp/36333dd2-16a9-4dec-8ff1-6f9975d0935c_buggy.java b/tmp/5acbe182-39dd-4a71-9711-b0294b75bef6_fixed.java
index 2573d30..1172c18 100644
--- a/tmp/36333dd2-16a9-4dec-8ff1-6f9975d0935c_buggy.java
+++ b/tmp/5acbe182-39dd-4a71-9711-b0294b75bef6_fixed.java
@@ -1,20 +1,37 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
+    Node originalNode = node;
     node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    
+    if (node.isName()) {
+      // Check if the node is a name and if it is assigned to something else
+      if (isNameAssignedTo(node.getString(), replacement)) {
         return false;
       }
       
+      // Check if the property being accessed is part of a chain
+      Node currentNode = originalNode;
+      while (currentNode.isGetProp()) {
+        Node parentNode = currentNode.getParent();
+        if (parentNode != null && parentNode.isAssign()) {
+          Node assignLeft = parentNode.getFirstChild();
+          if (assignLeft.isEquivalentTo(node)) {
+            return false;
+          }
+        }
+        currentNode = parentNode;
+      }
+    }
+
     return true;
   }
\ No newline at end of file
