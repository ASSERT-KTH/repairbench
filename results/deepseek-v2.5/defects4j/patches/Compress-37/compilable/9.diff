diff --git a/tmp/1741ce94-cdef-458e-a4e8-c4d98a670e14_buggy.java b/tmp/bb295976-518f-49b5-80f0-e2391606b0db_fixed.java
index 4b7e1e4..7809aa3 100644
--- a/tmp/1741ce94-cdef-458e-a4e8-c4d98a670e14_buggy.java
+++ b/tmp/bb295976-518f-49b5-80f0-e2391606b0db_fixed.java
@@ -1,52 +1,58 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true) { // get length
             int ch;
             int len = 0;
             int read = 0;
+
+            // Read the length of the entry
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
+                    break;
+                }
+                len *= 10;
+                len += ch - '0';
+            }
+
+            // If we reached the end of the stream without a valid length, break the loop
+            if (ch == -1 || len == 0) {
+                break;
+            }
+
             // Get keyword
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == '=') { // end of keyword
                     final String keyword = coll.toString(CharsetNames.UTF_8);
                     // Get rest of entry
                     final int restLen = len - read;
                     if (restLen == 1) { // only NL
                         headers.remove(keyword);
                     } else {
-                                final byte[] rest = new byte[restLen];
+                        final byte[] rest = new byte[restLen - 1]; // -1 to exclude the trailing NL
                         final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
+                        if (got != restLen - 1) {
+                            throw new IOException("Failed to read Paxheader. Expected "
+                                                  + (restLen - 1)
                                                   + " bytes, read "
                                                   + got);
                         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                        final String value = new String(rest, CharsetNames.UTF_8);
                         headers.put(keyword, value);
                     }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
                     break; // Processed single header
                 }
-                len *= 10;
-                len += ch - '0';
+                coll.write((byte) ch);
             }
-            if (ch == -1){ // EOF
-                break;
+
+            // Read the newline character to complete the current entry
+            if (i.read() == -1) {
+                break; // EOF
             }
         }
         return headers;
     }
\ No newline at end of file
