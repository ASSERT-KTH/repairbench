diff --git a/tmp/31d8e0bd-eb99-4cc8-9577-fdbf5b80b71d_buggy.java b/tmp/2c6291a9-1c22-421a-9813-04647e9ca6a4_fixed.java
index 4b7e1e4..cc7c113 100644
--- a/tmp/31d8e0bd-eb99-4cc8-9577-fdbf5b80b71d_buggy.java
+++ b/tmp/2c6291a9-1c22-421a-9813-04647e9ca6a4_fixed.java
@@ -1,52 +1,59 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean lengthParsed = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
+                lengthParsed = true;
+                break;
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (!lengthParsed || ch == -1){ // No valid length encountered or EOF
+            break;
+        }
         // Get keyword
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while((ch = i.read()) != -1) {
             read++;
             if (ch == '='){ // end of keyword
                 final String keyword = coll.toString(CharsetNames.UTF_8);
                 // Get rest of entry
                 final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                if (restLen < 0) { // invalid length, ignore and continue
+                    break;
+                } else if (restLen == 1) { // only NL
                     headers.remove(keyword);
                 } else {
                     final byte[] rest = new byte[restLen];
                     final int got = IOUtils.readFully(i, rest);
                     if (got != restLen) {
                         throw new IOException("Failed to read "
                                               + "Paxheader. Expected "
                                               + restLen
                                               + " bytes, read "
                                               + got);
                     }
                     // Drop trailing NL
                     final String value = new String(rest, 0,
                                               restLen - 1, CharsetNames.UTF_8);
                     headers.put(keyword, value);
                 }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
                 break; // Processed single header
             }
-                len *= 10;
-                len += ch - '0';
+            coll.write((byte) ch);
         }
         if (ch == -1){ // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
