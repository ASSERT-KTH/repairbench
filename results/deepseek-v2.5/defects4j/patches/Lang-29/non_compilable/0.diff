diff --git a/tmp/0e1f44b4-0f1f-4a49-a28f-677ed6b76c5b_buggy.java b/tmp/359f0c44-f2f6-48ff-b044-112da3a0d01d_fixed.java
index 3ec995f..22fe355 100644
--- a/tmp/0e1f44b4-0f1f-4a49-a28f-677ed6b76c5b_buggy.java
+++ b/tmp/359f0c44-f2f6-48ff-b044-112da3a0d01d_fixed.java
@@ -1,26 +1,35 @@
     /**
      * <p>
      * Converts the given Java version string to an <code>int</code>.
      * </p>
      * 
      * <p>
      * Example return values:
      * </p>
      * <ul>
      * <li><code>120</code> for Java 1.2</li>
      * <li><code>131</code> for Java 1.3.1</li>
      * <li><code>160</code> for Java 1.6.0_20</li>
      * </ul>
      * 
      * <p>
      * Patch releases are not reported.
      * </p>
      * <p>
      * This method is package private instead of private to support unit test invocation.
      * </p>
      * 
      * @return the version, for example 131 for Java 1.3.1
      */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    static int toJavaVersionInt(String version) {
+        if (version == null || version.isEmpty()) {
+            return 0;
+        }
+        String[] versionParts = toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE);
+        if (versionParts == null || versionParts.length == 0 || versionParts[0] == null) {
+            return 0;
+        }
+        int major = Integer.parseInt(versionParts[0]);
+        int minor = (versionParts.length > 1 && versionParts[1] != null) ? Integer.parseInt(versionParts[1]) : 0;
+        return major * 100 + minor * 10;
     }
\ No newline at end of file
