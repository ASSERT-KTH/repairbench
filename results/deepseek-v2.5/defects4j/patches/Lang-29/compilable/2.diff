diff --git a/tmp/e4812e3f-8d02-47bd-b057-daa24ccfa019_buggy.java b/tmp/5d1f660f-bc90-4ecf-b1d9-3e5bbcf42f45_fixed.java
index 3ec995f..c3e47ab 100644
--- a/tmp/e4812e3f-8d02-47bd-b057-daa24ccfa019_buggy.java
+++ b/tmp/5d1f660f-bc90-4ecf-b1d9-3e5bbcf42f45_fixed.java
@@ -1,26 +1,37 @@
     /**
      * <p>
      * Converts the given Java version string to an <code>int</code>.
      * </p>
      * 
      * <p>
      * Example return values:
      * </p>
      * <ul>
      * <li><code>120</code> for Java 1.2</li>
      * <li><code>131</code> for Java 1.3.1</li>
      * <li><code>160</code> for Java 1.6.0_20</li>
      * </ul>
      * 
      * <p>
      * Patch releases are not reported.
      * </p>
      * <p>
      * This method is package private instead of private to support unit test invocation.
      * </p>
      * 
      * @return the version, for example 131 for Java 1.3.1
      */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    static int toJavaVersionInt(String version) {
+        if (version == null || version.isEmpty()) {
+            return 0;
+        }
+        version = version.toLowerCase().replaceAll("[^0-9.]", "");
+        String[] parts = version.split("\\.");
+        if (parts.length == 0) {
+            return 0;
+        }
+        int major = Integer.parseInt(parts[0]);
+        int minor = parts.length > 1 ? Integer.parseInt(parts[1]) : 0;
+        int patch = parts.length > 2 ? Integer.parseInt(parts[2]) : 0;
+        return major * 100 + minor * 10 + (patch > 0 ? 1 : 0);
     }
\ No newline at end of file
