diff --git a/tmp/ef8010d1-b870-4053-b984-5ad6fff1b6f0_buggy.java b/tmp/61c958ed-c5eb-4f8f-be14-da9a2680a842_fixed.java
index 5abdeb5..0064ce1 100644
--- a/tmp/ef8010d1-b870-4053-b984-5ad6fff1b6f0_buggy.java
+++ b/tmp/61c958ed-c5eb-4f8f-be14-da9a2680a842_fixed.java
@@ -1,29 +1,36 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Check if the variable is used in an assignment expression
+            if (parent.isAssign() && parent.getFirstChild() == n) {
+              // Skip the left-hand side of assignments
+              return;
+            }
+            // Check if the variable is used within a conditional expression
+            if (parent.isHook() && parent.getLastChild() == n && parent.getChildCount() == 3) {
+              // Skip the left-hand side of conditional expressions
+              return;
+            }
+            // Check if the variable is used within a binary expression
+            if (parent.isBinaryOperator() && parent.getLastChild() == n) {
+              // Skip the right-hand side of binary expressions
+              return;
+            }
             numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
