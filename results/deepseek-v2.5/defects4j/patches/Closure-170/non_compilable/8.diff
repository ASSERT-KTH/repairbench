diff --git a/tmp/f118da88-16e1-4f88-9029-14af4b1d189f_buggy.java b/tmp/6b22987b-f37c-44ac-a3bd-af6025e9b8c0_fixed.java
index 5abdeb5..1798c89 100644
--- a/tmp/f118da88-16e1-4f88-9029-14af4b1d189f_buggy.java
+++ b/tmp/6b22987b-f37c-44ac-a3bd-af6025e9b8c0_fixed.java
@@ -1,29 +1,36 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
+            if (!(parent.isAssign() &&
                   (parent.getFirstChild() == n))) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
+            } else if (parent.isHook() &&
+                       parent.getSecondChild().isAssign() &&
+                       parent.getSecondChild().getFirstChild() == n) {
+              // Count the use in the ternary operator (hook) when it is
+              // the left-hand side of the assignment in the true branch
+              numUsesWithinCfgNode++;
+            }
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
