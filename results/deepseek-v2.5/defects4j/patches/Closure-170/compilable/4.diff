diff --git a/tmp/0b1a6ced-b95a-4f5d-82fa-f855533f8f40_buggy.java b/tmp/299a6b55-efcf-4f9f-81c9-232596c741e2_fixed.java
index 5abdeb5..7eb6724 100644
--- a/tmp/0b1a6ced-b95a-4f5d-82fa-f855533f8f40_buggy.java
+++ b/tmp/299a6b55-efcf-4f9f-81c9-232596c741e2_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Check if the name is not on the left-hand side of an assignment
+            if (!(parent.isAssign() && parent.getFirstChild() == n)) {
               numUsesWithinCfgNode++;
+            } else if (parent.isExprResult()) {
+              // Handle cases where the assignment is part of an expression result
+              Node expression = parent.getParent();
+              if (expression != null && expression.isComma()) {
+                numUsesWithinCfgNode++;
+              }
+            }
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
