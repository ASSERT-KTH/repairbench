diff --git a/tmp/79394d4f-ed38-4046-9a7d-d81092320f15_buggy.java b/tmp/ba23daac-67a1-4e8b-8c23-8bb67b3c96dc_fixed.java
index 5abdeb5..6107b68 100644
--- a/tmp/79394d4f-ed38-4046-9a7d-d81092320f15_buggy.java
+++ b/tmp/ba23daac-67a1-4e8b-8c23-8bb67b3c96dc_fixed.java
@@ -1,29 +1,33 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+            if (!(parent.isAssign() && parent.getFirstChild() == n)) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
+            } else if (parent.isHook() && parent.getLastChild() == n) {
+              // Special case for ternary operator (hook):
+              // If the node is in the last child of the hook, it is used.
+              numUsesWithinCfgNode++;
+            }
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
