diff --git a/tmp/d8c37900-292f-40d5-846f-dbf4933aa1b7_buggy.java b/tmp/be09abe8-229d-40ea-b09f-4d1d55f9755b_fixed.java
index e69de29..e427f70 100644
--- a/tmp/d8c37900-292f-40d5-846f-dbf4933aa1b7_buggy.java
+++ b/tmp/be09abe8-229d-40ea-b09f-4d1d55f9755b_fixed.java
@@ -0,0 +1,86 @@
+public class JsonGenerator {
+    public static class Feature {
+        public static final Feature QUOTE_FIELD_NAMES = new Feature();
+    }
+
+    private boolean quoteFieldNames = true;
+
+    public JsonGenerator(JsonFactory factory) {
+        // Constructor implementation
+    }
+
+    public void disable(Feature feature) {
+        if (feature == Feature.QUOTE_FIELD_NAMES) {
+            quoteFieldNames = false;
+        }
+    }
+
+    public void writeStartObject() throws IOException {
+        // Implementation to start writing an object
+    }
+
+    public void writeEndObject() throws IOException {
+        // Implementation to end writing an object
+    }
+
+    public void writeFieldName(String name) throws IOException {
+        if (quoteFieldNames) {
+            // Write quoted field name
+        } else {
+            // Write unquoted field name
+        }
+    }
+
+    public void writeNumber(int i) throws IOException {
+        // Implementation to write a number
+    }
+}
+
+public class JsonFactory {
+    public JsonGenerator createGenerator() {
+        return new JsonGenerator(this);
+    }
+
+    public void disable(JsonGenerator.Feature feature) {
+        // Implementation to disable a feature
+    }
+}
+
+public class TestJsonGeneratorFeatures {
+    private static final JsonFactory JSON_F = new JsonFactory();
+
+    private void _testFieldNameQuotingEnabled(JsonFactory factory, boolean writeFieldName, boolean expectQuotes, String expected) throws IOException {
+        JsonGenerator g = factory.createGenerator();
+        g.writeStartObject();
+        if (writeFieldName) {
+            g.writeFieldName("foo");
+        }
+        g.writeNumber(1);
+        g.writeEndObject();
+        // Compare the output with expected string
+    }
+
+    public void testFieldNameQuotingEnabled() throws IOException {
+        // First, test with default factory, with quoting enabled by default
+        
+        // First, default, with quotes
+        _testFieldNameQuotingEnabled(JSON_F, true, true, "{\"foo\":1}");
+        _testFieldNameQuotingEnabled(JSON_F, false, true, "{\"foo\":1}");
+
+        // then without quotes
+        _testFieldNameQuotingEnabled(JSON_F, true, false, "{foo:1}");
+        _testFieldNameQuotingEnabled(JSON_F, false, false, "{foo:1}");
+
+        // Then with alternatively configured factory
+
+        JsonFactory JF2 = new JsonFactory();
+        JF2.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+
+        _testFieldNameQuotingEnabled(JF2, true, true, "{\"foo\":1}");
+        _testFieldNameQuotingEnabled(JF2, false, true, "{\"foo\":1}");
+
+        // then without quotes
+        _testFieldNameQuotingEnabled(JF2, true, false, "{foo:1}");
+        _testFieldNameQuotingEnabled(JF2, false, false, "{foo:1}");
+    }
+}
\ No newline at end of file
