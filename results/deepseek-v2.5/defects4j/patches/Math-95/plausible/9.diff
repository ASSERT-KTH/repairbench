diff --git a/tmp/2856f059-2916-4d56-8d53-82b9da9c4429_buggy.java b/tmp/b4cc57d2-b5ca-4ba5-9cef-0b652706f3ab_fixed.java
index 25c13b3..bc50f56 100644
--- a/tmp/2856f059-2916-4d56-8d53-82b9da9c4429_buggy.java
+++ b/tmp/b4cc57d2-b5ca-4ba5-9cef-0b652706f3ab_fixed.java
@@ -1,15 +1,20 @@
     /**
      * Access the initial domain value, based on <code>p</code>, used to
      * bracket a CDF root.  This method is used by
      * {@link #inverseCumulativeProbability(double)} to find critical values.
      * 
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
     protected double getInitialDomain(double p) {
-        double ret;
         double d = getDenominatorDegreesOfFreedom();
-            // use mean
-            ret = d / (d - 2.0);
-        return ret;
+        if (d <= 2.0) {
+            // When denominator degrees of freedom is less than or equal to 2,
+            // the mean is undefined, so we need to handle this case differently.
+            // A common approach is to use a value that is known to be within the valid range.
+            return 0.5; // A reasonable initial guess for small degrees of freedom.
+        } else {
+            // Use the mean when degrees of freedom is greater than 2.
+            return d / (d - 2.0);
+        }
     }
\ No newline at end of file
