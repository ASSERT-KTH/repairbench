diff --git a/tmp/87ce4b47-7c2d-4fee-8317-e43f363d1a32_buggy.java b/tmp/552ec4d5-bdf0-44c4-af29-93fc0fc439b7_fixed.java
index 43fb5fd..2b2e453 100644
--- a/tmp/87ce4b47-7c2d-4fee-8317-e43f363d1a32_buggy.java
+++ b/tmp/552ec4d5-bdf0-44c4-af29-93fc0fc439b7_fixed.java
@@ -1,55 +1,68 @@
 /**
  * <p>Breaks <code>token</code> into its constituent parts
  * using the following algorithm.
  * <ul>
  *  <li>ignore the first character ("<b>-</b>")</li>
  *  <li>foreach remaining character check if an {@link Option}
  *  exists with that id.</li>
  *  <li>if an {@link Option} does exist then add that character
  *  prepended with "<b>-</b>" to the list of processed tokens.</li>
  *  <li>if the {@link Option} can have an argument value and there 
  *  are remaining characters in the token then add the remaining 
  *  characters as a token to the list of processed tokens.</li>
  *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> 
  *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
  *  "<b>--</b>" followed by the remaining characters and also 
  *  the remaining tokens directly to the processed tokens list.</li>
  *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
  *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
  *  character prepended with "<b>-</b>".</li>
  * </ul>
  * </p>
  *
  * @param token The current token to be <b>burst</b>
  * @param stopAtNonOption Specifies whether to stop processing
  * at the first non-Option encountered.
  */
 protected void burstToken(String token, boolean stopAtNonOption)
 {
+    StringBuilder remaining = new StringBuilder();
+    boolean foundNonOption = false;
+
     for (int i = 1; i < token.length(); i++)
     {
         String ch = String.valueOf(token.charAt(i));
 
         if (options.hasOption(ch))
         {
             tokens.add("-" + ch);
             currentOption = options.getOption(ch);
 
             if (currentOption.hasArg() && (token.length() != (i + 1)))
             {
                 tokens.add(token.substring(i + 1));
-
                 break;
             }
         }
         else if (stopAtNonOption)
         {
-                process(token.substring(i));
+            remaining.append(ch);
+            foundNonOption = true;
         }
         else
         {
-                tokens.add(token);
+            tokens.add("-" + ch);
+        }
+
+        if (foundNonOption)
+        {
+            tokens.add(remaining.toString());
             break;
         }
     }
+
+    if (foundNonOption)
+    {
+        tokens.add("--" + remaining.toString());
+    }
 }
\ No newline at end of file
