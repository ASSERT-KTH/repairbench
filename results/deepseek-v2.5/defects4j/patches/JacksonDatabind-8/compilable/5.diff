diff --git a/tmp/a6734e2f-022f-4351-957c-c353c70f1f4c_buggy.java b/tmp/2e2d1c76-a187-4281-a982-a7aa737b3086_fixed.java
index c9da1b7..672adc7 100644
--- a/tmp/a6734e2f-022f-4351-957c-c353c70f1f4c_buggy.java
+++ b/tmp/2e2d1c76-a187-4281-a982-a7aa737b3086_fixed.java
@@ -1,33 +1,38 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
+
     // already had an explicitly marked one?
     if (oldOne != null) {
+        boolean oldExplicit = (_explicitCreators & mask) != 0;
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+        // If both are explicit, throw an exception
+        if (oldExplicit && explicit) {
             throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                     + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
+
+        // If the new one is explicit and the old one is not, use the new one
+        if (explicit && !oldExplicit) {
+            _explicitCreators |= mask;
+            _creators[typeIndex] = _fixAccess(newOne);
+            return;
         }
+
+        // If the old one is explicit and the new one is not, skip the new one
+        if (oldExplicit && !explicit) {
+            return;
+        }
+
+        // If neither is explicit, use the new one
+        _creators[typeIndex] = _fixAccess(newOne);
+    } else {
+        // If there was no old one, simply add the new one
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
+}
\ No newline at end of file
