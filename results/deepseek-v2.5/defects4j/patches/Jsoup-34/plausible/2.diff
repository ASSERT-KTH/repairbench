diff --git a/tmp/52d5bea9-cbf2-452a-8adf-2b1ab12427c0_buggy.java b/tmp/04fc50f9-fbd6-4a3f-b910-f557d3f91b1a_fixed.java
index 21f64c6..07ef22e 100644
--- a/tmp/52d5bea9-cbf2-452a-8adf-2b1ab12427c0_buggy.java
+++ b/tmp/04fc50f9-fbd6-4a3f-b910-f557d3f91b1a_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
+        int seqLength = seq.length();
+        if (seqLength == 0) return -1;
+
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
                 while (++offset < length && startChar != input[offset]);
+                if (offset >= length) break;
+            }
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+            int last = i + seqLength - 1;
+            if (last <= length) { // ensure we don't go out of bounds
+                int j = 1;
+                while (i < last && seq.charAt(j) == input[i]) {
+                    i++;
+                    j++;
+                }
                 if (i == last) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
