diff --git a/tmp/18dfc57a-5bf3-4050-bad6-90f4106fae2e_buggy.java b/tmp/84e18be6-fa9e-4e54-8ce0-c5e6b8d7e679_fixed.java
index 21f64c6..cc42126 100644
--- a/tmp/18dfc57a-5bf3-4050-bad6-90f4106fae2e_buggy.java
+++ b/tmp/84e18be6-fa9e-4e54-8ce0-c5e6b8d7e679_fixed.java
@@ -1,23 +1,31 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
+    int seqLength = seq.length();
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
+        if (startChar != input[offset]) {
             while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
+        }
         if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+            int i = offset + 1;
+            int last = i + seqLength - 1;
+            if (last <= length) { // Ensure we don't go out of bounds
+                int j = 1;
+                while (i < last && seq.charAt(j) == input[i]) {
+                    i++;
+                    j++;
+                }
                 if (i == last) // found full sequence
                     return offset - pos;
             }
         }
+    }
     return -1;
 }
\ No newline at end of file
