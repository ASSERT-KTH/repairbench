diff --git a/tmp/765c22aa-749e-4daf-828f-de9c29458a82_buggy.java b/tmp/fefb20f1-8400-4660-8fc2-22756ecca08e_fixed.java
index 0b7c52e..612f591 100644
--- a/tmp/765c22aa-749e-4daf-828f-de9c29458a82_buggy.java
+++ b/tmp/fefb20f1-8400-4660-8fc2-22756ecca08e_fixed.java
@@ -1,27 +1,34 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
       child != null;
       child = child.getNext()) {
     // Maybe STRING, GET, SET
 
     // We should never see a mix of numbers and strings.
     String name = child.getString();
     T type = typeSystem.getType(getScope(), n, name);
 
+    if (type == null) {
+      // If type is null, skip scheduling renaming and report an error
+      compiler.report(JSError.make(
+          t.getSourceName(), child, propertiesToErrorFor.get(name),
+          Warnings.INVALIDATION, name, "null", n.toString(), ""));
+      continue;
+    }
+
     Property prop = getProperty(name);
     if (!prop.scheduleRenaming(child,
                                processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
-                Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+            Warnings.INVALIDATION, name, type.toString(), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
