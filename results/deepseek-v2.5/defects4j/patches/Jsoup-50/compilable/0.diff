diff --git a/tmp/01cc5a7a-38f8-49bf-832a-8dc5df88f124_buggy.java b/tmp/0a7b8471-696f-444a-9652-cb190da00792_fixed.java
index 25ca093..5bb10c3 100644
--- a/tmp/01cc5a7a-38f8-49bf-832a-8dc5df88f124_buggy.java
+++ b/tmp/0a7b8471-696f-444a-9652-cb190da00792_fixed.java
@@ -1,52 +1,74 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        String detectedCharset = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // Look for BOM - overrides any other header or input
+        ByteBuffer duplicate = byteData.duplicate();
+        detectedCharset = detectCharsetFromBOM(duplicate);
+        if (detectedCharset != null) {
+            charsetName = detectedCharset;
+            docData = decodeByteBuffer(duplicate, charsetName);
+            doc = parser.parseInput(docData, baseUri);
+        } else {
+            if (charsetName == null) { // Determine from meta. Safe parse as UTF-8
                 docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 doc = parser.parseInput(docData, baseUri);
                 Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+                if (meta != null) { // If not found, will keep utf-8 as best attempt
                     String foundCharset = null;
                     if (meta.hasAttr("http-equiv")) {
                         foundCharset = getCharsetFromContentType(meta.attr("content"));
                     }
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                    if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // Need to re-decode
                         foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                         charsetName = foundCharset;
                         byteData.rewind();
                         docData = Charset.forName(foundCharset).decode(byteData).toString();
                         doc = null;
                     }
                 }
-        } else { // specified by content type header (or by user on file load)
+            } else { // Specified by content type header (or by user on file load)
                 Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
                 docData = Charset.forName(charsetName).decode(byteData).toString();
             }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
             if (doc == null) {
                 doc = parser.parseInput(docData, baseUri);
                 doc.outputSettings().charset(charsetName);
             }
+        }
         return doc;
     }
+
+    private static String detectCharsetFromBOM(ByteBuffer byteData) {
+        byte[] bom = new byte[4];
+        byteData.get(bom, 0, 4);
+
+        if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+            return "UTF-32BE";
+        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+            return "UTF-32LE";
+        } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+            return "UTF-16BE";
+        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+            return "UTF-16LE";
+        } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+            return "UTF-8";
+        }
+        return null;
+    }
+
+    private static String decodeByteBuffer(ByteBuffer byteData, String charsetName) {
+        byteData.rewind();
+        return Charset.forName(charsetName).decode(byteData).toString();
+    }
\ No newline at end of file
