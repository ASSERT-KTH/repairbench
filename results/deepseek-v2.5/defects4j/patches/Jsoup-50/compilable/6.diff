diff --git a/tmp/c8b74061-8537-4a6c-9af0-b30aebe25f56_buggy.java b/tmp/a3cadf31-91b5-451e-9e67-eb5eabb28834_fixed.java
index 25ca093..a56d19c 100644
--- a/tmp/c8b74061-8537-4a6c-9af0-b30aebe25f56_buggy.java
+++ b/tmp/a3cadf31-91b5-451e-9e67-eb5eabb28834_fixed.java
@@ -1,52 +1,71 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String detectedCharset = null;
 
-        // look for BOM - overrides any other header or input
+    // Detect BOM and determine charset
+    byte[] bom = new byte[4];
+    byteData.mark();
+    byteData.get(bom, 0, 4);
+    byteData.reset();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+        detectedCharset = "UTF-8";
+        byteData.position(3); // Skip BOM
+    } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+        detectedCharset = "UTF-16BE";
+        byteData.position(2); // Skip BOM
+    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+        detectedCharset = "UTF-16LE";
+        byteData.position(2); // Skip BOM
+    } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+        detectedCharset = "UTF-32BE";
+        byteData.position(4); // Skip BOM
+    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+        detectedCharset = "UTF-32LE";
+        byteData.position(4); // Skip BOM
+    }
+
+    if (charsetName == null || detectedCharset != null) { // determine from meta. safe parse as UTF-8
+        String defaultCharset = "UTF-8";
+        if (detectedCharset == null) {
+            detectedCharset = defaultCharset;
+        }
+        docData = Charset.forName(detectedCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) { // if not found, will keep the detected charset as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(detectedCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
+                byteData.position(detectedCharset.equals(defaultCharset) ? 0 : 3); // Skip BOM if defaultCharset is UTF-8
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : detectedCharset);
     }
     return doc;
 }
\ No newline at end of file
