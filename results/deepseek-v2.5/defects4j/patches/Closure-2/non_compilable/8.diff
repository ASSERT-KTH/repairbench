diff --git a/tmp/34eab228-41bb-423b-8ee6-594d3ce2e38a_buggy.java b/tmp/41eba67e-fc36-4fb8-9efb-0a1ba3e4e7ae_fixed.java
index 8ff679b..4837176 100644
--- a/tmp/34eab228-41bb-423b-8ee6-594d3ce2e38a_buggy.java
+++ b/tmp/41eba67e-fc36-4fb8-9efb-0a1ba3e4e7ae_fixed.java
@@ -1,39 +1,40 @@
-  /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
-   * @param t The node traversal object that supplies context
-   * @param n The node being visited
-   * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
-   * @param interfaceType The super interface that is being visited
-   */
 private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+    // Handle the case where interfaceType is null (non-existent interface)
+    if (interfaceType == null) {
+        // Report an error for the non-existent interface
+        compiler.report(
+            t.makeError(n, BAD_EXTENDED_INTERFACE_TYPE, functionName));
+        return;
+    }
+
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
     // This can be the case if interfaceType is proxy to a non-existent
     // object (which is a bad type annotation, but shouldn't crash).
+    if (implicitProto != null) {
         currentPropertyNames = implicitProto.getOwnPropertyNames();
+    } else {
+        currentPropertyNames = new HashSet<>();
+    }
+
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
         if (!interfaceType.getPropertyType(name).isEquivalentTo(
             oType.getPropertyType(name))) {
           compiler.report(
               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                   functionName, name, oType.toString(),
                   interfaceType.toString()));
         }
       }
       currentProperties.put(name, interfaceType);
     }
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
\ No newline at end of file
