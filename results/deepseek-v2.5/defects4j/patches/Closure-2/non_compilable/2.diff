diff --git a/tmp/3a34eb33-224b-471e-87ee-0530bf6e1fce_buggy.java b/tmp/06bd47ec-2288-4fb5-b760-315d96ff8fd0_fixed.java
index 8ff679b..99b9b7f 100644
--- a/tmp/3a34eb33-224b-471e-87ee-0530bf6e1fce_buggy.java
+++ b/tmp/06bd47ec-2288-4fb5-b760-315d96ff8fd0_fixed.java
@@ -1,39 +1,41 @@
-  /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
-   * @param t The node traversal object that supplies context
-   * @param n The node being visited
-   * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
-   * @param interfaceType The super interface that is being visited
-   */
 private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
     String functionName, HashMap<String, ObjectType> properties,
     HashMap<String, ObjectType> currentProperties,
     ObjectType interfaceType) {
+  if (interfaceType == null) {
+    // Handle the case where interfaceType is null, which can happen if the interface is non-existent.
+    // This skips further processing to avoid NullPointerException.
+    return;
+  }
+
   ObjectType implicitProto = interfaceType.getImplicitPrototype();
   Set<String> currentPropertyNames;
+
+  if (implicitProto != null) {
+    currentPropertyNames = implicitProto.getOwnPropertyNames();
+  } else {
+    // Handle the case where implicitProto is null.
     // This can be the case if interfaceType is proxy to a non-existent
     // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    currentPropertyNames = new HashSet<>();
+  }
+
   for (String name : currentPropertyNames) {
     ObjectType oType = properties.get(name);
     if (oType != null) {
       if (!interfaceType.getPropertyType(name).isEquivalentTo(
           oType.getPropertyType(name))) {
         compiler.report(
             t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                 functionName, name, oType.toString(),
                 interfaceType.toString()));
       }
     }
     currentProperties.put(name, interfaceType);
   }
+
   for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
     checkInterfaceConflictProperties(t, n, functionName, properties,
         currentProperties, iType);
   }
 }
\ No newline at end of file
