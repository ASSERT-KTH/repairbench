diff --git a/tmp/f0a55400-5aa6-4df5-a6db-bcbc036c9765_buggy.java b/tmp/0f020013-6af2-4656-a2fd-d6dfb1453484_fixed.java
index b4e6f03..55c8102 100644
--- a/tmp/f0a55400-5aa6-4df5-a6db-bcbc036c9765_buggy.java
+++ b/tmp/0f020013-6af2-4656-a2fd-d6dfb1453484_fixed.java
@@ -1,44 +1,53 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
             URL base;
-            try {
             try {
                 base = new URL(baseUri);
             } catch (MalformedURLException e) {
                 // the base is unsuitable, but the attribute may be abs on its own, so try that
+                try {
                     URL abs = new URL(relUrl);
                     return abs.toExternalForm();
+                } catch (MalformedURLException e2) {
+                    return "";
+                }
+            }
+            // Ensure that the relative URL is correctly interpreted relative to the base URL
+            if (relUrl.startsWith("?")) {
+                // If the relative URL starts with '?', treat it as a query string relative to the base URL
+                relUrl = base.getPath() + relUrl;
             }
             // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+            try {
                 URL abs = new URL(base, relUrl);
                 return abs.toExternalForm();
             } catch (MalformedURLException e) {
                 return "";
             }
         }
     }
\ No newline at end of file
