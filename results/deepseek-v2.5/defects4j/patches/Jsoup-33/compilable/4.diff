diff --git a/tmp/2d7be101-1a9b-43c1-92b7-1521716bd5e8_buggy.java b/tmp/a20bc589-cf1f-4e82-a58f-22fb7242d93b_fixed.java
index dc93be3..61e3b1d 100644
--- a/tmp/2d7be101-1a9b-43c1-92b7-1521716bd5e8_buggy.java
+++ b/tmp/a20bc589-cf1f-4e82-a58f-22fb7242d93b_fixed.java
@@ -1,14 +1,23 @@
     Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
+            Tag tag = Tag.valueOf(startTag.name());
+            if (tag.isKnownTag()) {
+                // If it's a known self-closing tag, insert it as an empty element with a closing tag.
                 Element el = insertEmpty(startTag);
                 stack.add(el);
                 tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
                 return el;
+            } else {
+                // If it's an unknown self-closing tag, insert it as a self-closing element without a closing tag.
+                Element el = insertEmpty(startTag);
+                stack.add(el);
+                return el;
+            }
         }
         
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
\ No newline at end of file
