diff --git a/tmp/4f9ed700-cca9-4c7d-83ff-e89e2a720abc_buggy.java b/tmp/cf324caf-0e99-445b-9075-1506a034384d_fixed.java
index 03b03d7..844c93d 100644
--- a/tmp/4f9ed700-cca9-4c7d-83ff-e89e2a720abc_buggy.java
+++ b/tmp/cf324caf-0e99-445b-9075-1506a034384d_fixed.java
@@ -1,25 +1,40 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long adjustedInstant;
+        if (earlierOrLater) {
+            // Find the later offset by checking the next hour
+            long nextHourLocal = convertUTCToLocal(instant + DateTimeConstants.MILLIS_PER_HOUR);
+            if (nextHourLocal == local) {
+                adjustedInstant = convertLocalToUTC(local, false, instant + DateTimeConstants.MILLIS_PER_HOUR);
+            } else {
+                adjustedInstant = convertLocalToUTC(local, false, instant);
+            }
+        } else {
+            // Find the earlier offset by checking the previous hour
+            long prevHourLocal = convertUTCToLocal(instant - DateTimeConstants.MILLIS_PER_HOUR);
+            if (prevHourLocal == local) {
+                adjustedInstant = convertLocalToUTC(local, false, instant - DateTimeConstants.MILLIS_PER_HOUR);
+            } else {
+                adjustedInstant = convertLocalToUTC(local, false, instant);
+            }
+        }
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        return adjustedInstant;
     }
\ No newline at end of file
