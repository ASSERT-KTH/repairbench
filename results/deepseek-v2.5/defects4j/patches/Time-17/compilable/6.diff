diff --git a/tmp/25f34a0d-a503-4c1c-ba4b-96a401b3e54c_buggy.java b/tmp/c40a8789-06c8-409a-93bd-2e19ea73a76d_fixed.java
index 03b03d7..8966e1e 100644
--- a/tmp/25f34a0d-a503-4c1c-ba4b-96a401b3e54c_buggy.java
+++ b/tmp/c40a8789-06c8-409a-93bd-2e19ea73a76d_fixed.java
@@ -1,25 +1,24 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
+    // Evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        return instant;  // Not an overlap (less than is a gap, equal is normal case)
     }
 
-        // work out range of instants that have duplicate local times
+    // Work out the local time of the given instant
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Calculate the result based on the earlier or later offset preference
+    long earlierInstant = convertLocalToUTC(local, false, instantBefore);
+    long laterInstant = convertLocalToUTC(local, false, instantAfter);
+
+    return earlierOrLater ? laterInstant : earlierInstant;
 }
\ No newline at end of file
