diff --git a/tmp/2ecae3d4-ea85-42e3-b5ea-47608e4fc419_buggy.java b/tmp/f306ee0d-9fad-40fd-9989-1cf7e9c8c1d7_fixed.java
index d3b3ebf..31f4c7b 100644
--- a/tmp/2ecae3d4-ea85-42e3-b5ea-47608e4fc419_buggy.java
+++ b/tmp/f306ee0d-9fad-40fd-9989-1cf7e9c8c1d7_fixed.java
@@ -1,62 +1,55 @@
 /**
  * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
  * from this InputStream.
  * 
  * @param b
  *            destination byte array
  * @param offset
  *            where to start writing the bytes
  * @param len
  *            maximum number of bytes to read
  * 
  * @return number of bytes read
  * @throws IOException
  *             if an I/O error occurs.
  * @throws NullPointerException
  *             if the byte array parameter is null
  * @throws IndexOutOfBoundsException
  *             if offset, len or buffer size are invalid
  */
 public int read(byte b[], int offset, int len) throws IOException {
     if (b == null) {
         throw new NullPointerException();
-        } else if (offset < 0 || len < 0) {
-            throw new IndexOutOfBoundsException();
-        } else if (offset > b.length || offset + len > b.length) {
+    } else if (offset < 0 || len < 0 || offset > b.length - len) {
         throw new IndexOutOfBoundsException();
     } else if (len == 0) {
         return 0;
-        } else {
-            /*
-             Rationale for while-loop on (readLen == 0):
-             -----
-             Base64.readResults() usually returns > 0 or EOF (-1).  In the
-             rare case where it returns 0, we just keep trying.
+    }
 
-             This is essentially an undocumented contract for InputStream
-             implementors that want their code to work properly with
-             java.io.InputStreamReader, since the latter hates it when
-             InputStream.read(byte[]) returns a zero.  Unfortunately our
-             readResults() call must return 0 if a large amount of the data
-             being decoded was non-base64, so this while-loop enables proper
-             interop with InputStreamReader for that scenario.
-             -----
-             This is a fix for CODEC-101
-            */
+    int totalBytesRead = 0;
+    while (totalBytesRead == 0) {
         if (!base64.hasData()) {
             byte[] buf = new byte[doEncode ? 4096 : 8192];
             int c = in.read(buf);
+            if (c == -1) {
+                return -1; // End of stream reached
+            }
             // A little optimization to avoid System.arraycopy()
             // when possible.
             if (c > 0 && b.length == len) {
                 base64.setInitialBuffer(b, offset, len);
             }
             if (doEncode) {
                 base64.encode(buf, 0, c);
             } else {
                 base64.decode(buf, 0, c);
             }
         }
-            return base64.readResults(b, offset, len);
+        int bytesRead = base64.readResults(b, offset, len);
+        if (bytesRead > 0) {
+            return bytesRead;
         }
+        totalBytesRead += bytesRead;
+    }
+    return totalBytesRead;
 }
\ No newline at end of file
