diff --git a/tmp/705d4db1-61ae-4f9a-9631-65b37ed43f2b_buggy.java b/tmp/d8f6a839-4976-465e-997f-f56cb1c49af0_fixed.java
index 10616db..c80fd2c 100644
--- a/tmp/705d4db1-61ae-4f9a-9631-65b37ed43f2b_buggy.java
+++ b/tmp/d8f6a839-4976-465e-997f-f56cb1c49af0_fixed.java
@@ -1,19 +1,30 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        int[] result = iChronology.get(partial, instant);
+
+        // Adjust the day if it falls out of the valid range
+        if (fieldIndex == DateTimeFieldType.dayOfMonth().getOrdinal()) {
+            int month = result[DateTimeFieldType.monthOfYear().getOrdinal()];
+            int day = result[DateTimeFieldType.dayOfMonth().getOrdinal()];
+            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);
+            if (day > maxDayOfMonth) {
+                result[DateTimeFieldType.dayOfMonth().getOrdinal()] = maxDayOfMonth;
+            }
+        }
+
+        return result;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
