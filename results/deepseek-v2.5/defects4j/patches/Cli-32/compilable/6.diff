diff --git a/tmp/8982b5d6-253b-4625-ba6f-92de3b3f09a8_buggy.java b/tmp/d381603d-d324-4439-a72f-f62b7887f701_fixed.java
index 14b78fb..13022c6 100644
--- a/tmp/8982b5d6-253b-4625-ba6f-92de3b3f09a8_buggy.java
+++ b/tmp/d381603d-d324-4439-a72f-f62b7887f701_fixed.java
@@ -1,56 +1,55 @@
 /**
      * Finds the next text wrap position after <code>startPos</code> for the
      * text in <code>text</code> with the column width <code>width</code>.
      * The wrap point is the last position before startPos+width having a 
      * whitespace character (space, \n, \r). If there is no whitespace character
      * before startPos+width, it will return startPos+width.
      *
      * @param text The text being searched for the wrap position
      * @param width width of the wrapped text
      * @param startPos position from which to start the lookup whitespace
      * character
      * @return postion on which the text must be wrapped or -1 if the wrap
      * position is at the end of the text
      */
 protected int findWrapPos(String text, int width, int startPos)
 {
     int pos;
     
     // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= startPos + width)
+            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= startPos + width))
     {
         return pos + 1;
     }
     else if (startPos + width >= text.length())
     {
         return -1;
     }
 
-
     // look for the last whitespace character before startPos+width
-        pos = startPos + width;
+    pos = startPos + width - 1; // Adjusted to check up to startPos + width - 1
 
     char c;
 
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
+    while (pos >= startPos && ((c = text.charAt(pos)) != ' ')
             && (c != '\n') && (c != '\r'))
     {
         --pos;
     }
 
     // if we found it - just return
     if (pos > startPos)
     {
         return pos;
     }
     
     // if we didn't find one, simply chop at startPos+width
     pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
+    while (pos < text.length() && ((c = text.charAt(pos)) != ' ')
            && (c != '\n') && (c != '\r'))
     {
         ++pos;
     }
     return pos == text.length() ? -1 : pos;
 }
\ No newline at end of file
