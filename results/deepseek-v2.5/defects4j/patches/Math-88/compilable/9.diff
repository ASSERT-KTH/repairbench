diff --git a/tmp/07304a7b-c48e-43c7-bbd0-330272395da6_buggy.java b/tmp/9bbb4aa9-1b23-4f5f-8bf7-1f20701dead9_fixed.java
index 544303b..97930fb 100644
--- a/tmp/07304a7b-c48e-43c7-bbd0-330272395da6_buggy.java
+++ b/tmp/9bbb4aa9-1b23-4f5f-8bf7-1f20701dead9_fixed.java
@@ -1,29 +1,32 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
         // if multiple variables can take a given value 
         // then we choose the first and set the rest equal to 0
         coefficients[i] =
             (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
             (restrictToNonNegative ? 0 : mostNegative);
         if (basicRow != null) {
+            boolean found = false;
             for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+                if (tableau.getEntry(basicRow, j) == 1 && !found) {
+                    found = true;
+                } else if (tableau.getEntry(basicRow, j) == 1) {
                     coefficients[i] = 0;
                 }
             }
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
