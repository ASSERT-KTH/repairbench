diff --git a/tmp/f1405fbd-7ca7-4c0e-82b1-47226c6f1d94_buggy.java b/tmp/6dec53ab-41a5-486d-a15a-624ca9679463_fixed.java
index 544303b..0dd4c58 100644
--- a/tmp/f1405fbd-7ca7-4c0e-82b1-47226c6f1d94_buggy.java
+++ b/tmp/6dec53ab-41a5-486d-a15a-624ca9679463_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        double mostNegative = 0;
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
             if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+                coefficients[i] = getEntry(basicRow, getRhsOffset());
+                // Update mostNegative if the current coefficient is more negative
+                if (coefficients[i] < mostNegative) {
+                    mostNegative = coefficients[i];
+                }
+            } else {
                 coefficients[i] = 0;
             }
         }
+        // Adjust coefficients if restrictToNonNegative is true
+        if (restrictToNonNegative) {
+            for (int i = 0; i < coefficients.length; i++) {
+                coefficients[i] -= mostNegative;
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
