diff --git a/tmp/4daf3002-8574-411a-a748-91589f5ac334_buggy.java b/tmp/dce2cfd0-b442-4166-a435-8d40838822b4_fixed.java
index 544303b..662bc84 100644
--- a/tmp/4daf3002-8574-411a-a748-91589f5ac334_buggy.java
+++ b/tmp/dce2cfd0-b442-4166-a435-8d40838822b4_fixed.java
@@ -1,29 +1,30 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    double mostNegative = 0; // Initialize to 0 as a default
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
         if (basicRow != null) {
+            coefficients[i] = getEntry(basicRow, getRhsOffset());
+            // Check for constraints that might invalidate the coefficient
             for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                 if (tableau.getEntry(basicRow, j) == 1) {
                     coefficients[i] = 0;
+                    break;
                 }
             }
+        } else {
+            coefficients[i] = 0;
+        }
+        // Update mostNegative if necessary
+        if (coefficients[i] < mostNegative) {
+            mostNegative = coefficients[i];
+        }
+    }
+    // Adjust coefficients if restricting to non-negative
+    if (restrictToNonNegative) {
+        for (int i = 0; i < coefficients.length; i++) {
+            coefficients[i] -= mostNegative;
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
