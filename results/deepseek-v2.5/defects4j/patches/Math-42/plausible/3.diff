diff --git a/tmp/659d7917-9cff-4059-ba78-3b2e40a45d6d_buggy.java b/tmp/18e4ade6-3825-4f05-b07a-794785543440_fixed.java
index efa499e..69a7ba9 100644
--- a/tmp/659d7917-9cff-4059-ba78-3b2e40a45d6d_buggy.java
+++ b/tmp/18e4ade6-3825-4f05-b07a-794785543440_fixed.java
@@ -1,35 +1,43 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
     Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
     double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
     Set<Integer> basicRows = new HashSet<Integer>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
         }
         Integer basicRow = getBasicRow(colIndex);
         // if the basic row is found to be the objective function row
         // set the coefficient to 0 -> this case handles unconstrained 
         // variables that are still part of the objective function
         if (basicRows.contains(basicRow)) {
             // if multiple variables can take a given value
             // then we choose the first and set the rest equal to 0
             coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
         } else {
             basicRows.add(basicRow);
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
         }
     }
+    // Ensure all coefficients are non-negative if restrictToNonNegative is true
+    if (restrictToNonNegative) {
+        for (int i = 0; i < coefficients.length; i++) {
+            if (coefficients[i] < 0) {
+                coefficients[i] = 0;
+            }
+        }
+    }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
