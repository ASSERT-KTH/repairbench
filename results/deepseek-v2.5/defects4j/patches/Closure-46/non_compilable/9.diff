diff --git a/tmp/aa9b8f98-f2a7-4a88-913e-e35265eca088_buggy.java b/tmp/40c8b54a-12c2-4dbb-b991-f129d37715c0_fixed.java
index 46817a7..5d8fc9f 100644
--- a/tmp/aa9b8f98-f2a7-4a88-913e-e35265eca088_buggy.java
+++ b/tmp/40c8b54a-12c2-4dbb-b991-f129d37715c0_fixed.java
@@ -1,16 +1,23 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getPropertyMap().keySet());
+
+    for (String property : allProperties) {
+        JSType thisPropertyType = getPropertyType(property);
+        JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);
+
+        if (thisPropertyType != null && thatPropertyType != null) {
+            builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType), getPropertyNode(property));
+        } else if (thisPropertyType != null) {
+            builder.addProperty(property, thisPropertyType, getPropertyNode(property));
+        } else if (thatPropertyType != null) {
+            builder.addProperty(property, thatPropertyType, that.toMaybeRecordType().getPropertyNode(property));
         }
     }
     return builder.build();
 }
\ No newline at end of file
