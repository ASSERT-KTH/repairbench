diff --git a/tmp/93d4e3a0-6e16-4ef6-b57b-e7d7f0d17608_buggy.java b/tmp/c90a6f78-9bfe-4904-86c5-ef1528db8bd2_fixed.java
index 46817a7..276e0ff 100644
--- a/tmp/93d4e3a0-6e16-4ef6-b57b-e7d7f0d17608_buggy.java
+++ b/tmp/c90a6f78-9bfe-4904-86c5-ef1528db8bd2_fixed.java
@@ -1,16 +1,22 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
+  Set<String> allProperties = new HashSet<>(properties.keySet());
+  allProperties.addAll(that.toMaybeRecordType().getProperties());
+
+  for (String property : allProperties) {
+    JSType thisPropertyType = getPropertyType(property);
+    JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);
+    if (thisPropertyType != null || thatPropertyType != null) {
+      JSType leastSupertypeOfProperties = thisPropertyType != null && thatPropertyType != null ?
+          thisPropertyType.getLeastSupertype(thatPropertyType) :
+          (thisPropertyType != null ? thisPropertyType : thatPropertyType);
+      builder.addProperty(property, leastSupertypeOfProperties,
           getPropertyNode(property));
     }
   }
   return builder.build();
 }
\ No newline at end of file
