diff --git a/tmp/62767d86-8f89-4f45-86a1-349fbe9cfbd7_buggy.java b/tmp/d4cf7cfe-e9cd-483f-9aeb-7a9b4b4c95c9_fixed.java
index a7d0787..a558b04 100644
--- a/tmp/62767d86-8f89-4f45-86a1-349fbe9cfbd7_buggy.java
+++ b/tmp/d4cf7cfe-e9cd-483f-9aeb-7a9b4b4c95c9_fixed.java
@@ -1,54 +1,66 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
+     * @return The instance of <code>clazz</code> initialized with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
+            try {
                 return (T) createNumber(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Failed to create Number value for: " + str);
+            }
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        else if (PatternOptionBuilder.INTEGER_VALUE == clazz)
+        {
+            try {
+                return (T) createInteger(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Failed to create Integer value for: " + str);
+            }
+        }
         else
         {
-            return null;
+            throw new ParseException("Unsupported type for value creation: " + clazz.getName());
         }
     }
\ No newline at end of file
