diff --git a/tmp/0df4e77b-d972-4492-86ed-52d646805b3d_buggy.java b/tmp/97048b52-c43e-4bb6-bd26-0dc6a2e9c443_fixed.java
index 1478ee1..ca4011c 100644
--- a/tmp/0df4e77b-d972-4492-86ed-52d646805b3d_buggy.java
+++ b/tmp/97048b52-c43e-4bb6-bd26-0dc6a2e9c443_fixed.java
@@ -1,24 +1,20 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+      // Compute the dot products
+      double v1v1 = Vector3D.dotProduct(v1, v1);
+      double v1v2 = Vector3D.dotProduct(v1, v2);
+      double v2v2 = Vector3D.dotProduct(v2, v2);
 
+      // Compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      double rho = FastMath.scalb(v1v2 / v2v2, -8);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute v3 = v1 - rho * v2
+      Vector3D v3 = v1.subtract(v2.scalarMultiply(rho));
 
+      // Compute cross product from v3 and v2 instead of v1 and v2
+      return new Vector3D(v3.y * v2.z - v3.z * v2.y, v3.z * v2.x - v3.x * v2.z, v3.x * v2.y - v3.y * v2.x);
   }
\ No newline at end of file
