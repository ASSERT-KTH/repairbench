diff --git a/tmp/fe5f3384-8ea1-46ce-b5a7-585a5438e5ba_buggy.java b/tmp/9b0b0f7a-3aa7-4b73-922b-692c8a9c8add_fixed.java
index 1478ee1..39e80ce 100644
--- a/tmp/fe5f3384-8ea1-46ce-b5a7-585a5438e5ba_buggy.java
+++ b/tmp/9b0b0f7a-3aa7-4b73-922b-692c8a9c8add_fixed.java
@@ -1,24 +1,19 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    // Compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    double v1v2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+    double v2v2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+    double rho = FastMath.rint(v1v2 / v2v2 * 256) / 256;
+
+    // Compute v3 = v1 - rho * v2
+    double v3x = v1.x - rho * v2.x;
+    double v3y = v1.y - rho * v2.y;
+    double v3z = v1.z - rho * v2.z;
+
+    // Compute cross product from v3 and v2
+    return new Vector3D(v3y * v2.z - v3z * v2.y, v3z * v2.x - v3x * v2.z, v3x * v2.y - v3y * v2.x);
 }
\ No newline at end of file
