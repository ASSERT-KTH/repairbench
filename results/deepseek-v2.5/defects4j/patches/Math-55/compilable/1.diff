diff --git a/tmp/cfdc91da-6c29-4f28-834d-a5f32dd7e70f_buggy.java b/tmp/f60bee7d-96ee-45be-bf56-5818d197d2a3_fixed.java
index 1478ee1..389fc0d 100644
--- a/tmp/cfdc91da-6c29-4f28-834d-a5f32dd7e70f_buggy.java
+++ b/tmp/f60bee7d-96ee-45be-bf56-5818d197d2a3_fixed.java
@@ -1,24 +1,27 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Normalize the vectors to avoid precision loss
+    double normV1 = v1.getNorm();
+    double normV2 = v2.getNorm();
     
+    if (normV1 == 0 || normV2 == 0) {
+        throw new IllegalArgumentException("Vectors cannot be zero vectors.");
+    }
     
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    Vector3D normalizedV1 = new Vector3D(v1.x / normV1, v1.y / normV1, v1.z / normV1);
+    Vector3D normalizedV2 = new Vector3D(v2.x / normV2, v2.y / normV2, v2.z / normV2);
     
+    // Compute cross product of normalized vectors
+    double cpx = normalizedV1.y * normalizedV2.z - normalizedV1.z * normalizedV2.y;
+    double cpy = normalizedV1.z * normalizedV2.x - normalizedV1.x * normalizedV2.z;
+    double cpz = normalizedV1.x * normalizedV2.y - normalizedV1.y * normalizedV2.x;
     
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Scale back to the original magnitudes
+    double normCrossProduct = normV1 * normV2 * Math.sqrt(cpx * cpx + cpy * cpy + cpz * cpz);
     
+    return new Vector3D(cpx * normCrossProduct, cpy * normCrossProduct, cpz * normCrossProduct);
 }
