diff --git a/tmp/1735b513-e847-4fae-a56f-d82c3edcb606_buggy.java b/tmp/6c9f5f3a-09ec-49c3-979b-c26dac41f704_fixed.java
index 1478ee1..4efe431 100644
--- a/tmp/1735b513-e847-4fae-a56f-d82c3edcb606_buggy.java
+++ b/tmp/6c9f5f3a-09ec-49c3-979b-c26dac41f704_fixed.java
@@ -1,24 +1,29 @@
-  /** Compute the cross-product of two vectors.
+/**
+ * Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute the magnitudes of the vectors
+    double normV1 = v1.getNorm();
+    double normV2 = v2.getNorm();
 
+    // If either vector is zero, the cross product is zero
+    if (normV1 == 0 || normV2 == 0) {
+        return new Vector3D(0, 0, 0);
+    }
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+    // Scale the vectors to avoid precision issues
+    double scaleFactor = Math.max(normV1, normV2) / Math.min(normV1, normV2);
+    Vector3D scaledV1 = new Vector3D(v1.x * scaleFactor, v1.y * scaleFactor, v1.z * scaleFactor);
+    Vector3D scaledV2 = v2;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute the cross product of the scaled vectors
+    double x = scaledV1.y * scaledV2.z - scaledV1.z * scaledV2.y;
+    double y = scaledV1.z * scaledV2.x - scaledV1.x * scaledV2.z;
+    double z = scaledV1.x * scaledV2.y - scaledV1.y * scaledV2.x;
 
+    // Return the cross product as a new Vector
+    return new Vector3D(x, y, z);
 }
\ No newline at end of file
