diff --git a/tmp/bf7c4984-03af-440b-b87e-168b8f289ba9_buggy.java b/tmp/2cca97ce-9013-49ba-bef0-c2de3a37e0e8_fixed.java
index f674e52..22cd3d3 100644
--- a/tmp/bf7c4984-03af-440b-b87e-168b8f289ba9_buggy.java
+++ b/tmp/2cca97ce-9013-49ba-bef0-c2de3a37e0e8_fixed.java
@@ -1,41 +1,43 @@
     /**
      * Test for the equality of two Complex objects.
      * <p>
      * If both the real and imaginary parts of two Complex numbers
      * are exactly the same, and neither is <code>Double.NaN</code>, the two
      * Complex objects are considered to be equal.</p>
      * <p>
      * All <code>NaN</code> values are considered to be equal - i.e, if either
      * (or both) real and imaginary parts of the complex number are equal
      * to <code>Double.NaN</code>, the complex number is equal to 
      * <code>Complex.NaN</code>.</p>
      *
      * @param other Object to test for equality to this
      * @return true if two Complex objects are equal, false if
      *         object is null, not an instance of Complex, or
      *         not equal to this Complex instance
      * 
      */
     public boolean equals(Object other) {
         boolean ret;
         
         if (this == other) { 
             ret = true;
         } else if (other == null) {
             ret = false;
         } else  {
             try {
                 Complex rhs = (Complex)other;
                 if (rhs.isNaN()) {
                     ret = this.isNaN();
                 } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) &&
+                          (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()) ||
+                           Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(-rhs.getImaginary()));
                 }
             } catch (ClassCastException ex) {
                 // ignore exception
                 ret = false;
             }
         }
       
         return ret;
     }
\ No newline at end of file
