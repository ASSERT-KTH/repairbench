diff --git a/tmp/c634904e-d266-4cde-90c7-217e48613506_buggy.java b/tmp/2dde0bed-946f-488e-955e-db10954101ef_fixed.java
index 3fb3172..bcabc18 100644
--- a/tmp/c634904e-d266-4cde-90c7-217e48613506_buggy.java
+++ b/tmp/2dde0bed-946f-488e-955e-db10954101ef_fixed.java
@@ -1,13 +1,39 @@
     /**
      * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.
      * <p>
      * When encoding the line length is 0 (no chunking), and the encoding table is STANDARD_ENCODE_TABLE.
      * </p>
      * 
      * <p>
      * When decoding all variants are supported.
      * </p>
      */
     public Base64() {
-        this(false);
+        this(0, new byte[0], false);
+    }
+
+    /**
+     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.
+     * <p>
+     * When encoding the line length is given in the constructor, and the encoding table is STANDARD_ENCODE_TABLE.
+     * </p>
+     * 
+     * <p>
+     * When decoding all variants are supported.
+     * </p>
+     * 
+     * @param lineLength Each row of encoded data will be at most of the given length (rounded down to nearest multiple of 4). 
+     *                   If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.
+     * @param lineSeparator The sequence of bytes used to separate chunks of encoded data.
+     * @param urlSafe True if URL-safe encoding should be used.
+     */
+    public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
+        super(lineLength, lineSeparator);
+        if (urlSafe) {
+            this.encodeTable = URL_SAFE_ENCODE_TABLE;
+            this.decodeTable = URL_SAFE_DECODE_TABLE;
+        } else {
+            this.encodeTable = STANDARD_ENCODE_TABLE;
+            this.decodeTable = DECODE_TABLE;
+        }
     }
\ No newline at end of file
