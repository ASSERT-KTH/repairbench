diff --git a/tmp/57bd0352-6d8a-4857-b3f1-27d3c301ebd6_buggy.java b/tmp/a8d82d0c-5c96-4896-bdb9-92d4f7089a9f_fixed.java
index e69de29..7500dba 100644
--- a/tmp/57bd0352-6d8a-4857-b3f1-27d3c301ebd6_buggy.java
+++ b/tmp/a8d82d0c-5c96-4896-bdb9-92d4f7089a9f_fixed.java
@@ -0,0 +1,93 @@
+public class PatriciaTrie<V> implements Trie<String, V> {
+    // Assume other methods and fields are implemented correctly
+
+    @Override
+    public SortedMap<String, V> prefixMap(String prefix) {
+        return new PrefixMap(prefix);
+    }
+
+    private class PrefixMap extends AbstractMap<String, V> implements SortedMap<String, V> {
+        private final String prefix;
+        private Set<Entry<String, V>> entrySet;
+
+        PrefixMap(String prefix) {
+            this.prefix = prefix;
+        }
+
+        @Override
+        public Set<Entry<String, V>> entrySet() {
+            if (entrySet == null) {
+                entrySet = new PrefixEntrySet();
+            }
+            return entrySet;
+        }
+
+        @Override
+        public void clear() {
+            Iterator<Entry<String, V>> iterator = entrySet().iterator();
+            while (iterator.hasNext()) {
+                Entry<String, V> entry = iterator.next();
+                remove(entry.getKey());
+            }
+            entrySet = null; // Reset the entry set
+        }
+
+        private class PrefixEntrySet extends AbstractSet<Entry<String, V>> {
+            @Override
+            public Iterator<Entry<String, V>> iterator() {
+                return new PrefixIterator();
+            }
+
+            @Override
+            public int size() {
+                int count = 0;
+                for (Iterator<Entry<String, V>> it = iterator(); it.hasNext(); it.next()) {
+                    count++;
+                }
+                return count;
+            }
+
+            private class PrefixIterator implements Iterator<Entry<String, V>> {
+                private final Iterator<Entry<String, V>> delegate = PatriciaTrie.this.iterator();
+                private Entry<String, V> next = null;
+
+                PrefixIterator() {
+                    advance();
+                }
+
+                private void advance() {
+                    while (delegate.hasNext()) {
+                        Entry<String, V> entry = delegate.next();
+                        if (entry.getKey().startsWith(prefix)) {
+                            next = entry;
+                            return;
+                        }
+                    }
+                    next = null;
+                }
+
+                @Override
+                public boolean hasNext() {
+                    return next != null;
+                }
+
+                @Override
+                public Entry<String, V> next() {
+                    if (next == null) {
+                        throw new NoSuchElementException();
+                    }
+                    Entry<String, V> current = next;
+                    advance();
+                    return current;
+                }
+
+                @Override
+                public void remove() {
+                    if (next != null) {
+                        PatriciaTrie.this.remove(next.getKey());
+                    }
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
