diff --git a/tmp/fbb88063-ef44-4191-8c0b-3f36d1441dc2_buggy.java b/tmp/d6011586-7212-45bd-b9fc-9e82b5503db8_fixed.java
index 5f1dcf2..dce5efc 100644
--- a/tmp/fbb88063-ef44-4191-8c0b-3f36d1441dc2_buggy.java
+++ b/tmp/d6011586-7212-45bd-b9fc-9e82b5503db8_fixed.java
@@ -1,41 +1,62 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = new RealPointValuePair[] { reflected };
+            } else {
+                simplex = new RealPointValuePair[] { expanded };
             }
 
+            // check convergence
+            if (getConvergenceChecker() != null && getConvergenceChecker().converged(getIterations(), simplex[0], best)) {
                 return;
+            }
 
+            continue;
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = new RealPointValuePair[] { contracted };
 
             // check convergence
+            if (getConvergenceChecker() != null && getConvergenceChecker().converged(getIterations(), simplex[0], best)) {
                 return;
             }
 
+            continue;
         }
 
+        // return to original simplex if no improvement
+        simplex = original;
+
+        // check convergence
+        if (getConvergenceChecker() != null && getConvergenceChecker().converged(getIterations(), best, best)) {
+            return;
+        }
+
+        // check for maximum iterations
+        if (getIterations() >= getMaxIterations()) {
+            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+        }
+    }
 }
\ No newline at end of file
