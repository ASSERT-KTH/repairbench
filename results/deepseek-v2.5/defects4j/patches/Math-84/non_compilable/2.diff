diff --git a/tmp/6cfb12f7-1640-4087-9772-660030124a59_buggy.java b/tmp/0503adf2-13e3-40ec-b067-31947fdb716a_fixed.java
index 5f1dcf2..9ac35fb 100644
--- a/tmp/6cfb12f7-1640-4087-9772-660030124a59_buggy.java
+++ b/tmp/0503adf2-13e3-40ec-b067-31947fdb716a_fixed.java
@@ -1,41 +1,94 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = getNewSimplex(reflected);
+                } else {
+                    // accept the expanded simplex
+                    simplex = getNewSimplex(expanded);
                 }
 
+                // Check for convergence after accepting a new simplex
+                if (isConverged(comparator)) {
                     return;
+                }
 
+                continue; // Continue with the next iteration
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = getNewSimplex(contracted);
 
-            // check convergence
+                // Check for convergence after accepting a new simplex
+                if (isConverged(comparator)) {
                     return;
                 }
 
+                continue; // Continue with the next iteration
             }
 
+            // Perform a reduction step if no better simplex was found
+            simplex = performReduction(original, best);
+
+            // Check for convergence after performing reduction
+            if (isConverged(comparator)) {
+                return;
+            }
+        }
+    }
+
+    private boolean isConverged(final Comparator<RealPointValuePair> comparator) {
+        // Implement your convergence check here, e.g., based on the difference between the best and worst points.
+        // This is a placeholder implementation.
+        final RealPointValuePair best = simplex[0];
+        final RealPointValuePair worst = simplex[simplex.length - 1];
+        return Math.abs(comparator.compare(best, worst)) < convergenceThreshold;
+    }
+
+    private RealPointValuePair[] getNewSimplex(RealPointValuePair newPoint) {
+        // Create a new simplex with the new point and the remaining points from the original simplex.
+        RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];
+        newSimplex[0] = newPoint;
+        System.arraycopy(simplex, 1, newSimplex, 1, simplex.length - 1);
+        return newSimplex;
+    }
+
+    private RealPointValuePair[] performReduction(RealPointValuePair[] original, RealPointValuePair best) {
+        // Implement your reduction step here, e.g., reducing all points towards the best point.
+        RealPointValuePair[] reducedSimplex = new RealPointValuePair[simplex.length];
+        reducedSimplex[0] = best;
+        for (int i = 1; i < simplex.length; i++) {
+            reducedSimplex[i] = reducePoint(original[i], best);
+        }
+        return reducedSimplex;
+    }
+
+    private RealPointValuePair reducePoint(RealPointValuePair point, RealPointValuePair best) {
+        // Implement the reduction operation for a single point towards the best point.
+        // This is a placeholder implementation.
+        double[] newPoint = new double[point.getPointRef().length];
+        for (int i = 0; i < newPoint.length; i++) {
+            newPoint[i] = best.getPointRef()[i] + sigma * (point.getPointRef()[i] - best.getPointRef()[i]);
+        }
+        return new RealPointValuePair(newPoint, evaluate(newPoint), false);
     }
\ No newline at end of file
