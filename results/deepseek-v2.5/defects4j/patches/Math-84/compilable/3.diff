diff --git a/tmp/4897956a-7d86-4b3d-93ce-ae0a17935bed_buggy.java b/tmp/17a7a0ea-08b7-4fb3-a2b1-a51bf9c15306_fixed.java
index 5f1dcf2..e248484 100644
--- a/tmp/4897956a-7d86-4b3d-93ce-ae0a17935bed_buggy.java
+++ b/tmp/17a7a0ea-08b7-4fb3-a2b1-a51bf9c15306_fixed.java
@@ -1,41 +1,53 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = new RealPointValuePair[] { reflected };
+            } else {
+                // accept the expanded simplex
+                simplex = new RealPointValuePair[] { expanded };
             }
 
+            // Check for convergence
+            if (getConvergenceChecker().converged(getIterations(), original[0], simplex[0])) {
                 return;
-
             }
 
+        } else {
+
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[] { contracted };
+            } else {
+                // revert to the original simplex
+                simplex = original;
+            }
 
-            // check convergence
+            // Check for convergence
+            if (getConvergenceChecker().converged(getIterations(), original[0], simplex[0])) {
                 return;
             }
+        }
 
     }
 
 }
\ No newline at end of file
