diff --git a/tmp/e3fb417e-9f1e-4fd1-835c-6419801784d7_buggy.java b/tmp/9c7222ba-73e2-4e7c-933f-915699987907_fixed.java
index 5f1dcf2..aecc88e 100644
--- a/tmp/e3fb417e-9f1e-4fd1-835c-6419801784d7_buggy.java
+++ b/tmp/9c7222ba-73e2-4e7c-933f-915699987907_fixed.java
@@ -1,41 +1,65 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = new RealPointValuePair[] { reflected };
+            } else {
+                // accept the expanded simplex
+                simplex = new RealPointValuePair[] { expanded };
             }
 
+            // Check for convergence or maximum iterations
+            if (isConverged() || isMaxIterationsExceeded()) {
                 return;
+            }
 
+            continue;
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = new RealPointValuePair[] { contracted };
 
-            // check convergence
+            // Check for convergence or maximum iterations
+            if (isConverged() || isMaxIterationsExceeded()) {
                 return;
             }
 
+            continue;
         }
 
+        // Check for convergence or maximum iterations
+        if (isConverged() || isMaxIterationsExceeded()) {
+            return;
+        }
+    }
+}
+
+private boolean isConverged() {
+    // Implement your convergence check here
+    return false;
+}
+
+private boolean isMaxIterationsExceeded() {
+    // Implement your maximum iterations check here
+    return false;
 }
\ No newline at end of file
