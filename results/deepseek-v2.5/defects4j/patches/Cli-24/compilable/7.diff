diff --git a/tmp/5709894a-12b9-4778-845b-602c65cc6afe_buggy.java b/tmp/2e483dc0-e016-4ebf-9226-172f4775eb4f_fixed.java
index 229b3e7..2e18cb8 100644
--- a/tmp/5709894a-12b9-4778-845b-602c65cc6afe_buggy.java
+++ b/tmp/2e483dc0-e016-4ebf-9226-172f4775eb4f_fixed.java
@@ -1,55 +1,55 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         if (nextLineTabStop >= width)
         {
             // stops infinite loop happening
             throw new IllegalStateException("Total width is less than the width of the argument and indent " +
                                             "- no room for the description");
         }
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            pos = findWrapPos(text, width, nextLineTabStop); // Start search from nextLineTabStop
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
             
             if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
             {
                 pos = width;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
