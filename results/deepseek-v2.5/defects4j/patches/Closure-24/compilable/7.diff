diff --git a/tmp/cedcd4fe-3a9d-4d41-b67e-76387307fca1_buggy.java b/tmp/a6d717e7-c979-4ddd-b78d-ab6f424eb5d9_fixed.java
index 602226b..c831ddb 100644
--- a/tmp/cedcd4fe-3a9d-4d41-b67e-76387307fca1_buggy.java
+++ b/tmp/a6d717e7-c979-4ddd-b78d-ab6f424eb5d9_fixed.java
@@ -1,26 +1,31 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
+        if (aliasVar != null) {
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
           // Bleeding functions already get a BAD_PARAMETERS error, so just
           // do nothing.
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
         } else {
           // TODO(robbyw): Support using locals for private variables.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
+      } else {
+        // If the variable is not a qualified name, report it.
+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+      }
     }
   }
 }
\ No newline at end of file
