diff --git a/tmp/8799b047-8785-48e8-9f3b-5a2ca1cde5b8_buggy.java b/tmp/b791421f-3123-4007-81a5-92fea60d1341_fixed.java
index 42b58d0..faf0ff8 100644
--- a/tmp/8799b047-8785-48e8-9f3b-5a2ca1cde5b8_buggy.java
+++ b/tmp/b791421f-3123-4007-81a5-92fea60d1341_fixed.java
@@ -1,19 +1,26 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
+        } else if (actualTypeArgument instanceof TypeVariable) {
+            // Handle self-referencing type variables to avoid StackOverflowError
+            if (contextualActualTypeParameters.containsKey(actualTypeArgument)) {
+                contextualActualTypeParameters.put(typeParameter, contextualActualTypeParameters.get(actualTypeArgument));
+            } else {
+                contextualActualTypeParameters.put(typeParameter, null); // Or handle it appropriately
+            }
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
         // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
