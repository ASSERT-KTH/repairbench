diff --git a/tmp/9d207440-272b-49a0-baf9-e22249bd6761_buggy.java b/tmp/509e031d-3c3a-4bd8-ad29-282f5cd99390_fixed.java
index 42b58d0..b070959 100644
--- a/tmp/9d207440-272b-49a0-baf9-e22249bd6761_buggy.java
+++ b/tmp/509e031d-3c3a-4bd8-ad29-282f5cd99390_fixed.java
@@ -1,19 +1,41 @@
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.lang.reflect.TypeVariable;
+import java.lang.reflect.WildcardType;
+import java.util.HashSet;
+import java.util.Set;
+
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
+
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+    // Keep track of the types we have already processed to avoid recursion
+    Set<Type> processedTypes = new HashSet<>();
+    processedTypes.add(classType);
+
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        if (processedTypes.contains(actualTypeArgument)) {
+            continue; // Skip if we have already processed this type
+        }
+
+        if (actualTypeArgument instanceof ParameterizedType) {
+            registerTypeVariablesOn(actualTypeArgument); // Recursive call
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+
+        processedTypes.add(actualTypeArgument);
     }
 }
\ No newline at end of file
