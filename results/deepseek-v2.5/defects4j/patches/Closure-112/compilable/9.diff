diff --git a/tmp/4ee74749-3141-4fda-9fe8-1574782bb489_buggy.java b/tmp/c3098987-4fe0-46ef-b0cb-6d03a7450105_fixed.java
index 63641d0..1ed6ffe 100644
--- a/tmp/4ee74749-3141-4fda-9fe8-1574782bb489_buggy.java
+++ b/tmp/c3098987-4fe0-46ef-b0cb-6d03a7450105_fixed.java
@@ -1,33 +1,36 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+    // Ensure the replacementFnType is not null
+    JSType replacementType = fnType.visit(replacer);
+    if (replacementType == null || !replacementType.isFunctionType()) {
+      return false;
+    }
+    FunctionType replacementFnType = replacementType.toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
