diff --git a/tmp/409af3c6-f6fb-4a48-b512-50e29395f241_buggy.java b/tmp/25fdaadf-5a06-48b5-bad8-e5a0a1805e51_fixed.java
index 63641d0..f97a866 100644
--- a/tmp/409af3c6-f6fb-4a48-b512-50e29395f241_buggy.java
+++ b/tmp/25fdaadf-5a06-48b5-bad8-e5a0a1805e51_fixed.java
@@ -1,33 +1,40 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
+    // Ensure the replacement function type is properly instantiated
+    if (replacementFnType.isTemplateType() && !replacementFnType.isFullyInstantiated()) {
+      replacementFnType = replacementFnType.visit(replacer).toMaybeFunctionType();
+      Preconditions.checkNotNull(replacementFnType);
+      callTarget.setJSType(replacementFnType);
+      n.setJSType(replacementFnType.getReturnType());
+    }
+
     return replacer.madeChanges;
   }
\ No newline at end of file
