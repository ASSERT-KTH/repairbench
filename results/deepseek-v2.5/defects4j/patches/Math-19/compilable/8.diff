diff --git a/tmp/f519870b-b691-423b-9e80-8a2b74fec40c_buggy.java b/tmp/ebc3a8c8-e879-4450-b3ee-502aaa8c3bf9_fixed.java
index d80b7d0..606c1ea 100644
--- a/tmp/f519870b-b691-423b-9e80-8a2b74fec40c_buggy.java
+++ b/tmp/ebc3a8c8-e879-4450-b3ee-502aaa8c3bf9_fixed.java
@@ -1,61 +1,63 @@
 /**
  * Checks dimensions and values of boundaries and inputSigma if defined.
  */
 private void checkParameters() {
     final double[] init = getStartPoint();
     final double[] lB = getLowerBound();
     final double[] uB = getUpperBound();
 
     // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
         if (!Double.isInfinite(lB[i]) ||
             !Double.isInfinite(uB[i])) {
             hasFiniteBounds = true;
             break;
         }
     }
+
     // Checks whether there is at least one infinite bound value.
     boolean hasInfiniteBounds = false;
-        if (hasFiniteBounds) {
     for (int i = 0; i < lB.length; i++) {
         if (Double.isInfinite(lB[i]) ||
             Double.isInfinite(uB[i])) {
             hasInfiniteBounds = true;
             break;
         }
     }
 
-            if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
+    if (hasFiniteBounds && hasInfiniteBounds) {
+        // If there is at least one finite bound and one infinite bound,
+        // mixed cases are not supported by the current code.
         throw new MathUnsupportedOperationException();
-            } else {
+    }
+
     // Convert API to internal handling of boundaries.
+    if (hasFiniteBounds) {
         boundaries = new double[2][];
         boundaries[0] = lB;
         boundaries[1] = uB;
-
-                // Abort early if the normalization will overflow (cf. "encode" method).
-            }
     } else {
-            // Convert API to internal handling of boundaries.
         boundaries = null;
     }
 
     if (inputSigma != null) {
         if (inputSigma.length != init.length) {
             throw new DimensionMismatchException(inputSigma.length, init.length);
         }
         for (int i = 0; i < init.length; i++) {
             if (inputSigma[i] < 0) {
                 throw new NotPositiveException(inputSigma[i]);
             }
             if (boundaries != null) {
                 if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
+                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
+                        throw new NumberIsTooLargeException(boundaries[1][i], boundaries[0][i], true);
+                    } else {
                         throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
                     }
                 }
             }
         }
     }
+}
\ No newline at end of file
