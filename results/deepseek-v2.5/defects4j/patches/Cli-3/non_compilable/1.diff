diff --git a/tmp/3d22b7e7-c3e2-4fda-989a-afd51042edd0_buggy.java b/tmp/cf844d48-0b89-4473-b1d2-ec30c8ad6222_fixed.java
index d9b400d..b8da177 100644
--- a/tmp/3d22b7e7-c3e2-4fda-989a-afd51042edd0_buggy.java
+++ b/tmp/cf844d48-0b89-4473-b1d2-ec30c8ad6222_fixed.java
@@ -1,21 +1,45 @@
-    /**
-     * <p>Create a number from a String. If a . is present, it creates a 
-     *    Double, otherwise a Long. </p>
-     *
-     * @param str the value
-     * @return the number represented by <code>str</code>, if <code>str</code>
-     * is not a number, null is returned.
-     */
-    public static Number createNumber(String str)
+public void testSimplePattern()
 {
-        try
-        {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+    try {
+        Options options = PatternOptionBuilder.parsePattern("a:b@cde>f+n%t/");
+        String[] args = new String[] { "-c", "-a", "foo", "-b", "java.util.Vector", "-e", "build.xml", "-f", "java.util.Calendar", "-n", "4.5", "-t", "http://jakarta.apache.org/" };
+    
+        CommandLineParser parser = new PosixParser();
+        CommandLine line = parser.parse(options,args);
+
+        // tests the char methods of CommandLine that delegate to
+        // the String methods
+        assertEquals("flag a", "foo", line.getOptionValue("a"));
+        assertEquals("flag a", "foo", line.getOptionValue('a'));
+        assertEquals("string flag a", "foo", line.getOptionObject("a"));
+        assertEquals("string flag a", "foo", line.getOptionObject('a'));
+        assertEquals("object flag b", new java.util.Vector(), line.getOptionObject("b"));
+        assertEquals("object flag b", new java.util.Vector(), line.getOptionObject('b'));
+        assertEquals("boolean true flag c", true, line.hasOption("c"));
+        assertEquals("boolean true flag c", true, line.hasOption('c'));
+        assertEquals("boolean false flag d", false, line.hasOption("d"));
+        assertEquals("boolean false flag d", false, line.hasOption('d'));
+        assertEquals("file flag e", new java.io.File("build.xml"), line.getOptionObject("e"));
+        assertEquals("file flag e", new java.io.File("build.xml"), line.getOptionObject('e'));
+        assertEquals("class flag f", java.util.Calendar.class, line.getOptionObject("f"));
+        assertEquals("class flag f", java.util.Calendar.class, line.getOptionObject('f'));
+        
+        // Corrected comparison
+        Double expectedDouble = new Double(4.5);
+        Double actualDouble = (Double) line.getOptionObject("n");
+        assertEquals("number flag n", expectedDouble.doubleValue(), actualDouble.doubleValue(), 0.000001);
+        assertEquals("number flag n", expectedDouble, actualDouble);
+        
+        assertEquals("url flag t", new java.net.URL("http://jakarta.apache.org/"), line.getOptionObject("t"));
+        assertEquals("url flag t", new java.net.URL("http://jakarta.apache.org/"), line.getOptionObject('t'));
+        /// DATES NOT SUPPORTED YET.
+        //      assertEquals("number flag t", new java.util.Date(1023400137276L), line.getOptionObject('z'));
+        //     input is:  "Thu Jun 06 17:48:57 EDT 2002"
     }
-        catch (NumberFormatException nfe)
-        {
-            System.err.println(nfe.getMessage());
+    catch( ParseException exp ) {
+        fail( exp.getMessage() );
+    }
+    catch( java.net.MalformedURLException exp ) {
+        fail( exp.getMessage() );
     }
-
-        return null;
 }
\ No newline at end of file
