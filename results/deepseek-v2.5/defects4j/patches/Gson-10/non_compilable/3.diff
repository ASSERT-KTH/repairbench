diff --git a/tmp/03c19a6f-b3ac-4dff-9b05-c52035cbc3ea_buggy.java b/tmp/ee3e49f6-d84c-4864-9b32-0fff443cdfbb_fixed.java
index 9d42346..ed84db5 100644
--- a/tmp/03c19a6f-b3ac-4dff-9b05-c52035cbc3ea_buggy.java
+++ b/tmp/ee3e49f6-d84c-4864-9b32-0fff443cdfbb_fixed.java
@@ -1,37 +1,40 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
     final Gson context, final Field field, final String name,
     final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
   final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
   // special casing primitives here saves ~5% on Android...
   JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
   TypeAdapter<?> mapped = null;
   if (annotation != null) {
     mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
   }
   final boolean jsonAdapterPresent = mapped != null;
   if (mapped == null) mapped = context.getAdapter(fieldType);
 
-    final TypeAdapter<?> typeAdapter = mapped;
+  final TypeAdapter<?> typeAdapter = jsonAdapterPresent ?
+      new TypeAdapterRuntimeTypeWrapper<>(context, mapped, fieldType.getType()) :
+      mapped;
+
   return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
     @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
     @Override void write(JsonWriter writer, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
-        t.write(writer, fieldValue);
+      typeAdapter.write(writer, fieldValue);
     }
+
     @Override void read(JsonReader reader, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = typeAdapter.read(reader);
       if (fieldValue != null || !isPrimitive) {
         field.set(value, fieldValue);
       }
     }
+
     @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
       if (!serialized) return false;
       Object fieldValue = field.get(value);
       return fieldValue != value; // avoid recursion for example for Throwable.cause
     }
   };
 }
\ No newline at end of file
