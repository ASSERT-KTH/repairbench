diff --git a/tmp/db17bf13-560b-4e88-8241-528b55226c69_buggy.java b/tmp/79494a0c-106f-4880-bd53-1a8ba950affb_fixed.java
index 5481b94..78d5666 100644
--- a/tmp/db17bf13-560b-4e88-8241-528b55226c69_buggy.java
+++ b/tmp/79494a0c-106f-4880-bd53-1a8ba950affb_fixed.java
@@ -1,49 +1,146 @@
-    public Object handle(Invocation invocation) throws Throwable {
-        if (invocationContainerImpl.hasAnswersForStubbing()) {
-            // stubbing voids with stubVoid() or doAnswer() style
-            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
-                            .getArgumentMatcherStorage(), invocation);
-            invocationContainerImpl.setMethodForStubbing(invocationMatcher);
-            return null;
+  /** {@inheritDoc} */
+  @Override
+  public void integrate(final ExpandableStatefulODE equations, final double t)
+      throws MathIllegalStateException, MathIllegalArgumentException {
+
+    sanityChecks(equations, t);
+    setEquations(equations);
+    final boolean forward = t > equations.getTime();
+
+    // create some internal working arrays
+    final double[] y0  = equations.getCompleteState();
+    final double[] y = y0.clone();
+    final int stages = c.length + 1;
+    final double[][] yDotK = new double[stages][y.length];
+    final double[] yTmp    = y0.clone();
+    final double[] yDotTmp = new double[y.length];
+
+    // set up an interpolator sharing the integrator arrays
+    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
+    interpolator.reinitialize(this, yTmp, yDotK, forward,
+                              equations.getPrimaryMapper(), equations.getSecondaryMappers());
+    interpolator.storeTime(equations.getTime());
+
+    // set up integration control objects
+    stepStart         = equations.getTime();
+    double  hNew      = 0;
+    boolean firstTime = true;
+    initIntegration(equations.getTime(), y0, t);
+
+    // main integration loop
+    isLastStep = false;
+    do {
+
+      interpolator.shift();
+
+      // iterate over step size, ensuring local normalized error is smaller than 1
+      double error = 10;
+      while (error >= 1.0) {
+
+        if (firstTime || !fsal) {
+          // first stage
+          computeDerivatives(stepStart, y, yDotK[0]);
+        }
+
+        if (firstTime) {
+          final double[] scale = new double[mainSetDimension];
+          if (vecAbsoluteTolerance == null) {
+              for (int i = 0; i < scale.length; ++i) {
+                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
+              }
+          } else {
+              for (int i = 0; i < scale.length; ++i) {
+                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);
+              }
+          }
+          hNew = initializeStep(forward, getOrder(), scale,
+                                stepStart, y, yDotK[0], yTmp, yDotK[1]);
+          firstTime = false;
+          // Ensure the step size is not larger than the end time minus the start time
+          if (forward) {
+              hNew = FastMath.min(hNew, t - stepStart);
+          } else {
+              hNew = FastMath.max(hNew, t - stepStart);
+          }
         }
-        VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
-        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
-                        invocation);
+        stepSize = hNew;
 
-        mockingProgress.validateState();
+        // next stages
+        for (int k = 1; k < stages; ++k) {
 
-        //if verificationMode is not null then someone is doing verify()        
-        if (verificationMode != null) {
-            //We need to check if verification was started on the correct mock 
-            // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
-                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
-                verificationMode.verify(data);
-                return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+          for (int j = 0; j < y0.length; ++j) {
+            double sum = a[k-1][0] * yDotK[0][j];
+            for (int l = 1; l < k; ++l) {
+              sum += a[k-1][l] * yDotK[l][j];
             }
+            yTmp[j] = y[j] + stepSize * sum;
           }
 
-        invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
-        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
-        mockingProgress.reportOngoingStubbing(ongoingStubbing);
+          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
 
-        StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
+        }
 
-        if (stubbedInvocation != null) {
-            stubbedInvocation.captureArgumentsFrom(invocation);
-            return stubbedInvocation.answer(invocation);
-        } else {
-            Object ret = mockSettings.getDefaultAnswer().answer(invocation);
+        // estimate the state at the end of the step
+        for (int j = 0; j < y0.length; ++j) {
+          double sum    = b[0] * yDotK[0][j];
+          for (int l = 1; l < stages; ++l) {
+            sum    += b[l] * yDotK[l][j];
+          }
+          yTmp[j] = y[j] + stepSize * sum;
+        }
+
+        // estimate the error at the end of the step
+        error = estimateError(yDotK, y, yTmp, stepSize);
+        if (error >= 1.0) {
+          // reject the step and attempt to reduce error by stepsize control
+          final double factor =
+              FastMath.min(maxGrowth,
+                           FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+          hNew = filterStep(stepSize * factor, forward, false);
+        }
+
+      }
+
+      // local error is small enough: accept the step, trigger events and step handlers
+      interpolator.storeTime(stepStart + stepSize);
+      System.arraycopy(yTmp, 0, y, 0, y0.length);
+      System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);
+      stepStart = acceptStep(interpolator, y, yDotTmp, t);
+      System.arraycopy(y, 0, yTmp, 0, y.length);
+
+      if (!isLastStep) {
+
+          // prepare next step
+          interpolator.storeTime(stepStart);
 
-            // redo setting invocation for potential stubbing in case of partial
-            // mocks / spies.
-            // Without it, the real method inside 'when' might have delegated
-            // to other self method and overwrite the intended stubbed method
-            // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
-            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
-            return ret;
+          if (fsal) {
+              // save the last evaluation for the next step
+              System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);
           }
+
+          // stepsize control for next step
+          final double factor =
+              FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+          final double  scaledH    = stepSize * factor;
+          final double  nextT      = stepStart + scaledH;
+          final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
+          hNew = filterStep(scaledH, forward, nextIsLast);
+
+          final double  filteredNextT      = stepStart + hNew;
+          final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
+          if (filteredNextIsLast) {
+              hNew = t - stepStart;
+          }
+
+      }
+
+    } while (!isLastStep);
+
+    // dispatch results
+    equations.setTime(stepStart);
+    equations.setCompleteState(y);
+
+    resetInternalState();
+
   }
\ No newline at end of file
