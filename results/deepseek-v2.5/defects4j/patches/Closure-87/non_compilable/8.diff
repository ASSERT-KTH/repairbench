diff --git a/tmp/738d2dd5-98c6-46fa-84fc-2b8366d1b0a5_buggy.java b/tmp/a03f6f82-ef2f-4c85-afd6-8a8a99e3652b_fixed.java
index 19fd63e..1221758 100644
--- a/tmp/738d2dd5-98c6-46fa-84fc-2b8366d1b0a5_buggy.java
+++ b/tmp/a03f6f82-ef2f-4c85-afd6-8a8a99e3652b_fixed.java
@@ -1,24 +1,18 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+        // Check if the expression is part of a control flow statement
+        Node parent = n.getParent();
+        if (parent != null && (parent.isIf() || parent.isFor() || parent.isWhile() || parent.isDo())) {
+          return false;
+        }
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
-
     return false;
   }
\ No newline at end of file
