diff --git a/tmp/03cb322a-3423-40e5-8326-70bd3484de9b_buggy.java b/tmp/dd2835e1-e31e-4370-bd54-be81439bece2_fixed.java
index 88647d1..827588d 100644
--- a/tmp/03cb322a-3423-40e5-8326-70bd3484de9b_buggy.java
+++ b/tmp/dd2835e1-e31e-4370-bd54-be81439bece2_fixed.java
@@ -1,44 +1,25 @@
     /**
-     * Find a zero in the given interval.
-     * <p>
-     * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
+     * Returns the number of characters between the current position and the next instance of the input sequence
      *
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
+     * @param seq scan target
+     * @return offset between current position and next instance of target. -1 if not found.
      */
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
-        FunctionEvaluationException {
-        
-        clearResult();
-        verifyInterval(min, max);
-        
-        double ret = Double.NaN;
-        
-        double yMin = f.value(min);
-        double yMax = f.value(max);
-        
-        // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
-                        "  Endpoints: [" + min + "," + max + "]" + 
-                        "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+    int nextIndexOf(CharSequence seq) {
+        // doesn't handle scanning for surrogates
+        char startChar = seq.charAt(0);
+        int seqLength = seq.length();
+        for (int offset = pos; offset <= length - seqLength; offset++) {
+            // scan to first instance of startchar:
+            if (startChar != input[offset])
+                continue;
+            int i = offset + 1;
+            int j = 1;
+            while (j < seqLength && seq.charAt(j) == input[i]) {
+                i++;
+                j++;
             }
-
-        return ret;
+            if (j == seqLength) // found full sequence
+                return offset - pos;
+        }
+        return -1;
     }
\ No newline at end of file
