diff --git a/tmp/224fc5a5-ef8e-472d-b1dd-eb643ff6e4c4_buggy.java b/tmp/f6ccd91b-eb66-4019-a0d6-ec57fad320dd_fixed.java
index 85e6a42..0e69273 100644
--- a/tmp/224fc5a5-ef8e-472d-b1dd-eb643ff6e4c4_buggy.java
+++ b/tmp/f6ccd91b-eb66-4019-a0d6-ec57fad320dd_fixed.java
@@ -1,50 +1,39 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
-        // changing the name of a ZipArchiveEntry is going to change
-        // the hashcode - see COMPRESS-164
-        // Map needs to be reconstructed in order to keep central
-        // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
-            int fileNameLen = ZipShort.getValue(b);
+        int fileNameLen = ZipShort.getValue(b); // Correctly read fileNameLen
         archive.readFully(b);
-            int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
-                }
-                lenToSkip -= skipped;
+        int extraFieldLen = ZipShort.getValue(b); // Correctly read extraFieldLen
+
+        // Skip the file name
+        if (fileNameLen > 0) {
+            archive.skipBytes(fileNameLen);
         }
+
+        // Read the extra field
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
+
+        // Calculate the data offset
         offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
             + SHORT + SHORT + fileNameLen + extraFieldLen;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
             ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                      nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
\ No newline at end of file
