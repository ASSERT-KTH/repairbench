diff --git a/tmp/0bd6c48f-2b04-492e-8b4c-27c23cc3eea6_buggy.java b/tmp/bf1f1a5c-1621-4a54-8c2b-23d8618ae45e_fixed.java
index 85e6a42..c224ab8 100644
--- a/tmp/0bd6c48f-2b04-492e-8b4c-27c23cc3eea6_buggy.java
+++ b/tmp/bf1f1a5c-1621-4a54-8c2b-23d8618ae45e_fixed.java
@@ -1,50 +1,35 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
-    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
-                                            entriesWithoutUTF8Flag)
-        throws IOException {
-        // changing the name of a ZipArchiveEntry is going to change
-        // the hashcode - see COMPRESS-164
-        // Map needs to be reconstructed in order to keep central
-        // directory order
+private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag) throws IOException {
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
-                }
-                lenToSkip -= skipped;
+
+        // Correctly seek past the filename
+        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT);
+        if (fileNameLen > 0) {
+            byte[] fileNameBytes = new byte[fileNameLen];
+            archive.readFully(fileNameBytes);
         }
+
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
         offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
             + SHORT + SHORT + fileNameLen + extraFieldLen;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
\ No newline at end of file
