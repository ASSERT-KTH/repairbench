diff --git a/tmp/71ceb05c-af5d-4d30-b939-5660981cbf1a_buggy.java b/tmp/892e9a4b-e1d7-45bd-bf7b-eecfa91a9c98_fixed.java
index 8e40528..ff4a5ba 100644
--- a/tmp/71ceb05c-af5d-4d30-b939-5660981cbf1a_buggy.java
+++ b/tmp/892e9a4b-e1d7-45bd-bf7b-eecfa91a9c98_fixed.java
@@ -1,78 +1,88 @@
 /**
  * This method attempts to find two values a and b satisfying <ul>
  * <li> <code> lowerBound <= a < initial < b <= upperBound</code> </li>
  * <li> <code> f(a) * f(b) <= 0 </code> </li>
  * </ul>
  * If f is continuous on <code>[a,b],</code> this means that <code>a</code>
  * and <code>b</code> bracket a root of f.
  * <p>
  * The algorithm starts by setting 
  * <code>a := initial -1; b := initial +1,</code> examines the value of the
  * function at <code>a</code> and <code>b</code> and keeps moving
  * the endpoints out by one unit each time through a loop that terminates 
  * when one of the following happens: <ul>
  * <li> <code> f(a) * f(b) <= 0 </code> --  success!</li>
  * <li> <code> a = lower </code> and <code> b = upper</code> 
  * -- ConvergenceException </li>
  * <li> <code> maximumIterations</code> iterations elapse 
  * -- ConvergenceException </li></ul></p>
  * 
  * @param function the function
  * @param initial initial midpoint of interval being expanded to
  * bracket a root
  * @param lowerBound lower bound (a is never lower than this value)
  * @param upperBound upper bound (b never is greater than this
  * value)
  * @param maximumIterations maximum number of iterations to perform
  * @return a two element array holding {a, b}.
  * @throws ConvergenceException if the algorithm fails to find a and b
  * satisfying the desired conditions
  * @throws FunctionEvaluationException if an error occurs evaluating the 
  * function
  * @throws IllegalArgumentException if function is null, maximumIterations
  * is not positive, or initial is not between lowerBound and upperBound
  */
 public static double[] bracket(UnivariateRealFunction function,
         double initial, double lowerBound, double upperBound, 
         int maximumIterations) throws ConvergenceException, 
         FunctionEvaluationException {
     
     if (function == null) {
         throw MathRuntimeException.createIllegalArgumentException("function is null");
     }
     if (maximumIterations <= 0)  {
         throw MathRuntimeException.createIllegalArgumentException(
               "bad value for maximum iterations number: {0}", maximumIterations);
     }
     if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
         throw MathRuntimeException.createIllegalArgumentException(
               "invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",
               lowerBound, initial, upperBound);
     }
-        double a = initial;
-        double b = initial;
+    double a = initial - 1.0;
+    double b = initial + 1.0;
     double fa;
     double fb;
     int numIterations = 0;
 
-        do {
-            a = Math.max(a - 1.0, lowerBound);
-            b = Math.min(b + 1.0, upperBound);
+    while (numIterations < maximumIterations) {
+        a = Math.max(a, lowerBound);
+        b = Math.min(b, upperBound);
         fa = function.value(a);
-            
         fb = function.value(b);
         numIterations++;
-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
-                ((a > lowerBound) || (b < upperBound)));
-   
-        if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
-        }
 
+        if (fa * fb <= 0.0) {
             return new double[]{a, b};
         }
+
+        if (a == lowerBound && b == upperBound) {
+            throw new ConvergenceException(
+                      "number of iterations={0}, maximum iterations={1}, " +
+                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
+                      "final b value={6}, f(a)={7}, f(b)={8}",
+                      numIterations, maximumIterations, initial,
+                      lowerBound, upperBound, a, b, fa, fb);
+        }
+
+        a -= 1.0;
+        b += 1.0;
+    }
+
+    throw new ConvergenceException(
+              "number of iterations={0}, maximum iterations={1}, " +
+              "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
+              "final b value={6}, f(a)={7}, f(b)={8}",
+              numIterations, maximumIterations, initial,
+              lowerBound, upperBound, a, b, fa, fb);
+}
\ No newline at end of file
