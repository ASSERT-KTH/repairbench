diff --git a/tmp/6176c4b8-f203-4ff8-8183-6a181f5d650f_buggy.java b/tmp/b08d0c40-ec09-49f2-b270-2e1ad0cd9ca5_fixed.java
index fecb896..8f14116 100644
--- a/tmp/6176c4b8-f203-4ff8-8183-6a181f5d650f_buggy.java
+++ b/tmp/b08d0c40-ec09-49f2-b270-2e1ad0cd9ca5_fixed.java
@@ -1,34 +1,50 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
+     * and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean isEscaped = false;
+        boolean isQuoted = false;
+        char quoteChar = 0;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
+
             if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+                if (!isQuoted) {
+                    if (c == open && !isEscaped) {
                         depth++;
                         if (start == -1)
                             start = pos;
-                }
-                else if (c.equals(close))
+                    } else if (c == close && !isEscaped) {
                         depth--;
                     }
+                }
 
-            if (depth > 0 && last != 0)
+                if (c == quoteChar) {
+                    isQuoted = !isQuoted;
+                } else if (c == '\'' || c == '"') {
+                    quoteChar = c;
+                    isQuoted = true;
+                }
+            }
+
+            if (depth > 0 && last != 0 && !isQuoted) {
                 end = pos; // don't include the outer match pair in the return
+            }
+
+            isEscaped = (c == '\\');
             last = c;
         } while (depth > 0);
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
