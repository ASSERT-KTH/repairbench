diff --git a/tmp/a748a836-64c0-49ea-9b86-dc32519973fd_buggy.java b/tmp/ea2a200b-5c8f-4f7d-9b27-fc5ee6602957_fixed.java
index fecb896..3c2daa7 100644
--- a/tmp/a748a836-64c0-49ea-9b86-dc32519973fd_buggy.java
+++ b/tmp/ea2a200b-5c8f-4f7d-9b27-fc5ee6602957_fixed.java
@@ -1,34 +1,45 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
+ * and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
     char last = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
         if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            if (!inQuote) {
+                if (c == '\'' || c == '"') {
+                    inQuote = true;
+                    quoteChar = c;
+                } else if (c.equals(open)) {
                     depth++;
                     if (start == -1)
                         start = pos;
-                }
-                else if (c.equals(close))
+                } else if (c.equals(close)) {
                     depth--;
                 }
+            } else {
+                if (c == quoteChar && last != ESC) {
+                    inQuote = false;
+                }
+            }
+        }
 
         if (depth > 0 && last != 0)
             end = pos; // don't include the outer match pair in the return
         last = c;
-        } while (depth > 0);
+    } while (depth > 0 || inQuote);
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
