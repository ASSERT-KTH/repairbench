diff --git a/tmp/cf90f7e5-45d4-4c4b-a751-e6abdc791f06_buggy.java b/tmp/fe0da57f-065b-4366-9d6a-d0fffd38d686_fixed.java
index fecb896..b58a02e 100644
--- a/tmp/cf90f7e5-45d4-4c4b-a751-e6abdc791f06_buggy.java
+++ b/tmp/fe0da57f-065b-4366-9d6a-d0fffd38d686_fixed.java
@@ -1,34 +1,47 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
+     * and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean isEscaped = false;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
+
+            if (!isEscaped) {
                 if (last == 0 || last != ESC) {
                     if (c.equals(open)) {
                         depth++;
                         if (start == -1)
                             start = pos;
-                }
-                else if (c.equals(close))
+                    } else if (c.equals(close)) {
                         depth--;
+                        if (depth == 0) {
+                            end = pos; // mark the end position
+                            break; // exit the loop when balanced
+                        }
+                    }
+                }
+
+                if (c.equals('\\')) {
+                    isEscaped = true; // next character is escaped
+                }
+            } else {
+                isEscaped = false; // reset after processing escaped character
             }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
             last = c;
-        } while (depth > 0);
+        } while (true);
+
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
