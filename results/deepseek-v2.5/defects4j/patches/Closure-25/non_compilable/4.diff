diff --git a/tmp/31c26fd2-8678-427d-b0c2-d9da52dd3fe1_buggy.java b/tmp/801c3cf5-fec3-41ad-b049-dd2555855214_fixed.java
index b98f0a7..4f29c7d 100644
--- a/tmp/31c26fd2-8678-427d-b0c2-d9da52dd3fe1_buggy.java
+++ b/tmp/801c3cf5-fec3-41ad-b049-dd2555855214_fixed.java
@@ -1,29 +1,48 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
+    
+    // Traverse the constructor arguments
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
+    
+    // Perform backwards type inference on the constructor arguments
+    if (type != null && type instanceof ObjectType) {
+        ObjectType instanceType = (ObjectType) type;
+        FunctionType ctorFunc = instanceType.getConstructor();
+        if (ctorFunc != null) {
+            for (Node arg = constructor.getNext(), param = ctorFunc.getParameters().getFirstChild();
+                 arg != null && param != null;
+                 arg = arg.getNext(), param = param.getNext()) {
+                JSType paramType = param.getJSType();
+                if (paramType != null) {
+                    arg.setJSType(arg.getJSType().getLeastSupertype(paramType));
+                }
+            }
+        }
+    }
+    
     return scope;
 }
\ No newline at end of file
