diff --git a/tmp/b0656f7b-d20d-4c26-ab9d-bb5390ef0d33_buggy.java b/tmp/a29d3b68-9cf2-47d3-9443-545431cf234e_fixed.java
index b98f0a7..fc36239 100644
--- a/tmp/b0656f7b-d20d-4c26-ab9d-bb5390ef0d33_buggy.java
+++ b/tmp/a29d3b68-9cf2-47d3-9443-545431cf234e_fixed.java
@@ -1,29 +1,48 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
+
+    // Traverse the arguments and propagate the type information
+    boolean firstArg = true;
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
+        if (firstArg && type != null && type instanceof ObjectType) {
+            // Propagate the constructor parameter types to the first argument
+            ObjectType instanceType = (ObjectType) type;
+            FunctionType constructorFnType = instanceType.getConstructor();
+            if (constructorFnType != null && constructorFnType.getParameters() != null) {
+                Node firstParam = constructorFnType.getParameters().getFirstChild();
+                if (firstParam != null) {
+                    JSType paramType = firstParam.getJSType();
+                    if (paramType != null) {
+                        // Set the type of the first argument to the type of the first parameter
+                        arg.setJSType(paramType);
+                    }
+                }
+            }
+        }
+        firstArg = false;
     }
     return scope;
 }
\ No newline at end of file
