diff --git a/tmp/8e6b50b8-6aec-4f1f-814a-de5bdf524129_buggy.java b/tmp/52d46738-8f03-43f3-87ac-935c4a67e569_fixed.java
index b98f0a7..1695bfa 100644
--- a/tmp/8e6b50b8-6aec-4f1f-814a-de5bdf524129_buggy.java
+++ b/tmp/52d46738-8f03-43f3-87ac-935c4a67e569_fixed.java
@@ -1,29 +1,45 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // Traverse arguments and infer types
+    Node arg = constructor.getNext();
+    if (ct != null && ct.isConstructor()) {
+        FunctionType functionType = ct;
+        List<ObjectType> parameterTypes = functionType.getParameterTypes();
+        for (int i = 0; arg != null && i < parameterTypes.size(); i++) {
+            JSType paramType = parameterTypes.get(i);
             scope = traverse(arg, scope);
+            JSType argType = arg.getJSType();
+            if (argType != null) {
+                argType = argType.specialize(paramType);
+                arg.setJSType(argType);
             }
+            arg = arg.getNext();
+        }
+    } else {
+        for (; arg != null; arg = arg.getNext()) {
+            scope = traverse(arg, scope);
+        }
+    }
+
     return scope;
 }
\ No newline at end of file
