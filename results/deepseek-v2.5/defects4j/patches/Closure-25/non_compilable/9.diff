diff --git a/tmp/f1493f69-d18b-47cf-b658-2560ac6f21dc_buggy.java b/tmp/71afaaf2-3a17-4da4-995a-f9150f87ddc9_fixed.java
index b98f0a7..cc20746 100644
--- a/tmp/f1493f69-d18b-47cf-b658-2560ac6f21dc_buggy.java
+++ b/tmp/71afaaf2-3a17-4da4-995a-f9150f87ddc9_fixed.java
@@ -1,29 +1,39 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
+
+    // Traverse the arguments and infer types backwards.
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
+        JSType argType = arg.getJSType();
+        if (type != null && argType != null) {
+            JSType paramType = ct.getParameterType(arg.getIndex() - 1);
+            if (paramType != null) {
+                argType = argType.unionWith(paramType);
+                arg.setJSType(argType);
+            }
+        }
     }
     return scope;
 }
\ No newline at end of file
