diff --git a/tmp/ee95a09b-b86d-4459-8c17-f8c92c68d0d6_buggy.java b/tmp/00d320ae-28c4-435b-955c-4de3d41f95c6_fixed.java
index b98f0a7..37b4f62 100644
--- a/tmp/ee95a09b-b86d-4459-8c17-f8c92c68d0d6_buggy.java
+++ b/tmp/00d320ae-28c4-435b-955c-4de3d41f95c6_fixed.java
@@ -1,29 +1,45 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
+
+    // Traverse the arguments and infer types for `y` in `new F(y)`
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
+        JSType argType = arg.getJSType();
+        if (argType != null && type instanceof FunctionType) {
+            FunctionType ft = (FunctionType) type;
+            if (ft.getParametersNode() != null) {
+                Node paramNode = ft.getParametersNode().getFirstChild();
+                for (Node param = paramNode; param != null; param = param.getNext()) {
+                    JSType paramType = param.getJSType();
+                    if (paramType != null) {
+                        argType = argType.getLeastSupertype(paramType);
+                        arg.setJSType(argType);
+                    }
+                }
+            }
+        }
     }
     return scope;
 }
\ No newline at end of file
