diff --git a/tmp/ababba77-6ce7-4218-aa96-4d427199d2e5_buggy.java b/tmp/9d40fbae-313a-4690-a03e-a23cddeb7b55_fixed.java
index b98f0a7..1998842 100644
--- a/tmp/ababba77-6ce7-4218-aa96-4d427199d2e5_buggy.java
+++ b/tmp/9d40fbae-313a-4690-a03e-a23cddeb7b55_fixed.java
@@ -1,29 +1,46 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Apply the type of the constructor's parameters to the arguments
+                if (ct.getParametersNode() != null) {
+                    Node parameters = ct.getParametersNode();
+                    Node arg = constructor.getNext();
+                    while (arg != null && parameters != null) {
+                        JSType parameterType = parameters.getJSType();
+                        if (parameterType != null) {
+                            if (arg.getJSType() == null) {
+                                arg.setJSType(parameterType);
+                            } else {
+                                JSType existingType = arg.getJSType();
+                                JSType mergedType = existingType.getLeastSupertype(parameterType);
+                                arg.setJSType(mergedType);
                             }
                         }
-    }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
                         scope = traverse(arg, scope);
+                        arg = arg.getNext();
+                        parameters = parameters.getNext();
                     }
+                }
+            }
+        }
+    }
+    n.setJSType(type);
     return scope;
 }
\ No newline at end of file
