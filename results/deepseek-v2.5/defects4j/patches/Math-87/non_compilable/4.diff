diff --git a/tmp/bec17c51-7b9b-423a-ac2e-ee8cb666efbf_buggy.java b/tmp/7c106750-ecc6-49a0-a67e-27de1b06bed6_fixed.java
index 70cafe0..ec1603c 100644
--- a/tmp/bec17c51-7b9b-423a-ac2e-ee8cb666efbf_buggy.java
+++ b/tmp/7c106750-ecc6-49a0-a67e-27de1b06bed6_fixed.java
@@ -1,18 +1,67 @@
     /**
-     * Checks whether the given column is basic.
-     * @param col index of the column to check
-     * @return the row that the variable is basic in.  null if the column is not basic
+     * <p>Render the specified text and return the rendered Options
+     * in a StringBuffer.</p>
+     *
+     * @param sb The StringBuffer to place the rendered text into.
+     * @param width The number of characters to display per line
+     * @param nextLineTabStop The position on the next line for the first tab.
+     * @param text The text to be rendered.
+     *
+     * @return the StringBuffer with the rendered Options contents.
      */
-    private Integer getBasicRow(final int col) {
-        Integer row = null;
-        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
-                if (row == null) {
-                row = i;
-                } else {
-                return null;
+    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
+                                             int nextLineTabStop, String text)
+    {
+        int start = 0;
+        int pos;
+
+        while (start < text.length()) {
+            pos = findWrapPos(text, width, start);
+
+            if (pos == -1) {
+                sb.append(rtrim(text.substring(start)));
+                return sb;
             }
+
+            sb.append(rtrim(text.substring(start, pos))).append(defaultNewLine);
+
+            // all following lines must be padded with nextLineTabStop space 
+            // characters
+            if (nextLineTabStop > 0 && pos < text.length()) {
+                sb.append(createPadding(nextLineTabStop));
             }
+
+            start = pos;
         }
-        return row;
+
+        return sb;
     }
+
+    private int findWrapPos(String text, int width, int start) {
+        int pos = text.lastIndexOf(' ', width + start);
+        if (pos >= start) {
+            return pos + 1; // Move past the space
+        }
+        return -1; // No suitable wrap position found
+    }
+
+    private String rtrim(String str) {
+        int len = str.length();
+        int i;
+        for (i = len - 1; i >= 0; i--) {
+            if (!Character.isWhitespace(str.charAt(i))) {
+                break;
+            }
+        }
+        return str.substring(0, i + 1);
+    }
+
+    private String createPadding(int len) {
+        StringBuilder sb = new StringBuilder(len);
+        for (int i = 0; i < len; i++) {
+            sb.append(' ');
+        }
+        return sb.toString();
+    }
+
+    private String defaultNewLine = System.lineSeparator();
\ No newline at end of file
