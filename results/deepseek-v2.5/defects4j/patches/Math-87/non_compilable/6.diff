diff --git a/tmp/0e38a7b7-bb87-44df-9108-a351ce1516ec_buggy.java b/tmp/997b7ded-662b-48eb-b230-a4c68d809dd5_fixed.java
index 70cafe0..4bdf66e 100644
--- a/tmp/0e38a7b7-bb87-44df-9108-a351ce1516ec_buggy.java
+++ b/tmp/997b7ded-662b-48eb-b230-a4c68d809dd5_fixed.java
@@ -1,18 +1,31 @@
-    /**
-     * Checks whether the given column is basic.
-     * @param col index of the column to check
-     * @return the row that the variable is basic in.  null if the column is not basic
-     */
-    private Integer getBasicRow(final int col) {
-        Integer row = null;
-        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
-                if (row == null) {
-                row = i;
-                } else {
-                return null;
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
+                                         int nextLineTabStop, String text)
+{
+    int pos = findWrapPos(text, width, 0);
+
+    if (pos == -1)
+    {
+        sb.append(rtrim(text));
+        return sb;
     }
+    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+    // all following lines must be padded with nextLineTabStop space characters
+    final String padding = createPadding(nextLineTabStop);
+
+    while (true)
+    {
+        // Ensure the text starts with padding before trimming
+        text = padding + text.substring(pos).trim();
+        pos = findWrapPos(text, width, nextLineTabStop);
+
+        if (pos == -1)
+        {
+            sb.append(text);
+            return sb;
         }
+
+        // Ensure the trimmed line is appended correctly
+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
-        return row;
 }
\ No newline at end of file
