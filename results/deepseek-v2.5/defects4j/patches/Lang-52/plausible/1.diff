diff --git a/tmp/90a87009-3af2-4a01-96bf-52e4161111c4_buggy.java b/tmp/745ea6c8-4730-42a0-be4b-b0b40aa6d15b_fixed.java
index a6dab52..8adf5f0 100644
--- a/tmp/90a87009-3af2-4a01-96bf-52e4161111c4_buggy.java
+++ b/tmp/745ea6c8-4730-42a0-be4b-b0b40aa6d15b_fixed.java
@@ -1,80 +1,77 @@
     /**
      * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>
      * 
      * @param out write to receieve the escaped string
      * @param str String to escape values in, may be null
      * @param escapeSingleQuote escapes single quotes if <code>true</code>
      * @throws IOException if an IOException occurs
      */
     private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (str == null) {
             return;
         }
         int sz;
         sz = str.length();
         for (int i = 0; i < sz; i++) {
             char ch = str.charAt(i);
 
             // handle unicode
             if (ch > 0xfff) {
                 out.write("\\u" + hex(ch));
             } else if (ch > 0xff) {
                 out.write("\\u0" + hex(ch));
             } else if (ch > 0x7f) {
                 out.write("\\u00" + hex(ch));
             } else if (ch < 32) {
                 switch (ch) {
                     case '\b':
-                        out.write('\\');
-                        out.write('b');
+                        out.write("\\b");
                         break;
                     case '\n':
-                        out.write('\\');
-                        out.write('n');
+                        out.write("\\n");
                         break;
                     case '\t':
-                        out.write('\\');
-                        out.write('t');
+                        out.write("\\t");
                         break;
                     case '\f':
-                        out.write('\\');
-                        out.write('f');
+                        out.write("\\f");
                         break;
                     case '\r':
-                        out.write('\\');
-                        out.write('r');
+                        out.write("\\r");
                         break;
                     default :
                         if (ch > 0xf) {
                             out.write("\\u00" + hex(ch));
                         } else {
                             out.write("\\u000" + hex(ch));
                         }
                         break;
                 }
             } else {
                 switch (ch) {
                     case '\'':
                         if (escapeSingleQuote) {
-                          out.write('\\');
-                        }
+                            out.write("\\'");
+                        } else {
                             out.write('\'');
+                        }
                         break;
                     case '"':
-                        out.write('\\');
-                        out.write('"');
+                        out.write("\\\"");
                         break;
                     case '\\':
-                        out.write('\\');
-                        out.write('\\');
+                        out.write("\\\\");
+                        break;
+                    case '/':
+                        out.write("\\/");
                         break;
                     default :
                         out.write(ch);
                         break;
                 }
             }
         }
     }
\ No newline at end of file
