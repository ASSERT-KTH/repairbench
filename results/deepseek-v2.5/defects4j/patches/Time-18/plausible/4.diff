diff --git a/tmp/ec0da141-060b-406d-ae34-4e767b5293ec_buggy.java b/tmp/9dd02bc2-efdd-4a10-99de-a9d142cf0469_fixed.java
index be2af16..0e370cd 100644
--- a/tmp/ec0da141-060b-406d-ae34-4e767b5293ec_buggy.java
+++ b/tmp/9dd02bc2-efdd-4a10-99de-a9d142cf0469_fixed.java
@@ -1,29 +1,47 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
     // Assume date is Gregorian.
     long instant;
+    try {
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+    } catch (IllegalFieldValueException e) {
+        // Handle the case where the date is invalid in the Gregorian calendar
+        // but might be valid in the Julian calendar.
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
             // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
+        return instant;
+    }
+
+    if (instant < iCutoverMillis) {
+        // Maybe it's Julian.
+        long julianInstant = iJulianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (julianInstant >= iCutoverMillis) {
+            // Okay, it's in the illegal cutover gap.
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
+        // If the Julian instant is valid and before the cutover, return it.
+        if (julianInstant < iCutoverMillis) {
+            return julianInstant;
+        }
     }
     return instant;
 }
\ No newline at end of file
