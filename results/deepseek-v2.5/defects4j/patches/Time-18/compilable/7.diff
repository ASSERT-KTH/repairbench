diff --git a/tmp/535a6c50-9ff1-4b09-b595-1a645b61810c_buggy.java b/tmp/995cbb2c-db3b-4e79-90f5-a607faa65869_fixed.java
index be2af16..cdb015b 100644
--- a/tmp/535a6c50-9ff1-4b09-b595-1a645b61810c_buggy.java
+++ b/tmp/995cbb2c-db3b-4e79-90f5-a607faa65869_fixed.java
@@ -1,29 +1,44 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
     // Assume date is Gregorian.
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    try {
+        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    } catch (IllegalArgumentException e) {
+        // If Gregorian parsing fails, try Julian.
+        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            // If Julian parsing is still invalid, it's in the illegal cutover gap.
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
+        return instant;
+    }
+
+    if (instant < iCutoverMillis) {
+        // If Gregorian parsing succeeded but the date is before the cutover, check Julian.
+        long julianInstant;
+        try {
+            julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                                                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (julianInstant < iCutoverMillis) {
+                // If Julian parsing succeeds and is before the cutover, use Julian.
+                return julianInstant;
+            }
+        } catch (IllegalArgumentException e) {
+            // If Julian parsing fails, it's still in the invalid cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
     return instant;
 }
\ No newline at end of file
