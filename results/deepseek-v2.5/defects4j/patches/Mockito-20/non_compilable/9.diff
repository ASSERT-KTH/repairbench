diff --git a/tmp/1c9287cb-b69f-45e0-92fc-838fa1f1c8e4_buggy.java b/tmp/cb2a177f-aea2-49f7-8a63-b0f3a8ed5269_fixed.java
index f9a9b5b..d77e950 100644
--- a/tmp/1c9287cb-b69f-45e0-92fc-838fa1f1c8e4_buggy.java
+++ b/tmp/cb2a177f-aea2-49f7-8a63-b0f3a8ed5269_fixed.java
@@ -1,30 +1,34 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
         mockInstance = classInstantiator.instantiate(mockedProxyType);
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
+                "  proxy instance class : " + (mockInstance != null ? describeClass(mockInstance.getClass()) : "null"),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        String errorMessage = "Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'";
+        if (mockedProxyType.isMemberClass() && !Modifier.isStatic(mockedProxyType.getModifiers())) {
+            errorMessage += ". Inner classes must be static and must have a 0-arg constructor.";
+        }
+        throw new MockitoException(errorMessage, e);
     }
 }
\ No newline at end of file
