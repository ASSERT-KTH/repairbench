diff --git a/tmp/8a8c5941-12d6-4c96-b518-9e1efe21b157_buggy.java b/tmp/b3c716b1-a863-4e33-9468-350c524c9b79_fixed.java
index 1650d36..e7d623d 100644
--- a/tmp/8a8c5941-12d6-4c96-b518-9e1efe21b157_buggy.java
+++ b/tmp/b3c716b1-a863-4e33-9468-350c524c9b79_fixed.java
@@ -1,25 +1,33 @@
     /**
      * <p>Checks if two calendar objects represent the same local time.</p>
      *
      * <p>This method compares the values of the fields of the two objects.
-     * In addition, both calendars must be the same of the same type.</p>
+     * In addition, both calendars must be of the same type.</p>
      * 
      * @param cal1  the first calendar, not altered, not null
      * @param cal2  the second calendar, not altered, not null
      * @return true if they represent the same millisecond instant
      * @throws IllegalArgumentException if either date is <code>null</code>
      * @since 2.1
      */
     public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {
         if (cal1 == null || cal2 == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
-        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
-                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
-                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&
-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
-                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
-                cal1.getClass() == cal2.getClass());
+        // Clone the calendars to avoid altering the original instances
+        Calendar cal1Clone = (Calendar) cal1.clone();
+        Calendar cal2Clone = (Calendar) cal2.clone();
+        
+        // Set both calendars to the same time zone (UTC) before comparing
+        cal1Clone.setTimeZone(TimeZone.getTimeZone("UTC"));
+        cal2Clone.setTimeZone(TimeZone.getTimeZone("UTC"));
+        
+        return (cal1Clone.get(Calendar.MILLISECOND) == cal2Clone.get(Calendar.MILLISECOND) &&
+                cal1Clone.get(Calendar.SECOND) == cal2Clone.get(Calendar.SECOND) &&
+                cal1Clone.get(Calendar.MINUTE) == cal2Clone.get(Calendar.MINUTE) &&
+                cal1Clone.get(Calendar.HOUR_OF_DAY) == cal2Clone.get(Calendar.HOUR_OF_DAY) && // Use HOUR_OF_DAY instead of HOUR
+                cal1Clone.get(Calendar.DAY_OF_YEAR) == cal2Clone.get(Calendar.DAY_OF_YEAR) &&
+                cal1Clone.get(Calendar.YEAR) == cal2Clone.get(Calendar.YEAR) &&
+                cal1Clone.get(Calendar.ERA) == cal2Clone.get(Calendar.ERA) &&
+                cal1Clone.getClass() == cal2Clone.getClass());
     }
\ No newline at end of file
