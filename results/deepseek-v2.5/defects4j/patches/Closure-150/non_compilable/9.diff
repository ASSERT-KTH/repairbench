diff --git a/tmp/f1833d9a-4c98-40de-a40b-bce790311319_buggy.java b/tmp/bf90d630-1102-4282-8b7f-49565f34b3f9_fixed.java
index 800e6e1..ec41f51 100644
--- a/tmp/f1833d9a-4c98-40de-a40b-bce790311319_buggy.java
+++ b/tmp/bf90d630-1102-4282-8b7f-49565f34b3f9_fixed.java
@@ -1,32 +1,42 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
+          if (parent.getType() == Token.ASSIGN) {
+            // Handle cases where a variable is being assigned to a namespace or object literal
+            Node lhs = parent.getFirstChild();
+            Node rhs = lhs.getNext();
+            if (lhs.isGetProp() || lhs.isObjectLit()) {
+              defineVar(lhs, parent);
+              defineVar(rhs, parent);
+              return;
+            }
+          }
           defineVar(n, parent);
           break;
       }
     }
\ No newline at end of file
