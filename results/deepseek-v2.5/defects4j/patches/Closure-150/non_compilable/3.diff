diff --git a/tmp/43aae2d1-b877-4235-a05a-9d83f6c33317_buggy.java b/tmp/56a831d9-3b06-48a0-811b-8199fa7e89c5_fixed.java
index 800e6e1..6421898 100644
--- a/tmp/43aae2d1-b877-4235-a05a-9d83f6c33317_buggy.java
+++ b/tmp/56a831d9-3b06-48a0-811b-8199fa7e89c5_fixed.java
@@ -1,32 +1,44 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
+            // Ensure that function definitions in a namespaced context are handled correctly
+            defineDeclaredFunction(n, parent);
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.GETPROP:
+          // Handle property access on variables (e.g., goog.foo)
+          Node left = n.getFirstChild();
+          Node right = n.getLastChild();
+          if (left.getType() == Token.NAME && right.getType() == Token.STRING) {
+            String varName = left.getString();
+            String propName = right.getString();
+            definePropertyAccess(t, varName, propName);
+          }
+          break;
       }
     }
\ No newline at end of file
