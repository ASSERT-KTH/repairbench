diff --git a/tmp/743957f5-f053-444a-be9e-a60af185dfae_buggy.java b/tmp/2b479d0b-acbf-42af-9a7f-15a245a1209a_fixed.java
index 877a1a1..c7518e1 100644
--- a/tmp/743957f5-f053-444a-be9e-a60af185dfae_buggy.java
+++ b/tmp/2b479d0b-acbf-42af-9a7f-15a245a1209a_fixed.java
@@ -1,14 +1,31 @@
 /**
   * Returns the percentage of values that are equal to v
  * (as a proportion between 0 and 1).
  * <p>
  * Returns <code>Double.NaN</code> if no values have been added.</p>
  *
  * @param v the value to lookup
  * @return the proportion of values equal to v
  * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
  */
 @Deprecated
 public double getPct(Object v) {
-        return getCumPct((Comparable<?>) v);
+    if (v == null) {
+        throw new NullPointerException("Value to lookup cannot be null");
+    }
+    return getCumPct((Comparable<?>) v) - getCumPct((Comparable<?>) v, true);
+}
+
+private double getCumPct(Comparable<?> value, boolean excludeCurrent) {
+    double cumulativePct = 0.0;
+    for (Map.Entry<Comparable<?>, Long> entry : freqTable.entrySet()) {
+        if (entry.getKey().equals(value)) {
+            if (!excludeCurrent) {
+                cumulativePct += (double) entry.getValue() / (double) sumFreq;
+            }
+            break;
+        }
+        cumulativePct += (double) entry.getValue() / (double) sumFreq;
+    }
+    return cumulativePct;
 }
\ No newline at end of file
