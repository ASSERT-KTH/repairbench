diff --git a/tmp/49a9c9b5-519c-47d0-93b2-4f463dcecd30_buggy.java b/tmp/42ee99c7-7364-401e-b2a2-ec4e4fc9044d_fixed.java
index eed2194..db63374 100644
--- a/tmp/49a9c9b5-519c-47d0-93b2-4f463dcecd30_buggy.java
+++ b/tmp/42ee99c7-7364-401e-b2a2-ec4e4fc9044d_fixed.java
@@ -1,55 +1,53 @@
 /**
  * Gets a time zone instance for the specified offset to UTC in hours and minutes.
  * This method assumes 60 minutes in an hour, and standard length minutes.
  * <p>
  * This factory is a convenient way of constructing zones with a fixed offset.
  * The hours value must be in the range -23 to +23.
  * The minutes value must be in the range -59 to +59.
  * The following combinations of sign for the hour and minute are possible:
  * <pre>
  *  Hour    Minute    Example    Result
  * 
  *  +ve     +ve       (2, 15)    +02:15
  *  +ve     zero      (2, 0)     +02:00
  *  +ve     -ve       (2, -15)   IllegalArgumentException
  * 
  *  zero    +ve       (0, 15)    +00:15
  *  zero    zero      (0, 0)     +00:00
  *  zero    -ve       (0, -15)   -00:15
  * 
  *  -ve     +ve       (-2, 15)   -02:15
  *  -ve     zero      (-2, 0)    -02:00
  *  -ve     -ve       (-2, -15)  -02:15
  * </pre>
  * Note that in versions before 2.3, the minutes had to be zero or positive.
  * 
  * @param hoursOffset  the offset in hours from UTC, from -23 to +23
  * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
  * @return the DateTimeZone object for the offset
  * @throws IllegalArgumentException if any value is out of range, the minutes are negative
  *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
  */
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
     if (hoursOffset == 0 && minutesOffset == 0) {
         return DateTimeZone.UTC;
     }
     if (hoursOffset < -23 || hoursOffset > 23) {
         throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
     }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+    if (minutesOffset < -59 || minutesOffset > 59) {
         throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
     }
-        int offset = 0;
-        try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
-            } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
+    if (hoursOffset > 0 && minutesOffset < 0) {
+        throw new IllegalArgumentException("Minutes cannot be negative when hours are positive: " + minutesOffset);
     }
-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
-        } catch (ArithmeticException ex) {
+
+    int totalMinutesOffset = hoursOffset * 60 + minutesOffset;
+    if (totalMinutesOffset > 1439 || totalMinutesOffset < -1439) {
         throw new IllegalArgumentException("Offset is too large");
     }
+
+    int offset = totalMinutesOffset * DateTimeConstants.MILLIS_PER_MINUTE;
     return forOffsetMillis(offset);
 }
\ No newline at end of file
