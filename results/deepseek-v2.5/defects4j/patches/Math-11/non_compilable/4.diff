diff --git a/tmp/566d1e90-6931-47a3-928b-3c0607b68e1b_buggy.java b/tmp/df77e8e9-d46b-4442-8414-a9e6fc459931_fixed.java
index 51a0115..8d684fa 100644
--- a/tmp/566d1e90-6931-47a3-928b-3c0607b68e1b_buggy.java
+++ b/tmp/df77e8e9-d46b-4442-8414-a9e6fc459931_fixed.java
@@ -1,11 +1,33 @@
     /** {@inheritDoc} */
     public double density(final double[] vals) throws DimensionMismatchException {
         final int dim = getDimension();
         if (vals.length != dim) {
             throw new DimensionMismatchException(vals.length, dim);
         }
 
-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *
-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *
-            getExponentTerm(vals);
+        final double[] diff = new double[dim];
+        for (int i = 0; i < dim; i++) {
+            diff[i] = vals[i] - getMeans()[i];
+        }
+
+        final double[][] sigma = getCovariances();
+        final double[][] sigmaInv = new double[dim][dim];
+        final CholeskyDecomposition chol = new CholeskyDecomposition(new BlockRealMatrix(sigma));
+        final RealMatrix sigmaInvMatrix = chol.getSolver().getInverse();
+        for (int i = 0; i < dim; i++) {
+            for (int j = 0; j < dim; j++) {
+                sigmaInv[i][j] = sigmaInvMatrix.getEntry(i, j);
+            }
+        }
+
+        double exponentTerm = 0.0;
+        for (int i = 0; i < dim; i++) {
+            for (int j = 0; j < dim; j++) {
+                exponentTerm += diff[i] * sigmaInv[i][j] * diff[j];
+            }
+        }
+
+        return FastMath.pow(2 * FastMath.PI, -dim / 2.0) *
+               FastMath.pow(getCovarianceMatrixDeterminant(), -0.5) *
+               FastMath.exp(-0.5 * exponentTerm);
     }
\ No newline at end of file
