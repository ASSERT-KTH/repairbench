diff --git a/tmp/28c91815-91a5-4db6-b812-725d6d1df0e2_buggy.java b/tmp/9a74c2ac-6c0d-4345-90db-9ba6f35f9d4f_fixed.java
index 6c9090f..df8b29c 100644
--- a/tmp/28c91815-91a5-4db6-b812-725d6d1df0e2_buggy.java
+++ b/tmp/9a74c2ac-6c0d-4345-90db-9ba6f35f9d4f_fixed.java
@@ -1,45 +1,52 @@
 /**
  * Method called to finalize setup of this deserializer,
  * when it is known for which property deserializer is needed
  * for.
  */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator != null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                         +": value instantiator ("+_valueInstantiator.getClass().getName()
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
+        } else if (_valueInstantiator.canCreateUsingDefault()) {
+            // Ensure we have a default constructor available for the collection type
+            try {
+                _collectionType.getRawClass().getDeclaredConstructor();
+            } catch (NoSuchMethodException e) {
+                throw new JsonMappingException(ctxt.getParser(), "No default constructor for " + _collectionType, e);
+            }
         }
     }
     // [databind#1043]: allow per-property allow-wrapping of single overrides:
     // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
     //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     
     // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
     // and finally, type deserializer needs context as well
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
