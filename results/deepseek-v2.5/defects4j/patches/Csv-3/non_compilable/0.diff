diff --git a/tmp/a926e93e-3504-4ddb-a305-7396909e4af3_buggy.java b/tmp/1c5119d0-9543-4a84-88a2-7b3edd67e3c4_fixed.java
index 1ad070d..56eeb43 100644
--- a/tmp/a926e93e-3504-4ddb-a305-7396909e4af3_buggy.java
+++ b/tmp/1c5119d0-9543-4a84-88a2-7b3edd67e3c4_fixed.java
@@ -1,38 +1,40 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
+     * the escape character is not allowed at end of stream
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
+        case 'N': // Handle MySQL's \N for null value
+            return N;
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
             // Now check for meta-characters
             return c;
             // indicate unexpected char - available from in.getLastChar()
         }
     }
\ No newline at end of file
