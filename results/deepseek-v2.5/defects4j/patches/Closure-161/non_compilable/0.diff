diff --git a/tmp/20d6606d-c56b-4788-9c2f-80b68b98644e_buggy.java b/tmp/88c18d4a-d044-479f-80c9-2c7d7f2691f8_fixed.java
index 1303a19..347d6f5 100644
--- a/tmp/20d6606d-c56b-4788-9c2f-80b68b98644e_buggy.java
+++ b/tmp/88c18d4a-d044-479f-80c9-2c7d7f2691f8_fixed.java
@@ -1,45 +1,52 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
   Node parent = n.getParent();
   // If GETPROP/GETELEM is used as assignment target the array literal is
   // acting as a temporary we can't fold it here:
   //    "[][0] += 1"
 
   if (right.getType() != Token.NUMBER) {
     // Sometimes people like to use complex expressions to index into
     // arrays, or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
 
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
   Node elem = left.getFirstChild();
   for (int i = 0; elem != null && i < intIndex; i++) {
     elem = elem.getNext();
   }
 
   if (elem == null) {
+    // Handle cases where the index is out of bounds but the array access is
+    // part of an assignment operation. In such cases, we should not throw an
+    // error because the array might be expanded later.
+    if (parent.isAssign()) {
+      // If it's an assignment, we don't fold and return the original node.
+      return n;
+    }
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
   if (elem.getType() == Token.EMPTY) {
     elem = NodeUtil.newUndefinedNode(elem);
   } else {
     left.removeChild(elem);
   }
 
   // Replace the entire GETELEM with the value
   n.getParent().replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
