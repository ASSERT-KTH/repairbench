diff --git a/tmp/aca124e9-b676-4e85-841e-32173ee03235_buggy.java b/tmp/bee81a34-5b2d-47f9-8ebc-e12f4d3c7ac3_fixed.java
index 1303a19..1e33b1a 100644
--- a/tmp/aca124e9-b676-4e85-841e-32173ee03235_buggy.java
+++ b/tmp/bee81a34-5b2d-47f9-8ebc-e12f4d3c7ac3_fixed.java
@@ -1,45 +1,46 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType() != Token.NUMBER) {
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
         elem = elem.getNext();
     }
 
     if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+        // If the index is out of bounds, handle it gracefully without error
+        // and return the original node.
         return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
         elem = NodeUtil.newUndefinedNode(elem);
     } else {
         left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
