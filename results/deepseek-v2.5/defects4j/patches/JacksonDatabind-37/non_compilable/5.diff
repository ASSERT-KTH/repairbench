diff --git a/tmp/586f33b0-2453-4fc8-9b8b-e5eb5835204e_buggy.java b/tmp/2cb7153d-bf57-432e-9176-2b7313fc0282_fixed.java
index e5ad041..4f5e116 100644
--- a/tmp/586f33b0-2453-4fc8-9b8b-e5eb5835204e_buggy.java
+++ b/tmp/2cb7153d-bf57-432e-9176-2b7313fc0282_fixed.java
@@ -1,19 +1,69 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
         // 15-Jan-2015, tatu: Not correct; should really re-resolve...
+        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+                _valueHandler, _typeHandler, _asStatic) {
+            @Override
+            public JavaType withTypeHandler(Object h) {
+                return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+                        _valueHandler, h, _asStatic);
+            }
+
+            @Override
+            public JavaType withContentTypeHandler(Object h) {
                 return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
                         _valueHandler, _typeHandler, _asStatic);
             }
+
+            @Override
+            public JavaType withValueHandler(Object h) {
+                return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+                        h, _typeHandler, _asStatic);
+            }
+
+            @Override
+            public JavaType withContentValueHandler(Object h) {
+                return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+                        _valueHandler, _typeHandler, _asStatic);
+            }
+
+            @Override
+            public JavaType withStaticTyping() {
+                return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+                        _valueHandler, _typeHandler, true);
+            }
+
+            @Override
+            protected String buildCanonicalName() {
+                return subclass.getName();
+            }
+
+            @Override
+            public boolean isContainerType() {
+                return false;
+            }
+
+            @Override
+            public StringBuilder getGenericSignature(StringBuilder sb) {
+                return _classSignature(subclass, sb, false);
+            }
+
+            @Override
+            public StringBuilder getErasedSignature(StringBuilder sb) {
+                return _classSignature(subclass, sb, true);
+            }
+        };
+    }
\ No newline at end of file
