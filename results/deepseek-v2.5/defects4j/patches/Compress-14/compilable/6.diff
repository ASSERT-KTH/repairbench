diff --git a/tmp/c85f94ab-1164-4ae7-92ec-fc68eabf9d6f_buggy.java b/tmp/c6965432-45b4-47b4-a4b2-d9b5cc52efb5_fixed.java
index b81eeca..41844b8 100644
--- a/tmp/c85f94ab-1164-4ae7-92ec-fc68eabf9d6f_buggy.java
+++ b/tmp/c6965432-45b4-47b4-a4b2-d9b5cc52efb5_fixed.java
@@ -1,78 +1,75 @@
 /**
  * Parse an octal string from a buffer.
  *
  * <p>Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.</p>
  *
  * <p>The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).</p>
  *
  * <p>To work-around some tar implementations that insert a
  * leading NUL this method returns 0 if it detects a leading NUL
  * since Commons Compress 1.4.</p>
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long    result = 0;
     int     end = offset + length;
     int     start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     boolean allNUL = true;
     for (int i = start; i < end; i++) {
         if (buffer[i] != 0) {
             allNUL = false;
             break;
         }
     }
     if (allNUL) {
         return 0L;
     }
 
     // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    while (start < end && buffer[start] == ' ') {
         start++;
-            } else {
-                break;
     }
+
+    // Check for leading NUL and return 0 if found
+    if (buffer[start] == 0) {
+        return 0L;
     }
 
     // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
+    if (!(buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
         throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));
     }
+
     // May have additional NUL or space
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
+    if (buffer[end - 2] == 0 || buffer[end - 2] == ' ') {
         end--;
     }
 
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
