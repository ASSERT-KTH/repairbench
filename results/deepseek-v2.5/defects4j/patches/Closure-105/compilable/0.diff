diff --git a/tmp/dcc73d59-5bcf-4c44-9189-7b20fd046b57_buggy.java b/tmp/a82e5d32-54ac-4256-a789-3a7ce7a6d7b0_fixed.java
index ef65dd9..6af3a02 100644
--- a/tmp/dcc73d59-5bcf-4c44-9189-7b20fd046b57_buggy.java
+++ b/tmp/a82e5d32-54ac-4256-a789-3a7ce7a6d7b0_fixed.java
@@ -1,92 +1,108 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
   int foldedSize = 0;
   Node elem = arrayNode.getFirstChild();
+  boolean shouldFold = true;
+
+  // Check if folding is beneficial
+  int originalSize = InlineCostEstimator.getCost(n);
+  int kJoinOverhead = "[].join()".length();
+  int potentialFoldedSize = kJoinOverhead + InlineCostEstimator.getCost(right);
+  while (elem != null) {
+    potentialFoldedSize += InlineCostEstimator.getCost(elem);
+    elem = elem.getNext();
+  }
+  potentialFoldedSize += joinString.length() * (arrayNode.getChildCount() - 1);
+
+  if (potentialFoldedSize >= originalSize) {
+    shouldFold = false;
+  }
+
+  if (shouldFold) {
+    elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
-    int originalSize = InlineCostEstimator.getCost(n);
+    int finalFoldedSize = foldedSize + kJoinOverhead + InlineCostEstimator.getCost(right);
+
+    if (finalFoldedSize < originalSize) {
       switch (arrayFoldedChildren.size()) {
         case 0:
           Node emptyStringNode = Node.newString("");
           parent.replaceChild(n, emptyStringNode);
           break;
 
         case 1:
           Node foldedStringNode = arrayFoldedChildren.remove(0);
           if (foldedSize > originalSize) {
             return;
           }
           arrayNode.detachChildren();
           if (foldedStringNode.getType() != Token.STRING) {
             // If the Node is not a string literal, ensure that
             // it is coerced to a string.
             Node replacement = new Node(Token.ADD,
                 Node.newString(""), foldedStringNode);
             foldedStringNode = replacement;
           }
           parent.replaceChild(n, foldedStringNode);
           break;
 
         default:
           // No folding could actually be performed.
           if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
             return;
           }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
-        }
           arrayNode.detachChildren();
           for (Node node : arrayFoldedChildren) {
             arrayNode.addChildToBack(node);
           }
           break;
       }
       t.getCompiler().reportCodeChange();
     }
+  }
+}
\ No newline at end of file
