diff --git a/tmp/715d7590-9141-454e-9e97-e9d5f18dd5b5_buggy.java b/tmp/4b8be6cf-2314-4c4b-b968-5693f1a0f8eb_fixed.java
index 4b163f6..548f218 100644
--- a/tmp/715d7590-9141-454e-9e97-e9d5f18dd5b5_buggy.java
+++ b/tmp/4b8be6cf-2314-4c4b-b968-5693f1a0f8eb_fixed.java
@@ -1,28 +1,38 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
+                // Fallback to using the read() method if skip returns 0
+                if (numToSkip > 0) {
+                    int bytesRead = input.read();
+                    if (bytesRead == -1) {
+                        // End of stream reached
                         break;
+                    } else {
+                        numToSkip -= 1;
                     }
+                }
+            } else {
                 numToSkip -= skipped;
             }
+        }
             
         return available - numToSkip;
     }
\ No newline at end of file
