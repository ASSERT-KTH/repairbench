diff --git a/tmp/1f0f90d5-619b-4baf-9c24-c27d1030ad60_buggy.java b/tmp/98db6ced-0f49-4b1b-bf53-2738e1873423_fixed.java
index 4b163f6..0149d8f 100644
--- a/tmp/1f0f90d5-619b-4baf-9c24-c27d1030ad60_buggy.java
+++ b/tmp/98db6ced-0f49-4b1b-bf53-2738e1873423_fixed.java
@@ -1,28 +1,34 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+ * the requested number of bytes has been skipped, this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+    long remaining = numToSkip;
+    while (remaining > 0) {
+        long skipped = input.skip(remaining);
         if (skipped == 0) {
+            // Fall back to using read() method
+            int bytesRead = input.read();
+            if (bytesRead == -1) {
+                // End of stream reached
                 break;
             }
-            numToSkip -= skipped;
+            skipped = 1; // One byte read
+        }
+        remaining -= skipped;
     }
     
-        return available - numToSkip;
+    return numToSkip - remaining;
 }
\ No newline at end of file
