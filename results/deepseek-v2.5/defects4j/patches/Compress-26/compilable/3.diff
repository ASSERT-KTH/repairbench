diff --git a/tmp/69bfc753-2cf9-4f14-875c-90554fe6dba4_buggy.java b/tmp/305b3fb1-c514-452f-80ac-bc600a74096b_fixed.java
index 4b163f6..6916992 100644
--- a/tmp/69bfc753-2cf9-4f14-875c-90554fe6dba4_buggy.java
+++ b/tmp/305b3fb1-c514-452f-80ac-bc600a74096b_fixed.java
@@ -1,28 +1,43 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+ * the requested number of bytes has been skipped, this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
+    long remaining = numToSkip;
+    long skipped = 0;
+
+    while (remaining > 0) {
+        long n = input.skip(remaining);
+        if (n == 0) {
+            // Fallback to using read() if skip() returns 0
+            int bytesRead = 0;
+            while (bytesRead < 1 && remaining > 0) {
+                int b = input.read();
+                if (b == -1) {
+                    // End of stream reached
+                    return skipped;
+                }
+                bytesRead++;
+                remaining--;
+            }
+            skipped += bytesRead;
+        } else {
+            remaining -= n;
+            skipped += n;
         }
-            numToSkip -= skipped;
     }
 
-        return available - numToSkip;
+    return skipped;
 }
\ No newline at end of file
