diff --git a/tmp/e30922ce-3f88-4a8a-a6ca-6b397fb9b888_buggy.java b/tmp/05e1c6da-5f25-47fc-8601-f20ea5196f4a_fixed.java
index 4b163f6..d12b82f 100644
--- a/tmp/e30922ce-3f88-4a8a-a6ca-6b397fb9b888_buggy.java
+++ b/tmp/05e1c6da-5f25-47fc-8601-f20ea5196f4a_fixed.java
@@ -1,28 +1,31 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+ * the requested number of bytes has been skipped, this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+    long remaining = numToSkip;
+    while (remaining > 0) {
+        long skipped = input.skip(remaining);
         if (skipped == 0) {
-                break;
+            // Fall back to using read() method
+            if (input.read() == -1) {
+                break; // End of stream reached
             }
-            numToSkip -= skipped;
+            skipped = 1;
         }
-            
-        return available - numToSkip;
+        remaining -= skipped;
+    }
+    return numToSkip - remaining;
 }
\ No newline at end of file
