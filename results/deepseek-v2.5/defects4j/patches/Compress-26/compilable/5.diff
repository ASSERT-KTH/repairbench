diff --git a/tmp/8734b591-f4d9-41be-b57d-663ac413af90_buggy.java b/tmp/cc57b855-974e-4ded-bad0-369322a23271_fixed.java
index 4b163f6..6382124 100644
--- a/tmp/8734b591-f4d9-41be-b57d-663ac413af90_buggy.java
+++ b/tmp/cc57b855-974e-4ded-bad0-369322a23271_fixed.java
@@ -1,28 +1,34 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+ * the requested number of bytes has been skipped, this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+    long remaining = numToSkip;
+    while (remaining > 0) {
+        long skipped = input.skip(remaining);
         if (skipped == 0) {
+            // Fallback to using read() if skip() returns 0
+            if (input.read() == -1) {
+                // End of stream reached
                 break;
+            } else {
+                // Read one byte
+                skipped = 1;
             }
-            numToSkip -= skipped;
         }
-            
-        return available - numToSkip;
+        remaining -= skipped;
+    }
+    return numToSkip - remaining;
 }
\ No newline at end of file
