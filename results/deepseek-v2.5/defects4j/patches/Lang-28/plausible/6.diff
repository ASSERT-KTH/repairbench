diff --git a/tmp/7fd9ab8d-f4fd-4fc1-a90d-68ae29514ae0_buggy.java b/tmp/146cbb38-b643-4765-b97b-6003b7df2fec_fixed.java
index 4bbd561..8343b0e 100644
--- a/tmp/7fd9ab8d-f4fd-4fc1-a90d-68ae29514ae0_buggy.java
+++ b/tmp/146cbb38-b643-4765-b97b-6003b7df2fec_fixed.java
@@ -1,37 +1,55 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Protect from ArrayIndexOutOfBounds
+        if (index < 0 || index >= input.length() || input.charAt(index) != '&' || (index + 1 >= input.length()) || input.charAt(index + 1) != '#') {
+            return 0;
+        }
+
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end == input.length()) {
+            return 0; // No matching ';' found
+        }
+
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        if (entityValue > 0x10FFFF) {
+            return 0; // Invalid Unicode code point
+        }
+
+        if (entityValue >= 0x10000) {
+            // Handle supplementary characters (surrogate pairs)
+            char highSurrogate = (char) ((entityValue - 0x10000) / 0x400 + 0xD800);
+            char lowSurrogate = (char) ((entityValue - 0x10000) % 0x400 + 0xDC00);
+            out.write(highSurrogate);
+            out.write(lowSurrogate);
+        } else {
             out.write(entityValue);
+        }
+
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
\ No newline at end of file
-        return 0;
-    }
