diff --git a/tmp/79265e21-afe0-40eb-bf73-6a2398fd6e91_buggy.java b/tmp/33895a3c-110f-490a-a6f2-f21f30c99966_fixed.java
index 4bbd561..9b0e396 100644
--- a/tmp/79265e21-afe0-40eb-bf73-6a2398fd6e91_buggy.java
+++ b/tmp/33895a3c-110f-490a-a6f2-f21f30c99966_fixed.java
@@ -1,37 +1,56 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Protect from ArrayIndexOutOfBounds
+        if (index < 0 || index >= input.length()) {
+            return 0;
+        }
+
+        // Check for numeric entity
+        if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+            // Check if the format is hexadecimal
+            if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Find the end of the numeric entity
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end == input.length()) {
+                return 0; // No ';' found
+            }
+
             int entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
+            // Handle supplementary characters
+            if (entityValue > 0xFFFF) {
+                // Convert to surrogate pair
+                entityValue -= 0x10000;
+                out.write(0xD800 | (entityValue >> 10));
+                out.write(0xDC00 | (entityValue & 0x3FF));
+            } else {
                 out.write(entityValue);
+            }
+
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
