diff --git a/tmp/9b954294-7880-4a97-a37c-2dd3fdcf0d82_buggy.java b/tmp/8bad0fe0-4f75-4821-a2d8-89030ab871ac_fixed.java
index 4bbd561..d4cbb99 100644
--- a/tmp/9b954294-7880-4a97-a37c-2dd3fdcf0d82_buggy.java
+++ b/tmp/8bad0fe0-4f75-4821-a2d8-89030ab871ac_fixed.java
@@ -1,37 +1,54 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Protect from ArrayIndexOutOfBounds
+        if (index < 0 || index >= input.length()) {
+            return 0;
+        }
+
+        if(input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start < input.length()) {
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
                 }
+            }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while(end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end < input.length() && input.charAt(end) == ';') {
                 int entityValue;
                 try {
                     if(isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
-            } catch(NumberFormatException nfe) {
-                return 0;
-            }
 
+                    // Handle supplementary characters
+                    if (entityValue > 0xFFFF) {
+                        entityValue -= 0x10000;
+                        char highSurrogate = (char) ((entityValue >>> 10) + 0xD800);
+                        char lowSurrogate = (char) ((entityValue & 0x3FF) + 0xDC00);
+                        out.write(highSurrogate);
+                        out.write(lowSurrogate);
+                    } else {
                         out.write(entityValue);
+                    }
                     return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                } catch(NumberFormatException nfe) {
+                    return 0;
+                }
+            }
         }
         return 0;
     }
\ No newline at end of file
