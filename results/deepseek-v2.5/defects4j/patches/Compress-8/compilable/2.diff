diff --git a/tmp/8f91c13e-13dc-48b6-b5c8-4074567ff3f0_buggy.java b/tmp/144b329a-5338-4577-aeaa-4a820c5d31ff_fixed.java
index e087f95..6caeb92 100644
--- a/tmp/8f91c13e-13dc-48b6-b5c8-4074567ff3f0_buggy.java
+++ b/tmp/144b329a-5338-4577-aeaa-4a820c5d31ff_fixed.java
@@ -1,53 +1,60 @@
 /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected, or if the length is less than 2.
      */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Input length must be at least 2 bytes.");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean foundTrailingSpaceOrNul = false;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == 0 || currentByte == ' ') {
+            foundTrailingSpaceOrNul = true;
             if (stillPadding) {
                 continue;
-            }
-                if (currentByte == (byte) ' ') {
+            } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+        // Skip leading spaces and zeros
+        if (stillPadding && (currentByte == ' ' || currentByte == '0')) {
+            continue;
+        }
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Check for valid octal digit
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // Ensure we found a trailing space or NUL
+    if (!foundTrailingSpaceOrNul) {
+        throw new IllegalArgumentException("Missing trailing space or NUL.");
     }
 
     return result;
 }
\ No newline at end of file
