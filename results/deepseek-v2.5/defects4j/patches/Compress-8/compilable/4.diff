diff --git a/tmp/42e8561c-0f69-4115-9f19-250de761fca0_buggy.java b/tmp/3ad2f689-e64b-46e6-8960-685d7b277e32_fixed.java
index e087f95..243b5c7 100644
--- a/tmp/42e8561c-0f69-4115-9f19-250de761fca0_buggy.java
+++ b/tmp/3ad2f689-e64b-46e6-8960-685d7b277e32_fixed.java
@@ -1,53 +1,61 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // Validate the length of the buffer
+    if (length < 2) {
+        throw new IllegalArgumentException("The buffer must be at least 2 bytes long.");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean validOctalFound = false;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
             break;
         }
 
-        // Skip leading spaces
+        // Skip leading spaces and zeros
         if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
             if (currentByte == (byte) ' ') {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        // Check if the current byte is a valid octal digit
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
+        validOctalFound = true;
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // Ensure that at least one valid octal digit was found
+    if (!validOctalFound) {
+        throw new IllegalArgumentException("The buffer must contain at least one valid octal digit.");
     }
 
     return result;
 }
\ No newline at end of file
