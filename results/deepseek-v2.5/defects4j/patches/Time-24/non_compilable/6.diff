diff --git a/tmp/0eb9e321-2f2d-4183-82ea-7a8d6a24e620_buggy.java b/tmp/81d13274-7922-40e2-8506-d75a035221b7_fixed.java
index 99d6a44..1a6d71a 100644
--- a/tmp/0eb9e321-2f2d-4183-82ea-7a8d6a24e620_buggy.java
+++ b/tmp/81d13274-7922-40e2-8506-d75a035221b7_fixed.java
@@ -1,58 +1,60 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
         // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
+    // Handle week-year fields correctly
+    for (int i = 0; i < count; i++) {
+        DateTimeFieldType fieldType = savedFields[i].iField.getType();
+        if (fieldType == DateTimeFieldType.weekyear()) {
+            int weekyear = savedFields[i].get();
+            int year = savedFields[i].iField.get(millis);
+            if (weekyear != year) {
+                millis = savedFields[i].iField.set(millis, weekyear);
+            }
+        }
+    }
+
     return millis;
 }
\ No newline at end of file
