diff --git a/tmp/28a979d8-a30a-480f-b740-cd5e7e92c919_buggy.java b/tmp/f95e08cc-3535-427c-b265-13be5f911057_fixed.java
index f650982..9757f03 100644
--- a/tmp/28a979d8-a30a-480f-b740-cd5e7e92c919_buggy.java
+++ b/tmp/f95e08cc-3535-427c-b265-13be5f911057_fixed.java
@@ -1,42 +1,48 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
 //    System.err.println("COMPARING: " +
 //        (l == null ? "null" : l.getClass().getName()) + " " +
 //        (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    if (l instanceof Collection && r instanceof Collection) {
+        Collection<?> leftCollection = (Collection<?>) l;
+        Collection<?> rightCollection = (Collection<?>) r;
+        return leftCollection.size() == rightCollection.size() && leftCollection.containsAll(rightCollection);
+    }
+
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
     return equal(l, r);
 }
\ No newline at end of file
