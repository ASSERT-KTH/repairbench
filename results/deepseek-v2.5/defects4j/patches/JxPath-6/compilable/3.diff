diff --git a/tmp/0ee342ab-ab75-4f57-975c-3c389eb6c9bf_buggy.java b/tmp/0d12e9b4-61ea-4fb4-808e-307c6de2dcb0_fixed.java
index f650982..527d1c8 100644
--- a/tmp/0ee342ab-ab75-4f57-975c-3c389eb6c9bf_buggy.java
+++ b/tmp/0d12e9b4-61ea-4fb4-808e-307c6de2dcb0_fixed.java
@@ -1,42 +1,62 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    if (l instanceof Collection && r instanceof Collection) {
+        return equal((Collection) l, (Collection) r);
+    }
+
     if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        return contains((Collection) l, r);
     }
 
     if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        return contains((Collection) r, l);
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
     return equal(l, r);
 }
+
+private boolean equal(Collection l, Collection r) {
+    if (l.size() != r.size()) {
+        return false;
+    }
+    Iterator lIterator = l.iterator();
+    Iterator rIterator = r.iterator();
+    while (lIterator.hasNext() && rIterator.hasNext()) {
+        if (!equal(lIterator.next(), rIterator.next())) {
+            return false;
+        }
+    }
+    return true;
+}
+
+private boolean contains(Collection collection, Object element) {
+    for (Object obj : collection) {
+        if (equal(obj, element)) {
+            return true;
+        }
+    }
+    return false;
+}
\ No newline at end of file
