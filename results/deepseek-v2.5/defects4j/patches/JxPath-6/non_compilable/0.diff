diff --git a/tmp/5659cf43-f412-45e3-8b6d-24417f86616b_buggy.java b/tmp/61fdbe7f-eb56-4e08-af40-2e406ffc8503_fixed.java
index f650982..c16b843 100644
--- a/tmp/5659cf43-f412-45e3-8b6d-24417f86616b_buggy.java
+++ b/tmp/61fdbe7f-eb56-4e08-af40-2e406ffc8503_fixed.java
@@ -1,42 +1,40 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+    if (l instanceof Iterator && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+    if (!(l instanceof Iterator) && r instanceof Iterator) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+
+    // Ensure both l and r are iterators if either is an iterator
+    Iterator lIterator = l instanceof Iterator ? (Iterator) l : Collections.singleton(l).iterator();
+    Iterator rIterator = r instanceof Iterator ? (Iterator) r : Collections.singleton(r).iterator();
+
+    return findMatch(lIterator, rIterator);
 }
\ No newline at end of file
