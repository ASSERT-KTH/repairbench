diff --git a/tmp/8041a7f3-b1a0-410f-bf72-3d13e28373ab_buggy.java b/tmp/beff067f-8e0a-4de6-89c9-4561ca0d979e_fixed.java
index eea9e73..65446fa 100644
--- a/tmp/8041a7f3-b1a0-410f-bf72-3d13e28373ab_buggy.java
+++ b/tmp/beff067f-8e0a-4de6-89c9-4561ca0d979e_fixed.java
@@ -1,41 +1,60 @@
 /**
  * <p>Checks if the CharSequence contains any character in the given
  * set of characters.</p>
  *
  * <p>A <code>null</code> CharSequence will return <code>false</code>.
  * A <code>null</code> or zero length search array will return <code>false</code>.</p>
  *
  * <pre>
  * StringUtils.containsAny(null, *)                = false
  * StringUtils.containsAny("", *)                  = false
  * StringUtils.containsAny(*, null)                = false
  * StringUtils.containsAny(*, [])                  = false
  * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
  * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
  * StringUtils.containsAny("aba", ['z'])           = false
  * </pre>
  *
  * @param cs  the CharSequence to check, may be null
  * @param searchChars  the chars to search for, may be null
  * @return the <code>true</code> if any of the chars are found,
  * <code>false</code> if no match or null input
  * @since 2.4
  */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
     for (int i = 0; i < csLength; i++) {
         char ch = cs.charAt(i);
+        // Check if the character is a high surrogate
+        if (Character.isHighSurrogate(ch)) {
+            // If it is a high surrogate, check the next character to form a supplementary character
+            if (i + 1 < csLength) {
+                char nextCh = cs.charAt(i + 1);
+                // Check if the next character is a low surrogate
+                if (Character.isLowSurrogate(nextCh)) {
+                    // Form the supplementary character and check if it is in the searchChars
+                    int codePoint = Character.toCodePoint(ch, nextCh);
+                    for (int j = 0; j < searchLength; j++) {
+                        if (searchChars[j] == codePoint) {
+                            return true;
+                        }
+                    }
+                    // Skip the next character as it is part of the supplementary character
+                    i++;
+                    continue;
+                }
+            }
+        }
+        // Check if the single character is in the searchChars
         for (int j = 0; j < searchLength; j++) {
             if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
                 return true;
             }
         }
     }
     return false;
 }
\ No newline at end of file
