diff --git a/tmp/cff6bbef-d33a-4b61-a899-d98735ffd495_buggy.java b/tmp/37501095-b5e6-45ef-a7b3-cddd4074ab30_fixed.java
index eea9e73..350f2e4 100644
--- a/tmp/cff6bbef-d33a-4b61-a899-d98735ffd495_buggy.java
+++ b/tmp/37501095-b5e6-45ef-a7b3-cddd4074ab30_fixed.java
@@ -1,41 +1,33 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
+    for (int i = 0, j = 0; i < csLength; i++, j = 0) {
         char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
+        while (j < searchLength) {
             if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+                if (Character.isHighSurrogate(ch)) {
+                    // Check if the next character forms a valid surrogate pair
+                    if (i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {
+                        // Check if the next character in searchChars forms a valid surrogate pair
+                        if (j + 1 < searchLength && Character.isLowSurrogate(searchChars[j + 1])) {
+                            if (searchChars[j + 1] == cs.charAt(i + 1)) {
                                 return true;
                             }
                         }
                     }
+                } else {
+                    return true;
+                }
+            }
+            j++;
+        }
+        // Skip the next character if it was part of a surrogate pair
+        if (Character.isHighSurrogate(ch) && i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {
+            i++;
+        }
+    }
     return false;
 }
\ No newline at end of file
