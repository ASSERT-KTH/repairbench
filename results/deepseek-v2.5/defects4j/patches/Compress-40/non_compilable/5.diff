diff --git a/tmp/eb1ca48f-41aa-4bde-82bd-5469fe9936be_buggy.java b/tmp/9869ea21-07c2-4b46-91af-d3ecc3262a81_fixed.java
index 7116384..98d90ef 100644
--- a/tmp/eb1ca48f-41aa-4bde-82bd-5469fe9936be_buggy.java
+++ b/tmp/9869ea21-07c2-4b46-91af-d3ecc3262a81_fixed.java
@@ -1,39 +1,27 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
-    public long readBits(final int count) throws IOException {
-        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
+private void traverse(Node node) {
+  // The goal here is to avoid retraversing
+  // the entire AST to catch newly created opportunities.
+  // So we track whether a "unit of code" has changed,
+  // and revisit immediately.
+  if (!shouldVisit(node)) {
+    return;
   }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
-            }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
-            }
-            bitsCachedSize += 8;
-        }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+  int visits = 0;
+  do {
+    Node c = node.getFirstChild();
+    while (c != null) {
+      traverse(c);
+      Node next = c.getNext();
+      c = next;
     }
-            bitsCachedSize -= count;
-        return bitsOut;
+
+    visit(node);
+    visits++;
+
+    Preconditions.checkState(visits < 10000, "too many iterations");
+  } while (shouldRetraverse(node));
+
+  // Ensure we exit the node after all children have been processed
+  exitNode(node);
 }
\ No newline at end of file
