diff --git a/tmp/c1e5301d-06ab-418b-a8b0-7b3df8ab0dc6_buggy.java b/tmp/c36def22-8f24-4daa-a925-92655435f693_fixed.java
index e69de29..0725266 100644
--- a/tmp/c1e5301d-06ab-418b-a8b0-7b3df8ab0dc6_buggy.java
+++ b/tmp/c36def22-8f24-4daa-a925-92655435f693_fixed.java
@@ -0,0 +1,56 @@
+@Override
+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+  setResolvedTypeInternal(this);
+
+  call = (ArrowType) safeResolve(call, t, scope);
+  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
+
+  // Handle typeOfThis correctly if it is a UnionType
+  JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+  if (resolvedTypeOfThis instanceof UnionType) {
+    UnionType unionTypeOfThis = (UnionType) resolvedTypeOfThis;
+    // Ensure all types in the union are object types
+    boolean allObjectTypes = true;
+    for (JSType type : unionTypeOfThis.getAlternates()) {
+      if (!(type instanceof ObjectType)) {
+        allObjectTypes = false;
+        break;
+      }
+    }
+    if (allObjectTypes) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+      // Handle the case where not all types in the union are object types
+      // This should be handled further upstream as a type error
+      // For now, we just set typeOfThis to the resolved type
+      typeOfThis = resolvedTypeOfThis;
+    }
+  } else if (resolvedTypeOfThis instanceof ObjectType) {
+    typeOfThis = (ObjectType) resolvedTypeOfThis;
+  } else {
+    // Handle the case where the resolved type is not an object type
+    // This should be handled further upstream as a type error
+    // For now, we just set typeOfThis to the resolved type
+    typeOfThis = resolvedTypeOfThis;
+  }
+
+  boolean changed = false;
+  ImmutableList.Builder<ObjectType> resolvedInterfaces =
+      ImmutableList.builder();
+  for (ObjectType iface : implementedInterfaces) {
+    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+    resolvedInterfaces.add(resolvedIface);
+    changed |= (resolvedIface != iface);
+  }
+  if (changed) {
+    implementedInterfaces = resolvedInterfaces.build();
+  }
+
+  if (subTypes != null) {
+    for (int i = 0; i < subTypes.size(); i++) {
+      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+    }
+  }
+
+  return super.resolveInternal(t, scope);
+}
\ No newline at end of file
