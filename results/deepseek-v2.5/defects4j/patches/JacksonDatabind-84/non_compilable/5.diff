diff --git a/tmp/9d8ff2a2-d944-4597-b47d-38f4ad7cce3b_buggy.java b/tmp/776d8c8c-a521-4904-a0d1-be80271f6ae1_fixed.java
index e69de29..f4b98e9 100644
--- a/tmp/9d8ff2a2-d944-4597-b47d-38f4ad7cce3b_buggy.java
+++ b/tmp/776d8c8c-a521-4904-a0d1-be80271f6ae1_fixed.java
@@ -0,0 +1,48 @@
+@Override
+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+  setResolvedTypeInternal(this);
+
+  call = (ArrowType) safeResolve(call, t, scope);
+  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
+
+  // Warning about typeOfThis if it doesn't resolve to an ObjectType
+  // is handled further upstream.
+  // TODO(nicksantos): Handle this correctly if we have a UnionType.
+  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+
+  // Handle UnionType for typeOfThis
+  if (typeOfThis instanceof UnionType) {
+    UnionType unionType = (UnionType) typeOfThis;
+    ImmutableList.Builder<JSType> objectTypes = ImmutableList.builder();
+    for (JSType member : unionType.getAlternates()) {
+      if (member instanceof ObjectType) {
+        objectTypes.add(member);
+      }
+    }
+    if (objectTypes.build().isEmpty()) {
+      // If no object types are found, throw an appropriate exception or handle it as needed.
+      throw new IllegalArgumentException("@this type of a function must be an object");
+    }
+    typeOfThis = objectTypes.build().size() == 1 ? objectTypes.build().get(0) : unionType.fromTypeList(objectTypes.build());
+  }
+
+  boolean changed = false;
+  ImmutableList.Builder<ObjectType> resolvedInterfaces =
+      ImmutableList.builder();
+  for (ObjectType iface : implementedInterfaces) {
+    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+    resolvedInterfaces.add(resolvedIface);
+    changed |= (resolvedIface != iface);
+  }
+  if (changed) {
+    implementedInterfaces = resolvedInterfaces.build();
+  }
+
+  if (subTypes != null) {
+    for (int i = 0; i < subTypes.size(); i++) {
+      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+    }
+  }
+
+  return super.resolveInternal(t, scope);
+}
\ No newline at end of file
