diff --git a/tmp/7ef43f5b-449c-4a0e-b34d-ef61fedf0828_buggy.java b/tmp/8a5fa65b-7e0b-4235-8d49-d850f2e3bc69_fixed.java
index e69de29..aa0c722 100644
--- a/tmp/7ef43f5b-449c-4a0e-b34d-ef61fedf0828_buggy.java
+++ b/tmp/8a5fa65b-7e0b-4235-8d49-d850f2e3bc69_fixed.java
@@ -0,0 +1,52 @@
+@Override
+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+    setResolvedTypeInternal(this);
+
+    call = (ArrowType) safeResolve(call, t, scope);
+    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
+
+    // Warning about typeOfThis if it doesn't resolve to an ObjectType
+    // is handled further upstream.
+    // TODO(nicksantos): Handle this correctly if we have a UnionType.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+
+    if (resolvedTypeOfThis instanceof UnionType) {
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        boolean containsObjectType = false;
+
+        for (JSType alternative : unionType.getAlternates()) {
+            if (alternative instanceof ObjectType) {
+                containsObjectType = true;
+                break;
+            }
+        }
+
+        if (!containsObjectType) {
+            t.warning("The @this type of a function must be an object", sourceName, lineno, null, 0);
+        }
+    } else if (!(resolvedTypeOfThis instanceof ObjectType)) {
+        t.warning("The @this type of a function must be an object", sourceName, lineno, null, 0);
+    } else {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    }
+
+    boolean changed = false;
+    ImmutableList.Builder<ObjectType> resolvedInterfaces =
+        ImmutableList.builder();
+    for (ObjectType iface : implementedInterfaces) {
+        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+        resolvedInterfaces.add(resolvedIface);
+        changed |= (resolvedIface != iface);
+    }
+    if (changed) {
+        implementedInterfaces = resolvedInterfaces.build();
+    }
+
+    if (subTypes != null) {
+        for (int i = 0; i < subTypes.size(); i++) {
+            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+        }
+    }
+
+    return super.resolveInternal(t, scope);
+}
\ No newline at end of file
