diff --git a/tmp/d0b620d3-9d70-437b-8085-7a710934164e_buggy.java b/tmp/858c1742-7435-4ac0-853a-a9573e43fb81_fixed.java
index e69de29..be6df98 100644
--- a/tmp/d0b620d3-9d70-437b-8085-7a710934164e_buggy.java
+++ b/tmp/858c1742-7435-4ac0-853a-a9573e43fb81_fixed.java
@@ -0,0 +1,46 @@
+@Override
+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+    setResolvedTypeInternal(this);
+
+    call = (ArrowType) safeResolve(call, t, scope);
+    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
+
+    // Handle typeOfThis correctly if it is a UnionType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        ImmutableList<JSType> alternates = unionType.getAlternates();
+        for (JSType alternate : alternates) {
+            if (!(alternate instanceof ObjectType)) {
+                t.error("@this type of a function must be an object", getSourceFile(), getLineno(), getCharno());
+                break;
+            }
+        }
+        // If all alternates are ObjectType, we can safely cast
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+        t.error("@this type of a function must be an object", getSourceFile(), getLineno(), getCharno());
+    }
+
+    boolean changed = false;
+    ImmutableList.Builder<ObjectType> resolvedInterfaces =
+        ImmutableList.builder();
+    for (ObjectType iface : implementedInterfaces) {
+        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+        resolvedInterfaces.add(resolvedIface);
+        changed |= (resolvedIface != iface);
+    }
+    if (changed) {
+        implementedInterfaces = resolvedInterfaces.build();
+    }
+
+    if (subTypes != null) {
+        for (int i = 0; i < subTypes.size(); i++) {
+            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+        }
+    }
+
+    return super.resolveInternal(t, scope);
+}
\ No newline at end of file
