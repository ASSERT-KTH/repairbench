diff --git a/tmp/a3c69098-e16f-479a-b863-66a74bb4f57a_buggy.java b/tmp/b0f480f6-3dbf-49c3-b9ed-6467ee3546b1_fixed.java
index e69de29..d2ac350 100644
--- a/tmp/a3c69098-e16f-479a-b863-66a74bb4f57a_buggy.java
+++ b/tmp/b0f480f6-3dbf-49c3-b9ed-6467ee3546b1_fixed.java
@@ -0,0 +1,55 @@
+@Override
+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+    setResolvedTypeInternal(this);
+
+    call = (ArrowType) safeResolve(call, t, scope);
+    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
+
+    // Handle typeOfThis correctly if it's a UnionType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        boolean allObjects = true;
+        for (JSType alt : unionType.getAlternates()) {
+            if (!(alt instanceof ObjectType)) {
+                allObjects = false;
+                break;
+            }
+        }
+        if (allObjects) {
+            typeOfThis = unionType;
+        } else {
+            // Handle the case where not all alternates are ObjectType
+            // This could involve error reporting or other logic depending on the context
+            // For now, we just set it to an unknown ObjectType
+            typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+        }
+    } else if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+        // Handle the case where resolvedTypeOfThis is not an ObjectType or UnionType
+        // This could involve error reporting or other logic depending on the context
+        // For now, we just set it to an unknown ObjectType
+        typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+    }
+
+    boolean changed = false;
+    ImmutableList.Builder<ObjectType> resolvedInterfaces =
+        ImmutableList.builder();
+    for (ObjectType iface : implementedInterfaces) {
+        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+        resolvedInterfaces.add(resolvedIface);
+        changed |= (resolvedIface != iface);
+    }
+    if (changed) {
+        implementedInterfaces = resolvedInterfaces.build();
+    }
+
+    if (subTypes != null) {
+        for (int i = 0; i < subTypes.size(); i++) {
+            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+        }
+    }
+
+    return super.resolveInternal(t, scope);
+}
\ No newline at end of file
