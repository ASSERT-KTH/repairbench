diff --git a/tmp/cfee01be-cecb-40cb-8270-69efc7e2f3dc_buggy.java b/tmp/e825045d-7ab4-4008-b5f7-3705d5a3a150_fixed.java
index e69de29..0e54ebc 100644
--- a/tmp/cfee01be-cecb-40cb-8270-69efc7e2f3dc_buggy.java
+++ b/tmp/e825045d-7ab4-4008-b5f7-3705d5a3a150_fixed.java
@@ -0,0 +1,43 @@
+  @Override
+  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+    setResolvedTypeInternal(this);
+
+    call = (ArrowType) safeResolve(call, t, scope);
+    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
+
+    // Warning about typeOfThis if it doesn't resolve to an ObjectType
+    // is handled further upstream.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+      // Handle UnionType by checking if it contains any ObjectType
+      for (JSType alt : ((UnionType) resolvedTypeOfThis).getAlternates()) {
+        if (alt instanceof ObjectType) {
+          typeOfThis = (ObjectType) alt;
+          break;
+        }
+      }
+      // If no ObjectType is found, leave typeOfThis unchanged and let the upstream handle the warning
+    }
+
+    boolean changed = false;
+    ImmutableList.Builder<ObjectType> resolvedInterfaces =
+        ImmutableList.builder();
+    for (ObjectType iface : implementedInterfaces) {
+      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+      resolvedInterfaces.add(resolvedIface);
+      changed |= (resolvedIface != iface);
+    }
+    if (changed) {
+      implementedInterfaces = resolvedInterfaces.build();
+    }
+
+    if (subTypes != null) {
+      for (int i = 0; i < subTypes.size(); i++) {
+        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+      }
+    }
+
+    return super.resolveInternal(t, scope);
+  }
\ No newline at end of file
