diff --git a/tmp/d08317d2-72e1-471e-a26d-ed67951d922e_buggy.java b/tmp/c485047a-81c7-4340-a3c6-66c87d0e134b_fixed.java
index e69de29..a5a277e 100644
--- a/tmp/d08317d2-72e1-471e-a26d-ed67951d922e_buggy.java
+++ b/tmp/c485047a-81c7-4340-a3c6-66c87d0e134b_fixed.java
@@ -0,0 +1,44 @@
+@Override
+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+    setResolvedTypeInternal(this);
+
+    call = (ArrowType) safeResolve(call, t, scope);
+    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
+
+    // Warning about typeOfThis if it doesn't resolve to an ObjectType
+    // is handled further upstream.
+    // TODO(nicksantos): Handle this correctly if we have a UnionType.
+    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+
+    // Handle UnionType for typeOfThis
+    if (typeOfThis instanceof UnionType) {
+        UnionType unionType = (UnionType) typeOfThis;
+        JSType resolvedType = unionType.getGreatestSubtypeWithProperty("constructor");
+        if (resolvedType instanceof ObjectType) {
+            typeOfThis = (ObjectType) resolvedType;
+        } else {
+            // If no valid ObjectType is found, set typeOfThis to null or handle error appropriately
+            typeOfThis = null; // or throw an exception or log an error
+        }
+    }
+
+    boolean changed = false;
+    ImmutableList.Builder<ObjectType> resolvedInterfaces =
+        ImmutableList.builder();
+    for (ObjectType iface : implementedInterfaces) {
+        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+        resolvedInterfaces.add(resolvedIface);
+        changed |= (resolvedIface != iface);
+    }
+    if (changed) {
+      implementedInterfaces = resolvedInterfaces.build();
+    }
+
+    if (subTypes != null) {
+        for (int i = 0; i < subTypes.size(); i++) {
+            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+        }
+    }
+
+    return super.resolveInternal(t, scope);
+}
\ No newline at end of file
