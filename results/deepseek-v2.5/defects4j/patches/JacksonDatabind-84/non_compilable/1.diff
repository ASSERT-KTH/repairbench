diff --git a/tmp/d3624f25-f90d-4b9e-999c-6f8622266dfd_buggy.java b/tmp/9520fee4-032c-4aa1-ac98-bff2b8c9e186_fixed.java
index e69de29..16fa082 100644
--- a/tmp/d3624f25-f90d-4b9e-999c-6f8622266dfd_buggy.java
+++ b/tmp/9520fee4-032c-4aa1-ac98-bff2b8c9e186_fixed.java
@@ -0,0 +1,35 @@
+@Override
+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+    setResolvedTypeInternal(this);
+
+    call = (ArrowType) safeResolve(call, t, scope);
+    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
+
+    // Resolve typeOfThis but do not cast it to ObjectType if it is a UnionType
+    typeOfThis = (JSType) safeResolve(typeOfThis, t, scope);
+
+    boolean changed = false;
+    ImmutableList.Builder<ObjectType> resolvedInterfaces =
+        ImmutableList.builder();
+    for (ObjectType iface : implementedInterfaces) {
+        JSType resolvedIface = iface.resolve(t, scope);
+        if (resolvedIface instanceof ObjectType) {
+            resolvedInterfaces.add((ObjectType) resolvedIface);
+        } else {
+            // Handle the case where resolvedIface is not an ObjectType
+            // This could be logged or handled in some other way
+        }
+        changed |= (resolvedIface != iface);
+    }
+    if (changed) {
+        implementedInterfaces = resolvedInterfaces.build();
+    }
+
+    if (subTypes != null) {
+        for (int i = 0; i < subTypes.size(); i++) {
+            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+        }
+    }
+
+    return super.resolveInternal(t, scope);
+}
\ No newline at end of file
