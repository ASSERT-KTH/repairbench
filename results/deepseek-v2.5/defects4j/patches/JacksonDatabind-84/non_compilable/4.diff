diff --git a/tmp/4afb8116-780d-4791-9349-45e80d6e5528_buggy.java b/tmp/2f9ecfd3-2f26-4d80-9e22-78a87b1867ac_fixed.java
index e69de29..ade02b3 100644
--- a/tmp/4afb8116-780d-4791-9349-45e80d6e5528_buggy.java
+++ b/tmp/2f9ecfd3-2f26-4d80-9e22-78a87b1867ac_fixed.java
@@ -0,0 +1,41 @@
+@Override
+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+    setResolvedTypeInternal(this);
+
+    call = (ArrowType) safeResolve(call, t, scope);
+    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
+
+    // Warning about typeOfThis if it doesn't resolve to an ObjectType
+    // is handled further upstream.
+    // TODO(nicksantos): Handle this correctly if we have a UnionType.
+    typeOfThis = safeResolve(typeOfThis, t, scope);
+    if (typeOfThis instanceof UnionType) {
+        typeOfThis = typeOfThis.restrictByNotNullOrUndefined();
+    }
+    if (!(typeOfThis instanceof ObjectType)) {
+        t.warning(JSError.make(sourceName, lineno, charno, CheckLevel.WARNING,
+                "@this type of a function must be an object", "Actual type: " + typeOfThis.toString()));
+    } else {
+        typeOfThis = (ObjectType) typeOfThis;
+    }
+
+    boolean changed = false;
+    ImmutableList.Builder<ObjectType> resolvedInterfaces =
+            ImmutableList.builder();
+    for (ObjectType iface : implementedInterfaces) {
+        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+        resolvedInterfaces.add(resolvedIface);
+        changed |= (resolvedIface != iface);
+    }
+    if (changed) {
+        implementedInterfaces = resolvedInterfaces.build();
+    }
+
+    if (subTypes != null) {
+        for (int i = 0; i < subTypes.size(); i++) {
+            subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+        }
+    }
+
+    return super.resolveInternal(t, scope);
+}
\ No newline at end of file
