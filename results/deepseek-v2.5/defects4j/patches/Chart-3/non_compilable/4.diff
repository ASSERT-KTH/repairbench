diff --git a/tmp/684d3e51-3c0a-4fa6-bb23-bcee4ee9aaa0_buggy.java b/tmp/b6f42460-8830-46cb-bf1a-1caa3f377d55_fixed.java
index 388771b..f2cfad6 100644
--- a/tmp/684d3e51-3c0a-4fa6-bb23-bcee4ee9aaa0_buggy.java
+++ b/tmp/b6f42460-8830-46cb-bf1a-1caa3f377d55_fixed.java
@@ -1,37 +1,36 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
-        TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
+        TimeSeries copy = new TimeSeries("Copy of " + this.getName());
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
         return copy;
     }
\ No newline at end of file
