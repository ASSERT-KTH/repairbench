diff --git a/tmp/272571a5-5e87-4e27-bc52-308d25062a34_buggy.java b/tmp/b963666b-b0c3-4c4a-931a-f6d5f9e143d2_fixed.java
index 388771b..718402d 100644
--- a/tmp/272571a5-5e87-4e27-bc52-308d25062a34_buggy.java
+++ b/tmp/b963666b-b0c3-4c4a-931a-f6d5f9e143d2_fixed.java
@@ -1,37 +1,65 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
+        
+        // Recalculate the min and max Y values for the new subset
+        copy.recalculateMinMaxY();
+        
         return copy;
     }
+
+    /**
+     * Recalculates the min and max Y values for the series.
+     */
+    private void recalculateMinMaxY() {
+        double minY = Double.NaN;
+        double maxY = Double.NaN;
+        for (int i = 0; i < this.data.size(); i++) {
+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);
+            Number y = item.getValue();
+            if (y != null) {
+                double yy = y.doubleValue();
+                if (Double.isNaN(minY) || yy < minY) {
+                    minY = yy;
+                }
+                if (Double.isNaN(maxY) || yy > maxY) {
+                    maxY = yy;
+                }
+            }
+        }
+        // Update the min and max Y values
+        this.minY = minY;
+        this.maxY = maxY;
+    }
\ No newline at end of file
