diff --git a/tmp/4cb18b98-9ace-4abc-870e-d47d98875154_buggy.java b/tmp/5548f39c-3d89-42f0-bd15-7badcfb8b93e_fixed.java
index 9353941..188f770 100644
--- a/tmp/4cb18b98-9ace-4abc-870e-d47d98875154_buggy.java
+++ b/tmp/5548f39c-3d89-42f0-bd15-7badcfb8b93e_fixed.java
@@ -1,30 +1,40 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
+
+    // Check the next sibling as well, since assignments in the RHS of an && or ||
+    // should not be considered KILL if the LHS is false.
+    Node nextSibling = n.getNext();
+    if (nextSibling != null) {
+      VariableLiveness state = isVariableReadBeforeKill(nextSibling, variable);
+      if (state != VariableLiveness.MAYBE_LIVE) {
+        return state;
+      }
+    }
+
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
