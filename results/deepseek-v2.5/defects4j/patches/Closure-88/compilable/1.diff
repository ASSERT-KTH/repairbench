diff --git a/tmp/3d4c752a-df77-4123-b30d-89083c6a7cf0_buggy.java b/tmp/4038790d-ca4b-44a4-bf75-45032265803d_fixed.java
index 9353941..7034827 100644
--- a/tmp/3d4c752a-df77-4123-b30d-89083c6a7cf0_buggy.java
+++ b/tmp/4038790d-ca4b-44a4-bf75-45032265803d_fixed.java
@@ -1,30 +1,44 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
+  VariableLiveness state = VariableLiveness.MAYBE_LIVE;
+
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
-        return VariableLiveness.KILL;
+      if (state == VariableLiveness.READ) {
+        state = VariableLiveness.MAYBE_LIVE;
       } else {
-        return VariableLiveness.READ;
+        state = VariableLiveness.KILL;
+      }
+    } else {
+      if (state == VariableLiveness.KILL) {
+        state = VariableLiveness.MAYBE_LIVE;
+      } else {
+        state = VariableLiveness.READ;
+      }
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
+      VariableLiveness childState = isVariableReadBeforeKill(child, variable);
+      if (childState != VariableLiveness.MAYBE_LIVE) {
+        if (state == VariableLiveness.KILL && childState == VariableLiveness.READ) {
+          state = VariableLiveness.MAYBE_LIVE;
+        } else {
+          state = childState;
+        }
+      }
+    }
+  }
   return state;
 }
\ No newline at end of file
-      }
-    }
-    return VariableLiveness.MAYBE_LIVE;
-  }
