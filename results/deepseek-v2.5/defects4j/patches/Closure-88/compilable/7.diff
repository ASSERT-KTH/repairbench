diff --git a/tmp/f651d72a-56bf-425d-a33e-dacfb640162f_buggy.java b/tmp/d06da717-f024-4376-9e3a-4ad176e0555b_fixed.java
index 9353941..5162cc3 100644
--- a/tmp/f651d72a-56bf-425d-a33e-dacfb640162f_buggy.java
+++ b/tmp/d06da717-f024-4376-9e3a-4ad176e0555b_fixed.java
@@ -1,30 +1,36 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
+    VariableLiveness lastKnownState = VariableLiveness.MAYBE_LIVE;
+
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
-        return VariableLiveness.KILL;
+        lastKnownState = VariableLiveness.KILL;
       } else {
-        return VariableLiveness.READ;
+        lastKnownState = VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
-        }
-      }
-    }
+          if (lastKnownState == VariableLiveness.KILL && state == VariableLiveness.READ) {
+            // Variable is read after being killed, so it is actually alive.
             return VariableLiveness.MAYBE_LIVE;
           }
+          lastKnownState = state;
+        }
+      }
+    }
+    return lastKnownState;
+  }
\ No newline at end of file
