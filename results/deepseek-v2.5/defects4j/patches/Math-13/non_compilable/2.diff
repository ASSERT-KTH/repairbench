diff --git a/tmp/1debe41d-53cf-48ef-bc6f-b655b9221eb5_buggy.java b/tmp/5c782c26-60e3-4832-b130-8f9cc604832c_fixed.java
index 4e21866..084a70c 100644
--- a/tmp/1debe41d-53cf-48ef-bc6f-b655b9221eb5_buggy.java
+++ b/tmp/5c782c26-60e3-4832-b130-8f9cc604832c_fixed.java
@@ -1,10 +1,41 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        // Ensure the matrix is symmetric and positive-definite
+        if (!isSymmetricPositiveDefinite(m)) {
+            throw new IllegalArgumentException("Input matrix must be symmetric and positive-definite.");
+        }
+        
+        final DecompositionSolver solver = new EigenDecomposition(m).getSolver();
+        final RealMatrix sqrtD = solver.getInverse().scalarMultiply(0.5);
+        final RealMatrix sqrtM = solver.getSquareRoot();
+        
+        return sqrtM.multiply(sqrtD).multiply(sqrtM.transpose());
+    }
+
+    /**
+     * Checks if a matrix is symmetric and positive-definite.
+     *
+     * @param m The matrix to check.
+     * @return true if the matrix is symmetric and positive-definite, false otherwise.
+     */
+    private boolean isSymmetricPositiveDefinite(RealMatrix m) {
+        // Check if the matrix is symmetric
+        if (!m.equals(m.transpose())) {
+            return false;
+        }
+        
+        // Check if the matrix is positive-definite
         final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+        for (double eigenvalue : dec.getRealEigenvalues()) {
+            if (eigenvalue <= 0) {
+                return false;
+            }
+        }
+        
+        return true;
     }
\ No newline at end of file
