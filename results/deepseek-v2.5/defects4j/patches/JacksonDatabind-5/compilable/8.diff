diff --git a/tmp/6fcaccb0-3a1b-402c-bdf3-aa1f37ce90cf_buggy.java b/tmp/b3523d8f-98ba-4601-8320-7548cfd61c86_fixed.java
index b2db1d6..d7fe044 100644
--- a/tmp/6fcaccb0-3a1b-402c-bdf3-aa1f37ce90cf_buggy.java
+++ b/tmp/b3523d8f-98ba-4601-8320-7548cfd61c86_fixed.java
@@ -1,29 +1,35 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Ensure we only add mix-in methods that are not already present in the target class
+                boolean methodExistsInTarget = false;
+                for (Method targetMethod : targetClass.getDeclaredMethods()) {
+                    if (targetMethod.getName().equals(m.getName()) && 
+                        Arrays.equals(targetMethod.getParameterTypes(), m.getParameterTypes())) {
+                        methodExistsInTarget = true;
+                        break;
+                    }
+                }
+                if (!methodExistsInTarget) {
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+}
\ No newline at end of file
