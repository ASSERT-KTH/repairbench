diff --git a/tmp/13248b2b-8254-48c2-b369-91a63dc37e8e_buggy.java b/tmp/28c356d7-39d9-4452-a656-319a94bab89b_fixed.java
index b2db1d6..de0de7f 100644
--- a/tmp/13248b2b-8254-48c2-b369-91a63dc37e8e_buggy.java
+++ b/tmp/28c356d7-39d9-4452-a656-319a94bab89b_fixed.java
@@ -1,29 +1,32 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
+            } else {
                 /* Otherwise will have precedence, but must wait
                  * until we find the real method (mixIn methods are
                  * just placeholder, can't be called)
                  */
-                } else {
                 // Well, or, as per [Issue#515], multi-level merge within mixins...
+                AnnotatedMethod mixinMethod = mixIns.find(m);
+                if (mixinMethod == null) {
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+}
\ No newline at end of file
