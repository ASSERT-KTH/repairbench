diff --git a/tmp/a845947d-a6c8-4be2-af12-c9b4c6682d4f_buggy.java b/tmp/8029a846-2098-4ad0-934d-81c3a81f11d4_fixed.java
index 58a1651..77e2a9b 100644
--- a/tmp/a845947d-a6c8-4be2-af12-c9b4c6682d4f_buggy.java
+++ b/tmp/8029a846-2098-4ad0-934d-81c3a81f11d4_fixed.java
@@ -1,32 +1,56 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis and handle if it's a UnionType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        ImmutableList.Builder<ObjectType> objectTypes = ImmutableList.builder();
+        boolean allObjectTypes = true;
+        for (JSType memberType : unionType.getAlternates()) {
+            if (memberType instanceof ObjectType) {
+                objectTypes.add((ObjectType) memberType);
+            } else {
+                allObjectTypes = false;
+                break;
+            }
+        }
+        if (allObjectTypes) {
+            typeOfThis = (ObjectType) unionType.restrictByNotNullOrUndefined();
+        } else {
+            // Handle the case where not all types in the union are ObjectType
+            // For now, just set it to null or handle it appropriately
+            typeOfThis = null;
+        }
+    } else if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+        // Handle the case where typeOfThis is not an ObjectType
+        // For now, just set it to null or handle it appropriately
+        typeOfThis = null;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
             ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
