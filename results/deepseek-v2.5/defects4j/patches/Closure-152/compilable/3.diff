diff --git a/tmp/61e24e00-c228-4b43-9bda-224fa20b4f4b_buggy.java b/tmp/72917472-20c8-42c7-966e-d85b44bc41e2_fixed.java
index 58a1651..68da030 100644
--- a/tmp/61e24e00-c228-4b43-9bda-224fa20b4f4b_buggy.java
+++ b/tmp/72917472-20c8-42c7-966e-d85b44bc41e2_fixed.java
@@ -1,32 +1,42 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+        for (JSType type : ((UnionType) resolvedTypeOfThis).getAlternates()) {
+            if (type instanceof ObjectType) {
+                typeOfThis = (ObjectType) type;
+                break;
+            }
+        }
+    } else {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
