diff --git a/tmp/430673c6-3565-46d0-b008-0b4b97020139_buggy.java b/tmp/4e0e8b24-413b-4040-8bd8-a5a2993c2eef_fixed.java
index 3127f85..ffd81e5 100644
--- a/tmp/430673c6-3565-46d0-b008-0b4b97020139_buggy.java
+++ b/tmp/4e0e8b24-413b-4040-8bd8-a5a2993c2eef_fixed.java
@@ -1,24 +1,27 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
+        if (Double.isInfinite(x)) {
+            return x > 0 ? 1 : 0;
+        }
+        
         final double dev = x - mean;
+        if (dev > 40 * standardDeviation) {
+            return 1.0;
+        } else if (dev < -40 * standardDeviation) {
+            return 0.0;
+        }
+        
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
+            throw new MathException(ex);
         }
     }
\ No newline at end of file
