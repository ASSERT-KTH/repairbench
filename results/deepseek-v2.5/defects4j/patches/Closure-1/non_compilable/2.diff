diff --git a/tmp/df05bb44-9eca-4674-bcc1-dfca758e7d95_buggy.java b/tmp/831aef77-fbbf-40df-b3cf-a1e7c5934b3b_fixed.java
index 61ffdbf..8f82e76 100644
--- a/tmp/df05bb44-9eca-4674-bcc1-dfca758e7d95_buggy.java
+++ b/tmp/831aef77-fbbf-40df-b3cf-a1e7c5934b3b_fixed.java
@@ -1,44 +1,86 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
+
+  // Add a new helper method to check if the current compilation level allows
+  // removing unused parameters.
+  private boolean shouldRemoveUnusedParameters() {
+    // Assuming there is a method or field in the class that indicates the
+    // current compilation level or mode.
+    return compilationLevel == CompilationLevel.ADVANCED_OPTIMIZATIONS;
+  }
+
+  // Modify the original method to use this helper method.
+  private void removeUnreferencedFunctionArgs(Scope fnScope) {
+    if (!shouldRemoveUnusedParameters()) {
+      return;
+    }
+
+    Node function = fnScope.getRootNode();
+
+    Preconditions.checkState(function.isFunction());
+    if (NodeUtil.isGetOrSetKey(function.getParent())) {
+      // The parameters object literal setters can not be removed.
+      return;
+    }
+
+    Node argList = getFunctionArgList(function);
+    boolean modifyCallers = modifyCallSites
+        && callSiteOptimizer.canModifyCallers(function);
+    if (!modifyCallers) {
+      // Strip unreferenced args off the end of the function declaration.
+      Node lastArg;
+      while ((lastArg = argList.getLastChild()) != null) {
+        Var var = fnScope.getVar(lastArg.getString());
+        if (!referenced.contains(var)) {
+          argList.removeChild(lastArg);
+          compiler.reportCodeChange();
+        } else {
+          break;
+        }
+      }
+    } else {
+      callSiteOptimizer.optimize(fnScope, referenced);
+    }
+  }
\ No newline at end of file
