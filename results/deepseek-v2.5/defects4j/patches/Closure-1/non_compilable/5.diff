diff --git a/tmp/2194890b-20e1-4d07-906b-253ee54de1af_buggy.java b/tmp/ad4807f5-901a-47b5-81a3-9f68da544e83_fixed.java
index 61ffdbf..5da3eaf 100644
--- a/tmp/2194890b-20e1-4d07-906b-253ee54de1af_buggy.java
+++ b/tmp/ad4807f5-901a-47b5-81a3-9f68da544e83_fixed.java
@@ -1,44 +1,47 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
   // Notice that removing unreferenced function args breaks
   // Function.prototype.length. In advanced mode, we don't really care
   // about this: we consider "length" the equivalent of reflecting on
   // the function's lexical source.
   //
   // Rather than create a new option for this, we assume that if the user
   // is removing globals, then it's OK to remove unused function args.
   //
   // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
   Node function = fnScope.getRootNode();
 
   Preconditions.checkState(function.isFunction());
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
     // The parameters object literal setters can not be removed.
     return;
   }
 
+  // Check if the current compilation level is SIMPLE_OPTIMIZATIONS
+  if (compiler.getOptions().shouldRemoveUnusedFunctionParameters()) {
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
+}
\ No newline at end of file
