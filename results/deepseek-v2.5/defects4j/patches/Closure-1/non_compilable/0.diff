diff --git a/tmp/b2f0226b-ccf7-448e-9c6b-73efb3fc5453_buggy.java b/tmp/1d75e767-5d62-4026-84be-cec91cbfc5c6_fixed.java
index 61ffdbf..aa5e1d7 100644
--- a/tmp/b2f0226b-ccf7-448e-9c6b-73efb3fc5453_buggy.java
+++ b/tmp/1d75e767-5d62-4026-84be-cec91cbfc5c6_fixed.java
@@ -1,44 +1,54 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
   // Notice that removing unreferenced function args breaks
   // Function.prototype.length. In advanced mode, we don't really care
   // about this: we consider "length" the equivalent of reflecting on
   // the function's lexical source.
   //
   // Rather than create a new option for this, we assume that if the user
   // is removing globals, then it's OK to remove unused function args.
   //
   // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
   Node function = fnScope.getRootNode();
 
   Preconditions.checkState(function.isFunction());
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
     // The parameters object literal setters can not be removed.
     return;
   }
 
   Node argList = getFunctionArgList(function);
   boolean modifyCallers = modifyCallSites
       && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
+
+  // Check if we are in an advanced optimization mode
+  if (isAdvancedMode()) {
+    if (modifyCallers) {
+      callSiteOptimizer.optimize(fnScope, referenced);
+    } else {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
-    } else {
-      callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
+}
+
+// Helper method to check if we are in advanced optimization mode
+private boolean isAdvancedMode() {
+  // Assuming you have a way to determine the current optimization level
+  return CompilationLevel.ADVANCED_OPTIMIZATIONS == currentCompilationLevel;
+}
\ No newline at end of file
