diff --git a/tmp/e2e68cd5-01de-482f-8bd6-2aef6eb3c261_buggy.java b/tmp/fd848833-9af5-447a-bed7-6e89e00706dc_fixed.java
index d9d2789..0bf84a7 100644
--- a/tmp/e2e68cd5-01de-482f-8bd6-2aef6eb3c261_buggy.java
+++ b/tmp/fd848833-9af5-447a-bed7-6e89e00706dc_fixed.java
@@ -1,73 +1,67 @@
 /**
  * Parse an octal string from a buffer.
  *
  * <p>Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.</p>
  *
  * <p>The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).</p>
  *
  * <p>To work-around some tar implementations that insert a
  * leading NUL this method returns 0 if it detects a leading NUL
  * since Commons Compress 1.4.</p>
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    while (start < end && buffer[start] == ' ') {
         start++;
-            } else {
-                break;
-            }
     }
 
-        // Trim all trailing NULs and spaces.
+    // Trim trailing NULs and spaces.
     // The ustar and POSIX tar specs require a trailing NUL or
     // space but some implementations use the extra digit for big
     // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
         end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
     }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+    for (int i = start; i < end; i++) {
+        final byte currentByte = buffer[i];
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // Ensure no trailing invalid characters are left
+    for (int i = end; i < offset + length; i++) {
+        final byte trailer = buffer[i];
+        if (trailer != 0 && trailer != ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, trailer));
+        }
     }
 
     return result;
 }
\ No newline at end of file
