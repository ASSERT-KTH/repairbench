diff --git a/tmp/0de7988a-929e-4377-a130-e9bd6d07c55c_buggy.java b/tmp/21034de9-9b23-40ab-92dc-5a6748188b63_fixed.java
index fb2b020..201ba61 100644
--- a/tmp/0de7988a-929e-4377-a130-e9bd6d07c55c_buggy.java
+++ b/tmp/21034de9-9b23-40ab-92dc-5a6748188b63_fixed.java
@@ -1,27 +1,33 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
+        } else {
+          JSType existingType = getPropertyType(prop);
+          JSType commonType = existingType.getLeastSupertype(propType);
+          if (!existingType.isEquivalentTo(commonType)) {
+            defineInferredProperty(prop, commonType, null);
+          }
         }
       }
     }
   }
\ No newline at end of file
