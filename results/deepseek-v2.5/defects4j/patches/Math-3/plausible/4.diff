diff --git a/tmp/310d95a3-234d-4bab-aa64-059286e225cf_buggy.java b/tmp/77fd27fc-d0a9-4163-a48a-ad413871e406_fixed.java
index aab19c0..c6bd0f5 100644
--- a/tmp/310d95a3-234d-4bab-aa64-059286e225cf_buggy.java
+++ b/tmp/77fd27fc-d0a9-4163-a48a-ad413871e406_fixed.java
@@ -1,76 +1,73 @@
 /**
  * Compute a linear combination accurately.
  * This method computes the sum of the products
  * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
  * It does so by using specific multiplication and addition algorithms to
  * preserve accuracy and reduce cancellation effects.
  * <br/>
  * It is based on the 2005 paper
  * <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547">
  * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,
  * and Shin'ichi Oishi published in SIAM J. Sci. Comput.
  *
  * @param a Factors.
  * @param b Factors.
  * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
  * @throws DimensionMismatchException if arrays dimensions don't match
  */
 public static double linearCombination(final double[] a, final double[] b)
     throws DimensionMismatchException {
     final int len = a.length;
     if (len != b.length) {
         throw new DimensionMismatchException(len, b.length);
     }
 
-            // Revert to scalar multiplication.
+    if (len == 1) {
+        return a[0] * b[0];
+    }
 
     final double[] prodHigh = new double[len];
     double prodLowSum = 0;
 
     for (int i = 0; i < len; i++) {
         final double ai = a[i];
         final double ca = SPLIT_FACTOR * ai;
         final double aHigh = ca - (ca - ai);
         final double aLow = ai - aHigh;
 
         final double bi = b[i];
         final double cb = SPLIT_FACTOR * bi;
         final double bHigh = cb - (cb - bi);
         final double bLow = bi - bHigh;
         prodHigh[i] = ai * bi;
         final double prodLow = aLow * bLow - (((prodHigh[i] -
                                                 aHigh * bHigh) -
                                                aLow * bHigh) -
                                               aHigh * bLow);
         prodLowSum += prodLow;
     }
 
+    double sHighPrev = prodHigh[0];
+    double sLowSum = 0;
 
-        final double prodHighCur = prodHigh[0];
-        double prodHighNext = prodHigh[1];
-        double sHighPrev = prodHighCur + prodHighNext;
-        double sPrime = sHighPrev - prodHighNext;
-        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
-
-        final int lenMinusOne = len - 1;
-        for (int i = 1; i < lenMinusOne; i++) {
-            prodHighNext = prodHigh[i + 1];
+    for (int i = 1; i < len; i++) {
+        final double prodHighNext = prodHigh[i];
         final double sHighCur = sHighPrev + prodHighNext;
-            sPrime = sHighCur - prodHighNext;
+        final double sPrime = sHighCur - prodHighNext;
         sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
         sHighPrev = sHighCur;
     }
 
     double result = sHighPrev + (prodLowSum + sLowSum);
 
     if (Double.isNaN(result)) {
         // either we have split infinite numbers or some coefficients were NaNs,
         // just rely on the naive implementation and let IEEE754 handle this
         result = 0;
         for (int i = 0; i < len; ++i) {
             result += a[i] * b[i];
         }
     }
 
     return result;
 }
\ No newline at end of file
