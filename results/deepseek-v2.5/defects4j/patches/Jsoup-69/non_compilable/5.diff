diff --git a/tmp/dbe7473c-fd05-44da-ae90-3afc3708ad5f_buggy.java b/tmp/a5d3fdf3-905b-4a80-be59-59913769d782_fixed.java
index e69de29..0fd57f2 100644
--- a/tmp/dbe7473c-fd05-44da-ae90-3afc3708ad5f_buggy.java
+++ b/tmp/a5d3fdf3-905b-4a80-be59-59913769d782_fixed.java
@@ -0,0 +1,40 @@
+public class FormElement extends Element {
+    private final Elements elements = new Elements();
+
+    public FormElement(final Tag tag, final String baseUri, final Attributes attributes) {
+        super(tag, baseUri, attributes);
+    }
+
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // iterate over all elements in this form
+        for (Element element : elements) {
+            if (element instanceof InputTag) {
+                InputTag input = (InputTag) element;
+                // skip inputs with no name, or that are disabled, or hidden
+                if (input.name().length() == 0 || input.hasAttr("disabled") || "hidden".equals(input.attr("type")))
+                    continue;
+                // add checkbox and radio if checked
+                if ("checkbox".equals(input.attr("type")) || "radio".equals(input.attr("type"))) {
+                    if (input.hasAttr("checked")) {
+                        String value = input.hasAttr("value") ? input.attr("value") : "on";
+                        data.add(Connection.KeyVal.create(input.name(), value));
+                    }
+                } else {
+                    // other input elements
+                    data.add(Connection.KeyVal.create(input.name(), input.val()));
+                }
+            }
+        }
+        return data;
+    }
+
+    public void addElement(Element element) {
+        elements.add(element);
+    }
+
+    public void removeElement(Element element) {
+        elements.remove(element);
+    }
+}
\ No newline at end of file
