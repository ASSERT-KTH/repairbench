diff --git a/tmp/960c60e1-869e-4a95-8ac6-80e63239e08a_buggy.java b/tmp/a6635807-9920-41dd-a351-76a0f5973074_fixed.java
index b6b11b6..6fcc2a6 100644
--- a/tmp/960c60e1-869e-4a95-8ac6-80e63239e08a_buggy.java
+++ b/tmp/a6635807-9920-41dd-a351-76a0f5973074_fixed.java
@@ -1,38 +1,33 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        if (c[start] != QUOTE) {
+            throw new IllegalArgumentException("Quoted string must start with a quote.");
         }
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
+        for (int i = pos.getIndex() + 1; i < pattern.length(); i++) {
             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+                appendTo.append(c, lastHold + 1, i - lastHold - 1).append(QUOTE);
+                i += ESCAPED_QUOTE.length() - 1;
+                lastHold = i;
                 continue;
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+            if (c[i] == QUOTE) {
+                appendTo.append(c, lastHold + 1, i - lastHold - 1);
+                pos.setIndex(i + 1);
+                return appendTo;
             }
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+        throw new IllegalArgumentException("Unterminated quoted string at position " + start);
     }
\ No newline at end of file
