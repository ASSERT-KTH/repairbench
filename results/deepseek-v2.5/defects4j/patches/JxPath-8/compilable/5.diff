diff --git a/tmp/3e52db9e-5bb6-4ee9-ad15-71217133936f_buggy.java b/tmp/2bd5c5ff-d7a4-41fc-9761-4638f6aed9f5_fixed.java
index 98d89dc..081c41f 100644
--- a/tmp/3e52db9e-5bb6-4ee9-ad15-71217133936f_buggy.java
+++ b/tmp/2bd5c5ff-d7a4-41fc-9761-4638f6aed9f5_fixed.java
@@ -1,23 +1,35 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN comparisons correctly
+    boolean leftIsNaN = Double.isNaN(ld);
+    boolean rightIsNaN = Double.isNaN(rd);
+
+    if (leftIsNaN && rightIsNaN) {
+        return evaluateCompare(0); // NaN == NaN should be true
+    }
+    if (leftIsNaN || rightIsNaN) {
+        return evaluateCompare(Double.compare(ld, rd)); // NaN comparisons should be false
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
