diff --git a/tmp/1547f482-89c2-484f-8b32-5e227caff0fc_buggy.java b/tmp/72a1a6fe-ac89-417e-8dca-32fdf6f1637c_fixed.java
index ae9ef3f..90cbe03 100644
--- a/tmp/1547f482-89c2-484f-8b32-5e227caff0fc_buggy.java
+++ b/tmp/72a1a6fe-ac89-417e-8dca-32fdf6f1637c_fixed.java
@@ -1,158 +1,33 @@
-  /**
-   * Parses the externs and main inputs.
-   *
-   * @return A synthetic root node whose two children are the externs root
-   *     and the main root
-   */
-  Node parseInputs() {
-    boolean devMode = options.devMode != DevMode.OFF;
-
-    // If old roots exist (we are parsing a second time), detach each of the
-    // individual file parse trees.
-    if (externsRoot != null) {
-      externsRoot.detachChildren();
-    }
-    if (jsRoot != null) {
-      jsRoot.detachChildren();
-    }
-
-    // Parse main js sources.
-    jsRoot = IR.block();
-    jsRoot.setIsSyntheticBlock(true);
-
-    externsRoot = IR.block();
-    externsRoot.setIsSyntheticBlock(true);
-
-    externAndJsRoot = IR.block(externsRoot, jsRoot);
-    externAndJsRoot.setIsSyntheticBlock(true);
-
-    if (options.tracer.isOn()) {
-      tracker = new PerformanceTracker(jsRoot, options.tracer);
-      addChangeHandler(tracker.getCodeChangeHandler());
-    }
-
-    Tracer tracer = newTracer("parseInputs");
-
-    try {
-      // Parse externs sources.
-      for (CompilerInput input : externs) {
-        Node n = input.getAstRoot(this);
-        if (hasErrors()) {
-          return null;
-        }
-        externsRoot.addChildToBack(n);
-      }
-
-      // Modules inferred in ProcessCommonJS pass.
-      if (options.transformAMDToCJSModules || options.processCommonJSModules) {
-        processAMDAndCommonJSModules();
-      }
-
-      // Check if inputs need to be rebuilt from modules.
-      boolean staleInputs = false;
-
-      // Check if the sources need to be re-ordered.
-      if (options.dependencyOptions.needsManagement() &&
-          !options.skipAllPasses &&
-          options.closurePass) {
-        for (CompilerInput input : inputs) {
-          // Forward-declare all the provided types, so that they
-          // are not flagged even if they are dropped from the process.
-          for (String provide : input.getProvides()) {
-            getTypeRegistry().forwardDeclareType(provide);
-          }
-        }
-
-        try {
-          inputs =
-              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
-              .manageDependencies(options.dependencyOptions, inputs);
-          staleInputs = true;
-        } catch (CircularDependencyException e) {
-          report(JSError.make(
-              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
-          if (hasErrors()) {
-            return null;
-          }
-        } catch (MissingProvideException e) {
-          report(JSError.make(
-              MISSING_ENTRY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
-          if (hasErrors()) {
-            return null;
-          }
-        }
-      }
-
-      for (CompilerInput input : inputs) {
-        Node n = input.getAstRoot(this);
-
-        // Inputs can have a null AST during initial parse.
-        if (n == null) {
-          continue;
-        }
-
-        if (n.getJSDocInfo() != null) {
-          JSDocInfo info = n.getJSDocInfo();
-          if (info.isExterns()) {
-            // If the input file is explicitly marked as an externs file, then
-            // assume the programmer made a mistake and throw it into
-            // the externs pile anyways.
-            externsRoot.addChildToBack(n);
-            input.setIsExtern(true);
-
-            input.getModule().remove(input);
-
-            externs.add(input);
-            staleInputs = true;
-          } else if (info.isNoCompile()) {
-            input.getModule().remove(input);
-            staleInputs = true;
-          }
-        }
-      }
-
-      if (staleInputs) {
-        fillEmptyModules(modules);
-        rebuildInputsFromModules();
-      }
-
-      // Build the AST.
-      for (CompilerInput input : inputs) {
-        Node n = input.getAstRoot(this);
-        if (n == null) {
-          continue;
-        }
-
-        if (devMode) {
-          runSanityCheck();
-          if (hasErrors()) {
-            return null;
-          }
-        }
-
-        if (options.sourceMapOutputPath != null ||
-            options.nameReferenceReportPath != null) {
-
-          // Annotate the nodes in the tree with information from the
-          // input file. This information is used to construct the SourceMap.
-          SourceInformationAnnotator sia =
-              new SourceInformationAnnotator(
-                  input.getName(), options.devMode != DevMode.OFF);
-          NodeTraversal.traverse(this, n, sia);
-        }
-
-        jsRoot.addChildToBack(n);
-      }
-
-      if (hasErrors()) {
-        return null;
+void addNumber(double x) {
+  // This is not pretty printing. This is to prevent misparsing of x- -4 as
+  // x--4 (which is a syntax error).
+  char prev = getLastChar();
+  boolean negativeZero = isNegativeZero(x);
+  if (x < 0 && prev == '-') {
+    add(" ");
+  }
+
+  if ((long) x == x && !negativeZero) {
+    long value = (long) x;
+    long mantissa = value;
+    int exp = 0;
+    if (Math.abs(x) >= 100) {
+      while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
+        mantissa /= 10;
+        exp++;
+      }
+    }
+    if (exp > 2) {
+      add(Long.toString(mantissa) + "E" + Integer.toString(exp));
+    } else {
+      add(Long.toString(value));
+    }
+  } else {
+    // Ensure that negative zero is printed as "-0.0"
+    if (negativeZero) {
+      add("-0.0");
+    } else {
+      add(String.valueOf(x));
     }
-      return externAndJsRoot;
-    } finally {
-      stopTracer(tracer, "parseInputs");
   }
 }
\ No newline at end of file
