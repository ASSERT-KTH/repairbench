diff --git a/tmp/c6e189dd-1289-412a-80fe-f3358e36b578_buggy.java b/tmp/41902a95-19c4-40dd-adcc-83265e80fef1_fixed.java
index d6a560a..a810b3b 100644
--- a/tmp/c6e189dd-1289-412a-80fe-f3358e36b578_buggy.java
+++ b/tmp/41902a95-19c4-40dd-adcc-83265e80fef1_fixed.java
@@ -1,33 +1,45 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Using a Set to track resolved types to prevent infinite recursion
+    Set<JSType> resolvedTypes = new HashSet<>();
+
+    resolveInternalWithTracking(t, enclosing, resolvedTypes);
+
+    if (registry.isLastGeneration()) {
+      return getReferencedType();
+    } else {
+      return this;
+    }
+  }
+
+  private void resolveInternalWithTracking(ErrorReporter t, StaticScope<JSType> enclosing, Set<JSType> resolvedTypes) {
+    if (resolvedTypes.contains(this)) {
+      // Prevent infinite recursion by checking if the type has already been resolved
+      return;
+    }
+
+    resolvedTypes.add(this);
+
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
+    } else {
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
 
       super.resolveInternal(t, enclosing);
       if (isResolved()) {
         finishPropertyContinuations();
       }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    }
   }
\ No newline at end of file
