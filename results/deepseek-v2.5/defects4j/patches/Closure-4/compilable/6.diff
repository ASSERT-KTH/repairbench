diff --git a/tmp/06269c6a-2ae3-40f2-b856-1171c1b5f116_buggy.java b/tmp/ba3e1d68-1427-4a49-b95f-4a4eb7511a26_fixed.java
index d6a560a..2aa0eb3 100644
--- a/tmp/06269c6a-2ae3-40f2-b856-1171c1b5f116_buggy.java
+++ b/tmp/ba3e1d68-1427-4a49-b95f-4a4eb7511a26_fixed.java
@@ -1,33 +1,36 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+  // Introduce a cycle detection mechanism
+  if (isResolving) {
     handleTypeCycle(t);
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
+  boolean resolved = false;
+  isResolving = true;
+
+  try {
+    resolved = resolveViaRegistry(t, enclosing);
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  } finally {
+    isResolving = false;
   }
+
+  return registry.isLastGeneration() ? getReferencedType() : this;
+}
+
+// Add a boolean flag to detect cycles
+private boolean isResolving = false;
\ No newline at end of file
