diff --git a/tmp/ed8bd15d-7416-4333-839e-03b9877d8415_buggy.java b/tmp/762ed5f4-945c-4128-8cb0-650bde9848ef_fixed.java
index d6a560a..5c314e0 100644
--- a/tmp/ed8bd15d-7416-4333-839e-03b9877d8415_buggy.java
+++ b/tmp/762ed5f4-945c-4128-8cb0-650bde9848ef_fixed.java
@@ -1,33 +1,36 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // Ensure we do not resolve via properties if we have already detected a cycle
+    if (!detectImplicitPrototypeCycle()) {
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
+    }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
