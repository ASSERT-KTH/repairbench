diff --git a/tmp/defb5aa1-c44a-412c-b925-d33b0c97d51e_buggy.java b/tmp/0fbaed73-7600-4ada-9825-bfde9cf02fc3_fixed.java
index e69de29..c963a62 100644
--- a/tmp/defb5aa1-c44a-412c-b925-d33b0c97d51e_buggy.java
+++ b/tmp/0fbaed73-7600-4ada-9825-bfde9cf02fc3_fixed.java
@@ -0,0 +1,32 @@
+package org.apache.commons.collections4.map;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+    private final Class<? extends List<V>> listClass;
+
+    protected MultiValueMap(Map<K, Object> map, Class<? extends List<V>> listClass) {
+        super(map);
+        this.listClass = listClass;
+    }
+
+    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, Object> map, Class<? extends List<V>> listClass) {
+        return new MultiValueMap<>(map, listClass);
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        // Validate the listClass during deserialization
+        if (listClass != ArrayList.class && listClass != null) {
+            throw new UnsupportedOperationException("unsafe clazz accepted when de-serializing MultiValueMap");
+        }
+    }
+
+    // Other methods in the class...
+}
\ No newline at end of file
