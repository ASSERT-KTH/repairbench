diff --git a/tmp/3505047f-f1b6-4814-a25a-a139f3daa8e1_buggy.java b/tmp/d8be32d7-b5fe-4aad-8cf0-62cff7242de7_fixed.java
index e69de29..cd1579c 100644
--- a/tmp/3505047f-f1b6-4814-a25a-a139f3daa8e1_buggy.java
+++ b/tmp/d8be32d7-b5fe-4aad-8cf0-62cff7242de7_fixed.java
@@ -0,0 +1,31 @@
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> implements MultiMap<K, V>, Serializable {
+    private static final long serialVersionUID = -715258849940822137L;
+
+    private final Class<?> collectionClass;
+
+    public MultiValueMap(Map<K, Object> map, Class<?> collectionClass) {
+        super(map);
+        if (collectionClass == null) {
+            throw new IllegalArgumentException("The collection class must not be null");
+        }
+        this.collectionClass = collectionClass;
+    }
+
+    @SuppressWarnings("unchecked")
+    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, Object> map, Class<?> collectionClass) {
+        return new MultiValueMap<>(map, collectionClass);
+    }
+
+    @SuppressWarnings("unchecked")
+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        if (!isSafeCollectionClass()) {
+            throw new UnsupportedOperationException("Unsafe collection class used during deserialization");
+        }
+        // Rest of the deserialization code
+    }
+
+    private boolean isSafeCollectionClass() {
+        return collectionClass.equals(ArrayList.class) || collectionClass.equals(HashSet.class);
+    }
+}
\ No newline at end of file
