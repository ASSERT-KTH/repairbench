diff --git a/tmp/0a2e1773-1f70-4fa9-b621-d1cfb2310eaa_buggy.java b/tmp/202edf0b-5286-459b-9212-399f38ecea07_fixed.java
index e69de29..e5fe499 100644
--- a/tmp/0a2e1773-1f70-4fa9-b621-d1cfb2310eaa_buggy.java
+++ b/tmp/202edf0b-5286-459b-9212-399f38ecea07_fixed.java
@@ -0,0 +1,35 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class MultiValueMap<K, V> implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private final Map<K, List<V>> map;
+    private final Class<? extends List<V>> listClass;
+
+    public MultiValueMap(Map<K, List<V>> map, Class<? extends List<V>> listClass) {
+        this.map = map;
+        this.listClass = listClass;
+    }
+
+    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, List<V>> map, Class<? extends List<V>> listClass) {
+        return new MultiValueMap<>(map, listClass);
+    }
+
+    // Other methods of MultiValueMap
+
+    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
+        ois.defaultReadObject();
+
+        // Validate the listClass to ensure it is a safe class
+        if (listClass.equals(String.class)) {
+            throw new UnsupportedOperationException("Unsafe class used for deserialization");
+        }
+    }
+}
\ No newline at end of file
