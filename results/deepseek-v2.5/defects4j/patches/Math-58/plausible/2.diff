diff --git a/tmp/ca43678a-57bd-4a95-a0a0-d2c2a9e30acc_buggy.java b/tmp/b57ba91b-e6a9-4d2e-afa6-db1085b466e2_fixed.java
index 3002587..89c0fda 100644
--- a/tmp/ca43678a-57bd-4a95-a0a0-d2c2a9e30acc_buggy.java
+++ b/tmp/b57ba91b-e6a9-4d2e-afa6-db1085b466e2_fixed.java
@@ -1,10 +1,33 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        Gaussian.Parametric gaussianParametric = new Gaussian.Parametric() {
+            @Override
+            public double value(double x, double... parameters) {
+                double v = Double.POSITIVE_INFINITY;
+                try {
+                    v = super.value(x, parameters);
+                } catch (NotStrictlyPositiveException e) {
+                    // Ignore the exception and return a large value to avoid negative sigma
+                }
+                return v;
+            }
+
+            @Override
+            public double[] gradient(double x, double... parameters) {
+                double[] v = {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY};
+                try {
+                    v = super.gradient(x, parameters);
+                } catch (NotStrictlyPositiveException e) {
+                    // Ignore the exception and return large values to avoid negative sigma
+                }
+                return v;
+            }
+        };
+        return fit(gaussianParametric, guess);
     }
\ No newline at end of file
