diff --git a/tmp/9f3f1779-6b6d-40d2-99d5-67260e47bfb0_buggy.java b/tmp/c8ef946e-b5c0-4b6c-89f4-42bcf7f70b8e_fixed.java
index 4aff4e4..7ef55f9 100644
--- a/tmp/9f3f1779-6b6d-40d2-99d5-67260e47bfb0_buggy.java
+++ b/tmp/c8ef946e-b5c0-4b6c-89f4-42bcf7f70b8e_fixed.java
@@ -1,15 +1,50 @@
-    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+  /**
+   * Check whether there's any property conflict for for a particular super
+   * interface
+   * @param t The node traversal object that supplies context
+   * @param n The node being visited
+   * @param functionName The function name being checked
+   * @param properties The property names in the super interfaces that have
+   * been visited
+   * @param currentProperties The property names in the super interface
+   * that have been visited
+   * @param interfaceType The super interface that is being visited
+   */
+  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
+      String functionName, HashMap<String, ObjectType> properties,
+      HashMap<String, ObjectType> currentProperties,
+      ObjectType interfaceType) {
+    if (interfaceType == null) {
+      // Handle the case where interfaceType is null, which can happen if
+      // the interface extends a non-existent object.
+      return;
+    }
+
+    ObjectType implicitProto = interfaceType.getImplicitPrototype();
+    if (implicitProto == null) {
+      // Handle the case where implicitProto is null, which can happen if
+      // the interfaceType is a proxy to a non-existent object.
+      return;
+    }
 
-        for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
+    for (String name : currentPropertyNames) {
+      ObjectType oType = properties.get(name);
+      if (oType != null) {
+        ObjectType interfacePropType = interfaceType.getPropertyType(name);
+        if (interfacePropType != null &&
+            !interfacePropType.isEquivalentTo(oType.getPropertyType(name))) {
+          compiler.report(
+              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
+                  functionName, name, oType.toString(),
+                  interfaceType.toString()));
         }
       }
-        return false;
+      currentProperties.put(name, interfaceType);
+    }
+
+    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+      checkInterfaceConflictProperties(t, n, functionName, properties,
+          currentProperties, iType);
+    }
   }
\ No newline at end of file
