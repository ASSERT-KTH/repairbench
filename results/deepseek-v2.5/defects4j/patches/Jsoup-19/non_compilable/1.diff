diff --git a/tmp/86c62101-c7b4-472d-a73c-ce88648970ee_buggy.java b/tmp/80b98cee-6ffd-4563-8634-5e46d0fc2db7_fixed.java
index 4aff4e4..04c488d 100644
--- a/tmp/86c62101-c7b4-472d-a73c-ce88648970ee_buggy.java
+++ b/tmp/80b98cee-6ffd-4563-8634-5e46d0fc2db7_fixed.java
@@ -1,15 +1,36 @@
-    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
+        String functionName, HashMap<String, ObjectType> properties,
+        HashMap<String, ObjectType> currentProperties,
+        ObjectType interfaceType) {
+    if (interfaceType == null) {
+        // Handle the case where interfaceType is null (e.g., non-existent interface)
+        compiler.report(t.makeError(n, UNKNOWN_INTERFACE, functionName));
+        return;
+    }
+
+    ObjectType implicitProto = interfaceType.getImplicitPrototype();
+    if (implicitProto == null) {
+        // Handle the case where implicitProto is null (e.g., bad type annotation)
+        compiler.report(t.makeError(n, BAD_TYPE_ANNOTATION, functionName));
+        return;
+    }
 
-        for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
+    for (String name : currentPropertyNames) {
+        ObjectType oType = properties.get(name);
+        if (oType != null) {
+            if (!interfaceType.getPropertyType(name).isEquivalentTo(
+                    oType.getPropertyType(name))) {
+                compiler.report(
+                        t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
+                                functionName, name, oType.toString(),
+                                interfaceType.toString()));
+            }
+        }
+        currentProperties.put(name, interfaceType);
     }
+    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+        checkInterfaceConflictProperties(t, n, functionName, properties,
+                currentProperties, iType);
     }
-        return false;
 }
\ No newline at end of file
