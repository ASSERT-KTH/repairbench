diff --git a/tmp/a73dc165-a835-453d-977a-e336deaa872f_buggy.java b/tmp/669c3586-c1c7-4d1e-8286-6dee067b1fd6_fixed.java
index 4aff4e4..196809c 100644
--- a/tmp/a73dc165-a835-453d-977a-e336deaa872f_buggy.java
+++ b/tmp/669c3586-c1c7-4d1e-8286-6dee067b1fd6_fixed.java
@@ -1,15 +1,28 @@
-    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
-        
-        for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
-            }
-        }
-        return false;
+private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
+    String functionName, HashMap<String, ObjectType> properties,
+    HashMap<String, ObjectType> currentProperties,
+    ObjectType interfaceType) {
+  ObjectType implicitProto = interfaceType.getImplicitPrototype();
+  if (implicitProto == null) {
+    // Handle the case where implicitProto is null, which could happen if interfaceType is proxy to a non-existent object.
+    return;
+  }
+  Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
+  for (String name : currentPropertyNames) {
+    ObjectType oType = properties.get(name);
+    if (oType != null) {
+      if (!interfaceType.getPropertyType(name).isEquivalentTo(
+          oType.getPropertyType(name))) {
+        compiler.report(
+            t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
+                functionName, name, oType.toString(),
+                interfaceType.toString()));
+      }
+    }
+    currentProperties.put(name, interfaceType);
+  }
+  for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+    checkInterfaceConflictProperties(t, n, functionName, properties,
+        currentProperties, iType);
+  }
 }
\ No newline at end of file
