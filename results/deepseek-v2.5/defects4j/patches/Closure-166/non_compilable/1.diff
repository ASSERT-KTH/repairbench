diff --git a/tmp/e551e9b0-5666-4e45-adb2-2a65ffd53bc2_buggy.java b/tmp/8c9caa34-35b3-4f25-9769-f2fc9238c818_fixed.java
index 5f96616..e68f9d6 100644
--- a/tmp/e551e9b0-5666-4e45-adb2-2a65ffd53bc2_buggy.java
+++ b/tmp/8c9caa34-35b3-4f25-9769-f2fc9238c818_fixed.java
@@ -1,20 +1,25 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    JSType recordType = constraint.toObjectType();
+    if (recordType != null) {
+      matchRecordTypeConstraint(recordType);
+    }
+  } else if (constraint.isUnionType()) {
+    // Handle the case where the constraint is a union type containing record types.
+    UnionType unionType = constraint.toMaybeUnionType();
+    if (unionType != null) {
+      for (JSType alt : unionType.getAlternates()) {
+        if (alt.isRecordType()) {
+          matchConstraint(alt);
+        }
+      }
+    }
   }
 }
\ No newline at end of file
