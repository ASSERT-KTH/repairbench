diff --git a/tmp/0c3c8027-d481-45b1-a6b8-9a4e8ad89a31_buggy.java b/tmp/d07733a0-70b2-4188-8222-7d51080255b5_fixed.java
index 5f96616..755a3df 100644
--- a/tmp/0c3c8027-d481-45b1-a6b8-9a4e8ad89a31_buggy.java
+++ b/tmp/d07733a0-70b2-4188-8222-7d51080255b5_fixed.java
@@ -1,20 +1,20 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    RecordType recordType = constraint.toMaybeRecordType();
+    if (recordType != null) {
+      for (String propertyName : recordType.getOwnPropertyNames()) {
+        JSType propertyType = recordType.getPropertyType(propertyName);
+        if (propertyType != null) {
+          getObjectType().defineDeclaredProperty(propertyName, propertyType, null);
+        }
+      }
+    }
   }
 }
\ No newline at end of file
