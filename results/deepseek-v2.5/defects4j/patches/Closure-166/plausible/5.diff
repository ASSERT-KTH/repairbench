diff --git a/tmp/f4f111dd-92f6-425d-8305-3181940f7b4c_buggy.java b/tmp/21b4843b-4445-4ac2-ac74-1b50bd7c3501_fixed.java
index 5f96616..12969b4 100644
--- a/tmp/f4f111dd-92f6-425d-8305-3181940f7b4c_buggy.java
+++ b/tmp/21b4843b-4445-4ac2-ac74-1b50bd7c3501_fixed.java
@@ -1,20 +1,20 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
+  } else if (constraint.isUnionType()) {
+    // Handle the case where the constraint object is a union type.
+    UnionType unionConstraint = constraint.toMaybeUnionType();
+    for (JSType alternate : unionConstraint.getAlternates()) {
+      if (alternate.isRecordType()) {
+        matchRecordTypeConstraint(alternate.toObjectType());
+      }
+    }
   }
 }
\ No newline at end of file
