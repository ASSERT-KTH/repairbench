diff --git a/tmp/f8f6b81f-03b7-4931-8340-b6a0454fb879_buggy.java b/tmp/cd6d6894-7213-4d18-8cbf-0bb879a2991f_fixed.java
index 47915ed..0483325 100644
--- a/tmp/f8f6b81f-03b7-4931-8340-b6a0454fb879_buggy.java
+++ b/tmp/cd6d6894-7213-4d18-8cbf-0bb879a2991f_fixed.java
@@ -1,22 +1,25 @@
 /* (non-Javadoc)
  * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
  */
 public Object answer(InvocationOnMock invocation) {
     if (methodsGuru.isToString(invocation.getMethod())) {
         Object mock = invocation.getMock();
         MockName name = mockUtil.getMockName(mock);
         if (name.isDefault()) {
             return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
         } else {
             return name.toString();
         }
     } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
-            //see issue 184.
-            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
-            //Only for compareTo() method by the Comparable interface
+        // Check if the references are the same
+        Object[] args = invocation.getArguments();
+        if (args.length == 1 && args[0] == invocation.getMock()) {
+            return 0; // Return 0 if comparing the same reference
+        }
+        // Mocks by default should return 1 if references are different
         return 1;
     }
     
     Class<?> returnType = invocation.getMethod().getReturnType();
     return returnValueFor(returnType);
 }
\ No newline at end of file
