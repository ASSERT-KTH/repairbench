diff --git a/tmp/0a6c2018-31d7-4051-aad3-c6307cd51262_buggy.java b/tmp/53024263-c39f-4d7a-98f6-a460cd220247_fixed.java
index addeb8d..143633d 100644
--- a/tmp/0a6c2018-31d7-4051-aad3-c6307cd51262_buggy.java
+++ b/tmp/53024263-c39f-4d7a-98f6-a460cd220247_fixed.java
@@ -1,38 +1,38 @@
 /**
  * Searches the string builder to find the first reference to the specified
  * string starting searching from the given index.
  * <p>
  * Note that a null input string will return -1, whereas the JDK throws an exception.
  * 
  * @param str  the string to find, null returns -1
  * @param startIndex  the index to start at, invalid index rounded to edge
  * @return the first index of the string, or -1 if not found
  */
 public int indexOf(String str, int startIndex) {
     startIndex = (startIndex < 0 ? 0 : startIndex);
     if (str == null || startIndex >= size) {
         return -1;
     }
     int strLen = str.length();
     if (strLen == 1) {
         return indexOf(str.charAt(0), startIndex);
     }
     if (strLen == 0) {
         return startIndex;
     }
     if (strLen > size) {
         return -1;
     }
     char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+    int len = size - strLen; // Use size instead of thisBuf.length
     outer:
-        for (int i = startIndex; i < len; i++) {
+    for (int i = startIndex; i <= len; i++) { // Change '<' to '<='
         for (int j = 0; j < strLen; j++) {
             if (str.charAt(j) != thisBuf[i + j]) {
                 continue outer;
             }
         }
         return i;
     }
     return -1;
 }
\ No newline at end of file
