diff --git a/tmp/2a52faef-2322-4c79-b43c-5e15dd0f5be6_buggy.java b/tmp/82db943e-5c04-4a14-9168-bc5a24a9adee_fixed.java
index 490e9f7..c739ac9 100644
--- a/tmp/2a52faef-2322-4c79-b43c-5e15dd0f5be6_buggy.java
+++ b/tmp/82db943e-5c04-4a14-9168-bc5a24a9adee_fixed.java
@@ -1,11 +1,35 @@
-    /**
-     * <p>
-     * Gets the fraction percentage as a <tt>double</tt>. This calculates the
-     * fraction as the numerator divided by denominator multiplied by 100.
-     * </p>
-     *
-     * @return the fraction percentage as a <tt>double</tt>.
-     */
-    public double percentageValue() {
-        return multiply(100).doubleValue();
+static String unescape(String string) {
+    if (!string.contains("&"))
+        return string;
+
+    Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
+    StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
+
+    while (m.find()) {
+        int charval = -1;
+        String num = m.group(3);
+        if (num != null) {
+            try {
+                int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                charval = Integer.valueOf(num, base);
+            } catch (NumberFormatException e) {
+                // If the number is invalid, we should not process it further
+                continue;
+            }
+        } else {
+            String name = m.group(1);
+            if (full.containsKey(name))
+                charval = full.get(name);
+        }
+
+        // Ensure charval is within the valid range for characters
+        if (charval != -1 && charval >= 0 && charval <= 0xFFFF) {
+            String c = Character.toString((char) charval);
+            m.appendReplacement(accum, Matcher.quoteReplacement(c));
+        } else {
+            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
+        }
+    }
+    m.appendTail(accum);
+    return accum.toString();
 }
\ No newline at end of file
