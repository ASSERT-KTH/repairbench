diff --git a/tmp/1286a716-815a-43de-a6b5-ab4c6318b1ef_buggy.java b/tmp/87c0a4ec-f5aa-4496-b001-317042f4cfee_fixed.java
index 27f2719..a15d2a7 100644
--- a/tmp/1286a716-815a-43de-a6b5-ab4c6318b1ef_buggy.java
+++ b/tmp/87c0a4ec-f5aa-4496-b001-317042f4cfee_fixed.java
@@ -1,90 +1,74 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
-        if (type.equals("3")) {
-
+    switch (type) {
+        case "3":
             getLastLocation(position, null);
-
             position.set(Position.KEY_RESULT, sentence.substring(3));
-
             return position;
 
-        } else if (type.equals("5")) {
-
+        case "5":
             String[] values = sentence.split(",");
-
             getLastLocation(position, null);
-
             position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
             if (values.length >= 4) {
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
             }
-
             return position;
 
-        } else if (type.equals("B") || type.equals("D")) {
-
-            Parser parser = new Parser(PATTERN_BD, sentence);
-            if (!parser.matches()) {
+        case "B":
+        case "D":
+            Parser parserBD = new Parser(PATTERN_BD, sentence);
+            if (!parserBD.matches()) {
                 return null;
             }
-
-            decodeFix(position, parser);
-            decodeState(position, parser);
-
-            position.set(Position.KEY_SATELLITES, parser.nextInt(0));
-            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
-            position.set(Position.KEY_HDOP, parser.nextDouble(0));
-
+            decodeFix(position, parserBD);
+            decodeState(position, parserBD);
+            position.set(Position.KEY_SATELLITES, parserBD.nextInt(0));
+            position.set(Position.KEY_SATELLITES_VISIBLE, parserBD.nextInt(0));
+            position.set(Position.KEY_HDOP, parserBD.nextDouble(0));
             return position;
 
-        } else if (type.equals("C")) {
-
-            Parser parser = new Parser(PATTERN_C, sentence);
-            if (!parser.matches()) {
+        case "C":
+            Parser parserC = new Parser(PATTERN_C, sentence);
+            if (!parserC.matches()) {
                 return null;
             }
-
-            decodeFix(position, parser);
-            decodeState(position, parser);
-
+            decodeFix(position, parserC);
+            decodeState(position, parserC);
             return position;
 
-        } else if (type.equals("A")) {
-
-            Parser parser = new Parser(PATTERN_A, sentence);
-            if (!parser.matches()) {
+        case "A":
+            Parser parserA = new Parser(PATTERN_A, sentence);
+            if (!parserA.matches()) {
                 return null;
             }
-
-            decodeFix(position, parser);
-
+            decodeFix(position, parserA);
             return position;
-
     }
 
     return null;
 }
\ No newline at end of file
