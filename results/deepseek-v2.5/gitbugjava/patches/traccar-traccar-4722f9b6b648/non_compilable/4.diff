diff --git a/tmp/0e1cd569-d301-4954-963d-7e762f48d4cd_buggy.java b/tmp/fe5997ca-4d5d-47c3-928e-6cb9e4aadec2_fixed.java
index c84c989..6178ced 100644
--- a/tmp/0e1cd569-d301-4954-963d-7e762f48d4cd_buggy.java
+++ b/tmp/fe5997ca-4d5d-47c3-928e-6cb9e4aadec2_fixed.java
@@ -1,27 +1,40 @@
 private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
     buf.readUnsignedShortLE(); // length
 
     buf.skipBytes(3); // identification header
     buf.readUnsignedIntLE(); // index
 
     DeviceSession deviceSession = getDeviceSession(
             channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     buf.readUnsignedByte(); // session status
     buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+    long dateTime = buf.readUnsignedIntLE(); // date and time
+
+    // Ensure the date and time value is within a reasonable range
+    if (dateTime > 25 * 60 * 60) {
+        dateTime = 0; // Reset to zero or handle as needed
+    }
+
+    DateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
+    formatter.setTimeZone(TimeZone.getTimeZone("UTC"));
+    try {
+        position.setTime(formatter.parse(String.format("%08d%06d", dateTime / 1000000, dateTime % 1000000)));
+    } catch (ParseException e) {
+        throw new RuntimeException("Failed to parse date", e);
+    }
 
     buf.skipBytes(23); // coordinates block
 
     buf.skipBytes(3); // data tag header
     decodeMinimalDataSet(position, buf);
 
     return position;
 }
\ No newline at end of file
