diff --git a/tmp/2ccec5c1-ec86-4a63-b829-6a6132f4fcd1_buggy.java b/tmp/366aa6b1-e250-4610-954c-3d3315f996d1_fixed.java
index 016a7f6..1949b29 100644
--- a/tmp/2ccec5c1-ec86-4a63-b829-6a6132f4fcd1_buggy.java
+++ b/tmp/366aa6b1-e250-4610-954c-3d3315f996d1_fixed.java
@@ -1,29 +1,41 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank) return;
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
+        // Ensure that leading and trailing whitespaces are removed only if they are not necessary for formatting
+        if (normaliseWhite && (trimLeading || trimTrailing)) {
+            String coreValue = coreValue();
+            if (trimLeading && coreValue.startsWith(" ")) {
+                coreValue = coreValue.substring(1);
+            }
+            if (trimTrailing && coreValue.endsWith(" ")) {
+                coreValue = coreValue.substring(0, coreValue.length() - 1);
+            }
+            Entities.escape(accum, coreValue, out, false, normaliseWhite, false, false);
+        } else {
             Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
         }
+    }
\ No newline at end of file
