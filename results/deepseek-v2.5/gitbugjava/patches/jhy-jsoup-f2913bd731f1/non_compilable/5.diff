diff --git a/tmp/c26c0102-8dc8-40ee-9944-338d368ec1ff_buggy.java b/tmp/0c58eb3e-6efa-4b39-83cf-d544cefcbe86_fixed.java
index 016a7f6..d5e3614 100644
--- a/tmp/c26c0102-8dc8-40ee-9944-338d368ec1ff_buggy.java
+++ b/tmp/0c58eb3e-6efa-4b39-83cf-d544cefcbe86_fixed.java
@@ -1,29 +1,38 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
             (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
         )
             indent(accum, depth, out);
     }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+    // Trim leading and trailing whitespace if needed
+    String coreValue = coreValue();
+    if (trimLeading) {
+        coreValue = coreValue.replaceFirst("^\\s+", "");
+    }
+    if (trimTrailing) {
+        coreValue = coreValue.replaceFirst("\\s+$", "");
+    }
+
+    Entities.escape(accum, coreValue, out, false, normaliseWhite, false, false);
 }
\ No newline at end of file
