diff --git a/tmp/a6b3b764-1b2b-4375-8249-b8a48befa5ba_buggy.java b/tmp/ea1f88c6-8bcf-47c4-a339-124f5f2bab10_fixed.java
index 9739964..2aae830 100644
--- a/tmp/a6b3b764-1b2b-4375-8249-b8a48befa5ba_buggy.java
+++ b/tmp/ea1f88c6-8bcf-47c4-a339-124f5f2bab10_fixed.java
@@ -1,27 +1,30 @@
 public int[] calculateSpans(int[] prices) {
-
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
-      while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+        // Pop elements from stack while stack is not empty and
+        // the price at the index at the top of the stack is less than or equal to current price
+        while (!indexStack.isEmpty() && prices[indexStack.peek()] <= prices[i]) {
             indexStack.pop();
+        }
 
-      // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
+        // If the stack is empty, the price at index 'i' is greater than all previous prices
+        if (indexStack.isEmpty()) {
             spans[i] = i + 1;
-      else
+        } else {
+            // Otherwise, the span is the difference between the current index and the index at the top of the stack
             spans[i] = i - indexStack.peek();
+        }
 
+        // Push the current index onto the stack
         indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
