diff --git a/tmp/bf54f855-cf69-43b3-8734-b2beedea9f46_buggy.java b/tmp/d62c2aa5-3a3e-4a43-b323-54d52b9afa6a_fixed.java
index 9739964..1e88c91 100644
--- a/tmp/bf54f855-cf69-43b3-8734-b2beedea9f46_buggy.java
+++ b/tmp/d62c2aa5-3a3e-4a43-b323-54d52b9afa6a_fixed.java
@@ -1,27 +1,27 @@
 public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
-      while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+        // Pop elements from stack while stack is not empty and the current price
+        // is greater than or equal to the price at the index at the top of the stack
+        while (!indexStack.isEmpty() && prices[indexStack.peek()] <= prices[i])
             indexStack.pop();
 
-      // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
-        spans[i] = i + 1;
-      else
-        spans[i] = i - indexStack.peek();
+        // If the index stack is empty, the price at index 'i' is greater than or equal to
+        // all previous values, otherwise the span is the difference between the current index
+        // and the index at the top of the stack (which represents the previous greater element)
+        spans[i] = indexStack.isEmpty() ? i + 1 : i - indexStack.peek();
 
+        // Push the current index onto the stack
         indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
