diff --git a/tmp/4826af29-a3ce-4919-8f5f-9294d74fb188_buggy.java b/tmp/18d0d09a-7d5b-481c-a61f-1c2a3adb86e8_fixed.java
index 2444d12..50c8c94 100644
--- a/tmp/4826af29-a3ce-4919-8f5f-9294d74fb188_buggy.java
+++ b/tmp/18d0d09a-7d5b-481c-a61f-1c2a3adb86e8_fixed.java
@@ -1,29 +1,35 @@
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
         Scanner tokens = new Scanner(exp);
 
+        try {
             while (tokens.hasNext()) {
                 if (tokens.hasNextInt()) {
                     s.push(tokens.nextInt()); // If int then push to stack
                 } else { // else pop top two values and perform the operation
                     int num2 = s.pop();
                     int num1 = s.pop();
                     String op = tokens.next();
 
                     switch (op) {
                         case "+" -> s.push(num1 + num2);
                         case "-" -> s.push(num1 - num2);
                         case "*" -> s.push(num1 * num2);
                         case "/" -> s.push(num1 / num2);
                         default -> throw new IllegalArgumentException("exp contains an unknown operation.");
                     }
                     //  "+", "-", "*", "/"
                 }
             }
+        } catch (EmptyStackException e) {
+            throw new IllegalArgumentException("exp is not a proper postfix expression.");
+        } finally {
             tokens.close();
+        }
+
         if (s.size() != 1) {
             throw new IllegalArgumentException("exp is not a proper postfix expression.");
         }
         return s.pop();
     }
\ No newline at end of file
