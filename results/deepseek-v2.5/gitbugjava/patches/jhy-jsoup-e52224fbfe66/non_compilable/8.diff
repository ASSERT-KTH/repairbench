diff --git a/tmp/cd639d5c-87b8-4525-b511-dc74c4660460_buggy.java b/tmp/8c3b15ab-c59d-469f-a388-a4a04aa2e5fe_fixed.java
index acd5eb5..61676b3 100644
--- a/tmp/cd639d5c-87b8-4525-b511-dc74c4660460_buggy.java
+++ b/tmp/8c3b15ab-c59d-469f-a388-a4a04aa2e5fe_fixed.java
@@ -1,32 +1,38 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             Node prev = previousSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
                 || (prev instanceof Element && ((Element) prev).isBlock())
                 ;
             if (couldSkip && isBlank) return;
 
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
+        // Fix: Ensure the text node's whitespace is normalized before escaping
+        if (normaliseWhite && isBlank()) {
+            String normalized = coreValue().replaceAll("\\s+", " ");
+            Entities.escape(accum, normalized, out, false, normaliseWhite, trimLeading, trimTrailing);
+        } else {
             Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
         }
+    }
\ No newline at end of file
