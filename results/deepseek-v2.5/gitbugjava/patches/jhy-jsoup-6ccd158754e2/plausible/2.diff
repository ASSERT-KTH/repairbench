diff --git a/tmp/44a69427-a00a-4a3a-a890-d392d23b15bb_buggy.java b/tmp/244400dd-5946-4fff-b26d-1db983e7919f_fixed.java
index 23f078d..a8f1149 100644
--- a/tmp/44a69427-a00a-4a3a-a890-d392d23b15bb_buggy.java
+++ b/tmp/244400dd-5946-4fff-b26d-1db983e7919f_fixed.java
@@ -1,14 +1,20 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // Replace "%3F" (which is the encoded form of '?') with the correct encoding
+            if (encoded.equals("%3F")) {
+                sb.append(String.format("%%%02X%%%02X", (c >> 8) & 0xFF, c & 0xFF));
+            } else {
+                sb.append(encoded);
+            }
         } else {
             sb.append((char) c);
         }
+        i += Character.charCount(c); // Move to the next code point
     }
 }
\ No newline at end of file
