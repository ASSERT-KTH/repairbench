diff --git a/tmp/1514f43b-c6e5-4757-becd-b959529434b9_buggy.java b/tmp/5768ea11-5a64-47a9-a8fb-0dede7673093_fixed.java
index 3ec995f..7e23bee 100644
--- a/tmp/1514f43b-c6e5-4757-becd-b959529434b9_buggy.java
+++ b/tmp/5768ea11-5a64-47a9-a8fb-0dede7673093_fixed.java
@@ -1,26 +1,23 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+
+    String[] parts = version.split("[^\\d]+");
+    int[] versionParts = new int[3];
+    int index = 0;
+    for (String part : parts) {
+        if (!part.isEmpty()) {
+            versionParts[index++] = Integer.parseInt(part);
+            if (index == 3) {
+                break;
+            }
+        }
+    }
+    
+    int major = versionParts[0];
+    int minor = versionParts[1] > 99 ? 0 : versionParts[1];
+    int patch = versionParts[2] > 99 ? 0 : versionParts[2];
+
+    return major * 100 + minor * 10 + patch;
 }
\ No newline at end of file
