diff --git a/tmp/f0a0dd65-030b-4674-9a73-e05c10bc1abb_buggy.java b/tmp/aad0191f-47ae-44d1-94e2-84c8cd3e5f19_fixed.java
index 3ec995f..ea68595 100644
--- a/tmp/f0a0dd65-030b-4674-9a73-e05c10bc1abb_buggy.java
+++ b/tmp/aad0191f-47ae-44d1-94e2-84c8cd3e5f19_fixed.java
@@ -1,26 +1,22 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+    String[] versionParts = version.split("[^\\d]+");
+    int major = 0, minor = 0, patch = 0;
+    try {
+        if (versionParts.length > 0) {
+            major = Integer.parseInt(versionParts[0]);
+        }
+        if (versionParts.length > 1) {
+            minor = Integer.parseInt(versionParts[1]);
+        }
+        if (versionParts.length > 2) {
+            patch = Integer.parseInt(versionParts[2]);
+        }
+    } catch (NumberFormatException e) {
+        // Handle any potential parsing error gracefully
+        return 0;
+    }
+    return major * 100 + minor * 10 + patch;
 }
\ No newline at end of file
