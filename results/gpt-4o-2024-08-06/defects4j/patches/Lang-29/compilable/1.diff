diff --git a/tmp/35bc0ebc-a15c-4e4c-b439-1c46368d522f_buggy.java b/tmp/7de01904-563e-4a7f-81fe-353c44232a35_fixed.java
index 3ec995f..202f824 100644
--- a/tmp/35bc0ebc-a15c-4e4c-b439-1c46368d522f_buggy.java
+++ b/tmp/7de01904-563e-4a7f-81fe-353c44232a35_fixed.java
@@ -1,26 +1,27 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+    // Extract version numbers
+    String[] components = version.split("\\D+");
+    if (components.length == 0 || components[0].isEmpty()) {
+        return 0;
+    }
+    
+    try {
+        // Parse the major version
+        int major = Integer.parseInt(components[0]);
+        if (major == 1) {
+            // Java 1.x versions
+            int minor = components.length > 1 ? Integer.parseInt(components[1]) : 0;
+            int patch = components.length > 2 ? Integer.parseInt(components[2]) : 0;
+            return 100 + minor * 10 + patch;
+        } else {
+            // Java 9 and later
+            int minor = components.length > 1 ? Integer.parseInt(components[1]) : 0;
+            return major * 10 + minor;
+        }
+    } catch (NumberFormatException e) {
+        return 0;
+    }
 }
\ No newline at end of file
