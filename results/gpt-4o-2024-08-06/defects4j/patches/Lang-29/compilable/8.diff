diff --git a/tmp/d69561e6-5f25-49a1-8625-f3a6dcbd9211_buggy.java b/tmp/4a723116-5dbf-44b3-a181-d5c2f8bea3ca_fixed.java
index 3ec995f..33cd132 100644
--- a/tmp/d69561e6-5f25-49a1-8625-f3a6dcbd9211_buggy.java
+++ b/tmp/4a723116-5dbf-44b3-a181-d5c2f8bea3ca_fixed.java
@@ -1,26 +1,17 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.trim().isEmpty()) {
+        return 0;
+    }
+    String[] versionParts = version.split("[^\\d]+");
+    if (versionParts.length < 2) {
+        return 0;
+    }
+    try {
+        int major = Integer.parseInt(versionParts[0]);
+        int minor = Integer.parseInt(versionParts[1]);
+        int patch = (versionParts.length > 2) ? Integer.parseInt(versionParts[2]) : 0;
+        return major * 100 + minor * 10 + patch;
+    } catch (NumberFormatException e) {
+        return 0;
+    }
 }
\ No newline at end of file
