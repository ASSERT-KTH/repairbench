diff --git a/tmp/610ec847-0ee4-4bcf-a905-7f0d1befafeb_buggy.java b/tmp/06fd17e1-189c-4fdd-860e-795fc8e67228_fixed.java
index 3ec995f..4cc3ed8 100644
--- a/tmp/610ec847-0ee4-4bcf-a905-7f0d1befafeb_buggy.java
+++ b/tmp/06fd17e1-189c-4fdd-860e-795fc8e67228_fixed.java
@@ -1,26 +1,27 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+    String[] versionParts = version.split("\\D+"); // Split on any non-digit character
+    int major = 0;
+    int minor = 0;
+    int patch = 0;
+
+    if (versionParts.length > 0 && !versionParts[0].isEmpty()) {
+        major = Integer.parseInt(versionParts[0]);
+    }
+    if (versionParts.length > 1 && !versionParts[1].isEmpty()) {
+        minor = Integer.parseInt(versionParts[1]);
+    }
+    if (versionParts.length > 2 && !versionParts[2].isEmpty()) {
+        patch = Integer.parseInt(versionParts[2]);
+    }
+
+    if (major == 1) {
+        return (major * 100) + (minor * 10) + patch;
+    } else if (major > 1) {
+        return (major * 10) + minor;
+    }
+
+    return 0;
 }
\ No newline at end of file
