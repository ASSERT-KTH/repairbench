diff --git a/tmp/37899065-78b0-4a86-8e82-980a62dda23b_buggy.java b/tmp/5201cd84-2b48-4870-a486-0dded96a0c6b_fixed.java
index 3ec995f..ce4a6c8 100644
--- a/tmp/37899065-78b0-4a86-8e82-980a62dda23b_buggy.java
+++ b/tmp/5201cd84-2b48-4870-a486-0dded96a0c6b_fixed.java
@@ -1,26 +1,27 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+
+    // Remove any non-numeric prefixes
+    int start = 0;
+    while (start < version.length() && !Character.isDigit(version.charAt(start))) {
+        start++;
+    }
+
+    // Parse the version components
+    String[] parts = version.substring(start).split("\\.");
+    int major = parts.length > 0 ? parseInt(parts[0]) * 100 : 0;
+    int minor = parts.length > 1 ? parseInt(parts[1]) * 10 : 0;
+    int patch = parts.length > 2 ? parseInt(parts[2]) : 0;
+
+    return major + minor + patch;
+}
+
+private static int parseInt(String part) {
+    try {
+        return Integer.parseInt(part);
+    } catch (NumberFormatException e) {
+        return 0;
+    }
 }
\ No newline at end of file
