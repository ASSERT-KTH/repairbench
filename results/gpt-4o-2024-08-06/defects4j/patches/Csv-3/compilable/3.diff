diff --git a/tmp/014e9c57-84ff-414b-ba37-1abbe2084f18_buggy.java b/tmp/dade737e-b040-4cb6-97dd-81ef0928b636_fixed.java
index 1ad070d..8e44832 100644
--- a/tmp/014e9c57-84ff-414b-ba37-1abbe2084f18_buggy.java
+++ b/tmp/dade737e-b040-4cb6-97dd-81ef0928b636_fixed.java
@@ -1,38 +1,22 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
     int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case '\\':
+            return '\\'; // Return the escape character itself when followed by another backslash
+        default:
+            // Return the character itself if it's not a recognized escape sequence
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
-        default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
         }
     }
\ No newline at end of file
