diff --git a/tmp/b375eb2f-0484-4d0c-b914-55fbfa246647_buggy.java b/tmp/53bf7f6d-9e08-4834-8138-e399ef3a1c94_fixed.java
index 1ad070d..7e3da16 100644
--- a/tmp/b375eb2f-0484-4d0c-b914-55fbfa246647_buggy.java
+++ b/tmp/53bf7f6d-9e08-4834-8138-e399ef3a1c94_fixed.java
@@ -1,38 +1,24 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
+        case '\\':
+            return '\\'; // Unescape the backslash
+        // Handle any other characters that need to be escaped
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // Return the character itself if it's not a known escape sequence
             return c;
-            // indicate unexpected char - available from in.getLastChar()
         }
     }
\ No newline at end of file
