diff --git a/tmp/f5c5904b-a9e0-4cd1-9b31-13ebb2b75a17_buggy.java b/tmp/412f711d-4301-4711-abf5-92d01a37195f_fixed.java
index 1c53d31..250db21 100644
--- a/tmp/f5c5904b-a9e0-4cd1-9b31-13ebb2b75a17_buggy.java
+++ b/tmp/412f711d-4301-4711-abf5-92d01a37195f_fixed.java
@@ -1,20 +1,25 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
-    TypeAdapter<?> typeAdapter;
+    Object instance;
+
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
+      instance = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
+      instance = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+
+    if (instance instanceof TypeAdapter) {
+      return ((TypeAdapter<?>) instance).nullSafe();
+    } else {
+      throw new IllegalStateException("Instance not a TypeAdapter");
+    }
   }
\ No newline at end of file
