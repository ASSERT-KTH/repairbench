diff --git a/tmp/9f34a5ca-5310-40a4-8612-ce87bdc42a1d_buggy.java b/tmp/64557566-416a-4fa1-a952-6c12aa212793_fixed.java
index 72a422c..e3755aa 100644
--- a/tmp/9f34a5ca-5310-40a4-8612-ce87bdc42a1d_buggy.java
+++ b/tmp/64557566-416a-4fa1-a952-6c12aa212793_fixed.java
@@ -1,51 +1,56 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
 
             // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                return 0; // No valid number found after "&#x"
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Move the end position until we find a ';' or we've reached the end of input
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end == start) {
+            return 0; // No digits between '&#' or '&#x' and next character/';'
+        }
+
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
