diff --git a/tmp/a56bf3cd-8d41-4ae7-80ec-ae4c8bb8dee5_buggy.java b/tmp/d37b3cd8-7b4a-43c0-93fc-71124bc0c556_fixed.java
index 72a422c..af0e7de 100644
--- a/tmp/a56bf3cd-8d41-4ae7-80ec-ae4c8bb8dee5_buggy.java
+++ b/tmp/d37b3cd8-7b4a-43c0-93fc-71124bc0c556_fixed.java
@@ -1,51 +1,60 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if(start < seqEnd) { // Ensure there's at least one character after &#
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+
+        // Find end of numeric entity
+        while(end < seqEnd && input.charAt(end) != ';' && Character.isDigit(input.charAt(end)) || (isHex && ((input.charAt(end) >= 'a' && input.charAt(end) <= 'f') || (input.charAt(end) >= 'A' && input.charAt(end) <= 'F')))) {
+            end++;
+        }
+
+        // Check if end is valid
+        if (end == start) { // No valid number found
+            return 0;
+        }
+
+        // Handle numbers without a trailing ;
+        if(end < seqEnd && input.charAt(end) == ';') {
             end++;
         }
 
         int entityValue;
         try {
             if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(input.subSequence(start, end).toString().replace(";", ""), 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(input.subSequence(start, end).toString().replace(";", ""), 10);
             }
         } catch(NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return (end - index); // Return the full number of characters processed
     }
     return 0;
 }
\ No newline at end of file
