diff --git a/tmp/f2583116-2170-4fb0-b7de-33d52395a5d0_buggy.java b/tmp/5f8d0f2d-30ed-4c98-8413-b9589d2c4259_fixed.java
index 72a422c..004eb26 100644
--- a/tmp/f2583116-2170-4fb0-b7de-33d52395a5d0_buggy.java
+++ b/tmp/5f8d0f2d-30ed-4c98-8413-b9589d2c4259_fixed.java
@@ -1,51 +1,53 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start < seqEnd) { // Check that there's at least something to process
                 char firstChar = input.charAt(start);
                 if (firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
                 }
 
                 int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+                while (end < seqEnd && input.charAt(end) != ';') {
                     end++;
                 }
 
+                String entitySubstring = input.subSequence(start, end).toString();
+                if (entitySubstring.length() == 0) {
+                    return 0;  // No valid number sequence
+                }
+
                 int entityValue;
                 try {
                     if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                        entityValue = Integer.parseInt(entitySubstring, 16);
                     } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                        entityValue = Integer.parseInt(entitySubstring, 10);
                     }
                 } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                    System.err.println("FAIL: " + entitySubstring + "[" + start + "][" + end + "]");
                     return 0;
                 }
 
                 if (entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0);
+            }
         }
         return 0;
     }
\ No newline at end of file
