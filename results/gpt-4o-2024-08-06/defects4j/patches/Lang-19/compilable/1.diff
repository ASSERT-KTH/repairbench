diff --git a/tmp/40d34ca5-899a-4e60-babe-cf9743686d56_buggy.java b/tmp/38b335a7-6dbd-4468-8b8f-7a0e6b8421db_fixed.java
index 72a422c..cb8f81e 100644
--- a/tmp/40d34ca5-899a-4e60-babe-cf9743686d56_buggy.java
+++ b/tmp/38b335a7-6dbd-4468-8b8f-7a0e6b8421db_fixed.java
@@ -1,51 +1,59 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < seqEnd) { // Check if there is a character at 'start'
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
                 // Check there's more than just an x after the &#
+                if (start >= seqEnd) { // No more characters after 'x'
+                    return 0;
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+
+            // Update the loop to avoid index out of bounds
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end >= seqEnd || input.charAt(end) != ';') { // Check if reached end without finding ';'
+                return 0;
+            }
+
             int entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
                 return 0;
             }
 
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
+    }
     return 0;
 }
\ No newline at end of file
