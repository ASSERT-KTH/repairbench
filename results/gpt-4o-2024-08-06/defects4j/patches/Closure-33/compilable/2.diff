diff --git a/tmp/3c2cc244-3a26-4852-a672-cc3670a79e84_buggy.java b/tmp/c21c93ca-a0d5-447c-a0dc-6581b88fa49f_fixed.java
index fb2b020..7b25751 100644
--- a/tmp/3c2cc244-3a26-4852-a672-cc3670a79e84_buggy.java
+++ b/tmp/c21c93ca-a0d5-447c-a0dc-6581b88fa49f_fixed.java
@@ -1,27 +1,23 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
+        if (!isPropertyTypeDeclared(prop) || !hasProperty(prop)) {
           JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
+          if (!hasProperty(prop) && typeToInfer != null) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
