diff --git a/tmp/32bc2928-6505-46ca-8a2b-7f554f3b9ba2_buggy.java b/tmp/fba05780-0672-4d9e-b6f6-b114d5c8834c_fixed.java
index fb2b020..c8b7dd0 100644
--- a/tmp/32bc2928-6505-46ca-8a2b-7f554f3b9ba2_buggy.java
+++ b/tmp/fba05780-0672-4d9e-b6f6-b114d5c8834c_fixed.java
@@ -1,27 +1,23 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
+    // We only want to match constraints on anonymous types,
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+            // Check if the property type is undefined to infer the VOID_TYPE correctly
+            if (propType.isVoidType()) {
+              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);
+            } else {
+              typeToInfer = getNativeType(JSTypeNative.UNKNOWN_TYPE)
                   .getLeastSupertype(propType);
             }
+          }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
