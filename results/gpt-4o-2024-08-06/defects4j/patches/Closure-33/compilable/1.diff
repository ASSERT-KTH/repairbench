diff --git a/tmp/882184df-e436-4c60-8b1f-ee1121a15aed_buggy.java b/tmp/dc79127b-66da-4d4d-ac8a-0fe2b2345b4f_fixed.java
index fb2b020..c2aaf54 100644
--- a/tmp/882184df-e436-4c60-8b1f-ee1121a15aed_buggy.java
+++ b/tmp/dc79127b-66da-4d4d-ac8a-0fe2b2345b4f_fixed.java
@@ -1,27 +1,28 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // taking each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+          // Directly define the property with UNDEFINED as the least supertype
+          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
-          }
           defineInferredProperty(prop, typeToInfer, null);
+        } else if (!isPropertyTypeDeclared(prop)) {
+          // Only update type if the property type is not declared
+          defineInferredProperty(prop, propType, null);
         }
       }
     }
   }
\ No newline at end of file
