diff --git a/tmp/3f86b069-02ca-4ff7-9c20-d9c7df4fe792_buggy.java b/tmp/ac05f5f0-a4d0-4f32-b1e7-c4eb84216afb_fixed.java
index fb2b020..7387950 100644
--- a/tmp/3f86b069-02ca-4ff7-9c20-d9c7df4fe792_buggy.java
+++ b/tmp/ac05f5f0-a4d0-4f32-b1e7-c4eb84216afb_fixed.java
@@ -1,27 +1,17 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraintObj.isRecordType()) {
+  if (constraintObj.isRecordType() || constraintObj.isAnonymous()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
