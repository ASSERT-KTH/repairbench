diff --git a/tmp/1fd2907e-4fab-4d8f-a5f1-c26158008b99_buggy.java b/tmp/95a91ce8-3077-4b68-acdb-88b7a8605d48_fixed.java
index d64eec3..a8fd4c1 100644
--- a/tmp/1fd2907e-4fab-4d8f-a5f1-c26158008b99_buggy.java
+++ b/tmp/95a91ce8-3077-4b68-acdb-88b7a8605d48_fixed.java
@@ -1,122 +1,84 @@
-    /**
-     * Draws the axis label.
-     *
-     * @param label  the label text.
-     * @param g2  the graphics device.
-     * @param plotArea  the plot area.
-     * @param dataArea  the area inside the axes.
-     * @param edge  the location of the axis.
-     * @param state  the axis state (<code>null</code> not permitted).
-     * @param plotState  the plot state (<code>null</code> permitted).
-     *
-     * @return Information about the axis.
-     */
     protected AxisState drawLabel(String label, Graphics2D g2, 
             Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, 
             AxisState state, PlotRenderingInfo plotState) {
         
         // it is unlikely that 'state' will be null, but check anyway...
         if (state == null) {
             throw new IllegalArgumentException("Null 'state' argument.");
         }
         
         if ((label == null) || (label.equals(""))) {
             return state;
         }
 
         Font font = getLabelFont();
         RectangleInsets insets = getLabelInsets();
         g2.setFont(font);
         g2.setPaint(getLabelPaint());
         FontMetrics fm = g2.getFontMetrics();
         Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
         Shape hotspot = null;
 
+        AffineTransform t;
+        float w, h, labelx, labely;
+        
+        if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {
+            t = AffineTransform.getRotateInstance(
+                    getLabelAngle(), labelBounds.getCenterX(), 
+                    labelBounds.getCenterY());
+            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
+            labelBounds = rotatedLabelBounds.getBounds2D();
+            w = (float) labelBounds.getWidth();
+            h = (float) labelBounds.getHeight();
+            labelx = (float) dataArea.getCenterX();
+            labely = edge == RectangleEdge.TOP 
+                    ? (float) (state.getCursor() - insets.getBottom() - h / 2.0)
+                    : (float) (state.getCursor() + insets.getTop() + h / 2.0);
+            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
+                    labely - h / 2.0f, w, h);
+            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
+                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
+            float cursorUpdate = insets.getTop() + labelBounds.getHeight() + insets.getBottom();
             if (edge == RectangleEdge.TOP) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() - insets.getBottom() 
-                    - h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorUp(insets.getTop() + labelBounds.getHeight() 
-                    + insets.getBottom());
+                state.cursorUp(cursorUpdate);
+            } else {
+                state.cursorDown(cursorUpdate);
             }
-        else if (edge == RectangleEdge.BOTTOM) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() + insets.getTop() 
-                    + h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorDown(insets.getTop() + labelBounds.getHeight() 
-                    + insets.getBottom());
         }
-        else if (edge == RectangleEdge.LEFT) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() - insets.getRight() 
-                    - w / 2.0);
-            float labely = (float) dataArea.getCenterY();
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
-                    + insets.getRight());
-        }
-        else if (edge == RectangleEdge.RIGHT) {
-
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() + Math.PI / 2.0, 
+        else if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {
+            t = AffineTransform.getRotateInstance(
+                    (edge == RectangleEdge.LEFT ? -1 : 1) * Math.PI / 2.0 + getLabelAngle(), 
                     labelBounds.getCenterX(), labelBounds.getCenterY());
             Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
             labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() 
-                            + insets.getLeft() + w / 2.0);
-            float labely = (float) (dataArea.getY() + dataArea.getHeight() 
-                    / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, 
-                    TextAnchor.CENTER);
+            w = (float) labelBounds.getWidth();
+            h = (float) labelBounds.getHeight();
+            labelx = edge == RectangleEdge.LEFT 
+                    ? (float) (state.getCursor() - insets.getRight() - w / 2.0)
+                    : (float) (state.getCursor() + insets.getLeft() + w / 2.0);
+            labely = (float) dataArea.getCenterY();
             hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
                     labely - h / 2.0f, w, h);
-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
-                    + insets.getRight());
+            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
+                    TextAnchor.CENTER, (edge == RectangleEdge.LEFT ? -1 : 1) * Math.PI / 2.0 + getLabelAngle(), 
+                    TextAnchor.CENTER);
+            float cursorUpdate = insets.getLeft() + labelBounds.getWidth() + insets.getRight();
+            if (edge == RectangleEdge.LEFT) {
+                state.cursorLeft(cursorUpdate);
+            } else {
+                state.cursorRight(cursorUpdate);
+            }
+        }
 
-        }
         if (plotState != null && hotspot != null) {
             ChartRenderingInfo owner = plotState.getOwner();
+            if (owner != null) {
                 EntityCollection entities = owner.getEntityCollection();
                 if (entities != null) {
                     entities.add(new AxisLabelEntity(this, hotspot, 
                             this.labelToolTip, this.labelURL));
                 }
             }
+        }
         return state;
-
     }
\ No newline at end of file
