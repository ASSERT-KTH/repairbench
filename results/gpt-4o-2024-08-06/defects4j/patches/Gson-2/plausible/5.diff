diff --git a/tmp/7b04e9b7-7e31-4905-8db5-3cd3c4294f5c_buggy.java b/tmp/a974307a-c7a7-42cb-bed1-45b0af324516_fixed.java
index 6e45f80..bfa3eaa 100644
--- a/tmp/7b04e9b7-7e31-4905-8db5-3cd3c4294f5c_buggy.java
+++ b/tmp/a974307a-c7a7-42cb-bed1-45b0af324516_fixed.java
@@ -1,21 +1,37 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
+        // Wrap the passed typeAdapter to perform an additional runtime check
+        return new TypeAdapter<T2>() {
+          @Override
+          public void write(com.google.gson.stream.JsonWriter out, T2 value) throws java.io.IOException {
+            typeAdapter.write(out, (T1) value);
+          }
 
+          @Override
+          public T2 read(com.google.gson.stream.JsonReader in) throws java.io.IOException {
+            T1 result = typeAdapter.read(in);
+            if (result != null && !requestedType.isInstance(result)) {
+              throw new JsonSyntaxException("Expected a " + requestedType.getName() 
+                  + " but was " + result.getClass().getName());
+            }
+            return (T2) result;
           }
+        };
+      }
+      
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
