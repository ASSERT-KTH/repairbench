diff --git a/tmp/84bb4e84-8381-4df1-b98f-7fba16c3fd69_buggy.java b/tmp/0f8a944d-3b8a-4866-8c94-5a872d0dedbc_fixed.java
index bf9c086..d719179 100644
--- a/tmp/84bb4e84-8381-4df1-b98f-7fba16c3fd69_buggy.java
+++ b/tmp/0f8a944d-3b8a-4866-8c94-5a872d0dedbc_fixed.java
@@ -1,54 +1,58 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if(functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
         CompilerInput functionSource = compiler.getInput(sourceName);
         isExtern = functionSource.isExtern();
       }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
+      // Functions with explicit 'this' types must be called in a GETPROP
       // or GETELEM.
+      if (functionType.getTypeOfThis() != null && !functionType.getTypeOfThis().isUnknownType()) {
+        if (child.isGetProp() || child.isGetElem()) {
+          Node receiver = child.getFirstChild();
+          JSType receiverType = getJSType(receiver);
+          if (!receiverType.isSubtypeOf(functionType.getTypeOfThis())) {
+            report(t, n, functionType + " must be called with a \"this\" type");
+          }
+        } else {
+          report(t, n, functionType + " must be called with a \"this\" type");
+        }
+      }
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
