diff --git a/tmp/222cdb6b-9c25-4c02-b2d6-e39c81bee2d8_buggy.java b/tmp/95f1e1bb-b51b-48cd-9af2-7a817d115fc9_fixed.java
index d8b0158..d935e67 100644
--- a/tmp/222cdb6b-9c25-4c02-b2d6-e39c81bee2d8_buggy.java
+++ b/tmp/95f1e1bb-b51b-48cd-9af2-7a817d115fc9_fixed.java
@@ -1,113 +1,103 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
-    Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
+    Node methodName = callTarget.getNext();
+    if (methodName == null || !NodeUtil.isImmutableValue(methodName)) {
       return n;
     }
-    }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
     // "," is the default, it doesn't need to be explicit
-
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
+    String joinString = (methodName == null) ? "," : NodeUtil.getStringValue(methodName);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
+    StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
-    Node prev = null;
     Node elem = arrayNode.getFirstChild();
+
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
-        if (sb == null) {
-          sb = new StringBuilder();
-        } else {
+        if (sb.length() != 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
-        if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+        if (sb.length() != 0) {
+          foldedSize += sb.length() + 2; // +2 for quotes
           arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
+              Node.newString(sb.toString()).copyInformationFrom(elem));
+          sb.setLength(0); // Reset the StringBuilder
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
-      prev = elem;
       elem = elem.getNext();
     }
 
-    if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
+    if (sb.length() != 0) {
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
+          Node.newString(sb.toString()).copyInformationFrom(arrayNode));
     }
-    // one for each comma.
+
+    // one for each comma
     foldedSize += arrayFoldedChildren.size() - 1;
-
     int originalSize = InlineCostEstimator.getCost(n);
+
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return n;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString("").copyInformationFrom(n),
               foldedStringNode);
           foldedStringNode = replacement;
         }
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
       default:
-        // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return n;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
+        foldedSize += (methodName != null) ? InlineCostEstimator.getCost(methodName) : 0;
         if (foldedSize > originalSize) {
           return n;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         reportCodeChange();
         break;
     }
 
     return n;
   }
\ No newline at end of file
