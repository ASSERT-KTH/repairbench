diff --git a/tmp/ec03ad4e-ce6f-488a-bc6b-b6205eddcf88_buggy.java b/tmp/0f350643-0451-4a7c-8c0f-ecce34c8ecc0_fixed.java
index 5f1dcf2..98e1deb 100644
--- a/tmp/ec03ad4e-ce6f-488a-bc6b-b6205eddcf88_buggy.java
+++ b/tmp/0f350643-0451-4a7c-8c0f-ecce34c8ecc0_fixed.java
@@ -1,41 +1,46 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        boolean improved = false;
+        while (!improved) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
-
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = simplex;
                 }
-
-                return;
-
-            }
-
+                improved = true;
+            } else {
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
-
-            // check convergence
-                return;
+                    improved = true;
+                } else {
+                    // shrink the simplex
+                    for (int i = 1; i < simplex.length; i++) {
+                        for (int j = 0; j < simplex[i].getPointRef().length; j++) {
+                            simplex[i].getPointRef()[j] = best.getPointRef()[j] +
+                                    sigma * (simplex[i].getPointRef()[j] - best.getPointRef()[j]);
+                        }
+                    }
+                }
             }
-
         }
-
     }
\ No newline at end of file
