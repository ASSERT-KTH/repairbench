diff --git a/tmp/bef5742e-3a8d-4176-bf55-10c786e0194d_buggy.java b/tmp/7aa15755-6a9c-4f39-824c-a57e1e15cb46_fixed.java
index 5f1dcf2..6d0b2e3 100644
--- a/tmp/bef5742e-3a8d-4176-bf55-10c786e0194d_buggy.java
+++ b/tmp/7aa15755-6a9c-4f39-824c-a57e1e15cb46_fixed.java
@@ -1,41 +1,56 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        boolean improvement = false;
+        do {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    improvement = true;
                 }
-
                 return;
 
-            }
-
+            } else {
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
+                    improvement = true;
+                }
+            }
 
-            // check convergence
+            if (!improvement) {
+                // handle case when no improvement is found: shrink
+                for (int i = 1; i < simplex.length; ++i) {
+                    final double[] centroid = original[0].getPoint();
+                    final double[] vi = simplex[i].getPoint();
+                    final double[] shrunk = new double[vi.length];
+                    for (int j = 0; j < vi.length; ++j) {
+                        shrunk[j] = centroid[j] + sigma * (vi[j] - centroid[j]);
+                    }
+                    simplex[i] = new RealPointValuePair(shrunk, Double.NaN, false);
+                }
                 return;
             }
 
-        }
+        } while (true);
 
     }
\ No newline at end of file
