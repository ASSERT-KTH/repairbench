diff --git a/tmp/96658f3d-1643-46fa-bc18-dd713983dc1b_buggy.java b/tmp/165a7ef1-173b-4dc7-a384-f952ad06aa32_fixed.java
index 5f1dcf2..32b4089 100644
--- a/tmp/96658f3d-1643-46fa-bc18-dd713983dc1b_buggy.java
+++ b/tmp/165a7ef1-173b-4dc7-a384-f952ad06aa32_fixed.java
@@ -1,41 +1,48 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        boolean improvement = true;
+        while (improvement) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = simplex;
                 }
 
-                return;
+                improvement = true;
 
-            }
+            } else {
 
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
-
-            // check convergence
-                return;
+                    simplex = simplex;
+                    improvement = true;
+                } else {
+                    // shrink the simplex
+                    evaluateNewSimplex(original, sigma, comparator);
+                    improvement = false;
+                }
             }
-
         }
 
     }
\ No newline at end of file
