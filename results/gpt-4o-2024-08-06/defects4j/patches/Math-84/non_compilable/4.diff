diff --git a/tmp/361f30b8-59db-4c73-b6b3-5c35fb5427f0_buggy.java b/tmp/fc2026db-6c0e-41d1-b038-c9d182ae9457_fixed.java
index 5f1dcf2..9151c7d 100644
--- a/tmp/361f30b8-59db-4c73-b6b3-5c35fb5427f0_buggy.java
+++ b/tmp/fc2026db-6c0e-41d1-b038-c9d182ae9457_fixed.java
@@ -1,41 +1,49 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    boolean improvement = false;
+
+    while (!improvement) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                improvement = true;
             }
 
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = evaluateNewSimplex(original, gamma, comparator);
+            improvement = true;
+            return;
+        }
 
         // check convergence
+        if (checker != null && checker.converged(getIterations(), best, simplex[0])) {
             return;
         }
-
     }
-
 }
\ No newline at end of file
