diff --git a/tmp/aee27fa0-3784-4f3e-8725-a214f8f38de3_buggy.java b/tmp/e14c6489-2197-445c-a33f-38700fd81edc_fixed.java
index 5f1dcf2..d5bc7ca 100644
--- a/tmp/aee27fa0-3784-4f3e-8725-a214f8f38de3_buggy.java
+++ b/tmp/e14c6489-2197-445c-a33f-38700fd81edc_fixed.java
@@ -1,41 +1,59 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
     
-        while (true) {
-
+        boolean converged = false;
+        while (!converged) {
             incrementIterationsCounter();
             
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
             
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
                 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = expandedSimplex;
                 }
                 
-                return;
+                converged = isConverged(original, simplex);
+                continue; // skip the rest and continue with next iteration
                 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+                converged = isConverged(original, simplex);
+            } else {
+                // if contraction is not better, halve the simplex size
+                shrinkSimplex(original, comparator);
+                converged = isConverged(original, simplex);
+            }
         }
-
     }
     
+    private void shrinkSimplex(final RealPointValuePair[] original, 
+                               Comparator<RealPointValuePair> comparator)
+        throws FunctionEvaluationException, OptimizationException {
+        for (int i = 1; i < simplex.length; ++i) {
+            final double[] best = original[0].getPointRef();
+            final double[] current = simplex[i].getPointRef();
+            for (int j = 0; j < current.length; ++j) {
+                current[j] = best[j] + sigma * (current[j] - best[j]);
+            }
+            simplex[i] = new RealPointValuePair(current, Double.NaN, false);
+        }
+        evaluateSimplex(comparator);
     }
\ No newline at end of file
