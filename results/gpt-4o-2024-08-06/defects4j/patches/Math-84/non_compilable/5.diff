diff --git a/tmp/b288dadc-0d74-48f0-a7fe-a0e858f0d759_buggy.java b/tmp/4ae222d5-7b6e-4808-b36e-4957985a4c83_fixed.java
index 5f1dcf2..d666b09 100644
--- a/tmp/b288dadc-0d74-48f0-a7fe-a0e858f0d759_buggy.java
+++ b/tmp/4ae222d5-7b6e-4808-b36e-4957985a4c83_fixed.java
@@ -1,41 +1,57 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    boolean iterate = true;
+    while (iterate) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = evaluateNewSimplex(original, khi, comparator);
             }
 
-                return;
+            iterate = false;
             
-            }
+        } else {
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+                simplex = evaluateNewSimplex(original, gamma, comparator);
+                iterate = false;
+            } else {
+                // perform shrinkage
+                for (int i = 1; i < simplex.length; i++) {
+                    final double[] shrunk = new double[simplex[i].getPoint().length];
+                    for (int j = 0; j < shrunk.length; j++) {
+                        shrunk[j] = best.getPoint()[j] + sigma * (simplex[i].getPoint()[j] - best.getPoint()[j]);
+                    }
+                    simplex[i] = new RealPointValuePair(shrunk, Double.NaN, false);
+                }
+                evaluateSimplex(comparator);
             }
-
         }
 
+        if (checker != null && checker.converged(getIterations(), original, simplex)) {
+            iterate = false;
+        }
+    }
 }
\ No newline at end of file
