diff --git a/tmp/7c4bd9ed-608e-4471-b355-9c67e61895d3_buggy.java b/tmp/759efa6b-4fcc-43a7-b65a-3ee8d562fb68_fixed.java
index 5f1dcf2..7f4e968 100644
--- a/tmp/7c4bd9ed-608e-4471-b355-9c67e61895d3_buggy.java
+++ b/tmp/759efa6b-4fcc-43a7-b65a-3ee8d562fb68_fixed.java
@@ -1,41 +1,54 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        boolean converged = false;
+        while (!converged) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
-                return;
-
+                converged = checkConvergence(original);
+                continue;
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+                converged = checkConvergence(original);
+                continue;
             }
 
+            converged = checkConvergence(original);
+        }
     }
 
+    // Method to check convergence criteria
+    private boolean checkConvergence(final RealPointValuePair[] original)
+        throws OptimizationException {
+        
+        // Implement the convergence checker logic. This assumes you have a checker defined.
+        for (int i = 0; i < original.length; i++) {
+            if (!getConvergenceChecker().converged(getIterations(), original[i], simplex[i])) {
+                return false;
+            }
+        }
+        return true;
     }
\ No newline at end of file
