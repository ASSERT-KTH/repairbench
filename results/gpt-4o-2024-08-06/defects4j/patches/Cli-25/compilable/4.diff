diff --git a/tmp/bf01f9fd-35e9-4e0b-9c34-c5555e9de104_buggy.java b/tmp/a1050358-c28d-47a1-afcf-593a6e65d3ec_fixed.java
index 875b31b..4e00527 100644
--- a/tmp/bf01f9fd-35e9-4e0b-9c34-c5555e9de104_buggy.java
+++ b/tmp/a1050358-c28d-47a1-afcf-593a6e65d3ec_fixed.java
@@ -1,54 +1,43 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         if (nextLineTabStop >= width)
         {
             // stops infinite loop happening
             nextLineTabStop = width - 1;
         }
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            text = text.substring(pos).trim(); // Remove existing padding text from previous iteration
+            pos = findWrapPos(text, width - nextLineTabStop, 0); // Adjust wrap position to account for padding space
 
             if (pos == -1)
             {
-                sb.append(text);
+                sb.append(padding).append(text);
 
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            if ( (text.length() > width - nextLineTabStop) && (pos == nextLineTabStop - 1) ) 
             {
-                pos = width;
+                pos = width - nextLineTabStop;
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
