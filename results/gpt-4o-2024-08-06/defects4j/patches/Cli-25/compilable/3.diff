diff --git a/tmp/2e101e76-a109-483f-940a-7e690eed53c0_buggy.java b/tmp/d735d328-6dcd-4fe1-94da-aea223b4574b_fixed.java
index 875b31b..92ec789 100644
--- a/tmp/2e101e76-a109-483f-940a-7e690eed53c0_buggy.java
+++ b/tmp/d735d328-6dcd-4fe1-94da-aea223b4574b_fixed.java
@@ -1,54 +1,41 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
-        }
+        int startPos = pos;
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            text = padding + text.substring(startPos).trim();
+            pos = findWrapPos(text, width, nextLineTabStop);
 
             if (pos == -1)
             {
                 sb.append(text);
-
-                return sb;
+                break;
             }
             
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            if (text.length() > width && pos == nextLineTabStop - 1) 
             {
                 pos = width;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            startPos = pos;
         }
+        
+        return sb;
     }
\ No newline at end of file
