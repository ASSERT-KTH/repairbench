diff --git a/tmp/9b8e6893-6500-4984-b910-7ece43cb40de_buggy.java b/tmp/be6611de-5ef9-46d5-b859-7797d2fd0e9f_fixed.java
index b4e6f03..9e84f8b 100644
--- a/tmp/9b8e6893-6500-4984-b910-7ece43cb40de_buggy.java
+++ b/tmp/be6611de-5ef9-46d5-b859-7797d2fd0e9f_fixed.java
@@ -1,44 +1,26 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
     if (!hasAttr(attributeKey)) {
         return ""; // nothing to make absolute with
     } else {
         URL base;
-            try {
         try {
             base = new URL(baseUri);
-                } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
+            // Create absolute URL manually to handle relative paths with queries correctly
+            URI baseUriObj = base.toURI();
+            URI relUriObj = new URI(relUrl);
+            URI resolvedUri = baseUriObj.resolve(relUriObj);
+            return resolvedUri.toURL().toExternalForm();
+        } catch (URISyntaxException | MalformedURLException e) {
+            try {
+                // If creating URI failed, try to create URL directly
                 URL abs = new URL(relUrl);
                 return abs.toExternalForm();
+            } catch (MalformedURLException ignored) {
+                return ""; // cannot make a valid URL
             }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
-            } catch (MalformedURLException e) {
-                return "";
         }
     }
 }
\ No newline at end of file
