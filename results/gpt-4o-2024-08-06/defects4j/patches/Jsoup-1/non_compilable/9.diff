diff --git a/tmp/3832d965-35dc-4e9b-9731-e1126688db58_buggy.java b/tmp/7a7e25b3-c9fe-485d-80f2-aaa7515b617d_fixed.java
index 00914da..cf70592 100644
--- a/tmp/3832d965-35dc-4e9b-9731-e1126688db58_buggy.java
+++ b/tmp/7a7e25b3-c9fe-485d-80f2-aaa7515b617d_fixed.java
@@ -1,17 +1,33 @@
-    // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
+        TextNode previousTextNode = null;
+        
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
-                if (!tn.isBlank())
-                    toMove.add(tn);
+                if (!tn.isBlank()) {
+                    if (previousTextNode != null) {
+                        previousTextNode.append(tn.getWholeText());
+                        tn.remove(); // Remove the current node as its text has been appended
+                    } else {
+                        previousTextNode = tn;
                     }
                 }
+            } else {
+                if (previousTextNode != null && !previousTextNode.isBlank()) {
+                    toMove.add(previousTextNode);
+                    previousTextNode = null;
+                }
+                toMove.add(node);
+            }
+        }
+        
+        if (previousTextNode != null && !previousTextNode.isBlank()) {
+            toMove.add(previousTextNode);
+        }
         
+        element.empty(); // clear the current children of the element
         for (Node node: toMove) {
-            element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+            element.appendChild(node);
         }
     }
\ No newline at end of file
