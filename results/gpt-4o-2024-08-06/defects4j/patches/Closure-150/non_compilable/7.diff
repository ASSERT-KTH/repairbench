diff --git a/tmp/fc8d84aa-6fd3-43e9-829c-477b6fe9f3cc_buggy.java b/tmp/bb3ac530-4f7a-4fed-b3b9-03b1a0d09fb9_fixed.java
index 800e6e1..6fbf661 100644
--- a/tmp/fc8d84aa-6fd3-43e9-829c-477b6fe9f3cc_buggy.java
+++ b/tmp/bb3ac530-4f7a-4fed-b3b9-03b1a0d09fb9_fixed.java
@@ -1,32 +1,46 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.EXPR_RESULT: // Added case for expressions like goog.foo;
+      if (n.getFirstChild() != null && n.getFirstChild().isGetProp()) {
+        handlePropertyJSDoc(n.getFirstChild());
+      }
+      break;
+  }
+}
+
+private void handlePropertyJSDoc(Node getPropNode) {
+  JSDocInfo info = getPropNode.getJSDocInfo();
+  if (info != null && info.hasType()) {
+    String qualifiedName = getPropNode.getQualifiedName();
+    Var var = scope.getVar(qualifiedName);
+    if (var != null) {
+      var.setType(var.getType().toMaybeObjectType().getPropertyType(qualifiedName));
+    } else {
+      ObjectType objType = getPropNode.getFirstChild().getJSType().toMaybeObjectType();
+      if (objType != null) {
+        objType.defineDeclaredProperty(getPropNode.getLastChild().getString(), info.getType().evaluate(t.getTypedScope(), scope), getPropNode);
+      }
+    }
   }
 }
\ No newline at end of file
