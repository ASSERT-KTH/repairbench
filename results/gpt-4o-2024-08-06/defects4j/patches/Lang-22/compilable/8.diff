diff --git a/tmp/822a314e-53fb-45db-b06c-938892455f5c_buggy.java b/tmp/5f1ec976-9bd3-4bf5-843a-5c8024cff41a_fixed.java
index e0a0552..65e8dd8 100644
--- a/tmp/822a314e-53fb-45db-b06c-938892455f5c_buggy.java
+++ b/tmp/5f1ec976-9bd3-4bf5-843a-5c8024cff41a_fixed.java
@@ -1,54 +1,65 @@
 /**
  * <p>Gets the greatest common divisor of the absolute value of
  * two numbers, using the "binary gcd" method which avoids
  * division and modulo operations.  See Knuth 4.5.2 algorithm B.
  * This algorithm is due to Josef Stein (1961).</p>
  *
  * @param u  a non-zero number
  * @param v  a non-zero number
  * @return the greatest common divisor, never zero
  */
 private static int greatestCommonDivisor(int u, int v) {
-        // From Commons Math:
-        //if either operand is abs 1, return 1:
-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
+    if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
+        if (u == Integer.MIN_VALUE && v == Integer.MIN_VALUE) {
+            return 1 << 31; // gcd of Integer.MIN_VALUE with itself
+        } else if (u == Integer.MIN_VALUE) {
+            return greatestCommonDivisor((1 << 31) - 1, Math.abs(v));
+        } else {
+            return greatestCommonDivisor((1 << 31) - 1, Math.abs(u));
         }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        if (u>0) { u=-u; } // make u negative
-        if (v>0) { v=-v; } // make v negative
+    }
+
+    // Absolute values are taken to ensure positivity
+    u = Math.abs(u);
+    v = Math.abs(v);
+
+    if (u == 0) {
+        return v;
+    } else if (v == 0) {
+        return u;
+    }
+
     // B1. [Find power of 2]
     int k = 0;
-        while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
-            u/=2; v/=2; k++; // cast out twos.
+    while (((u & 1) == 0) && ((v & 1) == 0) && k < 31) { // while u and v are both even...
+        u >>= 1; // Divide u by 2
+        v >>= 1; // Divide v by 2
+        k++; // Increase power of 2
     }
     if (k == 31) {
         throw new ArithmeticException("overflow: gcd is 2^31");
     }
+
     // B2. Initialize: u and v have been divided by 2^k and at least
     // one is odd.
-        int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+    while ((u & 1) == 0) {
+        u >>= 1; // Keep dividing u by 2 until it becomes odd
+    }
+
+    // B3. Process the remaining part of the algorithm
     do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
-            while ((t&1)==0) { // while t is even..
-                t/=2; // cast out twos
+        while ((v & 1) == 0) { // Remove all factors of 2 in v
+            v >>= 1;
         }
-            // B5 [reset max(u,v)]
-            if (t>0) {
-                u = -t;
-            } else {
-                v = t;
+
+        if (u > v) { // Swap u and v
+            int temp = u;
+            u = v;
+            v = temp;
         }
-            // B6/B3. at this point both u and v should be odd.
-            t = (v - u)/2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
-        } while (t!=0);
-        return -u*(1<<k); // gcd is u*2^k
+
+        v = v - u; // Here v is guaranteed to be even
+    } while (v != 0);
+
+    return u << k; // gcd is u * 2^k
 }
\ No newline at end of file
