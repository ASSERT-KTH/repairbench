diff --git a/tmp/7d2a5ceb-24a5-43ff-b759-794500ea8162_buggy.java b/tmp/ae93b917-0ee4-419e-84bd-fc2ea15429b5_fixed.java
index d80b7d0..8ff09ea 100644
--- a/tmp/7d2a5ceb-24a5-43ff-b759-794500ea8162_buggy.java
+++ b/tmp/ae93b917-0ee4-419e-84bd-fc2ea15429b5_fixed.java
@@ -1,61 +1,63 @@
     /**
      * Checks dimensions and values of boundaries and inputSigma if defined.
      */
     private void checkParameters() {
         final double[] init = getStartPoint();
         final double[] lB = getLowerBound();
         final double[] uB = getUpperBound();
 
-        // Checks whether there is at least one finite bound value.
+        // Check if there is at least one finite bound value and validate bounds.
         boolean hasFiniteBounds = false;
         for (int i = 0; i < lB.length; i++) {
-            if (!Double.isInfinite(lB[i]) ||
-                !Double.isInfinite(uB[i])) {
+            if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {
                 hasFiniteBounds = true;
                 break;
             }
         }
-        // Checks whether there is at least one infinite bound value.
-        boolean hasInfiniteBounds = false;
+
         if (hasFiniteBounds) {
             for (int i = 0; i < lB.length; i++) {
-                if (Double.isInfinite(lB[i]) ||
-                    Double.isInfinite(uB[i])) {
-                    hasInfiniteBounds = true;
-                    break;
-                }
-            }
-
-            if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
+                if (Double.isInfinite(lB[i]) ^ Double.isInfinite(uB[i])) {
+                    // One of the bounds is finite and the other is infinite.
                     throw new MathUnsupportedOperationException();
-            } else {
+                }
+                if (!Double.isInfinite(lB[i]) && !Double.isInfinite(uB[i]) && lB[i] >= uB[i]) {
+                    // Lower bound is greater than or equal to upper bound.
+                    throw new NumberIsTooLargeException(lB[i], uB[i], false);
+                }
+            }
+
             // Convert API to internal handling of boundaries.
             boundaries = new double[2][];
             boundaries[0] = lB;
             boundaries[1] = uB;
 
-                // Abort early if the normalization will overflow (cf. "encode" method).
+            // Abort early if the normalization will overflow.
+            for (int i = 0; i < lB.length; i++) {
+                if (!Double.isInfinite(lB[i]) && !Double.isInfinite(uB[i]) &&
+                    Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
+                    throw new MathIllegalStateException();
                 }
+            }
+            
         } else {
             // Convert API to internal handling of boundaries.
             boundaries = null;
         }
 
         if (inputSigma != null) {
             if (inputSigma.length != init.length) {
                 throw new DimensionMismatchException(inputSigma.length, init.length);
             }
             for (int i = 0; i < init.length; i++) {
                 if (inputSigma[i] < 0) {
                     throw new NotPositiveException(inputSigma[i]);
                 }
                 if (boundaries != null) {
                     if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
                         throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
                     }
                 }
             }
         }
     }
\ No newline at end of file
