diff --git a/tmp/9c13602b-9773-4134-93e4-e773f323f376_buggy.java b/tmp/508efa4b-8dff-4ec4-a2c7-ba1de78501ee_fixed.java
index 61ffdbf..05075c9 100644
--- a/tmp/9c13602b-9773-4134-93e4-e773f323f376_buggy.java
+++ b/tmp/508efa4b-8dff-4ec4-a2c7-ba1de78501ee_fixed.java
@@ -1,44 +1,31 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
+    
+    // Check if we can modify the callers based on the optimization mode
     boolean modifyCallers = modifyCallSites 
         && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
+
+    // In any case, remove unreferenced args from the end of the function declaration
     Node lastArg;
     while ((lastArg = argList.getLastChild()) != null) {
       Var var = fnScope.getVar(lastArg.getString());
       if (!referenced.contains(var)) {
         argList.removeChild(lastArg);
         compiler.reportCodeChange();
       } else {
         break;
       }
     }
-    } else {
+
+    // If allowed, try to further optimize call sites
+    if (modifyCallers) {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
