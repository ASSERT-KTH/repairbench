diff --git a/tmp/ccc3a4bb-563b-4685-bcae-1f3d0c5d8f8c_buggy.java b/tmp/3f4e130d-e028-46b7-9f86-a0d9063394f2_fixed.java
index 4b7e1e4..178114a 100644
--- a/tmp/ccc3a4bb-563b-4685-bcae-1f3d0c5d8f8c_buggy.java
+++ b/tmp/3f4e130d-e028-46b7-9f86-a0d9063394f2_fixed.java
@@ -1,52 +1,68 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean sawDigit = false;
         while ((ch = i.read()) != -1) {
             read++;
-                if (ch == ' '){
+            if (ch == ' ' && sawDigit) {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
                     if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
+                        if (restLen < 0) { // handle errors properly
+                            throw new IOException("Failed to read Paxheader. Header length indicates"
+                                                  + " a size smaller than possible.");
+                        }
                         if (restLen == 1) { // only NL
                             headers.remove(keyword);
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
                                                       restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
+            if (ch >= '0' && ch <= '9') {
                 len *= 10;
                 len += ch - '0';
+                sawDigit = true;
+            } else {
+                // If we see a non-digit character before any digits, it's an invalid line, skip it
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                read = 0;
+                len = 0;
+                break;
+            }
         }
         if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
