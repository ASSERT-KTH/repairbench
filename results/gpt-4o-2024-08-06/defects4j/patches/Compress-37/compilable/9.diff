diff --git a/tmp/8d535d95-9488-4ea8-b2c6-229bc9335b68_buggy.java b/tmp/481f4bee-08d9-4e56-a1fe-6f752138934b_fixed.java
index 4b7e1e4..7738f25 100644
--- a/tmp/8d535d95-9488-4ea8-b2c6-229bc9335b68_buggy.java
+++ b/tmp/481f4bee-08d9-4e56-a1fe-6f752138934b_fixed.java
@@ -1,52 +1,58 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean lengthParsed = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
+                lengthParsed = true;
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while((ch = i.read()) != -1) {
                     read++;
                     if (ch == '='){ // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                        if (restLen < 1) { // if restLen is zero or negative, handle it properly
                             headers.remove(keyword);
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
                                                       restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
+            if (Character.isDigit(ch)) {
                 len *= 10;
                 len += ch - '0';
+            } else if (!Character.isWhitespace(ch)) {
+                // If a non-digit, non-space character is found in the length part, terminate parsing
+                throw new IOException("Invalid character in length field");
             }
-            if (ch == -1){ // EOF
+        }
+        if (!lengthParsed || ch == -1){ // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
