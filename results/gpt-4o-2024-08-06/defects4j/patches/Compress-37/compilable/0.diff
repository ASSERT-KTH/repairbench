diff --git a/tmp/f3b83a4d-b528-49cf-8e35-976adc7fda99_buggy.java b/tmp/c3e62523-c0a8-4770-b1f9-421b16c60a97_fixed.java
index 4b7e1e4..cc80d8d 100644
--- a/tmp/f3b83a4d-b528-49cf-8e35-976adc7fda99_buggy.java
+++ b/tmp/c3e62523-c0a8-4770-b1f9-421b16c60a97_fixed.java
@@ -1,52 +1,66 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+    Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
+        while (true) {
             int ch;
             int len = 0;
             int read = 0;
+            boolean isBlankLine = true;
+
+            // Attempt to read the length of the header
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
-                    // Get keyword
+                    isBlankLine = false;
+                    break;
+                }
+                // Handle blank lines or lines with non-digit characters
+                if (ch == '\n' || (ch < '0' || ch > '9')) {
+                    continue;
+                }
+                len *= 10;
+                len += ch - '0';
+            }
+
+            if (isBlankLine || ch == -1) {
+                // Skip blank lines and end of input
+                if (ch == '\n' || ch == -1) {
+                    continue;
+                }
+                // Any other case, skip until the new line
+                while ((ch = i.read()) != -1 && ch != '\n');
+                if (ch == -1) {
+                    break;
+                }
+                continue;
+            }
+
+            // Read keyword
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
             while ((ch = i.read()) != -1) {
                 read++;
-                        if (ch == '='){ // end of keyword
+                if (ch == '=') {
                     final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
+                    // Calculate rest of the entry length
                     final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                    if (restLen == 1) { // Only newline case
                         headers.remove(keyword);
-                            } else {
+                    } else if (restLen > 1) { // Ensure positive restLen
                         final byte[] rest = new byte[restLen];
                         final int got = IOUtils.readFully(i, rest);
                         if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                            throw new IOException("Failed to read " + "Paxheader. Expected " + restLen + " bytes, read " + got);
                         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                        // Drop trailing newline
+                        final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                         headers.put(keyword, value);
                     }
                     break;
                 }
                 coll.write((byte) ch);
             }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
             if (ch == -1) { // EOF
                 break;
             }
         }
         return headers;
     }
\ No newline at end of file
