diff --git a/tmp/2cf11433-d432-4f42-a1d6-e9470ebf7384_buggy.java b/tmp/b0fcf881-e2e9-420f-8f7c-41bf1e93f131_fixed.java
index 4b7e1e4..adaed42 100644
--- a/tmp/2cf11433-d432-4f42-a1d6-e9470ebf7384_buggy.java
+++ b/tmp/b0fcf881-e2e9-420f-8f7c-41bf1e93f131_fixed.java
@@ -1,52 +1,74 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while (true) { // get length
             int ch;
             int len = 0;
             int read = 0;
+            boolean lengthParsed = false;
+            
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
+                    lengthParsed = true;
+                    break;
+                }
+                if (Character.isDigit(ch)) {
+                    len *= 10;
+                    len += ch - '0';
+                } else {
+                    // If non-digit is found that is not space, it's invalid 
+                    throw new IOException("Invalid length field in Paxheader");
+                }
+            }
+            
+            if (!lengthParsed || len <= 0) {
+                if (ch == -1) { // EOF
+                    break;
+                }
+                // If len is zero or negative, skip this invalid entry
+                while (ch != '\n' && ch != -1) {
+                    ch = i.read();
+                }
+                if (ch == -1) {
+                    break;
+                }
+                continue;
+            }
+            
             // Get keyword
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == '=') { // end of keyword
                     final String keyword = coll.toString(CharsetNames.UTF_8);
                     // Get rest of entry
                     final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                    if (restLen <= 1) { // only NL or empty value
                         headers.remove(keyword);
                     } else {
                         final byte[] rest = new byte[restLen];
                         final int got = IOUtils.readFully(i, rest);
                         if (got != restLen) {
                             throw new IOException("Failed to read "
                                     + "Paxheader. Expected "
                                     + restLen
                                     + " bytes, read "
                                     + got);
                         }
                         // Drop trailing NL
                         final String value = new String(rest, 0,
                                 restLen - 1, CharsetNames.UTF_8);
                         headers.put(keyword, value);
                     }
                     break;
                 }
                 coll.write((byte) ch);
             }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
             if (ch == -1) { // EOF
                 break;
             }
         }
         return headers;
     }
\ No newline at end of file
