diff --git a/tmp/ccc310cb-7791-47e5-95df-fa1ae44784a2_buggy.java b/tmp/3a999167-e9bd-4da1-918e-66243e4c4a36_fixed.java
index 7116384..595b910 100644
--- a/tmp/ccc310cb-7791-47e5-95df-fa1ae44784a2_buggy.java
+++ b/tmp/3a999167-e9bd-4da1-918e-66243e4c4a36_fixed.java
@@ -1,39 +1,28 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
 public long readBits(final int count) throws IOException {
-        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
+    if (count < 0 || count > 63) { // Ensure count is within valid range [0, 63]
+        throw new IllegalArgumentException("count must not be negative or greater than 63");
     }
     while (bitsCachedSize < count) {
-            final long nextByte = in.read();
+        final int nextByte = in.read(); // In Java, read returns an int in range [0, 255] or -1 for EOF
         if (nextByte < 0) {
-                return nextByte;
+            return -1; // Properly return -1 for end of stream
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+            bitsCached |= ((long) nextByte << bitsCachedSize); // Cast to long to avoid truncation issues
         } else {
             bitsCached <<= 8;
             bitsCached |= nextByte;
         }
         bitsCachedSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
         bitsOut = (bitsCached & MASKS[count]);
         bitsCached >>>= count;
     } else {
         bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
     }
     bitsCachedSize -= count;
     return bitsOut;
 }
\ No newline at end of file
