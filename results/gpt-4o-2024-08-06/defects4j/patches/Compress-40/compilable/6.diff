diff --git a/tmp/3170e764-61df-41e3-905f-ee33eb462e83_buggy.java b/tmp/c400def9-4be0-441f-84f7-a9832e3cef60_fixed.java
index 7116384..e0bf02a 100644
--- a/tmp/3170e764-61df-41e3-905f-ee33eb462e83_buggy.java
+++ b/tmp/c400def9-4be0-441f-84f7-a9832e3cef60_fixed.java
@@ -1,39 +1,28 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
     while (bitsCachedSize < count) {
         final long nextByte = in.read();
         if (nextByte < 0) {
-                return nextByte;
+            return -1; // Changed from returning nextByte to returning -1 on end of stream
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsCached |= (nextByte << bitsCachedSize);
         } else {
             bitsCached <<= 8;
             bitsCached |= nextByte;
         }
         bitsCachedSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
+        bitsOut = (bitsCached & ((1L << count) - 1)); // Adjust mask to correctly capture 'count' number of bits
         bitsCached >>>= count;
     } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        bitsOut = (bitsCached >> (bitsCachedSize - count)) & ((1L << count) - 1); // Corrected mask calculation
     }
     bitsCachedSize -= count;
     return bitsOut;
 }
\ No newline at end of file
