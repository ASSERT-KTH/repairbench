diff --git a/tmp/bdb19f72-d97f-42fc-88ce-5da491ae84c0_buggy.java b/tmp/46cc0188-9551-4bb1-872b-5b298e770527_fixed.java
index 10616db..7c101f0 100644
--- a/tmp/bdb19f72-d97f-42fc-88ce-5da491ae84c0_buggy.java
+++ b/tmp/46cc0188-9551-4bb1-872b-5b298e770527_fixed.java
@@ -1,19 +1,47 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+
+        int[] updatedValues = iChronology.get(partial, instant);
+        // Special handling for February 29th cases
+        if (partial.getFieldType(fieldIndex).getName().equals("monthOfYear") && values[fieldIndex] == 2 && values[partial.size() - 1] == 29) {
+            int year = iChronology.year().get(instant);
+            int month = iChronology.monthOfYear().get(instant);
+            // Recheck if the current date is end of February and needs end-of-month adjustment
+            if (month != 2 || !isLeapYear(year)) {
+                updatedValues[partial.size() - 1] = 28; // Default to end of February
             } else {
-            return super.add(partial, fieldIndex, values, valueToAdd);
+                updatedValues[partial.size() - 1] = 29; // Keep 29 for leap year
             }
         }
+        return updatedValues;
+    } else {
+        int[] result = super.add(partial, fieldIndex, values, valueToAdd);
+        // Handle transition to February 29
+        if (values[fieldIndex] == 2 && values[partial.size() - 1] == 29) {
+            int[] adjustedResult = result.clone();
+            int year = partial.getFieldType(fieldIndex - 1).getField(iChronology).get(result[fieldIndex - 1]);
+            int month = result[fieldIndex];
+            if (month != 2 || !isLeapYear(year)) {
+                adjustedResult[partial.size() - 1] = 28; // Default to end of February if not leap year
+            }
+            return adjustedResult;
+        }
+        return result;
+    }
+}
+
+private boolean isLeapYear(int year) {
+    return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);
+}
\ No newline at end of file
