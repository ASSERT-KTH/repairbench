diff --git a/tmp/699a8daa-caba-45d5-ba91-745ab61c8e4a_buggy.java b/tmp/2f49b014-5689-4dca-9472-c28270ad3382_fixed.java
index 10616db..056cb36 100644
--- a/tmp/699a8daa-caba-45d5-ba91-745ab61c8e4a_buggy.java
+++ b/tmp/2f49b014-5689-4dca-9472-c28270ad3382_fixed.java
@@ -1,19 +1,33 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
+
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+
+        int[] newValues = iChronology.get(partial, instant);
+        // Special handling for dayOfMonth overflow, such as February 29th
+        if (partial.getFieldType(fieldIndex).getName().equals("dayOfMonth") && newValues[fieldIndex] != values[fieldIndex]) {
+            DateTimeField dayField = partial.getFieldType(fieldIndex).getField(iChronology);
+            if (!dayField.isLenient()) {
+                int maxDay = dayField.getMaximumValue(instant);
+                if (newValues[fieldIndex] > maxDay) {
+                    newValues[fieldIndex] = maxDay;
+                }
+            }
+        }
+
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
