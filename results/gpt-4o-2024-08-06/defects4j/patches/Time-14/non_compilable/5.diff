diff --git a/tmp/d7d9badc-b807-4156-8cad-864d2207b998_buggy.java b/tmp/ac0dfbbc-56e3-4e7b-ab88-471374f4c4dc_fixed.java
index 10616db..46cbf11 100644
--- a/tmp/d7d9badc-b807-4156-8cad-864d2207b998_buggy.java
+++ b/tmp/ac0dfbbc-56e3-4e7b-ab88-471374f4c4dc_fixed.java
@@ -1,19 +1,35 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
+
+        // Adjust for edge cases like leap years or month-end adjustments
+        if (partial.getFieldType(fieldIndex).getName().equals("monthOfYear")) {
+            int expectedMonth = (int) (instant / DateTimeConstants.MILLIS_PER_MONTH) % 12 + 1;
+            int expectedDay = values[partial.indexOf(DateTimeFieldType.dayOfMonth())];
+
+            if (expectedMonth == DateTimeConstants.FEBRUARY && expectedDay > 28) {
+                int year = iChronology.year().get(instant);
+                if (!iChronology.isLeapYear(year) || expectedDay == 29) {
+                    instant = iChronology.dayOfMonth().set(instant, 28);
+                }
+            } else if (expectedDay > iChronology.dayOfMonth().getMaximumValue(instant)) {
+                instant = iChronology.dayOfMonth().set(instant, iChronology.dayOfMonth().getMaximumValue(instant));
+            }
+        }
+
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
