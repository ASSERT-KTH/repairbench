diff --git a/tmp/42bda0e6-541e-402c-92d9-a7f10bf108eb_buggy.java b/tmp/ea71743b-6e21-46f8-bca2-2f6933e83cbd_fixed.java
index ef65dd9..e39f01f 100644
--- a/tmp/42bda0e6-541e-402c-92d9-a7f10bf108eb_buggy.java
+++ b/tmp/ea71743b-6e21-46f8-bca2-2f6933e83cbd_fixed.java
@@ -1,92 +1,114 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
+        arrayFoldedChildren.add(elem.cloneTree());
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
         // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
+        StringBuilder combinedString = new StringBuilder();
+        boolean onlyStringElements = true;
+        for (Node child : arrayFoldedChildren) {
+          if (child.getType() == Token.STRING) {
+            if (combinedString.length() > 0) {
+              combinedString.append(joinString);
+            }
+            combinedString.append(NodeUtil.getStringValue(child));
+          } else {
+            onlyStringElements = false;
+            break;
+          }
+        }
+        if (onlyStringElements && combinedString.length() > 0) {
+          foldedSize = combinedString.length() + 2; // +2 for quotes
+          foldedSize += InlineCostEstimator.getCost(right);
+          if (foldedSize <= originalSize) {
+            Node newStringNode = Node.newString(combinedString.toString());
+            parent.replaceChild(n, newStringNode);
+            break;
+          }
+        }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+          arrayNode.addChildToBack(node.cloneTree());
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
