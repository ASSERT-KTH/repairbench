diff --git a/tmp/33521d40-f115-495a-8cfa-93f7ec2f0e25_buggy.java b/tmp/1690f499-2ad7-4caa-a605-2dd4adafa884_fixed.java
index 4b163f6..f7daa17 100644
--- a/tmp/33521d40-f115-495a-8cfa-93f7ec2f0e25_buggy.java
+++ b/tmp/1690f499-2ad7-4caa-a605-2dd4adafa884_fixed.java
@@ -1,28 +1,20 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
+    long skipped;
+    
     while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
+        skipped = input.skip(numToSkip);
+        
+        if (skipped <= 0) {
+            // If skip returns zero, use the read method as a fallback
+            if (input.read() == -1) {
+                break; // End of stream reached
             }
+            skipped = 1; // Since we read one byte, consider it as skipped
+        }
+        
         numToSkip -= skipped;
     }
     
     return available - numToSkip;
 }
\ No newline at end of file
