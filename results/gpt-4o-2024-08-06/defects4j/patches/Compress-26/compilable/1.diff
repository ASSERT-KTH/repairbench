diff --git a/tmp/22b5443d-835b-4d13-b2d4-fe910c49f832_buggy.java b/tmp/b45e7e8e-0d2a-4aa0-8789-d2a4826e85f1_fixed.java
index 4b163f6..c1289d6 100644
--- a/tmp/22b5443d-835b-4d13-b2d4-fe910c49f832_buggy.java
+++ b/tmp/b45e7e8e-0d2a-4aa0-8789-d2a4826e85f1_fixed.java
@@ -1,28 +1,18 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
         if (skipped == 0) {
-                break;
+            // Attempt to read a single byte to check for end-of-stream
+            if (input.read() == -1) {
+                break; // End of stream reached
+            } else {
+                // One byte was read, so we decrement numToSkip by one
+                skipped = 1;
+            }
         }
         numToSkip -= skipped;
     }
         
     return available - numToSkip;
 }
\ No newline at end of file
