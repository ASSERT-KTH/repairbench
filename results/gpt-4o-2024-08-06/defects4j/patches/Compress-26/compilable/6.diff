diff --git a/tmp/1ab4c010-4cd0-4fa7-a7e7-0312a65d1eb4_buggy.java b/tmp/00bac826-c311-4678-97ee-7d9b93615e72_fixed.java
index 4b163f6..d581ad2 100644
--- a/tmp/1ab4c010-4cd0-4fa7-a7e7-0312a65d1eb4_buggy.java
+++ b/tmp/00bac826-c311-4678-97ee-7d9b93615e72_fixed.java
@@ -1,28 +1,19 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
+    long remaining = numToSkip;
+    byte[] buffer = new byte[4096];
+
+    while (remaining > 0) {
+        long skipped = input.skip(remaining);
+        if (skipped <= 0) {
+            // If nothing was skipped, try reading into buffer instead
+            int read = input.read(buffer, 0, (int) Math.min(buffer.length, remaining));
+            if (read < 0) {
+                break; // Reached end of stream
+            }
+            skipped = read;
         }
-            numToSkip -= skipped;
+        remaining -= skipped;
     }
 
-        return available - numToSkip;
+    return numToSkip - remaining;
 }
\ No newline at end of file
