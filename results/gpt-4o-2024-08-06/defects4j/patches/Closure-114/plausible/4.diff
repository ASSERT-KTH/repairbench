diff --git a/tmp/f51f8650-dde3-40b5-a544-7209106be5c2_buggy.java b/tmp/de6900a3-f7a7-4f97-a7ee-c2fd6c87dc4c_fixed.java
index c51c8b1..024048c 100644
--- a/tmp/f51f8650-dde3-40b5-a544-7209106be5c2_buggy.java
+++ b/tmp/de6900a3-f7a7-4f97-a7ee-c2fd6c87dc4c_fixed.java
@@ -1,31 +1,20 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
-        } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+        } else if (!n.isCall() && !(n.getParent() != null && n.getParent().isCall())) {
+          // The rhs of the assignment is not the direct caller, so record its dependency scope
           recordDepScope(recordNode, ns);
+        } else {
+          // The lhs should be associated with the function scope, handle other cases separately
+          recordDepScope(nameNode, ns);
         }
       }
     }
\ No newline at end of file
