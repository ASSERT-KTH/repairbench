diff --git a/tmp/b7fa2aba-522e-4a8e-8e2e-d899f2901306_buggy.java b/tmp/cb08afdf-2b69-46f3-8030-3aa00652816c_fixed.java
index c51c8b1..8e334b9 100644
--- a/tmp/b7fa2aba-522e-4a8e-8e2e-d899f2901306_buggy.java
+++ b/tmp/cb08afdf-2b69-46f3-8030-3aa00652816c_fixed.java
@@ -1,31 +1,27 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns != null) {
     if (parent.isFor() && !NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
       if (parent.getFirstChild().getNext() != n) {
         recordDepScope(recordNode, ns);
       } else {
         recordDepScope(nameNode, ns);
       }
-        } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+    } else if (!isCallAssignment(n)) {
+      // Check if the assignment is a standalone call,
+      // in which case, avoid associating lhs with rhs.
       recordDepScope(recordNode, ns);
+    } else {
+      // If the assignment is a call, directly record using the nameNode
+      recordDepScope(nameNode, ns);
     }
   }
 }
+
+private boolean isCallAssignment(Node assignmentNode) {
+  // Check if the node is an assignment with a call as its RHS
+  Node rhs = assignmentNode.getLastChild();
+  return rhs != null && rhs.isCall();
+}
\ No newline at end of file
