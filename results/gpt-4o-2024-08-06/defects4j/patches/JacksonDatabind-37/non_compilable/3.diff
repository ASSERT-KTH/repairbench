diff --git a/tmp/6de8879f-48ab-4c71-b5f9-c7847bdca194_buggy.java b/tmp/0e707a6b-ae63-4a55-aff0-68aea998adf2_fixed.java
index e5ad041..918a963 100644
--- a/tmp/6de8879f-48ab-4c71-b5f9-c7847bdca194_buggy.java
+++ b/tmp/0e707a6b-ae63-4a55-aff0-68aea998adf2_fixed.java
@@ -1,19 +1,20 @@
 @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
+
     if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+        throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of " + _class.getName());
     }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+    
+    // Create a new SimpleType and re-resolve bindings, super class, and interfaces
+    JavaType superClass = _superClass == null ? null : _superClass.narrowBy(subclass.getSuperclass());
+    JavaType[] superInterfaces = new JavaType[_superInterfaces.length];
+    for (int i = 0; i < _superInterfaces.length; i++) {
+        superInterfaces[i] = _superInterfaces[i].narrowBy(subclass.getInterfaces()[i]);
+    }
+    TypeBindings bindings = _bindings; // Assuming the bindings may need changes based on `_class`
+
+    return new SimpleType(subclass, bindings, superClass, superInterfaces, _valueHandler, _typeHandler, _asStatic);
 }
\ No newline at end of file
