diff --git a/tmp/bb6afb7c-85a3-464f-bc01-f144fd0d49e0_buggy.java b/tmp/4d16a4a6-a84f-40f2-9328-f0f54ff70b67_fixed.java
index d4e6d48..057cad7 100644
--- a/tmp/bb6afb7c-85a3-464f-bc01-f144fd0d49e0_buggy.java
+++ b/tmp/4d16a4a6-a84f-40f2-9328-f0f54ff70b67_fixed.java
@@ -1,23 +1,30 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
+      if (n.getChildCount() == 2) { // Ensure there is exactly one argument
         Node value = callTarget.getNext();
-      if (value != null) {
+        if (value != null && isSafeToFold(value)) { 
           Node addition = IR.add(
               IR.string("").srcref(callTarget),
               value.detachFromParent());
           n.getParent().replaceChild(n, addition);
           reportCodeChange();
           return addition;
         }
       }
+    }
     return n;
   }
+
+  private boolean isSafeToFold(Node value) {
+    // Only fold constants (strings, numbers, boolean literals, etc.)
+    return value.isString() || value.isNumber() || value.isBoolean();
+  }
\ No newline at end of file
