diff --git a/tmp/782aea01-2eda-45a7-ab35-33b8e7c6416f_buggy.java b/tmp/aa162913-2a59-46ef-a58e-4eb20e9c1837_fixed.java
index d4e6d48..f7b7d7d 100644
--- a/tmp/782aea01-2eda-45a7-ab35-33b8e7c6416f_buggy.java
+++ b/tmp/aa162913-2a59-46ef-a58e-4eb20e9c1837_fixed.java
@@ -1,23 +1,17 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() && 
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value != null && !value.getNext().isPresent() && value.isImmutable()) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
\ No newline at end of file
