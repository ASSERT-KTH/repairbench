diff --git a/tmp/3429c235-b9fb-4405-be44-2ad69938dbb7_buggy.java b/tmp/7c1e0e8a-96dc-42c0-a62a-901795e666d8_fixed.java
index 98d89dc..a6a6914 100644
--- a/tmp/3429c235-b9fb-4405-be44-2ad69938dbb7_buggy.java
+++ b/tmp/7c1e0e8a-96dc-42c0-a62a-901795e666d8_fixed.java
@@ -1,23 +1,30 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
+
+        // Check for NaN cases
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            // NaN comparisons: NaN is not equal to any number and any number is not less than or greater than NaN
+            return evaluateCompare(Double.isNaN(ld) && Double.isNaN(rd) ? 0 : -1);
+        }
+
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
\ No newline at end of file
