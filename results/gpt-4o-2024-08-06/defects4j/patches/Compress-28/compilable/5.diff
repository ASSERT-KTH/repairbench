diff --git a/tmp/81495ab1-07bb-441d-8448-4c7d7f6c6dc4_buggy.java b/tmp/df58ad3d-7236-404e-b896-47ac3a61d85b_fixed.java
index 0f439b3..17cc942 100644
--- a/tmp/81495ab1-07bb-441d-8448-4c7d7f6c6dc4_buggy.java
+++ b/tmp/df58ad3d-7236-404e-b896-47ac3a61d85b_fixed.java
@@ -1,38 +1,32 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
     	int totalRead = 0;
     	
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
         
-        numToRead = Math.min(numToRead, available());
+        // Ensure not to read past the current entry's size
+        numToRead = Math.min(numToRead, (int)(entrySize - entryOffset));
+        
+        // Check again with updated numToRead
+        if (numToRead <= 0) {
+            hasHitEOF = true;
+            return -1;
+        }
 
         totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
         if (totalRead == -1) {
-            hasHitEOF = true;
-        } else {
+            // If the stream ends before finishing the entry, throw an IO exception
+            throw new IOException("Truncated TAR archive entry detected");
+        }
+        
+        count(totalRead);
         entryOffset += totalRead;
-        }
 
         return totalRead;
     }
\ No newline at end of file
