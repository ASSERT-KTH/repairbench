diff --git a/tmp/6c4237fc-9442-4dc3-934f-bc85ab4d2364_buggy.java b/tmp/af1fd501-60ae-4736-9387-c8f9b08709a1_fixed.java
index fecb896..0a5cac5 100644
--- a/tmp/6c4237fc-9442-4dc3-934f-bc85ab4d2364_buggy.java
+++ b/tmp/af1fd501-60ae-4736-9387-c8f9b08709a1_fixed.java
@@ -1,34 +1,35 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
+        if (last == 0 || last != ESC) { // Handle escaped characters
+            if (!inQuote && (c.equals('\'') || c.equals('\"'))) { // Check for quotes
+                inQuote = true;
+                quoteChar = c;
+            } else if (inQuote && c.equals(quoteChar)) {
+                inQuote = false;
+            } else if (!inQuote) { // Only check balance when not in a quote
                 if (c.equals(open)) {
                     depth++;
                     if (start == -1)
                         start = pos;
                 }
                 else if (c.equals(close))
                     depth--;
             }
+        }
 
-            if (depth > 0 && last != 0)
+        if (depth > 0)
             end = pos; // don't include the outer match pair in the return
+        
         last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+    } while (depth > 0 || inQuote); // Continue if inQuote to handle quotes correctly
+    return (end >= 0) ? queue.substring(start, end + 1) : ""; // Fix substring end index
 }
\ No newline at end of file
