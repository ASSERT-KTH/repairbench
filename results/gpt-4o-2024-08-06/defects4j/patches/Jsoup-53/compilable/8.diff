diff --git a/tmp/56868af6-0abc-4190-8696-fac43c25d449_buggy.java b/tmp/89c1344f-9b01-4c77-a5fe-c9a65f420a99_fixed.java
index fecb896..3e47c91 100644
--- a/tmp/56868af6-0abc-4190-8696-fac43c25d449_buggy.java
+++ b/tmp/89c1344f-9b01-4c77-a5fe-c9a65f420a99_fixed.java
@@ -1,34 +1,40 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    char[] quotes = {'\'', '"'};
+
+    boolean inQuote = false;
+    char quoteChar = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
+
+        // Handle quoting logic
+        if (!inQuote && (c.equals(quotes[0]) || c.equals(quotes[1]))) {
+            inQuote = true;
+            quoteChar = c;
+        } else if (inQuote && c.equals(quoteChar) && last != ESC) {
+            inQuote = false;
+        }
+
+        if (!inQuote && (last == 0 || last != ESC)) {
             if (c.equals(open)) {
                 depth++;
                 if (start == -1)
                     start = pos;
             }
             else if (c.equals(close))
                 depth--;
         }
 
-            if (depth > 0 && last != 0)
+        if (depth > 0)
             end = pos; // don't include the outer match pair in the return
+        
         last = c;
-        } while (depth > 0);
+    } while (depth > 0 || inQuote); // Continue until balanced or until unbalanced quotes close
+
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
