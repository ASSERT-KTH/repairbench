diff --git a/tmp/b4e31e95-82d9-4c79-8d1a-9eb19aaa0f90_buggy.java b/tmp/69d9c0a5-e264-4298-9c36-63603316f13c_fixed.java
index fecb896..aeb0fb0 100644
--- a/tmp/b4e31e95-82d9-4c79-8d1a-9eb19aaa0f90_buggy.java
+++ b/tmp/69d9c0a5-e264-4298-9c36-63603316f13c_fixed.java
@@ -1,34 +1,42 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
+    char currentQuote = 0;
 
     do {
-            if (isEmpty()) break;
+        if (isEmpty())
+            break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
+        if (c.equals('\'') || c.equals('\"')) {
+            if (last != ESC) {
+                if (!inQuote) {
+                    inQuote = true;
+                    currentQuote = c;
+                } else if (currentQuote == c) {
+                    inQuote = false;
+                    currentQuote = 0;
+                }
+            }
+        }
+
+        if (!inQuote && (last == 0 || last != ESC)) {
             if (c.equals(open)) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c.equals(close)) {
                 depth--;
             }
+        }
 
         if (depth > 0 && last != 0)
             end = pos; // don't include the outer match pair in the return
+
         last = c;
     } while (depth > 0);
+
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
