diff --git a/tmp/c0f6446e-c95b-482c-9d68-efa49d86248d_buggy.java b/tmp/af8e1fd3-c789-4be5-9ebc-acc33a658255_fixed.java
index b6b11b6..79eb613 100644
--- a/tmp/c0f6446e-c95b-482c-9d68-efa49d86248d_buggy.java
+++ b/tmp/af8e1fd3-c789-4be5-9ebc-acc33a658255_fixed.java
@@ -1,38 +1,34 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
     int lastHold = start;
+    
+    // Move past the initial quote if it's not an escaped quote scenario
+    if (escapingOn && c[start] == QUOTE && (start + 1 < pattern.length() && c[start + 1] == QUOTE)) {
+        pos.setIndex(start + 2); // skip both quote characters
+        return appendTo == null ? null : appendTo.append(QUOTE);
+    } else if (c[start] == QUOTE) {
+        pos.setIndex(start + 1); // skip opening quote
+        lastHold++;
+    }
+
+    // Process rest of the string
     for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+        if (escapingOn && i + ESCAPED_QUOTE.length() <= pattern.length() && pattern.substring(i, i + ESCAPED_QUOTE.length()).equals(ESCAPED_QUOTE)) {
+            appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
+            i += ESCAPED_QUOTE.length() - 1; // account for length of escaped quote
+            lastHold = i + 1;
+            pos.setIndex(lastHold);
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        
+        if (c[i] == QUOTE) {
+            appendTo.append(c, lastHold, i - lastHold);
+            pos.setIndex(i + 1);
+            return appendTo;
         }
     }
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
