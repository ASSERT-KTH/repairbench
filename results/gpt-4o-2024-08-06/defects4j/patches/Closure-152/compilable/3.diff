diff --git a/tmp/571b81c1-68a3-4004-b360-1966ae5a9a34_buggy.java b/tmp/f8bf62fd-d678-45b5-9403-06ea1ba3a85a_fixed.java
index 58a1651..e87809f 100644
--- a/tmp/571b81c1-68a3-4004-b360-1966ae5a9a34_buggy.java
+++ b/tmp/f8bf62fd-d678-45b5-9403-06ea1ba3a85a_fixed.java
@@ -1,32 +1,57 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolving typeOfThis and checking if it resolves to an ObjectType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+        // Check if the UnionType contains only ObjectTypes or if it's null
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        ObjectType resolvedObjectType = null;
+        for (JSType alternate : unionType.getAlternates()) {
+            if (alternate instanceof ObjectType) {
+                if (resolvedObjectType == null) {
+                    resolvedObjectType = (ObjectType) alternate;
+                } else {
+                    // More than one ObjectType, so it's ambiguous and cannot resolve to a single ObjectType
+                    resolvedObjectType = null;
+                    break;
+                }
+            }
+        }
+        // If we found a single ObjectType, then set it
+        if (resolvedObjectType != null) {
+            typeOfThis = resolvedObjectType;
+        } else {
+            // Otherwise, resolve as null or handle error appropriately
+            typeOfThis = null;
+        }
+    } else {
+        typeOfThis = null;
+    }
     
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
