diff --git a/tmp/278a3b21-bd40-41e0-857b-9102124cbe44_buggy.java b/tmp/14a214ad-64a6-4ed6-8e7a-b7d821301472_fixed.java
index 58a1651..28ad03a 100644
--- a/tmp/278a3b21-bd40-41e0-857b-9102124cbe44_buggy.java
+++ b/tmp/14a214ad-64a6-4ed6-8e7a-b7d821301472_fixed.java
@@ -1,32 +1,51 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
   // Warning about typeOfThis if it doesn't resolve to an ObjectType
   // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  // Correctly handle the case where we have a UnionType.
+  JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+  if (resolvedTypeOfThis instanceof ObjectType || resolvedTypeOfThis.isVoidType()) {
+    typeOfThis = (ObjectType) resolvedTypeOfThis;
+  } else if (resolvedTypeOfThis instanceof UnionType) {
+    // Check if all variants in the union type are ObjectTypes
+    boolean allObjectTypes = true;
+    for (JSType alt : ((UnionType) resolvedTypeOfThis).getAlternates()) {
+      if (!(alt instanceof ObjectType)) {
+        allObjectTypes = false;
+        break;
+      }
+    }
+    if (allObjectTypes) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+      typeOfThis = null; // Or handle the error appropriately
+    }
+  } else {
+    typeOfThis = null; // Or handle the error appropriately
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
