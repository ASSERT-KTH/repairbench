diff --git a/tmp/defd6d8d-d1b1-43d9-abf3-9f15043f509e_buggy.java b/tmp/d5aefb7f-c1df-4668-9862-671168a9089e_fixed.java
index 58a1651..2f55467 100644
--- a/tmp/defd6d8d-d1b1-43d9-abf3-9f15043f509e_buggy.java
+++ b/tmp/d5aefb7f-c1df-4668-9862-671168a9089e_fixed.java
@@ -1,32 +1,54 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Safely cast typeOfThis to ObjectType, handling the case where it may be a UnionType.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+        // Check if all alternates of the UnionType are ObjectTypes, otherwise it's invalid.
+        UnionType union = (UnionType) resolvedTypeOfThis;
+        ImmutableList<JSType> alternates = union.getAlternates();
+        ObjectType unionTypeOfThis = null;
+        for (JSType alternate : alternates) {
+            if (alternate instanceof ObjectType) {
+                ObjectType alternateObjectType = (ObjectType) alternate;
+                if (unionTypeOfThis == null) {
+                    unionTypeOfThis = alternateObjectType;
+                } else {
+                    unionTypeOfThis = unionTypeOfThis.getLeastSupertype(alternateObjectType);
+                }
+            } else {
+                typeOfThis = null;
+                break;
+            }
+        }
+        typeOfThis = unionTypeOfThis;
+    } else {
+        typeOfThis = null;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
