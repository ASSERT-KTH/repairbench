diff --git a/tmp/9ee2ff8d-a09b-41c5-b3d2-3391d81c577e_buggy.java b/tmp/12f86968-ee51-49b0-bb7b-29216f75cd42_fixed.java
index 58a1651..9abf6af 100644
--- a/tmp/9ee2ff8d-a09b-41c5-b3d2-3391d81c577e_buggy.java
+++ b/tmp/12f86968-ee51-49b0-bb7b-29216f75cd42_fixed.java
@@ -1,32 +1,40 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis, and handle the case where it might be a UnionType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+        for (JSType alt : ((UnionType) resolvedTypeOfThis).getAlternates()) {
+            if (alt instanceof ObjectType) {
+                typeOfThis = (ObjectType) alt;
+                break;
+            }
+        }
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
