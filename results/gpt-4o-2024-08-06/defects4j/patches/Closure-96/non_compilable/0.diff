diff --git a/tmp/02f85f8e-11af-405e-abe8-2a6652d90a0f_buggy.java b/tmp/9843ca98-471f-4f3e-904b-46a5c93bda5c_fixed.java
index e0ecec8..d188ece 100644
--- a/tmp/02f85f8e-11af-405e-abe8-2a6652d90a0f_buggy.java
+++ b/tmp/9843ca98-471f-4f3e-904b-46a5c93bda5c_fixed.java
@@ -1,35 +1,49 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
            parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
+    while (arguments.hasNext()) {
+      argument = arguments.next();
+      ordinal++;
+
+      // For var_args functions where there are more arguments than parameters
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getVarArgsJSType(functionType), call, ordinal);
+    }
+
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
+
+  private JSType getVarArgsJSType(FunctionType functionType) {
+    // Assuming this method returns the JSType for the var_args parameter
+    // which is generally the last parameter of a var_args function
+    Node varArgsParam = Iterables.getLast(functionType.getParameters(), null);
+    return varArgsParam != null ? getJSType(varArgsParam) : null;
+  }
\ No newline at end of file
