diff --git a/tmp/121d9f0f-7909-4f9f-833a-8b820fedff37_buggy.java b/tmp/79606102-4441-4e39-9c7d-edd71189f866_fixed.java
index 6e05e4b..3b86dc5 100644
--- a/tmp/121d9f0f-7909-4f9f-833a-8b820fedff37_buggy.java
+++ b/tmp/79606102-4441-4e39-9c7d-edd71189f866_fixed.java
@@ -1,51 +1,51 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
-      if (name == null) {
+  boolean isUnnamedFunctionExpression = false;
+  boolean isUnnamedFunctionStatement = name == null;
+
+  if (isUnnamedFunctionStatement) {
+    // Check if the unnamed function is at a statement level which is not allowed.
+    if (!functionNode.isExpressionClosure() && 
+        (functionNode.getParent() == null || !(functionNode.getParent() instanceof AstNode))) {
+      throw new IllegalStateException("unnamed function statement");
+    } else {
       name = new Name();
       name.setIdentifier("");
-        isUnnamedFunction = true;
+      isUnnamedFunctionExpression = true;
     }
+  }
+
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
-      if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
+
+  if (isUnnamedFunctionExpression) {
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
 
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
+
   Name fnName = functionNode.getFunctionName();
   if (fnName != null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
 
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
   lp.setCharno(position2charno(lparenCharno));
+
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
+  
   return node;
 }
\ No newline at end of file
