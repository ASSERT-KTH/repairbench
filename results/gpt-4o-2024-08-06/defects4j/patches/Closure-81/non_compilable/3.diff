diff --git a/tmp/01517e1f-c4f5-43fc-93fa-675c02b9e911_buggy.java b/tmp/92faf7f5-94cc-4cde-8e3a-14ef47e3c6e2_fixed.java
index 6e05e4b..0c66945 100644
--- a/tmp/01517e1f-c4f5-43fc-93fa-675c02b9e911_buggy.java
+++ b/tmp/92faf7f5-94cc-4cde-8e3a-14ef47e3c6e2_fixed.java
@@ -1,51 +1,44 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
   if (name == null) {
+    // If there's no name and it's a function declaration (not an expression),
+    // it should result in an error, as unnamed function statements aren't allowed.
+    if (functionNode.isStatement()) {
+      throw new IllegalArgumentException("unnamed function statement");
+    }
+    // If it's an expression, we treat it as an unnamed function and continue.
     name = new Name();
     name.setIdentifier("");
-        isUnnamedFunction = true;
   }
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
-      if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
-        newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
-        newName.setCharno(position2charno(lpColumn));
-      }
 
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
   // The left paren's complicated because it's not represented by an
   // AstNode, so there's nothing that has the actual line number that it
   // appeared on.  We know the paren has to appear on the same line as the
   // function name (or else a semicolon will be inserted.)  If there's no
   // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
+  // TODO: Mark line number of paren correctly.
   Name fnName = functionNode.getFunctionName();
   if (fnName != null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
   int lparenCharno = functionNode.getLp() +
       functionNode.getAbsolutePosition();
 
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
   return node;
 }
\ No newline at end of file
