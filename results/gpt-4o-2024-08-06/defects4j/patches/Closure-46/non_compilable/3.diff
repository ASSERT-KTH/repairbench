diff --git a/tmp/7115e0a0-5330-44d2-a7c1-b2e153e9c67e_buggy.java b/tmp/e3fe70ff-4e22-4e20-bc54-d482f1de96c7_fixed.java
index 46817a7..9c0695d 100644
--- a/tmp/7115e0a0-5330-44d2-a7c1-b2e153e9c67e_buggy.java
+++ b/tmp/e3fe70ff-4e22-4e20-bc54-d482f1de96c7_fixed.java
@@ -1,16 +1,26 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+        // If either record type has a property, it should be included in the least supertype.
+        if (that.toMaybeRecordType().hasProperty(property)) {
+            JSType thisPropertyType = getPropertyType(property);
+            JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);
+            JSType leastSuperType = thisPropertyType.getLeastSupertype(thatPropertyType);
+            builder.addProperty(property, leastSuperType, getPropertyNode(property));
+        } else {
+            // The property is only in this record type
+            builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
+        }
+    }
+    for (String property : that.toMaybeRecordType().getProperties()) {
+        // Add properties only in 'that' record type
+        if (!properties.containsKey(property)) {
+            builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyNode(property));
         }
     }
     return builder.build();
 }
\ No newline at end of file
