diff --git a/tmp/d5224c5a-daa0-4246-b61f-255ee2ec48d1_buggy.java b/tmp/8c4628d2-57d6-4313-b455-62dac6d9a2f5_fixed.java
index 46817a7..7b57e0d 100644
--- a/tmp/d5224c5a-daa0-4246-b61f-255ee2ec48d1_buggy.java
+++ b/tmp/8c4628d2-57d6-4313-b455-62dac6d9a2f5_fixed.java
@@ -1,16 +1,30 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    RecordType thatRecordType = that.toMaybeRecordType();
+    
+    // Add properties from this type
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+        JSType thisPropertyType = getPropertyType(property);
+        if (thatRecordType.hasProperty(property)) {
+            JSType thatPropertyType = thatRecordType.getPropertyType(property);
+            // Use the least supertype of the properties
+            builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType), getPropertyNode(property));
+        } else {
+            // Add property exclusive to this type
+            builder.addProperty(property, thisPropertyType, getPropertyNode(property));
         }
     }
+    
+    // Add properties that are exclusive to the other type
+    for (String property : thatRecordType.getProperties()) {
+        if (!properties.containsKey(property)) {
+            builder.addProperty(property, thatRecordType.getPropertyType(property), thatRecordType.getPropertyNode(property));
+        }
+    }
+    
     return builder.build();
 }
\ No newline at end of file
