diff --git a/tmp/924c8557-e605-485b-bb4a-bda8fa1cee30_buggy.java b/tmp/5e1c70e8-c882-43c2-b02f-6adc8c73f626_fixed.java
index 46817a7..b8cfb32 100644
--- a/tmp/924c8557-e605-485b-bb4a-bda8fa1cee30_buggy.java
+++ b/tmp/5e1c70e8-c882-43c2-b02f-6adc8c73f626_fixed.java
@@ -1,16 +1,29 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
+
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    RecordType thatRecord = that.toMaybeRecordType();
+
+    // Add all properties from both record types to the builder
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+        JSType thisPropertyType = getPropertyType(property);
+        if (thatRecord.hasProperty(property)) {
+            JSType thatPropertyType = thatRecord.getPropertyType(property);
+            JSType leastSupertype = thisPropertyType.getLeastSupertype(thatPropertyType);
+            builder.addProperty(property, leastSupertype, getPropertyNode(property));
+        } else {
+            builder.addProperty(property, thisPropertyType, getPropertyNode(property));
         }
     }
+
+    for (String property : thatRecord.getProperties()) {
+        if (!properties.containsKey(property)) {
+            builder.addProperty(property, thatRecord.getPropertyType(property), thatRecord.getPropertyNode(property));
+        }
+    }
+
     return builder.build();
 }
\ No newline at end of file
