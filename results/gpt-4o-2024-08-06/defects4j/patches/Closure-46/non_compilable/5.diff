diff --git a/tmp/8ca14e4e-456b-47ec-b104-82911d33134a_buggy.java b/tmp/4cd9df50-72a8-46d7-bf94-cb7dcad0d38d_fixed.java
index 46817a7..8a8ea58 100644
--- a/tmp/8ca14e4e-456b-47ec-b104-82911d33134a_buggy.java
+++ b/tmp/4cd9df50-72a8-46d7-bf94-cb7dcad0d38d_fixed.java
@@ -1,16 +1,28 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+  // Collect all properties from both record types
+  RecordType thisRecordType = this.toMaybeRecordType();
+  RecordType thatRecordType = that.toMaybeRecordType();
+
+  Set<String> allProperties = new HashSet<>(properties.keySet());
+  allProperties.addAll(thatRecordType.properties.keySet());
+
+  for (String property : allProperties) {
+    JSType thisPropType = thisRecordType.getPropertyType(property);
+    JSType thatPropType = thatRecordType.getPropertyType(property);
+
+    if (thisRecordType.hasProperty(property) && thatRecordType.hasProperty(property)) {
+      // Add the least supertype of the two property types
+      builder.addProperty(property, thisPropType.getLeastSupertype(thatPropType), null);
+    } else if (thisRecordType.hasProperty(property)) {
+      builder.addProperty(property, thisPropType, getPropertyNode(property));
+    } else {
+      builder.addProperty(property, thatPropType, thatRecordType.getPropertyNode(property));
     }
   }
   return builder.build();
 }
\ No newline at end of file
