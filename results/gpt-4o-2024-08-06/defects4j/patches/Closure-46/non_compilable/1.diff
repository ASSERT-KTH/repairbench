diff --git a/tmp/573f8764-f594-4f38-9e2a-0be1d0f9a190_buggy.java b/tmp/d7f58b9f-4605-4f63-b49a-e43625302ecb_fixed.java
index 46817a7..048c691 100644
--- a/tmp/573f8764-f594-4f38-9e2a-0be1d0f9a190_buggy.java
+++ b/tmp/d7f58b9f-4605-4f63-b49a-e43625302ecb_fixed.java
@@ -1,16 +1,33 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
+
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    RecordType thatRecord = that.toMaybeRecordType();
+
+    // Add all properties from the current record type
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+        JSType type1 = getPropertyType(property);
+        JSType type2 = thatRecord.hasProperty(property) ? thatRecord.getPropertyType(property) : null;
+
+        if (type2 != null && type1.isEquivalentTo(type2)) {
+            builder.addProperty(property, type1, getPropertyNode(property));
+        } else {
+            builder.addProperty(property, type1, getPropertyNode(property));
+            if (type2 != null) {
+                builder.addProperty(property, type2, null);
             }
         }
+    }
+
+    // Add any remaining properties from 'that' which were not already added
+    for (String property : thatRecord.getProperties()) {
+        if (!properties.containsKey(property)) {
+            builder.addProperty(property, thatRecord.getPropertyType(property), null);
+        }
+    }
+
     return builder.build();
 }
\ No newline at end of file
