diff --git a/tmp/6c8cd288-642c-4350-a644-92b5a5096fcb_buggy.java b/tmp/1b2107ab-fe98-44f4-9139-d0c03d66696f_fixed.java
index 46817a7..0e6af18 100644
--- a/tmp/6c8cd288-642c-4350-a644-92b5a5096fcb_buggy.java
+++ b/tmp/1b2107ab-fe98-44f4-9139-d0c03d66696f_fixed.java
@@ -1,16 +1,28 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
+    RecordType thatRecord = that.toMaybeRecordType();
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+
+    boolean hasCommonProperty = false;
+    // Add properties that are in both types with equivalent types
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+        JSType thisPropType = getPropertyType(property);
+        if (thatRecord.hasProperty(property)) {
+            JSType thatPropType = thatRecord.getPropertyType(property);
+            if (thisPropType.isEquivalentTo(thatPropType)) {
+                builder.addProperty(property, thisPropType, getPropertyNode(property));
+                hasCommonProperty = true;
             }
         }
+    }
+
+    // If there are no common properties, return a union type of both record types
+    if (!hasCommonProperty) {
+        return registry.createUnionType(this, that);
+    }
+
     return builder.build();
 }
\ No newline at end of file
