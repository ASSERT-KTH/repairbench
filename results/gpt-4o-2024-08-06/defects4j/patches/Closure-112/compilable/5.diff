diff --git a/tmp/ee1f3aa4-6885-497d-b5df-7d05223565d2_buggy.java b/tmp/51a5c88f-9c5a-48c4-afe6-692b95e87fe1_fixed.java
index 63641d0..2df9f7d 100644
--- a/tmp/ee1f3aa4-6885-497d-b5df-7d05223565d2_buggy.java
+++ b/tmp/51a5c88f-9c5a-48c4-afe6-692b95e87fe1_fixed.java
@@ -1,33 +1,39 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
     
+    // Check that replacementFnType is not null
+    if (replacementFnType != null) {
       callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+      JSType returnType = replacementFnType.getReturnType();
+      
+      // Set JSType to UNKNOWN if returnType is null
+      if (returnType != null) {
+        n.setJSType(returnType);
+      } else {
+        n.setJSType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+      }
+    } else {
+      callTarget.setJSType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+      n.setJSType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+    }
 
     return replacer.madeChanges;
   }
\ No newline at end of file
