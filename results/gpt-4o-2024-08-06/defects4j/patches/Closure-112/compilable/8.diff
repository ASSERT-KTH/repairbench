diff --git a/tmp/b69c82be-4ed9-4060-9007-2ad3174a9543_buggy.java b/tmp/b8c0b1a8-6177-4025-9d46-537a7b4227b1_fixed.java
index 63641d0..75fc976 100644
--- a/tmp/b69c82be-4ed9-4060-9007-2ad3174a9543_buggy.java
+++ b/tmp/b8c0b1a8-6177-4025-9d46-537a7b4227b1_fixed.java
@@ -1,33 +1,39 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
         
+    if (inferred.isEmpty()) {
+      // If no types could be inferred, use the original function to prevent
+      // the function type from becoming malformed.
+      n.setJSType(fnType.getReturnType());
+      return false;
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
