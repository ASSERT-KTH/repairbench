diff --git a/tmp/6dcc1370-0829-46ba-a54d-0ce7064ca709_buggy.java b/tmp/33c83bce-b3bd-49c2-b7cd-f8fdb4e66c26_fixed.java
index 63641d0..da057ee 100644
--- a/tmp/6dcc1370-0829-46ba-a54d-0ce7064ca709_buggy.java
+++ b/tmp/33c83bce-b3bd-49c2-b7cd-f8fdb4e66c26_fixed.java
@@ -1,33 +1,38 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
 
+    // If no types could be inferred, return false to indicate no changes were made.
+    if (inferred.isEmpty()) {
+      return false;
+    }
+
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+    n.setJSType(replacementFnType.getReturnType() != null ? replacementFnType.getReturnType() : registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
 
     return replacer.madeChanges;
   }
\ No newline at end of file
