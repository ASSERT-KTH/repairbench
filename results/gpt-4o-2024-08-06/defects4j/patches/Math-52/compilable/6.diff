diff --git a/tmp/ea7f954b-6bfa-4fe0-bae3-9e267c3c3bb3_buggy.java b/tmp/b0c6940b-a22c-4699-8704-1880f91b4629_fixed.java
index 0e110fe..06f384b 100644
--- a/tmp/ea7f954b-6bfa-4fe0-bae3-9e267c3c3bb3_buggy.java
+++ b/tmp/b0c6940b-a22c-4699-8704-1880f91b4629_fixed.java
@@ -1,96 +1,58 @@
-  /** Build the rotation that transforms a pair of vector into another pair.
-
-   * <p>Except for possible scale factors, if the instance were applied to
-   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
-   * (v<sub>1</sub>, v<sub>2</sub>).</p>
-
-   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
-   * not the same as the angular separation between v<sub>1</sub> and
-   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
-   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
-   * v<sub>2</sub>) plane.</p>
-
-   * @param u1 first vector of the origin pair
-   * @param u2 second vector of the origin pair
-   * @param v1 desired image of u1 by the rotation
-   * @param v2 desired image of u2 by the rotation
-   * @exception IllegalArgumentException if the norm of one of the vectors is zero
-   */
 public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
     if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
         throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
     // normalize v1 in order to have (v1'|v1') = (u1|u1)
     v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
 
     // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
     double u1u2 = u1.dotProduct(u2);
     double v1v2 = v1.dotProduct(v2);
     double coeffU = u1u2 / u1u1;
-  double coeffV = v1v2 / u1u1;
+    double coeffV = v1v2 / v1v1;
     double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
     double alpha = coeffU - beta * coeffV;
     v2 = new Vector3D(alpha, v1, beta, v2);
 
     // preliminary computation
     Vector3D uRef = u1;
     Vector3D vRef = v1;
-  Vector3D v1Su1 = v1.subtract(u1);
-  Vector3D v2Su2 = v2.subtract(u2);
-  Vector3D k     = v1Su1.crossProduct(v2Su2);
-  Vector3D u3    = u1.crossProduct(u2);
-  double c       = k.dotProduct(u3);
-  if (c == 0) {
-    // the (q1, q2, q3) vector is close to the (u1, u2) plane
-    // we try other vectors
-    Vector3D v3 = Vector3D.crossProduct(v1, v2);
-    Vector3D v3Su3 = v3.subtract(u3);
-    k = v1Su1.crossProduct(v3Su3);
-    Vector3D u2Prime = u1.crossProduct(u3);
-    c = k.dotProduct(u2Prime);
+    Vector3D k = u1.crossProduct(u2).normalize();
+    Vector3D q3CrossU1 = v2.subtract(v1);
 
-    if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+    double c = k.dotProduct(q3CrossU1);
+    if (FastMath.abs(c) < 1.0e-10) {
+        // if the computation fell here it is due to numerical noise, thinking the vectors
     
-      if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
+        // are aligned. In this case, q3CrossU1 is mostly zeroed and we try
+        // with the original destination vectors
+        q3CrossU1 = u2.crossProduct(v2);
+        c = k.dotProduct(q3CrossU1);
+
+        if (FastMath.abs(c) < 1.0e-10) {
+            // the rotation is close to being along the (u1, v2) direction set only the scalar part
             q0 = 1.0;
             q1 = 0.0;
             q2 = 0.0;
             q3 = 0.0;
             return;
         }
-
-      // we will have to use u2 and v2 to compute the scalar part
-      uRef = u2;
-      vRef = v2;
-
-    }
-
     }
 
     // compute the vectorial part
-  c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
-  q1 = inv * k.getX();
-  q2 = inv * k.getY();
-  q3 = inv * k.getZ();
-
-  // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
-                    uRef.getZ() * q1 - uRef.getX() * q3,
-                    uRef.getX() * q2 - uRef.getY() * q1);
-  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+    double s = FastMath.sqrt((1.0 + c) * 2.0);
+    double invS = 1.0 / s;
+    q1 = q3CrossU1.getX() * invS;
+    q2 = q3CrossU1.getY() * invS;
+    q3 = q3CrossU1.getZ() * invS;
 
+    // and the scalar part
+    q0 = (1.0 / 2.0) * s;
 }
\ No newline at end of file
