diff --git a/tmp/27fa140f-0900-46e2-927a-dc881b889d07_buggy.java b/tmp/94a34705-607a-4733-856a-3aa916236e03_fixed.java
index cc69d41..2e40cd0 100644
--- a/tmp/27fa140f-0900-46e2-927a-dc881b889d07_buggy.java
+++ b/tmp/94a34705-607a-4733-856a-3aa916236e03_fixed.java
@@ -1,29 +1,24 @@
-    /**
-     * Create an Option using the current settings and with
-     * the specified Option <code>char</code>.
-     *
-     * @param opt the <code>java.lang.String</code> representation
-     * of the Option
-     * @return the Option instance
-     * @throws IllegalArgumentException if <code>opt</code> is not
-     * a valid character.  See Option.
-     */
     public static Option create(String opt) throws IllegalArgumentException
     {
+        if (opt == null || opt.length() == 0) {
+            throw new IllegalArgumentException("opt must not be null or empty");
+        }
+        
         // create the option
-        Option option = new Option(opt, description);
+        Option option = new Option(opt, OptionBuilder.description);
 
         // set the option properties
-            option.setLongOpt(longopt);
-            option.setRequired(required);
-            option.setOptionalArg(optionalArg);
-            option.setArgs(numberOfArgs);
-            option.setType(type);
-            option.setValueSeparator(valuesep);
-            option.setArgName(argName);
+        option.setLongOpt(OptionBuilder.longopt);
+        option.setRequired(OptionBuilder.required);
+        option.setOptionalArg(OptionBuilder.optionalArg);
+        option.setArgs(OptionBuilder.numberOfArgs);
+        option.setType(OptionBuilder.type);
+        option.setValueSeparator(OptionBuilder.valuesep);
+        option.setArgName(OptionBuilder.argName);
+        
         // reset the OptionBuilder properties
         OptionBuilder.reset();
 
         // return the Option instance
         return option;
     }
\ No newline at end of file
