diff --git a/tmp/c6bd6787-c4de-4b8b-93f8-0d0d7f450822_buggy.java b/tmp/25b3f78f-4228-480c-8bd9-023041706486_fixed.java
index cc69d41..73d0296 100644
--- a/tmp/c6bd6787-c4de-4b8b-93f8-0d0d7f450822_buggy.java
+++ b/tmp/25b3f78f-4228-480c-8bd9-023041706486_fixed.java
@@ -1,29 +1,24 @@
-    /**
-     * Create an Option using the current settings and with
-     * the specified Option <code>char</code>.
-     *
-     * @param opt the <code>java.lang.String</code> representation
-     * of the Option
-     * @return the Option instance
-     * @throws IllegalArgumentException if <code>opt</code> is not
-     * a valid character.  See Option.
-     */
     public static Option create(String opt) throws IllegalArgumentException
     {
+        if (opt == null || opt.isEmpty() || opt.length() != 1) {
+            throw new IllegalArgumentException("opt must be a single character");
+        }
+
         // create the option
-        Option option = new Option(opt, description);
+        Option option = new Option(opt, OptionBuilder.getDescription());
 
         // set the option properties
-            option.setLongOpt(longopt);
-            option.setRequired(required);
-            option.setOptionalArg(optionalArg);
-            option.setArgs(numberOfArgs);
-            option.setType(type);
-            option.setValueSeparator(valuesep);
-            option.setArgName(argName);
+        option.setLongOpt(OptionBuilder.getLongOpt());
+        option.setRequired(OptionBuilder.isRequired());
+        option.setOptionalArg(OptionBuilder.hasOptionalArg());
+        option.setArgs(OptionBuilder.getNumberOfArgs());
+        option.setType(OptionBuilder.getType());
+        option.setValueSeparator(OptionBuilder.getValueSeparator());
+        option.setArgName(OptionBuilder.getArgName());
+        
         // reset the OptionBuilder properties
         OptionBuilder.reset();
 
         // return the Option instance
         return option;
     }
\ No newline at end of file
