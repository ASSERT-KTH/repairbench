diff --git a/tmp/83194f61-6975-48be-a4fd-5d4a4fbefca1_buggy.java b/tmp/1d6fb26a-2f3b-43f3-a1d5-01c6e5780558_fixed.java
index d666a67..1272c1f 100644
--- a/tmp/83194f61-6975-48be-a4fd-5d4a4fbefca1_buggy.java
+++ b/tmp/1d6fb26a-2f3b-43f3-a1d5-01c6e5780558_fixed.java
@@ -1,36 +1,29 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
 private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
     // limit (no cache):
-        if (count > maxStringCacheLen)
-            return new String(charBuf, start, count);
+    if (count > maxStringCacheLen || count < 0) // Check for negative count
+        return new String(charBuf, start, Math.max(0, count)); // Ensure valid String constructor arguments
 
     // calculate hash:
     int hash = 0;
     int offset = start;
     for (int i = 0; i < count; i++) {
         hash = 31 * hash + charBuf[offset++];
     }
 
     // get from cache
-        final int index = hash & stringCache.length - 1;
+    final int index = hash & (stringCache.length - 1);
     String cached = stringCache[index];
 
     if (cached == null) { // miss, add
-            cached = new String(charBuf, start, count);
+        cached = new String(charBuf, start, Math.max(0, count)); // Ensure valid String constructor arguments
         stringCache[index] = cached;
     } else { // hashcode hit, check equality
         if (rangeEquals(charBuf, start, count, cached)) { // hit
             return cached;
         } else { // hashcode conflict
-                cached = new String(charBuf, start, count);
+            cached = new String(charBuf, start, Math.max(0, count)); // Ensure valid String constructor arguments
             stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
         }
     }
     return cached;
 }
\ No newline at end of file
