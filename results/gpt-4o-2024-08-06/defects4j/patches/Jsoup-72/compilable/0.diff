diff --git a/tmp/a0b4978d-e909-441f-a1ab-199201cdbfd4_buggy.java b/tmp/0fa81bcf-a444-45c2-bd6e-31f9addbd3d4_fixed.java
index d666a67..0a1f15d 100644
--- a/tmp/a0b4978d-e909-441f-a1ab-199201cdbfd4_buggy.java
+++ b/tmp/0fa81bcf-a444-45c2-bd6e-31f9addbd3d4_fixed.java
@@ -1,36 +1,28 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
     private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
         // limit (no cache):
         if (count > maxStringCacheLen)
             return new String(charBuf, start, count);
 
         // calculate hash:
         int hash = 0;
-        int offset = start;
-        for (int i = 0; i < count; i++) {
-            hash = 31 * hash + charBuf[offset++];
+        for (int i = start; i < start + count; i++) {
+            hash = 31 * hash + charBuf[i];
         }
 
         // get from cache
-        final int index = hash & stringCache.length - 1;
+        final int index = hash & (stringCache.length - 1);
         String cached = stringCache[index];
 
         if (cached == null) { // miss, add
             cached = new String(charBuf, start, count);
             stringCache[index] = cached;
         } else { // hashcode hit, check equality
             if (rangeEquals(charBuf, start, count, cached)) { // hit
                 return cached;
             } else { // hashcode conflict
                 cached = new String(charBuf, start, count);
                 stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
             }
         }
         return cached;
     }
\ No newline at end of file
