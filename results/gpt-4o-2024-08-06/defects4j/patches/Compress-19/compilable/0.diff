diff --git a/tmp/579a5376-ac86-4aee-b64a-3839855310a6_buggy.java b/tmp/380fcafb-9206-472e-8e5f-e5baa89f1ce7_fixed.java
index 730ab7d..3509c22 100644
--- a/tmp/579a5376-ac86-4aee-b64a-3839855310a6_buggy.java
+++ b/tmp/380fcafb-9206-472e-8e5f-e5baa89f1ce7_fixed.java
@@ -1,48 +1,39 @@
-    /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
-     *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
-     */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
+            int expectedMinLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            if (rawCentralDirectoryData.length < expectedMinLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
+                                       + " is less than the minimum expected value."
+                                       + " Expected minimum length "
+                                       + expectedMinLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
-            if (hasUncompressedSize) {
+            if (hasUncompressedSize && offset + DWORD <= rawCentralDirectoryData.length) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
-            if (hasCompressedSize) {
+            if (hasCompressedSize && offset + DWORD <= rawCentralDirectoryData.length) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
-            if (hasRelativeHeaderOffset) {
+            if (hasRelativeHeaderOffset && offset + DWORD <= rawCentralDirectoryData.length) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
-            if (hasDiskStart) {
+            if (hasDiskStart && offset + WORD <= rawCentralDirectoryData.length) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
                 offset += WORD;
             }
         }
     }
\ No newline at end of file
