diff --git a/tmp/9a749829-bdc6-4bf0-9bb3-740365657928_buggy.java b/tmp/72c01bbb-c14d-438b-bf1b-6acc7f60eeb5_fixed.java
index f650982..8af6166 100644
--- a/tmp/9a749829-bdc6-4bf0-9bb3-740365657928_buggy.java
+++ b/tmp/72c01bbb-c14d-438b-bf1b-6acc7f60eeb5_fixed.java
@@ -1,42 +1,61 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    if (l instanceof Iterator) {
+        l = convertIteratorToCollection((Iterator) l);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+
+    if (r instanceof Iterator) {
+        r = convertIteratorToCollection((Iterator) r);
     }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+
+    if ((l instanceof Collection) && !(r instanceof Collection)) {
+        return contains(((Collection) l), r);
     }
-        return equal(l, r);
+
+    if (!(l instanceof Collection) && (r instanceof Collection)) {
+        return contains(((Collection) r), l);
+    }
+    
+    if (l instanceof Collection && r instanceof Collection) {
+        return findMatch(((Collection) l).iterator(), ((Collection) r).iterator());
+    }
+
+    return l == r || (l != null && l.equals(r));
+}
+
+private Collection convertIteratorToCollection(Iterator iterator) {
+    Collection collection = new ArrayList();
+    while (iterator.hasNext()) {
+        collection.add(iterator.next());
+    }
+    return collection;
+}
+
+private boolean contains(Collection collection, Object element) {
+    return collection.contains(element);
 }
\ No newline at end of file
