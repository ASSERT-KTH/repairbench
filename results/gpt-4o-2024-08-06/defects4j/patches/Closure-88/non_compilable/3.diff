diff --git a/tmp/40fed3b9-c371-4b26-aaba-7ad1a0487501_buggy.java b/tmp/bcad17e4-5013-42e2-bc22-eec8b55abf04_fixed.java
index 9353941..19f185c 100644
--- a/tmp/40fed3b9-c371-4b26-aaba-7ad1a0487501_buggy.java
+++ b/tmp/bcad17e4-5013-42e2-bc22-eec8b55abf04_fixed.java
@@ -1,30 +1,24 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+    if (NodeUtil.isLhsOfAssign(n)) {
+      // If the variable is on the left-hand side of an assignment, it is KILL.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+  VariableLiveness firstState = VariableLiveness.MAYBE_LIVE;
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
+      // Use the first non-MAYBE_LIVE state encountered
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
-    return VariableLiveness.MAYBE_LIVE;
+  return firstState;
 }
\ No newline at end of file
