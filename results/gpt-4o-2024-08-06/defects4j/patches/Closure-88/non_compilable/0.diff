diff --git a/tmp/846f7a26-cd10-4e46-8f2c-cc24fc7c69d4_buggy.java b/tmp/5f24cd52-5c7c-4c71-9b4f-e8b23fa128a5_fixed.java
index 9353941..eb95982 100644
--- a/tmp/846f7a26-cd10-4e46-8f2c-cc24fc7c69d4_buggy.java
+++ b/tmp/5f24cd52-5c7c-4c71-9b4f-e8b23fa128a5_fixed.java
@@ -1,30 +1,36 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      // The assignment to the variable is evaluated after the RHS,
+      // it should return KILL.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
+  // Explicit check for assignment expressions (e.g., a = ...).
+  if (n.isAssign() || n.isVar()) {
+    Node lhs = NodeUtil.getBestLValue(n);
+    if (lhs != null && variable.equals(lhs.getString())) {
+      return VariableLiveness.KILL;
+    }
+  }
+
   // Expressions are evaluated left-right, depth first.
+  VariableLiveness result = VariableLiveness.MAYBE_LIVE;
   for (Node child = n.getFirstChild();
        child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
+      if (state == VariableLiveness.READ || state == VariableLiveness.KILL) {
         return state;
       }
+      if (state == VariableLiveness.MAYBE_LIVE) {
+        result = state;
       }
     }
-    return VariableLiveness.MAYBE_LIVE;
+  }
+  return result;
 }
\ No newline at end of file
