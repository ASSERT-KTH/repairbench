diff --git a/tmp/1f158eed-8155-46fb-ba61-dff20a48b676_buggy.java b/tmp/bed37a5e-7405-4e63-bb48-562fadfcda6f_fixed.java
index 9353941..4788458 100644
--- a/tmp/1f158eed-8155-46fb-ba61-dff20a48b676_buggy.java
+++ b/tmp/bed37a5e-7405-4e63-bb48-562fadfcda6f_fixed.java
@@ -1,30 +1,25 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
+    if (NodeUtil.isLhs(n, n.getParent()) && !NodeUtil.isAssignExprLhs(n)) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
