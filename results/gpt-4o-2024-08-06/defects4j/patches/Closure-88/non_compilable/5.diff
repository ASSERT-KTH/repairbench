diff --git a/tmp/eb1641dd-54a5-4f5c-896b-17fbf2127bb0_buggy.java b/tmp/5dcf79c4-0d17-42e5-91eb-3e7131ef0ba2_fixed.java
index 9353941..b2c1a32 100644
--- a/tmp/eb1641dd-54a5-4f5c-896b-17fbf2127bb0_buggy.java
+++ b/tmp/5dcf79c4-0d17-42e5-91eb-3e7131ef0ba2_fixed.java
@@ -1,30 +1,29 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+        Node parent = n.getParent();
+        if (parent.isAssign() && parent.getFirstChild() == n) {
+          // The RHS of the assignment could potentially use the variable
+          VariableLiveness rightState = isVariableReadBeforeKill(parent.getLastChild(), variable);
+          if (rightState == VariableLiveness.READ) {
+            return VariableLiveness.READ;
+          }
+        }
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
