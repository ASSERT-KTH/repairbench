diff --git a/tmp/cc1b9f21-c852-4ca6-807d-f31f34dcad8e_buggy.java b/tmp/1a53e43b-99df-4d19-85ef-f49f95165cff_fixed.java
index 9353941..cc7774e 100644
--- a/tmp/cc1b9f21-c852-4ca6-807d-f31f34dcad8e_buggy.java
+++ b/tmp/1a53e43b-99df-4d19-85ef-f49f95165cff_fixed.java
@@ -1,30 +1,26 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
+      if (NodeUtil.isLhs(n, n.getParent()) && NodeUtil.isAssign(n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+        // occurs after the RHS is evaluated. This check ensures it returns
+        // KILL only if the node is part of an assignment operation.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
