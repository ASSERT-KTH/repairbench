diff --git a/tmp/d05d95b4-7b3a-4a72-a776-4437388980d5_buggy.java b/tmp/d87497f1-c6e5-41e3-868e-122aeee2716a_fixed.java
index 939f49b..e3df7b5 100644
--- a/tmp/d05d95b4-7b3a-4a72-a776-4437388980d5_buggy.java
+++ b/tmp/d87497f1-c6e5-41e3-868e-122aeee2716a_fixed.java
@@ -1,21 +1,20 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
       && n.getType() == Token.GETPROP
       ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    // We want to support both chained property assignments 
+    // and array-like property accesses on "prototype".
+    Node child = n.getFirstChild();
+    while(child != null && child.getType() == Token.GETPROP) {
+      child = child.getFirstChild();
+    }
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
+    if (child != null && child.getType() == Token.STRING &&
         child.getString().equals("prototype")) {
       return true;
     }
   }
-      }
 
   return false;
 }
\ No newline at end of file
