diff --git a/tmp/47a046ec-3ab0-4e9d-87a6-b18c737453cf_buggy.java b/tmp/8dcde583-1a25-487c-a98f-5fb99cb648e1_fixed.java
index 82bdfd4..46c17c9 100644
--- a/tmp/47a046ec-3ab0-4e9d-87a6-b18c737453cf_buggy.java
+++ b/tmp/8dcde583-1a25-487c-a98f-5fb99cb648e1_fixed.java
@@ -1,51 +1,43 @@
-    /**
-     * <p>Test if two <code>Object</code>s are equal using their
-     * <code>equals</code> method.</p>
-     *
-     * @param lhs  the left hand object
-     * @param rhs  the right hand object
-     * @return EqualsBuilder - used to chain calls.
-     */
     public EqualsBuilder append(Object lhs, Object rhs) {
         if (isEquals == false) {
             return this;
         }
         if (lhs == rhs) {
             return this;
         }
         if (lhs == null || rhs == null) {
             this.setEquals(false);
             return this;
         }
-        Class lhsClass = lhs.getClass();
-        if (!lhsClass.isArray()) {
-                // The simple case, not an array, just test the element
-                isEquals = lhs.equals(rhs);
-        } else if (lhs.getClass() != rhs.getClass()) {
-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
-            this.setEquals(false);
-        }
-        // 'Switch' on type of array, to dispatch to the correct handler
-        // This handles multi dimensional arrays of the same depth
-        else if (lhs instanceof long[]) {
+        
+        Class<?> lhsClass = lhs.getClass();
+        Class<?> rhsClass = rhs.getClass();
+
+        if (lhsClass.isArray() && rhsClass.isArray()) {
+            if (lhs instanceof long[] && rhs instanceof long[]) {
                 append((long[]) lhs, (long[]) rhs);
-        } else if (lhs instanceof int[]) {
+            } else if (lhs instanceof int[] && rhs instanceof int[]) {
                 append((int[]) lhs, (int[]) rhs);
-        } else if (lhs instanceof short[]) {
+            } else if (lhs instanceof short[] && rhs instanceof short[]) {
                 append((short[]) lhs, (short[]) rhs);
-        } else if (lhs instanceof char[]) {
+            } else if (lhs instanceof char[] && rhs instanceof char[]) {
                 append((char[]) lhs, (char[]) rhs);
-        } else if (lhs instanceof byte[]) {
+            } else if (lhs instanceof byte[] && rhs instanceof byte[]) {
                 append((byte[]) lhs, (byte[]) rhs);
-        } else if (lhs instanceof double[]) {
+            } else if (lhs instanceof double[] && rhs instanceof double[]) {
                 append((double[]) lhs, (double[]) rhs);
-        } else if (lhs instanceof float[]) {
+            } else if (lhs instanceof float[] && rhs instanceof float[]) {
                 append((float[]) lhs, (float[]) rhs);
-        } else if (lhs instanceof boolean[]) {
+            } else if (lhs instanceof boolean[] && rhs instanceof boolean[]) {
                 append((boolean[]) lhs, (boolean[]) rhs);
             } else {
-            // Not an array of primitives
                 append((Object[]) lhs, (Object[]) rhs);
             }
+        } else if (!lhsClass.isArray()) {
+            isEquals = lhs.equals(rhs);
+        } else {
+            this.setEquals(false);
+        }
+        
         return this;
     }
\ No newline at end of file
