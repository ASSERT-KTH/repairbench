diff --git a/tmp/9d2bdcb1-5e21-45cc-b9f4-1cf79f295eb5_buggy.java b/tmp/bf7224f5-d54c-4fd9-b839-2eac4d5f583c_fixed.java
index 82bdfd4..747c763 100644
--- a/tmp/9d2bdcb1-5e21-45cc-b9f4-1cf79f295eb5_buggy.java
+++ b/tmp/bf7224f5-d54c-4fd9-b839-2eac4d5f583c_fixed.java
@@ -1,51 +1,48 @@
-    /**
-     * <p>Test if two <code>Object</code>s are equal using their
-     * <code>equals</code> method.</p>
-     *
-     * @param lhs  the left hand object
-     * @param rhs  the right hand object
-     * @return EqualsBuilder - used to chain calls.
-     */
     public EqualsBuilder append(Object lhs, Object rhs) {
         if (isEquals == false) {
             return this;
         }
         if (lhs == rhs) {
             return this;
         }
         if (lhs == null || rhs == null) {
             this.setEquals(false);
             return this;
         }
         Class lhsClass = lhs.getClass();
+        // Handle BigDecimal comparison specifically
+        if (lhs instanceof BigDecimal && rhs instanceof BigDecimal) {
+            isEquals = ((BigDecimal) lhs).compareTo((BigDecimal) rhs) == 0;
+            return this;
+        }
         if (!lhsClass.isArray()) {
                 // The simple case, not an array, just test the element
                 isEquals = lhs.equals(rhs);
         } else if (lhs.getClass() != rhs.getClass()) {
             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
             this.setEquals(false);
         }
         // 'Switch' on type of array, to dispatch to the correct handler
         // This handles multi dimensional arrays of the same depth
         else if (lhs instanceof long[]) {
             append((long[]) lhs, (long[]) rhs);
         } else if (lhs instanceof int[]) {
             append((int[]) lhs, (int[]) rhs);
         } else if (lhs instanceof short[]) {
             append((short[]) lhs, (short[]) rhs);
         } else if (lhs instanceof char[]) {
             append((char[]) lhs, (char[]) rhs);
         } else if (lhs instanceof byte[]) {
             append((byte[]) lhs, (byte[]) rhs);
         } else if (lhs instanceof double[]) {
             append((double[]) lhs, (double[]) rhs);
         } else if (lhs instanceof float[]) {
             append((float[]) lhs, (float[]) rhs);
         } else if (lhs instanceof boolean[]) {
             append((boolean[]) lhs, (boolean[]) rhs);
         } else {
             // Not an array of primitives
             append((Object[]) lhs, (Object[]) rhs);
         }
         return this;
     }
\ No newline at end of file
