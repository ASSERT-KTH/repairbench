diff --git a/tmp/f3171655-7229-47e3-86b0-340a3e5ef450_buggy.java b/tmp/68649488-a434-426c-8d55-f90f3f71c298_fixed.java
index 0313249..e5e2962 100644
--- a/tmp/f3171655-7229-47e3-86b0-340a3e5ef450_buggy.java
+++ b/tmp/68649488-a434-426c-8d55-f90f3f71c298_fixed.java
@@ -1,32 +1,32 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
         String key = getPropertyName(propToRm);
         boolean found = false;
 
-        for (int i = 1, end = _hashArea.length; i < end; i += 2) {
-            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
+        for (int i = 0, end = _hashArea.length; i < end; i += 2) {
+            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i + 1];
             if (prop == null) {
                 continue;
             }
             if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+                // Updated to check against the property's case-insensitive key
+                String propKey = (String) _hashArea[i];
+                found = key.equalsIgnoreCase(propKey);
                 if (found) {
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
                     continue;
                 }
             }
             props.add(prop);
         }
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
         init(props);
     }
\ No newline at end of file
