diff --git a/tmp/cfe29945-c823-4c0d-a56f-3252d9314e1b_buggy.java b/tmp/54adb9e5-bfe2-4595-ac6a-f9d4a562733a_fixed.java
index 851ffc2..392cb2d 100644
--- a/tmp/cfe29945-c823-4c0d-a56f-3252d9314e1b_buggy.java
+++ b/tmp/54adb9e5-bfe2-4595-ac6a-f9d4a562733a_fixed.java
@@ -1,70 +1,69 @@
-    /**
-     * Replace the provide statement.
-     *
-     * If we're providing a name with no definition, then create one.
-     * If we're providing a name with a duplicate definition, then make sure
-     * that definition becomes a declaration.
-     */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
-          if (nameNode.getType() == Token.NAME) {
+          if (nameNode != null && nameNode.getType() == Token.NAME) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
+            if (valueNode != null) {
               assignNode.removeChild(nameNode);
               assignNode.removeChild(valueNode);
               nameNode.addChildToFront(valueNode);
+            }
             Node varNode = new Node(Token.VAR, nameNode);
             varNode.copyInformationFrom(candidateDefinition);
-            candidateDefinition.getParent().replaceChild(
-                candidateDefinition, varNode);
+            candidateDefinition.getParent().replaceChild(candidateDefinition, varNode);
             nameNode.setJSDocInfo(assignNode.getJSDocInfo());
             compiler.reportCodeChange();
             replacementNode = varNode;
           }
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
         if (firstModule == minimumModule) {
           firstNode.getParent().addChildBefore(replacementNode, firstNode);
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
-          int indexOfDot = namespace.indexOf('.');
+          int indexOfDot = namespace.lastIndexOf('.');
           if (indexOfDot == -1) {
             // Any old place is fine.
-            compiler.getNodeForCodeInsertion(minimumModule)
-                .addChildToBack(replacementNode);
+            compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
           } else {
-            // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
+            // Add it to ensure there is a common namespace path.
+            String parentNamespace = namespace.substring(0, indexOfDot);
+            ProvidedName parentName = providedNames.get(parentNamespace);
+            while (parentName == null && indexOfDot != -1) {
+              indexOfDot = parentNamespace.lastIndexOf('.');
+              if (indexOfDot != -1) {
+                parentNamespace = parentNamespace.substring(0, indexOfDot);
+                parentName = providedNames.get(parentNamespace);
+              }
+            }
             Preconditions.checkNotNull(parentName);
             Preconditions.checkNotNull(parentName.replacementNode);
-            parentName.replacementNode.getParent().addChildAfter(
-                replacementNode, parentName.replacementNode);
+            parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);
           }
         }
         if (explicitNode != null) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
