diff --git a/tmp/23667022-3392-4f1a-a394-7fe12e362e0f_buggy.java b/tmp/ff33c856-2304-4f50-858d-6d6139d8250a_fixed.java
index cfdcd9c..3b21cbc 100644
--- a/tmp/23667022-3392-4f1a-a394-7fe12e362e0f_buggy.java
+++ b/tmp/ff33c856-2304-4f50-858d-6d6139d8250a_fixed.java
@@ -1,51 +1,50 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
         return n;
     }
 
     if (!right.isNumber()) {
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
     Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
-      current = current.getNext();
-    }
-
-    if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
+    for (int i = 0; current != null && i <= intIndex; i++) {
+        if (i == intIndex) {
+            Node elem = current;
 
             if (elem.isEmpty()) {
                 elem = NodeUtil.newUndefinedNode(elem);
             } else {
                 left.removeChild(elem);
             }
 
             // Replace the entire GETELEM with the value
             n.getParent().replaceChild(n, elem);
             reportCodeChange();
             return elem;
         }
+        current = current.getNext();
+    }
+
+    // Index out of bounds
+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+    return n;
+}
\ No newline at end of file
