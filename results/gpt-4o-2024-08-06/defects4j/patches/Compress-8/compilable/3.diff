diff --git a/tmp/bbb3e728-09c6-40d0-94df-6b3bb6f7c0e9_buggy.java b/tmp/81b5e967-1d6d-47f9-9f39-7e171fc5279b_fixed.java
index e087f95..cb0f14e 100644
--- a/tmp/bbb3e728-09c6-40d0-94df-6b3bb6f7c0e9_buggy.java
+++ b/tmp/81b5e967-1d6d-47f9-9f39-7e171fc5279b_fixed.java
@@ -1,53 +1,51 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("The buffer length must be at least 2 bytes.");
+    }
+    
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
+    boolean foundTrailing = false;
+
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            foundTrailing = true;
             break;
         }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
         if (currentByte == (byte) ' ') {
+            if (stillPadding) {
+                continue;
+            }
             break;
         }
+
+        if (currentByte == '0' && stillPadding) {
+            continue;
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+        // Check for valid octal digits
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    if (!foundTrailing) {
+        throw new IllegalArgumentException("The buffer must be terminated by a space or NUL.");
+    }
+
+    // If the buffer only contained leading zeros or spaces, or was entirely NULs, return 0
+    if (stillPadding) {
+        return 0L;
     }
 
     return result;
 }
\ No newline at end of file
