diff --git a/tmp/6e0fb601-053e-402e-93e9-094e047eb2d3_buggy.java b/tmp/1c4208a2-394e-444b-a58f-528b710562dc_fixed.java
index e087f95..f665b55 100644
--- a/tmp/6e0fb601-053e-402e-93e9-094e047eb2d3_buggy.java
+++ b/tmp/1c4208a2-394e-444b-a58f-528b710562dc_fixed.java
@@ -1,53 +1,72 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes long.");
+    }
+
+    int end = offset + length;
+
+    if (end > buffer.length) {
+        throw new IllegalArgumentException("Offset and length exceed buffer size.");
+    }
+
+    // Check if the buffer is all NULs
+    boolean allNULs = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNULs = false;
+            break;
+        }
+    }
+
+    if (allNULs) {
+        return 0L;
+    }
+
     long result = 0;
     boolean stillPadding = true;
-        int     end = offset + length;
     int start = offset;
 
+    boolean trailerFound = false;
+
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            trailerFound = true;
             break;
         }
 
         // Skip leading spaces
         if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
             if (currentByte == (byte) ' ') {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Validate octal characters
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0'); // Convert from ASCII
+
+        // Check for illegal embedded space or NUL
+        if (i < end - 1) {
+            byte nextByte = buffer[i + 1];
+            if (nextByte == ' ' || nextByte == 0) {
+                trailerFound = true;
+            }
+        }
+    }
+
+    if (!trailerFound) {
+        throw new IllegalArgumentException("Parsed data must end with a space or NUL.");
     }
 
     return result;
 }
\ No newline at end of file
