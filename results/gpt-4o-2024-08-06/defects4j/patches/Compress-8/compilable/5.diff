diff --git a/tmp/3c1cc291-6bf9-4036-99da-cdb17d1e7078_buggy.java b/tmp/921a071b-9b16-4dd2-984c-5fc852e09a8e_fixed.java
index e087f95..ff1b5a1 100644
--- a/tmp/3c1cc291-6bf9-4036-99da-cdb17d1e7078_buggy.java
+++ b/tmp/921a071b-9b16-4dd2-984c-5fc852e09a8e_fixed.java
@@ -1,53 +1,58 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("The input length must be at least 2 bytes.");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean foundTerminator = false;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
         
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == 0 || currentByte == (byte) ' ') {
             if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
+            foundTerminator = true;
             break;
         }
-            }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+        if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {
+            continue;
+        }
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
+
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    if (!foundTerminator) {
+        throw new IllegalArgumentException("The input must have a trailing space or NUL.");
     }
 
     return result;
 }
\ No newline at end of file
