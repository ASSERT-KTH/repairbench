diff --git a/tmp/b66cc579-45d3-459a-a705-c61f2191efa9_buggy.java b/tmp/7c0d00ae-5878-4819-9a3a-0f8272b18168_fixed.java
index e087f95..c517e9a 100644
--- a/tmp/b66cc579-45d3-459a-a705-c61f2191efa9_buggy.java
+++ b/tmp/7c0d00ae-5878-4819-9a3a-0f8272b18168_fixed.java
@@ -1,53 +1,54 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Buffer length must be at least 2 bytes long");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean hasTrailingSpaceOrNUL = false;
+
+    // Check if buffer contains only NULs
+    boolean allNULs = true;
+    for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNULs = false;
+            break;
+        }
+    }
+    if (allNULs) {
+        return 0L;
+    }
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            hasTrailingSpaceOrNUL = true;
             break;
         }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == (byte) ' ') {
             if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
+            break; // embedded space when not still padding
         }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        // If it's not a leading space or a valid octal digit
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
+
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        stillPadding = false;
+    }
+
+    if (!hasTrailingSpaceOrNUL) {
+        throw new IllegalArgumentException("Input should have a trailing space or NUL");
     }
 
     return result;
 }
\ No newline at end of file
