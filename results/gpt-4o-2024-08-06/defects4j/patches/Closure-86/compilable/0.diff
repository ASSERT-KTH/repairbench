diff --git a/tmp/5147aa2a-c2d2-4725-8ecb-6e952b5fa049_buggy.java b/tmp/88301c36-7033-4e0d-b3ca-f8f17a9badec_fixed.java
index a3709ee..7b8a0e4 100644
--- a/tmp/5147aa2a-c2d2-4725-8ecb-6e952b5fa049_buggy.java
+++ b/tmp/88301c36-7033-4e0d-b3ca-f8f17a9badec_fixed.java
@@ -1,71 +1,59 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
+        // A result that is aliased by a non-local name, is effectively the
         // same as returning a non-local name, but this doesn't matter if the
         // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+        return evaluatesToLocalValue(value.getLastChild(), locals)
+            || (locals.apply(value.getFirstChild())
+                && evaluatesToLocalValue(value.getFirstChild(), locals));
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
-        } else {
-          return true;
-        }
+        // Pre-increment/decrement results in local value, post-increment does not.
+        return value.getBooleanProp(Node.INCRDECR_PROP);
       case Token.THIS:
         return locals.apply(value);
       case Token.NAME:
         return isImmutableValue(value) || locals.apply(value);
       case Token.GETELEM:
       case Token.GETPROP:
         // There is no information about the locality of object properties.
-        return locals.apply(value);
+        return false;
       case Token.CALL:
         return callHasLocalResult(value)
-            || isToStringMethodCall(value)
-            || locals.apply(value);
+            || isToStringMethodCall(value);
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // Only safe if we know it's not aliased from inside the constructor
+        return callHasLocalResult(value);
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+        // Literals or constructs known to be immutable.
         return true;
       case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        // The "IN" operator results in a local boolean.
         return true;
       default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+        // Other operators force a local value:
+        // "x = '' + g" (x is now a local string)
+        // "x -= g" (x is now a local number)
         if (isAssignmentOp(value)
             || isSimpleOperator(value)
             || isImmutableValue(value)) {
           return true;
         }
-
         throw new IllegalStateException(
-            "Unexpected expression node" + value +
+            "Unexpected expression node: " + value +
             "\n parent: " + value.getParent());
     }
   }
\ No newline at end of file
