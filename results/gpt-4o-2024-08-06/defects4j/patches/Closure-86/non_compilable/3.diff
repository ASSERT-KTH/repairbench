diff --git a/tmp/80d4d1ac-22a0-4cd5-9356-f29bc988d54f_buggy.java b/tmp/447e1d0d-0305-4d54-af99-107c5d4b98d6_fixed.java
index a3709ee..760dee5 100644
--- a/tmp/80d4d1ac-22a0-4cd5-9356-f29bc988d54f_buggy.java
+++ b/tmp/447e1d0d-0305-4d54-af99-107c5d4b98d6_fixed.java
@@ -1,71 +1,49 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
         case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
             return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
+                || (locals.test(value.getFirstChild())
                     && evaluatesToLocalValue(value.getLastChild(), locals));
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
         case Token.OR:
             return evaluatesToLocalValue(value.getFirstChild(), locals)
                 && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.HOOK:
             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
                 && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.INC:
         case Token.DEC:
-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
-        } else {
-          return true;
-        }
+            return !value.getBooleanProp(Node.INCRDECR_PROP)
+                || evaluatesToLocalValue(value.getFirstChild(), locals);
         case Token.THIS:
-        return locals.apply(value);
+            return false;
         case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
+            return isImmutableValue(value) || locals.test(value);
         case Token.GETELEM:
         case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
+            return false;
         case Token.CALL:
             return callHasLocalResult(value)
-            || isToStringMethodCall(value)
-            || locals.apply(value);
+                || isToStringMethodCall(value);
         case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+            return false;
         case Token.FUNCTION:
         case Token.REGEXP:
         case Token.ARRAYLIT:
         case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
             return true;
         case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
             return true;
         default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
             if (isAssignmentOp(value)
                 || isSimpleOperator(value)
                 || isImmutableValue(value)) {
                 return true;
             }
-
             throw new IllegalStateException(
-            "Unexpected expression node" + value +
+                "Unexpected expression node: " + value +
                 "\n parent: " + value.getParent());
     }
 }
\ No newline at end of file
