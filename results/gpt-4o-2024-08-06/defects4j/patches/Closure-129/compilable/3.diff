diff --git a/tmp/1c1d2565-4043-4989-93d5-999d2a90a106_buggy.java b/tmp/783d4880-f4ca-4964-aa5c-040cff55d5af_fixed.java
index e8705ac..db783f3 100644
--- a/tmp/1c1d2565-4043-4989-93d5-999d2a90a106_buggy.java
+++ b/tmp/783d4880-f4ca-4964-aa5c-040cff55d5af_fixed.java
@@ -1,24 +1,24 @@
     /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
+     * There are two types of calls we are interested in: calls without explicit
+     * "this" values (what we call "free" calls) and direct calls to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+      // Keep track of the "this" context of a call. A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
+      Node target = NodeUtil.getBestLValue(first);
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+      // Ignore cast nodes and ensure target is not null before checking if it's a get node.
+      if (target != null && !NodeUtil.isGet(target)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
