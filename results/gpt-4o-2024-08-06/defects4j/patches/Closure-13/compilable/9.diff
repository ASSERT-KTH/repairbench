diff --git a/tmp/a742ab90-9103-4023-a6bc-dd6882d96d1f_buggy.java b/tmp/77dabf76-1edb-4d8c-83f4-6886e047f0a3_fixed.java
index b5d94e0..3983a67 100644
--- a/tmp/a742ab90-9103-4023-a6bc-dd6882d96d1f_buggy.java
+++ b/tmp/77dabf76-1edb-4d8c-83f4-6886e047f0a3_fixed.java
@@ -1,26 +1,35 @@
 private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
+    boolean retraverse;
     do {
       Node c = node.getFirstChild();
       while (c != null) {
         traverse(c);
-        Node next = c.getNext();
-        c = next;
+        c = c.getNext();
       }
 
       visit(node);
       visits++;
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+      Preconditions.checkState(visits < 10000, "too many iterations");
+      retraverse = shouldRetraverse(node);
+
+      // If retraverse is required and node changed, reinitialize the traversal from the first child.
+      if (retraverse) {
+        Node firstChild = node.getFirstChild();
+        if (firstChild != null) {
+          c = firstChild;
+        }
+      }
+    } while (retraverse);
 
     exitNode(node);
   }
\ No newline at end of file
