diff --git a/tmp/5375f8f7-e692-4f30-a425-039750c51ca7_buggy.java b/tmp/9a6168b1-c6f1-463c-873c-da82b09cb545_fixed.java
index b5d94e0..529f936 100644
--- a/tmp/5375f8f7-e692-4f30-a425-039750c51ca7_buggy.java
+++ b/tmp/9a6168b1-c6f1-463c-873c-da82b09cb545_fixed.java
@@ -1,26 +1,31 @@
 private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
-    int visits = 0;
-    do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
+    Set<Node> visitedNodes = new HashSet<>();
+    LinkedList<Node> stack = new LinkedList<>();
+    stack.push(node);
+
+    while (!stack.isEmpty()) {
+      Node currentNode = stack.pop();
+
+      // Skip nodes that are already visited unless we need to retraverse
+      if (!visitedNodes.add(currentNode) && !shouldRetraverse(currentNode)) {
+        continue;
       }
 
-      visit(node);
-      visits++;
+      Node child = currentNode.getFirstChild();
+      while (child != null) {
+        stack.push(child);
+        child = child.getNext();
+      }
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+      visit(currentNode);
+      visitedNodes.add(currentNode);
+
+      Preconditions.checkState(visitedNodes.size() < 10000, "too many iterations");
+    }
 
     exitNode(node);
 }
\ No newline at end of file
