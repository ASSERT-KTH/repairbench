diff --git a/tmp/9b39d45f-4e1e-4d0a-ae7e-746dd5eb9a2b_buggy.java b/tmp/33420f83-fd49-44b5-9410-587d5103b5e6_fixed.java
index 5abdeb5..6de5af0 100644
--- a/tmp/9b39d45f-4e1e-4d0a-ae7e-746dd5eb9a2b_buggy.java
+++ b/tmp/33420f83-fd49-44b5-9410-587d5103b5e6_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
               !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+               (parent.getFirstChild() == n) &&
+               !(parent.getParent() != null && parent.getParent().isHook()))) {
+              // Don't count lhs of top-level assignment chain, unless parent is a hook
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
