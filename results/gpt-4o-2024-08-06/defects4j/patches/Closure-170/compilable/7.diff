diff --git a/tmp/5fdfbc31-503d-4988-894a-a0991823ca7b_buggy.java b/tmp/defae422-2cd6-4053-9089-c4fd1e07d365_fixed.java
index 5abdeb5..0d9a402 100644
--- a/tmp/5fdfbc31-503d-4988-894a-a0991823ca7b_buggy.java
+++ b/tmp/defae422-2cd6-4053-9089-c4fd1e07d365_fixed.java
@@ -1,29 +1,26 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+              !(parent.isAssign() && (parent.getFirstChild() == n) || 
+                (parent.isHook() && parent.getFirstChild().getNext() == n))) {
               // Don't count lhs of top-level assignment chain
+              // Don't count the assignment part of a hook expression
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
