diff --git a/tmp/ea2a45b1-fb2b-4f6d-8895-dc4e5f48c566_buggy.java b/tmp/b1b6e2f9-7bfd-4648-83f7-16e87b16cb2a_fixed.java
index 0eef537..4a359ca 100644
--- a/tmp/ea2a45b1-fb2b-4f6d-8895-dc4e5f48c566_buggy.java
+++ b/tmp/b1b6e2f9-7bfd-4648-83f7-16e87b16cb2a_fixed.java
@@ -1,74 +1,55 @@
-    /**
-     * Calculates the Cholesky decomposition of the given matrix.
-     * @param matrix the matrix to decompose
-     * @param relativeSymmetryThreshold threshold above which off-diagonal
-     * elements are considered too different and matrix not symmetric
-     * @param absolutePositivityThreshold threshold below which diagonal
-     * elements are considered null and matrix not positive definite
-     * @exception NonSquareMatrixException if matrix is not square
-     * @exception NotSymmetricMatrixException if matrix is not symmetric
-     * @exception NotPositiveDefiniteMatrixException if the matrix is not
-     * strictly positive definite
-     * @see #CholeskyDecompositionImpl(RealMatrix)
-     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
-     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
-     */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
         lTData = matrix.getData();
         cachedL = null;
         cachedLT = null;
 
         // check the matrix before transformation
         for (int i = 0; i < order; ++i) {
 
             final double[] lI = lTData[i];
 
+            // Update the check for positive definiteness to use i'th diagonal
+            // element's value after transformations
+            for (int j = 0; j < i; ++j) {
+                final double[] lJ = lTData[j];
+                lI[i] -= lI[j] * lI[j];
+            }
+
             if (lTData[i][i] < absolutePositivityThreshold) {
                 throw new NotPositiveDefiniteMatrixException();
             }
+
+            lI[i] = Math.sqrt(lI[i]);
+            final double inverse = 1.0 / lI[i];
+
+            for (int q = i + 1; q < order; ++q) {
+                final double[] lQ = lTData[q];
+                // Use existing partial results of i'th row for off-diagonal
+                for (int j = 0; j < i; ++j) {
+                    lQ[i] -= lQ[j] * lI[j];
+                }
+
+                lQ[i] *= inverse;
+
                 // check off-diagonal elements (and reset them to 0)
-            for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double lIJ = lI[q];
+                final double lJI = lQ[i];
                 final double maxDelta =
                         relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
             }
         }
-
-        // transform the matrix
-        for (int i = 0; i < order; ++i) {
-
-            final double[] ltI = lTData[i];
-
-            // check diagonal element
-
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
-
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
-                }
-            }
-
-        }
-
     }
\ No newline at end of file
