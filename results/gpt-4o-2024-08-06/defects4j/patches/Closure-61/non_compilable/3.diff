diff --git a/tmp/4707ab08-8847-413f-9f25-ad15cc5ed50a_buggy.java b/tmp/adbceb38-4e62-4d42-8c1d-41a464e6bb38_fixed.java
index b36c3f0..faed01a 100644
--- a/tmp/4707ab08-8847-413f-9f25-ad15cc5ed50a_buggy.java
+++ b/tmp/adbceb38-4e62-4d42-8c1d-41a464e6bb38_fixed.java
@@ -1,58 +1,60 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
+      String objectName = nameNode.getFirstChild().getString();
+      String propertyName = nameNode.getLastChild().getString();
+
+      // Functions in the "Math" namespace have no side effects.
+      if ("Math".equals(objectName) && MATH_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(propertyName)) {
+        return false;
+      }
+
       if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
+          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(propertyName)) {
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
-
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+            && REGEXP_METHODS.contains(propertyName)) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+            && STRING_REGEXP_METHODS.contains(propertyName)) {
           Node param = nameNode.getNext();
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
       }
     }
 
     return true;
   }
+  
+  // Assume that we have a field/set of strings that contain the names of side effects free math functions
+  private static final Set<String> MATH_FUNCTIONS_WITHOUT_SIDEEFFECTS = Set.of(
+      "sin", "cos", "tan", "exp", "log", "sqrt", "abs" // and so on for all Math functions that are pure
+  );
\ No newline at end of file
