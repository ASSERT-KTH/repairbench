diff --git a/tmp/06073df7-75e3-4d7a-98d5-53593ea3efb9_buggy.java b/tmp/a30e3cce-f273-4812-90a2-52bbb181a375_fixed.java
index b36c3f0..e8412e5 100644
--- a/tmp/06073df7-75e3-4d7a-98d5-53593ea3efb9_buggy.java
+++ b/tmp/a30e3cce-f273-4812-90a2-52bbb181a375_fixed.java
@@ -1,58 +1,52 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
-    // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
+      String propName = nameNode.getLastChild().getString();
+      if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(propName)) {
         return false;
       }
 
+      // Functions in the "Math" namespace have no side effects.
+      if ("Math".equals(nameNode.getFirstChild().getString())) {
+        return true;
+      }
+
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
-
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+            && REGEXP_METHODS.contains(propName)) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
-          Node param = nameNode.getNext();
+            && STRING_REGEXP_METHODS.contains(propName)) {
+          Node param = callNode.getSecondChild();
           if (param != null &&
               (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+                  || param.getType() == Token.REGEXP)) {
             return false;
           }
         }
       }
+    }
 
     return true;
   }
\ No newline at end of file
