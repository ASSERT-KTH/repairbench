diff --git a/tmp/c6e0c34a-271e-40bf-9cef-2b7037c27304_buggy.java b/tmp/b9ef71a0-8c80-45e7-938f-0a1ef920df60_fixed.java
index 1126687..f98702d 100644
--- a/tmp/c6e0c34a-271e-40bf-9cef-2b7037c27304_buggy.java
+++ b/tmp/b9ef71a0-8c80-45e7-938f-0a1ef920df60_fixed.java
@@ -1,65 +1,63 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
   if (left.getType() == Token.NUMBER &&
       right.getType() == Token.NUMBER) {
 
     double result;
     double lval = left.getDouble();
     double rval = right.getDouble();
 
     // check ranges.  We do not do anything that would clip the double to
     // a 32-bit range, since the user likely does not intend that.
     if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
       error(BITWISE_OPERAND_OUT_OF_RANGE, left);
       return n;
     }
 
+    // Convert the numbers to ints
+    int lvalInt = (int) lval;
+    if ((double) lvalInt != lval) { // Cast to double for exact comparison
+      error(FRACTIONAL_BITWISE_OPERAND, left);
+      return n;
+    }
+
     // only the lower 5 bits are used when shifting, so don't do anything
     // if the shift amount is outside [0,32)
     if (!(rval >= 0 && rval < 32)) {
       error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
       return n;
     }
 
-      // Convert the numbers to ints
-      int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
     int rvalInt = (int) rval;
-      if (rvalInt != rval) {
+    if ((double) rvalInt != rval) { // Cast to double for exact comparison
       error(FRACTIONAL_BITWISE_OPERAND, right);
       return n;
     }
 
     switch (n.getType()) {
       case Token.LSH:
-          result = lvalInt << rvalInt;
+        result = (long) lvalInt << rvalInt; // Use long for correct overflow
         break;
       case Token.RSH:
         result = lvalInt >> rvalInt;
         break;
       case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+        // Convert to a long to perform an unsigned right shift correctly
+        result = (lvalInt & 0xFFFFFFFFL) >>> rvalInt;
         break;
       default:
         throw new AssertionError("Unknown shift operator: " +
             Node.tokenToName(n.getType()));
     }
 
     Node newNumber = Node.newNumber(result);
     n.getParent().replaceChild(n, newNumber);
     reportCodeChange();
 
     return newNumber;
   }
 
   return n;
 }
\ No newline at end of file
