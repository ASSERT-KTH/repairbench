diff --git a/tmp/0a3cf482-6528-48c4-8309-a736018cd4e9_buggy.java b/tmp/16b101cc-74a5-43d6-be12-3fb17c84ec94_fixed.java
index 1126687..53a258f 100644
--- a/tmp/0a3cf482-6528-48c4-8309-a736018cd4e9_buggy.java
+++ b/tmp/16b101cc-74a5-43d6-be12-3fb17c84ec94_fixed.java
@@ -1,65 +1,63 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
-      double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
+      // Check ranges. We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
+      // Only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
+      // Convert the numbers to ints, ensuring they have no fractional part
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      long result; // Use long to handle unsigned right shifts correctly
       switch (n.getType()) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
+          result = (long) lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          result = (lvalInt & 0xFFFFFFFFL) >>> rvalInt; // Handle the unsigned shift
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
-      Node newNumber = Node.newNumber(result);
+      // Convert result to number node, ensuring we don't go out of range
+      Node newNumber = Node.newNumber(result >= (double)Integer.MIN_VALUE && result <= (double)Integer.MAX_VALUE ? (int)result : result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
