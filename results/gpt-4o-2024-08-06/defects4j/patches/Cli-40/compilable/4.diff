diff --git a/tmp/c6a93c24-1678-4fa4-9d70-5f7824b49f98_buggy.java b/tmp/9f79599d-3f19-44a3-88ac-e4607fc18fe4_fixed.java
index a7d0787..bca7722 100644
--- a/tmp/c6a93c24-1678-4fa4-9d70-5f7824b49f98_buggy.java
+++ b/tmp/9f79599d-3f19-44a3-88ac-e4607fc18fe4_fixed.java
@@ -1,54 +1,70 @@
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
+    try {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        else if (clazz == Integer.class)
+        {
+            return (T) Integer.valueOf(str);
+        }
+        else if (clazz == Double.class)
+        {
+            return (T) Double.valueOf(str);
+        }
+        else if (clazz == Long.class)
+        {
+            return (T) Long.valueOf(str);
+        }
         else
         {
-            return null;
+            throw new ParseException("Unsupported class: " + clazz);
+        }
+    } catch (Exception e) {
+        throw new ParseException("Unable to create value for " + clazz + " from input '" + str + "'");
     }
 }
\ No newline at end of file
