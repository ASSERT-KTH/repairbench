diff --git a/tmp/683d3a60-ce1e-4066-a453-40820d68293e_buggy.java b/tmp/58642707-1c24-4b62-bb16-1d2701a731da_fixed.java
index a7d0787..5c01e85 100644
--- a/tmp/683d3a60-ce1e-4066-a453-40820d68293e_buggy.java
+++ b/tmp/58642707-1c24-4b62-bb16-1d2701a731da_fixed.java
@@ -1,54 +1,33 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+        try {
+            if (PatternOptionBuilder.STRING_VALUE == clazz) {
                 return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+            } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
                 return (T) createObject(str);
-        }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
+            } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
                 return (T) createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+            } else if (PatternOptionBuilder.DATE_VALUE == clazz) {
                 return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+            } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
                 return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+            } else if (PatternOptionBuilder.FILE_VALUE == clazz) {
                 return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+            } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
                 return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+            } else if (PatternOptionBuilder.FILES_VALUE == clazz) {
                 return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+            } else if (PatternOptionBuilder.URL_VALUE == clazz) {
                 return (T) createURL(str);
+            } else if (Integer.class == clazz) {
+                return (T) Integer.valueOf(str);
+            } else {
+                throw new ParseException("Unsupported class: " + clazz);
             }
-        else
-        {
-            return null;
+        } catch (NumberFormatException e) {
+            throw new ParseException("Error parsing number: " + str);
+        } catch (Exception e) {
+            throw new ParseException("Failed to create value of type: " + clazz + " with input: " + str);
         }
     }
\ No newline at end of file
