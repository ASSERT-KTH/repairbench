diff --git a/tmp/693e96a7-4301-4318-8c8e-51d7df92642d_buggy.java b/tmp/e71d4ec1-c4b4-4a73-97c2-8807a9b896c4_fixed.java
index 1478ee1..b1a00c0 100644
--- a/tmp/693e96a7-4301-4318-8c8e-51d7df92642d_buggy.java
+++ b/tmp/e71d4ec1-c4b4-4a73-97c2-8807a9b896c4_fixed.java
@@ -1,24 +1,20 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+    // compute rho as an approximation of v1.v2 / v2.v2
+    double dotV1V2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+    double dotV2V2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+    double rho = dotV1V2 / dotV2V2;
+
+    // compute v3 as v1 - rho * v2
+    double v3X = v1.x - rho * v2.x;
+    double v3Y = v1.y - rho * v2.y;
+    double v3Z = v1.z - rho * v2.z;
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    return new Vector3D(v3Y * v2.z - v3Z * v2.y, v3Z * v2.x - v3X * v2.z, v3X * v2.y - v3Y * v2.x);
 }
\ No newline at end of file
