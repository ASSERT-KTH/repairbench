diff --git a/tmp/02a38f3c-a752-4e9f-8f18-415b3aa31a65_buggy.java b/tmp/38726c02-524d-44f2-9583-c85485f5ea82_fixed.java
index 227a4ef..6c5fca0 100644
--- a/tmp/02a38f3c-a752-4e9f-8f18-415b3aa31a65_buggy.java
+++ b/tmp/38726c02-524d-44f2-9583-c85485f5ea82_fixed.java
@@ -1,48 +1,47 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+            text = padding + text.substring(lastPos).trim();
             pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
-            } else
-            if (pos == lastPos)
+            } else if (pos == lastPos)
             {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                // The bug here is that adding only padding might not increase the 
+                // text length sufficiently for a new wrap position. One possible fix 
+                // is to increase the position by nextLineTabStop and skip 
+                // padding length and any extra spaces.
+                pos = lastPos + nextLineTabStop;
+                while (pos < text.length() && Character.isWhitespace(text.charAt(pos))) {
+                    pos++;
+                }
+                if (pos >= text.length()) {
+                    sb.append(text);
+                    return sb;
+                }
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
