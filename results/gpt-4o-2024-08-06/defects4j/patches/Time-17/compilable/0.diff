diff --git a/tmp/071bf2e7-a52f-4e21-a140-a5bc7c2c0293_buggy.java b/tmp/a370b48d-f7ed-40f1-aacc-94985f0fcfd1_fixed.java
index 03b03d7..d5e02cb 100644
--- a/tmp/071bf2e7-a52f-4e21-a140-a5bc7c2c0293_buggy.java
+++ b/tmp/a370b48d-f7ed-40f1-aacc-94985f0fcfd1_fixed.java
@@ -1,25 +1,29 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // check if the local time during an overlap actually matches the earlier/later offset
+        long adjustedInstant = convertLocalToUTC(local, false, instantAfter);
+        if (adjustedInstant == instant || earlierOrLater) {
+            return adjustedInstant;
+        }
+        
+        // otherwise, return the computed earlier instant
+        return convertLocalToUTC(local, false, instantBefore);
     }
\ No newline at end of file
