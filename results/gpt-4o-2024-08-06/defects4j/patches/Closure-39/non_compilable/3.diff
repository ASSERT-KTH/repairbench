diff --git a/tmp/499f4d6b-8c57-4183-a04b-663cb85b6c63_buggy.java b/tmp/76fe754b-50b5-4dca-9ec0-74fffd001ef7_fixed.java
index e4d90e7..0631197 100644
--- a/tmp/499f4d6b-8c57-4183-a04b-663cb85b6c63_buggy.java
+++ b/tmp/76fe754b-50b5-4dca-9ec0-74fffd001ef7_fixed.java
@@ -1,45 +1,50 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType();
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
+      boolean tooManyProperties = propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES;
+      if (tooManyProperties) {
+        propertyNames = new TreeSet<>(propertyNames).headSet(Ordering.natural()
+                .sortedCopy(propertyNames).get(MAX_PRETTY_PRINTED_PROPERTIES));
+      }
+
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
         sb.append(getPropertyType(property).toString());
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      }
+
+      if (tooManyProperties) {
         sb.append(", ...");
-          break;
-        }
       }
 
       sb.append("}");
 
       prettyPrint = true;
       return sb.toString();
     } else {
       return "{...}";
     }
   }
\ No newline at end of file
