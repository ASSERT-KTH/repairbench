diff --git a/tmp/f56441ba-d13a-43cf-924a-205e13dacb03_buggy.java b/tmp/07e455b0-ba43-4d3c-acc3-7d62865f5cdc_fixed.java
index ae1f3a6..3b18dac 100644
--- a/tmp/f56441ba-d13a-43cf-924a-205e13dacb03_buggy.java
+++ b/tmp/07e455b0-ba43-4d3c-acc3-7d62865f5cdc_fixed.java
@@ -1,34 +1,33 @@
 protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
 {
-        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
-         *    check if any generics info is added; and only then ask factory
-         *    to do translation when necessary
-         */
     TypeFactory tf = ctxt.getTypeFactory();
+    JavaType baseType = _baseType;
+
     if (id.indexOf('<') > 0) {
-            // note: may want to try combining with specialization (esp for EnumMap)?
-            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
-            //    compatibility -- needed later anyway, and not doing so may open
-            //    security issues.
+        // Handle type with generics
         JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+        if (!t.isTypeOrSuperTypeOf(baseType.getRawClass())) {
+            throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): not subtype of base type");
+        }
         return t;
     }
+    
     Class<?> cls;
     try {
         cls = tf.findClass(id);
     } catch (ClassNotFoundException e) {
-            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
-            //   DeserializationContext, just playing it safe
         if (ctxt instanceof DeserializationContext) {
             DeserializationContext dctxt = (DeserializationContext) ctxt;
-                // First: we may have problem handlers that can deal with it?
-                return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
+            return dctxt.handleUnknownTypeId(baseType, id, this, "no such class found");
         }
-            // ... meaning that we really should never get here.
         return null;
     } catch (Exception e) {
         throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
     }
-        return tf.constructSpecializedType(_baseType, cls);
+
+    if (!baseType.getRawClass().isAssignableFrom(cls)) {
+        throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): not subtype of base type");
+    }
+
+    return tf.constructSpecializedType(baseType, cls);
 }
\ No newline at end of file
