diff --git a/tmp/ee2febc5-66c9-44ed-9a6f-f51abf0c3bdf_buggy.java b/tmp/f29c15c1-9a2d-4730-a06d-524b3eb7c9bb_fixed.java
index d907b39..6f4e332 100644
--- a/tmp/ee2febc5-66c9-44ed-9a6f-f51abf0c3bdf_buggy.java
+++ b/tmp/f29c15c1-9a2d-4730-a06d-524b3eb7c9bb_fixed.java
@@ -1,56 +1,60 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
     if (inf.finished() || current == null) {
         return -1;
     }
 
     // avoid int overflow, check null buffer
     if (start <= buffer.length && length >= 0 && start >= 0
         && buffer.length - start >= length) {
         if (current.getMethod() == ZipArchiveOutputStream.STORED) {
             int csize = (int) current.getSize();
             if (readBytesOfEntry >= csize) {
                 return -1;
             }
             if (offsetInBuffer >= lengthOfLastRead) {
                 offsetInBuffer = 0;
                 if ((lengthOfLastRead = in.read(buf)) == -1) {
                     return -1;
                 }
                 count(lengthOfLastRead);
                 bytesReadFromStream += lengthOfLastRead;
             }
             int toRead = length > lengthOfLastRead
                 ? lengthOfLastRead - offsetInBuffer
                 : length;
             if ((csize - readBytesOfEntry) < toRead) {
                 toRead = csize - readBytesOfEntry;
             }
             System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
             offsetInBuffer += toRead;
             readBytesOfEntry += toRead;
             crc.update(buffer, start, toRead);
             return toRead;
         }
         if (inf.needsInput()) {
             fill();
             if (lengthOfLastRead > 0) {
                 bytesReadFromStream += lengthOfLastRead;
             }
         }
         int read = 0;
         try {
             read = inf.inflate(buffer, start, length);
+            if (read == 0 && inf.finished()) {
+                if (readBytesOfEntry < current.getCompressedSize()) {
+                    throw new IOException("Truncated ZIP file");
+                }
+                return -1;
+            }
         } catch (DataFormatException e) {
             throw new ZipException(e.getMessage());
         }
-            if (read == 0 && inf.finished()) {
-                return -1;
-            }
         crc.update(buffer, start, read);
+        readBytesOfEntry += read;
         return read;
     }
     throw new ArrayIndexOutOfBoundsException();
 }
\ No newline at end of file
