diff --git a/tmp/6017810e-f071-4071-bc29-2b5821b23b47_buggy.java b/tmp/f6d27555-705f-4133-99ad-4bb5a90c35e5_fixed.java
index 57f69c5..83aed3e 100644
--- a/tmp/6017810e-f071-4071-bc29-2b5821b23b47_buggy.java
+++ b/tmp/f6d27555-705f-4133-99ad-4bb5a90c35e5_fixed.java
@@ -1,12 +1,20 @@
   /**
    * @return Whether the Node is a DO or FUNCTION (with or without
-   * labels).
+   * labels), and not surrounded by other nodes in its context.
    */
   private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+      // Check if the current node is a FUNCTION or DO.
+      if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {
+          // It must be the only child of its parent, or the last one in the case of a block.
+          Node parent = n.getParent();
+          if (parent != null) {
+              if (parent.getType() == Token.BLOCK) {
+                  // If it's in a block, ensure it's the only or the last child.
+                  return parent.getChildCount() == 1 || parent.getLastChild() == n;
+              }
+              // Any other parent should only have this child alone.
+              return parent.getChildCount() == 1;
+          }
+      }
+      return false;
   }
\ No newline at end of file
