diff --git a/tmp/385a19e0-6b4e-4053-823c-966e7c9ebec5_buggy.java b/tmp/12576cca-7094-487b-9c8c-5685d033403b_fixed.java
index 57f69c5..004240a 100644
--- a/tmp/385a19e0-6b4e-4053-823c-966e7c9ebec5_buggy.java
+++ b/tmp/12576cca-7094-487b-9c8c-5685d033403b_fixed.java
@@ -1,12 +1,25 @@
   /**
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
   private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+      // Check the type of the node
+      int type = n.getType();
+      if (type == Token.FUNCTION || type == Token.DO) {
+          return true;
+      }
+
+      // Check if it's a labeled node with a block as a child
+      if (type == Token.LABEL) {
+          Node labeledNode = n.getFirstChild();
+          if (labeledNode != null) {
+              // Don't count empty blocks or blocks with more than one child
+              if (labeledNode.getType() == Token.BLOCK && labeledNode.hasOneChild()) {
+                  Node child = labeledNode.getFirstChild();
+                  // Check if the only child is a FUNCTION or DO
+                  return (child.getType() == Token.FUNCTION || child.getType() == Token.DO);
+              }
+          }
+      }
+      return false;
   }
\ No newline at end of file
