diff --git a/tmp/e4598b56-f1ac-4c20-afd3-2d84e18c966c_buggy.java b/tmp/b0c88adb-b7de-4c03-82ed-edfc714039d8_fixed.java
index be2af16..c286500 100644
--- a/tmp/e4598b56-f1ac-4c20-afd3-2d84e18c966c_buggy.java
+++ b/tmp/b0c88adb-b7de-4c03-82ed-edfc714039d8_fixed.java
@@ -1,29 +1,45 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+        // First, attempt to use the Julian chronology before the cutover date to correctly handle leap years
+        long instantJulian;
+        try {
+            instantJulian = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+        } catch (IllegalArgumentException e) {
+            // If the date is not valid in Julian, re-throw since it's not a valid date in this context.
+            throw new IllegalArgumentException("Specified date does not exist in Julian calendar");
+        }
+
+        if (instantJulian < iCutoverMillis) {
+            return instantJulian;
+        }
+
+        // Now attempt Gregorian, assuming date is Gregorian when it falls on or after the cutover
+        long instantGregorian;
+        try {
+            instantGregorian = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
+        } catch (IllegalArgumentException e) {
+            // If the date is not valid in Gregorian, throw exception.
+            throw new IllegalArgumentException("Specified date does not exist in Gregorian calendar");
         }
+        
+        if (instantGregorian >= iCutoverMillis) {
+            return instantGregorian;
         }
-        return instant;
+
+        // If neither check is valid, throw an exception for illegal date during cutover
+        throw new IllegalArgumentException("Specified date does not exist in the gap between Julian and Gregorian chronologies");
     }
\ No newline at end of file
