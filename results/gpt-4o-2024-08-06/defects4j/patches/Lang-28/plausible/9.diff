diff --git a/tmp/731031bc-5bcb-4c19-9376-f50610bbd035_buggy.java b/tmp/3b471eec-e1ed-45be-9a15-cb83a652f93d_fixed.java
index 4bbd561..6533056 100644
--- a/tmp/731031bc-5bcb-4c19-9376-f50610bbd035_buggy.java
+++ b/tmp/3b471eec-e1ed-45be-9a15-cb83a652f93d_fixed.java
@@ -1,37 +1,48 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if (index + 2 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+            return 0;
+        }
+        
         int start = index + 2;
         boolean isHex = false;
         
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
         
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
         
+        if (end >= input.length()) {
+            return 0; // Semicolon not found
+        }
+        
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
         
-                out.write(entityValue);
+        // Handle supplementary characters (code points beyond the BMP)
+        if (Character.isValidCodePoint(entityValue)) {
+            out.write(Character.toChars(entityValue));
+        } else {
+            return 0; // Invalid code point
+        }
+        
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
\ No newline at end of file
-        return 0;
-    }
