diff --git a/tmp/c920b752-fac9-4186-a957-3c092e92ec44_buggy.java b/tmp/1511dcd0-fb9b-4514-a7a7-78f6ec21804b_fixed.java
index 4bbd561..81ae3f5 100644
--- a/tmp/c920b752-fac9-4186-a957-3c092e92ec44_buggy.java
+++ b/tmp/1511dcd0-fb9b-4514-a7a7-78f6ec21804b_fixed.java
@@ -1,37 +1,40 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    if (index + 1 < input.length() && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+        if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end >= input.length() || input.charAt(end) != ';') {
+            return 0; // Return if there is no valid ending semicolon
+        }
+
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
+        out.write(Character.toChars(entityValue)); // Use Character.toChars to handle supplementary characters
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
