diff --git a/tmp/e77e9ea9-edb5-40c7-ab1b-5385fbc33fca_buggy.java b/tmp/fa91e375-b15e-4dbe-ba5a-1a91a1a5b014_fixed.java
index 4bbd561..c8e3e65 100644
--- a/tmp/e77e9ea9-edb5-40c7-ab1b-5385fbc33fca_buggy.java
+++ b/tmp/fa91e375-b15e-4dbe-ba5a-1a91a1a5b014_fixed.java
@@ -1,37 +1,56 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Ensure index + 1 is within bounds for the initial check
+        if(index < input.length() - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Ensure start is within bounds before accessing
+            if(start < input.length()) {
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
                 }
+            }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Ensure end is within bounds and avoids ArrayIndexOutOfBoundsException
+            while(end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If we reached end of input without finding ';', it's malformed
+            if(end >= input.length() || input.charAt(end) != ';') {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
                 return 0;
             }
 
+            // Convert entityValue into a character or surrogate pair if necessary
+            try {
+                if (Character.isSupplementaryCodePoint(entityValue)) {
+                    out.write(Character.toChars(entityValue));
+                } else {
                     out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                }
+            } catch (IllegalArgumentException e) {
+                return 0;
+            }
+
+            return 2 + (end - start) + (isHex ? 1 : 0) + 1; // +1 for the ';'
         }
         return 0;
     }
\ No newline at end of file
