diff --git a/tmp/22c0a49b-ca27-48cd-ab93-a8447ed80589_buggy.java b/tmp/8c96a919-8d3a-424e-baa9-e52bd96c45c7_fixed.java
index 4bbd561..01406b4 100644
--- a/tmp/22c0a49b-ca27-48cd-ab93-a8447ed80589_buggy.java
+++ b/tmp/8c96a919-8d3a-424e-baa9-e52bd96c45c7_fixed.java
@@ -1,37 +1,53 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        if(index >= input.length() - 1) {
+            return 0; // Protects from ArrayIndexOutOfBounds at the start.
+        }
+
         if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if(start >= input.length()) {
+                return 0; // Protects from ArrayIndexOutOfBounds after '&','#'.
+            }
+
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while(end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end >= input.length() || input.charAt(end) != ';') {
+                return 0; // Protects from ArrayIndexOutOfBounds or missing ';'.
+            }
+
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
+
+                if (Character.isSupplementaryCodePoint(entityValue)) {
+                    out.write(Character.toChars(entityValue)); // Write supplementary character properly.
+                } else {
+                    out.write(entityValue); // Write non-supplementary characters as int.
+                }
             } catch(NumberFormatException nfe) {
                 return 0;
             }
 
-                out.write(entityValue);
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
