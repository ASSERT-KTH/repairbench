diff --git a/tmp/c9246bd7-9d09-4266-8d5c-da5988620e12_buggy.java b/tmp/613d4b1d-d98e-48e5-8bd3-e351203dd9f7_fixed.java
index 4bbd561..026bc96 100644
--- a/tmp/c9246bd7-9d09-4266-8d5c-da5988620e12_buggy.java
+++ b/tmp/613d4b1d-d98e-48e5-8bd3-e351203dd9f7_fixed.java
@@ -1,37 +1,59 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        // Check if the index and the index + 1 are within bounds
+        if (index < 0 || index + 1 >= input.length()) {
+            return 0;
+        }
+        
         if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if 'start' is within bounds
+            if (start >= input.length()) {
+                return 0;
+            }
+            
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Ensure end doesn't go out of bounds
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If ';' is not found, the input is invalid
+            if (end >= input.length() || input.charAt(end) != ';') {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
+            // Write the characters correctly based on their value (handle supplementary characters)
+            if (entityValue <= Character.MAX_VALUE) {
                 out.write(entityValue);
+            } else {
+                char[] chars = Character.toChars(entityValue);
+                out.write(chars[0]);
+                out.write(chars[1]);
+            }
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
