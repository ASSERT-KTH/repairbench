diff --git a/tmp/17592deb-45b5-4a01-b06c-97bd8f250e32_buggy.java b/tmp/697cd199-ea4e-4047-8a8a-01fe2a7f1b47_fixed.java
index 4bbd561..22862f3 100644
--- a/tmp/17592deb-45b5-4a01-b06c-97bd8f250e32_buggy.java
+++ b/tmp/697cd199-ea4e-4047-8a8a-01fe2a7f1b47_fixed.java
@@ -1,37 +1,57 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Protect from ArrayIndexOutOfBounds
+        if (index + 1 < input.length() && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start < input.length()) {
                 char firstChar = input.charAt(start);
                 if (firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
                 }
+            } else {
+                return 0;
+            }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end >= input.length() || input.charAt(end) != ';') {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
                 return 0;
             }
 
+            // Convert to characters and handle supplementary characters
+            if (entityValue > Character.MAX_CODE_POINT) {
+                return 0; // invalid code point
+            }
+
+            if (Character.isSupplementaryCodePoint(entityValue)) {
+                char[] chars = Character.toChars(entityValue);
+                out.write(chars[0]);
+                out.write(chars[1]);
+                return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            } else {
                 out.write(entityValue);
                 return 2 + (end - start) + (isHex ? 1 : 0) + 1;
             }
+        }
         return 0;
     }
\ No newline at end of file
