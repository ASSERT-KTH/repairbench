diff --git a/tmp/5cc1d5bb-e578-48e7-b247-19d8390e275a_buggy.java b/tmp/8488df14-486c-4eaf-af6b-137de8090e1b_fixed.java
index 822447c..ba72c8d 100644
--- a/tmp/5cc1d5bb-e578-48e7-b247-19d8390e275a_buggy.java
+++ b/tmp/8488df14-486c-4eaf-af6b-137de8090e1b_fixed.java
@@ -1,37 +1,26 @@
-    /**
-     * <p>
-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
-     * passed.
-     * </p>
-     * 
-     * @param writer
-     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
-     * @param str
-     *            The <code>String</code> to escape. Assumed to be a non-null value.
-     * @throws IOException
-     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
-     * 
-     * @see #escape(String)
-     * @see Writer
-     */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
     for (int i = 0; i < len; i++) {
         char c = str.charAt(i);
         String entityName = this.entityName(c);
         if (entityName == null) {
-                if (c > 0x7F) {
+            if (Character.isHighSurrogate(c) && i + 1 < len && Character.isLowSurrogate(str.charAt(i + 1))) {
+                int codePoint = Character.toCodePoint(c, str.charAt(i + 1));
+                writer.write("&#");
+                writer.write(Integer.toString(codePoint, 10));
+                writer.write(';');
+                i++; // Advance past the low surrogate
+            } else if (c > 0x7F) {
                 writer.write("&#");
                 writer.write(Integer.toString(c, 10));
                 writer.write(';');
             } else {
                 writer.write(c);
             }
         } else {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
         }
     }
 }
\ No newline at end of file
