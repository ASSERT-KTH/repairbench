diff --git a/tmp/0ebcaed3-0f8f-47ef-bf0b-0964e4d77200_buggy.java b/tmp/2506452d-3cf0-4ec5-848f-f6cb22a14b64_fixed.java
index 670114d..d88e154 100644
--- a/tmp/0ebcaed3-0f8f-47ef-bf0b-0964e4d77200_buggy.java
+++ b/tmp/2506452d-3cf0-4ec5-848f-f6cb22a14b64_fixed.java
@@ -1,48 +1,52 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
 
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns != null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
   if (n.isAssign()) {
-        Node nameNode = n.getFirstChild();
+    Node left = n.getFirstChild();
+    Node right = n.getLastChild();
 
-        NameInformation ns = createNameInformation(t, nameNode, n);
+    // Ensure that we are dealing with assignments to a property
+    if (left.isGetProp()) {
+      NameInformation ns = createNameInformation(t, left, n);
       if (ns != null) {
         if (ns.isPrototype) {
           recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
         } else {
-            recordSet(ns.name, nameNode);
+          recordSet(ns.name, left);
+        }
       }
     }
   } else if (n.isCall()) {
     Node nameNode = n.getFirstChild();
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null && ns.onlyAffectsClassDef) {
       JsName name = getName(ns.name, false);
       if (name != null) {
         refNodes.add(new ClassDefiningFunctionNode(
             name, n, parent, parent.getParent()));
       }
     }
   }
 }
\ No newline at end of file
