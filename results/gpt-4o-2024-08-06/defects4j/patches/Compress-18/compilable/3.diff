diff --git a/tmp/831a2147-8962-439f-bd75-de17e91dc16b_buggy.java b/tmp/b9ebbb54-3987-4454-95bc-445d3acefae5_fixed.java
index 08093b4..4b25429 100644
--- a/tmp/831a2147-8962-439f-bd75-de17e91dc16b_buggy.java
+++ b/tmp/b9ebbb54-3987-4454-95bc-445d3acefae5_fixed.java
@@ -1,42 +1,44 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+        // Ensure the name does not exceed the maximum length
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
+        // Create a new TarArchiveEntry for the PAX extended header
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
+        // Iterate through each header entry to format and write them
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
+                + String.valueOf(key.length() + value.length() + 3).length() /* length of length */;
+            // Construct line with calculated initial length
             String line = len + " " + key + "=" + value + "\n";
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
             while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
                 len = actualLength;
+                // Re-compute line if its actual byte length doesn't match calculated length
                 line = len + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
             w.write(line);
         }
+        // Convert written data to UTF-8 encoded bytes
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
+        // Set the size of the TarArchiveEntry to the length of the data
         pex.setSize(data.length);
+        // Write the entry and then the data to the archive
         putArchiveEntry(pex);
         write(data);
+        // Close the archive entry to finish
         closeArchiveEntry();
     }
\ No newline at end of file
