diff --git a/tmp/60f76cb8-fdb7-4cbe-a7c1-3a1724ccf8d2_buggy.java b/tmp/475baf81-519b-42ed-8d7d-0f766460b3fb_fixed.java
index 19fd63e..1fd0023 100644
--- a/tmp/60f76cb8-fdb7-4cbe-a7c1-3a1724ccf8d2_buggy.java
+++ b/tmp/475baf81-519b-42ed-8d7d-0f766460b3fb_fixed.java
@@ -1,24 +1,17 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
+      // Additional check to ensure the expression is not an EXPR_RESULT
+      // when the return value is used vs. when their return value is in
+      // an EXPR_RESULT. See:
       // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+      if (maybeExpr.getType() != Token.EXPR_RESULT) {
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
-
     return false;
   }
\ No newline at end of file
