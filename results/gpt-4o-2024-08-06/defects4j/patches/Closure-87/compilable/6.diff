diff --git a/tmp/2cecf035-d7ab-4f85-822c-4eea705560f7_buggy.java b/tmp/fc5fc66a-87d7-45fd-a80c-d3b4a60cd3f4_fixed.java
index 19fd63e..8e2f909 100644
--- a/tmp/2cecf035-d7ab-4f85-822c-4eea705560f7_buggy.java
+++ b/tmp/fc5fc66a-87d7-45fd-a80c-d3b4a60cd3f4_fixed.java
@@ -1,24 +1,25 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
         
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
+        if (!NodeUtil.isExpressionNode(maybeExpr)) {
+          return false;
+        }
+
+        // Check if the parent is a block node which can affect folding
+        if (n.getParent() != null && n.getParent().getType() == Token.SCRIPT) {
+          return false; // Do not fold if parent is a SCRIPT
+        }
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+        // Additional checks for non-foldable expression scenarios can go here.
+        return true;
       }
     }
 
     return false;
   }
\ No newline at end of file
