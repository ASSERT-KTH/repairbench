diff --git a/tmp/fc43a237-fc6d-459d-a65d-6845714cc4d4_buggy.java b/tmp/6a9e837c-8bec-4e91-981b-586d5d6038ad_fixed.java
index 19fd63e..45ed610 100644
--- a/tmp/fc43a237-fc6d-459d-a65d-6845714cc4d4_buggy.java
+++ b/tmp/6a9e837c-8bec-4e91-981b-586d5d6038ad_fixed.java
@@ -1,24 +1,22 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+        if (maybeExpr.getType() == Token.EXPR_RESULT) {
+          Node expr = maybeExpr.getFirstChild();
+          // Check if the expression is a member function call since those can have implicit 'this'
+          if (expr.getType() == Token.CALL && expr.getFirstChild().getType() == Token.GETPROP) {
+            // Do not fold EXPR_RESULT into other expressions if it's a function call
+            return false;
+          }
+        }
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
\ No newline at end of file
