diff --git a/tmp/a7eb7c22-e14e-4306-9809-274a93aed763_buggy.java b/tmp/34239cf5-18e8-406c-b9b0-47d1daf83fb7_fixed.java
index 5f8ac1a..d8512e9 100644
--- a/tmp/a7eb7c22-e14e-4306-9809-274a93aed763_buggy.java
+++ b/tmp/34239cf5-18e8-406c-b9b0-47d1daf83fb7_fixed.java
@@ -1,34 +1,39 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
+        if (p1 == null || p2 == null) {
+            if (p1 == p2) {
+                return 0;
+            } 
+            // Adjusted logic to allow comparison of pointers from potentially different trees
+            return p1 == null ? -1 : 1;
+        }
+        
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
+        if (p1.equals(p2)) {
             return 0;
         }
 
         if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+            // Modified to handle cases where pointers are not part of the same tree
+            return p1.toString().compareTo(p2.toString());
         }
+
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
