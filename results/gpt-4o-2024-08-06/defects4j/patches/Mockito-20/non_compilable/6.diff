diff --git a/tmp/2d72d681-b25e-41af-95ac-e442e66df964_buggy.java b/tmp/8caa39f7-88a9-4e8e-8718-a0925996324d_fixed.java
index f9a9b5b..525805c 100644
--- a/tmp/2d72d681-b25e-41af-95ac-e442e66df964_buggy.java
+++ b/tmp/8caa39f7-88a9-4e8e-8718-a0925996324d_fixed.java
@@ -1,30 +1,42 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Using constructor settings if provided, else default instantiation
+        if (settings.isUsingConstructor()) {
+            Object outerInstance = settings.getOuterInstance();
+            if (outerInstance != null) {
+                mockInstance = classInstantiator.instantiate(mockedProxyType, outerInstance);
+            } else {
                 mockInstance = classInstantiator.instantiate(mockedProxyType);
+            }
+        } else {
+            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+        
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
         
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
+        
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
+                "ClassCastException occurred while creating the Mockito mock:",
                 "  class to mock: " + describeClass(mockedProxyType),
                 "  created class: " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class: " + describeClass(mockInstance),
                 "  instance creation by: " + classInstantiator.getClass().getSimpleName(),
                 "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
+                "You might experience classloading issues, please ask the Mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
         throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
     }
 }
\ No newline at end of file
