diff --git a/tmp/d3ef2f82-dd9d-4e6b-98bb-df2da124f67b_buggy.java b/tmp/2bcfb5a4-75aa-4abe-9204-792da5951c0b_fixed.java
index b529d33..a821619 100644
--- a/tmp/d3ef2f82-dd9d-4e6b-98bb-df2da124f67b_buggy.java
+++ b/tmp/2bcfb5a4-75aa-4abe-9204-792da5951c0b_fixed.java
@@ -1,29 +1,23 @@
-    /**
-     * Used internally by the Soundex algorithm.
-     *
-     * Consonants from the same code group separated by W or H are treated as one.
-     *
-     * @param str
-     *                  the cleaned working string to encode (in upper case).
-     * @param index
-     *                  the character position to encode
-     * @return Mapping code for a particular character
-     * @throws IllegalArgumentException
-     *                  if the character is not mapped
-     */
     private char getMappingCode(final String str, final int index) {
         // map() throws IllegalArgumentException
         final char mappedChar = this.map(str.charAt(index));
         // HW rule check
-        if (index > 1 && mappedChar != '0') {
+        if (index > 0 && mappedChar != '0') { 
             final char hwChar = str.charAt(index - 1);
             if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
+                int preHWIndex = index - 2;
+                // Find the previous character that is not H or W
+                while (preHWIndex >= 0 && (str.charAt(preHWIndex) == 'H' || str.charAt(preHWIndex) == 'W')) {
+                    preHWIndex--;
+                }
+                if (preHWIndex >= 0) {
+                    final char preHWChar = str.charAt(preHWIndex);
                     final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+                    if (firstCode == mappedChar) {
+                        return '0';
+                    }
                 }
             }
         }
         return mappedChar;
     }
\ No newline at end of file
