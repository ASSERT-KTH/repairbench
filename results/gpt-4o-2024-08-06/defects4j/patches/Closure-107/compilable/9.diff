diff --git a/tmp/a1ad6c8d-bd0f-46b5-94b1-0734666c3d9e_buggy.java b/tmp/a0a9ae10-43ef-45d2-b2e2-c80c20095b15_fixed.java
index fa9dfcc..f13459a 100644
--- a/tmp/a1ad6c8d-bd0f-46b5-94b1-0734666c3d9e_buggy.java
+++ b/tmp/a0a9ae10-43ef-45d2-b2e2-c80c20095b15_fixed.java
@@ -1,61 +1,55 @@
 @Override
 protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
     if (flags.processJqueryPrimitives) {
         options.setCodingConvention(new JqueryCodingConvention());
     } else {
         options.setCodingConvention(new ClosureCodingConvention());
     }
 
     options.setExtraAnnotationNames(flags.extraAnnotationName);
 
     CompilationLevel level = flags.compilationLevel;
     level.setOptionsForCompilationLevel(options);
 
     if (flags.debug) {
         level.setDebugOptionsForCompilationLevel(options);
     }
 
     if (flags.useTypesForOptimization) {
         level.setTypeBasedOptimizationOptions(options);
     }
 
     if (flags.generateExports) {
         options.setGenerateExports(flags.generateExports);
     }
 
     WarningLevel wLevel = flags.warningLevel;
     wLevel.setOptionsForWarningLevel(options);
     for (FormattingOption formattingOption : flags.formatting) {
         formattingOption.applyToOptions(options);
     }
 
     options.closurePass = flags.processClosurePrimitives;
 
     options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&
             flags.processJqueryPrimitives;
 
     options.angularPass = flags.angularPass;
 
     if (!flags.translationsFile.isEmpty()) {
         try {
             options.messageBundle = new XtbMessageBundle(
                     new FileInputStream(flags.translationsFile),
                     flags.translationsProject);
         } catch (IOException e) {
             throw new RuntimeException("Reading XTB file", e);
         }
-    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {
-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a
-      // translations file, they might reasonably try to write their own
-      // implementation of goog.getMsg that makes the substitution at
-      // run-time.
-      //
-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,
-      // so we might as well inline it. But shut off the i18n warnings,
-      // because the user didn't really ask for i18n.
+    } else {
+        // Regardless of compilation level, if the user doesn't provide a translations
+        // file, use the EmptyMessageBundle to suppress i18n warnings.
         options.messageBundle = new EmptyMessageBundle();
     }
 
     return options;
 }
\ No newline at end of file
