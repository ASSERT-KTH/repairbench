diff --git a/tmp/119a6316-5aed-4d63-8483-ab8d88302dfe_buggy.java b/tmp/3d426d2b-7258-4ab2-8de6-444bcc52f593_fixed.java
index d6a560a..4e2337f 100644
--- a/tmp/119a6316-5aed-4d63-8483-ab8d88302dfe_buggy.java
+++ b/tmp/3d426d2b-7258-4ab2-8de6-444bcc52f593_fixed.java
@@ -1,33 +1,39 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
+  // TODO: Investigate whether it is really necessary to keep two
   // different mechanisms for resolving named types, and if so, which order
   // makes more sense. Now, resolution via registry is first in order to
   // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);
+  boolean resolvedViaProperties = false;
+
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return this; // Return immediately to prevent further resolution attempts
   }
 
-    if (resolved) {
+  if (resolvedViaRegistry) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
-    resolveViaProperties(t, enclosing);
+  resolvedViaProperties = resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return this; // Return immediately to prevent further resolution attempts
   }
 
+  if (!resolvedViaRegistry && resolvedViaProperties) {
     super.resolveInternal(t, enclosing);
+  }
+
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
