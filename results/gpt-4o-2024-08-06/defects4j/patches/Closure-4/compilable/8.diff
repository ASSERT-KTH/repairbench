diff --git a/tmp/426c541d-e33c-42f4-9324-9d27b0db7e32_buggy.java b/tmp/9a55d036-bbcd-49bd-8d34-e09acf436602_fixed.java
index d6a560a..8c856ec 100644
--- a/tmp/426c541d-e33c-42f4-9324-9d27b0db7e32_buggy.java
+++ b/tmp/9a55d036-bbcd-49bd-8d34-e09acf436602_fixed.java
@@ -1,33 +1,36 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
+    // TODO:user Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
+    if (isResolved()) {
+      return registry.isLastGeneration() ? getReferencedType() : this;
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this;
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
+    } else {
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this;
       }
-
       super.resolveInternal(t, enclosing);
       if (isResolved()) {
         finishPropertyContinuations();
       }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    }
+
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
