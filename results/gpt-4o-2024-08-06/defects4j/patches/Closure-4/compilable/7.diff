diff --git a/tmp/cae95e99-3945-4d70-91a7-bd6d4081a688_buggy.java b/tmp/78602d3a-d806-45dd-843f-bc2aa46907b1_fixed.java
index d6a560a..a6781d8 100644
--- a/tmp/cae95e99-3945-4d70-91a7-bd6d4081a688_buggy.java
+++ b/tmp/78602d3a-d806-45dd-843f-bc2aa46907b1_fixed.java
@@ -1,33 +1,33 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      return this; // immediately return to avoid further resolution on cycle detection
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
+
+    // Check for implicit prototype cycle again after trying to resolve via properties
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // immediately return to avoid further resolution on cycle detection
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
