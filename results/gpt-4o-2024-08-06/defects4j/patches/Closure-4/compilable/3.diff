diff --git a/tmp/fbf1d43f-a5a1-4910-b2d3-880925bc3967_buggy.java b/tmp/3433dda9-a350-4f16-a2dc-27d34d640190_fixed.java
index d6a560a..92de7e3 100644
--- a/tmp/fbf1d43f-a5a1-4910-b2d3-880925bc3967_buggy.java
+++ b/tmp/3433dda9-a350-4f16-a2dc-27d34d640190_fixed.java
@@ -1,33 +1,25 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+    // Resolve via registry first
+    if (resolveViaRegistry(t, enclosing)) {
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
-
-    if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // If resolution via registry fails, attempt resolution via properties
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
-
     super.resolveInternal(t, enclosing);
-    if (isResolved()) {
     finishPropertyContinuations();
-    }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
