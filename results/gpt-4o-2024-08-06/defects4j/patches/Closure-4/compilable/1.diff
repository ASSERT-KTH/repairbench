diff --git a/tmp/c5ee3ed7-b4e5-46d7-8890-3708d3620e2f_buggy.java b/tmp/76a2629c-9982-4554-ab10-b2912673b27b_fixed.java
index d6a560a..bc283c5 100644
--- a/tmp/c5ee3ed7-b4e5-46d7-8890-3708d3620e2f_buggy.java
+++ b/tmp/76a2629c-9982-4554-ab10-b2912673b27b_fixed.java
@@ -1,33 +1,37 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // TODO: Investigate if two mechanisms for resolving named types are necessary.
+    // Resolution via registry is first to avoid warnings from property resolution.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
+      if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+        return null; // Early return on cycle detection to avoid further processing.
+      }
+
       super.resolveInternal(t, enclosing);
+
+      if (isResolved()) {
         finishPropertyContinuations();
+      }
+
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return null; // Early return on cycle detection to avoid further processing.
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
