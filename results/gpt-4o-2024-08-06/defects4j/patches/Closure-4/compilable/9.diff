diff --git a/tmp/4323a7e6-465a-4a4f-b62e-b0542432f33a_buggy.java b/tmp/b65e2d73-9d53-4fcc-8aa4-f0737a615dae_fixed.java
index d6a560a..65cc73a 100644
--- a/tmp/4323a7e6-465a-4a4f-b62e-b0542432f33a_buggy.java
+++ b/tmp/b65e2d73-9d53-4fcc-8aa4-f0737a615dae_fixed.java
@@ -1,33 +1,35 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
+    // TODO: Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      return this; // Early return to prevent further resolution in case of cycle
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // Early return to prevent further resolution in case of cycle
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
