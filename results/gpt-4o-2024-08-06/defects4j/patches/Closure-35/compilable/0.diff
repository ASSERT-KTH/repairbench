diff --git a/tmp/476efeb4-6cd3-4709-960a-10b34f667993_buggy.java b/tmp/ed04abb4-a50b-43f8-90e4-142cea0a829e_fixed.java
index d57736b..5e2e22e 100644
--- a/tmp/476efeb4-6cd3-4709-960a-10b34f667993_buggy.java
+++ b/tmp/ed04abb4-a50b-43f8-90e4-142cea0a829e_fixed.java
@@ -1,39 +1,32 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
+            // Use the greatest lower bound instead of least supertype
             typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                getNativeType(VOID_TYPE).getGreatestSubtype(propType);
+          } else {
+            // Broaden the existing type to handle union with undefined
+            JSType existingType = objType.getPropertyType(prop);
+            if (existingType != null) {
+              typeToInfer = existingType.getLeastSupertype(propType);
+            }
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
 }
\ No newline at end of file
