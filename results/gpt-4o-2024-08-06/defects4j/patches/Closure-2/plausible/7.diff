diff --git a/tmp/9282db1c-3a9c-4d8b-897c-f01d1b7cf692_buggy.java b/tmp/54db7e65-980b-4dd0-96e7-c68f2378c3b9_fixed.java
index 8ff679b..0077a60 100644
--- a/tmp/9282db1c-3a9c-4d8b-897c-f01d1b7cf692_buggy.java
+++ b/tmp/54db7e65-980b-4dd0-96e7-c68f2378c3b9_fixed.java
@@ -1,39 +1,31 @@
-  /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
-   * @param t The node traversal object that supplies context
-   * @param n The node being visited
-   * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
-   * @param interfaceType The super interface that is being visited
-   */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    if (implicitProto == null) {
+      // If the implicit prototype is null, it means the interfaceType is
+      // proxy to a non-existent object. Log a warning or error if necessary
+      return; // Exit early as there's nothing to check
+    }
+    
+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
         if (!interfaceType.getPropertyType(name).isEquivalentTo(
             oType.getPropertyType(name))) {
           compiler.report(
               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                   functionName, name, oType.toString(),
                   interfaceType.toString()));
         }
       }
       currentProperties.put(name, interfaceType);
     }
+    
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
\ No newline at end of file
