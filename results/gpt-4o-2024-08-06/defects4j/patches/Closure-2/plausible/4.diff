diff --git a/tmp/f2d2ba9b-da39-4062-a9e9-99f545e0c01d_buggy.java b/tmp/6c6c1fb6-43d8-4d4d-9ded-714cf9062699_fixed.java
index 8ff679b..1e9f3e6 100644
--- a/tmp/f2d2ba9b-da39-4062-a9e9-99f545e0c01d_buggy.java
+++ b/tmp/6c6c1fb6-43d8-4d4d-9ded-714cf9062699_fixed.java
@@ -1,39 +1,34 @@
-  /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
-   * @param t The node traversal object that supplies context
-   * @param n The node being visited
-   * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
-   * @param interfaceType The super interface that is being visited
-   */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+    // Check if interfaceType is null to handle non-existent interfaces
+    if (interfaceType == null) {
+      return;
+    }
+    
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    // Check if implicitProto is null to prevent NullPointerException
+    if (implicitProto == null) {
+      return;
+    }
+    
+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
         if (!interfaceType.getPropertyType(name).isEquivalentTo(
             oType.getPropertyType(name))) {
           compiler.report(
               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                   functionName, name, oType.toString(),
                   interfaceType.toString()));
         }
       }
       currentProperties.put(name, interfaceType);
     }
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
\ No newline at end of file
