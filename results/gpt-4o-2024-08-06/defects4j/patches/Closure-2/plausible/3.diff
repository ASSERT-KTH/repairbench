diff --git a/tmp/7197a597-57c2-44e8-a46c-f3a06ea14c27_buggy.java b/tmp/5baca0f3-5f6f-444a-ac70-137bb4ec0b08_fixed.java
index 8ff679b..dccfec1 100644
--- a/tmp/7197a597-57c2-44e8-a46c-f3a06ea14c27_buggy.java
+++ b/tmp/5baca0f3-5f6f-444a-ac70-137bb4ec0b08_fixed.java
@@ -1,39 +1,35 @@
-  /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
-   * @param t The node traversal object that supplies context
-   * @param n The node being visited
-   * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
-   * @param interfaceType The super interface that is being visited
-   */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+    // Check for null implicit prototype
+    if (interfaceType == null || interfaceType.getImplicitPrototype() == null) {
+      return;
+    }
+
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
     currentPropertyNames = implicitProto.getOwnPropertyNames();
+
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
         if (!interfaceType.getPropertyType(name).isEquivalentTo(
             oType.getPropertyType(name))) {
           compiler.report(
               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                   functionName, name, oType.toString(),
                   interfaceType.toString()));
         }
       }
       currentProperties.put(name, interfaceType);
     }
+    
+    // Check for null or empty extended interfaces
+    if (interfaceType.getCtorExtendedInterfaces() != null) {
       for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
         checkInterfaceConflictProperties(t, n, functionName, properties,
             currentProperties, iType);
       }
     }
+  }
\ No newline at end of file
