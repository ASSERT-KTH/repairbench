diff --git a/tmp/e8e207e2-b3e5-4107-8a56-315cb2b6bd7b_buggy.java b/tmp/0a02c2e9-ffc5-47b1-b671-0f463c025875_fixed.java
index 8ff679b..96c4560 100644
--- a/tmp/e8e207e2-b3e5-4107-8a56-315cb2b6bd7b_buggy.java
+++ b/tmp/0a02c2e9-ffc5-47b1-b671-0f463c025875_fixed.java
@@ -1,39 +1,40 @@
-  /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
-   * @param t The node traversal object that supplies context
-   * @param n The node being visited
-   * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
-   * @param interfaceType The super interface that is being visited
-   */
 private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
     String functionName, HashMap<String, ObjectType> properties,
     HashMap<String, ObjectType> currentProperties,
     ObjectType interfaceType) {
+  if (interfaceType == null) {
+    // Early exit if the interfaceType is null, which indicates a non-existent type
+    return;
+  }
+
   ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+  if (implicitProto == null) {
+    // If the implicit prototype is also null, we shouldn't proceed
+    return;
+  }
+
+  Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
+  if (currentPropertyNames != null) {
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
         if (!interfaceType.getPropertyType(name).isEquivalentTo(
             oType.getPropertyType(name))) {
           compiler.report(
               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                   functionName, name, oType.toString(),
                   interfaceType.toString()));
         }
       }
       currentProperties.put(name, interfaceType);
     }
-    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+  }
+
+  Set<ObjectType> extendedInterfaces = interfaceType.getCtorExtendedInterfaces();
+  if (extendedInterfaces != null) {
+    for (ObjectType iType : extendedInterfaces) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
+}
\ No newline at end of file
