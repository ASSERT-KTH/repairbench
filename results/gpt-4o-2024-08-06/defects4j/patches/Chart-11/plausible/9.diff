diff --git a/tmp/13fb9a66-0f5f-4347-b34e-7d8c99070309_buggy.java b/tmp/519f814c-abe1-400e-bc9b-693f3b62fa39_fixed.java
index ad7255c..a147b25 100644
--- a/tmp/13fb9a66-0f5f-4347-b34e-7d8c99070309_buggy.java
+++ b/tmp/519f814c-abe1-400e-bc9b-693f3b62fa39_fixed.java
@@ -1,42 +1,49 @@
-    /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
-     * method returns <code>true</code>.
-     *
-     * @param p1  path 1 (<code>null</code> permitted).
-     * @param p2  path 2 (<code>null</code> permitted).
-     *
-     * @return A boolean.
-     */
 public static boolean equal(GeneralPath p1, GeneralPath p2) {
     if (p1 == null) {
         return (p2 == null);
     }
     if (p2 == null) {
         return false;
     }
     if (p1.getWindingRule() != p2.getWindingRule()) {
         return false;
     }
     PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+    PathIterator iterator2 = p2.getPathIterator(null);
     double[] d1 = new double[6];
     double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
+
+    while (!iterator1.isDone() || !iterator2.isDone()) {
         if (iterator1.isDone() != iterator2.isDone()) {
             return false;
         }
         int seg1 = iterator1.currentSegment(d1);
         int seg2 = iterator2.currentSegment(d2);
         if (seg1 != seg2) {
             return false;
         }
-            if (!Arrays.equals(d1, d2)) {
+        if (!Arrays.equals(Arrays.copyOfRange(d1, 0, segmentSize(seg1)),
+                           Arrays.copyOfRange(d2, 0, segmentSize(seg2)))) {
             return false;
         }
         iterator1.next();
         iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
     }
     return true;
 }
+
+private static int segmentSize(int segmentType) {
+    switch(segmentType) {
+        case PathIterator.SEG_CLOSE:
+            return 0;
+        case PathIterator.SEG_MOVETO:
+        case PathIterator.SEG_LINETO:
+            return 2;
+        case PathIterator.SEG_QUADTO:
+            return 4;
+        case PathIterator.SEG_CUBICTO:
+            return 6;
+        default:
+            throw new IllegalArgumentException("Unknown segment type: " + segmentType);
+    }
+}
\ No newline at end of file
