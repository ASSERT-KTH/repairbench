diff --git a/tmp/37594743-54c9-460a-b073-451d5cb50039_buggy.java b/tmp/6545e163-1bbf-410c-bacd-0d4c65d5ba04_fixed.java
index ad7255c..43b2ebe 100644
--- a/tmp/37594743-54c9-460a-b073-451d5cb50039_buggy.java
+++ b/tmp/6545e163-1bbf-410c-bacd-0d4c65d5ba04_fixed.java
@@ -1,42 +1,42 @@
-    /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
-     * method returns <code>true</code>.
-     *
-     * @param p1  path 1 (<code>null</code> permitted).
-     * @param p2  path 2 (<code>null</code> permitted).
-     *
-     * @return A boolean.
-     */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: Use p2 instead of p1
         double[] d1 = new double[6];
         double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
+        while (!iterator1.isDone() && !iterator2.isDone()) {
             if (iterator1.isDone() != iterator2.isDone()) {
                 return false;
             }
             int seg1 = iterator1.currentSegment(d1);
             int seg2 = iterator2.currentSegment(d2);
             if (seg1 != seg2) {
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            if (!Arrays.equals(trimToSize(d1, seg1), trimToSize(d2, seg2))) {
                 return false;
             }
             iterator1.next();
             iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
         }
-        return true;
+        return iterator1.isDone() && iterator2.isDone(); // Ensure both iterators are done
+    }
+
+    private static double[] trimToSize(double[] coords, int segmentType) {
+        if(segmentType == PathIterator.SEG_MOVETO || segmentType == PathIterator.SEG_LINETO) {
+            return Arrays.copyOf(coords, 2);
+        } else if(segmentType == PathIterator.SEG_QUADTO) {
+            return Arrays.copyOf(coords, 4);
+        } else if(segmentType == PathIterator.SEG_CUBICTO) {
+            return Arrays.copyOf(coords, 6);
+        }
+        return coords;
     }
\ No newline at end of file
