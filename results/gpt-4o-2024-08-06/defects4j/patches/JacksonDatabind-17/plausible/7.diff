diff --git a/tmp/31328669-04cf-44db-8e0a-76756e514ff4_buggy.java b/tmp/6bb934f3-1dbb-4b8c-87f7-a060a1d46f1d_fixed.java
index 01967cc..babce24 100644
--- a/tmp/31328669-04cf-44db-8e0a-76756e514ff4_buggy.java
+++ b/tmp/6bb934f3-1dbb-4b8c-87f7-a060a1d46f1d_fixed.java
@@ -1,35 +1,25 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
 public boolean useForType(JavaType t)
 {
     switch (_appliesFor) {
     case NON_CONCRETE_AND_ARRAYS:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
         // fall through
     case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+        // Added check for TreeNode specifically here to prevent applying typing to JSON tree models
+        if (TreeNode.class.isAssignableFrom(t.getRawClass())) {
+            return false;
+        }
+        return (t.getRawClass() == Object.class) || (!t.isConcrete());
 
     case NON_FINAL:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
-                // [Issue#88] Should not apply to JSON tree models:
+        // Check for non-finality and exclude JSON tree models
         return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
     default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
         return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
