diff --git a/tmp/50a792aa-3b9c-42db-a770-e4b798f0fe17_buggy.java b/tmp/de1a0c44-0fb9-4c76-8b01-4b26761fd950_fixed.java
index 01967cc..ca91106 100644
--- a/tmp/50a792aa-3b9c-42db-a770-e4b798f0fe17_buggy.java
+++ b/tmp/de1a0c44-0fb9-4c76-8b01-4b26761fd950_fixed.java
@@ -1,35 +1,29 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
         public boolean useForType(JavaType t)
         {
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
+                // Ensure after unwrapping arrays, we're still using appropriate check
+                if (t.getRawClass() == Object.class) {
+                    return true;
+                }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
+                // Correct issue by handling tree model and non-concrete types properly
                 return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                        || (!t.isConcrete() && !TreeNode.class.isAssignableFrom(t.getRawClass()));
 
             case NON_FINAL:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
-                // [Issue#88] Should not apply to JSON tree models:
+                // Move TreeNode check outside
                 return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+
             default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
+                // Correctly return for JavaLangObject
                 return (t.getRawClass() == Object.class);
             }
         }
\ No newline at end of file
