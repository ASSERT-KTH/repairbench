diff --git a/tmp/20b97a20-8ac0-4beb-8adc-17da97537454_buggy.java b/tmp/6029f05b-b450-4053-84b3-781460d7c672_fixed.java
index b98f0a7..8e9c82b 100644
--- a/tmp/20b97a20-8ac0-4beb-8adc-17da97537454_buggy.java
+++ b/tmp/6029f05b-b450-4053-84b3-781460d7c672_fixed.java
@@ -1,29 +1,64 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Fix: Inference the parameter types from the call
+          FunctionType constructorFunction = ct.toMaybeFunctionType();
+          if (constructorFunction != null) {
+            Node arg = constructor.getNext();
+            for (Node param : constructorFunction.getParameters()) {
+              if (arg == null) {
+                break;
+              }
+              JSType paramType = param.getJSType();
+              if (paramType != null) {
+                inferPropertyTypes(paramType, arg.getJSType());
+              }
+              arg = arg.getNext();
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
+
+  // Helper method to infer property types from the function parameter type
+  private void inferPropertyTypes(JSType paramType, JSType argType) {
+    if (paramType == null || argType == null || !paramType.isRecordType() || !argType.isRecordType()) {
+      return;
+    }
+
+    RecordType paramRecord = paramType.toMaybeRecordType();
+    RecordType argRecord = argType.toMaybeRecordType();
+
+    if (paramRecord != null && argRecord != null) {
+      for (String propertyName : paramRecord.getPropertyNames()) {
+        JSType propertyType = paramRecord.getPropertyType(propertyName);
+        if (argRecord.hasProperty(propertyName)) {
+          JSType argPropertyType = argRecord.getPropertyType(propertyName);
+          if (!argPropertyType.isSubtype(propertyType)) {
+            // We could enforce stricter type checking here if necessary
+            argRecord.defineDeclaredProperty(propertyName, propertyType, null);
+          }
+        }
+      }
+    }
+  }
\ No newline at end of file
