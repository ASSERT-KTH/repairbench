diff --git a/tmp/1c55ca8e-2c15-4cbe-aad0-bb44f958b0f6_buggy.java b/tmp/1c8fc632-d5bf-4f0b-be7f-9143d3ee0638_fixed.java
index b98f0a7..407d394 100644
--- a/tmp/1c55ca8e-2c15-4cbe-aad0-bb44f958b0f6_buggy.java
+++ b/tmp/1c8fc632-d5bf-4f0b-be7f-9143d3ee0638_fixed.java
@@ -1,29 +1,36 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+
+          // Infer the types for 'this' object from the constructor parameters
+          JSType thisType = ct.getTypeOfThis();
+          Node firstArg = constructor.getNext();
+          if (thisType != null && firstArg != null) {
+            JSType argType = firstArg.getJSType();
+            if (argType != null) {
+              thisType.matchConstraint(argType);
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
