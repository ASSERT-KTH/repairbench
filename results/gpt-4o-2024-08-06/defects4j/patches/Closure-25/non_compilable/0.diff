diff --git a/tmp/b92be5f6-ddcc-446a-88f8-e0d36c25d5ae_buggy.java b/tmp/65cced01-0538-4c85-a78f-854eaff18a68_fixed.java
index b98f0a7..57c99fb 100644
--- a/tmp/b92be5f6-ddcc-446a-88f8-e0d36c25d5ae_buggy.java
+++ b/tmp/65cced01-0538-4c85-a78f-854eaff18a68_fixed.java
@@ -1,29 +1,50 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
+
+        // If the function has an associated 'call' property signature that
+        // takes concrete types as arguments, and we're passing in an actual
+        // object, perform a backwards inference to propagate types.
+        if (ct != null && n.isNew()) {
+          ObjectType instanceType = ct.getInstanceType();
+          if (instanceType != null) {
+            FunctionType constructorFn = instanceType.getConstructor();
+            if (constructorFn != null && constructorFn.hasParameters()) {
+              Node argList = n.getSecondChild();
+              while (argList != null && argList.isNotEmpty()) {
+                Node arg = argList;
+                JSType argType = arg.getJSType();
+                if (argType != null && argType.isObjectType()) {
+                  argType.matchConstraint(constructorFn.getParameterType(0));
+                }
+                argList = argList.getNext();
+              }
+            }
+          }
+        }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
