diff --git a/tmp/c2a0dfe0-3552-496a-b298-50abed9b6c72_buggy.java b/tmp/3c38138e-89d8-4c36-8e60-3a7d00fc7f46_fixed.java
index b98f0a7..fdc7745 100644
--- a/tmp/c2a0dfe0-3552-496a-b298-50abed9b6c72_buggy.java
+++ b/tmp/3c38138e-89d8-4c36-8e60-3a7d00fc7f46_fixed.java
@@ -1,29 +1,58 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          
+          // Perform backwards inference on constructor argument types
+          Node arg = constructor.getNext();
+          if (arg != null) {
+            for (Node param : ct.getParameters()) {
+              JSType paramType = param.getJSType();
+              if (paramType != null && !paramType.isUnknownType()) {
+                inferPropertyTypesFromArgument(scope, arg, paramType);
+              }
+              arg = arg.getNext();
+              if (arg == null) break;
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
+  
+  private void inferPropertyTypesFromArgument(FlowScope scope, Node arg, JSType paramType) {
+    // Implementation of type inference from constructor parameter to argument
+    if (arg.isObjectLit() && paramType.isRecordType()) {
+      RecordType recordType = paramType.toMaybeRecordType();
+      if (recordType != null) {
+        for (String propertyName : recordType.getPropertyNames()) {
+          JSType propertyType = recordType.getPropertyType(propertyName);
+          Node propertyNode = arg.getFirstChild();
+          while (propertyNode != null) {
+            if (propertyNode.getString().equals(propertyName)) {
+              propertyNode.setJSType(propertyType);
+            }
+            propertyNode = propertyNode.getNext();
+          }
+        }
+      }
+    }
+  }
\ No newline at end of file
