diff --git a/tmp/97151362-3aa0-4cd4-9736-4b4b27b20487_buggy.java b/tmp/3fba39dc-8f7b-4fc1-8fae-0bc3813c1403_fixed.java
index b98f0a7..e345c5e 100644
--- a/tmp/97151362-3aa0-4cd4-9736-4b4b27b20487_buggy.java
+++ b/tmp/3fba39dc-8f7b-4fc1-8fae-0bc3813c1403_fixed.java
@@ -1,29 +1,35 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          
+          // Attempt to infer the type constraints of the arguments
+          Node paramNode = n.getSecondChild();
+          if (paramNode != null && paramNode.getJSType() == null) {
+            JSType paramType = ct.getParametersNode().getFirstChild().getJSType();
+            if (paramType != null) {
+              paramNode.setJSType(paramType);
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
