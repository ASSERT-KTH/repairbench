diff --git a/tmp/db099b50-748b-4351-8f5e-b267ed8fe879_buggy.java b/tmp/0fc283cd-eb3d-4664-8007-3b43079ed791_fixed.java
index b98f0a7..66df4a3 100644
--- a/tmp/db099b50-748b-4351-8f5e-b267ed8fe879_buggy.java
+++ b/tmp/0fc283cd-eb3d-4664-8007-3b43079ed791_fixed.java
@@ -1,29 +1,63 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+
+                // Use the parameters to update the types of arguments
+                Node parameters = ct.getParametersNode();
+                if (parameters != null) {
+                    FunctionType ft = ct.getConstructor();
+                    if (ft != null) {
+                        for (Node p = parameters.getFirstChild(), a = constructor.getNext(); 
+                             p != null && a != null; 
+                             p = p.getNext(), a = a.getNext()) {
+                            JSType paramType = p.getJSType();
+                            JSType argType = a.getJSType();
+                            if (paramType != null && argType != null) {
+                                JSType inferredType = paramType.getLeastSupertype(argType);
+                                a.setJSType(inferredType);
+                                if (a.isObjectLit()) {
+                                    scope = reverseTypeInfer(a, inferredType, scope);
+                                }
+                            }
+                        }
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
+
+private FlowScope reverseTypeInfer(Node node, JSType inferredType, FlowScope scope) {
+    // Implementation of reverse type inference for object literals
+    // to update the properties types.
+    if (node.isObjectLit() && inferredType.isRecordType()) {
+        RecordType recordType = inferredType.toMaybeRecordType();
+        for (Node prop = node.getFirstChild(); prop != null; prop = prop.getNext()) {
+            String propName = prop.getString();
+            JSType propType = recordType.getPropertyType(propName);
+            if (propType != null) {
+                prop.getFirstChild().setJSType(propType);
+            }
+        }
+    }
+    return scope;
+}
\ No newline at end of file
