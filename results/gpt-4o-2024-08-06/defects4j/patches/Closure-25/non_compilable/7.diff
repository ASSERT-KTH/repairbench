diff --git a/tmp/2a040f55-8585-48f5-a98c-be2551901a6b_buggy.java b/tmp/143482da-da4e-47c7-afb4-b141473763d9_fixed.java
index b98f0a7..bdce7c3 100644
--- a/tmp/2a040f55-8585-48f5-a98c-be2551901a6b_buggy.java
+++ b/tmp/143482da-da4e-47c7-afb4-b141473763d9_fixed.java
@@ -1,29 +1,54 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    
+    ObjectType functionPrototype = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+          functionPrototype = ct.getInstanceType();
+          type = functionPrototype;
         }
       }
     }
     n.setJSType(type);
+    
+    // Update backward-inferred properties if type is known 
+    if (functionPrototype != null && n.getChildCount() > 1) {
+      ObjectType instanceType = functionPrototype.toObjectType();
+      if (instanceType != null) {
         for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
           scope = traverse(arg, scope);
+          JSType argType = arg.getJSType();
+          if (argType != null && argType.isObjectType()) {
+            updatePropertyTypes(instanceType, argType.toObjectType());
           }
+        }
+      }
+    } else {
+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        scope = traverse(arg, scope);
+      }
+    }
+    
     return scope;
   }
+
+  private void updatePropertyTypes(ObjectType targetType, ObjectType sourceType) {
+    for (String propertyName : sourceType.getOwnPropertyNames()) {
+      JSType sourcePropertyType = sourceType.getPropertyType(propertyName);
+      if (!targetType.hasProperty(propertyName)) {
+        targetType.defineDeclaredProperty(propertyName, sourcePropertyType, null);
+      }
+    }
+  }
\ No newline at end of file
