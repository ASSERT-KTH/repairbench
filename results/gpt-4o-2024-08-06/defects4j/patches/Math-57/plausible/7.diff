diff --git a/tmp/bd409148-57f5-49e2-b96f-9657a6e28256_buggy.java b/tmp/cd9f712a-432b-4a6c-9b6b-77f91c0a3d75_fixed.java
index ad4b0d8..cd7449c 100644
--- a/tmp/bd409148-57f5-49e2-b96f-9657a6e28256_buggy.java
+++ b/tmp/cd9f712a-432b-4a6c-9b6b-77f91c0a3d75_fixed.java
@@ -1,47 +1,47 @@
-    /**
-     * Use K-means++ to choose the initial centers.
-     *
-     * @param <T> type of the points to cluster
-     * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
-     * @param random random generator to use
-     * @return the initial centers
-     */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
         final double[] dx2 = new double[pointSet.size()];
+        Double sum = null;
+
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            sum = 0.0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
                 sum += d * d;
                 dx2[i] = sum;
             }
 
+            if (sum == 0.0) {
+                // If the sum is zero, it means the remaining points are equally close (or identical)
+                // picking one remaining point at random
+                final T randomPoint = pointSet.remove(random.nextInt(pointSet.size()));
+                resultSet.add(new Cluster<T>(randomPoint));
+                continue;
+            }
+
             // Add one new data point as a center. Each point x is chosen with
             // probability proportional to D(x)2
             final double r = random.nextDouble() * sum;
             for (int i = 0 ; i < dx2.length; i++) {
                 if (dx2[i] >= r) {
                     final T p = pointSet.remove(i);
                     resultSet.add(new Cluster<T>(p));
                     break;
                 }
             }
         }
 
         return resultSet;
-
     }
\ No newline at end of file
