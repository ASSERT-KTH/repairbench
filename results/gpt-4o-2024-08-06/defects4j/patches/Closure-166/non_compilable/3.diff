diff --git a/tmp/0b8aaf8a-eefd-4b3e-ba1a-c7729a735a31_buggy.java b/tmp/b4a87249-1ccc-49f3-a050-8a631f7b1166_fixed.java
index 5f96616..01d0ca9 100644
--- a/tmp/0b8aaf8a-eefd-4b3e-ba1a-c7729a735a31_buggy.java
+++ b/tmp/b4a87249-1ccc-49f3-a050-8a631f7b1166_fixed.java
@@ -1,20 +1,27 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraint {{prop: (number|undefined)}}
   // function f(constraint) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    JSType objectType = toObjectType();
+    for (String property : constraint.getOwnPropertyNames()) {
+      if (!objectType.hasOwnDeclaredProperty(property)) {
+        objectType.defineInferredProperty(
+            property, constraint.getPropertyType(property), null);
+      }
+    }
+    matchRecordTypeConstraint(objectType);
   }
 }
\ No newline at end of file
