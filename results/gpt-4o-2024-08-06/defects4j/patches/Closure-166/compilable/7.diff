diff --git a/tmp/4b53ea04-f96d-4146-94b7-7184a1e410ce_buggy.java b/tmp/967a4a9e-0b67-48c3-ae46-0ba5489cbdaa_fixed.java
index 5f96616..4f466d6 100644
--- a/tmp/4b53ea04-f96d-4146-94b7-7184a1e410ce_buggy.java
+++ b/tmp/967a4a9e-0b67-48c3-ae46-0ba5489cbdaa_fixed.java
@@ -1,20 +1,29 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraint {{prop: (number|undefined)}}
   // function f(constraint) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    ObjectType recordConstraint = constraint.toObjectType();
+    // Iterate through each property of the record constraint
+    for (String property : recordConstraint.getPropertyNames()) {
+      JSType propertyType = recordConstraint.getPropertyType(property);
+      // If the current object does not have this property, define it
+      if (!hasOwnProperty(property)) {
+        // Add the property to this object with the type from the constraint
+        defineInferredProperty(property, propertyType, null);
+      }
+    }
   }
 }
\ No newline at end of file
