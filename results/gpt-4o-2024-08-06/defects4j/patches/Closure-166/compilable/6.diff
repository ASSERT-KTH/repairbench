diff --git a/tmp/3220ab86-4b09-4515-aacd-349f73466929_buggy.java b/tmp/1699bec1-777d-4d77-8154-78e66c7e5e85_fixed.java
index 5f96616..5c978ab 100644
--- a/tmp/3220ab86-4b09-4515-aacd-349f73466929_buggy.java
+++ b/tmp/1699bec1-777d-4d77-8154-78e66c7e5e85_fixed.java
@@ -1,20 +1,34 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraint {{prop: (number|undefined)}}
   // function f(constraint) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+  // taking any property on the record and trying to match
   // properties on this object.
   if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    ObjectType objType = constraint.toObjectType();
+    for (String propertyName : objType.getOwnPropertyNames()) {
+      JSType propType = objType.getPropertyType(propertyName);
+      JSType currentPropType = this.getPropertyType(propertyName);
+
+      // If the current property type is unknown or not present,
+      // set it to the constraint's property type.
+      if (currentPropType == null || currentPropType.isUnknownType()) {
+        this.defineDeclaredProperty(propertyName, propType, null);
+      } else {
+        // Try to resolve the two types together.
+        JSType resolvedType = this.getPropertyType(propertyName).getLeastSupertype(propType);
+        this.defineDeclaredProperty(propertyName, resolvedType, null);
+      }
+    }
   }
 }
\ No newline at end of file
