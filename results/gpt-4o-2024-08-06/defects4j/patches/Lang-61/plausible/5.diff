diff --git a/tmp/de86678e-029c-4ce7-9f34-4caee15b4ff6_buggy.java b/tmp/280c89b0-ea43-4a73-a721-4b9c5113d838_fixed.java
index addeb8d..c2c2d59 100644
--- a/tmp/de86678e-029c-4ce7-9f34-4caee15b4ff6_buggy.java
+++ b/tmp/280c89b0-ea43-4a73-a721-4b9c5113d838_fixed.java
@@ -1,38 +1,28 @@
-    /**
-     * Searches the string builder to find the first reference to the specified
-     * string starting searching from the given index.
-     * <p>
-     * Note that a null input string will return -1, whereas the JDK throws an exception.
-     * 
-     * @param str  the string to find, null returns -1
-     * @param startIndex  the index to start at, invalid index rounded to edge
-     * @return the first index of the string, or -1 if not found
-     */
     public int indexOf(String str, int startIndex) {
         startIndex = (startIndex < 0 ? 0 : startIndex);
         if (str == null || startIndex >= size) {
             return -1;
         }
         int strLen = str.length();
         if (strLen == 1) {
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
             return startIndex;
         }
         if (strLen > size) {
             return -1;
         }
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        int len = size - strLen; // Ensure len reflects the actual usable size, not the buffer length
         outer:
-        for (int i = startIndex; i < len; i++) {
+        for (int i = startIndex; i <= len; i++) { // Use '<=' to correctly check up to the last possible index
             for (int j = 0; j < strLen; j++) {
                 if (str.charAt(j) != thisBuf[i + j]) {
                     continue outer;
                 }
             }
             return i;
         }
         return -1;
     }
\ No newline at end of file
