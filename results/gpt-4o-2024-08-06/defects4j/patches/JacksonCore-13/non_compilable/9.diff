diff --git a/tmp/235c0f8f-a78e-4cd4-b80f-9f06850a5925_buggy.java b/tmp/5d7fba95-5eea-47fa-8505-685edbc5fa76_fixed.java
index e69de29..96518e6 100644
--- a/tmp/235c0f8f-a78e-4cd4-b80f-9f06850a5925_buggy.java
+++ b/tmp/5d7fba95-5eea-47fa-8505-685edbc5fa76_fixed.java
@@ -0,0 +1,51 @@
+// Supposing we are handling a JSON generator configuration
+public class JsonFactory {
+    private EnumSet<JsonGenerator.Feature> enabledFeatures = EnumSet.noneOf(JsonGenerator.Feature.class);
+
+    public JsonFactory() {
+        // Enable QUOTE_FIELD_NAMES by default
+        enable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+    }
+
+    public JsonFactory enable(JsonGenerator.Feature feature) {
+        enabledFeatures.add(feature);
+        return this;
+    }
+
+    public JsonFactory disable(JsonGenerator.Feature feature) {
+        enabledFeatures.remove(feature);
+        return this;
+    }
+
+    public boolean isEnabled(JsonGenerator.Feature feature) {
+        return enabledFeatures.contains(feature);
+    }
+}
+
+// Feature enumeration
+public enum Feature {
+    QUOTE_FIELD_NAMES,
+    // other features...
+}
+
+// Hypothetical JsonGenerator handling
+public class JsonGenerator {
+    private JsonFactory factory;
+
+    public JsonGenerator(JsonFactory factory) {
+        this.factory = factory;
+    }
+
+    public void writeFieldName(String name) throws IOException {
+        // Check whether to quote field names
+        if (factory.isEnabled(Feature.QUOTE_FIELD_NAMES)) {
+            writeString('"' + name + '"');
+        } else {
+            writeString(name);
+        }
+    }
+
+    private void writeString(String value) throws IOException {
+        // Logic to write the given string value into the output (omitted)
+    }
+}
\ No newline at end of file
