diff --git a/tmp/14b1f441-5c35-43d5-a284-6d150b7c8ecf_buggy.java b/tmp/1da00c65-fe6d-44b4-99e5-308564a3cefd_fixed.java
index e69de29..378d4cc 100644
--- a/tmp/14b1f441-5c35-43d5-a284-6d150b7c8ecf_buggy.java
+++ b/tmp/1da00c65-fe6d-44b4-99e5-308564a3cefd_fixed.java
@@ -0,0 +1,37 @@
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
+
+import java.io.IOException;
+
+public class EmptyToNullCoercionDeserializer<T> extends JsonDeserializer<T> {
+    private final Class<T> primitiveClass;
+    private final T defaultValue;
+
+    public EmptyToNullCoercionDeserializer(Class<T> primitiveClass, T defaultValue) {
+        this.primitiveClass = primitiveClass;
+        this.defaultValue = defaultValue;
+    }
+
+    @Override
+    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+        String text = p.getText();
+        if (text == null || text.isEmpty()) {
+            return defaultValue;
+        }
+        // delegate to default deserialization for non-empty values
+        return ctxt.readValue(p, primitiveClass);
+    }
+}
+
+// Usage:
+
+// Register the custom deserializers
+ObjectMapper mapper = new ObjectMapper();
+SimpleModule module = new SimpleModule()
+    .addDeserializer(int.class, new EmptyToNullCoercionDeserializer<>(int.class, 0))
+    .addDeserializer(long.class, new EmptyToNullCoercionDeserializer<>(long.class, 0L))
+    .addDeserializer(double.class, new EmptyToNullCoercionDeserializer<>(double.class, 0.0))
+    .addDeserializer(float.class, new EmptyToNullCoercionDeserializer<>(float.class, 0.0f));
+
+mapper.registerModule(module);
