diff --git a/tmp/17a7c148-8132-4f72-a219-704e31d2ec9e_buggy.java b/tmp/6d809b4b-eb46-40ec-9e17-521292b69161_fixed.java
index e69de29..ec71472 100644
--- a/tmp/17a7c148-8132-4f72-a219-704e31d2ec9e_buggy.java
+++ b/tmp/6d809b4b-eb46-40ec-9e17-521292b69161_fixed.java
@@ -0,0 +1,39 @@
+public class SimpleTypeCoercion {
+
+    public static Object coerceEmptyToZero(Class<?> primitiveType, String value) {
+        if (value == null || value.isEmpty()) {
+            if (primitiveType == int.class) {
+                return 0;
+            } else if (primitiveType == long.class) {
+                return 0L;
+            } else if (primitiveType == double.class) {
+                return 0.0;
+            } else if (primitiveType == float.class) {
+                return 0.0f;
+            }
+            // Add additional handling for other primitives if needed
+        }
+        
+        // Add parsing logic if value is not empty, assume it's a valid number
+        try {
+            if (primitiveType == int.class) {
+                return Integer.parseInt(value);
+            } else if (primitiveType == long.class) {
+                return Long.parseLong(value);
+            } else if (primitiveType == double.class) {
+                return Double.parseDouble(value);
+            } else if (primitiveType == float.class) {
+                return Float.parseFloat(value);
+            }
+        } catch (NumberFormatException e) {
+            // Handle the parsing error as appropriate; rethrowing or returning default
+            return (primitiveType == int.class) ? 0 : 
+                   (primitiveType == long.class) ? 0L : 
+                   (primitiveType == double.class) ? 0.0 : 
+                   (primitiveType == float.class) ? 0.0f : null;
+        }
+
+        // Return null or throw an exception if type does not match known types
+        return null;
+    }
+}
\ No newline at end of file
