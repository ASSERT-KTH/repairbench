diff --git a/tmp/05003203-0d7f-43ab-8fff-5868e97397f8_buggy.java b/tmp/b64e58b7-eaa2-488a-89a8-6991b061e62c_fixed.java
index be9c8a3..8fa2e4f 100644
--- a/tmp/05003203-0d7f-43ab-8fff-5868e97397f8_buggy.java
+++ b/tmp/b64e58b7-eaa2-488a-89a8-6991b061e62c_fixed.java
@@ -1,94 +1,82 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
-        //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+          if (gramps.isCall() && gramps.getFirstChild() == parent) {
             return false;
           }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+          // Continue if it's just a property access, not a call on the property.
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
           return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
-        // Make sure that the value is not self-refential. IOW,
+        // Make sure that the value is not self-referential. IOW,
         // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
+        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+          if (child.isGetterDef() || child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
 
-
           Node childVal = child.getFirstChild();
           // Check if childVal is the parent of any of the passed in
           // references, as that is how self-referential assignments
           // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
             while (!NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
                 // There's a self-referential assignment
                 return false;
               }
               refNode = refNode.getParent();
             }
           }
         }
 
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
+        // If we found a suitable object literal assignment, mark as potentially inlinable.
         ret = true;
       }
-      return ret;
+      
+      // Make sure there's exactly one suitable object literal assignment
+      // in the list and no other interfering assignments.
+      return ret && !hasMultipleDefinitions(refs);
+    }
+
+    private boolean hasMultipleDefinitions(List<Reference> refs) {
+      int count = 0;
+      for (Reference ref : refs) {
+        Node assignedValue = ref.getAssignedValue();
+        if (assignedValue != null && assignedValue.isObjectLit()) {
+          count++;
+          if (count > 1) {
+            return true;
+          }
+        }
+      }
+      return false;
     }
\ No newline at end of file
