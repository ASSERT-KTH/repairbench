diff --git a/tmp/6a003f4e-64cd-4223-bb2d-8026b124aa46_buggy.java b/tmp/fa05ab61-f298-4c15-808f-88a5e5293e96_fixed.java
index c4b260c..21f550c 100644
--- a/tmp/6a003f4e-64cd-4223-bb2d-8026b124aa46_buggy.java
+++ b/tmp/fa05ab61-f298-4c15-808f-88a5e5293e96_fixed.java
@@ -1,51 +1,53 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        String detectedCharset = charsetName;
+
+        if (detectedCharset == null) { // determine from meta. safe parse as UTF-8
+            byteData.mark();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            byteData.reset();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
                 } else {
                     foundCharset = meta.attr("charset");
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+                    detectedCharset = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+            Validate.notEmpty(detectedCharset, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+            docData = Charset.forName(detectedCharset).decode(byteData).toString();
         }
         // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
             byteData.rewind();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
+            docData = docData.substring(1); // remove BOM
+            detectedCharset = defaultCharset;
         }
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(detectedCharset);
         }
         return doc;
     }
\ No newline at end of file
