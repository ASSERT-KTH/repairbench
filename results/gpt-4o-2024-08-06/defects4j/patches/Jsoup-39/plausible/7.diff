diff --git a/tmp/f711506e-338f-437b-bf81-110849f62f31_buggy.java b/tmp/327ffc4b-f7cf-4611-9897-ff150958fc26_fixed.java
index c4b260c..92ed1a4 100644
--- a/tmp/f711506e-338f-437b-bf81-110849f62f31_buggy.java
+++ b/tmp/327ffc4b-f7cf-4611-9897-ff150958fc26_fixed.java
@@ -1,51 +1,58 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = removeBOM(docData); // Remove any BOM at the start
         doc = parser.parseInput(docData, baseUri);
+
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+        if (meta != null) {
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
+            }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
+                docData = removeBOM(docData); // Ensure BOM is removed after re-decoding
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { // specified by content type header or by user
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind();
         docData = Charset.forName(charsetName).decode(byteData).toString();
+        docData = removeBOM(docData); // Remove any BOM at the start
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
+
+    // If the document is still null, parse the input again
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
+    
     return doc;
 }
+
+private static String removeBOM(String input) {
+    // UTF-8 BOM is the 'ZERO WIDTH NO-BREAK SPACE' character (U+FEFF)
+    if (input.length() > 0 && input.charAt(0) == 65279) {
+        return input.substring(1);
+    }
+    return input;
+}
\ No newline at end of file
