diff --git a/tmp/662f1037-0dec-4d99-922b-bb2ff81802de_buggy.java b/tmp/30c8a4ff-61cb-48c2-995b-bc7a8b2ba815_fixed.java
index c4b260c..6f916bf 100644
--- a/tmp/662f1037-0dec-4d99-922b-bb2ff81802de_buggy.java
+++ b/tmp/30c8a4ff-61cb-48c2-995b-bc7a8b2ba815_fixed.java
@@ -1,51 +1,65 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+    final String defaultCharset = "UTF-8"; // make sure this placeholder is defined
     String docData;
     Document doc = null;
+    boolean isBOM = false; // flag to check BOM existence
+
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        
+        // Check for UTF-8 BOM (Byte Order Mark) and discard it if present
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            docData = docData.substring(1);
+            isBOM = true;
+        }
+
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+        if (meta != null) { 
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
+            }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
             
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { 
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                
+                // Handle BOM again after re-decoding
+                if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                    docData = docData.substring(1);
                 }
+                
+                doc = parser.parseInput(docData, baseUri); // reparse with new charset
             }
-        } else { // specified by content type header (or by user on file load)
+        }
+    } else { 
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+
+        // Check for UTF-8 BOM and discard if present
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
+            charsetName = defaultCharset; // default to UTF-8 if BOM is found
+            isBOM = true;
         }
+    }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
     }
+    doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
+    
     return doc;
 }
\ No newline at end of file
