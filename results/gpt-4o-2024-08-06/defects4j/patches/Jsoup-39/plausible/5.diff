diff --git a/tmp/38a04438-92a7-48b4-a39e-5e38e83d9ebd_buggy.java b/tmp/7b90f97f-0c42-43d2-b7b4-707d628d6dd4_fixed.java
index c4b260c..3b3ce8a 100644
--- a/tmp/38a04438-92a7-48b4-a39e-5e38e83d9ebd_buggy.java
+++ b/tmp/7b90f97f-0c42-43d2-b7b4-707d628d6dd4_fixed.java
@@ -1,51 +1,65 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        boolean processedBom = false;
+        
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            
+            // Check for UTF-8 BOM and remove it
+            if (docData.length() > 0 && docData.charAt(0) == 65279) { 
+                docData = docData.substring(1);
+                processedBom = true;
+            }
+            
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+                String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
+                }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
+                    // Remove BOM again if present after re-decoding
+                    if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                        docData = docData.substring(1);
+                    }
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+            // Remove BOM if necessary
             if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 docData = docData.substring(1);
-            charsetName = defaultCharset;
+                processedBom = true;
             }
+        }
+        
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
+            if (!processedBom) { // Set charset only if BOM wasn't present
                 doc.outputSettings().charset(charsetName);
+            } else {
+                doc.outputSettings().charset(Charset.forName(defaultCharset));
             }
+        }
+        
         return doc;
     }
\ No newline at end of file
