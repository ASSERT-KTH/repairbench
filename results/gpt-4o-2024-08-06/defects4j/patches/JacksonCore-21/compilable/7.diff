diff --git a/tmp/51b6ea28-5eb6-418a-8c95-1beaf1fa618d_buggy.java b/tmp/f1f4cfa8-70ff-4406-8689-bb90c57791b4_fixed.java
index 7c0ebae..f4a8ba2 100644
--- a/tmp/51b6ea28-5eb6-418a-8c95-1beaf1fa618d_buggy.java
+++ b/tmp/f1f4cfa8-70ff-4406-8689-bb90c57791b4_fixed.java
@@ -1,229 +1,212 @@
 @Override
-    public JsonToken nextToken() throws IOException
-    {
-        // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
-        //    conditionals; and it seems odd to return `null` but NOT considering input
-        //    as closed... would love a rewrite to simplify/clear up logic here.
-        
-        // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
-        // check for no buffered context _exposedContext - null
-        // If all the conditions matches then check for scalar / non-scalar property
+public JsonToken nextToken() throws IOException {
     if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-            //if not scalar and ended successfully, and !includePath, then return null
         if (_currToken.isStructEnd()) {
             if (_headContext.isStartHandled()) {
                 return (_currToken = null);
             }
         } else if (_currToken.isScalarValue()) {
-                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                    // then return null 
             if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
                 return (_currToken = null);
             }
         }
     }
-        // Anything buffered?
+    
     TokenFilterContext ctxt = _exposedContext;
-
     if (ctxt != null) {
         while (true) {
             JsonToken t = ctxt.nextTokenToRead();
             if (t != null) {
                 _currToken = t;
                 return t;
             }
-                // all done with buffered stuff?
             if (ctxt == _headContext) {
                 _exposedContext = null;
-                    if (ctxt.inArray()) {
+                if (ctxt.inArray() || ctxt.inObject()) {
                     t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
                     _currToken = t;
                     return t;
                 }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
                 break;
             }
-                // If not, traverse down the context chain
             ctxt = _headContext.findChildOf(ctxt);
             _exposedContext = ctxt;
-                if (ctxt == null) { // should never occur
+            if (ctxt == null) {
                 throw _constructError("Unexpected problem: chain of filtered context broken");
             }
         }
     }
 
-        // If not, need to read more. If we got any:
     JsonToken t = delegate.nextToken();
     if (t == null) {
-            // no strict need to close, since we have no state here
         _currToken = t;
         return t;
     }
 
-        // otherwise... to include or not?
     TokenFilter f;
-        
     switch (t.id()) {
         case ID_START_ARRAY:
-            f = _itemFilter;
+            handleStartArray();
+            break;
+
+        case ID_START_OBJECT:
+            handleStartObject();
+            break;
+
+        case ID_END_ARRAY:
+        case ID_END_OBJECT:
+            handleEnd(t);
+            break;
+
+        case ID_FIELD_NAME:
+            handleFieldName();
+            break;
+
+        default:
+            handleScalarValue(t);
+            break;
+    }
+    
+    return _nextToken2();
+}
+
+private void handleStartArray() throws IOException {
+    TokenFilter f = _itemFilter;
+    JsonToken t = JsonToken.START_ARRAY;
     if (f == TokenFilter.INCLUDE_ALL) {
         _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
+        _currToken = t;
+        return;
     }
-            if (f == null) { // does this occur?
+    if (f == null) {
         delegate.skipChildren();
-                break;
+        return;
     }
-            // Otherwise still iffy, need to check
     f = _headContext.checkValue(f);
     if (f == null) {
         delegate.skipChildren();
-                break;
+        return;
     }
     if (f != TokenFilter.INCLUDE_ALL) {
         f = f.filterStartArray();
     }
     _itemFilter = f;
     if (f == TokenFilter.INCLUDE_ALL) {
         _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
+        _currToken = t;
+        return;
     }
     _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
     if (_includePath) {
         t = _nextTokenWithBuffering(_headContext);
         if (t != null) {
             _currToken = t;
-                    return t;
+            return;
+        }
     }
 }
-            break;
 
-        case ID_START_OBJECT:
-            f = _itemFilter;
+private void handleStartObject() throws IOException {
+    TokenFilter f = _itemFilter;
+    JsonToken t = JsonToken.START_OBJECT;
     if (f == TokenFilter.INCLUDE_ALL) {
         _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
+        _currToken = t;
+        return;
     }
-            if (f == null) { // does this occur?
+    if (f == null) {
         delegate.skipChildren();
-                break;
+        return;
     }
-            // Otherwise still iffy, need to check
     f = _headContext.checkValue(f);
     if (f == null) {
         delegate.skipChildren();
-                break;
+        return;
     }
     if (f != TokenFilter.INCLUDE_ALL) {
         f = f.filterStartObject();
     }
     _itemFilter = f;
     if (f == TokenFilter.INCLUDE_ALL) {
         _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
+        _currToken = t;
+        return;
     }
     _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
     if (_includePath) {
         t = _nextTokenWithBuffering(_headContext);
         if (t != null) {
             _currToken = t;
-                    return t;
+            return;
+        }
     }
 }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
-            break;
 
-        case ID_END_ARRAY:
-        case ID_END_OBJECT:
-            {
+private void handleEnd(JsonToken t) throws IOException {
     boolean returnEnd = _headContext.isStartHandled();
-                f = _headContext.getFilter();
+    TokenFilter f = _headContext.getFilter();
     if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
         f.filterFinishArray();
     }
     _headContext = _headContext.getParent();
     _itemFilter = _headContext.getFilter();
     if (returnEnd) {
-                    return (_currToken = t);
+        _currToken = t;
     }
 }
-            break;
 
-        case ID_FIELD_NAME:
-            {
+private void handleFieldName() throws IOException {
     final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
-                f = _headContext.setFieldName(name);
+    TokenFilter f = _headContext.setFieldName(name);
+    JsonToken t = JsonToken.FIELD_NAME;
     if (f == TokenFilter.INCLUDE_ALL) {
         _itemFilter = f;
         if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
             if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                t = _headContext.nextTokenToRead(); 
                 _exposedContext = _headContext;
             }
         }
-                    return (_currToken = t);
+        _currToken = t;
+        return;
     }
     if (f == null) {
         delegate.nextToken();
         delegate.skipChildren();
-                    break;
+        return;
     }
     f = f.includeProperty(name);
     if (f == null) {
         delegate.nextToken();
         delegate.skipChildren();
-                    break;
+        return;
     }
     _itemFilter = f;
     if (f == TokenFilter.INCLUDE_ALL) {
         if (_includePath) {
-                        return (_currToken = t);
+            _currToken = t;
+            return;
         }
     }
     if (_includePath) {
         t = _nextTokenWithBuffering(_headContext);
         if (t != null) {
             _currToken = t;
-                        return t;
+            return;
         }
     }
-                break;
 }
 
-        default: // scalar value
-            f = _itemFilter;
+private void handleScalarValue(JsonToken t) throws IOException {
+    TokenFilter f = _itemFilter;
     if (f == TokenFilter.INCLUDE_ALL) {
-                return (_currToken = t);
+        _currToken = t;
+        return;
     }
     if (f != null) {
         f = _headContext.checkValue(f);
-                if ((f == TokenFilter.INCLUDE_ALL)
-                        || ((f != null) && f.includeValue(delegate))) {
-                    return (_currToken = t);
+        if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
+            _currToken = t;
         }
     }
-            // Otherwise not included (leaves must be explicitly included)
-            break;
-        }
-
-        // We get here if token was not yet found; offlined handling
-        return _nextToken2();
 }
\ No newline at end of file
