diff --git a/tmp/443e7cc6-b339-4538-bd87-b614efc6bc2c_buggy.java b/tmp/d95640ce-6bd2-42b4-8e8c-72c273600688_fixed.java
index 181b1ac..f91ced5 100644
--- a/tmp/443e7cc6-b339-4538-bd87-b614efc6bc2c_buggy.java
+++ b/tmp/d95640ce-6bd2-42b4-8e8c-72c273600688_fixed.java
@@ -1,23 +1,9 @@
-    /**
-     * Return the sum of this complex number and the given complex number.
-     * <p>
-     * Uses the definitional formula
-     * <pre>
-     * (a + bi) + (c + di) = (a+c) + (b+d)i
-     * </pre></p>
-     * <p>
-     * If either this or <code>rhs</code> has a NaN value in either part,
-     * {@link #NaN} is returned; otherwise Infinite and NaN values are
-     * returned in the parts of the result according to the rules for
-     * {@link java.lang.Double} arithmetic.</p>
-     *
-     * @param rhs the other complex number
-     * @return the complex number sum
-     * @throws NullArgumentException if <code>rhs</code> is null
-     */
 public Complex add(Complex rhs)
     throws NullArgumentException {
     MathUtils.checkNotNull(rhs);
+    if (this.isNaN() || rhs.isNaN()) {
+        return Complex.NaN;
+    }
     return createComplex(real + rhs.getReal(),
         imaginary + rhs.getImaginary());
 }
\ No newline at end of file
