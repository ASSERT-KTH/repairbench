diff --git a/tmp/e8fd18dc-5e3a-4c4a-9cf3-521b05226ba9_buggy.java b/tmp/5a0b7768-972f-4bcb-949c-583c232c97e8_fixed.java
index 544303b..e168302 100644
--- a/tmp/e8fd18dc-5e3a-4c4a-9cf3-521b05226ba9_buggy.java
+++ b/tmp/5a0b7768-972f-4bcb-949c-583c232c97e8_fixed.java
@@ -1,29 +1,41 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    Integer basicRow;
+    double mostNegative = Double.NEGATIVE_INFINITY;
+    
+    // Find the most negative basic variable
+    for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {
+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        if (basicRow != null) {
+            double entry = getEntry(basicRow, getRhsOffset());
+            if (entry < mostNegative) {
+                mostNegative = entry;
+            }
+        }
+    }
+
+    // Compute the coefficients for the solution
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
         coefficients[i] = 
             (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
             (restrictToNonNegative ? 0 : mostNegative);
+
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+            boolean isBasic = false;
+            for (int j = 0; j < getOriginalNumDecisionVariables(); j++) {
+                if (getBasicRow(getNumObjectiveFunctions() + j) == basicRow) {
+                    if (j != i) {
                         coefficients[i] = 0;
+                    } else {
+                        isBasic = true;
                     }
                 }
             }
+            if (!isBasic) { 
+                coefficients[i] = 0;
+            }
+        }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
