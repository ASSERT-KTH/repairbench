diff --git a/tmp/30abf7ef-73ec-4946-bfc8-91ccd3a8c72f_buggy.java b/tmp/83f19fa9-935d-4e5b-a960-590786908cd6_fixed.java
index 544303b..2ee0911 100644
--- a/tmp/30abf7ef-73ec-4946-bfc8-91ccd3a8c72f_buggy.java
+++ b/tmp/83f19fa9-935d-4e5b-a960-590786908cd6_fixed.java
@@ -1,29 +1,46 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    Integer basicRow;
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
         // if multiple variables can take a given value 
         // then we choose the first and set the rest equal to 0
         coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+            basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    }
+
+    double[] tableauCoefficients = new double[getOriginalNumDecisionVariables()];
+    
+    for(int i = 0; i < coefficients.length; i++) {
+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+            for (int j = 0; j < coefficients.length; j++) {
+                // get the contribution of each variable to the objective function
+                tableauCoefficients[j] += coefficients[i] * tableau.getEntry(basicRow, j);
             }
         }
     }
+    
+    double mostNegative = Double.MAX_VALUE;
+    for (int i = 0; i < tableauCoefficients.length; i++) {
+        mostNegative = Math.min(mostNegative, tableauCoefficients[i]);
     }
+
+    if(restrictToNonNegative) {
+        mostNegative = 0;
+    }
+
+    for (int i = 0; i < coefficients.length; i++) {
+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        coefficients[i] -= mostNegative * (basicRow == null ? 1 : tableau.getEntry(basicRow, i));
+    }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
