diff --git a/tmp/b1d45ca5-463d-48c4-81df-38ec14c33699_buggy.java b/tmp/729f25a5-9cc2-4120-9618-da0817b4b3b2_fixed.java
index 544303b..8bd61cb 100644
--- a/tmp/b1d45ca5-463d-48c4-81df-38ec14c33699_buggy.java
+++ b/tmp/729f25a5-9cc2-4120-9618-da0817b4b3b2_fixed.java
@@ -1,29 +1,33 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        Integer basicRow;
+        double mostNegative = Double.POSITIVE_INFINITY;
+        
+        // Find the most negative entry if not restricting to non-negative
+        if (!restrictToNonNegative) {
             for (int i = 0; i < coefficients.length; i++) {
                 basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
                 if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+                    double entry = getEntry(basicRow, getRhsOffset());
+                    if (entry < mostNegative) {
+                        mostNegative = entry;
+                    }
+                }
+            }
+            if (mostNegative == Double.POSITIVE_INFINITY) {
+                mostNegative = 0;
+            }
+        }
+        
+        for (int i = 0; i < coefficients.length; i++) {
+            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            if (basicRow != null) {
+                coefficients[i] = getEntry(basicRow, getRhsOffset());
+            } else {
                 coefficients[i] = 0;
             }
+            coefficients[i] -= (restrictToNonNegative ? 0 : mostNegative);
         }
-            }
-        }
+        
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
