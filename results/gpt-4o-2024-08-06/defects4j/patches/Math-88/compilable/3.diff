diff --git a/tmp/6f1b8064-d31e-45e6-ac50-e1ff12e59f89_buggy.java b/tmp/a800bc38-f9a1-45e2-91f3-febc85581bff_fixed.java
index 544303b..186bd66 100644
--- a/tmp/6f1b8064-d31e-45e6-ac50-e1ff12e59f89_buggy.java
+++ b/tmp/a800bc38-f9a1-45e2-91f3-febc85581bff_fixed.java
@@ -1,29 +1,21 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        Integer basicRow;
+        // Removed the calculation and usage of mostNegative to ensure correct variable values
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
                 // if multiple variables can take a given value 
                 // then we choose the first and set the rest equal to 0
                 coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));
             if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + coefficients.length; j++) {
+                    if (tableau.getEntry(basicRow, j) != 0 && j != getNumObjectiveFunctions() + i) {
                          coefficients[i] = 0;
+                         break;
                     }
                 }
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
