diff --git a/tmp/636e5f95-3420-4e09-9928-5eb4d242cfce_buggy.java b/tmp/92980e8e-be60-4a65-9d49-3a0a76e1cbcb_fixed.java
index 57c40b2..a8cafb1 100644
--- a/tmp/636e5f95-3420-4e09-9928-5eb4d242cfce_buggy.java
+++ b/tmp/92980e8e-be60-4a65-9d49-3a0a76e1cbcb_fixed.java
@@ -1,27 +1,19 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
-    // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
-    if (childType.isDict()) {
-      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
+    if (childType == null || childType.isDict()) {
+      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", childType == null ? "null" : "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
       return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      if (!childType.hasProperty(property.getString())) {
+        report(t, property, TypeValidator.UNKNOWN_PROPERTY, property.getString());
+      } else {
         checkPropertyAccess(childType, property.getString(), t, n);
       }
+    }
     ensureTyped(t, n);
   }
\ No newline at end of file
