diff --git a/tmp/0bb58bc7-ff5c-4330-96f8-ed2426ccf594_buggy.java b/tmp/23e90f86-a156-40dd-807d-56e82c358948_fixed.java
index 57c40b2..76ccf11 100644
--- a/tmp/0bb58bc7-ff5c-4330-96f8-ed2426ccf594_buggy.java
+++ b/tmp/23e90f86-a156-40dd-807d-56e82c358948_fixed.java
@@ -1,27 +1,29 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
+      // If the parent is an assignment, record the type of the assigned expression
+      JSType assignedType = n.getLastChild().getJSType();
+      if (assignedType != null && assignedType.isVoidType()) {
+        report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS,
+            "'.'", "assignment to void type");
+      }
       return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
       checkPropertyAccess(childType, property.getString(), t, n);
+    } else {
+      // If childType is null or undefined, report the missing properties warning
+      report(t, objNode, TypeCheck.INEXISTENT_PROPERTY,
+          property.getString(), objNode.toString());
     }
     ensureTyped(t, n);
   }
\ No newline at end of file
