diff --git a/tmp/ea2f666d-16a7-46ca-b86d-9fe3c40630ee_buggy.java b/tmp/9c6b0651-8f6f-4bf5-a777-4b2545fa3b74_fixed.java
index 57c40b2..708d024 100644
--- a/tmp/ea2f666d-16a7-46ca-b86d-9fe3c40630ee_buggy.java
+++ b/tmp/9c6b0651-8f6f-4bf5-a777-4b2545fa3b74_fixed.java
@@ -1,27 +1,19 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
-    // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
+      // Even during assignment, we should also ensure that the object is not null or undefined.
+      if (!validator.expectNotNullOrUndefined(t, n, childType,
+          "No properties on this expression", getNativeType(OBJECT_TYPE))) {
         return;
+      }
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
       checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
   }
\ No newline at end of file
