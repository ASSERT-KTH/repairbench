diff --git a/tmp/fb100a21-c23b-4132-ad6b-af6cc7899b4e_buggy.java b/tmp/7b25813c-2ff5-4a40-93ea-93fd1134f24d_fixed.java
index 42b58d0..0d980a8 100644
--- a/tmp/fb100a21-c23b-4132-ad6b-af6cc7899b4e_buggy.java
+++ b/tmp/7b25813c-2ff5-4a40-93ea-93fd1134f24d_fixed.java
@@ -1,19 +1,23 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        // Fix for StackOverflowError: prevent infinite recursion caused by self-referencing generics
+        if (actualTypeArgument instanceof TypeVariable<?> && ((TypeVariable<?>) actualTypeArgument).getGenericDeclaration() == parameterizedType.getRawType()) {
+            continue;
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
