diff --git a/tmp/2e2a3c12-4666-4e56-80f7-a14143ba8001_buggy.java b/tmp/92bb5fe8-121f-417d-9527-d8a6218fa6d4_fixed.java
index 388771b..6bba4ed 100644
--- a/tmp/2e2a3c12-4666-4e56-80f7-a14143ba8001_buggy.java
+++ b/tmp/92bb5fe8-121f-417d-9527-d8a6218fa6d4_fixed.java
@@ -1,37 +1,36 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
-        if (end < start) {
-            throw new IllegalArgumentException("Requires start <= end.");
+        if (end < start || end >= this.data.size()) {
+            throw new IllegalArgumentException("Requires start <= end and end within data bounds.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
+        copy.minY = Double.POSITIVE_INFINITY;
+        copy.maxY = Double.NEGATIVE_INFINITY;
+        for (Object obj : copy.data) {
+            TimeSeriesDataItem item = (TimeSeriesDataItem) obj;
+            if (item.getValue().doubleValue() < copy.minY) {
+                copy.minY = item.getValue().doubleValue();
+            }
+            if (item.getValue().doubleValue() > copy.maxY) {
+                copy.maxY = item.getValue().doubleValue();
+            }
+        }
         return copy;
     }
\ No newline at end of file
