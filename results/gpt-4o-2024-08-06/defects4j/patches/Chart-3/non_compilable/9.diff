diff --git a/tmp/418c6d59-8fc8-47e7-bed3-a710cfe8a491_buggy.java b/tmp/0c0f0f71-2eba-4a61-8672-0637ac100b86_fixed.java
index 388771b..ab5364a 100644
--- a/tmp/418c6d59-8fc8-47e7-bed3-a710cfe8a491_buggy.java
+++ b/tmp/0c0f0f71-2eba-4a61-8672-0637ac100b86_fixed.java
@@ -1,37 +1,27 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
-        if (end < start) {
-            throw new IllegalArgumentException("Requires start <= end.");
+        if (end < start || end >= this.data.size()) {
+            throw new IllegalArgumentException("Requires start <= end and end < data size.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
+        // Update min and max values in the copy
+        copy.updateBoundsForAddedItems();
         return copy;
     }
\ No newline at end of file
