diff --git a/tmp/8217809e-92e1-44b9-849b-f2fcd37ac6dc_buggy.java b/tmp/f0ca9212-f29c-4482-a725-ef37a3e1aa15_fixed.java
index 388771b..3c592c8 100644
--- a/tmp/8217809e-92e1-44b9-849b-f2fcd37ac6dc_buggy.java
+++ b/tmp/f0ca9212-f29c-4482-a725-ef37a3e1aa15_fixed.java
@@ -1,37 +1,51 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
+        if (end >= this.data.size()) {
+            throw new IllegalArgumentException("Requires end < data size.");
+        }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
+        // Adjust the min and max values for the new copy
+        copy.updateBounds();
         return copy;
     }
+
+    // Assuming this method exists in TimeSeries class to update min/max Y values
+    private void updateBounds() {
+        double minY = Double.POSITIVE_INFINITY;
+        double maxY = Double.NEGATIVE_INFINITY;
+        for (Object obj : this.data) {
+            TimeSeriesDataItem item = (TimeSeriesDataItem) obj;
+            Number yValue = item.getValue();
+            if (yValue != null) {
+                double y = yValue.doubleValue();
+                if (y < minY) {
+                    minY = y;
+                }
+                if (y > maxY) {
+                    maxY = y;
+                }
+            }
+        }
+        this.minY = minY;
+        this.maxY = maxY;
+    }
\ No newline at end of file
