diff --git a/tmp/72916d7b-913d-4edc-8f88-53e867431fce_buggy.java b/tmp/9ac68cd8-c83a-4d51-ae54-739e8cdb10ca_fixed.java
index 21f64c6..b6cfa29 100644
--- a/tmp/72916d7b-913d-4edc-8f88-53e867431fce_buggy.java
+++ b/tmp/9ac68cd8-c83a-4d51-ae54-739e8cdb10ca_fixed.java
@@ -1,23 +1,21 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    int end = length - seq.length() + 1;
+    for (int offset = pos; offset < end; offset++) {
+        if (startChar != input[offset]) {
+            while (++offset < end && startChar != input[offset]);
+        }
+        if (offset < end) {
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int j = 1;
+            while (i < last && seq.charAt(j) == input[i]) {
+                i++;
+                j++;
+            }
+            if (i == last && j == seq.length()) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
