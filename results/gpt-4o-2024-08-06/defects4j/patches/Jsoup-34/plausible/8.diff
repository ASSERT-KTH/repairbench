diff --git a/tmp/61b4bbab-c20b-4b5e-b8f2-916e762d209c_buggy.java b/tmp/79dbc0e0-46ba-4238-b9a0-1df6ef804c0b_fixed.java
index 21f64c6..b946892 100644
--- a/tmp/61b4bbab-c20b-4b5e-b8f2-916e762d209c_buggy.java
+++ b/tmp/79dbc0e0-46ba-4238-b9a0-1df6ef804c0b_fixed.java
@@ -1,23 +1,21 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int seqLength = seq.length();
+    int lastPos = length - seqLength + 1;
+    
+    for (int offset = pos; offset < lastPos; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            while (++offset < lastPos && startChar != input[offset]);
+
+        if (offset < lastPos) {
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int j = 1;
+            for (; j < seqLength && seq.charAt(j) == input[i]; i++, j++);
+            if (j == seqLength) // found full sequence
                 return offset - pos;
         }
     }
+    
     return -1;
 }
\ No newline at end of file
