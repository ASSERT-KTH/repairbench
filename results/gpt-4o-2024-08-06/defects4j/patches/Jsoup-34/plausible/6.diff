diff --git a/tmp/56fd7d74-1a72-4e3d-b3a1-86d327da4468_buggy.java b/tmp/c92d2ae7-6674-4c55-8012-e46288df1877_fixed.java
index 21f64c6..9ad1d0e 100644
--- a/tmp/56fd7d74-1a72-4e3d-b3a1-86d327da4468_buggy.java
+++ b/tmp/c92d2ae7-6674-4c55-8012-e46288df1877_fixed.java
@@ -1,23 +1,21 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        int seqLength = seq.length();
+        int maxOffset = length - seqLength + 1;
+
+        for (int offset = pos; offset < maxOffset; offset++) {
+            // scan to first instance of startChar:
+            if (startChar != input[offset]) {
+                while (++offset < maxOffset && startChar != input[offset]);
+            }
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int endSeq = i + seqLength - 1;
+            if (offset < maxOffset) {
+                int j = 1;
+                for (; i < endSeq && seq.charAt(j) == input[i]; i++, j++);
+                if (i == endSeq && j == seqLength) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
