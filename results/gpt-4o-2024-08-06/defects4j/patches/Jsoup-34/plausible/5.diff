diff --git a/tmp/931ad41f-f11f-47a8-bba7-dd9d928fe9fb_buggy.java b/tmp/ef28e3b7-a9a1-4d8f-aec7-3614cedcd258_fixed.java
index 21f64c6..b41eb9a 100644
--- a/tmp/931ad41f-f11f-47a8-bba7-dd9d928fe9fb_buggy.java
+++ b/tmp/ef28e3b7-a9a1-4d8f-aec7-3614cedcd258_fixed.java
@@ -1,23 +1,19 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    int seqLength = seq.length();
+    int maxOffset = length - seqLength + 1; // Limit the search to ensure enough room for `seq`
+
+    for (int offset = pos; offset < maxOffset; offset++) {
+        if (startChar != input[offset]) {
+            while (++offset < maxOffset && startChar != input[offset]);
+        }
+        if (offset < maxOffset) {
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
+            int last = i + seqLength - 1;
             for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
             if (i == last) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
