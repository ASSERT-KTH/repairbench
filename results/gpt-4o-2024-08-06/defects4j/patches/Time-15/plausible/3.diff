diff --git a/tmp/796771fb-c294-4f3e-9562-5e6bd4dc1ce7_buggy.java b/tmp/b8935645-614a-4277-9c8d-ac85de8e2fe3_fixed.java
index a9a5e27..f0e5d0b 100644
--- a/tmp/796771fb-c294-4f3e-9562-5e6bd4dc1ce7_buggy.java
+++ b/tmp/b8935645-614a-4277-9c8d-ac85de8e2fe3_fixed.java
@@ -1,24 +1,23 @@
-    /**
-     * Multiply two values throwing an exception if overflow occurs.
-     * 
-     * @param val1  the first value
-     * @param val2  the second value
-     * @return the new total
-     * @throws ArithmeticException if the value is too big or too small
-     * @since 1.2
-     */
 public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
-                return -val1;
-            case 0:
-                return 0L;
-            case 1:
-                return val1;
+    if (val1 > 0 && val2 > 0) {
+        if (val1 > Long.MAX_VALUE / val2) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+    } else if (val1 > 0 && val2 < 0) {
+        if (val2 < Long.MIN_VALUE / val1) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+    } else if (val1 < 0 && val2 > 0) {
+        if (val1 < Long.MIN_VALUE / val2) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+    } else if (val1 < 0 && val2 < 0) {
+        if (val1 < Long.MAX_VALUE / val2) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
     }
-        long total = val1 * val2;
-        if (total / val2 != val1) {
+    if (val1 == Long.MIN_VALUE && val2 == -1) {
         throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
     }
-        return total;
+    return val1 * val2;
 }
\ No newline at end of file
