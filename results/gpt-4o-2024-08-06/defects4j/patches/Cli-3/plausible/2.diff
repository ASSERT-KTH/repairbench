diff --git a/tmp/69f26b9d-32fd-4bc1-b0b7-4760efb34da2_buggy.java b/tmp/55b7ea06-ff6f-402d-8cc5-491560c02664_fixed.java
index d9b400d..4e6bc36 100644
--- a/tmp/69f26b9d-32fd-4bc1-b0b7-4760efb34da2_buggy.java
+++ b/tmp/55b7ea06-ff6f-402d-8cc5-491560c02664_fixed.java
@@ -1,21 +1,26 @@
     /**
      * <p>Create a number from a String. If a . is present, it creates a 
      *    Double, otherwise a Long. </p>
      *
      * @param str the value
      * @return the number represented by <code>str</code>, if <code>str</code>
      * is not a number, null is returned.
      */
-    public static Number createNumber(String str)
-    {
-        try
-        {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+    public static Number createNumber(String str) {
+        try {
+            // First, try to parse as a Double directly to account for floating-point values
+            Double numberAsDouble = Double.valueOf(str);
+            if (numberAsDouble.isInfinite() || numberAsDouble.isNaN()) {
+                return null;
             }
-        catch (NumberFormatException nfe)
-        {
+            // If the Double value happens to be a whole number, return it as a Long if it's within the Long range.
+            if (numberAsDouble == numberAsDouble.longValue() && numberAsDouble <= Long.MAX_VALUE && numberAsDouble >= Long.MIN_VALUE) {
+                return numberAsDouble.longValue();
+            }
+            return numberAsDouble;
+        } catch (NumberFormatException nfe) {
+            // Print the exception message and return null if parsing fails
             System.err.println(nfe.getMessage());
-        }
-
             return null;
         }
+    }
\ No newline at end of file
