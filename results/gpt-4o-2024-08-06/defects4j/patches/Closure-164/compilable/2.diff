diff --git a/tmp/28f9db24-a448-4d78-b102-97aebdef4e1c_buggy.java b/tmp/4217d207-deea-4b85-857f-d4ffb4dfd42c_fixed.java
index 9976e43..c04611e 100644
--- a/tmp/28f9db24-a448-4d78-b102-97aebdef4e1c_buggy.java
+++ b/tmp/4217d207-deea-4b85-857f-d4ffb4dfd42c_fixed.java
@@ -1,76 +1,79 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
+  // Check that 'this' has no more required parameters than 'that'.
+  // If 'this' has more required parameters than 'that', then 'this' cannot be
+  // a subtype of 'that' because that would mean passing fewer arguments than expected.
+  int thisRequiredParams = 0;
+  int thatRequiredParams = 0;
+
+  Node thisParamCount = parameters.getFirstChild();
+  Node thatParamCount = that.parameters.getFirstChild();
+  while (thisParamCount != null) {
+    if (!thisParamCount.isOptionalArg() && !thisParamCount.isVarArgs()) {
+      thisRequiredParams++;
+    }
+    thisParamCount = thisParamCount.getNext();
+  }
+  while (thatParamCount != null) {
+    if (!thatParamCount.isOptionalArg() && !thatParamCount.isVarArgs()) {
+      thatRequiredParams++;
+    }
+    thatParamCount = thatParamCount.getNext();
+  }
+  if (thisRequiredParams > thatRequiredParams) {
+    return false;
+  }
 
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
   // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
+  while (thisParam != null) {
+    if (thatParam == null) {
+      break;
+    }
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
     if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
     }
     
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+    // Don't advance if we have variable arguments
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
     if (!thatIsVarArgs) {
       thatParam = thatParam.getNext();
     }
 
-      // both var_args indicates the end
+    // Both var_args indicate the end
     if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+      break;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // Ensure 'that' has no more required parameters left than 'this'.
+  while (thatParam != null) {
+    if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {
+      return false;
+    }
+    thatParam = thatParam.getNext();
+  }
 
   return true;
 }
\ No newline at end of file
