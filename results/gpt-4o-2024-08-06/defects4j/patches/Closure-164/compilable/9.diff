diff --git a/tmp/c6a7d7a4-5289-4519-9219-07e3a211c0ea_buggy.java b/tmp/d846efbc-9d36-4291-afee-2d5498ef5480_fixed.java
index 9976e43..1439635 100644
--- a/tmp/c6a7d7a4-5289-4519-9219-07e3a211c0ea_buggy.java
+++ b/tmp/d846efbc-9d36-4291-afee-2d5498ef5480_fixed.java
@@ -1,76 +1,60 @@
   @Override
   public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
       return false;
     }
 
     ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
-    // this.returnType <: that.returnType (covariant)
+    // Check return types for covariance
     if (!this.returnType.isSubtype(that.returnType)) {
       return false;
     }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+    // Handle parameter type subtyping (contravariance)
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
+
+    // Count number of non-vararg parameters
+    int thisParamCount = 0;
+    int thatParamCount = 0;
+    Node temp = thisParam;
+    while (temp != null) {
+      if (!temp.isVarArgs()) thisParamCount++;
+      temp = temp.getNext();
+    }
+    temp = thatParam;
+    while (temp != null) {
+      if (!temp.isVarArgs()) thatParamCount++;
+      temp = temp.getNext();
+    }
+
+    // If 'that' has fewer required parameters, 'this' cannot be a subtype
+    if (thatParamCount < thisParamCount) {
+      return false;
+    }
+
     while (thisParam != null && thatParam != null) {
       JSType thisParamType = thisParam.getJSType();
       JSType thatParamType = thatParam.getJSType();
       if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+        if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
           return false;
         }
       }
 
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+      // advance non-varargs parameters
+      if (!thisIsVarArgs) thisParam = thisParam.getNext();
+      if (!thatIsVarArgs) thatParam = thatParam.getNext();
 
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
-      }
-      if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
-      }
-
-      // both var_args indicates the end
+      // both being varargs indicates the end
       if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+        break;
       }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
-
     return true;
   }
\ No newline at end of file
