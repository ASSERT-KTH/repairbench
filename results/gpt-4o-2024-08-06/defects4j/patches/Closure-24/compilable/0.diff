diff --git a/tmp/701d0eae-6951-4b12-8fc4-6cc97a0b1c4b_buggy.java b/tmp/94905d6e-e7bd-431e-bc0f-4a72a4e9cf27_fixed.java
index 602226b..6b4c847 100644
--- a/tmp/701d0eae-6951-4b12-8fc4-6cc97a0b1c4b_buggy.java
+++ b/tmp/94905d6e-e7bd-431e-bc0f-4a72a4e9cf27_fixed.java
@@ -1,26 +1,27 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
+            if (aliasVar != null) { // Added check for aliasVar not being null
+              Node initialValue = aliasVar.getInitialValue();
+              if (initialValue != null && initialValue.isQualifiedName()) { // Ensure initialValue is not null and is a qualified name
+                String qualifiedName = initialValue.getQualifiedName();
+                if (qualifiedName != null) { // Ensure qualifiedName is not null
                   aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
                   transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+                }
+              }
+            }
           } else {
-          // TODO(robbyw): Support using locals for private variables.
+            // Report non-alias local
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
\ No newline at end of file
