diff --git a/tmp/eff5a2e9-4116-4f0e-af09-96ca523197c3_buggy.java b/tmp/0d06a175-511b-4aa7-9620-9b5d38dab96a_fixed.java
index 602226b..365f8fb 100644
--- a/tmp/eff5a2e9-4116-4f0e-af09-96ca523197c3_buggy.java
+++ b/tmp/0d06a175-511b-4aa7-9620-9b5d38dab96a_fixed.java
@@ -1,26 +1,26 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
+        if (parent != null && parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
+            if (aliasVar != null && aliasVar.getInitialValue() != null) {
+              String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
+              if (qualifiedName != null) {
                 aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
                 transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
               } else {
-          // TODO(robbyw): Support using locals for private variables.
+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+              }
+            } else {
+              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+            }
+          } else {
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
\ No newline at end of file
