diff --git a/tmp/cded34e3-9dda-4c7d-a875-c51006d1fa93_buggy.java b/tmp/c9abd060-1837-423b-8696-7f3f2923434e_fixed.java
index 602226b..d41a7bb 100644
--- a/tmp/cded34e3-9dda-4c7d-a875-c51006d1fa93_buggy.java
+++ b/tmp/c9abd060-1837-423b-8696-7f3f2923434e_fixed.java
@@ -1,26 +1,26 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
       } else {
-          // TODO(robbyw): Support using locals for private variables.
+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+      }
+    } else {
+      // Handle bleeding functions or scope function parameters
+      if (!n.isFunction() || !scope.isFunctionBlockScope()) {
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
