diff --git a/tmp/587ce156-d69c-4b3e-bca1-0149ee7c2105_buggy.java b/tmp/563e1923-cb33-4e3a-8167-eb80c571197d_fixed.java
index 3127f85..2664b31 100644
--- a/tmp/587ce156-d69c-4b3e-bca1-0149ee7c2105_buggy.java
+++ b/tmp/563e1923-cb33-4e3a-8167-eb80c571197d_fixed.java
@@ -1,24 +1,21 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
     public double cumulativeProbability(double x) throws MathException {
+        if (x == Double.POSITIVE_INFINITY) {
+            return 1.0;
+        } else if (x == Double.NEGATIVE_INFINITY) {
+            return 0.0;
+        }
+
         final double dev = x - mean;
         try {
             return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
             if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
                 return 0;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1;
             } else {
                 throw ex;
             }
         }
     }
\ No newline at end of file
