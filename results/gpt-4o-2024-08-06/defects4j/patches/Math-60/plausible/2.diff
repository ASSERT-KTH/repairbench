diff --git a/tmp/aabdc1c3-e635-48fb-b156-083637c9da2a_buggy.java b/tmp/4dc09f83-7d80-4bf6-938e-2fac1e61059b_fixed.java
index 3127f85..79b623e 100644
--- a/tmp/aabdc1c3-e635-48fb-b156-083637c9da2a_buggy.java
+++ b/tmp/4dc09f83-7d80-4bf6-938e-2fac1e61059b_fixed.java
@@ -1,24 +1,29 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
+    if (x < (mean - 40 * standardDeviation)) { // Correct the top-coding threshold to 40
+        return 0;
+    } else if (x > (mean + 40 * standardDeviation)) {
+        return 1;
+    }
     try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
         if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
             return 0;
         } else if (x > (mean + 20 * standardDeviation)) {
             return 1;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
