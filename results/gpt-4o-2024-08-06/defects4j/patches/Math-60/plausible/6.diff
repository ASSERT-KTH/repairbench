diff --git a/tmp/cfa470cd-9c7a-4bf2-aa3b-c8ee105ce999_buggy.java b/tmp/351582c4-80fa-494a-8844-1c677ca59af9_fixed.java
index 3127f85..10eb80a 100644
--- a/tmp/cfa470cd-9c7a-4bf2-aa3b-c8ee105ce999_buggy.java
+++ b/tmp/351582c4-80fa-494a-8844-1c677ca59af9_fixed.java
@@ -1,24 +1,22 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
     public double cumulativeProbability(double x) throws MathException {
+        if (Double.isInfinite(x)) {
+            return x < 0 ? 0 : 1;
+        }
         final double dev = x - mean;
+        if (dev < -40 * standardDeviation) {
+            return 0;
+        } else if (dev > 40 * standardDeviation) {
+            return 1;
+        }
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < (mean - 20 * standardDeviation)) {
                 return 0;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1;
             } else {
                 throw ex;
             }
         }
     }
\ No newline at end of file
