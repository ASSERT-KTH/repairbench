diff --git a/tmp/1b4cbd02-d69b-454e-aae5-7583dd703f67_buggy.java b/tmp/80c2e671-a053-4336-b7e3-62ceb72d7c48_fixed.java
index 3127f85..f599f93 100644
--- a/tmp/1b4cbd02-d69b-454e-aae5-7583dd703f67_buggy.java
+++ b/tmp/80c2e671-a053-4336-b7e3-62ceb72d7c48_fixed.java
@@ -1,24 +1,24 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
+     * If {@code x} is more than 20 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
+        // Check for extreme values and return 0 or 1 early to prevent convergence exceptions
+        if (x < (mean - 20 * standardDeviation)) {
+            return 0.0;
+        } else if (x > (mean + 20 * standardDeviation)) {
+            return 1.0;
+        }
+
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
+            throw new MathException("Failed to converge", ex);
         }
     }
\ No newline at end of file
