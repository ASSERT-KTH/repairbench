diff --git a/tmp/08ffec7b-486b-4d85-8149-3181acfbfa90_buggy.java b/tmp/94fe64a1-e43c-4f7a-b9ba-ae3a326d0091_fixed.java
index 3127f85..f6c525b 100644
--- a/tmp/08ffec7b-486b-4d85-8149-3181acfbfa90_buggy.java
+++ b/tmp/94fe64a1-e43c-4f7a-b9ba-ae3a326d0091_fixed.java
@@ -1,24 +1,18 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
     public double cumulativeProbability(double x) throws MathException {
+        if (Double.isInfinite(x)) {
+            return x < mean ? 0.0 : 1.0;
+        }
+
         final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+        if (dev < -20 * standardDeviation) {
             return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+        } else if (dev > 20 * standardDeviation) {
             return 1;
-            } else {
-                throw ex;
         }
+
+        try {
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
+        } catch (MaxIterationsExceededException ex) {
+            throw new MathException("Convergence failed", ex);
         }
     }
\ No newline at end of file
