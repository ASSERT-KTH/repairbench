diff --git a/tmp/1933bed8-d7d3-4497-b5c5-b9aa3fd1d35d_buggy.java b/tmp/37b04ceb-dff2-4984-855b-a0d2af548347_fixed.java
index 25ca093..9ef7f00 100644
--- a/tmp/1933bed8-d7d3-4497-b5c5-b9aa3fd1d35d_buggy.java
+++ b/tmp/37b04ceb-dff2-4984-855b-a0d2af548347_fixed.java
@@ -1,52 +1,71 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String defaultCharset = "UTF-8";
+    int byteOrderMarkLength = 0;
 
-        // look for BOM - overrides any other header or input
+    // check for BOM
+    if (byteData.remaining() >= 2) {
+        byteData.mark();
+        byte[] bom = new byte[4]; // maximum BOM length for UTF-32
+        byteData.get(bom, 0, Math.min(byteData.remaining(), bom.length));
+        byteData.reset();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        if ((bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF)) {
+            charsetName = "UTF-8";
+            byteOrderMarkLength = 3;
+        } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+            charsetName = "UTF-16BE";
+            byteOrderMarkLength = 2;
+        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+            charsetName = "UTF-16LE";
+            byteOrderMarkLength = 2;
+        } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+            charsetName = "UTF-32BE";
+            byteOrderMarkLength = 4;
+        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+            charsetName = "UTF-32LE";
+            byteOrderMarkLength = 4;
+        }
+    }
+
+    if (charsetName == null) {
+        byteData.position(byteOrderMarkLength);
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) { 
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { 
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
-                    byteData.rewind();
+                byteData.position(byteOrderMarkLength);
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { 
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.position(byteOrderMarkLength);
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(Charset.forName(charsetName));
     }
     return doc;
 }
\ No newline at end of file
