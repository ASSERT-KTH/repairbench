diff --git a/tmp/ddeca13d-3f83-44a2-a15f-dcd8cce125dc_buggy.java b/tmp/f2acd7b6-a634-4c84-b599-eca89554c9f5_fixed.java
index 25ca093..f3be452 100644
--- a/tmp/ddeca13d-3f83-44a2-a15f-dcd8cce125dc_buggy.java
+++ b/tmp/f2acd7b6-a634-4c84-b599-eca89554c9f5_fixed.java
@@ -1,52 +1,41 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Byte Order Mark (BOM) detection
+    String detectedCharset = Charset.forName(defaultCharset).name();
+    byteData.mark();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
-                if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
+    if (byteData.remaining() >= 2) {
+        byte b1 = byteData.get(0);
+        byte b2 = byteData.get(1);
+
+        if ((b1 == (byte) 0xFE && b2 == (byte) 0xFF) || (b1 == (byte) 0xFF && b2 == (byte) 0xFE)) {
+            detectedCharset = (b1 == (byte) 0xFE) ? "UTF-16BE" : "UTF-16LE";
+        } else if (byteData.remaining() >= 4) {
+            byte b3 = byteData.get(2);
+            byte b4 = byteData.get(3);
+            if (b1 == 0x00 && b2 == 0x00 && b3 == (byte) 0xFE && b4 == (byte) 0xFF) {
+                detectedCharset = "UTF-32BE";
+            } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE && b3 == 0x00 && b4 == 0x00) {
+                detectedCharset = "UTF-32LE";
             }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
         }
     }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+    if (charsetName == null) {
+        charsetName = detectedCharset;
     }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+
+    byteData.rewind(); // reset position to read actual content
     docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
+
+    // Handling BOM for UTF-8
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+        docData = docData.substring(1); // remove BOM
     }
-        if (doc == null) {
+
     doc = parser.parseInput(docData, baseUri);
     doc.outputSettings().charset(charsetName);
-        }
     return doc;
 }
\ No newline at end of file
