diff --git a/tmp/5719183b-5478-4693-9060-013dac0aeb23_buggy.java b/tmp/e7064daa-ab01-4929-b2e9-ae96b5ec69cf_fixed.java
index 25ca093..adc804b 100644
--- a/tmp/5719183b-5478-4693-9060-013dac0aeb23_buggy.java
+++ b/tmp/e7064daa-ab01-4929-b2e9-ae96b5ec69cf_fixed.java
@@ -1,52 +1,78 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String defaultCharset = "UTF-8"; // Ensures that defaultCharset is defined
+    final char UNICODE_BOM = '\uFEFF';
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM
+    String detectedCharset = null;
+    byteData.mark();
+    if (byteData.remaining() >= 2) { // Check BOM for UTF-16BE and UTF-16LE
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        if (b1 == (byte) 0xFE && b2 == (byte) 0xFF) {
+            detectedCharset = "UTF-16BE";
+        } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE) {
+            detectedCharset = "UTF-16LE";
+        } else if (byteData.remaining() >= 2) { // Check BOM for UTF-32BE and UTF-32LE
+            byte b3 = byteData.get();
+            byte b4 = byteData.get();
+            if (b1 == (byte) 0x00 && b2 == (byte) 0x00 && b3 == (byte) 0xFE && b4 == (byte) 0xFF) {
+                detectedCharset = "UTF-32BE";
+            } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE && b3 == (byte) 0x00 && b4 == (byte) 0x00) {
+                detectedCharset = "UTF-32LE";
+            }
+        }
+        byteData.reset(); // Rewind to the start of buffer if no BOM found
+    }
     
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (detectedCharset != null) {
+        charsetName = detectedCharset;
+    }
+
+    if (charsetName == null) { // Attempt detection from meta
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() > 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { // Use the specified charset
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+        docData = docData.substring(1); // Remove BOM
         byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
         charsetName = defaultCharset;
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+    
     return doc;
 }
\ No newline at end of file
