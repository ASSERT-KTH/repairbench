diff --git a/tmp/be3062a3-a417-4bf2-829f-e4232c419bc9_buggy.java b/tmp/5004e47d-bbcc-4ab6-9cc8-226187b294e3_fixed.java
index 25ca093..c806229 100644
--- a/tmp/be3062a3-a417-4bf2-829f-e4232c419bc9_buggy.java
+++ b/tmp/5004e47d-bbcc-4ab6-9cc8-226187b294e3_fixed.java
@@ -1,52 +1,73 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String detectedCharset = charsetName;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM and set detectedCharset accordingly
+    if (byteData.remaining() >= 2) {
+        byteData.mark();
+        int first = byteData.get() & 0xFF;
+        int second = byteData.get() & 0xFF;
+        // Reset the position to read all data including BOM
+        byteData.reset();
+
+        if (first == 0xEF && second == 0xBB && byteData.remaining() >= 3 && (byteData.get(byteData.position() + 2) & 0xFF) == 0xBF) {
+            detectedCharset = "UTF-8"; // UTF-8 BOM
+        } else if (first == 0xFE && second == 0xFF) {
+            detectedCharset = "UTF-16BE"; // UTF-16 Big Endian BOM
+        } else if (first == 0xFF && second == 0xFE) {
+            detectedCharset = "UTF-16LE"; // UTF-16 Little Endian BOM
+        } else if (byteData.remaining() >= 4) {
+            int third = byteData.get() & 0xFF;
+            int fourth = byteData.get() & 0xFF;
+            byteData.reset();
+            if (first == 0x00 && second == 0x00 && third == 0xFE && fourth == 0xFF) {
+                detectedCharset = "UTF-32BE"; // UTF-32 Big Endian BOM
+            } else if (first == 0xFF && second == 0xFE && third == 0x00 && fourth == 0x00) {
+                detectedCharset = "UTF-32LE"; // UTF-32 Little Endian BOM
+            }
+        }
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        detectedCharset = detectedCharset != null ? detectedCharset : defaultCharset;
+        docData = Charset.forName(detectedCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.equalsIgnoreCase(detectedCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+                detectedCharset = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        detectedCharset = charsetName;
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
+        if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+            docData = docData.substring(1);
+        }
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(detectedCharset);
     }
     return doc;
 }
\ No newline at end of file
