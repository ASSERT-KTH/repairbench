diff --git a/tmp/0c5f0755-241e-40a9-aaca-ea71266075d6_buggy.java b/tmp/56bc35ab-5588-4c4c-bad1-5304525cea29_fixed.java
index 25ca093..eddc97d 100644
--- a/tmp/0c5f0755-241e-40a9-aaca-ea71266075d6_buggy.java
+++ b/tmp/56bc35ab-5588-4c4c-bad1-5304525cea29_fixed.java
@@ -1,52 +1,68 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    if (charsetName == null) {
+        charsetName = detectCharsetFromBom(byteData);
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) {
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind();
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+private static String detectCharsetFromBom(ByteBuffer byteData) {
+    if (byteData.remaining() < 4) return null; // BOM is max 4 bytes
+    byteData.mark();
+    byte[] bom = new byte[4];
+    byteData.get(bom, 0, 4);
+    byteData.reset();
+
+    if ((bom[0] & 0xFF) == 0xEF && (bom[1] & 0xFF) == 0xBB && (bom[2] & 0xFF) == 0xBF) {
+        return "UTF-8";
+    } else if ((bom[0] & 0xFF) == 0xFE && (bom[1] & 0xFF) == 0xFF) {
+        return "UTF-16BE";
+    } else if ((bom[0] & 0xFF) == 0xFF && (bom[1] & 0xFF) == 0xFE) {
+        return "UTF-16LE";
+    } else if ((bom[0] & 0xFF) == 0x00 && (bom[1] & 0xFF) == 0x00 && (bom[2] & 0xFF) == 0xFE && (bom[3] & 0xFF) == 0xFF) {
+        return "UTF-32BE";
+    } else if ((bom[0] & 0xFF) == 0xFF && (bom[1] & 0xFF) == 0xFE && (bom[2] & 0xFF) == 0x00 && (bom[3] & 0xFF) == 0x00) {
+        return "UTF-32LE";
+    }
+    return null;
+}
\ No newline at end of file
