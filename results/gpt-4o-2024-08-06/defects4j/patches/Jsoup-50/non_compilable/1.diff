diff --git a/tmp/e6ee71dc-8b28-42ad-b4a9-1017fbbf11cf_buggy.java b/tmp/6a11703f-5b2b-4fa2-8adf-113d3d6e2c91_fixed.java
index 25ca093..2e7b52c 100644
--- a/tmp/e6ee71dc-8b28-42ad-b4a9-1017fbbf11cf_buggy.java
+++ b/tmp/6a11703f-5b2b-4fa2-8adf-113d3d6e2c91_fixed.java
@@ -1,52 +1,99 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        if (charsetName == null) {
+            ByteOrderMark bom = detectBOM(byteData);
+            if (bom != null) {
+                charsetName = bom.getCharsetName();
+                byteData.position(bom.length());
+            } else {
                 docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 doc = parser.parseInput(docData, baseUri);
                 Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+                if (meta != null) {
                     String foundCharset = null;
                     if (meta.hasAttr("http-equiv")) {
                         foundCharset = getCharsetFromContentType(meta.attr("content"));
                     }
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                    if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                         foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                         charsetName = foundCharset;
                         byteData.rewind();
                         docData = Charset.forName(foundCharset).decode(byteData).toString();
                         doc = null;
                     }
                 }
-        } else { // specified by content type header (or by user on file load)
+            }
+        } else {
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+
+        if (docData == null) {
             byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+            docData = Charset.forName(charsetName).decode(byteData).toString();
         }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
+
+    private static ByteOrderMark detectBOM(ByteBuffer byteData) {
+        if (byteData.remaining() >= 4) {
+            byte first = byteData.get();
+            byte second = byteData.get();
+            byte third = byteData.get();
+            byte fourth = byteData.get();
+            byteData.rewind();
+
+            if (first == (byte)0xFF && second == (byte)0xFE && third == (byte)0x00 && fourth == (byte)0x00) {
+                return ByteOrderMark.UTF_32LE;
+            } else if (first == (byte)0x00 && second == (byte)0x00 && third == (byte)0xFE && fourth == (byte)0xFF) {
+                return ByteOrderMark.UTF_32BE;
+            } else if (first == (byte)0xFF && second == (byte)0xFE) {
+                return ByteOrderMark.UTF_16LE;
+            } else if (first == (byte)0xFE && second == (byte)0xFF) {
+                return ByteOrderMark.UTF_16BE;
+            } else if (first == (byte)0xEF && second == (byte)0xBB && third == (byte)0xBF) {
+                return ByteOrderMark.UTF_8;
+            }
+        }
+        return null;
+    }
+
+    private static enum ByteOrderMark {
+        UTF_8("UTF-8", 3),
+        UTF_16LE("UTF-16LE", 2),
+        UTF_16BE("UTF-16BE", 2),
+        UTF_32LE("UTF-32LE", 4),
+        UTF_32BE("UTF-32BE", 4);
+
+        private final String charsetName;
+        private final int length;
+
+        ByteOrderMark(String charsetName, int length) {
+            this.charsetName = charsetName;
+            this.length = length;
+        }
+
+        public String getCharsetName() {
+            return charsetName;
+        }
+
+        public int length() {
+            return length;
+        }
+    }
\ No newline at end of file
