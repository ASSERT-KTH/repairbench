diff --git a/tmp/5b1d1d50-e011-4897-99b5-b847d7201615_buggy.java b/tmp/ea8b1614-18b7-4a6b-bc13-9388b8a62988_fixed.java
index 25ca093..1f35d2b 100644
--- a/tmp/5b1d1d50-e011-4897-99b5-b847d7201615_buggy.java
+++ b/tmp/ea8b1614-18b7-4a6b-bc13-9388b8a62988_fixed.java
@@ -1,52 +1,83 @@
-    // todo - this is getting gnarly. needs a rewrite.
+import java.nio.ByteOrder;
+
+// Revised parseByteData function
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    byte[] bom = new byte[4];
+    int bomLength = 0;
 
-        // look for BOM - overrides any other header or input
+    // Check Byte Order Mark (BOM)
+    if (byteData.remaining() >= 4) {
+        byteData.mark();
+        for (int i = 0; i < 4; i++) {
+            bom[i] = byteData.get();
+        }
+        byteData.reset();
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if ((bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) || // UTF-16BE
+        (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) || // UTF-16LE
+        (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) || // UTF-32BE
+        (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00)) { // UTF-32LE
+        byteData.order(ByteOrder.BIG_ENDIAN); // or LITTLE_ENDIAN based on BOM
+        if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+            charsetName = "UTF-16BE";
+            bomLength = 2;
+        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+            charsetName = "UTF-16LE";
+            bomLength = 2;
+        } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+            charsetName = "UTF-32BE";
+            bomLength = 4;
+        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+            charsetName = "UTF-32LE";
+            bomLength = 4;
+        }
+    } else if (charsetName == null) { 
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { 
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { 
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.position(bomLength);
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
         byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
         charsetName = defaultCharset;
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
