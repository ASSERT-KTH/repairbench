diff --git a/tmp/da9f66f8-9b37-4114-a891-973d04ada6de_buggy.java b/tmp/018c432b-8ed5-42ff-9d0a-d658fd549ba7_fixed.java
index 81a6e8b..b4dc804 100644
--- a/tmp/da9f66f8-9b37-4114-a891-973d04ada6de_buggy.java
+++ b/tmp/018c432b-8ed5-42ff-9d0a-d658fd549ba7_fixed.java
@@ -1,19 +1,40 @@
     /**
      * Tells if the token looks like a short option.
      * 
      * @param token
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
         if (!token.startsWith("-") || token.length() == 1)
         {
             return false;
         }
 
-        // remove leading "-" and "=value"
+        // Check the first character after the '-' to see if it's a valid short option
+        String firstOpt = token.substring(1, 2);
+        if (!options.hasShortOption(firstOpt)) {
+            return false;
+        }
+        
+        // If token length is 2, it's a single short option (like -t)
+        if (token.length() == 2) {
+            return true;
+        }
+
+        // Check if it contains an '=' for an assigned value
+        if (token.contains("=")) {
             int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+            String optName = token.substring(1, pos);
+            return optName.length() == 1 && options.hasShortOption(optName);
+        }
+
+        // Check for concatenated short options
+        for (int i = 1; i < token.length(); i++) {
+            if (!options.hasShortOption(token.substring(i, i + 1))) {
+                return false;
+            }
+        }
+        
+        return true;
     }
\ No newline at end of file
