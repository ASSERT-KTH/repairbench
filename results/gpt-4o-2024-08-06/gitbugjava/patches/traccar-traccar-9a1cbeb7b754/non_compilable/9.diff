diff --git a/tmp/b4375157-c039-4794-b6b0-6d29fae3df2b_buggy.java b/tmp/51a008dc-7920-4ba0-a955-3b87ee1d0ea7_fixed.java
index 6d50be3..46bdfbb 100644
--- a/tmp/b4375157-c039-4794-b6b0-6d29fae3df2b_buggy.java
+++ b/tmp/51a008dc-7920-4ba0-a955-3b87ee1d0ea7_fixed.java
@@ -1,194 +1,178 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
-        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    if (commaIndex == -1 || commaIndex + 1 + 15 > buf.writerIndex()) {
+        return null; // Insufficient data for IMEI
+    }
+    buf.readerIndex(commaIndex + 1);
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1 + 3 + 1);
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
+    if (buf.readableBytes() < 4 + 2) {
+        return null; // Insufficient data for remaining bytes and count
+    }
     buf.readUnsignedIntLE(); // remaining cache
     int count = buf.readUnsignedShortLE();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
+        if (buf.readableBytes() < 2 + 2) {
+            return null; // Insufficient data for length and index
+        }
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // index
 
+        decodeParameters(buf, position);
+        decodeLongParameters(buf, position);
+
+        positions.add(position);
+    }
+
+    return positions;
+}
+
+private void decodeParameters(ByteBuf buf, Position position) {
     int paramCount = buf.readUnsignedByte();
     for (int j = 0; j < paramCount; j++) {
+        if (buf.readableBytes() < 1) {
+            return;
+        }
+        
         boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
         int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+        
         switch (id) {
             case 0x01:
+                if (buf.readableBytes() < 1) return;
                 position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                 break;
             case 0x05:
+                if (buf.readableBytes() < 1) return;
                 position.setValid(buf.readUnsignedByte() > 0);
                 break;
             case 0x06:
+                if (buf.readableBytes() < 1) return;
                 position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 break;
             case 0x07:
+                if (buf.readableBytes() < 1) return;
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 break;
             case 0x14:
+                if (buf.readableBytes() < 1) return;
                 position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                 break;
             case 0x15:
+                if (buf.readableBytes() < 1) return;
                 position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                 break;
             case 0x47:
+                if (buf.readableBytes() < 1) return;
                 int lockState = buf.readUnsignedByte();
                 if (lockState > 0) {
                     position.set(Position.KEY_LOCK, lockState == 2);
                 }
                 break;
             case 0x97:
+                if (buf.readableBytes() < 1) return;
                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                 break;
             case 0x9D:
+                if (buf.readableBytes() < 1) return;
                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                 break;
             case 0xFE69:
+                if (buf.readableBytes() < 1) return;
                 position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                 break;
             default:
-                        buf.readUnsignedByte();
+                if (buf.readableBytes() < (extension ? 2 : 1)) return;
+                buf.skipBytes(extension ? 2 : 1);
                 break;
         }
     }
+}
 
-            paramCount = buf.readUnsignedByte();
+private void decodeLongParameters(ByteBuf buf, Position position) {
+    int paramCount = buf.readUnsignedByte();
     for (int j = 0; j < paramCount; j++) {
+        if (buf.readableBytes() < 1) {
+            return;
+        }
+
         boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
         int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+
         switch (id) {
             case 0x08:
+                if (buf.readableBytes() < 2) return;
                 position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                 break;
             case 0x09:
+                if (buf.readableBytes() < 2) return;
                 position.setCourse(buf.readUnsignedShortLE());
                 break;
             case 0x0A:
+                if (buf.readableBytes() < 2) return;
                 position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                 break;
             case 0x0B:
+                if (buf.readableBytes() < 2) return;
                 position.setAltitude(buf.readShortLE());
                 break;
             case 0x16:
+                if (buf.readableBytes() < 2) return;
                 position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                 break;
             case 0x19:
+                if (buf.readableBytes() < 2) return;
                 position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                 break;
             case 0x1A:
+                if (buf.readableBytes() < 2) return;
                 position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                 break;
             case 0x40:
+                if (buf.readableBytes() < 2) return;
                 position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                 break;
             case 0x91:
             case 0x92:
+                if (buf.readableBytes() < 2) return;
                 position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                 break;
             case 0x98:
+                if (buf.readableBytes() < 2) return;
                 position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                 break;
             case 0x99:
+                if (buf.readableBytes() < 2) return;
                 position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                 break;
             case 0x9C:
+                if (buf.readableBytes() < 2) return;
                 position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                 break;
             case 0x9F:
+                if (buf.readableBytes() < 2) return;
                 position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                 break;
             case 0xC9:
+                if (buf.readableBytes() < 2) return;
                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                 break;
             default:
-                        buf.readUnsignedShortLE();
+                if (buf.readableBytes() < 2) return;
+                buf.skipBytes(2);
                 break;
         }
     }
-
-            paramCount = buf.readUnsignedByte();
-            for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
-                switch (id) {
-                    case 0x02:
-                        position.setLatitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x03:
-                        position.setLongitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
-                        break;
-                    case 0x0C:
-                    case 0x9B:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                        break;
-                    case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
-                        break;
-                    case 0x25:
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
-                        break;
-                    case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
-                        break;
-                    case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
-                        break;
-                    default:
-                        buf.readUnsignedIntLE();
-                        break;
-                }
-            }
-
-            paramCount = buf.readUnsignedByte();
-            for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
-                int length = buf.readUnsignedByte();
-                switch (id) {
-                    case 0x2A:
-                    case 0x2B:
-                    case 0x2C:
-                    case 0x2D:
-                    case 0x2E:
-                    case 0x2F:
-                    case 0x30:
-                    case 0x31:
-                        buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
-                        break;
-                    case 0xFE31:
-                        buf.readUnsignedByte(); // alarm protocol
-                        buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
-                        break;
-                    case 0xFEA8:
-                        buf.readUnsignedByte(); // battery status
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        buf.readUnsignedByte(); // battery alert
-                        break;
-                    default:
-                        buf.skipBytes(length);
-                        break;
-                }
-            }
-
-            positions.add(position);
-        }
-
-        return positions;
 }
\ No newline at end of file
