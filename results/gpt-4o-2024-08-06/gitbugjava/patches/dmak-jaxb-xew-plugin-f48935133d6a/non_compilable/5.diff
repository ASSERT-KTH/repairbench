diff --git a/tmp/5ce1b6f4-d5e7-4b75-beec-eed1a3e475f2_buggy.java b/tmp/af0f3de8-f3fd-4481-adb4-078c12c4afb2_fixed.java
index 47a8941..6ead147 100644
--- a/tmp/5ce1b6f4-d5e7-4b75-beec-eed1a3e475f2_buggy.java
+++ b/tmp/af0f3de8-f3fd-4481-adb4-078c12c4afb2_fixed.java
@@ -1,53 +1,53 @@
     /**
      * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
      */
     private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
         // Modify the container so it now refers the class. Container can be a class or package.
         JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
         JClassContainer grandParent = parent.parentContainer();
         // Allows to track class name collisions:
         Map<String, JDefinedClass> classes;
 
         // FIXME: Pending https://java.net/jira/browse/JAXB-957
         if (grandParent.isClass()) {
             // Element class should be added as its container child:
             JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
             writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
             classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+        } else {
             JPackage grandParentPackage = (JPackage) grandParent;
 
             writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
             classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+            // In this scenario class should have "static" modifier set to zero otherwise it won't compile:
+            setPrivateField(clazz.mods(), "value", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
             for (ClassOutline classOutline : outline.getClasses()) {
                 if (classOutline.implClass == clazz) {
                     XSComponent sc = classOutline.target.getSchemaComponent();
 
                     // FIXME: Inner class is always a local declaration.
                     assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
                     setPrivateField(sc, "anonymous", Boolean.FALSE);
 
                     break;
                 }
             }
         }
 
         if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+            String newName = parent.name() + clazz.name();
+            writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+            setPrivateField(clazz, "name", newName);
         }
 
         classes.put(clazz.name(), clazz);
 
         // Finally modify the class so that it refers back the container:
         setPrivateField(clazz, "outer", grandParent);
     }
\ No newline at end of file
