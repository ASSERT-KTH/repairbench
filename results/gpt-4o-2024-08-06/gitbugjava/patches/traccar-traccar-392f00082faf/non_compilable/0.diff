diff --git a/tmp/b7f4adb1-8a6c-485a-bad3-5e1ff5a26dbe_buggy.java b/tmp/9f97ec65-e352-4e80-8b1d-49371396423f_fixed.java
index fcb460f..63d8a6f 100644
--- a/tmp/b7f4adb1-8a6c-485a-bad3-5e1ff5a26dbe_buggy.java
+++ b/tmp/9f97ec65-e352-4e80-8b1d-49371396423f_fixed.java
@@ -1,183 +1,237 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
-        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    if (commaIndex == -1) {
+        return null; 
+    }
+
+    buf.readerIndex(commaIndex + 1);
+    if (buf.readableBytes() < 15) { 
+        return null;
+    }
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1 + 3 + 1); 
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
-        buf.readUnsignedIntLE(); // remaining cache
+    if (buf.readableBytes() < 4 + 2) { 
+        return positions; 
+    }
+
+    buf.readUnsignedIntLE(); 
     int count = buf.readUnsignedShortLE();
-
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
-            buf.readUnsignedShortLE(); // length
-            buf.readUnsignedShortLE(); // index
+        if (buf.readableBytes() < 4) { 
+            continue;
+        }
+
+        buf.readUnsignedShortLE(); 
+        buf.readUnsignedShortLE(); 
 
         int paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                break; 
+            }
+
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte(); 
+            if (buf.readableBytes() < (extension ? 2 : 1)) {
+                break;
+            }
             switch (id) {
                 case 0x01:
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     break;
                 case 0x05:
                     position.setValid(buf.readUnsignedByte() > 0);
                     break;
                 case 0x06:
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x07:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x14:
                     position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                     break;
                 case 0x15:
                     position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                     break;
                 case 0x97:
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case 0x9D:
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
                 case 0xFE69:
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     break;
                 default:
-                        buf.readUnsignedByte();
+                    buf.skipBytes(1); 
                     break;
             }
         }
 
+        if (buf.readableBytes() < 1) {
+            continue; 
+        }
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                break;
+            }
+
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            if (buf.readableBytes() < (extension ? 2 : 2)) {
+                break;
+            }
             switch (id) {
                 case 0x08:
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     break;
                 case 0x09:
                     position.setCourse(buf.readUnsignedShortLE());
                     break;
                 case 0x0A:
                     position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                     break;
                 case 0x0B:
                     position.setAltitude(buf.readShortLE());
                     break;
                 case 0x16:
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x19:
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x1A:
                     position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x40:
                     position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                     break;
                 case 0x91:
                 case 0x92:
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                     break;
                 case 0x98:
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                     break;
                 case 0x99:
                     position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                     break;
                 case 0x9C:
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                     break;
                 case 0x9F:
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                     break;
                 case 0xC9:
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                     break;
                 default:
-                        buf.readUnsignedShortLE();
+                    buf.skipBytes(2);
                     break;
             }
         }
 
+        if (buf.readableBytes() < 1) {
+            continue; 
+        }
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                break;
+            }
+
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            long value;
+            if (buf.readableBytes() < (extension ? 2 : 4)) {
+                break;
+            }
             switch (id) {
                 case 0x02:
                     position.setLatitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x03:
                     position.setLongitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
+                    value = buf.readUnsignedIntLE();
+                    position.setTime(new Date((946684800 + value) * 1000)); 
                     break;
                 case 0x0C:
                 case 0x9B:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     break;
                 case 0x0D:
                     position.set("runtime", buf.readUnsignedIntLE());
                     break;
                 case 0x25:
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                     break;
                 case 0xA0:
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                     break;
                 case 0xA2:
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                     break;
                 default:
-                        buf.readUnsignedIntLE();
+                    buf.skipBytes(4);
                     break;
             }
         }
 
+        if (buf.readableBytes() < 1) {
+            continue; 
+        }
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1 + (buf.getUnsignedByte(buf.readerIndex()) == 0xFE ? 3 : 2)) {
+                break;
+            }
+
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
+            if (buf.readableBytes() < length) {
+                break;
+            }
             switch (id) {
                 case 0x2A:
                 case 0x2B:
                 case 0x2C:
                 case 0x2D:
                 case 0x2E:
                 case 0x2F:
                 case 0x30:
                 case 0x31:
-                        buf.readUnsignedByte(); // label
+                    buf.readUnsignedByte(); 
                     position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
                     break;
                 case 0xFE31:
-                        buf.readUnsignedByte(); // alarm protocol
-                        buf.readUnsignedByte(); // alarm type
+                    buf.readUnsignedByte(); 
+                    buf.readUnsignedByte(); 
                     buf.skipBytes(length - 2);
                     break;
                 default:
                     buf.skipBytes(length);
                     break;
             }
         }
 
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
