diff --git a/tmp/9a0613d4-c098-49e6-adfb-664cb22b56f2_buggy.java b/tmp/f418dd83-3ec4-4218-b756-0ab25077bb1a_fixed.java
index 016a7f6..b1cdfff 100644
--- a/tmp/9a0613d4-c098-49e6-adfb-664cb22b56f2_buggy.java
+++ b/tmp/f418dd83-3ec4-4218-b756-0ab25077bb1a_fixed.java
@@ -1,29 +1,35 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
         
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) 
+                || (next instanceof TextNode && (((TextNode) next).isBlank())); 
+            if (couldSkip && isBlank) {
+                return;
+            }
 
             Node prev = previousSibling();
-            if (
+            boolean needIndent = 
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"));
+            
+            if (needIndent) {
                 indent(accum, depth, out);
+            } else if (prettyPrint && siblingIndex > 0 && prev instanceof TextNode && ((TextNode) prev).isBlank()) {
+                // Ensure no leading space for inline elements if previous sibling was blank
+                trimLeading = true;
+            }
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
