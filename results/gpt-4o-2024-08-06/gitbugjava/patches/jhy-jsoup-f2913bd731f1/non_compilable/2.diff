diff --git a/tmp/a1c7d42d-90d9-41d0-b2c4-aeea54ebd1e5_buggy.java b/tmp/98fe143c-1a76-410d-a6e3-a491ebc0495a_fixed.java
index 016a7f6..6a1190c 100644
--- a/tmp/a1c7d42d-90d9-41d0-b2c4-aeea54ebd1e5_buggy.java
+++ b/tmp/98fe143c-1a76-410d-a6e3-a491ebc0495a_fixed.java
@@ -1,29 +1,32 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
             (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
         )
             indent(accum, depth, out);
     }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+    // Trim leading whitespace for non-block or inline elements
+    boolean isInlineOrTextNode = !(parent instanceof Element && parent.tag().isBlock());
+
+    Entities.escape(accum, coreValue(), out, false, normaliseWhite && isInlineOrTextNode, trimLeading, trimTrailing);
 }
\ No newline at end of file
