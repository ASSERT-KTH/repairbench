diff --git a/tmp/40826e54-edcc-4f74-9a5f-9f0a5bee678a_buggy.java b/tmp/3d67ba73-2325-46fa-ae31-b1334aab7615_fixed.java
index 23f078d..c4b0daa 100644
--- a/tmp/40826e54-edcc-4f74-9a5f-9f0a5bee678a_buggy.java
+++ b/tmp/3d67ba73-2325-46fa-ae31-b1334aab7615_fixed.java
@@ -1,14 +1,18 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            // use codePoint to encode non-BMP characters correctly
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), "UTF-8");
+            sb.append(encoded.replace("+", "%20")); // replace '+' with %20 in encoded non-ASCII sequence
+            if (Character.isSupplementaryCodePoint(c)) {
+                i++; // skip the next code unit since it's part of the surrogate pair
+            }
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
