diff --git a/tmp/88e88749-4f51-42d3-b48b-c56429c607e0_buggy.java b/tmp/13ecde6f-dc5c-4b25-9010-9600083aeb22_fixed.java
index 23f078d..7350a6f 100644
--- a/tmp/88e88749-4f51-42d3-b48b-c56429c607e0_buggy.java
+++ b/tmp/13ecde6f-dc5c-4b25-9010-9600083aeb22_fixed.java
@@ -1,14 +1,17 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // Existing code treats supplementary characters incorrectly if they result in a surrogate pair
+            // We explicitly move the index to the next code point to avoid incorrect interpretation
+            i += Character.charCount(c) - 1;
+            sb.append(encoded);
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
