diff --git a/tmp/cbfd05bd-3b18-4452-b38b-e37a0e0a47b5_buggy.java b/tmp/183ac78d-e54d-4aaf-b50b-0a7d4e012a40_fixed.java
index 3da904d..ed1f916 100644
--- a/tmp/cbfd05bd-3b18-4452-b38b-e37a0e0a47b5_buggy.java
+++ b/tmp/183ac78d-e54d-4aaf-b50b-0a7d4e012a40_fixed.java
@@ -1,73 +1,76 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
+    // Ensure we have at least one value before trying to access
+    if (values.length > 0 && !values[index].isEmpty()) {
         int cellCount = Integer.parseInt(values[index++]);
-        if (cellCount > 0) {
+        if (cellCount > 0 && values.length > index + 2) { // Check if there are enough entries
             index += 1; // timing advance
             int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
             int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
 
-            for (int i = 0; i < cellCount; i++) {
+            for (int i = 0; i < cellCount && index + 2 < values.length; i++) { // Avoid out of bounds
                 int lac = Integer.parseInt(values[index++]);
                 int cid = Integer.parseInt(values[index++]);
                 String rssi = values[index++];
                 if (!rssi.isEmpty()) {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
                 } else {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                 }
             }
         }
+    }
 
     if (index < values.length && !values[index].isEmpty()) {
         int wifiCount = Integer.parseInt(values[index++]);
 
-            for (int i = 0; i < wifiCount; i++) {
+        for (int i = 0; i < wifiCount && index + 2 < values.length; i++) { // Check bounds
             index += 1; // wifi name
             String macAddress = values[index++];
             String rssi = values[index++];
             if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
                 network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
             }
         }
     }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    if (!network.getCellTowers().isEmpty() || !network.getWifiAccessPoints().isEmpty()) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
