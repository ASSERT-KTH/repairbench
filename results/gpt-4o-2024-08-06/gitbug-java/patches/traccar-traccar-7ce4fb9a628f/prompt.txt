You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {

        Parser parser = new Parser(PATTERN_POSITION, content);
        if (!parser.matches()) {
            return null;
        }

        Position position = new Position(getProtocolName());
        position.setDeviceId(deviceSession.getDeviceId());

        int event = parser.nextInt();
        String eventData = parser.next();
        position.set(Position.KEY_EVENT, event);
        if (event == 53) {
            position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);
        } else {
            position.set(Position.KEY_ALARM, decodeAlarm(event));
        }

        position.setTime(parser.nextDateTime());
        position.setValid(parser.next().equals("A"));
        position.setLatitude(parser.nextDouble());
        position.setLongitude(parser.nextDouble());

        position.set(Position.KEY_SATELLITES, parser.nextInt());
        position.set(Position.KEY_HDOP, parser.nextDouble());

        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
        position.setCourse(parser.nextInt());
        position.setAltitude(parser.nextInt());

        position.set(Position.KEY_ODOMETER, parser.nextInt());

        position.setNetwork(new Network(CellTower.from(
                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), parser.nextInt())));

        position.set(Position.KEY_STATUS, parser.nextHexInt());

        int input = parser.nextHexInt();
        int output = parser.nextHexInt();
        position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));
        position.set(Position.KEY_DOOR, BitUtil.check(input, 2));
        position.set(Position.KEY_INPUT, input);
        position.set(Position.KEY_OUTPUT, output);

        position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);
        position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);

        if (parser.hasNext()) {
            String[] adc = parser.next().split("\\|");
            for (int i = 1; i < adc.length; i++) {
                position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);
            }
        }

        if (parser.hasNext()) {
            String[] fuels = parser.next().split("\\|");
            for (String fuel : fuels) {
                int index = Integer.parseInt(fuel.substring(0, 2));
                int value = Integer.parseInt(fuel.substring(2), 16);
                position.set("fuel" + index, value * 0.1);
            }
        }

        if (parser.hasNext()) {
            String[] temperatures = parser.next().split("\\|");
            for (String temperature : temperatures) {
                int index = Integer.parseInt(temperature.substring(0, 2));
                int value = Integer.parseInt(temperature.substring(2), 16);
                double convertedValue = BitUtil.to(value, 15);
                if (BitUtil.check(value, 15)) {
                    convertedValue = -convertedValue;
                }
                position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);
            }
        }

        if (parser.hasNextAny(9)) {
            position.set(Position.KEY_RPM, parser.nextInt());
            position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());
            position.set("airFlow", parser.nextInt());
            position.set("airPressure", parser.nextInt());
            if (parser.hasNext()) {
                position.set("airTemp", parser.nextInt() - 40);
            }
            position.set(Position.KEY_THROTTLE, parser.nextInt());
            if (parser.hasNext()) {
                position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);
            }
            if (parser.hasNext()) {
                position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);
            }
            position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());
        }

        if (parser.hasNext()) {
            position.set(Position.KEY_HOURS, parser.nextInt() * 1000L);
        }

        return position;
    }

```

The code fails the following test:
```java
    @Test
    public void testDecode() throws Exception {

        var decoder = inject(new StartekProtocolDecoder(null));

        verifyPosition(decoder, text(
                "&&l141,863911061945394,000,0,,230918072531,A,22.678598,114.045970,26,0.6,0,0,74,2286304571,460|0|249F|00001093,20,001C,00,00,04A7|019C|0000|0000,1,C0"));

        verifyAttribute(decoder, text(
                "&&s148,868703050178631,000,37,,230704040211,A,22.678565,114.046011,31,0.5,0,339,77,8,460|0|249F|0AC2620D,27,0000001D,02,00,04F2|01A1|0000|0000,129,,,,949037"),
                Position.KEY_HOURS, 9490000L);

        verifyAttribute(decoder, text(
                "&&x164,869926040743375,000,0,,220705205955,A,33.326001,44.445318,10,1.2,0,57,8,925,418|40|038C|000083CD,31,00000015,00,00,0016|016A|0000|0000,1,,,686|33||44|99|14|124|11|8D"),
                Position.KEY_FUEL_CONSUMPTION, 1.1);

        verifyAttribute(decoder, text(
                "&&R187,860294046453690,000,0,,220105160656,A,22.994986,72.499711,15,0.9,2,222,55,121135784,404|98|147B|0000376A,24,0000001F,02,00,052E|01A3|0000|0000,1,010000|020000,,853|6|10|105|73|41|125|34|52"),
                Position.KEY_FUEL_LEVEL, null);

        verifyPosition(decoder, text(
                "&&o142,860262050066062,000,27,,211111070826,V,28.653435,-106.077455,0,0.0,0,151,1412,918,0|0|4708|01402D19,6,0000001A,02,00,04C0|016C|0000|0000,1,,,BB"));

        verifyPosition(decoder, text(
                "&&W149,865429043319537,000,0,,211103013512,A,22.679003,114.045085,16,1.1,0,271,76,109075,460|0|249F|000010C5,19,0000003E,00,00,0A57|0168|0000|0000,1,0100000C"));

        verifyAttribute(decoder, text(
                "&&:23,860262050015424,129,OKA2"),
                Position.KEY_RESULT, "129,OK");

        verifyPosition(decoder, text(
                "&&X152,861157040151686,000,18,,210907163833,A,10.232715,-67.880423,11,1.4,0,275,437,34804,734|2|3EE4|00579406,28,00000015,00,00,0000|017D|0000|0000,1,010000,,9A"));

        verifyPosition(decoder, text(
                "&&o125,861157040554384,000,0,,210702235150,A,27.263505,153.037061,11,1.2,0,0,31,5125,505|1|7032|8C89802,20,0000002D,00,00,01E2|019DF0"));

        verifyAttribute(decoder, text(
                "&&a152,860262050010565,000,53,8F5300,210528015706,A,-38.229746,145.043446,6,1.5,0,285,84,2102994,505|1|306E|082D6101,31,0000003D,02,02,04C0|01A0|0000|0000,1,,DC"),
                Position.KEY_DRIVER_UNIQUE_ID, "8F5300");

        verifyPosition(decoder, text(
                "&&>141,860262050010565,000,36,,210407094323,V,-38.229711,145.043161,0,0.0,0,0,0,14222,505|1|306E|082D6115,24,00000039,00,00,04C0|0164|0000|0000,1,,41"));

        verifyPosition(decoder, text(
                "&&A147,021104023195429,000,0,,180106093046,A,22.646430,114.065730,8,0.9,54,86,76,326781,460|0|27B3|0EA7,27,0000000F,02,01,04E2|018C|01C8|0000,1,0104B0,01013D|02813546"));

        verifyPosition(decoder, text(
                "&&y139,860262050009146,000,0,,210323131512,A,22.678655,114.046223,14,1.1,0,231,71,5,460|0|249F|0099C257,28,0000003D,00,00,0493|0199|0000|0000,1,,33"));

    }

```

With the following test error:
```
java.lang.NumberFormatException: For input string: "2286304571"
```

Please provide a fixed version of the buggy function, and only that function:
