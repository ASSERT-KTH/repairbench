You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    @Override
    protected Object decode(
            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {

        ByteBuf buf = (ByteBuf) msg;

        buf.readUnsignedByte(); // protocol revision
        buf.readUnsignedShort(); // length
        buf.readUnsignedByte(); // header indicator
        buf.readUnsignedShort(); // header length
        buf.readUnsignedInt(); // reference

        String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();
        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
        if (deviceSession == null) {
            return null;
        }

        buf.readUnsignedByte(); // session status
        buf.readUnsignedShort(); // originator index
        buf.readUnsignedShort(); // transfer index
        buf.readUnsignedInt(); // session time
        buf.readUnsignedByte(); // payload indicator
        buf.readUnsignedShort(); // payload length

        Position position = new Position(getProtocolName());
        position.setDeviceId(deviceSession.getDeviceId());

        List<Integer> parameters = getParameters(deviceSession.getDeviceId());

        for (int parameter : parameters) {
            switch (parameter) {
                case 0x01:
                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                    break;
                case 0x02:
                    position.setLatitude(buf.readIntLE() / 1000000.0);
                    break;
                case 0x03:
                    position.setLongitude(buf.readIntLE() / 1000000.0);
                    break;
                case 0x04:
                    position.setTime(new Date((buf.readUnsignedIntLE() + 946713600) * 1000));
                    break;
                case 0x05:
                    position.setValid(buf.readUnsignedByte() > 0);
                    break;
                case 0x06:
                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                    break;
                case 0x07:
                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                    break;
                case 0x08:
                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                    break;
                case 0x09:
                    position.setCourse(buf.readUnsignedShortLE());
                    break;
                case 0x0A:
                    position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);
                    break;
                case 0x0B:
                    position.setAltitude(buf.readShortLE());
                    break;
                case 0x0C:
                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                    break;
                case 0x0D:
                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000);
                    break;
                case 0x14:
                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                    break;
                case 0x15:
                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                    break;
                case 0x19:
                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                    break;
                case 0x1A:
                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                    break;
                case 0x1B:
                    buf.readUnsignedByte(); // geofence
                    break;
                default:
                    break;
            }
        }

        return position;
    }

```

The code fails the following test:
```java
    @Test
    public void testDecode() throws Exception {

        var decoder = inject(new T622IridiumProtocolDecoder(null));

        decoder.setFormat("01,02,03,04,05,08");

        verifyPosition(decoder, binary(
                "01003501001c68b2cb1733303034333430363735343836353000016e000064b5f497020013234c5ea0ff1c365d0600b1482c010000cf0004"),
                position("2023-07-18 02:10:08.000", true, -6.26732, 106.77200));

    }

```

With the following test error:
```
org.opentest4j.AssertionFailedError: time ==> expected: <2023-07-18 02:10:08.000> but was: <2023-07-18 10:10:08.000>
```

Please provide a fixed version of the buggy function, and only that function:
