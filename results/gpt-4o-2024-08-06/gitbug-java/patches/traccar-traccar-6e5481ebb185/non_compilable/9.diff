diff --git a/tmp/74c689e0-cecd-44e4-a247-e38b732979ee_buggy.java b/tmp/1adcc5be-a4d9-42e6-b77e-9cecaaf53cc3_fixed.java
index ee599aa..f55fe50 100644
--- a/tmp/74c689e0-cecd-44e4-a247-e38b732979ee_buggy.java
+++ b/tmp/1adcc5be-a4d9-42e6-b77e-9cecaaf53cc3_fixed.java
@@ -1,50 +1,55 @@
 private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
     int length = 0;
     if (hasLength) {
         length = buf.readUnsignedByte();
         if (length == 0) {
             boolean zeroedData = true;
-                for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
+            // Ensure readerIndex is stored and used consistently
+            int startIndex = buf.readerIndex();
+            for (int i = startIndex + 9; i < startIndex + 45 && i < buf.writerIndex(); i++) {
                 if (buf.getByte(i) != 0) {
                     zeroedData = false;
                     break;
                 }
             }
             if (zeroedData) {
                 buf.skipBytes(Math.min(buf.readableBytes(), 45));
-                }
                 return false;
             }
         }
+    }
 
+    // Remaining data processing
     int mcc = buf.readUnsignedShort();
     int mnc;
     if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
         mnc = buf.readUnsignedShort();
     } else {
         mnc = buf.readUnsignedByte();
     }
     int lac;
     if (type == MSG_LBS_ALARM) {
         lac = buf.readInt();
     } else {
         lac = buf.readUnsignedShort();
     }
     long cid;
     if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
         cid = buf.readLong();
     } else if (type == MSG_GPS_LBS_6) {
         cid = buf.readUnsignedInt();
     } else {
         cid = buf.readUnsignedMedium();
     }
 
     position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
 
-        if (length > 9) {
-            buf.skipBytes(length - 9);
+    // Adjust the number of bytes we skip based on fixed parts of the LBS structure
+    int skipBytes = length - (hasLength ? 9 : 0);
+    if (skipBytes > 0) {
+        buf.skipBytes(skipBytes);
     }
 
     return true;
 }
\ No newline at end of file
