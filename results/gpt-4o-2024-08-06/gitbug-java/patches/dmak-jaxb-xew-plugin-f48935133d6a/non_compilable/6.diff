diff --git a/tmp/bf5f0733-1965-4145-82b1-750b835e5632_buggy.java b/tmp/3d3e67a2-d53a-42a6-82d2-3812a50e28ab_fixed.java
index 47a8941..76c7c18 100644
--- a/tmp/bf5f0733-1965-4145-82b1-750b835e5632_buggy.java
+++ b/tmp/3d3e67a2-d53a-42a6-82d2-3812a50e28ab_fixed.java
@@ -1,53 +1,56 @@
 	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+	 * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+		// Allows tracking class name collisions:
 		Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
+		// Check if grandParent is a class.
 		if (grandParent.isClass()) {
 			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
 			classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+		} else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
 			classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+			// Reset the "static" modifier on the class for package-level placement.
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
-					XSComponent sc = classOutline.target.getSchemaComponent();
+					XSComponent schemaComponent = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
-					setPrivateField(sc, "anonymous", Boolean.FALSE);
+					// Ensure the schema component is not marked as anonymous.
+					// Original code had an incorrect assumption; this fixes it by making sure 'sc' is a declaration.
+					if (schemaComponent instanceof XSDeclaration) {
+						setPrivateField(schemaComponent, "anonymous", Boolean.FALSE);
+					}
 
 					break;
 				}
 			}
 		}
 
+		// Handle potential class name collisions by renaming if necessary.
 		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+			String newName = parent.name() + clazz.name();
+			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+			setPrivateField(clazz, "name", newName);
 		}
 
+		// Add the class to the grandparent's container.
 		classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+		// Finally modify the class so that it refers back to the correct container:
 		setPrivateField(clazz, "outer", grandParent);
 	}
\ No newline at end of file
