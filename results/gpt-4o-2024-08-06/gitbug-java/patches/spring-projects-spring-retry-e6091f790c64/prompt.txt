You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
	/**
	 * Builds the {@link BackOffPolicy} with the given parameters.
	 * @return the {@link BackOffPolicy} instance
	 */
	public BackOffPolicy build() {
		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
			ExponentialBackOffPolicy policy;
			if (Boolean.TRUE.equals(this.random)) {
				policy = new ExponentialRandomBackOffPolicy();
			}
			else {
				policy = new ExponentialBackOffPolicy();
			}
			if (this.delay != null) {
				policy.setInitialInterval(this.delay);
			}
			if (this.delaySupplier != null) {
				policy.initialIntervalSupplier(this.delaySupplier);
			}
			if (this.multiplier != null) {
				policy.setMultiplier(this.multiplier);
			}
			if (this.multiplierSupplier != null) {
				policy.multiplierSupplier(this.multiplierSupplier);
			}
			if (this.maxDelay != null && this.delay != null) {
				policy.setMaxInterval(
						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
			}
			if (this.maxDelaySupplier != null) {
				policy.maxIntervalSupplier(this.maxDelaySupplier);
			}
			if (this.sleeper != null) {
				policy.setSleeper(this.sleeper);
			}
			return policy;
		}
		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
			if (this.delay != null) {
				policy.setMinBackOffPeriod(this.delay);
			}
			if (this.delaySupplier != null) {
				policy.minBackOffPeriodSupplier(this.delaySupplier);
			}
			if (this.maxDelay != null) {
				policy.setMaxBackOffPeriod(this.maxDelay);
			}
			if (this.maxDelaySupplier != null) {
				policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
			}
			if (this.sleeper != null) {
				policy.setSleeper(this.sleeper);
			}
			return policy;
		}
		FixedBackOffPolicy policy = new FixedBackOffPolicy();
		if (this.delay != null) {
			policy.setBackOffPeriod(this.delay);
		}
		if (this.sleeper != null) {
			policy.setSleeper(this.sleeper);
		}
		return policy;
	}

```

The code fails the following test:
```java
	@Test
	public void testExpression() throws Exception {
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(TestConfiguration.class);
		ExpressionService service = context.getBean(ExpressionService.class);
		service.service1();
		assertThat(service.getCount()).isEqualTo(3);
		assertThatExceptionOfType(Exception.class).isThrownBy(() -> service.service2());
		assertThat(service.getCount()).isEqualTo(4);
		service.service3();
		assertThat(service.getCount()).isEqualTo(9);
		RetryConfiguration config = context.getBean(RetryConfiguration.class);
		AnnotationAwareRetryOperationsInterceptor advice = (AnnotationAwareRetryOperationsInterceptor) new DirectFieldAccessor(
				config).getPropertyValue("advice");
		@SuppressWarnings("unchecked")
		Map<Object, Map<Method, MethodInterceptor>> delegates = (Map<Object, Map<Method, MethodInterceptor>>) new DirectFieldAccessor(
				advice).getPropertyValue("delegates");
		MethodInterceptor interceptor = delegates.get(target(service))
				.get(ExpressionService.class.getDeclaredMethod("service3"));
		RetryTemplate template = (RetryTemplate) new DirectFieldAccessor(interceptor)
				.getPropertyValue("retryOperations");
		DirectFieldAccessor templateAccessor = new DirectFieldAccessor(template);
		ExponentialBackOffPolicy backOff = (ExponentialBackOffPolicy) templateAccessor
				.getPropertyValue("backOffPolicy");
		assertThat(backOff.getInitialInterval()).isEqualTo(1);
		assertThat(backOff.getMaxInterval()).isEqualTo(5);
		assertThat(backOff.getMultiplier()).isEqualTo(1.1);
		SimpleRetryPolicy retryPolicy = (SimpleRetryPolicy) templateAccessor.getPropertyValue("retryPolicy");
		assertThat(retryPolicy.getMaxAttempts()).isEqualTo(5);
		service.service4();
		assertThat(service.getCount()).isEqualTo(11);
		interceptor = delegates.get(target(service)).get(ExpressionService.class.getDeclaredMethod("service4"));
		template = (RetryTemplate) new DirectFieldAccessor(interceptor).getPropertyValue("retryOperations");
		templateAccessor = new DirectFieldAccessor(template);
		FixedBackOffPolicy fbp = (FixedBackOffPolicy) templateAccessor.getPropertyValue("backOffPolicy");
		assertThat(fbp.getBackOffPeriod()).isEqualTo(5000L);
		service.service5();
		assertThat(service.getCount()).isEqualTo(12);
		context.close();
	}

```

With the following test error:
```

```

Please provide a fixed version of the buggy function, and only that function:
