diff --git a/tmp/9d30e75f-41f4-42a6-9685-338f9c77f208_buggy.java b/tmp/0a6271f7-3c3d-4ddb-a39c-da6f4bc0e81d_fixed.java
index 6d50be3..8f1b980 100644
--- a/tmp/9d30e75f-41f4-42a6-9685-338f9c77f208_buggy.java
+++ b/tmp/0a6271f7-3c3d-4ddb-a39c-da6f4bc0e81d_fixed.java
@@ -1,194 +1,221 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
+    int initialReaderIndex = buf.readerIndex();
+
+    // Ensure the initial part can be read safely
+    int minHeaderLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1 + 15 + (1 + 3 + 1);
+    if (buf.readableBytes() < minHeaderLength) {
+        return null; // Or handle the error appropriately
+    }
 
     buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1 + 3 + 1);
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
+    if (buf.readableBytes() < 6) {
+        return null; // Need at least for readUnsignedIntLE + readUnsignedShortLE
+    }
+
     buf.readUnsignedIntLE(); // remaining cache
     int count = buf.readUnsignedShortLE();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
+        // Ensure enough bytes for reading header
+        if (buf.readableBytes() < 4) {
+            break; // Exit if we can't read further
+        }
+
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // index
 
         int paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (!isBufferReadable(buf, 1)) break; // Ensure at least one byte is available
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+
+            // Ensure there is at least one byte after reading id
+            if (!isBufferReadable(buf, 1)) break;
+
             switch (id) {
                 case 0x01:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());
-                        break;
                 case 0x05:
-                        position.setValid(buf.readUnsignedByte() > 0);
-                        break;
                 case 0x06:
-                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-                        break;
                 case 0x07:
-                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                        break;
                 case 0x14:
-                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
-                        break;
                 case 0x15:
-                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());
-                        break;
                 case 0x47:
-                        int lockState = buf.readUnsignedByte();
-                        if (lockState > 0) {
-                            position.set(Position.KEY_LOCK, lockState == 2);
-                        }
-                        break;
                 case 0x97:
-                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
-                        break;
                 case 0x9D:
-                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
-                        break;
                 case 0xFE69:
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    // Ensure we can read an unsigned byte
+                    if (!isBufferReadable(buf, 1)) break;
+                    position.set(getPositionKeyById(id), buf.readUnsignedByte());
                     break;
                 default:
                     buf.readUnsignedByte();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (!isBufferReadable(buf, 1)) break;
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+
+            // Ensure there is at least two bytes after reading id
+            if (!isBufferReadable(buf, 2)) break;
+
             switch (id) {
                 case 0x08:
-                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
-                        break;
                 case 0x09:
-                        position.setCourse(buf.readUnsignedShortLE());
-                        break;
                 case 0x0A:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
-                        break;
                 case 0x0B:
-                        position.setAltitude(buf.readShortLE());
-                        break;
                 case 0x16:
-                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
-                        break;
                 case 0x19:
-                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
-                        break;
                 case 0x1A:
-                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
-                        break;
                 case 0x40:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
-                        break;
                 case 0x91:
                 case 0x92:
-                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
-                        break;
                 case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
-                        break;
                 case 0x99:
-                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
-                        break;
                 case 0x9C:
-                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
-                        break;
                 case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
-                        break;
                 case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
+                    if (!isBufferReadable(buf, 2)) break;
+                    position.set(getPositionKeyById(id), buf.readUnsignedShortLE());
                     break;
                 default:
                     buf.readUnsignedShortLE();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (!isBufferReadable(buf, 1)) break;
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+
+            // Ensure there are at least four bytes after reading id
+            if (!isBufferReadable(buf, 4)) break;
+
             switch (id) {
                 case 0x02:
-                        position.setLatitude(buf.readIntLE() * 0.000001);
-                        break;
                 case 0x03:
-                        position.setLongitude(buf.readIntLE() * 0.000001);
-                        break;
                 case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
-                        break;
                 case 0x0C:
                 case 0x9B:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                        break;
                 case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
-                        break;
                 case 0x25:
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
-                        break;
                 case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
-                        break;
                 case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
+                    if (!isBufferReadable(buf, 4)) break;
+                    position.set(getPositionKeyById(id), buf.readUnsignedIntLE());
                     break;
                 default:
                     buf.readUnsignedIntLE();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (!isBufferReadable(buf, 1)) break;
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+
+            if (!isBufferReadable(buf, 1)) break;
             int length = buf.readUnsignedByte();
+
+            // Ensure the length is readable
+            if (!isBufferReadable(buf, length)) break;
+
             switch (id) {
                 case 0x2A:
                 case 0x2B:
                 case 0x2C:
                 case 0x2D:
                 case 0x2E:
                 case 0x2F:
                 case 0x30:
                 case 0x31:
                     buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                    position.set(getPositionKeyById(id), buf.readShortLE() * 0.01);
                     break;
                 case 0xFE31:
                     buf.readUnsignedByte(); // alarm protocol
                     buf.readUnsignedByte(); // alarm type
                     buf.skipBytes(length - 2);
                     break;
                 case 0xFEA8:
                     buf.readUnsignedByte(); // battery status
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     buf.readUnsignedByte(); // battery alert
                     break;
                 default:
                     buf.skipBytes(length);
                     break;
             }
         }
 
         positions.add(position);
     }
 
     return positions;
 }
+
+// A utility function to check readable bytes
+private boolean isBufferReadable(ByteBuf buf, int length) {
+    return buf.readableBytes() >= length;
+}
+
+// A utility function to get the position key by ID
+private String getPositionKeyById(int id) {
+    switch (id) {
+        case 0x01: return Position.KEY_EVENT;
+        case 0x05: return Position.KEY_VALID;
+        case 0x06: return Position.KEY_SATELLITES;
+        case 0x07: return Position.KEY_RSSI;
+        case 0x14: return Position.KEY_OUTPUT;
+        case 0x15: return Position.KEY_INPUT;
+        case 0x47: return Position.KEY_LOCK;
+        case 0x97: return Position.KEY_THROTTLE;
+        case 0x9D: return Position.KEY_FUEL_LEVEL;
+        case 0xFE69: return Position.KEY_BATTERY_LEVEL;
+        case 0x08: return Position.KEY_SPEED;
+        case 0x09: return Position.KEY_COURSE;
+        case 0x0A: return Position.KEY_HDOP;
+        case 0x0B: return Position.KEY_ALTITUDE;
+        case 0x16: return Position.PREFIX_ADC + 1;
+        case 0x19: return Position.KEY_BATTERY;
+        case 0x1A: return Position.KEY_POWER;
+        case 0x40: return Position.KEY_EVENT;
+        case 0x91:
+        case 0x92: return Position.KEY_OBD_SPEED;
+        case 0x98: return Position.KEY_FUEL_USED;
+        case 0x99: return Position.KEY_RPM;
+        case 0x9C: return Position.KEY_COOLANT_TEMP;
+        case 0x9F: return Position.PREFIX_TEMP + 1;
+        case 0xC9: return Position.KEY_FUEL_CONSUMPTION;
+        case 0x02: return Position.KEY_LATITUDE;
+        case 0x03: return Position.KEY_LONGITUDE;
+        case 0x04: return Position.KEY_TIME;
+        case 0x0C:
+        case 0x9B: return Position.KEY_ODOMETER;
+        case 0x0D: return "runtime";
+        case 0x25: return Position.KEY_DRIVER_UNIQUE_ID;
+        case 0xA0: return Position.KEY_FUEL_USED;
+        case 0xA2: return Position.KEY_FUEL_CONSUMPTION;
+        default: return "unknown";
+    }
+}
\ No newline at end of file
