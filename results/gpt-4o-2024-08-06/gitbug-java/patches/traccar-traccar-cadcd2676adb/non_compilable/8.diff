diff --git a/tmp/1c522ade-e2b3-425d-9aae-9684271c4175_buggy.java b/tmp/4e296365-a60b-4ee4-b8ef-28e840e8e63b_fixed.java
index 9e4d15c..f427fc3 100644
--- a/tmp/1c522ade-e2b3-425d-9aae-9684271c4175_buggy.java
+++ b/tmp/4e296365-a60b-4ee4-b8ef-28e840e8e63b_fixed.java
@@ -1,137 +1,168 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
     buf.skipBytes(2); // header
     int type = buf.readUnsignedByte();
     buf.readUnsignedShort(); // size
 
     if (type == MSG_LOGIN || type == MSG_ADMIN_NUMBER || type == MSG_SEND_TEXT
             || type == MSG_SMS_ALARM_SWITCH || type == MSG_POSITION_REUPLOAD) {
 
         ByteBuf response = Unpooled.buffer();
         response.writeByte(0x29);
         response.writeByte(0x29); // header
         response.writeByte(MSG_CONFIRMATION);
         response.writeShort(5); // size
         response.writeByte(buf.getByte(buf.writerIndex() - 2));
         response.writeByte(type);
         response.writeByte(buf.writerIndex() > 9 ? buf.getByte(9) : 0); // 10th byte
         response.writeByte(Checksum.xor(response.nioBuffer()));
         response.writeByte(0x0D); // ending
 
         if (channel != null) {
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }
 
     }
 
     if (type == MSG_ON_DEMAND || type == MSG_POSITION_UPLOAD || type == MSG_POSITION_REUPLOAD
             || type == MSG_ALARM || type == MSG_REPLY || type == MSG_PERIPHERAL) {
 
         Position position = new Position(getProtocolName());
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, readIdentifiers(buf));
         if (deviceSession == null) {
             return null;
         }
         position.setDeviceId(deviceSession.getDeviceId());
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(BcdUtil.readInteger(buf, 2))
                 .setMonth(BcdUtil.readInteger(buf, 2))
                 .setDay(BcdUtil.readInteger(buf, 2))
                 .setHour(BcdUtil.readInteger(buf, 2))
                 .setMinute(BcdUtil.readInteger(buf, 2))
                 .setSecond(BcdUtil.readInteger(buf, 2));
         position.setTime(dateBuilder.getDate());
 
         position.setLatitude(BcdUtil.readCoordinate(buf));
         position.setLongitude(BcdUtil.readCoordinate(buf));
         position.setSpeed(UnitsConverter.knotsFromKph(BcdUtil.readInteger(buf, 4)));
         position.setCourse(BcdUtil.readInteger(buf, 4));
         position.setValid((buf.readUnsignedByte() & 0x80) != 0);
 
         if (type != MSG_ALARM) {
 
             int odometer = buf.readUnsignedMedium();
             if (BitUtil.to(odometer, 16) > 0) {
                 position.set(Position.KEY_ODOMETER, odometer);
             } else if (odometer > 0) {
                 position.set(Position.KEY_FUEL_LEVEL, BitUtil.from(odometer, 16));
             }
 
+            if (buf.isReadable()) {
                 position.set(Position.KEY_STATUS, buf.readUnsignedInt());
+            }
 
+            if (buf.isReadable()) {
                 buf.readUnsignedShort();
+            }
+            if (buf.isReadable()) {
                 buf.readUnsignedByte();
+            }
+            if (buf.isReadable()) {
                 buf.readUnsignedByte();
+            }
+            if (buf.isReadable()) {
                 buf.readUnsignedByte();
+            }
+            if (buf.isReadable()) {
                 buf.readUnsignedByte();
-                buf.readUnsignedByte();
-
+            }
+            if (buf.isReadable()) {
                 position.set(Position.KEY_RESULT, String.valueOf(buf.readUnsignedByte()));
+            }
 
             if (type == MSG_PERIPHERAL) {
-
+                if (buf.isReadable()) {
                     buf.readUnsignedShort(); // data length
+                }
 
+                if (buf.isReadable()) {
                     int dataType = buf.readUnsignedByte();
 
+                    if (buf.isReadable()) {
                         buf.readUnsignedByte(); // content length
+                    }
 
                     switch (dataType) {
                         case 0x01:
+                            if (buf.isReadable(2)) {
                                 position.set(Position.KEY_FUEL_LEVEL,
                                         buf.readUnsignedByte() * 100 + buf.readUnsignedByte());
+                            }
                             break;
                         case 0x02:
+                            if (buf.isReadable(2)) {
                                 position.set(Position.PREFIX_TEMP + 1,
                                         buf.readUnsignedByte() * 100 + buf.readUnsignedByte());
+                            }
                             break;
                         case 0x18:
                             for (int i = 1; i <= 4; i++) {
+                                if (buf.isReadable(2)) {
                                     double value = buf.readUnsignedShort();
                                     if (value > 0x0000 && value < 0xFFFF) {
                                         position.set("fuel" + i, value / 0xFFFE);
                                     }
                                 }
+                            }
                             break;
                         case 0x23:
+                            if (buf.isReadable()) {
                                 Network network = new Network();
                                 int count = buf.readUnsignedByte();
                                 for (int i = 0; i < count; i++) {
+                                    if (buf.isReadable(8)) {
                                         network.addCellTower(CellTower.from(
                                                 buf.readUnsignedShort(), buf.readUnsignedByte(),
                                                 buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));
                                     }
+                                }
                                 if (count > 0) {
                                     position.setNetwork(network);
                                 }
+                            }
                             break;
                         default:
                             break;
                     }
-
+                }
             }
 
         }  else {
 
+            if (buf.isReadable()) {
                 buf.readUnsignedByte(); // overloaded state
+            }
+            if (buf.isReadable()) {
                 buf.readUnsignedByte(); // logging status
+            }
 
+            if (buf.isReadable(8)) {
                 byte[] alarmStatus = new byte[8];
                 buf.readBytes(alarmStatus);
 
                 decodeAlarmStatus(position, alarmStatus);
-
+            }
         }
 
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
