diff --git a/tmp/2225be94-e38a-4d53-8f42-763f0d253a25_buggy.java b/tmp/2c188ea7-51fe-479f-978c-fb50d2a427b5_fixed.java
index 7b8ee38..55db135 100644
--- a/tmp/2225be94-e38a-4d53-8f42-763f0d253a25_buggy.java
+++ b/tmp/2c188ea7-51fe-479f-978c-fb50d2a427b5_fixed.java
@@ -1,179 +1,229 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
+    if (buf.readableBytes() < 5) {
+        return null; // Early exit if buffer does not have enough data
+    }
+
     buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+
+    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1); // '*' delimiter
 
     int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (idIndex < 0) {
+        return null; // Exit if '*' is not found
+    }
     String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
-            return null;
+        return null; // Return null if deviceSession can't be retrieved
     }
 
     buf.skipBytes(1); // '*' delimiter
 
     String index = null;
     int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (contentIndex < 0) {
+        return null; // Exit if '*' is not found
+    }
+
+    boolean hasIndex = false;
     if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
             && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+        int indexLength = contentIndex - buf.readerIndex();
         hasIndex = true;
         index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1); // '*' delimiter
     }
 
+    if (buf.readableBytes() < 5) { 
+        return null; // Ensure there are enough bytes to skip
+    }
+
     buf.skipBytes(4); // length
     buf.skipBytes(1); // '*' delimiter
 
+    if (buf.writerIndex() <= buf.readerIndex()) {
+        return null; // Ensure there is something to process
+    }
+
     buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
 
     contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
     if (contentIndex < 0) {
         contentIndex = buf.writerIndex();
     }
 
     String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
     if (contentIndex < buf.writerIndex()) {
         buf.readerIndex(contentIndex + 1);
     }
 
     if (type.equals("INIT")) {
 
         sendResponse(channel, id, index, "INIT,1");
 
     } else if (type.equals("LK")) {
 
         sendResponse(channel, id, index, "LK");
 
         if (buf.isReadable()) {
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             if (values.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 getLastLocation(position, null);
 
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                 position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
 
                 return position;
             }
         }
 
     } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
 
         Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
         if (type.startsWith("AL")) {
             if (position != null) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
+                position.set(Position.KEY_ALARM, getAlarmType(type));
             }
             sendResponse(channel, id, index, "AL");
         }
 
         return position;
 
     } else if (type.equals("TKQ") || type.equals("TKQ2")) {
 
         sendResponse(channel, id, index, type);
 
     } else if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
             || type.equalsIgnoreCase("btemp2")) {
 
         if (buf.isReadable()) {
             
+            Position position = createHealthPosition(deviceSession, type, buf);
+            if (position != null) {
+                return position;
+            }
+            
+        }
+
+    } else if (type.equals("img")) {
+
+        Position position = new Position(getProtocolName());
+        position.setDeviceId(deviceSession.getDeviceId());
+
+        getLastLocation(position, null);
+
+        int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        if (timeIndex < 0 || timeIndex + 12 + 2 > buf.writerIndex()) {
+            return null; // Ensure valid image position
+        }
+        buf.readerIndex(timeIndex + 12 + 2);
+        position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
+
+        return position;
+
+    } else if (type.equals("JXTK")) {
+
+        return handleAudioPayload(channel, id, index, buf);
+
+    } else if (type.equals("TK")) {
+
+        if (buf.readableBytes() == 1) {
+            return null;
+        }
+
+        Position position = new Position(getProtocolName());
+        position.setDeviceId(deviceSession.getDeviceId());
+
+        getLastLocation(position, null);
+
+        position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
+
+        return position;
+
+    }
+
+    return null;
+}
+
+private AlarmType getAlarmType(String type) {
+    // Provide specific alarm type mapping if needed
+    if (type.equals("AL")) {
+        return Position.ALARM_GENERAL;
+    }
+    return Position.ALARM_GENERAL;
+}
+
+private Position createHealthPosition(DeviceSession deviceSession, String type, ByteBuf buf) {
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     getLastLocation(position, new Date());
 
     String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
     int valueIndex = 0;
 
+    try {
         if (type.equalsIgnoreCase("btemp2")) {
             if (Integer.parseInt(values[valueIndex++]) > 0) {
                 position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
             }
         } else {
             if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
                 position.set("pressureHigh", values[valueIndex++]);
                 position.set("pressureLow", values[valueIndex++]);
             }
-                    if (valueIndex <= values.length - 1) {
+            if (valueIndex < values.length) {
                 position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
             }
         }
-
-                return position;
-
+    } catch (NumberFormatException e) {
+        return null; // Return null if number parsing fails
     }
 
-        } else if (type.equals("img")) {
-
-            Position position = new Position(getProtocolName());
-            position.setDeviceId(deviceSession.getDeviceId());
-
-            getLastLocation(position, null);
-
-            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
-            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
     return position;
+}
 
-        } else if (type.equals("JXTK")) {
-
+private Position handleAudioPayload(Channel channel, String id, String index, ByteBuf buf) {
+    if (BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 3) < 0) {
+        return null; // Exit if buffer does not have enough data
+    }
     int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
     String[] values = buf.readCharSequence(
             dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
 
     int current = Integer.parseInt(values[2]);
     int total = Integer.parseInt(values[3]);
 
     if (audio == null) {
         audio = Unpooled.buffer();
     }
     audio.writeBytes(buf);
 
     sendResponse(channel, id, index, "JXTKR,1");
 
     if (current < total) {
         return null;
     } else {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         getLastLocation(position, null);
         position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
         audio.release();
         audio = null;
         return position;
     }
-
-        } else if (type.equals("TK")) {
-
-            if (buf.readableBytes() == 1) {
-                return null;
-            }
-
-            Position position = new Position(getProtocolName());
-            position.setDeviceId(deviceSession.getDeviceId());
-
-            getLastLocation(position, null);
-
-            position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
-
-            return position;
-
-        }
-
-        return null;
 }
\ No newline at end of file
