You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    URL build() {
        try {
            // use the URI class to encode non-ascii in path
            URI uri = new URI(
                u.getProtocol(),
                u.getUserInfo(),
                IDN.toASCII(decodePart(u.getHost())), // puny-code
                u.getPort(),
                decodePart(u.getPath()),
                null, null // query and fragment appended later so as not to encode
            );

            String normUrl = uri.toASCIIString();
            if (q != null || u.getRef() != null) {
                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                if (q != null) {
                    sb.append('?');
                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                }
                if (u.getRef() != null) {
                    sb.append('#');
                    appendToAscii(u.getRef(), false, sb);
                }
                normUrl = StringUtil.releaseBuilder(sb);
            }
            u =  new URL(normUrl);
            return u;
        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
            // the remote end will be able to handle it, so in prod we just pass the original URL.
            // The UnsupportedEncodingException would never happen as always UTF8
            assert Validate.assertFail(e.toString());
            return u;
        }
    }

```

The code fails the following test:
```java
    @Test void encodedUrlPathIsPreserved() {
        // https://github.com/jhy/jsoup/issues/1952
        Connection connect = Jsoup.connect("https://example.com/%2B32");
        URL url = connect.request().url();
        assertEquals("https://example.com/%2B32", url.toExternalForm());
    }

```

With the following test error:
```
expected: <https://example.com/%2B32> but was: <https://example.com/+32>
```

Please provide a fixed version of the buggy function, and only that function:
