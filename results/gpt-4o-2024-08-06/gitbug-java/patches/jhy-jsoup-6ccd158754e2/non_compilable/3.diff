diff --git a/tmp/a5a3434b-525d-4847-80cc-44722d9dcc41_buggy.java b/tmp/48234356-4807-46c9-8291-dd5e1e8fdd60_fixed.java
index 23f078d..dce019b 100644
--- a/tmp/a5a3434b-525d-4847-80cc-44722d9dcc41_buggy.java
+++ b/tmp/48234356-4807-46c9-8291-dd5e1e8fdd60_fixed.java
@@ -1,14 +1,16 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            sb.append(URLEncoder.encode(new String(Character.toChars(c)), StandardCharsets.UTF_8.name()));
+            // Adjusted index increment for supplementary characters (code points).
+            if (Character.isSupplementaryCodePoint(c)) {
+                i++; // Skip the next index because a supplementary character uses two char indices.
+            }
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
