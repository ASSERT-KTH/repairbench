You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
        final boolean prettyPrint = out.prettyPrint();
        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
        boolean trimLeading = false, trimTrailing = false;

        if (normaliseWhite) {
            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
            trimTrailing = trimLikeBlock && nextSibling() == null;

            // if this text is just whitespace, and the next node will cause an indent, skip this text:
            Node next = nextSibling();
            boolean isBlank = isBlank();
            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
            if (couldSkip && isBlank) return;

            Node prev = previousSibling();
            if (
                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
            )
                indent(accum, depth, out);
        }

        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
    }

```

The code fails the following test:
```java
    @Test void spanInBlockTrims() {
        String html = "<p>Lorem ipsum</p>\n<span>Thanks</span>";
        Document doc = Jsoup.parse(html);
        String outHtml = doc.body().html();
        assertEquals("<p>Lorem ipsum</p><span>Thanks</span>", outHtml);
    }

```

With the following test error:
```
expected: <<p>Lorem ipsum</p><span>Thanks</span>> but was: <<p>Lorem ipsum</p> <span>Thanks</span>>
```

Please provide a fixed version of the buggy function, and only that function:
