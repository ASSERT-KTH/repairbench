diff --git a/tmp/b4b92a3b-981a-4acb-b7fe-d2ce78379b59_buggy.java b/tmp/d14ca8f2-bd13-4d96-8ea7-8e533d1ad209_fixed.java
index ad77f15..aba9c1c 100644
--- a/tmp/b4b92a3b-981a-4acb-b7fe-d2ce78379b59_buggy.java
+++ b/tmp/d14ca8f2-bd13-4d96-8ea7-8e533d1ad209_fixed.java
@@ -1,112 +1,174 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
+            if (values.length > 0) {
                 position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
+                if (index < values.length) {
+                    position.set(Position.KEY_SATELLITES, parseIntSafe(values, index++));
+                }
+                if (index < values.length) {
+                    position.setLatitude(parseDoubleSafe(values[index], 1));
                     if (values[index++].charAt(0) == 'S') {
                         position.setLatitude(-position.getLatitude());
                     }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
+                }
+                if (index < values.length) {
+                    position.setLongitude(parseDoubleSafe(values[index], 1));
                     if (values[index++].charAt(0) == 'W') {
                         position.setLongitude(-position.getLongitude());
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(parseIntSafe(values, index++)));
+                }
+                if (index < values.length) {
+                    position.setCourse(parseIntSafe(values, index++));
+                }
                 if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    position.setAltitude(parseIntSafe(values, index++));
                 }
                 if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    position.set(Position.KEY_HDOP, parseDoubleSafe(values, index++));
                 }
                 if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    position.set(Position.KEY_VDOP, parseDoubleSafe(values, index++));
+                }
             }
             break;
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
+            if (index + 5 <= values.length) {
                 position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                        parseIntSafe(values, index++), parseIntSafe(values, index++),
+                        parseIntSafe(values, index++, 16), parseIntSafe(values, index++, 16),
+                        parseIntSafe(values, index++))));
+            }
             break;
         case "COT":
             if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                position.set(Position.KEY_ODOMETER, parseLongSafe(values, index++));
             }
             if (index < values.length) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                position.set(Position.KEY_HOURS, (parseIntSafe(hours, 0) * 3600
+                        + (hours.length > 1 ? parseIntSafe(hours, 1) * 60 : 0)
+                        + (hours.length > 2 ? parseIntSafe(hours, 2) : 0)) * 1000);
             }
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
             if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                position.set(Position.KEY_POWER, parseDoubleSafe(values, index++));
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                position.set(Position.KEY_BATTERY, parseDoubleSafe(values, index++));
             }
             if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                position.set(Position.PREFIX_ADC + 1, parseDoubleSafe(values, index++));
+            }
+            if (index < values.length) {
+                position.set(Position.PREFIX_ADC + 2, parseDoubleSafe(values, index++));
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length) {
+                position.set(Position.KEY_STATUS, parseIntSafe(values, index++, 16));
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                int io = parseIntSafe(values, index++, 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
+            if (index + 2 <= values.length) {
                 position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            }
+            if (index < values.length) {
                 position.set("eventStatus", values[index++]);
+            }
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                int sensorIndex = parseIntSafe(values, index++);
+                int dataType = parseIntSafe(values, index++);
                 if (dataType == 0) {
+                    if (index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
                     index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    if (index < values.length) {
+                        position.set(Position.PREFIX_TEMP + sensorIndex, parseDoubleSafe(values, index++));
+                    }
                 }
             }
             break;
         default:
             break;
     }
 }
+
+private int parseIntSafe(String[] values, int index) {
+    return parseIntSafe(values, index, 10);
+}
+
+private int parseIntSafe(String[] values, int index, int radix) {
+    try {
+        return Integer.parseInt(values[index], radix);
+    } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+        return 0; // or another appropriate default value
+    }
+}
+
+private long parseLongSafe(String[] values, int index) {
+    try {
+        return Long.parseLong(values[index]);
+    } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+        return 0L; // or another appropriate default value
+    }
+}
+
+private double parseDoubleSafe(String[] values, int index) {
+    return parseDoubleSafe(values, index, 0);
+}
+
+private double parseDoubleSafe(String[] values, int index, int substringStart) {
+    try {
+        return Double.parseDouble(values[index].substring(substringStart));
+    } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+        return 0.0; // or another appropriate default value
+    }
+}
\ No newline at end of file
