You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    private Object decodePosition(
            Channel channel, SocketAddress remoteAddress, String sentence, String id) {

        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
        if (deviceSession == null) {
            return null;
        }

        List<Position> positions = new LinkedList<>();
        Position position = null;
        DateBuilder dateBuilder = null;

        for (String pair : sentence.split(",")) {
            String[] data = pair.split("[=:]");
            int key;
            try {
                key = Integer.parseInt(data[0], 16);
            } catch (NumberFormatException e) {
                continue;
            }
            String value = data[1];
            if (key == 0x0) {
                if (position != null) {
                    position.setTime(dateBuilder.getDate());
                    positions.add(position);
                }
                position = new Position(getProtocolName());
                position.setDeviceId(deviceSession.getDeviceId());
                dateBuilder = new DateBuilder(new Date());
            } else if (position != null) {
                switch (key) {
                    case 0x11:
                        value = ("000000" + value).substring(value.length());
                        dateBuilder.setDateReverse(
                                Integer.parseInt(value.substring(0, 2)),
                                Integer.parseInt(value.substring(2, 4)),
                                Integer.parseInt(value.substring(4)));
                        break;
                    case 0x10:
                        value = ("00000000" + value).substring(value.length());
                        dateBuilder.setTime(
                                Integer.parseInt(value.substring(0, 2)),
                                Integer.parseInt(value.substring(2, 4)),
                                Integer.parseInt(value.substring(4, 6)),
                                Integer.parseInt(value.substring(6)) * 10);
                        break;
                    case 0xA:
                        position.setValid(true);
                        position.setLatitude(Double.parseDouble(value));
                        break;
                    case 0xB:
                        position.setValid(true);
                        position.setLongitude(Double.parseDouble(value));
                        break;
                    case 0xC:
                        position.setAltitude(Double.parseDouble(value));
                        break;
                    case 0xD:
                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                        break;
                    case 0xE:
                        position.setCourse(Integer.parseInt(value));
                        break;
                    case 0xF:
                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                        break;
                    case 0x12:
                        position.set(Position.KEY_HDOP, Integer.parseInt(value));
                        break;
                    case 0x20:
                        position.set(Position.KEY_ACCELERATION, value);
                        break;
                    case 0x24:
                        position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
                        break;
                    case 0x81:
                        position.set(Position.KEY_RSSI, Integer.parseInt(value));
                        break;
                    case 0x82:
                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
                        break;
                    case 0x104:
                        position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
                        break;
                    case 0x105:
                        position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
                        break;
                    case 0x10c:
                        position.set(Position.KEY_RPM, Integer.parseInt(value));
                        break;
                    case 0x10d:
                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                        break;
                    case 0x111:
                        position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
                        break;
                    default:
                        position.set(Position.PREFIX_IO + key, value);
                        break;
                }
            }
        }

        if (position != null) {
            if (!position.getValid()) {
                getLastLocation(position, null);
            }
            position.setTime(dateBuilder.getDate());
            positions.add(position);
        }

        return positions.isEmpty() ? null : positions;
    }

```

The code fails the following test:
```java
    @Test
    public void testDecode() throws Exception {

        var decoder = inject(new FreematicsProtocolDecoder(null));

        verifyPositions(decoder, text(
                "UCFLFAYM#0:33770,24:300,82:53.000000,*F9"));

        verifyPositions(decoder, text(
                "M0ZR4X0#0:204391,11:140221,10:8445000,A:49.215920,B:18.737755,C:410,D:0,E:208,24:1252,20:0;0;0,82:47*B5"));

        verifyNull(decoder, text(
                "1#EV=2,TS=1871902,ID=ESP32305C06C40A24*AC"));

        verifyNull(decoder, text(
                "0#EV=1,TS=23930,ID=ID1C6606C40A24,SK=TEST_SERVER_KEY*49"));

        verifyPositions(decoder, text(
                "1#0:102560,20:0;0;0,24:425,10:4285580,A:-35.803696,B:175.748413,C:0.22,D:0.41,F:5,0:103174,20:0;0;0,24:423,10:4285660,A:-35.803696,B:175.748413,C:0.22,D:0.41,F:5,30:88193792*21"));

        verifyPositions(decoder, text(
                "1#0:49244,20:0;0;0,24:423,0:50779,20:0;0;0,24:425,30:32924444*38"));

        verifyNotNull(decoder, text(
                "1#0:47607,20:0;0;0,24:423,0:48732,20:0;0;0,24:428,10:4280140,A:0.000000,B:0.000000,C:0.00,D:18520000.00,F:2,30:32924444*BA"));

        verifyPositions(decoder, text(
                "1#0:68338,10D:79,30:1010,105:199,10C:4375,104:56,111:62,20:0;-1;95,10:6454200,A:-32.727482,B:150.150301,C:159,D:0,F:5,24:1250*7A"));

        verifyPositions(decoder, text(
                "1#0=68338,10D=79,30=1010,105=199,10C=4375,104=56,111=62,20=0;-1;95,10=6454200,A=-32.727482,B=150.150301,C=159,D=0,F=5,24=1250*7A"));

        verifyPositions(decoder, false, text(
                "M0ZR4X0#0:566624,24:1246,20:0;0;0*D"));

        verifyNull(decoder, text(
                "M0ZR4X0#DF=4208,SSI=-71,EV=1,TS=20866,ID=M0ZR4X0*9E"));

    }

```

With the following test error:
```
java.lang.NumberFormatException: For input string: "53.000000"
```

Please provide a fixed version of the buggy function, and only that function:
