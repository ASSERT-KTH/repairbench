diff --git a/tmp/a49bbe4b-5e7e-4678-b3b1-a0be62f8fec0_buggy.java b/tmp/ab222831-d2f4-4c58-b962-e40179fe8e74_fixed.java
index 6e45f80..8b6c344 100644
--- a/tmp/a49bbe4b-5e7e-4678-b3b1-a0be62f8fec0_buggy.java
+++ b/tmp/ab222831-d2f4-4c58-b962-e40179fe8e74_fixed.java
@@ -1,21 +1,32 @@
-  /**
-   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
-   * that the deserialized type matches the type requested.
-   */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
-      @SuppressWarnings("unchecked")
+    @Override
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
+      return (TypeAdapter<T2>) new TypeAdapter<T1>() {
+        @Override
+        public void write(JsonWriter out, T1 value) throws IOException {
+          typeAdapter.write(out, value);
+        }
 
+        @Override
+        public T1 read(JsonReader in) throws IOException {
+          T1 value = typeAdapter.read(in);
+          if (value != null && !clazz.isAssignableFrom(value.getClass())) {
+            throw new JsonSyntaxException("Expected a " + clazz.getName() + " but was " + value.getClass().getName());
+          }
+          return value;
         }
-      @Override public String toString() {
+      };
+    }
+
+    @Override
+    public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
