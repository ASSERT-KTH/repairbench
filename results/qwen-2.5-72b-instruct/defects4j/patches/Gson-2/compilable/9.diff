diff --git a/tmp/6e45118d-0fe0-4bf8-9acb-68acfba055a3_buggy.java b/tmp/32b0e2be-7ba8-464c-8336-2f9bca44ef85_fixed.java
index 6e45f80..8da8a79 100644
--- a/tmp/6e45118d-0fe0-4bf8-9acb-68acfba055a3_buggy.java
+++ b/tmp/32b0e2be-7ba8-464c-8336-2f9bca44ef85_fixed.java
@@ -1,21 +1,38 @@
-  /**
-   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
-   * that the deserialized type matches the type requested.
-   */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
+      return (TypeAdapter<T2>) new TypeAdapter<T1>() {
+        @Override
+        public T1 read(JsonReader in) throws IOException {
+          T1 result = typeAdapter.read(in);
+          if (!clazz.isInstance(result)) {
+            throw new JsonSyntaxException("Expected a " + clazz.getName() + " but was " + result.getClass().getName());
+          }
+          return result;
+        }
 
+        @Override
+        public void write(JsonWriter out, T1 value) throws IOException {
+          if (value == null) {
+            out.nullValue();
+          } else if (!clazz.isInstance(value)) {
+            throw new JsonSyntaxException("Expected a " + clazz.getName() + " but was " + value.getClass().getName());
+          } else {
+            typeAdapter.write(out, value);
+          }
         }
-      @Override public String toString() {
+      };
+    }
+
+    @Override
+    public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
