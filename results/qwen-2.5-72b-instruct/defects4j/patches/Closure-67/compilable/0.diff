diff --git a/tmp/f0580e26-87e7-45c1-a0bb-0aba146cc1fd_buggy.java b/tmp/8f5f7302-e7cc-4b0f-97a2-d2e728287e59_fixed.java
index 939f49b..122a4aa 100644
--- a/tmp/f0580e26-87e7-45c1-a0bb-0aba146cc1fd_buggy.java
+++ b/tmp/8f5f7302-e7cc-4b0f-97a2-d2e728287e59_fixed.java
@@ -1,21 +1,28 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
     boolean isChainedProperty =
         n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
+      Node child = n.getFirstChild();
+      while (child != null && child.getType() == Token.GETPROP) {
+        child = child.getFirstChild().getNext();
+        if (child != null && child.getType() == Token.STRING &&
+            child.getString().equals("prototype")) {
+          return true;
+        }
+      }
+    } else {
+      Node child = n.getFirstChild().getNext();
+      if (child != null && child.getType() == Token.STRING &&
           child.getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
