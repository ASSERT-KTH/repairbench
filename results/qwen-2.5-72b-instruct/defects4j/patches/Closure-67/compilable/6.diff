diff --git a/tmp/9448f8c8-24e8-404a-8efb-c05879a201e2_buggy.java b/tmp/b8bd5e8f-a1c9-4e74-b1c1-1f0e432fc652_fixed.java
index 939f49b..63729f3 100644
--- a/tmp/9448f8c8-24e8-404a-8efb-c05879a201e2_buggy.java
+++ b/tmp/b8bd5e8f-a1c9-4e74-b1c1-1f0e432fc652_fixed.java
@@ -1,21 +1,26 @@
 private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+  Node lhs = assign.getFirstChild();
+  if (lhs != null && NodeUtil.isVarOrSimpleAssignLhs(lhs, assign) && lhs.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    boolean isChainedProperty = lhs.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      Node propNode = lhs.getFirstChild().getFirstChild().getNext();
+      if (propNode.getType() == Token.STRING && propNode.getString().equals("prototype")) {
         return true;
       }
+    } else {
+      // Check for aliased assignments
+      Node current = lhs;
+      while (current != null && current.getType() == Token.GETPROP) {
+        Node propNode = current.getFirstChild().getNext();
+        if (propNode.getType() == Token.STRING && propNode.getString().equals("prototype")) {
+          return true;
+        }
+        current = current.getNext();
+      }
     }
   }
 
   return false;
 }
\ No newline at end of file
