diff --git a/tmp/d6b8299a-d295-461f-b2f9-e311e13acb8a_buggy.java b/tmp/8f66196f-7458-448e-9d6b-707469776a26_fixed.java
index 939f49b..b44ed2f 100644
--- a/tmp/d6b8299a-d295-461f-b2f9-e311e13acb8a_buggy.java
+++ b/tmp/8f66196f-7458-448e-9d6b-707469776a26_fixed.java
@@ -1,21 +1,26 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+      Node base = n.getFirstChild();
+      Node property = base.getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      if (property.getType() == Token.STRING && property.getString().equals("prototype")) {
+        return true;
+      }
+
+      // Check for string key assignments to prototype
+      Node key = n.getLastChild();
+      if (key.getType() == Token.STRING && base.getLastChild().getType() == Token.STRING
+          && base.getLastChild().getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
