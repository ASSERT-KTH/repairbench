diff --git a/tmp/aeab5704-d36f-4d3e-915a-599022f24100_buggy.java b/tmp/f3acd7c2-c9ee-4825-ac03-c33bc6cfbb1a_fixed.java
index 939f49b..4e93cf8 100644
--- a/tmp/aeab5704-d36f-4d3e-915a-599022f24100_buggy.java
+++ b/tmp/f3acd7c2-c9ee-4825-ac03-c33bc6cfbb1a_fixed.java
@@ -1,21 +1,25 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
       Node child = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      if (child.getType() == Token.STRING && child.getString().equals("prototype")) {
+        return true;
+      }
+    } else {
+      Node left = n.getFirstChild();
+      Node right = n.getLastChild();
+
+      if (left.getType() == Token.NAME && right.getType() == Token.STRING && right.getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
