diff --git a/tmp/6236d814-d635-4e3a-aa49-aed565220943_buggy.java b/tmp/ef8d1d17-2b1c-46d9-8bbd-c4b022296317_fixed.java
index 9353941..330cdea 100644
--- a/tmp/6236d814-d635-4e3a-aa49-aed565220943_buggy.java
+++ b/tmp/ef8d1d17-2b1c-46d9-8bbd-c4b022296317_fixed.java
@@ -1,30 +1,53 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
+
+    // Special case for binary and ternary operators to handle short-circuiting.
+    if (n.isAnd() || n.isOr() || n.isHook()) {
+      Node lhs = n.getFirstChild();
+      Node rhs = lhs.getNext();
+      VariableLiveness lhsState = isVariableReadBeforeKill(lhs, variable);
+      if (lhsState != VariableLiveness.MAYBE_LIVE) {
+        return lhsState;
+      }
+      if (n.isHook()) {
+        Node middle = rhs;
+        rhs = middle.getNext();
+        VariableLiveness middleState = isVariableReadBeforeKill(middle, variable);
+        if (middleState != VariableLiveness.MAYBE_LIVE) {
+          return middleState;
+        }
+      }
+      VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);
+      if (rhsState != VariableLiveness.MAYBE_LIVE) {
+        return rhsState;
+      }
+    }
+
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
