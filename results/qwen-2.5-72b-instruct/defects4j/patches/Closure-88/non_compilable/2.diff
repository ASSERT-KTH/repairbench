diff --git a/tmp/a98ef2d6-435d-47e2-a0fc-9520f4554982_buggy.java b/tmp/73b099ee-2e18-450b-8314-07acf9eefaf1_fixed.java
index 9353941..9952ecc 100644
--- a/tmp/a98ef2d6-435d-47e2-a0fc-9520f4554982_buggy.java
+++ b/tmp/73b099ee-2e18-450b-8314-07acf9eefaf1_fixed.java
@@ -1,30 +1,36 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
+
+    // Check if the current node is an assignment and if the variable is being assigned
+    if (n.isAssign() && variable.equals(n.getFirstChild().getString())) {
+      return VariableLiveness.KILL;
+    }
+
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
