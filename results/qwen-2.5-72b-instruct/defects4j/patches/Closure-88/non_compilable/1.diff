diff --git a/tmp/9dea6fee-fb5e-4d22-a4da-7bdadef8d86f_buggy.java b/tmp/4fc86b1d-1749-4c0d-9092-0abfcdb9903d_fixed.java
index 9353941..245a807 100644
--- a/tmp/9dea6fee-fb5e-4d22-a4da-7bdadef8d86f_buggy.java
+++ b/tmp/4fc86b1d-1749-4c0d-9092-0abfcdb9903d_fixed.java
@@ -1,30 +1,39 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
+        if (state != VariableLiveness.MAY_LIVE) {
           return state;
         }
       }
     }
-    return VariableLiveness.MAYBE_LIVE;
+
+    // Check if the variable is being assigned in a descendant of the current node.
+    for (Node child = n.getFirstChild();
+        child != null; child = child.getNext()) {
+      if (NodeUtil.isName(child) && variable.equals(child.getString()) && NodeUtil.isLhs(child, child.getParent())) {
+        return VariableLiveness.KILL;
+      }
+    }
+
+    return VariableLiveness.MAY_LIVE;
   }
\ No newline at end of file
