diff --git a/tmp/16b65211-515b-43ad-b3c6-90e387d44695_buggy.java b/tmp/d4d1338f-f6d4-4b05-bc19-235bd030c4a6_fixed.java
index e69de29..108cab4 100644
--- a/tmp/16b65211-515b-43ad-b3c6-90e387d44695_buggy.java
+++ b/tmp/d4d1338f-f6d4-4b05-bc19-235bd030c4a6_fixed.java
@@ -0,0 +1,126 @@
+@Override
+public SortedMap<K, V> prefixMap(final K prefix) {
+    final Node<K, V> node = root.getPrefixNode(prefix, Node.VALUE);
+    if (node == null) {
+        return Collections.emptySortedMap();
+    }
+
+    final Set<K> keySet = new TreeSet<>(node.prefixComparator(prefix));
+    final Map<K, V> map = new TreeMap<>(keySet.comparator());
+    node.addAllKeysToMap(prefix, map);
+
+    return new SortedMap<K, V>() {
+        @Override
+        public V put(K key, V value) {
+            V oldValue = map.put(key, value);
+            if (oldValue == null) {
+                root.put(key, value);
+            } else {
+                root.put(key, value);
+            }
+            return oldValue;
+        }
+
+        @Override
+        public V remove(Object key) {
+            V oldValue = map.remove(key);
+            if (oldValue != null) {
+                root.remove(key);
+            }
+            return oldValue;
+        }
+
+        @Override
+        public void clear() {
+            for (K key : new ArrayList<>(map.keySet())) {
+                map.remove(key);
+                root.remove(key);
+            }
+        }
+
+        @Override
+        public V get(Object key) {
+            return map.get(key);
+        }
+
+        @Override
+        public int size() {
+            return map.size();
+        }
+
+        @Override
+        public boolean containsKey(Object key) {
+            return map.containsKey(key);
+        }
+
+        @Override
+        public boolean containsValue(Object value) {
+            return map.containsValue(value);
+        }
+
+        @Override
+        public Set<K> keySet() {
+            return map.keySet();
+        }
+
+        @Override
+        public Collection<V> values() {
+            return map.values();
+        }
+
+        @Override
+        public Set<Entry<K, V>> entrySet() {
+            return map.entrySet();
+        }
+
+        @Override
+        public K firstKey() {
+            return map.firstKey();
+        }
+
+        @Override
+        public K lastKey() {
+            return map.lastKey();
+        }
+
+        @Override
+        public K lowerKey(K key) {
+            return map.lowerKey(key);
+        }
+
+        @Override
+        public K floorKey(K key) {
+            return map.floorKey(key);
+        }
+
+        @Override
+        public K ceilingKey(K key) {
+            return map.ceilingKey(key);
+        }
+
+        @Override
+        public K higherKey(K key) {
+            return map.higherKey(key);
+        }
+
+        @Override
+        public Map<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) {
+            return map.subMap(fromKey, fromInclusive, toKey, toInclusive);
+        }
+
+        @Override
+        public Map<K, V> headMap(K toKey, boolean inclusive) {
+            return map.headMap(toKey, inclusive);
+        }
+
+        @Override
+        public Map<K, V> tailMap(K fromKey, boolean inclusive) {
+            return map.tailMap(fromKey, inclusive);
+        }
+
+        @Override
+        public Comparator<? super K> comparator() {
+            return map.comparator();
+        }
+    };
+}
\ No newline at end of file
