diff --git a/tmp/0ecc0a6f-3f6e-4e7b-864d-0f3c4b10dc4e_buggy.java b/tmp/bf31329b-b697-4c31-afb9-0e526e613707_fixed.java
index e69de29..46628cf 100644
--- a/tmp/0ecc0a6f-3f6e-4e7b-864d-0f3c4b10dc4e_buggy.java
+++ b/tmp/bf31329b-b697-4c31-afb9-0e526e613707_fixed.java
@@ -0,0 +1,125 @@
+public synchronized SortedMap<K, V> prefixMap(final K prefix) {
+    final Node<K, V> head = head();
+    final Node<K, V> tail = tail();
+    final Node<K, V> prefixNode = findPrefixNode(prefix, head, tail, false);
+
+    if (prefixNode == null) {
+        return Collections.emptySortedMap();
+    }
+
+    final SortedMap<K, V> result = new TreeMap<>();
+    final Iterator<Map.Entry<K, V>> iterator = new Iterator<Map.Entry<K, V>>() {
+        private Node<K, V> nextNode = prefixNode.firstChild;
+
+        @Override
+        public boolean hasNext() {
+            return nextNode != null && isPrefix(prefixNode, nextNode);
+        }
+
+        @Override
+        public Map.Entry<K, V> next() {
+            if (!hasNext()) {
+                throw new NoSuchElementException();
+            }
+            Map.Entry<K, V> entry = nextNode.entry;
+            nextNode = nextNode.nextSibling;
+            return entry;
+        }
+
+        @Override
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+    };
+
+    while (iterator.hasNext()) {
+        Map.Entry<K, V> entry = iterator.next();
+        result.put(entry.getKey(), entry.getValue());
+    }
+
+    return new SortedMap<K, V>() {
+        @Override
+        public K firstKey() {
+            return result.firstKey();
+        }
+
+        @Override
+        public K lastKey() {
+            return result.lastKey();
+        }
+
+        @Override
+        public int size() {
+            return result.size();
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return result.isEmpty();
+        }
+
+        @Override
+        public V get(Object key) {
+            return result.get(key);
+        }
+
+        @Override
+        public V put(K key, V value) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public V remove(Object key) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public void putAll(Map<? extends K, ? extends V> m) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public void clear() {
+            result.clear();
+            // Clear the entries from the original trie
+            for (Map.Entry<K, V> entry : result.entrySet()) {
+                trie.remove(entry.getKey());
+            }
+        }
+
+        @Override
+        public Set<K> keySet() {
+            return result.keySet();
+        }
+
+        @Override
+        public Collection<V> values() {
+            return result.values();
+        }
+
+        @Override
+        public Set<Map.Entry<K, V>> entrySet() {
+            return result.entrySet();
+        }
+
+        @Override
+        public SortedMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) {
+            return result.subMap(fromKey, fromInclusive, toKey, toInclusive);
+        }
+
+        @Override
+        public SortedMap<K, V> headMap(K toKey, boolean inclusive) {
+            return result.headMap(toKey, inclusive);
+        }
+
+        @Override
+        public SortedMap<K, V> tailMap(K fromKey, boolean inclusive) {
+            return result.tailMap(fromKey, inclusive);
+        }
+
+        @Override
+        public Comparator<? super K> comparator() {
+            return result.comparator();
+        }
+    };
+}
\ No newline at end of file
