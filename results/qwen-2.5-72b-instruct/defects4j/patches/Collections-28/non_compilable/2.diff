diff --git a/tmp/3b11c683-3ff1-48cb-aa38-bb6760532ca6_buggy.java b/tmp/4ad8e4fd-0395-4346-946f-d33301c00b9a_fixed.java
index e69de29..6b2bd0e 100644
--- a/tmp/3b11c683-3ff1-48cb-aa38-bb6760532ca6_buggy.java
+++ b/tmp/4ad8e4fd-0395-4346-946f-d33301c00b9a_fixed.java
@@ -0,0 +1,141 @@
+@Override
+public SortedMap<K, V> prefixMap(final K prefix) {
+    final Node<K, V> root = rootNode;
+    final Node<K, V> node = findNode(root, prefix, 0);
+    if (node == null) {
+        return Collections.emptySortedMap();
+    }
+
+    final TrieMap<K, V> subMap = new TrieMap<>(root, node, prefix);
+    return new TreeMap<>(subMap);
+}
+
+private static final class TrieMap<K, V> extends AbstractSortedMap<K, V> {
+    private final Node<K, V> root;
+    private final Node<K, V> node;
+    private final K prefix;
+
+    TrieMap(final Node<K, V> root, final Node<K, V> node, final K prefix) {
+        this.root = root;
+        this.node = node;
+        this.prefix = prefix;
+    }
+
+    @Override
+    public Set<Map.Entry<K, V>> entrySet() {
+        return new AbstractSet<Map.Entry<K, V>>() {
+            @Override
+            public Iterator<Map.Entry<K, V>> iterator() {
+                return new Iterator<Map.Entry<K, V>>() {
+                    private final NodeIterator<K, V> it = new NodeIterator<>(root, node, root.comp, prefix);
+
+                    @Override
+                    public boolean hasNext() {
+                        return it.hasNext();
+                    }
+
+                    @Override
+                    public Map.Entry<K, V> next() {
+                        return it.next();
+                    }
+
+                    @Override
+                    public void remove() {
+                        it.remove();
+                    }
+                };
+            }
+
+            @Override
+            public int size() {
+                int size = 0;
+                for (final NodeIterator<K, V> it = new NodeIterator<>(root, node, root.comp, prefix); it.hasNext(); ) {
+                    it.next();
+                    size++;
+                }
+                return size;
+            }
+        };
+    }
+
+    @Override
+    public V put(final K key, final V value) {
+        final V oldValue = root.put(root, key, value, 0, root.comp, null);
+        if (oldValue == null && comp.compare(key, prefix) >= 0) {
+            node.put(node, key, value, 0, comp, null);
+        }
+        return oldValue;
+    }
+
+    @Override
+    public V remove(final Object key) {
+        final V oldValue = root.remove(root, (K) key, 0, root.comp, null);
+        if (oldValue != null && comp.compare((K) key, prefix) >= 0) {
+            node.remove(node, (K) key, 0, comp, null);
+        }
+        return oldValue;
+    }
+
+    @Override
+    public void clear() {
+        for (final Iterator<Map.Entry<K, V>> it = entrySet().iterator(); it.hasNext(); ) {
+            it.next();
+            it.remove();
+        }
+    }
+
+    @Override
+    public Comparator<? super K> comparator() {
+        return root.comp;
+    }
+
+    @Override
+    public K firstKey() {
+        final NodeIterator<K, V> it = new NodeIterator<>(root, node, root.comp, prefix);
+        if (!it.hasNext()) {
+            throw new NoSuchElementException();
+        }
+        return it.next().key();
+    }
+
+    @Override
+    public K lastKey() {
+        final NodeIterator<K, V> it = new NodeIterator<>(root, node, root.comp, prefix);
+        K last = null;
+        while (it.hasNext()) {
+            last = it.next().key();
+        }
+        if (last == null) {
+            throw new NoSuchElementException();
+        }
+        return last;
+    }
+
+    @Override
+    public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
+        final Node<K, V> fromNode = findNode(root, fromKey, 0);
+        final Node<K, V> toNode = findNode(root, toKey, 0);
+        if (fromNode == null || toNode == null || comp.compare(fromKey, toKey) >= 0) {
+            return Collections.emptySortedMap();
+        }
+        return new TrieMap<>(root, fromNode, fromKey).headMap(toKey);
+    }
+
+    @Override
+    public SortedMap<K, V> headMap(final K toKey) {
+        final Node<K, V> toNode = findNode(root, toKey, 0);
+        if (toNode == null) {
+            return Collections.emptySortedMap();
+        }
+        return new TrieMap<>(root, node, prefix).subMap(prefix, toKey);
+    }
+
+    @Override
+    public SortedMap<K, V> tailMap(final K fromKey) {
+        final Node<K, V> fromNode = findNode(root, fromKey, 0);
+        if (fromNode == null) {
+            return Collections.emptySortedMap();
+        }
+        return new TrieMap<>(root, fromNode, fromKey);
+    }
+}
\ No newline at end of file
