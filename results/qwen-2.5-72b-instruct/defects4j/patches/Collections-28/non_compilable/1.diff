diff --git a/tmp/3a18b7aa-08bd-460e-af66-510234ddcf13_buggy.java b/tmp/05d06dc4-aea1-4f59-8c0a-acdcb409c681_fixed.java
index e69de29..e7e8454 100644
--- a/tmp/3a18b7aa-08bd-460e-af66-510234ddcf13_buggy.java
+++ b/tmp/05d06dc4-aea1-4f59-8c0a-acdcb409c681_fixed.java
@@ -0,0 +1,105 @@
+@Override
+public SortedMap<K, V> prefixMap(final K prefix) {
+    final Node<K, V> root = root;
+    final Node<K, V> node = root.findNode(prefix);
+    if (node == null) {
+        return Collections.emptySortedMap();
+    }
+
+    final Node<K, V> prefixNode = node.findCommonPrefixNode(prefix);
+    if (prefixNode == null) {
+        return Collections.emptySortedMap();
+    }
+
+    final SortedMap<K, V> map = new TreeMap<>(this.comparator);
+    node.addAllToMap(prefix, map);
+
+    return new AbstractSortedMap<K, V>() {
+        @Override
+        public V put(K key, V value) {
+            V oldValue = map.put(key, value);
+            PatriciaTrie.this.put(key, value);
+            return oldValue;
+        }
+
+        @Override
+        public V remove(Object key) {
+            V oldValue = map.remove(key);
+            PatriciaTrie.this.remove(key);
+            return oldValue;
+        }
+
+        @Override
+        public void clear() {
+            for (K key : map.keySet()) {
+                PatriciaTrie.this.remove(key);
+            }
+            map.clear();
+        }
+
+        @Override
+        public Set<K> keySet() {
+            return map.keySet();
+        }
+
+        @Override
+        public Collection<V> values() {
+            return map.values();
+        }
+
+        @Override
+        public Set<Entry<K, V>> entrySet() {
+            return map.entrySet();
+        }
+
+        @Override
+        public V get(Object key) {
+            return map.get(key);
+        }
+
+        @Override
+        public int size() {
+            return map.size();
+        }
+
+        @Override
+        public boolean containsKey(Object key) {
+            return map.containsKey(key);
+        }
+
+        @Override
+        public boolean containsValue(Object value) {
+            return map.containsValue(value);
+        }
+
+        @Override
+        public Comparator<? super K> comparator() {
+            return PatriciaTrie.this.comparator;
+        }
+
+        @Override
+        public SortedMap<K, V> subMap(K fromKey, K toKey) {
+            return map.subMap(fromKey, toKey);
+        }
+
+        @Override
+        public SortedMap<K, V> headMap(K toKey) {
+            return map.headMap(toKey);
+        }
+
+        @Override
+        public SortedMap<K, V> tailMap(K fromKey) {
+            return map.tailMap(fromKey);
+        }
+
+        @Override
+        public K firstKey() {
+            return map.firstKey();
+        }
+
+        @Override
+        public K lastKey() {
+            return map.lastKey();
+        }
+    };
+}
\ No newline at end of file
