diff --git a/tmp/f291a237-d1ba-4bf0-8c27-46f4898a20c2_buggy.java b/tmp/79facb62-58db-42ae-8a45-f214db1e6a3e_fixed.java
index e69de29..187c316 100644
--- a/tmp/f291a237-d1ba-4bf0-8c27-46f4898a20c2_buggy.java
+++ b/tmp/79facb62-58db-42ae-8a45-f214db1e6a3e_fixed.java
@@ -0,0 +1,56 @@
+public <V> SortedMap<String, V> prefixMap(String prefix) {
+    if (prefix == null) {
+        throw new IllegalArgumentException("Prefix must not be null");
+    }
+
+    if (prefix.isEmpty()) {
+        return new TreeMap<>(this);
+    }
+
+    Node<String, V> root = root();
+    Node<String, V> node = findNode(root, prefix, 0);
+    if (node == null) {
+        return Collections.emptySortedMap();
+    }
+
+    TreeMap<String, V> result = new TreeMap<>();
+    collectValues(node, prefix, result);
+    return result;
+}
+
+private <V> Node<String, V> findNode(Node<String, V> node, String prefix, int depth) {
+    if (node == null) {
+        return null;
+    }
+
+    if (depth == prefix.length()) {
+        return node;
+    }
+
+    char ch = prefix.charAt(depth);
+    for (Node<String, V> child : node.children) {
+        if (child != null && child.key.charAt(child.keyOffset) == ch) {
+            Node<String, V> result = findNode(child, prefix, depth + 1);
+            if (result != null) {
+                return result;
+            }
+        }
+    }
+    return null;
+}
+
+private <V> void collectValues(Node<String, V> node, String prefix, TreeMap<String, V> result) {
+    if (node == null) {
+        return;
+    }
+
+    if (node.value != null) {
+        result.put(prefix, node.value);
+    }
+
+    for (Node<String, V> child : node.children) {
+        if (child != null) {
+            collectValues(child, prefix + child.key, result);
+        }
+    }
+}
\ No newline at end of file
