diff --git a/tmp/4c5943eb-635d-4a49-9021-660b1577125f_buggy.java b/tmp/20641e5a-763f-4b51-8825-a7edec3d9806_fixed.java
index e69de29..01b4506 100644
--- a/tmp/4c5943eb-635d-4a49-9021-660b1577125f_buggy.java
+++ b/tmp/20641e5a-763f-4b51-8825-a7edec3d9806_fixed.java
@@ -0,0 +1,121 @@
+@Override
+public SortedMap<K, V> prefixMap(final K prefix) {
+    if (prefix == null) {
+        throw new IllegalArgumentException("The prefix must not be null");
+    }
+
+    final Node<K, V> node = root.getChild(prefix);
+    if (node == null) {
+        return new TreeMap<>();
+    }
+
+    final TreeMap<K, V> map = new TreeMap<>();
+    node.collectKeys(map);
+
+    return new SortedMap<K, V>() {
+        @Override
+        public Comparator<? super K> comparator() {
+            return map.comparator();
+        }
+
+        @Override
+        public K firstKey() {
+            return map.firstKey();
+        }
+
+        @Override
+        public K lastKey() {
+            return map.lastKey();
+        }
+
+        @Override
+        public int size() {
+            return map.size();
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return map.isEmpty();
+        }
+
+        @Override
+        public boolean containsKey(final Object key) {
+            return map.containsKey(key);
+        }
+
+        @Override
+        public boolean containsValue(final Object value) {
+            return map.containsValue(value);
+        }
+
+        @Override
+        public V get(final Object key) {
+            return map.get(key);
+        }
+
+        @Override
+        public V put(final K key, final V value) {
+            V oldValue = map.put(key, value);
+            if (oldValue == null) {
+                // Ensure the key is added to the trie
+                PatriciaTrie.this.put(key, value);
+            }
+            return oldValue;
+        }
+
+        @Override
+        public V remove(final Object key) {
+            V oldValue = map.remove(key);
+            if (oldValue != null) {
+                // Ensure the key is removed from the trie
+                PatriciaTrie.this.remove(key);
+            }
+            return oldValue;
+        }
+
+        @Override
+        public void putAll(final Map<? extends K, ? extends V> m) {
+            for (Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {
+                put(entry.getKey(), entry.getValue());
+            }
+        }
+
+        @Override
+        public void clear() {
+            for (K key : new ArrayList<>(map.keySet())) {
+                map.remove(key);
+                PatriciaTrie.this.remove(key);
+            }
+        }
+
+        @Override
+        public Set<K> keySet() {
+            return map.keySet();
+        }
+
+        @Override
+        public Collection<V> values() {
+            return map.values();
+        }
+
+        @Override
+        public Set<Map.Entry<K, V>> entrySet() {
+            return map.entrySet();
+        }
+
+        @Override
+        public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
+            return new TreeMap<>(map.subMap(fromKey, toKey));
+        }
+
+        @Override
+        public SortedMap<K, V> headMap(final K toKey) {
+            return new TreeMap<>(map.headMap(toKey));
+        }
+
+        @Override
+        public SortedMap<K, V> tailMap(final K fromKey) {
+            return new TreeMap<>(map.tailMap(fromKey));
+        }
+    };
+}
\ No newline at end of file
