diff --git a/tmp/72cd5418-1b70-4bf6-a842-4f10d450fb21_buggy.java b/tmp/ccefe456-a9ce-4421-970d-185d13b11665_fixed.java
index b36c3f0..3b117ae 100644
--- a/tmp/72cd5418-1b70-4bf6-a842-4f10d450fb21_buggy.java
+++ b/tmp/ccefe456-a9ce-4421-970d-185d13b11665_fixed.java
@@ -1,58 +1,44 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
       if (callNode.hasOneChild()
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
       // Functions in the "Math" namespace have no side effects.
-
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
-          return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
+        if (nameNode.getFirstChild().getType() == Token.STRING
+            && "Math".equals(nameNode.getFirstChild().getString())
+            && MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
-          Node param = nameNode.getNext();
-          if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
           return false;
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
