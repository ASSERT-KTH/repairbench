diff --git a/tmp/226e6d3c-df93-44d8-82b6-51f7b6170aa0_buggy.java b/tmp/ba8174fc-26c4-400b-9afe-f88e853e04ff_fixed.java
index 3ec995f..99a9180 100644
--- a/tmp/226e6d3c-df93-44d8-82b6-51f7b6170aa0_buggy.java
+++ b/tmp/ba8174fc-26c4-400b-9afe-f88e853e04ff_fixed.java
@@ -1,26 +1,21 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty() || version.equals("0")) {
+        return 0;
+    }
+
+    String[] parts = version.split("[._\\s]+");
+    if (parts.length < 2) {
+        return 0;
+    }
+
+    int major = 0;
+    int minor = 0;
+    try {
+        major = Integer.parseInt(parts[0]);
+        minor = Integer.parseInt(parts[1]);
+    } catch (NumberFormatException e) {
+        return 0;
+    }
+
+    return (major * 100) + minor;
 }
\ No newline at end of file
