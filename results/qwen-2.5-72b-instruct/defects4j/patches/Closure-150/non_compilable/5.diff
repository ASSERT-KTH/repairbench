diff --git a/tmp/2b1a752b-b660-43e5-8877-2d8f6d85d63a_buggy.java b/tmp/3cb93345-44f8-47eb-ad02-391ab5a71b1e_fixed.java
index 800e6e1..0657305 100644
--- a/tmp/2b1a752b-b660-43e5-8877-2d8f6d85d63a_buggy.java
+++ b/tmp/3cb93345-44f8-47eb-ad02-391ab5a71b1e_fixed.java
@@ -1,32 +1,46 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.ASSIGN:
+          if (n.getFirstChild().getType() == Token.GETPROP) {
+            defineProperty(n, parent);
+          }
+          break;
+      }
+    }
+
+    private void defineProperty(Node n, Node parent) {
+      Node lhs = n.getFirstChild();
+      Node rhs = lhs.getFirstChild();
+      if (rhs.getType() == Token.GETPROP) {
+        Node target = rhs.getFirstChild();
+        String propertyName = rhs.getSecondChild().getString();
+        JSType propertyType = n.getSecondChild().getJSType();
+        if (target.getType() == Token.NAME) {
+          JSType targetType = t.getScope().getVar(target.getString()).getType();
+          if (targetType instanceof ObjectType) {
+            ObjectType objectType = (ObjectType) targetType;
+            objectType.defineProperty(propertyName, propertyType, true);
+          }
+        }
       }
     }
\ No newline at end of file
