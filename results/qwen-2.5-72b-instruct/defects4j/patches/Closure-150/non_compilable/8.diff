diff --git a/tmp/af4be757-5db5-435d-a0ca-6ee2eaae1df5_buggy.java b/tmp/a74b39b6-0064-4c25-b22e-3ba612c544a8_fixed.java
index 800e6e1..d10d323 100644
--- a/tmp/af4be757-5db5-435d-a0ca-6ee2eaae1df5_buggy.java
+++ b/tmp/a74b39b6-0064-4c25-b22e-3ba612c544a8_fixed.java
@@ -1,32 +1,53 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.ASSIGN:
+          if (n.getFirstChild().getType() == Token.GETPROP) {
+            Node lhs = n.getFirstChild();
+            Node propName = lhs.getLastChild();
+            if (propName.getType() == Token.STRING) {
+              String propertyName = propName.getString();
+              Node objectNode = lhs.getFirstChild();
+              Scope currentScope = t.getScope();
+              while (currentScope != null && !currentScope.isGlobal()) {
+                Var objectVar = currentScope.getVar(objectNode.getQualifiedName());
+                if (objectVar != null) {
+                  ObjectType objectType = (ObjectType) objectVar.getType();
+                  if (objectType != null) {
+                    JSType functionType = JSType.UNKNOWN;
+                    for (Node child : n.getLastChild().getChildren()) {
+                      if (child.getType() == Token.FUNCTION) {
+                        functionType = defineDeclaredFunction(child, n);
+                      }
+                    }
+                    if (functionType != null) {
+                      objectType.defineDeclaredProperty(propertyName, functionType, Collections.<InputId>emptySet());
+                    }
+                  }
+                }
+                currentScope = currentScope.getParent();
+              }
+            }
+          }
+          break;
       }
     }
\ No newline at end of file
