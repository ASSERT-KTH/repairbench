diff --git a/tmp/823eef61-54b0-45cc-ab1c-6e82681bd8ef_buggy.java b/tmp/fe95f0a0-06ab-49d3-ba05-c7bf5d1197d7_fixed.java
index 0f439b3..8271751 100644
--- a/tmp/823eef61-54b0-45cc-ab1c-6e82681bd8ef_buggy.java
+++ b/tmp/fe95f0a0-06ab-49d3-ba05-c7bf5d1197d7_fixed.java
@@ -1,38 +1,35 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
         int totalRead = 0;
 
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
         numToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
-        if (totalRead == -1) {
+        int bytesRead;
+        while (totalRead < numToRead && entryOffset < entrySize) {
+            bytesRead = is.read(buf, offset + totalRead, numToRead - totalRead);
+            if (bytesRead == -1) {
                 hasHitEOF = true;
+                break;
             } else {
-            entryOffset += totalRead;
+                totalRead += bytesRead;
+                entryOffset += bytesRead;
             }
+        }
+
+        if (totalRead == 0 && entryOffset >= entrySize) {
+            hasHitEOF = true;
+            throw new IOException("Unexpected EOF while reading tar entry");
+        }
+
+        count(totalRead);
 
         return totalRead;
     }
\ No newline at end of file
