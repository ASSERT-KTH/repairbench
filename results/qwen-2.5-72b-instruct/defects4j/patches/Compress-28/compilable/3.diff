diff --git a/tmp/272f3961-17eb-4d00-b084-3fc7d8863571_buggy.java b/tmp/fd711a88-d9d9-49fb-829c-07be2f74c32e_fixed.java
index 0f439b3..eafb984 100644
--- a/tmp/272f3961-17eb-4d00-b084-3fc7d8863571_buggy.java
+++ b/tmp/fd711a88-d9d9-49fb-829c-07be2f74c32e_fixed.java
@@ -1,38 +1,31 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
         int totalRead = 0;
 
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
         numToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
-        if (totalRead == -1) {
+        while (totalRead < numToRead) {
+            int bytesRead = is.read(buf, offset + totalRead, numToRead - totalRead);
+            if (bytesRead == -1) {
                 hasHitEOF = true;
-        } else {
-            entryOffset += totalRead;
+                if (totalRead == 0) {
+                    return -1;
                 }
+                break;
+            }
+            totalRead += bytesRead;
+            entryOffset += bytesRead;
+        }
+
+        count(totalRead);
 
         return totalRead;
     }
\ No newline at end of file
