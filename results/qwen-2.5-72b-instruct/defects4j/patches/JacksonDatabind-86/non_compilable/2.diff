diff --git a/tmp/7cde69c3-fd1c-4c18-9001-4f73fe1a8e7e_buggy.java b/tmp/e1b5cd42-abc3-463f-93f7-14d64d70b984_fixed.java
index e69de29..4870888 100644
--- a/tmp/7cde69c3-fd1c-4c18-9001-4f73fe1a8e7e_buggy.java
+++ b/tmp/e1b5cd42-abc3-463f-93f7-14d64d70b984_fixed.java
@@ -0,0 +1,36 @@
+public JavaType constructType(Class<?> rawType) {
+    if (rawType == null) {
+        return null;
+    }
+    if (rawType == Object.class) {
+        return TypeFactory.unknownType();
+    }
+    if (rawType.isArray()) {
+        return _fromClass(null, rawType, rawType.getComponentType(), null);
+    }
+    if (ClassUtil.isConcrete(rawType)) {
+        return _fromClass(null, rawType, null, null);
+    }
+    // Check if the type is already cached
+    JavaType cached = _typeCache.get(rawType);
+    if (cached != null) {
+        return cached;
+    }
+    // Construct the type and cache it
+    JavaType result = _constructType(rawType);
+    _typeCache.put(rawType, result);
+    return result;
+}
+
+private JavaType _constructType(Class<?> rawType) {
+    if (ClassUtil.isConcrete(rawType)) {
+        return _fromClass(null, rawType, null, null);
+    }
+    if (rawType.isInterface()) {
+        return _fromClass(null, rawType, Object.class, null);
+    }
+    // Handle recursive types
+    Class<?> superClass = rawType.getSuperclass();
+    JavaType superType = (superClass != null) ? constructType(superClass) : null;
+    return _fromClass(null, rawType, superType, null);
+}
\ No newline at end of file
