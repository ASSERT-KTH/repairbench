diff --git a/tmp/96a83ee6-9707-4c8c-bc20-b20fce777c62_buggy.java b/tmp/0016d4fb-2295-4ddf-98f5-6f4671e877a4_fixed.java
index fa6828a..e069cd0 100644
--- a/tmp/96a83ee6-9707-4c8c-bc20-b20fce777c62_buggy.java
+++ b/tmp/0016d4fb-2295-4ddf-98f5-6f4671e877a4_fixed.java
@@ -1,5 +1,18 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
     for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        Optional<Object> bestMatch = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);
+        if (bestMatch.isPresent()) {
+            bestMatch.ifPresent(mock -> injectField(field, fieldInstance, mock));
+            break; // Ensure the mock is injected only once in the best matching type
+        }
+    }
+}
+
+private void injectField(Field field, Object fieldInstance, Object mock) {
+    try {
+        field.setAccessible(true);
+        field.set(fieldInstance, mock);
+    } catch (IllegalAccessException e) {
+        throw new RuntimeException("Failed to inject mock into field: " + field.getName(), e);
     }
 }
\ No newline at end of file
