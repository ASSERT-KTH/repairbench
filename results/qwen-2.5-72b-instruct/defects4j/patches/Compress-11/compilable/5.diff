diff --git a/tmp/781d0ca8-8c1b-4401-b845-5866c45ac1c1_buggy.java b/tmp/85e3b403-39fb-4b91-b3c1-cddd012c2250_fixed.java
index 6b160ef..59193be 100644
--- a/tmp/781d0ca8-8c1b-4401-b845-5866c45ac1c1_buggy.java
+++ b/tmp/85e3b403-39fb-4b91-b3c1-cddd012c2250_fixed.java
@@ -1,68 +1,65 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
         // Dump needs a bigger buffer to check the signature;
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
         // Tar needs an even bigger buffer to check the signature; read the first block
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
         // COMPRESS-117 - improve auto-recognition
         try {
             TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
             tais.getNextEntry();
             return new TarArchiveInputStream(in);
         } catch (Exception e) { // NOPMD
             // can generate IllegalArgumentException as well as IOException
             // autodetection, simply not a TAR
             // ignored
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
+    // Ensure that the stream is reset before throwing the exception
+    try {
+        in.reset();
+    } catch (IOException e) {
+        throw new ArchiveException("Failed to reset the input stream.", e);
+    }
+
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
