diff --git a/tmp/496bb5ac-4682-4bc5-9ab2-562ee6df1b12_buggy.java b/tmp/38ea13ce-32be-4644-9dcb-1205be06723a_fixed.java
index 6b160ef..f6f0585 100644
--- a/tmp/496bb5ac-4682-4bc5-9ab2-562ee6df1b12_buggy.java
+++ b/tmp/38ea13ce-32be-4644-9dcb-1205be06723a_fixed.java
@@ -1,68 +1,72 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
         // Dump needs a bigger buffer to check the signature;
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
         // Tar needs an even bigger buffer to check the signature; read the first block
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
+
         // COMPRESS-117 - improve auto-recognition
         try {
             TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
+            if (tais.getNextEntry() != null) {
                 return new TarArchiveInputStream(in);
+            }
         } catch (Exception e) { // NOPMD
             // can generate IllegalArgumentException as well as IOException
             // autodetection, simply not a TAR
             // ignored
         }
+
+        // If none of the above matches, check if the stream is just a plain text file
+        if (signatureLength > 0) {
+            // Check if the first few bytes are printable ASCII
+            for (int i = 0; i < signatureLength; i++) {
+                if (signature[i] < 32 || signature[i] > 126) {
+                    throw new ArchiveException("No Archiver found for the stream signature");
+                }
+            }
+            // If all bytes are printable ASCII, it's likely a text file, not an archive
+            throw new ArchiveException("Stream is likely a text file, not an archive");
+        }
+
+        throw new ArchiveException("No Archiver found for the stream signature");
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
-
-        throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
