diff --git a/tmp/8aaa2834-89e7-4f96-bf9a-498e3918fd40_buggy.java b/tmp/4b596f16-c7c2-4167-aa42-abaac7f1de95_fixed.java
index be2af16..eae836f 100644
--- a/tmp/8aaa2834-89e7-4f96-bf9a-498e3918fd40_buggy.java
+++ b/tmp/4b596f16-c7c2-4167-aa42-abaac7f1de95_fixed.java
@@ -1,29 +1,31 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
     // Assume date is Gregorian.
     long instant;
     instant = iGregorianChronology.getDateTimeMillis
         (year, monthOfYear, dayOfMonth,
          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant < iCutoverMillis) {
         // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+        long julianInstant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
+        if (julianInstant >= iCutoverMillis) {
             // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
+        } else {
+            instant = julianInstant;
         }
     }
     return instant;
 }
\ No newline at end of file
