diff --git a/tmp/acf11cfb-583a-4c07-bcb9-6b7472d516d0_buggy.java b/tmp/ea0e2492-6132-4777-93e9-5bdee5c2504c_fixed.java
index be2af16..40f627b 100644
--- a/tmp/acf11cfb-583a-4c07-bcb9-6b7472d516d0_buggy.java
+++ b/tmp/ea0e2492-6132-4777-93e9-5bdee5c2504c_fixed.java
@@ -1,29 +1,43 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
     // Assume date is Gregorian.
     long instant;
+    try {
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
+    } catch (IllegalArgumentException e) {
         // Maybe it's Julian.
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
             // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
+
+    if (instant < iCutoverMillis) {
+        // Confirm it's Julian.
+        try {
+            iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } catch (IllegalArgumentException e) {
+            // If it fails in Julian, it's an invalid date.
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
+    }
+
     return instant;
 }
\ No newline at end of file
