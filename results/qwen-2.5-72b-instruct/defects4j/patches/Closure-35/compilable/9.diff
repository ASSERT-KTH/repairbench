diff --git a/tmp/1b936942-58b2-44c2-8e2d-3af2d59427bd_buggy.java b/tmp/94336ad9-3e73-4fee-ba47-a8e08a0529e0_fixed.java
index d57736b..db7ad8d 100644
--- a/tmp/1b936942-58b2-44c2-8e2d-3af2d59427bd_buggy.java
+++ b/tmp/94336ad9-3e73-4fee-ba47-a8e08a0529e0_fixed.java
@@ -1,39 +1,29 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
+          } else {
+            // Ensure the existing property type is widened to match the constraint.
+            JSType existingType = objType.getPropertyType(prop);
+            JSType widenedType = existingType.getLeastSupertype(propType);
+            objType.defineInferredProperty(prop, widenedType, null);
           }
         }
       }
     }
   }
\ No newline at end of file
