diff --git a/tmp/19111129-c2f4-42ec-9dae-3d242a84ab20_buggy.java b/tmp/cb9b5593-949d-4f84-bb88-f97e2a456928_fixed.java
index b98f0a7..5b7fa50 100644
--- a/tmp/19111129-c2f4-42ec-9dae-3d242a84ab20_buggy.java
+++ b/tmp/cb9b5593-949d-4f84-bb88-f97e2a456928_fixed.java
@@ -1,29 +1,34 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+        // Backwards inference for constructor parameters
         for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+          JSType paramType = ct.getParameterType(arg.getChildIndex() - 1);
+          if (paramType != null) {
+            arg.setJSType(paramType);
             scope = traverse(arg, scope);
           }
+        }
+      }
+    }
+  }
+  n.setJSType(type);
   return scope;
 }
\ No newline at end of file
