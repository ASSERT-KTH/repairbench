diff --git a/tmp/efcea8be-07cc-49d6-85fd-3861667bbd73_buggy.java b/tmp/5f9bef93-9488-4972-a300-a7a8240b8452_fixed.java
index b98f0a7..77acb7a 100644
--- a/tmp/efcea8be-07cc-49d6-85fd-3861667bbd73_buggy.java
+++ b/tmp/5f9bef93-9488-4972-a300-a7a8240b8452_fixed.java
@@ -1,29 +1,45 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+
+    // Infer types for the arguments based on the constructor's parameter types
+    if (type != null && type instanceof ObjectType) {
+      ObjectType objectType = (ObjectType) type;
+      FunctionType constructorFunction = objectType.getConstructor();
+      if (constructorFunction != null) {
         for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+          JSType paramType = constructorFunction.getParameterType(arg.getChildIndex());
+          if (paramType != null) {
+            arg.setJSType(paramType);
+          }
           scope = traverse(arg, scope);
         }
+      }
+    } else {
+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        scope = traverse(arg, scope);
+      }
+    }
     return scope;
   }
\ No newline at end of file
