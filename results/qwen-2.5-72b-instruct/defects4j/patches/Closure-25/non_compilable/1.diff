diff --git a/tmp/a0e303bd-1b21-4221-b714-a9f50d0e56c3_buggy.java b/tmp/38a8ad25-0935-412b-9b87-9173b9f534b4_fixed.java
index b98f0a7..7881ba1 100644
--- a/tmp/a0e303bd-1b21-4221-b714-a9f50d0e56c3_buggy.java
+++ b/tmp/38a8ad25-0935-412b-9b87-9173b9f534b4_fixed.java
@@ -1,29 +1,38 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
+    // Propagate type information back to the argument node
+    if (type != null && type instanceof ObjectType) {
+      ObjectType objectType = (ObjectType) type;
+      JSType argType = arg.getJSType();
+      if (argType != null && argType.isUnknownType()) {
+        argType = ((UnknownType) argType).getGreatestSubtype(objectType);
+        arg.setJSType(argType);
+      }
+    }
   }
   return scope;
 }
\ No newline at end of file
