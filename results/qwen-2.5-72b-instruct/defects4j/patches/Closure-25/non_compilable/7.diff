diff --git a/tmp/16abc6a0-27b0-449f-a5c6-064ea2c339ee_buggy.java b/tmp/cacebf92-c2b1-448b-b566-a34b184a2338_fixed.java
index b98f0a7..201d15e 100644
--- a/tmp/16abc6a0-27b0-449f-a5c6-064ea2c339ee_buggy.java
+++ b/tmp/cacebf92-c2b1-448b-b566-a34b184a2338_fixed.java
@@ -1,29 +1,41 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
+    if (type instanceof ObjectType) {
+      ObjectType objectType = (ObjectType) type;
+      for (Node param : ct.getParameters()) {
+        JSType paramType = param.getJSType();
+        if (paramType != null) {
+          Node correspondingArg = arg;
+          if (correspondingArg != null) {
+            correspondingArg.setJSType(paramType);
+          }
+        }
+      }
+    }
   }
   return scope;
 }
\ No newline at end of file
