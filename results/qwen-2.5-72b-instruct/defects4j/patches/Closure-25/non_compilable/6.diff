diff --git a/tmp/62e93892-33e2-439d-8793-f2c59c8e4a22_buggy.java b/tmp/0c77b2c6-bcd3-4e3c-9355-a4125abeb1b9_fixed.java
index b98f0a7..a1569e6 100644
--- a/tmp/62e93892-33e2-439d-8793-f2c59c8e4a22_buggy.java
+++ b/tmp/0c77b2c6-bcd3-4e3c-9355-a4125abeb1b9_fixed.java
@@ -1,29 +1,38 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
+    // Infer types for the arguments based on the constructor's parameter types
+    if (ct != null) {
+      List<JSType> parameterTypes = ct.getParameterTypes();
+      int index = constructor.getNext().ChildIndex() - 1;
+      if (index < parameterTypes.size()) {
+        JSType parameterType = parameterTypes.get(index);
+        arg.setJSType(parameterType);
+      }
+    }
   }
   return scope;
 }
\ No newline at end of file
