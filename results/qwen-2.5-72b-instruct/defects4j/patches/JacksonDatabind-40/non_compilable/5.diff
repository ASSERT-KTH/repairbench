diff --git a/tmp/c551a0eb-f695-412c-ab3c-1b77e4be8468_buggy.java b/tmp/a606a55a-f590-4fb2-857f-90203f546379_fixed.java
index e69de29..af62869 100644
--- a/tmp/c551a0eb-f695-412c-ab3c-1b77e4be8468_buggy.java
+++ b/tmp/a606a55a-f590-4fb2-857f-90203f546379_fixed.java
@@ -0,0 +1,29 @@
+private void _testEmptyToNullCoercion(Class<?> clazz, Object defaultValue) throws Exception {
+    ObjectMapper mapper = new ObjectMapper();
+    mapper.enable(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES);
+    mapper.enable(DeserializationFeature.READ_EMPTY_STRING_AS_NULL);
+
+    String emptyJson = "{\"value\": \"\"}";
+    JsonNode node = mapper.readTree(emptyJson);
+    JsonNode valueNode = node.get("value");
+
+    if (clazz.isPrimitive()) {
+        if (valueNode.isNull() || valueNode.asText().isEmpty()) {
+            if (clazz == int.class) {
+                assertEquals(defaultValue, mapper.treeToValue(node, int.class));
+            } else if (clazz == long.class) {
+                assertEquals(defaultValue, mapper.treeToValue(node, long.class));
+            } else if (clazz == double.class) {
+                assertEquals(defaultValue, mapper.treeToValue(node, double.class));
+            } else if (clazz == float.class) {
+                assertEquals(defaultValue, mapper.treeToValue(node, float.class));
+            } else {
+                fail("Unsupported primitive type: " + clazz);
+            }
+        } else {
+            fail("Value node should be null or empty string");
+        }
+    } else {
+        fail("This test is for primitives only");
+    }
+}
\ No newline at end of file
