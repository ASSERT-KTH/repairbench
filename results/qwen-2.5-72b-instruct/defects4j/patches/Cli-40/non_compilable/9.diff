diff --git a/tmp/719649db-d1cb-45b5-8935-6d3e329d4f7a_buggy.java b/tmp/9234871a-0537-4b17-84d4-669c5e0ba6a8_fixed.java
index a7d0787..1b2c128 100644
--- a/tmp/719649db-d1cb-45b5-8935-6d3e329d4f7a_buggy.java
+++ b/tmp/9234871a-0537-4b17-84d4-669c5e0ba6a8_fixed.java
@@ -1,54 +1,132 @@
+import java.lang.reflect.Constructor;
+import java.util.Date;
+import java.net.URL;
+import java.io.File;
+import java.text.ParseException;
+
+public class TypeHandler {
+
+    // Assuming these methods are defined elsewhere in the class
+    private static Object createObject(String str) {
+        // Implementation for creating an object from a string
+        return null;
+    }
+
+    private static Number createNumber(String str) {
+        // Implementation for creating a number from a string
+        return null;
+    }
+
+    private static Date createDate(String str) {
+        // Implementation for creating a date from a string
+        return null;
+    }
+
+    private static Class<?> createClass(String str) {
+        // Implementation for creating a class from a string
+        return null;
+    }
+
+    private static File createFile(String str) {
+        // Implementation for creating a file from a string
+        return null;
+    }
+
+    private static File openFile(String str) {
+        // Implementation for opening a file from a string
+        return null;
+    }
+
+    private static File[] createFiles(String str) {
+        // Implementation for creating multiple files from a string
+        return null;
+    }
+
+    private static URL createURL(String str) {
+        // Implementation for creating a URL from a string
+        return null;
+    }
+
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        else if (clazz == Integer.class)
+        {
+            try {
+                return (T) Integer.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Invalid integer value: " + str, 0);
+            }
+        }
+        else if (clazz == Double.class)
+        {
+            try {
+                return (T) Double.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Invalid double value: " + str, 0);
+            }
+        }
+        else if (clazz == Long.class)
+        {
+            try {
+                return (T) Long.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Invalid long value: " + str, 0);
+            }
+        }
+        else if (clazz == Boolean.class)
+        {
+            return (T) Boolean.valueOf(str);
+        }
         else
         {
-            return null;
+            throw new ParseException("Unsupported type: " + clazz.getName());
+        }
     }
 }
\ No newline at end of file
