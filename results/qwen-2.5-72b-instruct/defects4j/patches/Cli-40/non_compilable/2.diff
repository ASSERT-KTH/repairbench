diff --git a/tmp/6efc67c9-691f-41e3-b72f-a82acec0cf26_buggy.java b/tmp/daea252d-075d-4c49-9d2c-000dee7c32da_fixed.java
index a7d0787..ddbb932 100644
--- a/tmp/6efc67c9-691f-41e3-b72f-a82acec0cf26_buggy.java
+++ b/tmp/daea252d-075d-4c49-9d2c-000dee7c32da_fixed.java
@@ -1,54 +1,96 @@
+import java.lang.reflect.InvocationTargetException;
+import java.text.ParseException;
+import java.util.Date;
+
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
+    else if (Number.class.isAssignableFrom(clazz))
+    {
+        try
+        {
+            if (clazz == Integer.class)
+            {
+                return (T) Integer.valueOf(str);
+            }
+            else if (clazz == Long.class)
+            {
+                return (T) Long.valueOf(str);
+            }
+            else if (clazz == Double.class)
+            {
+                return (T) Double.valueOf(str);
+            }
+            else if (clazz == Float.class)
+            {
+                return (T) Float.valueOf(str);
+            }
+            else if (clazz == Short.class)
+            {
+                return (T) Short.valueOf(str);
+            }
+            else if (clazz == Byte.class)
+            {
+                return (T) Byte.valueOf(str);
+            }
+            else
+            {
+                throw new ParseException("Unsupported number type: " + clazz.getName());
+            }
+        }
+        catch (NumberFormatException e)
+        {
+            throw new ParseException("Invalid number format: " + str, e);
+        }
+    }
     else
     {
-            return null;
+        throw new ParseException("Unsupported type: " + clazz.getName());
     }
 }
\ No newline at end of file
