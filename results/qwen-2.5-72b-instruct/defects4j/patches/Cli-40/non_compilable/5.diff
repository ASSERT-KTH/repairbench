diff --git a/tmp/c05b0d46-f244-4d72-ad6f-2d4770a149b6_buggy.java b/tmp/e8cf48fc-50e1-4cb1-bb1c-1404cb1d1ce1_fixed.java
index a7d0787..1743d7b 100644
--- a/tmp/c05b0d46-f244-4d72-ad6f-2d4770a149b6_buggy.java
+++ b/tmp/e8cf48fc-50e1-4cb1-bb1c-1404cb1d1ce1_fixed.java
@@ -1,54 +1,150 @@
+import java.util.regex.Pattern;
+import java.text.ParseException;
+import java.net.URL;
+import java.io.File;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
+public class TypeHandler {
+
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        else if (clazz == Integer.class)
+        {
+            try {
+                return (T) Integer.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Invalid integer value: " + str);
+            }
+        }
+        else if (clazz == Long.class)
+        {
+            try {
+                return (T) Long.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Invalid long value: " + str);
+            }
+        }
+        else if (clazz == Double.class)
+        {
+            try {
+                return (T) Double.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Invalid double value: " + str);
+            }
+        }
+        else if (clazz == Boolean.class)
+        {
+            return (T) Boolean.valueOf(str);
+        }
         else
         {
-            return null;
+            throw new ParseException("Unsupported type: " + clazz.getName());
+        }
+    }
+
+    // Dummy implementations for the helper methods
+    private static Object createObject(String str) {
+        // Implementation
+        return str;
+    }
+
+    private static Number createNumber(String str) {
+        // Implementation
+        return Integer.parseInt(str);
+    }
+
+    private static Date createDate(String str) {
+        // Implementation
+        try {
+            return new SimpleDateFormat("yyyy-MM-dd", Locale.US).parse(str);
+        } catch (java.text.ParseException e) {
+            throw new ParseException("Invalid date value: " + str);
+        }
+    }
+
+    private static Class<?> createClass(String str) {
+        // Implementation
+        try {
+            return Class.forName(str);
+        } catch (ClassNotFoundException e) {
+            throw new ParseException("Class not found: " + str);
+        }
+    }
+
+    private static File createFile(String str) {
+        // Implementation
+        return new File(str);
+    }
+
+    private static File openFile(String str) {
+        // Implementation
+        File file = new File(str);
+        if (!file.exists()) {
+            throw new ParseException("File does not exist: " + str);
+        }
+        return file;
+    }
+
+    private static File[] createFiles(String str) {
+        // Implementation
+        return new File[]{new File(str)};
+    }
+
+    private static URL createURL(String str) {
+        // Implementation
+        try {
+            return new URL(str);
+        } catch (java.net.MalformedURLException e) {
+            throw new ParseException("Invalid URL: " + str);
+        }
     }
 }
\ No newline at end of file
