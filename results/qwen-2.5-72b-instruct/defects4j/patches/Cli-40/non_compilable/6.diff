diff --git a/tmp/f289826c-19aa-4cf8-b9c0-582309a51d2e_buggy.java b/tmp/369d2dff-766a-42e1-841d-69e86b21cd6c_fixed.java
index a7d0787..fc87f3c 100644
--- a/tmp/f289826c-19aa-4cf8-b9c0-582309a51d2e_buggy.java
+++ b/tmp/369d2dff-766a-42e1-841d-69e86b21cd6c_fixed.java
@@ -1,54 +1,80 @@
+import java.text.ParseException;
+import java.util.regex.Pattern;
+
+public class TypeHandler {
+
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            try {
+                return clazz.cast(convertToType(str, clazz));
+            } catch (Exception e) {
+                throw new ParseException("Failed to create value for type " + clazz + " from string " + str, e);
+            }
+        }
+    }
+
+    private static <T> T convertToType(String str, Class<T> clazz) throws Exception {
+        if (clazz == Integer.class) {
+            return clazz.cast(Integer.parseInt(str));
+        } else if (clazz == Long.class) {
+            return clazz.cast(Long.parseLong(str));
+        } else if (clazz == Float.class) {
+            return clazz.cast(Float.parseFloat(str));
+        } else if (clazz == Double.class) {
+            return clazz.cast(Double.parseDouble(str));
+        } else if (clazz == Boolean.class) {
+            return clazz.cast(Boolean.parseBoolean(str));
+        } else {
+            throw new IllegalArgumentException("Unsupported type: " + clazz);
+        }
     }
 }
\ No newline at end of file
