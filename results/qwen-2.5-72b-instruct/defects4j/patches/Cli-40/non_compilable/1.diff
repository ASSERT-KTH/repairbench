diff --git a/tmp/e1235621-9d05-4231-98f6-674446e33987_buggy.java b/tmp/f30bd7c0-e00e-4c58-adce-14d0a4fe0156_fixed.java
index a7d0787..c98e49c 100644
--- a/tmp/e1235621-9d05-4231-98f6-674446e33987_buggy.java
+++ b/tmp/f30bd7c0-e00e-4c58-adce-14d0a4fe0156_fixed.java
@@ -1,54 +1,108 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
-    @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
+import java.util.regex.Pattern;
+
+public class TypeHandler {
+
+    public static final Class<String> STRING_VALUE = String.class;
+    public static final Class<Object> OBJECT_VALUE = Object.class;
+    public static final Class<Number> NUMBER_VALUE = Number.class;
+    public static final Class<Date> DATE_VALUE = Date.class;
+    public static final Class<Class<?>> CLASS_VALUE = Class.class;
+    public static final Class<File> FILE_VALUE = File.class;
+    public static final Class<File> EXISTING_FILE_VALUE = File.class;
+    public static final Class<File[]> FILES_VALUE = File[].class;
+    public static final Class<URL> URL_VALUE = URL.class;
+
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
+        if (STRING_VALUE == clazz)
         {
             return (T) str;
         }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
+        else if (OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+        else if (NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
+        else if (DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
+        else if (CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
+        else if (FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
+        else if (EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
+        else if (FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
+        else if (URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            try {
+                return clazz.getConstructor(String.class).newInstance(str);
+            } catch (Exception e) {
+                throw new ParseException("Unable to create value for class " + clazz.getName() + " from string " + str, e);
+            }
+        }
+    }
+
+    // Dummy methods for the sake of completeness
+    private static Object createObject(String str) {
+        return str;
+    }
+
+    private static Number createNumber(String str) {
+        return Integer.parseInt(str);
+    }
+
+    private static Date createDate(String str) {
+        return new Date(Long.parseLong(str));
+    }
+
+    private static Class<?> createClass(String str) {
+        try {
+            return Class.forName(str);
+        } catch (ClassNotFoundException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    private static File createFile(String str) {
+        return new File(str);
+    }
+
+    private static File openFile(String str) {
+        File file = new File(str);
+        if (file.exists()) {
+            return file;
+        } else {
+            throw new RuntimeException("File does not exist: " + str);
+        }
+    }
+
+    private static File[] createFiles(String str) {
+        return new File(str).listFiles();
+    }
+
+    private static URL createURL(String str) {
+        try {
+            return new URL(str);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
     }
 }
\ No newline at end of file
