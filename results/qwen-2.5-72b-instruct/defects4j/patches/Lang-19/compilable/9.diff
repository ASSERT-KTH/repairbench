diff --git a/tmp/92a59944-d0c3-4a76-872c-54f1f1ddcd2a_buggy.java b/tmp/4466bc6b-e304-4ea9-8e96-e71b5355ab3f_fixed.java
index 72a422c..6589441 100644
--- a/tmp/92a59944-d0c3-4a76-872c-54f1f1ddcd2a_buggy.java
+++ b/tmp/4466bc6b-e304-4ea9-8e96-e71b5355ab3f_fixed.java
@@ -1,51 +1,51 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        if(index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if(start < seqEnd) {
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
+                }
             }
 
             int end = start;
             // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while(end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
+            if(end > start) {
                 int entityValue;
                 try {
                     if(isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
                 } catch(NumberFormatException nfe) {
                     System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
                     return 0;
                 }
 
                 if(entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                return 2 + (end - start) + (isHex ? 1 : 0) + (input.charAt(end) == ';' ? 1 : 0);
+            }
         }
         return 0;
     }
\ No newline at end of file
