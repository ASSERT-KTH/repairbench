diff --git a/tmp/fc6965b1-2377-4f98-8b1a-6f5f7b6e1d8e_buggy.java b/tmp/3fca4858-a127-4940-8ba0-b8f93bbb39a1_fixed.java
index 6c0aa19..3008f83 100644
--- a/tmp/fc6965b1-2377-4f98-8b1a-6f5f7b6e1d8e_buggy.java
+++ b/tmp/3fca4858-a127-4940-8ba0-b8f93bbb39a1_fixed.java
@@ -1,20 +1,24 @@
     /**
      * @param encoding the encoding to use for file names, use null
      * for the platform's default encoding
      * @param useUnicodeExtraFields whether to use InfoZIP Unicode
      * Extra Fields (if present) to set the file names.
      * @param allowStoredEntriesWithDataDescriptor whether the stream
      * will try to read STORED entries that use a data descriptor
      * @since 1.1
      */
     public ZipArchiveInputStream(InputStream inputStream,
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+        in = new PushbackInputStream(inputStream, 512); // Ensure a reasonable buffer size
+        this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;
+        // Initialize the stream to read the first entry
+        try {
+            initialize();
+        } catch (IOException e) {
+            throw new IllegalArgumentException("Failed to initialize ZipArchiveInputStream", e);
+        }
     }
\ No newline at end of file
