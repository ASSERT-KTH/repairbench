diff --git a/tmp/90d86417-7a84-48ef-bf0d-761bdcbc5fc2_buggy.java b/tmp/815c001d-a310-4fd8-89c3-afffa4cc67b0_fixed.java
index 63641d0..3150072 100644
--- a/tmp/90d86417-7a84-48ef-bf0d-761bdcbc5fc2_buggy.java
+++ b/tmp/815c001d-a310-4fd8-89c3-afffa4cc67b0_fixed.java
@@ -1,33 +1,38 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+    if (replacementFnType == null) {
+      replacementFnType = fnType;
+    }
 
     callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+    JSType returnType = replacementFnType.getReturnType();
+    if (returnType == null) {
+      returnType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
+    }
+    n.setJSType(returnType);
 
     return replacer.madeChanges;
   }
\ No newline at end of file
