diff --git a/tmp/4462f03e-3596-4f29-a911-fd7ad4d9f2bb_buggy.java b/tmp/1fb61249-ed95-415c-b900-a861bd7b15d6_fixed.java
index a9a5e27..9439261 100644
--- a/tmp/4462f03e-3596-4f29-a911-fd7ad4d9f2bb_buggy.java
+++ b/tmp/1fb61249-ed95-415c-b900-a861bd7b15d6_fixed.java
@@ -1,24 +1,46 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
+        
+        if (val1 == 0 || val2 == 0) {
+            return 0L;
+        }
+
+        if (val1 == Long.MIN_VALUE && val2 == -1) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+
+        if (val2 < 0) {
+            if (val1 < 0 && val1 < Long.MIN_VALUE / (long) val2) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+            if (val1 > 0 && val1 > Long.MAX_VALUE / (long) val2) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        } else {
+            if (val1 < 0 && val1 < Long.MAX_VALUE / (long) val2) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+            if (val1 > 0 && val1 > Long.MAX_VALUE / (long) val2) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        }
+
         long total = val1 * val2;
-        if (total / val2 != val1) {
-          throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
-        }
         return total;
     }
\ No newline at end of file
