diff --git a/tmp/44a6eb02-bd20-4de3-bac7-544ed5920832_buggy.java b/tmp/639f5116-6ad0-47e9-a7ec-2b6f020f77c3_fixed.java
index a9a5e27..20324c4 100644
--- a/tmp/44a6eb02-bd20-4de3-bac7-544ed5920832_buggy.java
+++ b/tmp/639f5116-6ad0-47e9-a7ec-2b6f020f77c3_fixed.java
@@ -1,24 +1,59 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
-                return -val1;
-            case 0:
+        if (val2 == 0) {
             return 0L;
-            case 1:
+        }
+        if (val2 == 1) {
             return val1;
         }
+        if (val2 == -1) {
+            return -val1;
+        }
+        
+        if (val1 == 0) {
+            return 0L;
+        }
+        
+        if (val1 == Long.MAX_VALUE) {
+            if (val2 > 0) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+            if (val2 == -1) {
+                return -val1;
+            }
+            if (val2 < -1) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        } else if (val1 == Long.MIN_VALUE) {
+            if (val2 > 0) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+            if (val2 == -1) {
+                return -val1;
+            }
+            if (val2 < -1) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        }
+
+        if (val2 > 0 && val1 > 0 && val1 > Long.MAX_VALUE / val2) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+        if (val2 < 0 && val1 < 0 && val1 < Long.MAX_VALUE / val2) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+        
         long total = val1 * val2;
         if (total / val2 != val1) {
             throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
\ No newline at end of file
