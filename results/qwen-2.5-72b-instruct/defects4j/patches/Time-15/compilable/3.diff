diff --git a/tmp/9d7d97dd-64cd-4b2f-a9e4-2fd584e73283_buggy.java b/tmp/4baa1a76-8a66-4dc9-80b9-55d7070d6644_fixed.java
index a9a5e27..bcc2ea4 100644
--- a/tmp/9d7d97dd-64cd-4b2f-a9e4-2fd584e73283_buggy.java
+++ b/tmp/4baa1a76-8a66-4dc9-80b9-55d7070d6644_fixed.java
@@ -1,24 +1,48 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
-                return -val1;
-            case 0:
+        if (val2 == 0) {
             return 0L;
-            case 1:
+        }
+        if (val2 == 1) {
             return val1;
         }
-        long total = val1 * val2;
-        if (total / val2 != val1) {
+        if (val2 == -1) {
+            return -val1;
+        }
+        
+        if (val1 == 0) {
+            return 0L;
+        }
+        
+        if (val2 > 0) {
+            if (val1 > 0) {
+                if (val1 > Long.MAX_VALUE / val2) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
+            } else {
+                if (val1 < Long.MIN_VALUE / val2) {
                     throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
                 }
-        return total;
+            }
+        } else {
+            if (val1 > 0) {
+                if (val1 > Long.MIN_VALUE / val2) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
+            } else {
+                if (val1 < Long.MAX_VALUE / val2) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
+            }
+        }
+        
+        return val1 * val2;
     }
\ No newline at end of file
