diff --git a/tmp/10c7295b-cb19-4ce2-bb5a-b0b17e06aa87_buggy.java b/tmp/7993d683-f19c-486f-9039-9c073131171e_fixed.java
index a9a5e27..f67c075 100644
--- a/tmp/10c7295b-cb19-4ce2-bb5a-b0b17e06aa87_buggy.java
+++ b/tmp/7993d683-f19c-486f-9039-9c073131171e_fixed.java
@@ -1,24 +1,41 @@
-    /**
-     * Multiply two values throwing an exception if overflow occurs.
-     * 
-     * @param val1  the first value
-     * @param val2  the second value
-     * @return the new total
-     * @throws ArithmeticException if the value is too big or too small
-     * @since 1.2
-     */
 public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
-                return -val1;
-            case 0:
+    // Handle special cases
+    if (val2 == 0) {
         return 0L;
-            case 1:
+    }
+    if (val2 == 1) {
         return val1;
     }
-        long total = val1 * val2;
-        if (total / val2 != val1) {
+    if (val2 == -1) {
+        return -val1;
+    }
+
+    // Check for potential overflow
+    if (val1 == 0) {
+        return 0L;
+    }
+    if (val2 > 0) {
+        if (val1 > 0) {
+            if (val1 > Long.MAX_VALUE / val2) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        } else {
+            if (val1 < Long.MIN_VALUE / val2) {
                 throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
             }
-        return total;
+        }
+    } else {
+        if (val1 > 0) {
+            if (val1 > Long.MIN_VALUE / val2) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        } else {
+            if (val1 < Long.MAX_VALUE / val2) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+        }
+    }
+
+    // Perform the multiplication
+    return val1 * val2;
 }
\ No newline at end of file
