diff --git a/tmp/6aeb16e3-eefd-4fe3-9c5d-039c3419e581_buggy.java b/tmp/ee0a5958-c49b-4105-b703-8aa456b606b9_fixed.java
index 5f8ac1a..1b5d599 100644
--- a/tmp/6aeb16e3-eefd-4fe3-9c5d-039c3419e581_buggy.java
+++ b/tmp/ee0a5958-c49b-4105-b703-8aa456b606b9_fixed.java
@@ -1,34 +1,42 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
     if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+        int r = compareNodePointers(p1, depth1, p2.getParent(), depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+        int r = compareNodePointers(p1.getParent(), depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
+        if (p1 == null || p2 == null) {
+            // If one of the pointers is null and the other is not, they do not belong to the same tree
+            return p1 == null ? -1 : 1;
+        }
+        if (p1.getParent() == null || p2.getParent() == null) {
+            // Both pointers are at the root level, but not the same node
+            return p1.compareChildNodePointers(p1, p2);
+        }
         throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                         + p1 + "' and '" + p2 + "'");
     }
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+    int r = compareNodePointers(p1.getParent(), depth1 - 1, p2.getParent(), depth2 - 1);
     if (r != 0) {
         return r;
     }
 
-        return p1.parent.compareChildNodePointers(p1, p2);
+    return p1.getParent().compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
