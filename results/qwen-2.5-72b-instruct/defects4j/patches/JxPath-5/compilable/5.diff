diff --git a/tmp/2710e91b-bf8e-4205-bc63-bc1061fadc4f_buggy.java b/tmp/f5ce2ab4-86ef-4793-a883-77c01bea4bc6_fixed.java
index 5f8ac1a..c304123 100644
--- a/tmp/2710e91b-bf8e-4205-bc63-bc1061fadc4f_buggy.java
+++ b/tmp/f5ce2ab4-86ef-4793-a883-77c01bea4bc6_fixed.java
@@ -1,34 +1,41 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
     if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+        int r = compareNodePointers(p1, depth1, p2.getParent(), depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+        int r = compareNodePointers(p1.getParent(), depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
-        if (p1 != null && p1.equals(p2)) {
+    if (p1 != null && p2 != null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
+        if (p1 == null || p2 == null) {
+            return p1 == null ? -1 : 1;
+        }
+        if (!p1.isAttribute() && !p2.isAttribute()) {
             throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                 + p1 + "' and '" + p2 + "'");
         }
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+        return p1.getValue().toString().compareTo(p2.getValue().toString());
+    }
+
+    int r = compareNodePointers(p1.getParent(), depth1 - 1, p2.getParent(), depth2 - 1);
     if (r != 0) {
         return r;
     }
 
-        return p1.parent.compareChildNodePointers(p1, p2);
+    return p1.getParent().compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
