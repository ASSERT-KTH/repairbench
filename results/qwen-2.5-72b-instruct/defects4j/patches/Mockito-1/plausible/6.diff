diff --git a/tmp/c14ce52c-10bf-4f09-b09c-0aba61361403_buggy.java b/tmp/93680a22-43f2-4415-8ae1-dd620fa6c360_fixed.java
index 1c875ad..e924ab8 100644
--- a/tmp/c14ce52c-10bf-4f09-b09c-0aba61361403_buggy.java
+++ b/tmp/93680a22-43f2-4415-8ae1-dd620fa6c360_fixed.java
@@ -1,31 +1,25 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
         int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        Object lastArgument = invocation.getRawArguments()[indexOfVararg];
+        if (lastArgument != null && lastArgument.getClass().isArray()) {
+            int varargLength = Array.getLength(lastArgument);
+            for (int i = 0; i < varargLength; i++) {
+                Object varargElement = Array.get(lastArgument, i);
+                captureFromMatcher(matchers.get(indexOfVararg), varargElement, invocation);
+            }
+        } else {
+            captureFromMatcher(matchers.get(indexOfVararg), lastArgument, invocation);
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            captureFromMatcher(matchers.get(position), invocation.getArgumentAt(position, Object.class), invocation);
         }
     }
 }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+private void captureFromMatcher(Matcher matcher, Object argument, Invocation invocation) {
+    if (matcher instanceof CapturesArguments) {
+        ((CapturesArguments) matcher).captureFrom(argument);
+    }
 }
\ No newline at end of file
