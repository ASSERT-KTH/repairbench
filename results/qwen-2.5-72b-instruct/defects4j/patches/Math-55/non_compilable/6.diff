diff --git a/tmp/bac627d9-02d7-4e5a-84af-bd858b0d2342_buggy.java b/tmp/4b322a4c-0910-4565-b3b8-406a71b5ed10_fixed.java
index 1478ee1..65f2eb5 100644
--- a/tmp/bac627d9-02d7-4e5a-84af-bd858b0d2342_buggy.java
+++ b/tmp/4b322a4c-0910-4565-b3b8-406a71b5ed10_fixed.java
@@ -1,24 +1,28 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // Compute the norms of the vectors
+    double norm1 = v1.getNorm();
+    double norm2 = v2.getNorm();
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Rescale the vectors to ensure their norms are the same order of magnitude
+    double scale = FastMath.max(1.0, FastMath.max(norm1, norm2));
+    Vector3D scaledV1 = v1.scalarMultiply(1.0 / scale);
+    Vector3D scaledV2 = v2.scalarMultiply(1.0 / scale);
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // Compute rho as an 8-bit approximation of v1.v2 / v2.v2
+    double dotV1V2 = scaledV1.dotProduct(scaledV2);
+    double dotV2V2 = scaledV2.getNormSq();
+    double rho = dotV1V2 * 256.0 / dotV2V2;
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    // Compute v3 = v1 - rho * v2
+    Vector3D v3 = scaledV1.subtract(scaledV2.scalarMultiply(rho));
 
+    // Compute the cross product from v3 and v2 instead of v1 and v2
+    double x = v3.getY() * scaledV2.getZ() - v3.getZ() * scaledV2.getY();
+    double y = v3.getZ() * scaledV2.getX() - v3.getX() * scaledV2.getZ();
+    double z = v3.getX() * scaledV2.getY() - v3.getY() * scaledV2.getX();
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Rescale the result back to the original scale
+    return new Vector3D(x * scale, y * scale, z * scale);
 
 }
\ No newline at end of file
