diff --git a/tmp/5f72be8f-860d-4a4a-9190-c33cf74ab4c1_buggy.java b/tmp/437920bc-ae46-415c-8b0e-ece91469ab93_fixed.java
index 1478ee1..20e6b19 100644
--- a/tmp/5f72be8f-860d-4a4a-9190-c33cf74ab4c1_buggy.java
+++ b/tmp/437920bc-ae46-415c-8b0e-ece91469ab93_fixed.java
@@ -1,24 +1,32 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // Compute the norms of the vectors
+    double normV1 = v1.getNorm();
+    double normV2 = v2.getNorm();
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Rescale both vectors to have similar magnitudes
+    double scale = FastMath.max(normV1, normV2);
+    if (scale == 0.0) {
+        // If both vectors are zero, the cross product is zero
+        return new Vector3D(0.0, 0.0, 0.0);
+    }
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    Vector3D scaledV1 = new Vector3D(1.0 / scale, v1);
+    Vector3D scaledV2 = new Vector3D(1.0 / scale, v2);
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    // Compute the 8-bit approximation of rho = v1.v2 / v2.v2
+    double dotProductV1V2 = scaledV1.dotProduct(scaledV2);
+    double dotProductV2V2 = scaledV2.getNormSquare();
+    double rho = dotProductV1V2 / dotProductV2V2;
 
+    // Compute v3 = v1 - rho * v2
+    Vector3D v3 = scaledV1.subtract(new Vector3D(rho, scaledV2));
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute the cross product from v3 and v2
+    double x = v3.getY() * scaledV2.getZ() - v3.getZ() * scaledV2.getY();
+    double y = v3.getZ() * scaledV2.getX() - v3.getX() * scaledV2.getZ();
+    double z = v3.getX() * scaledV2.getY() - v3.getY() * scaledV2.getX();
 
+    // Scale the result back to the original magnitude
+    return new Vector3D(scale * scale, x, y, z);
 }
\ No newline at end of file
