diff --git a/tmp/899efc4e-0f2b-4853-87e0-0d0de3377156_buggy.java b/tmp/f8f40d4d-dda7-436a-8e20-3765fdec31b0_fixed.java
index 1478ee1..f16c6a2 100644
--- a/tmp/899efc4e-0f2b-4853-87e0-0d0de3377156_buggy.java
+++ b/tmp/f8f40d4d-dda7-436a-8e20-3765fdec31b0_fixed.java
@@ -1,24 +1,27 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // Compute the norms of the vectors
+    double norm1 = v1.getNorm();
+    double norm2 = v2.getNorm();
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Rescale both vectors to have the same order of magnitude
+    double scale1 = norm1 / norm2;
+    double scale2 = norm2 / norm1;
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // Compute the rescaled vectors
+    Vector3D v1Rescaled = v1.scalarMultiply(scale2);
+    Vector3D v2Rescaled = v2.scalarMultiply(scale1);
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    // Compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    double dotProduct = v1.dotProduct(v2);
+    double norm2Squared = v2.getNormSq();
+    double rho = dotProduct / norm2Squared;
 
+    // Compute v3 = v1 - rho * v2
+    Vector3D v3 = v1.subtract(v2.scalarMultiply(rho));
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    // Compute the cross product from v3 and v2 instead of v1 and v2
+    return new Vector3D(v3.getY() * v2.getZ() - v3.getZ() * v2.getY(),
+                        v3.getZ() * v2.getX() - v3.getX() * v2.getZ(),
+                        v3.getX() * v2.getY() - v3.getY() * v2.getX());
 }
\ No newline at end of file
