diff --git a/tmp/abb8ff36-f97f-4a10-b906-8c1466a9cde7_buggy.java b/tmp/db746d15-bc56-4b76-aed7-02f4fd310242_fixed.java
index 1478ee1..8ddc5c8 100644
--- a/tmp/abb8ff36-f97f-4a10-b906-8c1466a9cde7_buggy.java
+++ b/tmp/db746d15-bc56-4b76-aed7-02f4fd310242_fixed.java
@@ -1,24 +1,32 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Compute the norm of the vectors
+      double norm1 = v1.getNorm();
+      double norm2 = v2.getNorm();
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      // Compute the scale factor to rescale vectors to the same order of magnitude
+      double scaleFactor = FastMath.sqrt(norm1 / norm2);
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // Rescale the vectors
+      Vector3D v1Rescaled = v1.scalarMultiply(scaleFactor);
+      Vector3D v2Rescaled = v2.scalarMultiply(1.0 / scaleFactor);
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // Compute rho as an 8 bits approximation of v1Rescaled.v2Rescaled / v2Rescaled.v2Rescaled
+      double dotProductV1V2 = v1Rescaled.dotProduct(v2Rescaled);
+      double dotProductV2V2 = v2Rescaled.getNormSq();
+      double rho = (int) (128.0 * dotProductV1V2 / dotProductV2V2) / 128.0;
 
+      // Compute v3 = v1Rescaled - rho * v2Rescaled
+      Vector3D v3 = v1Rescaled.subtract(v2Rescaled.scalarMultiply(rho));
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute the cross product from v3 and v2Rescaled instead of v1Rescaled and v2Rescaled
+      return new Vector3D(v3.getY() * v2Rescaled.getZ() - v3.getZ() * v2Rescaled.getY(),
+                          v3.getZ() * v2Rescaled.getX() - v3.getX() * v2Rescaled.getZ(),
+                          v3.getX() * v2Rescaled.getY() - v3.getY() * v2Rescaled.getX());
 
   }
\ No newline at end of file
