diff --git a/tmp/4abc2a6f-e940-4818-aa41-f871cb877290_buggy.java b/tmp/732ddd5f-1ae3-4324-a909-3a5d26a8f9b9_fixed.java
index 1478ee1..b38ddd5 100644
--- a/tmp/4abc2a6f-e940-4818-aa41-f871cb877290_buggy.java
+++ b/tmp/732ddd5f-1ae3-4324-a909-3a5d26a8f9b9_fixed.java
@@ -1,24 +1,23 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
     // rescale both vectors without losing precision,
     // to ensure their norm are the same order of magnitude
 
     // we reduce cancellation errors by preconditioning,
     // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
     // v3 without loss of precision. See Kahan lecture
     // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
     // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    double v2Norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+    double v1DotV2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+    double rho = (int) (128 * v1DotV2 / v2Norm2) / 128.0;
 
+    // compute v3 = v1 - rho v2
+    Vector3D v3 = new Vector3D(1, v1, -rho, v2);
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    return new Vector3D(v3.y * v2.z - v3.z * v2.y, v3.z * v2.x - v3.x * v2.z, v3.x * v2.y - v3.y * v2.x);
 
 }
\ No newline at end of file
