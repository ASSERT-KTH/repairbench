diff --git a/tmp/294ffba8-efd5-47b3-a4fa-b62d605dcdb1_buggy.java b/tmp/fd7d1c49-ceda-43ea-ad76-738730b6a497_fixed.java
index 1478ee1..99d000e 100644
--- a/tmp/294ffba8-efd5-47b3-a4fa-b62d605dcdb1_buggy.java
+++ b/tmp/fd7d1c49-ceda-43ea-ad76-738730b6a497_fixed.java
@@ -1,24 +1,19 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // Compute the norm of v1 and v2
+    double norm1 = v1.getNorm();
+    double norm2 = v2.getNorm();
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Rescale both vectors to have the same order of magnitude
+    double scale = norm1 / norm2;
+    Vector3D scaledV2 = v2.scalarMultiply(scale);
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // Compute the cross product of the rescaled vectors
+    double x = v1.getY() * scaledV2.getZ() - v1.getZ() * scaledV2.getY();
+    double y = v1.getZ() * scaledV2.getX() - v1.getX() * scaledV2.getZ();
+    double z = v1.getX() * scaledV2.getY() - v1.getY() * scaledV2.getX();
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Rescale the result back to the original scale
+    return new Vector3D(x / scale, y / scale, z / scale);
 
 }
\ No newline at end of file
