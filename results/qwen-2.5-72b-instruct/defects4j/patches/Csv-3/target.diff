diff --git a/tmp/f096ff85-bbe8-4cfc-ba0e-8d85c2dc7565_buggy.java b/tmp/a3fffa19-af45-4ffb-b954-913bf6b1e3d4_fixed.java
index 1ad070d..cab8332 100644
--- a/tmp/f096ff85-bbe8-4cfc-ba0e-8d85c2dc7565_buggy.java
+++ b/tmp/a3fffa19-af45-4ffb-b954-913bf6b1e3d4_fixed.java
@@ -1,38 +1,41 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
         case FF: // TODO is this correct?
         case TAB: // TODO is this correct? Do tabs need to be escaped?
         case BACKSPACE: // TODO is this correct?
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
             // Now check for meta-characters
+            if (isDelimiter(c) || isEscape(c) || isQuoteChar(c) || isCommentStart(c)) {
                 return c;
+            }
             // indicate unexpected char - available from in.getLastChar()
+            return END_OF_STREAM;
         }
     }
