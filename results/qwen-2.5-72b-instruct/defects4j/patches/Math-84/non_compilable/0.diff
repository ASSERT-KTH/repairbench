diff --git a/tmp/f9ab12d7-f067-45fd-acf7-8c1f994087ec_buggy.java b/tmp/bc4977b7-b57f-46b8-af64-2fdcdf9cc790_fixed.java
index 5f1dcf2..7d6b759 100644
--- a/tmp/f9ab12d7-f067-45fd-acf7-8c1f994087ec_buggy.java
+++ b/tmp/bc4977b7-b57f-46b8-af64-2fdcdf9cc790_fixed.java
@@ -1,41 +1,69 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (!isConverged()) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = original;
+                for (int i = 0; i < simplex.length; i++) {
+                    simplex[i] = new RealPointValuePair(
+                        contractPoint(simplex[i].getPoint(), best.getPoint(), gamma),
+                        comparator
+                    );
+                }
+                return;
+            }
+
+            // if neither reflection nor contraction improved the simplex, shrink it
+            for (int i = 1; i < simplex.length; i++) {
+                simplex[i] = new RealPointValuePair(
+                    contractPoint(simplex[i].getPoint(), best.getPoint(), sigma),
+                    comparator
+                );
+            }
 
-            // check convergence
             return;
+
+        }
+
     }
 
+    private boolean isConverged() {
+        // Check if the simplex has converged based on the convergence checker
+        return getConvergenceChecker().converged(getIterations(), simplex[0], simplex[simplex.length - 1]);
     }
 
+    private double[] contractPoint(double[] point, double[] bestPoint, double factor) {
+        double[] contractedPoint = new double[point.length];
+        for (int i = 0; i < point.length; i++) {
+            contractedPoint[i] = bestPoint[i] + factor * (point[i] - bestPoint[i]);
+        }
+        return contractedPoint;
     }
\ No newline at end of file
