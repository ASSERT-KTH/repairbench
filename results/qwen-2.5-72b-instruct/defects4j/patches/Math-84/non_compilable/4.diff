diff --git a/tmp/5545a989-8496-43e8-9e0e-4b3c3c82018a_buggy.java b/tmp/128986aa-9e90-4d82-b0bd-f057a4dbf5d2_fixed.java
index 5f1dcf2..0140925 100644
--- a/tmp/5545a989-8496-43e8-9e0e-4b3c3c82018a_buggy.java
+++ b/tmp/128986aa-9e90-4d82-b0bd-f057a4dbf5d2_fixed.java
@@ -1,41 +1,60 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (!convergenceChecker.converged(iterations, simplex)) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = simplex.clone();
+                    simplex[0] = expanded;
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
+                simplex[0] = contracted;
                 return;
             }
 
+            // perform a shrink step
+            shrinkSimplex(original, comparator);
+
+        }
+
     }
 
+    private void shrinkSimplex(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator) {
+        final RealPointValuePair best = original[0];
+        for (int i = 1; i < simplex.length; i++) {
+            final double[] shrunkPoint = new double[best.getPoint().length];
+            for (int j = 0; j < shrunkPoint.length; j++) {
+                shrunkPoint[j] = best.getPoint()[j] + sigma * (simplex[i].getPoint()[j] - best.getPoint()[j]);
+            }
+            simplex[i] = new RealPointValuePair(shrunkPoint, function.value(shrunkPoint));
+        }
+        // Sort the simplex after shrinking
+        Arrays.sort(simplex, comparator);
     }
\ No newline at end of file
