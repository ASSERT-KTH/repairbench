diff --git a/tmp/650ce31d-59a5-4753-99de-c4518ebb0824_buggy.java b/tmp/d03a7397-baf4-4f12-b590-214df24b24bd_fixed.java
index 5f1dcf2..a7487d0 100644
--- a/tmp/650ce31d-59a5-4753-99de-c4518ebb0824_buggy.java
+++ b/tmp/d03a7397-baf4-4f12-b590-214df24b24bd_fixed.java
@@ -1,41 +1,61 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (!converged()) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
+                simplex = original;
+                for (int i = 0; i < simplex.length; i++) {
+                    simplex[i] = contracted;
+                }
                 return;
             }
 
+            // compute the shrunk simplex
+            shrinkSimplex(gamma, best);
+
+        }
+
     }
 
+    private boolean converged() {
+        // Check if the simplex has converged based on the convergence criteria
+        return convergenceChecker.converged(iterations, simplex[0], simplex[simplex.length - 1]);
+    }
+
+    private void shrinkSimplex(double coefficient, RealPointValuePair best) {
+        for (int i = 1; i < simplex.length; i++) {
+            double[] point = simplex[i].getPointRef();
+            for (int j = 0; j < point.length; j++) {
+                point[j] = best.getPoint()[j] + coefficient * (point[j] - best.getPoint()[j]);
+            }
+            simplex[i] = new RealPointValuePair(point, computeObjectiveValue(point));
+        }
     }
\ No newline at end of file
