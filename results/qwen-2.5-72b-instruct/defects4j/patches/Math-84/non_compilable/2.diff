diff --git a/tmp/a97149de-6deb-44d0-a791-24261d1d76cd_buggy.java b/tmp/e0f27479-bb4a-4c65-a5f4-bc18c07e5464_fixed.java
index 5f1dcf2..d571f3c 100644
--- a/tmp/a97149de-6deb-44d0-a791-24261d1d76cd_buggy.java
+++ b/tmp/e0f27479-bb4a-4c65-a5f4-bc18c07e5464_fixed.java
@@ -1,41 +1,68 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (!isConverged()) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = simplex;
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = simplex;
+                return;
+            }
+
+            // perform a shrink step
+            shrinkSimplex(original);
 
             // check convergence
+            if (isConverged()) {
                 return;
             }
 
         }
 
     }
+
+    private boolean isConverged() {
+        // Check if the simplex has converged based on the convergence checker
+        return getConvergenceChecker().converged(getIterations(), simplex);
+    }
+
+    private void shrinkSimplex(final RealPointValuePair[] original) {
+        // Shrink the simplex towards the best vertex
+        final RealPointValuePair best = original[0];
+        for (int i = 1; i < simplex.length; i++) {
+            final double[] newPoint = new double[simplex[i].getPoint().length];
+            for (int j = 0; j < newPoint.length; j++) {
+                newPoint[j] = best.getPoint()[j] + sigma * (simplex[i].getPoint()[j] - best.getPoint()[j]);
+            }
+            simplex[i] = new RealPointValuePair(newPoint, computeObjectiveValue(newPoint));
+        }
+    }
\ No newline at end of file
