diff --git a/tmp/8e0e771d-cfb5-4499-84da-915d5759c054_buggy.java b/tmp/7bb1c185-ab3a-40f3-8fcb-8f071d4244fa_fixed.java
index 5f1dcf2..eb97172 100644
--- a/tmp/8e0e771d-cfb5-4499-84da-915d5759c054_buggy.java
+++ b/tmp/7bb1c185-ab3a-40f3-8fcb-8f071d4244fa_fixed.java
@@ -1,41 +1,57 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = new RealPointValuePair[] { expanded };
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[] { contracted };
+                return;
+            }
+
+            // perform a shrink step if neither reflection nor contraction worked
+            for (int i = 1; i < simplex.length; i++) {
+                simplex[i] = new RealPointValuePair(
+                    simplex[0].getPoint()[i] + sigma * (simplex[i].getPoint()[i] - simplex[0].getPoint()[i]),
+                    Double.NaN
+                );
+                evaluate(simplex[i]);
+            }
 
             // check convergence
+            if (convergenceChecker.converged(iteration, original[0], simplex[0])) {
                 return;
             }
 
         }
 
     }
\ No newline at end of file
