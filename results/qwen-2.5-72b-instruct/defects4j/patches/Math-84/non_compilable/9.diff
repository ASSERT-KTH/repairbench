diff --git a/tmp/02043544-c7d6-4dea-b358-53962242270c_buggy.java b/tmp/a1e21451-984c-4153-980b-397bc6723807_fixed.java
index 5f1dcf2..188ab3e 100644
--- a/tmp/02043544-c7d6-4dea-b358-53962242270c_buggy.java
+++ b/tmp/a1e21451-984c-4153-980b-397bc6723807_fixed.java
@@ -1,41 +1,70 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
+            final RealPointValuePair worst = original[original.length - 1];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = simplex;
                 }
 
                 return;
 
-            }
+            } else if (comparator.compare(reflected, worst) >= 0) {
 
-            // compute the contracted simplex
+                // perform a contraction
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+                if (comparator.compare(contracted, worst) < 0) {
                     // accept the contracted simplex
+                    simplex = simplex;
+                    return;
+                } else {
+                    // perform a shrink
+                    shrinkSimplex(original, best);
+                    return;
+                }
+
+            } else {
+                // accept the reflected simplex
+                simplex = simplex;
+                return;
+            }
 
             // check convergence
+            if (convergenceChecker.converged(iterations, best, worst)) {
                 return;
             }
 
         }
 
     }
+
+    private void shrinkSimplex(final RealPointValuePair[] original, final RealPointValuePair best) {
+        for (int i = 1; i < original.length; i++) {
+            final double[] point = original[i].getPointRef();
+            for (int j = 0; j < point.length; j++) {
+                point[j] = best.getPoint()[j] + sigma * (point[j] - best.getPoint()[j]);
+            }
+            original[i] = new RealPointValuePair(point, computeObjectiveValue(point));
+        }
+        simplex = original;
+    }
\ No newline at end of file
