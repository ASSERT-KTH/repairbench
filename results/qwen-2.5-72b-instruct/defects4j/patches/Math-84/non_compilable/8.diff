diff --git a/tmp/536a0b12-288b-4714-87de-cc1b2fbaeda5_buggy.java b/tmp/1680def3-0ab4-42b4-996f-eb6ff62c4179_fixed.java
index 5f1dcf2..2b5629e 100644
--- a/tmp/536a0b12-288b-4714-87de-cc1b2fbaeda5_buggy.java
+++ b/tmp/1680def3-0ab4-42b4-996f-eb6ff62c4179_fixed.java
@@ -1,41 +1,60 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = simplex; // This line is redundant, but included for clarity
                 }
 
+                // Check for convergence
+                if (convergenceChecker.converged(getIterations(), best, reflected)) {
                     return;
-
                 }
 
+            } else {
+
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
+                    simplex = simplex; // This line is redundant, but included for clarity
+                } else {
+                    // perform a shrink step
+                    shrinkSimplex(original, comparator);
+                }
 
-            // check convergence
+                // Check for convergence
+                if (convergenceChecker.converged(getIterations(), best, simplex[0])) {
                     return;
                 }
 
             }
 
+            // Check for maximum iterations
+            if (getIterations() >= getMaxIterations()) {
+                throw new MaxIterationsExceededException(getMaxIterations());
+            }
+
+        }
+
     }
\ No newline at end of file
