diff --git a/tmp/16ca17c8-23ff-454a-bad2-6230a4b533b9_buggy.java b/tmp/29766aba-95f4-4bd0-88d9-00000fd632e6_fixed.java
index 757067a..9ee512d 100644
--- a/tmp/16ca17c8-23ff-454a-bad2-6230a4b533b9_buggy.java
+++ b/tmp/29766aba-95f4-4bd0-88d9-00000fd632e6_fixed.java
@@ -1,63 +1,58 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        // Evaluate the function at the initial, min, and max points
         double yInitial = f.value(initial);
+        double yMin = f.value(min);
+        double yMax = f.value(max);
+
+        // Check if the initial guess is a root
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
+        // Check if the minimum endpoint is a root
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
+        // Check if the maximum endpoint is a root
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+        // Ensure that the interval brackets the root
+        if (yInitial * yMin >= 0 && yInitial * yMax >= 0) {
+            throw new IllegalArgumentException("The function values at the initial, min, and max points do not bracket a root.");
         }
 
-
-        // full Brent algorithm starting with provided initial guess
+        // Full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
-
     }
\ No newline at end of file
