diff --git a/tmp/a75c6e0a-290a-46cc-8252-165d889cea5b_buggy.java b/tmp/a8c7681d-8e04-4dd5-9c13-026330c9cae9_fixed.java
index 42b58d0..f8f3c12 100644
--- a/tmp/a75c6e0a-290a-46cc-8252-165d889cea5b_buggy.java
+++ b/tmp/a8c7681d-8e04-4dd5-9c13-026330c9cae9_fixed.java
@@ -1,19 +1,25 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
+        } else if (actualTypeArgument instanceof ParameterizedType) {
+            // Ensure we do not recursively process the same type
+            if (!contextualActualTypeParameters.containsKey(typeParameter)) {
+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
+                registerTypeVariablesOn(actualTypeArgument); // Recursively register nested type variables
+            }
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
         // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
