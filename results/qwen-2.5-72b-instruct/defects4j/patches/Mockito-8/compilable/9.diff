diff --git a/tmp/f29cffee-9ace-4f24-aeab-88ba48e20726_buggy.java b/tmp/20ad1ae5-5214-4d5e-a1ad-8ac1a80a5272_fixed.java
index 42b58d0..10a4c3a 100644
--- a/tmp/f29cffee-9ace-4f24-aeab-88ba48e20726_buggy.java
+++ b/tmp/20ad1ae5-5214-4d5e-a1ad-8ac1a80a5272_fixed.java
@@ -1,19 +1,26 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
     TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
+        } else if (actualTypeArgument instanceof ParameterizedType) {
+            // Avoid infinite recursion by checking if the type argument is already processed
+            if (!contextualActualTypeParameters.containsKey(typeParameter)) {
+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
+                registerTypeVariablesOn(actualTypeArgument); // Recursively process nested types
+            }
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
         // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
