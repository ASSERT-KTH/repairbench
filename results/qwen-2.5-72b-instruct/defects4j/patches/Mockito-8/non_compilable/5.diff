diff --git a/tmp/05e7f254-26d6-4544-aee9-de37552d39ca_buggy.java b/tmp/bbce6322-3077-47a9-8722-019818dc5dfa_fixed.java
index 42b58d0..bb3efd4 100644
--- a/tmp/05e7f254-26d6-4544-aee9-de37552d39ca_buggy.java
+++ b/tmp/bbce6322-3077-47a9-8722-019818dc5dfa_fixed.java
@@ -1,19 +1,33 @@
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.lang.reflect.TypeVariable;
+import java.lang.reflect.WildcardType;
+import java.util.HashSet;
+import java.util.Set;
+
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
+
+    // Use a set to keep track of processed types to avoid infinite recursion
+    Set<Type> processedTypes = new HashSet<>();
+    if (!processedTypes.add(classType)) {
+        return;
+    }
+
     ParameterizedType parameterizedType = (ParameterizedType) classType;
     TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
         // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
