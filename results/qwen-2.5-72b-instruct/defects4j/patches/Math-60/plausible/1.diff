diff --git a/tmp/0e47f20c-bba4-4d99-9457-1b76802abdf8_buggy.java b/tmp/dc9b2bdb-ed61-4eb0-83d5-41fe7fbc6f10_fixed.java
index 3127f85..07b507d 100644
--- a/tmp/0e47f20c-bba4-4d99-9457-1b76802abdf8_buggy.java
+++ b/tmp/dc9b2bdb-ed61-4eb0-83d5-41fe7fbc6f10_fixed.java
@@ -1,24 +1,22 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
+    
+    // Handle extreme values before calling Erf.erf
+    if (dev < -40 * standardDeviation) {
+        return 0;
+    } else if (dev > 40 * standardDeviation) {
+        return 1;
+    }
+    
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
         if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
             return 0;
         } else if (x > (mean + 20 * standardDeviation)) {
             return 1;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
