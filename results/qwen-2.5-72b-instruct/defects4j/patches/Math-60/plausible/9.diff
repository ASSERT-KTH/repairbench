diff --git a/tmp/2139fcf2-9407-47cd-b8b3-c835862a7aec_buggy.java b/tmp/cda6490e-0283-46d8-977f-0362496a4a4b_fixed.java
index 3127f85..a318ffd 100644
--- a/tmp/2139fcf2-9407-47cd-b8b3-c835862a7aec_buggy.java
+++ b/tmp/cda6490e-0283-46d8-977f-0362496a4a4b_fixed.java
@@ -1,24 +1,22 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+        if (x < (mean - 40 * standardDeviation)) {
             return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+        } else if (x > (mean + 40 * standardDeviation)) {
             return 1;
-            } else {
-                throw ex;
         }
+        try {
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
+        } catch (MaxIterationsExceededException ex) {
+            throw new MathException("Failed to compute cumulative probability", ex);
         }
     }
\ No newline at end of file
