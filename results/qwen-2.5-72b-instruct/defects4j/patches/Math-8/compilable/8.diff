diff --git a/tmp/6a9bb589-2fcd-408b-a46f-d23f8ca0a4bd_buggy.java b/tmp/a063782e-3de0-406d-869d-f532e5e9b242_fixed.java
index bfa2423..84025cf 100644
--- a/tmp/6a9bb589-2fcd-408b-a46f-d23f8ca0a4bd_buggy.java
+++ b/tmp/a063782e-3de0-406d-869d-f532e5e9b242_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // Create an array of the correct type
+        final T[] out = (T[]) java.lang.reflect.Array.newInstance(getType(), sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
+    }
 
+    // Helper method to get the correct type for the array
+    private Class<T> getType() {
+        // This method should be implemented to return the correct type of T
+        // For example, if T is a generic type parameter, you might need to use a type token or other mechanism
+        // to determine the actual type at runtime.
+        // Here, we assume that T is a known type and can be obtained from the class of the first singleton.
+        return (Class<T>) singletons.get(0).getClass();
     }
\ No newline at end of file
