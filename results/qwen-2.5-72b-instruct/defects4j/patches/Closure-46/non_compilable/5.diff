diff --git a/tmp/e9b8e98e-fed5-46a9-92cf-bc6f282f4b38_buggy.java b/tmp/42139895-e80c-4472-bc26-e960fdb4d480_fixed.java
index 46817a7..3f33784 100644
--- a/tmp/e9b8e98e-fed5-46a9-92cf-bc6f282f4b38_buggy.java
+++ b/tmp/42139895-e80c-4472-bc26-e960fdb4d480_fixed.java
@@ -1,16 +1,26 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+  Set<String> allProperties = new HashSet<>(properties.keySet());
+  allProperties.addAll(that.toMaybeRecordType().getProperties());
+  
+  for (String property : allProperties) {
+    JSType thisType = getPropertyType(property);
+    JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+    
+    if (thisType != null && thatType != null) {
+      JSType leastSupertype = thisType.getLeastSupertype(thatType);
+      if (leastSupertype != null) {
+        builder.addProperty(property, leastSupertype, getPropertyNode(property));
+      }
+    } else if (thisType != null) {
+      builder.addProperty(property, thisType, getPropertyNode(property));
+    } else if (thatType != null) {
+      builder.addProperty(property, thatType, that.toMaybeRecordType().getPropertyNode(property));
     }
   }
   return builder.build();
 }
\ No newline at end of file
