diff --git a/tmp/f7fb527c-f182-4ca2-accb-27de38312544_buggy.java b/tmp/e3802ec7-2028-49fa-b5bf-884b23478d9b_fixed.java
index 46817a7..8e63a99 100644
--- a/tmp/f7fb527c-f182-4ca2-accb-27de38312544_buggy.java
+++ b/tmp/e3802ec7-2028-49fa-b5bf-884b23478d9b_fixed.java
@@ -1,16 +1,21 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+  Set<String> allProperties = new HashSet<>(properties.keySet());
+  allProperties.addAll(that.toMaybeRecordType().getProperties());
+
+  for (String property : allProperties) {
+    if (properties.containsKey(property) && that.toMaybeRecordType().hasProperty(property)) {
+      JSType thisType = getPropertyType(property);
+      JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+      JSType leastSupertype = thisType.getLeastSupertype(thatType);
+      if (leastSupertype != null) {
+        builder.addProperty(property, leastSupertype, getPropertyNode(property));
       }
     }
-    return builder.build();
+  }
+  return builder.isEmpty() ? registry.getUnknownType() : builder.build();
 }
\ No newline at end of file
