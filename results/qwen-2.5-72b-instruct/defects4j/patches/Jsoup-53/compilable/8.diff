diff --git a/tmp/ba25b9a4-1fbc-4431-8562-77d1317e8551_buggy.java b/tmp/3b10da1b-0444-4e3a-b666-950a1f91e999_fixed.java
index fecb896..6e073d5 100644
--- a/tmp/ba25b9a4-1fbc-4431-8562-77d1317e8551_buggy.java
+++ b/tmp/3b10da1b-0444-4e3a-b666-950a1f91e999_fixed.java
@@ -1,34 +1,48 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
+ * and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
 
     do {
         if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        char c = consume();
+        
+        if (last == ESC) {
+            // Handle escape character
+            last = c;
+            continue;
+        }
+        
+        if (c == '\'' || c == '"') {
+            // Toggle inQuote state
+            inQuote = !inQuote;
+        }
+
+        if (!inQuote) {
+            if (c == open) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
             }
+        }
 
-            if (depth > 0 && last != 0)
+        if (depth > 0 && !inQuote)
             end = pos; // don't include the outer match pair in the return
         last = c;
-        } while (depth > 0);
+    } while (depth > 0 || inQuote);
+    
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
