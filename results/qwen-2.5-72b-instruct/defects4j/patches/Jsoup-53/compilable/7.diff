diff --git a/tmp/3a1ff553-f5e5-4343-8347-fffdcec05c0e_buggy.java b/tmp/b6e3ac84-77c8-473c-ab80-506c84196a02_fixed.java
index fecb896..47f5fe9 100644
--- a/tmp/3a1ff553-f5e5-4343-8347-fffdcec05c0e_buggy.java
+++ b/tmp/b6e3ac84-77c8-473c-ab80-506c84196a02_fixed.java
@@ -1,34 +1,44 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inQuote = false;
+        char quoteChar = 0;
 
         do {
             if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            char c = consume();
+            if (c == '\'' || c == '"') {
+                if (!inQuote) {
+                    inQuote = true;
+                    quoteChar = c;
+                } else if (quoteChar == c) {
+                    inQuote = false;
+                }
+            }
+
+            if (!inQuote && (last == 0 || last != ESC)) {
+                if (c == open) {
                     depth++;
                     if (start == -1)
                         start = pos;
-                }
-                else if (c.equals(close))
+                } else if (c == close)
                     depth--;
             }
 
             if (depth > 0 && last != 0)
                 end = pos; // don't include the outer match pair in the return
             last = c;
-        } while (depth > 0);
+        } while (depth > 0 || inQuote);
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
