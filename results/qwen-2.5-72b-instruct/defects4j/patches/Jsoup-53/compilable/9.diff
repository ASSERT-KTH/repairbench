diff --git a/tmp/48a8c8ff-2b60-406d-8610-a3c57c51b1b1_buggy.java b/tmp/8ad82587-700e-4fc5-b9ee-d1eaaf077930_fixed.java
index fecb896..257a0e2 100644
--- a/tmp/48a8c8ff-2b60-406d-8610-a3c57c51b1b1_buggy.java
+++ b/tmp/8ad82587-700e-4fc5-b9ee-d1eaaf077930_fixed.java
@@ -1,34 +1,39 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
-        char last = 0;
+        boolean escaped = false;
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        while (!isEmpty()) {
+            char c = consume();
+            if (escaped) {
+                // If the previous character was an escape, just continue without changing depth
+                escaped = false;
+            } else if (c == '\\') {
+                // Set the escaped flag for the next character
+                escaped = true;
+            } else if (c == open) {
                 depth++;
-                    if (start == -1)
-                        start = pos;
+                if (start == -1) {
+                    start = pos - 1; // Adjust start to include the opening character
                 }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
+                if (depth == 0) {
+                    end = pos; // Adjust end to include the closing character
+                    break;
+                }
+            }
         }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
