diff --git a/tmp/171ff572-ee98-4560-8d88-6ec582bb2058_buggy.java b/tmp/0692c8a8-89f4-4662-8f96-21f38d1b857c_fixed.java
index e087f95..a1ad8d4 100644
--- a/tmp/171ff572-ee98-4560-8d88-6ec582bb2058_buggy.java
+++ b/tmp/0692c8a8-89f4-4662-8f96-21f38d1b857c_fixed.java
@@ -1,53 +1,46 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes long");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean trailingFound = false;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
+            trailingFound = true;
             break;
         }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Must have trailing NUL or space
+        if (currentByte == (byte) ' ' || currentByte == 0) {
+            trailingFound = true;
+            break;
+        }
+
+        // Check for invalid octal characters
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
+
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    if (!trailingFound) {
+        throw new IllegalArgumentException("Trailing space or NUL is missing");
     }
 
     return result;
 }
\ No newline at end of file
