diff --git a/tmp/81b1c185-f58e-4514-9757-1a262038f77f_buggy.java b/tmp/8ff5927e-1e1d-471a-b527-879700354b24_fixed.java
index e087f95..cababac 100644
--- a/tmp/81b1c185-f58e-4514-9757-1a262038f77f_buggy.java
+++ b/tmp/8ff5927e-1e1d-471a-b527-879700354b24_fixed.java
@@ -1,53 +1,43 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("The buffer must be at least 2 bytes long");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
             break;
         }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == (byte) ' ') {
             if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
             break;
         }
-            }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+        // Check for embedded NUL
+        if (currentByte == 0) {
+            throw new IllegalArgumentException("Embedded NUL is not allowed");
+        }
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // Check for trailing space or NUL
+    if (end > start && (buffer[end - 1] != ' ' && buffer[end - 1] != 0)) {
+        throw new IllegalArgumentException("Trailing space or NUL is missing");
     }
 
     return result;
 }
\ No newline at end of file
