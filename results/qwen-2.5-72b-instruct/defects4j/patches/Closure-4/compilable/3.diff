diff --git a/tmp/5219de98-7fa6-4bdd-90fa-aca73c6b69da_buggy.java b/tmp/fa9ddb23-05aa-4a38-be32-9cbce5aab902_fixed.java
index d6a560a..397893e 100644
--- a/tmp/5219de98-7fa6-4bdd-90fa-aca73c6b69da_buggy.java
+++ b/tmp/fa9ddb23-05aa-4a38-be32-9cbce5aab902_fixed.java
@@ -1,33 +1,30 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Avoid resolving via properties if already resolved via registry to prevent cycles.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // Only resolve via properties if not already resolved.
+    if (!resolved) {
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
+    }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
