diff --git a/tmp/4fe34633-9829-46df-af88-3f90144f7706_buggy.java b/tmp/48923c1e-c0d8-4be3-9763-7299c57882cd_fixed.java
index d6a560a..3f5fff9 100644
--- a/tmp/4fe34633-9829-46df-af88-3f90144f7706_buggy.java
+++ b/tmp/48923c1e-c0d8-4be3-9763-7299c57882cd_fixed.java
@@ -1,33 +1,31 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Resolve via registry first to avoid triggering warnings in property resolution.
     boolean resolved = resolveViaRegistry(t, enclosing);
+
+    // Check for cycles before proceeding with further resolutions.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // If not resolved via registry, try resolving via properties.
     resolveViaProperties(t, enclosing);
+
+    // Check for cycles again after property resolution.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
