diff --git a/tmp/fb1b4180-d498-4a63-b45f-0abec06c8714_buggy.java b/tmp/01a4d3a6-ef37-40df-b282-21a0550a1e4d_fixed.java
index d6a560a..2259fbb 100644
--- a/tmp/fb1b4180-d498-4a63-b45f-0abec06c8714_buggy.java
+++ b/tmp/01a4d3a6-ef37-40df-b282-21a0550a1e4d_fixed.java
@@ -1,33 +1,34 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Resolve via registry first to avoid triggering warnings in resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
+    // If not resolved via registry, try resolving via properties.
+    resolved = resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
+    if (resolved) {
       super.resolveInternal(t, enclosing);
-    if (isResolved()) {
       finishPropertyContinuations();
-    }
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
+
+    // If still not resolved, return the current type.
+    return this;
+  }
\ No newline at end of file
