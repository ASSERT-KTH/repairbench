diff --git a/tmp/f3008a92-58e3-495b-ab71-9c7ae2480d76_buggy.java b/tmp/89fc8630-fd12-40e1-ae1a-63b349d0b6fe_fixed.java
index 5abdeb5..990eb61 100644
--- a/tmp/f3008a92-58e3-495b-ab71-9c7ae2480d76_buggy.java
+++ b/tmp/89fc8630-fd12-40e1-ae1a-63b349d0b6fe_fixed.java
@@ -1,29 +1,30 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            if (!(parent.isAssign() && (parent.getFirstChild() == n)) &&
+                !(parent.isHook() && (parent.getSecondChild() == n || parent.getThirdChild() == n))) {
+              // Don't count lhs of top-level assignment chain or parts of the ternary operator
               numUsesWithinCfgNode++;
             }
           }
+        }
 
       };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
