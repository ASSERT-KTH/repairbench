diff --git a/tmp/28cc6f28-5633-44c9-b497-d8f8df94e154_buggy.java b/tmp/c8aa54a2-6952-471f-b559-ac0ea7754077_fixed.java
index 5abdeb5..a396108 100644
--- a/tmp/28cc6f28-5633-44c9-b497-d8f8df94e154_buggy.java
+++ b/tmp/c8aa54a2-6952-471f-b559-ac0ea7754077_fixed.java
@@ -1,29 +1,29 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+          if (n.isName() && n.getString().equals(varName)) {
             // Don't count lhs of top-level assignment chain
+            if (parent.isAssign() && parent.getFirstChild() == n) {
+              return;
+            }
+            // Special case for assignments inside ternary operators
+            if (parent.is Hook() && parent.getParent().isAssign() && parent.getParent().getFirstChild() == n) {
+              return;
+            }
             numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
