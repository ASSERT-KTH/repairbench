diff --git a/tmp/3e45d85d-4652-4ac0-9873-49baca2054a9_buggy.java b/tmp/fa8d9ef2-f2ef-414f-b615-2f74cd2c4d24_fixed.java
index 5abdeb5..b54f613 100644
--- a/tmp/3e45d85d-4652-4ac0-9873-49baca2054a9_buggy.java
+++ b/tmp/fa8d9ef2-f2ef-414f-b615-2f74cd2c4d24_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+     * numUseWithinCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
               // We make a special exception when the entire cfgNode is a chain
               // of assignments, since in that case the assignment statements
               // will happen after the inlining of the right hand side.
               // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
               //   and remove this special case.
               !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+               (parent.getFirstChild() == n) ||
+               (parent.isHook() && parent.getFirstChild() == n))) {
+              // Don't count lhs of top-level assignment chain or the condition of a hook
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
