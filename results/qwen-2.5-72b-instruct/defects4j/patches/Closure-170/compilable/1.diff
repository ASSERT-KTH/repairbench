diff --git a/tmp/d9da805f-6ef3-4f65-9ca9-1cdba2b2b539_buggy.java b/tmp/04ef2210-659f-480f-933f-5cf2ab412129_fixed.java
index 5abdeb5..ad28df1 100644
--- a/tmp/d9da805f-6ef3-4f65-9ca9-1cdba2b2b539_buggy.java
+++ b/tmp/04ef2210-659f-480f-933f-5cf2ab412129_fixed.java
@@ -1,29 +1,56 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            if (!(parent.isAssign() && parent.getFirstChild() == n) &&
+                !isLeftHandSideOfTernaryAssignment(n, parent)) {
+              // Don't count lhs of top-level assignment chain or lhs of ternary assignment
               numUsesWithinCfgNode++;
             }
           }
+        }
+
+        /**
+         * Checks if the node is the left-hand side of a ternary assignment.
+         */
+        private boolean isLeftHandSideOfTernaryAssignment(Node n, Node parent) {
+          if (parent.isHook()) {
+            Node condition = parent.getFirstChild();
+            Node thenPart = condition.getNext();
+            Node elsePart = thenPart.getNext();
+            return isLeftHandSideOfAssignment(n, thenPart) || isLeftHandSideOfAssignment(n, elsePart);
+          }
+          return false;
+        }
+
+        /**
+         * Checks if the node is the left-hand side of an assignment within a given part of a ternary expression.
+         */
+        private boolean isLeftHandSideOfAssignment(Node n, Node part) {
+          if (part == null) {
+            return false;
+          }
+          if (part.isAssign() && part.getFirstChild() == n) {
+            return true;
+          }
+          return false;
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
