diff --git a/tmp/526d8207-2858-4cd8-a034-d81c8382ec14_buggy.java b/tmp/8bc3a81c-7493-4aa7-8eaf-acbf24bae680_fixed.java
index 5abdeb5..7ff3821 100644
--- a/tmp/526d8207-2858-4cd8-a034-d81c8382ec14_buggy.java
+++ b/tmp/8bc3a81c-7493-4aa7-8eaf-acbf24bae680_fixed.java
@@ -1,29 +1,43 @@
     /**
      * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+     * numUseWithinCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+            if (!(parent.isAssign() && parent.getFirstChild() == n) &&
+                !isInTernaryCondition(n, parent)) {
               // Don't count lhs of top-level assignment chain
+              // Don't count uses in the condition part of a ternary operator
               numUsesWithinCfgNode++;
             }
           }
+        }
+
+        private boolean isInTernaryCondition(Node n, Node parent) {
+          // Check if the node is part of the condition of a ternary operator
+          while (parent != null) {
+            if (parent.isHook() && parent.getFirstChild() == n) {
+              return true;
+            }
+            n = parent;
+            parent = n.getParent();
+          }
+          return false;
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
