diff --git a/tmp/1f190208-5408-4053-bc39-13efca97348c_buggy.java b/tmp/0d6bd07a-3393-428e-af81-28e77d1153fb_fixed.java
index 388771b..0ba4e1d 100644
--- a/tmp/1f190208-5408-4053-bc39-13efca97348c_buggy.java
+++ b/tmp/0d6bd07a-3393-428e-af81-28e77d1153fb_fixed.java
@@ -1,37 +1,50 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
+        copy.data = new java.util.ArrayList<>();
+        copy.setMaximumItemAge(this.getMaximumItemAge());
+        copy.setDomainOrder(this.getDomainOrder());
         if (this.data.size() > 0) {
+            boolean firstItem = true;
+            double minY = Double.NaN;
+            double maxY = Double.NaN;
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
+                    if (firstItem) {
+                        minY = clone.getValue().doubleValue();
+                        maxY = clone.getValue().doubleValue();
+                        firstItem = false;
+                    } else {
+                        minY = Math.min(minY, clone.getValue().doubleValue());
+                        maxY = Math.max(maxY, clone.getValue().doubleValue());
                     }
-                catch (SeriesException e) {
+                } catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
+            copy.setRange(minY, maxY);
         }
         return copy;
     }
\ No newline at end of file
