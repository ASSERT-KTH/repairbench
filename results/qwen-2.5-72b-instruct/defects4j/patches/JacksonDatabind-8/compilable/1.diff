diff --git a/tmp/0b2b45a6-439d-408b-8126-9cf8885f9c03_buggy.java b/tmp/c6ea369f-082b-438f-95a2-99f24e2159f0_fixed.java
index c9da1b7..f548216 100644
--- a/tmp/0b2b45a6-439d-408b-8126-9cf8885f9c03_buggy.java
+++ b/tmp/c6ea369f-082b-438f-95a2-99f24e2159f0_fixed.java
@@ -1,33 +1,44 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
 
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
         }
 
         // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
             // [databind#667]: avoid one particular class of bogus problems
-
+            // Only throw an exception if both are explicitly annotated
+            if (explicit) {
                 throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                         + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
+            }
+        } else {
+            // If the new one is more specific, use it
+            if (newOne.getAnnotated().getClass().isAssignableFrom(oldOne.getAnnotated().getClass())) {
                 // new type more specific, use it
+                _creators[typeIndex] = _fixAccess(newOne);
+                if (explicit) {
+                    _explicitCreators |= mask;
                 }
+            } else {
+                // new type more generic, use old
             }
+        }
+    } else {
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
+}
\ No newline at end of file
