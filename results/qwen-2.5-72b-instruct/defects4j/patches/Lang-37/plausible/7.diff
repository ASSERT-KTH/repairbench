diff --git a/tmp/e82387e5-cfe5-4e91-bac6-4811afa50ee0_buggy.java b/tmp/1df0c1b6-7ba5-422f-8077-48c41ba4cb4d_fixed.java
index d5b1b52..f9da116 100644
--- a/tmp/e82387e5-cfe5-4e91-bac6-4811afa50ee0_buggy.java
+++ b/tmp/1df0c1b6-7ba5-422f-8077-48c41ba4cb4d_fixed.java
@@ -1,36 +1,22 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
     @SuppressWarnings("unchecked")
     public static <T> T[] addAll(T[] array1, T... array2) {
         if (array1 == null) {
             return clone(array2);
         } else if (array2 == null) {
             return clone(array1);
         }
+        
+        // Check if the component types are compatible
         final Class<?> type1 = array1.getClass().getComponentType();
+        final Class<?> type2 = array2.getClass().getComponentType();
+        
+        if (!type1.isAssignableFrom(type2)) {
+            throw new IllegalArgumentException("Incompatible array types");
+        }
+        
         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+        
         return joinedArray;
     }
\ No newline at end of file
