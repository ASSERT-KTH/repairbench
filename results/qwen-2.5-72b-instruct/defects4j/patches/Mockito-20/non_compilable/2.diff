diff --git a/tmp/d5586e51-e6e8-425d-9b28-dd62c605148c_buggy.java b/tmp/d60bf7fd-bebd-45de-a269-c2307400cfc7_fixed.java
index f9a9b5b..0cc0278 100644
--- a/tmp/d5586e51-e6e8-425d-9b28-dd62c605148c_buggy.java
+++ b/tmp/d60bf7fd-bebd-45de-a269-c2307400cfc7_fixed.java
@@ -1,30 +1,45 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
         mockInstance = classInstantiator.instantiate(mockedProxyType);
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+        // Ensure the mock instance is properly initialized
+        if (settings.isWithConstructor()) {
+            mockInstance = initializeMockWithConstructor(mockInstance, settings);
+        }
+
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
         throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
     }
 }
+
+private <T> T initializeMockWithConstructor(T mockInstance, MockCreationSettings<T> settings) {
+    try {
+        Constructor<?> constructor = settings.getTypeToMock().getDeclaredConstructor();
+        constructor.setAccessible(true);
+        return (T) constructor.newInstance();
+    } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
+        throw new MockitoException("Unable to initialize mock instance with constructor", e);
+    }
+}
\ No newline at end of file
