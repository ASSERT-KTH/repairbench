diff --git a/tmp/0f0c8913-271b-4a0c-bd89-9aab4a70e2e7_buggy.java b/tmp/4550576c-212d-4ba5-a144-4749b2f2fdde_fixed.java
index 4b7e1e4..e58c929 100644
--- a/tmp/0f0c8913-271b-4a0c-bd89-9aab4a70e2e7_buggy.java
+++ b/tmp/4550576c-212d-4ba5-a144-4749b2f2fdde_fixed.java
@@ -1,52 +1,68 @@
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.commons.io.IOUtils;
+
+public class PaxHeaderParser {
+
+    private static final String CharsetNames = "UTF-8";
+    private Map<String, String> globalPaxHeaders = new HashMap<>();
+
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
+    public Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
-        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
+        final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while (true) { // get length
             int ch;
             int len = 0;
             int read = 0;
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while ((ch = i.read()) != -1) {
                         read++;
                         if (ch == '=') { // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
+                            final String keyword = coll.toString(CharsetNames);
                             // Get rest of entry
                             final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                            if (restLen <= 0) { // only NL or invalid length
                                 headers.remove(keyword);
                             } else {
                                 final byte[] rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                                        + "Paxheader. Expected " + restLen
+                                        + " bytes, read " + got);
                                 }
                                 // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                                final String value = new String(rest, 0, restLen - 1, CharsetNames);
                                 headers.put(keyword, value);
                             }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
                 }
                 len *= 10;
                 len += ch - '0';
             }
             if (ch == -1) { // EOF
                 break;
             }
+            // Skip the newline character
+            if (len > 0) {
+                i.read();
+            }
         }
         return headers;
     }
+}
\ No newline at end of file
