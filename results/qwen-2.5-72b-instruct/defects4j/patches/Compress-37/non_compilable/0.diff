diff --git a/tmp/8e0d8973-9647-43bc-9531-87c06d13cf69_buggy.java b/tmp/f54c029e-6307-4d4d-ac59-47e67a9b9680_fixed.java
index 4b7e1e4..3bfa178 100644
--- a/tmp/8e0d8973-9647-43bc-9531-87c06d13cf69_buggy.java
+++ b/tmp/f54c029e-6307-4d4d-ac59-47e67a9b9680_fixed.java
@@ -1,52 +1,64 @@
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
+import java.util.HashMap;
+import java.util.Map;
+
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
-        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
+    final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean isBlankLine = true;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
+                if (isBlankLine) {
+                    // Skip over blank lines
+                    continue;
+                }
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
                     if (ch == '=') { // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
+                        final String keyword = coll.toString(StandardCharsets.UTF_8.name());
                         // Get rest of entry
                         final int restLen = len - read;
                         if (restLen == 1) { // only NL
                             headers.remove(keyword);
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                                throw new IOException("Failed to read " +
+                                                      "Paxheader. Expected " +
+                                                      restLen +
+                                                      " bytes, read " +
+                                                      got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                                                            restLen - 1, StandardCharsets.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
+                    isBlankLine = false;
                 }
                 break; // Processed single header
             }
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
