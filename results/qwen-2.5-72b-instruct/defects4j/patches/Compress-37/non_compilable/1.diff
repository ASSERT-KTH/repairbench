diff --git a/tmp/b8f75e51-2f9f-497d-8632-39b59ac27fc4_buggy.java b/tmp/e18b0f7a-9673-448d-8845-2ea37e78d64c_fixed.java
index 4b7e1e4..b86559a 100644
--- a/tmp/b8f75e51-2f9f-497d-8632-39b59ac27fc4_buggy.java
+++ b/tmp/e18b0f7a-9673-448d-8845-2ea37e78d64c_fixed.java
@@ -1,52 +1,108 @@
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
+import java.util.HashMap;
+import java.util.Map;
+
+public class TarArchiveInputStream {
+
+    private static final String CharsetNames.UTF_8 = "UTF-8";
+    private Map<String, String> globalPaxHeaders = new HashMap<>();
+
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while (true) { // get length
             int ch;
             int len = 0;
             int read = 0;
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
+                    // Skip blank lines
+                    if (len == 0) {
+                        continue;
+                    }
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while ((ch = i.read()) != -1) {
                         read++;
                         if (ch == '=') { // end of keyword
                             final String keyword = coll.toString(CharsetNames.UTF_8);
                             // Get rest of entry
                             final int restLen = len - read;
                             if (restLen == 1) { // only NL
                                 headers.remove(keyword);
                             } else {
                                 final byte[] rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                                    throw new IOException("Failed to read " +
+                                                          "Paxheader. Expected " +
+                                                          restLen +
+                                                          " bytes, read " +
+                                                          got);
                                 }
                                 // Drop trailing NL
                                 final String value = new String(rest, 0,
                                                                 restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
                 }
                 len *= 10;
                 len += ch - '0';
             }
             if (ch == -1) { // EOF
                 break;
             }
         }
         return headers;
     }
+
+    // Dummy method to simulate getting a test stream
+    private TarArchiveInputStream getTestStream(String path) throws IOException {
+        // Implementation not shown
+        return null;
+    }
+
+    // Dummy method to simulate getting the next tar entry
+    private TarArchiveEntry getNextTarEntry() throws IOException {
+        // Implementation not shown
+        return null;
+    }
+
+    // Dummy method to simulate closing the input stream
+    private void close() throws IOException {
+        // Implementation not shown
+    }
+
+    // Dummy class to simulate TarArchiveEntry
+    static class TarArchiveEntry {
+        private String name;
+
+        public TarArchiveEntry(String name) {
+            this.name = name;
+        }
+
+        public String getName() {
+            return name;
+        }
+    }
+
+    // Dummy class to simulate IOUtils
+    static class IOUtils {
+        public static int readFully(InputStream is, byte[] buffer) throws IOException {
+            // Implementation not shown
+            return 0;
+        }
+    }
+}
\ No newline at end of file
