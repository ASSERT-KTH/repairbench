diff --git a/tmp/b4f2dada-8d6b-4cfd-82f1-c00213575db3_buggy.java b/tmp/85522a6c-020a-4ea7-a9e4-8566ed4f8067_fixed.java
index 4b7e1e4..a45808e 100644
--- a/tmp/b4f2dada-8d6b-4cfd-82f1-c00213575db3_buggy.java
+++ b/tmp/85522a6c-020a-4ea7-a9e4-8566ed4f8067_fixed.java
@@ -1,52 +1,68 @@
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.charset.Charset;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.commons.compress.utils.IOUtils;
+
+public class PaxHeaderParser {
+
+    private static final String CharsetNames_UTF_8 = "UTF-8";
+
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
-        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
+        final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while (true) { // get length
             int ch;
             int len = 0;
             int read = 0;
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while ((ch = i.read()) != -1) {
                         read++;
                         if (ch == '=') { // end of keyword
                             final String keyword = coll.toString(CharsetNames.UTF_8);
                             // Get rest of entry
                             final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                            if (restLen <= 1) { // only NL or empty
                                 headers.remove(keyword);
                             } else {
-                                final byte[] rest = new byte[restLen];
+                                final byte[] rest = new byte[restLen - 1]; // Adjusted to avoid NegativeArraySizeException
                                 final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                                if (got != restLen - 1) { // Adjusted to match the restLen - 1
+                                    throw new IOException("Failed to read " +
+                                                          "Paxheader. Expected " +
+                                                          (restLen - 1) +
+                                                          " bytes, read " +
+                                                          got);
                                 }
                                 // Drop trailing NL
                                 final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                                                                restLen - 2, CharsetNames.UTF_8); // Adjusted to match the restLen - 2
                                 headers.put(keyword, value);
                             }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
                 }
                 len *= 10;
                 len += ch - '0';
             }
-            if (ch == -1){ // EOF
+            if (ch == -1 || len == 0) { // EOF or empty line
                 break;
             }
         }
         return headers;
     }
+
+    // Placeholder for globalPaxHeaders
+    private Map<String, String> globalPaxHeaders = new HashMap<>();
+}
\ No newline at end of file
