diff --git a/tmp/0b3e4f6a-5289-4cb9-9362-11534d59992b_buggy.java b/tmp/23e88228-28e8-4c30-9d64-e6296e44a709_fixed.java
index 4b7e1e4..dd76b48 100644
--- a/tmp/0b3e4f6a-5289-4cb9-9362-11534d59992b_buggy.java
+++ b/tmp/23e88228-28e8-4c30-9d64-e6296e44a709_fixed.java
@@ -1,52 +1,60 @@
+import java.io.*;
+import java.nio.charset.StandardCharsets;
+import java.util.HashMap;
+import java.util.Map;
+
+public class TarArchiveInputStream {
+    private static final String CharsetNames_UTF_8 = StandardCharsets.UTF_8.name();
+
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
-        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
+        final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while (true) { // get length
             int ch;
             int len = 0;
             int read = 0;
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while ((ch = i.read()) != -1) {
                         read++;
                         if (ch == '=') { // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
+                            final String keyword = coll.toString(CharsetNames_UTF_8);
                             // Get rest of entry
                             final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
+                            if (restLen <= 1) { // only NL or empty line
+                                break; // Skip this entry
+                            }
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                                throw new IOException("Failed to read Paxheader. Expected " + restLen + " bytes, read " + got);
                             }
                             // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                            final String value = new String(rest, 0, restLen - 1, CharsetNames_UTF_8);
                             headers.put(keyword, value);
-                            }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
                 }
+                if (ch == '\n') { // Skip blank lines
+                    read = 0;
+                    len = 0;
+                    continue;
+                }
                 len *= 10;
                 len += ch - '0';
             }
             if (ch == -1) { // EOF
                 break;
             }
         }
         return headers;
     }
+}
\ No newline at end of file
