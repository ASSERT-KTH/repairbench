diff --git a/tmp/8ca1acec-62b5-44e0-a44a-c052b99c4993_buggy.java b/tmp/30a13c07-4688-456b-ad2d-8f4c0c0a6900_fixed.java
index 4b7e1e4..0e47fe1 100644
--- a/tmp/8ca1acec-62b5-44e0-a44a-c052b99c4993_buggy.java
+++ b/tmp/30a13c07-4688-456b-ad2d-8f4c0c0a6900_fixed.java
@@ -1,52 +1,79 @@
+import java.io.*;
+import java.nio.charset.Charset;
+import java.util.HashMap;
+import java.util.Map;
+
+public class PaxHeaderParser {
+
+    private static final String CharsetNames_UTF_8 = "UTF-8";
+    private Map<String, String> globalPaxHeaders;
+
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
-        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
+        final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while (true) { // get length
             int ch;
             int len = 0;
             int read = 0;
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while ((ch = i.read()) != -1) {
                         read++;
                         if (ch == '=') { // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
+                            final String keyword = coll.toString(CharsetNames_UTF_8);
                             // Get rest of entry
                             final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                            if (restLen <= 1) { // only NL or blank line
+                                // Skip over blank lines
+                                if (restLen == 0) {
                                     headers.remove(keyword);
+                                    continue;
+                                }
                             } else {
                                 final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
+                                final int got = readFully(i, rest);
                                 if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                                    throw new IOException("Failed to read " +
+                                                          "Paxheader. Expected " +
+                                                          restLen +
+                                                          " bytes, read " +
+                                                          got);
                                 }
                                 // Drop trailing NL
                                 final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                                                                restLen - 1, CharsetNames_UTF_8);
                                 headers.put(keyword, value);
                             }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
                 }
                 len *= 10;
                 len += ch - '0';
             }
             if (ch == -1) { // EOF
                 break;
             }
         }
         return headers;
     }
+
+    private int readFully(InputStream i, byte[] buffer) throws IOException {
+        int totalRead = 0;
+        while (totalRead < buffer.length) {
+            int read = i.read(buffer, totalRead, buffer.length - totalRead);
+            if (read == -1) {
+                throw new IOException("Unexpected end of stream");
+            }
+            totalRead += read;
+        }
+        return totalRead;
+    }
+}
\ No newline at end of file
