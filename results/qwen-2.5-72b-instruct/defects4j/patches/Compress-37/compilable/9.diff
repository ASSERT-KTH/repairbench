diff --git a/tmp/0740a0b4-aeb5-40cd-9b58-6d842916f175_buggy.java b/tmp/46dfda41-9c1b-49da-9630-14658ee8273e_fixed.java
index 4b7e1e4..82c048f 100644
--- a/tmp/0740a0b4-aeb5-40cd-9b58-6d842916f175_buggy.java
+++ b/tmp/46dfda41-9c1b-49da-9630-14658ee8273e_fixed.java
@@ -1,52 +1,51 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while((ch = i.read()) != -1) {
                     read++;
                     if (ch == '='){ // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                        if (restLen <= 1) { // only NL or blank line
+                            if (restLen == 1) {
                                 headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
+                            }
+                            break; // Skip blank lines
+                        }
+                        final byte[] rest = new byte[restLen - 1]; // Adjust for trailing NL
                         final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                        if (got != restLen - 1) { // Adjust for trailing NL
+                            throw new IOException("Failed to read Paxheader. Expected " + (restLen - 1) + " bytes, read " + got);
                         }
                         // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                        final String value = new String(rest, 0, restLen - 2, CharsetNames.UTF_8);
                         headers.put(keyword, value);
-                            }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
+            if (ch == '\n') { // Handle blank lines
+                continue;
+            }
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1){ // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
