diff --git a/tmp/600dc284-a4af-4b51-b5db-baa48a68ceeb_buggy.java b/tmp/7d69786a-26dc-450b-a689-f6a48bb6d3cc_fixed.java
index 21f64c6..8a73429 100644
--- a/tmp/600dc284-a4af-4b51-b5db-baa48a68ceeb_buggy.java
+++ b/tmp/7d69786a-26dc-450b-a689-f6a48bb6d3cc_fixed.java
@@ -1,23 +1,27 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLength = seq.length();
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while (++offset < length && startChar != input[offset]) ;
+            if (offset + seqLength > length) {
+                // If the remaining input is shorter than the sequence, it can't match
+                return -1;
+            }
             int i = offset + 1;
-            int last = i + seq.length()-1;
+            int last = i + seqLength - 1;
             if (offset < length) {
                 for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
                 if (i == last) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
