diff --git a/tmp/4a70900c-81db-4104-b5d1-a3f35a38b5ff_buggy.java b/tmp/27c8dc02-8d67-4fa9-8319-65b0465dad1e_fixed.java
index 21f64c6..9731741 100644
--- a/tmp/4a70900c-81db-4104-b5d1-a3f35a38b5ff_buggy.java
+++ b/tmp/27c8dc02-8d67-4fa9-8319-65b0465dad1e_fixed.java
@@ -1,23 +1,29 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLength = seq.length();
         for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
+            // scan to first instance of startChar:
             if (startChar != input[offset])
                 while (++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            
+            if (offset + seqLength <= length) {
+                boolean match = true;
+                for (int j = 1; j < seqLength; j++) {
+                    if (seq.charAt(j) != input[offset + j]) {
+                        match = false;
+                        break;
+                    }
+                }
+                if (match) {
                     return offset - pos;
                 }
             }
+        }
         return -1;
     }
\ No newline at end of file
