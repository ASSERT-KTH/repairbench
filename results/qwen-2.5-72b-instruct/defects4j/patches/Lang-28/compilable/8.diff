diff --git a/tmp/ae7823f1-cab1-4f54-8b4b-3b746a3b917a_buggy.java b/tmp/c3a23c20-fc35-484f-9d05-81d284067243_fixed.java
index 4bbd561..8981de6 100644
--- a/tmp/ae7823f1-cab1-4f54-8b4b-3b746a3b917a_buggy.java
+++ b/tmp/c3a23c20-fc35-484f-9d05-81d284067243_fixed.java
@@ -1,37 +1,44 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Check if the current character is '&' and the next character is '#'
+        if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+            // Check if the next character is 'x' or 'X' for hexadecimal
+            if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Find the ';' that terminates the numeric entity
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If the ';' is found, parse the numeric entity
+            if (end < input.length()) {
                 int entityValue;
                 try {
                     if (isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
                 } catch (NumberFormatException nfe) {
                     return 0;
                 }
 
+                // Write the character to the output
                 out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+
+                // Return the length of the consumed input
+                return (end - index) + 1;
+            }
         }
         return 0;
     }
\ No newline at end of file
