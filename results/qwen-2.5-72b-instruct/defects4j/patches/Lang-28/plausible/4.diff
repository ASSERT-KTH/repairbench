diff --git a/tmp/63a18e74-eaa0-45c5-bdae-636cab973fe9_buggy.java b/tmp/48c50a6a-264a-494e-8bb0-06524fee8285_fixed.java
index 4bbd561..21132b4 100644
--- a/tmp/63a18e74-eaa0-45c5-bdae-636cab973fe9_buggy.java
+++ b/tmp/48c50a6a-264a-494e-8bb0-06524fee8285_fixed.java
@@ -1,37 +1,60 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        // Protect from ArrayIndexOutOfBounds
+        if (index + 1 >= input.length()) {
+            return 0;
+        }
+
         if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end >= input.length() || input.charAt(end) != ';') {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
+            if (entityValue >= 0 && entityValue <= 0x10FFFF) {
+                if (entityValue <= 0xFFFF) {
+                    // BMP character
                     out.write(entityValue);
+                } else {
+                    // Supplementary character
+                    entityValue -= 0x10000;
+                    int lead = 0xD800 | (entityValue >> 10);
+                    int trail = 0xDC00 | (entityValue & 0x3FF);
+                    out.write(lead);
+                    out.write(trail);
+                }
+            } else {
+                return 0;
+            }
+
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
