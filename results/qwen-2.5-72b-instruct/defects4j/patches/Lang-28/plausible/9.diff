diff --git a/tmp/e52dd3c2-f28b-4162-a98a-0f9f45726b17_buggy.java b/tmp/efbdd983-a64f-4f72-b525-3701594df8f7_fixed.java
index 4bbd561..5dc27b9 100644
--- a/tmp/e52dd3c2-f28b-4162-a98a-0f9f45726b17_buggy.java
+++ b/tmp/efbdd983-a64f-4f72-b525-3701594df8f7_fixed.java
@@ -1,37 +1,43 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if (index + 1 < input.length() && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start < input.length()) {
                 char firstChar = input.charAt(start);
                 if (firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
                 }
+            }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end < input.length() && input.charAt(end) == ';') {
                 int entityValue;
                 try {
                     if (isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
                 } catch (NumberFormatException nfe) {
                     return 0;
                 }
 
-                out.write(entityValue);
+                // Ensure the value is a valid Unicode code point
+                if (Character.isValidCodePoint(entityValue)) {
+                    out.write(Character.toChars(entityValue));
                     return 2 + (end - start) + (isHex ? 1 : 0) + 1;
                 }
+            }
+        }
         return 0;
     }
\ No newline at end of file
