diff --git a/tmp/0f19d0c1-933e-4371-903d-cc962068bc21_buggy.java b/tmp/90fbbf49-b20f-46d9-adcc-e7b4a03a77e9_fixed.java
index 210695a..ac0d680 100644
--- a/tmp/0f19d0c1-933e-4371-903d-cc962068bc21_buggy.java
+++ b/tmp/90fbbf49-b20f-46d9-adcc-e7b4a03a77e9_fixed.java
@@ -1,32 +1,38 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
         return new TypePair(null, null);
 
       case FALSE:
+        // If both types are undefined, they should be restricted to NO_TYPE
+        if (this == VOID_TYPE && that == VOID_TYPE) {
+          return new TypePair(NO_TYPE, NO_TYPE);
+        }
+        return new TypePair(this, that);
+
       case UNKNOWN:
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
