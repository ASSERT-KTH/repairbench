diff --git a/tmp/872f1226-f785-472a-be9c-6f61478ddf27_buggy.java b/tmp/dc380c9d-8863-4841-a12e-2fd490d2d9ea_fixed.java
index 0b7c52e..8f73809 100644
--- a/tmp/872f1226-f785-472a-be9c-6f61478ddf27_buggy.java
+++ b/tmp/dc380c9d-8863-4841-a12e-2fd490d2d9ea_fixed.java
@@ -1,27 +1,42 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
+
+        // Handle the case where the property is accessed via bracket notation
+        if (child.isStringKey()) {
+          name = child.getString();
+          prop = getProperty(name);
+          if (!prop.scheduleRenaming(child,
+                                     processProperty(t, prop, type, null))) {
+            if (propertiesToErrorFor.containsKey(name)) {
+              compiler.report(JSError.make(
+                  t.getSourceName(), child, propertiesToErrorFor.get(name),
+                  Warnings.INVALIDATION, name,
+                  (type == null ? "null" : type.toString()), n.toString(), ""));
+            }
+          }
+        }
       }
     }
\ No newline at end of file
