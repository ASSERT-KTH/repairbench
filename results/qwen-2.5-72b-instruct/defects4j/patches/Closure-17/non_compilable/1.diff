diff --git a/tmp/064c8e78-64d5-4312-9e74-b25828c21202_buggy.java b/tmp/6cdac0cd-66f1-4ca2-8e61-fd7af3575bb7_fixed.java
index eb9ce9f..78dd837 100644
--- a/tmp/064c8e78-64d5-4312-9e74-b25828c21202_buggy.java
+++ b/tmp/6cdac0cd-66f1-4ca2-8e61-fd7af3575bb7_fixed.java
@@ -1,60 +1,62 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
       } else if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
       } else if (info != null) {
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
         } else {
           // Check if this is constant, and if it has a known type.
           if (info.isConstant()) {
             JSType knownType = null;
             if (rValue != null) {
               if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
                 // If rValue has a type-cast, we use the type in the type-cast.
                 // If rValue's type was already computed during scope creation,
                 // then we can safely use that.
                 return rValue.getJSType();
               } else if (rValue.isOr()) {
                 // Check for a very specific JS idiom:
                 // var x = x || TYPE;
                 // This is used by Closure's base namespace for esoteric
                 // reasons.
                 Node firstClause = rValue.getFirstChild();
                 Node secondClause = firstClause.getNext();
                 boolean namesMatch = firstClause.isName()
                     && lValue.isName()
                     && firstClause.getString().equals(lValue.getString());
                 if (namesMatch && secondClause.getJSType() != null
                     && !secondClause.getJSType().isUnknownType()) {
                   return secondClause.getJSType();
                 }
               }
             }
           }
         }
       }
 
-      return getDeclaredTypeInAnnotation(sourceName, lValue, info);
+      // Ensure that the type is not null before returning it.
+      JSType declaredType = getDeclaredTypeInAnnotation(sourceName, lValue, info);
+      return declaredType != null ? declaredType : UNKNOWN_TYPE;
     }
\ No newline at end of file
