diff --git a/tmp/80dc606a-3d13-40cb-acf9-070e6d087013_buggy.java b/tmp/a22c6b41-e0f5-4a43-a40e-87236b457acb_fixed.java
index b4af58a..1f10be9 100644
--- a/tmp/80dc606a-3d13-40cb-acf9-070e6d087013_buggy.java
+++ b/tmp/a22c6b41-e0f5-4a43-a40e-87236b457acb_fixed.java
@@ -1,53 +1,40 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the first time period to copy (<code>null</code> not
-     *         permitted).
-     * @param end  the last time period to copy (<code>null</code> not
-     *         permitted).
-     *
-     * @return A time series containing a copy of this time series from start
-     *         until end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
 public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
         boolean emptyRange = false;
         int startIndex = getIndex(start);
         if (startIndex < 0) {
             startIndex = -(startIndex + 1);
             if (startIndex == this.data.size()) {
                 emptyRange = true;  // start is after last data item
             }
         }
         int endIndex = getIndex(end);
         if (endIndex < 0) {             // end period is not in original series
             endIndex = -(endIndex + 1); // this is first item AFTER end period
             endIndex = endIndex - 1;    // so this is last item BEFORE end
         }
         if (endIndex < 0) {
             emptyRange = true;
         }
         if (emptyRange) {
             TimeSeries copy = (TimeSeries) super.clone();
-            copy.data = new java.util.ArrayList();
+            copy.data = new java.util.ArrayList<>();
             return copy;
+        } else {
+            if (startIndex > endIndex) {
+                throw new IllegalArgumentException("Requires start <= end.");
             }
-        else {
             return createCopy(startIndex, endIndex);
         }
-
     }
\ No newline at end of file
