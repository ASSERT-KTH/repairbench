You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    /**
     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
     * <p />
     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
     * some more duplicates.
     */
    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
        // limit (no cache):
        if (count > maxStringCacheLen)
            return new String(charBuf, start, count);

        // calculate hash:
        int hash = 0;
        int offset = start;
        for (int i = 0; i < count; i++) {
            hash = 31 * hash + charBuf[offset++];
        }

        // get from cache
        final int index = hash & stringCache.length - 1;
        String cached = stringCache[index];

        if (cached == null) { // miss, add
            cached = new String(charBuf, start, count);
            stringCache[index] = cached;
        } else { // hashcode hit, check equality
            if (rangeEquals(charBuf, start, count, cached)) { // hit
                return cached;
            } else { // hashcode conflict
                cached = new String(charBuf, start, count);
                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
            }
        }
        return cached;
    }

```

The code fails the following tests.

Test `org.jsoup.parser.CharacterReaderTest::consumeToNonexistentEndWhenAtAnd`:
```java
    @Test
    public void consumeToNonexistentEndWhenAtAnd() {
        CharacterReader r = new CharacterReader("<!");
        assertTrue(r.matchConsume("<!"));
        assertTrue(r.isEmpty());

        String after = r.consumeTo('>');
        assertEquals("", after);

        assertTrue(r.isEmpty());
    }

```
Test `org.jsoup.parser.CharacterReaderTest::consumeToNonexistentEndWhenAtAnd` error:
```
java.lang.StringIndexOutOfBoundsException: String index out of range: -1
```

Test `org.jsoup.parser.HtmlParserTest::commentAtEnd`:
```java
  @Test public void commentAtEnd() throws Exception {
      Document doc = Jsoup.parse("<!");
      assertTrue(doc.childNode(0) instanceof Comment);
  }

```
Test `org.jsoup.parser.HtmlParserTest::commentAtEnd` error:
```
java.lang.StringIndexOutOfBoundsException: String index out of range: -1
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
