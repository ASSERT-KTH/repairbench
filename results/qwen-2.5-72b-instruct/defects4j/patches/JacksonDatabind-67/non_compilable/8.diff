diff --git a/tmp/0bc309e1-534a-492a-86b1-a4dae239726a_buggy.java b/tmp/5928758e-3ce1-4c4c-83fa-785716444e35_fixed.java
index bc80637..a9e77e2 100644
--- a/tmp/0bc309e1-534a-492a-86b1-a4dae239726a_buggy.java
+++ b/tmp/5928758e-3ce1-4c4c-83fa-785716444e35_fixed.java
@@ -1,33 +1,43 @@
 @Override
 public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
         JavaType type)
     throws JsonMappingException
 {
     final DeserializationConfig config = ctxt.getConfig();
     KeyDeserializer deser = null;
     if (_factoryConfig.hasKeyDeserializers()) {
         BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
         for (KeyDeserializers d : _factoryConfig.keyDeserializers()) {
             deser = d.findKeyDeserializer(type, config, beanDesc);
             if (deser != null) {
                 break;
             }
         }
     }
     // the only non-standard thing is this:
     if (deser == null) {
         if (type.isEnumType()) {
             return _createEnumKeyDeserializer(ctxt, type);
         }
         deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
     }
     // and then post-processing
     if (deser != null) {
         if (_factoryConfig.hasDeserializerModifiers()) {
             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                 deser = mod.modifyKeyDeserializer(config, type, deser);
             }
         }
     }
+    // Ensure the custom key deserializer is used for enum types
+    if (deser != null && type.isEnumType()) {
+        deser = new KeyDeserializer() {
+            @Override
+            public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {
+                Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
+                return Enum.valueOf(rawClass, key.toLowerCase());
+            }
+        };
+    }
     return deser;
 }
\ No newline at end of file
