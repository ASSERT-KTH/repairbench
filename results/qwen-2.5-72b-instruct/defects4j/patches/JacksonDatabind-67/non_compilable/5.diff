diff --git a/tmp/22ed542f-0a8d-47c2-a3da-400c23e9873b_buggy.java b/tmp/3968e0ba-3c2b-4009-bae7-ec1a5c050959_fixed.java
index bc80637..99a532e 100644
--- a/tmp/22ed542f-0a8d-47c2-a3da-400c23e9873b_buggy.java
+++ b/tmp/3968e0ba-3c2b-4009-bae7-ec1a5c050959_fixed.java
@@ -1,33 +1,43 @@
 @Override
 public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
         JavaType type)
     throws JsonMappingException
 {
     final DeserializationConfig config = ctxt.getConfig();
     KeyDeserializer deser = null;
     if (_factoryConfig.hasKeyDeserializers()) {
         BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
         for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
             deser = d.findKeyDeserializer(type, config, beanDesc);
             if (deser != null) {
                 break;
             }
         }
     }
     // the only non-standard thing is this:
     if (deser == null) {
         if (type.isEnumType()) {
             return _createEnumKeyDeserializer(ctxt, type);
         }
         deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
     }
     // and then post-processing
     if (deser != null) {
         if (_factoryConfig.hasDeserializerModifiers()) {
             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                 deser = mod.modifyKeyDeserializer(config, type, deser);
             }
         }
     }
     return deser;
 }
+
+private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt, JavaType type) {
+    final Class<Enum<?>> enumClass = (Class<Enum<?>>) type.getRawClass();
+    return new KeyDeserializer() {
+        @Override
+        public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {
+            return Enum.valueOf(enumClass, key.toLowerCase());
+        }
+    };
+}
\ No newline at end of file
