diff --git a/tmp/f16c1b76-d414-4156-a68a-50a1822b5597_buggy.java b/tmp/9c3e8810-81ad-4b86-9405-6c85837cd39d_fixed.java
index 1c53d31..415c7b7 100644
--- a/tmp/f16c1b76-d414-4156-a68a-50a1822b5597_buggy.java
+++ b/tmp/9c3e8810-81ad-4b86-9405-6c85837cd39d_fixed.java
@@ -1,20 +1,23 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
   TypeAdapter<?> typeAdapter;
   if (TypeAdapter.class.isAssignableFrom(value)) {
     Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
   } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
     Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
         .construct()
         .create(gson, fieldType);
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
+  // Ensure nullSafe is called only if the typeAdapter is not null
+  if (typeAdapter != null) {
     typeAdapter = typeAdapter.nullSafe();
+  }
   return typeAdapter;
 }
\ No newline at end of file
