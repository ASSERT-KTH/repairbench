diff --git a/tmp/a2078da4-2651-444a-8cc2-71c600a2b32c_buggy.java b/tmp/fe3662a3-9cb3-41fb-bac8-2e7c9f67a4af_fixed.java
index b86c1ea..c1bfbc4 100644
--- a/tmp/a2078da4-2651-444a-8cc2-71c600a2b32c_buggy.java
+++ b/tmp/fe3662a3-9cb3-41fb-bac8-2e7c9f67a4af_fixed.java
@@ -1,38 +1,30 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = Character.codePointCount(input, 0, input.length());
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
             } else {
-                        pos++;
+                for (int pt = 0; pt < consumed; pt++) {
+                    pos += Character.charCount(Character.codePointAt(input, pos));
                 }
             }
-                pos--;
-            }
-            pos++;
         }
     }
\ No newline at end of file
