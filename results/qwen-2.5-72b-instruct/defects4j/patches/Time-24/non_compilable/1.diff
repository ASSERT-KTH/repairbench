diff --git a/tmp/e56e2988-f00c-48ba-95f7-38521be8c560_buggy.java b/tmp/229052e2-f85b-4ad9-98d8-b38850a8cb53_fixed.java
index 99d6a44..a910dd3 100644
--- a/tmp/e56e2988-f00c-48ba-95f7-38521be8c560_buggy.java
+++ b/tmp/229052e2-f85b-4ad9-98d8-b38850a8cb53_fixed.java
@@ -1,58 +1,71 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
         // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
+    // Ensure the week-based year is correctly adjusted
+    if (iChrono instanceof GJChronology) {
+        GJChronology gjChrono = (GJChronology) iChrono;
+        LocalDate localDate = new LocalDate(millis, gjChrono);
+        int year = localDate.getYear();
+        int weekOfWeekyear = localDate.getWeekOfWeekyear();
+        int monthOfYear = localDate.getMonthOfYear();
+        int dayOfMonth = localDate.getDayOfMonth();
+        int dayOfWeek = localDate.getDayOfWeek();
+        
+        // Adjust the year if the week-based year is different
+        if (weekOfWeekyear == 1 && monthOfYear > 12) {
+            year += 1;
+        } else if (weekOfWeekyear == 53 && monthOfYear == 1) {
+            year -= 1;
+        }
+        
+        millis = gjChrono.year().set(millis, year);
+        millis = gjChrono.monthOfYear().set(millis, monthOfYear);
+        millis = gjChrono.dayOfMonth().set(millis, dayOfMonth);
+        millis = gjChrono.dayOfWeek().set(millis, dayOfWeek);
+    }
+    
     return millis;
 }
\ No newline at end of file
