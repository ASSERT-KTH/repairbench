diff --git a/tmp/5f37b78a-0995-4daa-bcd7-7c6f1232065e_buggy.java b/tmp/2bf2a8ed-3913-4cf3-a9e4-095a5840c217_fixed.java
index 99d6a44..189b421 100644
--- a/tmp/5f37b78a-0995-4daa-bcd7-7c6f1232065e_buggy.java
+++ b/tmp/2bf2a8ed-3913-4cf3-a9e4-095a5840c217_fixed.java
@@ -1,58 +1,83 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
+
+    // Check if the first field is a week-based field (weekyear or week)
+    boolean hasWeekBasedField = false;
+    for (int i = 0; i < count; i++) {
+        if (savedFields[i].iField.getType() == DateTimeFieldType.weekOfWeekyear() || savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {
+            hasWeekBasedField = true;
+            break;
+        }
+    }
+
+    if (hasWeekBasedField) {
+        // Handle week-based year and week fields
+        int weekyear = -1;
+        int week = -1;
+        int dayOfWeek = -1;
+        for (int i = 0; i < count; i++) {
+            if (savedFields[i].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {
+                week = savedFields[i].iValue;
+            } else if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {
+                weekyear = savedFields[i].iValue;
+            } else if (savedFields[i].iField.getType() == DateTimeFieldType.dayOfWeek()) {
+                dayOfWeek = savedFields[i].iValue;
+            }
+        }
+
+        if (weekyear != -1 && week != -1) {
+            DateTime dt = new DateTime(weekyear, 1, 1, 0, 0, 0, 0, iChrono);
+            dt = dt.withWeekOfWeekyear(week);
+            if (dayOfWeek != -1) {
+                dt = dt.withDayOfWeek(dayOfWeek);
+            }
+            return dt.getMillis();
+        }
+    }
+
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
+        // Alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
