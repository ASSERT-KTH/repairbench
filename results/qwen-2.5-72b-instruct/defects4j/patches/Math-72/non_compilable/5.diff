diff --git a/tmp/cb47d6de-074f-4db3-8ac4-9bb33029ceee_buggy.java b/tmp/53ab7f4b-ce9a-416a-8040-c427c689e2f0_fixed.java
index 0fe7b81..998c20b 100644
--- a/tmp/cb47d6de-074f-4db3-8ac4-9bb33029ceee_buggy.java
+++ b/tmp/53ab7f4b-ce9a-416a-8040-c427c689e2f0_fixed.java
@@ -1,67 +1,131 @@
-    /**
-     * Find a zero in the given interval with an initial guess.
-     * <p>Throws <code>IllegalArgumentException</code> if the values of the
-     * function at the three points have the same sign (note that it is
-     * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
-     *
-     * @param f function to solve.
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @param initial the start value to use (must be set to min if no
-     * initial point is known).
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException the maximum iteration count
-     * is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating
-     *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
-     */
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifySequence(min, initial, max);
 
     // return the initial guess if it is good enough
     double yInitial = f.value(initial);
     if (Math.abs(yInitial) <= functionValueAccuracy) {
         setResult(initial, 0);
         return result;
     }
 
     // return the first endpoint if it is good enough
     double yMin = f.value(min);
     if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        setResult(min, 0);
         return result;
     }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
     // return the second endpoint if it is good enough
     double yMax = f.value(max);
     if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+        setResult(max, 0);
         return result;
     }
 
+    // reduce interval if min and initial bracket the root
+    if (yInitial * yMin < 0) {
+        return solve(f, min, max, initial);
+    }
+
     // reduce interval if initial and max bracket the root
     if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+        return solve(f, initial, max, initial);
     }
 
     if (yMin * yMax > 0) {
         throw MathRuntimeException.createIllegalArgumentException(
               NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
     }
 
     // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
+    return solve(f, min, max, initial);
 
 }
+
+private double solve(final UnivariateRealFunction f,
+                     final double min, final double max, final double initial)
+    throws MaxIterationsExceededException, FunctionEvaluationException {
+
+    double a = min;
+    double b = max;
+    double c = initial;
+    double fa = f.value(a);
+    double fb = f.value(b);
+    double fc = f.value(c);
+
+    for (int i = 0; i < maxIterationCount; i++) {
+        if (Math.abs(fc) < functionValueAccuracy) {
+            setResult(c, i);
+            return result;
+        }
+        if (fa * fc < 0) {
+            b = c;
+            fb = fc;
+        } else {
+            a = c;
+            fa = fc;
+        }
+
+        if (Math.abs(fa) < Math.abs(fb)) {
+            double temp = a;
+            a = b;
+            b = temp;
+            temp = fa;
+            fa = fb;
+            fb = temp;
+        }
+
+        double tol1 = 2 * epsilon * Math.abs(b) + 0.5 * functionValueAccuracy;
+        double m = 0.5 * (a - b);
+        if (Math.abs(m) <= tol1 || fb == 0) {
+            setResult(b, i);
+            return result;
+        }
+
+        double p, q, r;
+        if (Math.abs(e) < tol1 || Math.abs(fa) <= Math.abs(fb)) {
+            e = m;
+            d = e;
+        } else {
+            double s = fb / fa;
+            if (a == c) {
+                p = 2 * m * s;
+                q = 1 - s;
+            } else {
+                q = fa / fc;
+                r = fb / fc;
+                p = s * (2 * m * q * (q - r) - (b - c) * (r - 1));
+                q = (q - 1) * (r - 1) * (s - 1);
+            }
+            if (p > 0) {
+                q = -q;
+            } else {
+                p = -p;
+            }
+            r = e;
+            e = d;
+        }
+
+        if (2 * p < 3 * m * q - Math.abs(tol1 * q) && p < Math.abs(0.5 * r * q)) {
+            d = p / q;
+        } else {
+            d = m;
+            e = m;
+        }
+
+        c = b;
+        fc = fb;
+        if (Math.abs(d) > tol1) {
+            b += d;
+        } else {
+            b += (m > 0 ? tol1 : -tol1);
+        }
+        fb = f.value(b);
+    }
+
+    throw new MaxIterationsExceededException(maxIterationCount);
+}
\ No newline at end of file
