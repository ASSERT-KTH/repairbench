diff --git a/tmp/fcc1efdc-d76a-4000-bc58-686641c75da6_buggy.java b/tmp/5b22ad9f-2918-4180-9285-d0410a072ade_fixed.java
index 25ca093..7928129 100644
--- a/tmp/fcc1efdc-d76a-4000-bc58-686641c75da6_buggy.java
+++ b/tmp/5b22ad9f-2918-4180-9285-d0410a072ade_fixed.java
@@ -1,52 +1,76 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM (Byte Order Mark) and determine the correct charset
+    byte[] bom = new byte[4];
+    byteData.rewind();
+    int bytesRead = byteData.get(bom);
+    byteData.rewind();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
+    String foundCharset = null;
+
+    if (bytesRead >= 3) {
+        if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+            foundCharset = "UTF-8";
+            byteData.position(3); // skip BOM
+        } else if (bytesRead >= 4) {
+            if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+                foundCharset = "UTF-32LE";
+                byteData.position(4); // skip BOM
+            } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+                foundCharset = "UTF-32BE";
+                byteData.position(4); // skip BOM
+            } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+                foundCharset = "UTF-16BE";
+                byteData.position(2); // skip BOM
+            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+                foundCharset = "UTF-16LE";
+                byteData.position(2); // skip BOM
+            }
+        }
+    }
+
+    if (charsetName == null && foundCharset == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
+    } else {
+        if (foundCharset != null) {
+            charsetName = foundCharset;
+        } else if (charsetName == null) {
             charsetName = defaultCharset;
-            doc = null;
         }
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+    }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
\ No newline at end of file
