diff --git a/tmp/ef947e42-182a-42cf-b2ed-08a8fd28cc0b_buggy.java b/tmp/6d1bc264-5944-4528-94df-2fd39220198b_fixed.java
index f650982..4e5c686 100644
--- a/tmp/ef947e42-182a-42cf-b2ed-08a8fd28cc0b_buggy.java
+++ b/tmp/6d1bc264-5944-4528-94df-2fd39220198b_fixed.java
@@ -1,42 +1,41 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+
+    // Handle null values explicitly to avoid issues with equals method
+    if (l == null) {
+        return r == null;
+    }
+
+    return l.equals(r);
 }
\ No newline at end of file
