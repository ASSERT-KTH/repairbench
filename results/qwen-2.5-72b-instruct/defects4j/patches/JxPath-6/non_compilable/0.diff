diff --git a/tmp/9116e01c-d151-4bf7-823b-a61d5bbd07ca_buggy.java b/tmp/d56c499c-13d7-4f7c-bed3-c107b83e3ec4_fixed.java
index f650982..f58935d 100644
--- a/tmp/9116e01c-d151-4bf7-823b-a61d5bbd07ca_buggy.java
+++ b/tmp/d56c499c-13d7-4f7c-bed3-c107b83e3ec4_fixed.java
@@ -1,42 +1,58 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    return l == null ? r == null : l.equals(r);
+}
+
+private boolean contains(Iterator iter, Object value) {
+    while (iter.hasNext()) {
+        if (value == null ? iter.next() == null : value.equals(iter.next())) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private boolean findMatch(Iterator iter1, Iterator iter2) {
+    while (iter1.hasNext()) {
+        Object o1 = iter1.next();
+        while (iter2.hasNext()) {
+            Object o2 = iter2.next();
+            if (o1 == null ? o2 == null : o1.equals(o2)) {
+                return true;
+            }
+        }
+        iter2 = ((Collection) r).iterator(); // Reset the iterator for the second collection
+    }
+    return false;
 }
\ No newline at end of file
