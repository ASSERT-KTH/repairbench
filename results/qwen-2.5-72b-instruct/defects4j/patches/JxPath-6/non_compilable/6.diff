diff --git a/tmp/6a3bff0e-ca26-4351-a589-00b91f24d606_buggy.java b/tmp/094c6b44-896c-4041-88f8-df2d40942f41_fixed.java
index f650982..6e79182 100644
--- a/tmp/6a3bff0e-ca26-4351-a589-00b91f24d606_buggy.java
+++ b/tmp/094c6b44-896c-4041-88f8-df2d40942f41_fixed.java
@@ -1,42 +1,56 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
-        }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
-        }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+
+    if (l instanceof Iterator) {
+        return contains((Iterator) l, r);
+    }
+
+    if (r instanceof Iterator) {
+        return contains((Iterator) r, l);
+    }
+
+    return Objects.equals(l, r);
+}
+
+private boolean contains(Iterator iterator, Object value) {
+    while (iterator.hasNext()) {
+        if (Objects.equals(iterator.next(), value)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private boolean findMatch(Iterator l, Iterator r) {
+    while (l.hasNext() && r.hasNext()) {
+        if (Objects.equals(l.next(), r.next())) {
+            return true;
+        }
+    }
+    return false;
 }
\ No newline at end of file
