diff --git a/tmp/7088df81-3540-48d2-b401-40622a4681d7_buggy.java b/tmp/5082e009-0c09-494d-8a65-7cc3bbdd75e4_fixed.java
index f650982..b564907 100644
--- a/tmp/7088df81-3540-48d2-b401-40622a4681d7_buggy.java
+++ b/tmp/5082e009-0c09-494d-8a65-7cc3bbdd75e4_fixed.java
@@ -1,42 +1,64 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
     // System.err.println("COMPARING: " +
     //     (l == null ? "null" : l.getClass().getName()) + " " +
     //     (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    return equalObjects(l, r);
+}
+
+private boolean contains(Iterator iterator, Object value) {
+    while (iterator.hasNext()) {
+        if (equalObjects(iterator.next(), value)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private boolean findMatch(Iterator iterator1, Iterator iterator2) {
+    while (iterator1.hasNext() && iterator2.hasNext()) {
+        if (equalObjects(iterator1.next(), iterator2.next())) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private boolean equalObjects(Object o1, Object o2) {
+    if (o1 == null) {
+        return o2 == null;
+    }
+    return o1.equals(o2);
 }
\ No newline at end of file
