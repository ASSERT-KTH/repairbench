diff --git a/tmp/23e0fa38-f7f4-47fb-ba6d-b7ad08de4c68_buggy.java b/tmp/31fd390f-547c-4c21-a250-904ae228c736_fixed.java
index 88647d1..5a391e0 100644
--- a/tmp/23e0fa38-f7f4-47fb-ba6d-b7ad08de4c68_buggy.java
+++ b/tmp/31fd390f-547c-4c21-a250-904ae228c736_fixed.java
@@ -1,44 +1,36 @@
-    /**
-     * Find a zero in the given interval.
-     * <p>
-     * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
-     * 
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
-     */
 public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
     
     clearResult();
     verifyInterval(min, max);
     
     double ret = Double.NaN;
     
     double yMin = f.value(min);
     double yMax = f.value(max);
     
+    // Check if either endpoint is a root
+    if (yMin == 0) {
+        return min;
+    }
+    if (yMax == 0) {
+        return max;
+    }
+    
     // Verify bracketing
     double sign = yMin * yMax;
     if (sign >= 0) {
         // check if either value is close to a zero
         // neither value is close to zero and min and max do not bracket root.
         throw new IllegalArgumentException
                 ("Function values at endpoints do not have different signs." +
                         "  Endpoints: [" + min + "," + max + "]" + 
                         "  Values: [" + yMin + "," + yMax + "]");
     } else {
         // solve using only the first endpoint as initial guess
         ret = solve(min, yMin, max, yMax, min, yMin);
         // either min or max is a root
     }
 
     return ret;
 }
\ No newline at end of file
