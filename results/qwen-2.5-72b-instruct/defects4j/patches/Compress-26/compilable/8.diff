diff --git a/tmp/090b58d8-0d02-4ffa-8026-3330373b9a3a_buggy.java b/tmp/8fd84972-7f15-4647-b6ff-fde2a0329d0b_fixed.java
index 4b163f6..b8737a3 100644
--- a/tmp/090b58d8-0d02-4ffa-8026-3330373b9a3a_buggy.java
+++ b/tmp/8fd84972-7f15-4647-b6ff-fde2a0329d0b_fixed.java
@@ -1,28 +1,33 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
+                byte[] buffer = new byte[1024];
+                int read;
+                while (numToSkip > 0 && (read = input.read(buffer, 0, (int) Math.min(numToSkip, 1024))) != -1) {
+                    numToSkip -= read;
+                }
                 break;
             }
             numToSkip -= skipped;
         }
             
         return available - numToSkip;
     }
\ No newline at end of file
