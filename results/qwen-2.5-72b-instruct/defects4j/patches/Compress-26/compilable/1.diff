diff --git a/tmp/f760b3d7-80ee-44b8-824c-9f50606f59b0_buggy.java b/tmp/4beb2710-e229-4d68-ab9c-716077efe4fe_fixed.java
index 4b163f6..2e8c267 100644
--- a/tmp/f760b3d7-80ee-44b8-824c-9f50606f59b0_buggy.java
+++ b/tmp/4beb2710-e229-4d68-ab9c-716077efe4fe_fixed.java
@@ -1,28 +1,17 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
+                // If skip returns 0, fall back to using read
+                int readByte;
+                while (numToSkip > 0 && (readByte = input.read()) != -1) {
+                    numToSkip--;
+                }
                 break;
             }
             numToSkip -= skipped;
         }
             
         return available - numToSkip;
     }
\ No newline at end of file
