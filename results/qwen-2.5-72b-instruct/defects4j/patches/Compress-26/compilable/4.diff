diff --git a/tmp/42a37109-90d8-4e25-a0a6-cb7f18341293_buggy.java b/tmp/4f8ca470-e3f6-40db-bb9f-900fd8d63e46_fixed.java
index 4b163f6..daebaa5 100644
--- a/tmp/42a37109-90d8-4e25-a0a6-cb7f18341293_buggy.java
+++ b/tmp/4f8ca470-e3f6-40db-bb9f-900fd8d63e46_fixed.java
@@ -1,28 +1,18 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
-                break;
+                // If skip() returns 0, fall back to read()
+                byte[] buffer = new byte[(int) Math.min(numToSkip, 1024)];
+                int read = input.read(buffer);
+                if (read == -1) {
+                    break; // End of stream reached
+                }
+                skipped = read;
             }
             numToSkip -= skipped;
         }
             
         return available - numToSkip;
     }
\ No newline at end of file
