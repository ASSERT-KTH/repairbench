diff --git a/tmp/f888a67d-ea20-4196-a115-38e6abb441c0_buggy.java b/tmp/cfc2e9a2-640e-4bbc-9498-3532b30b1d92_fixed.java
index f843d29..210d8e3 100644
--- a/tmp/f888a67d-ea20-4196-a115-38e6abb441c0_buggy.java
+++ b/tmp/cfc2e9a2-640e-4bbc-9498-3532b30b1d92_fixed.java
@@ -1,68 +1,64 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
         if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
+
+        if (ch0 == '_') {
+            if (len < 3) {
+                throw new IllegalArgumentException("Must be at least 3 chars if starts with underscore: " + str);
+            }
+            if (len < 5) {
+                throw new IllegalArgumentException("Must be at least 5 chars if starts with underscore: " + str);
+            }
+            if (str.charAt(2) != '_') {
+                throw new IllegalArgumentException("Must have uppercase country code after the first underscore: " + str);
+            }
+            if (!Character.isUpperCase(str.charAt(3)) || !Character.isUpperCase(str.charAt(4))) {
+                throw new IllegalArgumentException("Must be uppercase if starts with underscore: " + str);
+            }
+            if (len == 5) {
+                return new Locale("", str.substring(1, 3));
+            }
+            if (str.charAt(5) != '_') {
+                throw new IllegalArgumentException("Must have underscore after the country if starts with underscore and is at least 5 chars: " + str);
+            }
+            return new Locale("", str.substring(1, 3), str.substring(6));
+        }
+
         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (len == 2) {
             return new Locale(str);
         }
         if (len < 5) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch3 = str.charAt(3);
         if (ch3 == '_') {
             return new Locale(str.substring(0, 2), "", str.substring(4));
         }
         final char ch4 = str.charAt(4);
         if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (len == 5) {
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
         if (len < 7) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (str.charAt(5) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
