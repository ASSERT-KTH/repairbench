diff --git a/tmp/53193020-6f74-453a-b104-a48efac4073c_buggy.java b/tmp/bbb34d53-1624-4e64-8f3b-64654b6fb544_fixed.java
index 19fd63e..edd4a23 100644
--- a/tmp/53193020-6f74-453a-b104-a48efac4073c_buggy.java
+++ b/tmp/bbb34d53-1624-4e64-8f3b-64654b6fb544_fixed.java
@@ -1,24 +1,37 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          // Check if the expression is a method call on a property
+          if (maybeExpr.isCall() && maybeExpr.getFirstChild().isGetProp()) {
+            String methodName = maybeExpr.getFirstChild().getLastChild().getString();
+            // Avoid folding methods that are known to be event handlers
+            return !isEventHandler(methodName);
+          }
+          return true;
+        }
       }
     }
 
     return false;
   }
+
+  // Helper method to check if a method name is an event handler
+  private boolean isEventHandler(String methodName) {
+    // List of known event handler names
+    return methodName.startsWith("on");
+  }
\ No newline at end of file
