diff --git a/tmp/2387d9e9-d657-4db6-9822-1a61e1f1caa7_buggy.java b/tmp/66d4002b-36c2-4801-9294-ed8fb31dcc75_fixed.java
index 19fd63e..db8ae05 100644
--- a/tmp/2387d9e9-d657-4db6-9822-1a61e1f1caa7_buggy.java
+++ b/tmp/66d4002b-36c2-4801-9294-ed8fb31dcc75_fixed.java
@@ -1,24 +1,39 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          // Check if the expression is a CALL and if the method name might be an event handler
+          if (maybeExpr.getType() == Token.CALL) {
+            Node callTarget = maybeExpr.getFirstChild();
+            if (callTarget.getType() == Token.GETPROP) {
+              String methodName = callTarget.getLastChild().getString();
+              // List of known event handler names that should not be folded
+              String[] eventHandlerNames = {"onchange", "onclick", "onload", "onerror", "onsubmit"};
+              for (String handler : eventHandlerNames) {
+                if (methodName.equals(handler)) {
+                  return false;
+                }
+              }
+            }
+          }
+          return true;
+        }
       }
     }
 
     return false;
   }
\ No newline at end of file
