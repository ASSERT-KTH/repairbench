diff --git a/tmp/1c067c3d-f7de-4cf5-8036-815b6fab4a04_buggy.java b/tmp/fd511fb5-6021-44fa-be1c-195ca00e8eed_fixed.java
index b05b859..189556d 100644
--- a/tmp/1c067c3d-f7de-4cf5-8036-815b6fab4a04_buggy.java
+++ b/tmp/fd511fb5-6021-44fa-be1c-195ca00e8eed_fixed.java
@@ -1,61 +1,66 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
       // option, and checkTypes is enabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
-
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
     // checks the externs file for validity. If you don't want to warn
     // about missing variable declarations, we shut that specific
     // error off.
     if (!options.checkSymbols &&
         (warningsGuard == null || !warningsGuard.disables(
             DiagnosticGroups.CHECK_VARIABLES))) {
       guards.add(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+    } else if (options.warningLevel == CheckLevel.QUIET) {
+      // Special case for QUIET warning level: ensure that undefinedVars error is not suppressed.
+      if (options.jscompErrors.contains("undefinedVars")) {
+        guards.add(new DiagnosticGroupWarningsGuard(
+            DiagnosticGroups.CHECK_VARIABLES, CheckLevel.ERROR));
+      }
     }
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
