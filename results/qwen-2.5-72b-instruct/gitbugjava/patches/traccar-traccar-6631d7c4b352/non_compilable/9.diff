diff --git a/tmp/87788c64-8820-4edc-95cd-90cc8f794a0d_buggy.java b/tmp/6946c4a5-815b-43db-959d-27aa41c31eff_fixed.java
index d87dd79..efc6c49 100644
--- a/tmp/87788c64-8820-4edc-95cd-90cc8f794a0d_buggy.java
+++ b/tmp/6946c4a5-815b-43db-959d-27aa41c31eff_fixed.java
@@ -1,47 +1,54 @@
 @Override
 protected Object decode(
         ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
+    while (buf.isReadable()) {
         int endIndex = -1;
         for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
             if (buf.getByte(i) == ']') {
                 endIndex = i + 1;
                 break;
             }
         }
 
-        if (endIndex > 0) {
+        if (endIndex > 0 && endIndex - buf.readerIndex() > 1) {
             ByteBuf frame = Unpooled.buffer();
+            int frameStart = buf.readerIndex();
             while (buf.readerIndex() < endIndex) {
                 byte b1 = buf.readByte();
                 if (b1 == '}') {
                     byte b2 = buf.readByte();
                     switch (b2) {
                         case 0x01:
                             frame.writeByte('}');
                             break;
                         case 0x02:
                             frame.writeByte('[');
                             break;
                         case 0x03:
                             frame.writeByte(']');
                             break;
                         case 0x04:
                             frame.writeByte(',');
                             break;
                         case 0x05:
                             frame.writeByte('*');
                             break;
                         default:
                             throw new IllegalArgumentException(String.format(
                                     "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
                     }
                 } else {
                     frame.writeByte(b1);
                 }
             }
+            buf.readerIndex(frameStart); // Reset reader index to the start of the frame
+            buf.readBytes(frame, frame.readableBytes()); // Read the frame bytes
             return frame;
+        } else {
+            break;
+        }
     }
 
     return null;
 }
\ No newline at end of file
