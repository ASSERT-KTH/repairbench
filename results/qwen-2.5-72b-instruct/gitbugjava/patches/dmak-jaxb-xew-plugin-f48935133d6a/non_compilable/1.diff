diff --git a/tmp/457d2e82-7185-4825-b6d4-2c86d2e29dc7_buggy.java b/tmp/0551f21a-903b-4d49-aa64-9df4a37eb419_fixed.java
index 47a8941..9abcf7d 100644
--- a/tmp/457d2e82-7185-4825-b6d4-2c86d2e29dc7_buggy.java
+++ b/tmp/0551f21a-903b-4d49-aa64-9df4a37eb419_fixed.java
@@ -1,53 +1,51 @@
-	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
-	 */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
     // Modify the container so it now refers the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
         // In this scenario class should have "static" modifier reset otherwise it won't compile:
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
                 // FIXME: Inner class is always a local declaration.
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
 
                 break;
             }
         }
     }
 
+    String newName = clazz.name();
     if (classes.containsKey(clazz.name())) {
         writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+        newName = parent.name() + clazz.name();
+        setPrivateField(clazz, "name", newName);
     }
 
-		classes.put(clazz.name(), clazz);
+    classes.put(newName, clazz);
 
     // Finally modify the class so that it refers back the container:
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
