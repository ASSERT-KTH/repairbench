diff --git a/tmp/9cd31757-8dea-44d5-840a-dc5b228548c3_buggy.java b/tmp/9f7d504a-cc77-4fe3-8134-92f88ad3b8ed_fixed.java
index 016a7f6..12f364c 100644
--- a/tmp/9cd31757-8dea-44d5-840a-dc5b228548c3_buggy.java
+++ b/tmp/9f7d504a-cc77-4fe3-8134-92f88ad3b8ed_fixed.java
@@ -1,29 +1,34 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank) return;
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
+        // Fix: Ensure no extra space is added before the span in the case of a block element preceding it.
+        if (normaliseWhite && trimLeading) {
+            accum.append(coreValue().trim());
+        } else {
             Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
         }
+    }
\ No newline at end of file
