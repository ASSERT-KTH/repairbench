diff --git a/tmp/2e8f3584-d27a-4d48-b87a-cc3109e89646_buggy.java b/tmp/3addd8bd-ef55-4778-8617-c3f864fa466b_fixed.java
index 855afa5..b5f45d4 100644
--- a/tmp/2e8f3584-d27a-4d48-b87a-cc3109e89646_buggy.java
+++ b/tmp/3addd8bd-ef55-4778-8617-c3f864fa466b_fixed.java
@@ -1,13 +1,35 @@
 static URL encodeUrl(URL u) {
     u = punyUrl(u);
     try {
         //  odd way to encode urls, but it works!
         String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
+        
+        // Split the URL into its components to properly encode each part
+        String scheme = u.getProtocol();
+        String authority = u.getAuthority();
+        String path = u.getPath();
+        String query = u.getQuery();
+        String fragment = u.getRef();
+        
+        // Encode the path and query parameters
+        path = URLEncoder.encode(path, "UTF-8").replace("+", "%20");
+        if (query != null) {
+            query = URLEncoder.encode(query, "UTF-8").replace("+", "%20");
+        }
+        
+        // Reconstruct the URL
+        String encodedUrl = scheme + "://" + authority + path;
+        if (query != null) {
+            encodedUrl += "?" + query;
+        }
+        if (fragment != null) {
+            encodedUrl += "#" + fragment;
+        }
+        
+        final URI uri = new URI(encodedUrl);
         return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
+    } catch (URISyntaxException | MalformedURLException | UnsupportedEncodingException e) {
         // give up and return the original input
         return u;
     }
 }
\ No newline at end of file
