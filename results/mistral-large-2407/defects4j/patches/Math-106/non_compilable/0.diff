diff --git a/tmp/f9e50320-decc-45ab-88a3-339cc4fed85e_buggy.java b/tmp/12f54f52-bf2b-4650-9ad7-366b901ac2cc_fixed.java
index 42c5923..70057db 100644
--- a/tmp/f9e50320-decc-45ab-88a3-339cc4fed85e_buggy.java
+++ b/tmp/12f54f52-bf2b-4650-9ad7-366b901ac2cc_fixed.java
@@ -1,89 +1,89 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
 
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
-            // minus signs should be leading, invalid expression
+        // Ensure num does not contain any minus sign
+        if (num.toString().startsWith("-")) {
+            // invalid minus sign in numerator
+            // set index back to initial, error index should already be set
+            pos.setIndex(initialIndex);
+            return null;
+        }
 
         // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
             // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+            // return whole and num as a fraction
+            return new Fraction((whole.intValue() * getDenominatorFormat().DEFAULT_DENOMINATOR) + num.intValue(), getDenominatorFormat().DEFAULT_DENOMINATOR);
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
             // invalid '/'
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
-            // minus signs must be leading, invalid
+        // Ensure den does not contain any minus sign
+        if (den.toString().startsWith("-")) {
+            // invalid minus sign in denominator
+            // set index back to initial, error index should already be set
+            pos.setIndex(initialIndex);
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
\ No newline at end of file
