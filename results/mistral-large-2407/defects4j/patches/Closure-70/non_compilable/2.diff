diff --git a/tmp/8add8d46-63c0-432f-9963-6e2c91d58f76_buggy.java b/tmp/a309e1cd-cbf8-4a00-a83f-1b3982cdaead_fixed.java
index 1530b34..c372bf6 100644
--- a/tmp/8add8d46-63c0-432f-9963-6e2c91d58f76_buggy.java
+++ b/tmp/a309e1cd-cbf8-4a00-a83f-1b3982cdaead_fixed.java
@@ -1,23 +1,39 @@
     /**
      * Declares all of a function's arguments.
      */
     private void declareArguments(Node functionNode) {
       Node astParameters = functionNode.getFirstChild().getNext();
       Node body = astParameters.getNext();
       FunctionType functionType = (FunctionType) functionNode.getJSType();
       if (functionType != null) {
         Node jsDocParameters = functionType.getParametersNode();
         if (jsDocParameters != null) {
           Node jsDocParameter = jsDocParameters.getFirstChild();
           for (Node astParameter : astParameters.children()) {
             if (jsDocParameter != null) {
               defineSlot(astParameter, functionNode,
                   jsDocParameter.getJSType(), true);
               jsDocParameter = jsDocParameter.getNext();
             } else {
               defineSlot(astParameter, functionNode, null, true);
             }
           }
+          // Check for duplicate local variable declarations
+          Set<String> declaredVars = new HashSet<>();
+          for (Node child : body.children()) {
+            if (child.getType() == Token.VAR) {
+              for (Node varChild : child.children()) {
+                if (varChild.getType() == Token.NAME) {
+                  String varName = varChild.getString();
+                  if (declaredVars.contains(varName)) {
+                    report(child, JSError.make(child, VARIABLE_REDEFINITION, varName));
+                  } else {
+                    declaredVars.add(varName);
+                  }
+                }
+              }
+            }
+          }
         }
       }
     } // end declareArguments
\ No newline at end of file
