diff --git a/tmp/ac5d40ed-f9c8-4a99-8289-3f433e26d3e6_buggy.java b/tmp/33cdfee2-2c50-41da-a900-d2ed6cb6e1b3_fixed.java
index 19fd63e..d5e8945 100644
--- a/tmp/ac5d40ed-f9c8-4a99-8289-3f433e26d3e6_buggy.java
+++ b/tmp/33cdfee2-2c50-41da-a900-d2ed6cb6e1b3_fixed.java
@@ -1,24 +1,35 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
 
+        if (maybeExpr.isCall()) {
+          // Check if the call is a property call of a displayable name
+          // that could potentially be an event handler.
+          if (maybeExpr.isGetProp()) {
+            String propertyName = maybeExpr.getLastChild().getString();
+            if (propertyName.contains("on")) {
+              return false;
+            }
+          }
+        }
+
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
\ No newline at end of file
