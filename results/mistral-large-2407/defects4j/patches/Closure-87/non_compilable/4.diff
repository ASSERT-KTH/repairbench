diff --git a/tmp/39ad68b0-92fb-4006-ad4d-2ebb51536f68_buggy.java b/tmp/71ac8185-1cb6-479f-a203-d4740c9425fa_fixed.java
index 19fd63e..d4e742b 100644
--- a/tmp/39ad68b0-92fb-4006-ad4d-2ebb51536f68_buggy.java
+++ b/tmp/71ac8185-1cb6-479f-a203-d4740c9425fa_fixed.java
@@ -1,24 +1,32 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
 
+        if (maybeExpr.isExprResult() && maybeExpr.getFirstChild().isCall()) {
+          Node firstGrandchild = maybeExpr.getFirstChild().getFirstChild();
+          if (firstGrandchild.isName() &&
+              firstGrandchild.getString().equals("onchange")) {
+            return false; // Special case for 'onchange'
+          }
+        }
+
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
\ No newline at end of file
