diff --git a/tmp/7125c174-59f9-4237-aebe-01bc40059d5b_buggy.java b/tmp/b6a6f70a-cd97-4de5-96bc-924bff51d2bf_fixed.java
index c9da1b7..29b1eef 100644
--- a/tmp/7125c174-59f9-4237-aebe-01bc40059d5b_buggy.java
+++ b/tmp/b6a6f70a-cd97-4de5-96bc-924bff51d2bf_fixed.java
@@ -1,33 +1,28 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
+
     // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if ((_explicitCreators & mask) != 0) {
+            // already had explicitly annotated, leave as-is
             if (!explicit) {
                 return;
             }
+
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
+            if (oldOne.getDeclaringClass() == newOne.getDeclaringClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
-
                 throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                         + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
         }
+    }
+
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
