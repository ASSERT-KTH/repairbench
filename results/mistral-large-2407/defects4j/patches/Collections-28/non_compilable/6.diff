diff --git a/tmp/0b0312a6-aaff-476b-b0ff-17fbef4100b8_buggy.java b/tmp/e1138157-4a39-4626-906f-25bd8b7ee6e1_fixed.java
index e69de29..c57660c 100644
--- a/tmp/0b0312a6-aaff-476b-b0ff-17fbef4100b8_buggy.java
+++ b/tmp/e1138157-4a39-4626-906f-25bd8b7ee6e1_fixed.java
@@ -0,0 +1,111 @@
+public class PatriciaTrie<V> implements Trie<String, V> {
+
+    private Node<V> root;
+
+    public PatriciaTrie() {
+        this.root = new Node<>();
+    }
+
+    // Other methods...
+
+    @Override
+    public SortedMap<String, V> prefixMap(String prefix) {
+        Node<V> node = findNode(prefix, true);
+        if (node == null) {
+            return Collections.emptySortedMap();
+        }
+        return new PrefixMap<>(prefix, node);
+    }
+
+    // Internal node class and other utility methods...
+
+    private class PrefixMap<V> extends AbstractMap<String, V> implements SortedMap<String, V> {
+
+        private final String prefix;
+        private final Node<V> node;
+
+        public PrefixMap(String prefix, Node<V> node) {
+            this.prefix = prefix;
+            this.node = node;
+        }
+
+        @Override
+        public Set<Entry<String, V>> entrySet() {
+            Set<Entry<String, V>> entrySet = new TreeSet<>(Comparator.comparing(Map.Entry::getKey));
+            collectEntries(node, prefix, entrySet);
+            return entrySet;
+        }
+
+        @Override
+        public void clear() {
+            node.clear(root, prefix);
+        }
+
+        @Override
+        public Comparator<? super String> comparator() {
+            return null;
+        }
+
+        @Override
+        public SortedMap<String, V> subMap(String fromKey, String toKey) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public SortedMap<String, V> headMap(String toKey) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public SortedMap<String, V> tailMap(String fromKey) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public String firstKey() {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public String lastKey() {
+            throw new UnsupportedOperationException();
+        }
+
+        private void collectEntries(Node<V> node, String prefix, Set<Entry<String, V>> entrySet) {
+            if (node.value != null) {
+                entrySet.add(new SimpleEntry<>(prefix, node.value));
+            }
+            for (Map.Entry<String, Node<V>> entry : node.children.entrySet()) {
+                collectEntries(entry.getValue(), prefix + entry.getKey(), entrySet);
+            }
+        }
+    }
+
+    // Node class and other internal methods...
+
+    private static class Node<V> {
+        V value;
+        final Map<String, Node<V>> children = new TreeMap<>();
+
+        void clear(Node<V> root, String prefix) {
+            if (children.isEmpty()) {
+                removePrefix(root, prefix);
+            } else {
+                for (Node<V> child : children.values()) {
+                    child.clear(root, prefix + child.prefix);
+                }
+            }
+        }
+
+        private void removePrefix(Node<V> node, String prefix) {
+            if (prefix.isEmpty()) {
+                node.children.remove(prefix);
+            } else {
+                Node<V> child = node.children.get(prefix.substring(0, 1));
+                if (child != null) {
+                    child.removePrefix(child, prefix.substring(1));
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
