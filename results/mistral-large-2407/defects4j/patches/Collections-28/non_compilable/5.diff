diff --git a/tmp/a1e1d72a-10ce-48f6-813f-214ca45add95_buggy.java b/tmp/ed2d964e-05ec-48d7-a1da-3d496afb60b4_fixed.java
index e69de29..e4066d1 100644
--- a/tmp/a1e1d72a-10ce-48f6-813f-214ca45add95_buggy.java
+++ b/tmp/ed2d964e-05ec-48d7-a1da-3d496afb60b4_fixed.java
@@ -0,0 +1,115 @@
+public SortedMap<String, Integer> prefixMap(String prefix) {
+    Node<Integer> rootNode = findNode(prefix);
+    if (rootNode != null) {
+        return new SubMap<>(rootNode, false, true);
+    }
+    return new TreeMap<>();
+}
+
+private Node<Integer> findNode(String prefix) {
+    Node<Integer> currentNode = root;
+    int level = 0;
+    while (currentNode != null && level < prefix.length()) {
+        int index = prefix.charAt(level) - 'a';
+        Node<Integer> nextNode = currentNode.transitions[index];
+        if (nextNode == null) {
+            return null;
+        }
+        currentNode = nextNode;
+        level++;
+    }
+    if (level == prefix.length()) {
+        return currentNode;
+    }
+    return null;
+}
+
+private static class SubMap<V> extends AbstractMap<String, V> implements SortedMap<String, V> {
+    private final Node<V> rootNode;
+    private final boolean fromStart;
+    private final boolean toEnd;
+
+    public SubMap(Node<V> rootNode, boolean fromStart, boolean toEnd) {
+        this.rootNode = rootNode;
+        this.fromStart = fromStart;
+        this.toEnd = toEnd;
+    }
+
+    @Override
+    public Set<Entry<String, V>> entrySet() {
+        return new AbstractSet<Entry<String, V>>() {
+            @Override
+            public Iterator<Entry<String, V>> iterator() {
+                return new EntrySetIterator();
+            }
+
+            @Override
+            public int size() {
+                return rootNode.size;
+            }
+        };
+    }
+
+    @Override
+    public Comparator<? super String> comparator() {
+        return null;
+    }
+
+    @Override
+    public SortedMap<String, V> subMap(String fromKey, String toKey) {
+        return new SubMap<>(rootNode, false, false);
+    }
+
+    @Override
+    public SortedMap<String, V> headMap(String toKey) {
+        return new SubMap<>(rootNode, fromStart, false);
+    }
+
+    @Override
+    public SortedMap<String, V> tailMap(String fromKey) {
+        return new SubMap<>(rootNode, false, toEnd);
+    }
+
+    @Override
+    public String firstKey() {
+        return null; // Implement based on your requirements
+    }
+
+    @Override
+    public String lastKey() {
+        return null; // Implement based on your requirements
+    }
+
+    public void clear() {
+        if (rootNode != null) {
+            rootNode.transitions = new Node[26];
+        }
+    }
+
+    private class EntrySetIterator implements Iterator<Entry<String, V>> {
+        private final LinkedList<Node.Entry<String, V>> entries = new LinkedList<>();
+        private Iterator<Node.Entry<String, V>> currentIterator;
+
+        public EntrySetIterator() {
+            if (rootNode != null) {
+                entries.addAll(rootNode.entries());
+            }
+            if (!entries.isEmpty()) {
+                currentIterator = entries.iterator();
+            }
+        }
+
+        @Override
+        public boolean hasNext() {
+            return currentIterator != null && currentIterator.hasNext();
+        }
+
+        @Override
+        public Entry<String, V> next() {
+            if (currentIterator != null && currentIterator.hasNext()) {
+                return currentIterator.next();
+            }
+            throw new NoSuchElementException();
+        }
+    }
+}
\ No newline at end of file
