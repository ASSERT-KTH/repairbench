diff --git a/tmp/fc4a6595-e53a-4ec1-8156-aec2533535f0_buggy.java b/tmp/f6cc1d37-64f1-4ee8-a5be-401e697caeef_fixed.java
index c4b260c..77ed1aa 100644
--- a/tmp/fc4a6595-e53a-4ec1-8156-aec2533535f0_buggy.java
+++ b/tmp/f6cc1d37-64f1-4ee8-a5be-401e697caeef_fixed.java
@@ -1,51 +1,76 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        ByteOrderMark bom = detectByteOrderMark(byteData);
+        if (bom != null) {
+            charsetName = bom.getCharsetName();
+            byteData.position(bom.getLength());
+        }
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
                 } else {
                     foundCharset = meta.attr("charset");
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
+
+    private static ByteOrderMark detectByteOrderMark(ByteBuffer byteData) {
+        if (byteData.remaining() >= 3 &&
+                byteData.get(byteData.position()) == (byte) 0xEF &&
+                byteData.get(byteData.position() + 1) == (byte) 0xBB &&
+                byteData.get(byteData.position() + 2) == (byte) 0xBF) {
+            return new ByteOrderMark("UTF-8", 3);
+        }
+        return null;
+    }
+
+    private static class ByteOrderMark {
+        private final String charsetName;
+        private final int length;
+
+        private ByteOrderMark(String charsetName, int length) {
+            this.charsetName = charsetName;
+            this.length = length;
+        }
+
+        private String getCharsetName() {
+            return charsetName;
+        }
+
+        private int getLength() {
+            return length;
+        }
+    }
\ No newline at end of file
