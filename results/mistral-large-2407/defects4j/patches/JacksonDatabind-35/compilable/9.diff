diff --git a/tmp/85c02a73-1512-4380-a01a-29eecaeb4dd8_buggy.java b/tmp/2519c386-dcad-401a-86b8-a3de5d8ec3ac_fixed.java
index 7d8d756..94e2754 100644
--- a/tmp/85c02a73-1512-4380-a01a-29eecaeb4dd8_buggy.java
+++ b/tmp/2519c386-dcad-401a-86b8-a3de5d8ec3ac_fixed.java
@@ -1,48 +1,50 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
         // first, sanity checks
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
         // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
-            }
+        JsonToken token = p.nextToken();
+        if (token == JsonToken.FIELD_NAME) {
             final String typeId = p.getText();
             JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
             p.nextToken();
 
             // Minor complication: we may need to merge type id in?
             if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
                 // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
                 TokenBuffer tb = new TokenBuffer(null, false);
                 tb.writeStartObject(); // recreate START_OBJECT
                 tb.writeFieldName(_typePropertyName);
                 tb.writeString(typeId);
                 p = JsonParserSequence.createFlattened(tb.asParser(p), p);
                 p.nextToken();
             }
 
             Object value = deser.deserialize(p, ctxt);
             // And then need the closing END_OBJECT
             if (p.nextToken() != JsonToken.END_OBJECT) {
                 throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                         "expected closing END_OBJECT after type information and deserialized value");
             }
             return value;
+        } else {
+            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+                    "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
+        }
     }
\ No newline at end of file
