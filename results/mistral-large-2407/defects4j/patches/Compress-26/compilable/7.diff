diff --git a/tmp/02ea3347-1fda-4c3a-9e8d-05636bd2320e_buggy.java b/tmp/b3f19ae8-0c89-46de-b08d-f5bb69a47aee_fixed.java
index 4b163f6..2e2de5f 100644
--- a/tmp/02ea3347-1fda-4c3a-9e8d-05636bd2320e_buggy.java
+++ b/tmp/b3f19ae8-0c89-46de-b08d-f5bb69a47aee_fixed.java
@@ -1,28 +1,16 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+    long skipped = 0;
+    while (skipped < numToSkip) {
+        long currentSkip = input.skip(numToSkip - skipped);
+        if (currentSkip == 0) {
+            currentSkip = input.read();
+            if (currentSkip < 0) {
                 break;
             }
-            numToSkip -= skipped;
+            currentSkip = 1;  // since read() returns the byte as an int
+        }
+        skipped += currentSkip;
     }
 
-        return available - numToSkip;
+    return skipped;
 }
\ No newline at end of file
