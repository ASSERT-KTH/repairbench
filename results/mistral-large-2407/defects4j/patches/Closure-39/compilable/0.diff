diff --git a/tmp/b16edfd5-93a0-497e-a4cb-8fafd4a3a364_buggy.java b/tmp/529a31e7-cd2d-4220-a40f-ab90f85a17fc_fixed.java
index e4d90e7..741a264 100644
--- a/tmp/b16edfd5-93a0-497e-a4cb-8fafd4a3a364_buggy.java
+++ b/tmp/529a31e7-cd2d-4220-a40f-ab90f85a17fc_fixed.java
@@ -1,45 +1,53 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
+      boolean isRecursive = false;
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
+        if (current == this) {
+          isRecursive = true;
+        }
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
+        if (!forAnnotations && isRecursive && getPropertyType(property) == this) {
+          sb.append("{...}");
+        } else {
           sb.append(getPropertyType(property).toString());
+        }
 
         ++i;
         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
       prettyPrint = true;
       return sb.toString();
     } else {
       return "{...}";
     }
   }
\ No newline at end of file
