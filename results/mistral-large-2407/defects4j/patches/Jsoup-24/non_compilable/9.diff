diff --git a/tmp/f377c017-b41c-4430-b3e8-f09325cd2ca2_buggy.java b/tmp/9c2a915d-4007-4a09-9e83-1b18e99f3eea_fixed.java
index b2d53db..14b4fe2 100644
--- a/tmp/f377c017-b41c-4430-b3e8-f09325cd2ca2_buggy.java
+++ b/tmp/9c2a915d-4007-4a09-9e83-1b18e99f3eea_fixed.java
@@ -1,34 +1,49 @@
 void read(Tokeniser t, CharacterReader r) {
     if (r.matchesLetter()) {
         String name = r.consumeLetterSequence();
         t.tagPending.appendTagName(name.toLowerCase());
         t.dataBuffer.append(name);
         r.advance();
         return;
     }
 
     if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
         char c = r.consume();
         switch (c) {
             case '\t':
             case '\n':
             case '\f':
             case ' ':
                 t.transition(BeforeAttributeName);
                 break;
             case '/':
                 t.transition(SelfClosingStartTag);
                 break;
             case '>':
                 t.emitTagPending();
                 t.transition(Data);
                 break;
             default:
+                // Fix: Add a check for comment in script
+                if (t.tagPending != null && "script".equals(t.tagPending.name())) {
+                    if (r.matches("!--")) {
+                        r.consume(); // Consume '<'
+                        r.consume(); // Consume '!'
+                        r.consume(); // Consume '-'
+                        r.consume(); // Consume '-'
+                        t.commentPending = new Comment("!-" + r.consumeTo("-->"));
+                        r.consume(); // Consume '-'
+                        r.consume(); // Consume '-'
+                        r.consume(); // Consume '>'
+                        t.emit(t.commentPending);
+                    }
+                } else {
                     t.dataBuffer.append(c);
                     anythingElse(t, r);
+                }
                 break;
         }
     } else {
         anythingElse(t, r);
     }
 }
\ No newline at end of file
