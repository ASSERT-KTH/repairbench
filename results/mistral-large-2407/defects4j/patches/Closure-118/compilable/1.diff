diff --git a/tmp/17db31b1-1a2c-477e-b7ed-9b432814fc7c_buggy.java b/tmp/370e1a3b-71d7-4446-b938-4af900bf955d_fixed.java
index 0b7c52e..38ca916 100644
--- a/tmp/17db31b1-1a2c-477e-b7ed-9b432814fc7c_buggy.java
+++ b/tmp/370e1a3b-71d7-4446-b938-4af900bf955d_fixed.java
@@ -1,27 +1,35 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
-
         // We should never see a mix of numbers and strings.
-        String name = child.getString();
+        String name = null;
+
+        if (child.isString()) {
+          name = child.getString();
+        } else if (child.isGetProp()) {
+          name = child.getFirstChild().getString();
+        } else if (child.isCall()) {
+          name = child.getFirstChild().getFirstChild().getString();
+        }
+
+        if (name != null) {
           T type = typeSystem.getType(getScope(), n, name);
 
           Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+          if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {
             // TODO(user): It doesn't look like the user can do much in this
             // case right now.
             if (propertiesToErrorFor.containsKey(name)) {
               compiler.report(JSError.make(
                   t.getSourceName(), child, propertiesToErrorFor.get(name),
                   Warnings.INVALIDATION, name,
                   (type == null ? "null" : type.toString()), n.toString(), ""));
             }
           }
         }
       }
+    }
\ No newline at end of file
