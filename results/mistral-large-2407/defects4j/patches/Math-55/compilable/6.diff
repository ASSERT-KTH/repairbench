diff --git a/tmp/80469d16-fad7-49ec-8056-678c9aa034e3_buggy.java b/tmp/a2f70242-881d-46e5-bc5c-0940fea9631f_fixed.java
index 1478ee1..4838d98 100644
--- a/tmp/80469d16-fad7-49ec-8056-678c9aa034e3_buggy.java
+++ b/tmp/a2f70242-881d-46e5-bc5c-0940fea9631f_fixed.java
@@ -1,24 +1,23 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    double x1 = v1.x;
+    double y1 = v1.y;
+    double z1 = v1.z;
 
+    double x2 = v2.x;
+    double y2 = v2.y;
+    double z2 = v2.z;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Real cross product calculation using Kahan's method to reduce cancellation errors
+    double rho = (y1 * z2 - y2 * z1) - (x1 * z2 - x2 * z1) + (x1 * y2 - x2 * y1);
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    double iRes = v1.y * v2.z - v1.z * v2.y + rho * (y2 * z1 - z2 * y1) - rho * (x2 * z1 - z2 * x1) + rho * (x2 * y1 - y2 * x1);
+    double jRes = v1.z * v2.x - v1.x * v2.z + rho * (z2 * x1 - x2 * z1) - rho * (y2 * x1 - x2 * y1) + rho * (y2 * z1 - z2 * y1);
+    double kRes = v1.x * v2.y - v1.y * v2.x + rho * (x2 * y1 - y2 * x1) - rho * (z2 * y1 - y2 * z1) + rho * (z2 * x1 - x2 * z1);
 
+    return new Vector3D(iRes, jRes, kRes);
 }
\ No newline at end of file
