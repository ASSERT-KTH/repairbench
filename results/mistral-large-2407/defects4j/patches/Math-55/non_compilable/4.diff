diff --git a/tmp/82c84bc3-9362-4167-912b-d5a0734ec783_buggy.java b/tmp/146b92af-65e3-41d0-bed7-0e5815df4444_fixed.java
index 1478ee1..016210a 100644
--- a/tmp/82c84bc3-9362-4167-912b-d5a0734ec783_buggy.java
+++ b/tmp/146b92af-65e3-41d0-bed7-0e5815df4444_fixed.java
@@ -1,24 +1,42 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Implement Kahan's algorithm to reduce cancellation errors
+    double a[] = new double[3];
+    double b[] = new double[3];
+    double c[] = new double[3];
 
+    double r0, r1, alpha, beta;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    for (int i = 0; i < 3; i++) {
+        r0 = v1.get(i);
+        r1 = v2.get(i);
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+        alpha = r0 * v2.getNorm();
+        beta = r1 * v1.getNorm();
+        a[i] = alpha;
+        b[i] = beta;
+        c[i] = alpha - beta;
+    }
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    double a1, a2, a3, a4;
+    double b1, b2, b3, b4;
+    double c1, c2, c3, c4;
+    double a1b2, a3b4;
+    double b1a2, b3a4;
+    double a2b1, a4b3;
+    double b2a1, b4a3;
 
+    a1 = a[0]; a2 = a[1]; a3 = a[2]; a4 = a[0];
+    b1 = b[0]; b2 = b[1]; b3 = b[2]; b4 = b[0];
+    c1 = c[0]; c2 = c[1]; c3 = c[2]; c4 = c[0];
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    a1b2 = a1 * b2;
+    a3b4 = a3 * b4;
+    b1a2 = b1 * a2;
+    b3a4 = b3 * a4;
+    a2b1 = a2 * b1;
+    a4b3 = a4 * b3;
+    b2a1 = b2 * a1;
+    b4a3 = b4 * a3;
 
+    return new Vector3D(a2b1 - a4b3, a3b4 - a1b2, b2a1 - b4a3);
 }
\ No newline at end of file
