diff --git a/tmp/1802f609-36a5-4b2a-b36a-38dd20e4f73c_buggy.java b/tmp/c8c65456-54c3-4b8d-b8e4-86b1a5ad67d0_fixed.java
index 1478ee1..9d84f7e 100644
--- a/tmp/1802f609-36a5-4b2a-b36a-38dd20e4f73c_buggy.java
+++ b/tmp/c8c65456-54c3-4b8d-b8e4-86b1a5ad67d0_fixed.java
@@ -1,24 +1,20 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    final double x1 = v1.x;
+    final double y1 = v1.y;
+    final double z1 = v1.z;
+    final double x2 = v2.x;
+    final double y2 = v2.y;
+    final double z2 = v2.z;
 
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    final double dot = v1.dotProduct(v2);
+    final double rho = dot / v2.normSq();
 
+    // compute v3
+    final double v3x = x1 - rho * x2;
+    final double v3y = y1 - rho * y2;
+    final double v3z = z1 - rho * z2;
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    return new Vector3D(v3y * z2 - v3z * y2, v3z * x2 - v3x * z2, v3x * y2 - v3y * x2);
 }
\ No newline at end of file
