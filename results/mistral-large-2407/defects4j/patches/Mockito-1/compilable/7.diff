diff --git a/tmp/c6eba9a8-7c98-44a1-abfa-4775cadbdc2d_buggy.java b/tmp/99c5987f-0c8b-4ab9-b3e4-6cfbca7072c0_fixed.java
index 1c875ad..8abaedc 100644
--- a/tmp/c6eba9a8-7c98-44a1-abfa-4775cadbdc2d_buggy.java
+++ b/tmp/99c5987f-0c8b-4ab9-b3e4-6cfbca7072c0_fixed.java
@@ -1,31 +1,26 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
+                if (invocation.getMethod().isVarArgs()) {
+                    Object[] rawArguments = invocation.getRawArguments();
+                    int varArgsStart = rawArguments.length - 1; // assuming the vararg is the last argument
+                    if (varArgsStart > 0) { // if there are varargs starting at the last position
+                        Object varArgsArray = rawArguments[varArgsStart];
+                        if (varArgsArray != null) {
+                            int varArgsLength = Array.getLength(varArgsArray);
+                            for (int i = 0; i < varArgsLength; i++) {
+                                ((CapturesArguments) m).captureFrom(Array.get(varArgsArray, i));
+                            }
+                        } else {
+                            ((CapturesArguments) m).captureFrom(null);
+                        }
+                    } else {
+                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                    }
+                } else {
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
\ No newline at end of file
