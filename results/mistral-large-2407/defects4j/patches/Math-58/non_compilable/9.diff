diff --git a/tmp/1efb76c9-626d-477f-a59a-a8aa173313b8_buggy.java b/tmp/cc4cc89e-5328-4d24-8fee-b199203d88c5_fixed.java
index 3002587..09d3b94 100644
--- a/tmp/1efb76c9-626d-477f-a59a-a8aa173313b8_buggy.java
+++ b/tmp/cc4cc89e-5328-4d24-8fee-b199203d88c5_fixed.java
@@ -1,10 +1,30 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
-     * @return the parameters of the Gaussian function that best fits the
-     * observed points (in the same order as above).
+     * @return the parameters of the Gaussian function that best fits the observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+
+        // Create a ParametricUnivariateFunction representing the Gaussian function
+        ParametricUnivariateFunction function = new Gaussian.Parametric();
+
+        // Initialize the OptimizationData with the Gaussian function and the initial guess of parameters
+        OptimizationData[] optimizationData = {
+            new Target(new LeastSquaresAdapter(function, getObservations(), new LevenbergMarquardtOptimizer.TheoreticalValuesFunction())),
+            LevenbergMarquardtOptimizer.estimateVector(new double[][]{guess}),
+            new MaxIter(100),
+            new InitialGuess(guess),
+            new LevenbergMarquardtOptimizer.DefaultChecker(1e-10, 1e-10)
+        };
+
+        // Use LevenbergMarquardtOptimizer and apply bounds to ensure positive sigma
+        double[][] bounds = new double[][] {
+            {0, Double.POSITIVE_INFINITY}, // mean
+            {0, Double.POSITIVE_INFINITY}, // amplitude
+            {0, Double.POSITIVE_INFINITY}  // sigma
+        };
+        double[] point = new LevenbergMarquardtOptimizer(LevenbergMarquardtOptimizer.OptimizationMethod.LevenbergMarquardt).optimize(optimizationData, bounds).getPoint().toArray();
+
+        return point;
     }
\ No newline at end of file
