diff --git a/tmp/f4738a85-a0ab-40e6-98a9-b2a5f4e35b8c_buggy.java b/tmp/78714a7d-ded8-41e8-8846-98c32ba5066a_fixed.java
index b6b11b6..a4953a6 100644
--- a/tmp/f4738a85-a0ab-40e6-98a9-b2a5f4e35b8c_buggy.java
+++ b/tmp/78714a7d-ded8-41e8-8846-98c32ba5066a_fixed.java
@@ -1,38 +1,36 @@
 /**
  * Consume a quoted string, adding it to <code>appendTo</code> if
  * specified.
  *
  * @param pattern pattern to parse
  * @param pos current parse position
  * @param appendTo optional StringBuffer to append
  * @param escapingOn whether to process escaped quotes
  * @return <code>appendTo</code>
  */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
     if (escapingOn && c[start] == QUOTE) {
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
     int lastHold = start;
     for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
+        if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, i)) {
+            appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
             pos.setIndex(i + ESCAPED_QUOTE.length());
             lastHold = pos.getIndex();
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        if (c[i] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(c, lastHold, i - lastHold);
+            }
+            pos.setIndex(i + 1);
+            return appendTo;
         }
     }
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
