diff --git a/tmp/74d27be6-25cc-44e4-8a18-939904ad1053_buggy.java b/tmp/300c90ee-99c5-43ca-8b1f-4c80c77591f5_fixed.java
index e69de29..c83aa99 100644
--- a/tmp/74d27be6-25cc-44e4-8a18-939904ad1053_buggy.java
+++ b/tmp/300c90ee-99c5-43ca-8b1f-4c80c77591f5_fixed.java
@@ -0,0 +1,42 @@
+import java.io.Serializable;
+import java.util.HashMap;
+import java.util.List;
+import java.util.ArrayList;
+
+public class MultiValueMap<K, V> implements Serializable {
+    private final HashMap<K, List<V>> map;
+    private final Class<? extends List> listClass;
+
+    private MultiValueMap(HashMap<K, List<V>> map, Class<? extends List> listClass) {
+        this.map = map;
+        this.listClass = listClass;
+    }
+
+    public static <K, V> MultiValueMap<K, V> multiValueMap(HashMap<K, List<V>> map, Class<? extends List> listClass) {
+        return new MultiValueMap<>(map, listClass);
+    }
+
+    private void checkUnsafeClass() {
+        if (listClass != ArrayList.class) {
+            throw new UnsupportedOperationException("Unsafe class detected: " + listClass.getName());
+        }
+    }
+
+    private void readObject(java.io.ObjectInputStream ois) throws java.io.IOException, ClassNotFoundException {
+        ois.defaultReadObject();
+        checkUnsafeClass(); // Ensure safety after deserialization
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        MultiValueMap<?, ?> that = (MultiValueMap<?, ?>) obj;
+        return map.equals(that.map);
+    }
+
+    @Override
+    public int hashCode() {
+        return map.hashCode();
+    }
+}
\ No newline at end of file
