diff --git a/tmp/c907b616-6fe3-48a0-a33a-16455f0e8adc_buggy.java b/tmp/d9da954d-69ba-48f5-9467-461da80c1e11_fixed.java
index 0eef537..8cc903a 100644
--- a/tmp/c907b616-6fe3-48a0-a33a-16455f0e8adc_buggy.java
+++ b/tmp/d9da954d-69ba-48f5-9467-461da80c1e11_fixed.java
@@ -1,74 +1,65 @@
-    /**
-     * Calculates the Cholesky decomposition of the given matrix.
-     * @param matrix the matrix to decompose
-     * @param relativeSymmetryThreshold threshold above which off-diagonal
-     * elements are considered too different and matrix not symmetric
-     * @param absolutePositivityThreshold threshold below which diagonal
-     * elements are considered null and matrix not positive definite
-     * @exception NonSquareMatrixException if matrix is not square
-     * @exception NotSymmetricMatrixException if matrix is not symmetric
-     * @exception NotPositiveDefiniteMatrixException if the matrix is not
-     * strictly positive definite
-     * @see #CholeskyDecompositionImpl(RealMatrix)
-     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
-     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
-     */
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                  final double relativeSymmetryThreshold,
                                  final double absolutePositivityThreshold)
     throws NonSquareMatrixException,
            NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                            matrix.getColumnDimension());
     }
 
     final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+    lTData = new double[order][order];
     cachedL = null;
     cachedLT = null;
 
-        // check the matrix before transformation
+    // Copy matrix data to preserve original matrix
     for (int i = 0; i < order; ++i) {
+        for (int j = 0; j < order; ++j) {
+            lTData[i][j] = matrix.getEntry(i, j);
+        }
+    }
 
+    // Check the matrix before transformation
+    for (int i = 0; i < order; ++i) {
         final double[] lI = lTData[i];
 
-            if (lTData[i][i] < absolutePositivityThreshold) {
+        if (lI[i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-            // check off-diagonal elements (and reset them to 0)
+        // Check off-diagonal elements (and reset them to 0)
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
             final double lJI = lJ[i];
-                final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
+            final double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
             lJ[i] = 0;
         }
     }
 
-        // transform the matrix
+    // Transform the matrix
     for (int i = 0; i < order; ++i) {
-
         final double[] ltI = lTData[i];
 
-            // check diagonal element
+        // Check diagonal element
+        final double diagElement = ltI[i];
+        if (diagElement <= 0) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
 
-            ltI[i] = Math.sqrt(ltI[i]);
+        ltI[i] = Math.sqrt(diagElement);
         final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
+        for (int q = i + 1; q < order; ++q) {
             ltI[q] *= inverse;
             final double[] ltQ = lTData[q];
             for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+                ltQ[p] -= ltI[q] * ltQ[p];
             }
         }
-
     }
-
 }
\ No newline at end of file
