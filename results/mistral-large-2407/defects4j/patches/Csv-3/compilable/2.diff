diff --git a/tmp/04e2e4ef-18a8-42fa-8c93-19503fc1bf9d_buggy.java b/tmp/6f6384d8-dba6-4441-9574-0e55afa236b8_fixed.java
index 1ad070d..ca22911 100644
--- a/tmp/04e2e4ef-18a8-42fa-8c93-19503fc1bf9d_buggy.java
+++ b/tmp/6f6384d8-dba6-4441-9574-0e55afa236b8_fixed.java
@@ -1,38 +1,31 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
     case CR:
     case LF:
     case FF: // TODO is this correct?
     case TAB: // TODO is this correct? Do tabs need to be escaped?
     case BACKSPACE: // TODO is this correct?
         return c;
     case END_OF_STREAM:
         throw new IOException("EOF whilst processing escape sequence");
+    case '\\':  // Correctly handle escaped backslash
+        return '\\';
+    case 'N':  // Handle MySQL-specific NULL value escape
+        return 'N';
     default:
         // Now check for meta-characters
         return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
 }
\ No newline at end of file
