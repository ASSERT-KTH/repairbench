diff --git a/tmp/8c1a6c20-44e7-424c-8759-96b9abfa4a71_buggy.java b/tmp/91e201a4-a5d1-4ae3-9dcb-a1768aa46036_fixed.java
index 57c40b2..83d46fc 100644
--- a/tmp/8c1a6c20-44e7-424c-8759-96b9abfa4a71_buggy.java
+++ b/tmp/91e201a4-a5d1-4ae3-9dcb-a1768aa46036_fixed.java
@@ -1,27 +1,23 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
         report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
         return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+        if(!n.getBooleanProp(Node.IS_INDEXABLE)) {
+            report(t, n, "Property " + property.getString() + " never defined on obj");
+        } else {
             checkPropertyAccess(childType, property.getString(), t, n);
         }
+    }
     ensureTyped(t, n);
 }
\ No newline at end of file
