diff --git a/tmp/ab46a7e4-c475-4883-8eb0-6787aa656fcc_buggy.java b/tmp/9dfe1290-dff0-4d00-beb9-610c8b6de314_fixed.java
index eea9e73..6ec0230 100644
--- a/tmp/ab46a7e4-c475-4883-8eb0-6787aa656fcc_buggy.java
+++ b/tmp/9dfe1290-dff0-4d00-beb9-610c8b6de314_fixed.java
@@ -1,41 +1,30 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
     for (int i = 0; i < csLength; i++) {
         char ch = cs.charAt(i);
         for (int j = 0; j < searchLength; j++) {
+            // Check if the character is a supplementary character
+            if (Character.isSupplementaryCodePoint(ch)) {
+                // Get the code point for the supplementary character
+                int codePoint = Character.codePointAt(cs, i);
+                // Skip the next character as it is part of the surrogate pair
+                i++;
+                // Compare the code point with the search characters
+                for (int k = 0; k < searchLength; k++) {
+                    if (searchChars[k] == codePoint) {
+                        return true;
+                    }
+                }
+            } else {
                 if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
                     return true;
                 }
             }
         }
+    }
     return false;
 }
\ No newline at end of file
