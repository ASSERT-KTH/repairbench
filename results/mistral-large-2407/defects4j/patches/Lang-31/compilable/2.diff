diff --git a/tmp/2bebac1c-f488-4fa4-bf3f-681d6396df68_buggy.java b/tmp/6e1d6793-f967-4385-9637-f85558a54939_fixed.java
index eea9e73..666f04f 100644
--- a/tmp/2bebac1c-f488-4fa4-bf3f-681d6396df68_buggy.java
+++ b/tmp/6e1d6793-f967-4385-9637-f85558a54939_fixed.java
@@ -1,41 +1,32 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
     public static boolean containsAny(CharSequence cs, char[] searchChars) {
         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
             return false;
         }
+
         int csLength = cs.length();
         int searchLength = searchChars.length;
         for (int i = 0; i < csLength; i++) {
             char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+            if (Character.isHighSurrogate(ch)) {
+                i++;
+                if (i < csLength) {
+                    char lowSurrogate = cs.charAt(i);
+                    if (Character.isLowSurrogate(lowSurrogate)) {
+                        int supplementaryCodePoint = Character.toCodePoint(ch, lowSurrogate);
+                        for (char searchChar : searchChars) {
+                            if (Character.toCodePoint(ch, lowSurrogate) == Character.toCodePoint(searchChar, searchChar)) {
                                 return true;
                             }
                         }
                     }
+                }
+            } else {
+                for (char searchChar : searchChars) {
+                    if (searchChar == ch) {
+                        return true;
+                    }
+                }
+            }
+        }
         return false;
     }
\ No newline at end of file
