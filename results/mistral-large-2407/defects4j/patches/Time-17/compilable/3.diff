diff --git a/tmp/d0a5c41d-3480-4af7-b8b4-6a1547efb03a_buggy.java b/tmp/7977dfd5-26ed-49fe-9a20-7e323b6636d4_fixed.java
index 03b03d7..77bed22 100644
--- a/tmp/d0a5c41d-3480-4af7-b8b4-6a1547efb03a_buggy.java
+++ b/tmp/7977dfd5-26ed-49fe-9a20-7e323b6636d4_fixed.java
@@ -1,25 +1,30 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      *
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
 
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
-        }
 
         // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long localBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        long localInstant = convertUTCToLocal(instant);
+        if (localBefore == localInstant) {
+            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        }
 
         // calculate result
+        if (earlierOrLater) {
             // currently in later offset
+            return convertLocalToUTC(localInstant, false, instantAfter);
+        } else {
             // currently in earlier offset
+            return convertLocalToUTC(localInstant, false, instantBefore);
+        }
     }
\ No newline at end of file
