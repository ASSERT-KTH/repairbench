diff --git a/tmp/f4052910-86b4-44ce-ba6b-231bfd54164b_buggy.java b/tmp/bc34eb54-1ff1-4330-8dca-a6487a509060_fixed.java
index 03b03d7..8e6828b 100644
--- a/tmp/f4052910-86b4-44ce-ba6b-231bfd54164b_buggy.java
+++ b/tmp/bc34eb54-1ff1-4330-8dca-a6487a509060_fixed.java
@@ -1,25 +1,23 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
 
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+
+    long localBefore = convertUTCToLocal(instant - DateTimeConstants.MILLIS_PER_HOUR);
+    long localAfter = convertUTCToLocal(instant + DateTimeConstants.MILLIS_PER_HOUR);
+
+    if (localBefore != localAfter) {
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
 
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
         return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    }
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // calculate result based on earlier or later flag
+    return (earlierOrLater) ? instantAfter : instantBefore;
 }
\ No newline at end of file
