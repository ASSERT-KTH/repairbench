diff --git a/tmp/10c6bf62-65d2-4d0e-944a-f86d7aac1ef3_buggy.java b/tmp/11b3e8a1-617c-4d9a-9ac3-2d55b35c282b_fixed.java
index 03b03d7..55379c6 100644
--- a/tmp/10c6bf62-65d2-4d0e-944a-f86d7aac1ef3_buggy.java
+++ b/tmp/11b3e8a1-617c-4d9a-9ac3-2d55b35c282b_fixed.java
@@ -1,25 +1,21 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      *
      * @param instant         the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
 
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        // evaluate 1 hour before and after to work out if anything is happening
+        long instantBefore = convertUTCToLocal(instant - DateTimeConstants.MILLIS_PER_HOUR);
+        long instantAfter = convertUTCToLocal(instant + DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
 
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        return earlierOrLater ? instantAfter : instantBefore;
     }
\ No newline at end of file
