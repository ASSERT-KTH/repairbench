diff --git a/tmp/16857dc5-1a36-4e6b-afaf-3735087feb3a_buggy.java b/tmp/a173d604-339b-4060-819e-36867314b60e_fixed.java
index 03b03d7..639c26d 100644
--- a/tmp/16857dc5-1a36-4e6b-afaf-3735087feb3a_buggy.java
+++ b/tmp/a173d604-339b-4060-819e-36867314b60e_fixed.java
@@ -1,25 +1,22 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        // Evaluate 3 hours before and after to work out if anything is happening
+        long instantBefore = convertUtCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        long instantAfter = convertUtCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+            return instant;  // Not an overlap (less than is a gap, equal is normal case)
         }
 
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Work out range of instants that have duplicate local times
+        long localBefore = convertUtCToLocal(instantBefore);
+        long localAfter = convertUtCToLocal(instantAfter);
+        if (localBefore == localAfter) {
+            // Overlapping period detected, return the adjusted instant
+            if (earlierOrLater) {
+                return instantAfter;  // Returning the later instant
+            } else {
+                return instantBefore;  // Returning the earlier instant
+            }
+        } else {
+            return instant;  // No overlap within the examined range
+        }
     }
\ No newline at end of file
