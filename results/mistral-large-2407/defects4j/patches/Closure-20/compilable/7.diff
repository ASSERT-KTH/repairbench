diff --git a/tmp/85e6fb3e-8a78-4480-a8f1-a937693e7ea2_buggy.java b/tmp/3c202d1e-1de0-4b91-8c7c-d05d8d804350_fixed.java
index d4e6d48..b3abd09 100644
--- a/tmp/85e6fb3e-8a78-4480-a8f1-a937693e7ea2_buggy.java
+++ b/tmp/3c202d1e-1de0-4b91-8c7c-d05d8d804350_fixed.java
@@ -1,23 +1,24 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
+  if (callTarget != null && callTarget.isName() && callTarget.getString().equals("String")) {
+    // Fold String(a) to '' + a on immutable literals,
     // which allows further optimizations
     //
     // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
+    // slightly different semantics than '' + a. See
     // http://code.google.com/p/closure-compiler/issues/detail?id=759
     Node value = callTarget.getNext();
     if (value != null) {
+      if (n.getChildCount() == 2) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
+  }
   return n;
 }
\ No newline at end of file
