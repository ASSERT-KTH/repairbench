diff --git a/tmp/d1b11b72-3f6d-4b0c-bedb-97a5edc81fbb_buggy.java b/tmp/74643361-04b1-4555-86eb-b7bfcc3483fd_fixed.java
index 46817a7..0ab9ece 100644
--- a/tmp/d1b11b72-3f6d-4b0c-bedb-97a5edc81fbb_buggy.java
+++ b/tmp/74643361-04b1-4555-86eb-b7bfcc3483fd_fixed.java
@@ -1,16 +1,23 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // Union of properties from both types
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());
+
+    for (String property : allProperties) {
+      JSType thisType = getPropertyType(property);
+      JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+
+      if (thisType != null && thatType != null && thisType.isEquivalentTo(thatType)) {
+        builder.addProperty(property, thisType, getPropertyNode(property));
       }
     }
+
     return builder.build();
   }
\ No newline at end of file
