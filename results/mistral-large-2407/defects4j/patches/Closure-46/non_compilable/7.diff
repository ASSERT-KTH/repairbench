diff --git a/tmp/8b50db11-a4a2-45c5-8514-5a6e19db794d_buggy.java b/tmp/98e85b40-953a-46d9-bf2f-edb22ef3901c_fixed.java
index 46817a7..cf89e9f 100644
--- a/tmp/8b50db11-a4a2-45c5-8514-5a6e19db794d_buggy.java
+++ b/tmp/98e85b40-953a-46d9-bf2f-edb22ef3901c_fixed.java
@@ -1,16 +1,29 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+
+    JSType maybeRecordType = that.toMaybeRecordType();
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
+      if (maybeRecordType.hasProperty(property) &&
+          maybeRecordType.getPropertyType(property).isEquivalentTo(
               getPropertyType(property))) {
         builder.addProperty(property, getPropertyType(property),
             getPropertyNode(property));
       }
     }
+
+    // Ensure that properties only in `that` are also added to the union type
+    RecordType thatRecordType = (RecordType) that;
+    for (String property : thatRecordType.properties.keySet()) {
+      if (!properties.containsKey(property)) {
+        builder.addProperty(property, thatRecordType.getPropertyType(property),
+            thatRecordType.getPropertyNode(property));
+      }
+    }
+
     return builder.build();
   }
\ No newline at end of file
