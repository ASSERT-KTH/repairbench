diff --git a/tmp/6d755b26-47f6-45b3-9bed-35ce60e9b6d7_buggy.java b/tmp/21f63dbf-d632-4daa-8360-e5fc7bf88323_fixed.java
index 90fe130..548529e 100644
--- a/tmp/6d755b26-47f6-45b3-9bed-35ce60e9b6d7_buggy.java
+++ b/tmp/21f63dbf-d632-4daa-8360-e5fc7bf88323_fixed.java
@@ -1,61 +1,33 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+    if (len == 0 || (str.charAt(0) == '_' || str.charAt(len - 1) == '_')) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-        char ch0 = str.charAt(0);
-        char ch1 = str.charAt(1);
-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
+    String language = "", country = "", variant = "";
+    int langEnd = 2, countryStart = 3, countryEnd = 5, variantStart = 6;
+
+    if (len > langEnd && str.charAt(langEnd) == '_') {
+        if (len > countryEnd + 1 && str.charAt(countryEnd + 1) == '_') {
+            variant = str.substring(variantStart);
+            country = str.substring(countryStart, countryEnd);
+            language = str.substring(0, langEnd);
+        } else {
+            country = str.substring(countryStart, countryEnd);
+            language = str.substring(0, langEnd);
         }
-        if (len == 2) {
-            return new Locale(str, "");
     } else {
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+        language = str;
     }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+
+    if (language.isEmpty() || !language.chars().allMatch(Character::isLowerCase)) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
-                if (str.charAt(5) != '_') {
+    if (!country.isEmpty() && (country.length() != 2 || !country.chars().allMatch(Character::isUpperCase))) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
-            }
-        }
+
+    return new Locale(language, country, variant);
 }
\ No newline at end of file
