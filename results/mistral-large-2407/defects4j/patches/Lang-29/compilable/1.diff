diff --git a/tmp/2f83a062-6067-4bbb-8028-7f55cd197ec2_buggy.java b/tmp/fb35d484-0429-43e7-b98f-7cc2f330d76d_fixed.java
index 3ec995f..5cc5700 100644
--- a/tmp/2f83a062-6067-4bbb-8028-7f55cd197ec2_buggy.java
+++ b/tmp/fb35d484-0429-43e7-b98f-7cc2f330d76d_fixed.java
@@ -1,26 +1,37 @@
     /**
      * <p>
      * Converts the given Java version string to an <code>int</code>.
      * </p>
      *
      * <p>
      * Example return values:
      * </p>
      * <ul>
      * <li><code>120</code> for Java 1.2</li>
      * <li><code>131</code> for Java 1.3.1</li>
      * <li><code>160</code> for Java 1.6.0_20</li>
      * </ul>
      *
      * <p>
      * Patch releases are not reported.
      * </p>
      * <p>
      * This method is package private instead of private to support unit test invocation.
      * </p>
      *
      * @return the version, for example 131 for Java 1.3.1
      */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    static int toJavaVersionInt(String version) {
+        if (version == null || version.isEmpty()) {
+            return 0;
+        }
+        String[] parts = version.split("[^\\d.]");
+        String[] versionPart = parts[0].split("\\.");
+        if (versionPart.length < 2) {
+            return 0;
+        }
+        int major = Integer.parseInt(versionPart[0]);
+        int minor = Integer.parseInt(versionPart[1]);
+        int patch = versionPart.length > 2 ? Integer.parseInt(versionPart[2]) : 0;
+        return major * 100 + minor * 10 + patch;
     }
\ No newline at end of file
