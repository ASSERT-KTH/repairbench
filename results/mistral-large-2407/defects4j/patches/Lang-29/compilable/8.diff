diff --git a/tmp/7f5b832b-9140-42cf-a481-f8bef83952a4_buggy.java b/tmp/91a3dc9f-3567-4d1d-b62b-adc5d53f40eb_fixed.java
index 3ec995f..ff74164 100644
--- a/tmp/7f5b832b-9140-42cf-a481-f8bef83952a4_buggy.java
+++ b/tmp/91a3dc9f-3567-4d1d-b62b-adc5d53f40eb_fixed.java
@@ -1,26 +1,23 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    static int toJavaVersionInt(String version) {
+        // Handle null or empty strings
+        if (version == null || version.isEmpty()) {
+            return 0;
+        }
+
+        // Remove non-numeric characters except dots
+        String trimmedVersion = version.replaceAll("[^0-9.]", "");
+
+        // Split the version string into an array of substrings
+        String[] versionParts = trimmedVersion.split("\\.");
+
+        // Initialize the result as an integer
+        int intVersion = 0;
+
+        // Process only the first three parts to form the version integer
+        for (int i = 0; i < Math.min(versionParts.length, 3); i++) {
+            int part = Integer.parseInt(versionParts[i]);
+            intVersion = intVersion * 10 + part;
+        }
+
+        return intVersion;
     }
\ No newline at end of file
