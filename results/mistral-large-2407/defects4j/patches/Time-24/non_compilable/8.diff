diff --git a/tmp/819f9db4-d45c-423c-af7a-62debb65b790_buggy.java b/tmp/faccfb91-ced5-49cf-95ba-f0cfdce4a316_fixed.java
index 99d6a44..0e95714 100644
--- a/tmp/819f9db4-d45c-423c-af7a-62debb65b790_buggy.java
+++ b/tmp/faccfb91-ced5-49cf-95ba-f0cfdce4a316_fixed.java
@@ -1,58 +1,91 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
-                return computeMillis(resetFields, text);
+                return computeMillis(resetFields, text); // Adjust for recursive call
             }
         }
 
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
 
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
 
+        // Ensure the adjusted date is within the expected range
+        if (count > 0) {
+            DurationField months = DurationFieldType.months().getField(iChrono);
+            DurationField days = DurationFieldType.days().getField(iChrono);
+            DurationField first = savedFields[0].iField.getDurationField();
+            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+                correctYearIfParsingWeekYear(millis, resetFields, text);
+            }
+        }
+
         return millis;
     }
+
+    private void correctYearIfParsingWeekYear(long millis, boolean resetFields, String text) {
+        // Adjust the year according to the parsed week year, if necessary
+        DurationField weeks = DurationFieldType.weeks().getField(iChrono);
+        DurationField months = DurationFieldType.months().getField(iChrono);
+        DurationField days = DurationFieldType.days().getField(iChrono);
+        for (SavedField field : iSavedFields) {
+            DurationField currentField = field.iField.getDurationField();
+            if (compareReverse(currentField, weeks) >= 0 && compareReverse(currentField, months) <= 0) {
+                int year = iChrono.year().get(millis);
+                int weekOfYear = iChrono.weekOfWeekyear().get(millis);
+
+                DateTime adjustedDate = new DateTime(millis, iChrono);
+                // Correct the year if the week of the year indicates it
+                if (weekOfYear == 1 && adjustedDate.monthOfYear().get() == 12) {
+                    year++;
+                } else if (weekOfYear >= 52 && adjustedDate.monthOfYear().get() == 1) {
+                    year--;
+                }
+                field.correctYear(year);
+            }
+        }
+    }
\ No newline at end of file
