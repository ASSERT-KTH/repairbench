diff --git a/tmp/353c0b69-60f8-439a-a5e7-6cb164eaca68_buggy.java b/tmp/27583ba6-753c-41bd-970c-9cd6b8886468_fixed.java
index 2608424..436c7e8 100644
--- a/tmp/353c0b69-60f8-439a-a5e7-6cb164eaca68_buggy.java
+++ b/tmp/27583ba6-753c-41bd-970c-9cd6b8886468_fixed.java
@@ -1,39 +1,19 @@
-    /**
-     * Convert to multidimensional counter.
-     *
-     * @param index Index in unidimensional counter.
-     * @return the multidimensional counts.
-     * @throws OutOfRangeException if {@code index} is not between
-     * {@code 0} and the value returned by {@link #getSize()} (excluded).
-     */
 public int[] getCounts(int index) {
     if (index < 0 ||
         index >= totalSize) {
         throw new OutOfRangeException(index, 0, totalSize);
     }
 
     final int[] indices = new int[dimension];
+    int remainingIndex = index;
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+    for (int i = 0; i < dimension - 1; i++) {
+        int size = uniCounterOffset[i];
+        indices[i] = remainingIndex / size;
+        remainingIndex %= size;
     }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+    indices[dimension - 1] = remainingIndex;
 
     return indices;
 }
\ No newline at end of file
