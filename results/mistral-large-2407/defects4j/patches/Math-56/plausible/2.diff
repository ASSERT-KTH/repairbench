diff --git a/tmp/0ff6aeaf-f1c7-429d-9ea0-ed9c8662d0c8_buggy.java b/tmp/f5a49c9b-db7a-4975-895f-0adc0e785c04_fixed.java
index 2608424..a6b3534 100644
--- a/tmp/0ff6aeaf-f1c7-429d-9ea0-ed9c8662d0c8_buggy.java
+++ b/tmp/f5a49c9b-db7a-4975-895f-0adc0e785c04_fixed.java
@@ -1,39 +1,18 @@
-    /**
-     * Convert to multidimensional counter.
-     *
-     * @param index Index in unidimensional counter.
-     * @return the multidimensional counts.
-     * @throws OutOfRangeException if {@code index} is not between
-     * {@code 0} and the value returned by {@link #getSize()} (excluded).
-     */
     public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
+        if (index < 0 || index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
-        int count = 0;
+        int count = index;
         for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+            int offset = uniCounterOffset[i];
+            indices[i] = count / offset;
+            count %= offset;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+        indices[last] = count;
 
         return indices;
     }
\ No newline at end of file
