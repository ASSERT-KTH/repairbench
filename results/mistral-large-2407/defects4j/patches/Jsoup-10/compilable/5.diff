diff --git a/tmp/6170135d-1527-4c23-a1db-05843d32bd9e_buggy.java b/tmp/f04c6176-340c-48d0-bd86-9674077ef6e0_fixed.java
index b4e6f03..59d790f 100644
--- a/tmp/6170135d-1527-4c23-a1db-05843d32bd9e_buggy.java
+++ b/tmp/f04c6176-340c-48d0-bd86-9674077ef6e0_fixed.java
@@ -1,44 +1,27 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
     if (!hasAttr(attributeKey)) {
         return ""; // nothing to make absolute with
-        } else {
-            URL base;
-            try {
-                try {
-                    base = new URL(baseUri);
-                } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
     }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+
+    try {
+        // Check if the URL is already absolute
+        new URL(relUrl);
+        return relUrl;
+    } catch (MalformedURLException e) {
+        // If the URL is not absolute, try to combine with the base URI
+        try {
+            URL base = new URL(baseUri);
             URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
-            } catch (MalformedURLException e) {
-                return "";
+            // Handle special case where the base URI ends with '?' and the relative URL starts with '?'
+            if (baseUri.endsWith("?") && relUrl.startsWith("?")) {
+                return baseUri.substring(0, baseUri.length() - 1) + relUrl;
+            }
+            return abs.toExternalForm(); // Return the absolute URL
+        } catch (MalformedURLException e2) {
+            return ""; // Return an empty string if the URL cannot be made absolute
         }
     }
 }
\ No newline at end of file
