diff --git a/tmp/5e30f1a3-e1d4-4fcb-b99d-58ee1bd144c2_buggy.java b/tmp/a15705d2-c926-43bb-9353-df445150678b_fixed.java
index e69de29..ce4c2a8 100644
--- a/tmp/5e30f1a3-e1d4-4fcb-b99d-58ee1bd144c2_buggy.java
+++ b/tmp/a15705d2-c926-43bb-9353-df445150678b_fixed.java
@@ -0,0 +1,66 @@
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
+
+import java.io.IOException;
+import java.io.StringWriter;
+
+public class TestJsonGeneratorFeatures {
+    private static final JsonFactory JSON_F = new JsonFactory();
+
+    public void testFieldNameQuotingEnabled() throws IOException {
+        // First, test with default factory, with quoting enabled by default
+
+        // First, default, with quotes
+        _testFieldNameQuotingEnabled(JSON_F, true, true, "{\"foo\":1}");
+        _testFieldNameQuotingEnabled(JSON_F, false, true, "{\"foo\":1}");
+
+        // then without quotes
+        _testFieldNameQuotingEnabled(JSON_F, true, false, "{foo:1}");
+        _testFieldNameQuotingEnabled(JSON_F, false, false, "{foo:1}");
+
+        // Then with alternatively configured factory
+
+        JsonFactory JF2 = new JsonFactory();
+        JF2.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, false);
+
+        _testFieldNameQuotingEnabled(JF2, true, true, "{\"foo\":1}");
+        _testFieldNameQuotingEnabled(JF2, false, true, "{\"foo\":1}");
+
+        // then without quotes
+        _testFieldNameQuotingEnabled(JF2, true, false, "{foo:1}");
+        _testFieldNameQuotingEnabled(JF2, false, false, "{foo:1}");
+    }
+
+    private void _testFieldNameQuotingEnabled(JsonFactory jf, boolean pretty, boolean enableQuotes, String expResult) throws IOException {
+        StringWriter sw = new StringWriter();
+        JsonGenerator jg = jf.createGenerator(sw);
+
+        if (pretty) {
+            jg.setPrettyPrinter(new DefaultPrettyPrinter());
+        }
+
+        jg.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, enableQuotes);
+        jg.writeStartObject();
+        jg.writeNumberField("foo", 1);
+        jg.writeEndObject();
+        jg.close();
+
+        assertEquals(expResult, sw.toString().trim());
+    }
+
+    public static void assertEquals(String expected, String actual) {
+        if (!expected.equals(actual)) {
+            throw new ComparisonFailure("", expected, actual);
+        }
+    }
+
+    private static class ComparisonFailure extends AssertionError {
+        private static final long serialVersionUID = 1L;
+
+        public ComparisonFailure(String message, String expected, String actual) {
+            super(message + "\nexpected:<" + expected + "> but was:<" + actual + ">");
+        }
+    }
+}
\ No newline at end of file
