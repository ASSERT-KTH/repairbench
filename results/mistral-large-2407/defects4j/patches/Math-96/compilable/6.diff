diff --git a/tmp/d10275a8-29c3-4f75-9432-ddc390eaee3c_buggy.java b/tmp/fcef7cd5-1d26-4d09-843c-cef8e32b0103_fixed.java
index f674e52..67a34e4 100644
--- a/tmp/d10275a8-29c3-4f75-9432-ddc390eaee3c_buggy.java
+++ b/tmp/fcef7cd5-1d26-4d09-843c-cef8e32b0103_fixed.java
@@ -1,41 +1,24 @@
-    /**
-     * Test for the equality of two Complex objects.
-     * <p>
-     * If both the real and imaginary parts of two Complex numbers
-     * are exactly the same, and neither is <code>Double.NaN</code>, the two
-     * Complex objects are considered to be equal.</p>
-     * <p>
-     * All <code>NaN</code> values are considered to be equal - i.e, if either
-     * (or both) real and imaginary parts of the complex number are equal
-     * to <code>Double.NaN</code>, the complex number is equal to 
-     * <code>Complex.NaN</code>.</p>
-     *
-     * @param other Object to test for equality to this
-     * @return true if two Complex objects are equal, false if
-     *         object is null, not an instance of Complex, or
-     *         not equal to this Complex instance
-     * 
-     */
     public boolean equals(Object other) {
         boolean ret;
 
         if (this == other) {
             ret = true;
         } else if (other == null) {
             ret = false;
         } else {
             try {
                 Complex rhs = (Complex) other;
                 if (rhs.isNaN()) {
                     ret = this.isNaN();
                 } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal()))
+                        && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
                 }
             } catch (ClassCastException ex) {
                 // ignore exception
                 ret = false;
             }
         }
 
         return ret;
     }
\ No newline at end of file
