diff --git a/tmp/52a9843c-5f8e-45b8-b86c-b8c12d58739f_buggy.java b/tmp/50f396a1-8abc-42f6-95c1-9fd15fa590c2_fixed.java
index f674e52..7d58859 100644
--- a/tmp/52a9843c-5f8e-45b8-b86c-b8c12d58739f_buggy.java
+++ b/tmp/50f396a1-8abc-42f6-95c1-9fd15fa590c2_fixed.java
@@ -1,41 +1,33 @@
     /**
      * Test for the equality of two Complex objects.
      * <p>
      * If both the real and imaginary parts of two Complex numbers
      * are exactly the same, and neither is <code>Double.NaN</code>, the two
      * Complex objects are considered to be equal.</p>
      * <p>
      * All <code>NaN</code> values are considered to be equal - i.e, if either
      * (or both) real and imaginary parts of the complex number are equal
      * to <code>Double.NaN</code>, the complex number is equal to
      * <code>Complex.NaN</code>.</p>
      *
      * @param other Object to test for equality to this
      * @return true if two Complex objects are equal, false if
      *         object is null, not an instance of Complex, or
      *         not equal to this Complex instance
      *
      */
     public boolean equals(Object other) {
-        boolean ret;
-        
         if (this == other) {
-            ret = true;
-        } else if (other == null) {
-            ret = false;
-        } else  {
-            try {
+            return true;
+        } else if (other == null || !(other instanceof Complex)) {
+            return false;
+        }
+
         Complex rhs = (Complex) other;
-                if (rhs.isNaN()) {
-                    ret = this.isNaN();
+        if (this.isNaN() || rhs.isNaN()) {
+            return this.isNaN() && rhs.isNaN();
         } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+            return Double.compare(this.getReal(), rhs.getReal()) == 0 &&
+                   Double.compare(this.getImaginary(), rhs.getImaginary()) == 0;
         }
-            } catch (ClassCastException ex) {
-                // ignore exception
-                ret = false;
-            }
-        }
-      
-        return ret;
     }
\ No newline at end of file
