diff --git a/tmp/a2d91023-77ff-43c8-a75e-b4e45690d97f_buggy.java b/tmp/801e95ef-78ef-4457-ad4c-ce2a1ef80c97_fixed.java
index f674e52..ae9dfb0 100644
--- a/tmp/a2d91023-77ff-43c8-a75e-b4e45690d97f_buggy.java
+++ b/tmp/801e95ef-78ef-4457-ad4c-ce2a1ef80c97_fixed.java
@@ -1,41 +1,37 @@
     /**
      * Test for the equality of two Complex objects.
      * <p>
      * If both the real and imaginary parts of two Complex numbers
      * are exactly the same, and neither is <code>Double.NaN</code>, the two
      * Complex objects are considered to be equal.</p>
      * <p>
      * All <code>NaN</code> values are considered to be equal - i.e, if either
      * (or both) real and imaginary parts of the complex number are equal
      * to <code>Double.NaN</code>, the complex number is equal to
      * <code>Complex.NaN</code>.</p>
      *
      * @param other Object to test for equality to this
      * @return true if two Complex objects are equal, false if
      *         object is null, not an instance of Complex, or
      *         not equal to this Complex instance
      *
      */
     public boolean equals(Object other) {
         boolean ret;
 
         if (this == other) {
             ret = true;
-        } else if (other == null) {
+        } else if (other == null || !(other instanceof Complex)) {
             ret = false;
         } else {
-            try {
             Complex rhs = (Complex) other;
             if (rhs.isNaN()) {
                 ret = this.isNaN();
             } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
-                }
-            } catch (ClassCastException ex) {
-                // ignore exception
-                ret = false;
+                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) &&
+                      (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
             }
         }
 
         return ret;
     }
\ No newline at end of file
