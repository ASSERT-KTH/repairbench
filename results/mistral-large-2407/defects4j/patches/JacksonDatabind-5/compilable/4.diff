diff --git a/tmp/25ec226f-4c29-4d87-9cc6-59325157cdcb_buggy.java b/tmp/989c93a7-e9fa-44e9-831f-da5218b99d06_fixed.java
index b2db1d6..83ee2a8 100644
--- a/tmp/25ec226f-4c29-4d87-9cc6-59325157cdcb_buggy.java
+++ b/tmp/989c93a7-e9fa-44e9-831f-da5218b99d06_fixed.java
@@ -1,29 +1,34 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
                 } else {
                     // Well, or, as per [Issue#515], multi-level merge within mixins...
                     mixIns.add(_constructMethod(m));
+                    // Add check for parent mixin to ensure it's propagated correctly
+                    for (Class<?> parentMixin : ClassUtil.findSuperTypes(mixin, Object.class)) {
+                        for (Method parentMethod : parentMixin.getDeclaredMethods()) {
+                            if (m.getName().equals(parentMethod.getName())
+                                && Arrays.equals(m.getParameterTypes(), parentMethod.getParameterTypes())) {
+                                methods.add(_constructMethod(parentMethod));
+                            }
+                        }
+                    }
                 }
             }
         }
     }
\ No newline at end of file
