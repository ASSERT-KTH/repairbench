diff --git a/tmp/216f1c30-ddc2-4971-a27e-93f0df14d07b_buggy.java b/tmp/e2bcebf2-7e91-4b7e-bbe9-0a11a26f694f_fixed.java
index b2db1d6..c417cea 100644
--- a/tmp/216f1c30-ddc2-4971-a27e-93f0df14d07b_buggy.java
+++ b/tmp/e2bcebf2-7e91-4b7e-bbe9-0a11a26f694f_fixed.java
@@ -1,29 +1,30 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
                 /* Otherwise will have precedence, but must wait
                  * until we find the real method (mixIn methods are
                  * just placeholder, can't be called)
                  */
             } else {
                 // Well, or, as per [Issue#515], multi-level merge within mixins...
                 mixIns.add(_constructMethod(m));
+                methods.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
