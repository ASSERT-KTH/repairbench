diff --git a/tmp/afd019ab-01e2-421c-865e-39cfbb2e0560_buggy.java b/tmp/3b017cd6-4a04-4d14-97e1-ae957f343ca1_fixed.java
index b2db1d6..20893a1 100644
--- a/tmp/afd019ab-01e2-421c-865e-39cfbb2e0560_buggy.java
+++ b/tmp/3b017cd6-4a04-4d14-97e1-ae957f343ca1_fixed.java
@@ -1,29 +1,29 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
                     /* Otherwise will have precedence, but must wait
                      * until we find the real method (mixIn methods are
                      * just placeholder, can't be called)
                      */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                    // Always add to mixIns to ensure all mix-ins are considered
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
\ No newline at end of file
