diff --git a/tmp/78943a7f-2293-4f10-88af-5ee8a78c3146_buggy.java b/tmp/75a5dfb8-28e5-42df-a412-2f5f4bbf9533_fixed.java
index b2db1d6..49e0456 100644
--- a/tmp/78943a7f-2293-4f10-88af-5ee8a78c3146_buggy.java
+++ b/tmp/75a5dfb8-28e5-42df-a412-2f5f4bbf9533_fixed.java
@@ -1,29 +1,35 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
                 } else {
                     // Well, or, as per [Issue#515], multi-level merge within mixins...
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
+        // Ensure that we properly merge all mixins
+        _mergeMixIns(mixIns, methods);
+    }
+
+    private void _mergeMixIns(AnnotatedMethodMap mixIns, AnnotatedMethodMap methods) {
+        for (AnnotatedMethod mixInMethod : mixIns) {
+            if (!methods.has(mixInMethod.getName())) {
+                methods.add(mixInMethod);
+            }
+        }
     }
\ No newline at end of file
