diff --git a/tmp/fa5597e7-913b-4d28-86b8-6ed4bda6d8ea_buggy.java b/tmp/01cd9f55-9e29-47aa-a6b7-512cf47bdec5_fixed.java
index 939f49b..2837d22 100644
--- a/tmp/fa5597e7-913b-4d28-86b8-6ed4bda6d8ea_buggy.java
+++ b/tmp/01cd9f55-9e29-47aa-a6b7-512cf47bdec5_fixed.java
@@ -1,21 +1,23 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+          && n.getType() == Token.GETPROP) {
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
+        Node property = n.getFirstChild();
+        if (property != null) {
+          boolean isChainedProperty = property.getType() == Token.GETPROP;
           if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+            Node child = property.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
+            if (child != null && child.getType() == Token.STRING &&
                 child.getString().equals("prototype")) {
               return true;
             }
+          } else if (property.getType() == Token.STRING &&
+                     property.getString().equals("prototype")) {
+            return true;
+          }
         }
       }
-
       return false;
     }
\ No newline at end of file
