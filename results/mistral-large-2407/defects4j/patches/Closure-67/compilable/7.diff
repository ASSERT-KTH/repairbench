diff --git a/tmp/805816ea-03e3-4531-b003-a67497826afc_buggy.java b/tmp/38e0b70a-ece3-445b-a54f-305a71f81337_fixed.java
index 939f49b..a8e8eee 100644
--- a/tmp/805816ea-03e3-4531-b003-a67497826afc_buggy.java
+++ b/tmp/38e0b70a-ece3-445b-a54f-305a71f81337_fixed.java
@@ -1,21 +1,23 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
         // We want to exclude the assignment itself from the usage list
+        Node getPropChild = n.getFirstChild();
         boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+            getPropChild.getType() == Token.GETPROP;
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+        // Check if it's a chained property and the second level node is the "prototype"
+        if (isChainedProperty && getPropChild.getFirstChild().getNext() != null) {
+          Node prototypeNode = getPropChild.getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+          if (prototypeNode.getType() == Token.STRING &&
+              prototypeNode.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
