diff --git a/tmp/ea096b97-32b1-46bc-825d-dd5a29eb4e92_buggy.java b/tmp/954931a0-2c64-497e-a96a-3f3c87f8fb07_fixed.java
index d6a560a..0d2d4b3 100644
--- a/tmp/ea096b97-32b1-46bc-825d-dd5a29eb4e92_buggy.java
+++ b/tmp/954931a0-2c64-497e-a96a-3f3c87f8fb07_fixed.java
@@ -1,33 +1,30 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+
+    if (resolveViaRegistry(t, enclosing)) {
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
-
-    if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
