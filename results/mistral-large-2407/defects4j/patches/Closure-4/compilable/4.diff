diff --git a/tmp/0856c47a-4660-4d6a-b9a2-01814aa10e03_buggy.java b/tmp/f423a9c3-e6d3-407d-9936-8525464dee45_fixed.java
index d6a560a..7e38803 100644
--- a/tmp/0856c47a-4660-4d6a-b9a2-01814aa10e03_buggy.java
+++ b/tmp/f423a9c3-e6d3-407d-9936-8525464dee45_fixed.java
@@ -1,33 +1,31 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+    if (resolveViaRegistry(t, enclosing)) {
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
-    }
-
-    if (resolved) {
+      } else {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration() ? getReferencedType() : this;
       }
-
+    } else {
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
-    }
-
+      } else {
         super.resolveInternal(t, enclosing);
         if (isResolved()) {
           finishPropertyContinuations();
         }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+        return registry.isLastGeneration() ? getReferencedType() : this;
+      }
+    }
+    return this;  // Return default type when no cycle is detected and resolution fails.
   }
\ No newline at end of file
