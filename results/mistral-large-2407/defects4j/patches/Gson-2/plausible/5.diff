diff --git a/tmp/8f2f2da4-5f61-46e9-9f4b-af30075d50a6_buggy.java b/tmp/cd30aa6a-c66d-4719-86fd-08e882152524_fixed.java
index 6e45f80..abf5213 100644
--- a/tmp/8f2f2da4-5f61-46e9-9f4b-af30075d50a6_buggy.java
+++ b/tmp/cd30aa6a-c66d-4719-86fd-08e882152524_fixed.java
@@ -1,21 +1,37 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
 
+        final TypeAdapter<T1> runtimeTypeAdapter = new TypeAdapter<T1>() {
+          public void write(JsonWriter out, T1 value) throws IOException {
+            typeAdapter.write(out, value);
           }
-      @Override public String toString() {
+
+          public T1 read(JsonReader in) throws IOException {
+            T1 value = typeAdapter.read(in);
+            if (value != null && !requestedType.isInstance(value)) {
+              throw new JsonSyntaxException("Expected a " + requestedType.getName() + " but was " + value.getClass().getName());
+            }
+            return value;
+          }
+        };
+
+        return (TypeAdapter<T2>) runtimeTypeAdapter;
+      }
+
+      @Override
+      public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
