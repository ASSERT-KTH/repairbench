diff --git a/tmp/d0d11238-d71c-4b35-bd32-c7e6234f2d11_buggy.java b/tmp/32d25a86-ff4f-4653-a37f-6f1cffd6ede5_fixed.java
index e8705ac..a98691b 100644
--- a/tmp/d0d11238-d71c-4b35-bd32-c7e6234f2d11_buggy.java
+++ b/tmp/32d25a86-ff4f-4653-a37f-6f1cffd6ede5_fixed.java
@@ -1,24 +1,29 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
       // ignore cast nodes.
 
       if (!NodeUtil.isGet(first)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
+      // Handle the case where the first child is a GETPROP node
+      if (first.isGetProp() && "eval".equals(first.getLastChild().getString())) {
+        n.putBooleanProp(Node.DIRECT_EVAL, true);
+      }
+
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
