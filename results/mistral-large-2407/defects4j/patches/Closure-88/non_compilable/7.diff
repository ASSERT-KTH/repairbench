diff --git a/tmp/f5453baa-fac9-414e-a7fa-58d84af090a4_buggy.java b/tmp/3c64e366-ca85-4eb5-9d67-7c128f857aab_fixed.java
index 9353941..acad460 100644
--- a/tmp/f5453baa-fac9-414e-a7fa-58d84af090a4_buggy.java
+++ b/tmp/3c64e366-ca85-4eb5-9d67-7c128f857aab_fixed.java
@@ -1,30 +1,39 @@
   /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   * Given an expression and a variable, it returns READ if the first reference
+   * of that variable is a read. It returns KILL if the first reference of that
+   * variable is an assignment. It returns MAYBE_LIVE otherwise.
    */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+  private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
+        // the RHS is evaluated (normal left to right evaluation), but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
+
+    // Check if it's an assignment expression which has yet to be evaluated
+    if (n.isAssign()) {
+      Node lhs = n.getFirstChild();
+      if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
+        // An assignment that has not yet been evaluated, return MAYBE_LIVE
+        return VariableLiveness.MAYBE_LIVE;
+      }
+    }
+
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
