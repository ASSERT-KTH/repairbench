diff --git a/tmp/772ac6dc-41cb-4bd5-9ffc-87b7c0602248_buggy.java b/tmp/b36f69c9-9fd0-4233-9ecb-e6ca3cb7757c_fixed.java
index bada2b6..872bca6 100644
--- a/tmp/772ac6dc-41cb-4bd5-9ffc-87b7c0602248_buggy.java
+++ b/tmp/b36f69c9-9fd0-4233-9ecb-e6ca3cb7757c_fixed.java
@@ -1,16 +1,25 @@
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
      *
      * @param field
      * @return
      */
-    public Class getGenericType(Field field) {        
+    public Class<?> getGenericType(Field field) {
         Type generic = field.getGenericType();
+        Type actual = Object.class; // Default to Object.class
+
         if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+            ParameterizedType paramType = (ParameterizedType) generic;
+            actual = paramType.getActualTypeArguments()[0];
+
+            if (actual instanceof ParameterizedType) {
+                // Handle nested generics
+                actual = ((ParameterizedType) actual).getRawType();
+            } else if (actual instanceof Class<?>) {
+                // Directly handle Class type
+                actual = (Class<?>) actual;
+            }
         }
 
-        return Object.class;
+        return (Class<?>) actual;
     }
\ No newline at end of file
