diff --git a/tmp/79f1f427-2271-4591-95bb-53211df24b8d_buggy.java b/tmp/99260196-e1cf-4a69-97fb-c6c015cec5a2_fixed.java
index f650982..a52d72c 100644
--- a/tmp/79f1f427-2271-4591-95bb-53211df24b8d_buggy.java
+++ b/tmp/99260196-e1cf-4a69-97fb-c6c015cec5a2_fixed.java
@@ -1,42 +1,73 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+            l = ((Collection<?>) l).iterator();
         }
 
         if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+            r = ((Collection<?>) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+            return contains((Iterator<?>) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+            return contains((Iterator<?>) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+            return findMatch((Iterator<?>) l, (Iterator<?>) r);
         }
         return equal(l, r);
     }
+
+    private boolean contains(Iterator<?> iterator, Object obj) {
+        while (iterator.hasNext()) {
+            if (equal(iterator.next(), obj)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean findMatch(Iterator<?> l, Iterator<?> r) {
+        while (r.hasNext()) {
+            Object rObj = r.next();
+            while (l.hasNext()) {
+                if (equal(l.next(), rObj)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    private boolean equal(Object a, Object b) {
+        if (a == null && b == null) {
+            return true;
+        }
+        if (a == null || b == null) {
+            return false;
+        }
+        return a.equals(b);
+    }
\ No newline at end of file
