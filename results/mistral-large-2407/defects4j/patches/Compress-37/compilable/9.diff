diff --git a/tmp/87e5f3d4-67e9-4e82-8119-6b4ae4dd7d78_buggy.java b/tmp/bef64bf4-6fa5-40c4-9a32-0ea0ecb304d1_fixed.java
index 4b7e1e4..cd4d956 100644
--- a/tmp/87e5f3d4-67e9-4e82-8119-6b4ae4dd7d78_buggy.java
+++ b/tmp/bef64bf4-6fa5-40c4-9a32-0ea0ecb304d1_fixed.java
@@ -1,52 +1,54 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
             int read = 0;
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' '){
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while((ch = i.read()) != -1) {
                         read++;
                         if (ch == '='){ // end of keyword
                             final String keyword = coll.toString(CharsetNames.UTF_8);
                             // Get rest of entry
                             final int restLen = len - read;
                             if (restLen == 1) { // only NL
                                 headers.remove(keyword);
                             } else {
+                                if (restLen > 1) {
                                     final byte[] rest = new byte[restLen];
                                     final int got = IOUtils.readFully(i, rest);
                                     if (got != restLen) {
                                         throw new IOException("Failed to read "
                                                               + "Paxheader. Expected "
                                                               + restLen
                                                               + " bytes, read "
                                                               + got);
                                     }
                                     // Drop trailing NL
                                     final String value = new String(rest, 0,
                                                               restLen - 1, CharsetNames.UTF_8);
                                     headers.put(keyword, value);
                                 }
+                            }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
                 }
                 len *= 10;
                 len += ch - '0';
             }
             if (ch == -1){ // EOF
                 break;
             }
         }
         return headers;
     }
