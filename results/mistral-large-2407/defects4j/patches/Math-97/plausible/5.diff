diff --git a/tmp/ccc7f05d-7578-4e25-8453-2311b4fff23d_buggy.java b/tmp/f046e43b-13da-43c3-97ff-6165dc73c5f0_fixed.java
index 88647d1..50ab202 100644
--- a/tmp/ccc7f05d-7578-4e25-8453-2311b4fff23d_buggy.java
+++ b/tmp/f046e43b-13da-43c3-97ff-6165dc73c5f0_fixed.java
@@ -1,44 +1,35 @@
-    /**
-     * Find a zero in the given interval.
-     * <p>
-     * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
-     * 
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
-     */
 public double solve(double min, double max) throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
     clearResult();
     verifyInterval(min, max);
 
     double ret = Double.NaN;
 
     double yMin = f.value(min);
     double yMax = f.value(max);
 
     // Verify bracketing
     double sign = yMin * yMax;
     if (sign >= 0) {
         // check if either value is close to a zero
+        double epsilon = 1.0E-10; // Define a small threshold to consider values close to zero
+        if (Math.abs(yMin) < epsilon) {
+            ret = min;
+        } else if (Math.abs(yMax) < epsilon) {
+            ret = max;
+        } else {
             // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
+            throw new IllegalArgumentException(
+                "Function values at endpoints do not have different signs." +
                 "  Endpoints: [" + min + "," + max + "]" +
                 "  Values: [" + yMin + "," + yMax + "]");
+        }
     } else {
         // solve using only the first endpoint as initial guess
         ret = solve(min, yMin, max, yMax, min, yMin);
         // either min or max is a root
     }
 
     return ret;
 }
\ No newline at end of file
