diff --git a/tmp/43602a41-3294-4506-91ea-3bed2cc1c4d1_buggy.java b/tmp/f53ffa77-f292-4ef2-a7f7-5214972e9920_fixed.java
index e0ecec8..d0d7c57 100644
--- a/tmp/43602a41-3294-4506-91ea-3bed2cc1c4d1_buggy.java
+++ b/tmp/f53ffa77-f292-4ef2-a7f7-5214972e9920_fixed.java
@@ -1,35 +1,38 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
+    boolean varArgs = functionType.isVarArgs();
     while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+           (parameters.hasNext() || varArgs)) {
+        if (parameters.hasNext()) {
           parameter = parameters.next();
+        } else {
+          parameter = functionType.getVarArgsParameter();
+        }
         argument = arguments.next();
         ordinal++;
 
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
