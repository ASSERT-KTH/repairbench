diff --git a/tmp/bcb57c2d-ab44-4ec9-8386-d3e29188b9ef_buggy.java b/tmp/d46713ec-4ce0-4801-8ec0-6ed7a153904d_fixed.java
index b98f0a7..8d9b3d4 100644
--- a/tmp/bcb57c2d-ab44-4ec9-8386-d3e29188b9ef_buggy.java
+++ b/tmp/d46713ec-4ce0-4801-8ec0-6ed7a153904d_fixed.java
@@ -1,29 +1,42 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()){
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          if (constructor.hasChildren() && type instanceof ObjectType) {
+            ObjectType objType = (ObjectType) type;
+            Node param = constructor.getFirstChild();
+            while (param != null && param.isParamList()) {
+              param = param.getNext();
+              if (param == null || !param.isName()) break;
+              Property p = objType.getOwnProperty(param.getString());
+              if (p != null) {
+                n.getParent().putProp(p.getType());
+              }
+              param = param.getNext();
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
