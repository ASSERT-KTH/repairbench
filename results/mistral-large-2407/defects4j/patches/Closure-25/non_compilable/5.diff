diff --git a/tmp/5e4caafc-3f4b-4583-a367-cb5b96be19c7_buggy.java b/tmp/e7b2ede9-7dc3-4421-9366-5e36719e60b2_fixed.java
index b98f0a7..1c7c333 100644
--- a/tmp/5e4caafc-3f4b-4583-a367-cb5b96be19c7_buggy.java
+++ b/tmp/e7b2ede9-7dc3-4421-9366-5e36719e60b2_fixed.java
@@ -1,29 +1,47 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+
+    Node arg = constructor.getNext();
+    while (arg != null) {
+        Node argNext = arg.getNext();
+        traverse(arg, scope);
+
+        // Setting the type of the argument after traversal
+        JSType argType = arg.getJSType();
+        if (argType != null && ct != null && ct.isConstructor()) {
+            ObjectType objType = ObjectType.cast(type);
+            if (objType != null) {
+                Property prop = objType.getPropertyMap().getProperty("foo");
+                if (prop != null && prop.getType() != null) {
+                    arg.setJSType(prop.getType());
                 }
+            }
+        }
+
+        arg = argNext;
+    }
+
     return scope;
 }
\ No newline at end of file
