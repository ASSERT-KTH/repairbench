diff --git a/tmp/1028bb97-e5a4-4f9a-bb53-29abc1a9ddd0_buggy.java b/tmp/5634b788-43c8-438d-afd5-d52ee9f8f1c5_fixed.java
index b98f0a7..0bdabcb 100644
--- a/tmp/1028bb97-e5a4-4f9a-bb53-29abc1a9ddd0_buggy.java
+++ b/tmp/5634b788-43c8-438d-afd5-d52ee9f8f1c5_fixed.java
@@ -1,29 +1,29 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+    Node value = arg.getFirstChild();
+    if (value != null && type != null) {
+      type.toMaybeFunctionType().setParameterType(type.getConstructor(), value);
+    }
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
