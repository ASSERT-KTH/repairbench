diff --git a/tmp/5a4de450-c1d8-4e96-b0b4-27b98a6be7fa_buggy.java b/tmp/b01d177f-7869-473e-8def-e5e902198738_fixed.java
index b98f0a7..ed0565e 100644
--- a/tmp/5a4de450-c1d8-4e96-b0b4-27b98a6be7fa_buggy.java
+++ b/tmp/b01d177f-7869-473e-8def-e5e902198738_fixed.java
@@ -1,29 +1,43 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+    // Process arguments and enforce backward type inference
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      JSType argType = arg.getJSType();
+      if (argType != null && type != null && type.isFunctionType()) {
+        FunctionType functionType = type.toMaybeFunctionType();
+        if (functionType != null) {
+          int argIndex = arg.getIndexRelativeToSiblings() - 1;
+          if (argIndex > -1 && argIndex < functionType.getParameters().size()) {
+            JSType paramType = functionType.getParameters().get(argIndex);
+            if (paramType != null) {
+              scope = scope.withInferredType(arg, paramType);
+            }
+          }
+        }
+      }
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
