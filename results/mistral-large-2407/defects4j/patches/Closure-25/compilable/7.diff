diff --git a/tmp/7501b264-c59a-40f8-b473-6b47e8db6c28_buggy.java b/tmp/2cbe3885-7ab9-4926-901c-c67102339c3a_fixed.java
index b98f0a7..06d6402 100644
--- a/tmp/7501b264-c59a-40f8-b473-6b47e8db6c28_buggy.java
+++ b/tmp/2cbe3885-7ab9-4926-901c-c67102339c3a_fixed.java
@@ -1,29 +1,40 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+
+                // Propagate parameter types to the argument nodes
+                if (constructor.isNew()) {
+                    Node paramNode = ct.getParametersNode();
+                    Node argNode = constructor.getFirstChild().getNext();
+                    while (paramNode != null && argNode != null) {
+                        JSType paramType = paramNode.getJSType();
+                        if (paramType != null && argNode.getJSType() == null) {
+                            argNode.setJSType(paramType);
+                        }
+                        paramNode = paramNode.getNext();
+                        argNode = argNode.getNext();
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
