diff --git a/tmp/7f69f3c7-e042-4164-8daa-627bad2d6f3c_buggy.java b/tmp/60f9be7b-c187-4a07-8bbb-c2e38cfc8d28_fixed.java
index 5abdeb5..df15a9e 100644
--- a/tmp/7f69f3c7-e042-4164-8daa-627bad2d6f3c_buggy.java
+++ b/tmp/60f9be7b-c187-4a07-8bbb-c2e38cfc8d28_fixed.java
@@ -1,29 +1,25 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
+      AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
               // We make a special exception when the entire cfgNode is a chain
               // of assignments, since in that case the assignment statements
               // will happen after the inlining of the right hand side.
               // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
               //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+              !(parent.isAssign() && parent.getFirstChild() == n)) {
             // Don't count lhs of top-level assignment chain
             numUsesWithinCfgNode++;
           }
         }
-
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
