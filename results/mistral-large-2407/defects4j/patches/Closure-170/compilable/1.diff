diff --git a/tmp/e9ace23a-2b85-4fc4-9aee-d9334d1043eb_buggy.java b/tmp/ed5e5d80-ca73-4f96-84f3-39759ec341b4_fixed.java
index 5abdeb5..864f45f 100644
--- a/tmp/e9ace23a-2b85-4fc4-9aee-d9334d1043eb_buggy.java
+++ b/tmp/ed5e5d80-ca73-4f96-84f3-39759ec341b4_fixed.java
@@ -1,29 +1,28 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
         numUsesWithinCfgNode = 0;
         AbstractCfgNodeTraversalCallback gatherCb =
             new AbstractCfgNodeTraversalCallback() {
 
                 @Override
                 public void visit(NodeTraversal t, Node n, Node parent) {
                     if (n.isName() && n.getString().equals(varName) &&
                         // We make a special exception when the entire cfgNode is a chain
                         // of assignments, since in that case the assignment statements
                         // will happen after the inlining of the right hand side.
                         // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
                         //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+                        !(parent.isAssign() && (parent.getFirstChild() == n || parent.getLastChild() == n))) {
                         // Don't count lhs of top-level assignment chain
                         numUsesWithinCfgNode++;
                     }
                 }
 
             };
 
         NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
