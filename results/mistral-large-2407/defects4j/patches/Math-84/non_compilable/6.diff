diff --git a/tmp/cfce21b3-8d6d-4cbf-8281-94c28285b751_buggy.java b/tmp/3628ec89-0e7f-45e7-aec2-9437745f05a4_fixed.java
index 5f1dcf2..9090870 100644
--- a/tmp/cfce21b3-8d6d-4cbf-8281-94c28285b751_buggy.java
+++ b/tmp/3628ec89-0e7f-45e7-aec2-9437745f05a4_fixed.java
@@ -1,41 +1,47 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = Arrays. stream(simplex).map(rpvp -> rpvp.equals(reflected) ? expanded : rpvp).toArray(RealPointValuePair[]::new);
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = Arrays. stream(simplex).map(rpvp -> rpvp.equals(reflected) ? contracted : rpvp).toArray(RealPointValuePair[]::new);
 
-            // check convergence
                 return;
             }
 
+            // perform a shrink step
+            simplex = Arrays.stream(simplex).map(rpvp -> rpvp.equals(simplex[0]) ? rpvp : evaluateNewSimplex(new RealPointValuePair[] { rpvp, best }, 0.5, comparator)).toArray(RealPointValuePair[]::new);
+            return;
         }
 
     }
\ No newline at end of file
