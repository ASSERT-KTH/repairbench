diff --git a/tmp/d85d41c9-5b1f-47a1-8fdb-c1ae078542c8_buggy.java b/tmp/86a97dd6-2f67-46c3-bee5-18c8817c9ffa_fixed.java
index 5f1dcf2..85aa73c 100644
--- a/tmp/d85d41c9-5b1f-47a1-8fdb-c1ae078542c8_buggy.java
+++ b/tmp/86a97dd6-2f67-46c3-bee5-18c8817c9ffa_fixed.java
@@ -1,41 +1,47 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
+            // Check convergence
+            if (isConverged(getEvaluations(), simplex)) {
+                return;
+            }
+
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    return;
+                } else {
+                    // accept the expanded simplex
+                    simplex = new RealPointValuePair[]{expanded};
+                    return;
                 }
 
-                return;
-
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+                simplex = new RealPointValuePair[]{contracted};
+            } else {
+                // shrink the simplex
+                shrinkSimplex(original, comparator);
             }
-
         }
 
     }
\ No newline at end of file
