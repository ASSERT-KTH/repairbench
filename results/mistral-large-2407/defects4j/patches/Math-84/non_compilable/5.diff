diff --git a/tmp/d64ead38-a49f-4a09-8ace-5bb71554d716_buggy.java b/tmp/1eb51c24-3515-4ab9-80df-3816c7d41205_fixed.java
index 5f1dcf2..f6b40e0 100644
--- a/tmp/d64ead38-a49f-4a09-8ace-5bb71554d716_buggy.java
+++ b/tmp/1eb51c24-3515-4ab9-80df-3816c7d41205_fixed.java
@@ -1,41 +1,55 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = reflected;
+                } else {
+                    // accept the expanded simplex
+                    simplex = expanded;
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = contracted;
 
                 // check convergence
                 return;
             }
 
+            // If the contracted simplex is not better, perform a shrink step
+            RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[simplex.length];
+            for (int i = 0; i < simplex.length; i++) {
+                if (i == 0) {
+                    shrinkedSimplex[i] = simplex[i];  // keep the best point
+                } else {
+                    shrinkedSimplex[i] = evaluateNewSimplex(new RealPointValuePair[] { simplex[0], simplex[i] }, sigma, comparator);
+                }
+            }
+            simplex = shrinkedSimplex;
+
         }
 
     }
\ No newline at end of file
