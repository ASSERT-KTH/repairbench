diff --git a/tmp/9990babb-56ed-463b-95a4-a29dd71c0858_buggy.java b/tmp/50edadd6-17c2-478d-9908-41320d9d7b1b_fixed.java
index 61ffdbf..c9ca32e 100644
--- a/tmp/9990babb-56ed-463b-95a4-a29dd71c0858_buggy.java
+++ b/tmp/50edadd6-17c2-478d-9908-41320d9d7b1b_fixed.java
@@ -1,44 +1,34 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
   Node function = fnScope.getRootNode();
 
   Preconditions.checkState(function.isFunction());
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
     // The parameters object literal setters can not be removed.
     return;
   }
 
   Node argList = getFunctionArgList(function);
   boolean modifyCallers = modifyCallSites
       && callSiteOptimizer.canModifyCallers(function);
+
+  // In simple mode, do not modify callers and don't remove unused params
+  if (compiler.getOptions().getCompilationLevel() == CompilationLevel.SIMPLE_OPTIMIZATIONS) {
+    modifyCallers = false;
+  }
+
   if (!modifyCallers) {
     // Strip unreferenced args off the end of the function declaration.
     Node lastArg;
     while ((lastArg = argList.getLastChild()) != null) {
       Var var = fnScope.getVar(lastArg.getString());
       if (!referenced.contains(var)) {
         argList.removeChild(lastArg);
         compiler.reportCodeChange();
       } else {
         break;
       }
     }
   } else {
     callSiteOptimizer.optimize(fnScope, referenced);
   }
 }
\ No newline at end of file
