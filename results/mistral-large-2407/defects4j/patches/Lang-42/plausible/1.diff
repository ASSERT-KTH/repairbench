diff --git a/tmp/2b0ddfb6-0b16-4cb9-80af-8479187f7b63_buggy.java b/tmp/c2bc2921-a8bb-4826-986a-96f62c1cf4af_fixed.java
index 822447c..642f70a 100644
--- a/tmp/2b0ddfb6-0b16-4cb9-80af-8479187f7b63_buggy.java
+++ b/tmp/c2bc2921-a8bb-4826-986a-96f62c1cf4af_fixed.java
@@ -1,37 +1,52 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      *
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      *
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
             char c = str.charAt(i);
             String entityName = this.entityName(c);
             if (entityName == null) {
-                if (c > 0x7F) {
+                if (c > 0x7F || (c >= 0xD800 && c <= 0xDFFF)) {  // Handle surrogate pairs
+                    if (c >= 0xD800 && c <= 0xDBFF) {
+                        // High surrogate, get the next character
+                        if (i + 1 < len) {
+                            char c2 = str.charAt(i + 1);
+                            if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
+                                // Low surrogate, compute the Unicode codepoint
+                                int codePoint = ((c - 0xD800) * 0x400) + (c2 - 0xDC00) + 0x10000;
+                                writer.write("&#");
+                                writer.write(Integer.toString(codePoint, 10));
+                                writer.write(';');
+                                i++;  // Skip the next character since we processed it
+                                continue;
+                            }
+                        }
+                    }
                     writer.write("&#");
                     writer.write(Integer.toString(c, 10));
                     writer.write(';');
                 } else {
                     writer.write(c);
                 }
             } else {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
         }
     }
\ No newline at end of file
