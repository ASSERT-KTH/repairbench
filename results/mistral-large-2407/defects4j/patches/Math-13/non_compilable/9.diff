diff --git a/tmp/6cdad312-1e1a-4a53-9ce5-25c8c1329143_buggy.java b/tmp/9cbac243-2fc6-470c-ba26-f4fc7c039d70_fixed.java
index 4e21866..c9a7070 100644
--- a/tmp/6cdad312-1e1a-4a53-9ce5-25c8c1329143_buggy.java
+++ b/tmp/9cbac243-2fc6-470c-ba26-f4fc7c039d70_fixed.java
@@ -1,10 +1,27 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
+     * @throws IllegalArgumentException if the matrix is not symmetric or not positive definite.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        if (!m.isSquare()) {
+            throw new IllegalArgumentException("Matrix must be square");
+        }
         final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+        double[] realEigenvalues = dec.getRealEigenvalues();
+        RealMatrix d = dec.getD();
+        RealMatrix v = dec.getV();
+
+        RealMatrix squareRootD = new Array2DRowRealMatrix(realEigenvalues.length, realEigenvalues.length);
+        for (int i = 0; i < realEigenvalues.length; i++) {
+            if (realEigenvalues[i] <= 0) {
+                throw new IllegalArgumentException("Matrix must be positive definite");
+            }
+            squareRootD.setEntry(i, i, Math.sqrt(realEigenvalues[i]));
+        }
+
+        RealMatrix squareRoot = v.multiply(squareRootD).multiply(v.transpose());
+        return squareRoot;
     }
\ No newline at end of file
