diff --git a/tmp/5ef76a6a-ee6e-4277-8567-00b679664d00_buggy.java b/tmp/a5d30fd1-0fd8-4bac-a522-2a0de314538c_fixed.java
index a7d0787..50dec7e 100644
--- a/tmp/5ef76a6a-ee6e-4277-8567-00b679664d00_buggy.java
+++ b/tmp/a5d30fd1-0fd8-4bac-a522-2a0de314538c_fixed.java
@@ -1,54 +1,75 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            try
+            {
+                if (Number.class.isAssignableFrom(clazz))
+                {
+                    Constructor<?> ctor = clazz.getConstructor(String.class);
+                    return (T) ctor.newInstance(str);
                 }
+                else
+                {
+                    // Other possible handling for known types like Boolean
+                    if (Boolean.class == clazz || Boolean.TYPE == clazz)
+                    {
+                        return (T) Boolean.valueOf(str);
+                    }
+                    // Other known types can be added here similarly
+                }
+            }
+            catch (Exception e)
+            {
+                throw new ParseException(e.getMessage());
+            }
+        }
+        throw new ParseException("Unknown class type: " + clazz.getName());
     }
\ No newline at end of file
