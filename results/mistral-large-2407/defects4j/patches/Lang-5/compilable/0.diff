diff --git a/tmp/9e6ca4f9-cf6e-463f-bcfe-5c52e0a4ce08_buggy.java b/tmp/8fb2d03d-67e2-4026-88d9-82cf62cfa3a8_fixed.java
index f843d29..5439a8c 100644
--- a/tmp/9e6ca4f9-cf6e-463f-bcfe-5c52e0a4ce08_buggy.java
+++ b/tmp/8fb2d03d-67e2-4026-88d9-82cf62cfa3a8_fixed.java
@@ -1,68 +1,79 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
      * </pre>
      *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
+     * <p>(#) The behavior of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
-        if (len < 2) {
+        if (len == 0 || str.charAt(0) == '_' && len < 3 || len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+
+        String language = "", country = "", variant = "";
+        int underlineCount = 0;
+
+        for (int i = 0; i < len; i++) {
+            final char ch = str.charAt(i);
+
+            if (underlineCount == 0) { // Parsing language
+                if (ch == '_') {
+                    if (language.length() == 0) {
                         throw new IllegalArgumentException("Invalid locale format: " + str);
                     }
-            if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
+                    underlineCount++;
+                } else if (Character.isLowerCase(ch)) {
+                    language += ch;
+                } else {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-            if (str.charAt(2) != '_') {
+            } else if (underlineCount == 1) { // Parsing country
+                if (ch == '_') {
+                    if (country.length() != 2) {
                         throw new IllegalArgumentException("Invalid locale format: " + str);
                     }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+                    underlineCount++;
+                } else if (Character.isUpperCase(ch)) {
+                    country += ch;
+                } else {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+            } else { // Parsing variant
+                variant += ch;
             }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (str.charAt(5) != '_') {
+
+        if (underlineCount == 0 && language.length() > 0) {
+            return new Locale(language);
+        } else if (underlineCount == 1 && country.length() == 2) {
+            return new Locale(language, country);
+        } else if (underlineCount == 2 && variant.length() > 0) {
+            return new Locale(language, country, variant);
+        } else {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
\ No newline at end of file
