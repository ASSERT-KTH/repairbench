diff --git a/tmp/23b28805-1dbe-4b0f-9591-90aee0be603f_buggy.java b/tmp/b2c8fe9c-750f-4315-bd12-9fd9b4e3fadf_fixed.java
index 21f64c6..87ed5f0 100644
--- a/tmp/23b28805-1dbe-4b0f-9591-90aee0be603f_buggy.java
+++ b/tmp/b2c8fe9c-750f-4315-bd12-9fd9b4e3fadf_fixed.java
@@ -1,23 +1,30 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
                 while (++offset < length && startChar != input[offset]);
+                offset--; // compensate for the extra increment in the while loop
+            }
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (last <= length) {
+                boolean match = true;
+                for (int j = 1; i < last && match; i++, j++) {
+                    if (seq.charAt(j) != input[i]) {
+                        match = false;
+                    }
+                }
+                if (match && i == last) {
                     return offset - pos;
                 }
             }
+        }
         return -1;
     }
\ No newline at end of file
