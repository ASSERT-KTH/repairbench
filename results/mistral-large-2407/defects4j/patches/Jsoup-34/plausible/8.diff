diff --git a/tmp/a721f41a-5f30-4de6-8e57-a2af0462c38b_buggy.java b/tmp/99840977-02a8-4793-b207-5bd2d36f4b52_fixed.java
index 21f64c6..27b0043 100644
--- a/tmp/a721f41a-5f30-4de6-8e57-a2af0462c38b_buggy.java
+++ b/tmp/99840977-02a8-4793-b207-5bd2d36f4b52_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while(++offset < length && startChar != input[offset]);
+            if (offset >= length)
+                return -1;
+
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+            boolean matched = true;
+
+            for (int j = 1; i < last && i < length && matched; i++, j++) {
+                if (seq.charAt(j) != input[i]) {
+                    matched = false;
+                    break;
                 }
             }
-        return -1;
+
+            if (matched && last <= length) {
+                return offset - pos; // Found full sequence
+            }
+        }
+        return -1; // Not found
     }
\ No newline at end of file
