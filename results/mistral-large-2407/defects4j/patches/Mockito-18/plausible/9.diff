diff --git a/tmp/ce40ea4b-a7ff-42ca-8254-573c1b1a804f_buggy.java b/tmp/a91bdb06-6538-4227-87f0-76febc85c47a_fixed.java
index 710fcc0..6c1e854 100644
--- a/tmp/ce40ea4b-a7ff-42ca-8254-573c1b1a804f_buggy.java
+++ b/tmp/a91bdb06-6538-4227-87f0-76febc85c47a_fixed.java
@@ -1,37 +1,37 @@
 Object returnValueFor(Class<?> type) {
     if (Primitives.isPrimitiveOrWrapper(type)) {
         return Primitives.defaultValueForPrimitiveOrWrapper(type);
-            //new instances are used instead of Collections.emptyList(), etc.
-            //to avoid UnsupportedOperationException if code under test modifies returned collection
     } else if (type == Collection.class) {
         return new LinkedList<Object>();
     } else if (type == Set.class) {
         return new HashSet<Object>();
     } else if (type == HashSet.class) {
         return new HashSet<Object>();
     } else if (type == SortedSet.class) {
         return new TreeSet<Object>();
     } else if (type == TreeSet.class) {
         return new TreeSet<Object>();
     } else if (type == LinkedHashSet.class) {
         return new LinkedHashSet<Object>();
     } else if (type == List.class) {
         return new LinkedList<Object>();
     } else if (type == LinkedList.class) {
         return new LinkedList<Object>();
     } else if (type == ArrayList.class) {
         return new ArrayList<Object>();
     } else if (type == Map.class) {
         return new HashMap<Object, Object>();
     } else if (type == HashMap.class) {
         return new HashMap<Object, Object>();
     } else if (type == SortedMap.class) {
         return new TreeMap<Object, Object>();
     } else if (type == TreeMap.class) {
         return new TreeMap<Object, Object>();
     } else if (type == LinkedHashMap.class) {
         return new LinkedHashMap<Object, Object>();
+    } else if (type == Iterable.class) {  // Added this case
+        return new LinkedList<Object>();
     }
     // Let's not care about the rest of collections.
     return null;
 }
\ No newline at end of file
