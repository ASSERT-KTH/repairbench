diff --git a/tmp/cb465296-6377-49de-9c83-9183c3d54fc7_buggy.java b/tmp/8aeb5fa6-dc03-458b-91c2-23b503d3baa1_fixed.java
index 66e3d01..db3a595 100644
--- a/tmp/cb465296-6377-49de-9c83-9183c3d54fc7_buggy.java
+++ b/tmp/8aeb5fa6-dc03-458b-91c2-23b503d3baa1_fixed.java
@@ -1,34 +1,34 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
       // Binary operators are only valid if both children are valid.
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
+        if (val.hasTwoChildren()
+            && isValidDefineValue(val.getFirstChild(), defines)
+            && isValidDefineValue(val.getSecondChild(), defines)) {
+          return true;
+        }
+        break;
 
-      // Uniary operators are valid if the child is valid.
+      // Unary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
         return isValidDefineValue(val.getFirstChild(), defines);
 
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
     return false;
   }
\ No newline at end of file
