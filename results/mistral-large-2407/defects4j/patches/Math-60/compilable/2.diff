diff --git a/tmp/2daf9605-efcc-4354-b47d-308ee0642e63_buggy.java b/tmp/64386e65-5c66-40f9-9e75-e92a050c515f_fixed.java
index 3127f85..b3c5d1c 100644
--- a/tmp/2daf9605-efcc-4354-b47d-308ee0642e63_buggy.java
+++ b/tmp/64386e65-5c66-40f9-9e75-e92a050c515f_fixed.java
@@ -1,24 +1,24 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
     try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+        if (x < (mean - 40 * standardDeviation)) { // Corrected from 20 to 40
             return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+        } else if (x > (mean + 40 * standardDeviation)) { // Corrected from 20 to 40
             return 1;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
