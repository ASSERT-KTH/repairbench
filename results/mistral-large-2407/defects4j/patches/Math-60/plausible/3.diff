diff --git a/tmp/aac38d00-f6d0-4fb7-9ff3-dbd0cd53a325_buggy.java b/tmp/b46204d6-5834-403d-a767-b12c504cd30e_fixed.java
index 3127f85..e7e28d1 100644
--- a/tmp/aac38d00-f6d0-4fb7-9ff3-dbd0cd53a325_buggy.java
+++ b/tmp/b46204d6-5834-403d-a767-b12c504cd30e_fixed.java
@@ -1,24 +1,14 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
     public double cumulativeProbability(double x) throws MathException {
+        if (x < (mean - 40 * standardDeviation)) { // Handle extreme values directly
+            return 0;
+        } else if (x > (mean + 40 * standardDeviation)) {
+            return 1;
+        }
+
         final double dev = x - mean;
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
+            throw new MathException(ex);
         }
     }
\ No newline at end of file
