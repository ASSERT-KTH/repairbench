diff --git a/tmp/91b6f582-454d-476e-ad58-43067c023a4e_buggy.java b/tmp/f42f6c0f-5c43-4a99-a035-3ccfd585b9c1_fixed.java
index 7116384..aa88bc3 100644
--- a/tmp/91b6f582-454d-476e-ad58-43067c023a4e_buggy.java
+++ b/tmp/f42f6c0f-5c43-4a99-a035-3ccfd585b9c1_fixed.java
@@ -1,39 +1,23 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
-            final long nextByte = in.read();
+            final int nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
-            }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+                return -1; // Handle end of stream
             }
+            bitsCached |= ((long) nextByte) << bitsCachedSize;
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
-        final long bitsOut;
+        long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
+            bitsOut = bitsCached & MASKS[count];
             bitsCached >>>= count;
         } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            bitsOut = (bitsCached >>> (bitsCachedSize - count)) & MASKS[count];
         }
         bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
