diff --git a/tmp/99b08083-6df7-484f-a78a-c8ccefa8dae0_buggy.java b/tmp/e80816c3-3927-4c45-83b2-53b7fd79e9b4_fixed.java
index e69de29..02fbb13 100644
--- a/tmp/99b08083-6df7-484f-a78a-c8ccefa8dae0_buggy.java
+++ b/tmp/e80816c3-3927-4c45-83b2-53b7fd79e9b4_fixed.java
@@ -0,0 +1,25 @@
+class Sub extends Base {
+    public int sub = 2;
+}
+class Base {
+    public int base = 1;
+}
+
+@Test
+public void testSuperClassWithReferencedJavaType() {
+    TypeFactory tf = objectMapper().getTypeFactory();
+    tf.constructType(Base.class); // must be constructed before sub to set the cache correctly
+    JavaType subType = tf.constructType(Sub.class);
+    // baseTypeFromSub should be a ResolvedRecursiveType in this test
+    JavaType baseTypeFromSub = subType.getSuperClass();
+    assertNotNull(baseTypeFromSub.getSuperClass());
+}
+
+public void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {
+    TypeFactory tf = TypeFactory.defaultInstance();
+    tf.constructType(Base.class);
+    tf.constructType(Sub.class);
+    Sub sub = new Sub();
+    String serialized = objectMapper().writeValueAsString(sub);
+    assertEquals("{\"base\":1,\"sub\":2}", serialized);
+}
\ No newline at end of file
