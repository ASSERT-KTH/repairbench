diff --git a/tmp/bae92ac1-2c5d-4a94-98f6-7e7c1d756ba8_buggy.java b/tmp/39f3589e-c308-4ee7-9a11-187a9dbc5df6_fixed.java
index e69de29..9da7a45 100644
--- a/tmp/bae92ac1-2c5d-4a94-98f6-7e7c1d756ba8_buggy.java
+++ b/tmp/39f3589e-c308-4ee7-9a11-187a9dbc5df6_fixed.java
@@ -0,0 +1,50 @@
+public class TypeFactory {
+    private Map<Class<?>, JavaType> _cachedTypes = new ConcurrentHashMap<>();
+
+    public JavaType constructType(Class<?> cls) {
+        if (_cachedTypes.containsKey(cls)) {
+            return _cachedTypes.get(cls);
+        }
+
+        JavaType type = _constructType(cls); // Call some internal method to construct the type
+        _cachedTypes.put(cls, type);
+
+        if (cls.getSuperclass() != null) {
+            constructType(cls.getSuperclass());
+        }
+
+        return type;
+    }
+
+    private JavaType _constructType(Class<?> cls) {
+        // Placeholder for actual type construction logic
+        return new JavaTypeImpl(cls);
+    }
+}
+
+class JavaTypeImpl extends JavaType {
+    private Class<?> _cls;
+
+    public JavaTypeImpl(Class<?> cls) {
+        super(cls);
+        _cls = cls;
+    }
+
+    @Override
+    public JavaType getSuperClass() {
+        if (_cls.getSuperclass() == null) {
+            return null;
+        }
+        return new JavaTypeImpl(_cls.getSuperclass());
+    }
+}
+
+abstract class JavaType {
+    private Class<?> _cls;
+
+    public JavaType(Class<?> cls) {
+        _cls = cls;
+    }
+
+    public abstract JavaType getSuperClass();
+}
\ No newline at end of file
