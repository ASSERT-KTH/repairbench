diff --git a/tmp/4597fad9-62b3-4dd2-a488-89de18d50682_buggy.java b/tmp/96c18c7e-ad14-403d-b27e-a05eb7b4dfc4_fixed.java
index e69de29..e0b2642 100644
--- a/tmp/4597fad9-62b3-4dd2-a488-89de18d50682_buggy.java
+++ b/tmp/96c18c7e-ad14-403d-b27e-a05eb7b4dfc4_fixed.java
@@ -0,0 +1,24 @@
+public class RecursiveTypeTest {
+    @Test
+    public void testSuperClassWithReferencedJavaType() {
+        TypeFactory tf = objectMapper().getTypeFactory();
+        tf.constructType(Base.class); // Construct the base type before the subtype to ensure correct cache setup
+        JavaType subType = tf.constructType(Sub.class);
+        JavaType baseTypeFromSub = subType.getSuperClass();
+        assertNotNull(baseTypeFromSub.getSuperClass()); // Ensure the superclass of the base type is correctly resolved
+    }
+}
+
+// In a separate test class for organizing tests better
+public class RecursiveTypeSerializationTest {
+    @Test
+    public void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {
+        TypeFactory tf = TypeFactory.defaultInstance();
+        tf.constructType(Base.class); // Construct the base type first
+        tf.constructType(Sub.class); // Then construct the subtype
+
+        Sub sub = new Sub();
+        String serialized = objectMapper().writeValueAsString(sub); // Serialize the sub instance
+        assertEquals("{\"base\":1,\"sub\":2}", serialized); // Ensure both base and sub properties are included
+    }
+}
\ No newline at end of file
