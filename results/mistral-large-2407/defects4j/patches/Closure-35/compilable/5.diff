diff --git a/tmp/96eb482b-a2ae-4dc4-9318-0707311a6e7a_buggy.java b/tmp/a10af6d1-94e8-4b7c-8f88-e80475261f41_fixed.java
index d57736b..84647de 100644
--- a/tmp/96eb482b-a2ae-4dc4-9318-0707311a6e7a_buggy.java
+++ b/tmp/a10af6d1-94e8-4b7c-8f88-e80475261f41_fixed.java
@@ -1,39 +1,31 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
     if (type == null || constraint == null) {
         return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
         ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
         if (objType != null) {
             for (String prop : constraintObj.getOwnPropertyNames()) {
                 JSType propType = constraintObj.getPropertyType(prop);
                 if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
+                    JSType typeToInfer;
                     if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                        JSType objTypeProp = objType.getPropertyType(prop);
+                        if (objTypeProp != null) {
+                            typeToInfer = objTypeProp.getLeastSupertype(propType);
+                        } else {
+                            typeToInfer = propType;
+                        }
+                    } else {
+                        typeToInfer = propType;
                     }
                     objType.defineInferredProperty(prop, typeToInfer, null);
                 }
             }
         }
     }
 }
\ No newline at end of file
