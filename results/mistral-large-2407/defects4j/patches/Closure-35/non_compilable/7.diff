diff --git a/tmp/5d3db8db-bb6c-4f4d-b3db-9063944ae2ee_buggy.java b/tmp/1ebd97d1-abca-4a5d-bbdf-9bcbaaa9dc51_fixed.java
index d57736b..620fee1 100644
--- a/tmp/5d3db8db-bb6c-4f4d-b3db-9063944ae2ee_buggy.java
+++ b/tmp/1ebd97d1-abca-4a5d-bbdf-9bcbaaa9dc51_fixed.java
@@ -1,39 +1,52 @@
 /**
  * Suppose X is an object with inferred properties.
  * Suppose also that X is used in a way where it would only type-check
  * correctly if some of those properties are widened.
  * Then we should be polite and automatically widen X's properties for him.
  *
  * For a concrete example, consider:
  * param x {{prop: (number|undefined)}}
  * function f(x) {}
  * f({});
  *
  * If we give the anonymous object an inferred property of (number|undefined),
  * then this code will type-check appropriately.
  */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
             typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                getNativeType(UNKNOWN_TYPE).getLeastSupertype(propType);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
+
+  // Add additional handling for non-defined properties in objType
+  if (objType != null) {
+    for (String prop : objType.getOwnPropertyNames()) {
+      if (!constraintObj.isPropertyTypeDeclared(prop)) {
+        JSType propType = objType.getPropertyType(prop);
+        if (!constraintObj.hasProperty(prop)) {
+          JSType typeToInfer = getNativeType(UNKNOWN_TYPE).getLeastSupertype(propType);
+          constraintObj.defineInferredProperty(prop, typeToInfer, null);
+        }
+      }
+    }
+  }
 }
\ No newline at end of file
