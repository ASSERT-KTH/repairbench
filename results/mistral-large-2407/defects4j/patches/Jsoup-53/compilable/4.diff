diff --git a/tmp/d972070f-26ae-4164-ac6e-42eee73b6e21_buggy.java b/tmp/8e3b8ca8-c68f-4a52-9db3-979b91de457b_fixed.java
index fecb896..6550cb5 100644
--- a/tmp/d972070f-26ae-4164-ac6e-42eee73b6e21_buggy.java
+++ b/tmp/8e3b8ca8-c68f-4a52-9db3-979b91de457b_fixed.java
@@ -1,34 +1,44 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
 
-        do {
-            if (isEmpty()) break;
+    while (!isEmpty()) {
         Character c = consume();
-            if (last == 0 || last != ESC) {
+        if (last != '\\' && last != '\'' && last != '\"') {
             if (c.equals(open)) {
                 depth++;
-                    if (start == -1)
-                        start = pos;
+                if (start == -1) {
+                    start = pos - 1; // Adjust to include the opening character
                 }
-                else if (c.equals(close))
+            } else if (c.equals(close)) {
                 depth--;
             }
+        }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        if (depth > 0) {
+            end = pos; // Update end position, including the closing character
+        }
         last = c;
-        } while (depth > 0);
+
+        if (depth == 0 && start != -1) {
+            break; // Exit the loop when we've found a balanced segment
+        }
+    }
+
+    if (start == -1) {
+        start = pos; // Set start to current position if no open character is found
+    }
+
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
