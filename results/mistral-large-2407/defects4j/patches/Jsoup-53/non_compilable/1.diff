diff --git a/tmp/05db1f02-aa45-44cf-8b82-d194f9471ae2_buggy.java b/tmp/5b681613-210d-45f7-88f6-77fba98c026a_fixed.java
index fecb896..ab0f30f 100644
--- a/tmp/05db1f02-aa45-44cf-8b82-d194f9471ae2_buggy.java
+++ b/tmp/5b681613-210d-45f7-88f6-77fba98c026a_fixed.java
@@ -1,34 +1,51 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+
+            if (last == ESC) {
+                // Do nothing if the last character was an escape character
+            } else if ((last == '\\') && (c == 'n' || c == 't' || c == 'f' || c == 'r')) {
+                // Handle escaped characters \n, \t, \f, \r
+            } else if (c == 0) {
+                break; // EOF
+            } else if (c.equals(open)) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c.equals(close)) {
                 depth--;
+                if (depth < 0) {
+                    requeue(Character.toString(c)); // Found unbalanced closer, requeue it
+                    break;
+                }
             }
 
-            if (depth > 0 && last != 0)
+            if (depth > 0)
                 end = pos; // don't include the outer match pair in the return
             last = c;
         } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+        if (end >= 0)
+            return queue.substring(start, end);
+
+        // Requeue remaining characters if no balanced string was found
+        while (!isEmpty()) {
+            requeue(Character.toString(consume()));
+        }
+        return "";
     }
\ No newline at end of file
