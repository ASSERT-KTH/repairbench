diff --git a/tmp/6f591357-4793-4872-8a84-46e4d43d88f1_buggy.java b/tmp/99aa9c65-e682-4e5b-81ce-3b8c943146ee_fixed.java
index 0f439b3..c42dc69 100644
--- a/tmp/6f591357-4793-4872-8a84-46e4d43d88f1_buggy.java
+++ b/tmp/99aa9c65-e682-4e5b-81ce-3b8c943146ee_fixed.java
@@ -1,38 +1,46 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
         int totalRead = 0;
 
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
         numToRead = Math.min(numToRead, available());
 
         totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
         if (totalRead == -1) {
+            totalRead = 0; // Reset totalRead to 0
+        }
+
+        count(totalRead);
+        if (totalRead == 0) { // Check if no bytes were read
             hasHitEOF = true;
         } else {
             entryOffset += totalRead;
         }
 
-        return totalRead;
+        // Throw an exception if there are missing bytes
+        if (entrySize > entryOffset && totalRead == 0) {
+            throw new IOException("Truncated TAR archive");
+        }
+
+        return totalRead == 0 ? -1 : totalRead;
     }
\ No newline at end of file
