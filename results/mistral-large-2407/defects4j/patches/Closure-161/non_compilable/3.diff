diff --git a/tmp/70f27371-e58c-417f-b932-11e56b5b8eef_buggy.java b/tmp/82b06baf-60ad-4c85-b035-6696befebb31_fixed.java
index 1303a19..dd6b5bd 100644
--- a/tmp/70f27371-e58c-417f-b932-11e56b5b8eef_buggy.java
+++ b/tmp/82b06baf-60ad-4c85-b035-6696befebb31_fixed.java
@@ -1,45 +1,45 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
+      if (intIndex < left.getChildCount()) {
+        elem = NodeUtil.newUndefinedNode();
+      } else {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
       }
-
-    if (elem.getType() == Token.EMPTY) {
-      elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
