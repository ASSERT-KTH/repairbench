diff --git a/tmp/f715faa3-0452-4b56-9bb0-6cf021d02a90_buggy.java b/tmp/a03c7a57-8f4c-44b5-a502-37bc4860eb1d_fixed.java
index 1303a19..98f3118 100644
--- a/tmp/f715faa3-0452-4b56-9bb0-6cf021d02a90_buggy.java
+++ b/tmp/a03c7a57-8f4c-44b5-a502-37bc4860eb1d_fixed.java
@@ -1,45 +1,50 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Check if left node is an array literal
+    if (left.isArrayLit()) {
       Node elem = left.getFirstChild();
       for (int i = 0; elem != null && i < intIndex; i++) {
         elem = elem.getNext();
       }
 
       if (elem == null) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
       }
 
       if (elem.getType() == Token.EMPTY) {
         elem = NodeUtil.newUndefinedNode(elem);
       } else {
         left.removeChild(elem);
       }
 
       // Replace the entire GETELEM with the value
       n.getParent().replaceChild(n, elem);
       reportCodeChange();
       return elem;
     }
+
+    return n;
+  }
