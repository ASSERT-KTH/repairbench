diff --git a/tmp/9f48afb7-3dc2-4f1a-ac1d-d4e75815c309_buggy.java b/tmp/a3a19970-fe20-43cb-b9ef-36d8f3ca3da6_fixed.java
index 71189c3..47f8ff9 100644
--- a/tmp/9f48afb7-3dc2-4f1a-ac1d-d4e75815c309_buggy.java
+++ b/tmp/a3a19970-fe20-43cb-b9ef-36d8f3ca3da6_fixed.java
@@ -1,46 +1,57 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
             // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
                 option.validate(commandLine);
             }
 
             // if the child option is present then validate it
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
 
                     break;
                 }
 
+                // Ensure the correct type is returned
+                Object value = commandLine.getValue(option);
+                if (value != null) {
+                    if (value instanceof String || value instanceof File) {
                         option.validate(commandLine);
+                    } else {
+                        throw new OptionException(this, ResourceConstants.INVALID_TYPE,
+                            String.format("Invalid value type: %s for option: %s", value.getClass().getName(), option.getPreferredName()));
+                    }
+                } else {
+                    option.validate(commandLine);
+                }
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
