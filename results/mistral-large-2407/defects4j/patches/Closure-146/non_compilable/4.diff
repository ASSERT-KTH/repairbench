diff --git a/tmp/0820c8e5-b3ab-4454-a970-c2a4781e8eeb_buggy.java b/tmp/f0dc4c8e-9b0c-4bb6-88b2-169251639494_fixed.java
index 210695a..3e1b248 100644
--- a/tmp/0820c8e5-b3ab-4454-a970-c2a4781e8eeb_buggy.java
+++ b/tmp/f0dc4c8e-9b0c-4bb6-88b2-169251639494_fixed.java
@@ -1,32 +1,36 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
+   * value {@code v2} of type {@code (undefined | number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+    // Union types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
-    // other types
-    switch (this.testForEquality(that)) {
+    // Other types
+    Equality status = this.testForEquality(that);
+    switch (status) {
       case TRUE:
         return new TypePair(null, null);
 
       case FALSE:
+        return new TypePair(this, that);
+
       case UNKNOWN:
         return new TypePair(this, that);
-    }
 
-    // switch case is exhaustive
-    throw new IllegalStateException();
+      default:
+        // Handle unexpected equality results
+        throw new IllegalStateException("Unexpected equality result: " + status);
+    }
   }
\ No newline at end of file
