diff --git a/tmp/aaf5c7a0-fcb5-4b49-b441-8f7bea5d56c2_buggy.java b/tmp/39ee1774-d8cd-4f66-af89-11a097dfa548_fixed.java
index 58a1651..cd83767 100644
--- a/tmp/aaf5c7a0-fcb5-4b49-b441-8f7bea5d56c2_buggy.java
+++ b/tmp/39ee1774-d8cd-4f66-af89-11a097dfa548_fixed.java
@@ -1,32 +1,56 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+      // Handle union type case
+      typeOfThis = resolveUnionTypeToObjectType(resolvedTypeOfThis, t);
+    } else {
+      // Handle other cases or throw error if necessary
+      // For now, just keep typeOfThis as is
+      typeOfThis = null; // or appropriate handling
+    }
 
     boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
+
+  private ObjectType resolveUnionTypeToObjectType(JSType type, ErrorReporter t) {
+    // Implement logic to resolve UnionType to an appropriate ObjectType
+    // This could be as simple as choosing the first type in the union or more complex logic
+    if (type instanceof UnionType) {
+      UnionType unionType = (UnionType) type;
+      for (JSType alternative : unionType.getAlternates()) {
+        if (alternative instanceof ObjectType) {
+          return (ObjectType) alternative;
+        }
+      }
+    }
+    t.error(JSError.make("Cannot resolve UnionType to ObjectType"));
+    return null; // or appropriate handling
+  }
\ No newline at end of file
