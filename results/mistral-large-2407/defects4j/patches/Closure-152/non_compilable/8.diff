diff --git a/tmp/c8ec98d4-8c1c-4ed9-8c7e-e9e0d073fd57_buggy.java b/tmp/a2769619-c564-4ce6-9a67-78d997b37b90_fixed.java
index 58a1651..7a790ec 100644
--- a/tmp/c8ec98d4-8c1c-4ed9-8c7e-e9e0d073fd57_buggy.java
+++ b/tmp/a2769619-c564-4ce6-9a67-78d997b37b90_fixed.java
@@ -1,32 +1,54 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      // Handle UnionType as needed, potentially converting it to a consistent type.
+      // Here, we assume that if it contains ObjectType, it can be considered safe.
+      boolean containsObjectType = false;
+      for (JSType type : unionType.getAlternates()) {
+        if (type instanceof ObjectType) {
+          containsObjectType = true;
+          break;
+        }
+      }
+      if (containsObjectType) {
+        // Choose a default ObjectType to assign or create a new ObjectType based on context.
+        typeOfThis = (ObjectType) unionType.getAlternates().iterator().next();
+      } else {
+        t.error("Expected ObjectType but got UnionType");
+      }
+    } else {
+      t.error("Expected typeOfThis to be an ObjectType");
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
