diff --git a/tmp/439415c6-d37a-4eeb-9982-1478b05d9540_buggy.java b/tmp/0c5c4cd0-9472-47bf-a4c2-3351b3bc4b15_fixed.java
index 58a1651..c3b83e0 100644
--- a/tmp/439415c6-d37a-4eeb-9982-1478b05d9540_buggy.java
+++ b/tmp/0c5c4cd0-9472-47bf-a4c2-3351b3bc4b15_fixed.java
@@ -1,32 +1,45 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    typeOfThis = safeResolve(typeOfThis, t, scope);
+    if (typeOfThis instanceof ObjectType) {
+      // Safe to cast
+      typeOfThis = (ObjectType) typeOfThis;
+    } else if (typeOfThis instanceof UnionType) {
+      // Handle UnionType case
+      t.error(
+          "Function @this type must be an object or a union of objects.\n"
+              + "Actual type: "
+              + typeOfThis.toString());
+    } else {
+      t.error("Function @this type must be an object or a union of objects.\n"
+              + "Actual type: "
+              + typeOfThis.toString());
+    }
 
     boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
