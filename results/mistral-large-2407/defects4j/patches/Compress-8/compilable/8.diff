diff --git a/tmp/24e291a9-37c3-498a-b0b9-c705247416c3_buggy.java b/tmp/b3dcfea8-335a-4445-800a-8b84b80b8d7d_fixed.java
index e087f95..82583e3 100644
--- a/tmp/24e291a9-37c3-498a-b0b9-c705247416c3_buggy.java
+++ b/tmp/b3dcfea8-335a-4445-800a-8b84b80b8d7d_fixed.java
@@ -1,53 +1,46 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes long");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
             break;
         }
 
         // Skip leading spaces
         if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
             if (currentByte == (byte) ' ') {
                 break;
             }
         }
 
         // Must have trailing NUL or space
         // May have additional NUL or space
 
         stillPadding = false;
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
 
+    int lastIndex = offset + length - 1;
+    if (buffer[lastIndex] != 0 && buffer[lastIndex] != ' ') {
+        throw new IllegalArgumentException("Trailing space or NUL is missing");
+    }
+
     return result;
 }
\ No newline at end of file
