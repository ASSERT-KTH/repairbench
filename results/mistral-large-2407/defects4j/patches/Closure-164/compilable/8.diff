diff --git a/tmp/5910aa35-1d94-4639-9bc4-ae2ad50d87e2_buggy.java b/tmp/7629bf74-f624-4e94-8b96-38835fa3e22e_fixed.java
index 9976e43..c878c5e 100644
--- a/tmp/5910aa35-1d94-4639-9bc4-ae2ad50d87e2_buggy.java
+++ b/tmp/7629bf74-f624-4e94-8b96-38835fa3e22e_fixed.java
@@ -1,76 +1,91 @@
   @Override
   public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
       return false;
     }
 
     ArrowType that = (ArrowType) other;
 
     // This is described in Draft 2 of the ES4 spec,
     // Section 3.4.7: Subtyping Function Types.
 
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
       return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
     //
     // If this.paramType[i] is required,
     // then that.paramType[i] is required.
     //
     // In theory, the "required-ness" should work in the other direction as
     // well. In other words, if we have
     //
     // function f(number, number) {}
     // function g(number) {}
     //
     // Then f *should* not be a subtype of g, and g *should* not be
     // a subtype of f. But in practice, we do not implement it this way.
     // We want to support the use case where you can pass g where f is
     // expected, and pretend that g ignores the second argument.
     // That way, you can have a single "no-op" function, and you don't have
     // to create a new no-op function for every possible type signature.
     //
     // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
     while (thisParam != null && thatParam != null) {
       JSType thisParamType = thisParam.getJSType();
       JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+      if (thisParamType != null && thatParamType != null) {
+        if (!thatParamType.isSubtype(thisParamType)) {
           return false;
         }
       }
 
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
 
       // "that" can't be a supertype, because it's missing a required argument.
       // NOTE(nicksantos): In our type system, we use {function(...?)} and
       // {function(...NoType)} to to indicate that arity should not be
       // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
+      // because now a sub-function can have required arguments that are var_args
       // in the super-function. So we special-case this.
 
       // don't advance if we have variable arguments
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
       }
       if (!thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
 
-      // both var_args indicates the end
+      // both var_args indicate the end
       if (thisIsVarArgs && thatIsVarArgs) {
         thisParam = null;
         thatParam = null;
       }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+    // Ensure that if "this" has more parameters than "that", then "that" cannot be a supertype
+    while (thisParam != null) {
+      boolean isVarArgs = thisParam.isVarArgs();
+      if (!isVarArgs) {
+        return false;
+      }
+      thisParam = thisParam.getNext();
+    }
+
+    // Ensure that "that" does not have unmatched required parameters
+    while (thatParam != null) {
+      boolean isVarArgs = thatParam.isVarArgs();
+      if (!isVarArgs) {
+        return false;
+      }
+      thatParam = thatParam.getNext();
+    }
 
     return true;
   }
\ No newline at end of file
