diff --git a/tmp/4814f9e9-5c49-4d20-bcb9-26bbc0f569db_buggy.java b/tmp/c16515d6-1832-4671-b5b5-7819fe5989e0_fixed.java
index 5f96616..6acd0cc 100644
--- a/tmp/4814f9e9-5c49-4d20-bcb9-26bbc0f569db_buggy.java
+++ b/tmp/c16515d6-1832-4671-b5b5-7819fe5989e0_fixed.java
@@ -1,20 +1,26 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    if (constraint.isRecordType() || constraint.isUnionType()) {
+      JSType recordType = constraint.isRecordType() ? constraint : constraint.getUnionMembers().stream()
+          .filter(JSType::isRecordType)
+          .findFirst()
+          .orElse(null);
+      if (recordType != null) {
+        matchRecordTypeConstraint(recordType.toObjectType());
+      }
     }
   }
\ No newline at end of file
