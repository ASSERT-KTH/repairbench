diff --git a/tmp/3ffb8347-281b-4595-b81c-3dd4d9d178b2_buggy.java b/tmp/f81e9af1-e89c-4afc-b9f6-61420905301e_fixed.java
index 9739964..4248f1f 100644
--- a/tmp/3ffb8347-281b-4595-b81c-3dd4d9d178b2_buggy.java
+++ b/tmp/f81e9af1-e89c-4afc-b9f6-61420905301e_fixed.java
@@ -1,27 +1,27 @@
   public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
       while (!indexStack.isEmpty()
           && prices[indexStack.peek()] <= prices[i])
         indexStack.pop();
 
-      // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
-        spans[i] = i + 1;
-      else
-        spans[i] = i - indexStack.peek();
+      // If the stack is empty, the span of this element is equal to its index plus one
+      // because it's greater than all previous elements.
+      // Otherwise, the span of this element is the difference between its index and the index of the previous element
+      // that is greater than the current price (the one at the top of the stack).
+      spans[i] = indexStack.isEmpty() ? i + 1 : i - indexStack.peek();
 
+      // Push the index of the current element onto the stack
       indexStack.push(i);
     }
 
     return spans;
   }
\ No newline at end of file
