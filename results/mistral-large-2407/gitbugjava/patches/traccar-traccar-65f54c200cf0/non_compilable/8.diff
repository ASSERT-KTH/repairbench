diff --git a/tmp/e1993b7f-4928-437f-9298-1c5dfb07eff8_buggy.java b/tmp/63438ff2-2e1c-4927-b824-ae247271bd2b_fixed.java
index 477325f..9638a79 100644
--- a/tmp/e1993b7f-4928-437f-9298-1c5dfb07eff8_buggy.java
+++ b/tmp/63438ff2-2e1c-4927-b824-ae247271bd2b_fixed.java
@@ -1,178 +1,219 @@
 private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {
 
     int globalMask = 0x0f;
 
     if (codec == CODEC_GH3000) {
-
-            long time = buf.readUnsignedInt() & 0x3fffffff;
+        long time = buf.readUnsignedInt();
         time += 1167609600; // 2007-01-01 00:00:00
 
         globalMask = buf.readUnsignedByte();
         if (BitUtil.check(globalMask, 0)) {
 
             position.setTime(new Date(time * 1000));
 
             int locationMask = buf.readUnsignedByte();
 
             if (BitUtil.check(locationMask, 0)) {
+                if (buf.readableBytes() >= 4 * 2) { // Ensure enough bytes for lat/lon
                     position.setLatitude(buf.readFloat());
                     position.setLongitude(buf.readFloat());
                 }
+            }
 
             if (BitUtil.check(locationMask, 1)) {
+                if (buf.readableBytes() >= 2) { // Ensure enough bytes for altitude
                     position.setAltitude(buf.readUnsignedShort());
                 }
+            }
 
             if (BitUtil.check(locationMask, 2)) {
+                if (buf.readableBytes() >= 1) { // Ensure enough bytes for course
                     position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
                 }
+            }
 
             if (BitUtil.check(locationMask, 3)) {
+                if (buf.readableBytes() >= 1) { // Ensure enough bytes for speed
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
                 }
+            }
 
             if (BitUtil.check(locationMask, 4)) {
+                if (buf.readableBytes() >= 1) { // Ensure enough bytes for satellites
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                 }
+            }
 
             if (BitUtil.check(locationMask, 5)) {
+                if (buf.readableBytes() >= 2 * 2) { // Ensure enough bytes for lac/cid
                     CellTower cellTower = CellTower.fromLacCid(
                             getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());
 
                     if (BitUtil.check(locationMask, 6)) {
+                        if (buf.readableBytes() >= 1) { // Ensure enough bytes for signal strength
                             cellTower.setSignalStrength((int) buf.readUnsignedByte());
                         }
+                    }
 
                     if (BitUtil.check(locationMask, 7)) {
+                        if (buf.readableBytes() >= 4) { // Ensure enough bytes for operator
                             cellTower.setOperator(buf.readUnsignedInt());
                         }
+                    }
 
                     position.setNetwork(new Network(cellTower));
 
                 } else {
                     if (BitUtil.check(locationMask, 6)) {
+                        if (buf.readableBytes() >= 1) {
                             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         }
+                    }
                     if (BitUtil.check(locationMask, 7)) {
+                        if (buf.readableBytes() >= 4) {
                             position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());
                         }
                     }
+                }
 
+            }
         } else {
-
             getLastLocation(position, new Date(time * 1000));
-
         }
 
     } else {
-
+        if (buf.readableBytes() >= 8) { // Ensure enough bytes for long
             position.setTime(new Date(buf.readLong()));
-
+        }
+        if (buf.readableBytes() >= 1) {
             position.set("priority", buf.readUnsignedByte());
-
+        }
+        if (buf.readableBytes() >= 4) {
             position.setLongitude(buf.readInt() / 10000000.0);
             position.setLatitude(buf.readInt() / 10000000.0);
+        }
+        if (buf.readableBytes() >= 2) {
             position.setAltitude(buf.readShort());
+        }
+        if (buf.readableBytes() >= 2) {
             position.setCourse(buf.readUnsignedShort());
-
+        }
         int satellites = buf.readUnsignedByte();
         position.set(Position.KEY_SATELLITES, satellites);
 
         position.setValid(satellites != 0);
 
+        if (buf.readableBytes() >= 2) {
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
-
+        }
+        if (buf.readableBytes() >= 1) {
             position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));
+        }
         if (codec == CODEC_16) {
             buf.readUnsignedByte(); // generation type
         }
-
+        if (buf.readableBytes() >= 1) {
             readExtByte(buf, codec, CODEC_8_EXT); // total IO data records
-
+        }
     }
 
     // Read 1 byte data
     if (BitUtil.check(globalMask, 1)) {
         int cnt = readExtByte(buf, codec, CODEC_8_EXT);
         for (int j = 0; j < cnt; j++) {
+            if (buf.readableBytes() >= 1) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
             }
         }
+    }
 
     // Read 2 byte data
     if (BitUtil.check(globalMask, 2)) {
         int cnt = readExtByte(buf, codec, CODEC_8_EXT);
         for (int j = 0; j < cnt; j++) {
+            if (buf.readableBytes() >= 2) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
             }
         }
+    }
 
     // Read 4 byte data
     if (BitUtil.check(globalMask, 3)) {
         int cnt = readExtByte(buf, codec, CODEC_8_EXT);
         for (int j = 0; j < cnt; j++) {
+            if (buf.readableBytes() >= 4) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
             }
         }
+    }
 
     // Read 8 byte data
     if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {
         int cnt = readExtByte(buf, codec, CODEC_8_EXT);
         for (int j = 0; j < cnt; j++) {
+            if (buf.readableBytes() >= 8) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);
             }
         }
+    }
 
     // Read 16 byte data
     if (extended) {
         int cnt = readExtByte(buf, codec, CODEC_8_EXT);
         for (int j = 0; j < cnt; j++) {
+            if (buf.readableBytes() >= 16) {
                 int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
                 position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));
             }
         }
+    }
 
     // Read X byte data
     if (codec == CODEC_8_EXT) {
         int cnt = buf.readUnsignedShort();
         for (int j = 0; j < cnt; j++) {
+            if (buf.readableBytes() >= 6) {
                 int id = buf.readUnsignedShort();
                 int length = buf.readUnsignedShort();
                 if (id == 256) {
-                    position.set(Position.KEY_VIN,
-                            buf.readSlice(length).toString(StandardCharsets.US_ASCII));
+                    if (buf.readableBytes() >= length) {
+                        position.set(Position.KEY_VIN, buf.readSlice(length).toString(StandardCharsets.US_ASCII));
+                    }
                 } else if (id == 281) {
-                    position.set(Position.KEY_DTCS,
-                            buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
+                    if (buf.readableBytes() >= length) {
+                        position.set(Position.KEY_DTCS, buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
+                    }
                 } else if (id == 385) {
                     ByteBuf data = buf.readSlice(length);
                     data.readUnsignedByte(); // data part
                     int index = 1;
                     while (data.isReadable()) {
                         int flags = data.readUnsignedByte();
                         if (BitUtil.from(flags, 4) > 0) {
                             position.set("beacon" + index + "Uuid", ByteBufUtil.hexDump(data.readSlice(16)));
                             position.set("beacon" + index + "Major", data.readUnsignedShort());
                             position.set("beacon" + index + "Minor", data.readUnsignedShort());
                         } else {
                             position.set("beacon" + index + "Namespace", ByteBufUtil.hexDump(data.readSlice(10)));
                             position.set("beacon" + index + "Instance", ByteBufUtil.hexDump(data.readSlice(6)));
                         }
                         position.set("beacon" + index + "Rssi", (int) data.readByte());
                         if (BitUtil.check(flags, 1)) {
                             position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.01);
                         }
                         if (BitUtil.check(flags, 2)) {
                             position.set("beacon" + index + "Temp", data.readUnsignedShort());
                         }
                         index += 1;
                     }
                 } else {
+                    if (buf.readableBytes() >= length) {
                         position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));
                     }
                 }
             }
+        }
+    }
 
     decodeNetwork(position, model);
-
 }
\ No newline at end of file
