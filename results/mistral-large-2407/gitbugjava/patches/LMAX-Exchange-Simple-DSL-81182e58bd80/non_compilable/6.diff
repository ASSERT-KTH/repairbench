diff --git a/tmp/daa038f3-7b37-47dc-8f12-2bec3ab67f19_buggy.java b/tmp/59061c7c-d870-422e-b9fe-911d948ec8d7_fixed.java
index f506479..5accdd2 100644
--- a/tmp/daa038f3-7b37-47dc-8f12-2bec3ab67f19_buggy.java
+++ b/tmp/59061c7c-d870-422e-b9fe-911d948ec8d7_fixed.java
@@ -1,64 +1,86 @@
     void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
     {
         final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
         final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
         processor.consume(groupArg.getIdentity(), arguments);
 
         final Map<String, SimpleDslArg> argsByName = new HashMap<>();
         argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
         for (SimpleDslArg dslArg : groupArg.getOtherArgs())
         {
             if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
             {
                 throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
             }
         }
 
         while (!arguments.isEmpty())
         {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL)
             {
                 arguments.pollFirst();
                 continue;
             }
 
             if (argument.name == null)
             {
                 throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
             }
 
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
             if (arg == null)
             {
                 break;
             }
 
             final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
             if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
             {
                 break;
             }
 
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
             arguments.pollFirst();
         }
 
         // TODO: this whole thing here is a bit hacky!
         final Map<String, List<String>> valuesByName = new HashMap<>();
         for (final SimpleDslArg simpleDslArg : argsByName.values())
         {
             final SimpleDslParam param = processor.collect(simpleDslArg);
             if (param.hasValue())
             {
                 valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+
+        // Adding handling for multiple comma-separated values
+        for (final SimpleDslArg simpleDslArg : argsByName.values())
+        {
+            final List<String> values = valuesByName.get(simpleDslArg.getName().toLowerCase());
+            if (values != null && simpleDslArg.isAllowMultipleValues())
+            {
+                final List<String> expandedValues = new ArrayList<>();
+                for (String value : values)
+                {
+                    if (value.contains(","))
+                    {
+                        expandedValues.addAll(Arrays.asList(value.split(",")));
+                    }
+                    else
+                    {
+                        expandedValues.add(value);
+                    }
+                }
+                valuesByName.put(simpleDslArg.getName().toLowerCase(), expandedValues);
+            }
+        }
     }
\ No newline at end of file
