diff --git a/tmp/3587a5c7-ee76-4cd1-86df-dc182f937436_buggy.java b/tmp/b6a89bd3-0e2c-4fb9-910e-2ee009e731d8_fixed.java
index 7b9216c..a4ebaaa 100644
--- a/tmp/3587a5c7-ee76-4cd1-86df-dc182f937436_buggy.java
+++ b/tmp/b6a89bd3-0e2c-4fb9-910e-2ee009e731d8_fixed.java
@@ -1,47 +1,63 @@
     private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
         position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
         int battery = buf.readUnsignedByte();
         if (battery <= 100) {
             position.set(Position.KEY_BATTERY_LEVEL, battery);
         } else if (battery == 0xAA) {
             position.set(Position.KEY_CHARGE, true);
         }
 
         position.setNetwork(new Network(CellTower.fromCidLac(
                 getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
         int product = buf.readUnsignedByte();
         int status = buf.readUnsignedShort();
         int alarm = buf.readUnsignedShort();
 
         if (product == 1 || product == 2) {
             if (BitUtil.check(alarm, 0)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
         } else if (product == 3) {
             position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
             if (BitUtil.check(alarm, 1)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
             if (BitUtil.check(alarm, 2)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
             }
             if (BitUtil.check(alarm, 3)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
             }
         }
 
         position.set(Position.KEY_STATUS, status);
 
+        while (buf.readableBytes() > 2) {
+            int id = buf.readUnsignedByte();
+            int length = buf.readUnsignedByte();
+            switch (id) {
+                case 0x02:
+                    position.setAltitude(buf.readShort());
+                    break;
+                case 0x0C:
+                    position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                    break;
+                default:
+                    buf.skipBytes(length);
+                    break;
+            }
+        }
+
         return position;
     }
