diff --git a/tmp/cb624557-447e-4e06-ae78-41979e63940d_buggy.java b/tmp/7ae35324-c022-4d15-ab06-d8a8e892d60e_fixed.java
index 2a0dceb..f684428 100644
--- a/tmp/cb624557-447e-4e06-ae78-41979e63940d_buggy.java
+++ b/tmp/7ae35324-c022-4d15-ab06-d8a8e892d60e_fixed.java
@@ -1,68 +1,77 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
         position.set(Position.KEY_VERSION_FW, values[index++]);
         index += 1; // model
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
             index += 1; // timing advance
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
 
         position.setNetwork(network);
 
         position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
         position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
         position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
         position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
         if (values[index].length() == 3) {
             index += 1; // collaborative network
         }
 
+        // Handle empty or partial date-time values
+        if (index + 1 < values.length && !values[index].isEmpty() && !values[index + 1].isEmpty()) {
             DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
             dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+            try {
                 position.setTime(dateFormat.parse(values[index++] + values[index++]));
+            } catch (ParseException e) {
+                LoggerFactory.getLogger(getClass()).warn("Failed to parse date", e);
+            }
+        } else {
+            index += 2; // Skip date-time values if they are empty or not enough values are provided
+        }
 
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
 
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
 
         position.setValid(values[index++].equals("1"));
 
         return position;
     }
\ No newline at end of file
