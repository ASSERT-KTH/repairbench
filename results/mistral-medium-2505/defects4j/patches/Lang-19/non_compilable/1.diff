diff --git a/tmp/5aae4506-72d1-4c26-9e9f-6ed70a3c85d4_buggy.java b/tmp/0262faa8-e3f1-40bf-94ab-1fcf7bc226e7_fixed.java
index 72a422c..8f17946 100644
--- a/tmp/5aae4506-72d1-4c26-9e9f-6ed70a3c85d4_buggy.java
+++ b/tmp/0262faa8-e3f1-40bf-94ab-1fcf7bc226e7_fixed.java
@@ -1,51 +1,50 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if (index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < seqEnd) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
             }
 
             int end = start;
             // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
-            int entityValue;
+            if (end > start) { // Make sure we have at least one character to parse
                 try {
                     if (isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
 
                     if (entityValue > 0xFFFF) {
                         char[] chrs = Character.toChars(entityValue);
                         out.write(chrs[0]);
                         out.write(chrs[1]);
                     } else {
                         out.write(entityValue);
                     }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                    return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0);
+                } catch (NumberFormatException nfe) {
+                    System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
+                    return 0;
+                }
+            }
+        }
     }
     return 0;
 }
\ No newline at end of file
