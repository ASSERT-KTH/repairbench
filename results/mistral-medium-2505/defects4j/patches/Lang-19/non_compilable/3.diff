diff --git a/tmp/7b6a6027-b249-4cd7-83b7-9b66a5d3c0f2_buggy.java b/tmp/214265eb-e127-40d4-af3f-8fb7eaa7c649_fixed.java
index 72a422c..0f3b4c0 100644
--- a/tmp/7b6a6027-b249-4cd7-83b7-9b66a5d3c0f2_buggy.java
+++ b/tmp/214265eb-e127-40d4-af3f-8fb7eaa7c649_fixed.java
@@ -1,51 +1,50 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        if(index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if(start < seqEnd) {
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
                 }
 
                 int end = start;
                 // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+                while(end < seqEnd && input.charAt(end) != ';') {
                     end++;
                 }
 
-            int entityValue;
+                // Check if we found a valid end (either ; or end of string)
+                if(end > start) {
                     try {
                         if(isHex) {
                             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                         } else {
                             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                         }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
 
                         if(entityValue > 0xFFFF) {
                             char[] chrs = Character.toChars(entityValue);
                             out.write(chrs[0]);
                             out.write(chrs[1]);
                         } else {
                             out.write(entityValue);
                         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                        return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0);
+                    } catch(NumberFormatException nfe) {
+                        System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                    }
+                }
+            }
         }
         return 0;
     }
\ No newline at end of file
