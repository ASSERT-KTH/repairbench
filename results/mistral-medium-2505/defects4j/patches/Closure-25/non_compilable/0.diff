diff --git a/tmp/f86fd391-73d2-4dbe-8deb-6a39bf1f2f2b_buggy.java b/tmp/024a8782-ce9e-496d-8c0d-be110c8edf07_fixed.java
index b98f0a7..45b7185 100644
--- a/tmp/f86fd391-73d2-4dbe-8deb-6a39bf1f2f2b_buggy.java
+++ b/tmp/024a8782-ce9e-496d-8c0d-be110c8edf07_fixed.java
@@ -1,29 +1,53 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Infer the parameter types from the arguments
+                if (type != null && type.isObject()) {
+                    ObjectType objType = type.toMaybeObjectType();
+                    if (objType != null) {
+                        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+                            JSType argType = arg.getJSType();
+                            if (argType != null) {
+                                // Update the parameter types based on the argument types
+                                for (String prop : objType.getOwnPropertyNames()) {
+                                    JSType propType = objType.getPropertyType(prop);
+                                    if (propType != null && propType.isUnionType()) {
+                                        UnionType unionType = propType.toMaybeUnionType();
+                                        if (unionType != null) {
+                                            unionType = unionType.restrictByNotNullOrUndefined();
+                                            if (unionType.isSubtype(argType)) {
+                                                objType = objType.withPropertyType(prop, argType);
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                        type = objType;
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
