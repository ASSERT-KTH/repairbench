diff --git a/tmp/6e895834-5924-4693-9450-48a605028945_buggy.java b/tmp/398e8810-7586-44d8-8d21-f87495ce2c4f_fixed.java
index b98f0a7..940ae37 100644
--- a/tmp/6e895834-5924-4693-9450-48a605028945_buggy.java
+++ b/tmp/398e8810-7586-44d8-8d21-f87495ce2c4f_fixed.java
@@ -1,29 +1,50 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Apply backwards inference for constructor parameters
+          if (type != null && type.isRecordType()) {
+            RecordType recordType = type.toMaybeRecordType();
+            if (recordType != null) {
+              Node arg = constructor.getNext();
+              if (arg != null) {
+                JSType argType = arg.getJSType();
+                if (argType != null) {
+                  argType = argType.restrictByNotNullOrUndefined();
+                  if (argType.isUnknownType() || argType.isAllType()) {
+                    arg.setJSType(recordType);
+                  } else if (argType.isRecordType()) {
+                    RecordType argRecord = argType.toMaybeRecordType();
+                    if (argRecord != null) {
+                      argRecord = argRecord.meet(recordType);
+                      arg.setJSType(argRecord);
+                    }
+                  }
+                }
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
