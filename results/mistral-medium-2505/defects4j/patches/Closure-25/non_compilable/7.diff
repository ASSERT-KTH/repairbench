diff --git a/tmp/db17863d-1d8b-40c6-bfdd-96f1d3ab8edb_buggy.java b/tmp/f28ee18b-6ea4-4ac2-b600-8b68ff040411_fixed.java
index b98f0a7..d2863fa 100644
--- a/tmp/db17863d-1d8b-40c6-bfdd-96f1d3ab8edb_buggy.java
+++ b/tmp/f28ee18b-6ea4-4ac2-b600-8b68ff040411_fixed.java
@@ -1,29 +1,50 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          if (type != null) {
+            // Apply backwards inference for constructor arguments
+            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+              if (arg.getJSType() == null) {
+                // If argument type is not yet set, infer it from constructor parameter
+                FunctionType fnType = constructorType.toMaybeFunctionType();
+                if (fnType != null) {
+                  int paramCount = fnType.getParameters().size();
+                  int argIndex = 0;
+                  for (Node currentArg = constructor.getNext();
+                       currentArg != null && argIndex < paramCount;
+                       currentArg = currentArg.getNext(), argIndex++) {
+                    JSType paramType = fnType.getParameters().get(argIndex);
+                    if (paramType != null) {
+                      currentArg.setJSType(paramType);
+                    }
+                  }
+                  break; // Only need to do this once
+                }
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
