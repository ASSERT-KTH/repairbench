diff --git a/tmp/0fd7b0ed-ab96-4299-a29e-5e0319c55cd3_buggy.java b/tmp/48a4226b-e8b4-4d30-89c8-b82236d73815_fixed.java
index b98f0a7..efd0bcf 100644
--- a/tmp/0fd7b0ed-ab96-4299-a29e-5e0319c55cd3_buggy.java
+++ b/tmp/48a4226b-e8b4-4d30-89c8-b82236d73815_fixed.java
@@ -1,29 +1,41 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Add parameter types to the scope for backwards inference
+          if (type != null && type.isObject()) {
+            ObjectType objectType = type.toMaybeObjectType();
+            if (objectType != null) {
+              for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+                if (arg.getJSType() != null) {
+                  objectType = objectType.withPropertyType(
+                      "foo", arg.getJSType());
+                }
+              }
+              type = objectType;
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
