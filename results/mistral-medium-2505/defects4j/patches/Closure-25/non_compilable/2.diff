diff --git a/tmp/53cdcecd-cee7-49f3-a7f2-2ab661fdbca9_buggy.java b/tmp/8b895407-4538-43c2-b4e0-d0c08152730e_fixed.java
index b98f0a7..227a6f6 100644
--- a/tmp/53cdcecd-cee7-49f3-a7f2-2ab661fdbca9_buggy.java
+++ b/tmp/8b895407-4538-43c2-b4e0-d0c08152730e_fixed.java
@@ -1,29 +1,40 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Add backward inference for constructor parameters
+          if (ct.getParameters() != null && n.hasChildren()) {
+            Node arg = constructor.getNext();
+            for (int i = 0; i < ct.getParameters().size() && arg != null; i++) {
+              JSType paramType = ct.getParameters().get(i);
+              if (arg.getJSType() != null) {
+                // Update the argument type based on the parameter type
+                arg.setJSType(arg.getJSType().restrictByType(paramType));
+              }
+              arg = arg.getNext();
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
