diff --git a/tmp/c6de9120-f353-4d32-8a27-93640b5d4186_buggy.java b/tmp/c672ec62-d5ea-40bf-a0c1-a0f1c9372f46_fixed.java
index e69de29..b964937 100644
--- a/tmp/c6de9120-f353-4d32-8a27-93640b5d4186_buggy.java
+++ b/tmp/c672ec62-d5ea-40bf-a0c1-a0f1c9372f46_fixed.java
@@ -0,0 +1,36 @@
+protected JavaType _fromClass(Class<?> cls, TypeBindings bindings)
+{
+    // First try to find from cache
+    JavaType t = _typeCache.get(cls, bindings);
+    if (t != null) {
+        return t;
+    }
+
+    // If not found, need to construct
+    if (cls.isPrimitive()) {
+        return _fromPrimitive(cls, bindings);
+    }
+    if (cls.isArray()) {
+        return _fromArray(cls, bindings);
+    }
+
+    // [databind#1647] Ensure we handle recursive references properly
+    if (bindings == null) {
+        bindings = TypeBindings.emptyBindings();
+    }
+
+    // Construct the type and cache it before resolving superclass
+    t = new SimpleType(cls, bindings, null, null);
+    _typeCache.add(t);
+
+    // Now resolve superclass and interfaces
+    Class<?> superClass = cls.getSuperclass();
+    if (superClass != null && superClass != Object.class) {
+        JavaType superType = _fromClass(superClass, bindings);
+        if (t instanceof SimpleType) {
+            ((SimpleType) t)._superClass = superType;
+        }
+    }
+
+    return t;
+}
\ No newline at end of file
