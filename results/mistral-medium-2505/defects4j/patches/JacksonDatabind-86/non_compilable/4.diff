diff --git a/tmp/1f056690-95c1-471b-90de-77ded205d38a_buggy.java b/tmp/7c22bcbc-0578-419e-9603-dc8b9b93faeb_fixed.java
index e69de29..19c7f74 100644
--- a/tmp/1f056690-95c1-471b-90de-77ded205d38a_buggy.java
+++ b/tmp/7c22bcbc-0578-419e-9603-dc8b9b93faeb_fixed.java
@@ -0,0 +1,45 @@
+protected JavaType _fromClass(Class<?> rawType, TypeBindings bindings)
+{
+    // First: see if we have a cached type
+    JavaType result = _cachedTypes.get(rawType);
+    if (result != null) {
+        return result;
+    }
+
+    // If not, need to construct it
+    if (rawType.isPrimitive()) {
+        result = _constructPrimitiveType(rawType);
+    } else if (rawType.isArray()) {
+        result = _constructArrayType(rawType);
+    } else {
+        // Need to handle recursive types properly
+        if (_recursiveTypes == null) {
+            _recursiveTypes = new HashMap<>();
+        }
+        if (_recursiveTypes.containsKey(rawType)) {
+            return _recursiveTypes.get(rawType);
+        }
+
+        // Create placeholder for recursive type
+        ResolvedRecursiveType recursiveType = new ResolvedRecursiveType(rawType, null, null, null);
+        _recursiveTypes.put(rawType, recursiveType);
+
+        try {
+            result = _constructSimpleType(rawType, bindings);
+        } finally {
+            _recursiveTypes.remove(rawType);
+        }
+
+        // Ensure superclass is properly resolved
+        if (result instanceof ResolvedRecursiveType) {
+            ResolvedRecursiveType rrType = (ResolvedRecursiveType) result;
+            rrType.setSuperClass(_fromClass(rawType.getSuperclass(), bindings));
+        }
+    }
+
+    // Cache the result
+    if (result != null) {
+        _cachedTypes.put(rawType, result);
+    }
+    return result;
+}
\ No newline at end of file
