diff --git a/tmp/068d221b-2721-4036-99ff-02f8bd3138c3_buggy.java b/tmp/a4406199-1999-4b2c-aadc-c5cde63e6593_fixed.java
index e69de29..3d60e84 100644
--- a/tmp/068d221b-2721-4036-99ff-02f8bd3138c3_buggy.java
+++ b/tmp/a4406199-1999-4b2c-aadc-c5cde63e6593_fixed.java
@@ -0,0 +1,51 @@
+protected JavaType _fromClass(Class<?> cls, TypeBindings bindings)
+{
+    // First: have we already seen this type? If yes, return cached instance
+    JavaType result = _typeCache.get(cls, bindings);
+    if (result != null) {
+        return result;
+    }
+
+    // If not, need to construct it
+    JavaType superClass = null;
+    JavaType[] superInterfaces = null;
+    Type[] actualTypeArgs = null;
+
+    // First: figure out superclass and interfaces
+    Class<?> current = cls;
+    while (current != null && current != Object.class) {
+        Class<?> superCl = current.getSuperclass();
+        if (superCl != null && superCl != Object.class) {
+            Type genericSuper = current.getGenericSuperclass();
+            if (genericSuper instanceof ParameterizedType) {
+                ParameterizedType pt = (ParameterizedType) genericSuper;
+                actualTypeArgs = pt.getActualTypeArguments();
+            }
+            superClass = _fromClass(superCl, bindings);
+        }
+        current = superCl;
+    }
+
+    // Then interfaces
+    Class<?>[] interfaces = cls.getInterfaces();
+    if (interfaces.length > 0) {
+        superInterfaces = new JavaType[interfaces.length];
+        for (int i = 0; i < interfaces.length; ++i) {
+            superInterfaces[i] = _fromClass(interfaces[i], bindings);
+        }
+    }
+
+    // And then construct the type
+    result = new SimpleType(cls, bindings, superClass, superInterfaces, actualTypeArgs);
+
+    // Important: cache before resolving, to prevent infinite recursion
+    _typeCache.add(result);
+
+    // Finally, resolve if necessary
+    if (result.containsUnresolvedType()) {
+        result = result.resolve(_typeCache);
+        _typeCache.add(result);
+    }
+
+    return result;
+}
\ No newline at end of file
