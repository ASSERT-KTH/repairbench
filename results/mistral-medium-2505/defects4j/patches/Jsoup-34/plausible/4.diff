diff --git a/tmp/54a72467-537a-4a78-8fda-5fb1bde5e67a_buggy.java b/tmp/571f411a-5cf3-4122-a3a9-d06abc500bfa_fixed.java
index 21f64c6..573baf9 100644
--- a/tmp/54a72467-537a-4a78-8fda-5fb1bde5e67a_buggy.java
+++ b/tmp/571f411a-5cf3-4122-a3a9-d06abc500bfa_fixed.java
@@ -1,23 +1,41 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
+        if (seq.length() == 0) {
+            return 0;
+        }
+
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            if (startChar != input[offset]) {
+                while (++offset < length && startChar != input[offset]) {
+                    // empty loop body
+                }
+            }
+
+            if (offset >= length) {
+                return -1;
+            }
+
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (last > length) {
+                continue;
+            }
+
+            for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) {
+                // empty loop body
+            }
+
+            if (i == last) { // found full sequence
                 return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
