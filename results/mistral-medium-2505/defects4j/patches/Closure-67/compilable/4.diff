diff --git a/tmp/e182493a-43bd-4338-a9f5-2b16cd3dfd42_buggy.java b/tmp/29691926-fdbf-4f71-8ea2-9014f0e545a1_fixed.java
index 939f49b..c6b85a1 100644
--- a/tmp/e182493a-43bd-4338-a9f5-2b16cd3dfd42_buggy.java
+++ b/tmp/29691926-fdbf-4f71-8ea2-9014f0e545a1_fixed.java
@@ -1,21 +1,33 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+          && n.getType() == Token.GETPROP) {
         // We want to exclude the assignment itself from the usage list
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
           Node child = n.getFirstChild().getFirstChild().getNext();
 
           if (child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
+        } else {
+          // Handle direct property assignments like e.prototype['alias1'] = ...
+          Node parent = n.getParent();
+          if (parent != null && parent.getType() == Token.ASSIGN) {
+            Node rhs = parent.getLastChild();
+            if (rhs != null && rhs.getType() == Token.GETPROP) {
+              Node rhsChild = rhs.getFirstChild().getFirstChild().getNext();
+              if (rhsChild != null && rhsChild.getType() == Token.STRING &&
+                  rhsChild.getString().equals("prototype")) {
+                return true;
+              }
+            }
+          }
         }
       }
 
       return false;
     }
\ No newline at end of file
