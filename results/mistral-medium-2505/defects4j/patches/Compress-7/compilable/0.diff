diff --git a/tmp/feac250c-99cb-488c-9d80-fc71290fdf7f_buggy.java b/tmp/e4c8f862-08cc-4189-a804-067511ff6c6a_fixed.java
index d6662c7..8c0ebc5 100644
--- a/tmp/feac250c-99cb-488c-9d80-fc71290fdf7f_buggy.java
+++ b/tmp/e4c8f862-08cc-4189-a804-067511ff6c6a_fixed.java
@@ -1,23 +1,31 @@
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
         int end = offset + length;
+        int nulPos = offset;
 
-        for (int i = offset; i < end; ++i) {
-            if (buffer[i] == 0) {
-                break;
-            }
-            result.append((char) buffer[i]);
+        // Find the first NUL byte or end of buffer
+        while (nulPos < end && buffer[nulPos] != 0) {
+            nulPos++;
         }
 
-        return result.toString();
+        // Create a new byte array with just the name bytes
+        byte[] nameBytes = new byte[nulPos - offset];
+        System.arraycopy(buffer, offset, nameBytes, 0, nulPos - offset);
+
+        // Convert to String using ISO-8859-1 encoding
+        try {
+            return new String(nameBytes, "ISO-8859-1");
+        } catch (java.io.UnsupportedEncodingException e) {
+            // Fallback to platform default if ISO-8859-1 isn't available
+            return new String(nameBytes);
+        }
     }
\ No newline at end of file
