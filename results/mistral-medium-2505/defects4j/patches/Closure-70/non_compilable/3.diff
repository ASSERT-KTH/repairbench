diff --git a/tmp/63162c8c-b829-40c2-a389-5ae2e95081ef_buggy.java b/tmp/d22c264b-5aff-43f9-aa0d-b3443a7dde38_fixed.java
index 1530b34..3e455df 100644
--- a/tmp/63162c8c-b829-40c2-a389-5ae2e95081ef_buggy.java
+++ b/tmp/d22c264b-5aff-43f9-aa0d-b3443a7dde38_fixed.java
@@ -1,23 +1,55 @@
     /**
      * Declares all of a function's arguments.
      */
     private void declareArguments(Node functionNode) {
       Node astParameters = functionNode.getFirstChild().getNext();
       Node body = astParameters.getNext();
       FunctionType functionType = (FunctionType) functionNode.getJSType();
       if (functionType != null) {
         Node jsDocParameters = functionType.getParametersNode();
         if (jsDocParameters != null) {
           Node jsDocParameter = jsDocParameters.getFirstChild();
           for (Node astParameter : astParameters.children()) {
+            String paramName = astParameter.getString();
             if (jsDocParameter != null) {
-              defineSlot(astParameter, functionNode,
-                  jsDocParameter.getJSType(), true);
+              JSType paramType = jsDocParameter.getJSType();
+              defineSlot(astParameter, functionNode, paramType, true);
+              // Check for duplicate declarations in the function body
+              if (body != null) {
+                checkDuplicateDeclarations(body, paramName, paramType);
+              }
               jsDocParameter = jsDocParameter.getNext();
             } else {
               defineSlot(astParameter, functionNode, null, true);
             }
           }
         }
       }
     } // end declareArguments
+
+    /**
+     * Helper method to check for duplicate variable declarations in the function body.
+     */
+    private void checkDuplicateDeclarations(Node body, String paramName, JSType paramType) {
+      for (Node child : body.children()) {
+        if (child.isVar()) {
+          for (Node varNode : child.children()) {
+            if (varNode.getString().equals(paramName)) {
+              JSType varType = varNode.getJSType();
+              if (varType != null && !varType.isEquivalentTo(paramType)) {
+                compiler.report(
+                    JSError.make(
+                        varNode,
+                        TypeCheck.DUP_VAR_DECLARATION,
+                        "variable {0} redefined with type {1}, original definition" +
+                        " at {2} with type {3}",
+                        paramName,
+                        varType.toString(),
+                        paramName,
+                        paramType.toString()));
+              }
+            }
+          }
+        }
+      }
+    }
\ No newline at end of file
