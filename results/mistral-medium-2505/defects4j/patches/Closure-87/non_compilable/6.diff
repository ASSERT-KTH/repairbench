diff --git a/tmp/70044833-1ef6-48a0-9bae-353d7379c28f_buggy.java b/tmp/e43428d9-4dac-4fcb-8cdf-46f1c253ffde_fixed.java
index 19fd63e..9603025 100644
--- a/tmp/70044833-1ef6-48a0-9bae-353d7379c28f_buggy.java
+++ b/tmp/e43428d9-4dac-4fcb-8cdf-46f1c253ffde_fixed.java
@@ -1,24 +1,36 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          // Don't fold if it's a call that might be an event handler
+          if (maybeExpr.isCall() &&
+              maybeExpr.getFirstChild().getType() == Token.GETPROP) {
+            String propName = maybeExpr.getFirstChild().getLastChild().getString();
+            if (propName != null &&
+                (propName.equals("onchange") ||
+                 propName.equals("onload") ||
+                 propName.equals("onclick") ||
+                 propName.equals("onerror"))) {
+              return false;
+            }
+          }
+          return true;
+        }
       }
     }
-
     return false;
   }
\ No newline at end of file
