diff --git a/tmp/9aaf43d6-a976-4b6a-96d5-736c890d2f5a_buggy.java b/tmp/56b3c0cd-fd5d-4409-a581-b4da2a69dec7_fixed.java
index 5abdeb5..d79daf6 100644
--- a/tmp/9aaf43d6-a976-4b6a-96d5-736c890d2f5a_buggy.java
+++ b/tmp/56b3c0cd-fd5d-4409-a581-b4da2a69dec7_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
               // We make a special exception when the entire cfgNode is a chain
               // of assignments, since in that case the assignment statements
               // will happen after the inlining of the right hand side.
               // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
               //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+              !(parent.isAssign() && (parent.getFirstChild() == n))) {
             // Don't count lhs of top-level assignment chain
+            // Also don't count if this is part of a conditional expression
+            if (!(parent.isHook() && parent.getFirstChild() == n)) {
               numUsesWithinCfgNode++;
             }
           }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
