diff --git a/tmp/a2a2a6cc-1b41-44df-aa8b-bab3187d7e2a_buggy.java b/tmp/5ef59eae-ef0e-438b-a81d-995bb85d8bc1_fixed.java
index d6a560a..2bd9dea 100644
--- a/tmp/a2a2a6cc-1b41-44df-aa8b-bab3187d7e2a_buggy.java
+++ b/tmp/5ef59eae-ef0e-438b-a81d-995bb85d8bc1_fixed.java
@@ -1,33 +1,34 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // First check for cycles before doing any resolution
+  if (detectImplicitPrototypeCycle()) {
+    handleTypeCycle(t);
+    return this;
+  }
+
+  // Try to resolve via registry first
   boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
+  // Then try to resolve via properties
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
   return registry.isLastGeneration() ?
       getReferencedType() : this;
 }
\ No newline at end of file
