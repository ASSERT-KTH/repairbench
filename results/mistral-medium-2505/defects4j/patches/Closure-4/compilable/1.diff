diff --git a/tmp/237fcd3d-3523-4d24-9b7a-8899275d28ea_buggy.java b/tmp/1adc0c56-9e99-42f1-9dcf-c0e0fa9d3cc8_fixed.java
index d6a560a..20e41a9 100644
--- a/tmp/237fcd3d-3523-4d24-9b7a-8899275d28ea_buggy.java
+++ b/tmp/1adc0c56-9e99-42f1-9dcf-c0e0fa9d3cc8_fixed.java
@@ -1,33 +1,32 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // First check for cycles before doing any resolution
+  if (detectImplicitPrototypeCycle()) {
+    handleTypeCycle(t);
+    return registry.isLastGeneration() ? getReferencedType() : this;
+  }
+
+  // Try resolving via registry first
   boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
+  // Then try resolving via properties
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
