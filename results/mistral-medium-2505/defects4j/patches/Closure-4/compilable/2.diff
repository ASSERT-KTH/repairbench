diff --git a/tmp/5b2ac9c6-e182-457d-a296-de3cf7f7c4bd_buggy.java b/tmp/b06a2959-0c60-4614-b8dd-04b8f87eb637_fixed.java
index d6a560a..a137a78 100644
--- a/tmp/5b2ac9c6-e182-457d-a296-de3cf7f7c4bd_buggy.java
+++ b/tmp/b06a2959-0c60-4614-b8dd-04b8f87eb637_fixed.java
@@ -1,33 +1,36 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // First check for cycles before attempting resolution
+  if (detectImplicitPrototypeCycle()) {
+    handleTypeCycle(t);
+    return registry.isLastGeneration() ?
+        getReferencedType() : this;
+  }
+
+  // Try resolving via registry first
   boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
+  // Then try resolving via properties
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return registry.isLastGeneration() ?
+        getReferencedType() : this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
   return registry.isLastGeneration() ?
       getReferencedType() : this;
 }
\ No newline at end of file
