diff --git a/tmp/c2b473e7-039e-4846-b1e5-e75a39a38f16_buggy.java b/tmp/ceb8e6b5-0c52-4049-8fdb-79fa2c616566_fixed.java
index d6a560a..b25f114 100644
--- a/tmp/c2b473e7-039e-4846-b1e5-e75a39a38f16_buggy.java
+++ b/tmp/ceb8e6b5-0c52-4049-8fdb-79fa2c616566_fixed.java
@@ -1,33 +1,34 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for cycles before attempting resolution
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      return registry.isLastGeneration() ? getReferencedType() : this;
+    }
+
+    // First try resolving via registry
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // Then try resolving via properties
     resolveViaProperties(t, enclosing);
+
+    // Check for cycles again after resolution attempts
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
