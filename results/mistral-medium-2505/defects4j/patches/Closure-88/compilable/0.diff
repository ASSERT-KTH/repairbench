diff --git a/tmp/ac82228e-772f-43fc-84c1-586800b7a157_buggy.java b/tmp/a313209e-99a5-4fc0-ac01-d64ec9e257e2_fixed.java
index 9353941..f2c3e5f 100644
--- a/tmp/ac82228e-772f-43fc-84c1-586800b7a157_buggy.java
+++ b/tmp/a313209e-99a5-4fc0-ac01-d64ec9e257e2_fixed.java
@@ -1,30 +1,37 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
+    // We need to track if we've found a KILL or READ in any child
+    VariableLiveness result = VariableLiveness.MAYBE_LIVE;
+
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
+        if (state == VariableLiveness.KILL) {
+          // If we find a KILL, we can return immediately since it takes precedence
           return state;
+        } else if (state == VariableLiveness.READ && result != VariableLiveness.KILL) {
+          // Track the first READ we find, but keep looking for KILLs
+          result = state;
         }
       }
     }
-    return VariableLiveness.MAYBE_LIVE;
+    return result;
   }
\ No newline at end of file
