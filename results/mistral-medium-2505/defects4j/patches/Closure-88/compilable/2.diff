diff --git a/tmp/676973c6-f383-4fc9-99ca-e4d1602c6fcf_buggy.java b/tmp/82cbc5df-1d21-4541-8be0-19b54bf1c6ab_fixed.java
index 9353941..af633c8 100644
--- a/tmp/676973c6-f383-4fc9-99ca-e4d1602c6fcf_buggy.java
+++ b/tmp/82cbc5df-1d21-4541-8be0-19b54bf1c6ab_fixed.java
@@ -1,30 +1,34 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
+    VariableLiveness result = VariableLiveness.MAYBE_LIVE;
+
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+        if (state == VariableLiveness.KILL) {
+          return state; // KILL takes precedence over READ
+        } else if (state == VariableLiveness.READ && result == VariableLiveness.MAYBE_LIVE) {
+          result = state; // First READ is recorded but we keep searching
         }
       }
     }
-    return VariableLiveness.MAYBE_LIVE;
+    return result;
   }
\ No newline at end of file
