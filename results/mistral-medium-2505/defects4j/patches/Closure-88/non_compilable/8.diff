diff --git a/tmp/61931bba-f5f6-4a2b-8b57-200b563214f8_buggy.java b/tmp/57d82767-f170-4646-a2fc-7c7a9cacb47d_fixed.java
index 9353941..d396f1c 100644
--- a/tmp/61931bba-f5f6-4a2b-8b57-200b563214f8_buggy.java
+++ b/tmp/57d82767-f170-4646-a2fc-7c7a9cacb47d_fixed.java
@@ -1,30 +1,44 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
+    // First check if this node is the variable we're looking for
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // Check children first (depth-first)
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
+          // If we found a definite READ or KILL in a child, return it
           return state;
         }
       }
     }
+
+    // If we didn't find the variable in any children, check if this node is an assignment
+    // that might contain the variable in its RHS
+    if (n.isAssign()) {
+      Node lhs = n.getFirstChild();
+      if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {
+        // This is an assignment to our variable, but we need to check the RHS first
+        VariableLiveness rhsState = isVariableReadBeforeKill(n.getSecondChild(), variable);
+        if (rhsState == VariableLiveness.READ) {
+          return VariableLiveness.READ;
+        }
+        return VariableLiveness.KILL;
+      }
+    }
+
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
