diff --git a/tmp/883e9639-7e78-46aa-88c3-34df53c3e6d7_buggy.java b/tmp/e11fee9c-16e4-4ccb-b77a-ebd72fc6d509_fixed.java
index 25ca093..fffc2d2 100644
--- a/tmp/883e9639-7e78-46aa-88c3-34df53c3e6d7_buggy.java
+++ b/tmp/e11fee9c-16e4-4ccb-b77a-ebd72fc6d509_fixed.java
@@ -1,52 +1,78 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String detectedCharset = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM first
+    byteData.mark();
+    CharsetDecoder decoder = null;
+    try {
+        decoder = CharsetUtil.detectCharsetFromBom(byteData);
+    } catch (IOException e) {
+        // No BOM found, continue with other detection methods
+    }
+
+    if (decoder != null) {
+        // BOM detected, use its charset
+        byteData.reset();
+        try {
+            docData = decoder.decode(byteData).toString();
+            detectedCharset = decoder.charset().name();
+        } catch (CharacterCodingException e) {
+            // Fall back to default if BOM detection fails
+            byteData.reset();
+            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            detectedCharset = defaultCharset;
+        }
+    } else {
+        // No BOM found, proceed with other detection methods
+        byteData.reset();
 
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+                    detectedCharset = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
+        } else { // specified by content type header
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
+            detectedCharset = charsetName;
         }
+    }
+
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
         byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
+        detectedCharset = defaultCharset;
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(detectedCharset != null ? detectedCharset : charsetName);
     }
     return doc;
 }
\ No newline at end of file
