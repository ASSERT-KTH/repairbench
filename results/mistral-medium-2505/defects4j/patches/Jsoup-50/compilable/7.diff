diff --git a/tmp/e48b0b4c-e87d-4378-9322-6d4474ccda11_buggy.java b/tmp/7f7d0f0e-efaa-4404-ae5b-d6f1299e5b12_fixed.java
index 25ca093..c9e5222 100644
--- a/tmp/e48b0b4c-e87d-4378-9322-6d4474ccda11_buggy.java
+++ b/tmp/7f7d0f0e-efaa-4404-ae5b-d6f1299e5b12_fixed.java
@@ -1,52 +1,114 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        String foundCharset = null;
 
-        // look for BOM - overrides any other header or input
+        // Check for BOM first
+        byteData.mark();
+        String bomCharset = detectCharsetFromBom(byteData);
+        if (bomCharset != null) {
+            charsetName = bomCharset;
+        } else {
+            byteData.reset();
+        }
 
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
+
+    private static String detectCharsetFromBom(ByteBuffer byteData) {
+        byteData.mark();
+        try {
+            // Check for UTF-8 BOM
+            if (byteData.remaining() >= 3) {
+                byte b1 = byteData.get();
+                byte b2 = byteData.get();
+                byte b3 = byteData.get();
+                if (b1 == (byte) 0xEF && b2 == (byte) 0xBB && b3 == (byte) 0xBF) {
+                    return "UTF-8";
+                }
+                byteData.reset();
+            }
+
+            // Check for UTF-16 BE BOM
+            if (byteData.remaining() >= 2) {
+                byte b1 = byteData.get();
+                byte b2 = byteData.get();
+                if (b1 == (byte) 0xFE && b2 == (byte) 0xFF) {
+                    return "UTF-16BE";
+                }
+                byteData.reset();
+            }
+
+            // Check for UTF-16 LE BOM
+            if (byteData.remaining() >= 2) {
+                byte b1 = byteData.get();
+                byte b2 = byteData.get();
+                if (b1 == (byte) 0xFF && b2 == (byte) 0xFE) {
+                    return "UTF-16LE";
+                }
+                byteData.reset();
+            }
+
+            // Check for UTF-32 BE BOM
+            if (byteData.remaining() >= 4) {
+                byte b1 = byteData.get();
+                byte b2 = byteData.get();
+                byte b3 = byteData.get();
+                byte b4 = byteData.get();
+                if (b1 == (byte) 0x00 && b2 == (byte) 0x00 && b3 == (byte) 0xFE && b4 == (byte) 0xFF) {
+                    return "UTF-32BE";
+                }
+                byteData.reset();
+            }
+
+            // Check for UTF-32 LE BOM
+            if (byteData.remaining() >= 4) {
+                byte b1 = byteData.get();
+                byte b2 = byteData.get();
+                byte b3 = byteData.get();
+                byte b4 = byteData.get();
+                if (b1 == (byte) 0xFF && b2 == (byte) 0xFE && b3 == (byte) 0x00 && b4 == (byte) 0x00) {
+                    return "UTF-32LE";
+                }
+                byteData.reset();
+            }
+        } catch (Exception e) {
+            byteData.reset();
+        }
+        return null;
+    }
\ No newline at end of file
