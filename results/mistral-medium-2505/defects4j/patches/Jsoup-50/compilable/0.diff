diff --git a/tmp/76c90fa3-ea20-44ad-8e6b-d61a6e40ddbd_buggy.java b/tmp/f7978c10-dca5-425e-8f61-4a7f4e2e6b52_fixed.java
index 25ca093..285b2ee 100644
--- a/tmp/76c90fa3-ea20-44ad-8e6b-d61a6e40ddbd_buggy.java
+++ b/tmp/f7978c10-dca5-425e-8f61-4a7f4e2e6b52_fixed.java
@@ -1,52 +1,95 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        Charset charset = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // Check for BOM first
+        byteData.mark();
+        String bomCharset = detectCharsetFromBom(byteData);
+        if (bomCharset != null) {
+            charsetName = bomCharset;
+            charset = Charset.forName(charsetName);
+            byteData.reset();
+        } else {
+            byteData.reset();
+            // If no BOM, use the provided charset or try to detect from content
+            if (charsetName == null) {
+                // Try to detect charset from content
                 docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 doc = parser.parseInput(docData, baseUri);
                 Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+                if (meta != null) {
                     String foundCharset = null;
                     if (meta.hasAttr("http-equiv")) {
                         foundCharset = getCharsetFromContentType(meta.attr("content"));
                     }
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                    if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                         foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                         charsetName = foundCharset;
                         byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
                         doc = null;
                     }
                 }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
             }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
+
+            if (doc == null) {
+                if (charsetName == null) {
                     charsetName = defaultCharset;
-            doc = null;
                 }
+                Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+                charset = Charset.forName(charsetName);
+                byteData.rewind();
+            }
+        }
+
+        // Now parse with the determined charset
         if (doc == null) {
+            docData = charset.decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
+
         return doc;
     }
+
+    private static String detectCharsetFromBom(ByteBuffer byteData) {
+        if (byteData.remaining() >= 2) {
+            byte first = byteData.get();
+            byte second = byteData.get();
+
+            if (first == (byte) 0xFE && second == (byte) 0xFF) {
+                return "UTF-16BE";
+            } else if (first == (byte) 0xFF && second == (byte) 0xFE) {
+                return "UTF-16LE";
+            }
+
+            byteData.position(byteData.position() - 2);
+        }
+
+        if (byteData.remaining() >= 4) {
+            byte[] bom = new byte[4];
+            byteData.get(bom);
+
+            if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 &&
+                bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+                return "UTF-32BE";
+            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE &&
+                       bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+                return "UTF-32LE";
+            }
+
+            byteData.position(byteData.position() - 4);
+        }
+
+        return null;
+    }
\ No newline at end of file
