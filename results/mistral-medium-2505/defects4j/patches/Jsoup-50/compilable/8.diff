diff --git a/tmp/cc295a63-3d76-4752-8ebf-9c249600fae6_buggy.java b/tmp/e2384c56-ddf3-42aa-ab90-eba8bc43d75a_fixed.java
index 25ca093..21f363b 100644
--- a/tmp/cc295a63-3d76-4752-8ebf-9c249600fae6_buggy.java
+++ b/tmp/e2384c56-ddf3-42aa-ab90-eba8bc43d75a_fixed.java
@@ -1,52 +1,90 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String detectedCharset = null;
 
-        // look for BOM - overrides any other header or input
+    // First check for BOM
+    byteData.mark();
+    Charset bomCharset = detectBomCharset(byteData);
+    if (bomCharset != null) {
+        detectedCharset = bomCharset.name();
+        byteData.reset();
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    // If no BOM or we need to use the provided charset
+    if (charsetName == null && detectedCharset == null) {
+        // Try to detect charset from meta tags
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+    } else {
+        // Use either the BOM-detected charset or the provided one
+        String charsetToUse = detectedCharset != null ? detectedCharset : charsetName;
+        Validate.notEmpty(charsetToUse, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        docData = Charset.forName(charsetToUse).decode(byteData).toString();
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : detectedCharset);
     }
     return doc;
 }
+
+private static Charset detectBomCharset(ByteBuffer byteData) {
+    byteData.mark();
+    if (byteData.remaining() >= 4) {
+        byte[] bom = new byte[4];
+        byteData.get(bom);
+        byteData.reset();
+
+        // Check for UTF-32 BE BOM
+        if (bom[0] == (byte)0x00 && bom[1] == (byte)0x00 && bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {
+            return Charset.forName("UTF-32BE");
+        }
+        // Check for UTF-32 LE BOM
+        if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE && bom[2] == (byte)0x00 && bom[3] == (byte)0x00) {
+            return Charset.forName("UTF-32LE");
+        }
+    }
+
+    if (byteData.remaining() >= 2) {
+        byte[] bom = new byte[2];
+        byteData.get(bom);
+        byteData.reset();
+
+        // Check for UTF-16 BE BOM
+        if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {
+            return Charset.forName("UTF-16BE");
+        }
+        // Check for UTF-16 LE BOM
+        if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {
+            return Charset.forName("UTF-16LE");
+        }
+    }
+
+    return null;
+}
\ No newline at end of file
