diff --git a/tmp/7fe38d86-a7a9-4993-a28f-aa7d69067d48_buggy.java b/tmp/b545fc5a-ff0e-4274-b3a1-f3f866afb41d_fixed.java
index 25ca093..e1dfa0b 100644
--- a/tmp/7fe38d86-a7a9-4993-a28f-aa7d69067d48_buggy.java
+++ b/tmp/b545fc5a-ff0e-4274-b3a1-f3f866afb41d_fixed.java
@@ -1,52 +1,76 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        String foundCharset = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
+        // Check for BOM first - overrides any other header or input
+        Charset bomCharset = detectBomCharset(byteData);
+        if (bomCharset != null) {
+            charsetName = bomCharset.name();
+            docData = bomCharset.decode(byteData).toString();
+        } else if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
+
+    private static Charset detectBomCharset(ByteBuffer byteData) {
+        byteData.mark();
+        if (byteData.remaining() >= 2) {
+            byte first = byteData.get();
+            byte second = byteData.get();
+
+            if (first == (byte) 0xFE && second == (byte) 0xFF) {
+                return Charset.forName("UTF-16BE");
+            } else if (first == (byte) 0xFF && second == (byte) 0xFE) {
+                return Charset.forName("UTF-16LE");
+            }
+
+            byteData.reset();
+            if (byteData.remaining() >= 4) {
+                byte third = byteData.get();
+                byte fourth = byteData.get();
+
+                if (first == (byte) 0x00 && second == (byte) 0x00 && third == (byte) 0xFE && fourth == (byte) 0xFF) {
+                    return Charset.forName("UTF-32BE");
+                } else if (first == (byte) 0xFF && second == (byte) 0xFE && third == (byte) 0x00 && fourth == (byte) 0x00) {
+                    return Charset.forName("UTF-32LE");
+                }
+            }
+        }
+        byteData.reset();
+        return null;
+    }
\ No newline at end of file
