diff --git a/tmp/b0f291d3-09a7-4d87-a7c5-b6eda11b4807_buggy.java b/tmp/2b05d9a8-b840-4f58-a0d9-6ba34b340cd3_fixed.java
index 25ca093..a16e595 100644
--- a/tmp/b0f291d3-09a7-4d87-a7c5-b6eda11b4807_buggy.java
+++ b/tmp/2b05d9a8-b840-4f58-a0d9-6ba34b340cd3_fixed.java
@@ -1,52 +1,75 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        String detectedCharset = charsetName;
 
-        // look for BOM - overrides any other header or input
+        // Check for BOM first - overrides any other header or input
+        byteData.mark();
+        String bomCharset = detectCharsetFromBom(byteData);
+        if (bomCharset != null) {
+            detectedCharset = bomCharset;
+            byteData.reset();
+        } else {
+            byteData.reset();
+        }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        if (detectedCharset == null) { // determine from meta. safe parse as UTF-8
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+                    detectedCharset = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+            Validate.notEmpty(detectedCharset, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+            docData = Charset.forName(detectedCharset).decode(byteData).toString();
         }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(detectedCharset);
         }
         return doc;
     }
+
+    private static String detectCharsetFromBom(ByteBuffer byteData) {
+        if (byteData.remaining() >= 4) {
+            byte[] bom = new byte[4];
+            byteData.get(bom);
+            if (bom[0] == (byte)0x00 && bom[1] == (byte)0x00 && bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {
+                return "UTF-32BE";
+            } else if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE && bom[2] == (byte)0x00 && bom[3] == (byte)0x00) {
+                return "UTF-32LE";
+            }
+        }
+        if (byteData.remaining() >= 2) {
+            byte[] bom = new byte[2];
+            byteData.get(bom);
+            if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {
+                return "UTF-16BE";
+            } else if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {
+                return "UTF-16LE";
+            }
+        }
+        return null;
+    }
\ No newline at end of file
