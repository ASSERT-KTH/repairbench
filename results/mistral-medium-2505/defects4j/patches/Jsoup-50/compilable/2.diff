diff --git a/tmp/e084a9ba-6af2-4297-9be1-cd07b91781a0_buggy.java b/tmp/11f4ae66-edd9-48a8-90dd-302928ce6cf2_fixed.java
index 25ca093..c3bf6cc 100644
--- a/tmp/e084a9ba-6af2-4297-9be1-cd07b91781a0_buggy.java
+++ b/tmp/11f4ae66-edd9-48a8-90dd-302928ce6cf2_fixed.java
@@ -1,52 +1,83 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
     String foundCharset = null;
+
+    // Check for BOM first
+    byteData.mark();
+    if (byteData.remaining() >= 2) {
+        byte first = byteData.get();
+        byte second = byteData.get();
+        byteData.reset();
+
+        if (first == (byte) 0xFE && second == (byte) 0xFF) {
+            foundCharset = "UTF-16BE";
+        } else if (first == (byte) 0xFF && second == (byte) 0xFE) {
+            foundCharset = "UTF-16LE";
+        } else if (byteData.remaining() >= 4) {
+            byte third = byteData.get();
+            byte fourth = byteData.get();
+            byteData.reset();
+
+            if (first == (byte) 0x00 && second == (byte) 0x00 && third == (byte) 0xFE && fourth == (byte) 0xFF) {
+                foundCharset = "UTF-32BE";
+            } else if (first == (byte) 0xFF && second == (byte) 0xFE && third == (byte) 0x00 && fourth == (byte) 0x00) {
+                foundCharset = "UTF-32LE";
+            }
+        }
+    }
+
+    // If we found a BOM, use that charset
+    if (foundCharset != null) {
+        charsetName = foundCharset;
+    }
+
+    // Parse with the detected or specified charset
+    if (charsetName == null) {
+        // No charset specified, try to detect from content
+        docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        doc = parser.parseInput(docData, baseUri);
+        Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
+        if (meta != null) {
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
+        // Specified by content type header or BOM detection
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
+    // Handle UTF-8 BOM if present
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
         byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
         charsetName = defaultCharset;
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
