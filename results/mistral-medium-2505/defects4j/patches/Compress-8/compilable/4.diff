diff --git a/tmp/a03ec3fa-5f83-4848-9d81-c5b96ef326f8_buggy.java b/tmp/46ef2159-c7c7-4aed-b7e4-53d90f3e5226_fixed.java
index e087f95..eb4fd44 100644
--- a/tmp/a03ec3fa-5f83-4848-9d81-c5b96ef326f8_buggy.java
+++ b/tmp/46ef2159-c7c7-4aed-b7e4-53d90f3e5226_fixed.java
@@ -1,53 +1,53 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Buffer must be at least 2 bytes long");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
+        boolean hasNonZero = false;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
+
             if (currentByte == 0) {
+                // If we encounter a NUL, check if we've seen non-zero bytes
+                if (hasNonZero) {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
+                }
                 break;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+            if (currentByte == (byte) ' ') {
                 if (stillPadding) {
                     continue;
                 }
-                if (currentByte == (byte) ' ') {
+                // If we encounter a space after digits, it must be the trailer
                 break;
             }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
             stillPadding = false;
+            hasNonZero = true;
+
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
+
+            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+        }
+
+        // Check if we have a valid trailer (space or NUL)
+        if (start < end && buffer[end-1] != ' ' && buffer[end-1] != 0) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, buffer[end-1]));
         }
 
         return result;
     }
\ No newline at end of file
