diff --git a/tmp/db5b2824-0835-4ea5-87e9-7a8c852de892_buggy.java b/tmp/7961c1fb-8f11-4bac-a4c2-d93a6fe20449_fixed.java
index e087f95..6579481 100644
--- a/tmp/db5b2824-0835-4ea5-87e9-7a8c852de892_buggy.java
+++ b/tmp/7961c1fb-8f11-4bac-a4c2-d93a6fe20449_fixed.java
@@ -1,53 +1,56 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Buffer must be at least 2 bytes long");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
+        boolean hasNonNul = false;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
+
+            // Check for NUL byte (end of string)
             if (currentByte == 0) {
                 break;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
-                   continue;
-            }
                 if (currentByte == (byte) ' ') {
-                break;
+                    continue;
                 }
+                if (currentByte == '0') {
+                    hasNonNul = true;
+                    continue;
                 }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
                 stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+            }
+
+            // Check for trailing space (end of string)
+            if (currentByte == (byte) ' ') {
+                if (i == start || (i > start && buffer[i-1] == ' ')) {
+                    break;
+                }
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, currentByte));
+            }
+
+            // Check for invalid byte
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
+
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        }
+
+        // If we didn't find any non-NUL bytes, return 0
+        if (!hasNonNul) {
+            return 0L;
         }
 
         return result;
     }
\ No newline at end of file
