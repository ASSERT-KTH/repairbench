diff --git a/tmp/5f8cf05c-1fbf-42e8-973d-53aa29457e6d_buggy.java b/tmp/0fc03cbe-cf13-4fc1-b212-194d45a99281_fixed.java
index e087f95..89ce17c 100644
--- a/tmp/5f8cf05c-1fbf-42e8-973d-53aa29457e6d_buggy.java
+++ b/tmp/0fc03cbe-cf13-4fc1-b212-194d45a99281_fixed.java
@@ -1,53 +1,73 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("length must be at least 2 bytes");
+        }
+
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
         int     start = offset;
+        boolean hasNonNul = false;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
+
+            // Check for NUL or space at start (all NULs case)
+            if (i == start && currentByte == 0) {
+                // Check if all bytes are NUL
+                boolean allNuls = true;
+                for (int j = start + 1; j < end; j++) {
+                    if (buffer[j] != 0) {
+                        allNuls = false;
+                        break;
+                    }
+                }
+                if (allNuls) {
+                    return 0L;
+                }
+            }
+
             if (currentByte == 0) {
                 break;
             }
 
             // Skip leading spaces
             if (currentByte == (byte) ' ' || currentByte == '0') {
                 if (stillPadding) {
                     continue;
                 }
                 if (currentByte == (byte) ' ') {
                     break;
                 }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
+            hasNonNul = true;
+
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
+        // Check if we had any non-NUL bytes and didn't find a proper trailer
+        if (hasNonNul) {
+            // Verify we have a proper trailer (space or NUL)
+            boolean hasTrailer = false;
+            for (int i = start; i < end; i++) {
+                if (buffer[i] == ' ' || buffer[i] == 0) {
+                    hasTrailer = true;
+                    break;
+                }
+            }
+            if (!hasTrailer) {
+                throw new IllegalArgumentException(
+                        "Missing trailing space or NUL");
+            }
+        }
+
         return result;
     }
\ No newline at end of file
