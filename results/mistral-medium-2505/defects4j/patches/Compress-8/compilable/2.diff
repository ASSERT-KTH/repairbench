diff --git a/tmp/25a135cf-a5e4-4099-bda4-b702c01ebc9c_buggy.java b/tmp/3d98bfed-318f-4392-abca-c0886a392bd4_fixed.java
index e087f95..3048023 100644
--- a/tmp/25a135cf-a5e4-4099-bda4-b702c01ebc9c_buggy.java
+++ b/tmp/3d98bfed-318f-4392-abca-c0886a392bd4_fixed.java
@@ -1,53 +1,56 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Input buffer must be at least 2 bytes long");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
+        boolean hasNonNul = false;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
                 break;
             }
 
+            // Check for invalid bytes (not space or digit)
+            if (currentByte != (byte) ' ' && (currentByte < '0' || currentByte > '7')) {
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, currentByte));
+            }
+
             // Skip leading spaces
             if (currentByte == (byte) ' ' || currentByte == '0') {
                 if (stillPadding) {
                     continue;
                 }
                 if (currentByte == (byte) ' ') {
                     break;
                 }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
+            hasNonNul = true;
+
             // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
+            if (currentByte >= '0' && currentByte <= '7') {
                 result = (result << 3) + (currentByte - '0'); // convert from ASCII
+            }
             // CheckStyle:MagicNumber ON
         }
 
+        // If we didn't find any non-NUL bytes, return 0
+        if (!hasNonNul) {
+            return 0;
+        }
+
+        // Check for trailing space or NUL
+        if (end > offset && buffer[end - 1] != 0 && buffer[end - 1] != ' ') {
+            throw new IllegalArgumentException(
+                    "Input buffer must end with a space or NUL");
+        }
+
         return result;
     }
\ No newline at end of file
