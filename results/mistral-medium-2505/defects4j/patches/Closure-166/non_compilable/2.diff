diff --git a/tmp/47e57441-4fdd-42fc-964e-fd8d3c96080c_buggy.java b/tmp/3a4ae2bd-ce08-417e-9d59-afd0b71f5de9_fixed.java
index 5f96616..43912bc 100644
--- a/tmp/47e57441-4fdd-42fc-964e-fd8d3c96080c_buggy.java
+++ b/tmp/3a4ae2bd-ce08-417e-9d59-afd0b71f5de9_fixed.java
@@ -1,20 +1,29 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
+    if (constraint.isRecordType() || constraint.isUnionType()) {
+      // For union types, we need to check if any of the alternatives is a record type
+      if (constraint.isUnionType()) {
+        for (JSType alternative : constraint.toUnionType().getAlternates()) {
+          if (alternative.isRecordType()) {
+            matchRecordTypeConstraint(alternative.toObjectType());
+          }
+        }
+      } else {
         matchRecordTypeConstraint(constraint.toObjectType());
       }
     }
+  }
\ No newline at end of file
