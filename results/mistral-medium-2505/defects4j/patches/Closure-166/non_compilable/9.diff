diff --git a/tmp/b5fe9d96-081d-4499-a6e3-23f588ad7144_buggy.java b/tmp/0c2307df-5d83-4e0c-a279-4fb358ab0a58_fixed.java
index 5f96616..bd60804 100644
--- a/tmp/b5fe9d96-081d-4499-a6e3-23f588ad7144_buggy.java
+++ b/tmp/0c2307df-5d83-4e0c-a279-4fb358ab0a58_fixed.java
@@ -1,20 +1,40 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
+    if (constraint.isRecordType() || constraint.isUnionType()) {
+      ObjectType recordType = null;
       if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+        recordType = constraint.toObjectType();
+      } else {
+        // For union types, find the record type component if it exists
+        UnionType union = constraint.toUnionType();
+        for (JSType alternative : union.getAlternates()) {
+          if (alternative.isRecordType()) {
+            if (recordType == null) {
+              recordType = alternative.toObjectType();
+            } else {
+              // Multiple record types in union - can't handle this case
+              return;
+            }
+          }
+        }
+      }
+
+      if (recordType != null) {
+        matchRecordTypeConstraint(recordType);
+      }
     }
   }
\ No newline at end of file
