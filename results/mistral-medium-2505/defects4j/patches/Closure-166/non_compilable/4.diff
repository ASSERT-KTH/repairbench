diff --git a/tmp/98af774b-228f-4486-9b85-7e53ddaafe96_buggy.java b/tmp/4452e71a-e946-48f6-aa3c-fdf39cc3b8fc_fixed.java
index 5f96616..8ca63e9 100644
--- a/tmp/98af774b-228f-4486-9b85-7e53ddaafe96_buggy.java
+++ b/tmp/4452e71a-e946-48f6-aa3c-fdf39cc3b8fc_fixed.java
@@ -1,20 +1,29 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+      ObjectType constraintObj = constraint.toObjectType();
+      if (isRecordType()) {
+        // If we're already a record type, merge the properties
+        ObjectType thisObj = toObjectType();
+        thisObj = thisObj.withProperties(constraintObj.getProperties());
+        setType(thisObj);
+      } else {
+        // Otherwise, just adopt the constraint's properties
+        matchRecordTypeConstraint(constraintObj);
+      }
     }
   }
\ No newline at end of file
