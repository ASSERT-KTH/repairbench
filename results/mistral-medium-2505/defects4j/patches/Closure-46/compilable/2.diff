diff --git a/tmp/918bf0e9-e5bc-4c24-9607-f9ce7579872f_buggy.java b/tmp/b7fdad7c-34a5-4884-bcf4-6743469ab993_fixed.java
index 46817a7..bec4e99 100644
--- a/tmp/918bf0e9-e5bc-4c24-9607-f9ce7579872f_buggy.java
+++ b/tmp/b7fdad7c-34a5-4884-bcf4-6743469ab993_fixed.java
@@ -1,16 +1,27 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+
+  RecordType thatRecord = that.toMaybeRecordType();
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+
+  // Find common properties with equivalent types
+  boolean hasCommonProperties = false;
   for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    if (thatRecord.hasProperty(property) &&
+        thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {
+      builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
+      hasCommonProperties = true;
     }
   }
+
+  // If there are common properties, return the built type
+  // Otherwise return the union of both types
+  if (hasCommonProperties) {
     return builder.build();
+  } else {
+    return registry.createUnionType(this, that);
+  }
 }
\ No newline at end of file
