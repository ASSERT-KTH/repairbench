diff --git a/tmp/81a0b4fe-4808-422c-b339-97791ff3ceb1_buggy.java b/tmp/8b91d9e2-9e1b-40b1-8d5e-6bb2be9cbd24_fixed.java
index 46817a7..07ac64b 100644
--- a/tmp/81a0b4fe-4808-422c-b339-97791ff3ceb1_buggy.java
+++ b/tmp/8b91d9e2-9e1b-40b1-8d5e-6bb2be9cbd24_fixed.java
@@ -1,16 +1,47 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
+
+    // If the types are equivalent, return either one
+    if (isEquivalentTo(that)) {
+        return this;
+    }
+
+    // Create a new builder for the union type
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+
+    // Add properties from both types
     for (String property : properties.keySet()) {
         if (that.toMaybeRecordType().hasProperty(property) &&
             that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
                 getPropertyType(property))) {
             builder.addProperty(property, getPropertyType(property),
                 getPropertyNode(property));
         }
     }
+
+    // Add properties that are only in this type
+    for (String property : properties.keySet()) {
+        if (!that.toMaybeRecordType().hasProperty(property)) {
+            builder.addProperty(property, getPropertyType(property),
+                getPropertyNode(property));
+        }
+    }
+
+    // Add properties that are only in the other type
+    for (String property : that.toMaybeRecordType().getProperties()) {
+        if (!properties.containsKey(property)) {
+            builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property),
+                that.toMaybeRecordType().getPropertyNode(property));
+        }
+    }
+
+    // If no common properties, return union type
+    if (builder.getProperties().isEmpty()) {
+        return registry.createUnionType(this, that);
+    }
+
     return builder.build();
 }
\ No newline at end of file
