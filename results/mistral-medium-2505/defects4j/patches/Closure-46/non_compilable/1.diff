diff --git a/tmp/a364b1f1-1f91-4b37-8d54-a2d86f8be485_buggy.java b/tmp/d165aea4-8851-4d3c-8648-1457c0201116_fixed.java
index 46817a7..61dc16f 100644
--- a/tmp/a364b1f1-1f91-4b37-8d54-a2d86f8be485_buggy.java
+++ b/tmp/d165aea4-8851-4d3c-8648-1457c0201116_fixed.java
@@ -1,16 +1,32 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+
+  RecordType thatRecord = that.toMaybeRecordType();
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+  // Collect all property names from both types
+  Set<String> allProperties = new HashSet<>(properties.keySet());
+  allProperties.addAll(thatRecord.properties.keySet());
+
+  // Check if all properties are exactly the same (including types)
+  boolean allPropertiesMatch = true;
+  for (String property : allProperties) {
+    if (!properties.containsKey(property) ||
+        !thatRecord.properties.containsKey(property) ||
+        !properties.get(property).isEquivalentTo(thatRecord.properties.get(property))) {
+      allPropertiesMatch = false;
+      break;
     }
   }
-    return builder.build();
+
+  if (allPropertiesMatch) {
+    // If all properties match exactly, return this type
+    return this;
+  } else {
+    // Otherwise return the union of both types
+    return registry.createUnionType(this, that);
+  }
 }
\ No newline at end of file
