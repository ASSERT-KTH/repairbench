diff --git a/tmp/ab27961a-8058-4521-bc0c-c7385b16f456_buggy.java b/tmp/9dd98a71-03c2-404c-8ca3-fa760fe09749_fixed.java
index 46817a7..1aa9344 100644
--- a/tmp/ab27961a-8058-4521-bc0c-c7385b16f456_buggy.java
+++ b/tmp/9dd98a71-03c2-404c-8ca3-fa760fe09749_fixed.java
@@ -1,16 +1,36 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+
+    RecordType thatRecord = that.toMaybeRecordType();
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // Collect all properties from both types
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(thatRecord.getPropertyNames());
+
+    boolean needsUnion = false;
+
+    for (String property : allProperties) {
+      if (properties.containsKey(property) && thatRecord.hasProperty(property)) {
+        JSType thisType = getPropertyType(property);
+        JSType thatType = thatRecord.getPropertyType(property);
+
+        if (thisType.isEquivalentTo(thatType)) {
+          builder.addProperty(property, thisType, getPropertyNode(property));
+        } else {
+          needsUnion = true;
         }
+      } else {
+        needsUnion = true;
       }
+    }
+
+    if (needsUnion) {
+      return registry.createUnionType(this, that);
+    }
+
     return builder.build();
   }
\ No newline at end of file
