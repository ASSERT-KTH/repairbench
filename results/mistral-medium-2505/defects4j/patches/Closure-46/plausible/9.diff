diff --git a/tmp/71d069de-7360-4422-bb28-e14b52e7a445_buggy.java b/tmp/d544ff09-4518-4ddb-ac17-ce3caa1aae5f_fixed.java
index 46817a7..2220ad7 100644
--- a/tmp/71d069de-7360-4422-bb28-e14b52e7a445_buggy.java
+++ b/tmp/d544ff09-4518-4ddb-ac17-ce3caa1aae5f_fixed.java
@@ -1,16 +1,26 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+
+  // If the records have exactly the same properties with equivalent types,
+  // return either record type (they're equivalent)
+  RecordType otherRecord = that.toMaybeRecordType();
+  if (properties.keySet().equals(otherRecord.properties.keySet())) {
+    boolean allEquivalent = true;
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+      if (!getPropertyType(property).isEquivalentTo(
+          otherRecord.getPropertyType(property))) {
+        allEquivalent = false;
+        break;
       }
     }
-    return builder.build();
+    if (allEquivalent) {
+      return this;
+    }
+  }
+
+  // Otherwise return the union of the two record types
+  return registry.createUnionType(this, that);
 }
\ No newline at end of file
