diff --git a/tmp/c5b440bc-5b8f-4bcc-804a-165f318936ec_buggy.java b/tmp/38d64dd8-abef-497c-ad5b-ac31c8b812d6_fixed.java
index 46817a7..7e97de6 100644
--- a/tmp/c5b440bc-5b8f-4bcc-804a-165f318936ec_buggy.java
+++ b/tmp/38d64dd8-abef-497c-ad5b-ac31c8b812d6_fixed.java
@@ -1,16 +1,27 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+
+  RecordType thatRecord = that.toMaybeRecordType();
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+
+  // Check if all properties in this type exist in that type with equivalent types
+  boolean allPropertiesMatch = true;
   for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    if (!thatRecord.hasProperty(property) ||
+        !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {
+      allPropertiesMatch = false;
+      break;
     }
   }
-    return builder.build();
+
+  // If all properties match, return the more specific type (this type)
+  if (allPropertiesMatch) {
+    return this;
+  }
+
+  // Otherwise, return the union of both types
+  return registry.createUnionType(this, that);
 }
\ No newline at end of file
