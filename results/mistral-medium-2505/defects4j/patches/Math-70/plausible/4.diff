diff --git a/tmp/48ed0986-6cf5-42f1-a886-7e72da529a5e_buggy.java b/tmp/8b16ba76-70f8-4ed0-82a6-37ad81cea44f_fixed.java
index d931bce..f18c2ec 100644
--- a/tmp/48ed0986-6cf5-42f1-a886-7e72da529a5e_buggy.java
+++ b/tmp/8b16ba76-70f8-4ed0-82a6-37ad81cea44f_fixed.java
@@ -1,5 +1,64 @@
     /** {@inheritDoc} */
     public double solve(final UnivariateRealFunction f, double min, double max, double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+        clearResult();
+        verifyInterval(min, max);
+
+        double ret = Double.NaN;
+        double fMin = f.value(min);
+        double fMax = f.value(max);
+        double fInitial = f.value(initial);
+
+        // Verify bracketing
+        if (fMin * fMax >= 0) {
+            throw new IllegalArgumentException(
+                "Function values at endpoints do not have opposite signs.  Endpoints: [" +
+                min + "," + max + "], Values: [" + fMin + "," + fMax + "]");
+        }
+
+        // Verify initial guess is within the interval
+        if (initial < min || initial > max) {
+            throw new IllegalArgumentException(
+                "Initial guess must be within the search interval.");
+        }
+
+        // If initial guess is a root, return it
+        if (fInitial == 0) {
+            ret = initial;
+            setResult(ret, 0);
+            return ret;
+        }
+
+        // Perform bisection
+        double m, fM;
+        int i = 0;
+        while (i < maximalIterationCount) {
+            m = (min + max) / 2.0;
+            fM = f.value(m);
+
+            if (fM == 0) {
+                ret = m;
+                break;
+            } else if (fMin * fM < 0) {
+                max = m;
+                fMax = fM;
+            } else {
+                min = m;
+                fMin = fM;
+            }
+
+            if (Math.abs(max - min) <= absoluteAccuracy) {
+                ret = (min + max) / 2.0;
+                break;
+            }
+
+            i++;
+        }
+
+        if (i >= maximalIterationCount) {
+            throw new MaxIterationsExceededException(maximalIterationCount);
+        }
+
+        setResult(ret, i);
+        return ret;
     }
\ No newline at end of file
