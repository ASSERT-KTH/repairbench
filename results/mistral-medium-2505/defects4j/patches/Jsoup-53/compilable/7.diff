diff --git a/tmp/24f289c4-b5d7-43a3-b5e8-604ef0a82a06_buggy.java b/tmp/4cbbacaf-da55-40c8-87c0-0373420b8f1e_fixed.java
index fecb896..75da1e0 100644
--- a/tmp/24f289c4-b5d7-43a3-b5e8-604ef0a82a06_buggy.java
+++ b/tmp/4cbbacaf-da55-40c8-87c0-0373420b8f1e_fixed.java
@@ -1,34 +1,38 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inQuote = false;
+        char quoteChar = 0;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            if (inQuote) {
+                if (c == quoteChar) {
+                    inQuote = false;
+                    quoteChar = 0;
+                }
+                continue;
+            }
+
+            if (last != ESC) {
+                if (c == '\'' || c == '"') {
+                    inQuote = true;
+                    quoteChar = c;
+                } else if (c.equals(open)) {
                     depth++;
                     if (start == -1)
                         start = pos;
-                }
-                else if (c.equals(close))
+                } else if (c.equals(close)) {
                     depth--;
                 }
+            }
 
             if (depth > 0 && last != 0)
                 end = pos; // don't include the outer match pair in the return
             last = c;
         } while (depth > 0);
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
