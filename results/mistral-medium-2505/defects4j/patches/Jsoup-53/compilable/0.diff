diff --git a/tmp/5b618c8c-7f39-445d-8c97-c5d420390cab_buggy.java b/tmp/01d3d389-0f97-4116-bf84-35cb93b64475_fixed.java
index fecb896..fcf5473 100644
--- a/tmp/5b618c8c-7f39-445d-8c97-c5d420390cab_buggy.java
+++ b/tmp/01d3d389-0f97-4116-bf84-35cb93b64475_fixed.java
@@ -1,34 +1,37 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inQuote = false;
+        char quoteChar = 0;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
+            if (inQuote) {
+                if (c.equals(quoteChar)) {
+                    inQuote = false;
+                    quoteChar = 0;
+                }
+            } else {
+                if (c.equals('\'') || c.equals('"')) {
+                    inQuote = true;
+                    quoteChar = c;
+                } else if (last == 0 || last != ESC) {
                     if (c.equals(open)) {
                         depth++;
                         if (start == -1)
                             start = pos;
                     }
                     else if (c.equals(close))
                         depth--;
                 }
+            }
 
-            if (depth > 0 && last != 0)
+            if (depth > 0 && last != 0 && !inQuote)
                 end = pos; // don't include the outer match pair in the return
             last = c;
         } while (depth > 0);
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
