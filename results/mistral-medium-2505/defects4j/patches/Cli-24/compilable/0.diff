diff --git a/tmp/fe2fb353-0446-4643-8b24-bb82199f983d_buggy.java b/tmp/f2f1326d-ed3d-4901-a4f9-639671f4e55a_fixed.java
index 229b3e7..f79bf92 100644
--- a/tmp/fe2fb353-0446-4643-8b24-bb82199f983d_buggy.java
+++ b/tmp/f2f1326d-ed3d-4901-a4f9-639671f4e55a_fixed.java
@@ -1,55 +1,42 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        // Check if we have enough space for padding
+        int availableWidth = width;
+        String padding = "";
+        if (nextLineTabStop < width) {
+            availableWidth = width - nextLineTabStop;
+            padding = createPadding(nextLineTabStop);
+        } else {
+            // If no room for padding, use full width
+            availableWidth = width;
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
         while (true)
         {
             text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            pos = findWrapPos(text, availableWidth, 0);
 
             if (pos == -1)
             {
                 sb.append(text);
-
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            if ( (text.length() > availableWidth) && (pos == nextLineTabStop - 1) )
             {
-                pos = width;
+                pos = availableWidth;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
