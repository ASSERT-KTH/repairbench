diff --git a/tmp/8de344ff-689d-45b3-b820-214d1b1b35fa_buggy.java b/tmp/48712418-64c3-4435-9def-7120e02efab9_fixed.java
index 03b03d7..d866cb0 100644
--- a/tmp/8de344ff-689d-45b3-b820-214d1b1b35fa_buggy.java
+++ b/tmp/48712418-64c3-4435-9def-7120e02efab9_fixed.java
@@ -1,25 +1,30 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      *
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
 
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long instantBeforeLocal = convertUTCToLocal(instant - DateTimeConstants.MILLIS_PER_HOUR);
+        long instantAfterLocal = convertUTCToLocal(instant + DateTimeConstants.MILLIS_PER_HOUR);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        if (instantBeforeLocal == instantAfterLocal) {
+            // We're in the overlap period
+            return earlierOrLater ?
+                convertLocalToUTC(local, false, instantAfter) :
+                convertLocalToUTC(local, false, instantBefore);
+        }
+
+        // Not in overlap period, return original instant
+        return instant;
     }
\ No newline at end of file
