diff --git a/tmp/c9e9a9b0-8370-41f0-b22d-9af225852591_buggy.java b/tmp/81c9fce5-2e30-432b-a3c6-a0bb3179e4bc_fixed.java
index 03b03d7..6aeb00c 100644
--- a/tmp/c9e9a9b0-8370-41f0-b22d-9af225852591_buggy.java
+++ b/tmp/81c9fce5-2e30-432b-a3c6-a0bb3179e4bc_fixed.java
@@ -1,25 +1,25 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      *
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
 
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long adjustedInstant = convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // if the adjusted instant is the same as the original, we need to try the other offset
+        if (adjustedInstant == instant) {
+            return convertLocalToUTC(local, false, earlierOrLater ? instantBefore : instantAfter);
+        }
+        return adjustedInstant;
     }
\ No newline at end of file
