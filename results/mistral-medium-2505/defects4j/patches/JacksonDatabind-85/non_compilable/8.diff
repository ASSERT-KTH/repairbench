diff --git a/tmp/79bcb20a-e446-4626-ab3a-cb84b10f13d5_buggy.java b/tmp/5024a40e-9a23-4d98-8a22-bf847d8cd95a_fixed.java
index d926eea..919fb09 100644
--- a/tmp/79bcb20a-e446-4626-ab3a-cb84b10f13d5_buggy.java
+++ b/tmp/5024a40e-9a23-4d98-8a22-bf847d8cd95a_fixed.java
@@ -1,48 +1,48 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
     // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
             || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
         final String pattern = format.hasPattern()
                 ? format.getPattern()
                 : StdDateFormat.DATE_FORMAT_STR_ISO8601;
         final Locale loc = format.hasLocale()
                 ? format.getLocale()
                 : serializers.getLocale();
         SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
         if (tz == null) {
             tz = serializers.getTimeZone();
         }
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
 
     // Otherwise, need one of these changes:
-
+    if (serializers.getDateFormat() != null) {
+        DateFormat df = serializers.getDateFormat();
+        if (df instanceof SimpleDateFormat) {
+            SimpleDateFormat sdf = (SimpleDateFormat) df;
+            return withFormat(Boolean.FALSE, new SimpleDateFormat(sdf.toPattern(), sdf.getDateFormatSymbols()));
+        }
+    }
 
     // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
