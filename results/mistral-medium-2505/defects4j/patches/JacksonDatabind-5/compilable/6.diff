diff --git a/tmp/98e95c86-5c77-43d3-83d0-9530bf812ad5_buggy.java b/tmp/e54f9752-e816-4e72-b211-82ee12a8bced_fixed.java
index b2db1d6..eec4df2 100644
--- a/tmp/98e95c86-5c77-43d3-83d0-9530bf812ad5_buggy.java
+++ b/tmp/e54f9752-e816-4e72-b211-82ee12a8bced_fixed.java
@@ -1,29 +1,26 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Always add the mixin method, even if it doesn't override an existing method
+                // This handles multi-level mixin merging (Issue#515)
                 mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
