diff --git a/tmp/1cab6c87-b4e8-4a0d-91eb-5b88a65ae4e5_buggy.java b/tmp/06ed20cf-9f2d-4316-a804-8d9bdb9272df_fixed.java
index 3127f85..0b4b2d7 100644
--- a/tmp/1cab6c87-b4e8-4a0d-91eb-5b88a65ae4e5_buggy.java
+++ b/tmp/06ed20cf-9f2d-4316-a804-8d9bdb9272df_fixed.java
@@ -1,24 +1,18 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
         try {
+            if (Double.isInfinite(x)) {
+                return x < 0 ? 0 : 1;
+            }
             return 0.5 * (1.0 + Erf.erf((dev) /
                         (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < (mean - 40 * standardDeviation)) {
                 return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+            } else if (x > (mean + 40 * standardDeviation)) {
                 return 1;
             } else {
                 throw ex;
             }
         }
     }
\ No newline at end of file
