diff --git a/tmp/1af0e5c7-800a-4526-a138-446d3d0bc2ff_buggy.java b/tmp/f619ff1d-b26e-42a0-9c21-8ac7e2797b5c_fixed.java
index 1478ee1..f93d0e1 100644
--- a/tmp/1af0e5c7-800a-4526-a138-446d3d0bc2ff_buggy.java
+++ b/tmp/f619ff1d-b26e-42a0-9c21-8ac7e2797b5c_fixed.java
@@ -1,24 +1,47 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
     // rescale both vectors without losing precision,
     // to ensure their norm are the same order of magnitude
 
     // we reduce cancellation errors by preconditioning,
     // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
     // v3 without loss of precision. See Kahan lecture
     // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
     // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    final double ax = FastMath.abs(v1.x);
+    final double ay = FastMath.abs(v1.y);
+    final double az = FastMath.abs(v1.z);
+    final double bx = FastMath.abs(v2.x);
+    final double by = FastMath.abs(v2.y);
+    final double bz = FastMath.abs(v2.z);
 
+    double rho;
+    if ((ax + ay + az) == 0) {
+        // v1 is the zero vector
+        return new Vector3D(0, 0, 0);
+    } else if ((bx + by + bz) == 0) {
+        // v2 is the zero vector
+        return new Vector3D(0, 0, 0);
+    } else {
+        // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+        final double v1v2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+        final double v2v2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+        rho = v1v2 / v2v2;
+        // round to the nearest 8 bits
+        rho = FastMath.scalb(FastMath.rint(FastMath.scalb(rho, 8)), -8);
+    }
+
+    // compute v3 = v1 - rho v2
+    final double x3 = v1.x - rho * v2.x;
+    final double y3 = v1.y - rho * v2.y;
+    final double z3 = v1.z - rho * v2.z;
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    return new Vector3D(y3 * v2.z - z3 * v2.y, z3 * v2.x - x3 * v2.z, x3 * v2.y - y3 * v2.x);
 }
\ No newline at end of file
