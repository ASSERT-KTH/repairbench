diff --git a/tmp/a02f09c5-aff0-4fa9-bebc-a7a3ccea4378_buggy.java b/tmp/3dd5c20b-ef6f-4fb2-9df4-642bb75203fe_fixed.java
index 1478ee1..c16a884 100644
--- a/tmp/a02f09c5-aff0-4fa9-bebc-a7a3ccea4378_buggy.java
+++ b/tmp/3dd5c20b-ef6f-4fb2-9df4-642bb75203fe_fixed.java
@@ -1,24 +1,35 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
 
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
       // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      final double ax = v1.x;
+      final double ay = v1.y;
+      final double az = v1.z;
+      final double bx = v2.x;
+      final double by = v2.y;
+      final double bz = v2.z;
 
+      double v1DotV2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+      double v2DotV2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+      double rho = v1DotV2 / v2DotV2;
+
+      // compute v3 = v1 - rho * v2
+      double v3x = ax - rho * bx;
+      double v3y = ay - rho * by;
+      double v3z = az - rho * bz;
 
       // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+      return new Vector3D(v3y * bz - v3z * by, v3z * bx - v3x * bz, v3x * by - v3y * bx);
   }
\ No newline at end of file
