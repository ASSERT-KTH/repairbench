diff --git a/tmp/6dcc60a1-1bca-40b0-b685-d17abceb3dc6_buggy.java b/tmp/9b04aca8-30e5-441b-93bb-f9e7f4940522_fixed.java
index 58a1651..11f05ab 100644
--- a/tmp/6dcc60a1-1bca-40b0-b685-d17abceb3dc6_buggy.java
+++ b/tmp/9b04aca8-30e5-441b-93bb-f9e7f4940522_fixed.java
@@ -1,32 +1,49 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+      // Handle union types by finding the object types in the union
+      UnionType union = (UnionType) resolvedTypeOfThis;
+      List<ObjectType> objectTypes = new ArrayList<>();
+      for (JSType alt : union.getAlternates()) {
+        if (alt instanceof ObjectType) {
+          objectTypes.add((ObjectType) alt);
+        }
+      }
+      if (!objectTypes.isEmpty()) {
+        typeOfThis = objectTypes.get(0); // Take the first object type
+      } else {
+        // If no object types found, keep the original type
+        typeOfThis = (ObjectType) typeOfThis.resolve(t, scope);
+      }
+    } else {
+      typeOfThis = (ObjectType) typeOfThis.resolve(t, scope);
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
