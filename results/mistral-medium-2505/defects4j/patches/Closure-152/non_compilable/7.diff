diff --git a/tmp/f1023409-3126-4f43-a4f1-1193e2ebd224_buggy.java b/tmp/d0b42a13-b3c8-47ab-9c61-02738985588b_fixed.java
index 58a1651..01130e4 100644
--- a/tmp/f1023409-3126-4f43-a4f1-1193e2ebd224_buggy.java
+++ b/tmp/d0b42a13-b3c8-47ab-9c61-02738985588b_fixed.java
@@ -1,32 +1,42 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  // Handle typeOfThis more carefully, allowing UnionTypes that contain ObjectTypes
+  JSType resolvedThis = safeResolve(typeOfThis, t, scope);
+  if (resolvedThis instanceof UnionType) {
+    UnionType union = (UnionType) resolvedThis;
+    if (!union.isObject()) {
+      t.warning("Invalid @this type. Must be an object type");
+    }
+    typeOfThis = union;
+  } else if (resolvedThis instanceof ObjectType) {
+    typeOfThis = (ObjectType) resolvedThis;
+  } else {
+    t.warning("Invalid @this type. Must be an object type");
+    typeOfThis = (ObjectType) resolvedThis;
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
