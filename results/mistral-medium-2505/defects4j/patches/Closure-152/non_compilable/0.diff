diff --git a/tmp/b5f9293f-600d-4e5d-8f2d-3666de7027e0_buggy.java b/tmp/c0f58894-1240-4bec-baec-73030bfdc9dc_fixed.java
index 58a1651..494af1a 100644
--- a/tmp/b5f9293f-600d-4e5d-8f2d-3666de7027e0_buggy.java
+++ b/tmp/c0f58894-1240-4bec-baec-73030bfdc9dc_fixed.java
@@ -1,32 +1,55 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle UnionType case for typeOfThis
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+      // If it's a union type, we need to check if all components are ObjectTypes
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      boolean allObjectTypes = true;
+      for (JSType alt : unionType.getAlternates()) {
+        if (!(alt instanceof ObjectType)) {
+          allObjectTypes = false;
+          break;
+        }
+      }
+      if (allObjectTypes) {
+        typeOfThis = (ObjectType) unionType.getRestriction();
+      } else {
+        // Report error if not all components are ObjectTypes
+        t.report(JSError.make(scope.getSourceName(),
+            "typeOfThis must be an ObjectType or UnionType of ObjectTypes"));
+        typeOfThis = getNativeType(ObjectType.class);
+      }
+    } else if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+      t.report(JSError.make(scope.getSourceName(),
+          "typeOfThis must be an ObjectType or UnionType of ObjectTypes"));
+      typeOfThis = getNativeType(ObjectType.class);
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
