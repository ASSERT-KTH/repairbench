diff --git a/tmp/c90b26dc-6993-421c-86ce-e4bb9c66dabc_buggy.java b/tmp/0e1997b6-e70c-4944-b9f7-058458043106_fixed.java
index 58a1651..beaa52e 100644
--- a/tmp/c90b26dc-6993-421c-86ce-e4bb9c66dabc_buggy.java
+++ b/tmp/0e1997b6-e70c-4944-b9f7-058458043106_fixed.java
@@ -1,32 +1,52 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis which could be a UnionType
+    JSType resolvedThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedThis instanceof UnionType) {
+      // Check if all components of the union are ObjectTypes
+      boolean allObjectTypes = true;
+      for (JSType component : ((UnionType) resolvedThis).getAlternates()) {
+        if (!(component instanceof ObjectType)) {
+          allObjectTypes = false;
+          break;
+        }
+      }
+      if (allObjectTypes) {
+        typeOfThis = (UnionType) resolvedThis;
+      } else {
+        // Report error if not all components are ObjectTypes
+        t.report(JSError.make(t.getSourceName(), resolvedThis.getSourceName(),
+            resolvedThis.getLineNumber(), resolvedThis.getCharno(),
+            "TypeCheck", "@this type of a function must be an object\n"
+            + "Actual type: " + resolvedThis.toString()));
+        typeOfThis = getNativeType(ObjectType.OBJECT);
+      }
+    } else {
+      typeOfThis = (ObjectType) resolvedThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
