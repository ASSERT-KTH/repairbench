diff --git a/tmp/c65376e3-e2fe-47c5-9be8-cdf0fc26942b_buggy.java b/tmp/3fd21cf5-90b9-4039-a704-633c1bbe7ef6_fixed.java
index 220820e..16bf041 100644
--- a/tmp/c65376e3-e2fe-47c5-9be8-cdf0fc26942b_buggy.java
+++ b/tmp/3fd21cf5-90b9-4039-a704-633c1bbe7ef6_fixed.java
@@ -1,22 +1,32 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+            if (entry > epsilon) {
+                if (rhs < 0) {
+                    // For negative RHS, we need to consider the most negative ratio
                     final double ratio = rhs / entry;
                     if (ratio < minRatio) {
                         minRatio = ratio;
                         minRatioPos = i;
                     }
+                } else {
+                    // For positive RHS, we use the standard minimum ratio test
+                    final double ratio = rhs / entry;
+                    if (ratio < minRatio) {
+                        minRatio = ratio;
+                        minRatioPos = i;
+                    }
+                }
             }
         }
         return minRatioPos;
     }
\ No newline at end of file
