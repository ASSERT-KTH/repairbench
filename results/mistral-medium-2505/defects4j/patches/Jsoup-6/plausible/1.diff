diff --git a/tmp/41f99b1e-84b6-4b84-951f-990ec11023be_buggy.java b/tmp/b4a8a798-4f14-4f01-bc43-4613ce23ecfb_fixed.java
index 99141e0..7bfa6a0 100644
--- a/tmp/41f99b1e-84b6-4b84-951f-990ec11023be_buggy.java
+++ b/tmp/b4a8a798-4f14-4f01-bc43-4613ce23ecfb_fixed.java
@@ -1,33 +1,36 @@
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
         Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
         StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
 
         while (m.find()) {
             int charval = -1;
             String num = m.group(3);
             if (num != null) {
                 try {
                     int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                    charval = Integer.parseInt(num, base);
                 } catch (NumberFormatException e) {
                 } // skip
             } else {
                 String name = m.group(1);
                 if (full.containsKey(name))
                     charval = full.get(name);
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+            if (charval != -1) {
+                if (charval <= 0xFFFF) { // valid char range
                     String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+                    m.appendReplacement(accum, Matcher.quoteReplacement(c));
+                } else {
+                    m.appendReplacement(accum, m.group(0));
+                }
             } else {
                 m.appendReplacement(accum, m.group(0));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
\ No newline at end of file
