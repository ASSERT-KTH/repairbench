diff --git a/tmp/ac210397-4174-4b22-bee8-8753322f4688_buggy.java b/tmp/1f43ded4-1b89-447d-b0ea-ebae0eda8122_fixed.java
index f9a9b5b..aa5618f 100644
--- a/tmp/ac210397-4174-4b22-bee8-8753322f4688_buggy.java
+++ b/tmp/1f43ded4-1b89-447d-b0ea-ebae0eda8122_fixed.java
@@ -1,30 +1,45 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
         T mockInstance = null;
         try {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+            // Ensure constructor is properly called for abstract classes and inner classes
+            if (settings.getTypeToMock().isMemberClass() && !Modifier.isStatic(settings.getTypeToMock().getModifiers())) {
+                Constructor<?> constructor = settings.getTypeToMock().getDeclaredConstructors()[0];
+                if (constructor.getParameterCount() > 0) {
+                    Object outerInstance = settings.getOuterInstance();
+                    if (outerInstance == null) {
+                        throw new InstantiationException("Outer instance is required for non-static inner class");
+                    }
+                    constructor.setAccessible(true);
+                    constructor.newInstance(outerInstance);
+                }
+            }
+
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
                     "  class to mock : " + describeClass(mockedProxyType),
                     "  created class : " + describeClass(settings.getTypeToMock()),
                     "  proxy instance class : " + describeClass(mockInstance),
                     "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
             throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        } catch (Exception e) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
