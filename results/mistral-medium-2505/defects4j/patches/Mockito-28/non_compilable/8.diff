diff --git a/tmp/3bee3223-455d-4d34-ac17-f3a0afcfa1f7_buggy.java b/tmp/5d3edca7-a625-40e0-b8ed-de7ef0868cf8_fixed.java
index fa6828a..b3fdb05 100644
--- a/tmp/3bee3223-455d-4d34-ac17-f3a0afcfa1f7_buggy.java
+++ b/tmp/5d3edca7-a625-40e0-b8ed-de7ef0868cf8_fixed.java
@@ -1,5 +1,27 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
     for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        List<Object> candidates = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);
+        if (!candidates.isEmpty()) {
+            // Find the most specific type match
+            Object bestMatch = findBestTypeMatch(candidates, field.getType());
+            mockCandidateFilter.inject(field, fieldInstance, bestMatch);
         }
     }
+}
+
+private Object findBestTypeMatch(List<Object> candidates, Class<?> targetType) {
+    Object bestMatch = null;
+    Class<?> bestMatchType = null;
+
+    for (Object candidate : candidates) {
+        Class<?> candidateType = candidate.getClass();
+        if (targetType.isAssignableFrom(candidateType)) {
+            if (bestMatch == null ||
+                bestMatchType.isAssignableFrom(candidateType)) {
+                bestMatch = candidate;
+                bestMatchType = candidateType;
+            }
+        }
+    }
+    return bestMatch;
+}
\ No newline at end of file
