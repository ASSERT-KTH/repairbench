diff --git a/tmp/12452b55-b135-4689-97ad-b818c84258b9_buggy.java b/tmp/d39a6f6a-9ecf-45e0-accd-f4c560e4e099_fixed.java
index eea9e73..158c289 100644
--- a/tmp/12452b55-b135-4689-97ad-b818c84258b9_buggy.java
+++ b/tmp/d39a6f6a-9ecf-45e0-accd-f4c560e4e099_fixed.java
@@ -1,41 +1,41 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
     public static boolean containsAny(CharSequence cs, char[] searchChars) {
         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
             return false;
         }
         int csLength = cs.length();
         int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
+        for (int i = 0; i < csLength; ) {
             char ch = cs.charAt(i);
+            // Handle surrogate pairs (supplementary characters)
+            if (Character.isHighSurrogate(ch) && i + 1 < csLength) {
+                char nextChar = cs.charAt(i + 1);
+                if (Character.isLowSurrogate(nextChar)) {
+                    // Check if the surrogate pair matches any in searchChars
+                    boolean found = false;
+                    for (int j = 0; j < searchLength; ) {
+                        char searchChar = searchChars[j];
+                        if (Character.isHighSurrogate(searchChar) && j + 1 < searchLength) {
+                            char nextSearchChar = searchChars[j + 1];
+                            if (Character.isLowSurrogate(nextSearchChar) &&
+                                ch == searchChar && nextChar == nextSearchChar) {
+                                return true;
+                            }
+                            j += 2;
+                        } else {
+                            j++;
+                        }
+                    }
+                    i += 2;
+                    continue;
+                }
+            }
+            // Check for regular characters
             for (int j = 0; j < searchLength; j++) {
                 if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
                     return true;
                 }
             }
+            i++;
         }
         return false;
     }
\ No newline at end of file
