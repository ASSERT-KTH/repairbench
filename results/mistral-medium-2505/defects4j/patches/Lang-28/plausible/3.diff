diff --git a/tmp/eff811d5-c31b-4f9c-8f29-cccfddb77bb7_buggy.java b/tmp/da78b7cd-e21e-4f00-9c07-afb006e9b0d0_fixed.java
index 4bbd561..ccf5d9c 100644
--- a/tmp/eff811d5-c31b-4f9c-8f29-cccfddb77bb7_buggy.java
+++ b/tmp/da78b7cd-e21e-4f00-9c07-afb006e9b0d0_fixed.java
@@ -1,37 +1,48 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if(index + 1 < input.length() && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if(start < input.length()) {
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
                 }
 
                 int end = start;
-            while(input.charAt(end) != ';') {
+                while(end < input.length() && input.charAt(end) != ';') {
                     end++;
                 }
 
-            int entityValue;
+                if(end < input.length() && input.charAt(end) == ';') {
                     try {
+                        String entityStr = input.subSequence(start, end).toString();
+                        int entityValue;
                         if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                            entityValue = Integer.parseInt(entityStr, 16);
                         } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-                return 0;
+                            entityValue = Integer.parseInt(entityStr, 10);
                         }
 
+                        if(entityValue > 0xFFFF) {
+                            // Handle supplementary characters
+                            char[] surrogatePair = Character.toChars(entityValue);
+                            out.write(surrogatePair);
+                        } else {
                             out.write(entityValue);
+                        }
                         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                    } catch(NumberFormatException nfe) {
+                        return 0;
+                    }
+                }
+            }
         }
         return 0;
     }
\ No newline at end of file
