diff --git a/tmp/c88e7066-2e1b-41af-90ee-d7b09888f0c7_buggy.java b/tmp/775383d7-074d-4f0f-859b-4ff19dd28812_fixed.java
index 4bbd561..c12e265 100644
--- a/tmp/c88e7066-2e1b-41af-90ee-d7b09888f0c7_buggy.java
+++ b/tmp/775383d7-074d-4f0f-859b-4ff19dd28812_fixed.java
@@ -1,37 +1,58 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Check bounds first
+    if (index + 1 >= input.length()) {
+        return 0;
+    }
+
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= input.length()) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
-            int entityValue;
+        if (end >= input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
+
         try {
+            String entityStr = input.subSequence(start, end).toString();
+            int entityValue;
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(entityStr, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-                return 0;
+                entityValue = Integer.parseInt(entityStr, 10);
             }
 
+            // Handle supplementary characters (outside BMP)
+            if (entityValue > 0xFFFF) {
+                char[] surrogates = Character.toChars(entityValue);
+                out.write(surrogates[0]);
+                out.write(surrogates[1]);
+            } else {
                 out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            }
+
+            return end - index + 1;
+        } catch (NumberFormatException nfe) {
+            return 0;
+        }
     }
     return 0;
 }
\ No newline at end of file
