diff --git a/tmp/3c4dd4f6-7023-44c0-a1d3-05b8fe5dc904_buggy.java b/tmp/22e07df3-fbe8-4ab6-bd9c-410f751833af_fixed.java
index 4bbd561..074bdb8 100644
--- a/tmp/3c4dd4f6-7023-44c0-a1d3-05b8fe5dc904_buggy.java
+++ b/tmp/22e07df3-fbe8-4ab6-bd9c-410f751833af_fixed.java
@@ -1,37 +1,57 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        if (index + 1 >= input.length()) {
+            return 0;
+        }
+
         if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start >= input.length()) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
-            int entityValue;
+            if (end >= input.length()) {
+                return 0;
+            }
+
             try {
+                String entityStr = input.subSequence(start, end).toString();
+                int entityValue;
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(entityStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-                return 0;
+                    entityValue = Integer.parseInt(entityStr, 10);
                 }
 
+                if (entityValue > 0xFFFF) {
+                    // Handle supplementary characters
+                    char[] surrogatePair = Character.toChars(entityValue);
+                    out.write(surrogatePair[0]);
+                    out.write(surrogatePair[1]);
+                } else {
                     out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                }
+
+                return end - index + 1;
+            } catch (NumberFormatException nfe) {
+                return 0;
+            }
         }
         return 0;
     }
\ No newline at end of file
