diff --git a/tmp/d7d8ed4a-14e6-41e2-999f-57fa015e0963_buggy.java b/tmp/acba2d97-6fd9-4ebc-9527-290f9c5fe268_fixed.java
index 227a4ef..e6e0295 100644
--- a/tmp/d7d8ed4a-14e6-41e2-999f-57fa015e0963_buggy.java
+++ b/tmp/acba2d97-6fd9-4ebc-9527-290f9c5fe268_fixed.java
@@ -1,48 +1,64 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
-            } else
+        }
+
+        // Check if we're not making any progress
         if (pos == lastPos)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // If the text is too long, try to find a space to break at
+            int forcedBreak = width;
+            while (forcedBreak > 0 && !Character.isWhitespace(text.charAt(forcedBreak - 1)))
+            {
+                forcedBreak--;
+            }
+
+            if (forcedBreak > 0)
+            {
+                pos = forcedBreak;
+            }
+            else
+            {
+                // If we can't find a space, we have to break at the width limit
+                pos = width;
+            }
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+        if (pos == lastPos)
+        {
+            // If we're still stuck, we need to break the infinite loop
+            // by forcing a break at the width limit
+            text = padding + text.substring(pos).trim();
+            if (text.length() > width)
+            {
+                sb.append(rtrim(text.substring(0, width))).append(defaultNewLine);
+                text = padding + text.substring(width).trim();
+            }
+        }
     }
 }
\ No newline at end of file
