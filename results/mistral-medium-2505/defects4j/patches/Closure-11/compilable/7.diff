diff --git a/tmp/c1a32696-8be4-4d0b-8ba8-fb18903713b5_buggy.java b/tmp/fcd869da-d46d-4971-9034-1a6c6f6082eb_fixed.java
index 57c40b2..df6a2d4 100644
--- a/tmp/c1a32696-8be4-4d0b-8ba8-fb18903713b5_buggy.java
+++ b/tmp/fcd869da-d46d-4971-9034-1a6c6f6082eb_fixed.java
@@ -1,27 +1,20 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
       return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
+    } else if (!validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      return;
+    }
     checkPropertyAccess(childType, property.getString(), t, n);
-    }
     ensureTyped(t, n);
   }
\ No newline at end of file
