diff --git a/tmp/1f5192aa-cac6-4c03-ac1c-214051f40b02_buggy.java b/tmp/a8672565-3f57-42bb-8c7e-b62a2e9bfcdb_fixed.java
index 800e6e1..d85822c 100644
--- a/tmp/1f5192aa-cac6-4c03-ac1c-214051f40b02_buggy.java
+++ b/tmp/a8672565-3f57-42bb-8c7e-b62a2e9bfcdb_fixed.java
@@ -1,32 +1,43 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
+            // Handle namespaced function stubs
+            if (parent.getParent().getType() == Token.GETPROP) {
+              defineNamespacedFunctionStub(n, parent);
+            }
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.GETPROP:
+          // Handle property access that might be a function stub
+          if (n.getFirstChild().getType() == Token.NAME &&
+              n.getLastChild().getType() == Token.NAME) {
+            definePropertyFunctionStub(n, parent);
+          }
+          break;
       }
     }
\ No newline at end of file
