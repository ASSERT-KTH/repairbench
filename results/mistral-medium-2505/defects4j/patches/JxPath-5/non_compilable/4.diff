diff --git a/tmp/d7f37313-4178-47f7-a92a-0473f5b407a9_buggy.java b/tmp/d73b0dd1-124c-46ee-83f3-286360c02a47_fixed.java
index 5f8ac1a..27b4ae4 100644
--- a/tmp/d7f37313-4178-47f7-a92a-0473f5b407a9_buggy.java
+++ b/tmp/d73b0dd1-124c-46ee-83f3-286360c02a47_fixed.java
@@ -1,34 +1,44 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
 
         if (p1 != null && p1.equals(p2)) {
             return 0;
         }
 
-        if (depth1 == 1) {
+        if (depth1 == 1 && !areFromSameTree(p1, p2)) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
+
+    private boolean areFromSameTree(NodePointer p1, NodePointer p2) {
+        if (p1 == null || p2 == null) {
+            return false;
+        }
+        // Check if both pointers have the same root
+        NodePointer root1 = p1.getRootNodePointer();
+        NodePointer root2 = p2.getRootNodePointer();
+        return root1 != null && root2 != null && root1.equals(root2);
+    }
\ No newline at end of file
