diff --git a/tmp/5c4890d0-ae08-4a4c-b92a-cd9840d65b5b_buggy.java b/tmp/0509d4eb-dadc-4691-9417-6ddea74423d9_fixed.java
index 5f8ac1a..668b53d 100644
--- a/tmp/5c4890d0-ae08-4a4c-b92a-cd9840d65b5b_buggy.java
+++ b/tmp/0509d4eb-dadc-4691-9417-6ddea74423d9_fixed.java
@@ -1,34 +1,41 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
 
         if (p1 != null && p1.equals(p2)) {
             return 0;
         }
 
+        // Check if pointers are from different trees before comparing parents
+        if (p1 == null || p2 == null || p1.getRootNode() != p2.getRootNode()) {
+            throw new JXPathException(
+                    "Cannot compare pointers that do not belong to the same tree: '"
+                            + p1 + "' and '" + p2 + "'");
+        }
+
         if (depth1 == 1) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
