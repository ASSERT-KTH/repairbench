diff --git a/tmp/c9adb614-43df-4f37-95b0-58306eb36328_buggy.java b/tmp/b0b09877-e75b-483a-b677-cb6666808b4a_fixed.java
index 5f1dcf2..3315625 100644
--- a/tmp/c9adb614-43df-4f37-95b0-58306eb36328_buggy.java
+++ b/tmp/b0b09877-e75b-483a-b677-cb6666808b4a_fixed.java
@@ -1,41 +1,71 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = new RealPointValuePair[] {reflected};
+                    for (int i = 1; i < original.length; i++) {
+                        simplex = buildNewSimplex(simplex, original[i]);
+                    }
+                } else {
+                    // accept the expanded simplex
+                    simplex = new RealPointValuePair[] {expanded};
+                    for (int i = 1; i < original.length; i++) {
+                        simplex = buildNewSimplex(simplex, original[i]);
+                    }
                 }
 
+                // check convergence
+                if (isConverged()) {
                     return;
+                }
+                continue;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[] {contracted};
+                for (int i = 1; i < original.length; i++) {
+                    simplex = buildNewSimplex(simplex, original[i]);
+                }
+
+                // check convergence
+                if (isConverged()) {
+                    return;
+                }
+                continue;
+            }
+
+            // perform a shrink step
+            simplex = buildNewSimplex(new RealPointValuePair[] {best}, original[1]);
+            for (int i = 2; i < original.length; i++) {
+                simplex = buildNewSimplex(simplex, original[i]);
+            }
 
             // check convergence
+            if (isConverged()) {
                 return;
             }
 
         }
 
     }
\ No newline at end of file
