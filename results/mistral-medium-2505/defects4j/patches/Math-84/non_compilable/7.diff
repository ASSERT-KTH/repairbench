diff --git a/tmp/1a09aecf-a9f3-4c5a-babc-0357ece9c390_buggy.java b/tmp/68c73a4d-c9af-443e-a6c5-110fefb390d8_fixed.java
index 5f1dcf2..b7fa26c 100644
--- a/tmp/1a09aecf-a9f3-4c5a-babc-0357ece9c390_buggy.java
+++ b/tmp/68c73a4d-c9af-443e-a6c5-110fefb390d8_fixed.java
@@ -1,41 +1,46 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
-
             incrementIterationsCounter();
 
+            if (getIterations() > getMaxIterations()) {
+                throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+            }
+
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
-
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = original;
+                    simplex[simplex.length - 1] = reflected;
+                } else {
+                    // accept the expanded simplex
+                    simplex = original;
+                    simplex[simplex.length - 1] = expanded;
                 }
-
                 return;
-
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
+                simplex = original;
+                simplex[simplex.length - 1] = contracted;
                 return;
             }
 
+            // perform a shrink step
+            shrinkSimplex(comparator);
         }
-
     }
\ No newline at end of file
