diff --git a/tmp/dee1297d-9412-4e25-ba43-a1ee717e1f1e_buggy.java b/tmp/afeec98a-1155-419c-9e21-9a7a604cc355_fixed.java
index 5f1dcf2..88493f3 100644
--- a/tmp/dee1297d-9412-4e25-ba43-a1ee717e1f1e_buggy.java
+++ b/tmp/afeec98a-1155-419c-9e21-9a7a604cc355_fixed.java
@@ -1,41 +1,57 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = getSimplex();
                 }
 
                 return;
-
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = getSimplex();
+                return;
+            }
+
+            // perform a reduction step
+            final RealPointValuePair[] reduced = new RealPointValuePair[simplex.length];
+            for (int i = 1; i < simplex.length; ++i) {
+                final double[] reducedPoint = new double[best.getPoint().length];
+                for (int j = 0; j < reducedPoint.length; ++j) {
+                    reducedPoint[j] = (simplex[i].getPoint()[j] + best.getPoint()[j]) * 0.5;
+                }
+                reduced[i] = new RealPointValuePair(reducedPoint, Double.NaN);
+            }
+            reduced[0] = best;
+            simplex = reduced;
 
             // check convergence
+            if (isConverged()) {
                 return;
             }
-
         }
-
     }
\ No newline at end of file
