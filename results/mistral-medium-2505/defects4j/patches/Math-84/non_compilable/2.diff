diff --git a/tmp/100e9587-bd31-47cf-a2bb-df83a8a3cbe4_buggy.java b/tmp/d99df808-ded1-417a-8924-856b6ad621f5_fixed.java
index 5f1dcf2..70087ca 100644
--- a/tmp/100e9587-bd31-47cf-a2bb-df83a8a3cbe4_buggy.java
+++ b/tmp/d99df808-ded1-417a-8924-856b6ad621f5_fixed.java
@@ -1,41 +1,45 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
-
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
-
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
-
                 return;
-
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
+                simplex = getSimplexAround(contracted.getPoint());
                 // check convergence
+                if (convergenceChecker.converged(getIterations(), simplex)) {
                     return;
                 }
-
+                continue;
             }
 
+            // perform a reduction step
+            reduceSimplex();
+            // check convergence
+            if (convergenceChecker.converged(getIterations(), simplex)) {
+                return;
+            }
+        }
     }
\ No newline at end of file
