diff --git a/tmp/6dba3c02-3d2f-42ab-a10b-ec844b5d2304_buggy.java b/tmp/d31379bb-1bc6-4bae-80a8-120685f63274_fixed.java
index e69de29..8791acb 100644
--- a/tmp/6dba3c02-3d2f-42ab-a10b-ec844b5d2304_buggy.java
+++ b/tmp/d31379bb-1bc6-4bae-80a8-120685f63274_fixed.java
@@ -0,0 +1,41 @@
+@Override
+public SortedMap<K, V> prefixMap(final K key) {
+    if (key == null) {
+        return new UnmodifiableSortedMap<>(new TreeMap<K, V>());
+    }
+
+    final SortedMap<K, V> prefixMap = new TreeMap<>(new Comparator<K>() {
+        @Override
+        public int compare(final K k1, final K k2) {
+            return keyComparator.compare(k1, k2);
+        }
+    });
+
+    final K prefix = findPrefix(key);
+    if (prefix != null) {
+        final PatriciaTrie<K, V> subTrie = new PatriciaTrie<>(keyAnalyzer);
+        subTrie.root = new TrieNode<K, V>(null, null);
+        subTrie.root.addChild(new TrieNode<K, V>(prefix, getValueForExactKey(prefix)));
+
+        // Add all children of the prefix node
+        final TrieNode<K, V> prefixNode = getNode(prefix);
+        if (prefixNode != null) {
+            for (final TrieNode<K, V> child : prefixNode.children.values()) {
+                subTrie.root.addChild(child);
+            }
+        }
+
+        // Return a decorated map that will clear the correct nodes
+        return new UnmodifiableSortedMap<>(prefixMap) {
+            @Override
+            public void clear() {
+                // Remove all keys that start with the prefix
+                final Iterator<K> iterator = keySet().iterator();
+                while (iterator.hasNext()) {
+                    PatriciaTrie.this.remove(iterator.next());
+                }
+            }
+        };
+    }
+    return new UnmodifiableSortedMap<>(prefixMap);
+}
\ No newline at end of file
