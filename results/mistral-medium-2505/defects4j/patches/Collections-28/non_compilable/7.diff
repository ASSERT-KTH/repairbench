diff --git a/tmp/4a11dfc2-0213-46bb-b1a4-03d802ef951f_buggy.java b/tmp/9abdeaed-2a67-4ff8-b0bc-8fd449cdca14_fixed.java
index e69de29..c8bb445 100644
--- a/tmp/4a11dfc2-0213-46bb-b1a4-03d802ef951f_buggy.java
+++ b/tmp/9abdeaed-2a67-4ff8-b0bc-8fd449cdca14_fixed.java
@@ -0,0 +1,40 @@
+@Override
+public SortedMap<K, V> prefixMap(final K key) {
+    if (key == null) {
+        return new UnmodifiableSortedMap<>(new TreeMap<K, V>());
+    }
+
+    final PatriciaTrie<K, V> prefixTrie = new PatriciaTrie<>();
+    final Iterator<Entry<K, V>> iterator = entryIterator(key, null);
+
+    while (iterator.hasNext()) {
+        final Entry<K, V> entry = iterator.next();
+        prefixTrie.put(entry.getKey(), entry.getValue());
+    }
+
+    return new PrefixMap<>(this, prefixTrie, key);
+}
+
+private static class PrefixMap<K, V> extends AbstractSortedMap<K, V> {
+    private final PatriciaTrie<K, V> parent;
+    private final PatriciaTrie<K, V> prefixTrie;
+    private final K prefix;
+
+    PrefixMap(PatriciaTrie<K, V> parent, PatriciaTrie<K, V> prefixTrie, K prefix) {
+        this.parent = parent;
+        this.prefixTrie = prefixTrie;
+        this.prefix = prefix;
+    }
+
+    @Override
+    public void clear() {
+        // Remove all entries from the parent trie that start with the prefix
+        final Iterator<K> keyIterator = prefixTrie.keySet().iterator();
+        while (keyIterator.hasNext()) {
+            parent.remove(keyIterator.next());
+        }
+        prefixTrie.clear();
+    }
+
+    // ... other required methods ...
+}
\ No newline at end of file
