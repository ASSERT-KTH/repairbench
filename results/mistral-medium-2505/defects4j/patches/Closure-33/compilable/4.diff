diff --git a/tmp/90c7e707-bbfd-4643-9acc-54417a787ca5_buggy.java b/tmp/14e48a50-31e5-40a7-aa44-f16f641ce788_fixed.java
index fb2b020..e6151d8 100644
--- a/tmp/90c7e707-bbfd-4643-9acc-54417a787ca5_buggy.java
+++ b/tmp/14e48a50-31e5-40a7-aa44-f16f641ce788_fixed.java
@@ -1,27 +1,30 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
+        // Only define the inferred property if the type is not UNKNOWN
+        if (!typeToInfer.isUnknownType()) {
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
+}
\ No newline at end of file
