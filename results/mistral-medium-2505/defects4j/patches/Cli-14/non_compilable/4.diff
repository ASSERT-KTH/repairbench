diff --git a/tmp/dd236b3e-2f89-493a-bcc5-7b22896f27c0_buggy.java b/tmp/ec558432-d655-4988-80eb-a748a1a2ac64_fixed.java
index 71189c3..783bcea 100644
--- a/tmp/dd236b3e-2f89-493a-bcc5-7b22896f27c0_buggy.java
+++ b/tmp/ec558432-d655-4988-80eb-a748a1a2ac64_fixed.java
@@ -1,46 +1,59 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
             // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
                 option.validate(commandLine);
             }
 
             // if the child option is present then validate it
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
-
                     break;
                 }
 
+                // Get the value before validation to handle type conversion
+                Object value = commandLine.getValue(option);
+                if (value != null) {
+                    // If there's a validator, let it handle the type conversion
+                    if (option.getArgument() != null && option.getArgument().getValidator() != null) {
+                        try {
+                            option.getArgument().getValidator().validate(value);
+                        } catch (ClassCastException e) {
+                            // Handle type conversion error
+                            throw new OptionException(this, ResourceConstants.UNEXPECTED_TYPE,
+                                                    option.getPreferredName());
+                        }
+                    }
+                }
                 option.validate(commandLine);
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
