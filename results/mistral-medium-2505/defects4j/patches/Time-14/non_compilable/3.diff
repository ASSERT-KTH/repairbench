diff --git a/tmp/b8cc769b-207a-459c-a73d-b9f9283eabaa_buggy.java b/tmp/7189591e-e3b1-404d-93c7-c946a200ae28_fixed.java
index 10616db..2a16391 100644
--- a/tmp/b8cc769b-207a-459c-a73d-b9f9283eabaa_buggy.java
+++ b/tmp/7189591e-e3b1-404d-93c7-c946a200ae28_fixed.java
@@ -1,19 +1,32 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            int[] result = iChronology.get(partial, instant);
+
+            // Handle leap day case (February 29)
+            if (partial instanceof MonthDay &&
+                values[1] == 29 && values[0] == 2 &&
+                result[1] != 29 && result[0] == 2) {
+                // If we ended up with February 28, adjust to last day of month
+                // This handles cases where we move from a leap year to non-leap year
+                int year = iChronology.year().get(instant);
+                int month = result[0];
+                int maxDay = iChronology.getDaysInMonthMax(year, month);
+                result[1] = Math.min(result[1], maxDay);
+            }
+            return result;
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
