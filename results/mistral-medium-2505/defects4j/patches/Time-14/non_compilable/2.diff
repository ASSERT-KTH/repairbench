diff --git a/tmp/132b659c-8d32-4d1d-8a8f-a2a26600c20b_buggy.java b/tmp/5dd38802-1cd9-4b4d-9fb9-b249062ebcc9_fixed.java
index 10616db..cbd96c8 100644
--- a/tmp/132b659c-8d32-4d1d-8a8f-a2a26600c20b_buggy.java
+++ b/tmp/5dd38802-1cd9-4b4d-9fb9-b249062ebcc9_fixed.java
@@ -1,19 +1,33 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            int[] result = iChronology.get(partial, instant);
+
+            // Handle leap day adjustment
+            if (partial instanceof MonthDay) {
+                int month = result[0];
+                int day = result[1];
+                if (day > 28 && month == 2) {
+                    // Check if the day is valid for February
+                    if (!iChronology.year().isLeap(iChronology.getYearOfEra(instant))) {
+                        // Adjust to last day of February
+                        result[1] = 28;
+                    }
+                }
+            }
+            return result;
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
