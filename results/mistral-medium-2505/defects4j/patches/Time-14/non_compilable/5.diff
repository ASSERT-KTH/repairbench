diff --git a/tmp/800f3ab0-e743-4a37-8054-7d30c1b890ee_buggy.java b/tmp/3e293d01-55ac-4538-8959-6243fe3b781a_fixed.java
index 10616db..5a6dff4 100644
--- a/tmp/800f3ab0-e743-4a37-8054-7d30c1b890ee_buggy.java
+++ b/tmp/3e293d01-55ac-4538-8959-6243fe3b781a_fixed.java
@@ -1,19 +1,41 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            int[] result = iChronology.get(partial, instant);
+
+            // Handle February 29th case when adding months
+            if (partial instanceof MonthDay) {
+                int month = result[0];
+                int day = result[1];
+                if (month == 2 && day == 29) {
+                    // Check if the resulting year is not a leap year
+                    int year = iChronology.year().get(instant);
+                    if (!iChronology.year().isLeap(year)) {
+                        // Adjust to February 28th
+                        result[1] = 28;
+                    }
+                } else if (month == 2 && day == 28) {
+                    // Check if we're coming from a leap day addition
+                    int year = iChronology.year().get(instant);
+                    if (iChronology.year().isLeap(year)) {
+                        // Adjust to February 29th
+                        result[1] = 29;
+                    }
+                }
+            }
+            return result;
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
