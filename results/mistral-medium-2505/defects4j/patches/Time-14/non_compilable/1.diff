diff --git a/tmp/a49acdee-b67c-42e6-a8bc-a5a52b3c2c89_buggy.java b/tmp/a7e609df-8c1e-467d-b2e0-3b8257d34f28_fixed.java
index 10616db..0c95dbb 100644
--- a/tmp/a49acdee-b67c-42e6-a8bc-a5a52b3c2c89_buggy.java
+++ b/tmp/a7e609df-8c1e-467d-b2e0-3b8257d34f28_fixed.java
@@ -1,19 +1,34 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            int[] result = iChronology.get(partial, instant);
+
+            // Handle February 29th case when month changes
+            if (partial instanceof MonthDay && values[0] == 2 && values[1] == 29) {
+                if (result[0] != 2) {
+                    // If we've moved out of February, adjust the day
+                    result[1] = Math.min(result[1], iChronology.getDaysInMonthMax(result[0]));
+                } else {
+                    // If we're still in February, ensure day is valid
+                    int year = iChronology.year().get(instant);
+                    if (!iChronology.isLeapYear(year)) {
+                        result[1] = 28;
+                    }
+                }
+            }
+            return result;
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
