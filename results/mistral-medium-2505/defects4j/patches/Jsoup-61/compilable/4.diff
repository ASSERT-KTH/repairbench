diff --git a/tmp/b769b072-31ca-4abb-8b4d-5b636ad7b973_buggy.java b/tmp/3ecc8b24-51b6-4e1e-af2c-8aa88f1bb0c2_fixed.java
index 139579d..c4dae30 100644
--- a/tmp/b769b072-31ca-4abb-8b4d-5b636ad7b973_buggy.java
+++ b/tmp/3ecc8b24-51b6-4e1e-af2c-8aa88f1bb0c2_fixed.java
@@ -1,43 +1,62 @@
     // performance sensitive
     public boolean hasClass(String className) {
         final String classAttr = attributes.get("class");
         final int len = classAttr.length();
         final int wantLen = className.length();
 
         if (len == 0 || len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
         // check the last entry
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
+        // check if the className is a substring of the last class in the attribute
+        if (inClass && len - start > wantLen) {
+            for (int i = start; i <= len - wantLen; i++) {
+                if (classAttr.regionMatches(true, i, className, 0, wantLen)) {
+                    // check if the match is a whole word (not part of another class name)
+                    boolean isWholeWord = true;
+                    if (i > start && !Character.isWhitespace(classAttr.charAt(i - 1))) {
+                        isWholeWord = false;
+                    }
+                    if (i + wantLen < len && !Character.isWhitespace(classAttr.charAt(i + wantLen))) {
+                        isWholeWord = false;
+                    }
+                    if (isWholeWord) {
+                        return true;
+                    }
+                }
+            }
+        }
+
         return false;
     }
\ No newline at end of file
