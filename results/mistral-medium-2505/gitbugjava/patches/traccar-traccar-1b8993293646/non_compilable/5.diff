diff --git a/tmp/78c3694d-c8c8-4c9e-9fd4-85f905c2c335_buggy.java b/tmp/f57c4590-465a-4b78-a447-666f2455bfe0_fixed.java
index 7374e5f..fe96d0a 100644
--- a/tmp/78c3694d-c8c8-4c9e-9fd4-85f905c2c335_buggy.java
+++ b/tmp/f57c4590-465a-4b78-a447-666f2455bfe0_fixed.java
@@ -1,61 +1,65 @@
     private Object decodeLocationNew(
             Channel channel, SocketAddress remoteAddress, String sentence) {
 
         Parser parser = new Parser(PATTERN_NEW, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         String imei = parser.next();
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         String index = parser.next();
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
 
         position.setDeviceTime(parser.nextDateTime());
 
         Network network = new Network();
         network.addCellTower(CellTower.from(
                 parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
         position.set(Position.KEY_BATTERY, parser.nextDouble());
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         position.set(Position.KEY_STATUS, parser.nextHexInt());
 
-        if (parser.hasNext(5)) {
-
-            position.setValid(parser.next().equals("A"));
+        if (parser.hasNext(1)) {  // Check if there's at least one more field
+            String nextField = parser.next();
+            if (nextField.equals("A") || nextField.equals("V")) {
+                // This is a position with coordinates
+                position.setValid(nextField.equals("A"));
                 position.setFixTime(position.getDeviceTime());
                 position.set(Position.KEY_SATELLITES, parser.nextInt());
                 position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
                 position.setLatitude(parser.nextDouble());
                 position.setLongitude(parser.nextDouble());
-
             } else {
-
+                // This is a position with WiFi points
+                parser.previous();  // Put back the field we just read
                 String[] points = parser.next().split("\\|");
                 for (String point : points) {
                     String[] wifi = point.split(":");
+                    if (wifi.length >= 2) {
                         String mac = wifi[0].replaceAll("(..)", "$1:");
                         network.addWifiAccessPoint(WifiAccessPoint.from(
                                 mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
                     }
-
+                }
+            }
         }
 
         position.setNetwork(network);
 
         DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
         String response = index + ",A03," + dateFormat.format(new Date());
         sendResponse(channel, remoteAddress, imei, response);
 
         return position;
     }
\ No newline at end of file
