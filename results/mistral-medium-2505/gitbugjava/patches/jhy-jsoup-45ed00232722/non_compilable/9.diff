diff --git a/tmp/a013f301-6e25-4eee-95d3-f81df1949f7f_buggy.java b/tmp/64774b9b-b710-4aba-b53e-1591340c7326_fixed.java
index 855afa5..1db1a9c 100644
--- a/tmp/a013f301-6e25-4eee-95d3-f81df1949f7f_buggy.java
+++ b/tmp/64774b9b-b710-4aba-b53e-1591340c7326_fixed.java
@@ -1,13 +1,30 @@
 static URL encodeUrl(URL u) {
     u = punyUrl(u);
     try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
+        // properly encode the URL by breaking it into components and encoding each part
+        String protocol = u.getProtocol();
+        String authority = u.getAuthority();
+        String path = u.getPath();
+        String query = u.getQuery();
+        String ref = u.getRef();
+
+        // encode each component separately
+        String encodedPath = URLEncoder.encode(path, "UTF-8").replace("%2F", "/").replace("%3A", ":");
+        String encodedQuery = query != null ? URLEncoder.encode(query, "UTF-8") : null;
+        String encodedRef = ref != null ? URLEncoder.encode(ref, "UTF-8") : null;
+
+        // reconstruct the URL with encoded components
+        String encodedUrl = protocol + "://" + authority + encodedPath;
+        if (encodedQuery != null) {
+            encodedUrl += "?" + encodedQuery;
+        }
+        if (encodedRef != null) {
+            encodedUrl += "#" + encodedRef;
+        }
+
+        return new URL(encodedUrl);
+    } catch (Exception e) {
         // give up and return the original input
         return u;
     }
 }
\ No newline at end of file
