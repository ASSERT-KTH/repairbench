diff --git a/tmp/3f811b2f-abe8-4cf3-8245-257efb2effeb_buggy.java b/tmp/51b5e965-a9ca-43db-8746-ea77816ea72b_fixed.java
index 855afa5..bf68df8 100644
--- a/tmp/3f811b2f-abe8-4cf3-8245-257efb2effeb_buggy.java
+++ b/tmp/51b5e965-a9ca-43db-8746-ea77816ea72b_fixed.java
@@ -1,13 +1,46 @@
     static URL encodeUrl(URL u) {
         u = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
+            // properly encode all components of the URL
+            String protocol = u.getProtocol();
+            String authority = u.getAuthority();
+            String path = u.getPath();
+            String query = u.getQuery();
+            String ref = u.getRef();
+
+            // encode each component separately
+            String encodedPath = encodeComponent(path);
+            String encodedQuery = encodeComponent(query);
+            String encodedRef = encodeComponent(ref);
+
+            // reconstruct the URL with encoded components
+            String urlS = protocol + "://" + authority + encodedPath;
+            if (encodedQuery != null && !encodedQuery.isEmpty()) {
+                urlS += "?" + encodedQuery;
+            }
+            if (encodedRef != null && !encodedRef.isEmpty()) {
+                urlS += "#" + encodedRef;
+            }
+
+            return new URL(urlS);
+        } catch (MalformedURLException e) {
             // give up and return the original input
             return u;
         }
     }
+
+    private static String encodeComponent(String component) {
+        if (component == null) {
+            return null;
+        }
+        try {
+            return URLEncoder.encode(component, "UTF-8")
+                .replace("%2F", "/") // don't encode slashes
+                .replace("%3A", ":") // don't encode colons
+                .replace("%3F", "?") // don't encode question marks
+                .replace("%3D", "=") // don't encode equals
+                .replace("%26", "&"); // don't encode ampersands
+        } catch (UnsupportedEncodingException e) {
+            return component;
+        }
+    }
\ No newline at end of file
