diff --git a/tmp/e94b5cec-7fad-4523-8b58-852058fd0d33_buggy.java b/tmp/e45877bc-8ea7-4dd9-a38f-f119817f0231_fixed.java
index 855afa5..2ec46e3 100644
--- a/tmp/e94b5cec-7fad-4523-8b58-852058fd0d33_buggy.java
+++ b/tmp/e45877bc-8ea7-4dd9-a38f-f119817f0231_fixed.java
@@ -1,13 +1,44 @@
     static URL encodeUrl(URL u) {
         u = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
+            // Properly encode the URL components
+            String protocol = u.getProtocol();
+            String authority = u.getAuthority();
+            String path = u.getPath();
+            String query = u.getQuery();
+            String ref = u.getRef();
+
+            // Encode each component separately
+            String encodedPath = path != null ? encodeURIComponent(path) : "";
+            String encodedQuery = query != null ? encodeURIComponent(query) : "";
+            String encodedRef = ref != null ? encodeURIComponent(ref) : "";
+
+            // Reconstruct the URL with encoded components
+            String urlS = protocol + "://" + authority + encodedPath;
+            if (encodedQuery != null && !encodedQuery.isEmpty()) {
+                urlS += "?" + encodedQuery;
+            }
+            if (encodedRef != null && !encodedRef.isEmpty()) {
+                urlS += "#" + encodedRef;
+            }
+
+            return new URL(urlS);
+        } catch (MalformedURLException e) {
             // give up and return the original input
             return u;
         }
     }
+
+    private static String encodeURIComponent(String component) {
+        try {
+            return URLEncoder.encode(component, "UTF-8")
+                .replaceAll("\\+", "%20")
+                .replaceAll("\\%21", "!")
+                .replaceAll("\\%27", "'")
+                .replaceAll("\\%28", "(")
+                .replaceAll("\\%29", ")")
+                .replaceAll("\\%7E", "~");
+        } catch (UnsupportedEncodingException e) {
+            return component;
+        }
+    }
\ No newline at end of file
