diff --git a/tmp/d1341c6e-f188-41f5-ace8-ce93a395383e_buggy.java b/tmp/444c4663-5996-4f10-af5c-1b6345f31390_fixed.java
index 855afa5..5ffc382 100644
--- a/tmp/d1341c6e-f188-41f5-ace8-ce93a395383e_buggy.java
+++ b/tmp/444c4663-5996-4f10-af5c-1b6345f31390_fixed.java
@@ -1,13 +1,53 @@
     static URL encodeUrl(URL u) {
         u = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
+            // properly encode the URL components
+            String protocol = u.getProtocol();
+            String authority = u.getAuthority();
+            String path = u.getPath();
+            String query = u.getQuery();
+            String ref = u.getRef();
+
+            // encode each component separately
+            path = encodeURIComponent(path);
+            query = encodeURIComponent(query);
+            ref = encodeURIComponent(ref);
+
+            // reconstruct the URL
+            String urlS = protocol + "://" + authority + path;
+            if (query != null) {
+                urlS += "?" + query;
+            }
+            if (ref != null) {
+                urlS += "#" + ref;
+            }
+
+            return new URL(urlS);
+        } catch (MalformedURLException e) {
             // give up and return the original input
             return u;
         }
     }
+
+    private static String encodeURIComponent(String component) {
+        if (component == null) return null;
+        try {
+            return URLEncoder.encode(component, "UTF-8")
+                .replaceAll("\\+", "%20")
+                .replaceAll("\\%21", "!")
+                .replaceAll("\\%27", "'")
+                .replaceAll("\\%28", "(")
+                .replaceAll("\\%29", ")")
+                .replaceAll("\\%2C", ",")
+                .replaceAll("\\%2F", "/")
+                .replaceAll("\\%3A", ":")
+                .replaceAll("\\%3B", ";")
+                .replaceAll("\\%3D", "=")
+                .replaceAll("\\%3F", "?")
+                .replaceAll("\\%40", "@")
+                .replaceAll("\\%5B", "[")
+                .replaceAll("\\%5D", "]");
+        } catch (UnsupportedEncodingException e) {
+            return component;
+        }
+    }
\ No newline at end of file
