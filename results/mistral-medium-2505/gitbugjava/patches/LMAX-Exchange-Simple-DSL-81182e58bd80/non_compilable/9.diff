diff --git a/tmp/d024f678-7a8c-4b8d-be51-a3f655f38dfe_buggy.java b/tmp/012c81bb-a114-40a3-bc2f-a73ecc8a19ed_fixed.java
index f506479..0ce46e6 100644
--- a/tmp/d024f678-7a8c-4b8d-be51-a3f655f38dfe_buggy.java
+++ b/tmp/012c81bb-a114-40a3-bc2f-a73ecc8a19ed_fixed.java
@@ -1,64 +1,124 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
         if (argument.name == null)
         {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
         if (arg == null)
         {
             break;
         }
 
         final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
         if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
         {
             break;
         }
 
         checkValidValue(arg, argument.value);
         argValues.add(argument.value);
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
+    // Process any remaining values that might belong to the current group
+    while (!arguments.isEmpty())
+    {
+        final NameValuePair argument = arguments.peekFirst();
+        if (argument == NameValuePair.NULL)
+        {
+            arguments.pollFirst();
+            continue;
+        }
+
+        // If we find another group identity, we're done with this group
+        if (argument.name != null && argument.name.equalsIgnoreCase(groupArg.getIdentity().getName()))
+        {
+            break;
+        }
+
+        // If we find a parameter that belongs to this group, process it
+        if (argument.name != null)
+        {
+            final DslArg arg = argsByName.get(argument.name.toLowerCase());
+            if (arg != null)
+            {
+                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
+                {
+                    break;
+                }
+
+                checkValidValue(arg, argument.value);
+                argValues.add(argument.value);
+                arguments.pollFirst();
+                continue;
+            }
+        }
+
+        // If we get here, it's either a value for the last parameter or an invalid argument
+        if (!valuesByArg.isEmpty())
+        {
+            // Get the last parameter that was processed
+            DslArg lastArg = null;
+            for (DslArg arg : valuesByArg.keySet())
+            {
+                if (lastArg == null || valuesByArg.get(arg).size() > valuesByArg.get(lastArg).size())
+                {
+                    lastArg = arg;
+                }
+            }
+
+            if (lastArg != null && lastArg.isAllowMultipleValues())
+            {
+                final List<String> argValues = valuesByArg.get(lastArg);
+                checkValidValue(lastArg, argument.value);
+                argValues.add(argument.value);
+                arguments.pollFirst();
+                continue;
+            }
+        }
+
+        break;
+    }
+
     final Map<String, List<String>> valuesByName = new HashMap<>();
     for (final SimpleDslArg simpleDslArg : argsByName.values())
     {
         final SimpleDslParam param = processor.collect(simpleDslArg);
         if (param.hasValue())
         {
             valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
         }
     }
 
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
     groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
 }
\ No newline at end of file
