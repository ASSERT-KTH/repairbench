diff --git a/tmp/815cb1bf-4d6b-4ec4-a164-c6ab15ddfd3f_buggy.java b/tmp/f3cb89ed-793e-47e5-8cba-df513523be77_fixed.java
index 2444d12..69a0c67 100644
--- a/tmp/815cb1bf-4d6b-4ec4-a164-c6ab15ddfd3f_buggy.java
+++ b/tmp/f3cb89ed-793e-47e5-8cba-df513523be77_fixed.java
@@ -1,29 +1,32 @@
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
         Scanner tokens = new Scanner(exp);
 
         while (tokens.hasNext()) {
             if (tokens.hasNextInt()) {
                 s.push(tokens.nextInt()); // If int then push to stack
             } else { // else pop top two values and perform the operation
+                if (s.size() < 2) {
+                    throw new IllegalArgumentException("exp is not a proper postfix expression (too few arguments).");
+                }
                 int num2 = s.pop();
                 int num1 = s.pop();
                 String op = tokens.next();
 
                 switch (op) {
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
                     case "/" -> s.push(num1 / num2);
                     default -> throw new IllegalArgumentException("exp contains an unknown operation.");
                 }
                 //  "+", "-", "*", "/"
             }
         }
         tokens.close();
         if (s.size() != 1) {
             throw new IllegalArgumentException("exp is not a proper postfix expression.");
         }
         return s.pop();
     }
