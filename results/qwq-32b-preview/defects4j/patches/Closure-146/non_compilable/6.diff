diff --git a/tmp/d294d65b-8bdb-4a96-99d2-32c06b74815c_buggy.java b/tmp/0054ab47-dc3a-4a7b-9a6f-f62b08a9c037_fixed.java
index 210695a..711e258 100644
--- a/tmp/d294d65b-8bdb-4a96-99d2-32c06b74815c_buggy.java
+++ b/tmp/0054ab47-dc3a-4a7b-9a6f-f62b08a9c037_fixed.java
@@ -1,32 +1,25 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+    // Handle unions types
     if (that instanceof UnionType) {
         TypePair p = that.getTypesUnderInequality(this);
         return new TypePair(p.typeB, p.typeA);
     }
 
-    // other types
+    // Handle both types being VoidType
+    if (this.isVoid() && that.isVoid()) {
+        return new TypePair(NO_TYPE, NO_TYPE);
+    }
+
+    // Other types
     switch (this.testForEquality(that)) {
         case TRUE:
             return new TypePair(null, null);
 
         case FALSE:
         case UNKNOWN:
             return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
 }
\ No newline at end of file
