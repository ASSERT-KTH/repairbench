diff --git a/tmp/aedf9aa1-a890-417e-b622-8d9b5a0a3e62_buggy.java b/tmp/7fc016cc-1da3-4456-9a07-3d2f5bd23fa4_fixed.java
index 210695a..6e7d8a3 100644
--- a/tmp/aedf9aa1-a890-417e-b622-8d9b5a0a3e62_buggy.java
+++ b/tmp/7fc016cc-1da3-4456-9a07-3d2f5bd23fa4_fixed.java
@@ -1,32 +1,29 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+    // Handle union types
     if (that instanceof UnionType) {
         TypePair p = that.getTypesUnderInequality(this);
         return new TypePair(p.typeB, p.typeA);
     }
 
-    // other types
+    // Handle other types
     switch (this.testForEquality(that)) {
         case TRUE:
+            // If equality is certain, return null for both types
             return new TypePair(null, null);
-
         case FALSE:
+            // If inequality is certain, return the current types
+            return new TypePair(this, that);
         case UNKNOWN:
+            // If equality is unknown, attempt to refine types
+            if (this.isVoid() && that.isVoid()) {
+                // Both are undefined, which are always equal, so under inequality, types are bottom
+                return new TypePair(NO_TYPE, NO_TYPE);
+            } else {
+                // For other cases where equality is unknown, keep the current types
                 return new TypePair(this, that);
             }
+    }
 
     // switch case is exhaustive
     throw new IllegalStateException();
 }
\ No newline at end of file
