diff --git a/tmp/5d62584c-cd30-40b2-b207-769afb364d99_buggy.java b/tmp/69a446d1-f6f9-467c-87b3-ffeb0e8c6e08_fixed.java
index 210695a..3d4c8b2 100644
--- a/tmp/5d62584c-cd30-40b2-b207-769afb364d99_buggy.java
+++ b/tmp/69a446d1-f6f9-467c-87b3-ffeb0e8c6e08_fixed.java
@@ -1,32 +1,4 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
-  public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
-    if (that instanceof UnionType) {
-      TypePair p = that.getTypesUnderInequality(this);
-      return new TypePair(p.typeB, p.typeA);
-    }
 
-    // other types
-    switch (this.testForEquality(that)) {
 case TRUE:
+
     return new TypePair(null, null);
-
-      case FALSE:
-      case UNKNOWN:
-        return new TypePair(this, that);
-    }
-
-    // switch case is exhaustive
-    throw new IllegalStateException();
-  }
