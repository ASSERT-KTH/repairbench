diff --git a/tmp/25be7151-41ff-42a3-b6a6-91e37870400c_buggy.java b/tmp/79db0a22-5935-4145-aec1-f95bf52b2d89_fixed.java
index 210695a..36e498d 100644
--- a/tmp/25be7151-41ff-42a3-b6a6-91e37870400c_buggy.java
+++ b/tmp/79db0a22-5935-4145-aec1-f95bf52b2d89_fixed.java
@@ -1,32 +1,33 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+  // Handle union types
   if (that instanceof UnionType) {
-      TypePair p = that.getTypesUnderInequality(this);
-      return new TypePair(p.typeB, p.typeA);
+    UnionType ut = (UnionType) that;
+    JSType refinedThis = this;
+    JSType refinedThat = null;
+    for (JSType constituent : ut.getConstituents()) {
+      TypePair p = this.getTypesUnderInequality(constituent);
+      if (p.typeA != null) {
+        refinedThis = refinedThis.intersection(p.typeA);
+      }
+      if (p.typeB != null) {
+        refinedThat = refinedThat == null ? p.typeB : refinedThat.intersection(p.typeB);
+      }
+    }
+    return new TypePair(refinedThis, refinedThat);
   }
 
-    // other types
+  // Handle other types
   switch (this.testForEquality(that)) {
     case TRUE:
+      // If types are always equal, no restriction under inequality
       return new TypePair(null, null);
 
     case FALSE:
     case UNKNOWN:
+      // If types can be unequal, restrict to the current types
       return new TypePair(this, that);
   }
 
   // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
