diff --git a/tmp/c3e9c27a-8a75-4067-980e-504bcd259feb_buggy.java b/tmp/26120122-41ca-4fb5-98e6-ccee8afeb21f_fixed.java
index 210695a..7bb991a 100644
--- a/tmp/c3e9c27a-8a75-4067-980e-504bcd259feb_buggy.java
+++ b/tmp/26120122-41ca-4fb5-98e6-ccee8afeb21f_fixed.java
@@ -1,32 +1,26 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+  // Handle union types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
-    // other types
+  // Handle other types
   switch (this.testForEquality(that)) {
     case TRUE:
+      // If equality is certain, no restriction under inequality
       return new TypePair(null, null);
 
     case FALSE:
+      // If inequality is certain, return the current types
+      return new TypePair(this, that);
+
     case UNKNOWN:
+      // If equality is unknown, assume possible inequality
+      // and restrict types accordingly
       return new TypePair(this, that);
   }
 
   // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
