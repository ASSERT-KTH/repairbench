diff --git a/tmp/e20c040b-5e20-4227-bd90-c92d0f2a4747_buggy.java b/tmp/26b2d90c-9c5a-40fe-b446-f4c389a41749_fixed.java
index 19fe1b4..d75ef1e 100644
--- a/tmp/e20c040b-5e20-4227-bd90-c92d0f2a4747_buggy.java
+++ b/tmp/26b2d90c-9c5a-40fe-b446-f4c389a41749_fixed.java
@@ -1,17 +1,48 @@
 public static boolean isJSIdentifier(String s) {
+    if (s == null || s.isEmpty()) {
+        return false;
+    }
+
     int length = s.length();
 
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+    // Check first character
+    char firstChar = s.charAt(0);
+    if (!Character.isLetter(firstChar) && firstChar != '$' && firstChar != '_') {
         return false;
     }
 
+    // Check the rest of the characters
     for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+        char c = s.charAt(i);
+        if (!Character.isLetterOrDigit(c) && c != '$' && c != '_') {
             return false;
         }
     }
 
+    // Check if it's a JavaScript reserved word
+    if (isJavaScriptReservedWord(s)) {
+        return false;
+    }
+
     return true;
 }
+
+private static boolean isJavaScriptReservedWord(String s) {
+    String[] reservedWords = {
+        "break", "case", "catch", "class", "const", "continue", "debugger", "default", "delete",
+        "do", "else", "export", "extends", "finally", "for", "function", "if", "import", "in",
+        "instanceof", "new", "return", "super", "switch", "this", "throw", "try", "typeof", "var",
+        "void", "while", "with", "yield", "enum", "implements", "interface", "let", "package",
+        "private", "protected", "public", "static", "await", "abstract", "boolean", "byte",
+        "char", "double", "final", "float", "goto", "int", "long", "native", "short", "synchronized",
+        "throws", "transient", "volatile"
+    };
+
+    for (String word : reservedWords) {
+        if (s.equals(word)) {
+            return true;
+        }
+    }
+
+    return false;
+}
\ No newline at end of file
