diff --git a/tmp/9350a618-9dfe-4809-b083-a35f98b1a0df_buggy.java b/tmp/e25c26f3-6c56-4884-84e8-6f2895221ec7_fixed.java
index 735a993..f27c046 100644
--- a/tmp/9350a618-9dfe-4809-b083-a35f98b1a0df_buggy.java
+++ b/tmp/e25c26f3-6c56-4884-84e8-6f2895221ec7_fixed.java
@@ -1,29 +1,23 @@
-    /**
-     * Appends an object to the builder padding on the right to a fixed length.
-     * The <code>toString</code> of the object is used.
-     * If the object is larger than the length, the right hand side is lost.
-     * If the object is null, null text value is used.
-     * 
-     * @param obj  the object to append, null uses null text
-     * @param width  the fixed field width, zero or negative has no effect
-     * @param padChar  the pad character to use
-     * @return this, to enable chaining
-     */
 public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {
     if (width > 0) {
+        // Ensure the buffer has enough capacity
         ensureCapacity(size + width);
+        
         String str = (obj == null ? getNullText() : obj.toString());
         int strLen = str.length();
+        
+        // If the string is longer than the width, truncate it
         if (strLen >= width) {
-                str.getChars(0, strLen, buffer, size);
+            str.getChars(0, width, buffer, size);
+            size += width;
         } else {
-                int padLen = width - strLen;
+            // Append the string and pad with the specified character
             str.getChars(0, strLen, buffer, size);
-                for (int i = 0; i < padLen; i++) {
+            for (int i = 0; i < (width - strLen); i++) {
                 buffer[size + strLen + i] = padChar;
             }
-            }
             size += width;
         }
+    }
     return this;
 }
\ No newline at end of file
