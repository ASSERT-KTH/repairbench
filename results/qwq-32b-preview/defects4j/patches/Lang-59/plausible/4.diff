diff --git a/tmp/11e41b1d-6626-49ce-a5d0-ecc63ecd3628_buggy.java b/tmp/fb4f8621-4d28-4d7b-a28d-91b2a73f7e5e_fixed.java
index 735a993..718e30f 100644
--- a/tmp/11e41b1d-6626-49ce-a5d0-ecc63ecd3628_buggy.java
+++ b/tmp/fb4f8621-4d28-4d7b-a28d-91b2a73f7e5e_fixed.java
@@ -1,29 +1,36 @@
 /**
  * Appends an object to the builder padding on the right to a fixed length.
  * The <code>toString</code> of the object is used.
  * If the object is larger than the length, the right hand side is lost.
  * If the object is null, null text value is used.
  * 
  * @param obj  the object to append, null uses null text
  * @param width  the fixed field width, zero or negative has no effect
  * @param padChar  the pad character to use
  * @return this, to enable chaining
  */
 public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {
-        if (width > 0) {
+    if (width <= 0) {
+        return this; // No effect for zero or negative width
+    }
+
     ensureCapacity(size + width);
+
     String str = (obj == null ? getNullText() : obj.toString());
     int strLen = str.length();
+
     if (strLen >= width) {
-                str.getChars(0, strLen, buffer, size);
+        // If string is longer or equal to width, truncate to width
+        str.getChars(0, width, buffer, size);
+        size += width;
     } else {
-                int padLen = width - strLen;
+        // If string is shorter than width, pad with padChar
         str.getChars(0, strLen, buffer, size);
-                for (int i = 0; i < padLen; i++) {
-                    buffer[size + strLen + i] = padChar;
-                }
+        for (int i = strLen; i < width; i++) {
+            buffer[size + i] = padChar;
         }
         size += width;
     }
+
     return this;
 }
\ No newline at end of file
