diff --git a/tmp/d622fa65-57f9-475e-b86d-f7259ef4206d_buggy.java b/tmp/205a9f3c-89e7-4404-9bcc-8dc9ef36ec29_fixed.java
index b4e6f03..ab4cc63 100644
--- a/tmp/d622fa65-57f9-475e-b86d-f7259ef4206d_buggy.java
+++ b/tmp/205a9f3c-89e7-4404-9bcc-8dc9ef36ec29_fixed.java
@@ -1,44 +1,43 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
+import org.jsoup.nodes.Element;
+import org.jsoup.helper.Validate;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Node;
+import org.jsoup.select.Elements;
+import org.jsoup.select.NodeTraversor;
+import org.jsoup.select.NodeVisitor;
+import org.jsoup.select.QueryParser;
+import org.jsoup.select.Selector;
+import org.jsoup.select.SelectorList;
+import org.jsoup.select.TagAndClassVisitor;
+import org.jsoup.select.TraversingVisitor;
+import org.jsoup.select.NodeFilter;
+
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URISyntaxException;
+
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
     if (!hasAttr(attributeKey)) {
         return ""; // nothing to make absolute with
     } else {
-            URL base;
         try {
-                try {
-                    base = new URL(baseUri);
-                } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
-                }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+            URL base = new URL(baseUri);
+            if (relUrl.startsWith("?")) {
+                // Handle query string specifically
+                URI baseUri = base.toURI();
+                URI absUri = new URI(baseUri.getScheme(), baseUri.getAuthority(), baseUri.getPath(), relUrl.substring(1), null);
+                return absUri.toURL().toExternalForm();
+            } else {
+                // Handle other relative or absolute URLs
                 URL abs = new URL(base, relUrl);
                 return abs.toExternalForm();
-            } catch (MalformedURLException e) {
+            }
+        } catch (MalformedURLException | URISyntaxException e) {
             return "";
         }
     }
 }
\ No newline at end of file
