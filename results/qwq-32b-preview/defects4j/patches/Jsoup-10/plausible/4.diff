diff --git a/tmp/5fc30243-c631-4d80-8f19-febf4dac2b15_buggy.java b/tmp/06e31f2f-4f4d-4e72-86ba-8cbc5d33a04d_fixed.java
index b4e6f03..a44ed04 100644
--- a/tmp/5fc30243-c631-4d80-8f19-febf4dac2b15_buggy.java
+++ b/tmp/06e31f2f-4f4d-4e72-86ba-8cbc5d33a04d_fixed.java
@@ -1,44 +1,40 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
-            URL base;
             try {
-                try {
-                    base = new URL(baseUri);
+                URL base = new URL(baseUri);
+                if (relUrl.startsWith("?")) {
+                    // Handle query string relative URL
+                    String baseString = base.toExternalForm();
+                    int queryIndex = baseString.indexOf('?');
+                    if (queryIndex == -1) {
+                        return baseString + relUrl;
+                    } else {
+                        // If base already has a query, need to handle it properly
+                        String basepath = base.getPath();
+                        if (basepath.endsWith("/")) {
+                            basepath = basepath + "index.html"; // assume index.html
+                        }
+                        URL baseWithFile = new URL(base, basepath);
+                        return baseWithFile.toExternalForm() + relUrl;
+                    }
+                } else {
+                    // Normal URL resolution
+                    URL abs = new URL(base, relUrl);
+                    return abs.toExternalForm();
+                }
             } catch (MalformedURLException e) {
+                try {
                     // the base is unsuitable, but the attribute may be abs on its own, so try that
                     URL abs = new URL(relUrl);
                     return abs.toExternalForm();
-                }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
-            } catch (MalformedURLException e) {
+                } catch (MalformedURLException e2) {
                     return "";
                 }
             }
         }
+    }
\ No newline at end of file
