diff --git a/tmp/ae9e330e-5346-4505-865c-297e2ee3499a_buggy.java b/tmp/cc28ea8f-5d96-4706-a5ac-2a9ebd0ffa5b_fixed.java
index 3effef5..e5b2f67 100644
--- a/tmp/ae9e330e-5346-4505-865c-297e2ee3499a_buggy.java
+++ b/tmp/cc28ea8f-5d96-4706-a5ac-2a9ebd0ffa5b_fixed.java
@@ -1,73 +1,72 @@
 @SuppressWarnings("resource")
-    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
-    		DeserializationContext ctxt)
-        throws IOException, JsonProcessingException
-    {
+protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)
+        throws IOException, JsonProcessingException {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
+    boolean objectBuilt = false;
+    Object bean = null;
+
     JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+    while (t == JsonToken.FIELD_NAME) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
-            // creator property?
+
+        // Check if it's a creator property
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
+            buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));
+            if (buffer.allParametersAssigned()) {
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
                 }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+                objectBuilt = true;
             }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
-                }
-                continue;
-            }
-            // Object Id property?
+        } else {
+            // Not a creator property, buffer it
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
-            // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
-            }
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+            } else if (_anySetter != null) {
+                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
-            }
+            } else {
+                // Copy unknown property to token buffer
                 tokens.writeFieldName(propName);
                 tokens.copyCurrentStructure(p);
-            // "any property"?
-            if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
 
-        // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
+        t = p.nextToken();
+    }
+
+    // If the object wasn't built yet, build it now
+    if (!objectBuilt && buffer.allParametersAssigned()) {
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+    }
+
+    // Process unwrapped properties
+    if (bean != null) {
+        if (bean.getClass() != _beanType.getRawClass()) {
+            ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+            return null;
+        }
+        tokens.writeEndObject();
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
+
+    return null;
+}
\ No newline at end of file
