diff --git a/tmp/464ca9a8-3326-4a02-a168-559b5ff2893f_buggy.java b/tmp/27612f05-cb83-4825-8b3d-58d180b89b81_fixed.java
index 6c0aa19..f2a9649 100644
--- a/tmp/464ca9a8-3326-4a02-a168-559b5ff2893f_buggy.java
+++ b/tmp/27612f05-cb83-4825-8b3d-58d180b89b81_fixed.java
@@ -1,20 +1,11 @@
-    /**
-     * @param encoding the encoding to use for file names, use null
-     * for the platform's default encoding
-     * @param useUnicodeExtraFields whether to use InfoZIP Unicode
-     * Extra Fields (if present) to set the file names.
-     * @param allowStoredEntriesWithDataDescriptor whether the stream
-     * will try to read STORED entries that use a data descriptor
-     * @since 1.1
-     */
-    public ZipArchiveInputStream(InputStream inputStream,
-                                 String encoding,
-                                 boolean useUnicodeExtraFields,
-                                 boolean allowStoredEntriesWithDataDescriptor) {
-        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
-        this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+in = new PushbackInputStream(inputStream, 4); // buffer size of 4 to hold the signature
+
+// Read the first 4 bytes to check the signature
+byte[] signature = new byte[4];
+int read = in.read(signature);
+if (read != 4 || Arrays.equals(signature, new byte[]{0x50, 0x4b, 0x03, 0x04})) { // ZIP local file header signature in little-endian
+    // Correct signature, push back the bytes
+    in.unread(signature);
+} else {
+    throw new IOException("Not a ZIP file or local file header not found");
 }
\ No newline at end of file
