diff --git a/tmp/a4007ca1-d8f2-441c-aba7-83decbc86e14_buggy.java b/tmp/7d823f1e-24aa-47cf-9b6a-338f61d2e84c_fixed.java
index 6c0aa19..10c66e0 100644
--- a/tmp/a4007ca1-d8f2-441c-aba7-83decbc86e14_buggy.java
+++ b/tmp/7d823f1e-24aa-47cf-9b6a-338f61d2e84c_fixed.java
@@ -1,20 +1,57 @@
-    /**
-     * @param encoding the encoding to use for file names, use null
-     * for the platform's default encoding
-     * @param useUnicodeExtraFields whether to use InfoZIP Unicode
-     * Extra Fields (if present) to set the file names.
-     * @param allowStoredEntriesWithDataDescriptor whether the stream
-     * will try to read STORED entries that use a data descriptor
-     * @since 1.1
-     */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
-                                 boolean allowStoredEntriesWithDataDescriptor) {
+                             boolean allowStoredEntriesWithDataDescriptor) throws ArchiveException {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
     in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;
+
+    // Read the End of Central Directory record
+    try {
+        // Seek to the end of the stream
+        long streamPos = in.available();
+        if (streamPos < END_SIGNATURre.length) {
+            throw new ArchiveException("File is too short to be a zip file");
+        }
+
+        // Read the end signature
+        byte[] signature = new byte[END_SIGNATURE.length];
+        in.read(signature);
+
+        // Check if the signature matches
+        if (!Arrays.equals(signature, END_SIGNATURE)) {
+            throw new ArchiveException("End of central directory signature not found");
+        }
+
+        // Read the number of this disk
+        short diskNumber = readShort(in);
+
+        // Read the number of the disk with the start of the central directory
+        short centralDirStartDisk = readShort(in);
+
+        // Read the total number of entries in the central directory on this disk
+        short entriesThisDisk = readShort(in);
+
+        // Read the total number of entries in the central directory
+        short totalEntries = readShort(in);
+
+        // Read the size of the central directory
+        int centralDirSize = readInt(in);
+
+        // Read the offset of the start of the central directory with respect to the starting disk number
+        int centralDirOffset = readInt(in);
+
+        // ... other fields ...
+
+        // Position the stream at the start of the central directory
+        in.reset();
+        in.skip(centralDirOffset);
+
+        // Now the stream is positioned at the start of the central directory
+        // and ready to read entries
+
+    } catch (IOException e) {
+        throw new ArchiveException("Error reading EOF record", e);
+    }
 }
\ No newline at end of file
