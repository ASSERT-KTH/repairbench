diff --git a/tmp/3af87f95-2ab1-4c26-90b2-fc2ee5efde87_buggy.java b/tmp/7d92b263-2a0f-4cae-9c66-a47da99461cf_fixed.java
index 6c0aa19..7bcd9f3 100644
--- a/tmp/3af87f95-2ab1-4c26-90b2-fc2ee5efde87_buggy.java
+++ b/tmp/7d92b263-2a0f-4cae-9c66-a47da99461cf_fixed.java
@@ -1,20 +1,20 @@
-    /**
-     * @param encoding the encoding to use for file names, use null
-     * for the platform's default encoding
-     * @param useUnicodeExtraFields whether to use InfoZIP Unicode
-     * Extra Fields (if present) to set the file names.
-     * @param allowStoredEntriesWithDataDescriptor whether the stream
-     * will try to read STORED entries that use a data descriptor
-     * @since 1.1
-     */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
                              boolean allowStoredEntriesWithDataDescriptor) {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
     in = new PushbackInputStream(inputStream, buf.capacity());
     this.allowStoredEntriesWithDataDescriptor =
         allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+    // Initial read to check for EOF and set up the stream
+    try {
+        int firstByte = in.read();
+        if (firstByte == -1) {
+            throw new EOFException("Reached end of stream prematurely.");
+        }
+        in.unread(firstByte);
+    } catch (IOException e) {
+        throw new RuntimeException("Error reading from input stream.", e);
+    }
 }
\ No newline at end of file
