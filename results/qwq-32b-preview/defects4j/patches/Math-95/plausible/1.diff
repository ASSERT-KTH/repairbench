diff --git a/tmp/d9fcab10-0b4a-4a62-a476-b61689094603_buggy.java b/tmp/a4ebb6b7-79bc-4ddc-8670-bbb9f230483f_fixed.java
index 25c13b3..76d43da 100644
--- a/tmp/d9fcab10-0b4a-4a62-a476-b61689094603_buggy.java
+++ b/tmp/a4ebb6b7-79bc-4ddc-8670-bbb9f230483f_fixed.java
@@ -1,15 +1,22 @@
-    /**
-     * Access the initial domain value, based on <code>p</code>, used to
-     * bracket a CDF root.  This method is used by
-     * {@link #inverseCumulativeProbability(double)} to find critical values.
-     * 
-     * @param p the desired probability for the critical value
-     * @return initial domain value
-     */
 protected double getInitialDomain(double p) {
     double ret;
     double d = getDenominatorDegreesOfFreedom();
-            // use mean
-            ret = d / (d - 2.0);
+    double n = getNumeratorDegreesOfFreedom();
+
+    // Check if degrees of freedom are valid
+    if (d <= 0 || n <= 0) {
+        throw new IllegalArgumentException("Degrees of freedom must be positive.");
+    }
+
+    // Use a heuristic to estimate the initial domain value
+    // For example, use the median of the F-distribution
+    // The median of the F-distribution can be approximated as follows:
+    double median = (d - 2) / d * (n / (n + d - 2));
+    if (median <= 0) {
+        // If median is not positive, use a small positive constant
+        median = 1.0;
+    }
+    ret = median;
+
     return ret;
 }
\ No newline at end of file
