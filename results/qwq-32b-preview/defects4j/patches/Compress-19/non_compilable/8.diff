diff --git a/tmp/35f0872b-72a6-47ed-9f1e-81cc2bbb63e6_buggy.java b/tmp/8b594b48-f271-4398-b110-c36e5f0c300d_fixed.java
index 730ab7d..5038f3a 100644
--- a/tmp/35f0872b-72a6-47ed-9f1e-81cc2bbb63e6_buggy.java
+++ b/tmp/8b594b48-f271-4398-b110-c36e5f0c300d_fixed.java
@@ -1,48 +1,49 @@
-    /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
-     *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
-     */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
+        int expectedLength = 0;
+        if (hasUncompressedSize) {
+            expectedLength += 4 + 8; // field header (4 bytes) + size (8 bytes)
+        }
+        if (hasCompressedSize) {
+            expectedLength += 4 + 8; // field header (4 bytes) + size (8 bytes)
+        }
+        if (hasRelativeHeaderOffset) {
+            expectedLength += 4 + 8; // field header (4 bytes) + offset (8 bytes)
+        }
+        if (hasDiskStart) {
+            expectedLength += 4 + 4; // field header (4 bytes) + disk number (4 bytes)
+        }
         if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
+            throw new ZipException("central directory zip64 extended information extra field's length doesn't match central directory data. Expected length " + expectedLength + " but is " + rawCentralDirectoryData.length);
         }
         int offset = 0;
         if (hasUncompressedSize) {
+            // Skip field header (4 bytes)
+            offset += 4;
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += 8;
         }
         if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
-                offset += DWORD;
+            // Skip field header (4 bytes)
+            offset += 4;
+            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+            offset += 8;
         }
         if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            // Skip field header (4 bytes)
+            offset += 4;
+            relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+            offset += 8;
         }
         if (hasDiskStart) {
-                diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+            // Skip field header (4 bytes)
+            offset += 4;
+            diskStart = new ZipInteger(rawCentralDirectoryData, offset, 4); // Assuming ZipInteger can handle 4-byte integers
+            offset += 4;
         }
     }
 }
\ No newline at end of file
