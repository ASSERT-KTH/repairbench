diff --git a/tmp/cfe11ff0-b58f-435a-aa58-8f1669f6f752_buggy.java b/tmp/2677f278-ea8a-4660-a3f9-abb1e999224a_fixed.java
index 730ab7d..069d159 100644
--- a/tmp/cfe11ff0-b58f-435a-aa58-8f1669f6f752_buggy.java
+++ b/tmp/2677f278-ea8a-4660-a3f9-abb1e999224a_fixed.java
@@ -1,48 +1,4 @@
-    /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
-     *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
-     */
-    public void reparseCentralDirectoryData(boolean hasUncompressedSize,
-                                            boolean hasCompressedSize,
-                                            boolean hasRelativeHeaderOffset,
-                                            boolean hasDiskStart)
-        throws ZipException {
-        if (rawCentralDirectoryData != null) {
 int expectedLength = (hasUncompressedSize ? DWORD : 0)
                      + (hasCompressedSize ? DWORD : 0)
                      + (hasRelativeHeaderOffset ? DWORD : 0)
                      + (hasDiskStart ? WORD : 0);
\ No newline at end of file
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
-            }
-            int offset = 0;
-            if (hasUncompressedSize) {
-                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
-            }
-            if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
-                offset += DWORD;
-            }
-            if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
-            }
-            if (hasDiskStart) {
-                diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
-            }
-        }
-    }
