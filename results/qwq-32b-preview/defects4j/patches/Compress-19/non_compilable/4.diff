diff --git a/tmp/24259945-6109-406f-ad2b-9e177b20c6ef_buggy.java b/tmp/c4e81d06-178e-4aae-b4c3-9462c014a687_fixed.java
index 730ab7d..931c05a 100644
--- a/tmp/24259945-6109-406f-ad2b-9e177b20c6ef_buggy.java
+++ b/tmp/c4e81d06-178e-4aae-b4c3-9462c014a687_fixed.java
@@ -1,48 +1,72 @@
-    /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
-     *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
-     */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
-        if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
+    if (rawCentralDirectoryData == null) {
+        return;
     }
+
     int offset = 0;
+    int endOffset = rawCentralDirectoryData.length;
+
+    ZipEightByteInteger sizeFound = null;
+    ZipEightByteInteger compressedSizeFound = null;
+    ZipEightByteInteger relativeHeaderOffsetFound = null;
+    ZipLong diskStartFound = null;
+
+    while (offset < endOffset) {
+        if (offset + 4 > endOffset) {
+            throw new ZipException("Central directory Zip64 extra field is truncated");
+        }
+        int id = readShort(rawCentralDirectoryData, offset);
+        int dataLength = readShort(rawCentralDirectoryData, offset + 2);
+        offset += 4;
+
+        if (offset + dataLength > endOffset) {
+            throw new ZipException("Central directory Zip64 extra field is truncated");
+        }
+
+        if (id == UNCOMPRESSED_SIZE_ID && hasUncompressedSize) {
+            sizeFound = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+        } else if (id == COMRESSED_SIZE_ID && hasCompressedSize) {
+            compressedSizeFound = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+        } else if (id == RELATIVE_HEADER_OFFSET_ID && hasRelativeHeaderOffset) {
+            relativeHeaderOffsetFound = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+        } else if (id == DISK_START_ID && hasDiskStart) {
+            diskStartFound = new ZipLong(rawCentralDirectoryData, offset);
+        }
+
+        offset += dataLength;
+    }
+
+    if (hasUncompressedSize && sizeFound == null) {
+        throw new ZipException("Uncompressed size field not found in Zip64 extra field");
+    }
+    if (hasCompressedSize && compressedSizeFound == null) {
+        throw new ZipException("Compressed size field not found in Zip64 extra field");
+    }
+    if (hasRelativeHeaderOffset && relativeHeaderOffsetFound == null) {
+        throw new ZipException("Relative header offset field not found in Zip64 extra field");
+    }
+    if (hasDiskStart && diskStartFound == null) {
+        throw new ZipException("Disk start field not found in Zip64 extra field");
+    }
+
     if (hasUncompressedSize) {
-                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+        size = sizeFound;
     }
     if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
-                offset += DWORD;
+        compressedSize = compressedSizeFound;
     }
     if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+        relativeHeaderOffset = relativeHeaderOffsetFound;
     }
     if (hasDiskStart) {
-                diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+        diskStart = diskStartFound;
     }
 }
+
+private int readShort(byte[] data, int offset) {
+    return (data[offset] & 0xFF) | ((data[offset + 1] & 0xFF) << 8);
 }
\ No newline at end of file
