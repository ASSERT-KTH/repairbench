diff --git a/tmp/e25370ec-dbfd-4bf9-be9b-23d33d07d9fe_buggy.java b/tmp/91e58596-b105-40d1-9acf-a4c3f3bcfd7c_fixed.java
index 5abdeb5..de3bc0e 100644
--- a/tmp/e25370ec-dbfd-4bf9-be9b-23d33d07d9fe_buggy.java
+++ b/tmp/91e58596-b105-40d1-9acf-a4c3f3bcfd7c_fixed.java
@@ -1,29 +1,21 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
+  AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // Check if this is a use and not an assignment
+        if (!isAssignmentTarget(n, parent)) {
           numUsesWithinCfgNode++;
         }
       }
-
+    }
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
+
+// Helper method to determine if a node is the target of an assignment
+private boolean isAssignmentTarget(Node n, Node parent) {
+  return parent.isAssign() && parent.getFirstChild() == n;
+}
\ No newline at end of file
