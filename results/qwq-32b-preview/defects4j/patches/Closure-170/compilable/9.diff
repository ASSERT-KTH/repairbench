diff --git a/tmp/c0648693-cbdf-4795-a4b9-a51b109a5eab_buggy.java b/tmp/5de3300c-4159-4041-a5c7-5e313cb0ff77_fixed.java
index 5abdeb5..4b61d39 100644
--- a/tmp/c0648693-cbdf-4795-a4b9-a51b109a5eab_buggy.java
+++ b/tmp/5de3300c-4159-4041-a5c7-5e313cb0ff77_fixed.java
@@ -1,29 +1,16 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
     numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
+    AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            if (n.isName() && n.getString().equals(varName)) {
+                // Exclude uses that are on the left-hand side of an assignment
+                // and also handle cases where the entire cfgNode is a chain of assignments.
+                if (!(parent.isAssign() && parent.getFirstChild() == n)) {
                     numUsesWithinCfgNode++;
                 }
             }
-
+        }
     };
-
     NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
