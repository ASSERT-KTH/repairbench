diff --git a/tmp/13088e96-86b3-4098-aa55-017e791c8dfb_buggy.java b/tmp/98e518fe-532e-46a4-abc2-570dbb78089c_fixed.java
index 5abdeb5..bb77372 100644
--- a/tmp/13088e96-86b3-4098-aa55-017e791c8dfb_buggy.java
+++ b/tmp/98e518fe-532e-46a4-abc2-570dbb78089c_fixed.java
@@ -1,29 +1,20 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Exclude the variable if it's on the LHS of an assignment
+            // but only if the assignment is directly under the cfgNode.
+            // This avoids excluding assignments that are nested within
+            // conditional expressions or other structures.
+            if (!(parent.isAssign() && parent.getFirstChild() == n &&
+                  parent == cfgNode)) {
               numUsesWithinCfgNode++;
             }
           }
-
+        }
       };
-
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
