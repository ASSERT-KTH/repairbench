diff --git a/tmp/60d5405a-9bb9-491e-8c9d-51d52fc82b1a_buggy.java b/tmp/23aadcf3-c447-427c-942f-3ed68c08fda0_fixed.java
index 19fd63e..68aeadc 100644
--- a/tmp/60d5405a-9bb9-491e-8c9d-51d52fc82b1a_buggy.java
+++ b/tmp/23aadcf3-c447-427c-942f-3ed68c08fda0_fixed.java
@@ -1,24 +1,48 @@
   /**
    * @return Whether the node is a block with a single statement that is
-   *     an expression.
+   *     an expression, excluding cases that trigger IE bugs.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+        // Check if the expression is an EXPR_RESULT node
+        if (maybeExpr.getType() == Token.EXPR_RESULT) {
+          // Get the actual expression inside EXPR_RESULT
+          maybeExpr = maybeExpr.getFirstChild();
+          // Check if the expression is a call to an event handler
+          if (isPotentialEventHandlerCall(maybeExpr)) {
+            // Avoid folding if it's a method call that might be affected by IE bug
+            return false;
+          }
+        }
+        // General check if it's an expression node
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
+    return false;
+  }
 
+  /**
+   * Checks if the node represents a method call that could be an event handler.
+   * @param node The node to check.
+   * @return True if it's a potential event handler call, false otherwise.
+   */
+  private boolean isPotentialEventHandlerCall(Node node) {
+    if (node.getType() == Token.CALL) {
+      Node methodName = node.getFirstChild();
+      if (methodName.getType() == Token.GETPROP) {
+        String propertyName = methodName.getString();
+        // Check for common event handler names
+        if (propertyName.endsWith("change") ||
+            propertyName.endsWith("click") ||
+            propertyName.endsWith("submit") ||
+            propertyName.endsWith("keydown") ||
+            // Add more event handler names as needed
+            ) {
+          return true;
+        }
+      }
+    }
     return false;
   }
\ No newline at end of file
