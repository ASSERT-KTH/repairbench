diff --git a/tmp/fcb7f15b-a94c-44a6-8ae1-ea9d76194ffd_buggy.java b/tmp/43002943-9386-47c4-bd8a-f1914ef23c55_fixed.java
index 6708762..d0702de 100644
--- a/tmp/fcb7f15b-a94c-44a6-8ae1-ea9d76194ffd_buggy.java
+++ b/tmp/43002943-9386-47c4-bd8a-f1914ef23c55_fixed.java
@@ -1,99 +1,87 @@
 /**
  * Decompose a symmetric positive semidefinite matrix.
  *
  * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
-     * considered to be dependent on previous ones and are discarded.
-     * @exception NonPositiveDefiniteMatrixException if the matrix is not
-     * positive semidefinite.
+ * @param small Diagonal elements threshold under which columns are considered to be dependent on previous ones and are discarded.
+ * @exception NonPositiveDefiniteMatrixException if the matrix is not positive semidefinite.
  */
 public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
     throws NonPositiveDefiniteMatrixException {
 
     final int order = matrix.getRowDimension();
     final double[][] c = matrix.getData();
     final double[][] b = new double[order][order];
 
     int[] swap = new int[order];
     int[] index = new int[order];
     for (int i = 0; i < order; ++i) {
         index[i] = i;
     }
 
     int r = 0;
-        for (boolean loop = true; loop;) {
+    while (r < order) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+        // Find the maximal diagonal element in the remaining submatrix
+        int maxIndex = r;
+        double maxValue = c[index[r]][index[r]];
         for (int i = r + 1; i < order; ++i) {
             int ii = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+            if (c[ii][ii] > maxValue) {
+                maxIndex = i;
+                maxValue = c[ii][ii];
             }
         }
 
-
-            // swap elements
-            if (swap[r] != r) {
+        // Swap elements
+        if (maxIndex != r) {
             int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+            index[r] = index[maxIndex];
+            index[maxIndex] = tmp;
         }
 
-            // check diagonal element
+        // Check diagonal element
         int ir = index[r];
         if (c[ir][ir] < small) {
-
-                if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
-                }
-
-                // check remaining diagonal elements
+            // Check remaining diagonal elements
             for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                int ii = index[i];
+                if (c[ii][ii] < -small) {
+                    // There is at least one sufficiently negative diagonal element
+                    throw new NonPositiveDefiniteMatrixException(c[ii][ii], i, small);
                 }
             }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
+            // All remaining diagonal elements are close to zero
             ++r;
-                loop = false;
+            continue;
+        }
 
-            } else {
-
-                // transform the matrix
+        // Transform the matrix
         final double sqrt = FastMath.sqrt(c[ir][ir]);
         b[r][r] = sqrt;
         final double inverse = 1 / sqrt;
         for (int i = r + 1; i < order; ++i) {
             final int ii = index[i];
             final double e = inverse * c[ii][ir];
             b[i][r] = e;
             c[ii][ii] -= e * e;
             for (int j = r + 1; j < i; ++j) {
                 final int ij = index[j];
                 final double f = c[ii][ij] - e * b[j][r];
                 c[ii][ij] = f;
                 c[ij][ii] = f;
             }
         }
 
-                // prepare next iteration
-                loop = ++r < order;
-            }
+        // Prepare next iteration
+        ++r;
     }
 
-        // build the root matrix
+    // Build the root matrix
     rank = r;
     root = MatrixUtils.createRealMatrix(order, r);
     for (int i = 0; i < order; ++i) {
         for (int j = 0; j < r; ++j) {
             root.setEntry(index[i], j, b[i][j]);
         }
     }
-
 }
\ No newline at end of file
