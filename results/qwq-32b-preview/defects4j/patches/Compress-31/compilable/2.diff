diff --git a/tmp/4218311c-edf2-4c01-97ef-5b47e60f0397_buggy.java b/tmp/a628334c-c68e-4c1e-b714-0c963aa6e831_fixed.java
index b91f7de..aad84ca 100644
--- a/tmp/4218311c-edf2-4c01-97ef-5b47e60f0397_buggy.java
+++ b/tmp/a628334c-c68e-4c1e-b714-0c963aa6e831_fixed.java
@@ -1,69 +1,65 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
-        }
-
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            if (currentByte == 0) {
+    // Find the end of the octal digits
+    int current = start;
+    while (current < end) {
+        byte b = buffer[current];
+        if (b == 0 || b == ' ') {
             break;
         }
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+        if (b < '0' || b > '7') {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, current, b));
+        }
+        current++;
+    }
+    int octalEnd = current;
+
+    // Trim trailing spaces and NULs
+    while (octalEnd > start && (buffer[octalEnd - 1] == 0 || buffer[octalEnd - 1] == ' ')) {
+        octalEnd--;
+    }
+
+    // Ensure there's at least one octal digit
+    if (octalEnd == start) {
+        throw new IllegalArgumentException("No octal digits found");
+    }
+
+    // Parse the octal digits
+    for (int i = start; i < octalEnd; i++) {
+        byte b = buffer[i];
+        if (b == 0) {
+            throw new IllegalArgumentException("Embedded NUL in octal digits");
+        }
+        result = (result << 3) + (b - '0');
+    }
+
+    // Ensure the byte after the octal digits is space or NUL
+    if (octalEnd < end) {
+        byte trailer = buffer[octalEnd];
+        if (trailer != 0 && trailer != ' ') {
+            throw new IllegalArgumentException("Trailing character is not space or NUL");
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
