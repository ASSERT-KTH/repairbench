diff --git a/tmp/769f47be-2bac-4f8e-bbcd-34a6a75eccb1_buggy.java b/tmp/ced9a8be-258e-42bf-860d-978fc831db70_fixed.java
index 0b7c52e..258d7b0 100644
--- a/tmp/769f47be-2bac-4f8e-bbcd-34a6a75eccb1_buggy.java
+++ b/tmp/ced9a8be-258e-42bf-860d-978fc831db70_fixed.java
@@ -1,27 +1,38 @@
 /**
-     * Processes a OBJECTLIT node.
+ * Processes an OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
       child != null;
       child = child.getNext()) {
-        // Maybe STRING, GET, SET
+    // Handle different types of properties: STRING, GET, SET
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
+    // Determine the property name
+    String name;
+    if (child.isString()) {
+      name = child.getString();
+    } else if (child.isGetPropName() || child.isSetPropName()) {
+      name = child.getBootstrapString();
+    } else {
+      // Unexpected property type; skip for now
+      continue;
+    }
+
+    // Get the type of the property
     T type = typeSystem.getType(getScope(), n, name);
 
+    // Retrieve or create the property record
     Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+
+    // Schedule renaming and process the property
+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {
+      // Handle the case where renaming is not scheduled successfully
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null ? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
