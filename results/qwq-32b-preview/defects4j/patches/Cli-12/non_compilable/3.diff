diff --git a/tmp/9e3d594a-1248-4e1f-91f1-192cc066da87_buggy.java b/tmp/bc398e26-0c6b-4126-8d41-a3d0ef350cf2_fixed.java
index 7e64f1d..41c1167 100644
--- a/tmp/9e3d594a-1248-4e1f-91f1-192cc066da87_buggy.java
+++ b/tmp/bc398e26-0c6b-4126-8d41-a3d0ef350cf2_fixed.java
@@ -1,78 +1,86 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
-        List tokens = new ArrayList();
-
-        boolean eatTheRest = false;
-
-        for (int i = 0; i < arguments.length; i++)
-        {
-            String arg = arguments[i];
-
-            if ("--".equals(arg))
-            {
-                eatTheRest = true;
-                tokens.add("--");
-            }
-            else if ("-".equals(arg))
-            {
-                tokens.add("-");
-            }
 else if (arg.startsWith("-"))
 {
+    if (arg.startsWith("--"))
+    {
+        int equalsIndex = arg.indexOf('=');
+        String optName;
+        String value = null;
+        if (equalsIndex != -1)
+        {
+            optName = arg.substring(2, equalsIndex);
+            value = arg.substring(equalsIndex + 1);
+        }
+        else
+        {
+            optName = arg.substring(2);
+        }
+        
+        Option option = options.getOption(optName);
+        if (option != null)
+        {
+            if (option.hasArg())
+            {
+                if (value != null)
+                {
+                    tokens.add("--" + optName);
+                    tokens.add(value);
+                }
+                else
+                {
+                    // Option requires an argument but none was provided.
+                    // Handle this case appropriately, e.g., throw an exception or add as is.
+                }
+            }
+            else
+            {
+                tokens.add("--" + optName);
+            }
+        }
+        else
+        {
+            tokens.add(arg);
+        }
+    }
+    else
+    {
+        int equalsIndex = arg.indexOf('=');
+        if (equalsIndex != -1)
+        {
+            String opt = arg.substring(1, equalsIndex);
+            String value = arg.substring(equalsIndex + 1);
+            Option option = options.getOption(opt);
+            if (option != null && option.hasArg())
+            {
+                tokens.add("-" + opt);
+                tokens.add(value);
+            }
+            else
+            {
+                tokens.add(arg);
+            }
+        }
+        else
+        {
+            // Handle short options without equals sign, possibly bundled.
+            // This part needs to remain mostly unchanged.
             String opt = Util.stripLeadingHyphens(arg);
-
             if (options.hasOption(opt))
             {
                 tokens.add(arg);
             }
             else
             {
                 if (options.hasOption(arg.substring(0, 2)))
                 {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                    tokens.add(arg.substring(0, 2));
+                    tokens.add(arg.substring(2));
                 }
                 else
                 {
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
         }
-            else
-            {
-                tokens.add(arg);
     }
-
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
-                    tokens.add(arguments[i]);
-                }
-            }
-        }
-
-        return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
