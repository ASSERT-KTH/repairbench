diff --git a/tmp/fdb47a4f-7d22-4ff5-90a6-81e7fcce0439_buggy.java b/tmp/9608528f-d356-42c1-86a4-d3f446b44eef_fixed.java
index 7e64f1d..d97244a 100644
--- a/tmp/fdb47a4f-7d22-4ff5-90a6-81e7fcce0439_buggy.java
+++ b/tmp/9608528f-d356-42c1-86a4-d3f446b44eef_fixed.java
@@ -1,78 +1,103 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
     List tokens = new ArrayList();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
         else if (arg.startsWith("-"))
         {
             String opt = Util.stripLeadingHyphens(arg);
 
+            // Check if the option is followed by an equals sign
+            if (opt.contains("="))
+            {
+                // Split the option and its argument
+                String[] parts = opt.split("=", 2);
+                String optionName = parts[0];
+                String optionValue = parts[1];
+
+                // Check if the option exists
+                if (options.hasOption(optionName))
+                {
+                    // For options like -Dproperty=value, add -D and property=value separately
+                    if (optionName.length() == 1)
+                    {
+                        tokens.add("-" + optionName);
+                        tokens.add(optionValue);
+                    }
+                    else
+                    {
+                        tokens.add("--" + optionName + "=" + optionValue);
+                    }
+                }
+                else
+                {
+                    eatTheRest = stopAtNonOption;
+                    tokens.add(arg);
+                }
+            }
+            else
+            {
                 if (options.hasOption(opt))
                 {
                     tokens.add(arg);
                 }
                 else
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    if (options.hasOption(opt.substring(0, 1)))
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        // Handle short options with multiple letters
+                        // For example, -abc should be split into -a -b -c
+                        for (int j = 0; j < opt.length(); j++)
+                        {
+                            String singleOpt = "-" + opt.charAt(j);
+                            if (options.hasOption(singleOpt.substring(1)))
+                            {
+                                tokens.add(singleOpt);
+                            }
+                            else
+                            {
+                                eatTheRest = stopAtNonOption;
+                                tokens.add(arg);
+                                break;
+                            }
+                        }
                     }
                     else
                     {
                         eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
                 }
             }
+        }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
+            break; // Exit the loop after adding the remaining arguments
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
