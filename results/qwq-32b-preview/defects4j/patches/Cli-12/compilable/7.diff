diff --git a/tmp/5097cc71-9533-4acb-8f1f-f2a504c42ddd_buggy.java b/tmp/61df8af3-39c7-46d9-aa85-7e92a456ce6b_fixed.java
index 7e64f1d..6f1805a 100644
--- a/tmp/5097cc71-9533-4acb-8f1f-f2a504c42ddd_buggy.java
+++ b/tmp/61df8af3-39c7-46d9-aa85-7e92a456ce6b_fixed.java
@@ -1,78 +1,114 @@
 /**
  * <p>This flatten method does so using the following rules:
  * <ol>
  *  <li>If an {@link Option} exists for the first character of
  *  the <code>arguments</code> entry <b>AND</b> an {@link Option}
  *  does not exist for the whole <code>argument</code> then
  *  add the first character as an option to the processed tokens
  *  list e.g. "-D" and add the rest of the entry to the also.</li>
  *  <li>Otherwise just add the token to the processed tokens list.
  *  </li>
  * </ol>
  * </p>
  *
  * @param options The Options to parse the arguments by.
  * @param arguments The arguments that have to be flattened.
  * @param stopAtNonOption specifies whether to stop
  * flattening when a non option has been encountered
  * @return a String array of the flattened arguments
  */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
     List tokens = new ArrayList();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
         else if (arg.startsWith("-"))
         {
             String opt = Util.stripLeadingHyphens(arg);
 
+            // Check if the option exists with the given name
             if (options.hasOption(opt))
             {
+                // If the option exists, add the entire argument
                 tokens.add(arg);
             }
             else
             {
-                    if (options.hasOption(arg.substring(0, 2)))
+                // Check for short options with equals sign
+                if (opt.length() > 1 && opt.contains("="))
                 {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                    String shortOpt = opt.substring(0, 1);
+                    String rest = opt.substring(1);
+
+                    if (options.hasOption(shortOpt))
+                    {
+                        // Add the short option and the value separately
+                        tokens.add("-" + shortOpt);
+                        tokens.add(rest);
+                    }
+                    else
+                    {
+                        // If not a recognized short option, treat as a non-option
+                        eatTheRest = stopAtNonOption;
+                        tokens.add(arg);
+                    }
+                }
+                // Check for long options with single dash
+                else if (opt.contains("="))
+                {
+                    int eqIndex = opt.indexOf("=");
+                    String longOpt = opt.substring(0, eqIndex);
+                    String value = opt.substring(eqIndex + 1);
+
+                    if (options.hasOption(longOpt))
+                    {
+                        // Add the long option and the value separately
+                        tokens.add("--" + longOpt);
+                        tokens.add(value);
+                    }
+                    else
+                    {
+                        // If not a recognized long option, treat as a non-option
+                        eatTheRest = stopAtNonOption;
+                        tokens.add(arg);
+                    }
                 }
                 else
                 {
+                    // If no equals sign and option not recognized, treat as non-option
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
         }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
+            break; // Exit the loop after adding the rest
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
