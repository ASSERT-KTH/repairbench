diff --git a/tmp/ef031d17-df5d-4424-bc97-0d6606eea8a0_buggy.java b/tmp/2dbe090f-a779-4ae6-bda0-3244aef7ed49_fixed.java
index 7e64f1d..d95b8d8 100644
--- a/tmp/ef031d17-df5d-4424-bc97-0d6606eea8a0_buggy.java
+++ b/tmp/2dbe090f-a779-4ae6-bda0-3244aef7ed49_fixed.java
@@ -1,78 +1,43 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
-        List tokens = new ArrayList();
-
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
+    List<String> tokens = new ArrayList<>();
     boolean eatTheRest = false;
 
-        for (int i = 0; i < arguments.length; i++)
-        {
+    for (int i = 0; i < arguments.length; i++) {
         String arg = arguments[i];
 
-            if ("--".equals(arg))
-            {
+        if ("--".equals(arg)) {
             eatTheRest = true;
             tokens.add("--");
-            }
-            else if ("-".equals(arg))
-            {
+        } else if ("-".equals(arg)) {
             tokens.add("-");
-            }
-            else if (arg.startsWith("-"))
-            {
+        } else if (arg.startsWith("-")) {
+            // Strip leading hyphens
             String opt = Util.stripLeadingHyphens(arg);
+            // Find the equals index
+            int equalsIdx = opt.indexOf('=');
+            String optName = equalsIdx != -1 ? opt.substring(0, equalsIdx) : opt;
 
-                if (options.hasOption(opt))
-                {
+            if (options.hasOption(optName)) {
+                // If the option exists, add the entire argument
                 tokens.add(arg);
-                }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
-                    }
-                    else
-                    {
+            } else {
+                // If the option does not exist, treat it as a non-option argument
                 eatTheRest = stopAtNonOption;
                 tokens.add(arg);
             }
-                }
-            }
-            else
-            {
+        } else {
+            // Non-option argument
             tokens.add(arg);
         }
 
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
+        if (eatTheRest) {
+            // Add the rest of the arguments as they are
+            for (i++; i < arguments.length; i++) {
                 tokens.add(arguments[i]);
             }
+            break; // Exit the loop after adding the rest
         }
     }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[0]);
 }
\ No newline at end of file
