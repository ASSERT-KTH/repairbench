diff --git a/tmp/4ff15e12-6f5b-4b73-b365-150ca177d480_buggy.java b/tmp/d6814cbc-e937-41d7-b9bc-9b886889adab_fixed.java
index 05aaf2d..95a8150 100644
--- a/tmp/4ff15e12-6f5b-4b73-b365-150ca177d480_buggy.java
+++ b/tmp/d6814cbc-e937-41d7-b9bc-9b886889adab_fixed.java
@@ -1,56 +1,34 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
 public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
-        final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
-        final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+    // Initial estimate of offset
+    int offsetLocal = getOffset(instantLocal);
+    // Adjust instantLocal using the estimate to get an approximate UTC time
+    long instantAdjusted = instantLocal - offsetLocal;
+    // Get the offset for this adjusted time
+    int offsetAdjusted = getOffset(instantAdjusted);
+    
+    // If the offsets differ, we're near a DST transition
     if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+        // Determine the direction of the offset change
+        if (offsetLocal - offsetAdjusted < 0) {
+            // If offsetLocal is less than offsetAdjusted, handle the DST gap
             long nextLocal = nextTransition(instantAdjusted);
             long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
             if (nextLocal != nextAdjusted) {
+                // If transitions don't align, use the initial offset
                 return offsetLocal;
             }
+        } else {
+            // Handle DST overlap: Favor daylight time over standard time
+            // Find the earlier instant
+            long earlierInstant = instantLocal - offsetLocal;
+            long laterInstant = instantLocal - offsetAdjusted;
+            if (earlierInstant < laterInstant) {
+                return offsetLocal;
+            } else {
+                return offsetAdjusted;
+            }
         }
     }
+    // If offsets are the same, no adjustment needed
     return offsetAdjusted;
 }
\ No newline at end of file
