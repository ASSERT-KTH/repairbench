diff --git a/tmp/0988fdcb-4683-4d5e-9b9f-1337cc5f4768_buggy.java b/tmp/54ab5166-02d8-415f-9c70-94e80fe37f3c_fixed.java
index abe09ae..f696b10 100644
--- a/tmp/0988fdcb-4683-4d5e-9b9f-1337cc5f4768_buggy.java
+++ b/tmp/54ab5166-02d8-415f-9c70-94e80fe37f3c_fixed.java
@@ -1,57 +1,53 @@
 @SuppressWarnings("unchecked")
 @Override
-    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
-    {
-        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
+public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+    // Check the current token type
+    JsonToken t = p.getCurrentToken();
+
+    if (t == JsonToken.VALUE_STRING) {
+        // Handle string values
         String text = p.getValueAsString();
-        if (text != null) { // has String representation
-            if (text.length() == 0 || (text = text.trim()).length() == 0) {
-                // 04-Feb-2013, tatu: Usually should become null; but not always
+        if (text != null) {
+            text = text.trim();
+            if (text.isEmpty()) {
+                // Handle empty string
                 return _deserializeFromEmptyString();
             }
-            Exception cause = null;
             try {
-                // 19-May-2017, tatu: Used to require non-null result (assuming `null`
-                //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
-                }
-            } catch (IllegalArgumentException iae) {
-                cause = iae;
-            } catch (MalformedURLException me) {
-                cause = me;
+                // Attempt to deserialize the string
+                T value = _deserialize(text, ctxt);
+                if (value != null) {
+                    return value;
                 }
+            } catch (IllegalArgumentException | MalformedURLException e) {
+                // Capture the cause for error message
+                Exception cause = e;
                 String msg = "not a valid textual representation";
-            if (cause != null) {
                 String m2 = cause.getMessage();
                 if (m2 != null) {
-                    msg = msg + ", problem: "+m2;
+                    msg += ", problem: " + m2;
                 }
+                // Throw a mapping exception with the captured message and cause
+                JsonMappingException ex = ctxt.weirdStringException(text, _valueClass, msg);
+                ex.initCause(cause);
+                throw ex;
             }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
-            if (cause != null) {
-                e.initCause(cause);
         }
-            throw e;
-            // nothing to do here, yet? We'll fail anyway
-        }
-        JsonToken t = p.getCurrentToken();
-        // [databind#381]
-        if (t == JsonToken.START_ARRAY) {
+    } else if (t == JsonToken.START_ARRAY) {
+        // Handle array deserialization
         return _deserializeFromArray(p, ctxt);
-        }
-        if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
-            // Trivial cases; null to null, instance of type itself returned as is
+    } else if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
+        // Handle embedded objects
         Object ob = p.getEmbeddedObject();
         if (ob == null) {
             return null;
         }
         if (_valueClass.isAssignableFrom(ob.getClass())) {
             return (T) ob;
         }
         return _deserializeEmbedded(ob, ctxt);
     }
+
+    // Handle unexpected tokens
     return (T) ctxt.handleUnexpectedToken(_valueClass, p);
 }
\ No newline at end of file
