diff --git a/tmp/71153da3-1d5e-4c7e-8f83-a8e759e13a02_buggy.java b/tmp/2c9e51a4-e586-4c81-ba49-9fcb35b428a1_fixed.java
index eea9e73..f64bafe 100644
--- a/tmp/71153da3-1d5e-4c7e-8f83-a8e759e13a02_buggy.java
+++ b/tmp/2c9e51a4-e586-4c81-ba49-9fcb35b428a1_fixed.java
@@ -1,41 +1,20 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
-	public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
-			return false;
+private static Set<Integer> getSearchCodePoints(char[] searchChars) {
+    Set<Integer> codePoints = new HashSet<>();
+    if (searchChars == null) {
+        return codePoints;
     }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
-						return true;
+    int len = searchChars.length;
+    int i = 0;
+    while (i < len) {
+        char ch = searchChars[i];
+        if (Character.isHighSurrogate(ch) && i + 1 < len && Character.isLowSurrogate(searchChars[i + 1])) {
+            int codePoint = Character.toCodePoint(ch, searchChars[i + 1]);
+            codePoints.add(codePoint);
+            i += 2;
+        } else {
+            codePoints.add((int) ch);
+            i++;
         }
     }
-		}
-		return false;
+    return codePoints;
 }
\ No newline at end of file
