diff --git a/tmp/1ce0ab3a-616f-4053-81ce-ab0dc626f7bb_buggy.java b/tmp/e6cece4e-e2b9-4cb7-95b1-529452283e07_fixed.java
index eea9e73..e2c749a 100644
--- a/tmp/1ce0ab3a-616f-4053-81ce-ab0dc626f7bb_buggy.java
+++ b/tmp/e6cece4e-e2b9-4cb7-95b1-529452283e07_fixed.java
@@ -1,41 +1,60 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
-	public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
-			return false;
+
+Set<Integer> searchCodePoints = new HashSet<>();
+
+int searchIndex = 0;
+
+while (searchIndex < searchChars.length) {
+
+    char high = searchChars[searchIndex];
+
+    if (Character.isHighSurrogate(high) && searchIndex + 1 < searchChars.length) {
+
+        char low = searchChars[searchIndex + 1];
+
+        if (Character.isLowSurrogate(low)) {
+
+            int codePoint = Character.toCodePoint(high, low);
+
+            searchCodePoints.add(codePoint);
+
+            searchIndex += 2;
+
+        } else {
+
+            // Invalid surrogate pair: treat high surrogate as a single char
+
+            searchCodePoints.add(high);
+
+            searchIndex++;
+
         }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+
+    } else {
+
+        searchCodePoints.add(high);
+
+        searchIndex++;
+
+    }
+
+}
+
+// Now iterate over the CharSequence's code points
+
+int csIndex = 0;
+
+while (csIndex < cs.length()) {
+
+    int codePoint = cs.codePointAt(csIndex);
+
+    if (searchCodePoints.contains(codePoint)) {
+
         return true;
+
     }
+
+    csIndex += Character.charCount(codePoint);
+
 }
-		}
+
 return false;
-	}
