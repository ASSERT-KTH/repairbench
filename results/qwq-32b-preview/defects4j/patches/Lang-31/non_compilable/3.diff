diff --git a/tmp/bfb7f832-1815-437e-9299-aaf2c74a71eb_buggy.java b/tmp/aabed039-a63a-4d56-b296-74b2b91de201_fixed.java
index eea9e73..33826d7 100644
--- a/tmp/bfb7f832-1815-437e-9299-aaf2c74a71eb_buggy.java
+++ b/tmp/aabed039-a63a-4d56-b296-74b2b91de201_fixed.java
@@ -1,41 +1,34 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
+    if (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
+    for (int i = 0; i < csLength; ) {
+        int codePoint = cs.charAt(i);
+        if (Character.isHighSurrogate(codePoint) && i + 1 < csLength) {
+            codePoint = Character.toCodePoint(codePoint, cs.charAt(i + 1));
+            i += 2; // Skip the surrogate pair
+        } else {
+            i += 1;
+        }
         for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+            int searchCodePoint = searchChars[j];
+            if (searchCodePoint == codePoint) {
                 return true;
             }
+            // Handle if searchChar is a high surrogate
+            if (Character.isHighSurrogate(searchCodePoint) && j + 1 < searchLength) {
+                int nextSearchCodePoint = searchChars[j + 1];
+                if (Character.isLowSurrogate(nextSearchCodePoint)) {
+                    int combinedSearchCodePoint = Character.toCodePoint(searchCodePoint, nextSearchCodePoint);
+                    if (combinedSearchCodePoint == codePoint) {
+                        return true;
+                    }
+                    j++; // Skip the low surrogate
+                }
+            }
         }
     }
     return false;
 }
\ No newline at end of file
