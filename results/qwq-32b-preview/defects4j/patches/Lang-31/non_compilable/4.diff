diff --git a/tmp/f1ffc36c-a35f-49a4-b543-ae7c4910b020_buggy.java b/tmp/8cb0cfe1-ab9e-4d9d-97d3-d3e4bd8c1781_fixed.java
index eea9e73..03dfef5 100644
--- a/tmp/f1ffc36c-a35f-49a4-b543-ae7c4910b020_buggy.java
+++ b/tmp/8cb0cfe1-ab9e-4d9d-97d3-d3e4bd8c1781_fixed.java
@@ -1,41 +1,62 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
-	public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
-			return false;
-		}
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
-						return true;
-				}
-			}
-		}
-		return false;
-	}
+
+function containsAny(cs, searchChars):
+
+if cs is null or empty or searchChars is null or empty:
+
+return false
+
+// Build a set of code points from searchChars
+
+searchSet = new set()
+
+i = 0
+
+while i < length of searchChars:
+
+char = searchChars[i]
+
+if isHighSurrogate(char) and i + 1 < length of searchChars:
+
+nextChar = searchChars[i + 1]
+
+if isLowSurrogate(nextChar):
+
+// It's a surrogate pair
+
+codePoint = toCodePoint(char, nextChar)
+
+searchSet.add(codePoint)
+
+i += 2
+
+else:
+
+// Not a low surrogate, treat char as a single code point
+
+searchSet.add(char)
+
+i += 1
+
+else:
+
+// Not a high surrogate, treat char as a single code point
+
+searchSet.add(char)
+
+i += 1
+
+// Iterate through cs by code points
+
+index = 0
+
+while index < length of cs:
+
+codePoint = cs.codePointAt(index)
+
+if codePoint in searchSet:
+
+return true
+
+index += Character.charCount(codePoint)
+
+return false
