diff --git a/tmp/2b50bbf3-2e87-44ae-ac87-d070fecf0751_buggy.java b/tmp/237ae0bc-e160-432c-9ca8-3839266a89db_fixed.java
index eea9e73..789302a 100644
--- a/tmp/2b50bbf3-2e87-44ae-ac87-d070fecf0751_buggy.java
+++ b/tmp/237ae0bc-e160-432c-9ca8-3839266a89db_fixed.java
@@ -1,41 +1,34 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+    
+    // Create a set of code points from the searchChars array
+    Set<Integer> searchCodePoints = new HashSet<>();
+    int searchLen = searchChars.length;
+    int i = 0;
+    while (i < searchLen) {
+        char ch = searchChars[i];
+        if (Character.isHighSurrogate(ch) && i + 1 < searchLen && Character.isLowSurrogate(searchChars[i + 1])) {
+            int codePoint = Character.toCodePoint(ch, searchChars[i + 1]);
+            searchCodePoints.add(codePoint);
+            i += 2;
+        } else {
+            int codePoint = Character.codePointValue(ch);
+            searchCodePoints.add(codePoint);
+            i += 1;
+        }
+    }
+    
+    // Iterate over the code points in the CharSequence and check for any match in the search set
+    int csLen = cs.length();
+    int index = 0;
+    while (index < csLen) {
+        int codePoint = cs.codePointAt(index);
+        if (searchCodePoints.contains(codePoint)) {
             return true;
         }
-			}
+        index += Character.charCount(codePoint);
     }
     return false;
 }
\ No newline at end of file
