diff --git a/tmp/92158ea8-18fa-40d4-88aa-0ea1bdf6740b_buggy.java b/tmp/a12b0220-d6fd-49bd-9e9b-42c3c36ae5fd_fixed.java
index b36c3f0..8eb8a43 100644
--- a/tmp/92158ea8-18fa-40d4-88aa-0ea1bdf6740b_buggy.java
+++ b/tmp/a12b0220-d6fd-49bd-9e9b-42c3c36ae5fd_fixed.java
@@ -1,58 +1,48 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
-  static boolean functionCallHasSideEffects(
-      Node callNode, @Nullable AbstractCompiler compiler) {
+static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
         throw new IllegalStateException(
                 "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
         return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
         String name = nameNode.getString();
         if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
             return false;
         }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
-        return false;
-      }
+        Node propertyNameNode = nameNode.getLastChild();
+        String propertyName = propertyNameNode.getString();
 
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
+        // Check if the GETPROP is a property of 'Math' and the method is side-effect-free.
+        Node objectNode = nameNode.getFirstChild();
+        if (objectNode.getType() == Token.NAME && "Math".equals(objectNode.getString())) {
+            if (MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(propertyName)) {
                 return false;
             }
-
-      // Functions in the "Math" namespace have no side effects.
-
-      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+        } else if (objectNode.getType() == Token.THIS) {
+            // Handle 'this' context if necessary.
+        } else if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
+            if (objectNode.getType() == Token.REGEXP) {
+                if (REGEXP_METHODS.contains(propertyName)) {
                     return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+                }
+            } else if (objectNode.getType() == Token.STRING) {
+                if (STRING_REGEXP_METHODS.contains(propertyName)) {
                     Node param = nameNode.getNext();
-          if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+                    if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {
                         return false;
                     }
                 }
             }
+        }
+    }
 
     return true;
 }
\ No newline at end of file
