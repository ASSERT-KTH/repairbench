diff --git a/tmp/8e88ecd2-ceef-41e9-8c21-a4d3637382fa_buggy.java b/tmp/25b897ed-8567-4126-9b78-72854d63ee5c_fixed.java
index b36c3f0..86d1342 100644
--- a/tmp/8e88ecd2-ceef-41e9-8c21-a4d3637382fa_buggy.java
+++ b/tmp/25b897ed-8567-4126-9b78-72854d63ee5c_fixed.java
@@ -1,58 +1,87 @@
+import com.google.common.collect.Sets;
+import java.util.HashSet;
+import java.util.Arrays;
+import java.util.Set;
+
+public class FunctionSideEffectChecker {
+
+    private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = Sets.newHashSet("escape", "unescape");
+    private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = Sets.newHashSet("toSource", "toString", "valueOf");
+    private static final Set<String> REGEXP_METHODS = Sets.newHashSet("exec", "test");
+    private static final Set<String> STRING_REGEXP_METHODS = Sets.newHashSet("match", "search", "replace", "split");
+
     /**
      * Returns true if calls to this function have side effects.
      *
      * @param callNode The call node to inspected.
      * @param compiler A compiler object to provide program state changing
      *     context information. Can be null.
      */
-  static boolean functionCallHasSideEffects(
-      Node callNode, @Nullable AbstractCompiler compiler) {
+    static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {
         if (callNode.getType() != Token.CALL) {
             throw new IllegalStateException(
                     "Expected CALL node, got " + Token.name(callNode.getType()));
         }
 
         if (callNode.isNoSideEffectsCall()) {
             return false;
         }
 
         Node nameNode = callNode.getFirstChild();
 
         // Built-in functions with no side effects.
         if (nameNode.getType() == Token.NAME) {
             String name = nameNode.getString();
             if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                 return false;
             }
         } else if (nameNode.getType() == Token.GETPROP) {
+            Node receiver = nameNode.getFirstChild();
+            if (receiver.getType() == Token.NAME && receiver.getString().equals("Math")) {
+                String methodName = nameNode.getLastChild().getString();
+                if (MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(methodName)) {
+                    return false;
+                }
+            }
+
             if (callNode.hasOneChild()
                     && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                             nameNode.getLastChild().getString())) {
                 return false;
             }
 
             if (callNode.isOnlyModifiesThisCall()
                     && evaluatesToLocalValue(nameNode.getFirstChild())) {
                 return false;
             }
 
             // Functions in the "Math" namespace have no side effects.
-
             if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
+                if (receiver.getType() == Token.REGEXP
                         && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                     return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
+                } else if (receiver.getType() == Token.STRING
                         && STRING_REGEXP_METHODS.contains(
                                 nameNode.getLastChild().getString())) {
                     Node param = nameNode.getNext();
                     if (param != null &&
                             (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+                                    || param.getType() == Token.REGEXP)) {
                         return false;
                     }
                 }
             }
+        }
 
         return true;
     }
+
+    private static final Set<String> MATH_METHODS_WITHOUT_SIDEEFFECTS = Sets.newHashSet(
+            "sin", "cos", "tan", "asin", "acos", "atan", "atan2", "exp", "log",
+            "pow", "sqrt", "ceil", "floor", "round", "abs", "sign", "imag", "real",
+            "fround", "cbrt", "clz32", "hypot", "imul", "log10", "log1p", "log2",
+            "max", "min", "random", "trunc"
+    );
+
+    // Helper methods and classes would go here, but are omitted for brevity.
+}
\ No newline at end of file
