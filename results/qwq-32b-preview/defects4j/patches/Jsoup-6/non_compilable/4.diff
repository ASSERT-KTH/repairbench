diff --git a/tmp/fcd0ffe8-b875-4aff-a354-d701f8905422_buggy.java b/tmp/b606fd61-6270-4d69-9064-884a9fb5eb28_fixed.java
index 99141e0..18c681a 100644
--- a/tmp/fcd0ffe8-b875-4aff-a354-d701f8905422_buggy.java
+++ b/tmp/b606fd61-6270-4d69-9064-884a9fb5eb28_fixed.java
@@ -1,33 +1,62 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.HashMap;
+
+public class Entities {
+    private static final Pattern ESCAPE_PATTERN = Pattern.compile("&(#x[0-9a-fA-F]+|#[0-9]+|[a-zA-Z]+);?");
+
+    private static final HashMap<String, Integer> FULL = new HashMap<String, Integer>() {{
+        put("amp", 38);
+        put("lt", 60);
+        put("gt", 62);
+        put("quot", 34);
+        put("apos", 39);
+        // Add more entities as needed
+    }};
+
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        Matcher m = ESCAPE_PATTERN.matcher(string);
+        StringBuffer accum = new StringBuffer(string.length());
 
         while (m.find()) {
+            String entity = m.group(0);
             int charval = -1;
-            String num = m.group(3);
-            if (num != null) {
+
+            if (entity.startsWith("&#x")) {
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                    charval = Integer.parseInt(entity.substring(4), 16);
                 } catch (NumberFormatException e) {
-                } // skip
+                    // Invalid hexadecimal value, keep the original entity
+                }
+            } else if (entity.startsWith("&#")) {
+                try {
+                    charval = Integer.parseInt(entity.substring(2));
+                } catch (NumberFormatException e) {
+                    // Invalid decimal value, keep the original entity
+                }
             } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
-                    charval = full.get(name);
+                String name = entity.substring(1, entity.indexOf(';'));
+                charval = FULL.getOrDefault(name, -1);
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            if (charval != -1) {
+                m.appendReplacement(accum, Character.toString((char) charval));
             } else {
-                m.appendReplacement(accum, m.group(0));
+                // Entity not found or invalid, keep the original entity
+                m.appendReplacement(accum, entity);
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
+
+    // Example usage
+    public static void main(String[] args) {
+        String escaped = "&#92; &#36;";
+        String unescaped = unescape(escaped);
+        System.out.println(unescaped); // Should print: \ $
+    }
+}
\ No newline at end of file
