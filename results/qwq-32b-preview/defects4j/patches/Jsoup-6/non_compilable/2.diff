diff --git a/tmp/1825b8ba-e6f5-49b5-8d84-76237d7d12d0_buggy.java b/tmp/da99e104-960d-4cdd-a7d9-d56550207097_fixed.java
index 99141e0..111b998 100644
--- a/tmp/1825b8ba-e6f5-49b5-8d84-76237d7d12d0_buggy.java
+++ b/tmp/da99e104-960d-4cdd-a7d9-d56550207097_fixed.java
@@ -1,33 +1,57 @@
 static String unescape(String string) {
-        if (!string.contains("&"))
+    if (!string.contains("&")) {
         return string;
+    }
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    Pattern unescapePattern = Pattern.compile("&#x([0-9a-fA-F]+);|&#(\\d+);|&([a-zA-Z]+);");
+    Matcher m = unescapePattern.matcher(string);
+    StringBuilder accum = new StringBuilder(string.length());
 
+    int lastEnd = 0;
     while (m.find()) {
-            int charval = -1;
-            String num = m.group(3);
-            if (num != null) {
+        accum.append(string, lastEnd, m.start());
+
+        String hexValue = m.group(1);
+        if (hexValue != null) {
             try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                int charval = Integer.parseInt(hexValue, 16);
+                accum.appendCodePoint(charval);
             } catch (NumberFormatException e) {
-                } // skip
-            } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
-                    charval = full.get(name);
+                // Invalid hex value, append as is
+                accum.append(m.group(0));
+            }
+            continue;
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+        String decimalValue = m.group(2);
+        if (decimalValue != null) {
+            try {
+                int charval = Integer.parseInt(decimalValue);
+                accum.appendCodePoint(charval);
+            } catch (NumberFormatException e) {
+                // Invalid decimal value, append as is
+                accum.append(m.group(0));
+            }
+            continue;
+        }
+
+        String name = m.group(3);
+        if (name != null) {
+            Integer charval = full.get(name);
+            if (charval != null) {
+                accum.appendCodePoint(charval);
             } else {
-                m.appendReplacement(accum, m.group(0));
+                // Unknown named entity, append as is
+                accum.append(m.group(0));
             }
+            continue;
         }
-        m.appendTail(accum);
+
+        // Fallback: append as is
+        accum.append(m.group(0));
+        lastEnd = m.end();
+    }
+    accum.append(string.substring(lastEnd));
+
     return accum.toString();
 }
\ No newline at end of file
