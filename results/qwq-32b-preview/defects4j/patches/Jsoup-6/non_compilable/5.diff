diff --git a/tmp/f4748c7c-445a-42e0-8824-279396ee8fdc_buggy.java b/tmp/3f4cfc49-6b30-4972-8d4f-03e56c818ffa_fixed.java
index 99141e0..38cfa3c 100644
--- a/tmp/f4748c7c-445a-42e0-8824-279396ee8fdc_buggy.java
+++ b/tmp/3f4cfc49-6b30-4972-8d4f-03e56c818ffa_fixed.java
@@ -1,33 +1,70 @@
-    static String unescape(String string) {
-        if (!string.contains("&"))
+import org.jsoup.nodes.Entities;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class Entities {
+    private static final Pattern unescapePattern = Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
+
+    public static String unescape(String string) {
+        if (!string.contains("&")) {
             return string;
+        }
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        Matcher m = unescapePattern.matcher(string);
+        StringBuilder accum = new StringBuilder(string.length());
 
+        int lastEnd = 0;
         while (m.find()) {
-            int charval = -1;
+            // Append the text before the match
+            accum.append(string, lastEnd, m.start());
+
+            // Try to resolve the entity
+            String replacement = resolveEntity(m);
+            if (replacement != null) {
+                accum.append(replacement);
+            } else {
+                // If not resolved, keep the original entity
+                accum.append(m.group(0));
+            }
+
+            lastEnd = m.end();
+        }
+        // Append any remaining text after the last match
+        accum.append(string.substring(lastEnd));
+
+        return accum.toString();
+    }
+
+    private static String resolveEntity(Matcher m) {
         String num = m.group(3);
         if (num != null) {
             try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                int base = m.group(2) != null ? 16 : 10;
+                int charval = Integer.parseInt(num, base);
+                if (charval >= 0 && charval <= 0x10FFFF) {
+                    return Character.toString((char) charval);
+                }
             } catch (NumberFormatException e) {
-                } // skip
+                // Ignore and return null
+            }
         } else {
             String name = m.group(1);
-                if (full.containsKey(name))
-                    charval = full.get(name);
+            if (full.containsKey(name)) {
+                return Character.toString(full.get(name));
+            }
+        }
+        return null;
     }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
-            } else {
-                m.appendReplacement(accum, m.group(0));
+    // Assuming full is a map containing named entities
+    private static final java.util.Map<String, Character> full = new java.util.HashMap<>();
+    static {
+        // Initialize the map with named entities
+        full.put("amp", '&');
+        full.put("lt", '<');
+        full.put("gt", '>');
+        full.put("quot", '\"');
+        full.put("apos", '\'');
+        // Add more as needed
     }
 }
\ No newline at end of file
-        m.appendTail(accum);
-        return accum.toString();
-    }
