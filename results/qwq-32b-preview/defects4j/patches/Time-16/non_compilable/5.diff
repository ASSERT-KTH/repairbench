diff --git a/tmp/851af4d9-06af-4481-972e-444eed495ec1_buggy.java b/tmp/dfc9cda8-bf85-4579-a9ca-b2bd5d4dd72e_fixed.java
index b9f1241..7a691ef 100644
--- a/tmp/851af4d9-06af-4481-972e-444eed495ec1_buggy.java
+++ b/tmp/dfc9cda8-bf85-4579-a9ca-b2bd5d4dd72e_fixed.java
@@ -1,60 +1,24 @@
-    /**
-     * Parses a datetime from the given text, at the given position, saving the
-     * result into the fields of the given ReadWritableInstant. If the parse
-     * succeeds, the return value is the new text position. Note that the parse
-     * may succeed without fully reading the text and in this case those fields
-     * that were read will be set.
-     * <p>
-     * Only those fields present in the string will be changed in the specified
-     * instant. All other fields will remain unaltered. Thus if the string only
-     * contains a year and a month, then the day and time will be retained from
-     * the input instant. If this is not the behaviour you want, then reset the
-     * fields before calling this method, or use {@link #parseDateTime(String)}
-     * or {@link #parseMutableDateTime(String)}.
-     * <p>
-     * If it fails, the return value is negative, but the instant may still be
-     * modified. To determine the position where the parse failed, apply the
-     * one's complement operator (~) on the return value.
-     * <p>
-     * This parse method ignores the {@link #getDefaultYear() default year} and
-     * parses using the year from the supplied instant as the default.
-     * <p>
-     * The parse will use the chronology of the instant.
-     *
-     * @param instant  an instant that will be modified, not null
-     * @param text  the text to parse
-     * @param position  position to start parsing from
-     * @return new position, negative value means parse failed -
-     *  apply complement operator (~) to get position of failure
-     * @throws UnsupportedOperationException if parsing is not supported
-     * @throws IllegalArgumentException if the instant is null
-     * @throws IllegalArgumentException if any field is out of range
-     */
-    public int parseInto(ReadWritableInstant instant, String text, int position) {
-        DateTimeParser parser = requireParser();
-        if (instant == null) {
-            throw new IllegalArgumentException("Instant must not be null");
-        }
-        
-        long instantMillis = instant.getMillis();
-        Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
-        
    DateTimeParserBucket bucket = new DateTimeParserBucket(
        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
+   ```
+   Here, `instantLocal` is the local millis of the instant, which includes the entire datetime. When parsing partial dates, the parser should use this as the base and only update the specified fields.
+
+2. **Parsing into the bucket**:
+   ```java
    int newPos = parser.parseInto(bucket, text, position);
+   ```
+   This calls the parser to fill the bucket based on the text.
+
+3. **Computing the new millis**:
+   ```java
    instant.setMillis(bucket.computeMillis(false, text));
-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
-            int parsedOffset = bucket.getOffsetInteger();
-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
-        } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
-        }
-        instant.setChronology(chrono);
-        if (iZone != null) {
-            instant.setZone(iZone);
-        }
-        return newPos;
-    }
+   ```
+   This computes the new millis based on the bucket's fields, potentially overwriting unspecified fields.
+
+The problem likely lies in how `computeMillis` handles unspecified fields. It seems that it's not correctly retaining the original values for unspecified fields, especially the year.
+
+### Solution
+
+To fix this, we need to ensure that when computing the new millis, the unspecified fields are retained from the original `instant`. One way to achieve this is by merging the parsed fields with the original fields in the `instant`.
+
+Here's the modified version of the `parseInto` method:
