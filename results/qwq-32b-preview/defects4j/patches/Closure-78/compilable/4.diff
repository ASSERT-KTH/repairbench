diff --git a/tmp/b17a4867-9d88-48df-a4d5-632413208622_buggy.java b/tmp/c7b1555a-c050-45f9-ab2d-fc31d14d1dbe_fixed.java
index 27e0871..8f08015 100644
--- a/tmp/b17a4867-9d88-48df-a4d5-632413208622_buggy.java
+++ b/tmp/c7b1555a-c050-45f9-ab2d-fc31d14d1dbe_fixed.java
@@ -1,86 +1,79 @@
-  /**
-   * Try to fold arithmetic binary operators
-   */
 private Node performArithmeticOp(int opType, Node left, Node right) {
   // Unlike other operations, ADD operands are not always converted
   // to Number.
-    if (opType == Token.ADD
-        && (NodeUtil.mayBeString(left, false)
-            || NodeUtil.mayBeString(right, false))) {
+  if (opType == Token.ADD &&
+      (NodeUtil.mayBeString(left, false) || NodeUtil.mayBeString(right, false))) {
     return null;
   }
 
-    double result;
-
-    // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
-    // to zero so this is a little akward here.
-
   Double lValObj = NodeUtil.getNumberValue(left);
   if (lValObj == null) {
     return null;
   }
   Double rValObj = NodeUtil.getNumberValue(right);
   if (rValObj == null) {
     return null;
   }
 
   double lval = lValObj;
   double rval = rValObj;
 
+  double result;
   switch (opType) {
     case Token.BITAND:
       result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
       break;
     case Token.BITOR:
       result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
       break;
     case Token.BITXOR:
       result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
       break;
     case Token.ADD:
       result = lval + rval;
       break;
     case Token.SUB:
       result = lval - rval;
       break;
     case Token.MUL:
       result = lval * rval;
       break;
     case Token.MOD:
       if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
+        // Do not fold division by zero, return null to keep original node
         return null;
       }
       result = lval % rval;
       break;
     case Token.DIV:
       if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
+        // Do not fold division by zero, return null to keep original node
         return null;
       }
       result = lval / rval;
       break;
     default:
       throw new Error("Unexpected arithmetic operator");
   }
 
-    // TODO(johnlenz): consider removing the result length check.
-    // length of the left and right value plus 1 byte for the operator.
-    if (String.valueOf(result).length() <=
-        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
+  // Check if the result can be accurately represented as a Number
+  if (Math.abs(result) > MAX_FOLD_NUMBER) {
+    return null;
+  }
 
-        // Do not try to fold arithmetic for numbers > 2^53. After that
-        // point, fixed-point math starts to break down and become inaccurate.
-        Math.abs(result) <= MAX_FOLD_NUMBER) {
-      Node newNumber = Node.newNumber(result);
-      return newNumber;
-    } else if (Double.isNaN(result)) {
+  // Check for NaN, Infinity, and -Infinity
+  if (Double.isNaN(result)) {
     return Node.newString(Token.NAME, "NaN");
   } else if (result == Double.POSITIVE_INFINITY) {
     return Node.newString(Token.NAME, "Infinity");
   } else if (result == Double.NEGATIVE_INFINITY) {
     return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
-    }
-
+  } else {
+    // Ensure that the folded number is precise
+    if (result == (float) result) {
+      return Node.newNumber(result);
+    } else {
       return null;
     }
+  }
+}
\ No newline at end of file
