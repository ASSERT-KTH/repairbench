diff --git a/tmp/a764628b-195a-455d-b895-26d0df110d53_buggy.java b/tmp/0b746ed5-18f1-493e-91cf-1e6c3cb53208_fixed.java
index e8705ac..31f5ada 100644
--- a/tmp/a764628b-195a-455d-b895-26d0df110d53_buggy.java
+++ b/tmp/0b746ed5-18f1-493e-91cf-1e6c3cb53208_fixed.java
@@ -1,24 +1,33 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
     Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
-      Node first = n.getFirstChild();
-
-      // ignore cast nodes.
+    // Keep track of the "this" context of a call. A call without an explicit "this" is a free call.
+    Node receiver = n.getFirstChild();
+    if (receiver == null) {
+        // Handle the case where the receiver is missing.
+        n.putBooleanProp(Node.FREE_CALL, true);
+        return;
+    }
 
-      if (!NodeUtil.isGet(first)) {
+    // Determine if the call is a free call.
+    if (receiver.isName() || receiver.isString()) {
+        // If the receiver is a name or string, it's likely a free call.
+        n.putBooleanProp(Node.FREE_CALL, true);
+    } else if (receiver.isGet()) {
+        // If it's a get node, it's not a free call.
+        n.putBooleanProp(Node.FREE_CALL, false);
+    } else {
+        // Handle other cases as needed.
         n.putBooleanProp(Node.FREE_CALL, true);
     }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+    // Keep track of the context in which eval is called.
+    if (receiver.isName() && "eval".equals(receiver.getString())) {
+        receiver.putBooleanProp(Node.DIRECT_EVAL, true);
+    } else if (receiver.isGet() && receiver.getLastChild().isString()) {
+        String propertyName = receiver.getLastChild().getString();
+        if ("eval".equals(propertyName)) {
+            receiver.putBooleanProp(Node.DIRECT_EVAL, true);
+        }
     }
 }
\ No newline at end of file
