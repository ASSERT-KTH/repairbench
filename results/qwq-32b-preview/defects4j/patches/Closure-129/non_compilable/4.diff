diff --git a/tmp/e5280fc2-e3c4-4ab5-a39b-bd0298422508_buggy.java b/tmp/7190cc45-ca1a-4ea7-8498-4627c3fb1c9e_fixed.java
index e8705ac..ca7c9c3 100644
--- a/tmp/e5280fc2-e3c4-4ab5-a39b-bd0298422508_buggy.java
+++ b/tmp/7190cc45-ca1a-4ea7-8498-4627c3fb1c9e_fixed.java
@@ -1,24 +1,28 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
+  // Keep track of the "this" context of a call. A call without an explicit
+  // "this" is a free call.
   Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+  if (first == null) {
+    // If there is no first child, it's likely an invalid call node.
+    return;
+  }
 
-      if (!NodeUtil.isGet(first)) {
+  // Ignore cast nodes.
+  if (first.isCast()) {
+    return;
+  }
+
+  // Determine if the call is a "free" call.
+  if (!NodeUtil.IsGet(first)) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+  // Keep track of the context in which eval is called.
+  // It's important to distinguish between "(0, eval)()" and "eval()".
+  if (first.isName() && "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
