diff --git a/tmp/61b27470-ef34-479a-ab61-ddda74a4027a_buggy.java b/tmp/7f0e652c-a2f0-473e-bcf1-7852483fe20d_fixed.java
index e8705ac..8a702c5 100644
--- a/tmp/61b27470-ef34-479a-ab61-ddda74a4027a_buggy.java
+++ b/tmp/7f0e652c-a2f0-473e-bcf1-7852483fe20d_fixed.java
@@ -1,24 +1,24 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
+  // Keep track of the "this" context of a call. A call without an explicit "this" is a free call.
   Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+  // Ignore cast nodes.
+  if (first.isCast()) {
+    return;
+  }
 
-      if (!NodeUtil.isGet(first)) {
+  if (NodeUtil.isGet(first)) {
+    // If the first child is a GET node, it's not a free call.
+    n.putBooleanProp(Node.FREE_CALL, false);
+  } else {
+    // Otherwise, it's a free call.
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+  // Keep track of the context in which eval is called. It's important to distinguish between "(0, eval)()" and "eval()".
+  if (first.isName() && "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
