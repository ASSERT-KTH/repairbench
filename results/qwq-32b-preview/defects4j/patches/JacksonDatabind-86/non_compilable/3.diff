diff --git a/tmp/cbcdf65a-638d-42ac-877a-c6fea99b76f9_buggy.java b/tmp/551f7ef2-ddbd-4086-9300-88202aacf79a_fixed.java
index e69de29..485052c 100644
--- a/tmp/cbcdf65a-638d-42ac-877a-c6fea99b76f9_buggy.java
+++ b/tmp/551f7ef2-ddbd-4086-9300-88202aacf79a_fixed.java
@@ -0,0 +1,35 @@
+public class TypeFactory {
+
+    private final Map<Key, JavaType> _typeCache = new ConcurrentHashMap<>();
+
+    public JavaType constructType(Class<?> raw) {
+        Key key = new Key(raw);
+        JavaType type = _typeCache.get(key);
+        if (type == null) {
+            type = buildType(raw);
+            _typeCache.put(key, type);
+        }
+        return type;
+    }
+
+    private JavaType buildType(Class<?> raw) {
+        if (raw.isInterface() || raw.isEnum() || raw.isAnnotation()) {
+            return new SimpleType(raw);
+        } else if (raw.isArray()) {
+            return new ArrayType(raw);
+        } else if (raw.isLocalClass() || raw.isAnonymousClass()) {
+            return new LocalizedType(raw);
+        } else {
+            return new ClassType(raw);
+        }
+    }
+
+    // Ensure that the superclass type is fully resolved before constructing the subclass type
+    public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {
+        JavaType superType = baseType.getSuperClass();
+        if (superType != null) {
+            constructType(superType.getRawClass());
+        }
+        return new SpecializedType(baseType, subclass);
+    }
+}
