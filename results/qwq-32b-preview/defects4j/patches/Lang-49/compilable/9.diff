diff --git a/tmp/2c855ea9-555a-4a65-9b21-ca1d0c23e7d7_buggy.java b/tmp/0ac90229-a5d7-4b22-8f57-3b12783a4ae6_fixed.java
index 08e51e4..2e56f25 100644
--- a/tmp/2c855ea9-555a-4a65-9b21-ca1d0c23e7d7_buggy.java
+++ b/tmp/0ac90229-a5d7-4b22-8f57-3b12783a4ae6_fixed.java
@@ -1,16 +1,29 @@
-    /**
-     * <p>Reduce the fraction to the smallest values for the numerator and
-     * denominator, returning the result.</p>
-     * 
-     * <p>For example, if this fraction represents 2/4, then the result
-     * will be 1/2.</p>
-     *
-     * @return a new reduced fraction instance, or this if no simplification possible
-     */
 public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+    int num = numerator;
+    int denom = denominator;
+    
+    // Handle zero numerator
+    if (num == 0) {
+        return Fraction.getFraction(0, 1);
+    }
+    
+    // Compute the greatest common divisor (GCD) of the absolute values
+    int gcd = greatestCommonDivisor(Math.abs(num), Math.abs(denom));
+    
+    // Simplify numerator and denominator by GCD
+    num /= gcd;
+    denom /= gcd;
+    
+    // Ensure the denominator is positive
+    if (denom < 0) {
+        num = -num;
+        denom = -denom;
+    }
+    
+    // Return a new fraction or this if already reduced
+    if (num == numerator && denom == denominator) {
         return this;
+    } else {
+        return Fraction.getFraction(num, denom);
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
 }
\ No newline at end of file
