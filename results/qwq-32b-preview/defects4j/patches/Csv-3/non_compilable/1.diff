diff --git a/tmp/df84d753-3a85-465e-953a-469b3aafc54e_buggy.java b/tmp/bad52b0b-94f8-43d0-b3f9-ef42ddaf4a07_fixed.java
index 1ad070d..f61cdc3 100644
--- a/tmp/df84d753-3a85-465e-953a-469b3aafc54e_buggy.java
+++ b/tmp/bad52b0b-94f8-43d0-b3f9-ef42ddaf4a07_fixed.java
@@ -1,38 +1,23 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
-    int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
-        final int c = in.read();
 switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
     case CR:
     case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+    case FF:
+    case TAB:
+    case BACKSPACE:
         return c;
     case END_OF_STREAM:
         throw new IOException("EOF whilst processing escape sequence");
     default:
         // Now check for meta-characters
         return c;
-            // indicate unexpected char - available from in.getLastChar()
-        }
 }
\ No newline at end of file
