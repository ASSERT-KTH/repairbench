diff --git a/tmp/fbe44611-b561-4b49-9d59-746e4a8e6f87_buggy.java b/tmp/d6756f35-f152-43f8-8798-21aa96942d03_fixed.java
index 544303b..b76f4c0 100644
--- a/tmp/fbe44611-b561-4b49-9d59-746e4a8e6f87_buggy.java
+++ b/tmp/d6756f35-f152-43f8-8798-21aa96942d03_fixed.java
@@ -1,29 +1,15 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
-    protected RealPointValuePair getSolution() {
-        double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
 for (int i = 0; i < coefficients.length; i++) {
     basicRow = getBasicRow(getNumObjectiveFunctions() + i);
     // if multiple variables can take a given value 
     // then we choose the first and set the rest equal to 0
     coefficients[i] =
         (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
         (restrictToNonNegative ? 0 : mostNegative);
     if (basicRow != null) {
         for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
             if (tableau.getEntry(basicRow, j) == 1) {
                  coefficients[i] = 0;
             }
         }
     }
 }
\ No newline at end of file
-        return new RealPointValuePair(coefficients, f.getValue(coefficients));
-    }
