diff --git a/tmp/216a40b8-94f6-44de-aaa3-34059505123b_buggy.java b/tmp/8079f6fc-9863-4067-a1e3-42cb7a851eb3_fixed.java
index 544303b..9b4152d 100644
--- a/tmp/216a40b8-94f6-44de-aaa3-34059505123b_buggy.java
+++ b/tmp/8079f6fc-9863-4067-a1e3-42cb7a851eb3_fixed.java
@@ -1,29 +1,55 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    int numObjectiveFunctions = getNumObjectiveFunctions();
+    int numDecisionVariables = getOriginalNumDecisionVariables();
+    int totalColumns = numObjectiveFunctions + numDecisionVariables;
+
+    // Map to store which variable is basic
+    Map<Integer, Integer> basicVariables = new HashMap<>();
+
+    // Identify basic variables
+    for (int row = 0; row < numObjectiveFunctions; row++) {
+        for (int col = numObjectiveFunctions; col < totalColumns; col++) {
+            if (getEntry(row, col) == 1) {
+                // Check if this is the only 1 in the row
+                boolean isPivot = true;
+                for (int c = numObjectiveFunctions; c < totalColumns; c++) {
+                    if (c != col && getEntry(row, c) != 0) {
+                        isPivot = false;
+                        break;
+                    }
+                }
+                if (isPivot) {
+                    basicVariables.put(col - numObjectiveFunctions, row);
+                    break;
+                }
+            }
+        }
+    }
+
+    // Extract values for basic variables
+    for (Map.Entry<Integer, Integer> entry : basicVariables.entrySet()) {
+        int varIndex = entry.getKey();
+        int row = entry.getValue();
+        coefficients[varIndex] = getEntry(row, getRhsOffset());
+    }
+
+    // Non-basic variables are already set to 0
+
+    // Adjust for non-negative restrictions if necessary
+    if (!restrictToNonNegative) {
+        double mostNegative = 0;
+        for (double coef : coefficients) {
+            if (coef < mostNegative) {
+                mostNegative = coef;
+            }
+        }
+        if (mostNegative < 0) {
             for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+                coefficients[i] -= mostNegative;
             }
         }
     }
-        }
-        return new RealPointValuePair(coefficients, f.getValue(coefficients));
+
+    return new RealPointValuePair(coefficients, f.value(coefficients));
 }
\ No newline at end of file
