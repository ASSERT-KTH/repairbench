diff --git a/tmp/dddd9035-e522-41f8-8868-5e22bf3e19fd_buggy.java b/tmp/dd8003f4-f04e-4ecc-b14a-bcba9ed72e3d_fixed.java
index 544303b..69cf1be 100644
--- a/tmp/dddd9035-e522-41f8-8868-5e22bf3e19fd_buggy.java
+++ b/tmp/dd8003f4-f04e-4ecc-b14a-bcba9ed72e3d_fixed.java
@@ -1,29 +1,19 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
-        for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
-            }
-        }
+    int numObjectiveFunctions = getNumObjectiveFunctions();
+    int numDecisionVariables = getOriginalNumDecisionVariables();
+    int tableauRows = getNumTableauRows();
+    int tableauColumns = getNumTableauColumns();
+    int rhsOffset = getRhsOffset();
+
+    for (int col = 0; col < numDecisionVariables; col++) {
+        int basicRow = getBasicRow(numObjectiveFunctions + col);
+        if (basicRow != -1) {
+            coefficients[col] = getEntry(basicRow, rhsOffset);
+        } else {
+            coefficients[col] = 0.0;
+        }
+    }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
