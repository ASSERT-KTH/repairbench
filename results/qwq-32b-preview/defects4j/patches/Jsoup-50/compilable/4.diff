diff --git a/tmp/4b3d067d-acc2-4c2c-918e-87b9df3cc2b1_buggy.java b/tmp/c6d8f4ed-3bce-4d32-894c-bebff17c5287_fixed.java
index 25ca093..dbb999f 100644
--- a/tmp/4b3d067d-acc2-4c2c-918e-87b9df3cc2b1_buggy.java
+++ b/tmp/c6d8f4ed-3bce-4d32-894c-bebff17c5287_fixed.java
@@ -1,52 +1,79 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
     Document doc = null;
+    String docData;
 
-        // look for BOM - overrides any other header or input
+    // Detect BOM and adjust charset and ByteBuffer position
+    if (byteData.hasArray()) {
+        byte[] array = byteData.array();
+        int pos = byteData.arrayOffset() + byteData.position();
+        int limit = byteData.arrayOffset() + byteData.limit();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // Check for UTF-8 BOM (EF BB BF)
+        if (pos + 3 <= limit && array[pos] == (byte)0xEF && array[pos + 1] == (byte)0xBB && array[pos + 2] == (byte)0xBF) {
+            byteData.position(pos + 3);
+            charsetName = "UTF-8";
+        }
+        // Check for UTF-16BE BOM (FE FF)
+        else if (pos + 2 <= limit && array[pos] == (byte)0xFE && array[pos + 1] == (byte)0xFF) {
+            byteData.position(pos + 2);
+            charsetName = "UTF-16BE";
+        }
+        // Check for UTF-16LE BOM (FF FE)
+        else if (pos + 2 <= limit && array[pos] == (byte)0xFF && array[pos + 1] == (byte)0xFE) {
+            byteData.position(pos + 2);
+            charsetName = "UTF-16LE";
+        }
+        // Check for UTF-32BE BOM (00 00 FE FF)
+        else if (pos + 4 <= limit && array[pos] == 0x00 && array[pos + 1] == 0x00 && array[pos + 2] == (byte)0xFE && array[pos + 3] == (byte)0xFF) {
+            byteData.position(pos + 4);
+            charsetName = "UTF-32BE";
+        }
+        // Check for UTF-32LE BOM (FF FE 00 00)
+        else if (pos + 4 <= limit && array[pos] == (byte)0xFF && array[pos + 1] == (byte)0xFE && array[pos + 2] == 0x00 && array[pos + 3] == 0x00) {
+            byteData.position(pos + 4);
+            charsetName = "UTF-32LE";
+        }
+    }
+
+    // If charset is still not determined, try to detect from meta tags
+    if (charsetName == null) {
+        // Initial decode with default charset
+        docData = Charset.forName(defaultCharset).decode(byteData.duplicate()).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
                 foundCharset = meta.attr("charset");
+                try {
+                    if (!Charset.isSupported(foundCharset)) {
+                        foundCharset = null;
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                 charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    }
+
+    // Decode byte data with determined charset
+    if (charsetName != null) {
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
+    } else {
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
+
+    // Parse the document
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
+
     return doc;
 }
\ No newline at end of file
