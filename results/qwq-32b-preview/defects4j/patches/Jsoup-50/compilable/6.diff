diff --git a/tmp/9f804ed9-2445-4ec1-bfef-6f18195fdbe8_buggy.java b/tmp/58f28dfc-8bec-403f-ac7d-7fdeee21cc8a_fixed.java
index 25ca093..20b4fe7 100644
--- a/tmp/9f804ed9-2445-4ec1-bfef-6f18195fdbe8_buggy.java
+++ b/tmp/58f28dfc-8bec-403f-ac7d-7fdeee21cc8a_fixed.java
@@ -1,52 +1,55 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    byteData.rewind(); // Ensure we start from the beginning of the buffer
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
-                if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
-                    }
+    // Check for BOM and determine the charset
+    String detectedCharset = detectCharsetFromBOM(byteData);
+    if (detectedCharset != null) {
+        charsetName = detectedCharset;
+    } else if (charsetName == null) {
+        // If no BOM and no charset provided, use a default charset
+        charsetName = "UTF-8"; // or any other default you prefer
     }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    // Decode the byte data using the determined charset
     docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
+
+    // Now parse the document
     doc = parser.parseInput(docData, baseUri);
     doc.outputSettings().charset(charsetName);
-        }
+
     return doc;
 }
+
+private static String detectCharsetFromBOM(ByteBuffer byteData) {
+    byte[] buffer = new byte[4];
+    byteData.get(buffer, 0, Math.min(byteData.remaining(), buffer.length));
+
+    // Reset the position back to the start
+    byteData.rewind();
+
+    // Check for UTF-8 BOM
+    if (buffer[0] == (byte)0xEF && buffer[1] == (byte)0xBB && buffer[2] == (byte)0xBF) {
+        return "UTF-8";
+    }
+    // Check for UTF-16 BE BOM
+    else if (buffer[0] == (byte)0xFE && buffer[1] == (byte)0xFF) {
+        return "UTF-16BE";
+    }
+    // Check for UTF-16 LE BOM
+    else if (buffer[0] == (byte)0xFF && buffer[1] == (byte)0xFE) {
+        return "UTF-16LE";
+    }
+    // Check for UTF-32 BE BOM
+    else if (buffer[0] == (byte)0x00 && buffer[1] == (byte)0x00 && buffer[2] == (byte)0xFE && buffer[3] == (byte)0xFF) {
+        return "UTF-32BE";
+    }
+    // Check for UTF-32 LE BOM
+    else if (buffer[0] == (byte)0xFF && buffer[1] == (byte)0xFE && buffer[2] == (byte)0x00 && buffer[3] == (byte)0x00) {
+        return "UTF-32LE";
+    }
+    // No BOM found
+    return null;
+}
\ No newline at end of file
