diff --git a/tmp/e8cb7f65-7487-4638-b5f7-78c5103c3716_buggy.java b/tmp/eaa3c037-a9e8-4d7d-9f0f-3eefa1d709eb_fixed.java
index 25ca093..6d77fcf 100644
--- a/tmp/e8cb7f65-7487-4638-b5f7-78c5103c3716_buggy.java
+++ b/tmp/eaa3c037-a9e8-4d7d-9f0f-3eefa1d709eb_fixed.java
@@ -1,52 +1,76 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Look for BOM - overrides any other header or input
+    byteData.rewind();
+    byte[] bom = new byte[4];
+    int numRead = byteData.get(bom, 0, Math.min(bom.length, byteData.remaining()));
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    // Check for UTF-32BE BOM: 0x00 0x00 0xFE 0xFF
+    if (numRead >= 4 && bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+        charsetName = "UTF-32BE";
+        byteData.position(4); // Skip BOM
+    }
+    // Check for UTF-32LE BOM: 0xFF 0xFE 0x00 0x00
+    else if (numRead >= 4 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+        charsetName = "UTF-32LE";
+        byteData.position(4); // Skip BOM
+    }
+    // Check for UTF-16BE BOM: 0xFE 0xFF
+    else if (numRead >= 2 && bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+        charsetName = "UTF-16BE";
+        byteData.position(2); // Skip BOM
+    }
+    // Check for UTF-16LE BOM: 0xFF 0xFE
+    else if (numRead >= 2 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+        charsetName = "UTF-16LE";
+        byteData.position(2); // Skip BOM
+    }
+    // Check for UTF-8 BOM: 0xEF 0xBB 0xBF
+    else if (numRead >= 3 && bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+        charsetName = "UTF-8";
+        byteData.position(3); // Skip BOM
+    }
+    // No BOM found, use provided charsetName or default
+    else {
+        byteData.rewind();
+        if (charsetName == null) {
+            // Determine from meta. Safe parse as UTF-8
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                     charsetName = foundCharset;
                     byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                    docData = Charset.forName(charsetName).decode(byteData).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        } else {
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
+
     if (doc == null) {
+        docData = Charset.forName(charsetName).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
\ No newline at end of file
