diff --git a/tmp/410c158b-fa1f-4a8a-87c9-946839826a91_buggy.java b/tmp/b15a8973-8fe2-4756-90e6-fe997e6fc1cd_fixed.java
index 25ca093..7209721 100644
--- a/tmp/410c158b-fa1f-4a8a-87c9-946839826a91_buggy.java
+++ b/tmp/b15a8973-8fe2-4756-90e6-fe997e6fc1cd_fixed.java
@@ -1,52 +1,62 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM - overrides any other header or input
+    byteData.rewind();
+    if (byteData.remaining() >= 4) {
+        int first3Bytes = byteData.get() & 0xFF |
+                           (byteData.get() & 0xFF) << 8 |
+                           (byteData.get() & 0xFF) << 16;
+        byteData.rewind();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        if (first3Bytes == 0xEFBBBF) { // UTF-8 BOM
+            charsetName = "UTF-8";
+            byteData.position(3);
+        } else if (first3Bytes == 0xFFFEFEFF) { // UTF-32 BE
+            charsetName = "UTF-32BE";
+            byteData.position(4);
+        } else if (first3Bytes == 0xFFFEFEFF) { // UTF-32 LE
+            charsetName = "UTF-32LE";
+            byteData.position(4);
+        } else {
+            byteData.rewind();
+            if (charsetName == null) {
                 docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 doc = parser.parseInput(docData, baseUri);
                 Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+                if (meta != null) {
                     String foundCharset = null;
                     if (meta.hasAttr("http-equiv")) {
                         foundCharset = getCharsetFromContentType(meta.attr("content"));
                     }
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                    if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                         foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                         charsetName = foundCharset;
                         byteData.rewind();
                         docData = Charset.forName(foundCharset).decode(byteData).toString();
                         doc = null;
                     }
                 }
-        } else { // specified by content type header (or by user on file load)
+            } else {
                 Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
                 docData = Charset.forName(charsetName).decode(byteData).toString();
             }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
         }
+    }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
