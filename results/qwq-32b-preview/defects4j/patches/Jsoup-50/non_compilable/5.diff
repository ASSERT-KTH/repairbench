diff --git a/tmp/8e9e3b2e-f397-48ad-8e91-72b6b9c2a819_buggy.java b/tmp/fb5ac896-6555-43b3-8690-72e7246ce73a_fixed.java
index 25ca093..a4a2f03 100644
--- a/tmp/8e9e3b2e-f397-48ad-8e91-72b6b9c2a819_buggy.java
+++ b/tmp/fb5ac896-6555-43b3-8690-72e7246ce73a_fixed.java
@@ -1,52 +1,80 @@
-    // todo - this is getting gnarly. needs a rewrite.
-    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
-        Document doc = null;
-
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
-                if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
-                    }
-                }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+// Read the first 4 bytes for BOM detection
+
+byte[] bomHeader = new byte[4];
+
+byteData.rewind();
+
+byteData.get(bomHeader);
+
+// Determine charset based on BOM
+
+String detectedCharset = null;
+
+if (starts_with(bomHeader, new byte[]{ (byte)0xFE, (byte)0xFF, 0, 0 })) {
+
+    detectedCharset = "UTF-32BE";
+
+    // Skip 4 bytes for BOM
+
+    byteData.position(4);
+
+} else if (starts_with(bomHeader, new byte[]{ (byte)0xFF, (byte)0xFE, 0, 0 })) {
+
+    detectedCharset = "UTF-32LE";
+
+    // Skip 4 bytes for BOM
+
+    byteData.position(4);
+
+} else if (starts_with(bomHeader, new byte[]{ (byte)0xFE, (byte)0xFF })) {
+
+    detectedCharset = "UTF-16BE";
+
+    // Skip 2 bytes for BOM
+
+    byteData.position(2);
+
+} else if (starts_with(bomHeader, new byte[]{ (byte)0xFF, (byte)0xFE })) {
+
+    detectedCharset = "UTF-16LE";
+
+    // Skip 2 bytes for BOM
+
+    byteData.position(2);
+
+} else {
+
+    // No BOM found, proceed with default behavior
+
     byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+
 }
+
+// If charset is detected from BOM, use it
+
+if (detectedCharset != null) {
+
+    charsetName = detectedCharset;
+
+}
+
+// If charsetName is still null, use default behavior
+
+if (charsetName == null) {
+
+    // Try to detect charset from meta tags
+
+    // ...
+
 }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+
+// Decode the byte data using charsetName
+
 docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
+
+// Parse the document
+
 doc = parser.parseInput(docData, baseUri);
+
 doc.outputSettings().charset(charsetName);
-        }
-        return doc;
-    }
