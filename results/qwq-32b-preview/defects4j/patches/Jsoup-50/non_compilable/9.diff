diff --git a/tmp/a410eaff-086e-4a09-ac14-4768a2264693_buggy.java b/tmp/0c43c74f-1e72-4af1-926a-b7a42207322d_fixed.java
index 25ca093..0087c33 100644
--- a/tmp/a410eaff-086e-4a09-ac14-4768a2264693_buggy.java
+++ b/tmp/0c43c74f-1e72-4af1-926a-b7a42207322d_fixed.java
@@ -1,52 +1,64 @@
-    // todo - this is getting gnarly. needs a rewrite.
-    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
+static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) throws UnsupportedEncodingException {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM to determine the character encoding
+    byteData.mark();
+    byte[] bom = new byte[4];
+    byteData.get(bom);
+    byteData.reset();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    String encoding = detectEncodingFromBOM(bom);
+    if (encoding != null) {
+        charsetName = encoding;
+    } else if (charsetName == null) {
+        // Try to detect charset from meta tags
+        docData = new String(byteData.array(), "UTF-8");
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                 charsetName = foundCharset;
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                docData = new String(byteData.array(), charsetName);
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
+
+    if (charsetName == null) {
         charsetName = defaultCharset;
-            doc = null;
     }
-        if (doc == null) {
+
+    docData = new String(byteData.array(), charsetName);
     doc = parser.parseInput(docData, baseUri);
     doc.outputSettings().charset(charsetName);
-        }
     return doc;
 }
+
+private static String detectEncodingFromBOM(byte[] bom) {
+    if (bom.length >= 4 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) {
+        return "UTF-32BE";
+    } else if (bom.length >= 4 && bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+        return "UTF-32LE";
+    } else if (bom.length >= 2 && bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+        return "UTF-16BE";
+    } else if (bom.length >= 2 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+        return "UTF-16LE";
+    } else {
+        return null;
+    }
+}
\ No newline at end of file
