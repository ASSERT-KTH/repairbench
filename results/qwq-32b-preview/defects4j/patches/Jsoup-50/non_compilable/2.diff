diff --git a/tmp/63a90eb9-6830-46b3-aa5b-a94e042a4ef4_buggy.java b/tmp/5a16072b-32f1-4c9c-b896-b9bdc9f9701d_fixed.java
index 25ca093..8402ac6 100644
--- a/tmp/63a90eb9-6830-46b3-aa5b-a94e042a4ef4_buggy.java
+++ b/tmp/5a16072b-32f1-4c9c-b896-b9bdc9f9701d_fixed.java
@@ -1,52 +1,87 @@
-    // todo - this is getting gnarly. needs a rewrite.
+import java.nio.ByteBuffer;
+import java.nio.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+
+public class HtmlParser {
+
+    private static final String defaultCharset = "UTF-8"; // assuming default charset is UTF-8
+
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
-        Document doc = null;
-
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        String detectedCharset = detectCharsetFromBom(byteData);
+        if (detectedCharset != null) {
+            charsetName = detectedCharset;
+        } else if (charsetName == null) {
+            // No BOM and no charsetName provided; use default charset to decode and parse meta tags
+            String initialDocData = Charset.forName(defaultCharset).decode(byteData).toString();
+            Document initialDoc = parser.parseInput(initialDocData, baseUri);
+            Element meta = initialDoc.select("meta[http-equiv=content-type], meta[charset]").first();
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
-                    } catch (IllegalCharsetNameException e) {
+                    } catch (IllegalCharSetNameException e) {
                         foundCharset = null;
                     }
                 }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+                if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                     charsetName = foundCharset;
                     byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
+        // At this point, charsetName should be set either from BOM, meta tag, or default
+        String docData = Charset.forName(charsetName).decode(byteData).toString();
+        Document doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
-        }
         return doc;
     }
+
+    private static String detectCharsetFromBom(ByteBuffer byteBuffer) {
+        byteBuffer.mark();
+        byte[] bom = new byte[4];
+        int numRead = byteBuffer.get(bom);
+        String charsetName = null;
+        if (numRead >= 4) {
+            if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+                charsetName = "UTF-32BE";
+            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+                charsetName = "UTF-32LE";
+            }
+        }
+        if (numRead >= 2) {
+            if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+                charsetName = "UTF-16BE";
+            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+                charsetName = "UTF-16LE";
+            }
+        }
+        if (numRead >= 3) {
+            if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+                charsetName = "UTF-8";
+            }
+        }
+        byteBuffer.reset();
+        return charsetName;
+    }
+
+    private static String getCharsetFromContentType(String contentType) {
+        // Implement logic to extract charset from content-type string
+        // For example: content-type: text/html; charset=ISO-8859-1
+        int charsetStart = contentType.toLowerCase().indexOf("charset=");
+        if (charsetStart != -1) {
+            String charset = contentType.substring(charsetStart + 8).trim();
+            charset = charset.replaceAll("[\"']", "");
+            return charset;
+        }
+        return null;
+    }
+}
\ No newline at end of file
