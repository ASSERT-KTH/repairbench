diff --git a/tmp/7c2343e6-e98b-4a5a-9a3f-9cca8ca482f9_buggy.java b/tmp/33949849-5e2b-4193-a972-d094f77607dd_fixed.java
index 25ca093..740390f 100644
--- a/tmp/7c2343e6-e98b-4a5a-9a3f-9cca8ca482f9_buggy.java
+++ b/tmp/33949849-5e2b-4193-a972-d094f77607dd_fixed.java
@@ -1,52 +1,98 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    final String defaultCharset = "UTF-8"; // 确保默认字符集已定义
 
-        // look for BOM - overrides any other header or input
+    // 检测BOM并设置相应的字符集
+    String detectedCharset = detectCharsetByBOM(byteData);
+    int bomLength = getBOMLength(detectedCharset);
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // 调整ByteBuffer的位置以跳过BOM
+    byteData.position(bomLength);
+
+    if (charsetName == null) {
+        // 使用检测到的字符集解码数据
+        docData = Charset.forName(detectedCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
+
+        // 从<meta>标签中检测字符集
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+            if (foundCharset != null && !foundCharset.equals(detectedCharset)) {
+                // 重新解码数据
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else {
+        // 使用指定的字符集解码数据
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : detectedCharset);
     }
     return doc;
 }
+
+private static String detectCharsetByBOM(ByteBuffer byteData) {
+    byteData.mark();
+    byte[] bom = new byte[4];
+    byteData.get(bom); // 读取最多4个字节用于BOM检测
+    byteData.reset();
+
+    if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+        return "UTF-32BE";
+    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+        return "UTF-32LE";
+    } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+        return "UTF-16BE";
+    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+        return "UTF-16LE";
+    } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+        return "UTF-8";
+    } else {
+        return "UTF-8"; // 默认字符集
+    }
+}
+
+private static int getBOMLength(String charset) {
+    if ("UTF-32BE".equals(charset) || "UTF-32LE".equals(charset)) {
+        return 4;
+    } else if ("UTF-16BE".equals(charset) || "UTF-16LE".equals(charset)) {
+        return 2;
+    } else if ("UTF-8".equals(charset)) {
+        return 3;
+    } else {
+        return 0;
+    }
+}
+
+private static String getCharsetFromContentType(String contentType) {
+    // 实现从Content-Type中提取字符集的逻辑
+    // 这里只是一个占位符，实际实现可能需要更复杂的逻辑
+    String[] parts = contentType.split(";");
+    for (String part : parts) {
+        part = part.trim();
+        if (part.toLowerCase().startsWith("charset")) {
+            return part.split("=")[1].trim().replaceAll("\"", "");
+        }
+    }
+    return null;
+}
\ No newline at end of file
