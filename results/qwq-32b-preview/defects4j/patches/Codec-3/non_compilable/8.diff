diff --git a/tmp/4a1e7b41-cffa-4321-b902-14cc3c05b5df_buggy.java b/tmp/fa1adf88-9d0a-48be-9638-d53ce26c8cd2_fixed.java
index 4e7ca9e..7240dd9 100644
--- a/tmp/4a1e7b41-cffa-4321-b902-14cc3c05b5df_buggy.java
+++ b/tmp/fa1adf88-9d0a-48be-9638-d53ce26c8cd2_fixed.java
@@ -1,55 +1,92 @@
-    /**
-     * Handles 'G' cases
-     */
-    private int handleG(String value, 
-                        DoubleMetaphoneResult result, 
-                        int index, 
-                        boolean slavoGermanic) {
    if (charAt(value, index + 1) == 'H') {
        index = handleGH(value, result, index);
-        } else if (charAt(value, index + 1) == 'N') {
-            if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {
-                result.append("KN", "N");
-            } else if (!contains(value, index + 2, 2, "EY") && 
-                       charAt(value, index + 1) != 'Y' && !slavoGermanic) {
-                result.append("N", "KN");
-            } else {
-                result.append("KN");
    }
-            index = index + 2;
-        } else if (contains(value, index + 1, 2, "LI") && !slavoGermanic) {
+   ```
+   This handles the 'GH' case separately.
+
+2. **Check for 'GN'**:
+   ```java
+   else if (charAt(value, index + 1) == 'N') {
+       // ...
+   }
+   ```
+   This handles the 'GN' case.
+
+3. **Check for 'GLI'**:
+   ```java
+   else if (contains(value, index + 1, 2, "LI") && !slavoGermanic) {
        result.append("KL", "L");
        index += 2;
-        } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {
-            //-- -ges-, -gep-, -gel-, -gie- at beginning --//
+   }
+   ```
+   This handles 'GLI' and appends "KL" and "L".
+
+4. **Check for 'G' at the beginning followed by certain letters**:
+   ```java
+   else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {
        result.append('K', 'J');
        index += 2;
-        } else if ((contains(value, index + 1, 2, "ER") || 
-                    charAt(value, index + 1) == 'Y') &&
+   }
+   ```
+   This handles cases like '-ges-', '-gep-', '-gel-', '-gie-' at the beginning.
+
+5. **Check for '-ger-' or '-gy-' not in specific words**:
+   ```java
+   else if ((contains(value, index + 1, 2, "ER") || charAt(value, index + 1) == 'Y') &&
             !contains(value, 0, 6, "DANGER", "RANGER", "MANGER") &&
             !contains(value, index - 1, 1, "E", "I") &&
             !contains(value, index - 1, 3, "RGY", "OGY")) {
-            //-- -ger-, -gy- --//
        result.append('K', 'J');
        index += 2;
-        } else if (contains(value, index + 1, 1, "E", "I", "Y") || 
+   }
+   ```
+   This handles '-ger-' or '-gy-' and appends 'K' and 'J'.
+
+6. **Check for 'G' followed by 'E', 'I', 'Y' or specific patterns**:
+   ```java
+   else if (contains(value, index + 1, 1, "E", "I", "Y") ||
             contains(value, index - 1, 4, "AGGI", "OGGI")) {
-            //-- Italian "biaggi" --//
-            if ((contains(value, 0 ,4, "VAN ", "VON ") || contains(value, 0, 3, "SCH")) || contains(value, index + 1, 2, "ET")) {
-                //-- obvious germanic --//
+       if ((contains(value, 0, 4, "VAN ", "VON ") || contains(value, 0, 3, "SCH")) ||
+           contains(value, index + 1, 2, "ET")) {
            result.append('K');
        } else if (contains(value, index + 1, 4, "IER")) {
            result.append('J');
        } else {
            result.append('J', 'K');
        }
        index += 2;
-        } else if (charAt(value, index + 1) == 'G') {
+   }
+   ```
+   This handles 'G' followed by 'E', 'I', 'Y' and appends 'J' and 'K' in some cases.
+
+7. **Check for double 'G'**:
+   ```java
+   else if (charAt(value, index + 1) == 'G') {
        index += 2;
        result.append('K');
-        } else {
+   }
+   ```
+   This handles double 'G' and appends 'K'.
+
+8. **Default case**:
+   ```java
+   else {
        index++;
        result.append('K');
    }
-        return index;
-    }
+   ```
+   This appends 'K' by default.
+
+Given that "Angier" is being encoded incorrectly, let's see which condition it falls under.
+
+- "Angier" starts with 'A', followed by 'N', 'G', 'I', 'E', 'R'.
+
+- At index 1, 'N'.
+
+- At index 2, 'G', followed by 'I'.
+
+- 'G' is followed by 'I', which is in "E", "I", "Y".
+
+- So, it should enter the 6th condition.
+
+Looking at the 6th condition:
