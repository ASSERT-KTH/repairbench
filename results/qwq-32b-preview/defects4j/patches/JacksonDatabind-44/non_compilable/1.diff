diff --git a/tmp/fe787cd5-6591-46e2-85be-e132b5f0691b_buggy.java b/tmp/68ef3cf0-a8d2-438e-b2d9-781f6c6f12d4_fixed.java
index 1a63a66..b7c6d72 100644
--- a/tmp/fe787cd5-6591-46e2-85be-e132b5f0691b_buggy.java
+++ b/tmp/68ef3cf0-a8d2-438e-b2d9-781f6c6f12d4_fixed.java
@@ -1,21 +1,21 @@
 @Override
 @Deprecated
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+    // Check if subclass is actually a subclass of _class
+    if (!_class.isAssignableFrom(subclass)) {
+        // Handle placeholder classes or report error
+        if (_class == Void.TYPE || _class == NoClass.class) {
+            // Handle placeholder classes appropriately
+            // For example, return a new SimpleType with the subclass
+            return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic);
+        } else {
+            throw new IllegalArgumentException("Class " + subclass.getName() + " not sub-type of " + _class.getName());
+        }
+    }
+    // Otherwise, create a new SimpleType instance
+    return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic);
 }
\ No newline at end of file
