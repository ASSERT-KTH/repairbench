diff --git a/tmp/e6dc1d91-b31f-4e88-9cd1-25bc33f1e692_buggy.java b/tmp/d8675a41-e64d-4b2e-81a5-6a3e72e96edc_fixed.java
index 1126687..85c667e 100644
--- a/tmp/e6dc1d91-b31f-4e88-9cd1-25bc33f1e692_buggy.java
+++ b/tmp/d8675a41-e64d-4b2e-81a5-6a3e72e96edc_fixed.java
@@ -1,65 +1,6 @@
-  /**
-   * Try to fold shift operations
-   */
-  private Node tryFoldShift(Node n, Node left, Node right) {
 if (left.getType() == Token.NUMBER &&
     right.getType() == Token.NUMBER) {
 
   double result;
   double lval = left.getDouble();
   double rval = right.getDouble();
\ No newline at end of file
-
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
-        return n;
-      }
-
-      // Convert the numbers to ints
-      int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
-      int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
-        return n;
-      }
-
-      switch (n.getType()) {
-        case Token.LSH:
-          result = lvalInt << rvalInt;
-          break;
-        case Token.RSH:
-          result = lvalInt >> rvalInt;
-          break;
-        case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
-          break;
-        default:
-          throw new AssertionError("Unknown shift operator: " +
-              Node.tokenToName(n.getType()));
-      }
-
-      Node newNumber = Node.newNumber(result);
-      n.getParent().replaceChild(n, newNumber);
-      reportCodeChange();
-
-      return newNumber;
-    }
-
-    return n;
-  }
