diff --git a/tmp/18f00295-aa39-4def-8fda-278c6127aed0_buggy.java b/tmp/a0c1ca66-56ef-460a-ba04-b9d75cec6e77_fixed.java
index 1126687..728a711 100644
--- a/tmp/18f00295-aa39-4def-8fda-278c6127aed0_buggy.java
+++ b/tmp/a0c1ca66-56ef-460a-ba04-b9d75cec6e77_fixed.java
@@ -1,65 +1,84 @@
-  /**
-   * Try to fold shift operations
-   */
+
 private Node tryFoldShift(Node n, Node left, Node right) {
+
   if (left.getType() == Token.NUMBER &&
+
       right.getType() == Token.NUMBER) {
 
-      double result;
     double lval = left.getDouble();
+
     double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
+    // Check if the left operand is within 32-bit integer range
+
     if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+
       error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
       return n;
+
     }
 
-      // Convert the numbers to ints
+    // Convert the shift amount to an integer and normalize it to 0-31
+
+    int rvalInt = (int) rval & 0x1F;
+
+    // Convert the left operand to int
+
     int lvalInt = (int) lval;
+
     if (lvalInt != lval) {
+
       error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
 
-      int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
       return n;
+
     }
 
+    // Perform the shift operation based on the node type
+
+    double result;
+
     switch (n.getType()) {
+
       case Token.LSH:
+
         result = lvalInt << rvalInt;
+
         break;
+
       case Token.RSH:
+
         result = lvalInt >> rvalInt;
+
         break;
+
       case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
+
         result = lvalInt >>> rvalInt;
+
         break;
+
       default:
+
         throw new AssertionError("Unknown shift operator: " +
+
             Node.tokenToName(n.getType()));
+
     }
 
+    // Create a new number node with the result
+
     Node newNumber = Node.newNumber(result);
+
     n.getParent().replaceChild(n, newNumber);
+
     reportCodeChange();
 
     return newNumber;
+
   }
 
   return n;
+
 }
