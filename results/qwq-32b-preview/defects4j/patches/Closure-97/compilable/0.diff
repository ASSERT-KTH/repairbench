diff --git a/tmp/5c6c80cc-6714-45bf-9a4b-1159564fd132_buggy.java b/tmp/5056f36f-1267-4ddf-8d04-40d04bfe5ba6_fixed.java
index 1126687..541232a 100644
--- a/tmp/5c6c80cc-6714-45bf-9a4b-1159564fd132_buggy.java
+++ b/tmp/5056f36f-1267-4ddf-8d04-40d04bfe5ba6_fixed.java
@@ -1,65 +1,52 @@
-  /**
-   * Try to fold shift operations
-   */
 private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
-
-      double result;
+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {
         double lval = left.getDouble();
         double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
+        // Check if left operand is within 32-bit integer range
         if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
             error(BITWISE_OPERAND_OUT_OF_RANGE, left);
             return n;
         }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+        // Check if shift amount is an integer
+        if (rval != (int) rval) {
+            error(FRACTIONAL_BITWISE_OPERAND, right);
             return n;
         }
 
-      // Convert the numbers to ints
         int lvalInt = (int) lval;
+        int rvalInt = (int) rval;
+
+        // Check if left operand has fractional part
         if (lvalInt != lval) {
             error(FRACTIONAL_BITWISE_OPERAND, left);
             return n;
         }
 
-      int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
-        return n;
-      }
+        // Mask shift amount to 5 bits
+        rvalInt &= 31;
 
+        int result;
         switch (n.getType()) {
             case Token.LSH:
                 result = lvalInt << rvalInt;
                 break;
             case Token.RSH:
                 result = lvalInt >> rvalInt;
                 break;
             case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+                // Treat left operand as unsigned 32-bit integer
+                result = (int) ((lvalInt >>> rvalInt));
                 break;
             default:
-          throw new AssertionError("Unknown shift operator: " +
-              Node.tokenToName(n.getType()));
+                throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
         }
 
         Node newNumber = Node.newNumber(result);
         n.getParent().replaceChild(n, newNumber);
         reportCodeChange();
-
         return newNumber;
     }
-
     return n;
 }
\ No newline at end of file
