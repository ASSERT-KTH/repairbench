diff --git a/tmp/106efef8-eac4-4f99-8b78-7c0d3a475c64_buggy.java b/tmp/681c76f9-842f-465d-a433-9820c986d62b_fixed.java
index 1126687..ab11eb6 100644
--- a/tmp/106efef8-eac4-4f99-8b78-7c0d3a475c64_buggy.java
+++ b/tmp/681c76f9-842f-465d-a433-9820c986d62b_fixed.java
@@ -1,65 +1,57 @@
-  /**
-   * Try to fold shift operations
-   */
 private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
-
-      double result;
+  if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {
     double lval = left.getDouble();
     double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
-        return n;
-      }
-
-      // Convert the numbers to ints
+    // Check if both operands are integers
     int lvalInt = (int) lval;
     if (lvalInt != lval) {
       error(FRACTIONAL_BITWISE_OPERAND, left);
       return n;
     }
 
     int rvalInt = (int) rval;
     if (rvalInt != rval) {
       error(FRACTIONAL_BITWISE_OPERAND, right);
       return n;
     }
 
+    // Check if the left operand is within 32-bit integer range
+    if (lvalInt < Integer.MIN_VALUE || lvalInt > Integer.MAX_VALUE) {
+      error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+      return n;
+    }
+
+    // Check if the shift amount is within [0, 32)
+    if (rvalInt < 0 || rvalInt >= 32) {
+      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+      return n;
+    }
+
+    int result;
     switch (n.getType()) {
       case Token.LSH:
         result = lvalInt << rvalInt;
         break;
       case Token.RSH:
         result = lvalInt >> rvalInt;
         break;
       case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
         result = lvalInt >>> rvalInt;
         break;
       default:
         throw new AssertionError("Unknown shift operator: " +
             Node.tokenToName(n.getType()));
     }
 
-      Node newNumber = Node.newNumber(result);
+    // Convert the result to a double to match the Node.newNumber method
+    double resultDouble = (double) result;
+    Node newNumber = Node.newNumber(resultDouble);
     n.getParent().replaceChild(n, newNumber);
     reportCodeChange();
 
     return newNumber;
   }
 
   return n;
 }
\ No newline at end of file
