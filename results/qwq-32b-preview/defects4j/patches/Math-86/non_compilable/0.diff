diff --git a/tmp/cde93985-952c-4ebd-a5b0-4b074bc17d78_buggy.java b/tmp/80da1b73-cc96-4a13-8700-a57c5f236e03_fixed.java
index 0eef537..112cfa1 100644
--- a/tmp/cde93985-952c-4ebd-a5b0-4b074bc17d78_buggy.java
+++ b/tmp/80da1b73-cc96-4a13-8700-a57c5f236e03_fixed.java
@@ -1,74 +1,12 @@
-    /**
-     * Calculates the Cholesky decomposition of the given matrix.
-     * @param matrix the matrix to decompose
-     * @param relativeSymmetryThreshold threshold above which off-diagonal
-     * elements are considered too different and matrix not symmetric
-     * @param absolutePositivityThreshold threshold below which diagonal
-     * elements are considered null and matrix not positive definite
-     * @exception NonSquareMatrixException if matrix is not square
-     * @exception NotSymmetricMatrixException if matrix is not symmetric
-     * @exception NotPositiveDefiniteMatrixException if the matrix is not
-     * strictly positive definite
-     * @see #CholeskyDecompositionImpl(RealMatrix)
-     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
-     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
-     */
-    public CholeskyDecompositionImpl(final RealMatrix matrix,
-                                     final double relativeSymmetryThreshold,
-                                     final double absolutePositivityThreshold)
-        throws NonSquareMatrixException,
-               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
-        if (!matrix.isSquare()) {
-            throw new NonSquareMatrixException(matrix.getRowDimension(),
-                                               matrix.getColumnDimension());
-        }
-
-        final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
-        cachedL  = null;
-        cachedLT = null;
-
-        // check the matrix before transformation
-        for (int i = 0; i < order; ++i) {
-
-            final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
-            for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
-                final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
-                if (Math.abs(lIJ - lJI) > maxDelta) {
-                    throw new NotSymmetricMatrixException();
-                }
-                lJ[i] = 0;
-           }
-        }
+{
 
-        // transform the matrix
-        for (int i = 0; i < order; ++i) {
+{ 0.40434286, -0.09376327, 0.30328980, 0.04909388 },
 
-            final double[] ltI = lTData[i];
+{ -0.09376327, 0.10400408, 0.07137959, 0.04762857 },
 
-            // check diagonal element
+{ 0.30328980, 0.07137959, 0.30458776, 0.04882449 },
 
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
-
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
-                }
-            }
-
-        }
+{ 0.04909388, 0.04762857, 0.04882449, 0.07543265 }
 
 }
