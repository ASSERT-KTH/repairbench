diff --git a/tmp/a74c3772-1126-402e-8579-23c3fe39e968_buggy.java b/tmp/ffae001c-6204-4f14-a29e-6ee8c84fc1a2_fixed.java
index 39981f0..76eacf8 100644
--- a/tmp/a74c3772-1126-402e-8579-23c3fe39e968_buggy.java
+++ b/tmp/ffae001c-6204-4f14-a29e-6ee8c84fc1a2_fixed.java
@@ -1,65 +1,58 @@
 /**
  * Given a node, get a human-readable name for the type of that node so
  * that will be easy for the programmer to find the original declaration.
  *
  * For example, if SubFoo's property "bar" might have the human-readable
  * name "Foo.prototype.bar".
  *
  * @param n The node.
  * @param dereference If true, the type of the node will be dereferenced
  *     to an Object type, if possible.
  */
 String getReadableJSTypeName(Node n, boolean dereference) {
 
   // The best type name is the actual type name.
 
   // If we're analyzing a GETPROP, the property may be inherited by the
   // prototype chain. So climb the prototype chain and find out where
   // the property was originally defined.
   if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+    JSType type = getJSType(n.getFirstChild());
+    if (type != null) {
+      ObjectType objectType = type.toObjectType();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
+        // Find the original defining type of the property
         while (objectType != null && !objectType.hasOwnProperty(propName)) {
           objectType = objectType.getImplicitPrototype();
         }
-        }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
+        if (objectType != null) {
+          // If the property is found, return the type name followed by the property name
           return objectType.toString() + "." + propName;
         }
       }
     }
+  }
 
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
       (type.toObjectType() != null &&
        type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName != null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
     // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
