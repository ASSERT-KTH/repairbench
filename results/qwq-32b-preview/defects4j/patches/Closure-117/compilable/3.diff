diff --git a/tmp/f0f35c94-adcc-4065-b56d-4bac569de5f3_buggy.java b/tmp/eac1d952-7d7a-4800-811b-8163686a0379_fixed.java
index 39981f0..d4e8680 100644
--- a/tmp/f0f35c94-adcc-4065-b56d-4bac569de5f3_buggy.java
+++ b/tmp/eac1d952-7d7a-4800-811b-8163686a0379_fixed.java
@@ -1,65 +1,64 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
 
   // The best type name is the actual type name.
 
   // If we're analyzing a GETPROP, the property may be inherited by the
   // prototype chain. So climb the prototype chain and find out where
   // the property was originally defined.
   if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+    JSType objectType = getJSType(n.getFirstChild());
     if (objectType != null) {
+      objectType = dereference ? objectType.dereference() : objectType;
+      if (objectType instanceof ObjectType) {
         String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
-          }
-        }
-
+        ObjectType originalType = findOriginalType((ObjectType) objectType, propName);
+        if (originalType != null) {
           // Don't show complex function names or anonymous types.
           // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+          if (originalType.getConstructor() != null ||
+              originalType.isFunctionPrototypeType()) {
+            return originalType.toString() + "." + propName;
+          }
+        }
       }
     }
   }
 
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
       (type.toObjectType() != null &&
        type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName != null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
     // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
+
+private ObjectType findOriginalType(ObjectType objectType, String propName) {
+  if (objectType == null) {
+    return null;
+  }
+  if (objectType.hasOwnProperty(propName)) {
+    return objectType;
+  }
+  if (objectType.getConstructor() != null && objectType.getConstructor().isInterface()) {
+    return FunctionType.getTopDefiningInterface(objectType, propName);
+  } else {
+    // classes
+    ObjectType proto = objectType.getImplicitPrototype();
+    return findOriginalType(proto, propName);
+  }
+}
\ No newline at end of file
