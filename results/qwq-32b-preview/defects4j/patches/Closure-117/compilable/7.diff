diff --git a/tmp/b7920ff7-6124-485d-8b38-11873fc7e45d_buggy.java b/tmp/07a920e9-585c-4cb4-9021-be41ed150717_fixed.java
index 39981f0..a13419b 100644
--- a/tmp/b7920ff7-6124-485d-8b38-11873fc7e45d_buggy.java
+++ b/tmp/07a920e9-585c-4cb4-9021-be41ed150717_fixed.java
@@ -1,65 +1,53 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
-
   // The best type name is the actual type name.
 
   // If we're analyzing a GETPROP, the property may be inherited by the
   // prototype chain. So climb the prototype chain and find out where
   // the property was originally defined.
   if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+    JSType type = getJSType(n.getFirstChild());
+    if (type != null) {
+      ObjectType objectType = type.toObjectType();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
+        // Find the type where the property is originally defined
         while (objectType != null && !objectType.hasOwnProperty(propName)) {
           objectType = objectType.getImplicitPrototype();
         }
+        if (objectType != null) {
+          // Get the constructor type if available
+          FunctionType constructor = objectType.getConstructor();
+          if (constructor != null) {
+            return constructor.getDisplayName() + ".prototype." + propName;
+          } else if (objectType.isFunctionPrototypeType()) {
+            return "Function.prototype." + propName;
+          } else {
+            return objectType.getDisplayName() + "." + propName;
+          }
         }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
       }
     }
   }
 
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
       (type.toObjectType() != null &&
        type.toObjectType().getConstructor() != null)) {
-      return type.toString();
+    return type.getDisplayName();
   }
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName != null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
     // Don't show complex function names.
     return "function";
   } else {
-      return type.toString();
+    return type.getDisplayName();
   }
 }
\ No newline at end of file
