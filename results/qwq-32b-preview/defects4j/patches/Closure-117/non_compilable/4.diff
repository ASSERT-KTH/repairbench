diff --git a/tmp/7094f7e6-e610-43e6-86dc-604f2efe6f26_buggy.java b/tmp/a823009c-2b1a-4324-8b11-de3c9f3e9e0d_fixed.java
index 39981f0..11798cc 100644
--- a/tmp/7094f7e6-e610-43e6-86dc-604f2efe6f26_buggy.java
+++ b/tmp/a823009c-2b1a-4324-8b11-de3c9f3e9e0d_fixed.java
@@ -1,65 +1,47 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
 
   // The best type name is the actual type name.
 
   // If we're analyzing a GETPROP, the property may be inherited by the
   // prototype chain. So climb the prototype chain and find out where
   // the property was originally defined.
   if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
+    JSType type = getJSType(n.getFirstChild());
+    if (type.isObject()) {
+      ObjectType objectType = type.toObjectType();
       String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
-          }
-        }
-
+      // Find the declaring type for the property
+      ObjectType declaringType = objectType.getPrototypeChainPropertyOwner(propName);
+      if (declaringType != null) {
         // Don't show complex function names or anonymous types.
         // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+        if (declaringType.getConstructor() != null ||
+            declaringType.isFunctionPrototypeType()) {
+          return declaringType.toString() + "." + propName;
+        }
       }
     }
   }
 
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced != null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
       (type.toObjectType() != null &&
        type.toObjectType().getConstructor() != null)) {
     return type.toString();
   }
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName != null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
     // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
