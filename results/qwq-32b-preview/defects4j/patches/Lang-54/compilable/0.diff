diff --git a/tmp/f0705936-3a27-4fe4-802a-777fba451c2e_buggy.java b/tmp/6e747e7a-bd25-44ff-9c20-1c24f09a798d_fixed.java
index 90fe130..752f330 100644
--- a/tmp/f0705936-3a27-4fe4-802a-777fba451c2e_buggy.java
+++ b/tmp/6e747e7a-bd25-44ff-9c20-1c24f09a798d_fixed.java
@@ -1,61 +1,68 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
-        int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        char ch0 = str.charAt(0);
-        char ch1 = str.charAt(1);
-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        if (len == 2) {
+    
+    int underscoreCount = countUnderscores(str);
+    
+    switch (underscoreCount) {
+        case 0:
+            // language only
+            if (str.length() == 2 && isLowercaseLetters(str)) {
                 return new Locale(str, "");
             } else {
-            if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+        case 1:
+            // language_COUNTRY
+            String[] parts1 = str.split("_", -1);
+            if (parts1.length != 2) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+            if (parts1[0].length() == 2 && isLowercaseLetters(parts1[0]) &&
+                parts1[1].length() == 2 && isUppercaseLetters(parts1[1])) {
+                return new Locale(parts1[0], parts1[1]);
             } else {
-                if (str.charAt(5) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+        case 2:
+            // language_COUNTRY_variant or language__variant
+            String[] parts2 = str.split("_", -1);
+            if (parts2.length != 3) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (parts2[0].length() == 2 && isLowercaseLetters(parts2[0])) {
+                if (parts2[1].isEmpty()) {
+                    // language__variant
+                    return new Locale(parts2[0], "", parts2[2]);
+                } else if (parts2[1].length() == 2 && isUppercaseLetters(parts2[1])) {
+                    // language_COUNTRY_variant
+                    return new Locale(parts2[0], parts2[1], parts2[2]);
+                } else {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+            } else {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+        default:
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
+}
+
+private static int countUnderscores(String str) {
+    int count = 0;
+    for (int i = 0; i < str.length(); i++) {
+        if (str.charAt(i) == '_') {
+            count++;
+        }
+    }
+    return count;
 }
+
+private static boolean isLowercaseLetters(String s) {
+    return s != null && s.length() > 0 && s.equals(s.toLowerCase()) && s.matches("[a-z]+");
 }
+
+private static boolean isUppercaseLetters(String s) {
+    return s != null && s.length() > 0 && s.equals(s.toUpperCase()) && s.matches("[A-Z]+");
 }
\ No newline at end of file
