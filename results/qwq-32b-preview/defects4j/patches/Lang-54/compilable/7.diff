diff --git a/tmp/483a45e2-a69e-427c-b705-20e03760eae4_buggy.java b/tmp/85071482-6181-446f-9094-f70b6407967a_fixed.java
index 90fe130..2cc6cc0 100644
--- a/tmp/483a45e2-a69e-427c-b705-20e03760eae4_buggy.java
+++ b/tmp/85071482-6181-446f-9094-f70b6407967a_fixed.java
@@ -1,61 +1,69 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        char ch0 = str.charAt(0);
-        char ch1 = str.charAt(1);
-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
+    if (len < 2 || len > 255) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (len == 2) {
+        // Only language
+        if (isLowerCase(str, 0, 2)) {
             return new Locale(str, "");
+        }
     } else {
-            if (str.charAt(2) != '_') {
+        int firstSepIndex = str.indexOf('_');
+        if (firstSepIndex == -1) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        String language = str.substring(0, firstSepIndex);
+        if (!isLowerCase(language)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+        if (firstSepIndex + 1 >= len) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+        char ch = str.charAt(firstSepIndex + 1);
+        if (ch == '_') {
+            // Only language and variant
+            String variant = str.substring(firstSepIndex + 1);
+            return new Locale(language, "", variant);
         } else {
-                if (str.charAt(5) != '_') {
+            // Language and country
+            int secondSepIndex = str.indexOf('_', firstSepIndex + 1);
+            if (secondSepIndex == -1) {
+                String country = str.substring(firstSepIndex + 1);
+                if (!isUpperCase(country)) {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+                return new Locale(language, country);
+            } else {
+                String country = str.substring(firstSepIndex + 1, secondSepIndex);
+                if (!isUpperCase(country)) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                String variant = str.substring(secondSepIndex + 1);
+                return new Locale(language, country, variant);
+            }
+        }
+    }
+    throw new IllegalArgumentException("Invalid locale format: " + str);
+}
+
+private static boolean isLowerCase(String str) {
+    return str.equals(str.toLowerCase());
+}
+
+private static boolean isUpperCase(String str) {
+    return str.equals(str.toUpperCase());
+}
+
+private static boolean isLowerCase(String str, int start, int end) {
+    for (int i = start; i < end; i++) {
+        char c = str.charAt(i);
+        if (c < 'a' || c > 'z') {
+            return false;
         }
     }
+    return true;
 }
\ No newline at end of file
