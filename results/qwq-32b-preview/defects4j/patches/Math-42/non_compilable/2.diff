diff --git a/tmp/e755fb4a-0007-4867-8c00-d3b4306176f5_buggy.java b/tmp/393cdb45-394f-467c-8c27-e602ecafa8fe_fixed.java
index efa499e..de29e90 100644
--- a/tmp/e755fb4a-0007-4867-8c00-d3b4306176f5_buggy.java
+++ b/tmp/393cdb45-394f-467c-8c27-e602ecafa8fe_fixed.java
@@ -1,35 +1,8 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
-    protected RealPointValuePair getSolution() {
-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
-
-      Set<Integer> basicRows = new HashSet<Integer>();
-      double[] coefficients = new double[getOriginalNumDecisionVariables()];
-      for (int i = 0; i < coefficients.length; i++) {
-          int colIndex = columnLabels.indexOf("x" + i);
-          if (colIndex < 0) {
-            coefficients[i] = 0;
-            continue;
-          }
-          Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
 if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
     coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
 } else {
     basicRows.add(basicRow);
     coefficients[i] =
         (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
         (restrictToNonNegative ? 0 : mostNegative);
 }
\ No newline at end of file
-      }
-      return new RealPointValuePair(coefficients, f.getValue(coefficients));
-    }
