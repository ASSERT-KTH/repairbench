diff --git a/tmp/e78e4b45-1d9e-445e-8a0e-12732c48feb6_buggy.java b/tmp/b2cd1084-8ca7-4b2e-b488-7a49f67b93cb_fixed.java
index e69de29..b7b7990 100644
--- a/tmp/e78e4b45-1d9e-445e-8a0e-12732c48feb6_buggy.java
+++ b/tmp/b2cd1084-8ca7-4b2e-b488-7a49f67b93cb_fixed.java
@@ -0,0 +1,38 @@
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.DeserializationFeature;
+
+public class TestSimpleTypes {
+
+    private ObjectMapper mapper;
+
+    public TestSimpleTypes() {
+        // Configure ObjectMapper to not coerce empty String to null for primitives
+        mapper = new ObjectMapper()
+                .configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, false);
+    }
+
+    public void testEmptyToNullCoercionForPrimitives() throws Exception {
+        _testEmptyToNullCoercion(int.class, Integer.valueOf(0));
+        _testEmptyToNullCoercion(long.class, Long.valueOf(0));
+        _testEmptyToNullCoercion(double.class, Double.valueOf(0.0));
+        _testEmptyToNullCoercion(float.class, Float.valueOf(0.0f));
+    }
+
+    private <T> void _testEmptyToNullCoercion(Class<T> clazz, T defaultValue) throws Exception {
+        String json = "{\"value\":\"\"}";
+        // Create a container class for deserialization
+        JsonNode node = mapper.readTree(json);
+        try {
+            T value = mapper.readValue(node.get("value").traverse(), clazz);
+            // For primitives, empty string should deserialize to default value, not null
+            if (defaultValue.equals(value)) {
+                // Expected behavior: empty string deserializes to default value
+                System.out.println("Passed for " + clazz.getSimpleName());
+            } else {
+                throw new AssertionError("Should have used default value for " + clazz.getSimpleName());
+            }
+        } catch (Exception e) {
+            throw new AssertionError("Deserialization failed for " + clazz.getSimpleName(), e);
+        }
+    }
+}
\ No newline at end of file
