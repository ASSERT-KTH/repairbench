diff --git a/tmp/e68744ef-6cd9-41eb-9817-a38343f10fa1_buggy.java b/tmp/c6223562-5448-443d-bfcd-72d948c3b1cb_fixed.java
index 851ffc2..804b0b6 100644
--- a/tmp/e68744ef-6cd9-41eb-9817-a38343f10fa1_buggy.java
+++ b/tmp/c6223562-5448-443d-bfcd-72d948c3b1cb_fixed.java
@@ -1,70 +1,121 @@
-    /**
-     * Replace the provide statement.
-     *
-     * If we're providing a name with no definition, then create one.
-     * If we're providing a name with a duplicate definition, then make sure
-     * that definition becomes a declaration.
-     */
 void replace() {
   if (firstNode == null) {
     // Don't touch the base case ('goog').
     replacementNode = candidateDefinition;
     return;
   }
 
   // Handle the case where there is a duplicate definition for an explicitly
   // provided symbol.
   if (candidateDefinition != null && explicitNode != null) {
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
 
     // Does this need a VAR keyword?
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
       candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
         // Need to convert this assign to a var declaration.
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
         nameNode.addChildToFront(valueNode);
         Node varNode = new Node(Token.VAR, nameNode);
         varNode.copyInformationFrom(candidateDefinition);
         candidateDefinition.getParent().replaceChild(
             candidateDefinition, varNode);
         nameNode.setJSDocInfo(assignNode.getJSDocInfo());
         compiler.reportCodeChange();
         replacementNode = varNode;
       }
     }
   } else {
     // Handle the case where there's not a duplicate definition.
+    // Ensure that parent namespaces are created if necessary.
+    String[] parts = namespace.split("\\.");
+    StringBuilder parentNamespace = new StringBuilder();
+    for (int i = 0; i < parts.length - 1; i++) {
+      if (i > 0) {
+        parentNamespace.append(".");
+      }
+      parentNamespace.append(parts[i]);
+      ProvidedName parentName = providedNames.get(parentNamespace.toString());
+      if (parentName == null || parentName.replacementNode == null) {
+        // Need to create the parent namespace.
+        ProvidedName newParent = new ProvidedName();
+        newParent.namespace = parentNamespace.toString();
+        // Assuming minimumModule is the appropriate module for this parent.
+        newParent.minimumModule = minimumModule;
+        // Create a declaration node for the parent namespace.
+        newParent.replacementNode = createNamespaceDeclarationNode(newParent.namespace);
+        // Add it to the providedNames map.
+        providedNames.put(newParent.namespace, newParent);
+        // Insert the new declaration node into the appropriate place.
+        if (firstModule == minimumModule) {
+          firstNode.getParent().addChildBefore(newParent.replacementNode, firstNode);
+        } else {
+          // Add it to a common module.
+          int indexOfDot = parentNamespace.indexOf(".");
+          if (indexOfDot != -1) {
+            ProvidedName grandParentName = providedNames.get(parentNamespace.substring(0, indexOfDot));
+            Preconditions.checkNotNull(grandParentName);
+            Preconditions.checkNotNull(grandParentName.replacementNode);
+            grandParentName.replacementNode.getParent().addChildAfter(
+                newParent.replacementNode, grandParentName.replacementNode);
+          } else {
+            compiler.getNodeForCodeInsertion(minimumModule)
+                .addChildToBack(newParent.replacementNode);
+          }
+        }
+        compiler.reportCodeChange();
+      }
+    }
+
     replacementNode = createDeclarationNode();
     if (firstModule == minimumModule) {
       firstNode.getParent().addChildBefore(replacementNode, firstNode);
     } else {
       // In this case, the name was implicitly provided by two independent
       // modules. We need to move this code up to a common module.
       int indexOfDot = namespace.indexOf('.');
       if (indexOfDot == -1) {
         // Any old place is fine.
         compiler.getNodeForCodeInsertion(minimumModule)
             .addChildToBack(replacementNode);
       } else {
         // Add it after the parent namespace.
         ProvidedName parentName =
             providedNames.get(namespace.substring(0, indexOfDot));
         Preconditions.checkNotNull(parentName);
         Preconditions.checkNotNull(parentName.replacementNode);
         parentName.replacementNode.getParent().addChildAfter(
             replacementNode, parentName.replacementNode);
       }
     }
     if (explicitNode != null) {
       explicitNode.detachFromParent();
     }
     compiler.reportCodeChange();
   }
 }
+
+private Node createNamespaceDeclarationNode(String namespace) {
+  String[] parts = namespace.split("\\.");
+  Node currentNode = new Node(Token.VAR);
+  Node previousNode = null;
+  for (String part : parts) {
+    Node objectLit = new Node(Token.OBJECTLIT);
+    Node nameNode = new Node(Token.NAME, part);
+    if (previousNode != null) {
+      previousNode.addChildToBack(objectLit);
+    } else {
+      currentNode.addChildToBack(nameNode);
+      currentNode.addChildToBack(objectLit);
+    }
+    previousNode = objectLit;
+  }
+  return currentNode;
+}
\ No newline at end of file
