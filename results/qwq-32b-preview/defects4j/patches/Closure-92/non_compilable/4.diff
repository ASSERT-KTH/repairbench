diff --git a/tmp/b79e9e4c-14a6-414e-bee6-7ecb93e045d8_buggy.java b/tmp/82a6bd99-8deb-4848-a7be-14b6d3a34f24_fixed.java
index 851ffc2..2addcf5 100644
--- a/tmp/b79e9e4c-14a6-414e-bee6-7ecb93e045d8_buggy.java
+++ b/tmp/82a6bd99-8deb-4848-a7be-14b6d3a34f24_fixed.java
@@ -1,70 +1,115 @@
-    /**
-     * Replace the provide statement.
-     *
-     * If we're providing a name with no definition, then create one.
-     * If we're providing a name with a duplicate definition, then make sure
-     * that definition becomes a declaration.
-     */
 void replace() {
   if (firstNode == null) {
     // Don't touch the base case ('goog').
     replacementNode = candidateDefinition;
     return;
   }
 
   // Handle the case where there is a duplicate definition for an explicitly
   // provided symbol.
   if (candidateDefinition != null && explicitNode != null) {
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
 
     // Does this need a VAR keyword?
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
       candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
         // Need to convert this assign to a var declaration.
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
         nameNode.addChildToFront(valueNode);
         Node varNode = new Node(Token.VAR, nameNode);
         varNode.copyInformationFrom(candidateDefinition);
         candidateDefinition.getParent().replaceChild(
             candidateDefinition, varNode);
         nameNode.setJSDocInfo(assignNode.getJSDocInfo());
         compiler.reportCodeChange();
         replacementNode = varNode;
       }
     }
   } else {
     // Handle the case where there's not a duplicate definition.
     replacementNode = createDeclarationNode();
     if (firstModule == minimumModule) {
       firstNode.getParent().addChildBefore(replacementNode, firstNode);
     } else {
       // In this case, the name was implicitly provided by two independent
       // modules. We need to move this code up to a common module.
       int indexOfDot = namespace.indexOf('.');
       if (indexOfDot == -1) {
         // Any old place is fine.
         compiler.getNodeForCodeInsertion(minimumModule)
             .addChildToBack(replacementNode);
       } else {
         // Add it after the parent namespace.
         ProvidedName parentName =
             providedNames.get(namespace.substring(0, indexOfDot));
         Preconditions.checkNotNull(parentName);
         Preconditions.checkNotNull(parentName.replacementNode);
         parentName.replacementNode.getParent().addChildAfter(
             replacementNode, parentName.replacementNode);
       }
     }
     if (explicitNode != null) {
       explicitNode.detachFromParent();
     }
     compiler.reportCodeChange();
   }
+
+  // Ensure all parent namespaces are defined
+  ensureParentNamespaces();
+}
+
+private void ensureParentNamespaces() {
+  String[] parts = namespace.split("\\.");
+  String currentPart = "";
+  for (int i = 0; i < parts.length - 1; i++) {
+    currentPart += (i > 0 ? "." : "") + parts[i];
+    ProvidedName parentName = providedNames.get(currentPart);
+    if (parentName == null) {
+      // Create missing parent namespace
+      Node parentDecl = createNamespaceDeclaration(currentPart);
+      // Determine where to insert the parent declaration
+      insertNamespaceDeclaration(parentDecl, currentPart);
+      parentName = new ProvidedName();
+      parentName.namespace = currentPart;
+      parentName.replacementNode = parentDecl;
+      providedNames.put(currentPart, parentName);
+      compiler.reportCodeChange();
+    }
+  }
+}
+
+private Node createNamespaceDeclaration(String namespace) {
+  String[] parts = namespace.split("\\.");
+  Node current = null;
+  for (String part : parts) {
+    if (current == null) {
+      current = new Node(Token.NAME, part);
+    } else {
+      current = new Node(Token.GETPROP, current.cloneTree(), new Node(Token.STRINGnodoc, part));
+    }
+  }
+  Node assign = new Node(Token.ASSIGN, current.cloneTree(), new Node(Token.OBJECTLIT));
+  assign.putBooleanProp(Node.IS_NAMESPACE, true);
+  return assign;
+}
+
+private void insertNamespaceDeclaration(Node decl, String namespace) {
+  int indexOfDot = namespace.indexOf('.');
+  if (indexOfDot == -1) {
+    // Top-level namespace, insert at the beginning of the script
+    compiler.getNodeForCodeInsertion(minimumModule).addChildAfter(decl, null);
+  } else {
+    // Insert after the parent namespace declaration
+    ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));
+    Preconditions.checkNotNull(parentName);
+    Preconditions.checkNotNull(parentName.replacementNode);
+    parentName.replacementNode.getParent().addChildAfter(decl, parentName.replacementNode);
+  }
 }
\ No newline at end of file
