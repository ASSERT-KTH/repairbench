diff --git a/tmp/7dbf61ca-c051-4a9e-beee-9efb6fe9ac09_buggy.java b/tmp/1dd64e9b-8f85-425d-86a3-2fa478a320ed_fixed.java
index 851ffc2..9dffa22 100644
--- a/tmp/7dbf61ca-c051-4a9e-beee-9efb6fe9ac09_buggy.java
+++ b/tmp/1dd64e9b-8f85-425d-86a3-2fa478a320ed_fixed.java
@@ -1,70 +1,101 @@
-    /**
-     * Replace the provide statement.
-     *
-     * If we're providing a name with no definition, then create one.
-     * If we're providing a name with a duplicate definition, then make sure
-     * that definition becomes a declaration.
-     */
 void replace() {
   if (firstNode == null) {
     // Don't touch the base case ('goog').
     replacementNode = candidateDefinition;
     return;
   }
 
   // Handle the case where there is a duplicate definition for an explicitly
   // provided symbol.
   if (candidateDefinition != null && explicitNode != null) {
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
 
     // Does this need a VAR keyword?
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
       candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
         // Need to convert this assign to a var declaration.
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
         nameNode.addChildToFront(valueNode);
         Node varNode = new Node(Token.VAR, nameNode);
         varNode.copyInformationFrom(candidateDefinition);
         candidateDefinition.getParent().replaceChild(
             candidateDefinition, varNode);
         nameNode.setJSDocInfo(assignNode.getJSDocInfo());
         compiler.reportCodeChange();
         replacementNode = varNode;
       }
     }
   } else {
     // Handle the case where there's not a duplicate definition.
     replacementNode = createDeclarationNode();
     if (firstModule == minimumModule) {
       firstNode.getParent().addChildBefore(replacementNode, firstNode);
     } else {
       // In this case, the name was implicitly provided by two independent
       // modules. We need to move this code up to a common module.
       int indexOfDot = namespace.indexOf('.');
       if (indexOfDot == -1) {
         // Any old place is fine.
         compiler.getNodeForCodeInsertion(minimumModule)
             .addChildToBack(replacementNode);
       } else {
         // Add it after the parent namespace.
         ProvidedName parentName =
             providedNames.get(namespace.substring(0, indexOfDot));
         Preconditions.checkNotNull(parentName);
         Preconditions.checkNotNull(parentName.replacementNode);
         parentName.replacementNode.getParent().addChildAfter(
             replacementNode, parentName.replacementNode);
       }
     }
     if (explicitNode != null) {
       explicitNode.detachFromParent();
     }
     compiler.reportCodeChange();
   }
+
+  // Ensure all intermediate namespaces are created.
+  String[] parts = namespace.split("\\.");
+  StringBuilder currentNamespace = new StringBuilder();
+  for (int i = 0; i < parts.length; i++) {
+    if (i > 0) {
+      currentNamespace.append(".");
+    }
+    currentNamespace.append(parts[i]);
+    ProvidedName currentProvidedName = providedNames.get(currentNamespace.toString());
+    if (currentProvidedName != null && currentProvidedName.replacementNode != null) {
+      continue; // Already handled
+    }
+
+    // Create the necessary namespace object.
+    Node varNode = new Node(Token.VAR);
+    Node nameNode = new Node(Token.NAME, parts[i]);
+    varNode.addChildToBack(nameNode);
+    if (i == 0) {
+      nameNode.addChildToBack(new Node(Token.ASSIGN, new Node(Token.OBJECTLIT)));
+    } else {
+      String parentNamespace = currentNamespace.substring(0, currentNamespace.lastIndexOf('.'));
+      Node parentObject = new Node(Token.GETPROP,
+          new Node(Token.NAME, parentNamespace.substring(parentNamespace.lastIndexOf('.') + 1)));
+      for (String part : parentNamespace.split("\\.")) {
+        parentObject = new Node(Token.GETPROP, new Node(Token.NAME, part));
+      }
+      nameNode.addChildToBack(new Node(Token.ASSIGN,
+          new Node(Token.GETPROP, parentObject, new Node(Token.STRING, parts[i]))));
+    }
+    // Insert the varNode in the appropriate place.
+    if (firstModule == minimumModule) {
+      firstNode.getParent().addChildBefore(varNode, firstNode);
+    } else {
+      compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(varNode);
+    }
+    compiler.reportCodeChange();
+  }
 }
\ No newline at end of file
