diff --git a/tmp/9bf8f24a-30a5-4b15-bda6-d7c340251fe7_buggy.java b/tmp/95e8d55c-e7dc-427a-945d-4e5c0c71473e_fixed.java
index 904dba7..49016af 100644
--- a/tmp/9bf8f24a-30a5-4b15-bda6-d7c340251fe7_buggy.java
+++ b/tmp/95e8d55c-e7dc-427a-945d-4e5c0c71473e_fixed.java
@@ -1,46 +1,51 @@
 private String format(JSError error, boolean warning) {
-    // extract source excerpt
+    // Extract source excerpt
     SourceExcerptProvider source = getSource();
     String sourceExcerpt = source == null ? null :
-        excerpt.get(
-            source, error.sourceName, error.lineNumber, excerptFormatter);
+        excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);
 
-    // formatting the message
+    // Formatting the message
     StringBuilder b = new StringBuilder();
     if (error.sourceName != null) {
         b.append(error.sourceName);
         if (error.lineNumber > 0) {
-        b.append(':');
-        b.append(error.lineNumber);
+            b.append(':').append(error.lineNumber);
         }
         b.append(": ");
     }
 
     b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));
     b.append(" - ");
-
     b.append(error.description);
     b.append('\n');
+
     if (sourceExcerpt != null) {
         b.append(sourceExcerpt);
         b.append('\n');
+
         int charno = error.getCharno();
 
-      // padding equal to the excerpt and arrow at the end
-      // charno == sourceExpert.length() means something is missing
-      // at the end of the line
-      if (excerpt.equals(LINE)
-          && 0 <= charno && charno < sourceExcerpt.length()) {
+        // Adjust charno if it's beyond the source excerpt length
+        if (charno >= sourceExcerpt.length()) {
+            charno = sourceExcerpt.length() - 1;
+        }
+
+        // Calculate the column number
+        int column = 0;
         for (int i = 0; i < charno; i++) {
-          char c = sourceExcerpt.charAt(i);
-          if (Character.isWhitespace(c)) {
-            b.append(c);
+            if (sourceExcerpt.charAt(i) == '\t') {
+                column += (tabSize - (column % tabSize));
             } else {
+                column++;
+            }
+        }
+
+        // Append spaces up to the error column
+        for (int i = 0; i < column; i++) {
             b.append(' ');
         }
-        }
         b.append("^\n");
     }
-    }
+
     return b.toString();
 }
\ No newline at end of file
