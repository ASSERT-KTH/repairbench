diff --git a/tmp/52edf18b-494a-46e0-b122-c2aa8541c9a1_buggy.java b/tmp/d2be5aae-7159-4545-b411-58be0a00fefb_fixed.java
index 710fcc0..58f9e41 100644
--- a/tmp/52edf18b-494a-46e0-b122-c2aa8541c9a1_buggy.java
+++ b/tmp/d2be5aae-7159-4545-b411-58be0a00fefb_fixed.java
@@ -1,37 +1,39 @@
 Object returnValueFor(Class<?> type) {
     if (Primitives.isPrimitiveOrWrapper(type)) {
         return Primitives.defaultValueForPrimitiveOrWrapper(type);
         //new instances are used instead of Collections.emptyList(), etc.
         //to avoid UnsupportedOperationException if code under test modifies returned collection
+    } else if (type == Iterable.class || type.isAssignableFrom(Iterable.class)) {
+        return new ArrayList<>(); // or any other empty iterable implementation
     } else if (type == Collection.class) {
-            return new LinkedList<Object>();
+        return new LinkedList<>();
     } else if (type == Set.class) {
-            return new HashSet<Object>();
+        return new HashSet<>();
     } else if (type == HashSet.class) {
-            return new HashSet<Object>();
+        return new HashSet<>();
     } else if (type == SortedSet.class) {
-            return new TreeSet<Object>();
+        return new TreeSet<>();
     } else if (type == TreeSet.class) {
-            return new TreeSet<Object>();
+        return new TreeSet<>();
     } else if (type == LinkedHashSet.class) {
-            return new LinkedHashSet<Object>();
+        return new LinkedHashSet<>();
     } else if (type == List.class) {
-            return new LinkedList<Object>();
+        return new LinkedList<>();
     } else if (type == LinkedList.class) {
-            return new LinkedList<Object>();
+        return new LinkedList<>();
     } else if (type == ArrayList.class) {
-            return new ArrayList<Object>();
+        return new ArrayList<>();
     } else if (type == Map.class) {
-            return new HashMap<Object, Object>();
+        return new HashMap<>();
     } else if (type == HashMap.class) {
-            return new HashMap<Object, Object>();
+        return new HashMap<>();
     } else if (type == SortedMap.class) {
-            return new TreeMap<Object, Object>();
+        return new TreeMap<>();
     } else if (type == TreeMap.class) {
-            return new TreeMap<Object, Object>();
+        return new TreeMap<>();
     } else if (type == LinkedHashMap.class) {
-            return new LinkedHashMap<Object, Object>();
+        return new LinkedHashMap<>();
     }
     //Let's not care about the rest of collections.
     return null;
 }
\ No newline at end of file
