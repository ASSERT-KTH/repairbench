diff --git a/tmp/b5703aea-630c-471d-b212-24bcc596904a_buggy.java b/tmp/38e3ce8c-8be2-4c51-b476-d925b9ae3ef7_fixed.java
index 98f719c..8662eef 100644
--- a/tmp/b5703aea-630c-471d-b212-24bcc596904a_buggy.java
+++ b/tmp/38e3ce8c-8be2-4c51-b476-d925b9ae3ef7_fixed.java
@@ -1,72 +1,68 @@
-  /** Helper to escape javascript string as well as regular expression */
 static String strEscape(String s, char quote,
                         String doublequoteEscape,
                         String singlequoteEscape,
                         String backslashEscape,
                         CharsetEncoder outputCharsetEncoder) {
   StringBuilder sb = new StringBuilder(s.length() + 2);
   sb.append(quote);
   for (int i = 0; i < s.length(); i++) {
     char c = s.charAt(i);
     switch (c) {
       case '\0': sb.append("\\0"); break;
       case '\n': sb.append("\\n"); break;
       case '\r': sb.append("\\r"); break;
       case '\t': sb.append("\\t"); break;
       case '\\': sb.append(backslashEscape); break;
       case '\"': sb.append(doublequoteEscape); break;
       case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
+      case '>':
+        // Handle --> and ]]> by escaping them as --\> and ]]\>
         if (i >= 2 &&
             ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
              (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
           sb.append("\\>");
         } else {
           sb.append(c);
         }
         break;
       case '<':
-          // Break </script into <\/script
+        // Handle </script and <!-- by escaping them as <\/script and <\!--
         final String END_SCRIPT = "/script";
-
-          // Break <!-- into <\!--
         final String START_COMMENT = "!--";
-
-          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
+        if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
           sb.append("<\\");
-          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
+        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
           sb.append("<\\");
         } else {
           sb.append(c);
         }
         break;
       default:
-          // If we're given an outputCharsetEncoder, then check if the
-          //  character can be represented in this character set.
+        // Check if the character needs to be escaped based on the output charset
         if (outputCharsetEncoder != null) {
           if (outputCharsetEncoder.canEncode(c)) {
             sb.append(c);
           } else {
-              // Unicode-escape the character.
+            // Unicode-escape the character
             appendHexJavaScriptRepresentation(sb, c);
           }
         } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
+          // If no charset encoder is provided, escape non-printable and non-ASCII characters
           if (c > 0x1f && c <= 0x7f) {
             sb.append(c);
           } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
+            // Escape other characters to ensure they are properly represented
             appendHexJavaScriptRepresentation(sb, c);
           }
         }
     }
   }
   sb.append(quote);
   return sb.toString();
 }
+
+private static void appendHexJavaScriptRepresentation(StringBuilder sb, char c) {
+  // Append Unicode escape sequence for the character
+  sb.append("\\u");
+  sb.append(String.format("%04x", (int) c));
+}
\ No newline at end of file
