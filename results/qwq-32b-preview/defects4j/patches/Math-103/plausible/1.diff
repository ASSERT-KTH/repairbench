diff --git a/tmp/6b76497b-1362-421d-b415-1c5e787291fb_buggy.java b/tmp/d826a2cd-2a95-4c98-8ee4-1135f866c0a9_fixed.java
index 6cfa79b..714039f 100644
--- a/tmp/6b76497b-1362-421d-b415-1c5e787291fb_buggy.java
+++ b/tmp/d826a2cd-2a95-4c98-8ee4-1135f866c0a9_fixed.java
@@ -1,12 +1,30 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X < code>x/code>).
+ *
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
-     * @throws MathException if the algorithm fails to converge; unless
-     * x is more than 20 standard deviations from the mean, in which case the
-     * convergence exception is caught and 0 or 1 is returned.
+ * @return CDF evaluated at code>x/code>.
+ * @throws MathException if the algorithm fails to converge; unless x is more
+ *                       than 20 standard deviations from the mean, in which case
+ *                       the convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double threshold = 20.0 * standardDeviation;
+    double deviation = x - mean;
+
+    if (deviation < -threshold) {
+        return 0.0;
+    } else if (deviation > threshold) {
+        return 1.0;
+    } else {
+        try {
+            return 0.5 * (1.0 + Erf.erf(deviation / (standardDeviation * Math.sqrt(2.0))));
+        } catch (MathException e) {
+            // If Erf throws an exception, return 0 or 1 based on the deviation
+            if (deviation < 0) {
+                return 0.0;
+            } else {
+                return 1.0;
+            }
+        }
+    }
 }
\ No newline at end of file
