diff --git a/tmp/2bddcdcc-e872-4496-a945-8ae3c8701fef_buggy.java b/tmp/263a53bc-f371-4a6e-9318-09b55ef3f01e_fixed.java
index db19f52..e48ebee 100644
--- a/tmp/2bddcdcc-e872-4496-a945-8ae3c8701fef_buggy.java
+++ b/tmp/263a53bc-f371-4a6e-9318-09b55ef3f01e_fixed.java
@@ -1,32 +1,33 @@
-    // switching the chartset midstream when a meta http-equiv tag defines the charset.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) { // 从meta标签中确定字符集。安全地以UTF-8解析
+        // 查找 <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> 或 HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) { // 如果未找到，将保持UTF-8作为最佳尝试
             String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // 需要重新解码
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    } else { // 由内容类型头指定（或由用户在文件加载时指定）
+        Validate.notEmpty(charsetName, "必须将charset参数设置为要解析的文件的字符集。设置为null以尝试从HTML中检测");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+
+    // 检查是否有字节顺序标记（BOM），并将其剥离
+    if (docData.startsWith("\uFEFF")) {
+        docData = docData.substring(1);
+    }
+
     if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
-            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
-
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
