diff --git a/tmp/64a5200f-d08c-43da-8bdc-627ca9323033_buggy.java b/tmp/df0f046b-fce6-4951-8acc-43709ee07213_fixed.java
index 1303a19..2f7a8c4 100644
--- a/tmp/64a5200f-d08c-43da-8bdc-627ca9323033_buggy.java
+++ b/tmp/df0f046b-fce6-4951-8acc-43709ee07213_fixed.java
@@ -1,45 +1,47 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType() != Token.NUMBER) {
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
-    Node elem = left.getFirstChild();
-    for (int i = 0; elem != null && i < intIndex; i++) {
-      elem = elem.getNext();
+    if (left.getType() != Token.ARRAYLIT) {
+        // Only handle array literals
+        return n;
     }
 
-    if (elem == null) {
+    NodeList<Node> elements = left.getChildren();
+    if (intIndex >= elements.length()) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
+    Node elem = elements.get(intIndex);
     if (elem.getType() == Token.EMPTY) {
         elem = NodeUtil.newUndefinedNode(elem);
     } else {
         left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
