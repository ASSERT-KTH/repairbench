diff --git a/tmp/747b27e0-b5af-49f4-9ea6-0d208298d47d_buggy.java b/tmp/958e69df-df3a-4fd8-a657-925772e18e02_fixed.java
index d80b7d0..9c2b020 100644
--- a/tmp/747b27e0-b5af-49f4-9ea6-0d208298d47d_buggy.java
+++ b/tmp/958e69df-df3a-4fd8-a657-925772e18e02_fixed.java
@@ -1,61 +1,53 @@
-    /**
-     * Checks dimensions and values of boundaries and inputSigma if defined.
-     */
 private void checkParameters() {
     final double[] init = getStartPoint();
     final double[] lB = getLowerBound();
     final double[] uB = getUpperBound();
 
-        // Checks whether there is at least one finite bound value.
-        boolean hasFiniteBounds = false;
+    // Check if all lower and upper bounds are finite
+    boolean allFinite = true;
     for (int i = 0; i < lB.length; i++) {
-            if (!Double.isInfinite(lB[i]) ||
-                !Double.isInfinite(uB[i])) {
-                hasFiniteBounds = true;
-                break;
-            }
-        }
-        // Checks whether there is at least one infinite bound value.
-        boolean hasInfiniteBounds = false;
-        if (hasFiniteBounds) {
-            for (int i = 0; i < lB.length; i++) {
-                if (Double.isInfinite(lB[i]) ||
-                    Double.isInfinite(uB[i])) {
-                    hasInfiniteBounds = true;
+        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {
+            allFinite = false;
             break;
         }
     }
 
-            if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
-                throw new MathUnsupportedOperationException();
-            } else {
-                // Convert API to internal handling of boundaries.
+    if (allFinite) {
+        // All bounds are finite, proceed to set boundaries
         boundaries = new double[2][];
         boundaries[0] = lB;
         boundaries[1] = uB;
 
-                // Abort early if the normalization will overflow (cf. "encode" method).
+        // Check for potential overflow in normalization
+        for (int i = 0; i < lB.length; i++) {
+            double range = uB[i] - lB[i];
+            if (range <= 0) {
+                throw new NumberIsTooLargeException(lB[i], uB[i], false);
+            }
+            if (range > Double.MAX_VALUE / 2) {
+                // Potential overflow in normalization
+                throw new NumberIsTooLargeException(range, Double.MAX_VALUE / 2, false);
+            }
         }
     } else {
-            // Convert API to internal handling of boundaries.
+        // If any bound is infinite, set boundaries to null
         boundaries = null;
     }
 
     if (inputSigma != null) {
         if (inputSigma.length != init.length) {
             throw new DimensionMismatchException(inputSigma.length, init.length);
         }
         for (int i = 0; i < init.length; i++) {
             if (inputSigma[i] < 0) {
                 throw new NotPositiveException(inputSigma[i]);
             }
             if (boundaries != null) {
-                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
+                double range = boundaries[1][i] - boundaries[0][i];
+                if (inputSigma[i] > range) {
+                    throw new OutOfRangeException(inputSigma[i], 0, range);
                 }
             }
         }
     }
 }
\ No newline at end of file
