diff --git a/tmp/29d2636e-37ae-4a04-ab02-24f7f6c852b9_buggy.java b/tmp/4902da87-ad51-4c58-ab8e-92b86c011f5c_fixed.java
index d80b7d0..e894583 100644
--- a/tmp/29d2636e-37ae-4a04-ab02-24f7f6c852b9_buggy.java
+++ b/tmp/4902da87-ad51-4c58-ab8e-92b86c011f5c_fixed.java
@@ -1,61 +1,40 @@
-    /**
-     * Checks dimensions and values of boundaries and inputSigma if defined.
-     */
 private void checkParameters() {
     final double[] init = getStartPoint();
     final double[] lB = getLowerBound();
     final double[] uB = getUpperBound();
 
-        // Checks whether there is at least one finite bound value.
-        boolean hasFiniteBounds = false;
+    // Check if all lower bounds are finite
     for (int i = 0; i < lB.length; i++) {
-            if (!Double.isInfinite(lB[i]) ||
-                !Double.isInfinite(uB[i])) {
-                hasFiniteBounds = true;
-                break;
+        if (Double.isInfinite(lB[i])) {
+            throw new MathIllegalArgumentException(LocalizedCoreFormats.INFINITE_BOUND);
         }
     }
-        // Checks whether there is at least one infinite bound value.
-        boolean hasInfiniteBounds = false;
-        if (hasFiniteBounds) {
-            for (int i = 0; i < lB.length; i++) {
-                if (Double.isInfinite(lB[i]) ||
-                    Double.isInfinite(uB[i])) {
-                    hasInfiniteBounds = true;
-                    break;
+
+    // Check if all upper bounds are finite
+    for (int i = 0; i < uB.length; i++) {
+        if (Double.isInfinite(uB[i])) {
+            throw new MathIllegalArgumentException(LocalizedCoreFormats.INFINITE_BOUND);
         }
     }
 
-            if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
-                throw new MathUnsupportedOperationException();
-            } else {
     // Convert API to internal handling of boundaries.
     boundaries = new double[2][];
     boundaries[0] = lB;
     boundaries[1] = uB;
 
-                // Abort early if the normalization will overflow (cf. "encode" method).
-            }
-        } else {
-            // Convert API to internal handling of boundaries.
-            boundaries = null;
-        }
-
     if (inputSigma != null) {
         if (inputSigma.length != init.length) {
             throw new DimensionMismatchException(inputSigma.length, init.length);
         }
         for (int i = 0; i < init.length; i++) {
             if (inputSigma[i] < 0) {
                 throw new NotPositiveException(inputSigma[i]);
             }
             if (boundaries != null) {
                 if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
                     throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
                 }
             }
         }
     }
 }
\ No newline at end of file
