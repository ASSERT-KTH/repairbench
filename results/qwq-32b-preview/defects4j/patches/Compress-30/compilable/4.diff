diff --git a/tmp/c8ed2b5d-f46a-4757-a07a-bff4110560bd_buggy.java b/tmp/023de09a-c58f-4a9c-8ed1-45c5fde7cbdc_fixed.java
index cae5e03..1277ef1 100644
--- a/tmp/c8ed2b5d-f46a-4757-a07a-bff4110560bd_buggy.java
+++ b/tmp/023de09a-c58f-4a9c-8ed1-45c5fde7cbdc_fixed.java
@@ -1,33 +1,27 @@
-    /*
-     * (non-Javadoc)
-     * 
-     * @see java.io.InputStream#read(byte[], int, int)
-     */
 @Override
 public int read(final byte[] dest, final int offs, final int len)
     throws IOException {
-        if (offs < 0) {
-            throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
-        }
     if (len < 0) {
         throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
     }
-        if (offs + len > dest.length) {
-            throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
-                                                + len + ") > dest.length(" + dest.length + ").");
+    if (len == 0) {
+        return 0; // Immediately return 0 for len = 0
+    }
+    if (offs < 0 || offs + len > dest.length) {
+        throw new IndexOutOfBoundsException("Invalid offset or length: offs(" + offs + "), len(" + len + "), dest.length(" + dest.length + ").");
     }
     if (this.in == null) {
         throw new IOException("stream closed");
     }
 
     final int hi = offs + len;
     int destOffs = offs;
     int b;
     while (destOffs < hi && ((b = read0()) >= 0)) {
         dest[destOffs++] = (byte) b;
         count(1);
     }
 
     int c = (destOffs == offs) ? -1 : (destOffs - offs);
     return c;
 }
\ No newline at end of file
