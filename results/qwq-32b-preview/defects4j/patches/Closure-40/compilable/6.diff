diff --git a/tmp/2b245595-fd25-4ee8-b197-c9d3c14e0c4a_buggy.java b/tmp/74fb01eb-1507-4d49-b0a6-e25e2df7438a_fixed.java
index 670114d..c9b30d3 100644
--- a/tmp/2b245595-fd25-4ee8-b197-c9d3c14e0c4a_buggy.java
+++ b/tmp/74fb01eb-1507-4d49-b0a6-e25e2df7438a_fixed.java
@@ -1,48 +1,93 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
 
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns != null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
   if (n.isAssign()) {
     Node nameNode = n.getFirstChild();
 
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null) {
       if (ns.isPrototype) {
         recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
       } else {
         recordSet(ns.name, nameNode);
       }
     }
   } else if (n.isCall()) {
     Node nameNode = n.getFirstChild();
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null && ns.onlyAffectsClassDef) {
       JsName name = getName(ns.name, false);
       if (name != null) {
         refNodes.add(new ClassDefiningFunctionNode(
             name, n, parent, parent.getParent()));
       }
+    } else if (isGoogInheritsCall(t, n)) {
+      // Special handling for goog.inherits
+      handleGoogInheritsCall(t, n);
     }
   }
 }
+
+private boolean isGoogInheritsCall(NodeTraversal t, Node n) {
+  Node fnNode = n.getFirstChild();
+  if (fnNode.isQualifiedName()) {
+    String qualifiedName = fnNode.getQualifiedName();
+    return "goog.inherits".equals(qualifiedName);
+  }
+  return false;
+}
+
+private void handleGoogInheritsCall(NodeTraversal t, Node n) {
+  // Extract subclass and superclass from arguments
+  Node subclassNode = n.getFirstChild().getNext();
+  Node superclassNode = subclassNode.getNext();
+
+  if (subclassNode == null || superclassNode == null) {
+    return; // Invalid call, skip
+  }
+
+  // Get the names of the subclass and superclass
+  String subclassName = getNameFromNode(subclassNode);
+  String superclassName = getNameFromNode(superclassNode);
+
+  if (subclassName != null && superclassName != null) {
+    // Record the inheritance relationship
+    recordInheritance(subclassName, superclassName);
+  }
+}
+
+private String getNameFromNode(Node n) {
+  if (n.isQualifiedName()) {
+    return n.getQualifiedName();
+  } else if (n.isString()) {
+    return n.getString();
+  }
+  return null;
+}
+
+private void recordInheritance(String subclass, String superclass) {
+  // Implement logic to record inheritance relationship
+  // This could involve updating the class hierarchy in the NameAnalyzer
+}
\ No newline at end of file
