diff --git a/tmp/9263ada2-cc6e-4040-8d1a-c177d4aff615_buggy.java b/tmp/f5462ab0-bc58-4437-b938-3a5c273ebdd5_fixed.java
index ec6c9ee..9bb0bec 100644
--- a/tmp/9263ada2-cc6e-4040-8d1a-c177d4aff615_buggy.java
+++ b/tmp/f5462ab0-bc58-4437-b938-3a5c273ebdd5_fixed.java
@@ -1,21 +1,24 @@
-    //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
         PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
         sep = sep.finish(f.getPrinter(), f.getParser());
         return new PeriodFormatter(sep, sep);
+    } else if (size >= 1 && elementPairs.get(0) instanceof Pair) {
+        Pair pair = (Pair) elementPairs.get(0);
+        PeriodPrinter printer = pair.printer;
+        PeriodParser parser = pair.parser;
+        if (size == 1) {
+            return new PeriodFormatter(printer, parser);
+        } else {
+            PeriodFormatter remainder = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);
+            return new PeriodFormatter(new ChainedPrinter(printer, remainder.getPrinter()), new ChainedParser(parser, remainder.getParser()));
         }
-        Object[] comp = createComposite(elementPairs);
-        if (notPrinter) {
-            return new PeriodFormatter(null, (PeriodParser) comp[1]);
-        } else if (notParser) {
-            return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+        throw new IllegalArgumentException("Invalid element pairs in formatter builder");
     }
 }
\ No newline at end of file
