diff --git a/tmp/46afd9ad-500f-41fd-aa29-e4f88244b2f2_buggy.java b/tmp/ffcdd4e0-8ff9-44a6-974e-282ba2444b76_fixed.java
index ec6c9ee..068d525 100644
--- a/tmp/46afd9ad-500f-41fd-aa29-e4f88244b2f2_buggy.java
+++ b/tmp/ffcdd4e0-8ff9-44a6-974e-282ba2444b76_fixed.java
@@ -1,21 +1,37 @@
-    //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
         PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
         sep = sep.finish(f.getPrinter(), f.getParser());
-                return new PeriodFormatter(sep, sep);
+        return new PeriodFormatter(sep.wrapPrinter(f.getPrinter()), sep.wrapParser(f.getParser()));
+    } else if (size >= 2) {
+        Object printerObj = elementPairs.get(0);
+        Object parserObj = elementPairs.get(1);
+        PeriodPrinter printer = (printerObj instanceof PeriodPrinter) ? (PeriodPrinter) printerObj : null;
+        PeriodParser parser = (parserObj instanceof PeriodParser) ? (PeriodParser) parserObj : null;
+        if (size > 2) {
+            PeriodFormatter tailFormatter = toFormatter(elementPairs.subList(2, size), 
+                                                         printer == null ? notPrinter : false, 
+                                                         parser == null ? notParser : false);
+            if (printer != null) {
+                printer = new ChainedPeriodPrinter(printer, tailFormatter.getPrinter());
+            }
+            if (parser != null) {
+                parser = new ChainedPeriodParser(parser, tailFormatter.getParser());
+            }
         }
-        Object[] comp = createComposite(elementPairs);
         if (notPrinter) {
-            return new PeriodFormatter(null, (PeriodParser) comp[1]);
+            return new PeriodFormatter(null, parser);
         } else if (notParser) {
-            return new PeriodFormatter((PeriodPrinter) comp[0], null);
+            return new PeriodFormatter(printer, null);
         } else {
-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+            return new PeriodFormatter(printer, parser);
+        }
+    } else {
+        throw new IllegalArgumentException("Invalid element pairs");
     }
 }
\ No newline at end of file
