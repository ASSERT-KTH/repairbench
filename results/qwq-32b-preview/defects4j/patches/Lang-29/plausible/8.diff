diff --git a/tmp/5a171d5f-059c-4bb0-9c2c-9e22d7b3a90e_buggy.java b/tmp/0a2e469e-c3ee-40ff-a3a1-93ef2803e29c_fixed.java
index 3ec995f..dd71621 100644
--- a/tmp/5a171d5f-059c-4bb0-9c2c-9e22d7b3a90e_buggy.java
+++ b/tmp/0a2e469e-c3ee-40ff-a3a1-93ef2803e29c_fixed.java
@@ -1,26 +1,51 @@
 /**
  * <p>
-     * Converts the given Java version string to an <code>int</code>.
+ * Converts the given Java version string to an {@code int}.
  * </p>
  * 
  * <p>
  * Example return values:
  * </p>
  * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
+ * <li>{@code 120} for Java 1.2</li>
+ * <li>{@code 131} for Java 1.3.1</li>
+ * <li>{@code 160} for Java 1.6.0_20</li>
  * </ul>
  * 
  * <p>
  * Patch releases are not reported.
  * </p>
  * <p>
  * This method is package private instead of private to support unit test invocation.
  * </p>
  * 
  * @return the version, for example 131 for Java 1.3.1
  */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+    
+    // Remove any non-digit and non-dot characters
+    String cleanedVersion = version.replaceAll("[^\\d.]", "");
+    
+    if (cleanedVersion.isEmpty()) {
+        return 0;
+    }
+    
+    String[] parts = cleanedVersion.split("\\.");
+    if (parts.length < 2) {
+        return 0;
+    }
+    
+    try {
+        int major = Integer.parseInt(parts[0]);
+        int minor = Integer.parseInt(parts[1]);
+        int build = parts.length > 2 ? Integer.parseInt(parts[2]) : 0;
+        
+        // Convert to the expected format: 120 for 1.2, 131 for 1.3.1, etc.
+        return major * 100 + minor * 10 + build;
+    } catch (NumberFormatException e) {
+        return 0;
+    }
 }
\ No newline at end of file
