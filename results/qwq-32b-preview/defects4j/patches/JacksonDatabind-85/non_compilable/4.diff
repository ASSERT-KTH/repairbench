diff --git a/tmp/4b92792f-7ba3-48db-95e5-b42f12d7feb1_buggy.java b/tmp/2c9e40cd-54d0-49d9-bee3-df489c999b63_fixed.java
index d926eea..d20ba5b 100644
--- a/tmp/4b92792f-7ba3-48db-95e5-b42f12d7feb1_buggy.java
+++ b/tmp/2c9e40cd-54d0-49d9-bee3-df489c999b63_fixed.java
@@ -1,48 +1,41 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
+                                          BeanProperty property) throws JsonMappingException {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
+    // Handle custom pattern, locale, or time zone specified in JsonFormat
+    if (format.hasPattern() || format.hasLocale() || format.hasTimeZone()) {
+        // Use the specified pattern, locale, and time zone
+        String pattern = format.hasPattern() ? format.getPattern() : null;
+        Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
+        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();
+        if (pattern != null) {
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
-                    }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
+        } else {
+            // If no pattern is specified, use the default ISO8601 format
+            return withFormat(Boolean.FALSE, new StdDateFormat());
+        }
+    } else {
+        // No custom settings, use the default format from the ObjectMapper
+        DateFormat df = serializers.getDateFormat();
+        if (df instanceof SimpleDateFormat) {
+            return withFormat(Boolean.FALSE, df);
+        } else {
+            // Fallback to standard date format
+            return withFormat(Boolean.FALSE, new StdDateFormat());
+        }
     }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
 }
\ No newline at end of file
