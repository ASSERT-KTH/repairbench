diff --git a/tmp/74e75915-b7c2-4b8d-a6e6-26642a85ff04_buggy.java b/tmp/c8d26483-416f-4b23-ab16-df724a1dde4e_fixed.java
index d926eea..da8ab07 100644
--- a/tmp/74e75915-b7c2-4b8d-a6e6-26642a85ff04_buggy.java
+++ b/tmp/c8d26483-416f-4b23-ab16-df724a1dde4e_fixed.java
@@ -1,48 +1,25 @@
-    @Override
-    public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
-        if (property == null) {
-            return this;
-        }
-        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
-        if (format == null) {
-            return this;
-        }
-        // Simple case first: serialize as numeric timestamp?
-        JsonFormat.Shape shape = format.getShape();
-        if (shape.isNumeric()) {
-            return withFormat(Boolean.TRUE, null);
-        }
-
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
+if (format.hasPattern()) {
+    pattern = format.getPattern();
+    loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
+    tz = format.getTimeZone();
+} else {
+    DateFormat df = serializers.getFormattingConfiguration().getDateFormat();
+    if (df instanceof SimpleDateFormat) {
+        SimpleDateFormat sdf = (SimpleDateFormat) df;
+        pattern = sdf.toPattern();
+        loc = sdf.getLocale();
+        tz = sdf.getTimeZone();
+    } else {
+        // Fallback to default ISO-8601 format
+        pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+        loc = serializers.getLocale();
         tz = serializers.getTimeZone();
     }
+}
+df = new SimpleDateFormat(pattern, loc);
+if (tz != null) {
     df.setTimeZone(tz);
+} else {
+    df.setTimeZone(serializers.getTimeZone());
+}
 return withFormat(Boolean.FALSE, df);
\ No newline at end of file
-        }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
-    }
