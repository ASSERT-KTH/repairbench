diff --git a/tmp/bbb4aa35-6da3-4c55-9ca9-e18ac0866d5e_buggy.java b/tmp/31bdcf3d-c6c3-4f66-925b-e893aa8c1214_fixed.java
index 220820e..b60dcff 100644
--- a/tmp/bbb4aa35-6da3-4c55-9ca9-e18ac0866d5e_buggy.java
+++ b/tmp/31bdcf3d-c6c3-4f66-925b-e893aa8c1214_fixed.java
@@ -1,22 +1,26 @@
 /**
  * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
  * @param tableau simple tableau for the problem
  * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
  * @return row with the minimum ratio
  */
 private Integer getPivotRow(final int col, final SimplexTableau tableau) {
     double minRatio = Double.MAX_VALUE;
     Integer minRatioPos = null;
+    double epsilon = 1e-12; // Small value to handle precision issues
+
     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
         final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+
+        // Check if entry is positive and greater than epsilon to avoid division by zero or very small numbers
+        if (entry > epsilon) {
             final double ratio = rhs / entry;
             if (ratio < minRatio) {
                 minRatio = ratio;
                 minRatioPos = i;
             }
         }
     }
     return minRatioPos;
 }
\ No newline at end of file
