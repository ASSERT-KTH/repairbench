diff --git a/tmp/f98039ed-17c2-41a7-b080-6baf3a14d361_buggy.java b/tmp/b4bf418b-569d-4712-9afb-62edcb94c2ea_fixed.java
index b5d94e0..20ecbce 100644
--- a/tmp/f98039ed-17c2-41a7-b080-6baf3a14d361_buggy.java
+++ b/tmp/b4bf418b-569d-4712-9afb-62edcb94c2ea_fixed.java
@@ -1,26 +1,32 @@
 private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
+  // Check if we should visit this node at all
   if (!shouldVisit(node)) {
     return;
   }
 
   int visits = 0;
+  boolean retraverse;
+
   do {
+    // First, visit the current node
+    visit(node);
+    visits++;
+
+    // Then, traverse its children
     Node c = node.getFirstChild();
     while (c != null) {
       traverse(c);
-        Node next = c.getNext();
-        c = next;
+      c = c.getNext();
     }
 
-      visit(node);
-      visits++;
-
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+    // Check if we need to re-traverse this node
+    retraverse = shouldRetraverse(node);
 
+    // Exit the node after processing
     exitNode(node);
+  } while (retraverse && visits < 10000);
+
+  if (visits >= 10000) {
+    throw new RuntimeException("Too many iterations in traverse method");
+  }
 }
\ No newline at end of file
