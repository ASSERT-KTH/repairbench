diff --git a/tmp/dac85ff8-d451-48ee-86f4-79038736f959_buggy.java b/tmp/1d8d9157-d1cd-4a18-b34e-662df47b5026_fixed.java
index b5d94e0..a3e0fcc 100644
--- a/tmp/dac85ff8-d451-48ee-86f4-79038736f959_buggy.java
+++ b/tmp/1d8d9157-d1cd-4a18-b34e-662df47b5026_fixed.java
@@ -1,26 +1,27 @@
 private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
   if (!shouldVisit(node)) {
     return;
   }
 
   int visits = 0;
   do {
-      Node c = node.getFirstChild();
-      while(c != null) {
+    // Make a list of children to traverse
+    List<Node> children = new ArrayList<>();
+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
+      children.add(c);
+    }
+
+    // Traverse each child
+    for (Node c : children) {
       traverse(c);
-        Node next = c.getNext();
-        c = next;
     }
 
+    // Visit the node after traversing its children
     visit(node);
     visits++;
 
-      Preconditions.checkState(visits < 10000, "too many interations");
+    Preconditions.checkState(visits < 10000, "too many iterations");
   } while (shouldRetraverse(node));
 
   exitNode(node);
 }
\ No newline at end of file
