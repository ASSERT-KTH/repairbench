diff --git a/tmp/c0e327e4-b525-41aa-876b-51415b7fe6fc_buggy.java b/tmp/38aff730-4ceb-472a-8145-ca887ae759c9_fixed.java
index b5d94e0..9ebf82a 100644
--- a/tmp/c0e327e4-b525-41aa-876b-51415b7fe6fc_buggy.java
+++ b/tmp/38aff730-4ceb-472a-8145-ca887ae759c9_fixed.java
@@ -1,26 +1,28 @@
 private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
   if (!shouldVisit(node)) {
     return;
   }
 
   int visits = 0;
+  boolean retraverse;
   do {
-      Node c = node.getFirstChild();
-      while(c != null) {
+    retraverse = false;
+
+    // Visit the current node before traversing children
+    // This ensures that any changes to children are considered in the current traversal
+    if (visit(node)) {
+      retraverse = shouldRetraverse(node);
+    }
+
+    // Traverse children
+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       traverse(c);
-        Node next = c.getNext();
-        c = next;
     }
 
-      visit(node);
     visits++;
+    Preconditions.checkState(visits < 10000, "too many iterations");
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+  } while (retraverse);
 
   exitNode(node);
 }
\ No newline at end of file
