diff --git a/tmp/dc42d6d3-8ab7-407d-a53d-ddeb98faaaee_buggy.java b/tmp/fac0b06a-b97b-4a1f-a423-5ec302531de4_fixed.java
index d357c7e..e079b71 100644
--- a/tmp/dc42d6d3-8ab7-407d-a53d-ddeb98faaaee_buggy.java
+++ b/tmp/fac0b06a-b97b-4a1f-a423-5ec302531de4_fixed.java
@@ -1,16 +1,29 @@
 private InputStream getCurrentStream() throws IOException {
     if (deferredBlockStreams.isEmpty()) {
         throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
     }
     
     while (deferredBlockStreams.size() > 1) {
-            // In solid compression mode we need to decompress all leading folder'
-            // streams to get access to an entry. We defer this until really needed
-            // so that entire blocks can be skipped without wasting time for decompression.
+        // In solid compression mode, we need to decompress all leading folder's streams to get access to an entry.
+        // We defer this until really needed so that entire blocks can be skipped without wasting time for decompression.
         final InputStream stream = deferredBlockStreams.remove(0);
+        // Skip and close the stream only if it's not the one we need to read from.
+        // For entries of size zero, we might not need to skip the entire stream.
+        // To handle entries of size zero correctly, we should skip only the necessary amount.
+        // Assuming that 'entry' has the size information, we can skip only up to the entry's size.
+        // However, since 'entry' is not directly accessible here, we need a different approach.
+        // A possible solution is to skip only if the entry size is greater than zero.
+        // But since we don't have direct access to the entry size here, we need to ensure that
+        // for entries of size zero, the stream is not skipped or is handled appropriately.
+        // To make it simple and safe, we'll skip the stream only if it's not the last one.
+        // This way, the last stream, which should correspond to the current entry, is not skipped.
+        
+        // Skip the stream only if it's not the last one
+        if (deferredBlockStreams.size() > 0) {
             IOUtils.skip(stream, Long.MAX_VALUE);
+        }
         stream.close();
     }
 
     return deferredBlockStreams.get(0);
 }
\ No newline at end of file
