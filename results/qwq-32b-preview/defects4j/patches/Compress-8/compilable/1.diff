diff --git a/tmp/f119c72e-9caa-4d07-a5f3-cfd4fcf586d7_buggy.java b/tmp/49cde3dc-2fc4-46de-9149-1ff64537c65f_fixed.java
index e087f95..9c8e9ec 100644
--- a/tmp/f119c72e-9caa-4d07-a5f3-cfd4fcf586d7_buggy.java
+++ b/tmp/49cde3dc-2fc4-46de-9149-1ff64537c65f_fixed.java
@@ -1,53 +1,80 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
+    if (length < 2) {
+        throw new IllegalArgumentException("length must be at least 2 bytes");
+    }
+
     int start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
     // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+    while (start < offset + length && buffer[start] == ' ') {
+        start++;
+    }
+
+    // Check if all remaining bytes are NULs
+    boolean allNULs = true;
+    for (int i = start; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            allNULs = false;
+            break;
+        }
+    }
+    if (allNULs) {
+        return 0L;
+    }
+
+    long result = 0;
+    boolean parsingDigits = false;
+    for (int i = start; i < offset + length; i++) {
+        byte currentByte = buffer[i];
+        if (currentByte == 0) {
+            // NUL byte
+            if (parsingDigits) {
+                // Check if it's trailing NUL
+                if (i == start) {
+                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
+                }
+                // Ensure it's the trailing delimiter
+                if (i == offset + length - 1) {
+                    return result;
+                } else if (buffer[i + 1] == 0 || buffer[i + 1] == ' ') {
+                    return result;
+                } else {
+                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
+                }
+            } else {
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
+            }
+        } else if (currentByte == ' ') {
+            // Space character
+            if (parsingDigits) {
+                // Check if it's trailing space
+                if (i == start) {
+                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
+                }
+                // Ensure it's the trailing delimiter
+                if (i == offset + length - 1) {
+                    return result;
+                } else if (buffer[i + 1] == 0 || buffer[i + 1] == ' ') {
+                    return result;
+                } else {
+                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
+                }
+            } else {
+                // Leading space before digits
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
+        } else if (currentByte >= '0' && currentByte <= '7') {
+            // Octal digit
+            parsingDigits = true;
+            result = (result << 3) + (currentByte - '0');
+        } else {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
         }
     }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
-        }
-
+    // If we reach here, check if the last byte was a trailing space or NUL
+    if (parsingDigits && (buffer[offset + length - 1] == 0 || buffer[offset + length - 1] == ' ')) {
         return result;
+    } else {
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, offset + length - 1, buffer[offset + length - 1]));
+    }
 }
\ No newline at end of file
