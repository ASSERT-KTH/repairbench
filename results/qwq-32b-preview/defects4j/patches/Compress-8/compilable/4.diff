diff --git a/tmp/3270759a-1cca-4cbc-818c-b8855aeaf2e0_buggy.java b/tmp/e5eeea41-0e85-4893-92b4-f9692a4b559c_fixed.java
index e087f95..8dd6757 100644
--- a/tmp/3270759a-1cca-4cbc-818c-b8855aeaf2e0_buggy.java
+++ b/tmp/e5eeea41-0e85-4893-92b4-f9692a4b559c_fixed.java
@@ -1,53 +1,45 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+
     long result = 0;
+    boolean parsedDigits = false;
     boolean stillPadding = true;
     int end = offset + length;
-        int     start = offset;
+    byte lastByte = 0;
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+    for (int i = offset; i < end; i++) {
+        byte currentByte = buffer[i];
         if (stillPadding) {
+            if (currentByte == (byte) ' ' || currentByte == 0) {
                 continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+            } else {
                 stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        }
+        if (!stillPadding) {
+            if (currentByte >= '0' && currentByte <= '7') {
+                result = result * 8 + (currentByte - '0');
+                parsedDigits = true;
+                lastByte = currentByte;
+            } else if (currentByte == (byte) ' ' || currentByte == 0) {
+                if (parsedDigits) {
+                    break;
+                } else {
+                    // All bytes are space or NUL
+                    break;
+                }
+            } else {
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
+            }
+        }
+    }
+
+    // If digits were parsed, ensure the last byte is space or NUL
+    if (parsedDigits && (lastByte != (byte) ' ' && lastByte != 0)) {
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end, (byte) 0));
     }
 
     return result;
 }
\ No newline at end of file
