diff --git a/tmp/9130b04d-916f-4a2a-ba3f-4901960e342b_buggy.java b/tmp/d8465865-905d-416a-9e65-49a8f43b36bc_fixed.java
index e087f95..9bc86eb 100644
--- a/tmp/9130b04d-916f-4a2a-ba3f-4901960e342b_buggy.java
+++ b/tmp/d8465865-905d-416a-9e65-49a8f43b36bc_fixed.java
@@ -1,53 +1,50 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Buffer length must be at least 2 bytes.");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+    for (int i = offset; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
             break;
         }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
         if (currentByte == (byte) ' ') {
-                break;
+            if (stillPadding) {
+                continue;
+            } else {
+                break; // Stop parsing if space appears after digits
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        // Check if the byte is a valid octal digit
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i - offset, currentByte));
         }
+
+        stillPadding = false;
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // Check if there was at least one valid digit
+    if (stillPadding) {
+        return 0L; // All NULs or only spaces
+    }
+
+    // Ensure there is a trailing space or NUL
+    if (end - offset > 0) {
+        byte lastByte = buffer[end - 1];
+        if (lastByte != 0 && lastByte != (byte) ' ') {
+            throw new IllegalArgumentException(
+                    "Missing trailing space or NUL at position " + (end - offset));
+        }
     }
 
     return result;
 }
\ No newline at end of file
