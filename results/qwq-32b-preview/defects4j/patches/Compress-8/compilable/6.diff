diff --git a/tmp/a14c3c02-f9dd-407c-a025-6fe883c793cf_buggy.java b/tmp/37a8b961-b4b8-4962-bbfe-6b86ce2d949f_fixed.java
index e087f95..6b1dd12 100644
--- a/tmp/a14c3c02-f9dd-407c-a025-6fe883c793cf_buggy.java
+++ b/tmp/37a8b961-b4b8-4962-bbfe-6b86ce2d949f_fixed.java
@@ -1,53 +1,46 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Buffer length must be at least 2 bytes.");
+    }
+
     long result = 0;
-        boolean stillPadding = true;
+    boolean parsingNumber = false;
     int end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+    for (int i = offset; i < end; i++) {
         final byte currentByte = buffer[i];
+
         if (currentByte == 0) {
+            if (!parsingNumber || (i == end - 1)) {
                 break;
+            } else {
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
             }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
         }
-                if (currentByte == (byte) ' ') {
+
+        if (currentByte == ' ') {
+            if (!parsingNumber || (i == end - 1)) {
                 break;
+            } else {
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+        if (currentByte >= '0' && currentByte <= '7') {
+            parsingNumber = true;
+            result = (result << 3) + (currentByte - '0');
+        } else {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
+        }
+    }
 
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+    // Check if the last byte is a space or NUL
+    if (end > offset) {
+        byte lastByte = buffer[end - 1];
+        if (lastByte != ' ' && lastByte != 0) {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, lastByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
