diff --git a/tmp/83843d72-9c08-4717-9edc-c2048b560bc7_buggy.java b/tmp/ae7b24e5-20de-4235-8c7c-15e356ce0492_fixed.java
index e087f95..b7e6bba 100644
--- a/tmp/83843d72-9c08-4717-9edc-c2048b560bc7_buggy.java
+++ b/tmp/ae7b24e5-20de-4235-8c7c-15e356ce0492_fixed.java
@@ -1,53 +1,61 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Buffer length must be at least 2 bytes.");
+    }
+
     long result = 0;
-        boolean stillPadding = true;
+    boolean parsingDigits = false;
     int end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+    for (int i = offset; i < end; i++) {
         final byte currentByte = buffer[i];
+
         if (currentByte == 0) {
-                break;
+            // If we've started parsing digits and encounter a NUL, it's invalid
+            if (parsingDigits) {
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
+            }
+            continue; // Leading NULs are okay, but they don't start digit parsing
         }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+        if (currentByte == ' ') {
+            if (parsingDigits) {
+                // Check the rest of the buffer for spaces or NULs
+                for (int j = i; j < end; j++) {
+                    if (buffer[j] != ' ' && buffer[j] != 0) {
+                        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, j, buffer[j]));
                     }
-                if (currentByte == (byte) ' ') {
-                break;
+                }
+                return result;
+            } else {
+                continue; // Leading spaces are ignored
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        // At this point, currentByte should be an octal digit
         if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+        parsingDigits = true;
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    // If no digits were parsed and the buffer isn't all NULs, it's invalid
+    if (!parsingDigits) {
+        for (int i = offset; i < end; i++) {
+            if (buffer[i] != 0 && buffer[i] != ' ') {
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, buffer[i]));
+            }
+        }
+        return 0L; // All NULs or spaces
+    }
+
+    // Ensure the last byte is a space or NUL
+    int lastByteIndex = end - 1;
+    if (buffer[lastByteIndex] != ' ' && buffer[lastByteIndex] != 0) {
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, lastByteIndex, buffer[lastByteIndex]));
     }
 
     return result;
 }
\ No newline at end of file
