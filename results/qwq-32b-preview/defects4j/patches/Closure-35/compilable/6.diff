diff --git a/tmp/8e64293b-d68f-4022-af36-23cff9391cb5_buggy.java b/tmp/69ec25ba-003c-4cbe-9d3f-ff144b885305_fixed.java
index d57736b..ee2e018 100644
--- a/tmp/8e64293b-d68f-4022-af36-23cff9391cb5_buggy.java
+++ b/tmp/69ec25ba-003c-4cbe-9d3f-ff144b885305_fixed.java
@@ -1,39 +1,30 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
-  private void inferPropertyTypesToMatchConstraint(
-      JSType type, JSType constraint) {
+private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
-    ObjectType constraintObj =
-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+  // Restrict both types by NotNullOrUndefined to handle only record types
+  JSType constraintNotNull = constraint.restrictByNotNullOrUndefined();
+  JSType typeNotNull = type.restrictByNotNullOrUndefined();
+
+  // Cast to ObjectType
+  ObjectType constraintObj = ObjectType.cast(constraintNotNull);
+  ObjectType objType = ObjectType.cast(typeNotNull);
+
+  // Check if both are record types
+  if (constraintObj != null && objType != null && constraintObj.isRecordType()) {
+    // Iterate over all own property names in the constraint object
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!objType.isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
+        // If the property does not exist in the object type, infer it with VOID_TYPE combined with propType
         if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
         }
+        // Define the inferred property in the object type
         objType.defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
-  }
