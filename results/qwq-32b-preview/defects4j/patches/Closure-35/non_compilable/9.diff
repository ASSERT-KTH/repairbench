diff --git a/tmp/95a49d88-bd4e-4c0f-96de-248cedab2c21_buggy.java b/tmp/a0b5d211-9665-44a6-9d56-b3e0de050920_fixed.java
index d57736b..cd366b7 100644
--- a/tmp/95a49d88-bd4e-4c0f-96de-248cedab2c21_buggy.java
+++ b/tmp/a0b5d211-9665-44a6-9d56-b3e0de050920_fixed.java
@@ -1,39 +1,29 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
-  private void inferPropertyTypesToMatchConstraint(
-      JSType type, JSType constraint) {
+private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
-    ObjectType constraintObj =
-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
+  ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            // Use the union type of VOID_TYPE and propType to handle undefined cases.
+            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
           }
+          // Define the inferred property with the appropriate type.
           objType.defineInferredProperty(prop, typeToInfer, null);
+        } else {
+          // If the property is already declared, ensure its type is compatible with the constraint.
+          JSType existingType = objType.getPropertyType(prop);
+          JSType widenedType = existingType.getLeastSupertype(propType);
+          objType.setROPERTY(prop, widenedType, null);
         }
       }
     }
   }
 }
\ No newline at end of file
