diff --git a/tmp/56e7c962-7b3b-484a-966e-7defcaa4939f_buggy.java b/tmp/f51cb15c-a811-4603-867f-6f1a558b2efa_fixed.java
index d57736b..a5d669d 100644
--- a/tmp/56e7c962-7b3b-484a-966e-7defcaa4939f_buggy.java
+++ b/tmp/f51cb15c-a811-4603-867f-6f1a558b2efa_fixed.java
@@ -1,39 +1,30 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
-  private void inferPropertyTypesToMatchConstraint(
-      JSType type, JSType constraint) {
+private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {
     if (type == null || constraint == null) {
         return;
     }
 
-    ObjectType constraintObj =
-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
+    // Restrict the constraint to non-null and non-undefined types
+    JSType constraintNotNull = constraint.restrictByNotNullOrUndefined();
+    ObjectType constraintObj = ObjectType.cast(constraintNotNull);
     if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+        // Restrict the type to non-null and non-undefined types
+        JSType typeNotNull = type.restrictByNotNullOrUndefined();
+        ObjectType objType = ObjectType.cast(typeNotNull);
         if (objType != null) {
             for (String prop : constraintObj.getOwnPropertyNames()) {
                 JSType propType = constraintObj.getPropertyType(prop);
                 if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
+                    // If the property is not declared, infer a type that is the least upper bound
+                    // of the property type and the native void type.
+                    JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
                     objType.defineInferredProperty(prop, typeToInfer, null);
+                } else {
+                    // If the property is declared, widen its type to match the constraint
+                    JSType currentType = objType.getPropertyType(prop);
+                    JSType widenedType = currentType.getLeastSupertype(propType);
+                    objType.setPropertyType(prop, widenedType);
                 }
             }
         }
     }
 }
\ No newline at end of file
