diff --git a/tmp/dc84d88e-1290-4ef2-b39e-483b98ef9881_buggy.java b/tmp/a18f9e1b-6a92-4c12-9bec-8410fe7fc853_fixed.java
index 86553f4..94f44d1 100644
--- a/tmp/dc84d88e-1290-4ef2-b39e-483b98ef9881_buggy.java
+++ b/tmp/a18f9e1b-6a92-4c12-9bec-8410fe7fc853_fixed.java
@@ -1,57 +1,67 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
+ * is encountered, there is no reason to traverse non-global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
     // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {};
     int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+    if (!(pType == Token.VAR ||
+          pType == Token.FUNCTION ||
+          pType == Token.GETPROP ||
+          pType == Token.STRING_KEY ||
+          pType == Token.OBJECT_KEY ||
+          pType == Token.PROP)) {
       return false;
     }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
+      // Always traverse the left side of the assignment.
+      // To handle nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      if (isPrototypeAssignment(lhs)) {
         return false;
       }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
-            return false;
     }
   }
+
+  return true;
 }
 
+private boolean isPrototypeAssignment(Node node) {
+  if (node.getType() == Token.GETPROP) {
+    Node propertyName = node.getLastChild();
+    if ("prototype".equals(propertyName.getString())) {
       return true;
     }
+  } else if (node.getQualifiedName() != null &&
+             node.getQualifiedName().contains(".prototype.")) {
+    return true;
+  }
+  return false;
+}
\ No newline at end of file
