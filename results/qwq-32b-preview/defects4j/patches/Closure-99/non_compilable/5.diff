diff --git a/tmp/17808686-ed79-4eae-b161-e3160c30b218_buggy.java b/tmp/7887ce3d-f552-43a7-93bf-86a7b282182f_fixed.java
index 86553f4..35812f5 100644
--- a/tmp/17808686-ed79-4eae-b161-e3160c30b218_buggy.java
+++ b/tmp/7887ce3d-f552-43a7-93bf-86a7b282182f_fixed.java
@@ -1,57 +1,47 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
-      if (jsDoc != null &&
-          (jsDoc.isConstructor() ||
-           jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+    if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {
       return false;
     }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
-      int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+    // Skip functions that are properties of objects or prototypes.
+    if (parent != null && (parent.getType() == Token.PROPERTY || parent.getType() == Token.GETPROP)) {
       return false;
     }
+
+    // Skip functions assigned to object properties via assignments.
+    if (parent != null && parent.getType() == Token.ASSIGN) {
+      Node lhs = parent.getFirstChild();
+      if (lhs.getType() == Token.GETPROP && lhs.getString().endsWith("prototype")) {
+        return false;
+      }
+      if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+        return false;
+      }
+    }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+      // Always traverse the left side of the assignment.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals("prototype")) {
         return false;
       }
       if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
         return false;
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
