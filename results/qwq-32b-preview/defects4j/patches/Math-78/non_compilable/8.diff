diff --git a/tmp/b663affc-5016-4afa-91e8-0c8325a032ed_buggy.java b/tmp/8831db70-4b47-4115-b092-26035164a88d_fixed.java
index 032fa8e..9e53bbd 100644
--- a/tmp/b663affc-5016-4afa-91e8-0c8325a032ed_buggy.java
+++ b/tmp/8831db70-4b47-4115-b092-26035164a88d_fixed.java
@@ -1,108 +1,103 @@
-    /** Evaluate the impact of the proposed step on the event handler.
-     * @param interpolator step interpolator for the proposed step
-     * @return true if the event handler triggers an event before
-     * the end of the proposed step (this implies the step should be
-     * rejected)
-     * @exception DerivativeException if the interpolator fails to
-     * compute the switching function somewhere within the step
-     * @exception EventException if the switching function
-     * cannot be evaluated
-     * @exception ConvergenceException if an event cannot be located
-     */
 public boolean evaluateStep(final StepInterpolator interpolator)
     throws DerivativeException, EventException, ConvergenceException {
 
     try {
-
         forward = interpolator.isForward();
         final double t1 = interpolator.getCurrentTime();
         final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
         final double h = (t1 - t0) / n;
 
         double ta = t0;
         double ga = g0;
-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+        interpolator.setInterpolatedTime(ta);
         for (int i = 0; i < n; ++i) {
-
-                // evaluate handler value at the end of the substep
-                tb += h;
+            double tb = ta + h;
+            if (tb > t1) {
+                tb = t1;
+            }
             interpolator.setInterpolatedTime(tb);
-                final double gb = handler.g(tb, interpolator.getInterpolatedState());
+            double gb = handler.g(tb, interpolator.getInterpolatedState());
 
-                // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
-                    // there is a sign change: an event is expected during this step
+            // Check for sign change within the substep
+            if (ga * gb <= 0) {
+                // Sign change detected; attempt to find the root
+                findAndHandleEvent(ta, tb, ga, gb, interpolator);
+            }
 
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
+            ta = tb;
+            ga = gb;
+        }
 
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+        // No event detected in the entire step
+        pendingEvent = false;
+        pendingEventTime = Double.NaN;
+        return false;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
-                        public double value(final double t) throws FunctionEvaluationException {
+    } catch (FunctionEvaluationException e) {
+        final Throwable cause = e.getCause();
+        if ((cause != null) && (cause instanceof DerivativeException)) {
+            throw (DerivativeException) cause;
+        } else if ((cause != null) && (cause instanceof EventException)) {
+            throw (EventException) cause;
+        }
+        throw new EventException(e);
+    }
+}
+
+private void findAndHandleEvent(double ta, double tb, double ga, double gb,
+                                StepInterpolator interpolator)
+    throws DerivativeException, EventException, ConvergenceException {
+
+    UnivariateRealFunction f = new UnivariateRealFunction() {
+        public double value(double t) throws FunctionEvaluationException {
             try {
                 interpolator.setInterpolatedTime(t);
                 return handler.g(t, interpolator.getInterpolatedState());
             } catch (DerivativeException e) {
                 throw new FunctionEvaluationException(e, t);
             } catch (EventException e) {
                 throw new FunctionEvaluationException(e, t);
             }
         }
     };
-                    final BrentSolver solver = new BrentSolver();
+
+    // Ensure that the function values at ta and tb have opposite signs
+    if (ga * gb > 0) {
+        // If not, try to adjust tb to find a point with opposite sign
+        double tmid = (ta + tb) / 2;
+        interpolator.setInterpolatedTime(tmid);
+        double gmid = handler.g(tmid, interpolator.getInterpolatedState());
+        if (ga * gmid < 0) {
+            tb = tmid;
+            gb = gmid;
+        } else if (gmid * gb < 0) {
+            ta = tmid;
+            ga = gmid;
+        } else {
+            // No sign change found; skip this substep
+            return;
+        }
+    }
+
+    BrentSolver solver = new BrentSolver();
     solver.setAbsoluteAccuracy(convergence);
     solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
-                        ta = tb;
-                        ga = gb;
-                    } else if (Double.isNaN(previousEventTime) ||
-                               (Math.abs(previousEventTime - root) > convergence)) {
+    double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+
+    if (Math.abs(root - ta) <= convergence && Math.abs(root - previousEventTime) <= convergence) {
+        // Event is too close to the previous one; ignore it
+        return;
+    }
+
+    if (Double.isNaN(previousEventTime) || Math.abs(previousEventTime - root) > convergence) {
         pendingEventTime = root;
-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
-                            // we were already waiting for this event which was
-                            // found during a previous call for a step that was
-                            // rejected, this step must now be accepted since it
-                            // properly ends exactly at the event occurrence
-                            return false;
+        if (pendingEvent && Math.abs(t1 - pendingEventTime) <= convergence) {
+            // Step ends exactly at the event time; accept the step
+            pendingEvent = false;
+            pendingEventTime = Double.NaN;
+            return;
         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
+        // Set pending event
         pendingEvent = true;
-                        return true;
     }
-
-                } else {
-                    // no sign change: there is no event for now
-                    ta = tb;
-                    ga = gb;
-                }
-
-            }
-
-            // no event during the whole step
-            pendingEvent     = false;
-            pendingEventTime = Double.NaN;
-            return false;
-
-        } catch (FunctionEvaluationException e) {
-            final Throwable cause = e.getCause();
-            if ((cause != null) && (cause instanceof DerivativeException)) {
-                throw (DerivativeException) cause;
-            } else if ((cause != null) && (cause instanceof EventException)) {
-                throw (EventException) cause;
-            }
-            throw new EventException(e);
-        }
-
 }
\ No newline at end of file
