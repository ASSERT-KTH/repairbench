diff --git a/tmp/02196f0e-6788-4d87-96f5-00194a83b07a_buggy.java b/tmp/0e9f558a-b24e-4cfe-9c95-f94df06cf0ba_fixed.java
index 032fa8e..620d8bd 100644
--- a/tmp/02196f0e-6788-4d87-96f5-00194a83b07a_buggy.java
+++ b/tmp/0e9f558a-b24e-4cfe-9c95-f94df06cf0ba_fixed.java
@@ -1,108 +1,110 @@
-    /** Evaluate the impact of the proposed step on the event handler.
-     * @param interpolator step interpolator for the proposed step
-     * @return true if the event handler triggers an event before
-     * the end of the proposed step (this implies the step should be
-     * rejected)
-     * @exception DerivativeException if the interpolator fails to
-     * compute the switching function somewhere within the step
-     * @exception EventException if the switching function
-     * cannot be evaluated
-     * @exception ConvergenceException if an event cannot be located
-     */
 public boolean evaluateStep(final StepInterpolator interpolator)
     throws DerivativeException, EventException, ConvergenceException {
 
   try {
-
       forward = interpolator.isForward();
       final double t1 = interpolator.getCurrentTime();
-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
+      // Increase the number of substeps for better granularity
+      final int n = Math.max(5, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
       final double h = (t1 - t0) / n;
 
       double ta = t0;
       double ga = g0;
       double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
       for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
+          // Evaluate handler value at the end of the substep
           tb += h;
           interpolator.setInterpolatedTime(tb);
           final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
-                // check events occurrence
+          // Check for sign change indicating an event
           if (g0Positive ^ (gb >= 0)) {
-                    // there is a sign change: an event is expected during this step
+              // There's a sign change; expect an event in this substep
 
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
+              // Adjust ta slightly if necessary to ensure bracketing
+              if (ga * gb >= 0) {
+                  // If ga and gb have the same sign, adjust ta to create bracketing
+                  ta += 1e-10 * (tb - ta);
+                  interpolator.setInterpolatedTime(ta);
+                  ga = handler.g(ta, interpolator.getInterpolatedState());
+              }
 
-                    // variation direction, with respect to the integration direction
+              // Determine the variation direction
               increasing = gb >= ga;
 
+              // Define the function for root-finding
               final UnivariateRealFunction f = new UnivariateRealFunction() {
                   public double value(final double t) throws FunctionEvaluationException {
                       try {
                           interpolator.setInterpolatedTime(t);
                           return handler.g(t, interpolator.getInterpolatedState());
                       } catch (DerivativeException e) {
                           throw new FunctionEvaluationException(e, t);
                       } catch (EventException e) {
                           throw new FunctionEvaluationException(e, t);
                       }
                   }
               };
+
+              // Use Brent's method for root-finding with specified accuracy
               final BrentSolver solver = new BrentSolver();
               solver.setAbsoluteAccuracy(convergence);
               solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+
+              // Ensure that the endpoints bracket the root
+              double root;
+              if (ga * gb < 0) {
+                  root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+              } else {
+                  // If still not bracketing, try adjusting tb
+                  tb += 1e-10 * (tb - ta);
+                  interpolator.setInterpolatedTime(tb);
+                  gb = handler.g(tb, interpolator.getInterpolatedState());
+                  if (ga * gb < 0) {
+                      root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+                  } else {
+                      // If unable to bracket, skip this substep
+                      continue;
+                  }
+              }
+
+              // Check if the found root is a new event
               if ((Math.abs(root - ta) <= convergence) &&
                   (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
+                  // Ignore if it's a repeat of a previous event
                   ta = tb;
                   ga = gb;
               } else if (Double.isNaN(previousEventTime) ||
                          (Math.abs(previousEventTime - root) > convergence)) {
                   pendingEventTime = root;
                   if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
-                            // we were already waiting for this event which was
-                            // found during a previous call for a step that was
-                            // rejected, this step must now be accepted since it
-                            // properly ends exactly at the event occurrence
+                      // Step should be accepted as it ends exactly at the event
                       return false;
                   }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
+                  // Set pending event flag and return true to reject the step
                   pendingEvent = true;
                   return true;
               }
-
           } else {
-                    // no sign change: there is no event for now
+              // No sign change; no event in this substep
               ta = tb;
               ga = gb;
           }
-
       }
 
-            // no event during the whole step
+      // No events found in the entire step
       pendingEvent = false;
       pendingEventTime = Double.NaN;
       return false;
 
   } catch (FunctionEvaluationException e) {
       final Throwable cause = e.getCause();
       if ((cause != null) && (cause instanceof DerivativeException)) {
           throw (DerivativeException) cause;
       } else if ((cause != null) && (cause instanceof EventException)) {
           throw (EventException) cause;
       }
       throw new EventException(e);
   }
-
 }
\ No newline at end of file
