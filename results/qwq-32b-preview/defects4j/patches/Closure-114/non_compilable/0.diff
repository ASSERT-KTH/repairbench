diff --git a/tmp/28986d14-ffe9-4272-a575-a9917c01e934_buggy.java b/tmp/3a07c9a5-2431-47ad-9f3a-ab69ff0e469e_fixed.java
index c51c8b1..7b2ce03 100644
--- a/tmp/28986d14-ffe9-4272-a575-a9917c01e934_buggy.java
+++ b/tmp/3a07c9a5-2431-47ad-9f3a-ab69ff0e469e_fixed.java
@@ -1,31 +1 @@
-    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
-      Node nameNode = n.getFirstChild();
-      Node parent = n.getParent();
-      NameInformation ns = createNameInformation(t, nameNode);
-      if (ns != null) {
-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
-          if (parent.getFirstChild().getNext() != n) {
-            recordDepScope(recordNode, ns);
-          } else {
-            recordDepScope(nameNode, ns);
-          }
-        } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
-          recordDepScope(recordNode, ns);
-        }
-      }
-    }
+var fun, x; (fun = function(){ x; })(); 
\ No newline at end of file
