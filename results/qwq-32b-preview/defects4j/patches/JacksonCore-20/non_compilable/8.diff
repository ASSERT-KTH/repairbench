diff --git a/tmp/c9ca26e5-6eb3-4163-a324-2076ad85a232_buggy.java b/tmp/0d9399c0-a87a-4df6-b847-c328cbdc5e88_fixed.java
index a6f008f..b524602 100644
--- a/tmp/c9ca26e5-6eb3-4163-a324-2076ad85a232_buggy.java
+++ b/tmp/0d9399c0-a87a-4df6-b847-c328cbdc5e88_fixed.java
@@ -1,11 +1,25 @@
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.JsonGenerationException;
+import com.fasterxml.jackson.core.base64.Base64Variants;
+import com.fasterxml.jackson.core.io.SerializedString;
+
+import java.io.IOException;
+import java.util.Base64;
+
 /**
  * Method that can be called on backends that support passing opaque datatypes of
  * non-JSON formats
  *
  * @since 2.8
  */
 public void writeEmbeddedObject(Object object) throws IOException {
-        // 01-Sep-2016, tatu: As per [core#318], handle small number of cases
-        throw new JsonGenerationException("No native support for writing embedded objects",
-                this);
+    if (object == null) {
+        writeNull();
+    } else if (object instanceof byte[]) {
+        byte[] bytes = (byte[]) object;
+        String base64String = Base64.getEncoder().encodeToString(bytes);
+        writeRawValue(Base64Variants.MODIFIED_FOR_JSON.encode(bytes));
+    } else {
+        throw new JsonGenerationException("No native support for writing embedded objects of type " + object.getClass().getName(), this);
+    }
 }
\ No newline at end of file
