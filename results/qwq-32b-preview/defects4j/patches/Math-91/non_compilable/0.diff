diff --git a/tmp/2332cd89-d403-4fc6-ae65-c938708fd3ae_buggy.java b/tmp/fdac3516-4520-433e-98a9-797370f30af1_fixed.java
index 4cce784..add1f8f 100644
--- a/tmp/2332cd89-d403-4fc6-ae65-c938708fd3ae_buggy.java
+++ b/tmp/fdac3516-4520-433e-98a9-797370f30af1_fixed.java
@@ -1,11 +1,40 @@
-    /**
-     * Compares this object to another based on size.
-     * @param object the object to compare to
-     * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
-     *         than <tt>object</tt>, 0 if they are equal.
-     */
+import java.math.BigInteger;
+
+public class Fraction implements Comparable<Fraction> {
+    private final BigInteger numerator;
+    private final BigInteger denominator;
+
+    public Fraction(int num, int den) {
+        this(new BigInteger(Integer.toString(num)), new BigInteger(Integer.toString(den)));
+    }
+
+    public Fraction(BigInteger num, BigInteger den) {
+        this.numerator = num;
+        this.denominator = den;
+    }
+
+    @Override
     public int compareTo(Fraction object) {
-        double nOd = doubleValue();
-        double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        BigInteger a = this.numerator;
+        BigInteger b = this.denominator;
+        BigInteger c = object.numerator;
+        BigInteger d = object.denominator;
+
+        // Cross-multiplication to compare a/b and c/d
+        BigInteger ad = a.multiply(d);
+        BigInteger bc = b.multiply(c);
+
+        int comparison = ad.compareTo(bc);
+        if (comparison < 0) {
+            return -1;
+        } else if (comparison > 0) {
+            return 1;
+        } else {
+            return 0;
+        }
+    }
+
+    public double doubleValue() {
+        return numerator.doubleValue() / denominator.doubleValue();
+    }
 }
\ No newline at end of file
