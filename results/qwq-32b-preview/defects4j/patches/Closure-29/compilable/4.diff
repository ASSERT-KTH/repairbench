diff --git a/tmp/8e33baf3-eda8-470a-9869-e29a8403169c_buggy.java b/tmp/3df495cd-f581-49a6-af3d-a3ba16cc96b0_fixed.java
index be9c8a3..3eefe9c 100644
--- a/tmp/8e33baf3-eda8-470a-9869-e29a8403169c_buggy.java
+++ b/tmp/3df495cd-f581-49a6-af3d-a3ba16cc96b0_fixed.java
@@ -1,94 +1,63 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
 private boolean isInlinableObject(List<Reference> refs) {
-      boolean ret = false;
+  // Track assignments to ensure only one object literal assignment
+  boolean hasSingleAssignment = true;
+  Node firstAssignment = null;
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
-        Node gramps = ref.getGrandparent();
+    Node grandparent = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
+    // Ignore indirect references, like x.y, except for calls like x.y()
     if (parent.isGetProp()) {
       Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
-            return false;
+      if (grandparent.isCall() && grandparent.getFirstChild() == parent) {
+        return false; // Method calls involving 'this' are not inlineable
       }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
-          continue;
+      continue; // Skip indirect references
     }
 
-        // Only rewrite VAR declarations or simple assignment statements
+    // Only consider VAR declarations or simple assignment statements
     if (!isVarOrAssignExprLhs(name)) {
-           return false;
+      return false; // Invalid assignment context
     }
 
     Node val = ref.getAssignedValue();
     if (val == null) {
-          // A var with no assignment.
-          continue;
+      continue; // Var with no assignment
     }
 
-        // We're looking for object literal assignments only.
+    // Must be assigned an object literal
     if (!val.isObjectLit()) {
       return false;
     }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
-            return false;
+    // Check for self-referential assignments
+    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+      if (child.isGetterDef() || child.isSetterDef()) {
+        return false; // ES5 get/set not supported
       }
-
-
       Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
       for (Reference t : refs) {
         Node refNode = t.getParent();
         while (!NodeUtil.isStatementBlock(refNode)) {
           if (refNode == childVal) {
-                // There's a self-referential assignment
+            // Self-referential assignment detected
             return false;
           }
           refNode = refNode.getParent();
         }
       }
     }
 
+    // Ensure only one assignment with an object literal
+    if (firstAssignment == null) {
+      firstAssignment = val;
+    } else if (!firstAssignment.equals(val)) {
+      hasSingleAssignment = false;
+      break;
+    }
+  }
 
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
-      }
-      return ret;
+  // If there are multiple assignments, ensure they are all to the same object literal
+  return hasSingleAssignment;
 }
\ No newline at end of file
