diff --git a/tmp/b79ad007-635e-4443-8c6b-85294992282b_buggy.java b/tmp/66ae56c9-a7a9-4dd4-9ff8-0f44211c5f4d_fixed.java
index d27c40c..4718d4a 100644
--- a/tmp/b79ad007-635e-4443-8c6b-85294992282b_buggy.java
+++ b/tmp/66ae56c9-a7a9-4dd4-9ff8-0f44211c5f4d_fixed.java
@@ -1,49 +1,83 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
+    // Special case handling for y == 0
+    if (y[yOffset] == 0) {
+        if (x[xOffset] > 0) {
+            // atan2(0, positive x) = 0 with sign of y
+            result[resultOffset] = y[yOffset];
+            for (int i = 1; i < result.length; i++) {
+                result[resultOffset + i] = 0;
+            }
+        } else if (x[xOffset] < 0) {
+            // atan2(0, negative x) = π
+            result[resultOffset] = FastMath.PI;
+            for (int i = 1; i < result.length; i++) {
+                result[resultOffset + i] = 0;
+            }
+        } else {
+            // atan2(0, 0) = 0 with sign based on y
+            result[resultOffset] = y[yOffset];
+            for (int i = 1; i < result.length; i++) {
+                result[resultOffset + i] = 0;
+            }
+        }
+        return;
+    }
+
+    // Special case handling for x == 0
+    if (x[xOffset] == 0) {
+        if (y[yOffset] > 0) {
+            // atan2 positive y, 0) = π/2
+            result[resultOffset] = FastMath.PI / 2;
+            for (int i = 1; i < result.length; i++) {
+                result[resultOffset + i] = 0;
+            }
+        } else if (y[yOffset] < 0) {
+            // atan2 negative y, 0) = -π/2
+            result[resultOffset] = -FastMath.PI / 2;
+            for (int i = 1; i < result.length; i++) {
+                result[resultOffset + i] = 0;
+            }
+        } else {
+            // atan2(0, 0) should already be handled above
+            return;
+        }
+        return;
+    }
+
     // compute r = sqrt(x^2 + y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
     if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+        // compute atan2(y, x) = 2 * atan(y / (r + x))
+        double[] sum = new double[getSize()];
+        add(tmp1, 0, x, xOffset, sum, 0);           // r + x
+        double[] division = new double[getSize()];
+        divide(y, yOffset, sum, 0, division, 0);    // y / (r + x)
+        double[] atanResult = new double[getSize()];
+        atan(division, 0, atanResult, 0);           // atan(y / (r + x))
+        for (int i = 0; i < atanResult.length; i++) {
+            result[resultOffset + i] = 2 * atanResult[i]; // 2 * atan(y / (r + x))
         }
-
     } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
+        // compute atan2(y, x) = +/-π - 2 * atan(y / (r - x))
+        double[] diff = new double[getSize()];
+        subtract(tmp1, 0, x, xOffset, diff, 0);     // r - x
+        double[] division = new double[getSize()];
+        divide(y, yOffset, diff, 0, division, 0);   // y / (r - x)
+        double[] atanResult = new double[getSize()];
+        atan(division, 0, atanResult, 0);           // atan(y / (r - x))
         result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+                ((y[yOffset] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * atanResult[0];
+        for (int i = 1; i < atanResult.length; i++) {
+            result[resultOffset + i] = -2 * atanResult[i];
         }
-
     }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
