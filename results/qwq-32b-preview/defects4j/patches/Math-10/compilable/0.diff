diff --git a/tmp/fae43b53-5e35-47c1-8c0a-dbac15749fb4_buggy.java b/tmp/b14685fa-129f-4e13-8aeb-64ebcce6c060_fixed.java
index d27c40c..4094123 100644
--- a/tmp/fae43b53-5e35-47c1-8c0a-dbac15749fb4_buggy.java
+++ b/tmp/b14685fa-129f-4e13-8aeb-64ebcce6c060_fixed.java
@@ -1,49 +1,71 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
+    // Check for special cases where x and y are zero
+    if (x[xOffset] == 0 && y[yOffset] == 0) {
+        // Handle (0, 0) cases based on the signs of y and x
+        if (Double.compare(y[yOffset], 0) >= 0 && Double.compare(x[xOffset], 0) > 0) {
+            result[resultOffset] = 0.0;
+        } else if (Double.compare(y[yOffset], 0) >= 0 && Double.compare(x[xOffset], 0) < 0) {
+            result[resultOffset] = Math.PI;
+        } else if (Double.compare(y[yOffset], 0) < 0 && Double.compare(x[xOffset], 0) > 0) {
+            result[resultOffset] = -0.0;
+        } else if (Double.compare(y[yOffset], 0) < 0 && Double.compare(x[xOffset], 0) < 0) {
+            result[resultOffset] = -Math.PI;
+        }
+        // Set higher order derivatives to zero
+        for (int i = 1; i < result.length; ++i) {
+            result[resultOffset + i] = 0.0;
+        }
+        return;
+    }
+
     // compute r = sqrt(x^2 + y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
     if (x[xOffset] >= 0) {
 
         // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+        double[] tmpSum = new double[getSize()];
+        add(tmp1, 0, x, xOffset, tmpSum, 0);        // r + x
+        double[] tmpDiv = new double[getSize()];
+        divide(y, yOffset, tmpSum, 0, tmpDiv, 0);   // y /(r + x)
+        double[] tmpAtan = new double[getSize()];
+        atan(tmpDiv, 0, tmpAtan, 0);                // atan(y / (r + x))
+        for (int i = 0; i < tmpAtan.length; ++i) {
+            result[resultOffset + i] = 2 * tmpAtan[i]; // 2 * atan(y / (r + x))
         }
 
     } else {
 
         // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
+        double[] tmpDiff = new double[getSize()];
+        subtract(tmp1, 0, x, xOffset, tmpDiff, 0);  // r - x
+        double[] tmpDiv = new double[getSize()];
+        divide(y, yOffset, tmpDiff, 0, tmpDiv, 0);  // y /(r - x)
+        double[] tmpAtan = new double[getSize()];
+        atan(tmpDiv, 0, tmpAtan, 0);                // atan(y / (r - x))
         result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+                ((tmpAtan[0] <= 0) ? -Math.PI : Math.PI) - 2 * tmpAtan[0]; // +/-pi - 2 * atan(y / (r - x))
+        for (int i = 1; i < tmpAtan.length; ++i) {
+            result[resultOffset + i] = -2 * tmpAtan[i]; // +/-pi - 2 * atan(y / (r - x))
         }
 
     }
 
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+    // Ensure the sign of zero is preserved
+    if (y[yOffset] == 0 && x[xOffset] > 0) {
+        result[resultOffset] = Math.copySign(0.0, y[yOffset]);
+    } else if (x[xOffset] == 0 && y[yOffset] > 0) {
+        result[resultOffset] = Math.PI / 2;
+    } else if (x[xOffset] == 0 && y[yOffset] < 0) {
+        result[resultOffset] = -Math.PI / 2;
+    }
 
 }
\ No newline at end of file
