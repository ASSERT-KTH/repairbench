diff --git a/tmp/b63c5958-8736-4c3f-858a-7b530ae13bb2_buggy.java b/tmp/4734b68e-290b-477f-8560-cf80cbf7e0d8_fixed.java
index 01967cc..253878c 100644
--- a/tmp/b63c5958-8736-4c3f-858a-7b530ae13bb2_buggy.java
+++ b/tmp/4734b68e-290b-477f-8560-cf80cbf7e0d8_fixed.java
@@ -1,35 +1,42 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
-        public boolean useForType(JavaType t)
-        {
+public boolean useForType(JavaType t) {
     switch (_appliesFor) {
         case NON_CONCRETE_AND_ARRAYS:
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
             // fall through
         case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
+            // Check if the type is one of the simple types
+            if (isSimpleType(t)) {
+                return false;
+            }
             return (t.getRawClass() == Object.class)
                     || (!t.isConcrete()
                     // [databind#88] Should not apply to JSON tree models:
                     || TreeNode.class.isAssignableFrom(t.getRawClass()));
 
         case NON_FINAL:
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
             // [Issue#88] Should not apply to JSON tree models:
             return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
         default:
         //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
             return (t.getRawClass() == Object.class);
     }
 }
+
+private boolean isSimpleType(JavaType type) {
+    Class<?> rawClass = type.getRawClass();
+    return rawClass.isPrimitive()
+            || rawClass == String.class
+            || rawClass == Boolean.class
+            || rawClass == Integer.class
+            || rawClass == Double.class
+            || rawClass == Long.class
+            || rawClass == Float.class
+            || rawClass == Short.class
+            || rawClass == Character.class
+            || rawClass == Byte.class;
+}
\ No newline at end of file
