diff --git a/tmp/401db8df-6862-4b62-8e28-c33b1578971a_buggy.java b/tmp/849040f3-9bb0-4226-af78-1f482f9ee9c3_fixed.java
index 01967cc..d7bd9d6 100644
--- a/tmp/401db8df-6862-4b62-8e28-c33b1578971a_buggy.java
+++ b/tmp/849040f3-9bb0-4226-af78-1f482f9ee9c3_fixed.java
@@ -1,35 +1,25 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
 public boolean useForType(JavaType t)
 {
     switch (_appliesFor) {
         case NON_CONCRETE_AND_ARRAYS:
-                while (t.isArrayType()) {
+            if (t.isArrayType()) {
                 t = t.getContentType();
+                return useForType(t); // Recurse for content type
             }
-                // fall through
+            // fall through to OBJECT_AND_NON_CONCRETE handling
         case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
+            Class<?> rawClass = t.getRawClass();
+            return (rawClass == Object.class)
                     || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
-
+                    && !TreeNode.class.isAssignableFrom(rawClass));
         case NON_FINAL:
-                while (t.isArrayType()) {
+            if (t.isArrayType()) {
                 t = t.getContentType();
             }
-                // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+            rawClass = t.getRawClass();
+            return !t.isFinal() && !TreeNode.class.isAssignableFrom(rawClass);
         default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
+        case JAVA_LANG_OBJECT:
             return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
