diff --git a/tmp/7c275472-b39b-482d-8b76-982d9e4e2930_buggy.java b/tmp/b8be98ed-2362-419e-8909-d2e1f5bb2c3d_fixed.java
index 01967cc..b48adfc 100644
--- a/tmp/7c275472-b39b-482d-8b76-982d9e4e2930_buggy.java
+++ b/tmp/b8be98ed-2362-419e-8909-d2e1f5bb2c3d_fixed.java
@@ -1,35 +1,30 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
-        public boolean useForType(JavaType t)
-        {
+public boolean useForType(JavaType t) {
     switch (_appliesFor) {
         case NON_CONCRETE_AND_ARRAYS:
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
             // fall through
         case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+            // Check for natural types and TreeNode subclasses
+            Class<?> rawClass = t.getRawClass();
+            if (rawClass == String.class || rawClass == Boolean.class ||
+                rawClass == Integer.class || rawClass == Double.class ||
+                TreeNode.class.isAssignableFrom(rawClass)) {
+                return false;
+            }
+            return (rawClass == Object.class) || !t.isConcrete();
         
         case NON_FINAL:
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
-                // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+            // Exclude TreeNode subclasses and final classes
+            rawClass = t.getRawClass();
+            return !t.isFinal() && !TreeNode.class.isAssignableFrom(rawClass);
+        
         default:
         // case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
             return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
