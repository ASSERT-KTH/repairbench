diff --git a/tmp/c448d8dc-c3e2-427e-b33d-446e62572a60_buggy.java b/tmp/a7574df7-eecb-439f-b6cd-5496d5b64b59_fixed.java
index 01967cc..299a0aa 100644
--- a/tmp/c448d8dc-c3e2-427e-b33d-446e62572a60_buggy.java
+++ b/tmp/a7574df7-eecb-439f-b6cd-5496d5b64b59_fixed.java
@@ -1,35 +1,66 @@
 /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
+ * Determines if the default type handler should be used for the given type.
+ *
+ * Natural types (String, Boolean, Integer, Double) never use typing because
+ * they are concrete and final, and serializers/deserializers ignore any attempts
+ * to enforce typing.
+ *
+ * @param t the JavaType to check
+ * @return true if default typing should be used, false otherwise
  */
-        public boolean useForType(JavaType t)
-        {
+public boolean useForType(JavaType t) {
     switch (_appliesFor) {
         case NON_CONCRETE_AND_ARRAYS:
+            // Handle arrays by checking their content type
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
-                // fall through
+            // Fall through to OBJECT_AND_NON_CONCRETE case
         case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+            // Apply typing for Object.class or non-concrete types,
+            // excluding TreeNode and natural types
+            Class<?> rawClass = t.getRawClass();
+            if (rawClass == Object.class || !t.isConcrete()) {
+                // Exclude TreeNode and natural types
+                if (!TreeNode.class.isAssignableFrom(rawClass) && !isNaturalType(rawClass)) {
+                    return true;
+                }
+            }
+            return false;
 
         case NON_FINAL:
+            // Handle non-final types, excluding TreeNode and natural types
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
-                // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+            Class<?> contentClass = t.getRawClass();
+            if (!t.isFinal() && !TreeNode.class.isAssignableFrom(contentClass) && !isNaturalType(contentClass)) {
+                return true;
+            }
+            return false;
+
+        case JAVA_LANG_OBJECT:
+            // Only apply for Object.class
+            return t.getRawClass() == Object.class;
+
         default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
-                return (t.getRawClass() == Object.class);
+            throw new IllegalArgumentException("Unknown appliesFor setting: " + _appliesFor);
     }
 }
+
+/**
+ * Checks if the given class is a natural type that should never use typing.
+ *
+ * @param cls the class to check
+ * @return true if it's a natural type, false otherwise
+ */
+private boolean isNaturalType(Class<?> cls) {
+    return cls == String.class ||
+           cls == Boolean.class ||
+           cls == Integer.class ||
+           cls == Double.class ||
+           cls == String[].class ||
+           cls == Boolean[].class ||
+           cls == Integer[].class ||
+           cls == Double[].class;
+}
\ No newline at end of file
