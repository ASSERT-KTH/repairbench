diff --git a/tmp/1e2995d5-d3e1-40ee-a4a6-2a8efed471b6_buggy.java b/tmp/a0c7d7e0-f815-4a9f-81e3-531a71f91384_fixed.java
index 65c0e7b..3c3369f 100644
--- a/tmp/1e2995d5-d3e1-40ee-a4a6-2a8efed471b6_buggy.java
+++ b/tmp/a0c7d7e0-f815-4a9f-81e3-531a71f91384_fixed.java
@@ -1,127 +1,143 @@
-    /** {@inheritDoc} */
-    protected final double doSolve() {
-        // Get initial solution
-        double x0 = getMin();
-        double x1 = getMax();
-        double f0 = computeObjectiveValue(x0);
-        double f1 = computeObjectiveValue(x1);
+   int evaluations = 0;
+   int maxEvaluations = getMaxEvaluations();
+   ```
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
-        if (f0 == 0.0) {
-            return x0;
-        }
-        if (f1 == 0.0) {
-            return x1;
-        }
+2. **Initial evaluations:**
 
-        // Verify bracketing of initial solution.
-        verifyBracketing(x0, x1);
-
-        // Get accuracies.
-        final double ftol = getFunctionValueAccuracy();
-        final double atol = getAbsoluteAccuracy();
-        final double rtol = getRelativeAccuracy();
-
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
-        boolean inverted = false;
-
-        // Keep finding better approximations.
-        while (true) {
-            // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
-            final double fx = computeObjectiveValue(x);
-
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
-            if (fx == 0.0) {
-                return x;
+   ```java
+   evaluations++;
+   if (evaluations > maxEvaluations) {
+       throw new TooManyEvaluationsException(maxEvaluations);
    }
+   double f0 = computeObjectiveValue(x0);
 
-            // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
-            } else {
-                switch (method) {
-                case ILLINOIS:
-                    f0 *= 0.5;
-                    break;
-                case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
-                    break;
-                case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
-                    break;
-                default:
-                    // Should never happen.
-                    throw new MathInternalError();
+   evaluations++;
+   if (evaluations > maxEvaluations) {
+       throw new TooManyEvaluationsException(maxEvaluations);
    }
+   double f1 = computeObjectiveValue(x1);
+   ```
+
+3. **Inside the loop:**
+
+   - Before computing `fx`:
+
+     ```java
+     evaluations++;
+     if (evaluations > maxEvaluations) {
+         throw new TooManyEvaluationsException(maxEvaluations);
      }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
-            f1 = fx;
-
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
-                case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
-                case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
-                case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
-                default:
-                    throw new MathInternalError();
-                }
+     double fx = computeObjectiveValue(x);
+     ```
+
+   - If `computeObjectiveValue(x0)` is called inside the loop:
+
+     ```java
+     evaluations++;
+     if (evaluations > maxEvaluations) {
+         throw new TooManyEvaluationsException(maxEvaluations);
      }
+     f0 = computeObjectiveValue(x0);
+     ```
+
+This ensures that each function evaluation is counted and checked against the maximum allowed evaluations.
+
+I need to make sure that `getMaxEvaluations()` is a method that returns the maximum number of evaluations allowed. If such a method doesn't exist, I might need to set it through the solver's constructor or a setter method.
+
+Assuming that `getMaxEvaluations()` exists, I can proceed with this approach.
+
+Another consideration is that the exception should probably include information about the maximum number of evaluations allowed. So, the constructor for `TooManyEvaluationsException` might take the maximum evaluations as a parameter.
+
+Given that, I can proceed to implement this in the code.
+
+Let me also consider if there is a more efficient way to handle this, perhaps by using a try-finally block to ensure that the counter is always incremented, but in Java, exceptions don't affect the increment operation as long as it's placed before the function call.
+
+Wait, actually, if the exception is thrown after incrementing the counter but before the function call, it would still be correct because the function wasn't evaluated. So, it's better to increment the counter before checking and before the function call.
+
+Let me adjust the plan:
+
+1. **Initialize the evaluation counter:**
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    return inverted ? x1 : x0;
-                case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
-                case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
-                case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
-                default:
-                    throw new MathInternalError();
+   ```java
+   int evaluations = 0;
+   int maxEvaluations = getMaxEvaluations();
+   ```
+
+2. **Initial evaluations:**
+
+   ```java
+   evaluations++;
+   if (evaluations > maxEvaluations) {
+       throw new TooManyEvaluationsException(maxEvaluations);
    }
+   double f0 = computeObjectiveValue(x0);
+
+   evaluations++;
+   if (evaluations > maxEvaluations) {
+       throw new TooManyEvaluationsException(maxEvaluations);
    }
+   double f1 = computeObjectiveValue(x1);
+   ```
+
+3. **Inside the loop:**
+
+   - Before computing `fx`:
+
+     ```java
+     evaluations++;
+     if (evaluations > maxEvaluations) {
+         throw new TooManyEvaluationsException(maxEvaluations);
      }
+     double fx = computeObjectiveValue(x);
+     ```
+
+   - If `computeObjectiveValue(x0)` is called inside the loop:
+
+     ```java
+     evaluations++;
+     if (evaluations > maxEvaluations) {
+         throw new TooManyEvaluationsException(maxEvaluations);
      }
+     f0 = computeObjectiveValue(x0);
+     ```
+
+This seems straightforward. Now, I need to make sure that `getMaxEvaluations()` is a valid method. If it's not, I need to define it or find another way to get the maximum evaluations allowed.
+
+Assuming that `getMaxEvaluations()` is part of the solver's configuration, I can proceed.
+
+Also, I need to ensure that `TooManyEvaluationsException` is imported correctly.
+
+Given all that, I can proceed to implement these changes in the `doSolve` method.
+
+Let me think about potential edge cases:
+
+- If `maxEvaluations` is set to a very low number, say 2, then only the initial evaluations would be allowed, and the loop wouldn't even start.
+- If `maxEvaluations` is set to 0, perhaps it should throw the exception immediately, but it's unlikely that someone would set it to 0. Maybe the minimum allowed is 1.
+- If `maxEvaluations` is not set, perhaps it has a default value.
+
+I need to make sure that `getMaxEvaluations()` returns a sensible value. If it's not set, maybe it returns a large number or throws an exception. But for the purpose of this fix, I'll assume that `getMaxEvaluations()` returns a valid positive integer.
+
+Another consideration is that if the root is found in the initial evaluations, the loop doesn't run, and the exception isn't relevant.
+
+Also, if the loop exits due to meeting the accuracy conditions, that's fine, and the exception shouldn't be thrown.
+
+The key is to ensure that if the loop runs too many times, exceeding the maximum evaluations, the exception is thrown instead of continuing indefinitely or without limit.
+
+Alright, with this plan in mind, I can proceed to implement the changes in the `doSolve` method.
+
+## Final Solution
+To fix the provided buggy code, we need to ensure that the `doSolve` method throws a `TooManyEvaluationsException` when the number of function evaluations exceeds the maximum allowed evaluations. This will prevent infinite loops or excessive computations and align the behavior with the expected test results.
+
+### Approach
+1. **Initialize Evaluation Counter:** 
+   - Introduce a counter to track the number of function evaluations.
+   - Retrieve the maximum number of evaluations allowed from the solver's configuration.
+
+2. **Check Evaluations Before Each Function Call:**
+   - Increment the evaluation counter before each call to `computeObjectiveValue`.
+   - Check if the evaluation count exceeds the maximum allowed evaluations. If it does, throw a `TooManyEvaluationsException`.
+
+3. **Apply This Logic in Initial Evaluations and Loop:**
+   - Apply the above steps for initial evaluations and within the iterative solution-finding loop.
+
+### Solution Code
