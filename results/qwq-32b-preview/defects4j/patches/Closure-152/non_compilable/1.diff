diff --git a/tmp/529f3b48-0bb0-4bc1-bb04-125602a42afe_buggy.java b/tmp/4e44dc20-e1fd-49f4-99a8-1cc91fbb809a_fixed.java
index 58a1651..f66f0d0 100644
--- a/tmp/529f3b48-0bb0-4bc1-bb04-125602a42afe_buggy.java
+++ b/tmp/4e44dc20-e1fd-49f4-99a8-1cc91fbb809a_fixed.java
@@ -1,32 +1 @@
-  @Override
-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
-    setResolvedTypeInternal(this);
-
-    call = (ArrowType) safeResolve(call, t, scope);
-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
-
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
 typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
\ No newline at end of file
-
-    boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
-    for (ObjectType iface : implementedInterfaces) {
-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
-      resolvedInterfaces.add(resolvedIface);
-      changed |= (resolvedIface != iface);
-    }
-    if (changed) {
-      implementedInterfaces = resolvedInterfaces.build();
-    }
-
-    if (subTypes != null) {
-      for (int i = 0; i < subTypes.size(); i++) {
-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
-      }
-    }
-
-    return super.resolveInternal(t, scope);
-  }
