diff --git a/tmp/b802bbc1-ccf1-4310-9b0b-09e861be37ab_buggy.java b/tmp/5151384e-044f-413d-a1b9-62d5caaa6e56_fixed.java
index 58a1651..83d8b87 100644
--- a/tmp/b802bbc1-ccf1-4310-9b0b-09e861be37ab_buggy.java
+++ b/tmp/5151384e-044f-413d-a1b9-62d5caaa6e56_fixed.java
@@ -1,32 +1,52 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis and handle UnionType appropriately
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis.isUnionType()) {
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        List<JSType> objectTypes = new ArrayList<>();
+        for (JSType component : unionType) {
+            if (component.isObjectType()) {
+                objectTypes.add(component);
+            } else {
+                t.report(typeOfThis.getSourceName(), typeOfThis.getLineNumber(),
+                        "Expected object type, but found: " + component.toString());
+            }
+        }
+        if (!objectTypes.isEmpty()) {
+            typeOfThis = unionType.createAnonymoussubtype(objectTypes);
+        } else {
+            // Handle the case where there are no object types in the union
+            typeOfThis = theLanguageRegistry.getNativeTypeRegistry().getUnknownType();
+            t.report(typeOfThis.getSourceName(), typeOfThis.getLineNumber(),
+                    "No object types found in union for @this type");
+        }
+    } else {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
             ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
