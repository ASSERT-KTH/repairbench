diff --git a/tmp/87a89581-0f40-4b52-a030-066851d8113c_buggy.java b/tmp/45968cbb-59c8-4c60-95ba-a1a193022487_fixed.java
index 58a1651..1cf7798 100644
--- a/tmp/87a89581-0f40-4b52-a030-066851d8113c_buggy.java
+++ b/tmp/45968cbb-59c8-4c60-95ba-a1a193022487_fixed.java
@@ -1,32 +1,22 @@
-  @Override
-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
-    setResolvedTypeInternal(this);
+JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
 
-    call = (ArrowType) safeResolve(call, t, scope);
-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
-
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
-
-    boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
-    for (ObjectType iface : implementedInterfaces) {
-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
-      resolvedInterfaces.add(resolvedIface);
-      changed |= (resolvedIface != iface);
+if (resolvedTypeOfThis.isUnionType()) {
+  UnionType union = (UnionType) resolvedTypeOfThis;
+  List<JSType> objectTypes = new ArrayList<>();
+  for (JSType.componentType : union.getTypes()) {
+    if (componentType.isObject()) {
+      objectTypes.add(componentType);
+    } else {
+      // Handle non-object types, perhaps report an error
+      t.report(typeOfThis.getSourceNode(), "Non-object type in union for @this");
     }
-    if (changed) {
-      implementedInterfaces = resolvedInterfaces.build();
   }
-
-    if (subTypes != null) {
-      for (int i = 0; i < subTypes.size(); i++) {
-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+  if (!objectTypes.isEmpty()) {
+    typeOfThis = union.createWithTypes(objectTypes);
+  } else {
+    // All component types were not object types, handle this case
+    typeOfThis = someDefaultObjectType; // Need to decide what to set here
   }
-    }
-
-    return super.resolveInternal(t, scope);
+} else {
+  typeOfThis = (ObjectType) resolvedTypeOfThis;
 }
\ No newline at end of file
