diff --git a/tmp/b2701b54-b7a4-4c74-ac4f-f4e53f5c49be_buggy.java b/tmp/04e05863-80cf-40ee-874f-565ea81a0738_fixed.java
index 58a1651..59cb05f 100644
--- a/tmp/b2701b54-b7a4-4c74-ac4f-f4e53f5c49be_buggy.java
+++ b/tmp/04e05863-80cf-40ee-874f-565ea81a0738_fixed.java
@@ -1,32 +1,44 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis resolution correctly if it's a UnionType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis.isUnionType()) {
+        // If it's a UnionType, ensure all constituents are ObjectTypes
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        List<JSType> constituents = unionType.getConstituents();
+        for (JSType constituent : constituents) {
+            if (!constituent.isObjectType()) {
+                t.report(typeOfThis, ErrorManager.INVALID_THIS_TYPE, constituent.toString());
+            }
+        }
+        typeOfThis = resolvedTypeOfThis;
+    } else {
+        // Directly cast to ObjectType if it's not a UnionType
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
