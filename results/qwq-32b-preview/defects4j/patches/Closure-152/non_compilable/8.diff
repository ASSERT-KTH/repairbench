diff --git a/tmp/3f081af6-5d03-4fec-80b9-bb95ed39ab6e_buggy.java b/tmp/377e2bf2-2ad1-4ade-8780-7d4b53486c17_fixed.java
index 58a1651..09b0354 100644
--- a/tmp/3f081af6-5d03-4fec-80b9-bb95ed39ab6e_buggy.java
+++ b/tmp/377e2bf2-2ad1-4ade-8780-7d4b53486c17_fixed.java
@@ -1,32 +1,46 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis and handle if it's a UnionType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis.isUnionType()) {
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        for (JSType member : unionType) {
+            if (!(member instanceof ObjectType)) {
+                t.report(typeOfThis.getSourceElement(), ERROR_THIS_MUST_BE_OBJECT,
+                        "@this type of a function must be an object\nActual type: " + resolvedTypeOfThis);
+                // Handle error case, possibly by assigning a default type or propagating the error
+                typeOfThis = JSType.UNKNOWN_TYPE;
+                return this;
+            }
+        }
+        // If all members are ObjectTypes, you might want to keep it as a UnionType or choose a representative type
+        typeOfThis = unionType;
+    } else {
+        // Safely cast to ObjectType
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    }
 
     boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
