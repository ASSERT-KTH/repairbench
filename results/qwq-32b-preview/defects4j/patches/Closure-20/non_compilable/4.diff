diff --git a/tmp/047ee16b-6536-4439-8de3-0ed4b0c06037_buggy.java b/tmp/eb04642e-9ac6-474f-b0e9-5e07cc250026_fixed.java
index d4e6d48..b488e8e 100644
--- a/tmp/047ee16b-6536-4439-8de3-0ed4b0c06037_buggy.java
+++ b/tmp/eb04642e-9ac6-474f-b0e9-5e07cc250026_fixed.java
@@ -1,23 +1,35 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
+    if (callTarget != null && callTarget.isName() && callTarget.getString().equals("String")) {
         // Fold String(a) to '' + (a) on immutable literals,
         // which allows further optimizations
         //
         // We can't do this in the general case, because String(a) has
         // slightly different semantics than '' + (a). See
         // http://code.google.com/p/closure-compiler/issues/detail?id=759
         Node value = callTarget.getNext();
-      if (value != null) {
+        if (value != null && isImmutableLiteral(value)) {
             Node addition = IR.add(
                     IR.string("").srcref(callTarget),
                     value.detachFromParent());
             n.getParent().replaceChild(n, addition);
             reportCodeChange();
             return addition;
         }
     }
     return n;
 }
+
+private boolean isImmutableLiteral(Node node) {
+    switch (node.getToken()) {
+        case NUMBER:
+        case STRING:
+        case NULL:
+        case UNDEFINED:
+        case BOOLEAN:
+            return true;
+        default:
+            return false;
+    }
+}
\ No newline at end of file
