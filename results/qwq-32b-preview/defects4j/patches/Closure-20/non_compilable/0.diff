diff --git a/tmp/49fb7e17-0033-46be-a589-0aec1c9776a4_buggy.java b/tmp/40c2c885-1b47-4b7f-a683-ef7eaf2be4cc_fixed.java
index d4e6d48..c6d33e8 100644
--- a/tmp/49fb7e17-0033-46be-a589-0aec1c9776a4_buggy.java
+++ b/tmp/40c2c885-1b47-4b7f-a683-ef7eaf2be4cc_fixed.java
@@ -1,23 +1,23 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
+  if (callTarget != null && callTarget.isName() && callTarget.getString().equals("String")) {
     // Fold String(a) to '' + (a) on immutable literals,
     // which allows further optimizations
     //
     // We can't do this in the general case, because String(a) has
     // slightly different semantics than '' + (a). See
     // http://code.google.com/p/closure-compiler/issues/detail?id=759
     Node value = callTarget.getNext();
-      if (value != null) {
+    if (value != null && value.isLiteral()) {
+      // Only fold if the argument is a literal (immutable)
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
           value.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
