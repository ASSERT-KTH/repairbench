diff --git a/tmp/fc96e411-ae56-4d0f-baa7-f5c461d1dc0f_buggy.java b/tmp/5cd577d8-7a40-47e6-8af9-6d1adfee6ce5_fixed.java
index d4e6d48..41652b2 100644
--- a/tmp/fc96e411-ae56-4d0f-baa7-f5c461d1dc0f_buggy.java
+++ b/tmp/5cd577d8-7a40-47e6-8af9-6d1adfee6ce5_fixed.java
@@ -1,23 +1,21 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+    if (callTarget != null && callTarget.isName() && callTarget.getString().equals("String")) {
+        // Ensure there's exactly one argument
         Node value = callTarget.getNext();
-      if (value != null) {
+        if (value != null && value.getNext() == null) {
+            // Check if the argument is a simple literal (number or string)
+            if (value.isStringLit() || value.isNumberLit()) {
+                // Fold String(a) to '' + (a)
                 Node addition = IR.add(
                         IR.string("").srcref(callTarget),
                         value.detachFromParent());
                 n.getParent().replaceChild(n, addition);
                 reportCodeChange();
                 return addition;
             }
         }
+    }
     return n;
 }
\ No newline at end of file
