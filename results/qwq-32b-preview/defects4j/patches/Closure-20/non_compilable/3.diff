diff --git a/tmp/2a3ab81f-4ed7-4685-ae6c-065c229a431f_buggy.java b/tmp/40ccc7f8-ce76-4969-a40d-eea2a161a580_fixed.java
index d4e6d48..c2e093c 100644
--- a/tmp/2a3ab81f-4ed7-4685-ae6c-065c229a431f_buggy.java
+++ b/tmp/40ccc7f8-ce76-4969-a40d-eea2a161a580_fixed.java
@@ -1,23 +1,36 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
+    if (callTarget != null && callTarget.isName() && callTarget.getString().equals("String")) {
         // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
+        // which allows further optimizations.
         //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
+        // We can't do this in the general case, because String(a)
+        // has slightly different semantics than '' + (a). See
         // http://code.google.com/p/closure-compiler/issues/detail?id=759
+        
         Node value = callTarget.getNext();
-      if (value != null) {
+        if (value != null && value.getNext() == null) {
+            // Ensure there is exactly one argument.
+            // Check if the argument is an immutable literal.
+            switch (value.getToken()) {
+                case STRING:
+                case NUMBER:
+                case TRUE:
+                case FALSE:
+                case NULL:
+                case VOID:
                     Node addition = IR.add(
                         IR.string("").srcref(callTarget),
                         value.detachFromParent());
                     n.getParent().replaceChild(n, addition);
                     reportCodeChange();
                     return addition;
+                default:
+                    // Do not transform if the argument is not an immutable literal.
+                    return n;
+            }
         }
     }
     return n;
 }
\ No newline at end of file
