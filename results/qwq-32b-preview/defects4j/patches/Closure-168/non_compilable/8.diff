diff --git a/tmp/8d6366ef-993c-4297-bd2a-ed1ce7034a7a_buggy.java b/tmp/7bd0202e-bf7a-41b5-8b49-affecc700d2b_fixed.java
index b12de99..154e865 100644
--- a/tmp/8d6366ef-993c-4297-bd2a-ed1ce7034a7a_buggy.java
+++ b/tmp/7bd0202e-bf7a-41b5-8b49-affecc700d2b_fixed.java
@@ -1,52 +1,66 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
     // The first-order function analyzer looks at two types of variables:
     //
     // 1) Local variables that are assigned in inner scopes ("escaped vars")
     //
     // 2) Local variables that are assigned more than once.
     //
     // We treat all global variables as escaped by default, so there's
     // no reason to do this extra computation for them.
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
       // Be careful of bleeding functions, which create variables
       // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
 
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
   } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
       NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
+  } else if (n.isFunction()) {
+    // Additionally, track function nodes to analyze their usage
+    // This can help in identifying if a function is returning or assigning
+    // functions that capture variables from outer scopes.
+    FunctionNode fn = (FunctionNode) n;
+    if (fn.isAnonymousFunctionExpression()) {
+      // Check if this function is being returned or assigned to a property
+      // which could cause it to escape the current scope.
+      if (parent.isReturn() || parent.isAssign()) {
+        // Record that this function escapes, which may require
+        // analyzing its usage of outer variables.
+        data.get(t.getScopeRoot()).recordEscapedFunction(fn);
+      }
+    }
   }
 }
\ No newline at end of file
