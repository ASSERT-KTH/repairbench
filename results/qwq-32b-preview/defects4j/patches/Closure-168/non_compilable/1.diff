diff --git a/tmp/9e82ea68-9f8e-417a-968a-798cae35e80d_buggy.java b/tmp/2a6041ad-18e8-49af-bcac-31887526010d_fixed.java
index b12de99..5b1bb67 100644
--- a/tmp/9e82ea68-9f8e-417a-968a-798cae35e80d_buggy.java
+++ b/tmp/2a6041ad-18e8-49af-bcac-31887526010d_fixed.java
@@ -1,52 +1,71 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
-      if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
+  int scopeDepth = t.getScopeDepth();
+  if (scopeDepth <= 2) {
+    // Skip global and top-level functions for this analysis
     return;
   }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+  if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
+        // Record the type of the assignment
+        Node rhs = NodeUtil.getAssignRightHandSide(n, parent);
+        if (rhs != null) {
+          Type type = t.getTypeOfNode(rhs);
+          data.get(ownerScope.getRootNode()).recordAssignedType(name, type);
+        }
       }
 
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
+  } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+        data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName());
+      }
+    }
+  } else if (n.isCall() && n.getFirstChild().isGetProp()) {
+    // Check if the call is to a method with known type signatures
+    Node receiver = n.getFirstChild().getFirstChild();
+    Node methodName = n.getFirstChild().getSecondChild();
+    if (receiver != null && methodName != null) {
+      Type receiverType = t.getTypeOfNode(receiver);
+      String methodNameStr = methodName.getString();
+      JSTypeInfo methodType = receiverType.getRestrictableType()
+          .getMemberType(methodNameStr);
+      if (methodType != null && methodType.isFunctionType()) {
+        FunctionType funcType = (FunctionType) methodType;
+        NodeList<Node> args = n.getChildren();
+        for (int i = 1, len = args.getLength(); i < len; i++) {
+          Node arg = args.get(i);
+          Type argType = t.getTypeOfNode(arg);
+          Type formalType = funcType.getParameterType(i - 1);
+          if (!formalType.isAssignableFrom(argType)) {
+            t.report(n, "actual parameter %d of %s does not match formal parameter\n" +
+                "found   : %s\n" +
+                "required: %s", i, methodNameStr, argType, formalType);
+          }
+        }
       }
     }
   }
 }
\ No newline at end of file
