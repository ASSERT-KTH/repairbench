diff --git a/tmp/2d35f564-ef03-416c-b319-a93b38d89fd0_buggy.java b/tmp/9ac6e9f1-2ab3-4d1a-86b3-b6512a9e0c2d_fixed.java
index b12de99..1fe23ac 100644
--- a/tmp/2d35f564-ef03-416c-b319-a93b38d89fd0_buggy.java
+++ b/tmp/9ac6e9f1-2ab3-4d1a-86b3-b6512a9e0c2d_fixed.java
@@ -1,52 +1,39 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  Scope scope = t.getScope();
+
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
-      if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
-        return;
-      }
+  // Remove the arbitrary scope depth check and handle all scopes appropriately
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+  if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
-        Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
+        // Record that this local variable is assigned in this scope
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
-          }
-
-          if (scope != ownerScope && ownerScope.isLocal()) {
+        // If the assignment is in an inner scope, mark the variable as escaped
+        if (scope.getParent() != ownerScope) {
           data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
         }
       }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
+    }
+  } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
-        Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+        data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
   }
 }
\ No newline at end of file
