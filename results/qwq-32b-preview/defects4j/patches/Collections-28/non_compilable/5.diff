diff --git a/tmp/385b7024-faf2-4161-855f-d4fdb0c7235b_buggy.java b/tmp/39f400d9-2742-40d7-ba6e-7764f41765e4_fixed.java
index e69de29..1f3e089 100644
--- a/tmp/385b7024-faf2-4161-855f-d4fdb0c7235b_buggy.java
+++ b/tmp/39f400d9-2742-40d7-ba6e-7764f41765e4_fixed.java
@@ -0,0 +1,119 @@
+public class PatriciaTrie<K, V> implements Trie<K, V> {
+    // other methods and fields...
+
+    @Override
+    public SortedMap<K, V> prefixMap(final K prefixKey) {
+        if (prefixKey == null) {
+            throw new NullPointerException("Prefix key must not be null");
+        }
+        @SuppressWarnings("unchecked")
+        K prefix = (K) prefixKey;
+        // Find the starting and ending keys for the prefix
+        K start = prefix;
+        K end = (K) ((NavigableMap<String, V>) this).higherKey(prefix);
+        if (end == null || !end.startsWith((String) prefix)) {
+            end = (K) ((NavigableMap<String, V>) this).navigableKeySet().higher(prefix);
+            if (end != null && end.startsWith((String) prefix)) {
+                end = (K) ((NavigableMap<String, V>) this).navigableKeySet().higher(end);
+            } else {
+                end = (K) ((NavigableMap<String, V>) this).navigableKeySet().higher(prefix);
+            }
+        }
+        // Create a submap with the appropriate range
+        NavigableMap<K, V> subMap = (NavigableMap<K, V>) ((NavigableMap<String, V>) this).subMap(start, true, end, false);
+        return new SortedMap<K, V>() {
+            @Override
+            public K lowerKey(K key) {
+                return subMap.lowerKey(key);
+            }
+
+            @Override
+            public K floorKey(K key) {
+                return subMap.floorKey(key);
+            }
+
+            @Override
+            public K ceilingKey(K key) {
+                return subMap.ceilingKey(key);
+            }
+
+            @Override
+            public K higherKey(K key) {
+                return subMap.higherKey(key);
+            }
+
+            @Override
+            public K firstKey() {
+                return subMap.firstKey();
+            }
+
+            @Override
+            public K lastKey() {
+                return subMap.lastKey();
+            }
+
+            @Override
+            public V get(Object key) {
+                return subMap.get(key);
+            }
+
+            @Override
+            public V put(K key, V value) {
+                if (!((String) key).startsWith((String) prefix)) {
+                    throw new IllegalArgumentException("Key does not have the required prefix");
+                }
+                return subMap.put(key, value);
+            }
+
+            @Override
+            public V remove(Object key) {
+                if (!((String) key).startsWith((String) prefix)) {
+                    throw new IllegalArgumentException("Key does not have the required prefix");
+                }
+                return subMap.remove(key);
+            }
+
+            @Override
+            public void putAll(Map<? extends K, ? extends V> m) {
+                for (Entry<? extends K, ? extends V> entry : m.entrySet()) {
+                    put(entry.getKey(), entry.getValue());
+                }
+            }
+
+            @Override
+            public void clear() {
+                subMap.keySet().removeIf(k -> ((String) k).startsWith((String) prefix));
+            }
+
+            @Override
+            public int size() {
+                return subMap.size();
+            }
+
+            @Override
+            public boolean isEmpty() {
+                return subMap.isEmpty();
+            }
+
+            @Override
+            public boolean containsKey(Object key) {
+                return subMap.containsKey(key);
+            }
+
+            @Override
+            public Set<Entry<K, V>> entrySet() {
+                return subMap.entrySet();
+            }
+
+            @Override
+            public Collection<V> values() {
+                return subMap.values();
+            }
+
+            @Override
+            public Set<K> keySet() {
+                return subMap.keySet();
+            }
+        };
+    }
+}
\ No newline at end of file
