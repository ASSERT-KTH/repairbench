diff --git a/tmp/2db9c29d-3ff6-4f11-9c4a-c3edad82f758_buggy.java b/tmp/33dcf2a6-56af-4c75-87ad-dcb561254368_fixed.java
index 3b9a3c0..0f4c477 100644
--- a/tmp/2db9c29d-3ff6-4f11-9c4a-c3edad82f758_buggy.java
+++ b/tmp/33dcf2a6-56af-4c75-87ad-dcb561254368_fixed.java
@@ -1,71 +1,45 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
+    // Parse octal digits until a non-octal digit is encountered
+    for (int i = start; i < end; i++) {
+        byte currentByte = buffer[i];
+        if (currentByte >= '0' && currentByte <= '7') {
+            result = (result << 3) + (currentByte - '0');
         } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+            // Stop parsing upon encountering a non-octal digit
+            end = i;
+            break;
         }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
     }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+    // Ensure there is at least one trailing space or NUL
+    if (end < offset + length) {
+        byte trailer = buffer[end];
+        if (trailer != 0 && trailer != ' ') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, end, trailer));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
