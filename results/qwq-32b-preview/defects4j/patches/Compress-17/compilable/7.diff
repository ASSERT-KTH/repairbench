diff --git a/tmp/5a54d7cb-93a2-4bcb-8218-d3278eca6419_buggy.java b/tmp/7e32fd35-5b1f-4444-a459-c58ab5980fd7_fixed.java
index 3b9a3c0..4998d1f 100644
--- a/tmp/5a54d7cb-93a2-4bcb-8218-d3278eca6419_buggy.java
+++ b/tmp/7e32fd35-5b1f-4444-a459-c58ab5980fd7_fixed.java
@@ -1,71 +1,56 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
     // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+    int pos = end - 1;
+    byte trailer = buffer[pos];
     if (trailer == 0 || trailer == ' ') {
-            end--;
+        pos--;
     } else {
         throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+                exceptionMessage(buffer, offset, length, pos, trailer));
     }
+
     // May have additional NULs or spaces
-        trailer = buffer[end - 1];
+    while (pos > start) {
+        trailer = buffer[pos];
         if (trailer == 0 || trailer == ' ') {
-            end--;
+            pos--;
+        } else {
+            break;
         }
+    }
+
+    // Set end to the position after the last valid octal digit
+    end = pos + 1;
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+    for (int i = start; i < end; i++) {
+        final byte currentByte = buffer[i];
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
