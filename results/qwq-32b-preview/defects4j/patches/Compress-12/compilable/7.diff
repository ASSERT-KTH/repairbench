diff --git a/tmp/5704d508-ad4b-4a58-ae97-81ea214263ac_buggy.java b/tmp/0e5e2b74-2c01-43e4-ae0c-77ce1032f5d9_fixed.java
index b5a206b..07ca227 100644
--- a/tmp/5704d508-ad4b-4a58-ae97-81ea214263ac_buggy.java
+++ b/tmp/0e5e2b74-2c01-43e4-ae0c-77ce1032f5d9_fixed.java
@@ -1,80 +1,72 @@
-    /**
-     * Get the next entry in this tar archive. This will skip
-     * over any remaining data in the current entry, if there
-     * is one, and place the input stream at the header of the
-     * next entry, and read the header and instantiate a new
-     * TarEntry from the header bytes and return that entry.
-     * If there are no more entries in the archive, null will
-     * be returned to indicate that the end of the archive has
-     * been reached.
-     *
-     * @return The next TarEntry in the archive, or null.
-     * @throws IOException on error
-     */
 public TarArchiveEntry getNextTarEntry() throws IOException {
     if (hasHitEOF) {
         return null;
     }
 
     if (currEntry != null) {
         long numToSkip = entrySize - entryOffset;
 
         while (numToSkip > 0) {
             long skipped = skip(numToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip current tar entry");
             }
             numToSkip -= skipped;
         }
 
         readBuf = null;
     }
 
     byte[] headerBuf = getRecord();
 
     if (hasHitEOF) {
         currEntry = null;
         return null;
     }
 
     currEntry = new TarArchiveEntry(headerBuf);
     entryOffset = 0;
     entrySize = currEntry.getSize();
 
     if (currEntry.isGNULongNameEntry()) {
-            // read in the name
-            StringBuffer longName = new StringBuffer();
+        // Read in the name
+        StringBuilder longName = new StringBuilder();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
-            int length = 0;
-            while ((length = read(buf)) >= 0) {
-                longName.append(new String(buf, 0, length));
+        int length;
+        while ((length = read(buf)) > 0) {
+            for (int i = 0; i < length; i++) {
+                if (buf[i] == 0) {
+                    // Null terminator found, break out of the loop
+                    break;
+                }
+                longName.append((char) buf[i]);
+            }
+            if (longName.toString().endsWith("\0")) {
+                // Remove the trailing null terminator
+                longName.setLength(longName.length() - 1);
+                break;
+            }
         }
         getNextEntry();
         if (currEntry == null) {
-                // Bugzilla: 40334
             // Malformed tar file - long entry name not followed by entry
             return null;
         }
-            // remove trailing null terminator
-            if (longName.length() > 0
-                && longName.charAt(longName.length() - 1) == 0) {
-                longName.deleteCharAt(longName.length() - 1);
-            }
         currEntry.setName(longName.toString());
     }
 
-        if (currEntry.isPaxHeader()){ // Process Pax headers
+    if (currEntry.isPaxHeader()) {
         paxHeaders();
     }
 
-        if (currEntry.isGNUSparse()){ // Process sparse files
+    if (currEntry.isGNUSparse()) {
         readGNUSparse();
     }
 
     // If the size of the next element in the archive has changed
     // due to a new size being reported in the posix header
     // information, we update entrySize here so that it contains
     // the correct value.
     entrySize = currEntry.getSize();
     return currEntry;
 }
\ No newline at end of file
