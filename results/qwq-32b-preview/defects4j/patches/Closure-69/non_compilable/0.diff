diff --git a/tmp/75aac0fa-ea67-42b4-aa93-7201ac544623_buggy.java b/tmp/2f0b87ac-1386-4d5f-83f3-eb33cfe324df_fixed.java
index bf9c086..0db5a27 100644
--- a/tmp/75aac0fa-ea67-42b4-aa93-7201ac544623_buggy.java
+++ b/tmp/2f0b87ac-1386-4d5f-83f3-eb33cfe324df_fixed.java
@@ -1,54 +1,64 @@
 /**
  * Visits a CALL node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  */
 private void visitCall(NodeTraversal t, Node n) {
   Node child = n.getFirstChild();
   JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
   if (!childType.canBeCalled()) {
     report(t, n, NOT_CALLABLE, childType.toString());
     ensureTyped(t, n);
     return;
   }
 
   // A couple of types can be called as if they were functions.
   // If it is a function type, then validate parameters.
   if (childType instanceof FunctionType) {
     FunctionType functionType = (FunctionType) childType;
 
-      boolean isExtern = false;
     JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
-      if(functionJSDocInfo != null) {
-        String sourceName = functionJSDocInfo.getSourceName();
-        CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
+    if (functionJSDocInfo != null && functionJSDocInfo.hasThisType()) {
+      JSType thisType = functionJSDocInfo.getThisType();
+      if (thisType != null && !thisType.isUnknownType()) {
+        if (child.getType() != Node.GETPROP && child.getType() != Node.GETELEM) {
+          report(t, n, THIS_TYPE_MISMATCH, functionType.toString());
+        }
+      }
     }
 
     // Non-native constructors should not be called directly
     // unless they specify a return type and are defined
     // in an extern.
     if (functionType.isConstructor() &&
         !functionType.isNativeObjectType() &&
         (functionType.getReturnType().isUnknownType() ||
          functionType.getReturnType().isVoidType() ||
-           !isExtern)) {
+         !isExtern(functionType)))) {
       report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
     }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-
+    // Visit parameter list and ensure typing.
     visitParameterList(t, n, functionType);
     ensureTyped(t, n, functionType.getReturnType());
   } else {
     ensureTyped(t, n);
   }
 
   // TODO: Add something to check for calls of RegExp objects, which is not
   // supported by IE.  Either say something about the return type or warn
   // about the non-portability of the call or both.
 }
+
+private boolean isExtern(FunctionType functionType) {
+  JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
+  if (functionJSDocInfo != null) {
+    String sourceName = functionJSDocInfo.getSourceName();
+    CompilerInput functionSource = compiler.getInput(sourceName);
+    return functionSource != null && functionSource.isExtern();
+  }
+  return false;
+}
\ No newline at end of file
