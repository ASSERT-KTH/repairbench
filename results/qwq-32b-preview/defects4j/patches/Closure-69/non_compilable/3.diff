diff --git a/tmp/88aa7f82-fe11-4c2e-846a-1e575b2970e5_buggy.java b/tmp/cb3ff1fd-fc21-40f6-96f8-74a4404cb219_fixed.java
index bf9c086..216379e 100644
--- a/tmp/88aa7f82-fe11-4c2e-846a-1e575b2970e5_buggy.java
+++ b/tmp/cb3ff1fd-fc21-40f6-96f8-74a4404cb219_fixed.java
@@ -1,54 +1,73 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
 private void visitCall(NodeTraversal t, Node n) {
   Node child = n.getFirstChild();
   JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
   if (!childType.canBeCalled()) {
     report(t, n, NOT_CALLABLE, childType.toString());
     ensureTyped(t, n);
     return;
   }
 
   // A couple of types can be called as if they were functions.
   // If it is a function type, then validate parameters.
   if (childType instanceof FunctionType) {
     FunctionType functionType = (FunctionType) childType;
 
     boolean isExtern = false;
     JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
     if (functionJSDocInfo != null) {
       String sourceName = functionJSDocInfo.getSourceName();
       CompilerInput functionSource = compiler.getInput(sourceName);
       isExtern = functionSource.isExtern();
     }
 
     // Non-native constructors should not be called directly
     // unless they specify a return type and are defined
     // in an extern.
     if (functionType.isConstructor() &&
         !functionType.isNativeObjectType() &&
         (functionType.getReturnType().isUnknownType() ||
          functionType.getReturnType().isVoidType() ||
          !isExtern)) {
       report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
     }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
+    // Check if the function has an explicit 'this' type
+    JSType thisType = functionType.getThisType();
+    if (thisType != null && !thisType.isUnknownType()) {
+      // Determine the 'this' value for the call
+      Node callee = child;
+      JSType actualThisType = getThisTypeForCall(callee);
+
+      // Check if the actual 'this' type matches the expected 'this' type
+      if (!thisType.isAssignableFrom(actualThisType)) {
+        report(t, n, "ThisTypeMismatch", functionType.toString(), actualThisType.toString());
+      }
+    }
 
     visitParameterList(t, n, functionType);
     ensureTyped(t, n, functionType.getReturnType());
   } else {
     ensureTyped(t, n);
   }
 
   // TODO: Add something to check for calls of RegExp objects, which is not
   // supported by IE.  Either say something about the return type or warn
   // about the non-portability of the call or both.
 }
+
+private JSType getThisTypeForCall(Node callee) {
+  // Determine the 'this' value based on the callee node
+  if (callee.isGetProp()) {
+    // Called as a method of an object
+    Node receiver = callee.getFirstChild();
+    return getJSType(receiver);
+  } else if (callee.isGetElem()) {
+    // Called as a method via array access
+    Node receiver = callee.getFirstChild();
+    return getJSType(receiver);
+  } else {
+    // Called directly, 'this' will be the global object
+    return getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);
+  }
+}
\ No newline at end of file
