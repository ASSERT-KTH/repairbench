diff --git a/tmp/f1ba226d-fef7-4581-ba38-5f7116767aee_buggy.java b/tmp/9256f6a4-8b0f-4f62-8b08-5e73074da621_fixed.java
index bf9c086..86bcac2 100644
--- a/tmp/f1ba226d-fef7-4581-ba38-5f7116767aee_buggy.java
+++ b/tmp/9256f6a4-8b0f-4f62-8b08-5e73074da621_fixed.java
@@ -1,54 +1,80 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
 private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
         report(t, n, NOT_CALLABLE, childType.toString());
         ensureTyped(t, n);
         return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
         FunctionType functionType = (FunctionType) childType;
 
         boolean isExtern = false;
         JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
         if (functionJSDocInfo != null) {
             String sourceName = functionJSDocInfo.getSourceName();
             CompilerInput functionSource = compiler.getInput(sourceName);
             isExtern = functionSource.isExtern();
         }
 
         // Non-native constructors should not be called directly
         // unless they specify a return type and are defined
         // in an extern.
         if (functionType.isConstructor() &&
             !functionType.isNativeObjectType() &&
             (functionType.getReturnType().isUnknownType() ||
              functionType.getReturnType().isVoidType() ||
              !isExtern)) {
             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
         }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
+        // Check if the function has an explicit 'this' type
+        JSType thisType = functionType.getThisType();
+        if (thisType != null && !thisType.isUnknownType()) {
+            // Ensure the function is called with the correct 'this' type
+            if (!isCalledWithCorrectThis(t, n, thisType)) {
+                report(t, n, MISMATCHED_THIS_TYPE, thisType.toString());
+            }
+        }
 
         visitParameterList(t, n, functionType);
         ensureTyped(t, n, functionType.getReturnType());
     } else {
         ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
 }
+
+private boolean isCalledWithCorrectThis(NodeTraversal t, Node n, JSType expectedThisType) {
+    Node callee = n.getFirstChild();
+    if (callee.isGetProp()) {
+        // Check if the receiver type matches the expected 'this' type
+        Node receiver = callee.getFirstChild();
+        JSType receiverType = getJSType(receiver);
+        return receiverType.isSubtypeOf(expectedThisType);
+    } else if (callee.isGetElem()) {
+        // Check if the array access type matches the expected 'this' type
+        Node index = callee.getLastChild();
+        // Assuming index is a property name or numeric index
+        // This is a simplification; more detailed checks may be needed
+        Node receiver = callee.getFirstChild();
+        JSType receiverType = getJSType(receiver);
+        return receiverType.isSubtypeOf(expectedThisType);
+    } else if (callee.isName() && callee.getString().equals("this")) {
+        // Handle 'this' keyword as callee
+        // This is a special case and might need additional handling
+        // For now, assume it's correct if in the right context
+        return true;
+    } else {
+        // Function is not called via a property or element access
+        // Report a warning if 'this' type is specified
+        return false;
+    }
+}
\ No newline at end of file
