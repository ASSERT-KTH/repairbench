diff --git a/tmp/d636dff2-038f-42e1-a7e0-5ebdc9716ae6_buggy.java b/tmp/5a8484ec-0f9a-46ef-844d-47459ac7b6b2_fixed.java
index 14b51f9..86b1937 100644
--- a/tmp/d636dff2-038f-42e1-a7e0-5ebdc9716ae6_buggy.java
+++ b/tmp/5a8484ec-0f9a-46ef-844d-47459ac7b6b2_fixed.java
@@ -1,124 +1,109 @@
-    /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
+    // Keep track of inverted intervals.
     boolean inverted = false;
 
     // Keep finding better approximations.
     while (true) {
         // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
+        final double denominator = f1 - f0;
+        if (denominator == 0.0) {
+            // Avoid division by zero, return the midpoint.
+            double midpoint = 0.5 * (x0 + x1);
+            return midpoint;
+        }
+        final double x = x1 - ((f1 * (x1 - x0)) / denominator);
         final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+        // If the new approximation is the exact root, return it.
         if (fx == 0.0) {
             return x;
         }
 
+        // Check if the function value is within the function value accuracy.
+        if (Math.abs(fx) <= ftol) {
+            switch (allowed) {
+                case ANY_SIDE:
+                    return x;
+                case LEFT_SIDE:
+                    return inverted ? x : x0;
+                case RIGHT_SIDE:
+                    return inverted ? x0 : x;
+                case BELOW_SIDE:
+                    return (fx <= 0) ? x : x0;
+                case ABOVE_SIDE:
+                    return (fx >= 0) ? x : x0;
+                default:
+                    throw new MathInternalError();
+            }
+        }
+
         // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+            // The root is now between x and x1.
             x0 = x1;
             f0 = f1;
             inverted = !inverted;
         } else {
             switch (method) {
                 case ILLINOIS:
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Detect early that algorithm is stuck, instead of waiting
-                    // for the maximum number of iterations to be exceeded.
+                    // No adjustment needed.
                     break;
                 default:
-                    // Should never happen.
                     throw new MathInternalError();
             }
         }
-            // Update from [x0, x1] to [x0, x].
         x1 = x;
         f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
-            if (FastMath.abs(f1) <= ftol) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
-                case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
-                case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
-                case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
-                default:
-                    throw new MathInternalError();
-                }
-            }
-
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+        // Check if the interval is sufficiently small.
+        if (Math.abs(x1 - x0) < Math.max(rtol * Math.abs(x1), atol)) {
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
+                    return (fx <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
+                    return (fx >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
             }
         }
+
+        // Prevent infinite loop by checking the number of evaluations.
+        if (getEvaluations() >= getMaxEvaluations()) {
+            throw new ConvergenceException(LocalizedFormats.TOO_MANY_FUNCTION_EVALUATIONS);
+        }
     }
 }
\ No newline at end of file
