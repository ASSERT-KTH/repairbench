diff --git a/tmp/ef3f1a3d-deec-4e04-88b6-9c4ac973f8b9_buggy.java b/tmp/25c2df84-ae89-4f19-a097-32ccc31f1003_fixed.java
index 388771b..1bfb2c1 100644
--- a/tmp/ef3f1a3d-deec-4e04-88b6-9c4ac973f8b9_buggy.java
+++ b/tmp/25c2df84-ae89-4f19-a097-32ccc31f1003_fixed.java
@@ -1,37 +1,68 @@
 /**
  * Creates a new time series by copying a subset of the data in this time
  * series.
  *
  * @param start the index of the first time period to copy.
  * @param end the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
+ * @return a series containing a copy of this time series from start until end.
  * @throws CloneNotSupportedException if there is a cloning problem.
  */
-    public TimeSeries createCopy(int start, int end)
-            throws CloneNotSupportedException {
+public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
+    copy.data = new ArrayList<>();
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
-                TimeSeriesDataItem item
-                        = (TimeSeriesDataItem) this.data.get(index);
+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
-                }
-                catch (SeriesException e) {
+            } catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
     }
+    // Recalculate the minimum and maximum Y-values for the copied series
+    copy.updateMinMaxValues();
     return copy;
 }
+
+/**
+ * Updates the minimum and maximum Y-values based on the current data in the series.
+ */
+private void updateMinMaxValues() {
+    double minY = Double.POSITIVE_INFINITY;
+    double maxY = Double.NEGATIVE_INFINITY;
+    for (TimeSeriesDataItem item : data) {
+        double y = item.getValue().doubleValue();
+        if (y < minY) {
+            minY = y;
+        }
+        if (y > maxY) {
+            maxY = y;
+        }
+    }
+    setMinY(minY);
+    setMaxY(maxY);
+}
+
+/**
+ * Sets the minimum Y-value for the series.
+ * @param minY the minimum Y-value.
+ */
+private void setMinY(double minY) {
+    this.minY = minY;
+}
+
+/**
+ * Sets the maximum Y-value for the series.
+ * @param maxY the maximum Y-value.
+ */
+private void setMaxY(double maxY) {
+    this.maxY = maxY;
+}
\ No newline at end of file
