diff --git a/tmp/de1a4164-5738-4ca3-8874-05c3f04f2df5_buggy.java b/tmp/b7938949-95fb-4d5d-9cda-227b5a94f70d_fixed.java
index 388771b..8f07a16 100644
--- a/tmp/de1a4164-5738-4ca3-8874-05c3f04f2df5_buggy.java
+++ b/tmp/b7938949-95fb-4d5d-9cda-227b5a94f70d_fixed.java
@@ -1,37 +1,36 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
-    public TimeSeries createCopy(int start, int end)
-            throws CloneNotSupportedException {
+public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
+    copy.data = new ArrayList<>();
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
-                TimeSeriesDataItem item
-                        = (TimeSeriesDataItem) this.data.get(index);
+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
-                }
-                catch (SeriesException e) {
+            } catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
     }
+    // Recalculate min and max Y values based on the copied data
+    double minY = Double.POSITIVE_INFINITY;
+    double maxY = Double.NEGATIVE_INFINITY;
+    for (TimeSeriesDataItem dataItem : copy.data) {
+        double y = dataItem.getValue().doubleValue();
+        if (y < minY) {
+            minY = y;
+        }
+        if (y > maxY) {
+            maxY = y;
+        }
+    }
+    copy.setMinY(minY);
+    copy.setMaxY(maxY);
     return copy;
 }
\ No newline at end of file
