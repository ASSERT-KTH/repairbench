diff --git a/tmp/61c0d5ca-ecd6-43da-af8a-f60c1b93a505_buggy.java b/tmp/2f0860a1-b73a-476f-83dc-83d53f6361f1_fixed.java
index 1b07d98..f99d68d 100644
--- a/tmp/61c0d5ca-ecd6-43da-af8a-f60c1b93a505_buggy.java
+++ b/tmp/2f0860a1-b73a-476f-83dc-83d53f6361f1_fixed.java
@@ -1,76 +1,67 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
-        // Note! Should not skip if `property` null since that'd skip check
-        // for config overrides, in case of root value
+                                          BeanProperty property) throws JsonMappingException {
+    // If property is null, return self to skip check for config overrides for root value
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
-        // Simple case first: serialize as numeric timestamp?
+    // Check if serialization should be as numeric timestamp
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+    // Check for custom pattern in JsonFormat
     if (format.hasPattern()) {
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
+        final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
         SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
-            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
-                    : serializers.getTimeZone();
+        TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
 
-        // Otherwise, need one of these changes:
+    // Handle other configuration overrides
     final boolean hasLocale = format.hasLocale();
     final boolean hasTZ = format.hasTimeZone();
     final boolean asString = (shape == JsonFormat.Shape.STRING);
 
     if (!hasLocale && !hasTZ && !asString) {
         return this;
     }
 
     DateFormat df0 = serializers.getConfig().getDateFormat();
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
     if (df0 instanceof StdDateFormat) {
         StdDateFormat std = (StdDateFormat) df0;
-            if (format.hasLocale()) {
+        if (hasLocale) {
             std = std.withLocale(format.getLocale());
         }
-            if (format.hasTimeZone()) {
+        if (hasTZ) {
             std = std.withTimeZone(format.getTimeZone());
         }
         return withFormat(Boolean.FALSE, std);
-        }
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-        if (!(df0 instanceof SimpleDateFormat)) {
-            serializers.reportBadDefinition(handledType(), String.format(
-"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
-df0.getClass().getName()));
-        }
+    } else if (df0 instanceof SimpleDateFormat) {
         SimpleDateFormat df = (SimpleDateFormat) df0;
         if (hasLocale) {
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
             df = new SimpleDateFormat(df.toPattern(), format.getLocale());
         } else {
+            try {
                 df = (SimpleDateFormat) df.clone();
+            } catch (CloneNotSupportedException e) {
+                throw new JsonMappingException("Failed to clone DateFormat", e);
             }
-        TimeZone newTz = format.getTimeZone();
-        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
-        if (changeTZ) {
-            df.setTimeZone(newTz);
+        }
+        if (hasTZ) {
+            df.setTimeZone(format.getTimeZone());
         }
         return withFormat(Boolean.FALSE, df);
+    } else {
+        serializers.reportBadDefinition(handledType(), String.format(
+            "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
+            df0.getClass().getName()));
+        return this;
+    }
 }
\ No newline at end of file
