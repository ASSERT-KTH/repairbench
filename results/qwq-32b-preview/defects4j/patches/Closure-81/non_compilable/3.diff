diff --git a/tmp/a77b7c11-cf9a-48d2-a161-576913bd1e65_buggy.java b/tmp/6bf9d787-95cc-4149-a136-6177a4d45dda_fixed.java
index 6e05e4b..5933064 100644
--- a/tmp/a77b7c11-cf9a-48d2-a161-576913bd1e65_buggy.java
+++ b/tmp/6bf9d787-95cc-4149-a136-6177a4d45dda_fixed.java
@@ -1,51 +1,18 @@
-    @Override
-    Node processFunctionNode(FunctionNode functionNode) {
-      Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
 if (name == null) {
   name = new Name();
   name.setIdentifier("");
   isUnnamedFunction = true;
 }
 Node node = newNode(Token.FUNCTION);
 Node newName = transform(name);
 if (isUnnamedFunction) {
   // Old Rhino tagged the empty name node with the line number of the
   // declaration.
   newName.setLineno(functionNode.getLineno());
   // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
+  // Same problem as below - the left paren might not be on the same line as
+  // the function keyword.
   int lpColumn = functionNode.getAbsolutePosition() +
       functionNode.getLp();
   newName.setCharno(position2charno(lpColumn));
 }
\ No newline at end of file
-
-      node.addChildToBack(newName);
-      Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
-      } else {
-        lp.setLineno(functionNode.getLineno());
-      }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
-      lp.setCharno(position2charno(lparenCharno));
-      for (AstNode param : functionNode.getParams()) {
-        lp.addChildToBack(transform(param));
-      }
-      node.addChildToBack(lp);
-
-      Node bodyNode = transform(functionNode.getBody());
-      parseDirectives(bodyNode);
-      node.addChildToBack(bodyNode);
-     return node;
-    }
