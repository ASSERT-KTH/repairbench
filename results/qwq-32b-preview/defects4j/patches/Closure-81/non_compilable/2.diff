diff --git a/tmp/49f81be2-b029-4200-ac87-070be147134d_buggy.java b/tmp/370b5d96-696d-440b-a485-623be7aa4535_fixed.java
index 6e05e4b..b04c501 100644
--- a/tmp/49f81be2-b029-4200-ac87-070be147134d_buggy.java
+++ b/tmp/370b5d96-696d-440b-a485-623be7aa4535_fixed.java
@@ -1,51 +1,54 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
-      if (name == null) {
+  Node node = newNode(Token.FUNCTION);
+  Node newName;
+
+  if (name != null) {
+    newName = transform(name);
+  } else {
+    // Handle unnamed function
+    if (isFunctionStatement(functionNode)) {
+      // Raise error for unnamed function statement
+      throw new RuntimeException("unnamed function statement");
+    } else {
+      // Create an empty name node for unnamed function expression
       name = new Name();
       name.setIdentifier("");
-        isUnnamedFunction = true;
-      }
-      Node node = newNode(Token.FUNCTION);
-      Node newName = transform(name);
-      if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
+      newName = transform(name);
+      // Set line number and char number as before
+      int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
       newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
       newName.setCharno(position2charno(lpColumn));
     }
+  }
 
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
+  // Set line number for left paren as before
   Name fnName = functionNode.getFunctionName();
   if (fnName != null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
   lp.setCharno(position2charno(lparenCharno));
+
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
+
   return node;
 }
+
+private boolean isFunctionStatement(FunctionNode functionNode) {
+  AstNode parent = functionNode.getParent();
+  // Assume that function statements are direct children of ScriptNode or BlockNode
+  return parent instanceof ScriptNode || parent instanceof BlockNode;
+}
\ No newline at end of file
