diff --git a/tmp/51fcab7e-cfe6-4fd9-8446-7bc3489c7f1f_buggy.java b/tmp/f8fcc7e4-4830-4950-917e-0134b17e4626_fixed.java
index 6e05e4b..a83ea71 100644
--- a/tmp/51fcab7e-cfe6-4fd9-8446-7bc3489c7f1f_buggy.java
+++ b/tmp/f8fcc7e4-4830-4950-917e-0134b17e4626_fixed.java
@@ -1,51 +1,65 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
-      if (name == null) {
+  Boolean isUnnamedFunction = name == null;
+  
+  if (isUnnamedFunction) {
+    // Check if this is a function statement
+    if (isFunctionStatementContext()) {
+      // Report an error for unnamed function statements
+      throw new ParseException("unnamed function statement", functionNode.getLineno());
+    }
+    // For unnamed function expressions, proceed by creating an empty name node
     name = new Name();
     name.setIdentifier("");
-        isUnnamedFunction = true;
   }
+  
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
   if (isUnnamedFunction) {
     // Old Rhino tagged the empty name node with the line number of the
     // declaration.
     newName.setLineno(functionNode.getLineno());
     // TODO(bowdidge) Mark line number of paren correctly.
     // Same problem as below - the left paren might not be on the
     // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
   
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
   // The left paren's complicated because it's not represented by an
   // AstNode, so there's nothing that has the actual line number that it
   // appeared on.  We know the paren has to appear on the same line as the
   // function name (or else a semicolon will be inserted.)  If there's no
   // function name, assume the paren was on the same line as the function.
   // TODO(bowdidge): Mark line number of paren correctly.
   Name fnName = functionNode.getFunctionName();
   if (fnName != null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
   lp.setCharno(position2charno(lparenCharno));
+  
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
   
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
+  
   return node;
 }
+
+// Assuming this method is implemented elsewhere to check the context
+private boolean isFunctionStatementContext() {
+  // Implementation depends on the parser's state or the parent node
+  // For example, check if the parent node is a statement list
+  // This is a placeholder for the actual implementation
+  return /* condition to determine if it's a statement context */;
+}
\ No newline at end of file
