diff --git a/tmp/cfb13022-9f67-49ab-a4da-7d8e9d01c149_buggy.java b/tmp/f604ec36-094b-4c7c-bece-deb0705f40d3_fixed.java
index f8caf72..61753a9 100644
--- a/tmp/cfb13022-9f67-49ab-a4da-7d8e9d01c149_buggy.java
+++ b/tmp/f604ec36-094b-4c7c-bece-deb0705f40d3_fixed.java
@@ -1,65 +1,78 @@
 /**
  * Gets the millisecond offset to subtract from local time to get UTC time.
  * This offset can be used to undo adding the offset obtained by getOffset.
  *
  * <pre>
  * millisLocal == millisUTC   + getOffset(millisUTC)
  * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
  * </pre>
  *
  * NOTE: After calculating millisLocal, some error may be introduced. At
  * offset transitions (due to DST or other historical changes), ranges of
  * local times may map to different UTC times.
  * <p>
  * This method will return an offset suitable for calculating an instant
  * after any DST gap. For example, consider a zone with a cutover
  * from 01:00 to 01:59:<br />
  * Input: 00:00  Output: 00:00<br />
  * Input: 00:30  Output: 00:30<br />
  * Input: 01:00  Output: 02:00<br />
  * Input: 01:30  Output: 02:30<br />
  * Input: 02:00  Output: 02:00<br />
  * Input: 02:30  Output: 02:30<br />
  * <p>
  * During a DST overlap (where the local time is ambiguous) this method will return
  * the earlier instant. The combination of these two rules is to always favour
  * daylight (summer) time over standard (winter) time.
  * <p>
  * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
  * Prior to v1.5, the DST gap behaviour was also not defined.
  *
  * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
  * @return the millisecond offset to subtract from local time to get UTC time
  */
 public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
+    // Initial estimate of the offset at the local instant
     final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
+    // Adjust the local instant using this offset estimate to get a UTC instant
     final long instantAdjusted = instantLocal - offsetLocal;
+    // Recalculate the offset at the adjusted (UTC) instant
     final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+    
+    // If the offsets differ, we're near a DST boundary
     if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
+        // Determine the direction of the offset change
+        int offsetDifference = offsetLocal - offsetAdjusted;
+        
+        // If the local offset is less than the adjusted offset (negative difference),
+        // it indicates a DST transition where local time skips ahead.
+        if (offsetDifference < 0) {
+            // In this case, we need to ensure the time is after the DST gap.
+            // We check the next transition times to see if they differ.
             long nextLocal = nextTransition(instantAdjusted);
             long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
             if (nextLocal != nextAdjusted) {
+                // If transitions differ, use the original offset
                 return offsetLocal;
             }
+        } else {
+            // If the local offset is greater than the adjusted offset (positive difference),
+            // it indicates a DST transition where local time repeats.
+            // In this case, we should favor the earlier instant.
+            return offsetAdjusted;
         }
     } else if (offsetLocal > 0) {
+        // If offsets are the same and offset is positive, check for previous transitions
         long prev = previousTransition(instantAdjusted);
         if (prev < instantAdjusted) {
             int offsetPrev = getOffset(prev);
             int diff = offsetPrev - offsetLocal;
             if (instantAdjusted - prev <= diff) {
+                // If the time is within the transition period, use the previous offset
                 return offsetPrev;
             }
         }
     }
+    // Otherwise, return the adjusted offset
     return offsetAdjusted;
 }
\ No newline at end of file
