diff --git a/tmp/7e015cf1-ad47-4945-8eb7-4f90f225302e_buggy.java b/tmp/e7133708-0c20-456c-8a34-0d78323909c7_fixed.java
index f8caf72..eab6b14 100644
--- a/tmp/7e015cf1-ad47-4945-8eb7-4f90f225302e_buggy.java
+++ b/tmp/e7133708-0c20-456c-8a34-0d78323909c7_fixed.java
@@ -1,65 +1,77 @@
 /**
  * Gets the millisecond offset to subtract from local time to get UTC time.
  * This offset can be used to undo adding the offset obtained by getOffset.
  *
  * <pre>
  * millisLocal == millisUTC   + getOffset(millisUTC)
  * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
  * </pre>
  *
  * NOTE: After calculating millisLocal, some error may be introduced. At
  * offset transitions (due to DST or other historical changes), ranges of
  * local times may map to different UTC times.
  * <p>
  * This method will return an offset suitable for calculating an instant
  * after any DST gap. For example, consider a zone with a cutover
  * from 01:00 to 01:59:<br />
  * Input: 00:00  Output: 00:00<br />
  * Input: 00:30  Output: 00:30<br />
  * Input: 01:00  Output: 02:00<br />
  * Input: 01:30  Output: 02:30<br />
  * Input: 02:00  Output: 02:00<br />
  * Input: 02:30  Output: 02:30<br />
  * <p>
  * During a DST overlap (where the local time is ambiguous) this method will return
  * the earlier instant. The combination of these two rules is to always favour
  * daylight (summer) time over standard (winter) time.
  * <p>
  * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
  * Prior to v1.5, the DST gap behaviour was also not defined.
  *
  * @param instantLocal the millisecond instant, relative to this time zone, to get the offset for
  * @return the millisecond offset to subtract from local time to get UTC time
  */
 public int getOffsetFromLocal(long instantLocal) {
     // get the offset at instantLocal (first estimate)
-        final int offsetLocal = getOffset(instantLocal);
+    int offsetLocal = getOffset(instantLocal);
     // adjust instantLocal using the estimate and recalc the offset
-        final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
+    long instantAdjusted = instantLocal - offsetLocal;
+    int offsetAdjusted = getOffset(instantAdjusted);
     // if the offsets differ, we must be near a DST boundary
     if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
+        // determine the direction of the offset change
+        int offsetDifference = offsetAdjusted - offsetLocal;
+        if (offsetDifference < 0) {
+            // offset decreased, which typically happens when entering standard time
+            // need to handle the DST overlap
+            // choose the earlier instant to favour daylight time
+            long nextTransition = nextTransition(instantAdjusted);
+            long nextLocalTransition = nextTransition(instantLocal - offsetAdjusted);
+            if (nextTransition != nextLocalTransition) {
                 return offsetLocal;
             }
+        } else {
+            // offset increased, which typically happens when entering summer time
+            // need to handle the DST gap
+            // choose the later instant to skip the gap
+            long previousTransition = previousTransition(instantAdjusted);
+            if (previousTransition < instantAdjusted) {
+                int offsetPrev = getOffset(previousTransition);
+                int diff = offsetPrev - offsetAdjusted;
+                if (instantAdjusted - previousTransition <= diff) {
+                    return offsetPrev;
+                }
+            }
         }
     } else if (offsetLocal > 0) {
-            long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
+        long previousTransition = previousTransition(instantAdjusted);
+        if (previousTransition < instantAdjusted) {
+            int offsetPrev = getOffset(previousTransition);
+            int diff = offsetPrev - offsetAdjusted;
+            if (instantAdjusted - previousTransition <= diff) {
                 return offsetPrev;
             }
         }
     }
     return offsetAdjusted;
 }
\ No newline at end of file
