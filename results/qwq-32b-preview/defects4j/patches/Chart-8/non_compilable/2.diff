diff --git a/tmp/5d476b0f-c1b4-4dd2-84a6-12cdb5bc2458_buggy.java b/tmp/97a0406a-de93-4dc9-9982-52b9f6446e26_fixed.java
index 99f4092..1126f43 100644
--- a/tmp/5d476b0f-c1b4-4dd2-84a6-12cdb5bc2458_buggy.java
+++ b/tmp/97a0406a-de93-4dc9-9982-52b9f6446e26_fixed.java
@@ -1,13 +1,58 @@
+/**
+ * Creates a time period for the week in which the specified date/time
+ * falls, calculated relative to the specified time zone and locale.
+ *
+ * @param time  the date/time (<code>null</code> not permitted).
+ * @param zone  the time zone (<code>null</code> not permitted).
+ * @param locale  the locale (<code>null</code> not permitted).
+ *
+ * @since 1.0.7
+ */
+public Week(Date time, TimeZone zone, Locale locale) {
+    if (time == null) {
+        throw new IllegalArgumentException("Null 'time' argument.");
+    }
+    if (zone == null) {
+        throw new IllegalArgumentException("Null 'zone' argument.");
+    }
+    if (locale == null) {
+        throw new IllegalArgumentException("Null 'locale' argument.");
+    }
+
+    // Use the specified time zone and locale to get the first day of the week
+    GregorianCalendar cal = new GregorianCalendar(zone, locale);
+    cal.setTime(time);
+
+    // Set the first day of the week and minimal days in first week
+    cal.setFirstDayOfWeek(cal.getFirstDayOfWeek());
+    cal.setMinimalDaysInFirstWeek(cal.getMinimalDaysInFirstWeek());
+
+    // Set the time to the first day of the week
+    cal.set(Calendar.DAY_OF_WEEK, cal.getFirstDayOfWeek());
+    cal.set(Calendar.HOUR_OF_DAY, 0);
+    cal.set(Calendar.MINUTE, 0);
+    cal.set(Calendar.SECOND, 0);
+    cal.set(Calendar.MILLISECOND, 0);
+
+    // Calculate the week number
+    int week = cal.getWeekYear() * 100 + cal.get(Calendar.WEEK_OF_YEAR);
+
+    // Store the start and end times of the week
+    this.start = cal.getTime();
+    cal.add(Calendar.DAY_OF_YEAR, 7);
+    this.end = cal.getTime();
+    this.week = week;
+}
+
 /**
  * Creates a time period for the week in which the specified date/time
  * falls, calculated relative to the specified time zone.
  *
  * @param time  the date/time (<code>null</code> not permitted).
  * @param zone  the time zone (<code>null</code> not permitted).
  *
  * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}.
  */
 public Week(Date time, TimeZone zone) {
-        // defer argument checking...
-        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());
+    this(time, zone, Locale.getDefault());
 }
\ No newline at end of file
