diff --git a/tmp/b53832c8-2ca4-45e7-b0d5-1988df28bab7_buggy.java b/tmp/8da36de7-7610-482b-b95d-796e16ee108b_fixed.java
index 99f4092..bc4fce7 100644
--- a/tmp/b53832c8-2ca4-45e7-b0d5-1988df28bab7_buggy.java
+++ b/tmp/8da36de7-7610-482b-b95d-796e16ee108b_fixed.java
@@ -1,13 +1,46 @@
 /**
  * Creates a time period for the week in which the specified date/time
-     * falls, calculated relative to the specified time zone.
+ * falls, calculated relative to the specified time zone and locale.
  *
  * @param time  the date/time (<code>null</code> not permitted).
  * @param zone  the time zone (<code>null</code> not permitted).
-     *
-     * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}.
+ * @param locale  the locale (<code>null</code> not permitted).
  */
-    public Week(Date time, TimeZone zone) {
-        // defer argument checking...
-        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());
+public Week(Date time, TimeZone zone, Locale locale) {
+    if (time == null) {
+        throw new IllegalArgumentException("Null 'time' argument.");
+    }
+    if (zone == null) {
+        throw new IllegalArgumentException("Null 'zone' argument.");
+    }
+    if (locale == null) {
+        throw new IllegalArgumentException("Null 'locale' argument.");
+    }
+
+    this.startTime = time;
+    this.timeZone = zone;
+    this.locale = locale;
+
+    // Determine the first day of the week based on the locale
+    Calendar calendar = new GregorianCalendar(zone, locale);
+    int firstDayOfWeek = calendar.getFirstDayOfWeek();
+
+    // Set the calendar to the given date
+    calendar.setTime(time);
+
+    // Adjust the calendar to the first day of the week
+    int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
+    int dayOffset = (dayOfWeek - firstDayOfWeek + 7) % 7;
+    calendar.add(Calendar.DAY_OF_YEAR, -dayOffset);
+
+    // Set the start time to the first millisecond of the first day of the week
+    calendar.set(Calendar.HOUR_OF_DAY, 0);
+    calendar.set(Calendar.MINUTE, 0);
+    calendar.set(Calendar.SECOND, 0);
+    calendar.set(Calendar.MILLISECOND, 0);
+    this.startTime = calendar.getTime();
+
+    // Calculate the week number
+    int week = calendar.get(Calendar.WEEK_OF_YEAR);
+    this.week = week;
 }
\ No newline at end of file
