diff --git a/tmp/4c037ea3-abac-4963-affc-efef3515b796_buggy.java b/tmp/b4270742-eba5-4e70-87d2-a9ea7bf9edf1_fixed.java
index cd412d2..d8acff1 100644
--- a/tmp/4c037ea3-abac-4963-affc-efef3515b796_buggy.java
+++ b/tmp/b4270742-eba5-4e70-87d2-a9ea7bf9edf1_fixed.java
@@ -1,76 +1,56 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+private String standardizeISO8601(String dateStr) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
-        DateFormat df;
-
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
-            df = _formatPlain;
-            if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
-            }
-        } else if (c == 'Z') {
-            df = _formatISO8601_z;
-            if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
-            }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+    if (len == 0) {
+        return dateStr;
+    }
+    char lastChar = dateStr.charAt(len - 1);
+    if (lastChar == 'Z') {
+        // Handle 'Z' case
+        int fracIndex = dateStr.lastIndexOf('.');
+        if (fracIndex != -1) {
+            int fracLen = len - fracIndex - 1;
+            if (fracLen < 4) { // including the dot
+                dateStr = dateStr.substring(0, fracIndex + 4); // keep up to 3 digits after dot
             }
         } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
+            dateStr += ".000";
         }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+        return dateStr;
+    } else {
+        // Handle timezone offset
+        int tzIndex = dateStr.lastIndexOf('+');
+        if (tzIndex == -1) {
+            tzIndex = dateStr.lastIndexOf('-');
+        }
+        if (tzIndex != -1) {
+            // Remove colon in timezone if present
+            if (len - tzIndex - 1 == 6 && dateStr.charAt(tzIndex + 3) == ':') {
+                dateStr = dateStr.substring(0, tzIndex + 3) + dateStr.substring(tzIndex + 4);
+            }
+            // Ensure fractional seconds are present and have three digits
+            int fracIndex = dateStr.lastIndexOf('.');
+            if (fracIndex != -1) {
+                int fracLen = tzIndex - fracIndex - 1;
+                if (fracLen < 3) {
+                    dateStr = dateStr.substring(0, fracIndex + 4); // keep up to 3 digits after dot
                 }
-                df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
+            } else {
+                dateStr = dateStr.substring(0, tzIndex) + ".000" + dateStr.substring(tzIndex);
             }
+            return dateStr;
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
+            // No timezone specified, assume UTC and append 'Z'
+            int fracIndex = dateStr.lastIndexOf('.');
+            if (fracIndex != -1) {
+                int fracLen = len - fracIndex - 1;
+                if (fracLen < 4) { // including the dot
+                    dateStr = dateStr.substring(0, fracIndex + 4); // keep up to 3 digits after dot
                 }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+            } else {
+                dateStr += ".000";
             }
+            dateStr += 'Z';
+            return dateStr;
         }
     }
-        return df.parse(dateStr, pos);
 }
\ No newline at end of file
