diff --git a/tmp/6a043a68-c08d-4a07-9a3d-5bb85bbef707_buggy.java b/tmp/c481eda2-4c47-4023-b5fc-84d228dec04c_fixed.java
index cd412d2..86d2a38 100644
--- a/tmp/6a043a68-c08d-4a07-9a3d-5bb85bbef707_buggy.java
+++ b/tmp/c481eda2-4c47-4023-b5fc-84d228dec04c_fixed.java
@@ -1,76 +1,95 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
+    // 21-May-2009, tatu: DateFormat has very strict handling of
+    // timezone modifiers for ISO-8601. So we need to do some scrubbing.
 
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+        int lastDotIndex = dateStr.lastIndexOf('.');
+        if (lastDotIndex == -1 || dateStr.substring(lastDotIndex).length() < 4) {
+            dateStr = padMilliseconds(dateStr);
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len - 3);
             if (c == ':') { // remove optional colon
                 // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
+                dateStr = dateStr.substring(0, len - 3) + dateStr.substring(len - 2);
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
             }
             // Milliseconds partial or missing; and even seconds are optional
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+            // Adjust for 'T', '+'/'-', and timezone-offset
+            int timezoneStart = dateStr.lastIndexOf '+' == -1 ? dateStr.lastIndexOf('-') : dateStr.lastIndexOf('+');
+            if (timezoneStart != -1) {
+                String baseDate = dateStr.substring(0, timezoneStart);
+                String tzOffset = dateStr.substring(timezoneStart);
+                // Ensure base date has seconds and milliseconds
+                if (baseDate.lastIndexOf(':') == baseDate.length() - 3) {
+                    // Missing seconds, add "":00.000
+                    baseDate += ":00.000";
+                } else {
+                    int dotIndex = baseDate.lastIndexOf('.');
+                    if (dotIndex == -1) {
+                        baseDate += ".000";
+                    } else if (baseDate.substring(dotIndex).length() < 4) {
+                        baseDate = padMilliseconds(baseDate);
+                    }
+                }
+                dateStr = baseDate + tzOffset;
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
+
+private String padMilliseconds(String dateStr) {
+    int dotIndex = dateStr.lastIndexOf('.');
+    if (dotIndex != -1 && dateStr.substring(dotIndex).length() < 4) {
+        // Pad milliseconds to 3 digits
+        String ms = dateStr.substring(dotIndex + 1);
+        while (ms.length() < 3) {
+            ms += "0";
+        }
+        return dateStr.substring(0, dotIndex + 1) + ms;
+    }
+    return dateStr;
+}
+
+private boolean hasTimeZone(String dateStr) {
+    return dateStr.contains("+") || dateStr.contains("-");
+}
\ No newline at end of file
