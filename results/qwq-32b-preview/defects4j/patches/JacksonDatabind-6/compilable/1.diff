diff --git a/tmp/91e30b3c-6d9d-431a-a5bc-cacd4f43bd1d_buggy.java b/tmp/f4272d09-c1e2-494d-81e3-987b5e73b2cf_fixed.java
index cd412d2..214c5a8 100644
--- a/tmp/91e30b3c-6d9d-431a-a5bc-cacd4f43bd1d_buggy.java
+++ b/tmp/f4272d09-c1e2-494d-81e3-987b5e73b2cf_fixed.java
@@ -1,76 +1,85 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len - 3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len - 3, len - 2);
                 dateStr = sb.toString();
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
             }
             // Milliseconds partial or missing; and even seconds are optional
             len = dateStr.length();
+            // handle missing milliseconds
+            int lastT = dateStr.lastIndexOf('T');
+            int lastDot = dateStr.lastIndexOf('.');
+            if (lastDot == -1 && lastT != -1) {
+                // No milliseconds, add .000
+                StringBuilder sb = new StringBuilder(dateStr);
+                sb.insert(lastT + 12, ".000");
+                dateStr = sb.toString();
+            } else if (lastDot != -1) {
+                // Check if milliseconds are partial and pad if necessary
+                int milliStart = lastDot + 1;
+                int milliEnd = dateStr.indexOf(len < milliStart + 3 ? len : milliStart + 3);
+                String milliStr = dateStr.substring(milliStart, milliEnd);
+                while (milliStr.length() < 3) {
+                    milliStr += "0";
+                }
+                dateStr = dateStr.substring(0, milliStart) + milliStr + dateStr.substring(milliEnd);
+            }
             // remove 'T', '+'/'-' and 4-digit timezone-offset
             c = dateStr.charAt(len - 9);
             if (Character.isDigit(c)) {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len - 5, ".000");
                 dateStr = sb.toString();
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
