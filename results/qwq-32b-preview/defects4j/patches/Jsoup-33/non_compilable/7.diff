diff --git a/tmp/6c98c308-5dd4-4328-a864-f4a6d57a492b_buggy.java b/tmp/ef660ebb-bf19-41b7-80bd-531b513a56cb_fixed.java
index dc93be3..3011535 100644
--- a/tmp/6c98c308-5dd4-4328-a864-f4a6d57a492b_buggy.java
+++ b/tmp/ef660ebb-bf19-41b7-80bd-531b513a56cb_fixed.java
@@ -1,14 +1,68 @@
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.Tag;
+import org.jsoup.parser.Token;
+
+import java.util.HashSet;
+import java.util.Set;
+
+public class HtmlParser {
+    private static final Set<String> voidElements = new HashSet<>();
+
+    static {
+        voidElements.add("area");
+        voidElements.add("base");
+        voidElements.add("br");
+        voidElements.add("col");
+        voidElements.add("embed");
+        voidElements.add("hr");
+        voidElements.add("img");
+        voidElements.add("input");
+        voidElements.add("link");
+        voidElements.add("meta");
+        voidElements.add("param");
+        voidElements.add("source");
+        voidElements.add("track");
+        voidElements.add("wbr");
+    }
+
+    // Assuming stack and tokeniser are instance variables
+    private Deque<Element> stack;
+    private Tokeniser tokeniser;
+    private String baseUri;
+
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        String tagName = startTag.name().toLowerCase();
+        // Handle void elements
+        if (voidElements.contains(tagName)) {
+            Element el = insertEmpty(startTag);
+            // Do not add void elements to the stack
+            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            return el;
+        }
+
+        // Handle self-closing elements
         if (startTag.isSelfClosing()) {
             Element el = insertEmpty(startTag);
-            stack.add(el);
+            stack.push(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
 
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+        // Normal elements
+        Element el = new Element(Tag.valueOf(tagName), baseUri, startTag.attributes());
         insert(el);
+        stack.push(el);
         return el;
     }
+
+    // Assuming insertEmpty and insert methods are defined elsewhere
+    private Element insertEmpty(Token.StartTag startTag) {
+        // Implementation for inserting empty elements
+        return new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    }
+
+    // Dummy implementation for insert method for completeness
+    private void insert(Element el) {
+        // Implementation for inserting elements
+    }
+}
\ No newline at end of file
