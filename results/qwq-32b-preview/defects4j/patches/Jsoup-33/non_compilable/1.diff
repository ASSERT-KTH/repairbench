diff --git a/tmp/d3978bc5-ac04-49b6-bcda-3060f63085f2_buggy.java b/tmp/be90bc40-53c8-4e55-b2b3-ded2fce00aa0_fixed.java
index dc93be3..45f0557 100644
--- a/tmp/d3978bc5-ac04-49b6-bcda-3060f63085f2_buggy.java
+++ b/tmp/be90bc40-53c8-4e55-b2b3-ded2fce00aa0_fixed.java
@@ -1,14 +1,35 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
+    // List of known HTML empty elements
+    Set<String> emptyElements = new HashSet<String>() {{
+        add("area");
+        add("base");
+        add("br");
+        add("col");
+        add("embed");
+        add("hr");
+        add("img");
+        add("input");
+        add("keygen");
+        add("link");
+        add("meta");
+        add("param");
+        add("source");
+        add("track");
+        add("wbr");
+    }};
+    
+    // Check if the tag is known to be empty or is marked as self-closing
+    boolean isSelfClosing = startTag.isSelfClosing() || emptyElements.contains(startTag.name().toLowerCase());
+    
+    if (isSelfClosing) {
         Element el = insertEmpty(startTag);
         stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        // Emit a synthetic end tag to ensure the parser moves on
+        tokeniser.emit(new Token.EndTag(el.tagName()));
         return el;
     }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
