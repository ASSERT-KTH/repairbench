diff --git a/tmp/516c4769-f4a4-44f3-8b89-75f0e9ea4907_buggy.java b/tmp/ccbd6d08-2061-49f1-b490-6428aa0ea789_fixed.java
index dc93be3..5dd8baf 100644
--- a/tmp/516c4769-f4a4-44f3-8b89-75f0e9ea4907_buggy.java
+++ b/tmp/ccbd6d08-2061-49f1-b490-6428aa0ea789_fixed.java
@@ -1,14 +1,26 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+    // Check if the tag is known to be empty
+    if (Tag.valueOf(startTag.name()).isEmpty()) {
+        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+        insert(el);
+        // Do not push empty elements onto the stack
+        return el;
+    }
+
+    // Handle self-closing tags for non-empty elements
     if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
+        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+        insert(el);
+        // Push the element onto the stack
         stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        // Emit an end tag to ensure we close it
+        tokeniser.emit(new Token.EndTag(el.tagName()));
         return el;
     }
 
+    // Normal start tag insertion
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
+    stack.add(el);
     return el;
 }
\ No newline at end of file
