diff --git a/tmp/8b72e523-3993-4c5f-9f6b-1b3be59ec172_buggy.java b/tmp/86312d2f-cee9-4250-9112-d0747b0df8ae_fixed.java
index 29a9d2f..e076a31 100644
--- a/tmp/8b72e523-3993-4c5f-9f6b-1b3be59ec172_buggy.java
+++ b/tmp/86312d2f-cee9-4250-9112-d0747b0df8ae_fixed.java
@@ -1,43 +1,39 @@
 /**
  * Handles a goog.require call.
  */
 private void processRequireCall(NodeTraversal t, Node n, Node parent) {
   Node left = n.getFirstChild();
   Node arg = left.getNext();
   if (verifyLastArgumentIsString(t, left, arg)) {
     String ns = arg.getString();
     ProvidedName provided = providedNames.get(ns);
-      if (provided == null || !provided.isExplicitlyProvided()) {
-        unrecognizedRequires.add(
-            new UnrecognizedRequire(n, ns, t.getSourceName()));
+    if (provided == null) {
+      // If the provided name is not found, add it to unrecognizedRequires
+      unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));
+    } else {
+      if (!provided.isExplicitlyProvided()) {
+        // If the provided name exists but is not explicitly provided, still consider it unrecognized
+        unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));
       } else {
         JSModule providedModule = provided.explicitModule;
-
         // This must be non-null, because there was an explicit provide.
         Preconditions.checkNotNull(providedModule);
 
         JSModule module = t.getModule();
-        if (moduleGraph != null &&
-            module != providedModule &&
-            !moduleGraph.dependsOn(module, providedModule)) {
-          compiler.report(
-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
-                  providedModule.getName(),
-                  module.getName()));
+        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {
+          compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));
         }
       }
 
+      // Always attempt to add to symbol table, regardless of provided status
       maybeAddToSymbolTable(left);
       maybeAddStringNodeToSymbolTable(arg);
+    }
 
-      // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
+    // Remove the require node only if it's recognized (i.e., provided != null and explicitly provided)
+    if (provided != null && provided.isExplicitlyProvided()) {
       parent.detachFromParent();
       compiler.reportCodeChange();
     }
   }
 }
\ No newline at end of file
