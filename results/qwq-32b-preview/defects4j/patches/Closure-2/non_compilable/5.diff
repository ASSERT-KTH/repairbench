diff --git a/tmp/02fe96c6-5627-49b6-8aa8-8c0cd705bf71_buggy.java b/tmp/e13a9b7c-9e24-4be4-94fe-46d62a1dc79d_fixed.java
index 8ff679b..b3f9a05 100644
--- a/tmp/02fe96c6-5627-49b6-8aa8-8c0cd705bf71_buggy.java
+++ b/tmp/e13a9b7c-9e24-4be4-94fe-46d62a1dc79d_fixed.java
@@ -1,39 +1,14 @@
-  /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
-   * @param t The node traversal object that supplies context
-   * @param n The node being visited
-   * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
-   * @param interfaceType The super interface that is being visited
-   */
-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
-      String functionName, HashMap<String, ObjectType> properties,
-      HashMap<String, ObjectType> currentProperties,
-      ObjectType interfaceType) {
+
 ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
-    for (String name : currentPropertyNames) {
-      ObjectType oType = properties.get(name);
-      if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
-          compiler.report(
-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-                  functionName, name, oType.toString(),
-                  interfaceType.toString()));
-        }
-      }
-      currentProperties.put(name, interfaceType);
-    }
-    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
-      checkInterfaceConflictProperties(t, n, functionName, properties,
-          currentProperties, iType);
-    }
+
+if (implicitProto == null) {
+
+  // Report an error about the unknown type
+
+  compiler.report(t.makeError(n, BAD_TYPE_ANNOTATION,
+
+      "Unknown type " + interfaceType.toString()));
+
+  return;
+
 }
