diff --git a/tmp/1265779b-85f0-4a46-9074-aa6735bc155a_buggy.java b/tmp/6a0b9247-2f44-424d-8207-624e87d32413_fixed.java
index b56897c..38c6057 100644
--- a/tmp/1265779b-85f0-4a46-9074-aa6735bc155a_buggy.java
+++ b/tmp/6a0b9247-2f44-424d-8207-624e87d32413_fixed.java
@@ -1,27 +1,33 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+    // Check if the node is null, which indicates reaching an implicit return
     if (n == null) {
         return false;
     }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+    // Check if the node is a function call with side effects
     if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
         return true;
     }
 
+    // Check if the node is a constructor call with side effects
     if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
 
-
+    // Traverse children, considering control flow graph node entries
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+        // Check if entering a new CFG node and handle accordingly
+        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {
+            if (apply(c)) {
                 return true;
             }
+        } else {
+            // Handle new CFG nodes appropriately, ensuring no side effects are missed
+            if (apply(c)) {
+                return true;
+            }
+        }
     }
     return false;
 }
\ No newline at end of file
