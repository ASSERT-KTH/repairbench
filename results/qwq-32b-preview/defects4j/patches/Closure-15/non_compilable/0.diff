diff --git a/tmp/27d9baca-bedb-4f62-825a-3de55607bef3_buggy.java b/tmp/6f622008-c978-4191-bcab-55aa33442758_fixed.java
index b56897c..152a5cb 100644
--- a/tmp/27d9baca-bedb-4f62-825a-3de55607bef3_buggy.java
+++ b/tmp/6f622008-c978-4191-bcab-55aa33442758_fixed.java
@@ -1,27 +1,36 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
   // where the function returns (possibly without an return statement)
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // Check for calls to functions that have side effects
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
+  // Check for new expressions with side effects
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
+  // Check for deletion operations
+  if (n.isDelete()) {
+    return true;
+  }
 
+  // Check for for-in loops
+  if (n.isForIn()) {
+    return true;
+  }
+
+  // Recursively check child nodes, skipping those that enter new CFG nodes
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
