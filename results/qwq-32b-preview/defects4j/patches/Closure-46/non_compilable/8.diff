diff --git a/tmp/34f94b13-42e1-4a78-aa4c-bc516fa18607_buggy.java b/tmp/c73b5986-bfd3-445c-8a00-b4c0e2a47143_fixed.java
index 46817a7..faa6030 100644
--- a/tmp/34f94b13-42e1-4a78-aa4c-bc516fa18607_buggy.java
+++ b/tmp/c73b5986-bfd3-445c-8a00-b4c0e2a47143_fixed.java
@@ -1,16 +1,40 @@
-  @Override
-  public JSType getLeastSupertype(JSType that) {
-    if (!that.isRecordType()) {
-      return super.getLeastSupertype(that);
-    }
+
+Set<String> allProperties = new HashSet<>(this.properties.keySet());
+
+allProperties.addAll(thatRecord.properties.keySet());
+
 RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+for (String property : allProperties) {
+
+  JSType typeThis = this.properties.get(property);
+
+  JSType typeThat = thatRecord.properties.get(property);
+
+  if (typeThis != null && typeThat != null) {
+
+    // Both have the property, get least supertype
+
+    JSType supertype = typeThis.getLeastSupertype(typeThat);
+
+    Node propertyNode = this.getPropertyNode(property);
+
+    builder.addProperty(property, supertype, propertyNode);
+
+  } else if (typeThis != null) {
+
+    // Only this has the property
+
+    builder.addProperty(property, typeThis, getPropertyNode(property));
+
+  } else {
+
+    // Only that has the property
+
+    builder.addProperty(property, typeThat, that.getPropertyNode(property));
+
   }
+
 }
+
 return builder.build();
-  }
