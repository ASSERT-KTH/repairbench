diff --git a/tmp/101cb1d3-8f0c-44d0-99e3-fa3eb433660b_buggy.java b/tmp/d91e67d5-9904-4ed2-846d-195555f96552_fixed.java
index bfa2423..d080d1c 100644
--- a/tmp/101cb1d3-8f0c-44d0-99e3-fa3eb433660b_buggy.java
+++ b/tmp/d91e67d5-9904-4ed2-846d-195555f96552_fixed.java
@@ -1,23 +1,36 @@
+import org.apache.commons.math3.exception.NotStrictlyPositiveException;
+import org.apache.commons.math3.util.LocalizedFormats;
+
+import java.lang.reflect.Array;
+import java.util.List;
+import java.util.ArrayList;
+
 /**
  * Generate a random sample from the distribution.
  *
  * @param sampleSize the number of random values to generate.
  * @return an array representing the random sample.
  * @throws NotStrictlyPositiveException if {@code sampleSize} is not
  * positive.
  */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                 sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Determine the component type for the array
+    Class<?> componentType = Object.class;
+    if (!singletons.isEmpty()) {
+        componentType = singletons.get(0).getClass();
+    }
+
+    // Create an array of type T[]
+    final T[] out = (T[]) Array.newInstance(componentType, sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
     return out;
-
 }
\ No newline at end of file
