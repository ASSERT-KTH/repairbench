diff --git a/tmp/681dc691-b009-4f6a-8c81-99fba127ec6c_buggy.java b/tmp/abfa73af-f3a7-4509-a28d-07411bc583f0_fixed.java
index 4d0be80..efc2eac 100644
--- a/tmp/681dc691-b009-4f6a-8c81-99fba127ec6c_buggy.java
+++ b/tmp/abfa73af-f3a7-4509-a28d-07411bc583f0_fixed.java
@@ -1,10 +1,24 @@
 @Override
 Node processForInLoop(ForInLoop loopNode) {
+    // Check if the loop is actually a "for each" loop
+    if (isForEachLoop(loopNode)) {
+        throw createUnsupportedError("for each");
+    }
 
-        // Return the bare minimum to put the AST in a valid state.
+    // Return the bare minimum to put the AST in a valid state for for-in loops.
     return newNode(
         Token.FOR,
         transform(loopNode.getIterator()),
         transform(loopNode.getIteratedObject()),
         transformBlock(loopNode.getBody()));
 }
+
+private boolean isForEachLoop(ForInLoop loopNode) {
+    // Implement logic to check if the loop is a "for each" loop
+    // This is a placeholder; actual implementation depends on the parser's representation
+    return loopNode.isForEach(); // Assuming such a method exists
+}
+
+private UnsupportedDiagnostic createUnsupportedError(String feature) {
+    return UnsupportedDiagnostic.create(getLineno(), feature);
+}
\ No newline at end of file
