diff --git a/tmp/6515a476-88b3-49ca-8ac2-9c90c8f5ce64_buggy.java b/tmp/8cd3a8e7-1758-47de-903c-fb645e484078_fixed.java
index 4d0be80..1926068 100644
--- a/tmp/6515a476-88b3-49ca-8ac2-9c90c8f5ce64_buggy.java
+++ b/tmp/8cd3a8e7-1758-47de-903c-fb645e484078_fixed.java
@@ -1,10 +1,36 @@
 @Override
 Node processForInLoop(ForInLoop loopNode) {
-
-        // Return the bare minimum to put the AST in a valid state.
+    // Check if this is a "for each" loop
+    if (isForEachLoop(loopNode)) {
+        // Transform "for each" loop into "for...of" loop
+        return transformForEachLoop(loopNode);
+    } else {
+        // For standard "for-in" loops, proceed as before
         return newNode(
-          Token.FOR,
+            Token.FOR_IN,
             transform(loopNode.getIterator()),
             transform(loopNode.getIteratedObject()),
-          transformBlock(loopNode.getBody()));
+            transformBlock(loopNode.getBody())
+        );
+    }
+}
+
+private boolean isForEachLoop(ForInLoop loopNode) {
+    // Implement logic to determine if this is a "for each" loop
+    // This might involve checking the loop's structure or specific tokens
+    // For example, checking if the loop starts with "for each"
+    // This is pseudo-code and needs to be adapted to the actual AST structure
+    return loopNode.isForEach(); // Assuming there's a method to check this
+}
+
+private Node transformForEachLoop(ForInLoop loopNode) {
+    // Transform "for each" loop into "for...of" loop
+    // Assuming the loop is of the form: for each (var declarator in object) { body }
+    // Transform it to: for (var declarator of object) { body }
+    Node forOfNode = newNode(Token.FOR_OF,
+        transform(loopNode.getIterator()),
+        transform(loopNode.getIteratedObject()),
+        transformBlock(loopNode.getBody())
+    );
+    return forOfNode;
 }
\ No newline at end of file
