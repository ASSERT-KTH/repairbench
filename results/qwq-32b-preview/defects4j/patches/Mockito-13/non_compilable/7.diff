diff --git a/tmp/29be1ef5-621a-4e4e-87f1-3836aba55fa9_buggy.java b/tmp/3df180dc-40ac-46e7-b821-b7fca5485515_fixed.java
index 5481b94..706fc50 100644
--- a/tmp/29be1ef5-621a-4e4e-87f1-3836aba55fa9_buggy.java
+++ b/tmp/3df180dc-40ac-46e7-b821-b7fca5485515_fixed.java
@@ -1,49 +1,54 @@
 public Object handle(Invocation invocation) throws Throwable {
     if (invocationContainerImpl.hasAnswersForStubbing()) {
         // stubbing voids with stubVoid() or doAnswer() style
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                         .getArgumentMatcherStorage(), invocation);
         invocationContainerImpl.setMethodForStubbing(invocationMatcher);
         return null;
     }
+    
     VerificationMode verificationMode = mockingProgress.pullVerificationMode();
     
-        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
-                        invocation);
-
-        mockingProgress.validateState();
-
-        //if verificationMode is not null then someone is doing verify()        
     if (verificationMode != null) {
         // We need to check if verification was started on the correct mock
         // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+        if (verificationMode instanceof MockAwareVerificationMode) {
+            MockAwareVerificationMode mockAwareVerificationMode = (MockAwareVerificationMode) verificationMode;
+            Object mock = mockAwareVerificationMode.getMock();
+            if (mock == invocation.getMock()) {
+                InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
                 verificationMode.verify(data);
                 return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+            } else {
+                // Re-add the verification mode if it's for a different mock
+                mockingProgress.pushVerificationMode(verificationMode);
+                // Continue to handle the invocation as a normal method call
             }
         }
+    }
+    
+    InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);
+    mockingProgress.validateState();
     
     invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
-        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
+    OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<>(invocationContainerImpl);
     mockingProgress.reportOngoingStubbing(ongoingStubbing);
     
     StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
     
     if (stubbedInvocation != null) {
         stubbedInvocation.captureArgumentsFrom(invocation);
         return stubbedInvocation.answer(invocation);
     } else {
         Object ret = mockSettings.getDefaultAnswer().answer(invocation);
         
-            // redo setting invocation for potential stubbing in case of partial
+        // Redo setting invocation for potential stubbing in case of partial
         // mocks / spies.
         // Without it, the real method inside 'when' might have delegated
         // to other self method and overwrite the intended stubbed method
         // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
         invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
         return ret;
     }
 }
\ No newline at end of file
