diff --git a/tmp/b6074800-9666-4d90-ab8c-91d844549be8_buggy.java b/tmp/8807a87f-298b-40fa-b9df-8e27026f1c67_fixed.java
index 43fb5fd..aadeac0 100644
--- a/tmp/b6074800-9666-4d90-ab8c-91d844549be8_buggy.java
+++ b/tmp/8807a87f-298b-40fa-b9df-8e27026f1c67_fixed.java
@@ -1,55 +1,100 @@
-    /**
-     * <p>Breaks <code>token</code> into its constituent parts
-     * using the following algorithm.
-     * <ul>
-     *  <li>ignore the first character ("<b>-</b>")</li>
-     *  <li>foreach remaining character check if an {@link Option}
-     *  exists with that id.</li>
-     *  <li>if an {@link Option} does exist then add that character
-     *  prepended with "<b>-</b>" to the list of processed tokens.</li>
-     *  <li>if the {@link Option} can have an argument value and there 
-     *  are remaining characters in the token then add the remaining 
-     *  characters as a token to the list of processed tokens.</li>
-     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> 
-     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
-     *  "<b>--</b>" followed by the remaining characters and also 
-     *  the remaining tokens directly to the processed tokens list.</li>
-     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
-     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
-     *  character prepended with "<b>-</b>".</li>
-     * </ul>
-     * </p>
-     *
-     * @param token The current token to be <b>burst</b>
-     * @param stopAtNonOption Specifies whether to stop processing
-     * at the first non-Option encountered.
-     */
+
 protected void burstToken(String token, boolean stopAtNonOption)
+
 {
+
+    StringBuilder buffer = new StringBuilder();
+
+    boolean hasCurrentOption = false;
+
     for (int i = 1; i < token.length(); i++)
+
     {
-            String ch = String.valueOf(token.charAt(i));
 
-            if (options.hasOption(ch))
+        char ch = token.charAt(i);
+
+        String optionId = String.valueOf(ch);
+
+        if (options.hasOption(optionId))
+
         {
-                tokens.add("-" + ch);
-                currentOption = options.getOption(ch);
 
-                if (currentOption.hasArg() && (token.length() != (i + 1)))
+            if (hasCurrentOption && options.getOption(hasCurrentOption).hasArg())
+
             {
+
+                tokens.add(buffer.substring(1));
+
+                buffer.setLength(0);
+
+            }
+
+            hasCurrentOption = optionId;
+
+            tokens.add("-" + optionId);
+
+            if (options.getOption(optionId).hasArg())
+
+            {
+
+                if (i == token.length() - 1)
+
+                {
+
+                    // Argument expected but none provided
+
+                    // Handle error or accept next token as argument
+
+                }
+
+                else
+
+                {
+
                     tokens.add(token.substring(i + 1));
 
                     break;
+
                 }
+
             }
-            else if (stopAtNonOption)
-            {
-                process(token.substring(i));
+
         }
+
         else
+
         {
-                tokens.add(token);
+
+            if (stopAtNonOption)
+
+            {
+
+                // Add the remaining part as a single argument
+
+                tokens.add(token.substring(i));
+
                 break;
+
             }
+
+            else
+
+            {
+
+                tokens.add("-" + ch);
+
             }
+
+        }
+
+    }
+
+    if (buffer.length() > 0)
+
+    {
+
+        tokens.add(buffer.substring(1));
+
+    }
+
 }
