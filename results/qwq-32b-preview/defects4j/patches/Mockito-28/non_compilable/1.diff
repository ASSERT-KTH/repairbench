diff --git a/tmp/8e17e476-9f11-43a3-ba38-9a627eec9ecd_buggy.java b/tmp/1b108111-09a6-43dd-bdd5-0827c8e0e618_fixed.java
index fa6828a..df839ea 100644
--- a/tmp/8e17e476-9f11-43a3-ba38-9a627eec9ecd_buggy.java
+++ b/tmp/1b108111-09a6-43dd-bdd5-0827c8e0e618_fixed.java
@@ -1,5 +1,26 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
     for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        // Find the best matching mock for the field
+        Optional<Object> bestMock = mocks.stream()
+            .filter(mock -> field.getType().isAssignableFrom(mock.getClass()))
+            .max(Comparator.comparingInt(mock -> getPriority(field.getType(), mock.getClass())));
+
+        bestMock.ifPresent(mock -> {
+            try {
+                field.set(fieldInstance, mock);
+            } catch (IllegalAccessException e) {
+                throw new RuntimeException("Failed to set field value", e);
             }
+        });
+    }
+}
+
+// Helper method to determine the priority of a mock based on its type match with the field
+private int getPriority(Class<?> fieldType, Class<?> mockType) {
+    if (fieldType.equals(mockType)) {
+        return 2; // Exact match has highest priority
+    } else if (fieldType.isAssignableFrom(mockType)) {
+        return 1; // Assignable but not exact match
+    }
+    return 0; // Not assignable
 }
\ No newline at end of file
