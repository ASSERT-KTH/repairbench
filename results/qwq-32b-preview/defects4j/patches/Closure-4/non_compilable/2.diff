diff --git a/tmp/9a13ab24-49a4-4c31-a084-2c8effd2e797_buggy.java b/tmp/bda23f3a-8f31-41a3-ad5c-92578b497ed3_fixed.java
index d6a560a..dc62290 100644
--- a/tmp/9a13ab24-49a4-4c31-a084-2c8effd2e797_buggy.java
+++ b/tmp/bda23f3a-8f31-41a3-ad5c-92578b497ed3_fixed.java
@@ -1,33 +1,30 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
-  @Override
-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+private JSType resolveWithCycleDetection(
+    ErrorReporter t, StaticScope<JSType> enclosing, Set<JSType> resolvedTypes) {
+  if (resolvedTypes.contains(this)) {
+    handleTypeCycle(t);
+    returnErrorType(); // or some appropriate error type
+  }
+  resolvedTypes.add(this);
+  try {
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
+      return registry.isLastGeneration() ? getReferencedType() : this;
+    } else {
       resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
       super.resolveInternal(t, enclosing);
       if (isResolved()) {
         finishPropertyContinuations();
       }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
+    }
+  } finally {
+    resolvedTypes.remove(this);
+  }
+}
+
+@Override
+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+  return resolveWithCycleDetection(t, enclosing, new HashSet<>());
 }
\ No newline at end of file
