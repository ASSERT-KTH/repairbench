diff --git a/tmp/3c0ac098-c0bd-4f29-a7a0-762516f6e865_buggy.java b/tmp/4ba52ff7-9d6a-49c1-950e-ba5b7d2cd6db_fixed.java
index d6a560a..1bc8045 100644
--- a/tmp/3c0ac098-c0bd-4f29-a7a0-762516f6e865_buggy.java
+++ b/tmp/4ba52ff7-9d6a-49c1-950e-ba5b7d2cd6db_fixed.java
@@ -1,33 +1,46 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
-  @Override
-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
-    if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
-    resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
-    super.resolveInternal(t, enclosing);
-    if (isResolved()) {
-      finishPropertyContinuations();
-    }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
-  }
+
+resolveInternal(t, enclosing):
+
+if type is already resolved:
+
+return the resolved type
+
+if type is being resolved (in progress):
+
+detect cycle
+
+if cycle detected:
+
+handle cycle error
+
+return error type
+
+mark type as being resolved
+
+try:
+
+if resolveViaRegistry(t, enclosing):
+
+if detectImplicitPrototypeCycle():
+
+handleTypeCycle(t)
+
+finishPropertyContinuations()
+
+else:
+
+resolveViaProperties(t, enclosing)
+
+if detectImplicitPrototypeCycle():
+
+handleTypeCycle(t)
+
+finishPropertyContinuations()
+
+super.resolveInternal(t, enclosing)
+
+finally:
+
+mark type as resolved
+
+return the appropriate type
