diff --git a/tmp/0d41de75-2775-4622-95e0-32c7f0b384c4_buggy.java b/tmp/c0515964-4728-442f-8924-619aefdb97eb_fixed.java
index d6a560a..ffdd154 100644
--- a/tmp/0d41de75-2775-4622-95e0-32c7f0b384c4_buggy.java
+++ b/tmp/c0515964-4728-442f-8924-619aefdb97eb_fixed.java
@@ -1,33 +1,30 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+  // Check for cycle before resolving
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return this; // or an appropriate type indicating cycle
   }
 
-    if (resolved) {
+  // Try resolving via registry first
+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);
+  if (resolvedViaRegistry) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
+  // If not resolved via registry, try via properties
   resolveViaProperties(t, enclosing);
+
+  // Check again for cycle after resolution
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
