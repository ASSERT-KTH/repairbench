diff --git a/tmp/c1e63b47-321a-4b98-b1ea-338e45948cd7_buggy.java b/tmp/f0d49337-d11d-4fba-abe9-60e11f78422b_fixed.java
index d6a560a..90c4902 100644
--- a/tmp/c1e63b47-321a-4b98-b1ea-338e45948cd7_buggy.java
+++ b/tmp/f0d49337-d11d-4fba-abe9-60e11f78422b_fixed.java
@@ -1,33 +1,29 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // Attempt to resolve via registry first.
   boolean resolved = resolveViaRegistry(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
   }
 
   if (resolved) {
+    // If resolved via registry, finish the resolution process.
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
+  // If not resolved via registry, try resolving via properties.
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
   }
 
+  // Ensure super resolution is called regardless of the resolution path.
   super.resolveInternal(t, enclosing);
+
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
