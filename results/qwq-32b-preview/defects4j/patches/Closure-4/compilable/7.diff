diff --git a/tmp/35ed755c-0405-42ef-8881-26e5a189d5aa_buggy.java b/tmp/bf81db98-5eff-47bd-91fa-6b824f8dcf68_fixed.java
index d6a560a..81cef1c 100644
--- a/tmp/35ed755c-0405-42ef-8881-26e5a189d5aa_buggy.java
+++ b/tmp/bf81db98-5eff-47bd-91fa-6b824f8dcf68_fixed.java
@@ -1,33 +1,34 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // Attempt to resolve via registry first.
   boolean resolved = resolveViaRegistry(t, enclosing);
+  
+  // Check for cycles after attempting registry resolution.
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return this; // Return early if cycle is detected.
   }
   
   if (resolved) {
+    // If resolved via registry, finish the resolution process.
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
   
+  // If not resolved via registry, try resolving via properties.
   resolveViaProperties(t, enclosing);
+  
+  // Check for cycles again after property resolution.
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return this; // Return early if cycle is detected.
   }
   
+  // Finish the resolution process.
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
