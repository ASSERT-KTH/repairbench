diff --git a/tmp/684b7687-a017-4062-b724-15cb0b27aa6f_buggy.java b/tmp/cee3cf44-097b-412f-9775-8b566cf5b476_fixed.java
index 66e3d01..454899b 100644
--- a/tmp/684b7687-a017-4062-b724-15cb0b27aa6f_buggy.java
+++ b/tmp/cee3cf44-097b-412f-9775-8b566cf5b476_fixed.java
@@ -1,34 +1,25 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
         case Token.STRING:
         case Token.NUMBER:
         case Token.TRUE:
         case Token.FALSE:
             return true;
-
-      // Binary operators are only valid if both children are valid.
+        case Token.NAME:
+            return defines.contains(val.getString());
         case Token.BITAND:
-      case Token.BITNOT:
         case Token.BITOR:
         case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
+        case Token.PLUS:
+            return isValidDefineValue(val.getFirstChild(), defines) &&
+                   isValidDefineValue(val.getLastChild(), defines);
         case Token.NOT:
         case Token.NEG:
+        case Token.BITNOT:
             return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
-      case Token.NAME:
         case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
-        }
-    }
             return false;
+        default:
+            return false;
+    }
 }
\ No newline at end of file
