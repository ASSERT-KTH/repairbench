diff --git a/tmp/a9c362d6-0ae6-4c1b-946f-3e818f106fdc_buggy.java b/tmp/1ddd1d3f-a1e6-4350-9c43-ba329eeee39e_fixed.java
index 66e3d01..b3065de 100644
--- a/tmp/a9c362d6-0ae6-4c1b-946f-3e818f106fdc_buggy.java
+++ b/tmp/1ddd1d3f-a1e6-4350-9c43-ba329eeee39e_fixed.java
@@ -1,34 +1,56 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
         case Token.STRING:
         case Token.NUMBER:
         case Token.TRUE:
         case Token.FALSE:
             return true;
 
         // Binary operators are only valid if both children are valid.
         case Token.BITAND:
+        case Token.BITOR:
+        case Token.BITXOR:
         case Token.BITNOT:
+        case Token.ADD:
+        case Token.SUB:
+        case Token.MUL:
+        case Token.DIV:
+        case Token.MOD:
+        case Token.LSH:
+        case Token.RSH:
+        case Token.URSH:
+        case Token.BITAND:
         case Token.BITOR:
         case Token.BITXOR:
+        case Token.EQ:
+        case Token.NE:
+        case Token.SHEQ:
+        case Token.SHNE:
+        case Token.LT:
+        case Token.GT:
+        case Token.LE:
+        case Token.GE:
+        case Token.IN:
+        case Token.INSTANCEOF:
+            // Ensure both children are valid.
+            Node left = val.getFirstChild();
+            Node right = left.getNext();
+            return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);
 
-      // Uniary operators are valid if the child is valid.
+        // Unary operators are valid if the child is valid.
         case Token.NOT:
         case Token.NEG:
             return isValidDefineValue(val.getFirstChild(), defines);
 
         // Names are valid if and only if they are defines themselves.
         case Token.NAME:
         case Token.GETPROP:
             if (val.isQualifiedName()) {
                 return defines.contains(val.getQualifiedName());
             }
-    }
             return false;
+
+        default:
+            return false;
+    }
 }
\ No newline at end of file
