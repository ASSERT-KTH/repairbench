diff --git a/tmp/ec7b4177-c5f9-4f61-8f40-93f315d431f1_buggy.java b/tmp/fdb528b6-09c8-4035-913a-3035ee0ebf1d_fixed.java
index 66e3d01..0126ae8 100644
--- a/tmp/ec7b4177-c5f9-4f61-8f40-93f315d431f1_buggy.java
+++ b/tmp/fdb528b6-09c8-4035-913a-3035ee0ebf1d_fixed.java
@@ -1,34 +1,47 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
+ * @return true if the value is valid for a define, otherwise false.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
         case Token.STRING:
         case Token.NUMBER:
         case Token.TRUE:
         case Token.FALSE:
             return true;
 
         // Binary operators are only valid if both children are valid.
         case Token.BITAND:
-      case Token.BITNOT:
         case Token.BITOR:
         case Token.BITXOR:
+        case Token.ADD:
+        case Token.SUB:
+        case Token.MUL:
+        case Token.DIV:
+            Node firstChild = val.getFirstChild();
+            Node secondChild = val.getSecondChild();
+            return firstChild != null && secondChild != null
+                   && isValidDefineValue(firstChild, defines)
+                   && isValidDefineValue(secondChild, defines);
 
-      // Uniary operators are valid if the child is valid.
+        // Unary operators are valid if the child is valid.
         case Token.NOT:
         case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+            Node child = val.getFirstChild();
+            return child != null && isValidDefineValue(child, defines);
 
         // Names are valid if and only if they are defines themselves.
         case Token.NAME:
+            return defines.contains(val.getString());
+
         case Token.GETPROP:
             if (val.isQualifiedName()) {
                 return defines.contains(val.getQualifiedName());
             }
+            break;
     }
     return false;
 }
\ No newline at end of file
