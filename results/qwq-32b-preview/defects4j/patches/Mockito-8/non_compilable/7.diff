diff --git a/tmp/8249fc16-667b-4be0-91a3-d5abe276b479_buggy.java b/tmp/400f12f6-763e-47d1-9bb5-45b13bd34958_fixed.java
index 42b58d0..598862d 100644
--- a/tmp/8249fc16-667b-4be0-91a3-d5abe276b479_buggy.java
+++ b/tmp/400f12f6-763e-47d1-9bb5-45b13bd34958_fixed.java
@@ -1,19 +1,48 @@
+import java.lang.reflect.Type;
+import java.lang.reflect.TypeVariable;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+public class FixedGenericTypeProcessor {
+
+    private Map<TypeVariable, Type> contextualActualTypeParameters = new LinkedHashMap<>();
+    private Set<TypeVariable> visitedTypeVariables = new HashSet<>();
+
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
+            if (visitedTypeVariables.contains(typeParameter)) {
+                continue; // Skip already processed type variables
+            }
+            visitedTypeVariables.add(typeParameter);
+
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+
+            // Recursively process the actual type argument if it's a parameterized type
+            if (actualTypeArgument instanceof ParameterizedType) {
+                registerTypeVariablesOn(actualTypeArgument);
             }
         }
+    }
+
+    private Type boundsOf(WildcardType wildcardType) {
+        // Implementation of boundsOf method
+        return null; // Placeholder, replace with actual implementation
+    }
+
+    // Other methods and classes...
+}
\ No newline at end of file
