diff --git a/tmp/cc9a74f6-d26d-4e45-8a0e-96614d4d7711_buggy.java b/tmp/c4568d3e-f30e-46f0-bd18-ac6875f27b2b_fixed.java
index d5b3da9..a319e6b 100644
--- a/tmp/cc9a74f6-d26d-4e45-8a0e-96614d4d7711_buggy.java
+++ b/tmp/c4568d3e-f30e-46f0-bd18-ac6875f27b2b_fixed.java
@@ -1,7 +1,59 @@
 private void copyAttributes(org.jsoup.nodes.Node source, Element el) {
+    Map<String, Integer> usedKeys = new HashMap<>();
     for (Attribute attribute : source.attributes()) {
-                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]
-                String key = attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]", "");
-                    el.setAttribute(key, attribute.getValue());
+        String key = attribute.getKey();
+        String sanitizedKey = sanitizeAttributeKey(key, usedKeys);
+        el.setAttribute(sanitizedKey, attribute.getValue());
     }
 }
+
+private String sanitizeAttributeKey(String key, Map<String, Integer> usedKeys) {
+    // Ensure the key starts with a valid character
+    if (!key.isEmpty() && !isValidStartChar(key.charAt(0))) {
+        key = "_" + key;
+    }
+
+    // Replace invalid characters in the rest of the key
+    StringBuilder sanitizedBuilder = new StringBuilder();
+    for (int i = 0; i < key.length(); i++) {
+        char c = key.charAt(i);
+        if (i == 0) {
+            if (isValidStartChar(c)) {
+                sanitizedBuilder.append(c);
+            } else {
+                sanitizedBuilder.append('_');
+            }
+        } else {
+            if (isValidChar(c)) {
+                sanitizedBuilder.append(c);
+            } else {
+                sanitizedBuilder.append('_');
+            }
+        }
+    }
+    String sanitizedKey = sanitizedBuilder.toString();
+
+    // Handle empty keys
+    if (sanitizedKey.isEmpty()) {
+        sanitizedKey = "attr";
+    }
+
+    // Handle collisions
+    if (usedKeys.containsKey(sanitizedKey)) {
+        int count = usedKeys.get(sanitizedKey);
+        sanitizedKey += "_" + count;
+        usedKeys.put(sanitizedKey, count + 1);
+    } else {
+        usedKeys.put(sanitizedKey, 1);
+    }
+
+    return sanitizedKey;
+}
+
+private boolean isValidStartChar(char c) {
+    return Character.isLetter(c) || c == '_' || c == ':';
+}
+
+private boolean isValidChar(char c) {
+    return Character.isLetterOrDigit(c) || c == '_' || c == ':' || c == '.' || c == '-';
+}
\ No newline at end of file
