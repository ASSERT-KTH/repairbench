diff --git a/tmp/43707841-9ed4-4cb0-b915-f605a783af43_buggy.java b/tmp/fc0749b7-e7c8-4be0-8545-015e82618b55_fixed.java
index 1bbc082..6a22a01 100644
--- a/tmp/43707841-9ed4-4cb0-b915-f605a783af43_buggy.java
+++ b/tmp/fc0749b7-e7c8-4be0-8545-015e82618b55_fixed.java
@@ -1,36 +1,30 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
     // Check whether we are dealing with UID/GID or SIZE field
-        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
+    final long maxAsOctalChar = (length == TarConstants.UIDLEN) ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
     if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+    // Check if the buffer is large enough for binary representation
+    if (length < 8) {
+        throw new IllegalArgumentException("Buffer length is insufficient for binary representation.");
+    }
+
+    // Handle binary representation
+    if (negative) {
+        // For negative values, store two's complement
+        value = ~value + 1;
+    }
+
+    // Write the value in big-endian format
+    for (int i = length - 1; i >= 0; i--) {
+        buf[offset + i] = (byte) (value & 0xFF);
+        value >>= 8;
     }
-        formatBigIntegerBinary(value, buf, offset, length, negative);
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
     return offset + length;
 }
\ No newline at end of file
