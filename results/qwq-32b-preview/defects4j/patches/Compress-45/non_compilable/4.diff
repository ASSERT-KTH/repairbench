diff --git a/tmp/f371534e-6cee-4850-b750-681e97743ea8_buggy.java b/tmp/98cc4523-0c52-4e9a-839e-fdfb2612c3ea_fixed.java
index 1bbc082..065cce2 100644
--- a/tmp/f371534e-6cee-4850-b750-681e97743ea8_buggy.java
+++ b/tmp/98cc4523-0c52-4e9a-839e-fdfb2612c3ea_fixed.java
@@ -1,36 +1,34 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
-        // Check whether we are dealing with UID/GID or SIZE field
-        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
+    // Determine the maximum value that can be represented as octal in the given length
+    final long maxAsOctalChar = (length == TarConstants.UIDLEN) ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+    if (!negative && value <= maxAsOctalChar) {
+        // Value can be stored as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+    // If the value is negative or too large for octal representation, use binary format
+    if (length < 8) {
+        // Ensure the buffer is at least 8 bytes for binary representation
+        throw new IllegalArgumentException("Buffer length must be at least 8 bytes for binary representation.");
+    }
+
+    // Write the value in binary format
+    for (int i = 0; i < 8; i++) {
+        int byteIndex = offset + length - 1 - i;
+        buf[byteIndex] = (byte) (int) (value & 0xff);
+        value >>= 8;
+    }
+
+    // Handle negative values by setting the highest byte to 0xff or 0x80
+    if (negative) {
+        buf[offset] = (byte) 0xff;
+    } else {
+        buf[offset] = (byte) 0x80;
     }
-        formatBigIntegerBinary(value, buf, offset, length, negative);
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
     return offset + length;
 }
\ No newline at end of file
