diff --git a/tmp/e9f28a0d-980d-41f7-b5a9-80554645fe8c_buggy.java b/tmp/e46c3458-3854-4513-a697-1634d7039421_fixed.java
index 1bbc082..7a056c8 100644
--- a/tmp/e9f28a0d-980d-41f7-b5a9-80554645fe8c_buggy.java
+++ b/tmp/e46c3458-3854-4513-a697-1634d7039421_fixed.java
@@ -1,36 +1,12 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
-    public static int formatLongOctalOrBinaryBytes(
-        final long value, final byte[] buf, final int offset, final int length) {
-
-        // Check whether we are dealing with UID/GID or SIZE field
-        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
-
 final boolean negative = value < 0;
 if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
     return formatLongOctalBytes(value, buf, offset, length);
 }
 
 if (length < 9) {
     formatLongBinary(value, buf, offset, length, negative);
 }
 formatBigIntegerBinary(value, buf, offset, length, negative);
 
 buf[offset] = (byte) (negative ? 0xff : 0x80);
 return offset + length;
\ No newline at end of file
-    }
