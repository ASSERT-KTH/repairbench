diff --git a/tmp/cedc6863-2b24-471c-963c-f62233261764_buggy.java b/tmp/9d771ce5-7d92-4947-bada-2b65b4c764ff_fixed.java
index 1bbc082..0921933 100644
--- a/tmp/cedc6863-2b24-471c-963c-f62233261764_buggy.java
+++ b/tmp/9d771ce5-7d92-4947-bada-2b65b4c764ff_fixed.java
@@ -1,36 +1,26 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
-    public static int formatLongOctalOrBinaryBytes(
-        final long value, final byte[] buf, final int offset, final int length) {
-
-        // Check whether we are dealing with UID/GID or SIZE field
-        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
+public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {
+    // Determine the maximum value that can be represented as octal in the given length
+    final long maxAsOctalChar = (length == TarConstants.UIDLEN) ? TarConstants.MAXID : TarConstants.MAXSIZE;
     
     final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+    
+    if (!negative && value <= maxAsOctalChar) {
+        // Value is non-negative and fits in octal representation
         return formatLongOctalBytes(value, buf, offset, length);
     }
     
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+    // For negative values or values too large for octal, use binary representation
+    if (length < 8) {
+        throw new IllegalArgumentException("Value " + value + " cannot fit in " + length + " byte field.");
     }
-        formatBigIntegerBinary(value, buf, offset, length, negative);
     
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
-        return offset + length;
+    // Write the value in binary format
+    // Assuming big-endian for consistency with other Tar utilities
+    for (int i = 0; i < 8; i++) {
+        int shift = (7 - i) * 8;
+        buf[offset + i] = (byte) ((value >> shift) & 0xFF);
+    }
+    
+    // Return the updated offset
+    return offset + 8;
 }
\ No newline at end of file
