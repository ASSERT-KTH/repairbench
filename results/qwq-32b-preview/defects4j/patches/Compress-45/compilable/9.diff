diff --git a/tmp/f47b6b43-b122-4dec-b58e-3b311955ce6e_buggy.java b/tmp/0340d136-9cdd-4792-b2a8-79eee835cb32_fixed.java
index 1bbc082..1d71e20 100644
--- a/tmp/f47b6b43-b122-4dec-b58e-3b311955ce6e_buggy.java
+++ b/tmp/0340d136-9cdd-4792-b2a8-79eee835cb32_fixed.java
@@ -1,36 +1,32 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
     // Check whether we are dealing with UID/GID or SIZE field
-        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
+    final long maxAsOctalChar = (length == TarConstants.UIDLEN) ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
-        final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
-            return formatLongOctalBytes(value, buf, offset, length);
+    final boolean isNegative = value < 0;
+    long absValue = isNegative ? -value : value;
+
+    if (!isNegative && absValue <= maxAsOctalChar) {
+        // OK to store as octal chars
+        return formatLongOctalBytes(absValue, buf, offset, length);
+    }
+
+    // Check if the binary representation will fit
+    if (length < 8) {
+        throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
+    }
+
+    // Format as binary
+    for (int i = length - 1; i >= 0; i--) {
+        buf[offset + i] = (byte) (absValue & 0xFF);
+        absValue >>= 8;
     }
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+    // Set the sign bit if necessary
+    if (isNegative) {
+        buf[offset] |= 0x80;
     }
-        formatBigIntegerBinary(value, buf, offset, length, negative);
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
     return offset + length;
 }
\ No newline at end of file
