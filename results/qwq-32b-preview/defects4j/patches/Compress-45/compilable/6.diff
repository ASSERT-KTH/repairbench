diff --git a/tmp/4930f0dd-7b3e-4538-b11c-1e86e46ab05c_buggy.java b/tmp/02d3b013-42fe-44cb-a294-ec4d08baa724_fixed.java
index 1bbc082..70cdfdc 100644
--- a/tmp/4930f0dd-7b3e-4538-b11c-1e86e46ab05c_buggy.java
+++ b/tmp/02d3b013-42fe-44cb-a294-ec4d08baa724_fixed.java
@@ -1,36 +1,46 @@
 /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
+ * Write a long integer into a buffer as an octal string if it will fit,
+ * or as a binary number otherwise.
  *
  * Uses {@link #formatUnsignedOctalString} to format
  * the value as an octal string with leading zeros.
  * The converted number is followed by a space.
  *
  * @param value The value to write into the buffer.
  * @param buf The destination buffer.
  * @param offset The starting offset into the buffer.
  * @param length The length of the buffer.
  * @return The updated offset.
  * @throws IllegalArgumentException if the value (and trailer)
  * will not fit in the buffer.
  * @since 1.4
  */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
-        // Check whether we are dealing with UID/GID or SIZE field
-        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
+    // Determine the maximum value that can be represented as octal in the given length
+    final long maxAsOctalChar = (length == TarConstants.UIDLEN) ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+    if (!negative && value <= maxAsOctalChar) {
+        // OK to store as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+    // For binary format, ensure the buffer is large enough to hold the value
+    if (length < 8) {
+        throw new IllegalArgumentException("Buffer too small to store binary value.");
     }
-        formatBigIntegerBinary(value, buf, offset, length, negative);
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
-        return offset + length;
+    // Store the long value in binary format, big-endian
+    for (int i = 0; i < 8; i++) {
+        buf[offset + i] = (byte) (value >>> (56 - i * 8));
+    }
+
+    // If the value was negative, set the highest bit of the first byte
+    if (negative) {
+        buf[offset] |= 0x80;
+    }
+
+    return offset + 8;
 }
\ No newline at end of file
