diff --git a/tmp/3cd69403-fba3-4cda-9cf1-e58acd3817ed_buggy.java b/tmp/07462a46-6ab5-4436-b092-684ac5b66c38_fixed.java
index 1bbc082..da0bfe6 100644
--- a/tmp/3cd69403-fba3-4cda-9cf1-e58acd3817ed_buggy.java
+++ b/tmp/07462a46-6ab5-4436-b092-684ac5b66c38_fixed.java
@@ -1,36 +1,53 @@
 /**
-     * Write an long integer into a buffer as an octal string if this
+ * Write a long integer into a buffer as an octal string if this
  * will fit, or as a binary number otherwise.
  *
  * Uses {@link #formatUnsignedOctalString} to format
  * the value as an octal string with leading zeros.
  * The converted number is followed by a space.
  *
  * @param value The value to write into the buffer.
  * @param buf The destination buffer.
  * @param offset The starting offset into the buffer.
  * @param length The length of the buffer.
  * @return The updated offset.
  * @throws IllegalArgumentException if the value (and trailer)
  * will not fit in the buffer.
  * @since 1.4
  */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
-        // Check whether we are dealing with UID/GID or SIZE field
-        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
+    // Determine if this is UID/GID or SIZE field
+    final long maxAsOctalChar = (length == TarConstants.UIDLEN) ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+    final long absValue = negative ? -value : value;
+
+    // Calculate the number of octal digits needed
+    int octalLength;
+    if (absValue == 0) {
+        octalLength = 1; // "0"
+    } else {
+        octalLength = Long.toString(absValue, 8).length();
+    }
+    if (negative) {
+        octalLength++; // for the minus sign
+    }
+    // Include space at the end
+    octalLength++;
+
+    if (octalLength <= length) {
+        // Fit as octal string
         return formatLongOctalBytes(value, buf, offset, length);
-        }
-
+    } else {
+        // Fall back to binary representation
         if (length < 9) {
             formatLongBinary(value, buf, offset, length, negative);
-        }
+        } else {
             formatBigIntegerBinary(value, buf, offset, length, negative);
-
+        }
         buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
+}
\ No newline at end of file
