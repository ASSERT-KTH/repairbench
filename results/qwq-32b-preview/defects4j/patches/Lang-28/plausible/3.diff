diff --git a/tmp/12cab01c-3d7f-46f0-9162-afcd7c9a290c_buggy.java b/tmp/be9d0419-5bc6-4a82-a59e-bdf52d21fc3f_fixed.java
index 4bbd561..3e6ac5e 100644
--- a/tmp/12cab01c-3d7f-46f0-9162-afcd7c9a290c_buggy.java
+++ b/tmp/be9d0419-5bc6-4a82-a59e-bdf52d21fc3f_fixed.java
@@ -1,37 +1,50 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    if (index >= input.length() || index + 1 >= input.length()) {
+        return 0;
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= input.length()) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
+        if (end >= input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
 
+        String entityStr = input.subSequence(start, end).toString();
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = isHex ? Integer.parseInt(entityStr, 16) : Integer.parseInt(entityStr, 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        if (entityValue >= 0x10000) {
+            // Convert to surrogate pair
+            int inside = entityValue - 0x10000;
+            char highSurrogate = (char) ((inside >> 10) + 0xD800);
+            char lowSurrogate = (char) ((inside & 0x3FF) + 0xDC00);
+            out.write(highSurrogate);
+            out.write(lowSurrogate);
+            return (end - index + 1);
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            return (end - index + 1);
+        }
     }
     return 0;
 }
\ No newline at end of file
