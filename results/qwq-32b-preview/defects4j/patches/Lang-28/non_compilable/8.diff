diff --git a/tmp/bac474b2-d8da-45d7-87dc-92ad00d851f9_buggy.java b/tmp/d5f168c4-6035-4ab2-bf72-0ccf827d1c7d_fixed.java
index 4bbd561..f396511 100644
--- a/tmp/bac474b2-d8da-45d7-87dc-92ad00d851f9_buggy.java
+++ b/tmp/d5f168c4-6035-4ab2-bf72-0ccf827d1c7d_fixed.java
@@ -1,37 +1,50 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Protect from ArrayIndexOutOfBoundsException
+    if (index >= input.length() - 1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+
     int start = index + 2;
     boolean isHex = false;
 
     char firstChar = input.charAt(start);
     if (firstChar == 'x' || firstChar == 'X') {
         start++;
         isHex = true;
     }
 
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
 
+    if (end >= input.length() || input.charAt(end) != ';') {
+        return 0; // No valid entity found
+    }
+
+    String entityStr = input.subSequence(start, end).toString();
     int entityValue;
     try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+        entityValue = isHex ? Integer.parseInt(entityStr, 16) : Integer.parseInt(entityStr, 10);
     } catch (NumberFormatException nfe) {
         return 0;
     }
 
+    if (entityValue <= 0xFFFF) {
         out.write(entityValue);
+    } else {
+        // Convert to surrogate pair and write
+        int supplemental Plane = (entityValue - 0x10000) / 0x400;
+        int supExtra = (entityValue - 0x10000) % 0x400;
+        int highSurrogate = 0xD800 + supplementalPlane;
+        int lowSurrogate = 0xDC00 + supExtra;
+        out.write(highSurrogate);
+        out.write(lowSurrogate);
+    }
+
     return 2 + (end - start) + (isHex ? 1 : 0) + 1;
 }
\ No newline at end of file
-        return 0;
-    }
