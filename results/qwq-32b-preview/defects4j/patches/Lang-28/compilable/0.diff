diff --git a/tmp/ff8abf0e-0155-4f23-9f43-31e80092af0d_buggy.java b/tmp/13251d1d-1377-4845-8419-8a8f8ca32119_fixed.java
index 4bbd561..7512a44 100644
--- a/tmp/ff8abf0e-0155-4f23-9f43-31e80092af0d_buggy.java
+++ b/tmp/13251d1d-1377-4845-8419-8a8f8ca32119_fixed.java
@@ -1,37 +1,50 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Protect from ArrayIndexOutOfBoundsException
+    if (index >= input.length() - 1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+
     int start = index + 2;
     boolean isHex = false;
 
     char firstChar = input.charAt(start);
     if (firstChar == 'x' || firstChar == 'X') {
         start++;
         isHex = true;
     }
 
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
 
+    if (end >= input.length() || input.charAt(end) != ';') {
+        return 0; // No valid entity found
+    }
+
+    String entityStr = input.subSequence(start, end).toString();
     int entityValue;
     try {
         if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+            entityValue = Integer.parseInt(entityStr, 16);
         } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            entityValue = Integer.parseInt(entityStr, 10);
         }
     } catch (NumberFormatException nfe) {
         return 0;
     }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+    // Handle characters outside the BMP
+    char[] chars = Character.toChars(entityValue);
+    for (char c : chars) {
+        out.write(c);
     }
-        return 0;
+
+    // Calculate the number of characters consumed
+    int consumed = end - index + 1; // From '&' to ';'
+    if (isHex) {
+        consumed++; // Account for 'x' or 'X'
+    }
+    return consumed;
 }
\ No newline at end of file
