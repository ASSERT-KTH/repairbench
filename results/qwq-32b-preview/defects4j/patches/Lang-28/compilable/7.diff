diff --git a/tmp/0f2aa493-5b49-4af6-88ad-33cd4709c9a7_buggy.java b/tmp/c5d6d3a0-a7ca-4b85-8ff6-01ec4047c96b_fixed.java
index 4bbd561..12ce0d4 100644
--- a/tmp/0f2aa493-5b49-4af6-88ad-33cd4709c9a7_buggy.java
+++ b/tmp/c5d6d3a0-a7ca-4b85-8ff6-01ec4047c96b_fixed.java
@@ -1,37 +1,62 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // TODO: Protect from ArrayIndexOutOfBoundsException
+    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+
     int start = index + 2;
     boolean isHex = false;
 
+    if (start < input.length()) {
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
+    } else {
+        return 0; // Incomplete entity
+    }
 
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
 
+    if (end >= input.length() || input.charAt(end) != ';') {
+        return 0; // No terminating semicolon
+    }
+
+    String entityStr = input.subSequence(start, end).toString();
     int entityValue;
     try {
         if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+            entityValue = Integer.parseInt(entityStr, 16);
         } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            entityValue = Integer.parseInt(entityStr, 10);
         }
     } catch (NumberFormatException nfe) {
         return 0;
     }
 
+    if (entityValue <= 0xFFFF) {
         out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+    } else {
+        // Convert code point to surrogate pair and write
+        int supplementaryPlane = entityValue - 0x10000;
+        int highSurrogate = 0xD800 + (supplementaryPlane >> 10);
+        int lowSurrogate = 0xDC00 + (supplementaryPlane & 0x3FF);
+        out.write(highSurrogate);
+        out.write(lowSurrogate);
     }
-        return 0;
+
+    // Calculate the number of characters consumed
+    int charsConsumed = end - index + 1; // From '&' to ';'
+    if (isHex) {
+        charsConsumed++; // Account for 'x' or 'X'
+    }
+    return charsConsumed;
 }
\ No newline at end of file
