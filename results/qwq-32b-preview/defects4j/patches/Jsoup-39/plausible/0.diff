diff --git a/tmp/e01a3bdc-8ad0-4fff-b409-b762598d94b2_buggy.java b/tmp/6e7acf25-d5a5-4c4e-b75b-cf865aef30f9_fixed.java
index c4b260c..dd3bbbf 100644
--- a/tmp/e01a3bdc-8ad0-4fff-b409-b762598d94b2_buggy.java
+++ b/tmp/6e7acf25-d5a5-4c4e-b75b-cf865aef30f9_fixed.java
@@ -1,51 +1,64 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    boolean bomPresent = false;
+
+    // Check for UTF-8 BOM
+    if (byteData.remaining() >= 3) {
+        byte bom1 = byteData.get();
+        byte bom2 = byteData.get();
+        byte bom3 = byteData.get();
+        if (bom1 == (byte) 0xEF && bom2 == (byte) 0xBB && bom3 == (byte) 0xBF) {
+            charsetName = "UTF-8";
+            bomPresent = true;
+        } else {
+            byteData.position(byteData.position() - 3); // Rewind to start
+        }
+    }
+
+    if (charsetName == null) { // Determine from meta tags using default charset
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+        if (meta != null) {
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+        if (charsetName == null) {
+            charsetName = defaultCharset;
+        }
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    }
+
+    // Decode byte data with the final determined charset
+    byteData.rewind();
     docData = Charset.forName(charsetName).decode(byteData).toString();
+    if (bomPresent) {
+        docData = docData.substring(1); // Remove BOM character
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
-        if (doc == null) {
+
+    // Parse the document with the correct charset
     doc = parser.parseInput(docData, baseUri);
     doc.outputSettings().charset(charsetName);
-        }
+
     return doc;
 }
\ No newline at end of file
