diff --git a/tmp/f058c83d-a959-4dff-870e-3026d318fa50_buggy.java b/tmp/2cc41299-fd8a-4e1b-91b4-993b3d0d33e3_fixed.java
index c4b260c..4016adb 100644
--- a/tmp/f058c83d-a959-4dff-870e-3026d318fa50_buggy.java
+++ b/tmp/2cc41299-fd8a-4e1b-91b4-993b3d0d33e3_fixed.java
@@ -1,51 +1,90 @@
-    // todo - this is getting gnarly. needs a rewrite.
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+import org.jsoup.select.Elements;
+
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+
+public class DataUtil {
+    private static final String defaultCharset = "UTF-8";
+
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+
+        // Check for BOM and adjust buffer position
+        byteData.mark();
+        if (byteData.remaining() >= 3) {
+            int bom = (byteData.get() & 0xFF) << 16 | (byteData.get() & 0xFF) << 8 | (byteData.get() & 0xFF);
+            if (bom == 0xEFBBBF) { // UTF-8 BOM
+                // BOM found, set charset to UTF-8 if not already set
+                if (charsetName == null) {
+                    charsetName = "UTF-8";
+                }
+                // Skip BOM
+                byteData.reset(); // reset to mark
+                byteData.position(byteData.position() + 3);
+            } else {
+                byteData.reset(); // reset to mark
+            }
+        }
+
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+            // Decode using default charset
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
                 } else {
                     foundCharset = meta.attr("charset");
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
+
+        // If doc is still null, parse it
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
+
         return doc;
     }
+
+    private static String getCharsetFromContentType(String contentType) {
+        if (contentType != null) {
+            String[] parts = contentType.split(";");
+            for (String part : parts) {
+                part = part.trim();
+                if (part.toLowerCase().startsWith("charset=")) {
+                    return part.substring("charset=".length()).trim();
+                }
+            }
+        }
+        return null;
+    }
+}
\ No newline at end of file
