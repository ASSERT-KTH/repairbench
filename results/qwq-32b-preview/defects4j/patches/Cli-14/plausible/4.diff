diff --git a/tmp/aabb3807-91f9-47a7-be1c-47aa45b60bbd_buggy.java b/tmp/ed20f15d-28d3-43e8-bd98-7ff074764f9e_fixed.java
index 71189c3..996eae7 100644
--- a/tmp/aabb3807-91f9-47a7-be1c-47aa45b60bbd_buggy.java
+++ b/tmp/ed20f15d-28d3-43e8-bd98-7ff074764f9e_fixed.java
@@ -1,46 +1,42 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
-        for (final Iterator i = options.iterator(); i.hasNext();) {
-            final Option option = (Option) i.next();
+    for (final Iterator<Option> i = options.iterator(); i.hasNext();) {
+        final Option option = i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+        // Validate if the option is required or present in the command line
+        if (option.isRequired() || commandLine.hasOption(option)) {
             option.validate(commandLine);
         }
 
-            // if the child option is present then validate it
+        // Increment present count if the option is present
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
-                option.validate(commandLine);
         }
     }
 
-        // too many options
+    // Check for too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // Check for too few options
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
-        // validate each anonymous argument
-        for (final Iterator i = anonymous.iterator(); i.hasNext();) {
-            final Option option = (Option) i.next();
+    // Validate each anonymous argument
+    for (final Iterator<Option> i = anonymous.iterator(); i.hasNext();) {
+        final Option option = i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
