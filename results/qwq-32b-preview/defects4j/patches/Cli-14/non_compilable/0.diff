diff --git a/tmp/8dbf7381-80e0-4966-bf90-acffb3d80656_buggy.java b/tmp/74568468-c0a0-43f6-9d77-2f7dd4a2ff6a_fixed.java
index 71189c3..c846bcc 100644
--- a/tmp/8dbf7381-80e0-4966-bf90-acffb3d80656_buggy.java
+++ b/tmp/74568468-c0a0-43f6-9d77-2f7dd4a2ff6a_fixed.java
@@ -1,46 +1,25 @@
-    public void validate(final WriteableCommandLine commandLine)
-        throws OptionException {
-        // number of options found
-        int present = 0;
-
-        // reference to first unexpected option
-        Option unexpected = null;
-
-        for (final Iterator i = options.iterator(); i.hasNext();) {
-            final Option option = (Option) i.next();
-
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
-                option.validate(commandLine);
-            }
-
-            // if the child option is present then validate it
-            if (commandLine.hasOption(option)) {
-                if (++present > maximum) {
-                    unexpected = option;
-
-                    break;
-                }
-
-                option.validate(commandLine);
-            }
-        }
-
-        // too many options
-        if (unexpected != null) {
-            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
-                                      unexpected.getPreferredName());
-        }
-
-        // too few option
-        if (present < minimum) {
-            throw new OptionException(this, ResourceConstants.MISSING_OPTION);
-        }
-
-        // validate each anonymous argument
-        for (final Iterator i = anonymous.iterator(); i.hasNext();) {
-            final Option option = (Option) i.next();
-            option.validate(commandLine);
-        }
+public void testFileValidator() {
+    final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
+    final ArgumentBuilder abuilder = new ArgumentBuilder();
+    final GroupBuilder gbuilder = new GroupBuilder();
+    DefaultOption fileNameOption = obuilder.withShortName("f")
+            .withLongName("file-name").withRequired(true).withDescription(
+                    "name of an existing file").withArgument(
+                    abuilder.withName("file-name").withValidator(
+                            FileValidator.getExistingFileInstance())
+                            .create()).create();
+    Group options = gbuilder.withName("options").withOption(fileNameOption)
+            .create();
+    Parser parser = new Parser();
+    parser.setHelpTrigger("--help");
+    parser.setGroup(options);
+
+    final String fileName = "src/test/org/apache/commons/cli2/bug/BugCLI144Test.java";
+    CommandLine cl = parser
+            .parseAndHelp(new String[] { "--file-name", fileName });
+    assertNotNull(cl);
+    File expectedFile = new File(fileName);
+    Object actualValue = cl.getValue(fileNameOption);
+    assertTrue("Expected a File object", actualValue instanceof File);
+    assertEquals("Wrong file path", expectedFile.getAbsolutePath(), ((File) actualValue).getAbsolutePath());
 }
\ No newline at end of file
