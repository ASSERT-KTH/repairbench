diff --git a/tmp/db1c423a-faf9-45df-8177-0d71f5297951_buggy.java b/tmp/46f6aedd-6789-44b9-9afd-f5c92dbbb51f_fixed.java
index c9da1b7..f5b8047 100644
--- a/tmp/db1c423a-faf9-45df-8177-0d71f5297951_buggy.java
+++ b/tmp/46f6aedd-6789-44b9-9afd-f5c92dbbb51f_fixed.java
@@ -1,33 +1,39 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
-
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
         }
 
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+        // Determine which creator is more specific
+        Class<?> oldClass = oldOne.getRawType();
+        Class<?> newClass = newOne.getRawType();
+        if (oldClass.isAssignableFrom(newClass)) {
+            // New creator is more specific, overwrite the old one
+            _creators[typeIndex] = _fixAccess(newOne);
+            if (explicit) {
+                _explicitCreators |= mask;
+            }
+        } else if (newClass.isAssignableFrom(oldClass)) {
+            // Old creator is more specific, keep it
+            return;
+        } else {
+            // Neither is more specific than the other, throw an exception
             throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
-            }
+                    + " creators: already had " + oldOne + ", encountered " + newOne);
         }
+    } else {
+        _creators[typeIndex] = _fixAccess(newOne);
         if (explicit) {
             _explicitCreators |= mask;
         }
-        _creators[typeIndex] = _fixAccess(newOne);
+    }
 }
\ No newline at end of file
