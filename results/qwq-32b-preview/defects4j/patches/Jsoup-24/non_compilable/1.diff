diff --git a/tmp/45027284-806c-4641-a49b-20d8efc3e5a3_buggy.java b/tmp/a132edbd-523f-46f1-be8f-f4c0939c3346_fixed.java
index b2d53db..32cd0f5 100644
--- a/tmp/45027284-806c-4641-a49b-20d8efc3e5a3_buggy.java
+++ b/tmp/a132edbd-523f-46f1-be8f-f4c0939c3346_fixed.java
@@ -1,34 +1,47 @@
 void read(Tokeniser t, CharacterReader r) {
     if (r.matchesLetter()) {
         String name = r.consumeLetterSequence();
         t.tagPending.appendTagName(name.toLowerCase());
         t.dataBuffer.append(name);
         r.advance();
         return;
     }
 
     if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
         char c = r.consume();
         switch (c) {
             case '\t':
             case '\n':
             case '\f':
             case ' ':
                 t.transition(BeforeAttributeName);
                 break;
             case '/':
                 t.transition(SelfClosingStartTag);
                 break;
             case '>':
                 t.emitTagPending();
                 t.transition(Data);
                 break;
             default:
+                // In script tags, collect everything until </script>
+                if (t.inScriptTag()) {
                     t.dataBuffer.append(c);
+                    // Check if the current position might be the start of </script>
+                    if (r.lookAhead(8).toLowerCase().startsWith("</script")) {
+                        // Potential end tag found, handle accordingly
+                        t.transition(EndTagInScript);
+                    } else {
+                        // Not the end tag, continue collecting data
                         anythingElse(t, r);
+                    }
+                } else {
+                    t.dataBuffer.append(c);
+                    anythingElse(t, r);
+                }
                 break;
         }
     } else {
         anythingElse(t, r);
     }
 }
\ No newline at end of file
