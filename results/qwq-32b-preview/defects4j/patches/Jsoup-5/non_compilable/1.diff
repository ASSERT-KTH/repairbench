diff --git a/tmp/4ba3f5b8-efa8-44f2-905f-94a66f2d0820_buggy.java b/tmp/1a20041d-f2eb-4ca9-ad29-d5266a28fb06_fixed.java
index 39dd8e7..c243db4 100644
--- a/tmp/4ba3f5b8-efa8-44f2-905f-94a66f2d0820_buggy.java
+++ b/tmp/1a20041d-f2eb-4ca9-ad29-d5266a28fb06_fixed.java
@@ -1,30 +1,35 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
 
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
             StringBuilder valueAccum = new StringBuilder();
             // no ' or " to look for, so scan to end tag or space (or end of stream)
             while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+                if (tq.hasNext()) { // Ensure there is a next character before consuming
                     valueAccum.append(tq.consume());
+                } else {
+                    break; // Exit loop if no more characters
+                }
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
     if (key.length() != 0)
         return Attribute.createFromEncoded(key, value);
     else {
+        if (!tq.isEmpty()) { // Ensure tq is not empty before consuming
             tq.consume();
-                
+        }
         return null;
     }
 }
\ No newline at end of file
