diff --git a/tmp/442361dd-8aef-4015-92b0-9624724d392f_buggy.java b/tmp/46dd5fb0-169a-4e2e-88b1-fd10bf2c782f_fixed.java
index 39dd8e7..7370a85 100644
--- a/tmp/442361dd-8aef-4015-92b0-9624724d392f_buggy.java
+++ b/tmp/46dd5fb0-169a-4e2e-88b1-fd10bf2c782f_fixed.java
@@ -1,30 +1,41 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
 
         if (tq.matchChomp(SQ)) {
+            if (tq.indexOf(SQ) != -1) {
                 value = tq.chompTo(SQ);
+            } else {
+                // No closing single quote, handle error or read till end
+                value = tq.chompAll();
+            }
         } else if (tq.matchChomp(DQ)) {
+            if (tq.indexOf(DQ) != -1) {
                 value = tq.chompTo(DQ);
+            } else {
+                // No closing double quote, handle error or read till end
+                value = tq.chompAll();
+            }
         } else {
             StringBuilder valueAccum = new StringBuilder();
             // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+            while (!tq.isEmpty() && !tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace()) {
                 valueAccum.append(tq.consume());
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
     if (key.length() != 0)
         return Attribute.createFromEncoded(key, value);
     else {
+        if (!tq.isEmpty()) {
             tq.consume();
-                
+        }
         return null;
     }
 }
\ No newline at end of file
