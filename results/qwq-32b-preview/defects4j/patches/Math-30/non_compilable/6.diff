diff --git a/tmp/f4dfec16-1fd2-4d29-a3cb-25b8440d4a68_buggy.java b/tmp/3be2c390-56ab-4bc2-a60d-f81988c1dfd0_fixed.java
index 3c69e10..0231421 100644
--- a/tmp/f4dfec16-1fd2-4d29-a3cb-25b8440d4a68_buggy.java
+++ b/tmp/3be2c390-56ab-4bc2-a60d-f81988c1dfd0_fixed.java
@@ -1,27 +1,11 @@
-    /**
-     * @param Umin smallest Mann-Whitney U value
-     * @param n1 number of subjects in first sample
-     * @param n2 number of subjects in second sample
-     * @return two-sided asymptotic p-value
-     * @throws ConvergenceException if the p-value can not be computed
-     * due to a convergence error
-     * @throws MaxCountExceededException if the maximum number of
-     * iterations is exceeded
-     */
-    private double calculateAsymptoticPValue(final double Umin,
-                                             final int n1,
-                                             final int n2)
-        throws ConvergenceException, MaxCountExceededException {
-
-        final int n1n2prod = n1 * n2;
-
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
-
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
-
-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
-
-        return 2 * standardNormal.cumulativeProbability(z);
+@Test
+public void testBigDataSet() throws Exception {
+    double[] d1 = new double[1500];
+    double[] d2 = new double[1500];
+    for (int i = 0; i < 1500; i++) {
+        d1[i] = 2 * i;
+        d2[i] = 2 * i + 1;
+    }
+    double result = testStatistic.mannWhitneyUTest(d1, d2);
+    Assert.assertTrue(result > 0.1);
 }
\ No newline at end of file
