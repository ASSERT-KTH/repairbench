diff --git a/tmp/1d1545b2-63eb-4232-bfbb-05f0b01b480c_buggy.java b/tmp/07699f78-e582-411d-b795-64ee52b31b72_fixed.java
index 3c69e10..6e55fe7 100644
--- a/tmp/1d1545b2-63eb-4232-bfbb-05f0b01b480c_buggy.java
+++ b/tmp/07699f78-e582-411d-b795-64ee52b31b72_fixed.java
@@ -1,27 +1,46 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
+    // Expected value of U
     final double EU = n1n2prod / 2.0;
+    // Variance of U
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+    // Continuity correction
+    double correction = 0.0;
+    if (Umin > EU) {
+        correction = 0.5;
+    } else if (Umin < EU) {
+        correction = -0.5;
+    }
 
+    // Calculate z-score with continuity correction
+    double z = (Umin - EU - correction) / FastMath.sqrt(VarU);
+
+    // Standard normal distribution
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    // Calculate two-sided p-value
+    double pValue;
+    if (z >= 0) {
+        pValue = 2 * (1 - standardNormal.cumulativeProbability(z));
+    } else {
+        pValue = 2 * standardNormal.cumulativeProbability(z);
+    }
+
+    return pValue;
 }
\ No newline at end of file
