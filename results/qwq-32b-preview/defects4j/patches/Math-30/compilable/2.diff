diff --git a/tmp/c2ffd276-79b4-4560-85ba-cecfb5bf8f55_buggy.java b/tmp/ba5ab0fd-dc92-402e-99a2-af64ce8c96af_fixed.java
index 3c69e10..736f06d 100644
--- a/tmp/c2ffd276-79b4-4560-85ba-cecfb5bf8f55_buggy.java
+++ b/tmp/ba5ab0fd-dc92-402e-99a2-af64ce8c96af_fixed.java
@@ -1,27 +1,26 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
-     * @throws ConvergenceException if the p-value can not be computed
-     * due to a convergence error
-     * @throws MaxCountExceededException if the maximum number of
-     * iterations is exceeded
+ * @throws ConvergenceException if the p-value cannot be computed due to a convergence error
+ * @throws MaxCountExceededException if the maximum number of iterations is exceeded
  */
-    private double calculateAsymptoticPValue(final double Umin,
-                                             final int n1,
-                                             final int n2)
+private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    // Correct calculation for two-sided p-value
+    final double pValue = 2 * standardNormal.cumulativeProbability(-FastMath.abs(z));
+
+    return pValue;
 }
\ No newline at end of file
