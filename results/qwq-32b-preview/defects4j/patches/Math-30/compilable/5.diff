diff --git a/tmp/38463a7a-949d-40bc-800e-7cc5d349e029_buggy.java b/tmp/ad19727d-fd8e-4137-bac2-1dc0ef6fa7ed_fixed.java
index 3c69e10..c4df6e9 100644
--- a/tmp/38463a7a-949d-40bc-800e-7cc5d349e029_buggy.java
+++ b/tmp/ad19727d-fd8e-4137-bac2-1dc0ef6fa7ed_fixed.java
@@ -1,27 +1,24 @@
-    /**
-     * @param Umin smallest Mann-Whitney U value
-     * @param n1 number of subjects in first sample
-     * @param n2 number of subjects in second sample
-     * @return two-sided asymptotic p-value
-     * @throws ConvergenceException if the p-value can not be computed
-     * due to a convergence error
-     * @throws MaxCountExceededException if the maximum number of
-     * iterations is exceeded
-     */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
+    // Expected value of U
     final double EU = n1n2prod / 2.0;
+    // Variance of U
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+    // Continuity correction
+    final double correction = Umin < EU ? -0.5 : 0.5;
+    final double z = (Umin - EU + correction) / FastMath.sqrt(VarU);
 
+    // Using the standard normal distribution
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    // Calculate two-sided p-value
+    final double pValue = 2 * (1 - standardNormal.cumulativeProbability(FastMath.abs(z)));
+
+    return pValue;
 }
\ No newline at end of file
