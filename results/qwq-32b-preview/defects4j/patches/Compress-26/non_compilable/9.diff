diff --git a/tmp/0b485b26-770f-491e-b4c8-d16f83aad3ef_buggy.java b/tmp/55d54d10-7e98-4b53-bec4-00bb094eb077_fixed.java
index 4b163f6..f9d59fc 100644
--- a/tmp/0b485b26-770f-491e-b4c8-d16f83aad3ef_buggy.java
+++ b/tmp/55d54d10-7e98-4b53-bec4-00bb094eb077_fixed.java
@@ -1,28 +1,21 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
-            }
+        if (skipped > 0) {
             numToSkip -= skipped;
+        } else {
+            // Fallback to read if skip returns 0
+            byte[] buffer = new byte[(int) Math.min(numToSkip, 8192)];
+            int read;
+            while (numToSkip > 0 && (read = input.read(buffer, 0, (int) Math.min(numToSkip, buffer.length))) != -1) {
+                numToSkip -= read;
+            }
+            if (read == -1) {
+                // End of stream reached
+                break;
+            }
+        }
     }
-            
     return available - numToSkip;
 }
\ No newline at end of file
