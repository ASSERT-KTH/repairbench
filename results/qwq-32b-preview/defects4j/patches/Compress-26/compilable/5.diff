diff --git a/tmp/c99f4b01-a055-4a75-a3aa-c9be669fff33_buggy.java b/tmp/a67dfd7f-58c9-4795-b37f-e84aa9f3dcf9_fixed.java
index 4b163f6..f38134c 100644
--- a/tmp/c99f4b01-a055-4a75-a3aa-c9be669fff33_buggy.java
+++ b/tmp/a67dfd7f-58c9-4795-b37f-e84aa9f3dcf9_fixed.java
@@ -1,28 +1,21 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
         if (skipped == 0) {
+            // Fallback to read if skip returns 0
+            byte[] buffer = new byte[(int) Math.min(numToSkip, 8192)];
+            int read;
+            while ((read = input.read(buffer)) > 0 && numToSkip > 0) {
+                numToSkip -= read;
+            }
+            if (read == -1) {
+                // End of stream reached
                 break;
             }
+        } else {
             numToSkip -= skipped;
         }
-            
+    }
     return available - numToSkip;
 }
\ No newline at end of file
