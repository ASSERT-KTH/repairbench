diff --git a/tmp/427257e6-b0ed-430f-9f93-6abd04577490_buggy.java b/tmp/9a63b035-e267-4f8d-8caa-1a5769ddf117_fixed.java
index 4b163f6..46cdfb9 100644
--- a/tmp/427257e6-b0ed-430f-9f93-6abd04577490_buggy.java
+++ b/tmp/9a63b035-e267-4f8d-8caa-1a5769ddf117_fixed.java
@@ -1,28 +1,30 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
         if (skipped == 0) {
+            // Fall back to reading bytes if skip returns 0
+            byte[] buffer = new byte[(int) Math.min(numToSkip, 8192)];
+            int read;
+            while ((read = input.read(buffer)) > 0) {
+                if (read <= numToSkip) {
+                    numToSkip -= read;
+                } else {
+                    // This should not happen as read should not return more than asked
+                    numToSkip = 0;
                     break;
                 }
+                if (numToSkip == 0) {
+                    break;
+                }
+            }
+            if (read == -1) {
+                // End of stream reached
+                break;
+            }
+        } else {
             numToSkip -= skipped;
         }
-            
+    }
     return available - numToSkip;
 }
\ No newline at end of file
