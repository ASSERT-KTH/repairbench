diff --git a/tmp/8722344f-104d-49fd-948f-279ae0df87b3_buggy.java b/tmp/b0bbf2aa-7819-487b-b1d4-1e7ee1042385_fixed.java
index 4b163f6..9879903 100644
--- a/tmp/8722344f-104d-49fd-948f-279ae0df87b3_buggy.java
+++ b/tmp/b0bbf2aa-7819-487b-b1d4-1e7ee1042385_fixed.java
@@ -1,28 +1,16 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+    long skippedTotal = 0;
+    while (skippedTotal < numToSkip) {
+        long skipped = input.skip(numToSkip - skippedTotal);
         if (skipped == 0) {
-                break;
+            // If skip returns 0, try reading to consume bytes
+            int b;
+            while (skippedTotal < numToSkip && (b = input.read()) != -1) {
+                skippedTotal++;
             }
-            numToSkip -= skipped;
+            break; // Exit the loop after trying to read
         }
-            
-        return available - numToSkip;
+        skippedTotal += skipped;
+    }
+    return skippedTotal;
 }
\ No newline at end of file
