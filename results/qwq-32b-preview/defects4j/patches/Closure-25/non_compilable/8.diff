diff --git a/tmp/559f8e32-6538-487e-923f-c901020070f5_buggy.java b/tmp/46d69ef0-3f83-463a-ba7b-3054adbb5f05_fixed.java
index b98f0a7..5e713b3 100644
--- a/tmp/559f8e32-6538-487e-923f-c901020070f5_buggy.java
+++ b/tmp/46d69ef0-3f83-463a-ba7b-3054adbb5f05_fixed.java
@@ -1,29 +1,20 @@
-  private FlowScope traverseNew(Node n, FlowScope scope) {
-
-    Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
 JSType constructorType = constructor.getJSType();
 JSType type = null;
 if (constructorType != null) {
   constructorType = constructorType.restrictByNotNullOrUndefined();
   if (constructorType.isUnknownType()) {
     type = getNativeType(UNKNOWN_TYPE);
   } else {
     FunctionType ct = constructorType.toMaybeFunctionType();
     if (ct == null && constructorType instanceof FunctionType) {
       // If constructorType is a NoObjectType, then toMaybeFunctionType will
       // return null. But NoObjectType implements the FunctionType
       // interface, precisely because it can validly construct objects.
       ct = (FunctionType) constructorType;
     }
     if (ct != null && ct.isConstructor()) {
       type = ct.getInstanceType();
     }
   }
 }
 n.setJSType(type);
\ No newline at end of file
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
-    return scope;
-  }
