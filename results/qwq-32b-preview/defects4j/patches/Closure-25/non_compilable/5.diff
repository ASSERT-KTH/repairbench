diff --git a/tmp/e9bb9074-aee1-4797-8933-dc9e906340b1_buggy.java b/tmp/25d2213f-5d2e-4de7-b1d6-0b1f41f20053_fixed.java
index b98f0a7..2a94f9b 100644
--- a/tmp/e9bb9074-aee1-4797-8933-dc9e906340b1_buggy.java
+++ b/tmp/25d2213f-5d2e-4de7-b1d6-0b1f41f20053_fixed.java
@@ -1,29 +1,30 @@
-  private FlowScope traverseNew(Node n, FlowScope scope) {
 
-    Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
-    JSType constructorType = constructor.getJSType();
-    JSType type = null;
-    if (constructorType != null) {
-      constructorType = constructorType.restrictByNotNullOrUndefined();
-      if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
-      } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
-        }
 if (ct != null && ct.isConstructor()) {
+
  type = ct.getInstanceType();
+
+ 
+
+ // Get parameter types
+
+ FunctionType constructorFunction = ct.getFunctionType();
+
+ JSType[] paramTypes = constructorFunction.getParameterTypes();
+
+ 
+
+ // Assign parameter types to argument nodes
+
+ Node argNode = constructor.getNext();
+
+ for (int i = 0; i < paramTypes.length; i++) {
+
+ if (argNode == null) break;
+
+ argNode.setJSType(paramTypes[i]);
+
+ argNode = argNode.getNext();
+
  }
-      }
-    }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
-    return scope;
+
 }
