diff --git a/tmp/274db5d3-10c8-468b-a95a-8502492c39da_buggy.java b/tmp/c3e443cb-714f-40cc-a62d-f682967e5826_fixed.java
index b98f0a7..55302c2 100644
--- a/tmp/274db5d3-10c8-468b-a95a-8502492c39da_buggy.java
+++ b/tmp/c3e443cb-714f-40cc-a62d-f682967e5826_fixed.java
@@ -1,29 +1,49 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
+
+  // Get the function type of the constructor
+  FunctionType ct = constructor.getJSType().toMaybeFunctionType();
+  if (ct != null) {
+    // Get the parameter types
+    JSType[] paramTypes = ct.getParameterTypes();
+
+    // Traverse each argument and set its type based on the parameter type
+    for (int i = 0; i < n.getChildCount() - 1; i++) {
+      Node arg = n.getChildAtIndex(i + 1);
+      if (i < paramTypes.length) {
+        JSType paramType = paramTypes[i];
+        if (paramType != null) {
+          scope = scope.setUpperTypeOf(arg, paramType);
+        }
+      }
+      scope = traverse(arg, scope);
+    }
+  } else {
+    // Traverse remaining arguments without type inference
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
+  }
   return scope;
 }
\ No newline at end of file
