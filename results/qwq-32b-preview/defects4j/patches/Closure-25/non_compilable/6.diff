diff --git a/tmp/77ddc183-23ea-470b-9186-e4472b136f46_buggy.java b/tmp/40882d5a-4fc0-4005-97a3-125bb6cd9f08_fixed.java
index b98f0a7..bda31c4 100644
--- a/tmp/77ddc183-23ea-470b-9186-e4472b136f46_buggy.java
+++ b/tmp/40882d5a-4fc0-4005-97a3-125bb6cd9f08_fixed.java
@@ -1,29 +1,48 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
+  
+  // Propagate type information back to the arguments
+  if (type != null && constructorType != null) {
+    FunctionType ct = constructorType.toMaybeFunctionType();
+    if (ct != null && ct.isConstructor()) {
+      Node arg = constructor.getFirstChild();
+      int paramIndex = 0;
+      for (JSType paramType : ct.getParameterTypes()) {
+        if (arg != null) {
+          JSType inferredType = scope.getTypeOfFreeVar(arg);
+          if (inferredType == null || inferredType.isUnknownType()) {
+            scope = scope.setFreeVarType(arg, paramType);
+          }
+          arg = arg.getNext();
+        }
+        paramIndex++;
+      }
+    }
+  }
+  
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
