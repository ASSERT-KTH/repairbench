diff --git a/tmp/a808ace9-bdba-45f5-856b-e8cd36b3d6e4_buggy.java b/tmp/2620c118-f210-4c3b-a43b-4cbdaeefdd77_fixed.java
index b98f0a7..32922b1 100644
--- a/tmp/a808ace9-bdba-45f5-856b-e8cd36b3d6e4_buggy.java
+++ b/tmp/2620c118-f210-4c3b-a43b-4cbdaeefdd77_fixed.java
@@ -1,29 +1,66 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+
+                // Retrieve the constructor's parameter types
+                List<JSType> paramTypes = ct.getParameterTypes();
+                List<String> paramNames = ct.getParameterNames();
+
+                // Get the arguments passed to the 'new' operator
+                NodeList<Node> args = n.getChildren();
+                args.remove(constructor); // Remove the constructor node
+
+                // Ensure the number of arguments matches the number of parameters
+                int numArgs = args.size();
+                int numParams = paramTypes.size();
+                for (int i = 0; i < numArgs && i < numParams; i++) {
+                    Node arg = args.get(i);
+                    JSType paramType = paramTypes.get(i);
+                    String paramName = paramNames.get(i);
+
+                    // Perform backwards type inference
+                    if (paramType != null && arg.isName()) {
+                        // Update the type of the variable being passed as an argument
+                        String varName = arg.getString();
+                        if (scope.hasLocalVar(varName)) {
+                            Var var = scope.getVar(varName);
+                            if (var != null) {
+                                JSType currentType = var.getType();
+                                if (currentType != null) {
+                                    // Intersect the current type with the parameter type
+                                    JSType newType = currentType.intersection(paramType);
+                                    var.setType(newType);
+                                } else {
+                                    var.setType(paramType);
                                 }
                             }
                         }
+                    }
+                }
+            }
+        }
+    }
+
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
