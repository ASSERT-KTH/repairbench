diff --git a/tmp/8cf75b4f-b228-48e5-ab94-48196130947d_buggy.java b/tmp/85d83530-d760-499d-9da2-5befcb175b6b_fixed.java
index b98f0a7..72db917 100644
--- a/tmp/8cf75b4f-b228-48e5-ab94-48196130947d_buggy.java
+++ b/tmp/85d83530-d760-499d-9da2-5befcb175b6b_fixed.java
@@ -1,29 +1,35 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+        // Get parameter types
+        List<JSType> paramTypes = ct.getParamTypes();
+        // Traverse arguments with expected types
+        int i = 0;
         for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+          JSType expectedType = i < paramTypes.size() ? paramTypes.get(i) : null;
+          FlowScope argScope = scope.inTypeClone(expectedType);
+          scope = traverse(arg, argScope);
+          i++;
         }
+      }
+    }
+  }
+  n.setJSType(type);
   return scope;
 }
\ No newline at end of file
