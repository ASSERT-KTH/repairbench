diff --git a/tmp/adf54430-3ae1-4793-800c-640fe437e892_buggy.java b/tmp/66af6585-6df8-47a4-9582-007efcbb8156_fixed.java
index b98f0a7..5b2dd00 100644
--- a/tmp/adf54430-3ae1-4793-800c-640fe437e892_buggy.java
+++ b/tmp/66af6585-6df8-47a4-9582-007efcbb8156_fixed.java
@@ -1,29 +1,40 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+        // Get the parameter types of the constructor
+        NodeList<Param> params = ct.getParams();
+        int argIndex = 0;
         for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+          if (argIndex < params.size()) {
+            Param param = params.get(argIndex);
+            JSType paramType = param.getType();
+            if (paramType != null) {
+              // Infer the type of the argument based on the parameter type
+              scope = setBackwardsType(arg, paramType, scope);
+            }
+          }
           scope = traverse(arg, scope);
+          argIndex++;
         }
+      }
+    }
+  }
+  n.setJSType(type);
   return scope;
 }
\ No newline at end of file
