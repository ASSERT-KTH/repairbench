diff --git a/tmp/8be76605-6926-4f95-8597-741488aef015_buggy.java b/tmp/e62825d3-ff49-47aa-81b0-1bcbd970919a_fixed.java
index b98f0a7..0306016 100644
--- a/tmp/8be76605-6926-4f95-8597-741488aef015_buggy.java
+++ b/tmp/e62825d3-ff49-47aa-81b0-1bcbd970919a_fixed.java
@@ -1,29 +1,80 @@
+
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
+
   scope = traverse(constructor, scope);
+
   JSType constructorType = constructor.getJSType();
+
   JSType type = null;
+
   if (constructorType != null) {
+
     constructorType = constructorType.restrictByNotNullOrUndefined();
+
     if (constructorType.isUnknownType()) {
+
       type = getNativeType(UNKNOWN_TYPE);
+
     } else {
+
       FunctionType ct = constructorType.toMaybeFunctionType();
+
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+
         ct = (FunctionType) constructorType;
+
       }
+
       if (ct != null && ct.isConstructor()) {
+
         type = ct.getInstanceType();
+
+        // Get parameter types from the constructor function
+
+        List<JSType> paramTypes = ct.getParameterTypes();
+
+        // Get argument nodes
+
+        NodeList<Node> args = n.getChildren();
+
+        args.removeFirst(); // Remove the constructor node
+
+        // Set types for argument nodes based on parameter types
+
+        for (int i = 0; i < args.size(); i++) {
+
+          Node arg = args.get(i);
+
+          if (i < paramTypes.size()) {
+
+            JSType paramType = paramTypes.get(i);
+
+            scope = setArgumentType(arg, paramType, scope);
+
+          } else {
+
+            // Handle extra arguments if needed
+
           }
+
         }
+
       }
+
+    }
+
+  }
+
   n.setJSType(type);
+
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
     scope = traverse(arg, scope);
+
   }
+
   return scope;
+
 }
