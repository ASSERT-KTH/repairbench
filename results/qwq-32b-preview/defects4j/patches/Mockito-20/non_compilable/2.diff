diff --git a/tmp/7d36f6ba-9b22-4ab7-b99d-de14a9bbd05f_buggy.java b/tmp/c86fc678-3a3e-422c-a6d8-fab494281586_fixed.java
index f9a9b5b..cc4ba55 100644
--- a/tmp/7d36f6ba-9b22-4ab7-b99d-de14a9bbd05f_buggy.java
+++ b/tmp/c86fc678-3a3e-422c-a6d8-fab494281586_fixed.java
@@ -1,30 +1,51 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Use the appropriate instantiator based on settings
+        if (settings.useConstructor()) {
+            // Use constructor provided in settings
+            Constructor<?> constructor = settings.getConstructor();
+            if (constructor == null) {
+                // Fallback to default constructor if none specified
+                constructor = settings.getTypeToMock().getDeclaredConstructor();
+            }
+            constructor.setAccessible(true);
+            if (settings.getOuterInstance() != null) {
+                // For inner classes, set the outer instance
+                mockInstance = (T) constructor.newInstance(settings.getOuterInstance());
+            } else {
+                mockInstance = (T) constructor.newInstance();
+            }
+        } else {
+            // Use default instantiator
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+        
+        // Set the mock interceptor
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
         
+        // Ensure the mock is assignable to the mocked type
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getName() + "'", e);
     }
 }
\ No newline at end of file
