diff --git a/tmp/c8d16293-c6c6-4eb5-b50a-11d5120afbaa_buggy.java b/tmp/d633c0f1-fdf9-4fa9-8ca8-5f9406965eb1_fixed.java
index f9a9b5b..8623184 100644
--- a/tmp/c8d16293-c6c6-4eb5-b50a-11d5120afbaa_buggy.java
+++ b/tmp/d633c0f1-fdf9-4fa9-8ca8-5f9406965eb1_fixed.java
@@ -1,30 +1,48 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
-                settings.getTypeToMock(),
-                settings.getExtraInterfaces()
-        );
-        T mockInstance = null;
+    
+    // Obtain the mocked type and extra interfaces
+    Class<?> typeToMock = settings.getTypeToMock();
+    List<Class<?>> extraInterfaces = settings.getExtraInterfaces();
+    
+    // Generate the mocked proxy type using Byte Buddy
+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(typeToMock, extraInterfaces);
+    
+    T mockInstance;
     try {
+        // Instantiate the mock instance, considering constructors and outer instances for inner classes
+        if (settings.hasConstructor() || typeToMock.isInterface()) {
+            // If using constructor or mocking an interface, use the specified constructor arguments
+            Constructor<?> constructor = typeToMock.getDeclaredConstructor(settings.getConstructorArgumentTypes());
+            constructor.setAccessible(true);
+            Object[] args = settings.getConstructorArguments();
+            mockInstance = mockedProxyType.cast(constructor.newInstance(args));
+        } else {
+            // Otherwise, use the default instantiation mechanism
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+        
+        // Set the mock interceptor for method interception
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
         
+        // Ensure the mock is assignable to the mocked type
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
+    } catch (InstantiationException | IllegalAccessException | IllegalArgumentException
+             | InvocationTargetException | NoSuchMethodException | SecurityException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + typeToMock.getName() + "'", e);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
+                "  class to mock : " + describeClass(typeToMock),
+                "  created class : " + describeClass(mockedProxyType),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
     }
 }
\ No newline at end of file
