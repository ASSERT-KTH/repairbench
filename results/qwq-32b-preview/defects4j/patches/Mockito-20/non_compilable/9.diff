diff --git a/tmp/7df8da25-976c-4ea1-b0cf-9dc1a50b57e5_buggy.java b/tmp/b076b242-0f6e-4648-9877-644e39cf33e9_fixed.java
index f9a9b5b..c939a64 100644
--- a/tmp/7df8da25-976c-4ea1-b0cf-9dc1a50b57e5_buggy.java
+++ b/tmp/b076b242-0f6e-4648-9877-644e39cf33e9_fixed.java
@@ -1,30 +1,45 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
-                settings.getTypeToMock(),
-                settings.getExtraInterfaces()
-        );
-        T mockInstance = null;
+
+    // Ensure that the type to mock and extra interfaces are correctly handled
+    ClassLoader classLoader = settings.getTypeToMock().getClassLoader();
+    List<Class<?>> extraInterfaces = settings.getExtraInterfaces();
+
+    // Define the dynamic type for the mock
+    DynamicType.Builder<T> builder = new ByteBuddy()
+        .subclass(settings.getTypeToMock())
+        .implement(extraInterfaces.toArray(new Class[0]))
+        .method(ElementMatchers.isNotConstructor())
+        .intercept(MethodDelegation.to(new MockMethodInterceptor(asInternalMockHandler(handler), settings)));
+
+    // Handle constructors based on settings
+    if (settings.useConstructor()) {
+        builder = builder.constructor(ElementMatchers.any())
+                         .intercept(ConstructorCall.invoke();
+    } else {
+        builder = builder.defineConstructor(Modifier.PUBLIC)
+                         .intercept(FixedValue.value(null));
+    }
+
+    // Create the mocked type
+    Class<T> mockedProxyType = builder.make()
+                                      .load(classLoader, ClassLoadingStrategy.Default.INJECTION)
+                                      .getLoaded();
+
+    // Instantiate the mock
+    T mockInstance;
     try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+        if (settings.useConstructor()) {
+            mockInstance = mockedProxyType.getConstructor().newInstance();
+        } else {
+            mockInstance = mockedProxyType.newInstance();
+        }
+    } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getName() + "'", e);
+    }
 
+    // Ensure the mock is assignable to the mocked type
     return ensureMockIsAssignableToMockedType(settings, mockInstance);
-        } catch (ClassCastException cce) {
-            throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
-                    "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
-                    ""
-            ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
-        }
 }
\ No newline at end of file
