diff --git a/tmp/5a81df3d-1f71-4b33-a24f-1f776cd345e7_buggy.java b/tmp/2b9abd63-787e-470e-aa6a-32e9d795ed75_fixed.java
index b05b859..db04651 100644
--- a/tmp/5a81df3d-1f71-4b33-a24f-1f776cd345e7_buggy.java
+++ b/tmp/2b9abd63-787e-470e-aa6a-32e9d795ed75_fixed.java
@@ -1,61 +1,90 @@
-  /**
-   * Initialize the compiler options. Only necessary if you're not doing
-   * a normal compile() job.
-   */
+import com.google.javascript.jscomp.CompilerOptions;
+import com.google.javascript.jscomp.DiagnosticsGroups;
+import com.google.javascript.jscomp.WarningsGuard;
+import com.google.javascript.jscomp.WarningLevel;
+
+import java.util.List;
+import java.util.Map;
+
+public class JscompErrorOverridesWarningsGuard implements WarningsGuard {
+    private final WarningsGuard delegate;
+    private final CompilerOptions options;
+
+    public JscompErrorOverridesWarningsGuard(WarningsGuard delegate, CompilerOptions options) {
+        this.delegate = delegate;
+        this.options = options;
+    }
+
+    @Override
+    public WarningLevel getCheckLevel(DiagnosticsGroups group) {
+        WarningLevel level = delegate.getCheckLevel(group);
+        if (options.jscompErrors.containsKey(group.getName())) {
+            return WarningLevel.ERROR;
+        }
+        return level;
+    }
+}
+
+public class YourCompilerClass {
+    private WarningsGuard warningsGuard;
+    private CompilerOptions options;
+
     public void initOptions(CompilerOptions options) {
         this.options = options;
         if (errorManager == null) {
             if (outStream == null) {
                 setErrorManager(
                     new LoggerErrorManager(createMessageFormatter(), logger));
             } else {
                 PrintStreamErrorManager printer =
                     new PrintStreamErrorManager(createMessageFormatter(), outStream);
                 printer.setSummaryDetailLevel(options.summaryDetailLevel);
                 setErrorManager(printer);
             }
         }
 
         // DiagnosticGroups override the plain checkTypes option.
-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
+        if (options.enables(DiagnosticsGroups.CHECK_TYPES)) {
             options.checkTypes = true;
-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
+        } else if (options.disables(DiagnosticsGroups.CHECK_TYPES)) {
             options.checkTypes = false;
         } else if (!options.checkTypes) {
             // If DiagnosticGroups did not override the plain checkTypes
             // option, and checkTypes is enabled, then turn off the
             // parser type warnings.
             options.setWarningLevel(
-          DiagnosticGroup.forType(
-              RhinoErrorReporter.TYPE_PARSE_ERROR),
-          CheckLevel.OFF);
+                DiagnosticsGroups.getTypeParseErrorGroup(),
+                WarningLevel.OFF);
         }
 
         if (options.checkGlobalThisLevel.isOn()) {
             options.setWarningLevel(
-          DiagnosticGroups.GLOBAL_THIS,
+                DiagnosticsGroups.GLOBAL_THIS,
                 options.checkGlobalThisLevel);
         }
 
         // Initialize the warnings guard.
         List<WarningsGuard> guards = Lists.newArrayList();
         guards.add(
             new SuppressDocWarningsGuard(
                 getDiagnosticGroups().getRegisteredGroups()));
         guards.add(options.getWarningsGuard());
 
-
         // All passes must run the variable check. This synthesizes
         // variables later so that the compiler doesn't crash. It also
         // checks the externs file for validity. If you don't want to warn
         // about missing variable declarations, we shut that specific
         // error off.
         if (!options.checkSymbols &&
             (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
-      guards.add(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+                DiagnosticsGroups.CHECK_VARIABLES))) {
+            guards.add(new DiagnosticsGroupWarningsGuard(
+                DiagnosticsGroups.CHECK_VARIABLES, WarningLevel.OFF));
         }
 
         this.warningsGuard = new ComposeWarningsGuard(guards);
+
+        // Ensure that jscomp_errors are treated as errors regardless of the warning level.
+        this.warningsGuard = new JscompErrorOverridesWarningsGuard(this.warningsGuard, options);
+    }
 }
\ No newline at end of file
