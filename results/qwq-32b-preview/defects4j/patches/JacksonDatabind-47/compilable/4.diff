diff --git a/tmp/956c5dff-2971-498a-8eb3-feb6520a70af_buggy.java b/tmp/adef3301-a7f9-4b72-9c56-5f73688ec2a3_fixed.java
index f9fd9ef..2e07beb 100644
--- a/tmp/956c5dff-2971-498a-8eb3-feb6520a70af_buggy.java
+++ b/tmp/adef3301-a7f9-4b72-9c56-5f73688ec2a3_fixed.java
@@ -1,108 +1,93 @@
 /**
  * Method called to find out possible type refinements to use
  * for deserialization.
  *
  * @since 2.7
  */
 public JavaType refineSerializationType(final MapperConfig<?> config,
         final Annotated a, final JavaType baseType) throws JsonMappingException
 {
     JavaType type = baseType;
     final TypeFactory tf = config.getTypeFactory();
     
-        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
-        //    now-deprecated secondary methods; this because while
-        //    direct sub-class not yet retrofitted may only override
-        //    those methods. With 2.8 or later we may consider removal
-        //    of these methods
-
-        
-        // Ok: start by refining the main type itself; common to all types
+    // Refine the main type
     Class<?> serClass = findSerializationType(a);
     if (serClass != null) {
-            if (type.hasRawClass(serClass)) {
-                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
-                //    static typing this way
-                type = type.withStaticTyping();
-            } else {
+        if (serClass.isAssignableFrom(type.getRawClass())) {
+            // specified class is a super-type: generalize
             try {
-                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                    //   may be needed here too in future?
                 type = tf.constructGeneralizedType(type, serClass);
-                } catch (IllegalArgumentException iae) {
+            } catch (IllegalArgumentException e) {
                 throw new JsonMappingException(null,
-                            String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
-                                    type, serClass.getName(), a.getName(), iae.getMessage()),
-                                    iae);
+                        String.format("Failed to generalize type %s to %s: %s",
+                                type, serClass.getName(), e.getMessage()), e);
             }
+        } else if (type.getRawClass().isAssignableFrom(serClass)) {
+            // specified class is a sub-type: specialize
+            try {
+                type = tf.constructSpecializedType(type, serClass);
+            } catch (IllegalArgumentException e) {
+                throw new JsonMappingException(null,
+                        String.format("Failed to specialize type %s to %s: %s",
+                                type, serClass.getName(), e.getMessage()), e);
+            }
+        } else {
+            throw new JsonMappingException(null,
+                    String.format("Cannot refine serialization type %s into %s; types not related",
+                            type, serClass.getName()));
         }
     }
+    
     // Then further processing for container types
 
     // First, key type (for Maps, Map-like types):
     if (type.isMapLikeType()) {
         JavaType keyType = type.getKeyType();
         Class<?> keyClass = findSerializationKeyType(a, keyType);
         if (keyClass != null) {
-                if (keyType.hasRawClass(keyClass)) {
+            if (keyClass.isAssignableFrom(keyType.getRawClass())) {
                 keyType = keyType.withStaticTyping();
-                } else {
-                    Class<?> currRaw = keyType.getRawClass();
+            } else if (keyType.getRawClass().isAssignableFrom(keyClass)) {
                 try {
-                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                        //   specialize (narrow) type sometimes, even if more commonly opposite
-                        //   is needed.
-                        if (keyClass.isAssignableFrom(currRaw)) { // common case
-                            keyType = tf.constructGeneralizedType(keyType, keyClass);
-                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
                     keyType = tf.constructSpecializedType(keyType, keyClass);
+                } catch (IllegalArgumentException iae) {
+                    throw new JsonMappingException(null,
+                            String.format("Failed to specialize key type of %s with concrete-type annotation (value %s), from '%s': %s",
+                                    type, keyClass.getName(), a.getName(), iae.getMessage()),
+                                    iae);
+                }
             } else {
                 throw new JsonMappingException(null,
                         String.format("Can not refine serialization key type %s into %s; types not related",
                                 keyType, keyClass.getName()));
             }
-                    } catch (IllegalArgumentException iae) {
-                        throw new JsonMappingException(null,
-                                String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                        type, keyClass.getName(), a.getName(), iae.getMessage()),
-                                        iae);
-                    }
-                }
             type = ((MapLikeType) type).withKeyType(keyType);
         }
     }
 
     JavaType contentType = type.getContentType();
     if (contentType != null) { // collection[like], map[like], array, reference
         // And then value types for all containers:
         Class<?> contentClass = findSerializationContentType(a, contentType);
         if (contentClass != null) {
-               if (contentType.hasRawClass(contentClass)) {
+            if (contentClass.isAssignableFrom(contentType.getRawClass())) {
                 contentType = contentType.withStaticTyping();
-               } else {
-                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-                   //   specialize (narrow) type sometimes, even if more commonly opposite
-                   //   is needed.
-                   Class<?> currRaw = contentType.getRawClass();
+            } else if (contentType.getRawClass().isAssignableFrom(contentClass)) {
                 try {
-                       if (contentClass.isAssignableFrom(currRaw)) { // common case
-                           contentType = tf.constructGeneralizedType(contentType, contentClass);
-                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
                     contentType = tf.constructSpecializedType(contentType, contentClass);
+                } catch (IllegalArgumentException iae) {
+                    throw new JsonMappingException(null,
+                            String.format("Failed to specialize content type of %s with concrete-type annotation (value %s), from '%s': %s",
+                                    type, contentClass.getName(), a.getName(), iae.getMessage()),
+                                    iae);
+                }
             } else {
                 throw new JsonMappingException(null,
                         String.format("Can not refine serialization content type %s into %s; types not related",
                                 contentType, contentClass.getName()));
             }
-                   } catch (IllegalArgumentException iae) { // shouldn't really happen
-                       throw new JsonMappingException(null,
-                               String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                       type, contentClass.getName(), a.getName(), iae.getMessage()),
-                                       iae);
-                   }
-               }
             type = type.withContentType(contentType);
         }
     }
     return type;
 }
\ No newline at end of file
