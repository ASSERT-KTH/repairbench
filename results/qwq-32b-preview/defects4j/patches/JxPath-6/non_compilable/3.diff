diff --git a/tmp/283faa35-96f2-447f-8adc-0f7f6626e959_buggy.java b/tmp/292ff020-a770-4565-8705-b9ecf39afee5_fixed.java
index f650982..015480c 100644
--- a/tmp/283faa35-96f2-447f-8adc-0f7f6626e959_buggy.java
+++ b/tmp/292ff020-a770-4565-8705-b9ecf39afee5_fixed.java
@@ -1,42 +1,82 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
+    // Uncomment for debugging
     // System.err.println("COMPARING: " +
     //     (l == null ? "null" : l.getClass().getName()) + " " +
     //     (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+    if (l instanceof Iterator && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+    if (!(l instanceof Iterator) && r instanceof Iterator) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    return equalObjects(l, r);
+}
+
+/**
+ * Checks if the iterator contains the given value
+ */
+protected boolean contains(Iterator iter, Object value) {
+    while (iter.hasNext()) {
+        Object item = iter.next();
+        if (item instanceof NodePointer) {
+            String itemValue = ((NodePointer) item).getStringValue();
+            if (itemValue.equals(value)) {
+                return true;
+            }
+        } else {
+            if (item.equals(value)) {
+                return true;
+            }
+        }
+    }
+    return false;
+}
+
+/**
+ * Compares two objects for equality
+ */
+protected boolean equalObjects(Object l, Object r) {
+    if (l == null) {
+        return r == null;
+    }
+    if (r == null) {
+        return false;
+    }
+    if (l instanceof NodePointer) {
+        l = ((NodePointer) l).getStringValue();
+    }
+    if (r instanceof NodePointer) {
+        r = ((NodePointer) r).getStringValue();
+    }
+    return l.equals(r);
 }
\ No newline at end of file
