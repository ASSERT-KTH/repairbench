diff --git a/tmp/d5ed91ae-e2a5-490a-98f1-853d04304fd9_buggy.java b/tmp/412dc9bf-099e-4901-a862-df2bbb548ea9_fixed.java
index f650982..cfb82d6 100644
--- a/tmp/d5ed91ae-e2a5-490a-98f1-853d04304fd9_buggy.java
+++ b/tmp/412dc9bf-099e-4901-a862-df2bbb548ea9_fixed.java
@@ -1,42 +1,68 @@
-    /**
-     * Compares two values
-     */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+        if (l instanceof Iterator && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+        if (!(l instanceof Iterator) && r instanceof Iterator) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+            return iteratorsEqual((Iterator) l, (Iterator) r);
         }
-        return equal(l, r);
+        return equalObjects(l, r);
+    }
+
+    private boolean contains(Iterator iter, Object value) {
+        while (iter.hasNext()) {
+            Object item = iter.next();
+            if (equalObjects(item, value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean iteratorsEqual(Iterator iter1, Iterator iter2) {
+        while (iter1.hasNext() && iter2.hasNext()) {
+            if (!equalObjects(iter1.next(), iter2.next())) {
+                return false;
+            }
+        }
+        return !iter1.hasNext() && !iter2.hasNext();
+    }
+
+    private boolean equalObjects(Object a, Object b) {
+        if (a == b) {
+            return true;
+        }
+        if (a == null || b == null) {
+            return false;
+        }
+        if (a.equals(b)) {
+            return true;
+        }
+        // Additional checks can be added here if necessary
+        return false;
     }
\ No newline at end of file
