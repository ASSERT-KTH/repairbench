diff --git a/tmp/7d0feb25-4267-4533-82dc-b8a33e5b08a0_buggy.java b/tmp/6546a759-c5e5-45cc-bff7-a9c30a1985a0_fixed.java
index f650982..281b549 100644
--- a/tmp/7d0feb25-4267-4533-82dc-b8a33e5b08a0_buggy.java
+++ b/tmp/6546a759-c5e5-45cc-bff7-a9c30a1985a0_fixed.java
@@ -1,42 +1,66 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+    if (l instanceof Iterator && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+    if (!(l instanceof Iterator) && r instanceof Iterator) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
     return equal(l, r);
 }
+
+// Helper method to check if an iterator contains a specific value
+private boolean contains(Iterator iterator, Object value) {
+    while (iterator.hasNext()) {
+        Object item = iterator.next();
+        if (equal(item, value)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+// Helper method to find a match between two iterators
+private boolean findMatch(Iterator left, Iterator right) {
+    while (left.hasNext() && right.hasNext()) {
+        Object l = left.next();
+        Object r = right.next();
+        if (equal(l, r)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+// Overloaded equal method to compare two objects
+private boolean equal(Object left, Object right) {
+    if (left == null) {
+        return right == null;
+    }
+    return left.equals(right);
+}
\ No newline at end of file
