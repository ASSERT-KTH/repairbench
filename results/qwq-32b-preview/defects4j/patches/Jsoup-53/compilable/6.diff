diff --git a/tmp/aa25017c-0611-4ab6-8852-d29e98ac3615_buggy.java b/tmp/92666cb3-e75e-464b-a2c9-2d479c1cc9d2_fixed.java
index fecb896..33cdd49 100644
--- a/tmp/aa25017c-0611-4ab6-8852-d29e98ac3615_buggy.java
+++ b/tmp/92666cb3-e75e-464b-a2c9-2d479c1cc9d2_fixed.java
@@ -1,34 +1,48 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
-        char last = 0;
+    boolean inQuote = false;
+    char currentQuote = 0;
+    boolean escaped = false;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        
+        if (inQuote) {
+            if (c == currentQuote && !escaped) {
+                inQuote = false;
+                currentQuote = 0;
+            }
+        } else {
+            if ((c == '"' || c == '\'') && !escaped) {
+                inQuote = true;
+                currentQuote = c;
+            }
+        }
+        
+        if (!inQuote && !escaped) {
+            if (c == open) {
                 depth++;
-                    if (start == -1)
+                if (start == -1) {
                     start = pos;
                 }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
             }
+        }
         
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
+        if (depth > 0 && pos > start) {
+            end = pos;
+        }
+        
+        escaped = (c == '\\' && !escaped);
+        
+        if (c != '\\') {
+            escaped = false;
+        }
     } while (depth > 0);
+    
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
