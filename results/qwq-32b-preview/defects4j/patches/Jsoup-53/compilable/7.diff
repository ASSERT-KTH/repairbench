diff --git a/tmp/7ef91778-427f-4945-b2ea-cc954f119d56_buggy.java b/tmp/ebe98d02-07b4-4345-b37e-9572d8a6f56e_fixed.java
index fecb896..cc04bca 100644
--- a/tmp/7ef91778-427f-4945-b2ea-cc954f119d56_buggy.java
+++ b/tmp/ebe98d02-07b4-4345-b37e-9572d8a6f56e_fixed.java
@@ -1,34 +1,56 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
-        char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
+    boolean escaped = false;
+    StringBuilder result = new StringBuilder();
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+    while (!isEmpty()) {
+        char c = consume();
+        if (escaped) {
+            // The previous character was an escape, so include this character as is
+            result.append(c);
+            escaped = false;
+        } else if (c == '\\') {
+            // Escape character
+            escaped = true;
+            continue;
+        } else if (c == '"' || c == '\'') {
+            // Quote character
+            if (!inQuote) {
+                // Start of a quote
+                inQuote = true;
+                quoteChar = c;
+            } else if (c == quoteChar) {
+                // End of the quote
+                inQuote = false;
+            }
+            result.append(c);
+        } else {
+            if (!inQuote) {
+                if (c == open) {
                     depth++;
-                    if (start == -1)
+                    if (start == -1) {
                         start = pos;
                     }
-                else if (c.equals(close))
+                } else if (c == close) {
                     depth--;
                 }
+                if (depth < 0) {
+                    // Unbalanced closer
+                    break;
+                }
+            }
+            result.append(c);
+        }
+        if (depth <= 0 && !inQuote) {
+            // Reached the end of the balanced string
+            end = pos;
+            break;
+        }
+    }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+    return (end >= 0 && start >= 0) ? result.toString() : "";
 }
\ No newline at end of file
