diff --git a/tmp/543728e4-97a6-482f-aa76-978f34338a46_buggy.java b/tmp/d8c1b116-7206-4a29-880c-7c5ccf2e1d0c_fixed.java
index fecb896..de5b6fa 100644
--- a/tmp/543728e4-97a6-482f-aa76-978f34338a46_buggy.java
+++ b/tmp/d8c1b116-7206-4a29-880c-7c5ccf2e1d0c_fixed.java
@@ -1,34 +1,57 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
-        char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
+    StringBuilder sb = new StringBuilder();
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+    while (!isEmpty()) {
+        char c = consume();
+        sb.append(c);
+
+        if (inQuote) {
+            if (c == quoteChar) {
+                inQuote = false;
+            }
+            continue;
+        } else {
+            if (c == '"' || c == '\'') {
+                inQuote = true;
+                quoteChar = c;
+                continue;
+            }
+        }
+
+        if (c == '\\') {
+            if (!isEmpty()) {
+                char next = consume();
+                sb.append(next);
+                continue; // Skip the escaped character
+            }
+        }
+
+        if (c == open) {
             depth++;
-                    if (start == -1)
-                        start = pos;
+            if (start == -1) {
+                start = pos - sb.length(); // Adjust start position
             }
-                else if (c.equals(close))
+        } else if (c == close) {
             depth--;
+            if (depth < 0) {
+                throw new IllegalStateException("Unbalanced closer");
+            }
         }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        if (depth == 0) {
+            end = pos; // Position right before the closer
+            break;
+        }
+    }
+
+    if (start >= 0 && end >= 0) {
+        return queue.substring(start, end);
+    } else {
+        return "";
+    }
 }
\ No newline at end of file
