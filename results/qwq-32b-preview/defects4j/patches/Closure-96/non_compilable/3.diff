diff --git a/tmp/bdd20289-322d-4fc2-a7c4-0ecacf783f3d_buggy.java b/tmp/3a502e31-6b39-483d-86e7-49d8659046d0_fixed.java
index e0ecec8..c1ef014 100644
--- a/tmp/bdd20289-322d-4fc2-a7c4-0ecacf783f3d_buggy.java
+++ b/tmp/3a502e31-6b39-483d-86e7-49d8659046d0_fixed.java
@@ -1,35 +1,47 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
-    int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
-      ordinal++;
-
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
-    }
-
+  List<Parameter> parameters = functionType.getParameters();
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+
+  // Check if the number of arguments is within the acceptable range
+  if (numArgs < minArgs || (maxArgs != Integer.MAX_VALUE && numArgs > maxArgs)) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
         String.valueOf(numArgs), String.valueOf(minArgs),
         maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
+    return;
+  }
+
+  int ordinal = 0;
+  for (Parameter parameter : parameters) {
+    if (!arguments.hasNext()) {
+      // No more arguments but parameters are still left
+      // This should not happen because we already checked argument counts
+      break;
+    }
+
+    Node argument = arguments.next();
+    ordinal++;
+
+    JSType parameterType = getJSType(parameter);
+    JSType argumentType = getJSType(argument);
+
+    validator.expectArgumentMatchesParameter(t, argument, argumentType, parameterType, call, ordinal);
+
+    if (parameter.isVarArgs()) {
+      // Handle varargs
+      while (arguments.hasNext()) {
+        Node extraArgument = arguments.next();
+        ordinal++;
+        JSType extraArgumentType = getJSType(extraArgument);
+        validator.expectArgumentMatchesParameter(t, extraArgument, extraArgumentType, parameterType, call, ordinal);
+      }
+      break; // Exit after handling varargs
+    }
   }
 }
\ No newline at end of file
