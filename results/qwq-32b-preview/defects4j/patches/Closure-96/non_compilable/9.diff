diff --git a/tmp/d130aaad-3c38-4a65-96ab-c7933b184876_buggy.java b/tmp/915a7339-b556-429d-86af-909337edba2f_fixed.java
index e0ecec8..f731a6b 100644
--- a/tmp/d130aaad-3c38-4a65-96ab-c7933b184876_buggy.java
+++ b/tmp/915a7339-b556-429d-86af-909337edba2f_fixed.java
@@ -1,35 +1,61 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
-    int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
-      ordinal++;
-
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
-    }
-
+    List<Parameter> parameters = functionType.getParameters();
+    int numParams = parameters.size();
     int numArgs = call.getChildCount() - 1;
+
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
         report(t, call, WRONG_ARGUMENT_COUNT,
                 validator.getReadableJSTypeName(call.getFirstChild(), false),
                 String.valueOf(numArgs), String.valueOf(minArgs),
                 maxArgs != Integer.MAX_VALUE ?
                 " and no more than " + maxArgs + " argument(s)" : "");
+        return;
+    }
+
+    Iterator<Parameter> paramsIter = parameters.iterator();
+    int ordinal = 0;
+    while (paramsIter.hasNext() && arguments.hasNext()) {
+        Parameter parameter = paramsIter.next();
+        Node argument = arguments.next();
+        ordinal++;
+
+        if (parameter.isRestParameter()) {
+            // Handle variadic arguments
+            JSType paramType = parameter.getType();
+            JSType argType = getJSType(argument);
+            if (argType != null && paramType != null) {
+                validator.expectArgumentMatchesParameter(t, argument, argType, paramType, call, ordinal);
+            }
+            // Consume the remaining arguments and check their types against the variadic parameter type
+            while (arguments.hasNext()) {
+                Node extraArg = arguments.next();
+                ordinal++;
+                validator.expectArgumentMatchesParameter(t, extraArg, getJSType(extraArg), paramType, call, ordinal);
+            }
+            break; // Exit the loop after handling variadic parameters
+        } else {
+            JSType paramType = parameter.getType();
+            JSType argType = getJSType(argument);
+            if (argType != null && paramType != null) {
+                validator.expectArgumentMatchesParameter(t, argument, argType, paramType, call, ordinal);
+            }
+        }
+    }
+
+    // If there are still arguments left after processing all parameters, report an error
+    if (arguments.hasNext()) {
+        report(t, call, WRONG_ARGUMENT_COUNT,
+                validator.getReadableJSTypeName(call.getFirstChild(), false),
+                String.valueOf(numArgs), String.valueOf(minArgs),
+                maxArgs != Integer.MAX_VALUE ?
+                " and no more than " + maxArgs + " argument(s)" : "");
     }
 }
\ No newline at end of file
