diff --git a/tmp/38d9ffb7-fa92-4f54-8187-2ea2163aa67b_buggy.java b/tmp/38139642-2b1b-40d7-8ebf-d66f1ee0083e_fixed.java
index e0ecec8..62c2f45 100644
--- a/tmp/38d9ffb7-fa92-4f54-8187-2ea2163aa67b_buggy.java
+++ b/tmp/38139642-2b1b-40d7-8ebf-d66f1ee0083e_fixed.java
@@ -1,35 +1,59 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
+  List<Parameter> parameters = functionType.getParameters();
+  boolean hasVarArgs = functionType.isVarArgs();
+
   int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
-      ordinal++;
+  for (Parameter parameter : parameters) {
+    if (arguments.hasNext()) {
+      Node argument = arguments.next();
+      JSType argumentType = getJSType(argument);
+      JSType parameterType = getJSType(parameter);
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+      validator.expectArgumentMatchesParameter(t, argument, argumentType, parameterType, call, ordinal + 1);
+    } else {
+      // Missing argument for a required parameter
+      // Handle missing arguments if necessary
+      break;
+    }
+    ordinal++;
   }
 
+  if (hasVarArgs && arguments.hasNext()) {
+    Parameter varArgsParameter = parameters.get(parameters.size() - 1);
+    JSType varArgsType = getJSType(varArgsParameter);
+
+    while (arguments.hasNext()) {
+      Node argument = arguments.next();
+      JSType argumentType = getJSType(argument);
+
+      // Assume var-args are an array type, adjust as necessary
+      JSType expectedType = varArgsType;
+      validator.expectArgumentMatchesParameter(t, argument, argumentType, expectedType, call, ordinal + 1);
+      ordinal++;
+    }
+  } else if (arguments.hasNext()) {
+    // Too many arguments for non-varargs function
     int numArgs = call.getChildCount() - 1;
-    int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+    if (numArgs > maxArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
+             String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
     }
+  } else {
+    int numArgs = call.getChildCount() - 1;
+    int minArgs = functionType.getMinArguments();
+    if (numArgs < minArgs) {
+      report(t, call, WRONG_ARGUMENT_COUNT,
+             validator.getReadableJSTypeName(call.getFirstChild(), false),
+             String.valueOf(numArgs), String.valueOf(minArgs),
+             functionType.getMaxArguments() != Integer.MAX_VALUE ?
+             " and no more than " + functionType.getMaxArguments() + " argument(s)" : "");
+    }
+  }
 }
\ No newline at end of file
