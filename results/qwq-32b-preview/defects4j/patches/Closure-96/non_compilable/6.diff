diff --git a/tmp/3bc9310d-caa9-4ffb-9254-7663b127cec9_buggy.java b/tmp/c73c7264-171d-42a1-946d-70c8a1c84da4_fixed.java
index e0ecec8..8313016 100644
--- a/tmp/3bc9310d-caa9-4ffb-9254-7663b127cec9_buggy.java
+++ b/tmp/c73c7264-171d-42a1-946d-70c8a1c84da4_fixed.java
@@ -1,35 +1,40 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
-    int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
-      ordinal++;
-
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
-    }
-
+  List<Parameter> parameters = functionType.getParameters();
+  int numParameters = parameters.size();
   int numArgs = call.getChildCount() - 1;
+
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+  if (minArgs > numArgs || (maxArgs != -1 && maxArgs < numArgs)) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
         String.valueOf(numArgs), String.valueOf(minArgs),
         maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
+    return;
+  }
+
+  int ordinal = 0;
+  for (int i = 0; i < numParameters && arguments.hasNext(); i++) {
+    Node argument = arguments.next();
+    Parameter parameter = parameters.get(i);
+    ordinal++;
+    validator.expectArgumentMatchesParameter(t, argument,
+        getJSType(argument), getJSType(parameter), call, ordinal);
+  }
+
+  // Handle variadic arguments
+  Parameter varParam = functionType.getVarParameter();
+  if (varParam != null) {
+    JSType varParamType = getJSType(varParam);
+    while (arguments.hasNext()) {
+      Node argument = arguments.next();
+      ordinal++;
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), varParamType, call, ordinal);
+    }
   }
 }
\ No newline at end of file
