diff --git a/tmp/5b98bc18-3679-4e0e-a797-2020864bf6c2_buggy.java b/tmp/61dcc95e-44cb-4a8d-bec6-8bbad9500512_fixed.java
index e0ecec8..dd23a7c 100644
--- a/tmp/5b98bc18-3679-4e0e-a797-2020864bf6c2_buggy.java
+++ b/tmp/61dcc95e-44cb-4a8d-bec6-8bbad9500512_fixed.java
@@ -1,35 +1,35 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
-    int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
-      ordinal++;
-
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
-    }
-
+    List<ParamType> parameters = functionType.getParameters();
+    int numParams = parameters.size();
     int numArgs = call.getChildCount() - 1;
+
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+    if (minArgs > numArgs || (maxArgs != Integer.MAX_VALUE && maxArgs < numArgs)) {
         report(t, call, WRONG_ARGUMENT_COUNT,
                validator.getReadableJSTypeName(call.getFirstChild(), false),
                String.valueOf(numArgs), String.valueOf(minArgs),
                maxArgs != Integer.MAX_VALUE ?
                " and no more than " + maxArgs + " argument(s)" : "");
+        return;
+    }
+
+    for (int i = 0; i < numParams; i++) {
+        Node argument = arguments.next();
+        ParamType parameter = parameters.get(i);
+        validator.expectArgumentMatchesParameter(t, argument,
+                getJSType(argument), getJSType(parameter), call, i + 1);
+    }
+
+    if (functionType.isVarArgs()) {
+        JSType varArgType = getJSType(parameters.get(numParams - 1));
+        while (arguments.hasNext()) {
+            Node argument = arguments.next();
+            validator.expectArgumentMatchesParameter(t, argument,
+                    getJSType(argument), varArgType, call, numParams + 1);
+        }
     }
 }
\ No newline at end of file
