diff --git a/tmp/0f6e519e-3853-49bc-abbf-34b38fddc7bf_buggy.java b/tmp/7bb7f2b8-0b4f-401f-8ff3-007b750faf10_fixed.java
index e0ecec8..f29caf0 100644
--- a/tmp/0f6e519e-3853-49bc-abbf-34b38fddc7bf_buggy.java
+++ b/tmp/7bb7f2b8-0b4f-401f-8ff3-007b750faf10_fixed.java
@@ -1,35 +1,47 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
+  List<Parameter> parameters = functionType.getParameters();
+  int numParams = parameters.size();
+  int numArgs = call.getChildCount() - 1; // number of arguments
+
   int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+  while (arguments.hasNext() && ordinal < numParams) {
+    Node argument = arguments.next();
+    Parameter parameter = parameters.get(ordinal);
     ordinal++;
 
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
-    int numArgs = call.getChildCount() - 1;
-    int minArgs = functionType.getMinArguments();
-    int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+  // Check if there are remaining arguments and the function accepts var_args
+  if (arguments.hasNext() && functionType.isVarArgs()) {
+    Parameter varParam = parameters.get(numParams - 1);
+    while (arguments.hasNext()) {
+      Node argument = arguments.next();
+      ordinal++;
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(varParam), call, ordinal);
+    }
+  } else if (arguments.hasNext()) {
+    // Too many arguments
+    report(t, call, WRONG_ARGUMENT_COUNT,
+        validator.getReadableJSTypeName(call.getFirstChild(), false),
+        String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),
+        functionType.getMaxArguments() != Integer.MAX_VALUE ?
+        " and no more than " + functionType.getMaxArguments() + " argument(s)" : "");
+  } else if (numArgs < functionType.getMinArguments()) {
+    // Too few arguments
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+        String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),
+        functionType.getMaxArguments() != Integer.MAX_VALUE ?
+        " and no more than " + functionType.getMaxArguments() + " argument(s)" : "");
   }
 }
\ No newline at end of file
