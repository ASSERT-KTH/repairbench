diff --git a/tmp/18ff7431-a1aa-4ba9-837c-9b0abce05615_buggy.java b/tmp/7d1cf8b6-a7c4-4887-b6fd-f22106ab01e6_fixed.java
index 757067a..cc79c13 100644
--- a/tmp/18ff7431-a1aa-4ba9-837c-9b0abce05615_buggy.java
+++ b/tmp/7d1cf8b6-a7c4-4887-b6fd-f22106ab01e6_fixed.java
@@ -1,63 +1,40 @@
-    /**
-     * Find a zero in the given interval with an initial guess.
-     * <p>Throws <code>IllegalArgumentException</code> if the values of the
-     * function at the three points have the same sign (note that it is
-     * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
-     *
-     * @param f function to solve.
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @param initial the start value to use (must be set to min if no
-     * initial point is known).
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException the maximum iteration count
-     * is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating
-     *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
-     */
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifySequence(min, initial, max);
 
     // return the initial guess if it is good enough
     double yInitial = f.value(initial);
     if (Math.abs(yInitial) <= functionValueAccuracy) {
         setResult(initial, 0);
         return result;
     }
 
     // return the first endpoint if it is good enough
     double yMin = f.value(min);
     if (Math.abs(yMin) <= functionValueAccuracy) {
         setResult(yMin, 0);
         return result;
     }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
     // return the second endpoint if it is good enough
     double yMax = f.value(max);
     if (Math.abs(yMax) <= functionValueAccuracy) {
         setResult(yMax, 0);
         return result;
     }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
+    // Check if the initial guess brackets with either endpoint
+    if ((yInitial * yMin < 0)) {
+        // initial and min bracket the root
+        return solve(f, min, yMin, initial, yInitial, min, yMin);
+    } else if ((yInitial * yMax < 0)) {
+        // initial and max bracket the root
         return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+    } else {
+        // No bracketing occurs; throw IllegalArgumentException
+        throw new IllegalArgumentException("Function values at endpoints and initial guess do not bracket the root.");
     }
-
-
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
 }
\ No newline at end of file
