diff --git a/tmp/14ba8803-b735-49fc-903b-f5514d920ec9_buggy.java b/tmp/4b54d759-643b-4b24-8017-f7d1da9dc1f3_fixed.java
index 757067a..b04c41c 100644
--- a/tmp/14ba8803-b735-49fc-903b-f5514d920ec9_buggy.java
+++ b/tmp/4b54d759-643b-4b24-8017-f7d1da9dc1f3_fixed.java
@@ -1,63 +1,66 @@
 /**
  * Find a zero in the given interval with an initial guess.
  * <p>Throws <code>IllegalArgumentException</code> if the values of the
-     * function at the three points have the same sign (note that it is
-     * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
+ * function at the three points do not bracket a root.</p>
  *
  * @param f function to solve.
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @param initial the start value to use (must be set to min if no
  * initial point is known).
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException the maximum iteration count
  * is exceeded
  * @throws FunctionEvaluationException if an error occurs evaluating
  *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+ * @throws IllegalArgumentException if initial is not between min and max or
+ * if function values do not bracket a root
  */
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+    // Evaluate function at the points
+    double yMin = f.value(min);
     double yInitial = f.value(initial);
+    double yMax = f.value(max);
+
+    // Check if initial guess is good enough
     if (Math.abs(yInitial) <= functionValueAccuracy) {
         setResult(initial, 0);
         return result;
     }
 
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
+    // Check if min is good enough
     if (Math.abs(yMin) <= functionValueAccuracy) {
         setResult(yMin, 0);
         return result;
     }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
+    // Check if max is good enough
     if (Math.abs(yMax) <= functionValueAccuracy) {
         setResult(yMax, 0);
         return result;
     }
 
-        // reduce interval if initial and max bracket the root
+    // Check bracketing condition
+    if (yMin * yInitial > 0 && yInitial * yMax > 0) {
+        throw new IllegalArgumentException("Function values at min, initial, and max do not bracket a root.");
+    }
+
+    // Reduce interval if min and initial bracket the root
+    if (yMin * yInitial < 0) {
+        return solve(f, min, yMin, initial, yInitial, min, yMin);
+    }
+
+    // Reduce interval if initial and max bracket the root
     if (yInitial * yMax < 0) {
         return solve(f, initial, yInitial, max, yMax, initial, yInitial);
     }
 
-
-        // full Brent algorithm starting with provided initial guess
+    // Full Brent algorithm starting with provided initial guess
     return solve(f, min, yMin, max, yMax, initial, yInitial);
-
 }
\ No newline at end of file
