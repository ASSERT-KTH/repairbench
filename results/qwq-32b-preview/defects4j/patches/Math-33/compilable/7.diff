diff --git a/tmp/272cc15f-8de6-41d9-bb02-41de02758c44_buggy.java b/tmp/a45ba4a7-d6ef-4a33-a9ee-03881c85af57_fixed.java
index 56b2d66..d79c8c2 100644
--- a/tmp/272cc15f-8de6-41d9-bb02-41de02758c44_buggy.java
+++ b/tmp/a45ba4a7-d6ef-4a33-a9ee-03881c85af57_fixed.java
@@ -1,45 +1,59 @@
-    /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
-     */
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
     List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+    columnsToDrop.add(0); // Drop the phase 1 objective function
 
-        // positive cost non-artificial variables
+    // Positive cost non-artificial variables
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
         final double entry = tableau.getEntry(0, i);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             columnsToDrop.add(i);
         }
     }
 
-        // non-basic artificial variables
+    // Non-basic artificial variables
     for (int i = 0; i < getNumArtificialVariables(); i++) {
         int col = i + getArtificialVariableOffset();
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+    // Create a mapping from old column indices to new indices
+    int[] newIndices = new int[getWidth()];
+    int newIdx = 0;
+    for (int j = 0; j < getWidth(); j++) {
+        if (!columnsToDrop.contains(j)) {
+            newIndices[j] = newIdx++;
+        } else {
+            newIndices[j] = -1; // Mark as dropped
+        }
+    }
+
+    // Rebuild the tableau matrix
+    double[][] matrix = new double[getHeight() - 1][newIdx];
     for (int i = 1; i < getHeight(); i++) {
         int col = 0;
         for (int j = 0; j < getWidth(); j++) {
-            if (!columnsToDrop.contains(j)) {
+            if (newIndices[j] != -1) {
                 matrix[i - 1][col++] = tableau.getEntry(i, j);
             }
         }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // Update column labels
+    for (int col : columnsToDrop) {
+        columnLabels.remove((int) col);
     }
 
+    // Update the tableau
     this.tableau = new Array2DRowRealMatrix(matrix);
     this.numArtificialVariables = 0;
+
+    // Adjust the basic variables list if necessary
+    // This step might be needed to ensure that basic variables are correctly mapped to the new tableau
+    // Depending on the implementation, this might require updating the basic variables' indices
 }
\ No newline at end of file
