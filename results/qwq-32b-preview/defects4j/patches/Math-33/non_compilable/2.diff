diff --git a/tmp/5950e54c-b5ba-4e87-96df-94dda671b6e7_buggy.java b/tmp/6798df2a-9a38-4bb4-89ee-743186b5904d_fixed.java
index 56b2d66..d27aef4 100644
--- a/tmp/5950e54c-b5ba-4e87-96df-94dda671b6e7_buggy.java
+++ b/tmp/6798df2a-9a38-4bb4-89ee-743186b5904d_fixed.java
@@ -1,45 +1,52 @@
-    /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
-     */
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
-        List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+    List<Integer> columnsToDrop = new ArrayList<>();
+    columnsToDrop.add(0); // Assuming 0 is the index of the phase 1 objective function
 
     // positive cost non-artificial variables
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
         final double entry = tableau.getEntry(0, i);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             columnsToDrop.add(i);
         }
     }
 
     // non-basic artificial variables
     for (int i = 0; i < getNumArtificialVariables(); i++) {
         int col = i + getArtificialVariableOffset();
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+    // Sort the columns to drop in descending order to avoid index shifting
+    columnsToDrop.sort(Collections.reverseOrder());
+
+    // Create a new tableau matrix without the dropped columns
+    int newNumCols = getWidth() - columnsToDrop.size();
+    double[][] newMatrix = new double[getHeight()][newNumCols];
+    int newColIndex = 0;
     for (int j = 0; j < getWidth(); j++) {
         if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+            for (int i = 0; i < getHeight(); i++) {
+                newMatrix[i][newColIndex] = tableau.getEntry(i, j);
             }
+            newColIndex++;
         }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // Remove the dropped columns from columnLabels
+    for (int col : columnsToDrop) {
+        columnLabels.remove((Integer) col);
     }
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+    // Update the tableau with the new matrix
+    this.tableau = new Array2DRowRealMatrix(newMatrix);
+
+    // Update the number of artificial variables if necessary
+    // Assuming all artificial variables are dropped
     this.numArtificialVariables = 0;
 }
\ No newline at end of file
