diff --git a/tmp/4846124e-c45e-4cac-a2ed-883a043105e1_buggy.java b/tmp/1c21eef4-4c43-4e88-99fd-50a224f95bc2_fixed.java
index b09cd82..f95108f 100644
--- a/tmp/4846124e-c45e-4cac-a2ed-883a043105e1_buggy.java
+++ b/tmp/1c21eef4-4c43-4e88-99fd-50a224f95bc2_fixed.java
@@ -1,192 +1,106 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
-     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
-     * </p>
-     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
-     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
-    * 
-     * <p>
-     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
-     * </p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string (or null if the input is null)
-     * @throws NumberFormatException if the value cannot be converted
-     */
 public static Number createNumber(final String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
-        // Need to deal with all possible hex prefixes here
-        final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
-        int pfxLen = 0;
-        for(final String pfx : hex_prefixes) {
+    
+    // Check for hexadecimal prefixes
+    String hexPrefix = null;
+    for (String pfx : new String[]{"0x", "0X", "-0x", "-0X", "#", "-#"}) {
         if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+            hexPrefix = pfx;
             break;
         }
     }
-        if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
+    if (hexPrefix != null) {
+        String numStr = str.substring(hexPrefix.length());
+        try {
+            return Integer.valueOf(Integer.parseInt(numStr, 16));
+        } catch (NumberFormatException e) {
+            try {
+                return Long.valueOf(Long.parseLong(numStr, 16));
+            } catch (NumberFormatException ex) {
+                return new BigInteger(numStr, 16);
             }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
         }
-            return createInteger(str);
     }
-        final char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
     
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
-
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
-                dec = str.substring(decPos + 1, expPos);
-            } else {
-                dec = str.substring(decPos + 1);
-            }
-            mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
-                }
-                mant = str.substring(0, expPos);
-            } else {
-                mant = str;
-            }
-            dec = null;
-        }
+    // Check for type qualifiers
+    char lastChar = str.charAt(str.length() - 1);
     if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
-            }
-            //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        String numericPart = str.substring(0, str.length() - 1);
         switch (lastChar) {
             case 'l':
             case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                 try {
-                            return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                    return Long.parseLong(numericPart);
+                } catch (NumberFormatException e) {
+                    return new BigInteger(numericPart);
                 }
-                        return createBigInteger(numeric);
-
-                    }
-                    throw new NumberFormatException(str + " is not a valid number.");
             case 'f':
             case 'F':
                 try {
-                        final Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                    float f = Float.parseFloat(numericPart);
+                    if (!Float.isInfinite(f) && f != 0.0f || isAllZeros(numericPart)) {
                         return f;
                     }
-
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
+                } catch (NumberFormatException e) {}
+                // Fall through to Double or BigDecimal
             case 'd':
             case 'D':
                 try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    double d = Double.parseDouble(numericPart);
+                    if (!Double.isInfinite(d) && d != 0.0d || isAllZeros(numericPart)) {
                         return d;
                     }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
-                    }
+                } catch (NumberFormatException e) {}
                 try {
-                        return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
+                    return new BigDecimal(numericPart);
+                } catch (NumberFormatException e) {}
+                break;
             default:
                 throw new NumberFormatException(str + " is not a valid number.");
-
-            }
-        }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
-        } else {
-            exp = null;
-        }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
-            try {
-                return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            try {
-                return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
         }
-            return createBigInteger(str);
+        throw new NumberFormatException(str + " is not a valid number.");
     }
     
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+    // No type qualifier, determine the type based on content
+    if (str.contains(".") || str.contains("e") || str.contains("E")) {
         try {
-                final Float f = createFloat(str);
-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+            float f = Float.parseFloat(str);
+            if (!Float.isInfinite(f) && f != 0.0f || isAllZeros(str)) {
                 return f;
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
-        }
+        } catch (NumberFormatException e) {}
         try {
-                final Double d = createDouble(str);
-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+            double d = Double.parseDouble(str);
+            if (!Double.isInfinite(d) && d != 0.0d || isAllZeros(str)) {
                 return d;
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+        } catch (NumberFormatException e) {}
+        try {
+            return new BigDecimal(str);
+        } catch (NumberFormatException e) {}
+    } else {
+        try {
+            return Integer.parseInt(str);
+        } catch (NumberFormatException e) {}
+        try {
+            return Long.parseLong(str);
+        } catch (NumberFormatException e) {}
+        return new BigInteger(str);
     }
     
-        return createBigDecimal(str);
+    throw new NumberFormatException(str + " is not a valid number.");
+}
+
+private static boolean isAllZeros(String str) {
+    for (int i = 0; i < str.length(); i++) {
+        if (str.charAt(i) != '0' && str.charAt(i) != '.') {
+            return false;
+        }
+    }
+    return true;
 }
\ No newline at end of file
