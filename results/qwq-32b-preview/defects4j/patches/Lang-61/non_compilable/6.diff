diff --git a/tmp/9e03b253-a709-436c-af31-2141fa38f5f1_buggy.java b/tmp/a430d0b1-e260-4259-bdfb-7fe8af755f4a_fixed.java
index addeb8d..173f7f9 100644
--- a/tmp/9e03b253-a709-436c-af31-2141fa38f5f1_buggy.java
+++ b/tmp/a430d0b1-e260-4259-bdfb-7fe8af755f4a_fixed.java
@@ -1,38 +1,81 @@
-    /**
-     * Searches the string builder to find the first reference to the specified
-     * string starting searching from the given index.
-     * <p>
-     * Note that a null input string will return -1, whereas the JDK throws an exception.
-     * 
-     * @param str  the string to find, null returns -1
-     * @param startIndex  the index to start at, invalid index rounded to edge
-     * @return the first index of the string, or -1 if not found
-     */
-    public int indexOf(String str, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
+   ```
+   This line ensures that the start index is not negative; if it is, it's set to 0.
+
+2. **Null or Out-of-Bounds Check:**
+   ```java
    if (str == null || startIndex >= size) {
        return -1;
    }
+   ```
+   If the search string is null or the start index is beyond the current size of the `StrBuilder`, it returns -1 immediately.
+
+3. **Single-Character Optimization:**
+   ```java
    int strLen = str.length();
    if (strLen == 1) {
        return indexOf(str.charAt(0), startIndex);
    }
+   ```
+   If the search string is a single character, it delegates to another `indexOf` method that handles single characters.
+
+4. **Empty String Case:**
+   ```java
    if (strLen == 0) {
        return startIndex;
    }
+   ```
+   If the search string is empty, it returns the start index, as per the behavior of String's `indexOf`.
+
+5. **Longer String Check:**
+   ```java
    if (strLen > size) {
        return -1;
    }
+   ```
+   If the search string is longer than the `StrBuilder` content, it can't be found, so it returns -1.
+
+6. **Main Search Loop:**
+   ```java
    char[] thisBuf = buffer;
    int len = thisBuf.length - strLen;
    outer:
    for (int i = startIndex; i < len; i++) {
        for (int j = 0; j < strLen; j++) {
            if (str.charAt(j) != thisBuf[i + j]) {
                continue outer;
            }
        }
        return i;
    }
    return -1;
-    }
+   ```
+   This loop iterates through the `StrBuilder`'s buffer, checking for the presence of the search string starting at each index from `startIndex` onwards.
+
+Now, considering that the tests are failing with an `ArrayIndexOutOfBoundsException`, it's possible that the indices being accessed in the buffer array are going out of bounds.
+
+Let's consider the scenario where `startIndex` is equal to `size` or beyond. Although the method checks if `startIndex >= size` and returns -1, there might be cases where `startIndex` is set to `size` exactly, and if `strLen` is 0, it returns `startIndex`, which is `size`. But according to the method's comment, starting at `size` should mean the search doesn't find anything, as there are no characters left to search.
+
+Wait, in the method, if `strLen == 0`, it returns `startIndex` regardless of `startIndex` being equal to `size`. Is this the intended behavior?
+
+Looking at the Java `String` class's `indexOf` method, when the search string is empty, it returns the start index if it's within the bounds, but according to the method's comment, starting at `size` should return -1 because there are no characters left to search.
+
+Perhaps this is where the issue lies. Let's adjust the method to handle the empty string case more carefully.
+
+Additionally, I should ensure that all indices being accessed in the buffer array are within the valid range.
+
+Let me propose a fix:
+
+1. **Adjust the empty string case:**
+   - If `strLen == 0`, return `startIndex` only if `startIndex < size`.
+   - If `startIndex >= size`, return -1.
+
+2. **Ensure that in the main search loop, `i + strLen` does not exceed `size`**:
+   - The current implementation sets `len = thisBuf.length - strLen`, which should prevent accessing indices beyond the buffer's length.
+   - However, I need to make sure that `thisBuf.length` is equal to `size`, as `size` is the current length of the string builder.
+
+Assuming that `buffer` is the underlying array and `size` is the current length of the string, I need to ensure that `thisBuf.length` is at least `size`, but it's possible that `thisBuf.length > size`, especially if the buffer has been reallocated.
+
+To make sure, I should use `size` instead of `thisBuf.length` when calculating `len`.
+
+Let me adjust the code accordingly:
