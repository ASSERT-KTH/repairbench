diff --git a/tmp/c08ef561-5752-428a-9376-ba0c45c712ed_buggy.java b/tmp/ff189a96-6537-461e-bf80-6b32990a08d6_fixed.java
index 939f49b..cae3275 100644
--- a/tmp/c08ef561-5752-428a-9376-ba0c45c712ed_buggy.java
+++ b/tmp/ff189a96-6537-461e-bf80-6b32990a08d6_fixed.java
@@ -1,21 +1,24 @@
 private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+  Node lhs = assign.getFirstChild();
+  if (lhs == null || !NodeUtil.isVarOrSimpleAssignLhs(lhs, assign)) {
+    return false;
+  }
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+  if (lhs.getType() == Token.GETPROP) {
+    Node receiver = lhs.getFirstChild();
+    if (receiver.getType() == Token.GETPROP) {
+      Node receiverObj = receiver.getFirstChild();
+      Node receiverProp = receiver.getLastChild();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      if (receiverProp.getType() == Token.STRING && 
+          receiverProp.getString().equals("prototype")) {
         return true;
       }
+    } else if (receiver.getType() == Token.NAME && 
+               receiver.getString().equals("prototype")) {
+      return true;
     }
   }
 
   return false;
 }
\ No newline at end of file
