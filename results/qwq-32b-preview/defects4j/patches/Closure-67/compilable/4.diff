diff --git a/tmp/85125125-4f61-4730-a33d-c8b5169db7c8_buggy.java b/tmp/2893489c-7d9c-4fca-acda-e007801c6702_fixed.java
index 939f49b..ac2e552 100644
--- a/tmp/85125125-4f61-4730-a33d-c8b5169db7c8_buggy.java
+++ b/tmp/2893489c-7d9c-4fca-acda-e007801c6702_fixed.java
@@ -1,21 +1,15 @@
 private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+  Node lhs = assign.getFirstChild();
+  if (lhs != null && NodeUtil.isVarOrSimpleAssignLhs(lhs, assign) && lhs.getType() == Token.GETPROP) {
+    // Traverse the property chain to check for 'prototype'
+    Node current = lhs;
+    while (current.getType() == Token.GETPROP) {
+      Node propName = current.getFirstChild().getNext();
+      if (propName.getType() == Token.STRING && "prototype".equals(propName.getString())) {
         return true;
       }
+      current = current.getFirstChild();
     }
   }
-
   return false;
 }
\ No newline at end of file
