diff --git a/tmp/f8bcf87a-e98d-4f8c-8fd5-ced6d2a8ff29_buggy.java b/tmp/45b2b652-6b5e-424d-ba46-9f4a912d70f1_fixed.java
index 3127f85..c4b11d3 100644
--- a/tmp/f8bcf87a-e98d-4f8c-8fd5-ced6d2a8ff29_buggy.java
+++ b/tmp/45b2b652-6b5e-424d-ba46-9f4a912d70f1_fixed.java
@@ -1,24 +1,32 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
+    final double fortySigma = 40 * standardDeviation;
+    
+    if (dev < -fortySigma) {
+        return 0.0;
+    } else if (dev > fortySigma) {
+        return 1.0;
+    } else {
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+            // Adjusted to 40 standard deviations for better precision
+            if (x < (mean - 40 * standardDeviation)) {
+                return 0.0;
+            } else if (x > (mean + 40 * standardDeviation)) {
+                return 1.0;
             } else {
                 throw ex;
             }
         }
     }
+}
\ No newline at end of file
