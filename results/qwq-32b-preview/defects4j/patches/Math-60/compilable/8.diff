diff --git a/tmp/ba62dac5-c917-4278-b531-232dd32fe82f_buggy.java b/tmp/fa289d96-fc89-45eb-bf6b-f4ea05c3bb4e_fixed.java
index 3127f85..58407cd 100644
--- a/tmp/ba62dac5-c917-4278-b531-232dd32fe82f_buggy.java
+++ b/tmp/fa289d96-fc89-45eb-bf6b-f4ea05c3bb4e_fixed.java
@@ -1,24 +1,30 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
+
 public double cumulativeProbability(double x) throws MathException {
+
     final double dev = x - mean;
+
     try {
+
         return 0.5 * (1.0 + Erf.erf((dev) /
+
                     (standardDeviation * FastMath.sqrt(2.0))));
+
     } catch (MaxIterationsExceededException ex) {
+
         if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+
             return 0;
+
         } else if (x > (mean + 20 * standardDeviation)) {
+
             return 1;
+
         } else {
+
             throw ex;
+
         }
+
     }
+
 }
