diff --git a/tmp/c6221ee4-93e3-4ced-8e8d-e033c5248fa4_buggy.java b/tmp/e4ccea7d-7679-4bff-a78c-b63e303ee0a5_fixed.java
index 3127f85..3698268 100644
--- a/tmp/c6221ee4-93e3-4ced-8e8d-e033c5248fa4_buggy.java
+++ b/tmp/e4ccea7d-7679-4bff-a78c-b63e303ee0a5_fixed.java
@@ -1,24 +1,34 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
  */
-    public double cumulativeProbability(double x) throws MathException {
+public double cumulativeProbability(double x) {
     final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+    final double四十个标准差 = 40 * standardDeviation;
+    
+    // 直接返回0或1，如果x超出40个标准差
+    if (dev < -四十个标准差) {
+        return 0.0;
+    } else if (dev > 四十个标准差) {
+        return 1.0;
+    }
+    
+    // 计算标准化的偏差
+    double t = dev / (standardDeviation * Math.sqrt(2.0));
+    
+    // 使用误差函数计算累积概率
+    double result = 0.5 * (1.0 + Erf.erf(t));
+    
+    // 确保结果在[0,1]范围内
+    if (result < 0.0) {
+        return 0.0;
+    } else if (result > 1.0) {
+        return 1.0;
     } else {
-                throw ex;
-            }
+        return result;
     }
 }
\ No newline at end of file
