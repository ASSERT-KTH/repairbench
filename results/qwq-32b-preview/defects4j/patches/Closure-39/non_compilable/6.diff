diff --git a/tmp/19757b0e-4cbc-45b6-b9af-5c0880cc6885_buggy.java b/tmp/1a9bb204-ead6-402d-97ed-d719f6335604_fixed.java
index e4d90e7..341bd9d 100644
--- a/tmp/19757b0e-4cbc-45b6-b9af-5c0880cc6885_buggy.java
+++ b/tmp/1a9bb204-ead6-402d-97ed-d719f6335604_fixed.java
@@ -1,45 +1,52 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
         return getReferenceName();
     } else if (prettyPrint) {
         // Don't pretty print recursively.
         prettyPrint = false;
 
         // Use a tree set so that the properties are sorted.
         Set<String> propertyNames = Sets.newTreeSet();
         for (ObjectType current = this;
              current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+                 propertyNames.size() <= MAX_PRETTY_PRINTED.properties;
              current = current.getImplicitPrototype()) {
             propertyNames.addAll(current.getOwnPropertyNames());
         }
 
         StringBuilder sb = new StringBuilder();
         sb.append("{");
 
         int i = 0;
         for (String property : propertyNames) {
             if (i > 0) {
                 sb.append(", ");
             }
 
             sb.append(property);
             sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+
+            // Handle recursive references
+            JSType propertyType = getPropertyType(property);
+            if (propertyType.isObject() && propertyType.isEqualTo(this)) {
+                sb.append("{...}");
+            } else {
+                sb.append(propertyType.toStringHelper(forAnnotations));
+            }
 
             ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+            if (i == MAX_PRETTY_PRINTED_PROPERTIES && !forAnnotations) {
                 sb.append(", ...");
                 break;
             }
         }
 
         sb.append("}");
 
         prettyPrint = true;
         return sb.toString();
     } else {
         return "{...}";
     }
 }
\ No newline at end of file
