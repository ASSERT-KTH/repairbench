diff --git a/tmp/98b1a871-4ea8-4059-86f9-fc31f4439f27_buggy.java b/tmp/41874a82-3b8b-4dca-8841-641f57701ffc_fixed.java
index e4d90e7..03b38c9 100644
--- a/tmp/98b1a871-4ea8-4059-86f9-fc31f4439f27_buggy.java
+++ b/tmp/41874a82-3b8b-4dca-8841-641f57701ffc_fixed.java
@@ -1,45 +1,108 @@
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.IdentityHashMap;
+import java.util.concurrent.ThreadLocal;
+
+class JSType {
+  // Dummy JSType class for context
+}
+
+class ObjectType extends JSType {
+  // Dummy ObjectType class for context
+  public ObjectType getImplicitPrototype() {
+    return null;
+  }
+
+  public Set<String> getOwnPropertyNames() {
+    return Set.of();
+  }
+
+  public JSType getPropertyType(String property) {
+    return new JSType();
+  }
+
+  public boolean hasReferenceName() {
+    return false;
+  }
+
+  public String getReferenceName() {
+    return "";
+  }
+}
+
+class RecordType extends ObjectType {
+  private boolean prettyPrint;
+  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;
+  private static final ThreadLocal<Set<JSType>> printingTypes =
+      new ThreadLocal<Set<JSType>>() {
+        @Override
+        protected Set<JSType> initialValue() {
+          return new IdentityHashMap<>();
+        }
+      };
+
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
+      Set<JSType> currentPrinting = printingTypes.get();
+      if (currentPrinting.contains(this)) {
+        return "{...}";
+      }
+      currentPrinting.add(this);
+      try {
         // Use a tree set so that the properties are sorted.
-      Set<String> propertyNames = Sets.newTreeSet();
+        Set<String> propertyNames = new TreeSet<>();
+        int maxProperties = forAnnotations ? Integer.MAX_VALUE : MAX_PRETTY_PRINTED_PROPERTIES;
+
         for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+             current != null && !current.isNativeObjectType() && propertyNames.size() < maxProperties;
              current = current.getImplicitPrototype()) {
           propertyNames.addAll(current.getOwnPropertyNames());
         }
 
         StringBuilder sb = new StringBuilder();
         sb.append("{");
 
         int i = 0;
         for (String property : propertyNames) {
           if (i > 0) {
             sb.append(", ");
           }
 
           sb.append(property);
           sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+          JSType propertyType = getPropertyType(property);
+          if (propertyType == this) {
+            sb.append("{...}");
+          } else {
+            sb.append(propertyType.toStringHelper(forAnnotations));
+          }
 
           ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+          if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
             sb.append(", ...");
             break;
           }
         }
 
         sb.append("}");
 
-      prettyPrint = true;
         return sb.toString();
+      } finally {
+        currentPrinting.remove(this);
+        prettyPrint = true;
+      }
     } else {
       return "{...}";
     }
   }
+
+  public boolean isNativeObjectType() {
+    return false;
+  }
+}
\ No newline at end of file
