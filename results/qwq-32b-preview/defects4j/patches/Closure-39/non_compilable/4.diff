diff --git a/tmp/3e3e8c0b-c248-47bb-8916-ff8022026469_buggy.java b/tmp/de42a129-2e60-43b9-9272-535cc4c95bce_fixed.java
index e4d90e7..c1424e0 100644
--- a/tmp/3e3e8c0b-c248-47bb-8916-ff8022026469_buggy.java
+++ b/tmp/de42a129-2e60-43b9-9272-535cc4c95bce_fixed.java
@@ -1,45 +1,56 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
+    Set<JSType> visited = Sets.newIdentityHashSet(); // Track visited types to handle recursion
+
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
              current = current.getImplicitPrototype()) {
+      if (!visited.add(current)) {
+        // Prevent infinite recursion
+        break;
+      }
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+      JSType propertyType = get_PROPERTY_TYPE(property); // Replace with actual method
+      if (forAnnotations) {
+        sb.append(propertyType.toAnnotationString());
+      } else {
+        sb.append(propertyType.toStringHelper(false)); // Avoid infinite recursion
+      }
 
       ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      if (i == MAX_PRETTY_PRINTED_PROPERTIES && !forAnnotations) {
         sb.append(", ...");
         break;
       }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
