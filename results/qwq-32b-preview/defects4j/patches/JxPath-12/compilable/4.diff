diff --git a/tmp/8e5e4d74-a903-4f4d-9157-cad992d39d73_buggy.java b/tmp/b10c319a-63ff-4ee8-9eb2-ba7c958939db_fixed.java
index 40f74f7..2f23dad 100644
--- a/tmp/8e5e4d74-a903-4f4d-9157-cad992d39d73_buggy.java
+++ b/tmp/b10c319a-63ff-4ee8-9eb2-ba7c958939db_fixed.java
@@ -1,50 +1,63 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
+        
+        // Get the node's namespace URI and local name
+        String nodeNamespaceURI = DOMNodePointer.getNamespaceURI(node);
+        String nodeLocalName = DOMNodePointer.getLocalName(node);
+        
+        // If the test is a wildcard for local name and no prefix is specified
         if (wildcard && testPrefix == null) {
+            // Match any element in any namespace
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+        
+        // If the test is a wildcard for namespace
+        if (wildcard && testPrefix != null) {
+            // Match any element with the specified prefix
+            String nodePrefix = DOMNodePointer.getPrefix(node);
+            return testPrefix.equals(nodePrefix) && equalStrings(namespaceURI, nodeNamespaceURI);
         }
+        
+        // Check if the local names match
+        if (testName.getName().equals(nodeLocalName)) {
+            // If namespace URI is specified in the test, ensure it matches the node's namespace URI
+            return equalStrings(namespaceURI, nodeNamespaceURI);
+        }
+        
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE:
-                    return nodeType == Node.ELEMENT_NODE
-                            || nodeType == Node.DOCUMENT_NODE;
+                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT:
-                    return nodeType == Node.CDATA_SECTION_NODE
-                        || nodeType == Node.TEXT_NODE;
+                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT:
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI:
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
