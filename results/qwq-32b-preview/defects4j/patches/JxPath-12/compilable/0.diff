diff --git a/tmp/cfac5f84-8f86-4467-b556-f7b24890205b_buggy.java b/tmp/70e1202a-9248-4783-8dee-6650538751fe_fixed.java
index 40f74f7..ab799a7 100644
--- a/tmp/cfac5f84-8f86-4467-b556-f7b24890205b_buggy.java
+++ b/tmp/70e1202a-9248-4783-8dee-6650538751fe_fixed.java
@@ -1,50 +1,60 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
-                return true;
+        
+        // Check if the test is a wildcard for local name
+        boolean localWildcard = wildcard && testPrefix == null;
+        
+        // Get the local name of the node
+        String nodeLocalName = DOMNodePointer.getLocalName(node);
+        
+        // Get the namespace URI of the node
+        String nodeNamespaceURI = DOMNodePointer.getNamespaceURI(node);
+        
+        // If it's a wildcard for local name, check only the namespace URI
+        if (localWildcard) {
+            return equalStrings(namespaceURI, nodeNamespaceURI);
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+        
+        // If it's a wildcard for namespace, check only the local name
+        if (wildcard && testPrefix != null) {
+            return testName.getName().equals(nodeLocalName);
         }
-            return false;
+        
+        // If no wildcard, check both local name and namespace URI
+        return testName.getName().equals(nodeLocalName) && equalStrings(namespaceURI, nodeNamespaceURI);
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE:
-                    return nodeType == Node.ELEMENT_NODE
-                            || nodeType == Node.DOCUMENT_NODE;
+                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT:
-                    return nodeType == Node.CDATA_SECTION_NODE
-                        || nodeType == Node.TEXT_NODE;
+                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT:
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI:
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
