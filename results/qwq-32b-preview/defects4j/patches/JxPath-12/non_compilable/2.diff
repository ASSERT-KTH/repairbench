diff --git a/tmp/976306fc-1033-4913-bc87-2a8cb68a84f5_buggy.java b/tmp/d8315c35-defc-4cae-91f7-51d329e84e81_fixed.java
index 40f74f7..1ab1628 100644
--- a/tmp/976306fc-1033-4913-bc87-2a8cb68a84f5_buggy.java
+++ b/tmp/d8315c35-defc-4cae-91f7-51d329e84e81_fixed.java
@@ -1,50 +1,27 @@
-    public static boolean testNode(Node node, NodeTest test) {
-        if (test == null) {
-            return true;
-        }
 if (test instanceof NodeNameTest) {
     if (node.getNodeType() != Node.ELEMENT_NODE) {
         return false;
     }
 
     NodeNameTest nodeNameTest = (NodeNameTest) test;
     QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
+    String testNamespaceURI = nodeNameTest.getNamespaceURI();
     boolean wildcard = nodeNameTest.isWildcard();
     String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
+
+    String nodeNamespaceURI = DOMNodePointer.getNamespaceURI(node);
+    String nodeLocalName = DOMNodePointer.getLocalName(node);
+
+    if (wildcard) {
+        // If wildcard and no namespace specified, match any namespace
+        if (testNamespaceURI == null) {
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+        // If wildcard and namespace specified, match nodes with that namespace
+        return equalStrings(testNamespaceURI, nodeNamespaceURI);
+    } else {
+        // Match both local name and namespace URI
+        return equalStrings(testName.getName(), nodeLocalName)
+                && equalStrings(testNamespaceURI, nodeNamespaceURI);
     }
-            return false;
-        }
-        if (test instanceof NodeTypeTest) {
-            int nodeType = node.getNodeType();
-            switch (((NodeTypeTest) test).getNodeType()) {
-                case Compiler.NODE_TYPE_NODE :
-                    return nodeType == Node.ELEMENT_NODE
-                            || nodeType == Node.DOCUMENT_NODE;
-                case Compiler.NODE_TYPE_TEXT :
-                    return nodeType == Node.CDATA_SECTION_NODE
-                        || nodeType == Node.TEXT_NODE;
-                case Compiler.NODE_TYPE_COMMENT :
-                    return nodeType == Node.COMMENT_NODE;
-                case Compiler.NODE_TYPE_PI :
-                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
-            }
-            return false;
-        }
-        if (test instanceof ProcessingInstructionTest) {
-            if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
-                String testPI = ((ProcessingInstructionTest) test).getTarget();
-                String nodePI = ((ProcessingInstruction) node).getTarget();
-                return testPI.equals(nodePI);
-            }
-        }
-        return false;
 }
\ No newline at end of file
