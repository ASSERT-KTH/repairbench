diff --git a/tmp/430c1bac-79df-4179-90c1-0ed24d21d4df_buggy.java b/tmp/d9448605-f2fe-443a-8d04-f3beb3e620b5_fixed.java
index 181b1ac..27a6055 100644
--- a/tmp/430c1bac-79df-4179-90c1-0ed24d21d4df_buggy.java
+++ b/tmp/d9448605-f2fe-443a-8d04-f3beb3e620b5_fixed.java
@@ -1,23 +1,13 @@
-    /**
-     * Return the sum of this complex number and the given complex number.
-     * <p>
-     * Uses the definitional formula
-     * <pre>
-     * (a + bi) + (c + di) = (a+c) + (b+d)i
-     * </pre></p>
-     * <p>
-     * If either this or <code>rhs</code> has a NaN value in either part,
-     * {@link #NaN} is returned; otherwise Infinite and NaN values are
-     * returned in the parts of the result according to the rules for
-     * {@link java.lang.Double} arithmetic.</p>
-     *
-     * @param rhs the other complex number
-     * @return the complex number sum
-     * @throws NullArgumentException if <code>rhs</code> is null
-     */
 public Complex add(Complex rhs)
     throws NullArgumentException {
     MathUtils.checkNotNull(rhs);
+    
+    // Check if either complex number has NaN in either part
+    if (Double.isNaN(real) || Double.isNaN(imaginary) ||
+        Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {
+        return Complex.NaN;
+    } else {
         return createComplex(real + rhs.getReal(),
             imaginary + rhs.getImaginary());
     }
+}
\ No newline at end of file
