diff --git a/tmp/5ff37cfe-8c8f-46f9-bb99-1223f6036316_buggy.java b/tmp/f2798228-29c9-4302-9eaf-c51dbd7ed5a9_fixed.java
index 7116384..8500a16 100644
--- a/tmp/5ff37cfe-8c8f-46f9-bb99-1223f6036316_buggy.java
+++ b/tmp/f2798228-29c9-4302-9eaf-c51dbd7ed5a9_fixed.java
@@ -1,39 +1,3 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
-    public long readBits(final int count) throws IOException {
 if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
     throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
 }
\ No newline at end of file
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
-            }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
-            }
-            bitsCachedSize += 8;
-        }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
-            bitsCachedSize -= count;
-        return bitsOut;
-    }
