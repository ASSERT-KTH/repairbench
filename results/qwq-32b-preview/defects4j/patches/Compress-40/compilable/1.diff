diff --git a/tmp/c20f0e58-3c0f-40cb-91cb-2f773b6bab56_buggy.java b/tmp/bf327129-92f1-4ee1-81a1-feb05759b420_fixed.java
index 7116384..33edec3 100644
--- a/tmp/c20f0e58-3c0f-40cb-91cb-2f773b6bab56_buggy.java
+++ b/tmp/bf327129-92f1-4ee1-81a1-feb05759b420_fixed.java
@@ -1,39 +1,50 @@
 /**
  * Returns at most 63 bits read from the underlying stream.
  *
  * @param count the number of bits to read, must be a positive
  * number not bigger than 63.
  * @return the bits concatenated as a long using the stream's byte order.
  *         -1 if the end of the underlying stream has been reached before reading
  *         the requested number of bits
  * @throws IOException on error
  */
 public long readBits(final int count) throws IOException {
-        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
+    if (count < 0 || count > 63) {
+        throw new IllegalArgumentException("count must not be negative or greater than 63");
     }
     while (bitsCachedSize < count) {
-            final long nextByte = in.read();
+        final int nextByte = in.read();
         if (nextByte < 0) {
-                return nextByte;
+            // If end of stream is reached and we don't have enough bits, return -1
+            if (bitsCachedSize == 0) {
+                return -1;
+            }
+            // Otherwise, return the bits we have, even if it's less than requested
+            long bitsOut = getBitsFromCache(count);
+            resetCache();
+            return bitsOut;
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+            bitsCached |= ((long) nextByte) << bitsCachedSize;
         } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+            bitsCached = (bitsCached << 8) | nextByte;
         }
         bitsCachedSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
+    long bitsOut = getBitsFromCache(count);
     bitsCachedSize -= count;
     return bitsOut;
 }
+
+private long getBitsFromCache(int count) {
+    if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+        return (bitsCached & MASKS[count]);
+    } else {
+        return (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+    }
+}
+
+private void resetCache() {
+    bitsCached = 0;
+    bitsCachedSize = 0;
+}
\ No newline at end of file
