diff --git a/tmp/020967b4-65bc-4a20-ab7b-8587a929b82b_buggy.java b/tmp/20ffc3cb-8548-4b5e-9808-7d9a7317ad66_fixed.java
index 7116384..322be15 100644
--- a/tmp/020967b4-65bc-4a20-ab7b-8587a929b82b_buggy.java
+++ b/tmp/20ffc3cb-8548-4b5e-9808-7d9a7317ad66_fixed.java
@@ -1,39 +1,34 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
     while (bitsCachedSize < count) {
-            final long nextByte = in.read();
+        final int nextByte = in.read();
         if (nextByte < 0) {
-                return nextByte;
+            // Not enough bits to satisfy the request, return what's available
+            if (bitsCachedSize == 0) {
+                return -1;
+            }
+            long bitsOut = bitsCached & MASKS[bitsCachedSize];
+            bitsCachedSize = 0;
+            return bitsOut;
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+            bitsCached |= ((long) nextByte) << bitsCachedSize;
         } else {
             bitsCached <<= 8;
             bitsCached |= nextByte;
         }
         bitsCachedSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
+    long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
+        bitsOut = bitsCached & MASKS[count];
         bitsCached >>>= count;
+        bitsCachedSize -= count;
     } else {
         bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
         bitsCachedSize -= count;
+    }
     return bitsOut;
 }
\ No newline at end of file
