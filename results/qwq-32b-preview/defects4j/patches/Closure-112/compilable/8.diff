diff --git a/tmp/0e2ccb12-92c9-42bf-8a7d-9f198ad63dc8_buggy.java b/tmp/d6a332f5-a76e-4843-9560-59dbd2cb7ce2_fixed.java
index 63641d0..8aaa12e 100644
--- a/tmp/0e2ccb12-92c9-42bf-8a7d-9f198ad63dc8_buggy.java
+++ b/tmp/d6a332f5-a76e-4843-9560-59dbd2cb7ce2_fixed.java
@@ -1,33 +1,21 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();
     if (keys.isEmpty()) {
         return false;
     }
 
     // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+    Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+    // Replace all template types. If we couldn't find a replacement, we replace it with UNKNOWN.
+    TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
     Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+    FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
 }
\ No newline at end of file
