diff --git a/tmp/1d79e25b-bf74-4a2f-9441-5f6e4e64bb68_buggy.java b/tmp/46d50efa-e3f1-423b-a7d1-ab1f654639a3_fixed.java
index 63641d0..f6b0cd9 100644
--- a/tmp/1d79e25b-bf74-4a2f-9441-5f6e4e64bb68_buggy.java
+++ b/tmp/46d50efa-e3f1-423b-a7d1-ab1f654639a3_fixed.java
@@ -1,33 +1,36 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  if (inferred == null) {
+    // If inference fails, return without making changes
+    return false;
+  }
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
