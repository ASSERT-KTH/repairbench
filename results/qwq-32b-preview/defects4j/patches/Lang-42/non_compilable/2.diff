diff --git a/tmp/3ba6353c-b7fc-454c-8b18-1496b272ea11_buggy.java b/tmp/cef8da84-169e-4b1f-9ef1-45c66bcc2d0e_fixed.java
index 822447c..5cee0bd 100644
--- a/tmp/3ba6353c-b7fc-454c-8b18-1496b272ea11_buggy.java
+++ b/tmp/cef8da84-169e-4b1f-9ef1-45c66bcc2d0e_fixed.java
@@ -1,37 +1,27 @@
-    /**
-     * <p>
-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
-     * passed.
-     * </p>
-     * 
-     * @param writer
-     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
-     * @param str
-     *            The <code>String</code> to escape. Assumed to be a non-null value.
-     * @throws IOException
-     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
-     * 
-     * @see #escape(String)
-     * @see Writer
-     */
-    public void escape(Writer writer, String str) throws IOException {
-        int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
-            if (entityName == null) {
+if (Character.isHighSurrogate(c)) {
+    // Check if there is a next character and it's a low surrogate
+    if (i + 1 < len && Character.isLowSurrogate(str.charAt(i + 1))) {
+        // Combine them into a code point
+        int codePoint = Character.toCodePoint(c, str.charAt(i + 1));
+        // Escape as a single numerical entity
+        writer.write("&#");
+        writer.write(Integer.toString(codePoint, 10));
+        writer.write(';');
+        // Skip the next character
+        i++;
+    } else {
+        // Handle invalid surrogate pair, maybe just escape the high surrogate as is?
+        writer.write("&#");
+        writer.write(Integer.toString(c, 10));
+        writer.write(';');
+    }
+} else {
+    // Existing logic for characters <= 0x7F or low surrogates without high surrogates
     if (c > 0x7F) {
         writer.write("&#");
         writer.write(Integer.toString(c, 10));
         writer.write(';');
     } else {
         writer.write(c);
     }
-            } else {
-                writer.write('&');
-                writer.write(entityName);
-                writer.write(';');
-            }
-        }
 }
\ No newline at end of file
