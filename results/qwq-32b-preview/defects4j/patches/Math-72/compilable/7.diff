diff --git a/tmp/dac8267a-1ac0-435c-9a5a-97252da871cf_buggy.java b/tmp/8f9e6e4f-ac4f-44d7-b16b-d7f4c75a815a_fixed.java
index 0fe7b81..ba5343f 100644
--- a/tmp/dac8267a-1ac0-435c-9a5a-97252da871cf_buggy.java
+++ b/tmp/8f9e6e4f-ac4f-44d7-b16b-d7f4c75a815a_fixed.java
@@ -1,67 +1,66 @@
-    /**
-     * Find a zero in the given interval with an initial guess.
-     * <p>Throws <code>IllegalArgumentException</code> if the values of the
-     * function at the three points have the same sign (note that it is
-     * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
-     *
-     * @param f function to solve.
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @param initial the start value to use (must be set to min if no
-     * initial point is known).
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException the maximum iteration count
-     * is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating
-     *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
-     */
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
-        double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
-
-        // return the first endpoint if it is good enough
+    // Evaluate function at the endpoints and initial point
     double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
-
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
-        // return the second endpoint if it is good enough
     double yMax = f.value(max);
+    double yInitial = f.value(initial);
+
+    // Check if any of the points is already a root
+    if (Math.abs(yMin) <= functionValueAccuracy) {
+        setResult(min, yMin, 0);
+        return min;
+    }
     if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+        setResult(max, yMax, 0);
+        return max;
     }
-
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+    if (Math.abs(yInitial) <= functionValueAccuracy) {
+        setResult(initial, yInitial, 0);
+        return initial;
     }
 
+    // Check if the function values at min and max have the same sign
     if (yMin * yMax > 0) {
         throw MathRuntimeException.createIllegalArgumentException(
                 NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
     }
 
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
+    // Determine the interval to use
+    double a = min;
+    double fa = yMin;
+    double b = max;
+    double fb = yMax;
+    double c;
+    double fc;
 
+    // Choose c as the initial point if it lies within [a, b]
+    if (initial >= a && initial <= b) {
+        c = initial;
+        fc = yInitial;
+    } else {
+        // If initial is outside [a, b], set c to the closer endpoint
+        if (Math.abs(initial - a) < Math.abs(initial - b)) {
+            c = a;
+            fc = fa;
+        } else {
+            c = b;
+            fc = fb;
+        }
+    }
+
+    // If c is not equal to a or b, and the function values at a, b, and c
+    // allow for a quadratic interpolation, proceed with Brent's method
+    if ((c != a && c != b) && (fa != fb && fb != fc && fc != fa)) {
+        return solve(f, a, fa, b, fb, c, fc);
+    } else {
+        // Otherwise, perform a bisection step
+        double d = 0.5 * (a + b);
+        double fd = f.value(d);
+        return solve(f, a, fa, b, fb, d, fd);
+    }
 }
\ No newline at end of file
