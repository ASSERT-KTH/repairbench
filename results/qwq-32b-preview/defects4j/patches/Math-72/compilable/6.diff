diff --git a/tmp/dcb18d12-a27a-4aa1-9e5a-100bea08a9ae_buggy.java b/tmp/1336b439-a200-409b-8896-2eb11f3cfdaf_fixed.java
index 0fe7b81..7ace81d 100644
--- a/tmp/dcb18d12-a27a-4aa1-9e5a-100bea08a9ae_buggy.java
+++ b/tmp/1336b439-a200-409b-8896-2eb11f3cfdaf_fixed.java
@@ -1,67 +1,64 @@
-    /**
-     * Find a zero in the given interval with an initial guess.
-     * <p>Throws <code>IllegalArgumentException</code> if the values of the
-     * function at the three points have the same sign (note that it is
-     * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
-     *
-     * @param f function to solve.
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @param initial the start value to use (must be set to min if no
-     * initial point is known).
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException the maximum iteration count
-     * is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating
-     *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
-     */
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
-        double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
-
-        // return the first endpoint if it is good enough
+    // Evaluate function at endpoints and initial point
     double yMin = f.value(min);
     if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+        setResult(min, yMin, 0);
+        return min;
     }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
-        // return the second endpoint if it is good enough
     double yMax = f.value(max);
     if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+        setResult(max, yMax, 0);
+        return max;
     }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+    double yInitial = f.value(initial);
+    if (Math.abs(yInitial) <= functionValueAccuracy) {
+        setResult(initial, yInitial, 0);
+        return initial;
     }
 
+    // Check if initial is equal to min or max, and their function values are acceptable
+    if (initial == min || initial == max) {
+        if (Math.abs(yInitial) <= functionValueAccuracy) {
+            setResult(initial, yInitial, 0);
+            return initial;
+        }
+    }
+
+    // Check if the function values at min and max have the same sign
     if (yMin * yMax > 0) {
         throw MathRuntimeException.createIllegalArgumentException(
               NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
     }
 
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
+    // Determine the interval containing the root
+    double a = min;
+    double fa = yMin;
+    double b = max;
+    double fb = yMax;
+    double c;
+    double fc;
 
+    if (yInitial * fa < 0) {
+        c = initial;
+        fc = yInitial;
+    } else if (yInitial * fb < 0) {
+        c = initial;
+        fc = yInitial;
+    } else {
+        // If initial guess does not bracket the root with either endpoint,
+        // use the entire interval [min, max]
+        c = initial;
+        fc = yInitial;
+    }
+
+    // Proceed with the Brent algorithm
+    return solve(f, a, fa, b, fb, c, fc);
 }
\ No newline at end of file
