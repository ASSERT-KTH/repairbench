diff --git a/tmp/0955e997-726b-4b40-8f2d-74fd48b8660d_buggy.java b/tmp/02842bc0-91cd-4d99-8b58-1f09b345f5e5_fixed.java
index 308b324..25c158f 100644
--- a/tmp/0955e997-726b-4b40-8f2d-74fd48b8660d_buggy.java
+++ b/tmp/02842bc0-91cd-4d99-8b58-1f09b345f5e5_fixed.java
@@ -1,11 +1,68 @@
-  /**
-   * Check to see if the given block comment looks like it should be JSDoc.
+   parse("/* \n *@type {number} */ var x = 3;", SUSPICIOUS_COMMENT_WARNING);
+   ```
+
+   The comment is:
+
+   ```
+   /* 
+   *@type {number} */
+   ```
+
+   Here, the '@' symbol is preceded by a single '*', which should be caught by the existing check for "\n * @".
+
+2. **testSuspiciousBlockCommentWarning4:**
+
+   ```java
+   parse(
+       "  /*\n" +
+       "   * @type {number}\n" +
+       "   */\n" +
+       "  var x = 3;",
+       SUSPICIOUS_COMMENT_WARNING);
+   ```
+
+   The comment is:
+
+   ```
+    /*
+       * @type {number}
        */
-  private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
-      errorReporter.warning(
-          SUSPICIOUS_COMMENT_WARNING,
-          sourceName,
-          comment.getLineno(), "", 0);
-    }
-  }
+   ```
+
+   This should be caught because it contains "\n * @".
+
+3. **testSuspiciousBlockCommentWarning5:**
+
+   ```java
+   parse(
+       "  /*\n" +
+       "   * some random text here\n" +
+       "   * @type {number}\n" +
+       "   */\n" +
+       "  var x = 3;",
+       SUSPICIOUS_COMMENT_WARNING);
+   ```
+
+   The comment is:
+
+   ```
+    /*
+       * some random text here
+       * @type {number}
+       */
+   ```
+
+   Again, it contains "\n * @".
+
+Given that the existing checks should theoretically catch these cases, there might be an issue with how the comment's value is being retrieved or how newline characters are being handled.
+
+### Proposed Solution
+
+To make the function more robust, we can improve the checks for JSDoc-like comments. Specifically:
+
+1. **Check for "/*@"** to catch comments that start with "/* @".
+2. **Check for "\n * @"** to catch comments where lines start with " * @" after the initial "/*".
+
+Additionally, to handle different types of newline characters (e.g., "\r\n" on Windows), we should make the newline detection more flexible.
+
+Here's an improved version of the `handleBlockComment` function:
