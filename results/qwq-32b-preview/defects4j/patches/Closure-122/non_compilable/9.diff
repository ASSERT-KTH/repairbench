diff --git a/tmp/a533d0b9-3d5a-48fa-b68d-46467ea6e137_buggy.java b/tmp/8715737e-7488-4d22-b77a-eb06b21bbbf1_fixed.java
index 308b324..5cab521 100644
--- a/tmp/a533d0b9-3d5a-48fa-b68d-46467ea6e137_buggy.java
+++ b/tmp/8715737e-7488-4d22-b77a-eb06b21bbbf1_fixed.java
@@ -1,11 +1,54 @@
+import java.util.regex.Pattern;
+
+public class CommentHandler {
+  private final ErrorReporter errorReporter;
+  private final String sourceName;
+
+  public CommentHandler(ErrorReporter errorReporter, String sourceName) {
+    this.errorReporter = errorReporter;
+    this.sourceName = sourceName;
+  }
+
   /**
    * Check to see if the given block comment looks like it should be JSDoc.
    */
   private void handleBlockComment(Comment comment) {
-    if (comment.getValue().indexOf("/* @") != -1 || comment.getValue().indexOf("\n * @") != -1) {
+    // Define the regex pattern to identify JSDoc comments
+    Pattern jsdocPattern = Pattern.compile("/\\* @|\\n\\s*\\* \\s*@");
+    // Create a matcher for the comment's value
+    Matcher matcher = jsdocPattern.matcher(comment.getValue());
+    // If the pattern is found, report a warning
+    if (matcher.find()) {
       errorReporter.warning(
           SUSPICIOUS_COMMENT_WARNING,
           sourceName,
           comment.getLineno(), "", 0);
     }
   }
+
+  // Assuming ErrorReporter and Comment classes are defined elsewhere
+  interface ErrorReporter {
+    void warning(String warningMessage, String sourceName, int lineNumber, String details, int errorCode);
+  }
+
+  static class Comment {
+    private final String value;
+    private final int lineno;
+
+    public Comment(String value, int lineno) {
+      this.value = value;
+      this.lineno = lineno;
+    }
+
+    public String getValue() {
+      return value;
+    }
+
+    public int getLineno() {
+      return lineno;
+    }
+  }
+
+  // Placeholder for SUSPICIOUS_COMMENT_WARNING
+  private static final String SUSPICIOUS_COMMENT_WARNING = "Suspicious JSDoc comment";
+}
\ No newline at end of file
