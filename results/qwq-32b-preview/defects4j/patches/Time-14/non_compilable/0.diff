diff --git a/tmp/5a2c1319-b439-4173-b5ed-c0401354d13c_buggy.java b/tmp/5c891cf0-9d8d-47fe-b49e-f24706f9720e_fixed.java
index 10616db..87dd8d0 100644
--- a/tmp/5a2c1319-b439-4173-b5ed-c0401354d13c_buggy.java
+++ b/tmp/5c891cf0-9d8d-47fe-b49e-f24706f9720e_fixed.java
@@ -1,19 +1,33 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+    // Check if partial is contiguous, e.g., month-day
     if (DateTimeUtils.isContiguous(partial)) {
-            long instant = 0L;
-            for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+        int year = iChronology.year().get(values[0]);
+        int month = partial.getFieldType(0).get(values[0]);
+        int day = partial.getFieldType(1).get(values[1]);
+        
+        // Calculate new month and year after addition
+        int newMonth = month + valueToAdd;
+        int newYear = year + (newMonth - 1) / 12;
+        newMonth = (newMonth - 1) % 12 + 1;
+        
+        // Get the length of the new month
+        int daysInNewMonth = iChronology.daysPerMonthMaximum(newYear, newMonth);
+        
+        // Adjust day if it exceeds the new month's days
+        if (day > daysInNewMonth) {
+            day = daysInNewMonth;
         }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        
+        // Create new values array with adjusted day
+        int[] newValues = new int[partial.size()];
+        newValues[0] = iChronology.monthOfYear().set(values[0], newMonth);
+        newValues[1] = iChronology.dayOfMonth().set(values[1], day);
+        
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
