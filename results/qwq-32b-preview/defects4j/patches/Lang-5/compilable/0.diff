diff --git a/tmp/7c3f4c34-bd0e-4bd5-9933-011dfd6dd623_buggy.java b/tmp/d29242b4-b1e2-4c6c-acbe-9697c18c0e29_fixed.java
index f843d29..54c7d80 100644
--- a/tmp/7c3f4c34-bd0e-4bd5-9933-011dfd6dd623_buggy.java
+++ b/tmp/d29242b4-b1e2-4c6c-acbe-9697c18c0e29_fixed.java
@@ -1,68 +1,70 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(final String str) {
     if (str == null) {
         return null;
     }
     final int len = str.length();
     if (len < 2) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+    
+    if (str.charAt(0) == '_') {
+        // Handle strings starting with an underscore
+        if (len < 3) {
+            throw new IllegalArgumentException("Must be at least 3 chars if starts with underscore: " + str);
+        }
+        // Extract country code
+        int countryStart = 1;
+        int countryEnd = 3;
+        if (len < 5 || str.charAt(3) != '_') {
+            // No variant, country code is from index 1 to 3
+            String country = str.substring(countryStart, countryEnd);
+            if (!country.equals(country.toUpperCase())) {
+                throw new IllegalArgumentException("Country code must be uppercase: " + str);
+            }
+            return new Locale("", country);
+        } else {
+            // Variant is present
+            int variantStart = 4;
+            String country = str.substring(countryStart, countryEnd);
+            if (!country.equals(country.toUpperCase())) {
+                throw new IllegalArgumentException("Country code must be uppercase: " + str);
+            }
+            String variant = str.substring(variantStart);
+            return new Locale("", country, variant);
+        }
+    } else {
+        // Original logic for strings not starting with underscore
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (len == 2) {
             return new Locale(str);
         }
         if (len < 5) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch3 = str.charAt(3);
         if (ch3 == '_') {
             return new Locale(str.substring(0, 2), "", str.substring(4));
         }
         final char ch4 = str.charAt(4);
         if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (len == 5) {
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
         if (len < 7) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (str.charAt(5) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
+}
\ No newline at end of file
