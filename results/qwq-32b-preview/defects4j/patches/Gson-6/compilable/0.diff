diff --git a/tmp/d4682ece-697c-4d08-8963-d33f14075cd2_buggy.java b/tmp/0b378481-a1b8-4750-ab50-51731601e361_fixed.java
index 1c53d31..920a6b1 100644
--- a/tmp/d4682ece-697c-4d08-8963-d33f14075cd2_buggy.java
+++ b/tmp/0b378481-a1b8-4750-ab50-51731601e361_fixed.java
@@ -1,20 +1,26 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
   TypeAdapter<?> typeAdapter;
   if (TypeAdapter.class.isAssignableFrom(value)) {
     Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
   } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
     Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
         .construct()
         .create(gson, fieldType);
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
+
+  // Ensure typeAdapter is not null before calling nullSafe()
+  if (typeAdapter == null) {
+    throw new IllegalStateException("TypeAdapter cannot be null.");
+  }
+
   typeAdapter = typeAdapter.nullSafe();
   return typeAdapter;
 }
\ No newline at end of file
