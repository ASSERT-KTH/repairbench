diff --git a/tmp/4df0cf22-baf3-433e-9acf-f3f6a2197c95_buggy.java b/tmp/68f09e83-b373-4572-a75f-ddc7fe80cc66_fixed.java
index 229b3e7..95c7c65 100644
--- a/tmp/4df0cf22-baf3-433e-9acf-f3f6a2197c95_buggy.java
+++ b/tmp/68f09e83-b373-4572-a75f-ddc7fe80cc66_fixed.java
@@ -1,55 +1,59 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
+
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        // No room for description; throw exception
+        throw new IllegalStateException("Total width is less than the width of the argument and indent - no room for the description");
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // Calculate the maximum available width for the description
+    int maxDescWidth = width - nextLineTabStop;
+
+    // Create padding for the next line
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
+        // Trim the remaining text and prepend padding
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, width, nextLineTabStop);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        // Ensure that the wrapping position doesn't exceed the available description width
+        if (pos - nextLineTabStop > maxDescWidth)
         {
-                pos = width;
+            pos = nextLineTabStop + maxDescWidth;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
