diff --git a/tmp/f2fe4335-c15b-4b9a-ae35-b622350fafe1_buggy.java b/tmp/a3efdc1b-4872-4422-90e2-0e4ee2caaf0b_fixed.java
index a6dab52..38d0af2 100644
--- a/tmp/f2fe4335-c15b-4b9a-ae35-b622350fafe1_buggy.java
+++ b/tmp/a3efdc1b-4872-4422-90e2-0e4ee2caaf0b_fixed.java
@@ -1,80 +1,82 @@
-    /**
-     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>
-     * 
-     * @param out write to receieve the escaped string
-     * @param str String to escape values in, may be null
-     * @param escapeSingleQuote escapes single quotes if <code>true</code>
-     * @throws IOException if an IOException occurs
-     */
 private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (str == null) {
         return;
     }
-        int sz;
-        sz = str.length();
+    int sz = str.length();
+    char prevCh = 0; // Track the previous character
     for (int i = 0; i < sz; i++) {
         char ch = str.charAt(i);
 
+        if (prevCh == '<' && ch == '/') {
+            // Escape "/" when it follows "<"
+            out.write("\\/");
+            prevCh = '/'; // Set prevCh to '/' to avoid double escaping
+            continue;
+        }
+
+        // Reset prevCh if not part of the "</" sequence
+        prevCh = ch;
+
         // handle unicode
         if (ch > 0xfff) {
             out.write("\\u" + hex(ch));
         } else if (ch > 0xff) {
             out.write("\\u0" + hex(ch));
         } else if (ch > 0x7f) {
             out.write("\\u00" + hex(ch));
         } else if (ch < 32) {
             switch (ch) {
                 case '\b':
                     out.write('\\');
                     out.write('b');
                     break;
                 case '\n':
                     out.write('\\');
                     out.write('n');
                     break;
                 case '\t':
                     out.write('\\');
                     out.write('t');
                     break;
                 case '\f':
                     out.write('\\');
                     out.write('f');
                     break;
                 case '\r':
                     out.write('\\');
                     out.write('r');
                     break;
                 default:
                     if (ch > 0xf) {
                         out.write("\\u00" + hex(ch));
                     } else {
                         out.write("\\u000" + hex(ch));
                     }
                     break;
             }
         } else {
             switch (ch) {
                 case '\'':
                     if (escapeSingleQuote) {
                         out.write('\\');
                     }
                     out.write('\'');
                     break;
                 case '"':
                     out.write('\\');
                     out.write('"');
                     break;
                 case '\\':
                     out.write('\\');
                     out.write('\\');
                     break;
                 default:
                     out.write(ch);
                     break;
             }
         }
     }
 }
\ No newline at end of file
