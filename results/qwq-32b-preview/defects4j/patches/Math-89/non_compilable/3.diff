diff --git a/tmp/0112c8eb-9ac5-4bba-a165-b2a5ddd86ed9_buggy.java b/tmp/e8b22024-e32b-41b1-aef1-bafca3e72e31_fixed.java
index 42b7b48..8c11b94 100644
--- a/tmp/0112c8eb-9ac5-4bba-a165-b2a5ddd86ed9_buggy.java
+++ b/tmp/e8b22024-e32b-41b1-aef1-bafca3e72e31_fixed.java
@@ -1,16 +1,36 @@
 /**
  * Adds 1 to the frequency count for v.
  * <p>
  * If other objects have already been added to this Frequency, v must
  * be comparable to those that have already been added.
  * </p>
  * 
  * @param v the value to add.
  * @throws IllegalArgumentException if <code>v</code> is not Comparable, 
  *         or is not comparable with previous entries
  * @deprecated use {@link #addValue(Comparable)} instead
  */
 @Deprecated
 public void addValue(Object v) {
-            addValue((Comparable<?>) v);            
+    if (!(v instanceof Comparable)) {
+        throw new IllegalArgumentException("The value must be Comparable.");
+    }
+    
+    @SuppressWarnings("unchecked")
+    Comparable<?> comparableV = (Comparable<?>) v;
+    
+    // Check if the frequency map is empty
+    if (frequency.isEmpty()) {
+        addValue(comparableV);
+    } else {
+        // Check if the new value is comparable with existing keys
+        for (Comparable<?> existingKey : frequency.keySet()) {
+            try {
+                comparableV.compareTo(existingKey);
+            } catch (ClassCastException e) {
+                throw new IllegalArgumentException("The value is not comparable with existing entries.", e);
+            }
+        }
+        addValue(comparableV);
+    }
 }
\ No newline at end of file
