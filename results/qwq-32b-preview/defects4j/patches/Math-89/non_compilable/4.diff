diff --git a/tmp/481c4ec9-d2aa-4ed8-a474-60b47ce4a19c_buggy.java b/tmp/bc9f1c7c-edcd-48f7-844c-8a2a165ca8a8_fixed.java
index 42b7b48..f62b6ee 100644
--- a/tmp/481c4ec9-d2aa-4ed8-a474-60b47ce4a19c_buggy.java
+++ b/tmp/bc9f1c7c-edcd-48f7-844c-8a2a165ca8a8_fixed.java
@@ -1,16 +1,38 @@
 /**
  * Adds 1 to the frequency count for v.
  * <p>
  * If other objects have already been added to this Frequency, v must
  * be comparable to those that have already been added.
  * </p>
  * 
  * @param v the value to add.
  * @throws IllegalArgumentException if <code>v</code> is not Comparable, 
  *         or is not comparable with previous entries
  * @deprecated use {@link #addValue(Comparable)} instead
  */
 @Deprecated
 public void addValue(Object v) {
-            addValue((Comparable<?>) v);            
+    if (!(v instanceof Comparable)) {
+        throw new IllegalArgumentException("Object is not Comparable");
+    }
+    @SuppressWarnings("unchecked")
+    Comparable<?> comparableV = (Comparable<?>) v;
+    
+    // Assuming there is a list of existing values
+    // Check if the new value is comparable with existing entries
+    for (Object existing : existingEntries) { // Replace 'existingEntries' with the actual collection
+        if (!(existing instanceof Comparable)) {
+            throw new IllegalArgumentException("Existing entry is not Comparable");
+        }
+        @SuppressWarnings("unchecked")
+        Comparable<?> comparableExisting = (Comparable<?>) existing;
+        try {
+            comparableV.compareTo(comparableExisting);
+        } catch (ClassCastException e) {
+            throw new IllegalArgumentException("Object is not comparable with existing entries", e);
+        }
+    }
+    
+    // If all checks pass, add the value
+    addValue(comparableV);
 }
\ No newline at end of file
