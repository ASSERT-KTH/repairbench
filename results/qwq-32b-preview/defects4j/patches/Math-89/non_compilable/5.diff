diff --git a/tmp/e1401234-5235-4ebb-bb01-d701df50f5ff_buggy.java b/tmp/50f21b0b-29bc-4f55-a437-c741e21848c7_fixed.java
index 42b7b48..c709e8e 100644
--- a/tmp/e1401234-5235-4ebb-bb01-d701df50f5ff_buggy.java
+++ b/tmp/50f21b0b-29bc-4f55-a437-c741e21848c7_fixed.java
@@ -1,16 +1,31 @@
 /**
  * Adds 1 to the frequency count for v.
  * <p>
  * If other objects have already been added to this Frequency, v must
  * be comparable to those that have already been added.
  * </p>
  *
  * @param v the value to add.
  * @throws IllegalArgumentException if <code>v</code> is not Comparable,
  *         or is not comparable with previous entries
  * @deprecated use {@link #addValue(Comparable)} instead
  */
 @Deprecated
 public void addValue(Object v) {
-            addValue((Comparable<?>) v);            
+    if (!(v instanceof Comparable)) {
+        throw new IllegalArgumentException("Value is not Comparable");
+    }
+    @SuppressWarnings("unchecked")
+    Comparable<?> comparableValue = (Comparable<?>) v;
+    // Check if the frequency already has entries and if v is comparable with them
+    if (!frequency.isEmpty()) {
+        for (Comparable<?> existing : frequency.keySet()) {
+            try {
+                comparableValue.compareTo(existing);
+            } catch (ClassCastException e) {
+                throw new IllegalArgumentException("Value is not comparable with existing entries", e);
+            }
+        }
+    }
+    addValue(comparableValue);
 }
\ No newline at end of file
