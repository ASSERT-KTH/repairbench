diff --git a/tmp/d1a394c5-0fa3-4bda-b40c-63b7ae2bd694_buggy.java b/tmp/ff5fa7dc-5a8e-4d4f-927b-b1b5b3697caf_fixed.java
index 4c1ed27..743cef2 100644
--- a/tmp/d1a394c5-0fa3-4bda-b40c-63b7ae2bd694_buggy.java
+++ b/tmp/ff5fa7dc-5a8e-4d4f-927b-b1b5b3697caf_fixed.java
@@ -1,32 +1,52 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
+
 public final void translate(CharSequence input, Writer out) throws IOException {
+
 if (out == null) {
+
 throw new IllegalArgumentException("The Writer must not be null");
+
 }
+
 if (input == null) {
+
 return;
+
 }
+
 int pos = 0;
+
 int len = input.length();
+
 while (pos < len) {
+
 int consumed = translate(input, pos, out);
+
 if (consumed == 0) {
+
 char[] c = Character.toChars(Character.codePointAt(input, pos));
+
 out.write(c);
+
 pos += c.length;
+
 continue;
+
 }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+
 for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+
+if (pos >= len) {
+
+throw new IllegalArgumentException("Translator consumed more characters than available");
+
 }
+
+int codePoint = Character.codePointAt(input, pos);
+
+pos += Character.charCount(codePoint);
+
 }
+
+}
+
 }
