diff --git a/tmp/37f2ed54-776a-43c8-bd96-29487f12ed82_buggy.java b/tmp/66f8ae44-d3da-43bf-b9f3-e7071da7461e_fixed.java
index 4c1ed27..91b9c8b 100644
--- a/tmp/37f2ed54-776a-43c8-bd96-29487f12ed82_buggy.java
+++ b/tmp/66f8ae44-d3da-43bf-b9f3-e7071da7461e_fixed.java
@@ -1,32 +1,29 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
+            // If the translator didn't consume anything, handle the character manually
+            int codePoint = Character.codePointAt(input, pos);
+            if (Character.isSurrogate(input.charAt(pos))) {
+                // Write the surrogate pair directly
+                out.write(input.charAt(pos));
+                pos += Character.charCount(codePoint);
+            } else {
+                // Write a single char
+                out.write(codePoint);
+                pos += 1;
+            }
             continue;
         }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-            }
+        // Move pos forward by the number of chars consumed by the translator
+        pos += consumed;
     }
 }
\ No newline at end of file
