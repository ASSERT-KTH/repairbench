diff --git a/tmp/a2da0d93-00be-43eb-877f-5f516ad25737_buggy.java b/tmp/4a528ed5-30c8-40c5-a5bb-c637c4764187_fixed.java
index 4c1ed27..91370ab 100644
--- a/tmp/a2da0d93-00be-43eb-877f-5f516ad25737_buggy.java
+++ b/tmp/4a528ed5-30c8-40c5-a5bb-c637c4764187_fixed.java
@@ -1,32 +1,49 @@
 /**
  * Translate an input onto a Writer. This is intentionally final as its algorithm is 
  * tightly coupled with the abstract method of this class. 
  *
  * @param input CharSequence that is being translated
  * @param out Writer to translate the text to
  * @throws IOException if and only if the Writer produces an IOException
  */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
+            int codePoint = Character.codePointAt(input, pos);
+            if (Character.isHighSurrogate(codePoint)) {
+                if (pos + 1 < len) {
+                    int next = pos + 1;
+                    int nextCode = Character.codePointAt(input, next);
+                    if (Character.isLowSurrogate(nextCode)) {
+                        consumed = 2;
+                    } else {
+                        // Invalid surrogate pair: treat as single char
+                        consumed = 1;
+                    }
+                } else {
+                    // High surrogate at the end: treat as single char
+                    consumed = 1;
+                }
+            } else {
+                consumed = 1;
+            }
+            out.write(Character.toChars(codePoint));
+            pos += consumed;
             continue;
         }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+        // contract with translators is that they have to understand codepoints 
+        // and they just took care of a surrogate pair
         for (int pt = 0; pt < consumed; pt++) {
             pos += Character.charCount(Character.codePointAt(input, pos));
         }
     }
 }
\ No newline at end of file
