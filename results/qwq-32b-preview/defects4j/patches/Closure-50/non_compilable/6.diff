diff --git a/tmp/61287ca9-d2f4-49fb-b824-c20c052e9f83_buggy.java b/tmp/9e74d0c0-67f4-4c54-8577-1527daa829ff_fixed.java
index d8b0158..877bb63 100644
--- a/tmp/61287ca9-d2f4-49fb-b824-c20c052e9f83_buggy.java
+++ b/tmp/9e74d0c0-67f4-4c54-8577-1527daa829ff_fixed.java
@@ -1,113 +1,120 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
 private Node tryFoldArrayJoin(Node n) {
   Node callTarget = n.getFirstChild();
 
   if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
     return n;
   }
 
   Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
+  if (right != null && !NodeUtil.isImmutableValue(right)) {
     return n;
   }
-    }
 
   Node arrayNode = callTarget.getFirstChild();
   Node functionName = arrayNode.getNext();
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
-        !functionName.getString().equals("join")) {
+  if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals("join")) {
     return n;
   }
 
-      // "," is the default, it doesn't need to be explicit
+  String joinString = (right == null) ? "," : getConstantStringValue(right);
+  if (joinString == null) {
+    // Separator is not a constant string; cannot fold
+    return n;
+  }
 
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
-    int foldedSize = 0;
+  List<Node> newMembers = new LinkedList<>();
+  StringBuilder foldedString = null;
   Node prev = null;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
-    while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
-        if (sb == null) {
-          sb = new StringBuilder();
+  for (Node element : arrayNode.children()) {
+    if (isConstantElement(element)) {
+      String elemStr = getConstantElementStringValue(element);
+      if (foldedString == null) {
+        foldedString = new StringBuilder(elemStr);
       } else {
-          sb.append(joinString);
+        foldedString.append(joinString).append(elemStr);
       }
-        sb.append(NodeUtil.getArrayElementStringValue(elem));
     } else {
-        if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
+      if (foldedString != null) {
+        newMembers.add(Node.newString(foldedString.toString()));
+        foldedString = null;
       }
-        foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
+      newMembers.add(element);
     }
-      prev = elem;
-      elem = elem.getNext();
+    prev = element;
   }
 
-    if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
+  if (foldedString != null) {
+    newMembers.add(Node.newString(foldedString.toString()));
   }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
+  int foldedSize = estimateFoldedSize(newMembers, joinString, right);
   int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
-        reportCodeChange();
-        return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
+
+  if (foldedSize >= originalSize) {
+    // Optimization doesn't reduce size; skip
     return n;
   }
+
+  // Reconstruct the array with folded elements
   arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        n.getParent().replaceChild(n, foldedStringNode);
-        reportCodeChange();
-        return foldedStringNode;
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
+  for (Node node : newMembers) {
     arrayNode.addChildToBack(node);
   }
+
   reportCodeChange();
-        break;
-    }
-
   return n;
 }
+
+private String getConstantStringValue(Node node) {
+  if (node.isString()) {
+    return node.getString();
+  } else if (node.isNumber()) {
+    return Double.toString(node.getDouble());
+  } else if (node.isBoolean()) {
+    return Boolean.toString(node.getBoolean());
+  } else if (node.isNull()) {
+    return "null";
+  } else if (node.isUndefined()) {
+    return "undefined";
+  } else {
+    return null;
+  }
+}
+
+private boolean isConstantElement(Node node) {
+  return node.isString() || node.isNumber() || node.isBoolean() || node.isNull() || node.isUndefined() || node.isEmpty();
+}
+
+private String getConstantElementStringValue(Node node) {
+  if (node.isString()) {
+    return node.getString();
+  } else if (node.isNumber()) {
+    return Double.toString(node.getDouble());
+  } else if (node.isBoolean()) {
+    return Boolean.toString(node.getBoolean());
+  } else if (node.isNull()) {
+    return "null";
+  } else if (node.isUndefined()) {
+    return "undefined";
+  } else if (node.isEmpty()) {
+    return "";
+  } else {
+    throw new IllegalStateException("Unexpected constant element type");
+  }
+}
+
+private int estimateFoldedSize(List<Node> newMembers, String joinString, Node separatorNode) {
+  int size = 0;
+  for (Node node : newMembers) {
+    size += InlineCostEstimator.getCost(node);
+  }
+  if (separatorNode != null) {
+    size += InlineCostEstimator.getCost(separatorNode);
+  }
+  // Add overhead for the join operation
+  size += "[].join()".length();
+  // Add overhead for commas in the array
+  size += Math.max(newMembers.size() - 1, 0);
+  return size;
+}
\ No newline at end of file
