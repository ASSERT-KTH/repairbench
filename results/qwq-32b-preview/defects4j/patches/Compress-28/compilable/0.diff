diff --git a/tmp/6413a98b-d3da-4c08-b02d-1ed80c234e95_buggy.java b/tmp/ab4671bd-a895-4311-aa27-a66036e27aea_fixed.java
index 0f439b3..71942fd 100644
--- a/tmp/6413a98b-d3da-4c08-b02d-1ed80c234e95_buggy.java
+++ b/tmp/ab4671bd-a895-4311-aa27-a66036e27aea_fixed.java
@@ -1,38 +1,31 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
-        if (hasHitEOF || entryOffset >= entrySize) {
-            return -1;
-        }
-
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
+    if (hasHitEOF || entryOffset >= entrySize) {
+        return -1;
+    }
+
     numToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
-        if (totalRead == -1) {
+    int totalRead = 0;
+    while (totalRead < numToRead) {
+        int bytes = is.read(buf, offset + totalRead, numToRead - totalRead);
+        if (bytes == -1) {
+            if (totalRead == 0) {
                 hasHitEOF = true;
+                return -1;
             } else {
-            entryOffset += totalRead;
+                // Truncated entry
+                throw new IOException("Truncated entry: Expected " + numToRead + " bytes, but only " + totalRead + " bytes read");
+            }
+        }
+        totalRead += bytes;
+        count(bytes);
+        entryOffset += bytes;
     }
 
     return totalRead;
 }
\ No newline at end of file
