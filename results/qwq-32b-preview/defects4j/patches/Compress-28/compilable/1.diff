diff --git a/tmp/2792cd60-4a6f-4a83-a010-b1fa1a609c37_buggy.java b/tmp/40f65ebe-33d5-4308-a1ab-9db144eb9a35_fixed.java
index 0f439b3..4496376 100644
--- a/tmp/2792cd60-4a6f-4a83-a010-b1fa1a609c37_buggy.java
+++ b/tmp/40f65ebe-33d5-4308-a1ab-9db144eb9a35_fixed.java
@@ -1,38 +1,33 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
     int totalRead = 0;
 
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
-        numToRead = Math.min(numToRead, available());
+    // Determine the number of bytes left in the entry
+    int bytesLeft = (int) (entrySize - entryOffset);
+    numToRead = Math.min(numToRead, bytesLeft);
 
     totalRead = is.read(buf, offset, numToRead);
+
+    if (totalRead > 0) {
         count(totalRead);
-        
-        if (totalRead == -1) {
-            hasHitEOF = true;
-        } else {
         entryOffset += totalRead;
     }
 
+    if (totalRead < numToRead) {
+        // If fewer bytes were read than expected, and we haven't reached EOF,
+        // it indicates a truncated entry.
+        if (!hasHitEOF) {
+            throw new IOException("Truncated tar entry: expected " + numToRead + " bytes, but read " + totalRead);
+        }
+    }
+
     return totalRead;
 }
\ No newline at end of file
