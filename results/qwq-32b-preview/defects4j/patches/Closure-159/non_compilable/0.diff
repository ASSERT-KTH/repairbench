diff --git a/tmp/ec0247bf-644b-4252-bed9-49842d38eac6_buggy.java b/tmp/d2f7f28f-f98c-4ceb-9546-966a3285ae5d_fixed.java
index de9af32..91cab99 100644
--- a/tmp/ec0247bf-644b-4252-bed9-49842d38eac6_buggy.java
+++ b/tmp/d2f7f28f-f98c-4ceb-9546-966a3285ae5d_fixed.java
@@ -1,18 +1,39 @@
 /**
  * @see #findCalledFunctions(Node)
  */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
+private void findCalledFunctions(Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
-    // For each referenced function, add a new reference
+  
+  // Check if the node is a CALL type
   if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    // Get the first child, which should be the expression being called
+    Node callee = node.getFirstChild();
+    // Check if the callee is a NAME (simple function call)
+    if (callee.getType() == Token.NAME) {
+      changed.add(callee.getString());
+    }
+    // Check for property access (e.g., obj.method())
+    else if (callee.getType() == Token.GETPROP) {
+      // Get the name of the property being called
+      Node propertyName = callee.getLastChild();
+      if (propertyName.getType() == Token.STRING || propertyName.getType() == Token.NUMBER) {
+        changed.add(propertyName.getString());
+      }
+    }
+    // Check for computed property access (e.g., obj[method()]())
+    else if (callee.getType() == Token.COMPUTED_PROP) {
+      // Get the expression used for the property name
+      Node keyNode = callee.getLastChild();
+      // If it's a STRING or NUMBER, add its value
+      if (keyNode.getType() == Token.STRING || keyNode.getType() == Token.NUMBER) {
+        changed.add(keyNode.getString());
+      }
+      // Handle other cases if necessary
     }
   }
   
+  // Recursively process child nodes
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
