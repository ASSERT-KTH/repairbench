diff --git a/tmp/0191aeba-aba8-4943-956a-0cb4d5a3758e_buggy.java b/tmp/38a72f11-853d-4d51-861f-f63980385701_fixed.java
index 6f24eb6..b72a743 100644
--- a/tmp/0191aeba-aba8-4943-956a-0cb4d5a3758e_buggy.java
+++ b/tmp/38a72f11-853d-4d51-861f-f63980385701_fixed.java
@@ -1,99 +1,101 @@
 /**
  * Determines whether the given property is visible in the current context.
  * @param t The current traversal.
  * @param getprop The getprop node.
+ * @param parent The parent node.
  */
 private void checkPropertyVisibility(NodeTraversal t,
     Node getprop, Node parent) {
-    ObjectType objectType =
-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
+  JSType objectType = dereference(getprop.getFirstChild().getJSType());
+  if (!(objectType instanceof ObjectType)) {
+    return;
+  }
+
   String propertyName = getprop.getLastChild().getString();
 
-    if (objectType != null) {
   // Is this a normal property access, or are we trying to override
   // an existing property?
   boolean isOverride = t.inGlobalScope() &&
       parent.getType() == Token.ASSIGN &&
       parent.getFirstChild() == getprop;
 
+  ObjectType objType = (ObjectType) objectType;
+
   // Find the lowest property defined on a class with visibility
   // information.
-      if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
-      }
   JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
-        if (docInfo != null &&
-            docInfo.getVisibility() != Visibility.INHERITED) {
+  for (ObjectType type = objType; type != null;
+       type = type.getImplicitPrototype()) {
+    docInfo = type.getOwnPropertyJSDocInfo(propertyName);
+    if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {
       break;
     }
   }
 
-      if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+  if (docInfo == null || docInfo.getVisibility() == Visibility.INHERITED) {
+    // No visibility information found; assume it's public.
     return;
   }
 
-      boolean sameInput =
-          t.getInput().getName().equals(docInfo.getSourceName());
+  JSType ownerType = normalizeClassType(objType);
   Visibility visibility = docInfo.getVisibility();
-      JSType ownerType = normalizeClassType(objectType);
+
   if (isOverride) {
     // Check an ASSIGN statement that's trying to override a property
     // on a superclass.
     JSDocInfo overridingInfo = parent.getJSDocInfo();
     Visibility overridingVisibility = overridingInfo == null ?
         Visibility.INHERITED : overridingInfo.getVisibility();
 
     // Check that (a) the property *can* be overridden, and
     // (b) that the visibility of the override is the same as the
     // visibility of the original property.
-        if (visibility == Visibility.PRIVATE && !sameInput) {
+    if (visibility == Visibility.PRIVATE && !isSameInput(t, docInfo)) {
       compiler.report(
           t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
+              ownerType.toString()));
     } else if (overridingVisibility != Visibility.INHERITED &&
         overridingVisibility != visibility) {
       compiler.report(
           t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
+              visibility.name(), ownerType.toString(),
               overridingVisibility.name()));
     }
   } else {
-        if (sameInput) {
+    if (isSameInput(t, docInfo)) {
       // private access is always allowed in the same file.
       return;
     } else if (visibility == Visibility.PRIVATE &&
         (currentClass == null || ownerType.differsFrom(currentClass))) {
       if (docInfo.isConstructor() &&
           isValidPrivateConstructorAccess(parent)) {
         return;
       }
 
       // private access is not allowed outside the file from a different
       // enclosing class.
       compiler.report(
-              t.makeError(getprop,
-                  BAD_PRIVATE_PROPERTY_ACCESS,
+          t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,
               propertyName,
               validator.getReadableJSTypeName(
                   getprop.getFirstChild(), true)));
     } else if (visibility == Visibility.PROTECTED) {
       // There are 3 types of legal accesses of a protected property:
       // 1) Accesses in the same file
       // 2) Overriding the property in a subclass
       // 3) Accessing the property from inside a subclass
       // The first two have already been checked for.
       if (currentClass == null || !currentClass.isSubtype(ownerType)) {
         compiler.report(
             t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,
                 propertyName,
                 validator.getReadableJSTypeName(
                     getprop.getFirstChild(), true)));
       }
     }
   }
 }
+
+private boolean isSameInput(NodeTraversal t, JSDocInfo docInfo) {
+  return t.getInput().getName().equals(docInfo.getSourceName());
 }
\ No newline at end of file
