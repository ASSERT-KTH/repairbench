diff --git a/tmp/05872362-abfd-47b8-964f-57ee9e2bef17_buggy.java b/tmp/c6f25ba8-f997-4524-99aa-276d51f65827_fixed.java
index 6f24eb6..92d0602 100644
--- a/tmp/05872362-abfd-47b8-964f-57ee9e2bef17_buggy.java
+++ b/tmp/c6f25ba8-f997-4524-99aa-276d51f65827_fixed.java
@@ -1,99 +1,61 @@
-  /**
-   * Determines whether the given property is visible in the current context.
-   * @param t The current traversal.
-   * @param getprop The getprop node.
-   */
 private void checkPropertyVisibility(NodeTraversal t,
     Node getprop, Node parent) {
-    ObjectType objectType =
-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
+  JSType type = getprop.getFirstChild().getJSType();
+  ObjectType objectType = (type instanceof ObjectType) ? (ObjectType) type : null;
   String propertyName = getprop.getLastChild().getString();
 
   if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
+    // Determine if this is an override
     boolean isOverride = t.inGlobalScope() &&
         parent.getType() == Token.ASSIGN &&
         parent.getFirstChild() == getprop;
 
-      // Find the lowest property defined on a class with visibility
-      // information.
-      if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
-      }
+    // Find the lowest property defined on a class with visibility information
     JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
-        if (docInfo != null &&
-            docInfo.getVisibility() != Visibility.INHERITED) {
+    for (ObjectType currentType = objectType;
+         currentType != null;
+         currentType = currentType.getImplicitPrototype()) {
+      docInfo = currentType.getOwnPropertyJSDocInfo(propertyName);
+      if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {
         break;
       }
     }
 
-      if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
+    if (docInfo == null) {
+      // No visibility information found; assume public
       return;
     }
 
-      boolean sameInput =
-          t.getInput().getName().equals(docInfo.getSourceName());
     Visibility visibility = docInfo.getVisibility();
     JSType ownerType = normalizeClassType(objectType);
     if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
+      // Check override visibility
       JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
+      Visibility overridingVisibility = (overridingInfo != null) ?
+          overridingInfo.getVisibility() : Visibility.INHERITED;
 
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
-        if (visibility == Visibility.PRIVATE && !sameInput) {
-          compiler.report(
-              t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
-            overridingVisibility != visibility) {
-          compiler.report(
-              t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
-                  overridingVisibility.name()));
+      if (visibility == Visibility.PRIVATE &&
+          !t.getInput().getName().equals(docInfo.getSourceName())) {
+        compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, ownerType.toString()));
+      } else if (overridingVisibility != visibility && visibility != Visibility.INHERITED) {
+        compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), ownerType.toString(), overridingVisibility.name()));
       }
     } else {
-        if (sameInput) {
-          // private access is always allowed in the same file.
-          return;
-        } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
-          if (docInfo.isConstructor() &&
-              isValidPrivateConstructorAccess(parent)) {
-            return;
+      // Check property access visibility
+      boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());
+      if (!sameInput) {
+        if (visibility == Visibility.PRIVATE) {
+          if (currentClass == null || !ownerType.isSubtype(currentClass)) {
+            if (!isValidPrivateConstructorAccess(parent)) {
+              compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
+            }
           }
-
-          // private access is not allowed outside the file from a different
-          // enclosing class.
-          compiler.report(
-              t.makeError(getprop,
-                  BAD_PRIVATE_PROPERTY_ACCESS,
-                  propertyName,
-                  validator.getReadableJSTypeName(
-                      getprop.getFirstChild(), true)));
         } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
-            compiler.report(
-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
-                    propertyName,
-                    validator.getReadableJSTypeName(
-                        getprop.getFirstChild(), true)));
+          if (currentClass == null || !ownerType.isSubtype(currentClass)) {
+            compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
+          }
         }
       }
     }
   }
 }
\ No newline at end of file
