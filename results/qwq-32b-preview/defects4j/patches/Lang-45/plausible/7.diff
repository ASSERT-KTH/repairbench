diff --git a/tmp/5eae9393-68ba-4e44-9c7e-cb7bd3c35167_buggy.java b/tmp/99757baf-8261-48b0-9895-f8b090278480_fixed.java
index 1b36a4f..79bb0e0 100644
--- a/tmp/5eae9393-68ba-4e44-9c7e-cb7bd3c35167_buggy.java
+++ b/tmp/99757baf-8261-48b0-9895-f8b090278480_fixed.java
@@ -1,58 +1,44 @@
-    /**
-     * Abbreviates a string nicely.
-     * 
-     * This method searches for the first space after the lower limit and abbreviates
-     * the String there. It will also append any String passed as a parameter
-     * to the end of the String. The upper limit can be specified to forcibly
-     * abbreviate a String.
-     * 
-     * @param str         the string to be abbreviated. If null is passed, null is returned.
-     *                    If the empty String is passed, the empty string is returned.
-     * @param lower       the lower limit.
-     * @param upper       the upper limit; specify -1 if no limit is desired.
-     *                    If the upper limit is lower than the lower limit, it will be
-     *                    adjusted to be the same as the lower limit.
-     * @param appendToEnd String to be appended to the end of the abbreviated string.
-     *                    This is appended ONLY if the string was indeed abbreviated.
-     *                    The append does not count towards the lower or upper limits.
-     * @return the abbreviated String.
-     * @since 2.4
-     */
 public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
     // initial parameter checks
     if (str == null) {
         return null;
     }
     if (str.length() == 0) {
         return StringUtils.EMPTY;
     }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
-        if (upper == -1 || upper > str.length()) {
+    // Adjust upper limit
+    if (upper == -1) {
         upper = str.length();
-        }
-        // if upper is less than lower, raise it to lower
-        if (upper < lower) {
+    } else if (upper < lower) {
         upper = lower;
     }
 
-        StringBuffer result = new StringBuffer();
-        int index = StringUtils.indexOf(str, " ", lower);
-        if (index == -1) {
-            result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
-                result.append(StringUtils.defaultString(appendToEnd));
+    // If upper limit is beyond the string length, set it to the string length
+    if (upper > str.length()) {
+        upper = str.length();
     }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
+
+    int spaceIndex = StringUtils.indexOf(str, " ", lower);
+
+    if (spaceIndex == -1) {
+        // No space found after lower limit, abbreviate at upper
+        String result = str.substring(0, upper);
+        if (upper < str.length()) {
+            result += StringUtils.defaultString(appendToEnd);
+        }
+        return result;
+    } else {
+        if (spaceIndex >= upper) {
+            // Space index is beyond upper limit, abbreviate at upper
+            String result = str.substring(0, upper);
+            result += StringUtils.defaultString(appendToEnd);
+            return result;
         } else {
-            result.append(str.substring(0, index));
-            result.append(StringUtils.defaultString(appendToEnd));
+            // Abbreviate at the space index
+            String result = str.substring(0, spaceIndex);
+            result += StringUtils.defaultString(appendToEnd);
+            return result;
+        }
     }
-        return result.toString();
 }
\ No newline at end of file
