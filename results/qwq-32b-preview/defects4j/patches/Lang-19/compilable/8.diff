diff --git a/tmp/688fdfdd-9d6b-4770-9670-bc61e5fa3b28_buggy.java b/tmp/ba63b232-5fd8-4604-a895-a4f272ccaeb8_fixed.java
index 72a422c..556816a 100644
--- a/tmp/688fdfdd-9d6b-4770-9670-bc61e5fa3b28_buggy.java
+++ b/tmp/ba63b232-5fd8-4604-a895-a4f272ccaeb8_fixed.java
@@ -1,51 +1,62 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if (index + 1 >= seqEnd || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
     int start = index + 2;
     boolean isHex = false;
 
+    if (start < seqEnd) {
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+        }
+    } else {
+        // Incomplete entity, return 0
+        return 0;
     }
 
     int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+    // Find the end of the entity or the end of the string
+    while (end < seqEnd && input.charAt(end) != ';') {
         end++;
     }
 
+    // If no ';' found, use the end of the string
+    if (end == seqEnd && input.charAt(seqEnd - 1) != ';') {
+        // Incomplete entity, return 0
+        return 0;
+    }
+
     int entityValue;
     try {
+        String entityStr = input.subSequence(start, end).toString();
         if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+            entityValue = Integer.parseInt(entityStr, 16);
         } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            entityValue = Integer.parseInt(entityStr, 10);
         }
     } catch (NumberFormatException nfe) {
         System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
         return 0;
     }
 
     if (entityValue > 0xFFFF) {
         char[] chrs = Character.toChars(entityValue);
         out.write(chrs[0]);
         out.write(chrs[1]);
     } else {
         out.write(entityValue);
     }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+    // Calculate the number of characters consumed
+    // &# + [x|X]? + digits + [';' (optional)]
+    int consumed = 2 + (isHex ? 1 : 0) + (end - start);
+    if (end < seqEnd && input.charAt(end) == ';') {
+        consumed++; // include the ';'
     }
-        return 0;
+    return consumed;
 }
\ No newline at end of file
