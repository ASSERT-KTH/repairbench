diff --git a/tmp/ab1795bc-b6c2-408a-8d66-1dbe488c1f64_buggy.java b/tmp/72daa240-bc82-4fe6-9ae8-f117c3484854_fixed.java
index 72a422c..40f376d 100644
--- a/tmp/ab1795bc-b6c2-408a-8d66-1dbe488c1f64_buggy.java
+++ b/tmp/72daa240-bc82-4fe6-9ae8-f117c3484854_fixed.java
@@ -1,51 +1,55 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    // Uses -3 to ensure there is something after the &#x or &#
+    if (input.charAt(index) == '&' && index < seqEnd - 2) {
+        if (input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start < seqEnd) {
                 char firstChar = input.charAt(start);
                 if (firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
+                }
+            } else {
+                // Insufficient characters after &#
+                return 0;
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Find the end of the entity; if no ';', set end to seqEnd
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
+            String entityStr = input.subSequence(start, end).toString();
             int entityValue;
             try {
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(entityStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(entityStr, 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                System.err.println("FAIL: " + entityStr + "[" + start + "][" + end + "]");
                 return 0;
             }
 
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate the number of characters consumed
+            // 1 for '&', 1 for '#', 1 for 'x' (if hex), length of number, and ';' (if present)
+            int charsConsumed = 2 + (isHex ? 1 : 0) + (end - start) + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0);
+            return charsConsumed;
+        }
     }
     return 0;
 }
\ No newline at end of file
