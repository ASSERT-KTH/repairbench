diff --git a/tmp/27f183b1-8a15-437f-ab15-e592e574359d_buggy.java b/tmp/744bd50d-daf0-4029-9026-5ad432cf2ccd_fixed.java
index 72a422c..fe75e50 100644
--- a/tmp/27f183b1-8a15-437f-ab15-e592e574359d_buggy.java
+++ b/tmp/744bd50d-daf0-4029-9026-5ad432cf2ccd_fixed.java
@@ -1,51 +1,61 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < seqEnd) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+            }
+        } else {
+            // No characters after &#, treat as regular characters
+            out.write('&');
+            out.write('#');
+            return 1;
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Find the end of the entity sequence
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        // Check if a semicolon is found
+        if (end < seqEnd && input.charAt(end) == ';') {
+            end++; // Include the semicolon
+        }
+
+        String entityStr = input.subSequence(start, end - (isHex ? 1 : 0)).toString();
         int entityValue;
         try {
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(entityStr, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(entityStr, 10);
             }
         } catch (NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Calculate the number of characters to skip
+        return end - index;
     }
     return 0;
 }
\ No newline at end of file
