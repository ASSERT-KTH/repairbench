diff --git a/tmp/85792309-05d2-4789-ae00-deb50da59014_buggy.java b/tmp/a2828754-b3cf-4639-8031-d927b2ebc568_fixed.java
index eb9ce9f..6eb9007 100644
--- a/tmp/85792309-05d2-4789-ae00-deb50da59014_buggy.java
+++ b/tmp/a2828754-b3cf-4639-8031-d927b2ebc568_fixed.java
@@ -1,60 +1,51 @@
-    /**
-     * Look for a type declaration on a property assignment
-     * (in an ASSIGN or an object literal key).
-     *
-     * @param info The doc info for this property.
-     * @param lValue The l-value node.
-     * @param rValue The node that {@code n} is being initialized to,
-     *     or {@code null} if this is a stub declaration.
-     */
 private JSType getDeclaredType(String sourceName, JSDocInfo info,
     Node lValue, @Nullable Node rValue) {
   if (info != null && info.hasType()) {
     return getDeclaredTypeInAnnotation(sourceName, lValue, info);
   } else if (rValue != null && rValue.isFunction() &&
       shouldUseFunctionLiteralType(
           JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
     return rValue.getJSType();
   } else if (info != null) {
     if (info.hasEnumParameterType()) {
       if (rValue != null && rValue.isObjectLit()) {
         return rValue.getJSType();
       } else {
         return createEnumTypeFromNodes(
             rValue, lValue.getQualifiedName(), info, lValue);
       }
     } else if (info.isConstructor() || info.isInterface()) {
       return createFunctionTypeFromNodes(
           rValue, lValue.getQualifiedName(), info, lValue);
     } else {
       // Check if this is constant, and if it has a known type.
       if (info.isConstant()) {
-            JSType knownType = null;
-            if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
+        if (rValue != null && rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
           // If rValue has a type-cast, we use the type in the type-cast.
           // If rValue's type was already computed during scope creation,
           // then we can safely use that.
           return rValue.getJSType();
-              } else if (rValue.isOr()) {
+        } else if (rValue != null && rValue.isObjectLit() && info.hasType()) {
+          // If it's an object literal and has a type annotation, use the annotated type.
+          return getDeclaredTypeInAnnotation(sourceName, lValue, info);
+        } else if (rValue != null && rValue.isOr()) {
           // Check for a very specific JS idiom:
           // var x = x || TYPE;
           // This is used by Closure's base namespace for esoteric
           // reasons.
           Node firstClause = rValue.getFirstChild();
           Node secondClause = firstClause.getNext();
           boolean namesMatch = firstClause.isName()
               && lValue.isName()
               && firstClause.getString().equals(lValue.getString());
           if (namesMatch && secondClause.getJSType() != null
               && !secondClause.getJSType().isUnknownType()) {
             return secondClause.getJSType();
           }
         }
       }
     }
   }
-      }
 
   return getDeclaredTypeInAnnotation(sourceName, lValue, info);
 }
\ No newline at end of file
