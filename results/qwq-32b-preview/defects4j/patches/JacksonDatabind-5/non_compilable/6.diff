diff --git a/tmp/20858640-a498-44e4-a73a-dd09c2ec4503_buggy.java b/tmp/7b60dad6-6b3f-43c3-8e75-a2a15b2ffeb9_fixed.java
index b2db1d6..fe4bfb6 100644
--- a/tmp/20858640-a498-44e4-a73a-dd09c2ec4503_buggy.java
+++ b/tmp/7b60dad6-6b3f-43c3-8e75-a2a15b2ffeb9_fixed.java
@@ -1,29 +1,6 @@
-    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
-            Class<?> mixInCls, AnnotatedMethodMap mixIns)
-    {
-        List<Class<?>> parents = new ArrayList<Class<?>>();
-        parents.add(mixInCls);
-        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
-            for (Method m : mixin.getDeclaredMethods()) {
-                if (!_isIncludableMemberMethod(m)) {
-                    continue;
-                }
-                AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
 if (am != null) {
     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
+    // ...
 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
     mixIns.add(_constructMethod(m));
 }
\ No newline at end of file
-            }
-        }
-    }
