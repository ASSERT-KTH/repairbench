diff --git a/tmp/af09caba-253e-494a-9de0-f36a76e3e91c_buggy.java b/tmp/c0efb539-e326-418a-9f5f-0af0cdf8af00_fixed.java
index b2db1d6..d57c591 100644
--- a/tmp/af09caba-253e-494a-9de0-f36a76e3e91c_buggy.java
+++ b/tmp/c0efb539-e326-418a-9f5f-0af0cdf8af00_fixed.java
@@ -1,29 +1,29 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
-            Class<?> mixInCls, AnnotatedMethodMap mixIns)
-    {
-        List<Class<?>> parents = new ArrayList<Class<?>>();
+        Class<?> mixInCls, AnnotatedMethodMap mixIns) {
+    List<Class<?>> parents = new ArrayList<>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
+            // Check if the method is already present in the target methods
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
+                // If already present, no need to add to mixIns
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Check if the method is already present in mixIns
+                AnnotatedMethod existingMixIn = mixIns.find(m);
+                if (existingMixIn != null) {
+                    // Merge the new mixin method with the existing one
+                    _mergeMixIns(existingMixIn, _constructMethod(m));
+                } else {
+                    // Add the new mixin method to the mixIns map
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+}
\ No newline at end of file
