diff --git a/tmp/1526c25f-f13b-4b14-8c56-6214a0d604e6_buggy.java b/tmp/531266f2-4116-4611-9e1f-cb7bbb80530a_fixed.java
index b2db1d6..d5130d7 100644
--- a/tmp/1526c25f-f13b-4b14-8c56-6214a0d604e6_buggy.java
+++ b/tmp/531266f2-4116-4611-9e1f-cb7bbb80530a_fixed.java
@@ -1,29 +1,25 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
-        List<Class<?>> parents = new ArrayList<Class<?>>();
+    List<Class<?>> parents = new ArrayList<>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
+                // Add the mixin method to the methods map
+                methods.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
