diff --git a/tmp/86ef84f1-c4f6-4f51-be9e-36d35c74b07d_buggy.java b/tmp/fc034636-c829-4e6d-920c-b0d06cfed59f_fixed.java
index b2db1d6..5ba2b6a 100644
--- a/tmp/86ef84f1-c4f6-4f51-be9e-36d35c74b07d_buggy.java
+++ b/tmp/fc034636-c829-4e6d-920c-b0d06cfed59f_fixed.java
@@ -1,29 +1,25 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
-        List<Class<?>> parents = new ArrayList<Class<?>>();
+    List<Class<?>> parents = new ArrayList<>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
+            /* If a method already exists in the target class's method map,
+             * add mix-ins under that method without masking.
+             * Otherwise, add the mix-in method to the mix-ins map.
              */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Add the mix-in method to the mix-ins map
                 mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
