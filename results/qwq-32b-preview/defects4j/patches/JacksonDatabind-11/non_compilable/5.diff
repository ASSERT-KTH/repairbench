diff --git a/tmp/e64476ef-1e13-4858-b202-0f8ad60d1a81_buggy.java b/tmp/fd60981f-9527-43f9-bd37-e68abcb6f66b_fixed.java
index fe73b81..b8b661a 100644
--- a/tmp/e64476ef-1e13-4858-b202-0f8ad60d1a81_buggy.java
+++ b/tmp/fd60981f-9527-43f9-bd37-e68abcb6f66b_fixed.java
@@ -1,42 +1,56 @@
-    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
-    {
+
+protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context) {
+
     final String name = type.getName();
-        // 19-Mar-2015: Without context, all we can check are bounds.
+
     if (context == null) {
-            // And to prevent infinite loops, now need this:
+
         return _unknownType();
+
     } else {
-            // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
-             */
+
         JavaType actualType = context.findType(name);
+
         if (actualType != null) {
+
             return actualType;
+
         }
-        }
 
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
+        // If not found in context, resolve bounds
+
         Type[] bounds = type.getBounds();
 
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
-
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
-        context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+        // Recursively resolve the first bound
+
+        JavaType boundType = _resolveType(bounds[0], context);
+
+        return boundType;
+
+    }
+
+}
+
+// Helper method to resolve any type, including type variables
+
+private JavaType _resolveType(Type ty, TypeBindings context) {
+
+    if (ty instanceof TypeVariable) {
+
+        return _fromVariable((TypeVariable<?>) ty, context);
+
+    } else if (ty instanceof Class) {
+
+        return _constructType((Class<?>) ty, context);
+
+    } else if (ty instanceof ParameterizedType) {
+
+        return _fromParameterizedType((ParameterizedType) ty, context);
+
+    }
+
+    // Handle other types if necessary
+
+    return _unknownType();
+
 }
