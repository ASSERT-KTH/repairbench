diff --git a/tmp/e8bb0e99-d730-4aca-984c-db41f897875a_buggy.java b/tmp/c62648dc-b30a-4b88-a787-2223b4519e89_fixed.java
index 14b78fb..fac3809 100644
--- a/tmp/e8bb0e99-d730-4aca-984c-db41f897875a_buggy.java
+++ b/tmp/c62648dc-b30a-4b88-a787-2223b4519e89_fixed.java
@@ -1,56 +1,49 @@
-    /**
-     * Finds the next text wrap position after <code>startPos</code> for the
-     * text in <code>text</code> with the column width <code>width</code>.
-     * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
-     *
-     * @param text The text being searched for the wrap position
-     * @param width width of the wrapped text
-     * @param startPos position from which to start the lookup whitespace
-     * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
-     */
-    protected int findWrapPos(String text, int width, int startPos)
-    {
+protected int findWrapPos(String text, int width, int startPos) {
     int pos;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
-            return pos + 1;
-        }
-        else if (startPos + width >= text.length())
-        {
+    // Check for newline or tab characters within the width
+    int newlinePos = text.indexOf('\n', startPos);
+    int tabPos = text.indexOf('\t', startPos);
+
+    // Determine the position of the first newline or tab within the width
+    if ((newlinePos != -1 && newlinePos <= startPos + width) ||
+        (tabPos != -1 && tabPos <= startPos + width)) {
+        // Return the position after the newline or tab
+        return Math.min(
+            newlinePos != -1 && newlinePos <= startPos + width ? newlinePos + 1 : Integer.MAX_VALUE,
+            tabPos != -1 && tabPos <= startPos + width ? tabPos + 1 : Integer.MAX_VALUE
+        );
+    } else if (startPos + width >= text.length()) {
+        // If the end of the text is reached, return -1
         return -1;
     }
 
+    // Look for the last whitespace character before startPos + width
+    pos = Math.min(startPos + width, text.length() - 1);
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
-            --pos;
-        }
-
-        // if we found it - just return
-        if (pos > startPos)
-        {
+    while (pos >= startPos) {
+        char c = text.charAt(pos);
+        if (c == ' ' || c == '\n' || c == '\r') {
+            // If a whitespace is found, return the position
             return pos;
         }
+        pos--;
+    }
 
-        // if we didn't find one, simply chop at startPos+width
+    // If no whitespace is found, wrap at startPos + width
     pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
+    if (pos >= text.length()) {
+        return -1;
     }
+
+    // Skip over non-whitespace characters after startPos + width
+    while (pos < text.length()) {
+        char c = text.charAt(pos);
+        if (c == ' ' || c == '\n' || c == '\r') {
+            break;
+        }
+        pos++;
+    }
+
     return pos == text.length() ? -1 : pos;
 }
\ No newline at end of file
