diff --git a/tmp/a507d7b9-c4dc-47e4-9ba0-bee4815e1818_buggy.java b/tmp/7e97d78e-0490-4195-9b62-6e421343bc2d_fixed.java
index 85f5680..04fde5d 100644
--- a/tmp/a507d7b9-c4dc-47e4-9ba0-bee4815e1818_buggy.java
+++ b/tmp/7e97d78e-0490-4195-9b62-6e421343bc2d_fixed.java
@@ -1,17 +1,30 @@
 @Override
 public Date read(JsonReader in) throws IOException {
-    if (in.peek() != JsonToken.STRING) {
-      throw new JsonParseException("The date should be a string value");
+    try {
+        switch (in.peek()) {
+            case STRING:
+                String dateString = in.nextString();
+                Date date = deserializeToDate(dateString);
+                return convertDate(date);
+            case NULL:
+                in.nextNull();
+                return null;
+            default:
+                throw new JsonParseException("Expected a string or null, but got " + in.peek());
         }
-    Date date = deserializeToDate(in.nextString());
+    } catch (JsonParseException e) {
+        throw new IllegalStateException(e);
+    }
+}
+
+private Date convertDate(Date date) {
     if (dateType == Date.class) {
         return date;
     } else if (dateType == Timestamp.class) {
         return new Timestamp(date.getTime());
     } else if (dateType == java.sql.Date.class) {
         return new java.sql.Date(date.getTime());
     } else {
-      // This must never happen: dateType is guarded in the primary constructor
-      throw new AssertionError();
+        throw new AssertionError("Unexpected date type: " + dateType.getName());
     }
 }
\ No newline at end of file
