diff --git a/tmp/18364fa9-8af6-4565-b771-87f26b13127f_buggy.java b/tmp/7fb093e0-2136-4d64-b025-5dd69409590e_fixed.java
index 0ef85f2..61183bf 100644
--- a/tmp/18364fa9-8af6-4565-b771-87f26b13127f_buggy.java
+++ b/tmp/7fb093e0-2136-4d64-b025-5dd69409590e_fixed.java
@@ -1,50 +1,43 @@
-  /**
-   * Gets the source line for the indicated line number.
-   *
-   * @param lineNumber the line number, 1 being the first line of the file.
-   * @return The line indicated. Does not include the newline at the end
-   *     of the file. Returns {@code null} if it does not exist,
-   *     or if there was an IO exception.
-   */
 public String getLine(int lineNumber) {
     String js = "";
     try {
-      // NOTE(nicksantos): Right now, this is optimized for few warnings.
-      // This is probably the right trade-off, but will be slow if there
-      // are lots of warnings in one file.
         js = getCode();
     } catch (IOException e) {
         return null;
     }
 
     int pos = 0;
     int startLine = 1;
 
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
+    // Use caching to optimize sequential access
     if (lineNumber >= lastLine) {
         pos = lastOffset;
         startLine = lastLine;
     }
 
+    // Find the starting position of the requested line
     for (int n = startLine; n < lineNumber; n++) {
-      int nextpos = js.indexOf('\n', pos);
-      if (nextpos == -1) {
-        return null;
+        int nextPos = js.indexOf('\n', pos);
+        if (nextPos == -1) {
+            return null; // No more lines
         }
-      pos = nextpos + 1;
+        pos = nextPos + 1;
     }
 
-    // Remember this offset for the next search we do.
+    // Update cache
     lastOffset = pos;
     lastLine = lineNumber;
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
-        return null;
+    // Find the end position of the line
+    int endPos = js.indexOf('\n', pos);
+    if (endPos == -1) {
+        // If no more newlines, return the rest of the string
+        if (pos < js.length()) {
+            return js.substring(pos);
         } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+            return null; // End of file
+        }
+    } else {
+        return js.substring(pos, endPos);
     }
 }
\ No newline at end of file
