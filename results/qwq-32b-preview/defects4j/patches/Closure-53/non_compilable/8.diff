diff --git a/tmp/e8f01a41-260a-443f-9afa-6febe1141b67_buggy.java b/tmp/bb4a80fd-cd6f-4b06-b355-2067b7f4745a_fixed.java
index 41ea16c..6b6a097 100644
--- a/tmp/e8f01a41-260a-443f-9afa-6febe1141b67_buggy.java
+++ b/tmp/bb4a80fd-cd6f-4b06-b355-2067b7f4745a_fixed.java
@@ -1,63 +1,56 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
-    private void replaceAssignmentExpression(Var v, Reference ref,
-                                             Map<String, String> varmap) {
+private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {
   // Compute all of the assignments necessary
-      List<Node> nodes = Lists.newArrayList();
+  List<Node> nodes = new ArrayList<>();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
+  Set<String> all = new LinkedHashSet<>(varmap.keySet());
+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
     String var = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
+    nodes.add(new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), value));
     all.remove(var);
   }
 
   // TODO(user): Better source information.
   for (String var : all) {
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)),
-                   NodeUtil.newUndefinedNode(null)));
+    nodes.add(new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), NodeUtil.newUndefinedNode(null)));
   }
 
-      Node replacement;
   // All assignments evaluate to true, so make sure that the
   // expr statement evaluates to true in case it matters.
   nodes.add(new Node(Token.TRUE));
 
   // Join these using COMMA. A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
+  // create a tree. In the tree, the first child is the COMMA to match
   // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
+  if (nodes.size() == 1) {
+    // If there's only one node, which is true, use it directly
+    Node replacement = nodes.get(0);
+    replacement.copyInformationFromForTree(ref.getParent());
+    Node replace = ref.getParent();
+    if (replace.getType() == Token.VAR) {
+      replace.getParent().replaceChild(replace, NodeUtil.newExpr(replacement));
+    } else {
+      replace.getParent().replaceChild(replace, replacement);
+    }
+  } else {
+    // Build a comma-separated sequence of nodes
+    Node replacement = new Node(Token.COMMA);
     Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+    for (int i = 0; i < nodes.size() - 1; i++) {
+      cur.addChildToBack(nodes.get(i));
+      cur = cur.addChildToBack(Token.COMMA);
     }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
+    cur.addChildToBack(nodes.get(nodes.size() - 1));
 
+    replacement.copyInformationFromForTree(ref.getParent());
     Node replace = ref.getParent();
-      replacement.copyInformationFromForTree(replace);
-
     if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
+      replace.getParent().replaceChild(replace, NodeUtil.newExpr(replacement));
     } else {
       replace.getParent().replaceChild(replace, replacement);
     }
   }
+}
\ No newline at end of file
