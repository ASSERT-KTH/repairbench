diff --git a/tmp/1209fb13-c88b-48c5-a6b9-bd04eb9717f2_buggy.java b/tmp/e612b51c-1398-40da-90af-e0e2401e34c1_fixed.java
index b81eeca..7ef1349 100644
--- a/tmp/1209fb13-c88b-48c5-a6b9-bd04eb9717f2_buggy.java
+++ b/tmp/e612b51c-1398-40da-90af-e0e2401e34c1_fixed.java
@@ -1,78 +1,86 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
+
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+
     long result = 0;
+
     int end = offset + length;
+
     int start = offset;
 
     if (length < 2) {
+
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
-        }
 
-        boolean allNUL = true;
-        for (int i = start; i < end; i++){
-            if (buffer[i] != 0){
-                allNUL = false;
-                break;
-            }
-        }
-        if (allNUL) {
-            return 0L;
     }
 
     // Skip leading spaces
+
     while (start < end) {
+
         if (buffer[start] == ' ') {
+
             start++;
+
         } else {
+
             break;
+
         }
+
+    }
+
+    // If the first non-space byte is 0, return 0
+
+    if (start < end && buffer[start] == 0) {
+
+        return 0L;
+
     }
 
     // Must have trailing NUL or space
+
     byte trailer;
+
     trailer = buffer[end - 1];
+
     if (trailer == 0 || trailer == ' ') {
+
         end--;
+
     } else {
+
         throw new IllegalArgumentException(
+
                 exceptionMessage(buffer, offset, length, end - 1, trailer));
+
     }
+
     // May have additional NUL or space
+
     trailer = buffer[end - 1];
+
     if (trailer == 0 || trailer == ' ') {
+
         end--;
+
     }
 
     for (; start < end; start++) {
+
         final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+
         if (currentByte < '0' || currentByte > '7') {
+
             throw new IllegalArgumentException(
+
                     exceptionMessage(buffer, offset, length, start, currentByte));
+
         }
+
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
     }
 
     return result;
+
 }
