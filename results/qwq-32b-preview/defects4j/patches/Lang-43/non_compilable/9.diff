diff --git a/tmp/dbf5ff6c-69fb-46e3-a62a-50927e349419_buggy.java b/tmp/e1aaec0f-11a6-4830-87ca-f6d974e288d0_fixed.java
index b6b11b6..f5e14ad 100644
--- a/tmp/dbf5ff6c-69fb-46e3-a62a-50927e349419_buggy.java
+++ b/tmp/e1aaec0f-11a6-4830-87ca-f6d974e288d0_fixed.java
@@ -1,38 +1,17 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
-            StringBuffer appendTo, boolean escapingOn) {
-        int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
-        int lastHold = start;
 for (int i = pos.getIndex(); i < pattern.length(); i++) {
     if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
         appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
                 QUOTE);
         pos.setIndex(i + ESCAPED_QUOTE.length());
         lastHold = pos.getIndex();
         continue;
     }
     switch (c[pos.getIndex()]) {
     case QUOTE:
         next(pos);
         return appendTo == null ? null : appendTo.append(c, lastHold,
                 pos.getIndex() - lastHold);
     default:
         next(pos);
     }
 }
\ No newline at end of file
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
-    }
