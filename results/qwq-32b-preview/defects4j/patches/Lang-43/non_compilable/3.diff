diff --git a/tmp/e062688b-7563-4aa9-b8dd-72f181ecec30_buggy.java b/tmp/9bfe7a00-140d-488f-bea4-0ba5222a7bad_fixed.java
index b6b11b6..c8594cb 100644
--- a/tmp/e062688b-7563-4aa9-b8dd-72f181ecec30_buggy.java
+++ b/tmp/9bfe7a00-140d-488f-bea4-0ba5222a7bad_fixed.java
@@ -1,38 +1,35 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
-            StringBuffer appendTo, boolean escapingOn) {
+private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
-        char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+    char[] chars = pattern.toCharArray();
+    int len = pattern.length();
+    boolean inEscape = false;
+
+    for (int i = start; i < len; i++) {
+        char current = chars[i];
+        if (escapingOn && inEscape) {
+            // Previous character was an escape character
+            if (current == QUOTE) {
+                if (appendTo != null) {
+                    appendTo.append(QUOTE);
+                }
+                inEscape = false;
                 continue;
+            } else {
+                // Invalid escape sequence
+                throw new IllegalArgumentException("Invalid escape sequence at position " + i);
+            }
+        }
+        if (current == ESCAPE_CHAR) {
+            inEscape = true;
+            continue;
+        }
+        if (current == QUOTE) {
+            pos.setIndex(i + 1);
+            return appendTo == null ? null : appendTo.append(pattern.substring(start, i));
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+        if (appendTo != null) {
+            appendTo.append(current);
         }
     }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+    throw new IllegalArgumentException("Unterminated quoted string at position " + start);
 }
\ No newline at end of file
