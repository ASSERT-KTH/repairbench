diff --git a/tmp/f814a6f6-5ca7-46b3-9925-17730f5fedf5_buggy.java b/tmp/64f4bf52-e449-4156-abd0-ce3ed87a58bc_fixed.java
index b6b11b6..ffbfd3d 100644
--- a/tmp/f814a6f6-5ca7-46b3-9925-17730f5fedf5_buggy.java
+++ b/tmp/64f4bf52-e449-4156-abd0-ce3ed87a58bc_fixed.java
@@ -1,38 +1,45 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
+    int len = pattern.length();
+
+    // Ensure we start with a quote
     if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        pos.setIndex(start + 1);
+        if (appendTo != null) {
+            appendTo.append(QUOTE);
         }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
+    } else {
+        throw new IllegalArgumentException("Expected quoted string at position " + start);
+    }
+
+    int lastHold = pos.getIndex();
+    for (int i = pos.getIndex(); i < len; i = pos.getIndex()) {
+        if (escapingOn && i + ESCAPED_QUOTE.length() <= len
+                && pattern.startsWith(ESCAPED_QUOTE, i)) {
+            // Append characters before the escaped quote
+            if (appendTo != null) {
+                appendTo.append(c, lastHold, i - lastHold);
+            }
+            // Append the quote represented by the escaped sequence
+            appendTo.append(QUOTE);
+            // Skip past the escaped quote
             pos.setIndex(i + ESCAPED_QUOTE.length());
             lastHold = pos.getIndex();
             continue;
         }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+
+        if (c[i] == QUOTE) {
+            // Found an unescaped quote, end of the quoted string
+            if (appendTo != null) {
+                appendTo.append(c, lastHold, i - lastHold);
             }
+            pos.setIndex(i + 1);
+            return appendTo;
+        }
+        next(pos);
     }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+
+    throw new IllegalArgumentException("Unterminated quoted string at position " + start);
 }
\ No newline at end of file
