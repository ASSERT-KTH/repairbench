diff --git a/tmp/3483ce91-1511-41c2-b8a6-a8788783f129_buggy.java b/tmp/96af1f6e-ed20-4387-9597-d777ee48ded9_fixed.java
index 03b03d7..b1336ca 100644
--- a/tmp/3483ce91-1511-41c2-b8a6-a8788783f129_buggy.java
+++ b/tmp/96af1f6e-ed20-4387-9597-d777ee48ded9_fixed.java
@@ -1,25 +1,12 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+    int offsetBefore = getOffset(instant - 1);
+    int offsetAfter = getOffset(instant + 1);
+    if (offsetBefore == offsetAfter) {
+        // No overlap, return original instant
+        return instant;
+    } else {
+        // Overlap, adjust to the desired offset
+        int desiredOffset = earlierOrLater ? offsetAfter : offsetBefore;
+        return instant + (desiredOffset - getOffset(instant));
     }
-        
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
 }
\ No newline at end of file
