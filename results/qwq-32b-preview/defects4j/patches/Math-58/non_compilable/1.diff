diff --git a/tmp/b733ea18-03a0-4bb1-979d-e0b4cde33fef_buggy.java b/tmp/7c0fe8fc-2a5c-44ce-aeaf-1d0e36b48f3f_fixed.java
index 3002587..2621898 100644
--- a/tmp/b733ea18-03a0-4bb1-979d-e0b4cde33fef_buggy.java
+++ b/tmp/7c0fe8fc-2a5c-44ce-aeaf-1d0e36b48f3f_fixed.java
@@ -1,10 +1,39 @@
-    /**
-     * Fits a Gaussian function to the observed points.
-     *
-     * @return the parameters of the Gaussian function that best fits the
-     * observed points (in the same order as above).
-     */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // Transform the initial guess for sigma to log(sigma)
+    double[] transformedGuess = new double[guess.length];
+    System.arraycopy(guess, 0, transformedGuess, 0, guess.length - 1);
+    transformedGuess[guess.length - 1] = Math.log(guess[guess.length - 1]);
+
+    // Create a parametric function that uses the transformed parameters
+    ParametricUnivariateFunction transformedFunction = new ParametricUnivariateFunction() {
+        public double value(double x, double[] params) {
+            // Transform back from log(sigma) to sigma
+            double sigma = Math.exp(params[params.length - 1]);
+            // Use the original Gaussian function with the transformed sigma
+            return new Gaussian.Parametric().value(x, new double[]{params[0], params[1], sigma});
+        }
+
+        public double[] gradient(double x, double[] params) {
+            // Transform back from log(sigma) to sigma
+            double sigma = Math.exp(params[params.length - 1]);
+            // Compute the gradient with respect to the transformed parameters
+            double[] originalGrad = new Gaussian.Parametric().gradient(x, new double[]{params[0], params[1], sigma});
+            // Adjust the gradient for the log transformation
+            double[] grad = new double[params.length];
+            System.arraycopy(originalGrad, 0, grad, 0, params.length - 1);
+            grad[params.length - 1] = originalGrad[params.length - 1] * Math.exp(params[params.length - 1]);
+            return grad;
+        }
+    };
+
+    // Perform the fitting with the transformed parameters
+    double[] transformedParams = fit(transformedFunction, transformedGuess);
+
+    // Transform back to the original parameters
+    double[] originalParams = new double[transformedParams.length];
+    System.arraycopy(transformedParams, 0, originalParams, 0, transformedParams.length - 1);
+    originalParams[transformedParams.length - 1] = Math.exp(transformedParams[transformedParams.length - 1]);
+
+    return originalParams;
 }
\ No newline at end of file
