diff --git a/tmp/7a87ca4a-8050-4760-8de0-4480f4bf048a_buggy.java b/tmp/bf71fbf1-2044-495c-af1f-e574adfc5c4a_fixed.java
index 3002587..5228394 100644
--- a/tmp/7a87ca4a-8050-4760-8de0-4480f4bf048a_buggy.java
+++ b/tmp/bf71fbf1-2044-495c-af1f-e574adfc5c4a_fixed.java
@@ -1,10 +1,27 @@
-    /**
-     * Fits a Gaussian function to the observed points.
-     *
-     * @return the parameters of the Gaussian function that best fits the
-     * observed points (in the same order as above).
-     */
-    public double[] fit() {
-        final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+public static class GaussianPositive implements Parametric {
+    @Override
+    public double value(double x, double... parameters) {
+        double norm = parameters[0];
+        double mean = parameters[1];
+        double sigma = Math.exp(parameters[2]); // Ensure sigma is positive
+        return norm * Math.exp(-Math.pow((x - mean), 2) / (2 * sigma * sigma));
+    }
+
+    @Override
+    public double[] gradient(double x, double... parameters) {
+        double norm = parameters[0];
+        double mean = parameters[1];
+        double lsigma = parameters[2];
+        double sigma = Math.exp(lsigma);
+        double dev = (x - mean) / sigma;
+        double dev2 = dev * dev;
+        double normFact = norm / (sigma * Math.sqrt(2 * Math.PI));
+        double expTerm = Math.exp(-0.5 * dev2);
+
+        double dn = expTerm;
+        double dm = dev * dn;
+        double dlsigma = (dev2 - 1) * dn;
+
+        return new double[]{dn, dm, dlsigma};
+    }
 }
\ No newline at end of file
