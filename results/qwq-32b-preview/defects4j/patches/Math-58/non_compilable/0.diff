diff --git a/tmp/55859530-cb00-415d-8a08-af8fb95fae5c_buggy.java b/tmp/30969adf-1e64-4ef1-b664-d82caf895722_fixed.java
index 3002587..f48df69 100644
--- a/tmp/55859530-cb00-415d-8a08-af8fb95fae5c_buggy.java
+++ b/tmp/30969adf-1e64-4ef1-b664-d82caf895722_fixed.java
@@ -1,10 +1,55 @@
-    /**
-     * Fits a Gaussian function to the observed points.
-     *
-     * @return the parameters of the Gaussian function that best fits the
-     * observed points (in the same order as above).
-     */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // Transform the guess for sigma to log space
+    double logSigma = Math.log(guess[2]);
+    // Initial guess in transformed space
+    double[] initialGuess = {guess[0], guess[1], logSigma};
+
+    // Define the parametric function with transformed parameters
+    ParametricUnivariateFunction gaussianTransformed = new ParametricUnivariateFunction() {
+        public double value(double x, double... parameters) {
+            double norm = parameters[0];
+            double mean = parameters[1];
+            double logSigma = parameters[2];
+            double sigma = Math.exp(logSigma);
+            return norm * Math.exp(-((x - mean) * (x - mean)) / (2.0 * sigma * sigma));
+        }
+
+        public double[] gradient(double x, double... parameters) {
+            double norm = parameters[0];
+            double mean = parameters[1];
+            double logSigma = parameters[2];
+            double sigma = Math.exp(logSigma);
+            double deviation = (x - mean);
+            double exponent = -deviation * deviation / (2.0 * sigma * sigma);
+            double gaussianValue = norm * Math.exp(exponent);
+
+            // Gradient with respect to norm
+            double dn = Math.exp(exponent);
+            // Gradient with respect to mean
+            double dm = gaussianValue * deviation / (sigma * sigma);
+            // Gradient with respect to logSigma
+            double dls = gaussianValue * (deviation * deviation) / (sigma * sigma) - gaussianValue;
+
+            return new double[]{dn, dm, dls};
+        }
+    };
+
+    // Create the optimizer
+    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
+    // Create the fitter with transformed parameters
+    CurveFitter<ParametricUnivariateFunction> curveFitter = new CurveFitter<>(optimizer);
+    for (WeightedObservedPoint point : getObservations()) {
+        curveFitter.addObservedPoint(point);
+    }
+
+    // Perform the fit with transformed parameters
+    double[] transformedParams = curveFitter.fit(gaussianTransformed, initialGuess);
+
+    // Transform back to original parameters
+    double norm = transformedParams[0];
+    double mean = transformedParams[1];
+    double sigma = Math.exp(transformedParams[2]);
+
+    return new double[]{norm, mean, sigma};
 }
\ No newline at end of file
