diff --git a/tmp/99569d3e-fedd-4fea-89d1-d0f0d92445db_buggy.java b/tmp/915200bd-b985-4184-a035-40e240bc2b26_fixed.java
index 3002587..ec12f81 100644
--- a/tmp/99569d3e-fedd-4fea-89d1-d0f0d92445db_buggy.java
+++ b/tmp/915200bd-b985-4184-a035-40e240bc2b26_fixed.java
@@ -1,10 +1,45 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    
+    // Transform the parameters to ensure positivity where needed
+    final double amp = guess[0];
+    final double mean = guess[1];
+    final double sigma = Math.log(guess[2]); // Store the log of sigma
+    
+    final double[] transformedGuess = {amp, mean, sigma};
+    
+    final ParametricRealFunction transformedFunction = new ParametricRealFunction() {
+        public double value(double x, double[] parameters) {
+            double amp = parameters[0];
+            double mean = parameters[1];
+            double sigma = Math.exp(parameters[2]); // Exponentiate to get positive sigma
+            return amp * Math.exp(-Math.pow(x - mean, 2) / (2 * sigma * sigma));
+        }
+        
+        public double[] gradient(double x, double[] parameters) {
+            double amp = parameters[0];
+            double mean = parameters[1];
+            double logSigma = parameters[2];
+            double sigma = Math.exp(logSigma);
+            double dx = x - mean;
+            double exponent = -dx * dx / (2 * sigma * sigma);
+            double gaussian = amp * Math.exp(exponent);
+            return new double[]{
+                gaussian / amp, // d/damp
+                gaussian * dx / (sigma * sigma), // d/dmean
+                gaussian * dx * dx / (sigma * sigma * sigma) // d/dsigma
+            };
+        }
+    };
+    
+    final double[] transformedFit = fit(transformedFunction, transformedGuess);
+    
+    // Transform back to original parameters
+    return new double[]{transformedFit[0], transformedFit[1], Math.exp(transformedFit[2])};
 }
\ No newline at end of file
