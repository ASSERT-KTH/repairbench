diff --git a/tmp/40432fcd-f277-4cb1-84d9-f1cab41dd5f3_buggy.java b/tmp/628e22d9-12fd-4e85-90f6-e25c4228f2ff_fixed.java
index be2af16..1c8ba54 100644
--- a/tmp/40432fcd-f277-4cb1-84d9-f1cab41dd5f3_buggy.java
+++ b/tmp/628e22d9-12fd-4e85-90f6-e25c4228f2ff_fixed.java
@@ -1,29 +1,29 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    // Determine the cutover date in terms of year, month, and day
+    int cutoverYear = iGregorianChronology.year(iCutoverMillis).get();
+    int cutoverMonth = iGregorianChronology.monthOfYear(iCutoverMillis).get();
+    int cutoverDay = iGregorianChronology.dayOfMonth(iCutoverMillis).get();
+
+    // Compare the provided date to the cutover date
+    if (year < cutoverYear ||
+        (year == cutoverYear && monthOfYear < cutoverMonth) ||
+        (year == cutoverYear && monthOfYear == cutoverMonth && dayOfMonth < cutoverDay)) {
+        // Use Julian chronology for dates before the cutover
+        return iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
+    } else {
+        // Use Gregorian chronology for dates on or after the cutover
+        return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
                                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
-            }
     }
-        return instant;
 }
\ No newline at end of file
