diff --git a/tmp/96c1ba1f-a098-4e7e-bcbc-677af840a0de_buggy.java b/tmp/3a384f4d-a447-4f75-914b-28726e7f03e0_fixed.java
index be2af16..66fd6d3 100644
--- a/tmp/96c1ba1f-a098-4e7e-bcbc-677af840a0de_buggy.java
+++ b/tmp/3a384f4d-a447-4f75-914b-28726e7f03e0_fixed.java
@@ -1,29 +1,40 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+    // Determine which chronology to use based on the year and cutover date.
+    if (year < iCutoverYear) {
+        // Use Julian chronology for years before the cutover year.
+        return iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+    } else if (year == iCutoverYear) {
+        // For the cutover year, need to check the month and day.
+        // Assuming iCutoverMonth and iCutoverDay are defined.
+        if (monthOfYear < iCutoverMonth ||
+                (monthOfYear == iCutoverMonth && dayOfMonth < iCutoverDay)) {
+            // Use Julian chronology for dates before the cutover date in the cutover year.
+            return iJulianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } else {
+            // Use Gregorian chronology for dates on or after the cutover date in the cutover year.
+            return iGregorianChronology.getDateTimeMillis
                     (year, monthOfYear, dayOfMonth,
                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
         }
+    } else {
+        // Use Gregorian chronology for years after the cutover year.
+        return iGregorianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
-        return instant;
 }
\ No newline at end of file
