diff --git a/tmp/c1eb2f19-3737-44da-91d4-bfe933b11868_buggy.java b/tmp/3ed4abb3-afd1-4a59-b429-b731db03e375_fixed.java
index 6b160ef..843007f 100644
--- a/tmp/c1eb2f19-3737-44da-91d4-bfe933b11868_buggy.java
+++ b/tmp/3ed4abb3-afd1-4a59-b429-b731db03e375_fixed.java
@@ -1,68 +1,68 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
+    // Check for ZIP and JAR archives
+    final byte[] signature = new byte[4]; // ZIP and JAR signatures are 4 bytes
     in.mark(signature.length);
-        try {
     int signatureLength = in.read(signature);
     in.reset();
+    if (signatureLength == signature.length) {
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+        }
+    }
+
+    // Check for AR archives
+    in.mark(signature.length);
+    signatureLength = in.read(signature);
+    in.reset();
+    if (signatureLength == signature.length && ArArchiveInputStream.matches(signature, signatureLength)) {
         return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+    }
+
+    // Check for CPIO archives
+    in.mark(signature.length);
+    signatureLength = in.read(signature);
+    in.reset();
+    if (signatureLength == signature.length && CpioArchiveInputStream.matches(signature, signatureLength)) {
         return new CpioArchiveInputStream(in);
     }
 
-            // Dump needs a bigger buffer to check the signature;
+    // Check for DUMP archives
     final byte[] dumpsig = new byte[32];
     in.mark(dumpsig.length);
     signatureLength = in.read(dumpsig);
     in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+    if (signatureLength == dumpsig.length && DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
         return new DumpArchiveInputStream(in);
     }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
+    // Check for TAR archives
     final byte[] tarheader = new byte[512];
     in.mark(tarheader.length);
     signatureLength = in.read(tarheader);
     in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+    if (signatureLength == tarheader.length && TarArchiveInputStream.matches(tarheader, signatureLength)) {
         return new TarArchiveInputStream(in);
     }
-            // COMPRESS-117 - improve auto-recognition
+
+    // Additional check for TAR archives as per COMPRESS-117
     try {
         TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
         tais.getNextEntry();
         return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
-            }
-        } catch (IOException e) {
-            throw new ArchiveException("Could not use reset and mark operations.", e);
+    } catch (Exception e) {
+        // Not a TAR archive, ignore
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
