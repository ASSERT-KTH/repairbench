diff --git a/tmp/c1ab9214-545d-440c-9b2d-b41176eaa62f_buggy.java b/tmp/cf344cae-6dba-40b0-871d-e54feb6d0011_fixed.java
index 6b160ef..2e70ac2 100644
--- a/tmp/c1ab9214-545d-440c-9b2d-b41176eaa62f_buggy.java
+++ b/tmp/cf344cae-6dba-40b0-871d-e54feb6d0011_fixed.java
@@ -1,68 +1,67 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  * 
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
-        in.mark(signature.length);
+    // Define the signature lengths for different archive types
+    final int zipSigLen = 4;
+    final int jarSigLen = 4;
+    final int arSigLen = 8;
+    final int cpioSigLen = 2;
+    final int dumpSigLen = 32;
+    final int tarSigLen = 512;
+
+    // Read the maximum signature length needed for any archive type
+    final int maxSigLen = Math.max(Math.max(zipSigLen, jarSigLen), Math.max(arSigLen, Math.max(cpioSigLen, Math.max(dumpSigLen, tarSigLen))));
+
+    // Read the signature bytes
+    final byte[] signature = new byte[maxSigLen];
+    in.mark(maxSigLen);
     try {
         int signatureLength = in.read(signature);
         in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
+
+        // Check for each archive type
+        if (signatureLength >= zipSigLen && ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+        } else if (signatureLength >= jarSigLen && JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+        } else if (signatureLength >= arSigLen && ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+        } else if (signatureLength >= cpioSigLen && CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
-            }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+        } else if (signatureLength >= dumpSigLen && DumpArchiveInputStream.matches(signature, signatureLength)) {
             return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+        } else if (signatureLength >= tarSigLen && TarArchiveInputStream.matches(signature, signatureLength)) {
             return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
+        } else {
+            // Try to create a TarArchiveInputStream as a last resort
             try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature));
                 tais.getNextEntry();
                 return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
+            } catch (Exception e) {
+                // Ignore and proceed to throw ArchiveException
+            }
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
