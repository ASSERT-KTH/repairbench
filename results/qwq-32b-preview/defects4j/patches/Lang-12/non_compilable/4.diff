diff --git a/tmp/e1ac6474-50d5-4f04-b0bc-5ac24b35315b_buggy.java b/tmp/e05631f7-eea6-4fb8-a71e-3fbe63280517_fixed.java
index 7c9c72e..e8f0234 100644
--- a/tmp/e1ac6474-50d5-4f04-b0bc-5ac24b35315b_buggy.java
+++ b/tmp/e05631f7-eea6-4fb8-a71e-3fbe63280517_fixed.java
@@ -1,93 +1,98 @@
+import java.util.Random;
+
+public class RandomStringUtils {
+
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single 
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
-        if (count == 0) {
-            return "";
-        } else if (count < 0) {
+        if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
+        if (count == 0) {
+            return "";
+        }
 
         if (start == 0 && end == 0) {
             if (!letters && !numbers) {
+                start = 0;
                 end = Integer.MAX_VALUE;
             } else {
-                    end = 'z' + 1;
                 start = ' ';
+                end = 'z' + 1;
             }
         }
 
-        char[] buffer = new char[count];
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("Char array must not be empty.");
+        }
+
         int gap = end - start;
+        if (gap <= 0) {
+            throw new IllegalArgumentException("End must be greater than start.");
+        }
 
-        while (count-- != 0) {
+        char[] buffer = new char[count];
+        int countLeft = count;
+
+        while (countLeft > 0) {
             char ch;
             if (chars == null) {
                 ch = (char) (random.nextInt(gap) + start);
             } else {
                 ch = chars[random.nextInt(gap) + start];
             }
-            if (letters && Character.isLetter(ch)
-                    || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+            if ((letters && Character.isLetter(ch)) ||
+                (numbers && Character.isDigit(ch)) ||
+                (!letters && !numbers)) {
+                if (ch >= 0xD800 && ch <= 0xDBFF) { // High surrogate
+                    if (countLeft >= 2) {
+                        buffer[countLeft - 2] = ch;
+                        buffer[countLeft - 1] = (char) (0xDC00 + random.nextInt(0xDFFF - 0xDC00 + 1));
+                        countLeft -= 2;
                     } else {
-                        // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        // Not enough space for a pair, skip this character
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                } else if (ch >= 0xDC00 && ch <= 0xDFFF) { // Low surrogate
+                    // Invalid to have a low surrogate without a high one before it
                 } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                    buffer[countLeft - 1] = ch;
+                    countLeft--;
                 }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
-                } else {
-                    buffer[count] = ch;
-                }
-            } else {
-                count++;
             }
         }
+
         return new String(buffer);
     }
+}
\ No newline at end of file
