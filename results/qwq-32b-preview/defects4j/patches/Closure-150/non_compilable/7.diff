diff --git a/tmp/672512cf-7ee1-4cf2-8a0a-683318051ef1_buggy.java b/tmp/25927be0-5e01-4257-9db3-d32b662a53e3_fixed.java
index 800e6e1..1dae781 100644
--- a/tmp/672512cf-7ee1-4cf2-8a0a-683318051ef1_buggy.java
+++ b/tmp/25927be0-5e01-4257-9db3-d32b662a53e3_fixed.java
@@ -1,32 +1,62 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
+
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.ASSIGN:
+      // Handle assignments where the left-hand side is a property access
+      if (n.getFirstChild().getType() == Token.GETPROP ||
+          n.getFirstChild().getType() == Token.STRING_KEY) {
+        handlePropertyAssignment(n, parent);
       }
+      break;
+  }
+}
+
+private void handlePropertyAssignment(Node n, Node parent) {
+  Node lhs = n.getFirstChild();
+  Node rhs = lhs.getNext();
+
+  if (rhs.getType() == Token.FUNCTION) {
+    // Infer the type of the function expression
+    JSType funcType = t.getJSTypeOfNode(rhs);
+    
+    // Determine the object to which the property is being assigned
+    Node objNode = lhs.getFirstChild();
+    String propName = lhs.getString();
+
+    // Get or create the type for the object
+    JSType objectType = getObjectType(objNode);
+    
+    if (objectType instanceof ObjectType) {
+      ObjectType objType = (ObjectType) objectType;
+      objType.setNamedPropertyType(propName, funcType, true);
+    }
+  }
+}
+
+private JSType getObjectType(Node objNode) {
+  // Implement logic to resolve the type of the object node
+  // This could involve looking up the type in the symbol table
+  // For simplicity, assume t.getJSTypeOfNode(objNode) returns the type
+  return t.getJSTypeOfNode(objNode);
 }
\ No newline at end of file
