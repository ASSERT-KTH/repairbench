diff --git a/tmp/56aa3551-e77e-426f-b7a5-b65a5f7bd55e_buggy.java b/tmp/2cf0a102-769c-4f4f-bc19-09ee48cf2fbe_fixed.java
index 800e6e1..a6fad89 100644
--- a/tmp/56aa3551-e77e-426f-b7a5-b65a5f7bd55e_buggy.java
+++ b/tmp/2cf0a102-769c-4f4f-bc19-09ee48cf2fbe_fixed.java
@@ -1,32 +1,40 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
+      // Check if the function is being assigned to an object property
+      if (parent.getType() == Token.ASG) {
+        Node lhs = parent.getFirstChild();
+        if (lhs.getType() == Token.GETPROP) {
+          // It's being assigned to an object property
+          String objName = lhs.getFirstChild().getString();
+          String propName = lhs.getLastChild().getString();
+          ObjectType objType = (ObjectType) findNameType(objName, lastLocalScope);
+          if (objType != null) {
+            FunctionType funcType = createFunctionTypeFromNode(n);
+            objType.setPropertyType(propName, funcType, true); // true for declared
+          }
+        }
+      } else {
         defineDeclaredFunction(n, parent);
+      }
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
