diff --git a/tmp/f17c6109-7da0-408f-a6dc-e29557f1bac1_buggy.java b/tmp/bf019383-6f3e-41e8-a239-a210255a1cc1_fixed.java
index 63a7c80..2ef0034 100644
--- a/tmp/f17c6109-7da0-408f-a6dc-e29557f1bac1_buggy.java
+++ b/tmp/bf019383-6f3e-41e8-a239-a210255a1cc1_fixed.java
@@ -1,77 +1,85 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
-    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
-                               RectangleConstraint constraint) {
-        double[] w = new double[5];
-        double[] h = new double[5];
-        w[0] = constraint.getWidth();
+protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {
+    double width = constraint.getWidth();
+    double(height) = constraint.getHeight();
+
+    // Arrange top block
+    double topHeight = 0;
     if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
+        RectangleConstraint topConstraint = new RectangleConstraint(width, null,
                 LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                new Range(0.0, height),
                 LengthConstraintType.RANGE);
-            Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+        Size2D topSize = this.topBlock.arrange(g2, topConstraint);
+        topHeight = topSize.height;
     }
-        w[1] = w[0];
+
+    // Arrange bottom block
+    double bottomHeight = 0;
     if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
-            Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+        RectangleConstraint bottomConstraint = new RectangleConstraint(width, null,
+                LengthConstraintType.FIXED, 0.0,
+                new Range(0.0, height - topHeight),
+                LengthConstraintType.RANGE);
+        Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);
+        bottomHeight = bottomSize.height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+    // Calculate remaining height for center and side blocks
+    double centerHeight = height - topHeight - bottomHeight;
+
+    // Arrange left block
+    double leftWidth = 0;
     if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
+        RectangleConstraint leftConstraint = new RectangleConstraint(0.0,
+                new Range(0.0, width),
+                LengthConstraintType.RANGE,
+                centerHeight,
+                null,
                 LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+        Size2D leftSize = this.leftBlock.arrange(g2, leftConstraint);
+        leftWidth = leftSize.width;
     }
-        h[3] = h[2];
+
+    // Arrange right block
+    double rightWidth = 0;
     if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
+        RectangleConstraint rightConstraint = new RectangleConstraint(0.0,
+                new Range(0.0, width - leftWidth),
+                LengthConstraintType.RANGE,
+                centerHeight,
+                null,
                 LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+        Size2D rightSize = this.rightBlock.arrange(g2, rightConstraint);
+        rightWidth = rightSize.width;
     }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+
+    // Calculate remaining width for center block
+    double centerWidth = width - leftWidth - rightWidth;
+
+    // Arrange center block
+    RectangleConstraint centerConstraint = new RectangleConstraint(centerWidth, centerHeight);
     if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+        this.centerBlock.arrange(g2, centerConstraint);
     }
 
+    // Set bounds for each block
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width, topHeight));
     }
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topHeight + centerHeight, width, bottomHeight));
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight, leftWidth, centerHeight));
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(new Rectangle2D.Double(leftWidth + centerWidth, topHeight, rightWidth, centerHeight));
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, topHeight, centerWidth, centerHeight));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+    // Determine the total size
+    double totalHeight = topHeight + centerHeight + bottomHeight;
+    return new Size2D(width, totalHeight);
 }
\ No newline at end of file
