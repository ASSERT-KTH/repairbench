diff --git a/tmp/60b3029d-e10f-4fda-aba3-12aad3a83a51_buggy.java b/tmp/01aa24d1-fe98-4c7c-a26a-5abc6ab996db_fixed.java
index 63a7c80..7cc6e10 100644
--- a/tmp/60b3029d-e10f-4fda-aba3-12aad3a83a51_buggy.java
+++ b/tmp/01aa24d1-fe98-4c7c-a26a-5abc6ab996db_fixed.java
@@ -1,77 +1,93 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
-    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
-                               RectangleConstraint constraint) {
-        double[] w = new double[5];
-        double[] h = new double[5];
-        w[0] = constraint.getWidth();
+    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2, RectangleConstraint constraint) {
+        double w0 = constraint.getWidth();
+        
+        // Arrange top block to get h0
+        double h0 = 0;
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+            RectangleConstraint c1 = new RectangleConstraint(w0, null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE);
             Size2D size = this.topBlock.arrange(g2, c1);
-            h[0] = size.height;
+            h0 = size.height;
         }
-        w[1] = w[0];
+        
+        // Arrange bottom block to get h1
+        double h1 = 0;
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+            RectangleConstraint c2 = new RectangleConstraint(w0, null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
-            h[1] = size.height;
+            h1 = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+        
+        // Arrange left block with unconstrained height to get h2
+        double h2 = 0;
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            RectangleConstraint c3 = new RectangleConstraint(null, null, LengthConstraintType.NONE, null, null, LengthConstraintType.NONE);
             Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+            h2 = size.height;
         }
-        h[3] = h[2];
+        
+        // Arrange right block with unconstrained height to get h3
+        double h3 = 0;
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            RectangleConstraint c4 = new RectangleConstraint(null, null, LengthConstraintType.NONE, null, null, LengthConstraintType.NONE);
             Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
+            h3 = size.height;
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+        
+        // Arrange center block with unconstrained width and height to get h4
+        double h4 = 0;
         if (this.centerBlock != null) {
+            RectangleConstraint c5 = new RectangleConstraint(null, null, LengthConstraintType.NONE, null, null, LengthConstraintType.NONE);
+            Size2D size = this.centerBlock.arrange(g2, c5);
+            h4 = size.height;
+        }
+        
+        // Determine the remaining height h_r as the maximum of h2, h3, h4
+        double h_r = Math.max(Math.max(h2, h3), h4);
+        
+        // Calculate the total height
+        double totalHeight = h0 + h_r + h1;
+        
+        // Arrange left block again with height h_r to get w2
+        double w2 = 0;
+        if (this.leftBlock != null) {
+            RectangleConstraint c3 = new RectangleConstraint(null, null, LengthConstraintType.NONE, h_r, null, LengthConstraintType.FIXED);
+            Size2D size = this.leftBlock.arrange(g2, c3);
+            w2 = size.width;
+        }
+        
+        // Arrange right block with height h_r to get w3
+        double w3 = 0;
+        if (this.rightBlock != null) {
+            RectangleConstraint c4 = new RectangleConstraint(null, null, LengthConstraintType.NONE, h_r, null, LengthConstraintType.FIXED);
+            Size2D size = this.rightBlock.arrange(g2, c4);
+            w3 = size.width;
+        }
+        
+        // Calculate remaining width for the center block
+        double w4 = w0 - w2 - w3;
+        
+        // Arrange center block with width w4 and height h_r
+        if (this.centerBlock != null) {
+            RectangleConstraint c5 = new RectangleConstraint(w4, h_r);
             this.centerBlock.arrange(g2, c5);
         }
         
+        // Set bounds for each block
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w0, h0));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h0 + h_r, w0, h1));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h0, w2, h_r));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(w0 - w3, h0, w3, h_r));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w2, h0, w4, h_r));
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+        
+        return new Size2D(w0, totalHeight);
     }
\ No newline at end of file
