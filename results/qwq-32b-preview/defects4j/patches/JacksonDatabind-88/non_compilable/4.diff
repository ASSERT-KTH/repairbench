diff --git a/tmp/26fc906f-af92-4d73-b4e4-1179ad0f2889_buggy.java b/tmp/50bcc333-c3bd-4120-a940-5e6d1d1ee424_fixed.java
index ae1f3a6..78b6199 100644
--- a/tmp/26fc906f-af92-4d73-b4e4-1179ad0f2889_buggy.java
+++ b/tmp/50bcc333-c3bd-4120-a940-5e6d1d1ee424_fixed.java
@@ -1,34 +1,31 @@
-    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
-    {
-        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
-         *    check if any generics info is added; and only then ask factory
-         *    to do translation when necessary
-         */
+protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException {
     TypeFactory tf = ctxt.getTypeFactory();
     if (id.indexOf('<') > 0) {
-            // note: may want to try combining with specialization (esp for EnumMap)?
-            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
-            //    compatibility -- needed later anyway, and not doing so may open
-            //    security issues.
+        // Construct the type from the canonical id
         JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+        // Ensure that the constructed type is a subtype of the base type
+        if (!t.isSubtypeOf(_baseType)) {
+            throw new JsonMappingException("Type '" + t + "' is not a subtype of '" + _baseType + "'");
+        }
         return t;
-        }
-        Class<?> cls;
+    } else {
         try {
-            cls =  tf.findClass(id);
+            Class<?> cls = tf.findClass(id);
+            // Construct a specialized type based on the base type and the found class
+            JavaType specializedType = tf.constructSpecializedType(_baseType, cls);
+            // Ensure that the specialized type is a subtype of the base type
+            if (!specializedType.isSubtypeOf(_baseType)) {
+                throw new JsonMappingException("Type '" + specializedType + "' is not a subtype of '" + _baseType + "'");
+            }
+            return specializedType;
         } catch (ClassNotFoundException e) {
-            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
-            //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
-                // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
-            // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '" + id + "' (for id type 'Id.class'): " + e.getMessage(), e);
         }
-        return tf.constructSpecializedType(_baseType, cls);
+    }
 }
\ No newline at end of file
