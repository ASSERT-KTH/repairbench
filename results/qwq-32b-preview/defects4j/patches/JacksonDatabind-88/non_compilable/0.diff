diff --git a/tmp/c84d0fc5-5f03-4a39-8ff1-986d601be8e7_buggy.java b/tmp/bb4af9b0-5a2e-42c6-a935-038bcf64831a_fixed.java
index ae1f3a6..256eb1a 100644
--- a/tmp/c84d0fc5-5f03-4a39-8ff1-986d601be8e7_buggy.java
+++ b/tmp/bb4af9b0-5a2e-42c6-a935-038bcf64831a_fixed.java
@@ -1,34 +1,31 @@
-    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
-    {
-        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
-         *    check if any generics info is added; and only then ask factory
-         *    to do translation when necessary
-         */
+protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException {
     TypeFactory tf = ctxt.getTypeFactory();
     if (id.indexOf('<') > 0) {
-            // note: may want to try combining with specialization (esp for EnumMap)?
-            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
-            //    compatibility -- needed later anyway, and not doing so may open
-            //    security issues.
+        // Construct type from canonical form, which handles generics
         JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+        // Ensure that the constructed type is assignable to the base type
+        if (!tf.isSubType(t, _baseType)) {
+            throw new JsonMappingException(ctxt.getParser(), "Type '" + t + "' is not a subtype of '" + _baseType + "'");
+        }
         return t;
     }
     Class<?> cls;
     try {
         cls = tf.findClass(id);
     } catch (ClassNotFoundException e) {
-            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
-            //   DeserializationContext, just playing it safe
         if (ctxt instanceof DeserializationContext) {
             DeserializationContext dctxt = (DeserializationContext) ctxt;
-                // First: we may have problem handlers that can deal with it?
             return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
         }
-            // ... meaning that we really should never get here.
         return null;
     } catch (Exception e) {
         throw new IllegalArgumentException("Invalid type id '" + id + "' (for id type 'Id.class'): " + e.getMessage(), e);
     }
-        return tf.constructSpecializedType(_baseType, cls);
+    // Construct specialized type based on base type and found class
+    JavaType specializedType = tf.constructSpecializedType(_baseType, cls);
+    // Verify assignment compatibility
+    if (!tf.isSubType(specializedType, _baseType)) {
+        throw new JsonMappingException(ctxt.getParser(), "Specialized type '" + specializedType + "' is not a subtype of '" + _baseType + "'");
+    }
+    return specializedType;
 }
\ No newline at end of file
