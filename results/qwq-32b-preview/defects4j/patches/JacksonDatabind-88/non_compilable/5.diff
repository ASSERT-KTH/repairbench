diff --git a/tmp/0703065b-2ba2-4711-ba3d-0a2b61c07bb0_buggy.java b/tmp/b7999545-2ece-4dc8-af39-92b0d6665a21_fixed.java
index ae1f3a6..8c7b0f1 100644
--- a/tmp/0703065b-2ba2-4711-ba3d-0a2b61c07bb0_buggy.java
+++ b/tmp/b7999545-2ece-4dc8-af39-92b0d6665a21_fixed.java
@@ -1,34 +1,35 @@
 protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
 {
     /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
      *    check if any generics info is added; and only then ask factory
      *    to do translation when necessary
      */
     TypeFactory tf = ctxt.getTypeFactory();
     if (id.indexOf('<') > 0) {
-            // note: may want to try combining with specialization (esp for EnumMap)?
-            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
-            //    compatibility -- needed later anyway, and not doing so may open
-            //    security issues.
+        // Construct the type from the canonical string
         JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+        // Check if the constructed type is assignable to the base type
+        if (!t.isAssignableTo(ctxt.getTypeFactory(), _baseType)) {
+            throw new IllegalArgumentException("Type '" + t + "' is not assignable to base type '" + _baseType + "'");
+        }
         return t;
     }
     Class<?> cls;
     try {
         cls = tf.findClass(id);
     } catch (ClassNotFoundException e) {
         // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
         //   DeserializationContext, just playing it safe
         if (ctxt instanceof DeserializationContext) {
             DeserializationContext dctxt = (DeserializationContext) ctxt;
             // First: we may have problem handlers that can deal with it?
             return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
         }
         // ... meaning that we really should never get here.
         return null;
     } catch (Exception e) {
         throw new IllegalArgumentException("Invalid type id '" + id + "' (for id type 'Id.class'): " + e.getMessage(), e);
     }
+    // Construct specialized type using base type and found class
     return tf.constructSpecializedType(_baseType, cls);
 }
\ No newline at end of file
