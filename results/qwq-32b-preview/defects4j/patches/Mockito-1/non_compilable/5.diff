diff --git a/tmp/2dbcf053-88f7-4bb3-85ab-dfb2f7392c75_buggy.java b/tmp/0f6b10c5-0837-423c-89a5-8c73556b8066_fixed.java
index 1c875ad..7f95f8e 100644
--- a/tmp/2dbcf053-88f7-4bb3-85ab-dfb2f7392c75_buggy.java
+++ b/tmp/0f6b10c5-0837-423c-89a5-8c73556b8066_fixed.java
@@ -1,31 +1,29 @@
-    public void captureArgumentsFrom(Invocation invocation) {
 if (invocation.getMethod().isVarArgs()) {
     int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+    // Instead of throwing an exception, handle varargs here
+    Matcher varargMatcher = matchers.get(indexOfVararg);
+    if (varargMatcher instanceof CapturesArguments && isVarargMatcher(varargMatcher)) {
+        Object varargArray = invocation.getRawArguments()[indexOfVararg];
+        for (int i = 0; i < Array.getLength(varargArray); i++) {
+            Object arg = Array.get(varargArray, i);
+            ((CapturesArguments) varargMatcher).captureFrom(arg);
+        }
+        // Since we've captured all varargs, we might not need to process other matchers
+        return;
+    } else {
+        // Handle non-vararg matchers or throw an exception if unmatched
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments && position < invocation.getRawArguments().length) {
+                ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
+            }
+        }
+    }
 } else {
     for (int position = 0; position < matchers.size(); position++) {
         Matcher m = matchers.get(position);
         if (m instanceof CapturesArguments) {
             ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
         }
     }
 }
\ No newline at end of file
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
-    }
