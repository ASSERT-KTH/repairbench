diff --git a/tmp/51981f6d-b431-4394-9c1f-decd0246b160_buggy.java b/tmp/db03359a-9df9-4e42-9c6d-a54314a0d7f2_fixed.java
index 1c875ad..82ac8b5 100644
--- a/tmp/51981f6d-b431-4394-9c1f-decd0246b160_buggy.java
+++ b/tmp/db03359a-9df9-4e42-9c6d-a54314a0d7f2_fixed.java
@@ -1,31 +1,16 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
         int indexOfVararg = invocation.getRawArguments().length - 1;
         throw new UnsupportedOperationException();
 
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+    // There's a commented-out section that seems relevant.
 }
\ No newline at end of file
