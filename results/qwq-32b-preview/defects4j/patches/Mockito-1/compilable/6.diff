diff --git a/tmp/da8173d4-a3a2-42e6-992a-4899ad8302f4_buggy.java b/tmp/23bf7e65-1de8-46a5-9ad1-acf1d692452c_fixed.java
index 1c875ad..224ee0c 100644
--- a/tmp/da8173d4-a3a2-42e6-992a-4899ad8302f4_buggy.java
+++ b/tmp/23bf7e65-1de8-46a5-9ad1-acf1d692452c_fixed.java
@@ -1,31 +1,26 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+    boolean isVarArgs = invocation.getMethod().isVarArgs();
+    if (isVarArgs) {
+        int varargsParameterIndex = invocation.getMethod().getParameterTypes().length - 1;
+        Object[] rawArguments = invocation.getRawArguments();
+        Object varargsArray = rawArguments[varargsParameterIndex];
+        Class<?> componentType = varargsArray.getClass().getComponentType();
 
+        if (componentType != null) {
+            for (int i = 0; i < Array.getLength(varargsArray); i++) {
+                Object arg = Array.get(varargsArray, i);
+                Matcher m = matchers.get(varargsParameterIndex);
+                if (m instanceof CapturesArguments) {
+                    ((CapturesArguments) m).captureFrom(arg);
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
