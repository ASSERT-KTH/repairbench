diff --git a/tmp/0acf2684-7a3a-40da-8d86-0ba0b0c994ec_buggy.java b/tmp/36c755ee-98b6-46de-8525-207d4c22ccca_fixed.java
index 5f8ac1a..bed9689 100644
--- a/tmp/0acf2684-7a3a-40da-8d86-0ba0b0c994ec_buggy.java
+++ b/tmp/36c755ee-98b6-46de-8525-207d4c22ccca_fixed.java
@@ -1,34 +1,44 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    if (p1 == p2) {
+        return 0;
+    }
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
-
-        if (p1 != null && p1.equals(p2)) {
+    if (p1 == null) {
+        return -1;
+    }
+    if (p2 == null) {
+        return 1;
+    }
+    if (!p1.getNavigator().isEqualContainers(p1.getContainer(), p2.getContainer())) {
+        // Pointers are from different trees, consider them incomparable
+        return 1; // or -1, depending on desired ordering
+    }
+    if (p1.equals(p2)) {
         return 0;
     }
-
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // If pointers are not equal and are leaf nodes from the same tree,
+        // compare their values or consider them unequal
+        return p1.compareTo(p2);
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
-
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
