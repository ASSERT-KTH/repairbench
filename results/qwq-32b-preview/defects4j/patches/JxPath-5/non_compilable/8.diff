diff --git a/tmp/c6fe3eec-70c5-4bf6-b806-b273c114935b_buggy.java b/tmp/0984e719-7db1-4d1e-be3a-0b761095e488_fixed.java
index 5f8ac1a..27bd4ec 100644
--- a/tmp/c6fe3eec-70c5-4bf6-b806-b273c114935b_buggy.java
+++ b/tmp/0984e719-7db1-4d1e-be3a-0b761095e488_fixed.java
@@ -1,34 +1,57 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // Compare tree IDs instead of throwing an exception
+        int treeComparison = compareTreeIds(p1, p2);
+        if (treeComparison != 0) {
+            return treeComparison;
         }
+        // If tree IDs are the same, but pointers are different, consider them different
+        return p1.compareTo(p2);
+    }
+
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
+
+private int compareTreeIds(NodePointer p1, NodePointer p2) {
+    // Assuming each NodePointer has a method to get the tree it belongs to
+    Object tree1 = p1.getOwnerDocument();
+    Object tree2 = p2.getOwnerDocument();
+    if (tree1 == tree2) {
+        return 0;
+    }
+    if (tree1 == null) {
+        return -1;
+    }
+    if (tree2 == null) {
+        return 1;
+    }
+    // Compare tree1 and tree2 based on some consistent ordering
+    // For example, compare their object references
+    return System.identityHashCode(tree1) - System.identityHashCode(tree2);
+}
\ No newline at end of file
