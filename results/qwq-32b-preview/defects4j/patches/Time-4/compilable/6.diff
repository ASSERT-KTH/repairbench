diff --git a/tmp/d35f9a5c-8a84-4997-9829-6c1631b4d568_buggy.java b/tmp/d252ba03-e5b1-4e4e-a343-79c754869532_fixed.java
index 7ea7ac9..15bb20f 100644
--- a/tmp/d35f9a5c-8a84-4997-9829-6c1631b4d568_buggy.java
+++ b/tmp/d252ba03-e5b1-4e4e-a343-79c754869532_fixed.java
@@ -1,63 +1,76 @@
 /**
  * Gets a copy of this date with the specified field set to a new value.
  * <p>
  * If this partial did not previously support the field, the new one will.
  * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
  * <p>
  * For example, if the field type is <code>dayOfMonth</code> then the day
  * would be changed/added in the returned instance.
  *
  * @param fieldType  the field type to set, not null
  * @param value  the value to set
  * @return a copy of this instance with the field set
  * @throws IllegalArgumentException if the value is null or invalid
  */
 public Partial with(DateTimeFieldType fieldType, int value) {
     if (fieldType == null) {
         throw new IllegalArgumentException("The field type must not be null");
     }
     int index = indexOf(fieldType);
-        if (index == -1) {
+    if (index != -1) {
+        // Field already exists, update its value
+        int currentValue = getValue(index);
+        if (value == currentValue) {
+            return this; // No change needed
+        }
+        int[] newValues = getValues().clone();
+        newValues[index] = value;
+        // Use public constructor to ensure full validation
+        Partial newPartial = new Partial(iChronology, iTypes, newValues);
+        iChronology.validate(newPartial, newValues);
+        return newPartial;
+    } else {
+        // Field does not exist, need to insert it
         DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
         int[] newValues = new int[newTypes.length];
         
-            // find correct insertion point to keep largest-smallest order
+        // Find the correct insertion point to keep the order
         int i = 0;
         DurationField unitField = fieldType.getDurationType().getField(iChronology);
         if (unitField.isSupported()) {
             for (; i < iTypes.length; i++) {
                 DateTimeFieldType loopType = iTypes[i];
                 DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                 if (loopUnitField.isSupported()) {
                     int compare = unitField.compareTo(loopUnitField);
                     if (compare > 0) {
                         break;
                     } else if (compare == 0) {
                         DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                         DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                         if (rangeField.compareTo(loopRangeField) > 0) {
                             break;
                         }
                     }
                 }
             }
         }
+        
+        // Copy existing types and values up to the insertion point
         System.arraycopy(iTypes, 0, newTypes, 0, i);
         System.arraycopy(iValues, 0, newValues, 0, i);
+        
+        // Insert the new field type and value
         newTypes[i] = fieldType;
         newValues[i] = value;
-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-            // use public constructor to ensure full validation
-            // this isn't overly efficient, but is safe
+        
+        // Copy remaining existing types and values after the insertion point
+        System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);
+        System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);
+        
+        // Use public constructor to ensure full validation
         Partial newPartial = new Partial(iChronology, newTypes, newValues);
         iChronology.validate(newPartial, newValues);
         return newPartial;
     }
-        if (value == getValue(index)) {
-            return this;
-        }
-        int[] newValues = getValues();
-        newValues = getField(index).set(this, index, newValues, value);
-        return new Partial(this, newValues);
 }
\ No newline at end of file
