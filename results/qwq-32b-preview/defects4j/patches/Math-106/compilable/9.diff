diff --git a/tmp/9ef4dc98-cab2-4c16-9b39-6e6ef2c43aa1_buggy.java b/tmp/561836b4-5ef6-47ab-b3c2-479aecf4224f_fixed.java
index 42c5923..5b9fd3e 100644
--- a/tmp/9ef4dc98-cab2-4c16-9b39-6e6ef2c43aa1_buggy.java
+++ b/tmp/561836b4-5ef6-47ab-b3c2-479aecf4224f_fixed.java
@@ -1,89 +1,77 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
 public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
-        Fraction ret = super.parse(source, pos);
-        if (ret != null) {
-            return ret;
-        }
-        
     int initialIndex = pos.getIndex();
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse whole
     Number whole = getWholeFormat().parse(source, pos);
     if (whole == null) {
         // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
+        pos.setErrorIndex(initialIndex);
         return null;
     }
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse numerator
     Number num = getNumeratorFormat().parse(source, pos);
     if (num == null) {
         // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
+        pos.setErrorIndex(initialIndex);
         return null;
     }
 
-            // minus signs should be leading, invalid expression
-
     // parse '/'
     int startIndex = pos.getIndex();
     char c = parseNextCharacter(source, pos);
     switch (c) {
         case 0:
             // no '/'
             // return num as a fraction
             return new Fraction(num.intValue(), 1);
         case '/':
             // found '/', continue parsing denominator
             break;
         default:
             // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
     }
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse denominator
     Number den = getDenominatorFormat().parse(source, pos);
     if (den == null) {
         // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
+        pos.setErrorIndex(initialIndex);
         return null;
     }
 
-            // minus signs must be leading, invalid
-
     int w = whole.intValue();
     int n = num.intValue();
     int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+
+    // Check for minus signs in numerator or denominator
+    if (n < 0 || d < 0) {
+        // minus signs should be only in the whole number part
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(initialIndex);
+        return null;
+    }
+
+    // Calculate the numerator for the final fraction
+    int numerator = (Math.abs(w) * d) + n;
+    if (w < 0) {
+        numerator = -numerator;
+    }
+
+    return new Fraction(numerator, d);
 }
\ No newline at end of file
