diff --git a/tmp/da8bad2e-1308-474b-98d0-5c93cabc4f1c_buggy.java b/tmp/c5afc1d9-1336-4900-9f9f-785ffe0c1480_fixed.java
index 49a5702..28d8aad 100644
--- a/tmp/da8bad2e-1308-474b-98d0-5c93cabc4f1c_buggy.java
+++ b/tmp/c5afc1d9-1336-4900-9f9f-785ffe0c1480_fixed.java
@@ -1,66 +1,79 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    // Skip VOID nodes as they are extra semicolons, which are allowed.
+    if (n.isEmpty() || n.isComma()) {
         return;
     }
 
     if (parent == null) {
         return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+    // Skip ExprResult nodes as they are handled elsewhere.
     if (n.isExprResult()) {
         return;
     }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
+    // Allow QualifiedName nodes with JSDoc information.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
     }
 
+    // Check if the expression result is used.
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+
+    // Check if the node is a simple operator.
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+    // Handle comma operators separately.
     if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
+        // If it's the last child in a comma chain, check if the result is used.
         if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
+            if (!isResultUsed) {
+                // Traverse ancestors to ensure it's not used in EXPR_RESULT or BLOCK.
+                for (Node ancestor : parent.getAncestors()) {
+                    int ancestorType = ancestor.getType();
                     if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+                    if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {
+                        reportUselessCode(t, n, isSimpleOp);
+                        return;
+                    } else {
+                        break;
+                    }
+                }
             }
         }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
         return;
     }
+
+    // For other parents, check if they are not EXPR_RESULT or BLOCK.
+    if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
+        // Special case for FOR loops with specific structures.
+        if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+            (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {
+            return;
+        }
+    }
+
+    // Check if the node is simple or has no side effects.
+    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) && !isResultUsed) {
+        reportUselessCode(t, n, isSimpleOp);
+    }
 }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
-      String msg = "This code lacks side-effects. Is there a bug?";
+
+private void reportUselessCode(NodeTraversal t, Node n, boolean isSimpleOp) {
+    String msg;
     if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
               "' operator is not being used.";
+    } else {
+        msg = "This code lacks side-effects. Is there a bug?";
     }
 
-      t.getCompiler().report(
-          t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));
     if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
     }
 }
\ No newline at end of file
-  }
