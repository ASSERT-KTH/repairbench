diff --git a/tmp/f92505d2-5c59-4e70-ae8c-f5414ad63066_buggy.java b/tmp/c0baf40d-7f70-41df-81f8-c85492d51a12_fixed.java
index 98dde53..b87fb1e 100644
--- a/tmp/f92505d2-5c59-4e70-ae8c-f5414ad63066_buggy.java
+++ b/tmp/c0baf40d-7f70-41df-81f8-c85492d51a12_fixed.java
@@ -1,34 +1,62 @@
 public void head(org.jsoup.nodes.Node source, int depth) {
     namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack
     if (source instanceof org.jsoup.nodes.Element) {
         org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;
 
         String prefix = updateNamespaces(sourceEl);
         String namespace = namespacesStack.peek().get(prefix);
         String tagName = sourceEl.tagName();
 
-                Element el =
-                    doc.createElementNS(namespace, tagName);
+        Element el;
+        if (namespace != null) {
+            el = doc.createElementNS(namespace, prefix + ":" + tagName);
+        } else {
+            el = doc.createElement(tagName);
+        }
         copyAttributes(sourceEl, el);
         if (dest == null) { // sets up the root
             doc.appendChild(el);
         } else {
             dest.appendChild(el);
         }
         dest = el; // descend
     } else if (source instanceof org.jsoup.nodes.TextNode) {
         org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;
         Text text = doc.createTextNode(sourceText.getWholeText());
         dest.appendChild(text);
     } else if (source instanceof org.jsoup.nodes.Comment) {
         org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;
         Comment comment = doc.createComment(sourceComment.getData());
         dest.appendChild(comment);
     } else if (source instanceof org.jsoup.nodes.DataNode) {
         org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;
         Text node = doc.createTextNode(sourceData.getWholeData());
         dest.appendChild(node);
     } else {
         // unhandled
     }
 }
+
+private String updateNamespaces(org.jsoup.nodes.Element element) {
+    // This method should handle namespace declarations and updates
+    // It should return the prefix if any, and update the namespacesStack accordingly
+    // Implementation depends on how namespaces are being managed in the class
+    // For example:
+    String prefix = null;
+    for (org.jsoup.nodes.Attribute attr : element.attributes()) {
+        if (attr.getKey().startsWith("xmlns")) {
+            if ("xmlns".equals(attr.getKey())) {
+                namespacesStack.peek().put("", attr.getValue());
+            } else {
+                prefix = attr.getKey().substring(6); // remove 'xmlns:'
+                namespacesStack.peek().put(prefix, attr.getValue());
+            }
+        }
+    }
+    // Determine the prefix for the element, if any
+    int colonIndex = element.tagName().indexOf(':');
+    if (colonIndex > 0) {
+        prefix = element.tagName().substring(0, colonIndex);
+    }
+    return prefix;
+}
\ No newline at end of file
