diff --git a/tmp/5d3df067-ecda-4e54-93cb-9d7f38fb2bfe_buggy.java b/tmp/b9beb6e7-3637-477b-885a-47fcef3fa027_fixed.java
index d5b1b52..b6b598f 100644
--- a/tmp/5d3df067-ecda-4e54-93cb-9d7f38fb2bfe_buggy.java
+++ b/tmp/b9beb6e7-3637-477b-885a-47fcef3fa027_fixed.java
@@ -1,36 +1,57 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
+import java.lang.reflect.Array;
+import java.util.Objects;
+
+public class ArrayUtils {
+
     @SuppressWarnings("unchecked")
     public static <T> T[] addAll(T[] array1, T... array2) {
         if (array1 == null) {
             return clone(array2);
         } else if (array2 == null) {
             return clone(array1);
         }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+
+        Class<?> type1 = array1.getClass().getComponentType();
+        Class<?> type2 = array2.getClass().getComponentType();
+
+        // Determine the common component type
+        Class<?> commonType = getCommonComponentType(type1, type2);
+
+        // Create a new array of the common type
+        T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);
+
+        // Copy elements from array1
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+
+        // Copy elements from array2
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+
         return joinedArray;
     }
+
+    private static Class<?> getCommonComponentType(Class<?> type1, Class<?> type2) {
+        if (type1.isAssignableFrom(type2)) {
+            return type1;
+        } else if (type2.isAssignableFrom(type1)) {
+            return type2;
+        } else {
+            // Find the least common ancestor in the inheritance hierarchy
+            Class<?> ancestor = type1;
+            while (!type2.isAssignableFrom(ancestor)) {
+                ancestor = ancestor.getSuperclass();
+                if (ancestor == null) {
+                    throw new IllegalArgumentException("Incompatible array types: " + type1 + " and " + type2);
+                }
+            }
+            return ancestor;
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    public static <T> T[] clone(T[] array) {
+        if (array == null) {
+            return null;
+        }
+        return array.clone();
+    }
+}
\ No newline at end of file
