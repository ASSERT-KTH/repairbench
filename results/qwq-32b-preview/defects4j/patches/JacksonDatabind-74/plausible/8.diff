diff --git a/tmp/784f4351-05b9-400d-a5bd-e07ca3bb6e3b_buggy.java b/tmp/7e5b832e-4604-4042-8207-ea27eaec0393_fixed.java
index 658036e..02c639f 100644
--- a/tmp/784f4351-05b9-400d-a5bd-e07ca3bb6e3b_buggy.java
+++ b/tmp/7e5b832e-4604-4042-8207-ea27eaec0393_fixed.java
@@ -1,29 +1,34 @@
-    // off-lined to keep main method lean and mean...
 @SuppressWarnings("resource")
 protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
-            TokenBuffer tb) throws IOException
-    {
+        TokenBuffer tb) throws IOException {
     // As per [JACKSON-614], may have default implementation to use
     JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
     if (deser != null) {
         if (tb != null) {
             tb.writeEndObject();
             p = tb.asParser(p);
             // must move to point to the first token:
             p.nextToken();
         }
         return deser.deserialize(p, ctxt);
     }
     // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
     Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
     if (result != null) {
         return result;
     }
-        // or, something for which "as-property" won't work, changed into "wrapper-array" type:
+    // Check if the current token is a START_ARRAY
     if (p.getCurrentToken() == JsonToken.START_ARRAY) {
         return super.deserializeTypedFromAny(p, ctxt);
     }
+    // Check if the current token is a VALUE_STRING and handle empty strings as null if configured
+    if (p.getCurrentToken() == JsonToken.VALUE_STRING && p.getText().isEmpty()) {
+        if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+            return null;
+        }
+    }
+    // If none of the above, report the error
     ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
             "missing property '" + _typePropertyName + "' that is to contain type id  (for class " + baseTypeName() + ")");
     return null;
 }
\ No newline at end of file
