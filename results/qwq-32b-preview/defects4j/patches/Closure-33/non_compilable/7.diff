diff --git a/tmp/e33c9a5c-446e-4a46-8c81-3f8149178675_buggy.java b/tmp/202db043-028a-4ab8-8221-e4ff14ac9086_fixed.java
index fb2b020..e5d1f2f 100644
--- a/tmp/e33c9a5c-446e-4a46-8c81-3f8149178675_buggy.java
+++ b/tmp/202db043-028a-4ab8-8221-e4ff14ac9086_fixed.java
@@ -1,27 +1,10 @@
-  @Override
-  public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraintObj.isRecordType()) {
-      for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
 JSType typeToInfer = propType;
+
 if (!hasProperty(prop)) {
+
   typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+
       .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
-        }
-      }
-    }
+
 }
