diff --git a/tmp/ca85d0da-1f8a-4e52-ae19-a499d0225066_buggy.java b/tmp/253c6ca1-98db-4534-8716-398cad67165b_fixed.java
index fb2b020..26c7400 100644
--- a/tmp/ca85d0da-1f8a-4e52-ae19-a499d0225066_buggy.java
+++ b/tmp/253c6ca1-98db-4534-8716-398cad67165b_fixed.java
@@ -1,27 +1,35 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
+      } else {
+        // If the property is already declared, ensure its type is compatible with the constraint.
+        JSType currentType = getPropertyType(prop);
+        JSType newType = currentType.getLeastSupertype(propType);
+        setPropertyType(prop, newType);
       }
     }
+  } else {
+    // Handle other types of constraints if necessary.
+    // For example, if constraintObj is a union type or a function type.
   }
 }
\ No newline at end of file
