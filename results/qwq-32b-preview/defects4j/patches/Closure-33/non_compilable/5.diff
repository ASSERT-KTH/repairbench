diff --git a/tmp/5d44d41f-d99c-4c4c-b02f-9110fce04be4_buggy.java b/tmp/c72abba3-e225-4cfe-859b-34c0bad2c72a_fixed.java
index fb2b020..26e0b5f 100644
--- a/tmp/5d44d41f-d99c-4c4c-b02f-9110fce04be4_buggy.java
+++ b/tmp/c72abba3-e225-4cfe-859b-34c0bad2c72a_fixed.java
@@ -1,27 +1,31 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
       if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+        // If the property doesn't exist, define it with the constraint type.
+        defineInferredProperty(prop, propType, null);
+      } else {
+        // If the property exists, ensure its type is compatible with the constraint.
+        JSType currentType = getPropertyType(prop);
+        JSType mergedType = currentType.getLeastSupertype(propType);
+        if (!currentType.isEquivalentTo(mergedType)) {
+          // Update the property type if the constraint adds new information.
+          redefinePropertyWithType(prop, mergedType);
         }
-          defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
