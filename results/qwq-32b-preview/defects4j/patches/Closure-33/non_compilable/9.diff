diff --git a/tmp/05d235c4-e037-4cff-81b0-a9bcd2080b72_buggy.java b/tmp/eb0614da-30bf-451a-8f61-07d929fc3da1_fixed.java
index fb2b020..191e0ab 100644
--- a/tmp/05d235c4-e037-4cff-81b0-a9bcd2080b72_buggy.java
+++ b/tmp/eb0614da-30bf-451a-8f61-07d929fc3da1_fixed.java
@@ -1,27 +1,30 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+          // If the property is optional in the constraint, we should allow undefined.
+          // Check if the property type includes undefined, if not, add it.
+          if (!propType.isNullable()) {
+            typeToInfer = getNativeType(JSTypeNative.UNDEFINED_TYPE).getLeastSupertype(propType);
+          }
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
