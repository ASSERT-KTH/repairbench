diff --git a/tmp/8913448f-612f-4205-82b3-9d0d6baa667a_buggy.java b/tmp/d5d4f0cc-4984-424f-9335-1e8d9d524eee_fixed.java
index 08093b4..61dfc0e 100644
--- a/tmp/8913448f-612f-4205-82b3-9d0d6baa667a_buggy.java
+++ b/tmp/d5d4f0cc-4984-424f-9335-1e8d9d524eee_fixed.java
@@ -1,42 +1,49 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
+        // Remove trailing '/' to ensure it's treated as a file entry
+        String basename = entryName.replaceAll("/$", "");
+        String name = "./PaxHeaders.X/" + stripTo7Bits(basename);
+        
+        // TarConstants.NAMELEN is the maximum name length in Tar
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
+        
+        // Create a TarArchiveEntry for the Pax headers
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
         
+        // Construct the Pax header content
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
-            int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
+            // Initial guess for the length
+            int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */;
             String line = len + " " + key + "=" + value + "\n";
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
             while (len != actualLength) {
                 // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
+                // or where UTF-8 encoding isn't a single octet per character.
                 len = actualLength;
                 line = len + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
             w.write(line);
         }
+        
+        // Get the data to write
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
+        
+        // Set the size of the Pax header entry
         pex.setSize(data.length);
+        
+        // Write the entry and data
         putArchiveEntry(pex);
         write(data);
         closeArchiveEntry();
     }
\ No newline at end of file
