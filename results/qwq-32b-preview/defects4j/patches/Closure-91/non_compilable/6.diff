diff --git a/tmp/deb5dc14-77d4-4889-998a-0f30eb84e0f8_buggy.java b/tmp/1ee4b5f2-f6aa-4614-9606-f192bc26558c_fixed.java
index 30d7266..fb4dd4b 100644
--- a/tmp/deb5dc14-77d4-4889-998a-0f30eb84e0f8_buggy.java
+++ b/tmp/1ee4b5f2-f6aa-4614-9606-f192bc26558c_fixed.java
@@ -1,69 +1,98 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
+ * is encountered, there is no reason to traverse non-global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
     // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {}; // or
     // var a = {x: function() {}};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN ||
 
           // object literal keys
           pType == Token.STRING ||
           pType == Token.NUMBER)) {
       return false;
     }
 
+    // Check if the function is being lent to a prototype via @lends
+    if (isLendedFunction(parent)) {
+      return false;
+    }
+
     // Don't traverse functions that are getting lent to a prototype.
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
       // nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
       if (NodeUtil.isGet(lhs)) {
         if (lhs.getType() == Token.GETPROP &&
             lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
         Node llhs = lhs.getFirstChild();
         if (llhs.getType() == Token.GETPROP &&
             llhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
       }
     }
   }
 
   return true;
 }
+
+private boolean isLendedFunction(Node parent) {
+  // Traverse up the AST to find if this function is part of an object literal
+  // that has a @lends annotation.
+  Node grandParent = parent.getParent();
+  if (grandParent != null && grandParent.getType() == Token_Call) {
+    // Check if this is part of dojo.declare call.
+    Node callNode = grandParent;
+    if (callNode.getFirstChild().isGetPROP() &&
+        callNode.getFirstChild().getFirstChild().getString().equals("dojo") &&
+        callNode.getFirstChild().getLastChild().getString().equals("declare")) {
+      // Check if the object literal has a @lends annotation.
+      for (Node arg = callNode.getFirstChild().getNext(); arg != null; arg = arg.getNext()) {
+        if (arg.isObjectLITERAL()) {
+          JSDocInfo jsDoc = arg.getJSDocInfo();
+          if (jsDoc != null && jsDoc.getLendsType() != null) {
+            return true;
+          }
+        }
+      }
+    }
+  }
+  return false;
+}
\ No newline at end of file
