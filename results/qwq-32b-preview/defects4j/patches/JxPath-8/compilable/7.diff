diff --git a/tmp/8a8b5f22-96a7-45e8-9493-cdaea77843df_buggy.java b/tmp/232970e0-f694-4c1a-bde1-235e4fd42a43_fixed.java
index 98d89dc..50a340f 100644
--- a/tmp/8a8b5f22-96a7-45e8-9493-cdaea77843df_buggy.java
+++ b/tmp/232970e0-f694-4c1a-bde1-235e4fd42a43_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Special handling for NaN comparisons
+    if (Double.isNaN(ld) && Double.isNaN(rd)) {
+        // NaN equals NaN should be true
+        return true;
+    } else if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // If either is NaN, non-equality
+        return false;
+    } else {
+        // Standard comparison for numbers
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
+}
\ No newline at end of file
