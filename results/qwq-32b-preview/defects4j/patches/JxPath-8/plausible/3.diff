diff --git a/tmp/c7b8426d-4074-4962-aa78-710cbb4a89a8_buggy.java b/tmp/d165d682-a8da-42b2-a12f-effc2f57c5c9_fixed.java
index 98d89dc..14e967d 100644
--- a/tmp/c7b8426d-4074-4962-aa78-710cbb4a89a8_buggy.java
+++ b/tmp/d165d682-a8da-42b2-a12f-effc2f57c5c9_fixed.java
@@ -1,23 +1,40 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    
+    // Special handling for NaN comparisons
+    if (Double.isNaN(ld) && Double.isNaN(rd)) {
+        // NaN should be equal to itself in this context
+        return evaluateCompare(0);
+    } else if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // NaN is not greater than or less than any value, including itself
+        // So, in comparisons involving NaN, it should not be greater or less
+        if (ld > rd) {
+            return evaluateCompare(1);
+        } else if (ld < rd) {
+            return evaluateCompare(-1);
+        } else {
+            return evaluateCompare(0);
+        }
+    } else {
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
+}
\ No newline at end of file
