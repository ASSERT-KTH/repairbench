diff --git a/tmp/e30a2b8d-6327-4ec8-970c-fedd6a60b152_buggy.java b/tmp/bc649b01-d4f7-48f3-95ef-a08e8aed0884_fixed.java
index 98d89dc..b1a769a 100644
--- a/tmp/e30a2b8d-6327-4ec8-970c-fedd6a60b152_buggy.java
+++ b/tmp/bc649b01-d4f7-48f3-95ef-a08e8aed0884_fixed.java
@@ -1,23 +1,35 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+
+    // Custom comparison handling for NaN
+    if (Double.isNaN(ld) && Double.isNaN(rd)) {
+        // Treat NaN as equal to itself for equality checks
+        if (operator == '=') {
+            return true;
+        }
+        // For inequality checks, NaN is not greater than or less than itself
+        return false;
+    }
+
+    int comparisonResult = Double.compare(ld, rd);
+    return evaluateCompare(comparisonResult);
 }
\ No newline at end of file
