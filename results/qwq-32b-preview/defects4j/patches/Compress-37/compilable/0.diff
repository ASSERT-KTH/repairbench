diff --git a/tmp/cf3f0956-952b-4d3d-86ab-a707c779784f_buggy.java b/tmp/30b002f7-9ddf-4ab3-a4b0-e9d6127871f0_fixed.java
index 4b7e1e4..c3a0cc9 100644
--- a/tmp/cf3f0956-952b-4d3d-86ab-a707c779784f_buggy.java
+++ b/tmp/30b002f7-9ddf-4ab3-a4b0-e9d6127871f0_fixed.java
@@ -1,52 +1,66 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while (true) { // get length
             int ch;
             int len = 0;
             int read = 0;
             while ((ch = i.read()) != -1) {
-                read++;
                 if (ch == ' ') {
+                    break; // End of length field
+                }
+                if (ch < '0' || ch > '9') {
+                    throw new IOException("Invalid character in Pax header length");
+                }
+                len = len * 10 + (ch - '0');
+                read++;
+            }
+            if (ch == -1) { // EOF
+                break;
+            }
+            if (len <= 0) {
+                throw new IOException("Invalid Pax header length: " + len);
+            }
             // Get keyword
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == '=') { // end of keyword
                     final String keyword = coll.toString(CharsetNames.UTF_8);
                     // Get rest of entry
                     final int restLen = len - read;
+                    if (restLen < 0) {
+                        throw new IOException("Pax header length mismatch: " + len + " vs " + read);
+                    }
                     if (restLen == 1) { // only NL
                         headers.remove(keyword);
                     } else {
-                                final byte[] rest = new byte[restLen];
+                        final byte[] rest = new byte[restLen - 1]; // subtract NL
                         final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                        if (got != restLen - 1) {
+                            throw new IOException("Failed to read Paxheader. Expected " + (restLen - 1) + " bytes, read " + got);
                         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                        final String value = new String(rest, CharsetNames.UTF_8);
                         headers.put(keyword, value);
                     }
                     break;
                 }
                 coll.write((byte) ch);
             }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
             if (ch == -1) { // EOF
                 break;
             }
+            // Consume the newline character
+            ch = i.read();
+            if (ch != '\n') {
+                throw new IOException("Expected newline after Pax header");
+            }
+            read++;
+            if (read != len) {
+                throw new IOException("Pax header length mismatch: " + len + " vs " + read);
+            }
         }
         return headers;
     }
\ No newline at end of file
