diff --git a/tmp/1eac0637-ee92-44de-a537-3aac76d8b084_buggy.java b/tmp/377957d3-4186-4371-a44d-415592886fe3_fixed.java
index 4be01ab..a97d27b 100644
--- a/tmp/1eac0637-ee92-44de-a537-3aac76d8b084_buggy.java
+++ b/tmp/377957d3-4186-4371-a44d-415592886fe3_fixed.java
@@ -1,115 +1,90 @@
 /**
  * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
+ * lines until either an annotation, end of comment or end of file is reached.
  * Note that if this method detects an end of line as the first token, it
  * will quit immediately (indicating that there is no text where it was
  * expected).  Note that token = info.token; should be called after this
  * method is used to update the token properly in the parser.
  *
  * @param token The start token.
  * @param option How to handle whitespace.
  *
  * @return The extraction information.
  */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                      WhitespaceOption option) {
 
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
-
   StringBuilder builder = new StringBuilder();
-    builder.append(line);
-
-    state = State.SEARCHING_ANNOTATION;
-    token = next();
 
   boolean ignoreStar = false;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
   do {
     switch (token) {
       case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
-            }
-
+        if (!ignoreStar) {
           builder.append('*');
         }
-
         token = next();
         continue;
 
       case EOL:
-          if (option != WhitespaceOption.SINGLE_LINE) {
         builder.append("\n");
-          }
-
         ignoreStar = true;
         token = next();
         continue;
 
       default:
         ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
 
         if (token == JsDocToken.EOC ||
             token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+            (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {
           String multilineText = builder.toString();
 
           if (option != WhitespaceOption.PRESERVE) {
             multilineText = multilineText.trim();
           }
 
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
 
           if (multilineText.length() > 0) {
             jsdocBuilder.markText(multilineText, startLineno, startCharno,
                 endLineno, endCharno);
           }
 
           return new ExtractionInfo(multilineText, token);
         }
 
-          if (builder.length() > 0) {
+        String tokenStr = toString(token);
+        if (option != WhitespaceOption.PRESERVE) {
+          tokenStr = tokenStr.trim();
+        }
+
+        if (builder.length() > 0 && !tokenStr.startsWith("\n")) {
           builder.append(' ');
         }
-          builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
+        builder.append(tokenStr);
 
         if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+          String remainingLine = stream.getRemainingJSDocLine().trim();
+          if (!remainingLine.isEmpty()) {
+            builder.append(' ').append(remainingLine);
+          }
+        } else {
+          builder.append(stream.getRemainingJSDocLine());
         }
-
-          builder.append(line);
         token = next();
     }
   } while (true);
 }
\ No newline at end of file
