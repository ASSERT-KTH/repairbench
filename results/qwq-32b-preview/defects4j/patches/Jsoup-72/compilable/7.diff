diff --git a/tmp/0a72eb94-0ed1-42d8-90a0-ede7d831e039_buggy.java b/tmp/f42d5506-f67a-4713-bc0d-b42efd3a9c9c_fixed.java
index d666a67..ef51a12 100644
--- a/tmp/0a72eb94-0ed1-42d8-90a0-ede7d831e039_buggy.java
+++ b/tmp/f42d5506-f67a-4713-bc0d-b42efd3a9c9c_fixed.java
@@ -1,36 +1,27 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
 private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
+    // Ensure stringCache is initialized
+    if (stringCache == null) {
+        throw new IllegalArgumentException("stringCache must be initialized");
+    }
+
     // limit (no cache):
     if (count > maxStringCacheLen)
         return new String(charBuf, start, count);
 
     // calculate hash:
     int hash = 0;
     int offset = start;
     for (int i = 0; i < count; i++) {
         hash = 31 * hash + charBuf[offset++];
     }
 
     // get from cache
-        final int index = hash & stringCache.length - 1;
+    final int index = hash & (stringCache.length - 1);
     String cached = stringCache[index];
 
-        if (cached == null) { // miss, add
+    if (cached == null || !rangeEquals(charBuf, start, count, cached)) { // miss, add
         cached = new String(charBuf, start, count);
         stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
-                return cached;
-            } else { // hashcode conflict
-                cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
-            }
     }
     return cached;
 }
\ No newline at end of file
