diff --git a/tmp/dcadc84c-520e-4b95-9100-0f7999271fed_buggy.java b/tmp/d40da920-b55a-4d39-8739-3e9b6d1cf095_fixed.java
index 99d6a44..455feb4 100644
--- a/tmp/dcadc84c-520e-4b95-9100-0f7999271fed_buggy.java
+++ b/tmp/d40da920-b55a-4d39-8739-3e9b6d1cf095_fixed.java
@@ -1,58 +1,68 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
-        sort(savedFields, count);
-        if (count > 0) {
-            // alter base year for parsing if first field is month or day
-            DurationField months = DurationFieldType.months().getField(iChrono);
-            DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
-                saveField(DateTimeFieldType.year(), iDefaultYear);
-                return computeMillis(resetFields, text);
-            }
+    // Modify the sort to prioritize year fields before month and day fields
+    sort(savedFields, count, new Comparator<SavedField>() {
+        @Override
+        public int compare(SavedField f1, SavedField f2) {
+            int order1 = getFieldOrder(f1.iField);
+            int order2 = getFieldOrder(f2.iField);
+            return Integer.compare(order1, order2);
         }
 
+        private int getFieldOrder(DateTimeField field) {
+            if (field.getType() == DateTimeFieldType.year() || field.getType() == DateTimeFieldType.weekyear()) {
+                return 0;
+            } else if (field.getType() == DateTimeFieldType.monthOfYear()) {
+                return 1;
+            } else if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {
+                return 2;
+            } else if (field.getType() == DateTimeFieldType.dayOfMonth() || field.getType() == DateTimeFieldType.dayOfWeek()) {
+                return 3;
+            } else {
+                return 4; // Other fields
+            }
+        }
+    });
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
-                e.prependMessage("Cannot parse \"" + text + '"');
+            e.prependMessage("Cannot parse \"" + text + "\"");
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
-                String message =
-                    "Illegal instant due to time zone offset transition (" + iZone + ')';
+            String message = "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
