diff --git a/tmp/85bb1117-856e-4ccd-90e9-a2ce2ba32067_buggy.java b/tmp/53fd8390-1795-4e3d-8638-754f7461e894_fixed.java
index 99d6a44..577f01f 100644
--- a/tmp/85bb1117-856e-4ccd-90e9-a2ce2ba32067_buggy.java
+++ b/tmp/53fd8390-1795-4e3d-8638-754f7461e894_fixed.java
@@ -1,58 +1,60 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
+    
+    // Handle the special case for weekyear, month, week
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
+        DurationField firstField = savedFields[0].iField.getDurationField();
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+        
+        // If the first field is between months and days (inclusive), adjust base year
+        if (compareReverse(firstField, months) >= 0 && compareReverse(firstField, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
-                e.prependMessage("Cannot parse \"" + text + '"');
+            e.prependMessage("Cannot parse \"" + text + "\"");
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
-                String message =
-                    "Illegal instant due to time zone offset transition (" + iZone + ')';
+            String message = "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
