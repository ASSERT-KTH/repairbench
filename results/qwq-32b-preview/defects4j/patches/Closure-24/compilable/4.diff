diff --git a/tmp/038fa930-8bda-417d-83ed-940df4649e24_buggy.java b/tmp/d9a1b182-ca05-4966-b1bd-021f0ff966a1_fixed.java
index 602226b..0a6d379 100644
--- a/tmp/038fa930-8bda-417d-83ed-940df4649e24_buggy.java
+++ b/tmp/d9a1b182-ca05-4966-b1bd-021f0ff966a1_fixed.java
@@ -1,26 +1,25 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
+      // Check if the variable is initialized with a qualified name
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
+        if (aliasVar != null) {
           aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+        }
+      } else {
+        // Report non-alias local variable
+        report(t, n, ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+      }
     } else {
       // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-        }
+      report(t, n, ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
