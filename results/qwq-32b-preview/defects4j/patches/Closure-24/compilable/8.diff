diff --git a/tmp/d14744a0-924a-4812-a052-a03048da35e3_buggy.java b/tmp/7771e67d-e4d3-43a1-b0ec-05d25f131912_fixed.java
index 602226b..320f52a 100644
--- a/tmp/d14744a0-924a-4812-a052-a03048da35e3_buggy.java
+++ b/tmp/7771e67d-e4d3-43a1-b0ec-05d25f131912_fixed.java
@@ -1,26 +1,22 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
+    if (n.getParent().isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
+        if (aliasVar != null) {
           aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+          // Handle the case where aliasVar is null
+          report(t, n, ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL, name);
+        }
+      } else {
+        report(t, n, ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
