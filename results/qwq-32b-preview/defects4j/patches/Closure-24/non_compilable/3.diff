diff --git a/tmp/41a8a846-eb44-41ec-ac5f-6379634ac410_buggy.java b/tmp/46ed6aa1-6103-40ea-b232-5cea5dbd4daa_fixed.java
index 602226b..f5acfa5 100644
--- a/tmp/41a8a846-eb44-41ec-ac5f-6379634ac410_buggy.java
+++ b/tmp/46ed6aa1-6103-40ea-b232-5cea5dbd4daa_fixed.java
@@ -1,26 +1,14 @@
-    private void findAliases(NodeTraversal t) {
-      Scope scope = t.getScope();
-      for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
+
 if (parent.isVar()) {
+
   if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
-          transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+    // handle alias
+
   } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-        }
-        }
+
+    // report error
+
   }
+
 }
