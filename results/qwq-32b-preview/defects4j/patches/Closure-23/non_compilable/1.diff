diff --git a/tmp/cc000888-efd9-47e0-9a35-8b3decf7dbfc_buggy.java b/tmp/eb8791c6-1efe-425c-90b9-a34e16692787_fixed.java
index cfdcd9c..d7ed586 100644
--- a/tmp/cc000888-efd9-47e0-9a35-8b3decf7dbfc_buggy.java
+++ b/tmp/eb8791c6-1efe-425c-90b9-a34e16692787_fixed.java
@@ -1,51 +1,66 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
         return n;
     }
 
     if (!right.isNumber()) {
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
+    if (!left.isARRAYLIT()) {
+        // Only fold array literals
+        return n;
+    }
+
+    JSDocInfo jsDoc = left.getJSDocInfo();
+    if (jsDoc != null && jsDoc.isConstant()) {
+        // Don't fold constants that are already optimized
+        return n;
+    }
+
     Node current = left.getFirstChild();
     Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
+    int i = 0;
+    while (current != null) {
+        if (i == intIndex) {
             elem = current;
-
+            break;
+        }
         current = current.getNext();
+        i++;
     }
 
     if (elem == null) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
     if (elem.isEmpty()) {
         elem = NodeUtil.newUndefinedNode(elem);
     } else {
         left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
