diff --git a/tmp/6786bba1-d8f9-4683-96e6-8d23c4fdb14d_buggy.java b/tmp/3e499093-0a5d-4c68-b1dc-685447ab755e_fixed.java
index 21f64c6..f86f0e6 100644
--- a/tmp/6786bba1-d8f9-4683-96e6-8d23c4fdb14d_buggy.java
+++ b/tmp/3e499093-0a5d-4c68-b1dc-685447ab755e_fixed.java
@@ -1,23 +1,24 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    if (seq.length() == 0) {
+        return pos; // or maybe 0, depending on requirements
+    }
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+    int seqLen = seq.length();
+    for (int offset = pos; offset <= length - seqLen; offset++) {
+        // scan to first instance of startChar:
+        if (input[offset] != startChar) {
+            continue;
+        }
+        // Check if the sequence matches starting at offset
+        int last = offset + seqLen - 1;
+        for (int i = 1; i < seqLen; i++) {
+            if (input[offset + i] != seq.charAt(i)) {
+                break;
+            }
+            if (i == seqLen - 1) {
                 return offset - pos;
             }
         }
+    }
     return -1;
 }
\ No newline at end of file
