diff --git a/tmp/1d6f1a64-6f4b-48ee-b947-367fbc485f55_buggy.java b/tmp/dc1815f9-e719-4e3a-8e58-8a4704ac62d9_fixed.java
index 21f64c6..f966d93 100644
--- a/tmp/1d6f1a64-6f4b-48ee-b947-367fbc485f55_buggy.java
+++ b/tmp/dc1815f9-e719-4e3a-8e58-8a4704ac62d9_fixed.java
@@ -1,23 +1,44 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
+
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+
+    if (seq.length() == 0)
+
+        return pos; // or 0, depending on requirements
+
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+
+    int seqLen = seq.length();
+
+    int end = length - seqLen + 1;
+
+    for (int i = pos; i < end; i++) {
+
+        if (input[i] == startChar) {
+
+            boolean match = true;
+
+            for (int j = 1; j < seqLen; j++) {
+
+                if (input[i + j] != seq.charAt(j)) {
+
+                    match = false;
+
+                    break;
+
                 }
+
             }
+
+            if (match) {
+
+                return i - pos;
+
+            }
+
+        }
+
+    }
+
     return -1;
+
 }
