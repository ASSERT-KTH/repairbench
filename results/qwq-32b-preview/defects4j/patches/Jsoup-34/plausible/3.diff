diff --git a/tmp/ed1c3eba-160a-4bc2-a4cb-31be258df195_buggy.java b/tmp/0024cd0a-71f6-4283-8e9e-6b0f9c4f57ce_fixed.java
index 21f64c6..2ee6b31 100644
--- a/tmp/ed1c3eba-160a-4bc2-a4cb-31be258df195_buggy.java
+++ b/tmp/0024cd0a-71f6-4283-8e9e-6b0f9c4f57ce_fixed.java
@@ -1,23 +1,35 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+    int seqLen = seq.length(); // Cache sequence length for performance
+    for (int offset = pos; offset < length; ) {
+        // Scan to the first instance of startChar:
+        if (startChar != input[offset]) {
             while (++offset < length && startChar != input[offset]);
+        }
+        // Check if there are enough characters left for the sequence
+        if (offset + seqLen > length) {
+            break; // Not enough characters left, exit loop
+        }
+        // Check if the sequence matches starting at offset
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int j = 1;
+        int last = i + seqLen - 1;
+        for (; i < last && j < seqLen; i++, j++) {
+            if (seq.charAt(j) != input[i]) {
+                break;
+            }
+        }
+        if (i == last) { // Found the full sequence
             return offset - pos;
         }
+        offset++; // Move past the current starting character
     }
     return -1;
 }
\ No newline at end of file
