diff --git a/tmp/8ad0fb87-9e5c-48f4-960c-33d830bf34a1_buggy.java b/tmp/8f5fa426-433b-4431-bac8-f16f0c90b4fd_fixed.java
index 21f64c6..9193a52 100644
--- a/tmp/8ad0fb87-9e5c-48f4-960c-33d830bf34a1_buggy.java
+++ b/tmp/8f5fa426-433b-4431-bac8-f16f0c90b4fd_fixed.java
@@ -1,23 +1,47 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    if (seq.length() == 0) {
+        return 0; // or handle as needed, depending on requirements
+    }
+
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+    int targetLen = seq.length();
+
+    for (int offset = pos; offset <= length - targetLen; offset++) {
+        // Find the first occurrence of the start character
+        while (offset < length && input[offset] != startChar) {
+            offset++;
+        }
+
+        if (offset >= length) {
+            return -1; // Start character not found
+        }
+
+        // Check if the remaining input is long enough to contain the sequence
+        if (length - offset < targetLen) {
+            return -1;
+        }
+
+        // Check if the sequence matches starting from this offset
+        int i = 0;
+        for (i = 0; i < targetLen; i++) {
+            if (input[offset + i] != seq.charAt(i)) {
+                break;
+            }
+        }
+
+        if (i == targetLen) {
             return offset - pos;
         }
+
+        // Sequence not found, move to the next character
+        offset++;
     }
+
     return -1;
 }
\ No newline at end of file
