diff --git a/tmp/1313a1d3-f1fb-4230-a148-c5975c2a8f6e_buggy.java b/tmp/1f26995f-9805-49ac-9695-40d75d5a13f0_fixed.java
index 21f64c6..f91c9c5 100644
--- a/tmp/1313a1d3-f1fb-4230-a148-c5975c2a8f6e_buggy.java
+++ b/tmp/1f26995f-9805-49ac-9695-40d75d5a13f0_fixed.java
@@ -1,23 +1,24 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
-    int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
         if (startChar != input[offset])
             while(++offset < length && startChar != input[offset]);
         int i = offset + 1;
         int last = i + seq.length()-1;
         if (offset < length) {
             for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
             if (i == last) // found full sequence
                 return offset - pos;
         }
     }
-        return -1;
-    }
+    ```
+    - The outer loop iterates from `pos` to `length - 1`.
+    - If the current character does not match `startChar`, it skips to the next occurrence of `startChar`.
+    - Then, it checks if the substring starting from `offset + 1` matches the rest of the sequence.
+
+2. **Potential Issues**:
+    - The inner `while` loop increments `offset` beyond `length` without checking.
+    - The calculation of `last` might exceed `length`.
+    - The inner `for` loop might access indices beyond `length`.
+
+### Solution
+
+To fix these issues, we need to ensure that all index accesses are within the bounds of the array. Here's the revised version of the method:
