diff --git a/tmp/3eda0fa8-51b4-4782-bbfc-61661f99bddd_buggy.java b/tmp/b1f53cb8-ef43-4800-aa50-505bbbc6acf2_fixed.java
index 21f64c6..f9c7a53 100644
--- a/tmp/3eda0fa8-51b4-4782-bbfc-61661f99bddd_buggy.java
+++ b/tmp/b1f53cb8-ef43-4800-aa50-505bbbc6acf2_fixed.java
@@ -1,23 +1,38 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    if (seq.length() == 0) {
+        return 0; // or handle as needed
+    }
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    int seqLen = seq.length();
+    for (int offset = pos; offset <= length - seqLen; offset++) {
+        // scan to first instance of startChar:
+        while (offset < length && startChar != input[offset]) {
+            offset++;
+        }
+        if (offset >= length) {
+            break;
+        }
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int j = 1;
+        while (i < offset + seqLen && j < seqLen) {
+            if (seq.charAt(j) != input[i]) {
+                break;
+            }
+            i++;
+            j++;
+        }
+        if (j == seqLen) {
+            // found full sequence
             return offset - pos;
         }
+        offset += j; // skip the partially matched part
     }
     return -1;
 }
\ No newline at end of file
