diff --git a/tmp/3e8ece3e-7655-4d66-9a8f-ed1d62bc60f3_buggy.java b/tmp/62a13747-38d5-4561-bed9-90c7ff619df4_fixed.java
index d907b39..e977289 100644
--- a/tmp/3e8ece3e-7655-4d66-9a8f-ed1d62bc60f3_buggy.java
+++ b/tmp/62a13747-38d5-4561-bed9-90c7ff619df4_fixed.java
@@ -1,56 +1,65 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
     if (inf.finished() || current == null) {
         return -1;
     }
 
-        // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
+    // Validate buffer parameters
+    if (start < 0 || length < 0 || start + length > buffer.length || start + length < 0) {
+        throw new IndexOutOfBoundsException();
+    }
+
     if (current.getMethod() == ZipArchiveOutputStream.STORED) {
         int csize = (int) current.getSize();
         if (readBytesOfEntry >= csize) {
             return -1;
         }
+
         if (offsetInBuffer >= lengthOfLastRead) {
             offsetInBuffer = 0;
-                    if ((lengthOfLastRead = in.read(buf)) == -1) {
+            lengthOfLastRead = in.read(buf);
+            if (lengthOfLastRead == -1) {
                 return -1;
             }
             count(lengthOfLastRead);
             bytesReadFromStream += lengthOfLastRead;
         }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
-                if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
+
+        int toRead = Math.min(length, lengthOfLastRead - offsetInBuffer);
+        toRead = Math.min(toRead, csize - readBytesOfEntry);
+
+        if (toRead <= 0) {
+            throw new IOException("Truncated ZIP file");
         }
+
         System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
         offsetInBuffer += toRead;
         readBytesOfEntry += toRead;
         crc.update(buffer, start, toRead);
         return toRead;
-            }
+    } else {
         if (inf.needsInput()) {
             fill();
             if (lengthOfLastRead > 0) {
                 bytesReadFromStream += lengthOfLastRead;
             }
         }
         int read = 0;
         try {
             read = inf.inflate(buffer, start, length);
         } catch (DataFormatException e) {
             throw new ZipException(e.getMessage());
         }
         if (read == 0 && inf.finished()) {
             return -1;
         }
+        if (read < 0) {
+            throw new IOException("Truncated ZIP file");
+        }
         crc.update(buffer, start, read);
+        readBytesOfEntry += read;
         return read;
     }
-        throw new ArrayIndexOutOfBoundsException();
 }
\ No newline at end of file
