diff --git a/tmp/89e470a5-e269-4dc9-be1f-ede9bba1de93_buggy.java b/tmp/a071559c-55b2-437b-804c-37aaf903ad70_fixed.java
index 3075782..41e824c 100644
--- a/tmp/89e470a5-e269-4dc9-be1f-ede9bba1de93_buggy.java
+++ b/tmp/a071559c-55b2-437b-804c-37aaf903ad70_fixed.java
@@ -1,82 +1,74 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
-  private CanInlineResult canInlineReferenceDirectly(
-      Node callNode, Node fnNode) {
+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
   boolean hasSideEffects = false;
   if (block.hasChildren()) {
     Preconditions.checkState(block.hasOneChild());
     Node stmt = block.getFirstChild();
     if (stmt.isReturn()) {
       hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
     }
   }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
-    Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
+  // Handle call and apply methods specially
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
-        if (cArg == null || !cArg.isThis()) {
+      Node cArg = callNode.getFirstChild().getNext();
+      if (cArg != null && cArg.isThis()) {
+        cArg = cArg.getNext();
+      } else {
         return CanInlineResult.NO;
       }
-        cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
+  } else {
+    cArg = callNode.getFirstChild().getNext();
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+  // Get function parameters
+  Node fnParams = NodeUtil.getFunctionParameters(fnNode);
+  Node fnParam = fnParams.getFirstChild();
+  Node cArgTemp = cArg;
+
+  // Check each argument
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
         if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
           return CanInlineResult.NO;
         }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+          return CanInlineResult.NO;
+        }
+      } else {
+        // No corresponding argument for this parameter
+        // Check if parameter has a default value
+        if (!fnParam.hasChildren()) {
           return CanInlineResult.NO;
         }
       }
-
-        // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
+  // Check for rest parameters
+  if (NodeUtil.hasRestParameters(fnParams)) {
+    // Additional logic for rest parameters if needed
+  }
+
   return CanInlineResult.YES;
 }
\ No newline at end of file
