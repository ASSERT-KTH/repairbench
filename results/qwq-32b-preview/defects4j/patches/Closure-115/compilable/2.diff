diff --git a/tmp/eda47417-cd3e-4a09-b82a-b226a7912af6_buggy.java b/tmp/93b2cb5c-4e3e-4360-b642-bf8a149e11b6_fixed.java
index 3075782..4b2617b 100644
--- a/tmp/eda47417-cd3e-4a09-b82a-b226a7912af6_buggy.java
+++ b/tmp/93b2cb5c-4e3e-4360-b642-bf8a149e11b6_fixed.java
@@ -1,82 +1,71 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
-  private CanInlineResult canInlineReferenceDirectly(
-      Node callNode, Node fnNode) {
+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
   boolean hasSideEffects = false;
   if (block.hasChildren()) {
     Preconditions.checkState(block.hasOneChild());
     Node stmt = block.getFirstChild();
     if (stmt.isReturn()) {
       hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
     }
   }
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
-    Node cArg = callNode.getFirstChild().getNext();
 
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
-    if (!callNode.getFirstChild().isName()) {
+  // Handle call and apply methods differently
   if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
-        if (cArg == null || !cArg.isThis()) {
+    // Skip the first argument if it's 'this'
+    Node cArg = callNode.getFirstChild().getNext();
+    if (cArg != null && cArg.isThis()) {
+      cArg = cArg.getNext();
+    }
+    // Function parameters start from the second argument
+    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild().getNext();
+    while (cArg != null && fnParam != null) {
+      if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
+        return CanInlineResult.NO;
+      }
+      if (NodeUtil.mayEffectMutableState(cArg, compiler) &&
+          NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
+      fnParam = fnParam.getNext();
+    }
+    // Check for extra arguments or parameters
+    if (cArg != null || fnParam != null) {
+      return CanInlineResult.NO;
+    }
+  } else if (NodeUtil.isFunctionObjectApply(callNode)) {
+    // Handle apply separately if needed
+    return CanInlineResult.NO; // For simplicity, disallow inlining for 'apply'
   } else {
-        // ".apply" call should be filtered before this.
-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
-      }
-    }
-
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+    // Regular function call
+    Node cArg = callNode.getFirstChild().getNext();
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
             return CanInlineResult.NO;
           }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+          if (NodeUtil.mayEffectMutableState(cArg, compiler) &&
+              NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
-
-        // Move to the next name.
         fnParam = fnParam.getNext();
       }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
+  }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
