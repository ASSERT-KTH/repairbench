diff --git a/tmp/69ed5447-13e0-4e4c-8daf-1c7feaec521d_buggy.java b/tmp/759dbd47-bbbe-41e3-a905-c8f3e8d0bb32_fixed.java
index 10da689..227f288 100644
--- a/tmp/69ed5447-13e0-4e4c-8daf-1c7feaec521d_buggy.java
+++ b/tmp/759dbd47-bbbe-41e3-a905-c8f3e8d0bb32_fixed.java
@@ -1,7 +1,37 @@
 /** Multiply this by a single digit x.
  * @param x multiplicand
  * @return product of this and x
  */
 public Dfp multiply(final int x) {
-            return multiplyFast(x);
+    if (x == 0) {
+        // Multiplying by zero results in zero with the sign based on the current object's sign.
+        return zeroWithSign(this.sign);
+    } else if (x == 1) {
+        // Multiplying by one results in the original number.
+        return this.copy();
+    } else if (x == -1) {
+        // Multiplying by negative one results in the negation of the original number.
+        return this.negate();
+    } else if (x < 0) {
+        // For negative integers other than -1, multiply the absolute value and negate the result.
+        return this.multiply(Math.abs(x)).negate();
+    } else {
+        // For positive integers, perform the multiplication.
+        Dfp result = this.copy();
+        for (int i = 1; i < x; i++) {
+            result = result.add(this);
+            if (result.isInfinite()) {
+                // If the result is infinite, set the overflow flag.
+                field.setOverflowFlag();
+                break;
+            }
+        }
+        return result;
+    }
+}
+
+private Dfp zeroWithSign(int sign) {
+    Dfp zero = field.newDfp(0);
+    zero.sign = sign;
+    return zero;
 }
\ No newline at end of file
