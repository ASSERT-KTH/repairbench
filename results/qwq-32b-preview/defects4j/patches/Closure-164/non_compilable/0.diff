diff --git a/tmp/ce67dcfb-cab8-43a8-b2ae-89e0897db65a_buggy.java b/tmp/6c6691fa-e345-4bb4-afcd-8f4ae6cebf63_fixed.java
index 9976e43..d0eaa4c 100644
--- a/tmp/ce67dcfb-cab8-43a8-b2ae-89e0897db65a_buggy.java
+++ b/tmp/6c6691fa-e345-4bb4-afcd-8f4ae6cebf63_fixed.java
@@ -1,76 +1,59 @@
 @Override
 public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
         return false;
     }
 
     ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
         return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+    // If this.paramType[i] is required, then that.paramType[i] is required.
+
+    // We need to ensure that 'that' can accept all arguments that 'this' can.
+    // So, 'that' should have at least as many parameters as 'this',
+    // and each parameter in 'that' should be contravariant to the corresponding
+    // parameter in 'this'.
+
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
-          return false;
-        }
-      }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
+    while (thisParam != null || thatParam != null) {
+        JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;
+        JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+        // If 'this' has a parameter but 'that' doesn't, it's not a subtype.
+        if (thisParamType != null && thatParamType == null) {
+            return false;
+        }
 
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
+        // If 'that' has a parameter but 'this' doesn't, it's only acceptable
+        // if 'that's parameter is optional.
+        if (thisParamType == null && thatParamType != null) {
+            // Check if 'that's parameter is optional.
+            // Assuming that optional parameters are indicated by some flag,
+            // e.g., thatParam.isOptional().
+            if (!thatParam.isOptional()) {
+                return false;
             }
-      if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
         }
 
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+        // If both have parameters, perform contravariance check.
+        if (thisParamType != null && thatParamType != null) {
+            if (!thatParamType.isSubtype(thisParamType)) {
+                return false;
             }
         }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+        // Advance to the next parameters.
+        // Assuming that varargs are handled appropriately.
+        thisParam = thisParam != null ? thisParam.getNext() : null;
+        thatParam = thatParam != null ? thatParam.getNext() : null;
+    }
 
     return true;
 }
\ No newline at end of file
