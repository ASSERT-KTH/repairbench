diff --git a/tmp/49755f23-734d-4574-973c-492215bfca3e_buggy.java b/tmp/88d88cf2-bf06-4c03-bdde-4b6915c58714_fixed.java
index 9976e43..b7beebb 100644
--- a/tmp/49755f23-734d-4574-973c-492215bfca3e_buggy.java
+++ b/tmp/88d88cf2-bf06-4c03-bdde-4b6915c58714_fixed.java
@@ -1,76 +1,78 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
   // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+  // that's parameters must be subtypes of this's parameters
+
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
+
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+
+    if (thisParamType != null && thatParamType != null) {
+      if (!thisParamType.isSubtype(thatParamType)) {
         return false;
       }
+    } else if (thisParamType != null || thatParamType != null) {
+      // One is null, the other isn't; not compatible
+      return false;
     }
 
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+    // If both are varargs, we can stop here
+    if (thisIsVarArgs && thatIsVarArgs) {
+      thisParam = null;
+      thatParam = null;
+    } else {
+      // Only advance if not varargs
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
       }
       if (!thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
-
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // If "that" has more parameters that are all optional, it's still a supertype
+  // But in our current implementation, we consider that "that" cannot be a supertype
+  // if it's missing a required argument.
+
+  // However, to fix the issue, we need to ensure that "this" does not have more required parameters
+  // than "that". If "that" has fewer parameters, and they are all required, it's not a supertype.
+
+  // For now, we'll assume that if "thatParam" is null before "thisParam",
+  // then "that" has fewer parameters, which might not be acceptable.
+
+  // To handle this correctly, we need to ensure that any additional parameters in "this"
+  // are optional, but since we don't have explicit information about optionality,
+  // we'll assume that if "that" runs out of parameters first, and "this" has more,
+  // then "that" cannot be a supertype unless those extra parameters in "this" are optional.
+
+  // Given the complexity, for this fix, we'll simplify and say that the parameter lists
+  // must be equal in length or "that" must have varargs to accept more parameters.
+
+  // So, if "thisParam" is not null after the loop, and "that" doesn't have varargs, return false.
+
+  if (thisParam != null && !that.hasVarargs()) {
+    return false;
+  }
+
+  // Similarly, if "thatParam" is not null, but "this" has varargs, it can accept more parameters.
 
   return true;
 }
\ No newline at end of file
