diff --git a/tmp/480e7225-c02d-4d5d-b53b-7d441a7be83e_buggy.java b/tmp/9ea12dd8-69b1-47ec-acf7-8ad7c8f02a9d_fixed.java
index 9976e43..89810c6 100644
--- a/tmp/480e7225-c02d-4d5d-b53b-7d441a7be83e_buggy.java
+++ b/tmp/9ea12dd8-69b1-47ec-acf7-8ad7c8f02a9d_fixed.java
@@ -1,76 +1,74 @@
 @Override
 public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
         return false;
     }
 
     ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
         return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+    // If this.paramType[i] is required, then that.paramType[i] is required.
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
     while (thisParam != null && thatParam != null) {
         JSType thisParamType = thisParam.getJSType();
         JSType thatParamType = thatParam.getJSType();
         if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+            if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
                 return false;
             }
         }
 
         boolean thisIsVarArgs = thisParam.isVarArgs();
         boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+        // If both are var_args, consider them as matching
+        if (thisIsVarArgs && thatIsVarArgs) {
+            break;
+        }
 
-      // don't advance if we have variable arguments
+        // If only 'this' is var_args, check if 'that' parameters are covered
+        if (thisIsVarArgs) {
+            // 'this' can accept more arguments, so 'that' must have fewer or equal parameters
+            Node tempThisParam = thisParam.getNext();
+            while (tempThisParam != null && !tempThisParam.isVarArgs()) {
+                tempThisParam = tempThisParam.getNext();
+            }
+            if (tempThisParam == null) {
+                // 'this' has no more required parameters after thisParam
+                break;
+            }
+        } else if (thatIsVarArgs) {
+            // 'that' has var_args, which can accept more arguments
+            // So, 'this' must have fewer or equal parameters
+            Node tempThatParam = thatParam.getNext();
+            while (tempThatParam != null && !tempThatParam.isVarArgs()) {
+                tempThatParam = tempThatParam.getNext();
+            }
+            if (tempThatParam == null) {
+                // 'that' has no more required parameters after thatParam
+                return false;
+            }
+        }
+
+        // Move to the next parameters
         if (!thisIsVarArgs) {
             thisParam = thisParam.getNext();
         }
         if (!thatIsVarArgs) {
             thatParam = thatParam.getNext();
         }
-
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
-      }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+    // Ensure that 'this' does not have more required parameters than 'that'
+    if (thisParam != null && !thisParam.isVarArgs()) {
+        return false;
+    }
 
     return true;
 }
\ No newline at end of file
