diff --git a/tmp/f25eb3eb-557b-4548-b01b-a6d69688b203_buggy.java b/tmp/3c030f53-66b6-4609-a74f-4fcdc7d6c61a_fixed.java
index e69de29..dbeebf1 100644
--- a/tmp/f25eb3eb-557b-4548-b01b-a6d69688b203_buggy.java
+++ b/tmp/3c030f53-66b6-4609-a74f-4fcdc7d6c61a_fixed.java
@@ -0,0 +1,52 @@
+public void testFieldNameQuotingEnabled() throws IOException {
+    // for [core#246]
+    // First, test with default factory, with quoting enabled by default
+
+    // First, default, with quotes
+    _testFieldNameQuotingEnabled(JSON_F, true, true, "{\"foo\":1}");
+    _testFieldNameQuotingEnabled(JSON_F, false, true, "{\"foo\":1}");
+
+    // then without quotes
+    _testFieldNameQuotingEnabled(JSON_F, true, false, "{foo:1}");
+    _testFieldNameQuotingEnabled(JSON_F, false, false, "{foo:1}");
+
+    // Then with alternatively configured factory
+
+    JsonFactory JF2 = new JsonFactory();
+    JF2.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+
+    _testFieldNameQuotingEnabled(JF2, true, true, "{\"foo\":1}");
+    _testFieldNameQuotingEnabled(JF2, false, true, "{\"foo\":1}");
+
+    // then without quotes
+    _testFieldNameQuotingEnabled(JF2, true, false, "{foo:1}");
+    _testFieldNameQuotingEnabled(JF2, false, false, "{foo:1}");
+}
+
+private void _testFieldNameQuotingEnabled(JsonFactory jf, boolean useBrowser, boolean quoteNames, String expected) throws IOException {
+    // Add debug statements to print expected and actual strings
+    System.out.println("Expected: " + expected);
+
+    // Assuming gen is the JsonGenerator being used
+    JsonGenerator gen = jf.createGenerator(...);
+    try {
+        if (useBrowser) {
+            // Configure generator for browser encoding if needed
+        }
+        if (quoteNames) {
+            gen.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, true);
+        } else {
+            gen.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, false);
+        }
+        // Generate JSON content
+        gen.writeStartObject();
+        gen.writeNumberField("foo", 1);
+        gen.writeEndObject();
+        // Collect generated JSON string
+        String actual = // method to collect the generated JSON string
+        System.out.println("Actual: " + actual);
+        assertEquals(expected, actual);
+    } finally {
+        gen.close();
+    }
+}
\ No newline at end of file
