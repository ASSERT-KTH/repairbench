diff --git a/tmp/2af4b7b5-79bc-484f-8279-00eeafb6c3e8_buggy.java b/tmp/898d33cc-8126-4044-a819-c98397c20227_fixed.java
index e69de29..d3aab05 100644
--- a/tmp/2af4b7b5-79bc-484f-8279-00eeafb6c3e8_buggy.java
+++ b/tmp/898d33cc-8126-4044-a819-c98397c20227_fixed.java
@@ -0,0 +1,70 @@
+import java.io.File;
+import java.io.IOException;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.util.jar.JarFile;
+import java.util.jar.Manifest;
+
+public class OptionProcessor {
+
+    protected static final String OPTION_NAME = "option_name";
+
+    public static void processOptions(String[] args) throws Exception {
+        if (args == null || (args.length < 2)) {
+            System.out.println("Usage: java " + OPTION_NAME + " -jar path/to/your.jar [option-1] [option-2] ...");
+            System.exit(1);
+        }
+
+        String[] options = new String[args.length - 1];
+        System.arraycopy(args, 1, options, 0, args.length - 1);
+
+        // Load the JAR file
+        File jarFile = new File(args[0]);
+        if (!jarFile.exists()) {
+            System.out.println("JAR file not found: " + args[0]);
+            System.exit(1);
+        }
+
+        // Get the manifest from the JAR file
+        try (JarFile jar = new JarFile(jarFile)) {
+            Manifest mf = jar.getManifest();
+            String mainClassname = mf.getMainAttributes().getValue("Main-Class");
+
+            if (mainClassname == null) {
+                System.out.println("Manifest does not contain Main-Class attribute.");
+                System.exit(1);
+            }
+
+            // Create a URLClassLoader for the JAR file
+            URL url = jarFile.toURI().toURL();
+            URLClassLoader cl = URLClassLoader.newInstance(new URL[]{url});
+
+            try {
+                // Load the main class
+                Class<?> mainClass = cl.loadClass(mainClassname);
+
+                // Check if the main method exists
+                mainClass.getMethod("main", String[].class);
+
+                // Invoke the main method with options
+                mainClass.getMethod("main", String[].class).invoke(null, (Object) options);
+            } catch (Exception ex) {
+                System.err.println("Error invoking main method: " + ex.getMessage());
+                ex.printStackTrace();
+                System.exit(1);
+            } finally {
+                cl.close();
+            }
+        }
+    }
+
+    public static void main(String[] args) {
+        try {
+            processOptions(args);
+        } catch (Exception e) {
+            System.err.println("An error occurred: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+}
\ No newline at end of file
