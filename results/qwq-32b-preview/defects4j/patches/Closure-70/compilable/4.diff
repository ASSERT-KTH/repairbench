diff --git a/tmp/a27340eb-19af-4e11-8f88-973875e3f23d_buggy.java b/tmp/49df603e-6ddf-4ea6-bf05-e598362191b7_fixed.java
index 1530b34..379475c 100644
--- a/tmp/a27340eb-19af-4e11-8f88-973875e3f23d_buggy.java
+++ b/tmp/49df603e-6ddf-4ea6-bf05-e598362191b7_fixed.java
@@ -1,23 +1,30 @@
-    /**
-     * Declares all of a function's arguments.
-     */
 private void declareArguments(Node functionNode) {
   Node astParameters = functionNode.getFirstChild().getNext();
   Node body = astParameters.getNext();
   FunctionType functionType = (FunctionType) functionNode.getJSType();
   if (functionType != null) {
     Node jsDocParameters = functionType.getParametersNode();
     if (jsDocParameters != null) {
       Node jsDocParameter = jsDocParameters.getFirstChild();
       for (Node astParameter : astParameters.children()) {
+        JSType parameterType = null;
         if (jsDocParameter != null) {
-              defineSlot(astParameter, functionNode,
-                  jsDocParameter.getJSType(), true);
+          parameterType = jsDocParameter.getJSType();
           jsDocParameter = jsDocParameter.getNext();
+        }
+        // Define the parameter in the local scope with the appropriate type and mark as readOnly
+        defineSlot(astParameter, functionNode, parameterType, true);
+      }
     } else {
-              defineSlot(astParameter, functionNode, null, true);
+      for (Node astParameter : astParameters.children()) {
+        // If no JSDoc parameters, use the inferred type
+        defineSlot(astParameter, functionNode, astParameter.getJSType(), true);
       }
     }
+  } else {
+    for (Node astParameter : astParameters.children()) {
+      // If no function type, use the inferred type
+      defineSlot(astParameter, functionNode, astParameter.getJSType(), true);
+    }
   }
 }
\ No newline at end of file
-    } // end declareArguments
