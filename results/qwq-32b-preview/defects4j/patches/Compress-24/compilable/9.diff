diff --git a/tmp/c9199d4e-affa-45ac-9069-8f3680436447_buggy.java b/tmp/fc164151-d53c-43fd-9cbe-753c01ba5f1e_fixed.java
index d9d2789..c092dac 100644
--- a/tmp/c9199d4e-affa-45ac-9069-8f3680436447_buggy.java
+++ b/tmp/fc164151-d53c-43fd-9cbe-753c01ba5f1e_fixed.java
@@ -1,73 +1,61 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+    // Ensure there's at least one digit to parse
+    if (start >= end - 1) {
+        throw new IllegalArgumentException("No digits to parse");
     }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+
+    // Determine the end position by finding the first non-digit character from the end
+    int parseEnd = end - 1;
+    byte trailer = buffer[parseEnd];
+    while (parseEnd >= start && (trailer == ' ' || trailer == 0)) {
+        parseEnd--;
+        if (parseEnd < start) {
+            break;
+        }
+        trailer = buffer[parseEnd];
     }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+    // Now parse the octal digits from start to parseEnd + 1
+    for (int i = start; i <= parseEnd; i++) {
+        final byte currentByte = buffer[i];
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // Check if there's a trailing space or NUL after the digits
+    if (parseEnd + 1 < end) {
+        trailer = buffer[parseEnd + 1];
+        if (trailer != ' ' && trailer != 0) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, parseEnd + 1, trailer));
+        }
+    } else {
+        throw new IllegalArgumentException("Missing trailing space or NUL");
     }
 
     return result;
 }
\ No newline at end of file
