diff --git a/tmp/e04fb36f-ac6b-471f-9df9-81d94ba1504a_buggy.java b/tmp/84a7ce57-cae0-4908-880d-37e9fef9aa8a_fixed.java
index 5f96616..c584559 100644
--- a/tmp/e04fb36f-ac6b-471f-9df9-81d94ba1504a_buggy.java
+++ b/tmp/84a7ce57-cae0-4908-880d-37e9fef9aa8a_fixed.java
@@ -1,20 +1,20 @@
 @Override
 public void matchConstraint(JSType constraint) {
-    // We only want to match constraints on anonymous types.
+  // Only process anonymous types
   if (hasReferenceName()) {
     return;
   }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+  // If the constraint is a union type, iterate over its constituents
+  if (constraint.isUnionType()) {
+    for (JSType constituent : constraint.getUnionTypes()) {
+      if (constituent.isRecordType()) {
+        matchRecordTypeConstraint(constituent.toObjectType());
+      }
+    }
+  }
+  // If the constraint is a record type, handle it directly
+  else if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
