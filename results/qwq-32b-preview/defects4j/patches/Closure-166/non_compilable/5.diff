diff --git a/tmp/a7c6d958-361f-491c-8cf0-35f9b83ccf09_buggy.java b/tmp/6b7a8a61-86f0-4820-a373-31cecd07cd76_fixed.java
index 5f96616..74e3eda 100644
--- a/tmp/a7c6d958-361f-491c-8cf0-35f9b83ccf09_buggy.java
+++ b/tmp/6b7a8a61-86f0-4820-a373-31cecd07cd76_fixed.java
@@ -1,20 +1,9 @@
-  @Override
-  public void matchConstraint(JSType constraint) {
-    // We only want to match constraints on anonymous types.
-    if (hasReferenceName()) {
-      return;
-    }
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
-    }
+public void testRecordInference() {
+  inFunction(
+      "/** @param {{a: (boolean|undefined)}|{b: (string|undefined)}} x */" +
+      "function f(x) {}" +
+      "var out = {};" +
+      "f(out);");
+  assertEquals("{a: (boolean|undefined), b: (string|undefined)}",
+      getType("out").toString());
 }
\ No newline at end of file
