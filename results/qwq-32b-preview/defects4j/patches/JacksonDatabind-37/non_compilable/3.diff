diff --git a/tmp/d825d9ff-07f2-47ba-9ac1-56b7451a0554_buggy.java b/tmp/84a638a8-514a-4385-b68e-adb6f72edb54_fixed.java
index e5ad041..7dadccf 100644
--- a/tmp/d825d9ff-07f2-47ba-9ac1-56b7451a0554_buggy.java
+++ b/tmp/84a638a8-514a-4385-b68e-adb6f72edb54_fixed.java
@@ -1,19 +1,26 @@
 @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
+    // Ensure that subclass is indeed a subclass of _class
     if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+        throw new IllegalArgumentException("Class " + subclass.getName() + " not sub-type of " + _class.getName());
     }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+    // Create a new SimpleType instance with updated class and bindings
+    // Assuming _bindings need to be adjusted for the subclass
+    JavaType[] parametized = _bindings.getparametized();
+    JavaType[] newParametized = new JavaType[parametized.length];
+    for (int i = 0; i < parametized.length; i++) {
+        newParametized[i] = parametized[i]._narrow(parametized[i].getRawClass());
+    }
+    TypeBindings newBindings = TypeBindings.create(subclass, newParametized);
+    // Recursively narrow super class and super interfaces if necessary
+    JavaType newSuperClass = (_superClass == null) ? null : _superClass.narrowBy(subclass.getSuperclass());
+    JavaType[] newSuperInterfaces = new JavaType[_superInterfaces.length];
+    for (int i = 0; i < _superInterfaces.length; i++) {
+        newSuperInterfaces[i] = _superInterfaces[i].narrowBy(subclass.getInterfaces()[i]);
+    }
+    return new SimpleType(subclass, newBindings, newSuperClass, newSuperInterfaces,
             _valueHandler, _typeHandler, _asStatic);
 }
\ No newline at end of file
