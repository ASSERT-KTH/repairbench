diff --git a/tmp/227b22db-a371-4a78-8318-681bf4a364ff_buggy.java b/tmp/95bab4e4-a5c4-48ce-86b1-0463ce30662a_fixed.java
index e5ad041..ebbd43a 100644
--- a/tmp/227b22db-a371-4a78-8318-681bf4a364ff_buggy.java
+++ b/tmp/95bab4e4-a5c4-48ce-86b1-0463ce30662a_fixed.java
@@ -1,19 +1,18 @@
 @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
+    // Ensure that subclass is indeed a subclass (or the same as) _class
     if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+        throw new IllegalArgumentException("Class " + subclass.getName() + " not subtype of " + _class.getName());
     }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+    // Re-resolve type bindings based on the subclass
+    TypeBindings bindings = _bindings.narrow(subclass);
+    // Determine super class and interfaces for the subclass
+    JavaType superClass = _resolver.resolveSuperClass(subclass);
+    JavaType[] superInterfaces = _resolver.resolveSuperInterfaces(subclass);
+    // Create a new SimpleType with the updated information
+    return new SimpleType(subclass, bindings, superClass, superInterfaces,
             _valueHandler, _typeHandler, _asStatic);
 }
\ No newline at end of file
