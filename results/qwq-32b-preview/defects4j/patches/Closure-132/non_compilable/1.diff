diff --git a/tmp/1131bef2-c724-4a59-b7bb-12860ab84216_buggy.java b/tmp/517ea187-dfea-42d3-9de6-b2264f10d9d3_fixed.java
index e4fca3c..74244fb 100644
--- a/tmp/1131bef2-c724-4a59-b7bb-12860ab84216_buggy.java
+++ b/tmp/517ea187-dfea-42d3-9de6-b2264f10d9d3_fixed.java
@@ -1,239 +1,102 @@
-  /**
-   * Try turning IF nodes into smaller HOOKs
-   *
-   * Returns the replacement for n or the original if no replacement was
-   * necessary.
-   */
-  private Node tryMinimizeIf(Node n) {
-
-    Node parent = n.getParent();
-
-    Node cond = n.getFirstChild();
-
-    /* If the condition is a literal, we'll let other
-     * optimizations try to remove useless code.
-     */
-    if (NodeUtil.isLiteralValue(cond, true)) {
-      return n;
-    }
 
-    Node thenBranch = cond.getNext();
-    Node elseBranch = thenBranch.getNext();
-
-    if (elseBranch == null) {
-      if (isFoldableExpressBlock(thenBranch)) {
-        Node expr = getBlockExpression(thenBranch);
-        if (!late && isPropertyAssignmentInExpression(expr)) {
-          // Keep opportunities for CollapseProperties such as
-          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
-          // until CollapseProperties has been run.
-          return n;
-        }
+   if (x[--y] === 1) {
 
-        if (cond.isNot()) {
-          // if(!x)bar(); -> x||bar();
-          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
-              isLowerPrecedenceInExpression(expr.getFirstChild(),
-                  OR_PRECEDENCE)) {
-            // It's not okay to add two sets of parentheses.
-            return n;
-          }
+       x[y] = 0;
 
-          Node or = IR.or(
-              cond.removeFirstChild(),
-              expr.removeFirstChild()).srcref(n);
-          Node newExpr = NodeUtil.newExpr(or);
-          parent.replaceChild(n, newExpr);
-          reportCodeChange();
+   } else {
 
-          return newExpr;
-        }
+       x[y] = 1;
 
-        // if(x)foo(); -> x&&foo();
-        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
-            isLowerPrecedenceInExpression(expr.getFirstChild(),
-                AND_PRECEDENCE)) {
-          // One additional set of parentheses is worth the change even if
-          // there is no immediate code size win. However, two extra pair of
-          // {}, we would have to think twice. (unless we know for sure the
-          // we can further optimize its parent.
-          return n;
    }
 
-        n.removeChild(cond);
-        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
-        Node newExpr = NodeUtil.newExpr(and);
-        parent.replaceChild(n, newExpr);
-        reportCodeChange();
+   ```
+
+   Expected transformation:
+
+   ```javascript
+
+   (x[--y] === 1) ? x[y] = 0 : x[y] = 1;
+
+   ```
+
+   This seems straightforward, but there might be an issue with handling the side effects of `--y` in the condition.
+
+2. 
+
+   ```javascript
+
+   if (x[--y]) {
+
+       a = 0;
 
-        return newExpr;
    } else {
 
-        // Try to combine two IF-ELSE
-        if (NodeUtil.isStatementBlock(thenBranch) &&
-            thenBranch.hasOneChild()) {
-          Node innerIf = thenBranch.getFirstChild();
-
-          if (innerIf.isIf()) {
-            Node innerCond = innerIf.getFirstChild();
-            Node innerThenBranch = innerCond.getNext();
-            Node innerElseBranch = innerThenBranch.getNext();
-
-            if (innerElseBranch == null &&
-                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
-                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
-              n.detachChildren();
-              n.addChildToBack(
-                  IR.and(
-                      cond,
-                      innerCond.detachFromParent())
-                      .srcref(cond));
-              n.addChildrenToBack(innerThenBranch.detachFromParent());
-              reportCodeChange();
-              // Not worth trying to fold the current IF-ELSE into && because
-              // the inner IF-ELSE wasn't able to be folded into && anyways.
-              return n;
-            }
-          }
-        }
-      }
+       a = 1;
 
-      return n;
    }
 
-    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
-     * peephole optimization. This should probably get moved to another pass.
-     */
-    tryRemoveRepeatedStatements(n);
-
-    // if(!x)foo();else bar(); -> if(x)bar();else foo();
-    // An additional set of curly braces isn't worth it.
-    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
-      n.replaceChild(cond, cond.removeFirstChild());
-      n.removeChild(thenBranch);
-      n.addChildToBack(thenBranch);
-      reportCodeChange();
-      return n;
-    }
+   ```
 
-    // if(x)return 1;else return 2; -> return x?1:2;
-    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
-      Node thenExpr = getBlockReturnExpression(thenBranch);
-      Node elseExpr = getBlockReturnExpression(elseBranch);
-      n.removeChild(cond);
-      thenExpr.detachFromParent();
-      elseExpr.detachFromParent();
-
-      // note - we ignore any cases with "return;", technically this
-      // can be converted to "return undefined;" or some variant, but
-      // that does not help code size.
-      Node returnNode = IR.returnNode(
-                            IR.hook(cond, thenExpr, elseExpr)
-                                .srcref(n));
-      parent.replaceChild(n, returnNode);
-      reportCodeChange();
-      return returnNode;
-    }
+   Expected transformation:
 
-    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
-    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
-
-    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
-      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
-      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
-      if (thenOp.getType() == elseOp.getType()) {
-        // if(x)a=1;else a=2; -> a=x?1:2;
-        if (NodeUtil.isAssignmentOp(thenOp)) {
-          Node lhs = thenOp.getFirstChild();
-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
-              // if LHS has side effects, don't proceed [since the optimization
-              // evaluates LHS before cond]
-              // NOTE - there are some circumstances where we can
-              // proceed even if there are side effects...
-              !mayEffectMutableState(lhs)) {
-
-            n.removeChild(cond);
-            Node assignName = thenOp.removeFirstChild();
-            Node thenExpr = thenOp.removeFirstChild();
-            Node elseExpr = elseOp.getLastChild();
-            elseOp.removeChild(elseExpr);
-
-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
-            Node assign = new Node(thenOp.getType(), assignName, hookNode)
-                              .srcref(thenOp);
-            Node expr = NodeUtil.newExpr(assign);
-            parent.replaceChild(n, expr);
-            reportCodeChange();
-
-            return expr;
-          }
-        }
-      }
-      // if(x)foo();else bar(); -> x?foo():bar()
-      n.removeChild(cond);
-      thenOp.detachFromParent();
-      elseOp.detachFromParent();
-      Node expr = IR.exprResult(
-          IR.hook(cond, thenOp, elseOp).srcref(n));
-      parent.replaceChild(n, expr);
-      reportCodeChange();
-      return expr;
-    }
+   ```javascript
 
-    boolean thenBranchIsVar = isVarBlock(thenBranch);
-    boolean elseBranchIsVar = isVarBlock(elseBranch);
-
-    // if(x)var y=1;else y=2  ->  var y=x?1:2
-    if (thenBranchIsVar && elseBranchIsExpressionBlock &&
-        getBlockExpression(elseBranch).getFirstChild().isAssign()) {
-
-      Node var = getBlockVar(thenBranch);
-      Node elseAssign = getBlockExpression(elseBranch).getFirstChild();
-
-      Node name1 = var.getFirstChild();
-      Node maybeName2 = elseAssign.getFirstChild();
-
-      if (name1.hasChildren()
-          && maybeName2.isName()
-          && name1.getString().equals(maybeName2.getString())) {
-        Node thenExpr = name1.removeChildren();
-        Node elseExpr = elseAssign.getLastChild().detachFromParent();
-        cond.detachFromParent();
-        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
-                            .srcref(n);
-        var.detachFromParent();
-        name1.addChildrenToBack(hookNode);
-        parent.replaceChild(n, var);
-        reportCodeChange();
-        return var;
-      }
+   a = (x[--y]) ? 0 : 1;
 
-    // if(x)y=1;else var y=2  ->  var y=x?1:2
-    } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
-        getBlockExpression(thenBranch).getFirstChild().isAssign()) {
-
-      Node var = getBlockVar(elseBranch);
-      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
-
-      Node maybeName1 = thenAssign.getFirstChild();
-      Node name2 = var.getFirstChild();
-
-      if (name2.hasChildren()
-          && maybeName1.isName()
-          && maybeName1.getString().equals(name2.getString())) {
-        Node thenExpr = thenAssign.getLastChild().detachFromParent();
-        Node elseExpr = name2.removeChildren();
-        cond.detachFromParent();
-        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
-                            .srcref(n);
-        var.detachFromParent();
-        name2.addChildrenToBack(hookNode);
-        parent.replaceChild(n, var);
-        reportCodeChange();
-
-        return var;
-      }
-    }
+   ```
 
-    return n;
-  }
+   Similar to the first case, but assigning to a different variable.
+
+3. 
+
+   ```javascript
+
+   if (x++) { x += 2 } else { x += 3 }
+
+   ```
+
+   Expected transformation:
+
+   ```javascript
+
+   x++ ? x += 2 : x += 3
+
+   ```
+
+   This involves the side effect of `x++` in the condition, which might be problematic.
+
+4. 
+
+   ```javascript
+
+   if (x++) { x = x + 2 } else { x = x + 3 }
+
+   ```
+
+   Expected transformation:
+
+   ```javascript
+
+   x = x++ ? x + 2 : x + 3
+
+   ```
+
+   This is similar to the third case but with different assignment expressions.
+
+From these test cases, it's clear that the current implementation doesn't handle all scenarios where if-else blocks can be converted into ternary expressions, especially when assignments have side effects or when the assignments are more complex.
+
+Upon reviewing the `tryMinimizeIf` function, I noticed that there are several conditions and checks to determine whether to transform an if-else statement into a ternary expression. However, there might be some gaps or missteps in these checks, leading to the transformation being skipped or applied incorrectly in certain cases.
+
+To fix this, I need to enhance the function to correctly identify and handle these scenarios. Specifically, I need to ensure that:
+
+- The function correctly identifies if both the then and else branches are single-expression blocks.
+
+- It handles assignments with side effects appropriately, ensuring that the side effects occur as intended in the transformed code.
+
+- It correctly constructs the ternary expression, preserving the original semantics.
+
+Looking deeper into the function, there's a section where it checks if both then and else branches are foldable expression blocks and if their expressions are of the same type. If they are assignments, it further checks if they assign to the same variable and是否有副作用。
+
+然而，根据测试用例，有时即使then和else分支不是直接的赋值操作，也可以转换为三元表达式，例如将整个赋值表达式放在三元运算符中。
+
+例如，测试用例中的:
