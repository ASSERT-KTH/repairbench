diff --git a/tmp/929b20bf-c7b0-4aa0-8e07-70c1f83b2b25_buggy.java b/tmp/1b15004f-0039-473d-bf44-9399a51340d9_fixed.java
index 57c40b2..0b6e4b8 100644
--- a/tmp/929b20bf-c7b0-4aa0-8e07-70c1f83b2b25_buggy.java
+++ b/tmp/1b15004f-0039-473d-bf44-9399a51340d9_fixed.java
@@ -1,27 +1,9 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {
-    // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
-    Node property = n.getLastChild();
-    Node objNode = n.getFirstChild();
-    JSType childType = getJSType(objNode);
-
 if (childType.isDict()) {
   report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
 } else if (n.getJSType() != null && parent.isAssign()) {
   return;
 } else if (validator.expectNotNullOrUndefined(t, n, childType,
     "No properties on this expression", getNativeType(OBJECT_TYPE))) {
   checkPropertyAccess(childType, property.getString(), t, n);
 }
 ensureTyped(t, n);
\ No newline at end of file
-  }
