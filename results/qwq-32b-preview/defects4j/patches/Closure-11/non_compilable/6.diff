diff --git a/tmp/083c85f3-ec70-4382-8f89-66f8a7a1bd5b_buggy.java b/tmp/bc49b655-3184-4c76-8c7e-a7a2afe35135_fixed.java
index 57c40b2..88fa5c6 100644
--- a/tmp/083c85f3-ec70-4382-8f89-66f8a7a1bd5b_buggy.java
+++ b/tmp/bc49b655-3184-4c76-8c7e-a7a2afe35135_fixed.java
@@ -1,27 +1,12 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {
-    // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
-    Node property = n.getLastChild();
-    Node objNode = n.getFirstChild();
-    JSType childType = getJSType(objNode);
 
-    if (childType.isDict()) {
-      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
-      checkPropertyAccess(childType, property.getString(), t, n);
-    }
-    ensureTyped(t, n);
+public void testGetprop4() throws Exception {
+
+testTypes("var x = null; x.prop = 3;",
+
+"No properties on this expression\n" +
+
+"found : null\n" +
+
+"required: Object");
+
 }
