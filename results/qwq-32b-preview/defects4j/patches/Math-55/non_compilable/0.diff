diff --git a/tmp/108d5e6d-fd9b-48cd-8981-2d4e1a06f138_buggy.java b/tmp/515139d6-dcc1-4552-bd03-1c0fcdcc9020_fixed.java
index 1478ee1..206b972 100644
--- a/tmp/108d5e6d-fd9b-48cd-8981-2d4e1a06f138_buggy.java
+++ b/tmp/515139d6-dcc1-4552-bd03-1c0fcdcc9020_fixed.java
@@ -1,24 +1,14 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute dot products
+    double dot12 = v1.dotProduct(v2);
+    double dot22 = v2.dotProduct(v2);
     
+    // Compute rho
+    double rho = dot22 != 0 ? dot12 / dot22 : 0;
     
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Adjust v1 to v3 = v1 - rho * v2
+    Vector3D v3 = v1.subtract(v2.scalarMultiply(rho));
     
+    // Compute cross product of v3 and v2
+    return v3.crossProduct(v2);
 }
\ No newline at end of file
