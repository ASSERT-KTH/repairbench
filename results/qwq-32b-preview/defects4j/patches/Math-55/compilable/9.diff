diff --git a/tmp/8c3c9fea-3f93-4dfa-bfce-cb3922f1927b_buggy.java b/tmp/f29cf723-91c7-4554-9ab8-d5d411b754c7_fixed.java
index 1478ee1..5e5c1fb 100644
--- a/tmp/8c3c9fea-3f93-4dfa-bfce-cb3922f1927b_buggy.java
+++ b/tmp/f29cf723-91c7-4554-9ab8-d5d411b754c7_fixed.java
@@ -1,24 +1,22 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute the dot product of v1 and v2
+    double dot = v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ();
     
+    // Compute the squared norm of v2
+    double norm2Squared = v2.getX() * v2.getX() + v2.getY() * v2.getY() + v2.getZ() * v2.getZ();
     
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Compute rho as an 8-bit approximation of dot / norm2Squared
+    double rho = (norm2Squared != 0) ? FastMath.round(dot / norm2Squared * 256) / 256 : 0;
     
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // Compute v3 = v1 - rho * v2
+    double v3x = v1.getX() - rho * v2.getX();
+    double v3y = v1.getY() - rho * v2.getY();
+    double v3z = v1.getZ() - rho * v2.getZ();
     
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute the cross product of v3 and v2
+    double cx = v3y * v2.getZ() - v3z * v2.getY();
+    double cy = v3z * v2.getX() - v3x * v2.getZ();
+    double cz = v3x * v2.getY() - v3y * v2.getX();
     
+    return new Vector3D(cx, cy, cz);
 }
\ No newline at end of file
