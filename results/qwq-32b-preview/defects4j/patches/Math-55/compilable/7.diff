diff --git a/tmp/ae4a65b2-3942-43b7-b3f0-5dc8dd1abb38_buggy.java b/tmp/8d51a0ba-159d-4545-add5-b178d378d1b6_fixed.java
index 1478ee1..a010b09 100644
--- a/tmp/ae4a65b2-3942-43b7-b3f0-5dc8dd1abb38_buggy.java
+++ b/tmp/8d51a0ba-159d-4545-add5-b178d378d1b6_fixed.java
@@ -1,24 +1,21 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute dot products
+    double dot12 = v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ();
+    double dot22 = v2.getX() * v2.getX() + v2.getY() * v2.getY() + v2.getZ() * v2.getZ();
 
+    // Compute rho
+    double rho = dot12 / dot22;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Compute v3 = v1 - rho * v2
+    double x3 = v1.getX() - rho * v2.getX();
+    double y3 = v1.getY() - rho * v2.getY();
+    double z3 = v1.getZ() - rho * v2.getZ();
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute cross product of v3 and v2
+    double cx = y3 * v2.getZ() - z3 * v2.getY();
+    double cy = z3 * v2.getX() - x3 * v2.getZ();
+    double cz = x3 * v2.getY() - y3 * v2.getX();
 
+    // Return the cross product as a new Vector3D
+    return new Vector3D(cx, cy, cz);
 }
\ No newline at end of file
