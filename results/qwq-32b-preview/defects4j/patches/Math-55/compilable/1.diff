diff --git a/tmp/8a46a455-42b7-415f-87b5-34cdbaf9e665_buggy.java b/tmp/593f26e2-75b0-43b3-b8a3-f59360b26d6c_fixed.java
index 1478ee1..7059a8e 100644
--- a/tmp/8a46a455-42b7-415f-87b5-34cdbaf9e665_buggy.java
+++ b/tmp/593f26e2-75b0-43b3-b8a3-f59360b26d6c_fixed.java
@@ -1,24 +1,20 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Compute the dot products needed for rho
+    double v1DotV2 = v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ();
+    double v2DotV2 = v2.getX() * v2.getX() + v2.getY() * v2.getY() + v2.getZ() * v2.getZ();
 
+    // Compute rho as an 8-bit approximation of v1.v2 / v2.v2
+    double rho = (v1DotV2 / v2DotV2);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Adjust v1 to get v3 = v1 - rho * v2
+    double v3X = v1.getX() - rho * v2.getX();
+    double v3Y = v1.getY() - rho * v2.getY();
+    double v3Z = v1.getZ() - rho * v2.getZ();
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute the cross product of v3 and v2
+    double crossX = v3Y * v2.getZ() - v3Z * v2.getY();
+    double crossY = v3Z * v2.getX() - v3X * v2.getZ();
+    double crossZ = v3X * v2.getY() - v3Y * v2.getX();
 
+    return new Vector3D(crossX, crossY, crossZ);
 }
\ No newline at end of file
