diff --git a/tmp/1cc3a1d5-dd14-42af-98e7-926a266f1e0d_buggy.java b/tmp/7207662f-32cd-41d5-a160-50b67e8716a6_fixed.java
index 6c9090f..7fcdbd1 100644
--- a/tmp/1cc3a1d5-dd14-42af-98e7-926a266f1e0d_buggy.java
+++ b/tmp/7207662f-32cd-41d5-a160-50b67e8716a6_fixed.java
@@ -1,45 +1,92 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator != null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for " + _collectionType
                         + ": value instantiator (" + _valueInstantiator.getClass().getName()
                         + ") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
     }
     // [databind#1043]: allow per-property allow-wrapping of single overrides:
     // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
     //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
 
     // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
     // and finally, type deserializer needs context as well
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
+
+    // Check if the collection type is an unmodifiable collection and handle it accordingly
+    if (isUnmodifiableCollection(_collectionType)) {
+        // Use a custom value instantiator for unmodifiable collections
+        ValueInstantiator customInstantiator = createCustomInstantiator(ctxt, _collectionType);
+        return withResolved(customInstantiator, delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+    }
+
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
+
+// Helper method to check if the type is an unmodifiable collection
+private boolean isUnmodifiableCollection(JavaType collectionType) {
+    Class<?> rawClass = collectionType.getRawClass();
+    return rawClass.getName().startsWith("java.util.Collections$Unmodifiable");
+}
+
+// Helper method to create a custom value instantiator for unmodifiable collections
+private ValueInstantiator createCustomInstantiator(DeserializationContext ctxt, JavaType collectionType) {
+    // Implement a custom value instantiator here
+    // For example, using a builder or factory method to create instances of unmodifiable collections
+    // This is a placeholder for the actual implementation
+    return new CustomValueInstantiator(ctxt.getConfig(), collectionType);
+}
+
+// Custom value instantiator class
+class CustomValueInstantiator extends ValueInstantiatorBase {
+    public CustomValueInstantiator(DeserializationConfig config, JavaType collectionType) {
+        super(config, collectionType);
+    }
+
+    @Override
+    public boolean canCreateUsingDefaultCreator() {
+        return false; // Unmodifiable collections do not have default constructors
+    }
+
+    @Override
+    public boolean canCreateUsingDelegateCreator() {
+        return true; // Use delegate creator to wrap a modifiable collection
+    }
+
+    @Override
+    public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) {
+        // Wrap the delegate (modifiable collection) in an unmodifiable collection
+        if (delegate instanceof Set) {
+            return Collections.unmodifiableSet((Set<?>) delegate);
+        } else if (delegate instanceof List) {
+            return Collections.unmodifiableList((List<?>) delegate);
+        } else if (delegate instanceof Collection) {
+            return Collections.unmodifiableCollection((Collection<?>) delegate);
+        }
+        throw new IllegalArgumentException("Unsupported collection type: " + delegate.getClass());
+    }
+}
\ No newline at end of file
