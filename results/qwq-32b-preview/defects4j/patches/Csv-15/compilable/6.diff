diff --git a/tmp/641405ae-a7e0-4bae-993e-e4c06db9abc2_buggy.java b/tmp/d9032280-7930-4260-8cab-2508115860c4_fixed.java
index 66af1fd..d8ae6dc 100644
--- a/tmp/641405ae-a7e0-4bae-993e-e4c06db9abc2_buggy.java
+++ b/tmp/d9032280-7930-4260-8cab-2508115860c4_fixed.java
@@ -1,107 +1,101 @@
-    // the original object is needed so can check for Number
 private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
         final Appendable out, final boolean newRecord) throws IOException {
     boolean quote = false;
     int start = offset;
     int pos = offset;
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
     final char quoteChar = getQuoteCharacter().charValue();
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
         quoteModePolicy = QuoteMode.MINIMAL;
     }
     switch (quoteModePolicy) {
         case ALL:
         case ALL_NON_NULL:
             quote = true;
             break;
         case NON_NUMERIC:
             quote = !(object instanceof Number);
             break;
         case NONE:
             // Use the existing escaping code
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
             if (len <= 0) {
                 // always quote an empty token that is the first
                 // on the line, as it may be the only thing on the
                 // line. If it were not quoted in that case,
                 // an empty line has no tokens.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
                 char c = value.charAt(pos);
 
-                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
-                    quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+                // Check if the first character is a delimiter or quote character
+                if (c == delimChar || c == quoteChar || c == LF || c == CR) {
                     quote = true;
                 } else {
+                    // Check the rest of the characters for delimiters, quotes, or line breaks
                     while (pos < end) {
                         c = value.charAt(pos);
-                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {
+                        if (c == delimChar || c == quoteChar || c == LF || c == CR) {
                             quote = true;
                             break;
                         }
                         pos++;
                     }
 
+                    // Check if the last character is a space or control character
                     if (!quote) {
                         pos = end - 1;
                         c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
                         if (c <= SP) {
                             quote = true;
                         }
                     }
                 }
             }
 
             if (!quote) {
                 // no encapsulation needed - write out the original value
                 out.append(value, start, end);
                 return;
             }
             break;
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
     }
 
     if (!quote) {
         // no encapsulation needed - write out the original value
         out.append(value, start, end);
         return;
     }
 
     // we hit something that needed encapsulation
     out.append(quoteChar);
 
     // Pick up where we left off: pos should be positioned on the first character that caused
     // the need for encapsulation.
     while (pos < end) {
         final char c = value.charAt(pos);
         if (c == quoteChar) {
             // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
-                out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
-                start = pos;
+            out.append(value, start, pos);
+            // write the quote character twice
+            out.append(quoteChar);
+            // update start to the next character
+            start = pos + 1;
         }
         pos++;
     }
 
     // write the last segment
     out.append(value, start, pos);
     out.append(quoteChar);
 }
\ No newline at end of file
