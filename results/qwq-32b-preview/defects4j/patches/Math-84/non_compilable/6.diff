diff --git a/tmp/34d081b4-95c3-47ea-a124-a8c343da9ec8_buggy.java b/tmp/8c2b086a-72d7-4ffe-b26c-7554ec40956e_fixed.java
index 5f1dcf2..03537ee 100644
--- a/tmp/34d081b4-95c3-47ea-a124-a8c343da9ec8_buggy.java
+++ b/tmp/8c2b086a-72d7-4ffe-b26c-7554ec40956e_fixed.java
@@ -1,41 +1,58 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
+        final RealPointValuePair worst = original[original.length - 1];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
+            // accept the reflected point
+            simplex = reflected.getPoint();
+            continue;
+
+        } else if (comparator.compare(reflected, worst) <= 0) {
+
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+                simplex = expanded.getPoint();
+            } else {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = reflected.getPoint();
             }
+            continue;
 
-                return;
-
-            }
+        } else {
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+            if (comparator.compare(contracted, worst) < 0) {
                 // accept the contracted simplex
+                simplex = contracted.getPoint();
+            } else {
+                // perform a shrink step
+                shrinkSimplex(comparator);
+            }
+            continue;
+
+        }
 
         // check convergence
+        if (convergenceChecker == null || convergenceChecker.converged(getIterations(), best, simplex[0])) {
             return;
         }
 
     }
 
 }
\ No newline at end of file
