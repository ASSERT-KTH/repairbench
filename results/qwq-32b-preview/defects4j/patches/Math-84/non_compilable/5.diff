diff --git a/tmp/372b52b1-315e-431c-81e9-5fd447764dea_buggy.java b/tmp/c2bea7ff-36b5-4580-b615-b50f1a33f6a0_fixed.java
index 5f1dcf2..4339985 100644
--- a/tmp/372b52b1-315e-431c-81e9-5fd447764dea_buggy.java
+++ b/tmp/c2bea7ff-36b5-4580-b615-b50f1a33f6a0_fixed.java
@@ -1,41 +1,47 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
+        // Check for convergence
+        if (convergenceChecker != null && convergenceChecker.converged(getIterations(), best)) {
+            return;
+        }
+
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = evaluateNewSimplex(original, khi, comparator);
             }
-
-                return;
-
+            continue; // Proceed to the next iteration
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
-                return;
+            simplex = evaluateNewSimplex(original, gamma, comparator);
+            continue; // Proceed to the next iteration
         }
 
+        // If none of the above, perform a shrink step
+        simplex = shrinkSimplex(original, comparator);
     }
-
 }
\ No newline at end of file
