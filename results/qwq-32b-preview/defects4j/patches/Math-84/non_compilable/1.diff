diff --git a/tmp/f8312a09-9e27-45fb-b549-d564a26d2029_buggy.java b/tmp/8ecbdafc-062a-4747-9e20-84c4fddbc2a3_fixed.java
index 5f1dcf2..bd72427 100644
--- a/tmp/f8312a09-9e27-45fb-b549-d564a26d2029_buggy.java
+++ b/tmp/8ecbdafc-062a-4747-9e20-84c4fddbc2a3_fixed.java
@@ -1,41 +1,77 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    int iteration = 0;
+    int maxIterations = getMaxIterations();
+    ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+
+    while (iteration < maxIterations) {
 
         incrementIterationsCounter();
+        iteration++;
 
-            // save the original vertex
+        // Save the original simplex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
+        final RealPointValuePair worst = original[simplex.length - 1];
 
-            // perform a reflection step
+        // Perform reflection
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
+        int comparisonReflectedBest = comparator.compare(reflected, best);
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+        if (comparisonReflectedBest < 0) {
+            // Reflected point is better than the best
+
+            // Perform expansion
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
-
-                return;
+            int comparisonExpandedReflected = comparator.compare(expanded, reflected);
 
+            if (comparisonExpandedReflected < 0) {
+                // Expanded point is better than reflected
+                simplex = evaluateNewSimplex(original, khi, comparator);
+            } else {
+                // Reflected point is better
+                simplex = reflected;
             }
+        } else {
+            // Reflected point is not better than the best
 
-            // compute the contracted simplex
+            // Perform contraction
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+            int comparisonContractedBest = comparator.compare(contracted, best);
 
-            // check convergence
+            if (comparisonContractedBest < 0) {
+                // Contracted point is better than the best
+                simplex = contracted;
+            } else {
+                // Perform shrinkage
+                simplex = shrinkage(original, best);
+            }
+        }
+
+        // Check convergence
+        if (checker != null) {
+            if (checker.converged(iteration, best, simplex[0])) {
                 return;
             }
+        }
+    }
 
+    // If maximum iterations reached without convergence
+    throw new OptimizationException(new MaxIterationsExceededException(maxIterations));
 }
 
+private RealPointValuePair shrinkage(final RealPointValuePair[] original, final RealPointValuePair best) {
+    final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];
+    newSimplex[0] = best;
+    for (int i = 1; i < original.length; i++) {
+        final double[] ShrunkPoint = new double[best.getPoint().length];
+        for (int j = 0; j < best.getPoint().length; j++) {
+            ShrunkPoint[j] = best.getPoint()[j] + sigma * (original[i].getPoint()[j] - best.getPoint()[j]);
+        }
+        newSimplex[i] = computeObjectiveValue(ShrunkPoint);
+    }
+    return newSimplex;
 }
\ No newline at end of file
