diff --git a/tmp/49aaffd9-dd2c-475a-b7d4-85432d8a08a4_buggy.java b/tmp/735f9c65-33c7-43c8-93f7-4a6dbdbad22d_fixed.java
index 5f1dcf2..e3b6e99 100644
--- a/tmp/49aaffd9-dd2c-475a-b7d4-85432d8a08a4_buggy.java
+++ b/tmp/735f9c65-33c7-43c8-93f7-4a6dbdbad22d_fixed.java
@@ -1,41 +1,50 @@
-    /** {@inheritDoc} */
-    @Override
-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
+ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+RealPointValuePair previous = null;
+RealPointValuePair current = best;
 
-        while (true) {
+while (iterations < getMaxIterations() && evaluations < getMaxEvaluations()) {
 
     incrementIterationsCounter();
 
     // save the original vertex
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
         final RealPointValuePair[] reflectedSimplex = simplex;
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
+        } else {
+            // accept the expanded simplex
+            simplex = evaluateNewSimplex(original, khi, comparator);
         }
 
-                return;
-
-            }
+    } else {
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
-                return;
+            simplex = evaluateNewSimplex(original, gamma, comparator);
+        } else {
+            // perform a shrink step
+            simplex = shrinkSimplex(original, best);
         }
 
     }
 
+    // check for convergence
+    if (checker != null) {
+        if (previous != null && checker.converged(getIterations(), previous, current)) {
+            break;
+        }
+        previous = current;
+        current = best;
+    }
 }
\ No newline at end of file
