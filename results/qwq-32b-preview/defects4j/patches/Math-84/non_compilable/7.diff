diff --git a/tmp/d9c885a9-9111-4f39-9503-cef065d5257e_buggy.java b/tmp/9c282e1b-e965-43de-a0c7-9ef05191ac8c_fixed.java
index 5f1dcf2..230f22e 100644
--- a/tmp/d9c885a9-9111-4f39-9503-cef065d5257e_buggy.java
+++ b/tmp/9c282e1b-e965-43de-a0c7-9ef05191ac8c_fixed.java
@@ -1,41 +1,42 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
     incrementIterationsCounter();
 
     // save the original vertex
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best = original[0];
 
     // perform a reflection step
     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
     if (comparator.compare(reflected, best) < 0) {
 
         // compute the expanded simplex
         final RealPointValuePair[] reflectedSimplex = simplex;
         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
         if (comparator.compare(reflected, expanded) <= 0) {
             // accept the reflected simplex
             simplex = reflectedSimplex;
+        } else {
+            // accept the expanded simplex
+            simplex = evaluateNewSimplex(original, khi, comparator);
         }
 
         return;
 
-            }
+    } else {
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
-                return;
+            simplex = evaluateNewSimplex(original, gamma, comparator);
+        } else {
+            // do nothing, stay with the original simplex
         }
 
     }
 
 }
\ No newline at end of file
