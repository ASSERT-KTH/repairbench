diff --git a/tmp/06f6a137-664b-44e7-8d1e-8ab19f07ab3e_buggy.java b/tmp/134258ed-29fe-4c71-84f5-d4b70941a78b_fixed.java
index 5f1dcf2..559da4f 100644
--- a/tmp/06f6a137-664b-44e7-8d1e-8ab19f07ab3e_buggy.java
+++ b/tmp/134258ed-29fe-4c71-84f5-d4b70941a78b_fixed.java
@@ -1,41 +1,67 @@
-    /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = evaluateNewSimplex(original, khi, comparator);
             }
 
+            // check for convergence
+            if (checkConvergence()) {
                 return;
+            }
 
+            continue;
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = evaluateNewSimplex(original, gamma, comparator);
 
-            // check convergence
+            // check for convergence
+            if (checkConvergence()) {
                 return;
             }
 
+            continue;
         }
 
+        // no improvement, shrink the simplex
+        shrinkSimplex(best);
+
+        // check for convergence
+        if (checkConvergence()) {
+            return;
+        }
+
+    }
+
+}
+
+private boolean checkConvergence() {
+    // Implement convergence check using the set convergence checker
+    // For example:
+    // return convergenceChecker.converged(getIterations(), simplex[0], simplex[1]);
+    throw new UnsupportedOperationException("Convergence check not implemented");
 }
\ No newline at end of file
