diff --git a/tmp/43405a7c-900a-4162-93f0-85ef3d6be598_buggy.java b/tmp/dcc7c17e-8f0a-4c04-9636-c95801eca4bf_fixed.java
index 5f1dcf2..efd7b4d 100644
--- a/tmp/43405a7c-900a-4162-93f0-85ef3d6be598_buggy.java
+++ b/tmp/dcc7c17e-8f0a-4c04-9636-c95801eca4bf_fixed.java
@@ -1,41 +1,62 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    int iteration = 0;
     while (true) {
 
         incrementIterationsCounter();
+        iteration++;
+
+        // Check if maximum iterations have been reached
+        if (iteration > getMaxIterations()) {
+            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+        }
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+        final RealPointValuePair reflected = evaluateNewSimplex(original, rho, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+            final RealPointValuePair expanded = evaluateNewSimplex(original, rho * khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = new RealPointValuePair[] { expanded };
             }
 
+            // Check for convergence
+            if (convergenceChecker != null && convergenceChecker.converged(iteration, original, simplex)) {
                 return;
-
             }
 
+        } else {
+
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[] { contracted };
+            } else {
+                // perform a shrinkage
+                shrink(original);
+            }
 
-            // check convergence
+            // Check for convergence
+            if (convergenceChecker != null && convergenceChecker.converged(iteration, original, simplex)) {
                 return;
             }
 
         }
 
     }
+
+}
\ No newline at end of file
