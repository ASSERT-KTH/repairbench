diff --git a/tmp/b153d203-6da3-457c-bc09-20beb51e0b1b_buggy.java b/tmp/c5cba4ba-c9a0-4961-ba57-fa24c373c543_fixed.java
index 7c0ebae..872fee5 100644
--- a/tmp/b153d203-6da3-457c-bc09-20beb51e0b1b_buggy.java
+++ b/tmp/c5cba4ba-c9a0-4961-ba57-fa24c373c543_fixed.java
@@ -1,229 +1,197 @@
 @Override
-    public JsonToken nextToken() throws IOException
-    {
-        // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
-        //    conditionals; and it seems odd to return `null` but NOT considering input
-        //    as closed... would love a rewrite to simplify/clear up logic here.
+public JsonToken nextToken() throws IOException {
+    // Check if multiple matches are allowed and handle the current token accordingly
+    if (!_allowMultipleMatches && _currToken != null && _exposedContext == null) {
+        if (_currToken.isStructEnd() && _headContext.isStartHandled()) {
+            return (_currToken = null);
+        } else if (_currToken.isScalarValue() && !_headContext.isStartHandled() && _itemFilter == TokenFilter.INCLUDE_ALL) {
+            return (_currToken = null);
+        }
+    }
 
-        // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
-        // check for no buffered context _exposedContext - null
-        // If all the conditions matches then check for scalar / non-scalar property
-        if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-            //if not scalar and ended successfully, and !includePath, then return null
-                if (_currToken.isStructEnd()) {
-                    if (_headContext.isStartHandled()) {
-                        return (_currToken = null);
-                    }
-                } else if (_currToken.isScalarValue()) {
-                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                    // then return null 
-                    if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
-                        return (_currToken = null);
-                    }
-            }
-        }
-        // Anything buffered?
+    // Check if there are any buffered tokens
     TokenFilterContext ctxt = _exposedContext;
-
     if (ctxt != null) {
         while (true) {
             JsonToken t = ctxt.nextTokenToRead();
             if (t != null) {
                 _currToken = t;
                 return t;
             }
-                // all done with buffered stuff?
             if (ctxt == _headContext) {
                 _exposedContext = null;
-                    if (ctxt.inArray()) {
-                        t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
-                        _currToken = t;
-                        return t;
+                JsonToken t2 = delegate.getCurrentToken();
+                if (t2 != null) {
+                    _currToken = t2;
+                    return t2;
                 }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
                 break;
             }
-                // If not, traverse down the context chain
             ctxt = _headContext.findChildOf(ctxt);
-                _exposedContext = ctxt;
-                if (ctxt == null) { // should never occur
+            if (ctxt == null) {
                 throw _constructError("Unexpected problem: chain of filtered context broken");
             }
+            _exposedContext = ctxt;
         }
     }
 
-        // If not, need to read more. If we got any:
+    // Read the next token from the delegate
     JsonToken t = delegate.nextToken();
     if (t == null) {
-            // no strict need to close, since we have no state here
-            _currToken = t;
-            return t;
+        _currToken = null;
+        return null;
     }
 
-        // otherwise... to include or not?
+    // Determine if the token should be included based on the filter
     TokenFilter f;
-        
     switch (t.id()) {
         case ID_START_ARRAY:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
+                _currToken = t;
+                return t;
             }
-            if (f == null) { // does this occur?
+            if (f == null) {
                 delegate.skipChildren();
                 break;
             }
-            // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartArray();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
+                _currToken = t;
+                return t;
             }
             _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
             if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
+                JsonToken bufferedToken = _nextTokenWithBuffering(_headContext);
+                if (bufferedToken != null) {
+                    _currToken = bufferedToken;
+                    return bufferedToken;
                 }
             }
             break;
-
         case ID_START_OBJECT:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
+                _currToken = t;
+                return t;
             }
-            if (f == null) { // does this occur?
+            if (f == null) {
                 delegate.skipChildren();
                 break;
             }
-            // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
             if (f != TokenFilter.INCLUDE_ALL) {
                 f = f.filterStartObject();
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
+                _currToken = t;
+                return t;
             }
             _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
             if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
+                JsonToken bufferedToken = _nextTokenWithBuffering(_headContext);
+                if (bufferedToken != null) {
+                    _currToken = bufferedToken;
+                    return bufferedToken;
                 }
             }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
             break;
-
         case ID_END_ARRAY:
         case ID_END_OBJECT:
-            {
             boolean returnEnd = _headContext.isStartHandled();
             f = _headContext.getFilter();
-                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
+            if (f != null && f != TokenFilter.INCLUDE_ALL) {
+                if (t == JsonToken.END_ARRAY) {
                     f.filterFinishArray();
+                } else if (t == JsonToken.END_OBJECT) {
+                    f.filterFinishObject();
+                }
             }
             _headContext = _headContext.getParent();
             _itemFilter = _headContext.getFilter();
             if (returnEnd) {
-                    return (_currToken = t);
-                }
+                _currToken = t;
+                return t;
             }
             break;
-
         case ID_FIELD_NAME:
-            {
-                final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
+            String name = delegate.getCurrentName();
             f = _headContext.setFieldName(name);
             if (f == TokenFilter.INCLUDE_ALL) {
                 _itemFilter = f;
                 if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
                     if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                        JsonToken startToken = _headContext.nextTokenToRead();
+                        if (startToken != null) {
                             _exposedContext = _headContext;
+                            _currToken = startToken;
+                            return startToken;
                         }
                     }
-                    return (_currToken = t);
+                }
+                _currToken = t;
+                return t;
             }
             if (f == null) {
                 delegate.nextToken();
                 delegate.skipChildren();
                 break;
             }
             f = f.includeProperty(name);
             if (f == null) {
                 delegate.nextToken();
                 delegate.skipChildren();
                 break;
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 if (_includePath) {
-                        return (_currToken = t);
+                    _currToken = t;
+                    return t;
                 }
             }
             if (_includePath) {
-                    t = _nextTokenWithBuffering(_headContext);
-                    if (t != null) {
-                        _currToken = t;
-                        return t;
+                JsonToken bufferedToken = _nextTokenWithBuffering(_headContext);
+                if (bufferedToken != null) {
+                    _currToken = bufferedToken;
+                    return bufferedToken;
                 }
             }
             break;
-            }
-
-        default: // scalar value
+        default:
+            // Scalar value
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
-                return (_currToken = t);
+                _currToken = t;
+                return t;
             }
             if (f != null) {
                 f = _headContext.checkValue(f);
-                if ((f == TokenFilter.INCLUDE_ALL)
-                        || ((f != null) && f.includeValue(delegate))) {
-                    return (_currToken = t);
+                if (f == TokenFilter.INCLUDE_ALL || (f != null && f.includeValue(delegate))) {
+                    _currToken = t;
+                    return t;
                 }
             }
-            // Otherwise not included (leaves must be explicitly included)
             break;
     }
 
-        // We get here if token was not yet found; offlined handling
+    // If token was not included, try to find the next one
     return _nextToken2();
 }
\ No newline at end of file
