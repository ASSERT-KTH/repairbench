diff --git a/tmp/efa6219c-b1cb-45f3-b47e-e61559885dc6_buggy.java b/tmp/8834d404-e2c0-4f13-b83a-1406b601f744_fixed.java
index dd3b100..8db8697 100644
--- a/tmp/efa6219c-b1cb-45f3-b47e-e61559885dc6_buggy.java
+++ b/tmp/8834d404-e2c0-4f13-b83a-1406b601f744_fixed.java
@@ -1,12 +1,19 @@
 public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
-                return root;
-            }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
-                    return lowestCommonAncestor(root.left, p, q);
+    if (root == null) {
+        return null;
     }
-                return lowestCommonAncestor(root.right, p, q);
+    // If the current node is one of p or q, it could be a potential LCA
+    if (root == p || root == q) {
+        return root;
     }
+    // Recurse into the left and right subtrees
+    TreeNode left = lowestCommonAncestor(root.left, p, q);
+    TreeNode right = lowestCommonAncestor(root.right, p, q);
+    
+    // If both left and right recursions return non-null, it means p and q are on different sides of the current root
+    if (left != null && right != null) {
         return root;
     }
+    // If only one of the recursions returns non-null, the LCA is in that subtree
+    return left != null ? left : right;
+}
\ No newline at end of file
