diff --git a/tmp/9d01d222-afaa-40aa-a61e-6d459559f135_buggy.java b/tmp/4d398627-4ce3-4fc9-975e-a90460a91b27_fixed.java
index 6d50be3..97df0ce 100644
--- a/tmp/9d01d222-afaa-40aa-a61e-6d459559f135_buggy.java
+++ b/tmp/4d398627-4ce3-4fc9-975e-a90460a91b27_fixed.java
@@ -1,194 +1,419 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
+    // Skip initial bytes and read IMEI
     buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+    if (buf.readableBytes() < 15) {
+        Log.warning("Not enough data to read IMEI");
+        return null;
+    }
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1 + 3 + 1);
 
+    // Get device session
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
+    // Read remaining cache and position count
     buf.readUnsignedIntLE(); // remaining cache
+    if (buf.readableBytes() < 2) {
+        Log.warning("Not enough data to read position count");
+        return positions;
+    }
     int count = buf.readUnsignedShortLE();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
+        // Read parameters in different groups
+        if (buf.readableBytes() < 2) {
+            Log.warning("Not enough data to read group 1 length");
+            continue;
+        }
         buf.readUnsignedShortLE(); // length
+        if (buf.readableBytes() < 2) {
+            Log.warning("Not enough data to read group 1 index");
+            continue;
+        }
         buf.readUnsignedShortLE(); // index
 
+        // Group 1 parameters
+        if (buf.readableBytes() < 1) {
+            Log.warning("Not enough data for group 1 parameter count");
+            continue;
+        }
         int paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                Log.warning("Not enough data for group 1 parameter ID");
+                continue;
+            }
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x01:
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for parameter 0x01");
+                        continue;
+                    }
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     break;
                 case 0x05:
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for parameter 0x05");
+                        continue;
+                    }
                     position.setValid(buf.readUnsignedByte() > 0);
                     break;
                 case 0x06:
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for parameter 0x06");
+                        continue;
+                    }
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x07:
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for parameter 0x07");
+                        continue;
+                    }
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x14:
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for parameter 0x14");
+                        continue;
+                    }
                     position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                     break;
                 case 0x15:
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for parameter 0x15");
+                        continue;
+                    }
                     position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                     break;
                 case 0x47:
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for parameter 0x47");
+                        continue;
+                    }
                     int lockState = buf.readUnsignedByte();
                     if (lockState > 0) {
                         position.set(Position.KEY_LOCK, lockState == 2);
                     }
                     break;
                 case 0x97:
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for parameter 0x97");
+                        continue;
+                    }
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case 0x9D:
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for parameter 0x9D");
+                        continue;
+                    }
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
                 case 0xFE69:
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for parameter 0xFE69");
+                        continue;
+                    }
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     break;
                 default:
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for unknown parameter");
+                        continue;
+                    }
                     buf.readUnsignedByte();
                     break;
             }
         }
 
+        // Group 2 parameters
+        if (buf.readableBytes() < 1) {
+            Log.warning("Not enough data for group 2 parameter count");
+            continue;
+        }
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                Log.warning("Not enough data for group 2 parameter ID");
+                continue;
+            }
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x08:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x08");
+                        continue;
+                    }
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     break;
                 case 0x09:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x09");
+                        continue;
+                    }
                     position.setCourse(buf.readUnsignedShortLE());
                     break;
                 case 0x0A:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x0A");
+                        continue;
+                    }
                     position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                     break;
                 case 0x0B:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x0B");
+                        continue;
+                    }
                     position.setAltitude(buf.readShortLE());
                     break;
                 case 0x16:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x16");
+                        continue;
+                    }
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x19:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x19");
+                        continue;
+                    }
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x1A:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x1A");
+                        continue;
+                    }
                     position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x40:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x40");
+                        continue;
+                    }
                     position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                     break;
                 case 0x91:
                 case 0x92:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x91/0x92");
+                        continue;
+                    }
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                     break;
                 case 0x98:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x98");
+                        continue;
+                    }
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                     break;
                 case 0x99:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x99");
+                        continue;
+                    }
                     position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                     break;
                 case 0x9C:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x9C");
+                        continue;
+                    }
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                     break;
                 case 0x9F:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0x9F");
+                        continue;
+                    }
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                     break;
                 case 0xC9:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for parameter 0xC9");
+                        continue;
+                    }
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                     break;
                 default:
+                    if (buf.readableBytes() < 2) {
+                        Log.warning("Not enough data for unknown parameter in group 2");
+                        continue;
+                    }
                     buf.readUnsignedShortLE();
                     break;
             }
         }
 
+        // Group 3 parameters
+        if (buf.readableBytes() < 1) {
+            Log.warning("Not enough data for group 3 parameter count");
+            continue;
+        }
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                Log.warning("Not enough data for group 3 parameter ID");
+                continue;
+            }
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x02:
+                    if (buf.readableBytes() < 4) {
+                        Log.warning("Not enough data for parameter 0x02");
+                        continue;
+                    }
                     position.setLatitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x03:
+                    if (buf.readableBytes() < 4) {
+                        Log.warning("Not enough data for parameter 0x03");
+                        continue;
+                    }
                     position.setLongitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x04:
+                    if (buf.readableBytes() < 4) {
+                        Log.warning("Not enough data for parameter 0x04");
+                        continue;
+                    }
                     position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                     break;
                 case 0x0C:
                 case 0x9B:
+                    if (buf.readableBytes() < 4) {
+                        Log.warning("Not enough data for parameter 0x0C/0x9B");
+                        continue;
+                    }
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     break;
                 case 0x0D:
+                    if (buf.readableBytes() < 4) {
+                        Log.warning("Not enough data for parameter 0x0D");
+                        continue;
+                    }
                     position.set("runtime", buf.readUnsignedIntLE());
                     break;
                 case 0x25:
+                    if (buf.readableBytes() < 4) {
+                        Log.warning("Not enough data for parameter 0x25");
+                        continue;
+                    }
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                     break;
                 case 0xA0:
+                    if (buf.readableBytes() < 4) {
+                        Log.warning("Not enough data for parameter 0xA0");
+                        continue;
+                    }
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                     break;
                 case 0xA2:
+                    if (buf.readableBytes() < 4) {
+                        Log.warning("Not enough data for parameter 0xA2");
+                        continue;
+                    }
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                     break;
                 default:
+                    if (buf.readableBytes() < 4) {
+                        Log.warning("Not enough data for unknown parameter in group 3");
+                        continue;
+                    }
                     buf.readUnsignedIntLE();
                     break;
             }
         }
 
+        // Group 4 parameters
+        if (buf.readableBytes() < 1) {
+            Log.warning("Not enough data for group 4 parameter count");
+            continue;
+        }
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                Log.warning("Not enough data for group 4 parameter ID");
+                continue;
+            }
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            if (buf.readableBytes() < 1) {
+                Log.warning("Not enough data for group 4 parameter length");
+                continue;
+            }
             int length = buf.readUnsignedByte();
             switch (id) {
                 case 0x2A:
                 case 0x2B:
                 case 0x2C:
                 case 0x2D:
                 case 0x2E:
                 case 0x2F:
                 case 0x30:
                 case 0x31:
+                    if (buf.readableBytes() < 3) {
+                        Log.warning("Not enough data for parameter 0x2A-0x31");
+                        continue;
+                    }
                     buf.readUnsignedByte(); // label
                     position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
                     break;
+                case 0x3E:
+                    // Handle parameter 0x3E if needed
+                    break;
                 case 0xFE31:
-                        buf.readUnsignedByte(); // alarm protocol
-                        buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                    if (buf.readableBytes() < 4) {
+                        Log.warning("Not enough data for parameter 0xFE31");
+                        continue;
+                    }
+                    buf.skipBytes(4); // Assuming specific structure
                     break;
                 case 0xFEA8:
+                    if (buf.readableBytes() < 3) {
+                        Log.warning("Not enough data for parameter 0xFEA8");
+                        continue;
+                    }
                     buf.readUnsignedByte(); // battery status
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for battery level in 0xFEA8");
+                        continue;
+                    }
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    if (buf.readableBytes() < 1) {
+                        Log.warning("Not enough data for battery alert in 0xFEA8");
+                        continue;
+                    }
                     buf.readUnsignedByte(); // battery alert
                     break;
                 default:
+                    if (buf.readableBytes() < length) {
+                        Log.warning("Not enough data for unknown parameter in group 4");
+                        continue;
+                    }
                     buf.skipBytes(length);
                     break;
             }
         }
 
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
