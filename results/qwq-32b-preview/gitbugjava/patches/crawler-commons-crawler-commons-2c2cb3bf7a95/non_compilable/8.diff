diff --git a/tmp/e1f693ee-3f6b-42cf-87bc-69e909dc7ac1_buggy.java b/tmp/578549fb-4e6b-47f9-b265-31f7d8af52d2_fixed.java
index fd205cf..a5d7e8b 100644
--- a/tmp/e1f693ee-3f6b-42cf-87bc-69e909dc7ac1_buggy.java
+++ b/tmp/578549fb-4e6b-47f9-b265-31f7d8af52d2_fixed.java
@@ -1,151 +1,162 @@
 private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {
-
     // If there's nothing there, treat it like we have no restrictions.
     if ((content == null) || (content.length == 0)) {
         return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
     }
 
-        int bytesLen = content.length;
     int offset = 0;
-        Charset encoding = StandardCharsets.US_ASCII;
+    Charset encoding = StandardCharsets.UTF_8; // Default to UTF-8 if no BOM or charset is found
 
-        // Check for a UTF-8 BOM at the beginning (EF BB BF)
-        if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {
+    // Check for BOMs
+    int bytesLen = content.length;
+    if (bytesLen >= 3 && content[0] == (byte) 0xEF && content[1] == (byte) 0xBB && content[2] == (byte) 0xBF) {
         offset = 3;
-            bytesLen -= 3;
         encoding = StandardCharsets.UTF_8;
-        }
-        // Check for UTF-16LE BOM at the beginning (FF FE)
-        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {
+    } else if (bytesLen >= 2 && content[0] == (byte) 0xFF && content[1] == (byte) 0xFE) {
         offset = 2;
-            bytesLen -= 2;
         encoding = StandardCharsets.UTF_16LE;
-        }
-        // Check for UTF-16BE BOM at the beginning (FE FF)
-        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {
+    } else if (bytesLen >= 2 && content[0] == (byte) 0xFE && content[1] == (byte) 0xFF) {
         offset = 2;
-            bytesLen -= 2;
         encoding = StandardCharsets.UTF_16BE;
+    } else {
+        // No BOM found, check content type for charset
+        String charset = parseCharsetFromContentType(contentType);
+        if (charset != null) {
+            try {
+                encoding = Charset.forName(charset);
+            } catch (UnsupportedCharsetException e) {
+                // Log warning and default to UTF-8
+                LOGGER.warning("Unsupported charset specified in content type: " + charset + ". Defaulting to UTF-8.");
+                encoding = StandardCharsets.UTF_8;
+            }
+        }
+        // else, keep the default UTF-8 encoding
     }
 
-        String contentAsStr;
-        contentAsStr = new String(content, offset, bytesLen, encoding);
+    String contentAsStr = new String(content, offset, bytesLen - offset, encoding);
 
     // Decide if we need to do special HTML processing.
     boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith("text/html"));
 
     // If it looks like it contains HTML, but doesn't have a user agent
-        // field, then
-        // assume somebody messed up and returned back to us a random HTML page
-        // instead
-        // of a robots.txt file.
+    // field, then assume somebody messed up and returned back to us a random HTML page
+    // instead of a robots.txt file.
     boolean hasHTML = false;
     if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {
         if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {
             LOGGER.trace("Found non-robots.txt HTML file: " + url);
             return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
         } else {
             // We'll try to strip out HTML tags below.
             if (isHtmlType) {
                 LOGGER.debug("HTML content type returned for robots.txt file: " + url);
             } else {
                 LOGGER.debug("Found HTML in robots.txt file: " + url);
             }
-
             hasHTML = true;
         }
     }
 
     // Break on anything that might be used as a line ending. Since
     // tokenizer doesn't return empty tokens, a \r\n sequence still
     // works since it looks like an empty string between the \r and \n.
     StringTokenizer lineParser = new StringTokenizer(contentAsStr, "\n\r\u0085\u2028\u2029");
     ParseState parseState = new ParseState(url, robotNames);
 
     while (lineParser.hasMoreTokens()) {
         String line = lineParser.nextToken();
 
         // Get rid of HTML markup, in case some brain-dead webmaster has
-            // created an HTML
-            // page for robots.txt. We could do more sophisticated processing
-            // here to better
-            // handle bad HTML, but that's a very tiny percentage of all
+        // created an HTML page for robots.txt. We could do more sophisticated processing
+        // here to better handle bad HTML, but that's a very tiny percentage of all
         // robots.txt files.
         if (hasHTML) {
             line = line.replaceAll("<[^>]+>", "");
         }
 
         // trim out comments and whitespace
         int hashPos = line.indexOf("#");
         if (hashPos >= 0) {
             line = line.substring(0, hashPos);
         }
 
         line = line.trim();
         if (line.length() == 0) {
             continue;
         }
 
         RobotToken token = tokenize(line);
         switch (token.getDirective()) {
             case USER_AGENT:
                 handleUserAgent(parseState, token);
                 break;
 
             case DISALLOW:
                 parseState.setFinishedAgentFields(true);
                 handleDisallow(parseState, token);
                 break;
 
             case ALLOW:
                 parseState.setFinishedAgentFields(true);
                 handleAllow(parseState, token);
                 break;
 
             case CRAWL_DELAY:
                 parseState.setFinishedAgentFields(true);
                 handleCrawlDelay(parseState, token);
                 break;
 
             case SITEMAP:
                 parseState.setFinishedAgentFields(true);
                 handleSitemap(parseState, token);
                 break;
 
             case HTTP:
                 parseState.setFinishedAgentFields(true);
                 handleHttp(parseState, token);
                 break;
 
             case UNKNOWN:
                 reportWarning(parseState, "Unknown directive in robots.txt file: {}", line);
                 parseState.setFinishedAgentFields(true);
                 break;
 
             case MISSING:
                 reportWarning(parseState, "Unknown line in robots.txt file (size {}): {}", content.length, line);
                 parseState.setFinishedAgentFields(true);
                 break;
 
             default:
                 // All others we just ignore
-                    // TODO KKr - which of these should be setting
-                    // finishedAgentFields to true?
+                // TODO KKr - which of these should be setting finishedAgentFields to true?
                 // TODO KKr - handle no-index
                 // TODO KKr - handle request-rate and visit-time
                 break;
         }
     }
 
     this._numWarningsDuringLastParse.set(parseState._numWarnings);
     SimpleRobotRules result = parseState.getRobotRules();
     if (result.getCrawlDelay() > _maxCrawlDelay) {
-            // Some evil sites use a value like 3600 (seconds) for the crawl
-            // delay, which would cause lots of problems for us.
+        // Some evil sites use a value like 3600 (seconds) for the crawl delay, which would cause lots of problems for us.
         LOGGER.debug("Crawl delay exceeds max value - so disallowing all URLs: {}", url);
         return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);
     } else {
         result.sortRules();
         return result;
     }
 }
+
+private static String parseCharsetFromContentType(String contentType) {
+    if (contentType == null) {
+        return null;
+    }
+    String[] parts = contentType.split(";");
+    for (String part : parts) {
+        part = part.trim();
+        if (part.toLowerCase().startsWith("charset=")) {
+            return part.substring("charset=".length()).trim();
+        }
+    }
+    return null;
+}
\ No newline at end of file
