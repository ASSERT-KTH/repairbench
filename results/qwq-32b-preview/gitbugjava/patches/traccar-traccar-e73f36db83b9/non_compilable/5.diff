diff --git a/tmp/8f43b7b9-26c8-46f4-bef9-3613cc8a0175_buggy.java b/tmp/4d76d604-d2f4-4dd4-85e3-5f002cc6b9be_fixed.java
index cd6f89c..bb5bd8e 100644
--- a/tmp/8f43b7b9-26c8-46f4-bef9-3613cc8a0175_buggy.java
+++ b/tmp/4d76d604-d2f4-4dd4-85e3-5f002cc6b9be_fixed.java
@@ -1,102 +1,113 @@
 private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
     Parser parser = new Parser(PATTERN_ERI, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
-        long mask = parser.nextHexLong();
-
     LinkedList<Position> positions = new LinkedList<>();
 
+    // Read mask
+    long mask = parser.nextHexLong();
+
+    // Read power
     Integer power = parser.nextInt();
 
+    // Parse location data
     Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
     while (itemParser.find()) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
         decodeLocation(position, itemParser);
-
         positions.add(position);
     }
 
+    // Get the last position
     Position position = positions.getLast();
 
+    // Skip location if necessary
     skipLocation(parser);
 
+    // Set power if available
     if (power != null) {
         position.set(Position.KEY_POWER, power * 0.001);
     }
 
+    // Check for additional data fields
     if (parser.hasNextAny(12)) {
-
         position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
         position.set(Position.KEY_HOURS, parseHours(parser.next()));
         position.set(Position.PREFIX_ADC + 1, parser.next());
         position.set(Position.PREFIX_ADC + 2, parser.next());
         position.set(Position.PREFIX_ADC + 3, parser.next());
+
+        // Read input and output if present
         if (parser.hasNext(2)) {
             position.set(Position.KEY_INPUT, parser.nextHexInt());
             position.set(Position.KEY_OUTPUT, parser.nextHexInt());
         }
+
+        // Read battery level and status if present
         if (parser.hasNext(4)) {
             position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
             decodeStatus(position, parser);
         }
 
+        // Process device-specific data
         int index = 0;
         String[] data = parser.next().split(",");
 
         index += 1; // device type
 
         if (BitUtil.check(mask, 0)) {
             index += 1; // digital fuel sensor data
         }
 
         if (BitUtil.check(mask, 1)) {
             int deviceCount = Integer.parseInt(data[index++]);
             for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
+                index += 2; // id and type
                 if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                    position.set(Position.PREFIX_TEMP + i, (short) (Integer.parseInt(data[index - 1], 16) * 0.0625));
                 }
             }
         }
 
         if (BitUtil.check(mask, 2)) {
             index += 1; // can data
         }
 
         if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
             int deviceCount = Integer.parseInt(data[index++]);
             for (int i = 1; i <= deviceCount; i++) {
                 index += 1; // type
                 if (BitUtil.check(mask, 3)) {
                     position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
                 }
                 if (BitUtil.check(mask, 4)) {
                     index += 1; // volume
                 }
             }
         }
-
     }
 
+    // Set battery level if present
     if (parser.hasNext()) {
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     }
 
+    // Decode device time
     decodeDeviceTime(position, parser);
+
+    // Ignore fix time if configured
     if (ignoreFixTime) {
         positions.clear();
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
