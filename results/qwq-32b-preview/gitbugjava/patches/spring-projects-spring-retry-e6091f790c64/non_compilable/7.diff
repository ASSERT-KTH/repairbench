diff --git a/tmp/d9338269-8e3e-4060-917b-5197af1bf7d5_buggy.java b/tmp/e5e82d20-f842-4e08-ba6f-5d09b796566e_fixed.java
index b8e3fa3..449677a 100644
--- a/tmp/d9338269-8e3e-4060-917b-5197af1bf7d5_buggy.java
+++ b/tmp/e5e82d20-f842-4e08-ba6f-5d09b796566e_fixed.java
@@ -1,65 +1,76 @@
-	/**
-	 * Builds the {@link BackOffPolicy} with the given parameters.
-	 * @return the {@link BackOffPolicy} instance
-	 */
 public BackOffPolicy build() {
-		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
+    // Check if multiplier is set (either through a fixed value or a supplier)
+    if ((this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null) {
         ExponentialBackOffPolicy policy;
+        // Decide between random and non-random exponential backoff
         if (Boolean.TRUE.equals(this.random)) {
             policy = new ExponentialRandomBackOffPolicy();
-			}
-			else {
+        } else {
             policy = new ExponentialBackOffPolicy();
         }
+        // Set initial interval if provided
         if (this.delay != null) {
             policy.setInitialInterval(this.delay);
         }
+        // Set initial interval supplier if provided
         if (this.delaySupplier != null) {
             policy.initialIntervalSupplier(this.delaySupplier);
         }
+        // Set multiplier if provided
         if (this.multiplier != null) {
             policy.setMultiplier(this.multiplier);
         }
+        // Set multiplier supplier if provided
         if (this.multiplierSupplier != null) {
             policy.multiplierSupplier(this.multiplierSupplier);
         }
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
-			}
-			if (this.maxDelaySupplier != null) {
-				policy.maxIntervalSupplier(this.maxDelaySupplier);
-			}
-			if (this.sleeper != null) {
-				policy.setSleeper(this.sleeper);
-			}
-			return policy;
-		}
+        // Set max interval if both delay and maxDelay are provided and delay is not greater than maxDelay
         if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
+            policy.setMaxInterval(this.maxDelay);
+        } else if (this.maxDelay != null) {
+            // If maxDelay is provided but not greater than delay, set it directly
+            policy.setMaxInterval(this.maxDelay);
+        } else {
+            // Otherwise, use the default max interval
+            policy.setMaxInterval(ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+        }
+        // Set max interval supplier if provided
+        if (this.maxDelaySupplier != null) {
+            policy.maxIntervalSupplier(this.maxDelaySupplier);
+        }
+        // Set sleeper if provided
+        if (this.sleeper != null) {
+            policy.setSleeper(this.sleeper);
+        }
+        return policy;
+    } else if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
+        // Create uniform random backoff policy if maxDelay > delay and no multiplier is set
         UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
         if (this.delay != null) {
             policy.setMinBackOffPeriod(this.delay);
         }
         if (this.delaySupplier != null) {
             policy.minBackOffPeriodSupplier(this.delaySupplier);
         }
         if (this.maxDelay != null) {
             policy.setMaxBackOffPeriod(this.maxDelay);
         }
         if (this.maxDelaySupplier != null) {
             policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
         }
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
-		}
+    } else {
+        // Fallback to fixed backoff policy
         FixedBackOffPolicy policy = new FixedBackOffPolicy();
         if (this.delay != null) {
             policy.setBackOffPeriod(this.delay);
         }
         if (this.sleeper != null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
     }
+}
\ No newline at end of file
