diff --git a/tmp/cb94d2ed-06bc-484d-9218-240285878dcb_buggy.java b/tmp/d9b931bf-f1b6-4b64-badc-b91cf8b966b7_fixed.java
index b8e3fa3..1d5ca42 100644
--- a/tmp/cb94d2ed-06bc-484d-9218-240285878dcb_buggy.java
+++ b/tmp/d9b931bf-f1b6-4b64-badc-b91cf8b966b7_fixed.java
@@ -1,65 +1,90 @@
-	/**
-	 * Builds the {@link BackOffPolicy} with the given parameters.
-	 * @return the {@link BackOffPolicy} instance
-	 */
 public BackOffPolicy build() {
     if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
         ExponentialBackOffPolicy policy;
-			if (Boolean.TRUE.equals(this.random)) {
+        if (this.random != null && this.random) {
             policy = new ExponentialRandomBackOffPolicy();
-			}
-			else {
+        } else {
             policy = new ExponentialBackOffPolicy();
         }
+        setCommonProperties(policy);
+        setExponentialProperties(policy);
+        return policy;
+    } else if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
+        UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+        setCommonProperties(policy);
+        setUniformProperties(policy);
+        return policy;
+    } else {
+        FixedBackOffPolicy policy = new FixedBackOffPolicy();
+        setCommonProperties(policy);
+        setFixedProperties(policy);
+        return policy;
+    }
+}
+
+private void setCommonProperties(BackOffPolicy policy) {
     if (this.delay != null) {
-				policy.setInitialInterval(this.delay);
+        setDelay(policy, this.delay);
     }
     if (this.delaySupplier != null) {
-				policy.initialIntervalSupplier(this.delaySupplier);
+        setDelaySupplier(policy, this.delaySupplier);
     }
+    if (this.sleeper != null) {
+        policy.setSleeper(this.sleeper);
+    }
+}
+
+private void setExponentialProperties(ExponentialBackOffPolicy policy) {
     if (this.multiplier != null) {
         policy.setMultiplier(this.multiplier);
     }
     if (this.multiplierSupplier != null) {
         policy.multiplierSupplier(this.multiplierSupplier);
     }
     if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+        long maxInterval = this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL;
+        policy.setMaxInterval(maxInterval);
     }
     if (this.maxDelaySupplier != null) {
         policy.maxIntervalSupplier(this.maxDelaySupplier);
     }
-			if (this.sleeper != null) {
-				policy.setSleeper(this.sleeper);
 }
-			return policy;
-		}
-		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
-			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+
+private void setUniformProperties(UniformRandomBackOffPolicy policy) {
     if (this.delay != null) {
         policy.setMinBackOffPeriod(this.delay);
     }
     if (this.delaySupplier != null) {
         policy.minBackOffPeriodSupplier(this.delaySupplier);
     }
     if (this.maxDelay != null) {
         policy.setMaxBackOffPeriod(this.maxDelay);
     }
     if (this.maxDelaySupplier != null) {
         policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
     }
-			if (this.sleeper != null) {
-				policy.setSleeper(this.sleeper);
 }
-			return policy;
-		}
-		FixedBackOffPolicy policy = new FixedBackOffPolicy();
+
+private void setFixedProperties(FixedBackOffPolicy policy) {
     if (this.delay != null) {
         policy.setBackOffPeriod(this.delay);
     }
-		if (this.sleeper != null) {
-			policy.setSleeper(this.sleeper);
 }
-		return policy;
+
+private void setDelay(BackOffPolicy policy, Long delay) {
+    if (policy instanceof ExponentialBackOffPolicy) {
+        ((ExponentialBackOffPolicy) policy).setInitialInterval(delay);
+    } else if (policy instanceof UniformRandomBackOffPolicy) {
+        ((UniformRandomBackOffPolicy) policy).setMinBackOffPeriod(delay);
+    } else if (policy instanceof FixedBackOffPolicy) {
+        ((FixedBackOffPolicy) policy).setBackOffPeriod(delay);
+    }
+}
+
+private void setDelaySupplier(BackOffPolicy policy, Supplier<Long> delaySupplier) {
+    if (policy instanceof ExponentialBackOffPolicy) {
+        ((ExponentialBackOffPolicy) policy).initialIntervalSupplier(delaySupplier);
+    } else if (policy instanceof UniformRandomBackOffPolicy) {
+        ((UniformRandomBackOffPolicy) policy).minBackOffPeriodSupplier(delaySupplier);
+    }
 }
\ No newline at end of file
