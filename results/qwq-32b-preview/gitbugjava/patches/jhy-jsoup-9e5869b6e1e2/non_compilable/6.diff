diff --git a/tmp/56fb6303-86b6-42a7-a6e8-19bf8f3fa780_buggy.java b/tmp/34996267-382e-4959-a0af-bbf9996c3570_fixed.java
index 0583946..3568263 100644
--- a/tmp/56fb6303-86b6-42a7-a6e8-19bf8f3fa780_buggy.java
+++ b/tmp/34996267-382e-4959-a0af-bbf9996c3570_fixed.java
@@ -1,30 +1,41 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
         )
             indent(accum, depth, out);
     }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+    // When normalizing whitespace, ensure that leading and trailing spaces are handled correctly
+    String value = coreValue();
+    if (normaliseWhite) {
+        if (trimLeading) {
+            value = value.stripLeading();
+        }
+        if (trimTrailing) {
+            value = value.stripTrailing();
+        }
+    }
+
+    Entities.escape(accum, value, out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
