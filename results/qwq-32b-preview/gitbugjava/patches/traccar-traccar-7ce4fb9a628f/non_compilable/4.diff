diff --git a/tmp/f31b1290-66c5-4c1d-997e-84894acb746f_buggy.java b/tmp/68b3bf97-87ea-43c1-b7b4-e206f1dabe14_fixed.java
index 2b96a40..1562851 100644
--- a/tmp/f31b1290-66c5-4c1d-997e-84894acb746f_buggy.java
+++ b/tmp/68b3bf97-87ea-43c1-b7b4-e206f1dabe14_fixed.java
@@ -1,101 +1,241 @@
 protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {
 
     Parser parser = new Parser(PATTERN_POSITION, content);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int event = parser.nextInt();
     String eventData = parser.next();
     position.set(Position.KEY_EVENT, event);
     if (event == 53) {
         position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);
     } else {
         position.set(Position.KEY_ALARM, decodeAlarm(event));
     }
 
     position.setTime(parser.nextDateTime());
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextDouble());
     position.setLongitude(parser.nextDouble());
 
-        position.set(Position.KEY_SATELLITES, parser.nextInt());
-        position.set(Position.KEY_HDOP, parser.nextDouble());
+    try {
+        int satellites = parser.nextInt();
+        if (satellites >= 0 && satellites <= 30) {
+            position.set(Position.KEY_SATELLITES, satellites);
+        } else {
+            position.set(Position.KEY_SATELLITES, 0);
+        }
+    } catch (NumberFormatException e) {
+        position.set(Position.KEY_SATELLITES, 0);
+    }
 
-        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
-        position.setCourse(parser.nextInt());
-        position.setAltitude(parser.nextInt());
+    try {
+        double hdop = parser.nextDouble();
+        if (hdop >= 0.5 && hdop <= 20.0) {
+            position.set(Position.KEY_HDOP, hdop);
+        } else {
+            position.set(Position.KEY_HDOP, 0.0);
+        }
+    } catch (NumberFormatException e) {
+        position.set(Position.KEY_HDOP, 0.0);
+    }
 
-        position.set(Position.KEY_ODOMETER, parser.nextInt());
+    try {
+        int speed = parser.nextInt();
+        position.setSpeed(UnitsConverter.knotsFromKph(speed));
+    } catch (NumberFormatException e) {
+        position.setSpeed(0.0);
+    }
 
-        position.setNetwork(new Network(CellTower.from(
-                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), parser.nextInt())));
+    try {
+        int course = parser.nextInt();
+        position.setCourse(course);
+    } catch (NumberFormatException e) {
+        position.setCourse(0);
+    }
 
-        position.set(Position.KEY_STATUS, parser.nextHexInt());
+    try {
+        int altitude = parser.nextInt();
+        position.setAltitude(altitude);
+    } catch (NumberFormatException e) {
+        position.setAltitude(0);
+    }
 
+    try {
+        int odometer = parser.nextInt();
+        position.set(Position.KEY_ODOMETER, odometer);
+    } catch (NumberFormatException e) {
+        position.set(Position.KEY_ODOMETER, 0);
+    }
+
+    try {
+        int cellTower1 = parser.nextInt();
+        int cellTower2 = parser.nextInt();
+        int cellTower3 = parser.nextHexInt();
+        int cellTower4 = parser.nextHexInt();
+        int cellTower5 = parser.nextInt();
+        position.setNetwork(new Network(CellTower.from(cellTower1, cellTower2, cellTower3, cellTower4, cellTower5)));
+    } catch (NumberFormatException e) {
+        // Handle or log the error appropriately
+    }
+
+    try {
+        int status = parser.nextHexInt();
+        position.set(Position.KEY_STATUS, status);
+    } catch (NumberFormatException e) {
+        position.set(Position.KEY_STATUS, 0);
+    }
+
+    try {
         int input = parser.nextHexInt();
         int output = parser.nextHexInt();
         position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));
         position.set(Position.KEY_DOOR, BitUtil.check(input, 2));
         position.set(Position.KEY_INPUT, input);
         position.set(Position.KEY_OUTPUT, output);
+    } catch (NumberFormatException e) {
+        // Handle or log the error appropriately
+    }
 
-        position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);
-        position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);
+    try {
+        double power = parser.nextHexInt() * 0.01;
+        position.set(Position.KEY_POWER, power);
+    } catch (NumberFormatException e) {
+        position.set(Position.KEY_POWER, 0.0);
+    }
+
+    try {
+        double battery = parser.nextHexInt() * 0.01;
+        position.set(Position.KEY_BATTERY, battery);
+    } catch (NumberFormatException e) {
+        position.set(Position.KEY_BATTERY, 0.0);
+    }
 
     if (parser.hasNext()) {
         String[] adc = parser.next().split("\\|");
         for (int i = 1; i < adc.length; i++) {
-                position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);
+            try {
+                int value = Integer.parseInt(adc[i], 16);
+                position.set(Position.PREFIX_ADC + (i + 1), value * 0.01);
+            } catch (NumberFormatException e) {
+                // Handle or log the error appropriately
+            }
         }
     }
 
     if (parser.hasNext()) {
         String[] fuels = parser.next().split("\\|");
         for (String fuel : fuels) {
+            try {
                 int index = Integer.parseInt(fuel.substring(0, 2));
                 int value = Integer.parseInt(fuel.substring(2), 16);
                 position.set("fuel" + index, value * 0.1);
+            } catch (NumberFormatException e) {
+                // Handle or log the error appropriately
+            }
         }
     }
 
     if (parser.hasNext()) {
         String[] temperatures = parser.next().split("\\|");
         for (String temperature : temperatures) {
+            try {
                 int index = Integer.parseInt(temperature.substring(0, 2));
                 int value = Integer.parseInt(temperature.substring(2), 16);
                 double convertedValue = BitUtil.to(value, 15);
                 if (BitUtil.check(value, 15)) {
                     convertedValue = -convertedValue;
                 }
                 position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);
+            } catch (NumberFormatException e) {
+                // Handle or log the error appropriately
+            }
         }
     }
 
     if (parser.hasNextAny(9)) {
-            position.set(Position.KEY_RPM, parser.nextInt());
-            position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());
-            position.set("airFlow", parser.nextInt());
-            position.set("airPressure", parser.nextInt());
+        try {
+            int rpm = parser.nextInt();
+            position.set(Position.KEY_RPM, rpm);
+        } catch (NumberFormatException e) {
+            position.set(Position.KEY_RPM, 0);
+        }
+
+        try {
+            int engineLoad = parser.nextInt();
+            position.set(Position.KEY_ENGINE_LOAD, engineLoad);
+        } catch (NumberFormatException e) {
+            position.set(Position.KEY_ENGINE_LOAD, 0);
+        }
+
+        try {
+            int airFlow = parser.nextInt();
+            position.set("airFlow", airFlow);
+        } catch (NumberFormatException e) {
+            position.set("airFlow", 0);
+        }
+
+        try {
+            int airPressure = parser.nextInt();
+            position.set("airPressure", airPressure);
+        } catch (NumberFormatException e) {
+            position.set("airPressure", 0);
+        }
+
         if (parser.hasNext()) {
-                position.set("airTemp", parser.nextInt() - 40);
+            try {
+                int airTemp = parser.nextInt() - 40;
+                position.set("airTemp", airTemp);
+            } catch (NumberFormatException e) {
+                position.set("airTemp", 0);
+            }
         }
-            position.set(Position.KEY_THROTTLE, parser.nextInt());
+
+        try {
+            int throttle = parser.nextInt();
+            position.set(Position.KEY_THROTTLE, throttle);
+        } catch (NumberFormatException e) {
+            position.set(Position.KEY_THROTTLE, 0);
+        }
+
         if (parser.hasNext()) {
-                position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);
+            try {
+                int coolantTemp = parser.nextInt() - 40;
+                position.set(Position.KEY_COOLANT_TEMP, coolantTemp);
+            } catch (NumberFormatException e) {
+                position.set(Position.KEY_COOLANT_TEMP, 0);
             }
+        }
+
         if (parser.hasNext()) {
-                position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);
+            try {
+                double fuelConsumption = parser.nextInt() * 0.1;
+                position.set(Position.KEY_FUEL_CONSUMPTION, fuelConsumption);
+            } catch (NumberFormatException e) {
+                position.set(Position.KEY_FUEL_CONSUMPTION, 0.0);
+            }
+        }
+
+        try {
+            int fuelLevel = parser.nextInt();
+            position.set(Position.KEY_FUEL_LEVEL, fuelLevel);
+        } catch (NumberFormatException e) {
+            position.set(Position.KEY_FUEL_LEVEL, 0);
         }
-            position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());
     }
 
     if (parser.hasNext()) {
-            position.set(Position.KEY_HOURS, parser.nextInt() * 1000L);
+        try {
+            long hours = parser.nextInt() * 1000L;
+            position.set(Position.KEY_HOURS, hours);
+        } catch (NumberFormatException e) {
+            position.set(Position.KEY_HOURS, 0L);
+        }
     }
 
     return position;
 }
\ No newline at end of file
