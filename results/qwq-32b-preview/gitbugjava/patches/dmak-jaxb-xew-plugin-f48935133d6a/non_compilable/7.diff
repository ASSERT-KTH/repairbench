diff --git a/tmp/cd9ffb54-f09a-4cdb-81c9-3190f0fa6c12_buggy.java b/tmp/4681fbcb-91cc-4842-8cda-4cad9106307a_fixed.java
index 47a8941..08a01de 100644
--- a/tmp/cd9ffb54-f09a-4cdb-81c9-3190f0fa6c12_buggy.java
+++ b/tmp/4681fbcb-91cc-4842-8cda-4cad9106307a_fixed.java
@@ -1,53 +1,76 @@
 /**
  * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
     // Modify the container so it now refers the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
+    // Remove the class from its current parent's classes map
+    Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+    parentClasses.remove(clazz.name());
+
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
         // In this scenario class should have "static" modifier reset otherwise it won't compile:
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
                 // FIXME: Inner class is always a local declaration.
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
 
                 break;
             }
         }
     }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+    // Generate a unique name for the class if there's a naming conflict
+    String originalName = clazz.name();
+    String uniqueName = generateUniqueName(classes, originalName);
+    if (!uniqueName.equals(originalName)) {
+        writeSummary("\tRenaming class " + clazz.fullName() + " to " + uniqueName);
+        setPrivateField(clazz, "name", uniqueName);
     }
 
-		classes.put(clazz.name(), clazz);
+    // Add the class to the grandparent's classes map
+    classes.put(uniqueName, clazz);
 
     // Finally modify the class so that it refers back the container:
     setPrivateField(clazz, "outer", grandParent);
 }
+
+/**
+ * Generates a unique name for the class based on the provided classes map.
+ * 
+ * @param classes   The map of classes in the container.
+ * @param originalName The original name of the class.
+ * @return A unique name for the class.
+ */
+private String generateUniqueName(Map<String, JDefinedClass> classes, String originalName) {
+    String name = originalName;
+    int counter = 1;
+    while (classes.containsKey(name)) {
+        name = originalName + "_" + counter++;
+    }
+    return name;
+}
\ No newline at end of file
