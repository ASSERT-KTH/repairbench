diff --git a/tmp/16225ced-3ea6-41a0-8166-f0aa8a6b264c_buggy.java b/tmp/f4e73258-2154-4ae8-a898-96524bff2dde_fixed.java
index 47a8941..d90039e 100644
--- a/tmp/16225ced-3ea6-41a0-8166-f0aa8a6b264c_buggy.java
+++ b/tmp/f4e73258-2154-4ae8-a898-96524bff2dde_fixed.java
@@ -1,53 +1,93 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
-		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
-		JClassContainer grandParent = parent.parentContainer();
+    // Ensure that the clazz is indeed an inner class
+    if (!clazz.isNested()) {
+        throw new IllegalArgumentException("The provided class is not an inner class.");
+    }
+
+    // Modify the container so it now refers to the class. Container can be a class or package.
+    JClass parent = clazz.containingClass();
+    if (parent == null) {
+        throw new IllegalStateException("The parent class of " + clazz.fullName() + " is null.");
+    }
+    JClassContainer grandParent = parent.containingPackage();
+    if (grandParent == null) {
+        throw new IllegalStateException("The grandparent of " + clazz.fullName() + " is null.");
+    }
+
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
-		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
+    if (grandParent instanceof JDefinedClass) {
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
-			classes = getPrivateField(grandParentClass, "classes");
+        // Attempt to access private field "classes" in grandParentClass
+        try {
+            Field classesField = JDefinedClass.class.getDeclaredField("classes");
+            classesField.setAccessible(true);
+            classes = (Map<String, JDefinedClass>) classesField.get(grandParentClass);
+        } catch (NoSuchFieldException | IllegalAccessException e) {
+            throw new RuntimeException("Failed to access 'classes' field in JDefinedClass", e);
         }
-		else {
+    } else if (grandParent instanceof JPackage) {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
-			classes = getPrivateField(grandParentPackage, "classes");
+        // Attempt to access private field "classes" in grandParentPackage
+        try {
+            Field classesField = JPackage.class.getDeclaredField("classes");
+            classesField.setAccessible(true);
+            classes = (Map<String, JDefinedClass>) classesField.get(grandParentPackage);
+        } catch (NoSuchFieldException | IllegalAccessException e) {
+            throw new RuntimeException("Failed to access 'classes' field in JPackage", e);
+        }
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+        // In this scenario, the class should have its "static" modifier reset otherwise it won't compile:
+        clazz.mods().setStatic(false);
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
                 // FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
-					setPrivateField(sc, "anonymous", Boolean.FALSE);
+                assert sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal();
 
+                try {
+                    Field anonymousField = XSDeclaration.class.getDeclaredField("anonymous");
+                    anonymousField.setAccessible(true);
+                    anonymousField.setBoolean(sc, false);
+                } catch (NoSuchFieldException | IllegalAccessException e) {
+                    throw new RuntimeException("Failed to set 'anonymous' field in XSDeclaration", e);
+                }
                 break;
             }
         }
+    } else {
+        throw new IllegalArgumentException("Unexpected grandparent type: " + grandParent.getClass().getName());
     }
 
+    // Check for name collisions and rename if necessary
     if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+        String newName = parent.name() + clazz.name();
+        writeSummary("\tRenaming class " + clazz.fullName() + " to " + newName);
+        clazz.setName(newName);
     }
 
+    // Add the class to the grandparent's classes map
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
-		setPrivateField(clazz, "outer", grandParent);
+    // Finally, update the class's outer reference to the grandparent
+    try {
+        Field outerField = JDefinedClass.class.getDeclaredField("outer");
+        outerField.setAccessible(true);
+        outerField.set(clazz, grandParent);
+    } catch (NoSuchFieldException | IllegalAccessException e) {
+        throw new RuntimeException("Failed to set 'outer' field in JDefinedClass", e);
+    }
 }
\ No newline at end of file
