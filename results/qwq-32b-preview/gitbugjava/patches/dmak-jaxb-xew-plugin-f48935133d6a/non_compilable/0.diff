diff --git a/tmp/88821a4f-8630-4323-83f5-f752151c2f9a_buggy.java b/tmp/edb9b267-82a3-4071-9215-0060758de9f0_fixed.java
index 47a8941..2669380 100644
--- a/tmp/88821a4f-8630-4323-83f5-f752151c2f9a_buggy.java
+++ b/tmp/edb9b267-82a3-4071-9215-0060758de9f0_fixed.java
@@ -1,53 +1,55 @@
-	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
-	 */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
-		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
-		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
-		Map<String, JDefinedClass> classes;
+    // Ensure the clazz is an inner class.
+    if (!clazz.isNested()) {
+        throw new IllegalArgumentException("The class must be an inner class.");
+    }
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
+    // Get the parent and grandparent containers.
+    JClass parent = clazz.container();
+    JClassContainer grandParent = parent.container();
+
+    // Determine the target container and handle accordingly.
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
-			classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+        // Logic for moving to a class container.
+        // Ensure the class is nested properly.
+        setPrivateField(clazz, "outer", grandParentClass);
+        // Possibly set as non-static if needed.
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
-
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
-			classes = getPrivateField(grandParentPackage, "classes");
-
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+        // Logic for moving to a package.
+        // Ensure the class name is unique in the package.
+        String baseName = clazz.name();
+        String newName = baseName;
+        int suffixNumber = 1;
+        Map<String, JDefinedClass> classes = getPrivateField(grandParentPackage, "classes");
+        while (classes.containsKey(newName)) {
+            newName = baseName + suffixNumber++;
+        }
+        if (!newName.equals(baseName)) {
+            writeSummary("\tRenaming class " + clazz.fullName() + " to " + newName);
+            setPrivateField(clazz, "name", newName);
+        }
+        // Remove static modifier if necessary.
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
-
+        // Update schema component if needed.
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
                     setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+                }
                 break;
             }
         }
     }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
-		}
-
-		classes.put(clazz.name(), clazz);
-
-		// Finally modify the class so that it refers back the container:
+    // Update the class's container reference.
     setPrivateField(clazz, "outer", grandParent);
+
+    // Add the class to the grandparent's classes map.
+    Map<String, JDefinedClass> classes = getPrivateField(grandParent, "classes");
+    classes.put(clazz.name(), clazz);
 }
\ No newline at end of file
