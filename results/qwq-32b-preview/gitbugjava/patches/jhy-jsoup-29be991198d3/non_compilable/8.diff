diff --git a/tmp/130c3d3f-a697-43a9-a012-b7997b19369c_buggy.java b/tmp/71ca63b5-492a-433d-a1ba-3bcadbc11e47_fixed.java
index 862c60c..85b445b 100644
--- a/tmp/130c3d3f-a697-43a9-a012-b7997b19369c_buggy.java
+++ b/tmp/71ca63b5-492a-433d-a1ba-3bcadbc11e47_fixed.java
@@ -1,25 +1,36 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
+        // Adjust leading trim condition
+        trimLeading = (siblingIndex == 0 && parent != null && (parent.tag().isBlock() || parent.tag().isSelfClosing())) ||
                 parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+        // Adjust trailing trim condition
+        trimTrailing = nextSibling() == null && parent != null && (parent.tag().isBlock() || parent.tag().isSelfClosing());
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // Handle <br> specifically
         Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        if (next instanceof Element && ((Element) next).tagName().equals("br")) {
+            trimTrailing = true;
+        }
+        Node prev = this.previousSibling();
+        if (prev instanceof Element && ((Element) prev).tagName().equals("br")) {
+            trimLeading = true;
+        }
+
+        // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) ||
+                (next instanceof TextNode && ((TextNode) next).isBlank()); // next is blank text, from re-parenting
         if (couldSkip && isBlank()) return;
 
         if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank()))
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
