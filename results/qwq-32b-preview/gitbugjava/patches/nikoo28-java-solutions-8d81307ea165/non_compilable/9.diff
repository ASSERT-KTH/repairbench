diff --git a/tmp/98363c01-dfd8-470c-890b-1a32e46dea5b_buggy.java b/tmp/b1bc6725-aa30-424b-a11a-fd3ae465538b_fixed.java
index 9739964..3653a86 100644
--- a/tmp/98363c01-dfd8-470c-890b-1a32e46dea5b_buggy.java
+++ b/tmp/b1bc6725-aa30-424b-a11a-fd3ae465538b_fixed.java
@@ -1,27 +1,28 @@
 public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
-      while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+      
+      // Pop elements from the stack while the top element is less than current price
+      while (!indexStack.isEmpty() && prices[indexStack.peek()] <= prices[i])
         indexStack.pop();
       
-      // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
+      // Span is calculated based on the previous greater element's index
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
         spans[i] = i - indexStack.peek();
       
+      // Push the current index onto the stack
       indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
