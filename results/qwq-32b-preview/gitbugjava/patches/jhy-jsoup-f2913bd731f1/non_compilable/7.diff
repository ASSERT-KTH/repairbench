diff --git a/tmp/4a11169b-b365-45d9-9fe8-5e7291f958da_buggy.java b/tmp/e5f20cfb-d9d4-488f-9959-c4dbf0d5cb08_fixed.java
index 016a7f6..7e12f86 100644
--- a/tmp/4a11169b-b365-45d9-9fe8-5e7291f958da_buggy.java
+++ b/tmp/e5f20cfb-d9d4-488f-9959-c4dbf0d5cb08_fixed.java
@@ -1,29 +1,33 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
-        boolean trimLeading = false, trimTrailing = false;
+
+    boolean trimLeading = (trimLikeBlock && siblingIndex == 0) ||
+                          (parentNode instanceof Document) ||
+                          (siblingIndex > 0 && previousSibling() != null && previousSibling().isBlock());
+    boolean trimTrailing = trimLikeBlock && nextSibling() == null ||
+                           (nextSibling() != null && nextSibling().isBlock());
 
     if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // Skip blank text nodes when the next node will cause an indent
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) ||
+                            (next instanceof TextNode && ((TextNode) next).isBlank());
         if (couldSkip && isBlank) return;
 
+        // Indent based on various conditions
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
         )
             indent(accum, depth, out);
     }
 
+    // Output the escaped text with trimming options
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
