diff --git a/tmp/715f1dc2-b978-4373-bf64-4f25a97998e2_buggy.java b/tmp/cd1f5167-d68e-45db-913f-ff9ed4662ba8_fixed.java
index 2444d12..86cc7a6 100644
--- a/tmp/715f1dc2-b978-4373-bf64-4f25a97998e2_buggy.java
+++ b/tmp/cd1f5167-d68e-45db-913f-ff9ed4662ba8_fixed.java
@@ -1,29 +1,41 @@
+import java.util.Scanner;
+import java.util.Stack;
+
+public class StackPostfixNotation {
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
         Scanner tokens = new Scanner(exp);
 
         while (tokens.hasNext()) {
             if (tokens.hasNextInt()) {
                 s.push(tokens.nextInt()); // If int then push to stack
             } else { // else pop top two values and perform the operation
+                if (s.size() < 2) {
+                    throw new IllegalArgumentException("exp is not a proper postfix expression.");
+                }
                 int num2 = s.pop();
                 int num1 = s.pop();
                 String op = tokens.next();
 
                 switch (op) {
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
+                    case "/" -> {
+                        if (num2 == 0) {
+                            throw new IllegalArgumentException("Division by zero.");
+                        }
+                        s.push(num1 / num2);
+                    }
                     default -> throw new IllegalArgumentException("exp contains an unknown operation.");
                 }
-                //  "+", "-", "*", "/"
             }
         }
         tokens.close();
         if (s.size() != 1) {
             throw new IllegalArgumentException("exp is not a proper postfix expression.");
         }
         return s.pop();
     }
+}
\ No newline at end of file
