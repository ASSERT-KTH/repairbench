diff --git a/tmp/056e5dac-92c9-42cc-a2e4-1f3ad98a83f2_buggy.java b/tmp/97dcd067-1875-477e-b6e2-cb5f15205bc1_fixed.java
index 2444d12..88123bb 100644
--- a/tmp/056e5dac-92c9-42cc-a2e4-1f3ad98a83f2_buggy.java
+++ b/tmp/97dcd067-1875-477e-b6e2-cb5f15205bc1_fixed.java
@@ -1,29 +1,42 @@
+import java.util.Stack;
+import java.util.Scanner;
+
+public class StackPostfixNotation {
+
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
-        Stack<Integer> s = new Stack<Integer>();
-        Scanner tokens = new Scanner(exp);
-
+        Stack<Integer> s = new Stack<>();
+        try (Scanner tokens = new Scanner(exp)) {
             while (tokens.hasNext()) {
                 if (tokens.hasNextInt()) {
                     s.push(tokens.nextInt()); // If int then push to stack
                 } else { // else pop top two values and perform the operation
+                    String op = tokens.next();
+                    if (s.size() < 2) {
+                        throw new IllegalArgumentException("Too few arguments for operator: " + op);
+                    }
                     int num2 = s.pop();
                     int num1 = s.pop();
-                String op = tokens.next();
 
                     switch (op) {
                         case "+" -> s.push(num1 + num2);
                         case "-" -> s.push(num1 - num2);
                         case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
+                        case "/" -> {
+                            if (num2 == 0) {
+                                throw new IllegalArgumentException("Division by zero.");
+                            }
+                            s.push(num1 / num2);
+                        }
                         default -> throw new IllegalArgumentException("exp contains an unknown operation.");
                     }
-                //  "+", "-", "*", "/"
                 }
             }
-        tokens.close();
+        }
+
         if (s.size() != 1) {
             throw new IllegalArgumentException("exp is not a proper postfix expression.");
         }
         return s.pop();
     }
+}
\ No newline at end of file
