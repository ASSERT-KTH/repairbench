diff --git a/tmp/f2bd1723-93a8-4aef-943d-6feaab08e20a_buggy.java b/tmp/eaf4e066-01c7-4c37-911f-ace484e499be_fixed.java
index 2444d12..f405d80 100644
--- a/tmp/f2bd1723-93a8-4aef-943d-6feaab08e20a_buggy.java
+++ b/tmp/eaf4e066-01c7-4c37-911f-ace484e499be_fixed.java
@@ -1,29 +1,40 @@
-    // Evaluates the given postfix expression string and returns the result.
 public static int postfixEvaluate(final String exp) {
-        Stack<Integer> s = new Stack<Integer>();
+    Stack<Integer> s = new Stack<>();
     Scanner tokens = new Scanner(exp);
 
     while (tokens.hasNext()) {
         if (tokens.hasNextInt()) {
             s.push(tokens.nextInt()); // If int then push to stack
         } else { // else pop top two values and perform the operation
+            // Check if there are at least two operands on the stack
+            if (s.size() < 2) {
+                throw new IllegalArgumentException("exp is not a proper postfix expression.");
+            }
             int num2 = s.pop();
             int num1 = s.pop();
             String op = tokens.next();
 
             switch (op) {
-                    case "+" -> s.push(num1 + num2);
-                    case "-" -> s.push(num1 - num2);
-                    case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                case "+":
+                    s.push(num1 + num2);
+                    break;
+                case "-":
+                    s.push(num1 - num2);
+                    break;
+                case "*":
+                    s.push(num1 * num2);
+                    break;
+                case "/":
+                    s.push(num1 / num2);
+                    break;
+                default:
+                    throw new IllegalArgumentException("exp contains an unknown operation.");
             }
-                //  "+", "-", "*", "/"
         }
     }
     tokens.close();
     if (s.size() != 1) {
         throw new IllegalArgumentException("exp is not a proper postfix expression.");
     }
     return s.pop();
 }
\ No newline at end of file
