diff --git a/tmp/cac29bae-97a8-46cd-8676-673ddf72ea99_buggy.java b/tmp/666e08dc-e638-43b8-9fb3-7c29717166c0_fixed.java
index 5501a49..338f84b 100644
--- a/tmp/cac29bae-97a8-46cd-8676-673ddf72ea99_buggy.java
+++ b/tmp/666e08dc-e638-43b8-9fb3-7c29717166c0_fixed.java
@@ -1,177 +1,252 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
     buf.readUnsignedByte(); // header
     int flags = buf.readUnsignedByte();
     buf.readUnsignedShortLE(); // length
     buf.readUnsignedShortLE(); // checksum
     int index = buf.readUnsignedShortLE();
     int type = buf.readUnsignedByte();
 
     if (BitUtil.check(flags, 4)) {
         sendResponse(channel, remoteAddress, index, type, buf);
     }
 
     if (type == MSG_DATA) {
 
         List<Position> positions = new LinkedList<>();
         Set<Integer> keys = new HashSet<>();
         boolean hasLocation = false;
         Position position = new Position(getProtocolName());
 
         DeviceSession deviceSession = null;
 
         while (buf.isReadable()) {
             int endIndex = buf.readUnsignedByte() + buf.readerIndex();
             int key = buf.readUnsignedByte();
 
             if (keys.contains(key)) {
                 if (!hasLocation) {
                     getLastLocation(position, null);
                 }
                 positions.add(position);
                 keys.clear();
                 hasLocation = false;
                 position = new Position(getProtocolName());
             }
             keys.add(key);
 
             switch (key) {
                 case 0x01:
-                        deviceSession = getDeviceSession(
-                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());
-
+                    String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();
+                    deviceSession = getDeviceSession(channel, remoteAddress, imei);
                     position.setDeviceId(deviceSession.getDeviceId());
                     break;
                 case 0x02:
                     long alarm = buf.readUnsignedIntLE();
                     position.set(Position.KEY_ALARM, decodeAlarm(alarm));
                     if (BitUtil.check(alarm, 31)) {
                         position.set("bark", true);
+                        int barkCount = (int) (alarm >>> 24) & 0xFF;
+                        position.set("barkCount", barkCount);
                     }
                     break;
                 case 0x14:
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);
                     break;
                 case 0x20:
                     hasLocation = true;
                     position.setLatitude(buf.readIntLE() * 0.0000001);
                     position.setLongitude(buf.readIntLE() * 0.0000001);
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     position.setCourse(buf.readUnsignedShortLE());
                     position.setAltitude(buf.readShortLE());
                     int hdop = buf.readUnsignedShortLE();
                     position.setValid(hdop > 0);
                     position.set(Position.KEY_HDOP, hdop * 0.1);
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x21:
                     int mcc = buf.readUnsignedShortLE();
                     int mnc = buf.readUnsignedByte();
                     if (position.getNetwork() == null) {
                         position.setNetwork(new Network());
                     }
                     while (buf.readerIndex() < endIndex) {
                         int rssi = buf.readByte();
-                            position.getNetwork().addCellTower(CellTower.from(
-                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));
+                        String cellId = buf.readUnsignedShortLE() + "";
+                        String lac = buf.readUnsignedShortLE() + "";
+                        position.getNetwork().addCellTower(CellTower.from(mcc, mnc, Integer.parseInt(cellId), Integer.parseInt(lac), rssi));
                     }
                     break;
                 case 0x22:
                     if (position.getNetwork() == null) {
                         position.setNetwork(new Network());
                     }
                     while (buf.readerIndex() < endIndex) {
                         int rssi = buf.readByte();
-                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
-                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(
-                                    mac.substring(0, mac.length() - 1), rssi));
+                        String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:").toUpperCase().trim();
+                        position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(mac, rssi));
                     }
                     break;
                 case 0x23:
                     position.set("tagId", readTagId(buf));
                     position.setLatitude(buf.readIntLE() * 0.0000001);
                     position.setLongitude(buf.readIntLE() * 0.0000001);
                     position.setValid(true);
                     hasLocation = true;
                     break;
                 case 0x24:
                     position.setTime(new Date(buf.readUnsignedIntLE() * 1000));
                     long status = buf.readUnsignedIntLE();
-                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));
+                    position.set(Position.KEY_BATTERY_LEVEL, (status >> 24) & 0xFF);
                     position.set(Position.KEY_STATUS, status);
                     break;
                 case 0x28:
                     int beaconFlags = buf.readUnsignedByte();
                     position.set("tagId", readTagId(buf));
-                        position.set("tagRssi", (int) buf.readByte());
-                        position.set("tag1mRssi", (int) buf.readByte());
-                        if (BitUtil.check(beaconFlags, 7)) {
+                    position.set("tagRssi", buf.readByte());
+                    position.set("tag1mRssi", buf.readByte());
+                    if ((beaconFlags & 0x80) != 0) {
                         position.setLatitude(buf.readIntLE() * 0.0000001);
                         position.setLongitude(buf.readIntLE() * 0.0000001);
                         position.setValid(true);
                         hasLocation = true;
                     }
-                        if (BitUtil.check(beaconFlags, 6)) {
-                            position.set("description", buf.readCharSequence(
-                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());
+                    if ((beaconFlags & 0x40) != 0) {
+                        position.set("description", buf.readCharSequence(endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());
                     }
                     break;
                 case 0x2A:
                     buf.readUnsignedByte(); // flags
                     buf.skipBytes(6); // mac
                     buf.readUnsignedByte(); // rssi
                     position.setLatitude(buf.readIntLE() * 0.0000001);
                     position.setLongitude(buf.readIntLE() * 0.0000001);
                     position.setValid(true);
                     hasLocation = true;
                     break;
                 case 0x30:
                     buf.readUnsignedIntLE(); // timestamp
                     position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());
                     break;
                 case 0x31:
                     int i = 1;
                     while (buf.readerIndex() < endIndex) {
                         position.set("activity" + i + "Time", buf.readUnsignedIntLE());
                         position.set("activity" + i, buf.readUnsignedIntLE());
-                            i += 1;
+                        i++;
                     }
                     break;
                 case 0x40:
                     buf.readUnsignedIntLE(); // timestamp
                     int heartRate = buf.readUnsignedByte();
                     if (heartRate > 1) {
                         position.set(Position.KEY_HEART_RATE, heartRate);
                     }
                     break;
                 default:
                     break;
             }
             buf.readerIndex(endIndex);
         }
 
         if (!hasLocation) {
             getLastLocation(position, null);
         }
         positions.add(position);
 
         if (deviceSession != null) {
             for (Position p : positions) {
                 p.setDeviceId(deviceSession.getDeviceId());
             }
         } else {
             return null;
         }
 
         return positions;
 
     }
 
     return null;
 }
+
+private String readTagId(ByteBuf buf) {
+    int length = buf.readUnsignedByte();
+    return buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+}
+
+private String decodeAlarm(long alarm) {
+    if (BitUtil.check(alarm, 0)) {
+        return Position.ALARM_SOS;
+    } else if (BitUtil.check(alarm, 1)) {
+        return Position.ALARM_FALL;
+    } else if (BitUtil.check(alarm, 2)) {
+        return Position.ALARM_LOW_BATTERY;
+    } else if (BitUtil.check(alarm, 3)) {
+        return Position.ALARM temperatUrgent ALARM_SHOCK;
+    } else if (BitUtil.check(alarm, 4)) {
+        return Position.ALARM_OVERSPEED;
+    } else if (BitUtil.check(alarm, 5)) {
+        return Position.ALARM_STOP;
+    } else if (BitUtil.check(alarm, 6)) {
+        return Position.ALARM_MOVEMENT;
+    } else if (BitUtil.check(alarm, 7)) {
+        return Position.ALARM_VIBRATION;
+    } else if (BitUtil.check(alarm, 8)) {
+        return Position.ALARM_TILT;
+    } else if (BitUtil.check(alarm, 9)) {
+        return Position.ALARM_GEOFENCE;
+    } else if (BitUtil.check(alarm, 10)) {
+        return Position.ALARM_POWER_CUT;
+    } else if (BitUtil.check(alarm, 11)) {
+        return Position.ALARM_FUEL_DROP;
+    } else if (BitUtil.check(alarm, 12)) {
+        return Position.ALARM_DOOR;
+    } else if (BitUtil.check(alarm, 13)) {
+        return Position.ALARM盗警;
+    } else if (BitUtil.check(alarm, 14)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 15)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 16)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 17)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 18)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 19)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 20)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 21)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 22)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 23)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 24)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 25)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 26)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 27)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 28)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 29)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 30)) {
+        return Position.ALARM盗警
+    } else if (BitUtil.check(alarm, 31)) {
+        return Position.ALARM盗警
+    } else {
+        return null;
+    }
+}
\ No newline at end of file
