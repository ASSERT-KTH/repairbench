diff --git a/tmp/a35b796a-4fdc-4b81-8b86-8d6f84230a23_buggy.java b/tmp/0d3dd76e-06cc-45f1-8cea-fce35e48af0e_fixed.java
index ee599aa..44c1090 100644
--- a/tmp/a35b796a-4fdc-4b81-8b86-8d6f84230a23_buggy.java
+++ b/tmp/0d3dd76e-06cc-45f1-8cea-fce35e48af0e_fixed.java
@@ -1,50 +1,89 @@
 private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {
 
     int length = 0;
     if (hasLength) {
+        if (buf.readableBytes() < 1) {
+            return false;
+        }
         length = buf.readUnsignedByte();
         if (length == 0) {
+            if (buf.readableBytes() >= 45) {
                 boolean zeroedData = true;
-                for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {
+                for (int i = buf.readerIndex(); i < buf.readerIndex() + 45; i++) {
                     if (buf.getByte(i) != 0) {
                         zeroedData = false;
                         break;
                     }
                 }
                 if (zeroedData) {
-                    buf.skipBytes(Math.min(buf.readableBytes(), 45));
+                    buf.skipBytes(45);
+                    return false;
                 }
+            } else {
+                // Not enough bytes to check, consider it invalid
                 return false;
             }
         }
+    }
+
+    // Check if there are enough bytes to read mcc, mnc, lac, cid
+    if (buf.readableBytes() < 9) {
+        return false;
+    }
 
     int mcc = buf.readUnsignedShort();
     int mnc;
     if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {
+        if (buf.readableBytes() < 2) {
+            return false;
+        }
         mnc = buf.readUnsignedShort();
     } else {
+        if (buf.readableBytes() < 1) {
+            return false;
+        }
         mnc = buf.readUnsignedByte();
     }
     int lac;
     if (type == MSG_LBS_ALARM) {
+        if (buf.readableBytes() < 4) {
+            return false;
+        }
         lac = buf.readInt();
     } else {
+        if (buf.readableBytes() < 2) {
+            return false;
+        }
         lac = buf.readUnsignedShort();
     }
     long cid;
     if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
+        if (buf.readableBytes() < 8) {
+            return false;
+        }
         cid = buf.readLong();
     } else if (type == MSG_GPS_LBS_6) {
+        if (buf.readableBytes() < 4) {
+            return false;
+        }
         cid = buf.readUnsignedInt();
     } else {
+        if (buf.readableBytes() < 3) {
+            return false;
+        }
         cid = buf.readUnsignedMedium();
     }
 
+    // Validate the read values
+    if (mcc < 0 || mnc < 0 || lac < 0 || cid < 0) {
+        return false;
+    }
+
     position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));
 
     if (length > 9) {
-            buf.skipBytes(length - 9);
+        buf.skipBytes(Math.min(length - 9, buf.readableBytes()));
     }
 
     return true;
 }
\ No newline at end of file
