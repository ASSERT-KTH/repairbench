diff --git a/tmp/527dd67a-e650-4046-ae6b-25352bcd339c_buggy.java b/tmp/fba65042-77b8-4e23-ab99-203130dde058_fixed.java
index 7374e5f..0a27be1 100644
--- a/tmp/527dd67a-e650-4046-ae6b-25352bcd339c_buggy.java
+++ b/tmp/fba65042-77b8-4e23-ab99-203130dde058_fixed.java
@@ -1,61 +1,71 @@
 private Object decodeLocationNew(
         Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     String index = parser.next();
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
 
     position.setDeviceTime(parser.nextDateTime());
 
     Network network = new Network();
     network.addCellTower(CellTower.from(
             parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
     position.set(Position.KEY_BATTERY, parser.nextDouble());
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
-        if (parser.hasNext(5)) {
+    // Check if the next element is a double (speed in knots)
+    String speedStr = parser.next();
+    if (StringUtils.isNumber(speedStr)) {
+        double speedKnots = Double.parseDouble(speedStr);
+        position.setSpeed(UnitsConverter.knotsFromKph(speedKnots));
 
-            position.setValid(parser.next().equals("A"));
+        int satellites = parser.nextInt();
+        position.set(Position.KEY_SATELLITES, satellites);
+
+        double latitude = parser.nextDouble();
+        double longitude = parser.nextDouble();
+
+        position.setLatitude(latitude);
+        position.setLongitude(longitude);
+
+        position.setValid(true);
         position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
-            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
-            position.setLatitude(parser.nextDouble());
-            position.setLongitude(parser.nextDouble());
-
     } else {
-
-            String[] points = parser.next().split("\\|");
+        // Assume Wi-Fi data
+        String wifiData = speedStr;
+        String[] points = wifiData.split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
+            if (wifi.length == 2) {
                 String mac = wifi[0].replaceAll("(..)", "$1:");
-                network.addWifiAccessPoint(WifiAccessPoint.from(
-                        mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
+                int signal = Integer.parseInt(wifi[1]);
+                network.addWifiAccessPoint(WifiAccessPoint.from(mac.substring(0, mac.length() - 1), signal));
+            }
         }
-
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
