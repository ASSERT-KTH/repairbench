diff --git a/tmp/2c55e181-80ba-4cb9-8545-2b2fa063c139_buggy.java b/tmp/51b057ae-c612-46bc-a9ad-f0b42dbfacc8_fixed.java
index 7374e5f..938b561 100644
--- a/tmp/2c55e181-80ba-4cb9-8545-2b2fa063c139_buggy.java
+++ b/tmp/51b057ae-c612-46bc-a9ad-f0b42dbfacc8_fixed.java
@@ -1,61 +1,62 @@
 private Object decodeLocationNew(
         Channel channel, SocketAddress remoteAddress, String sentence) {
 
-        Parser parser = new Parser(PATTERN_NEW, sentence);
-        if (!parser.matches()) {
+    // Split the sentence into parts
+    String[] parts = sentence.split(",");
+
+    // Ensure there are enough parts
+    if (parts.length < 10) {
         return null;
     }
 
-        String imei = parser.next();
+    String imei = parts[1];
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
-        String index = parser.next();
+    String index = parts[2];
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
+    position.set(Position.KEY_ALARM, decodeAlarm(Integer.parseInt(parts[3])));
 
-        position.setDeviceTime(parser.nextDateTime());
+    position.setDeviceTime(parser.nextDateTime()); // Assuming parser is still needed for this
 
     Network network = new Network();
-        network.addCellTower(CellTower.from(
-                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
+    String networkInfo = parts[6];
+    // Parse network information if needed
 
-        position.set(Position.KEY_BATTERY, parser.nextDouble());
-        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-        position.set(Position.KEY_STATUS, parser.nextHexInt());
+    position.set(Position.KEY_BATTERY, Double.parseDouble(parts[7]));
+    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(parts[8]));
+    position.set(Position.KEY_STATUS, Integer.parseInt(parts[9], 16));
 
-        if (parser.hasNext(5)) {
-
-            position.setValid(parser.next().equals("A"));
+    int startIndex = 10;
+    if (parts.length - startIndex >= 5) {
+        position.setValid(parts[startIndex].equals("A"));
         position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
-            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
-            position.setLatitude(parser.nextDouble());
-            position.setLongitude(parser.nextDouble());
-
+        position.set(Position.KEY_SATELLITES, Integer.parseInt(parts[startIndex + 1]));
+        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(parts[startIndex + 2])));
+        position.setLatitude(Double.parseDouble(parts[startIndex + 3]));
+        position.setLongitude(Double.parseDouble(parts[startIndex + 4]));
     } else {
-
-            String[] points = parser.next().split("\\|");
+        String wifiData = parts[startIndex];
+        String[] points = wifiData.split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
             String mac = wifi[0].replaceAll("(..)", "$1:");
             network.addWifiAccessPoint(WifiAccessPoint.from(
                     mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
         }
-
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
