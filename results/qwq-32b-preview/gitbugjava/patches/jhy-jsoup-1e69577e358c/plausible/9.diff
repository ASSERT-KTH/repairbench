diff --git a/tmp/991c3a4e-60e8-474e-9b2b-a6ce15f06f3e_buggy.java b/tmp/cfe45da3-f34b-41a9-b74f-54f1ec4cfd65_fixed.java
index c9c77a4..d33364a 100644
--- a/tmp/991c3a4e-60e8-474e-9b2b-a6ce15f06f3e_buggy.java
+++ b/tmp/cfe45da3-f34b-41a9-b74f-54f1ec4cfd65_fixed.java
@@ -1,35 +1,47 @@
 URL build() {
     try {
         // use the URI class to encode non-ascii in path
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
             IDN.toASCII(decodePart(u.getHost())), // puny-code
             u.getPort(),
-                decodePart(u.getPath()),
+            encodePart(u.getPath()), // encode path properly
             null, null // query and fragment appended later so as not to encode
         );
 
         String normUrl = uri.toASCIIString();
         if (q != null || u.getRef() != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u = new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
+
+private String encodePart(String part) {
+    try {
+        return URLEncoder.encode(part, "UTF-8")
+            .replace("+", "%20")
+            .replace("*", "%2A")
+            .replace("%7E", "~");
+    } catch (UnsupportedEncodingException e) {
+        // UTF-8 is always supported
+        throw new RuntimeException("UTF-8 encoding not supported", e);
+    }
+}
\ No newline at end of file
