diff --git a/tmp/59783093-f97a-4c82-8f11-d4d1be3286d2_buggy.java b/tmp/930a206e-a6a1-46c7-ad27-0a1764915a29_fixed.java
index eb0a5c8..78ff59b 100644
--- a/tmp/59783093-f97a-4c82-8f11-d4d1be3286d2_buggy.java
+++ b/tmp/930a206e-a6a1-46c7-ad27-0a1764915a29_fixed.java
@@ -1,27 +1,38 @@
 public static Try<Done> registerCallContext(
     final ActorRef<CallContextProviderMessage> callContextProvider,
     final String callContext,
     final AriCommand ariCommand) {
 
+  // Check if the command is a creation command
   if (!ariCommand.extractCommandType().isCreationCommand()) {
     return Try.success(Done.done());
   }
 
-    final Option<AriResource> maybeResource =
+  // Check if the command is a delete command
+  if (ariCommand.extractCommandType().isDeleteCommand()) {
+    return Try.success(Done.done());
+  }
+
+  // Extract the resource relation that is created
+  final Option<AriResourceRelation> maybeResourceRelation =
       ariCommand
           .extractResourceRelations()
-            .find(AriResourceRelation::isCreated)
-            .map(AriResourceRelation::getResource);
+          .find(AriResourceRelation::isCreated);
 
-    if (maybeResource.isEmpty()) {
+  // If no created resource relation is found, fail with an exception
+  if (maybeResourceRelation.isEmpty()) {
     return Try.failure(
         new RuntimeException(
             String.format(
                 "Failed to extract resourceId from command '%s'", ariCommand.toString())));
   }
 
-    final AriResource resource = maybeResource.get();
+  // Get the resource from the relation
+  final AriResource resource = maybeResourceRelation.get().getResource();
 
+  // Register the call context with the provider
   callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
+
+  // Return success
   return Try.success(Done.done());
 }
\ No newline at end of file
