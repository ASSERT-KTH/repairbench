diff --git a/tmp/1952605e-28c6-400c-911c-e24aa5161e09_buggy.java b/tmp/5f7340a0-e7ae-42fa-b821-11206ad7c8db_fixed.java
index eb0a5c8..7b19030 100644
--- a/tmp/1952605e-28c6-400c-911c-e24aa5161e09_buggy.java
+++ b/tmp/5f7340a0-e7ae-42fa-b821-11206ad7c8db_fixed.java
@@ -1,27 +1,32 @@
 public static Try<Done> registerCallContext(
     final ActorRef<CallContextProviderMessage> callContextProvider,
     final String callContext,
     final AriCommand ariCommand) {
 
+  // Check if the command is a creation command
   if (!ariCommand.extractCommandType().isCreationCommand()) {
+    // If not a creation command, immediately return success without further action
     return Try.success(Done.done());
   }
 
-    final Option<AriResource> maybeResource =
-        ariCommand
-            .extractResourceRelations()
-            .find(AriResourceRelation::isCreated)
-            .map(AriResourceRelation::getResource);
+  // Extract resource relations and find the created resource
+  final Option<AriResourceRelation> maybeCreatedRelation =
+      ariCommand.extractResourceRelations().find(AriResourceRelation::isCreated);
 
-    if (maybeResource.isEmpty()) {
+  // If no created resource is found, fail with an appropriate error message
+  if (maybeCreatedRelation.isEmpty()) {
     return Try.failure(
         new RuntimeException(
             String.format(
                 "Failed to extract resourceId from command '%s'", ariCommand.toString())));
   }
 
-    final AriResource resource = maybeResource.get();
+  // Get the resource from the relation
+  final AriResource resource = maybeCreatedRelation.get().getResource();
 
+  // Register the call context with the provider
   callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
+
+  // Return success
   return Try.success(Done.done());
 }
\ No newline at end of file
