diff --git a/tmp/d5813646-1979-40c7-956e-703734150a24_buggy.java b/tmp/b718fcc1-bcbc-4f2f-a8d3-4c738cf12b0a_fixed.java
index 0a8838d..6a3ef9f 100644
--- a/tmp/d5813646-1979-40c7-956e-703734150a24_buggy.java
+++ b/tmp/b718fcc1-bcbc-4f2f-a8d3-4c738cf12b0a_fixed.java
@@ -1,61 +1,71 @@
 private List<Position> parseData(
     Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
+    // Skip data length if not connectionless
     if (!connectionless) {
-            buf.readUnsignedInt(); // data length
+        buf.readUnsignedInt();
     }
 
+    // Read codec and count
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
+    // Get device session
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
     String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
+    // Process each packet
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
-
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
-            if (codec == CODEC_13) {
+        switch (codec) {
+            case CODEC_13:
                 buf.readUnsignedByte(); // type
                 int length = buf.readInt() - 4;
                 getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
                 if (isPrintable(buf, length)) {
                     position.set(Position.KEY_RESULT,
                             buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
                 } else {
                     position.set(Position.KEY_RESULT,
                             ByteBufUtil.hexDump(buf.readSlice(length)));
                 }
-            } else if (codec == CODEC_12) {
+                break;
+            case CODEC_12:
                 decodeSerial(channel, remoteAddress, deviceSession, position, buf);
-            } else {
+                break;
+            default:
                 decodeLocation(position, buf, codec, model);
+                break;
         }
 
+        // Check if position is not outdated or has attributes
         if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
             positions.add(position);
         }
     }
 
+    // Send response if necessary
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
+    // Return positions if not empty, else null
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
