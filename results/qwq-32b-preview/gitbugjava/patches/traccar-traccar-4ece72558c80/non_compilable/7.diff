diff --git a/tmp/1ecb384c-4c58-4ee3-abd0-ced6c93d59d5_buggy.java b/tmp/046e7eec-baca-4e54-9b22-5945f24d2ddb_fixed.java
index 0a8838d..9235083 100644
--- a/tmp/1ecb384c-4c58-4ee3-abd0-ced6c93d59d5_buggy.java
+++ b/tmp/046e7eec-baca-4e54-9b22-5945f24d2ddb_fixed.java
@@ -1,61 +1,23 @@
-    private List<Position> parseData(
-            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
-        List<Position> positions = new LinkedList<>();
-
-        if (!connectionless) {
-            buf.readUnsignedInt(); // data length
-        }
-
-        int codec = buf.readUnsignedByte();
-        int count = buf.readUnsignedByte();
-
-        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
-        if (deviceSession == null) {
-            return null;
-        }
-        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
-
-        for (int i = 0; i < count; i++) {
-            Position position = new Position(getProtocolName());
-
-            position.setDeviceId(deviceSession.getDeviceId());
-            position.setValid(true);
-
 if (codec == CODEC_13) {
     buf.readUnsignedByte(); // type
     int length = buf.readInt() - 4;
     getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
     if (isPrintable(buf, length)) {
-                    position.set(Position.KEY_RESULT,
-                            buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
+        String result = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();
+        position.set(Position.KEY_RESULT, result);
+        
+        // Split the result by '|' and extract the driver unique ID
+        String[] fields = result.split("\\|");
+        if (fields.length >= 4) {
+            position.set(Position.KEY_DRIVER_UNIQUE_ID, fields[3]);
+        }
     } else {
-                    position.set(Position.KEY_RESULT,
-                            ByteBufUtil.hexDump(buf.readSlice(length)));
+        String hexDump = ByteBufUtil.hexDump(buf.readSlice(length));
+        position.set(Position.KEY_RESULT, hexDump);
+        // Assuming driver unique ID is not present in non-printable data
     }
 } else if (codec == CODEC_12) {
     decodeSerial(channel, remoteAddress, deviceSession, position, buf);
 } else {
     decodeLocation(position, buf, codec, model);
 }
\ No newline at end of file
-
-            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
-                positions.add(position);
-            }
-        }
-
-        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
-            ByteBuf response = Unpooled.buffer();
-            if (connectionless) {
-                response.writeShort(5);
-                response.writeShort(0);
-                response.writeByte(0x01);
-                response.writeByte(locationPacketId);
-                response.writeByte(count);
-            } else {
-                response.writeInt(count);
-            }
-            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
-        }
-
-        return positions.isEmpty() ? null : positions;
-    }
