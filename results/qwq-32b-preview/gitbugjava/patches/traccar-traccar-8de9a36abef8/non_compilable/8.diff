diff --git a/tmp/d4130c05-371d-4c10-9584-b719d8e3e417_buggy.java b/tmp/e391384f-8c48-4718-940b-dedce1aa6be4_fixed.java
index ad77f15..00ce7dc 100644
--- a/tmp/d4130c05-371d-4c10-9584-b719d8e3e417_buggy.java
+++ b/tmp/e391384f-8c48-4718-940b-dedce1aa6be4_fixed.java
@@ -1,112 +1,148 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            position.setValid(values.length > index && "A".equals(values[index++]));
+            position.set(Position.KEY_SATELLITES, parseInteger(values, index++));
+            position.setLatitude(parseDouble(values, index++, 0.0));
+            if (values.length > index && values[index].length() > 0 && values[index].charAt(0) == 'S') {
                 position.setLatitude(-position.getLatitude());
             }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+            position.setLongitude(parseDouble(values, index++, 0.0));
+            if (values.length > index && values[index].length() > 0 && values[index].charAt(0) == 'W') {
                 position.setLongitude(-position.getLongitude());
             }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+            if (values.length > index && !values[index].isEmpty()) {
+                position.setSpeed(UnitsConverter.knotsFromKph(parseInteger(values, index++)));
             }
-                position.setCourse(Integer.parseInt(values[index++]));
+            position.setCourse(parseInteger(values, index++));
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                position.setAltitude(parseInteger(values, index++));
             }
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                position.set(Position.KEY_HDOP, parseDouble(values, index++, 0.0));
             }
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                position.set(Position.KEY_VDOP, parseDouble(values, index++, 0.0));
             }
             break;
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
+            if (values.length >= index + 5) {
                 position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                        parseInteger(values, index++),
+                        parseInteger(values, index++),
+                        parseInteger(values, index++, 16),
+                        parseInteger(values, index++, 16),
+                        parseInteger(values, index++))
+                ));
+            }
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_ODOMETER, parseLong(values, index++));
             }
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                long hoursValue = 0;
+                if (hours.length > 0) {
+                    hoursValue += Integer.parseInt(hours[0]) * 3600;
+                }
+                if (hours.length > 1) {
+                    hoursValue += Integer.parseInt(hours[1]) * 60;
+                }
+                if (hours.length > 2) {
+                    hoursValue += Integer.parseInt(hours[2]);
+                }
+                position.set(Position.KEY_HOURS, hoursValue * 1000);
             }
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            position.set(Position.KEY_POWER, parseDouble(values, index++, 0.0));
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_BATTERY, parseDouble(values, index++));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, parseDouble(values, index++));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.PREFIX_ADC + 2, parseDouble(values, index++));
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            position.set(Position.KEY_STATUS, parseInteger(values, index++));
+            if (index < values.length && !values[index].isEmpty()) {
+                int io = parseInteger(values, index++, 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
-                }
+            position.set(Position.KEY_GEOFENCE, values.length > index ? values[index++] : "");
+            position.set("packetType", values.length > index ? values[index++] : "");
             break;
         case "ETD":
-                position.set("eventData", values[index++]);
+            position.set("eventData", values.length > index ? values[index++] : "");
             break;
         case "OBD":
-                position.set("obd", values[index++]);
+            position.set("obd", values.length > index ? values[index++] : "");
             break;
         case "TAG":
-                position.set("tagData", values[index++]);
+            position.set("tagData", values.length > index ? values[index++] : "");
             break;
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                int sensorIndex = parseInteger(values, index++);
+                int dataType = parseInteger(values, index++);
                 if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values.length > index ? values[index++] : "");
                 } else if (dataType == 1) {
                     index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    position.set(Position.PREFIX_TEMP + sensorIndex, parseDouble(values, index++, 0.0));
                 }
             }
             break;
         default:
             break;
     }
 }
+
+// Helper methods to parse values with default checks
+private static int parseInteger(String[] values, int index) {
+    return parseInteger(values, index, 10);
+}
+
+private static int parseInteger(String[] values, int index, int radix) {
+    if (index < values.length && !values[index].isEmpty()) {
+        return Integer.parseInt(values[index], radix);
+    }
+    return 0;
+}
+
+private static double parseDouble(String[] values, int index, double defaultValue) {
+    if (index < values.length && !values[index].isEmpty()) {
+        return Double.parseDouble(values[index]);
+    }
+    return defaultValue;
+}
+
+private static long parseLong(String[] values, int index) {
+    if (index < values.length && !values[index].isEmpty()) {
+        return Long.parseLong(values[index]);
+    }
+    return 0;
+}
\ No newline at end of file
