diff --git a/tmp/178ab6af-a6ed-434c-ae13-4984fd2bc251_buggy.java b/tmp/c0b92c41-cc42-4e00-b729-27aef97153a6_fixed.java
index ad77f15..2c7ad15 100644
--- a/tmp/178ab6af-a6ed-434c-ae13-4984fd2bc251_buggy.java
+++ b/tmp/c0b92c41-cc42-4e00-b729-27aef97153a6_fixed.java
@@ -1,112 +1,244 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            if (index < values.length) {
+                position.setValid("A".equals(values[index]));
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+                } catch (NumberFormatException e) {
+                    // Handle invalid integer format
+                }
+                index++;
+            }
+            if (index < values.length && values[index].length() > 1) {
+                try {
                     position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                } catch (NumberFormatException e) {
+                    // Handle invalid double format
+                }
+                if (values[index].startsWith("S")) {
                     position.setLatitude(-position.getLatitude());
                 }
+                index++;
+            }
+            if (index < values.length && values[index].length() > 1) {
+                try {
                     position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                } catch (NumberFormatException e) {
+                    // Handle invalid double format
+                }
+                if (values[index].startsWith("W")) {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                index++;
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
+                } catch (NumberFormatException e) {
+                    // Handle invalid integer format
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                index++;
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setCourse(Integer.parseInt(values[index]));
+                } catch (NumberFormatException e) {
+                    // Handle invalid integer format
+                }
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setAltitude(Integer.parseInt(values[index]));
+                } catch (NumberFormatException e) {
+                    // Handle invalid integer format
+                }
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // Handle invalid double format
+                }
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // Handle invalid double format
+                }
+                index++;
             }
             break;
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
+            if (index + 5 < values.length) {
+                try {
                     position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                            Integer.parseInt(values[index++]),
+                            Integer.parseInt(values[index++]),
+                            Integer.parseInt(values[index++], 16),
+                            Integer.parseInt(values[index++], 16),
+                            Integer.parseInt(values[index++]))
+                    ));
+                } catch (NumberFormatException e) {
+                    // Handle invalid integer format
+                    index += 5;
+                }
+            }
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
+                } catch (NumberFormatException e) {
+                    // Handle invalid long format
                 }
-                if (index < values.length) {
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
+                    int totalSeconds = (Integer.parseInt(hours[0]) * 3600
                             + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0));
+                    position.set(Position.KEY_HOURS, totalSeconds * 1000);
+                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+                    // Handle invalid format
+                }
+                index++;
             }
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // Handle invalid double format
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                index++;
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // Handle invalid double format
+                }
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // Handle invalid double format
+                }
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) {
+                    // Handle invalid double format
+                }
+                index++;
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+                } catch (NumberFormatException e) {
+                    // Handle invalid integer format
+                }
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    int io = Integer.parseInt(values[index], 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                } catch (NumberFormatException e) {
+                    // Handle invalid integer format
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_GEOFENCE, values[index]);
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set("packetType", values[index]);
+                index++;
             }
             break;
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (index < values.length) {
+                position.set("eventData", values[index]);
+                index++;
+            }
             break;
         case "OBD":
-                position.set("obd", values[index++]);
+            if (index < values.length) {
+                position.set("obd", values[index]);
+                index++;
+            }
             break;
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (index < values.length) {
+                position.set("tagData", values[index]);
+                index++;
+            }
             break;
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                try {
+                    int sensorIndex = Integer.parseInt(values[index]);
+                    int dataType = Integer.parseInt(values[index + 1]);
+                    index += 2;
                     if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                        index++;
                     } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        index++; // temperature sensor serial number
+                        if (index < values.length && !values[index].isEmpty()) {
+                            try {
+                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                            } catch (NumberFormatException e) {
+                                // Handle invalid double format
+                            }
+                            index++;
+                        }
+                    }
+                } catch (NumberFormatException e) {
+                    // Handle invalid integer format
+                    index += 2;
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
