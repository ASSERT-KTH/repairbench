diff --git a/tmp/3942b435-06db-4911-8841-2e2acbece439_buggy.java b/tmp/bb654cea-cbcb-482b-b47b-f63b820292ef_fixed.java
index 712f277..ffe5610 100644
--- a/tmp/3942b435-06db-4911-8841-2e2acbece439_buggy.java
+++ b/tmp/bb654cea-cbcb-482b-b47b-f63b820292ef_fixed.java
@@ -1,48 +1,61 @@
 /**
  * Renders the given input to the target Appendable.
  *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
+ * @param input source to render
+ * @param target render onto this target Appendable.
  * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
+ * @throws IOException If an I/O error occurs
  */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
+    int counter = 0; // Counter to track the balance of begin and end tokens
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
+            // No more begin tokens
+            // Check if there are any end tokens after this point
+            k = input.indexOf(END_TOKEN, i);
+            if (k != -1) {
+                // There's an end token after no begin tokens, which is invalid
+                throw new IllegalArgumentException("Invalid formatting: end token before begin token");
+            } else {
+                // Append the remaining part of the input
                 target.append(input.substring(i));
                 return target;
             }
-            target.append(input.substring(i, j));
+        } else {
+            // Begin token found, increment counter
+            counter++;
             k = input.indexOf(END_TOKEN, j);
-
             if (k == -1) {
+                // No end token found after this begin token
+                // Append the whole input and return
                 target.append(input);
                 return target;
+            } else {
+                // End token found, decrement counter
+                counter--;
+                if (counter < 0) {
+                    // End token before begin token
+                    throw new IllegalArgumentException("Invalid formatting: end token before begin token");
                 }
+                // Extract specification and process it
                 j += BEGIN_TOKEN_LEN;
                 String spec = input.substring(j, k);
 
                 String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
                 if (items.length == 1) {
                     target.append(input);
                     return target;
                 }
                 String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
                 target.append(replacement);
 
                 i = k + END_TOKEN_LEN;
             }
         }
+    }
+}
\ No newline at end of file
