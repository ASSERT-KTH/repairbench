diff --git a/tmp/b544a7b7-21d0-4fa4-91da-d61df9ee27d9_buggy.java b/tmp/fc146dad-b6d2-482f-9c9f-3e0e9c292d0d_fixed.java
index 712f277..f8b6fe2 100644
--- a/tmp/b544a7b7-21d0-4fa4-91da-d61df9ee27d9_buggy.java
+++ b/tmp/fc146dad-b6d2-482f-9c9f-3e0e9c292d0d_fixed.java
@@ -1,48 +1,52 @@
 /**
  * Renders the given input to the target Appendable.
  *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
+ * @param input source to render
+ * @param target render onto this target Appendable.
  * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
+ * @throws IOException If an I/O error occurs
  */
 public static Appendable render(final String input, Appendable target) throws IOException {
+    final String BEGIN_TOKEN = "@|";
+    final int BEGIN_TOKEN_LEN = 2;
+    final String END_TOKEN = "|@";
+    final int END_TOKEN_LEN = 2;
+    final String CODE_TEXT_SEPARATOR = ",";
+    final String CODE_LIST_SEPARATOR = ":";
 
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
             if (i == 0) {
                 target.append(input);
                 return target;
             }
             target.append(input.substring(i));
             return target;
         }
         target.append(input.substring(i, j));
         k = input.indexOf(END_TOKEN, j);
 
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Missing end token for开始标记 at index " + j);
+        }
+        if (k < j + BEGIN_TOKEN_LEN) {
+            throw new IllegalArgumentException("End token appears before start token ends at index " + k);
         }
         j += BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) {
+            throw new IllegalArgumentException("Invalid specification: " + spec);
         }
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
         target.append(replacement);
 
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
