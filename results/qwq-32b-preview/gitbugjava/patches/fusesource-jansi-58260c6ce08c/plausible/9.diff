diff --git a/tmp/0f2ea647-7a35-4148-acf0-d88596d27d06_buggy.java b/tmp/fc5318d2-d59e-481d-bc8f-6d5d9bf95ef3_fixed.java
index 712f277..cb95fa2 100644
--- a/tmp/0f2ea647-7a35-4148-acf0-d88596d27d06_buggy.java
+++ b/tmp/fc5318d2-d59e-481d-bc8f-6d5d9bf95ef3_fixed.java
@@ -1,48 +1,44 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
 
     while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
-            if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
+        // Find the next positions of BEGIN_TOKEN and END_TOKEN
+        int beginIndex = input.indexOf(BEGIN_TOKEN, i);
+        int endIndex = input.indexOf(END_TOKEN, i);
+
+        // Check for invalid END_TOKEN before BEGIN_TOKEN
+        if (endIndex != -1 && (beginIndex == -1 || endIndex < beginIndex)) {
+            throw new IllegalArgumentException("Invalid use of end token before start token");
         }
+
+        // If no BEGIN_TOKEN found, append the remaining text and return
+        if (beginIndex == -1) {
             target.append(input.substring(i));
             return target;
         }
-            target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
 
+        // Append text before BEGIN_TOKEN
+        target.append(input.substring(i, beginIndex));
+
+        // Find the corresponding END_TOKEN
+        k = input.indexOf(END_TOKEN, beginIndex + BEGIN_TOKEN_LEN);
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Missing end token for begin token at index " + beginIndex);
         }
-            j += BEGIN_TOKEN_LEN;
+
+        // Extract and process the specification
+        j = beginIndex + BEGIN_TOKEN_LEN;
         String spec = input.substring(j, k);
 
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) {
+            throw new IllegalArgumentException("Invalid specification: " + spec);
         }
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
         target.append(replacement);
 
+        // Update index to continue after the END_TOKEN
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
