diff --git a/tmp/e297fe0c-6417-4fcb-8b01-37d86862a91c_buggy.java b/tmp/a94c5ca4-45e2-4f81-ab5e-ced6471e4e09_fixed.java
index 712f277..b428e95 100644
--- a/tmp/e297fe0c-6417-4fcb-8b01-37d86862a91c_buggy.java
+++ b/tmp/a94c5ca4-45e2-4f81-ab5e-ced6471e4e09_fixed.java
@@ -1,48 +1,54 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
+    final String BEGIN_TOKEN = "@|";
+    final String END_TOKEN = "|@";
+    final int BEGIN_TOKEN_LEN = BEGIN_TOKEN.length();
+    final int END_TOKEN_LEN = END_TOKEN.length();
+    final String CODE_TEXT_SEPARATOR = ":";
+    final String CODE_LIST_SEPARATOR = ",";
 
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
+            // No more start tokens found, append the rest of the string and return
+            if (i < input.length()) {
                 target.append(input.substring(i));
+            }
             return target;
         }
+
+        // Append the substring before the start token
         target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
 
+        // Find the corresponding end token
+        k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);
         if (k == -1) {
-                target.append(input);
-                return target;
+            throw new IllegalArgumentException("Unmatched start token: " + BEGIN_TOKEN);
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+        // Check for end token appearing before start token
+        if (k < j) {
+            throw new IllegalArgumentException("End token appears before start token");
+        }
+
+        // Extract the spec between start and end tokens
+        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);
+
+        // Split the spec into code and text parts
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) {
+            throw new IllegalArgumentException("Invalid spec format: " + spec);
         }
+
+        // Render the replacement string
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
+        // Append the replacement to the target
         target.append(replacement);
 
+        // Move the index past the end token
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
