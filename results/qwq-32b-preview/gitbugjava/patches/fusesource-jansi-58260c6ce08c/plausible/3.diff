diff --git a/tmp/9405f436-8998-42dc-ac63-37395a635c8d_buggy.java b/tmp/046a4769-8a0a-4e78-bfea-732185c1cd7e_fixed.java
index 712f277..757ed71 100644
--- a/tmp/9405f436-8998-42dc-ac63-37395a635c8d_buggy.java
+++ b/tmp/046a4769-8a0a-4e78-bfea-732185c1cd7e_fixed.java
@@ -1,48 +1,44 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
 public static Appendable render(final String input, Appendable target) throws IOException {
-
     int i = 0;
     int j, k;
 
     while (true) {
         j = input.indexOf(BEGIN_TOKEN, i);
         if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
-                    return target;
-                }
+            // No more begin tokens, append the rest of the input
+            if (i < input.length()) {
                 target.append(input.substring(i));
+            }
             return target;
         }
+        
+        // Append text before the begin token
         target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
         
+        // Look for the end token after the begin token
+        k = input.indexOf(END_TOKEN, j + BEGIN_TOKEN_LEN);
         if (k == -1) {
-                target.append(input);
-                return target;
+            // End token not found, throw exception
+            throw new IllegalArgumentException("Missing end token");
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
         
+        // Extract the specification between begin and end tokens
+        String spec = input.substring(j + BEGIN_TOKEN_LEN, k);
+        
+        // Split the specification into code and text parts
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        if (items.length != 2) {
+            // Invalid specification, throw exception
+            throw new IllegalArgumentException("Invalid specification format");
         }
+        
+        // Render the replacement text
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
         
+        // Append the rendered replacement
         target.append(replacement);
         
+        // Move past the end token for the next iteration
         i = k + END_TOKEN_LEN;
     }
 }
\ No newline at end of file
