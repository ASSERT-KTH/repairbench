diff --git a/tmp/abb30fef-8f0d-4c4d-b486-d69d4d5ef93d_buggy.java b/tmp/79032b8f-b204-41bb-8aaa-99a1ed918e9a_fixed.java
index d87dd79..3a8d558 100644
--- a/tmp/abb30fef-8f0d-4c4d-b486-d69d4d5ef93d_buggy.java
+++ b/tmp/79032b8f-b204-41bb-8aaa-99a1ed918e9a_fixed.java
@@ -1,47 +1,60 @@
 @Override
-    protected Object decode(
-            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
-
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
-            if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
-                break;
+protected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
+    List<Object> frames = new ArrayList<>();
+    while (true) {
+        int startIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), '[');
+        if (startIndex == -1) {
+            break; // No more frames
+        }
+        int endIndex = buf.indexOf(startIndex, buf.writerIndex(), ']');
+        if (endIndex == -1) {
+            break; // Incomplete frame
+        }
+        ByteBuf frame = buf.slice(startIndex, endIndex - startIndex + 1);
+        ByteBuf unescapedFrame = unescapeFrame(frame);
+        frames.add(unescapedFrame);
+        buf.readerIndex(endIndex + 1);
+    }
+    if (!frames.isEmpty()) {
+        return frames;
+    } else {
+        return null;
     }
 }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
-                byte b1 = buf.readByte();
-                if (b1 == '}') {
-                    byte b2 = buf.readByte();
-                    switch (b2) {
+private ByteBuf unescapeFrame(ByteBuf frame) {
+    ByteBuf output = Unpooled.buffer();
+    for (int readerIndex = frame.readerIndex(); readerIndex < frame.writerIndex(); ) {
+        byte b = frame.getByte(readerIndex);
+        if (b == '}') {
+            if (readerIndex + 1 >= frame.writerIndex()) {
+                throw new IllegalArgumentException("Incomplete escape sequence at end of frame");
+            }
+            byte next = frame.getByte(readerIndex + 1);
+            switch (next) {
                 case 0x01:
-                            frame.writeByte('}');
+                    output.writeByte('}');
                     break;
                 case 0x02:
-                            frame.writeByte('[');
+                    output.writeByte('[');
                     break;
                 case 0x03:
-                            frame.writeByte(']');
+                    output.writeByte(']');
                     break;
                 case 0x04:
-                            frame.writeByte(',');
+                    output.writeByte(',');
                     break;
                 case 0x05:
-                            frame.writeByte('*');
+                    output.writeByte('*');
                     break;
                 default:
-                            throw new IllegalArgumentException(String.format(
-                                    "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
+                    throw new IllegalArgumentException(String.format("unexpected byte at %d: 0x%02x", readerIndex + 1, next));
             }
+            readerIndex += 2;
         } else {
-                    frame.writeByte(b1);
+            output.writeByte(b);
+            readerIndex++;
         }
     }
-            return frame;
-        }
-
-        return null;
+    return output;
 }
\ No newline at end of file
