diff --git a/tmp/37d4e6ef-7e3d-48ef-8569-9957689a1b35_buggy.java b/tmp/7b218e40-09af-4d31-891e-ecb3ff07ee82_fixed.java
index d87dd79..1e48ca6 100644
--- a/tmp/37d4e6ef-7e3d-48ef-8569-9957689a1b35_buggy.java
+++ b/tmp/7b218e40-09af-4d31-891e-ecb3ff07ee82_fixed.java
@@ -1,47 +1,57 @@
 @Override
-    protected Object decode(
-            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
-
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
-            if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
-                break;
+protected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
+    // Find the first '['
+    int startIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '[');
+    if (startIndex == -1) {
+        return null; // No complete frame available
     }
+
+    // Find the next ']' after the startIndex
+    int endIndex = buf.indexOf(startIndex + 1, buf.writerIndex(), (byte) ']');
+    if (endIndex == -1) {
+        return null; // Incomplete frame
     }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
-                byte b1 = buf.readByte();
-                if (b1 == '}') {
-                    byte b2 = buf.readByte();
-                    switch (b2) {
+    // Extract the bytes between '[' and ']', inclusive
+    ByteBuf frame = buf.retainedSlice(startIndex, endIndex - startIndex + 1);
+
+    // Process any escaped characters within the frame
+    ByteBuf processedFrame = Unpooled.buffer();
+    for (int i = 0; i < frame.readableBytes(); i++) {
+        byte b = frame.getByte(i);
+        if (b == '}') {
+            if (i + 1 >= frame.readableBytes()) {
+                throw new IllegalArgumentException("Incomplete escape sequence");
+            }
+            byte nextB = frame.getByte(i + 1);
+            switch (nextB) {
                 case 0x01:
-                            frame.writeByte('}');
+                    processedFrame.writeByte('}');
                     break;
                 case 0x02:
-                            frame.writeByte('[');
+                    processedFrame.writeByte('[');
                     break;
                 case 0x03:
-                            frame.writeByte(']');
+                    processedFrame.writeByte(']');
                     break;
                 case 0x04:
-                            frame.writeByte(',');
+                    processedFrame.writeByte(',');
                     break;
                 case 0x05:
-                            frame.writeByte('*');
+                    processedFrame.writeByte('*');
                     break;
                 default:
                     throw new IllegalArgumentException(String.format(
-                                    "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
+                            "unexpected byte at %d: 0x%02x", i + 1, nextB));
             }
+            i++; // Skip the next byte as it's part of the escape sequence
         } else {
-                    frame.writeByte(b1);
+            processedFrame.writeByte(b);
         }
     }
-            return frame;
-        }
 
-        return null;
+    // Consume the frame from the buffer
+    buf.readerIndex(endIndex + 1);
+
+    return processedFrame;
 }
\ No newline at end of file
