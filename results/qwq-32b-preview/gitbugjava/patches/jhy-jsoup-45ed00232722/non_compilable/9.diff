diff --git a/tmp/a7c94ff5-a775-42d8-b825-74718938d457_buggy.java b/tmp/af047a6d-8ecb-49e5-add4-a87d2cdbc1d1_fixed.java
index 855afa5..9b556d7 100644
--- a/tmp/a7c94ff5-a775-42d8-b825-74718938d457_buggy.java
+++ b/tmp/af047a6d-8ecb-49e5-add4-a87d2cdbc1d1_fixed.java
@@ -1,13 +1,57 @@
+import java.net.URL;
+import java.net.MalformedURLException;
+import java.net.URLEncoder;
+import java.io.UnsupportedEncodingException;
+import java.net.URI;
+import java.net.URISyntaxException;
+
+public class URLFixer {
     static URL encodeUrl(URL u) {
         u = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            String protocol = u.getProtocol();
+            String host = u.getHost();
+            String file = u.getFile();
+            String query = u.getQuery();
+            String ref = u.getRef();
+
+            // Encode the file (path) and query components
+            String encodedFile = URLEncoder.encode(file, "UTF-8")
+                .replace("%2F", "/"); // Preserve slashes in path
+            String encodedQuery = URLEncoder.encode(query, "UTF-8")
+                .replace("%2F", "/") // Preserve slashes in query
+                .replace("%40", "@") // Preserve @ in query
+                .replace("%3A", ":") // Preserve : in query
+                .replace("%23", "#") // Preserve # in query
+                .replace("%2B", "+") // Preserve + in query
+                .replace("%3F", "?") // Preserve ? in query
+                .replace("%7C", "|"); // Preserve | in query
+
+            // Reconstruct the URL
+            String encodedUrlString = protocol + "://" + host;
+            if (encodedFile != null && !encodedFile.isEmpty()) {
+                encodedUrlString += encodedFile;
+            }
+            if (encodedQuery != null && !encodedQuery.isEmpty()) {
+                encodedUrlString += "?" + encodedQuery;
+            }
+            if (ref != null && !ref.isEmpty()) {
+                encodedUrlString += "#" + ref;
+            }
+
+            return new URL(encodedUrlString);
+        } catch (UnsupportedEncodingException | MalformedURLException e) {
+            // Handle exceptions
+            e.printStackTrace();
+            // Return the original URL if encoding fails
+            return u;
+        }
+    }
+
+    // Placeholder for punyUrl method
+    private static URL punyUrl(URL u) {
+        // Implementation for converting internationalized domain names to ASCII Punycode
+        // This is a placeholder; actual implementation may vary
         return u;
     }
 }
\ No newline at end of file
