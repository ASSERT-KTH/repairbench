diff --git a/tmp/fabde3aa-0ea8-415f-872c-aef65efc0cbe_buggy.java b/tmp/e190ed52-a4a0-49d6-8d2f-e3c01de491ef_fixed.java
index 855afa5..ad8d401 100644
--- a/tmp/fabde3aa-0ea8-415f-872c-aef65efc0cbe_buggy.java
+++ b/tmp/e190ed52-a4a0-49d6-8d2f-e3c01de491ef_fixed.java
@@ -1,13 +1,58 @@
+import java.io.UnsupportedEncodingException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLEncoder;
+
+public class HttpConnection {
     static URL encodeUrl(URL u) {
         u = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            String protocol = u.getProtocol();
+            String host = u.getHost();
+            String path = u.getPath();
+            String query = u.getQuery();
+            String ref = u.getRef();
+
+            // Encode path segments
+            String[] pathSegments = path.split("/");
+            for (int i = 0; i < pathSegments.length; i++) {
+                pathSegments[i] = URLEncoder.encode(pathSegments[i], "UTF-8");
+            }
+            String encodedPath = String.join("/", pathSegments);
+
+            // Encode query parameters
+            if (query != null) {
+                String[] queryParams = query.split("&");
+                for (int i = 0; i < queryParams.length; i++) {
+                    queryParams[i] = URLEncoder.encode(queryParams[i], "UTF-8");
+                }
+                String encodedQuery = String.join("&", queryParams);
+                // Reconstruct the URL string with encoded path and query
+                String urlStr = protocol + "://" + host + "/" + encodedPath + "?" + encodedQuery;
+                if (ref != null) {
+                    urlStr += "#" + ref;
+                }
+                return new URL(urlStr);
+            } else {
+                // If no query, just encode the path
+                String urlStr = protocol + "://" + host + "/" + encodedPath;
+                if (ref != null) {
+                    urlStr += "#" + ref;
+                }
+                return new URL(urlStr);
+            }
+        } catch (MalformedURLException e) {
+            // Give up and return the original input
+            return u;
+        } catch (UnsupportedEncodingException e) {
+            // UTF-8 is always supported, so this should never happen
+            throw new AssertionError(e);
+        }
+    }
+
+    // Assuming punyUrl is a method that converts international domain names to ASCII
+    private static URL punyUrl(URL u) {
+        // Implementation not shown, assume it's correct
         return u;
     }
 }
\ No newline at end of file
