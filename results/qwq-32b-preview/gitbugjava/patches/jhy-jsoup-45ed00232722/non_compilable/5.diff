diff --git a/tmp/7b356cc4-4284-4fb7-b57f-d31dabc13ff6_buggy.java b/tmp/0b9a740f-6fa2-478d-a093-17e1c268d769_fixed.java
index 855afa5..a34ff9c 100644
--- a/tmp/7b356cc4-4284-4fb7-b57f-d31dabc13ff6_buggy.java
+++ b/tmp/0b9a740f-6fa2-478d-a093-17e1c268d769_fixed.java
@@ -1,13 +1,48 @@
+import java.io.UnsupportedEncodingException;
+import java.net.URL;
+import java.net.URISyntaxException;
+import java.net.URI;
+import java.net.URLEncoder;
+
+public class HttpConnection {
     static URL encodeUrl(URL u) {
         u = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+            URI uri = new URI(u.toExternalForm());
+            String encodedPath = encodePath(uri.getPath());
+            String encodedQuery = encodeQuery(uri.getQuery());
+            URI encodedUri = new URI(uri.getScheme(), uri.getAuthority(), encodedPath, encodedQuery, uri.getFragment());
+            return new URL(encodedUri.toASCIIString());
         } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            return u;
+        }
+    }
+
+    private static String encodePath(String path) {
+        if (path == null) {
+            return null;
+        }
+        try {
+            return URLEncoder.encode(path, "UTF-8").replace("%2F", "/");
+        } catch (UnsupportedEncodingException e) {
+            throw new RuntimeException("UTF-8 encoding not supported", e);
+        }
+    }
+
+    private static String encodeQuery(String query) {
+        if (query == null) {
+            return null;
+        }
+        try {
+            return URLEncoder.encode(query, "UTF-8").replace("+", "%20");
+        } catch (UnsupportedEncodingException e) {
+            throw new RuntimeException("UTF-8 encoding not supported", e);
+        }
+    }
+
+    // Assuming punyUrl is a method that handles international domain names.
+    private static URL punyUrl(URL u) {
+        // Implementation not provided; assumed to handle domain encoding.
         return u;
     }
 }
\ No newline at end of file
