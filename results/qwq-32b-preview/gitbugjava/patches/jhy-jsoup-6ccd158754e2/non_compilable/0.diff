diff --git a/tmp/9544a5c2-b0bc-47ec-86ba-97d671f1f08d_buggy.java b/tmp/26166657-3e2e-4fa3-9251-c397961e18d6_fixed.java
index 23f078d..773dce5 100644
--- a/tmp/9544a5c2-b0bc-47ec-86ba-97d671f1f08d_buggy.java
+++ b/tmp/26166657-3e2e-4fa3-9251-c397961e18d6_fixed.java
@@ -1,14 +1,25 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    // Minimal normalization of Unicode -> ASCII, and space normalization.
+    // Existing escapes are left as-is.
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
+        int charCount = Character.charCount(c);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
-            } else {
+        } else if (c <= 127) {
             sb.append((char) c);
+        } else {
+            // Convert the code point to UTF-8 bytes and percent-encode each byte
+            byte[] bytes = Character.toString(c).getBytes(StandardCharsets.UTF_8);
+            for (byte b : bytes) {
+                sb.append('%');
+                String hex = Integer.toHexString(0xff & b);
+                if (hex.length() == 1) {
+                    sb.append('0');
                 }
+                sb.append(hex.toUpperCase());
+            }
+        }
+        i += charCount;
     }
 }
\ No newline at end of file
