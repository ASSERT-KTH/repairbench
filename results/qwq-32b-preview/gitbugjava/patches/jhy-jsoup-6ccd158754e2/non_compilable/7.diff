diff --git a/tmp/f5116d34-81e5-4a18-94f4-e10261e467ea_buggy.java b/tmp/76368b90-eab3-4592-855a-000ddfd666d5_fixed.java
index 23f078d..ada1197 100644
--- a/tmp/f5116d34-81e5-4a18-94f4-e10261e467ea_buggy.java
+++ b/tmp/76368b90-eab3-4592-855a-000ddfd666d5_fixed.java
@@ -1,14 +1,20 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    // Minimal normalization of Unicode -> ASCII, and space normalization. Existing escapes are left as-is.
+    int i = 0;
+    while (i < s.length()) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+        } else if (c > 127) { // Out of ASCII range
+            // Encode the character using UTF-8 and convert to percent-encoded form
+            byte[] bytes = Character.toString(c).getBytes(UTF_8);
+            for (byte b : bytes) {
+                sb.append('%')
+                  .append(String.format("%02X", b & 0xFF));
+            }
         } else {
             sb.append((char) c);
         }
+        i += Character.charCount(c); // Move past the current code point
     }
 }
\ No newline at end of file
