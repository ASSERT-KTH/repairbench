diff --git a/tmp/e1d57ea9-3975-49aa-a89b-696d9ab25de0_buggy.java b/tmp/b3f1b1d6-b653-4029-88f8-96ba042b9ad0_fixed.java
index 23f078d..47f1102 100644
--- a/tmp/e1d57ea9-3975-49aa-a89b-696d9ab25de0_buggy.java
+++ b/tmp/b3f1b1d6-b653-4029-88f8-96ba042b9ad0_fixed.java
@@ -1,14 +1,24 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
+        int charCount = Character.charCount(c);
+        i += charCount;
+
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+        } else if (c > 127) {
+            // Manually encode the character using UTF-8
+            byte[] bytes = Character.toString(c).getBytes(UTF_8);
+            for (byte b : bytes) {
+                sb.append('%');
+                String hex = Integer.toHexString(0xff & b);
+                if (hex.length() == 1) {
+                    sb.append('0');
+                }
+                sb.append(hex.toUpperCase());
+            }
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
