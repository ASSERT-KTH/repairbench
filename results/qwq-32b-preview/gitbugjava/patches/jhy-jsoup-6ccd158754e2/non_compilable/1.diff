diff --git a/tmp/11b42628-c994-427f-84fa-270ad473171c_buggy.java b/tmp/ff03a42d-2990-4efa-9a34-48a5aa9323ef_fixed.java
index 23f078d..0e734dc 100644
--- a/tmp/11b42628-c994-427f-84fa-270ad473171c_buggy.java
+++ b/tmp/ff03a42d-2990-4efa-9a34-48a5aa9323ef_fixed.java
@@ -1,14 +1,18 @@
-    private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
-            int c = s.codePointAt(i);
-            if (c == ' ') {
-                sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+function appendToAscii(s, spaceAsPlus, sb) {
+    for (let i = 0; i < s.length; ) {
+        let codePoint = s.codePointAt(i);
+        let charStr = String.fromCodePoint(codePoint);
+        let encodedChar;
+
+        if (charStr === ' ') {
+            encodedChar = spaceAsPlus ? '+' : '%20';
+        } else if (codePoint > 127) {
+            encodedChar = encodeURIComponent(charStr);
         } else {
-                sb.append((char) c);
+            encodedChar = charStr;
         }
+
+        sb += encodedChar;
+        i += charStr.length;
     }
 }
\ No newline at end of file
