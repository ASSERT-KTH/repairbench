diff --git a/tmp/7d28b7cb-9baf-46c1-b9cf-8c4481d29478_buggy.java b/tmp/a1d36be9-318d-47e0-94f7-d46905f947e5_fixed.java
index 23f078d..ddb81a0 100644
--- a/tmp/7d28b7cb-9baf-46c1-b9cf-8c4481d29478_buggy.java
+++ b/tmp/a1d36be9-318d-47e0-94f7-d46905f947e5_fixed.java
@@ -1,14 +1,20 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
+        int charCount = Character.charCount(c);
+        i += charCount;
+
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+        } else if (c > 127) {
+            // Encode the character to UTF-8 bytes, then percent-encode those bytes
+            byte[] bytes = new String(Character.toChars(c)).getBytes(UTF_8);
+            for (byte b : bytes) {
+                sb.append('%')
+                  .append(String.format("%02X", b & 0xFF));
+            }
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
