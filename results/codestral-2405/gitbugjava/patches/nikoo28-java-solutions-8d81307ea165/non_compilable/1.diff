diff --git a/tmp/9e6958a9-3571-4563-b217-ac814738d020_buggy.java b/tmp/ca7c03c3-feab-4e5a-b17e-fe53b2246994_fixed.java
index 9739964..be0ab4b 100644
--- a/tmp/9e6958a9-3571-4563-b217-ac814738d020_buggy.java
+++ b/tmp/ca7c03c3-feab-4e5a-b17e-fe53b2246994_fixed.java
@@ -1,27 +1,38 @@
 public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
-      while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+      // If the price is equal to the price at the top of the stack,
+      // we need to consider the previous days as well, so we increment by 1
+      // but we don't pop the stack.
+      if (prices[indexStack.peek()] == prices[i]) {
+        spans[i] = spans[indexStack.peek()] + 1;
+      } else {
+        // If the price is greater than the price at the top of the stack,
+        // we pop the stack until we find a price lower than the current one
+        // and then calculate the span
+        while (!indexStack.isEmpty() && prices[indexStack.peek()] < prices[i]) {
           indexStack.pop();
+        }
 
         // If index stack is empty, the price at index 'i'
         // is greater than all previous values
         if (indexStack.isEmpty())
           spans[i] = i + 1;
         else
           spans[i] = i - indexStack.peek();
+      }
 
+      // Push the current index to the stack
       indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
