diff --git a/tmp/26f2ed45-8e81-4506-bb0e-9f167a80c55a_buggy.java b/tmp/87d1cd9e-6b0a-4156-8e10-c3a59a74c53b_fixed.java
index 712f277..efe746a 100644
--- a/tmp/26f2ed45-8e81-4506-bb0e-9f167a80c55a_buggy.java
+++ b/tmp/87d1cd9e-6b0a-4156-8e10-c3a59a74c53b_fixed.java
@@ -1,48 +1,35 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
     public static Appendable render(final String input, Appendable target) throws IOException {
-
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
                 if (i == 0) {
-                    target.append(input);
-                    return target;
+                    return target.append(input);
                 }
-                target.append(input.substring(i));
-                return target;
+                return target.append(input.substring(i));
+            }
+            if (j < i) {
+                throw new IllegalArgumentException("Invalid input: end token appears before start token");
             }
             target.append(input.substring(i, j));
             k = input.indexOf(END_TOKEN, j);
 
             if (k == -1) {
-                target.append(input);
-                return target;
+                throw new IllegalArgumentException("Invalid input: no end token found");
             }
             j += BEGIN_TOKEN_LEN;
             String spec = input.substring(j, k);
 
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
-                target.append(input);
-                return target;
+                throw new IllegalArgumentException("Invalid input: no code text separator found");
             }
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
 
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
