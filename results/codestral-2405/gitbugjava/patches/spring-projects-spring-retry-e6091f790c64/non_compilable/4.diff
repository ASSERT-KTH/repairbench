diff --git a/tmp/663b86b1-5288-4952-9a56-4795db24ba9d_buggy.java b/tmp/11c05229-9c9e-47af-955d-15f60f509cd1_fixed.java
index b8e3fa3..de8e518 100644
--- a/tmp/663b86b1-5288-4952-9a56-4795db24ba9d_buggy.java
+++ b/tmp/11c05229-9c9e-47af-955d-15f60f509cd1_fixed.java
@@ -1,65 +1,65 @@
 /**
  * Builds the {@link BackOffPolicy} with the given parameters.
  * @return the {@link BackOffPolicy} instance
  */
 public BackOffPolicy build() {
-		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
-			ExponentialBackOffPolicy policy;
+    BackOffPolicy policy;
+    if ((this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null) {
         if (Boolean.TRUE.equals(this.random)) {
             policy = new ExponentialRandomBackOffPolicy();
         }
         else {
             policy = new ExponentialBackOffPolicy();
         }
         if (this.delay != null) {
             policy.setInitialInterval(this.delay);
         }
         if (this.delaySupplier != null) {
-				policy.initialIntervalSupplier(this.delaySupplier);
+            if (policy instanceof ExponentialBackOffPolicy) {
+                ((ExponentialBackOffPolicy) policy).initialIntervalSupplier(this.delaySupplier);
+            } else {
+                // Handle for ExponentialRandomBackOffPolicy if it's supposed to be supported
+            }
         }
         if (this.multiplier != null) {
-				policy.setMultiplier(this.multiplier);
+            ((ExponentialBackOffPolicy) policy).setMultiplier(this.multiplier);
         }
         if (this.multiplierSupplier != null) {
-				policy.multiplierSupplier(this.multiplierSupplier);
+            ((ExponentialBackOffPolicy) policy).multiplierSupplier(this.multiplierSupplier);
         }
         if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
+            ((ExponentialBackOffPolicy) policy).setMaxInterval(
                     this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
         }
         if (this.maxDelaySupplier != null) {
-				policy.maxIntervalSupplier(this.maxDelaySupplier);
+            if (policy instanceof ExponentialBackOffPolicy) {
+                ((ExponentialBackOffPolicy) policy).maxIntervalSupplier(this.maxDelaySupplier);
+            } else {
+                // Handle for ExponentialRandomBackOffPolicy if it's supposed to be supported
             }
-			if (this.sleeper != null) {
-				policy.setSleeper(this.sleeper);
         }
-			return policy;
-		}
-		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
-			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+    } else if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
+        policy = new UniformRandomBackOffPolicy();
         if (this.delay != null) {
-				policy.setMinBackOffPeriod(this.delay);
+            ((UniformRandomBackOffPolicy) policy).setMinBackOffPeriod(this.delay);
         }
         if (this.delaySupplier != null) {
-				policy.minBackOffPeriodSupplier(this.delaySupplier);
+            ((UniformRandomBackOffPolicy) policy).minBackOffPeriodSupplier(this.delaySupplier);
         }
         if (this.maxDelay != null) {
-				policy.setMaxBackOffPeriod(this.maxDelay);
+            ((UniformRandomBackOffPolicy) policy).setMaxBackOffPeriod(this.maxDelay);
         }
         if (this.maxDelaySupplier != null) {
-				policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
+            ((UniformRandomBackOffPolicy) policy).maxBackOffPeriodSupplier(this.maxDelaySupplier);
         }
-			if (this.sleeper != null) {
-				policy.setSleeper(this.sleeper);
-			}
-			return policy;
-		}
-		FixedBackOffPolicy policy = new FixedBackOffPolicy();
+    } else {
+        policy = new FixedBackOffPolicy();
         if (this.delay != null) {
-			policy.setBackOffPeriod(this.delay);
+            ((FixedBackOffPolicy) policy).setBackOffPeriod(this.delay);
+        }
     }
     if (this.sleeper != null) {
         policy.setSleeper(this.sleeper);
     }
     return policy;
 }
\ No newline at end of file
