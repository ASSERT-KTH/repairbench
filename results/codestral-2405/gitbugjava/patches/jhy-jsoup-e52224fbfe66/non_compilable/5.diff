diff --git a/tmp/4b46de97-211c-48f6-b2ae-90ddbca3ccb7_buggy.java b/tmp/88a7e7b6-8e52-4611-8da9-1bfdaed9d618_fixed.java
index acd5eb5..b3d5054 100644
--- a/tmp/4b46de97-211c-48f6-b2ae-90ddbca3ccb7_buggy.java
+++ b/tmp/88a7e7b6-8e52-4611-8da9-1bfdaed9d618_fixed.java
@@ -1,32 +1,33 @@
 @Override
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         Node prev = previousSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
-                ;
+            || (prev instanceof Element && ((Element) prev).isBlock());
+
         if (couldSkip && isBlank) return;
 
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
             (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
         )
             indent(accum, depth, out);
-        }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+        // Fix: Use isBlank() only when needed to indent or for trimming, otherwise use coreValue()
+        Entities.escape(accum, (siblingIndex > 0 && isNode(prev, "br")) ? "\n" : coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+    }
 }
\ No newline at end of file
