diff --git a/tmp/fdf617d5-1026-4cb5-9c5f-2ab21b11d367_buggy.java b/tmp/24ab84d1-bcef-4ce0-b367-73edbdf9ac02_fixed.java
index 016a7f6..e139670 100644
--- a/tmp/fdf617d5-1026-4cb5-9c5f-2ab21b11d367_buggy.java
+++ b/tmp/24ab84d1-bcef-4ce0-b367-73edbdf9ac02_fixed.java
@@ -1,29 +1,29 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) || (next instanceof TextNode && (((TextNode) next).isBlank()));
+
+        // Fix: handle the case when the next node is an inline or a TextNode and this node is blank
+        if (isBlank && (next instanceof Element && !((Element) next).tag().formatAsBlock() || next instanceof TextNode)) {
+            return;
+        }
 
         Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank)
+         || (out.outline() && siblingNodes().size() > 0 && !isBlank)
+         || (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")))
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
