diff --git a/tmp/90397525-836b-4141-a71e-261e8fa6356d_buggy.java b/tmp/64f06fac-9716-41fc-a460-95577746d143_fixed.java
index 2444d12..59d7c95 100644
--- a/tmp/90397525-836b-4141-a71e-261e8fa6356d_buggy.java
+++ b/tmp/64f06fac-9716-41fc-a460-95577746d143_fixed.java
@@ -1,29 +1,35 @@
-    // Evaluates the given postfix expression string and returns the result.
 public static int postfixEvaluate(final String exp) {
     Stack<Integer> s = new Stack<Integer>();
     Scanner tokens = new Scanner(exp);
 
     while (tokens.hasNext()) {
-            if (tokens.hasNextInt()) {
-                s.push(tokens.nextInt()); // If int then push to stack
+        if (tokens.hasNextInt()) { // If int then push to stack
+            s.push(tokens.nextInt());
         } else { // else pop top two values and perform the operation
+            if (s.size() < 2) { // check if there are at least two operands in the stack
+                throw new IllegalArgumentException("exp is not a proper postfix expression as there are not enough operands.");
+            }
             int num2 = s.pop();
             int num1 = s.pop();
             String op = tokens.next();
 
             switch (op) {
                 case "+" -> s.push(num1 + num2);
                 case "-" -> s.push(num1 - num2);
                 case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
+                case "/" -> {
+                    if (num2 == 0) {
+                        throw new IllegalArgumentException("Division by zero is not allowed.");
+                    }
+                    s.push(num1 / num2);
+                }
                 default -> throw new IllegalArgumentException("exp contains an unknown operation.");
             }
-                //  "+", "-", "*", "/"
         }
     }
     tokens.close();
-        if (s.size() != 1) {
-            throw new IllegalArgumentException("exp is not a proper postfix expression.");
+    if (s.size() != 1) { // check if there is exactly one operand left in the stack after processing all tokens
+        throw new IllegalArgumentException("exp is not a proper postfix expression as there are too many operands.");
     }
     return s.pop();
 }
\ No newline at end of file
