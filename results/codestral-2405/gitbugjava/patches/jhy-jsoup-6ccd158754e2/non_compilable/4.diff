diff --git a/tmp/39faeb9c-a43d-4bc9-9110-a31f7b6c1da4_buggy.java b/tmp/d702197e-d333-4b66-b146-a3a3904badc5_fixed.java
index 23f078d..ef28cd5 100644
--- a/tmp/39faeb9c-a43d-4bc9-9110-a31f7b6c1da4_buggy.java
+++ b/tmp/d702197e-d333-4b66-b146-a3a3904badc5_fixed.java
@@ -1,14 +1,26 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    int length = s.length();
+    for (int i = 0; i < length; i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            if (Character.isSupplementaryCodePoint(c)) {
+                // Handle supplementary code points (represented as a surrogate pair)
+                if (i < length-1 && Character.isHighSurrogate(s.charAt(i)) && Character.isLowSurrogate(s.charAt(i + 1))) {
+                    String supplementary = new String(new int[]{c}, 0, 1);
+                    sb.append(URLEncoder.encode(supplementary, UTF_8.name()));
+                    i++;
+                } else {
+                    // Illegal supplementary character
+                    sb.append((char) c);
+                }
+            } else {
+                sb.append(URLEncoder.encode(Character.toString(c), UTF_8.name()));
+            }
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
