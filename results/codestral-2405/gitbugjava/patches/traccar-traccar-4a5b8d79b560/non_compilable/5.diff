diff --git a/tmp/7f17eba7-4c11-462e-a8d5-edc91bf30afe_buggy.java b/tmp/6de628f6-4581-49ce-bf94-0185e88b6f02_fixed.java
index 1c732f4..36cb788 100644
--- a/tmp/7f17eba7-4c11-462e-a8d5-edc91bf30afe_buggy.java
+++ b/tmp/6de628f6-4581-49ce-bf94-0185e88b6f02_fixed.java
@@ -1,88 +1,157 @@
 @Override
-    protected Object decode(
-            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
+protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
     sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
+        if (delimiter != -1) { // Add a null check to avoid ArrayIndexOutOfBoundsException
             String key = entry.substring(0, delimiter);
             String value = entry.substring(delimiter + 1);
             switch (key) {
                 case "unit":
                     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                     if (deviceSession != null) {
                         position.setDeviceId(deviceSession.getDeviceId());
                     }
                     break;
                 case "gps_valid":
                     position.setValid(Integer.parseInt(value) != 0);
                     break;
                 case "datetime_actual":
+                    try {
                         position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                    } catch (ParseException e) {
+                        // Handle invalid date format
+                    }
                     break;
                 case "latitude":
+                    try {
                         position.setLatitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid double format
+                    }
                     break;
                 case "longitude":
+                    try {
                         position.setLongitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid double format
+                    }
                     break;
                 case "altitude":
+                    try {
                         position.setAltitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid double format
+                    }
                     break;
                 case "velocity":
+                    try {
                         position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid integer format
+                    }
                     break;
                 case "heading":
+                    try {
                         position.setCourse(Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid integer format
+                    }
                     break;
                 case "eventid":
+                    try {
                         position.set(Position.KEY_EVENT, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid integer format
+                    }
                     break;
                 case "mileage":
+                    try {
                         position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid double format
+                    }
                     break;
                 case "satellites":
+                    try {
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid integer format
+                    }
                     break;
                 case "ignition":
+                    try {
                         position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
+                    } catch (NumberFormatException e) {
+                        // Handle invalid integer format
+                    }
                     break;
                 case "door":
+                    try {
                         position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
+                    } catch (NumberFormatException e) {
+                        // Handle invalid integer format
+                    }
                     break;
                 case "arm":
+                    try {
                         position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
+                    } catch (NumberFormatException e) {
+                        // Handle invalid integer format
+                    }
                     break;
                 case "fuel":
+                    try {
                         position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid integer format
+                    }
                     break;
                 case "rpm":
+                    try {
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid integer format
+                    }
                     break;
                 case "main_voltage":
+                    try {
                         position.set(Position.KEY_POWER, Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid double format
+                    }
                     break;
                 case "backup_voltage":
+                    try {
                         position.set(Position.KEY_BATTERY, Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid double format
+                    }
                     break;
                 case "analog1":
                 case "analog2":
                 case "analog3":
+                    try {
                         position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                        // Handle invalid double format
+                    }
                     break;
                 case "extra1":
                 case "extra2":
                 case "extra3":
                 default:
                     position.set(key, value);
                     break;
             }
         }
+    }
 
     return position;
 }
\ No newline at end of file
