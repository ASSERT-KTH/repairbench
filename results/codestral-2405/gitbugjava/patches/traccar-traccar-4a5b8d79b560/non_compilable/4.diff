diff --git a/tmp/75059d59-6e93-407e-824b-3eb30533c708_buggy.java b/tmp/b40389c7-ce67-4af4-8d57-b2746b787e33_fixed.java
index 1c732f4..d5da841 100644
--- a/tmp/75059d59-6e93-407e-824b-3eb30533c708_buggy.java
+++ b/tmp/b40389c7-ce67-4af4-8d57-b2746b787e33_fixed.java
@@ -1,88 +1,97 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
     sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
-        for (String entry : sentence.split(",")) {
+    String[] entries = sentence.split(",");
+    Map<String, String> data = new HashMap<>();
+    for (String entry : entries) {
         int delimiter = entry.indexOf('=');
+        if (delimiter != -1) {
             String key = entry.substring(0, delimiter);
             String value = entry.substring(delimiter + 1);
-            switch (key) {
+            data.put(key, value);
+        }
+    }
+
+    parsePosition(position, data);
+
+    return position;
+}
+
+private void parsePosition(Position position, Map<String, String> data) throws ParseException {
+    for (Map.Entry<String, String> entry : data.entrySet()) {
+        switch (entry.getKey()) {
             case "unit":
-                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
+                DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, entry.getValue());
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
                 }
                 break;
             case "gps_valid":
-                    position.setValid(Integer.parseInt(value) != 0);
+                position.setValid(Integer.parseInt(entry.getValue()) != 0);
                 break;
             case "datetime_actual":
-                    position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(entry.getValue()));
                 break;
             case "latitude":
-                    position.setLatitude(Double.parseDouble(value));
+                position.setLatitude(Double.parseDouble(entry.getValue()));
                 break;
             case "longitude":
-                    position.setLongitude(Double.parseDouble(value));
+                position.setLongitude(Double.parseDouble(entry.getValue()));
                 break;
             case "altitude":
-                    position.setAltitude(Double.parseDouble(value));
+                position.setAltitude(Double.parseDouble(entry.getValue()));
                 break;
             case "velocity":
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(entry.getValue())));
                 break;
             case "heading":
-                    position.setCourse(Integer.parseInt(value));
+                position.setCourse(Integer.parseInt(entry.getValue()));
                 break;
             case "eventid":
-                    position.set(Position.KEY_EVENT, Integer.parseInt(value));
+                position.set(Position.KEY_EVENT, Integer.parseInt(entry.getValue()));
                 break;
             case "mileage":
-                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
+                position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(entry.getValue()) * 1000));
                 break;
             case "satellites":
-                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                position.set(Position.KEY_SATELLITES, Integer.parseInt(entry.getValue()));
                 break;
             case "ignition":
-                    position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
+                position.set(Position.KEY_IGNITION, Integer.parseInt(entry.getValue()) != 0);
                 break;
             case "door":
-                    position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
+                position.set(Position.KEY_DOOR, Integer.parseInt(entry.getValue()) != 0);
                 break;
             case "arm":
-                    position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
+                position.set(Position.KEY_ARMED, Integer.parseInt(entry.getValue()) != 0);
                 break;
             case "fuel":
-                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
+                position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(entry.getValue()));
                 break;
             case "rpm":
-                    position.set(Position.KEY_RPM, Integer.parseInt(value));
+                position.set(Position.KEY_RPM, Integer.parseInt(entry.getValue()));
                 break;
             case "main_voltage":
-                    position.set(Position.KEY_POWER, Double.parseDouble(value));
+                position.set(Position.KEY_POWER, Double.parseDouble(entry.getValue()));
                 break;
             case "backup_voltage":
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(value));
+                position.set(Position.KEY_BATTERY, Double.parseDouble(entry.getValue()));
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
-                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                position.set(Position.PREFIX_ADC + (entry.getKey().charAt(entry.getKey().length() - 1) - '0'), Double.parseDouble(entry.getValue()));
                 break;
-                case "extra1":
-                case "extra2":
-                case "extra3":
             default:
-                    position.set(key, value);
+                position.set(entry.getKey(), entry.getValue());
                 break;
         }
     }
-
-        return position;
 }
\ No newline at end of file
