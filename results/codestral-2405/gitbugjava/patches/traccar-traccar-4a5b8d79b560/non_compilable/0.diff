diff --git a/tmp/64948098-01fb-43e1-896c-dd4e1aea8a90_buggy.java b/tmp/8e4fbd7e-8b19-4f8e-b489-17da32ebf0e7_fixed.java
index 1c732f4..a5462b2 100644
--- a/tmp/64948098-01fb-43e1-896c-dd4e1aea8a90_buggy.java
+++ b/tmp/8e4fbd7e-8b19-4f8e-b489-17da32ebf0e7_fixed.java
@@ -1,88 +1,87 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
     sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
+        if(delimiter == -1) continue; // Fix for missing key-value delimiter
         String key = entry.substring(0, delimiter);
-            String value = entry.substring(delimiter + 1);
+        String value = delimiter < entry.length() - 1 ? entry.substring(delimiter + 1) : ""; // Added check to avoid out of bounds exception
         switch (key) {
             case "unit":
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
                 }
                 break;
             case "gps_valid":
-                    position.setValid(Integer.parseInt(value) != 0);
+                position.setValid(!"0".equals(value));
                 break;
             case "datetime_actual":
+                try {
                     position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                } catch (ParseException e) {
+                    // Handle parse exception
+                }
                 break;
             case "latitude":
-                    position.setLatitude(Double.parseDouble(value));
-                    break;
             case "longitude":
-                    position.setLongitude(Double.parseDouble(value));
-                    break;
             case "altitude":
-                    position.setAltitude(Double.parseDouble(value));
-                    break;
-                case "velocity":
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
-                    break;
-                case "heading":
-                    position.setCourse(Integer.parseInt(value));
-                    break;
-                case "eventid":
-                    position.set(Position.KEY_EVENT, Integer.parseInt(value));
-                    break;
-                case "mileage":
-                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
-                    break;
-                case "satellites":
-                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
-                    break;
-                case "ignition":
-                    position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
-                    break;
-                case "door":
-                    position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
-                    break;
-                case "arm":
-                    position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
-                    break;
-                case "fuel":
-                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
-                    break;
             case "rpm":
-                    position.set(Position.KEY_RPM, Integer.parseInt(value));
-                    break;
             case "main_voltage":
-                    position.set(Position.KEY_POWER, Double.parseDouble(value));
-                    break;
             case "backup_voltage":
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(value));
-                    break;
             case "analog1":
             case "analog2":
             case "analog3":
-                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                try {
+                    position.set(key, Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    // Handle number format exception
+                }
                 break;
+            case "velocity":
+                try {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                } catch (NumberFormatException e) {
+                    // Handle number format exception
+                }
+                break;
+            case "heading":
+            case "eventid":
+            case "satellites":
+            case "fuel":
             case "extra1":
             case "extra2":
             case "extra3":
+                try {
+                    position.set(key, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    // Handle number format exception
+                }
+                break;
+            case "mileage":
+                try {
+                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
+                } catch (NumberFormatException e) {
+                    // Handle number format exception
+                }
+                break;
+            case "ignition":
+            case "door":
+            case "arm":
+                position.set(key, !"0".equals(value));
+                break;
             default:
                 position.set(key, value);
                 break;
         }
     }
 
     return position;
 }
\ No newline at end of file
