diff --git a/tmp/d53fb491-32b2-497c-b8b7-27015b2237c9_buggy.java b/tmp/33e165a2-50de-41cb-bb47-4c0a41434a30_fixed.java
index 27f2719..7685dbf 100644
--- a/tmp/d53fb491-32b2-497c-b8b7-27015b2237c9_buggy.java
+++ b/tmp/33e165a2-50de-41cb-bb47-4c0a41434a30_fixed.java
@@ -1,90 +1,69 @@
 @Override
-    protected Object decode(
-            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
-
+protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
-        if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
+    if (deviceSession == null || !sentence.matches("![35ABCD],.*")) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
-        if (type.equals("3")) {
-
+    switch (type) {
+        case "3":
             getLastLocation(position, null);
-
             position.set(Position.KEY_RESULT, sentence.substring(3));
-
-            return position;
-
-        } else if (type.equals("5")) {
-
+            break;
+        case "5":
             String[] values = sentence.split(",");
-
             getLastLocation(position, null);
-
             position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
             if (values.length >= 4) {
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
             }
-
-            return position;
-
-        } else if (type.equals("B") || type.equals("D")) {
-
+            break;
+        case "B":
+        case "D":
             Parser parser = new Parser(PATTERN_BD, sentence);
             if (!parser.matches()) {
                 return null;
             }
-
             decodeFix(position, parser);
             decodeState(position, parser);
-
             position.set(Position.KEY_SATELLITES, parser.nextInt(0));
             position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
             position.set(Position.KEY_HDOP, parser.nextDouble(0));
-
-            return position;
-
-        } else if (type.equals("C")) {
-
-            Parser parser = new Parser(PATTERN_C, sentence);
-            if (!parser.matches()) {
+            break;
+        case "C":
+            Parser parserC = new Parser(PATTERN_C, sentence);
+            if (!parserC.matches()) {
                 return null;
             }
-
-            decodeFix(position, parser);
-            decodeState(position, parser);
-
-            return position;
-
-        } else if (type.equals("A")) {
-
-            Parser parser = new Parser(PATTERN_A, sentence);
-            if (!parser.matches()) {
+            decodeFix(position, parserC);
+            decodeState(position, parserC);
+            break;
+        case "A":
+            Parser parserA = new Parser(PATTERN_A, sentence);
+            if (!parserA.matches()) {
                 return null;
             }
-
-            decodeFix(position, parser);
-
-            return position;
-
-        }
-
+            decodeFix(position, parserA);
+            break;
+        default:
             return null;
     }
+    return position;
+}
\ No newline at end of file
