diff --git a/tmp/1574ce0d-710e-4c91-99b2-88cc42a2767d_buggy.java b/tmp/f5de73b4-0995-4953-b3b0-fd2cd9d93061_fixed.java
index c9c2b44..839d3ef 100644
--- a/tmp/1574ce0d-710e-4c91-99b2-88cc42a2767d_buggy.java
+++ b/tmp/f5de73b4-0995-4953-b3b0-fd2cd9d93061_fixed.java
@@ -1,13 +1,23 @@
 @Override
 public boolean matches(Element root, Element element) {
-            // evaluate from last to first
     for (int i = evaluators.size() - 1; i >= 0; --i) {
         if (element == null)
             return false;
         Evaluator eval = evaluators.get(i);
+        if (eval.getClass().equals(CombiningEvaluator.class) && "( )".contains(((CombiningEvaluator) eval).getCombinator())) {
+            // In case of a combinator like `parent > child`, we need to adjust the element
+            // for the child evaluator.
             if (!eval.matches(root, element))
                 return false;
+        } else {
+            if (!eval.matches(root, element))
+                return false;
+        }
+        // Only go up the element tree if this is not a combinator,
+        // like `parent > child`, that needs the context of parent.
+        if (!(i > 0 && evaluators.get(i - 1).getClass().equals(CombiningEvaluator.class) && "( )".contains(((CombiningEvaluator) evaluators.get(i - 1)).getCombinator()))) {
             element = element.parent();
         }
+    }
     return true;
 }
\ No newline at end of file
