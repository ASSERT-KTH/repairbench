diff --git a/tmp/9931593f-3469-4def-82c8-4f2068eb2bd8_buggy.java b/tmp/ee9e7639-6b2f-4877-9d0a-832351d4bb4c_fixed.java
index 4ebe4f9..8a2751d 100644
--- a/tmp/9931593f-3469-4def-82c8-4f2068eb2bd8_buggy.java
+++ b/tmp/ee9e7639-6b2f-4877-9d0a-832351d4bb4c_fixed.java
@@ -1,41 +1,15 @@
-    /*
-    /**********************************************************
-    /* Validation, post-processing
-    /**********************************************************
-     */
-    @Override
-    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
-            BeanProperty property) throws JsonMappingException
-    {
-        // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegate = null;
-        if (_valueInstantiator != null) {
-            // [databind#2324]: check both array-delegating and delegating
-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
-            if (delegateCreator != null) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
-                delegate = findDeserializer(ctxt, delegateType, property);
+public class ImmutableBag {
+    private final List<String> strings;
+
+    public ImmutableBag() {
+        this(new ArrayList<>());
     }
+
+    public ImmutableBag(List<String> strings) {
+        this.strings = Collections.unmodifiableList(strings);
     }
-        JsonDeserializer<?> valueDeser = _valueDeserializer;
-        final JavaType valueType = _containerType.getContentType();
-        if (valueDeser == null) {
-            // [databind#125]: May have a content converter
-            valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
-            if (valueDeser == null) {
-            // And we may also need to get deserializer for String
-                valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
+
+    public List<String> getStrings() {
+        return strings;
     }
-        } else { // if directly assigned, probably not yet contextual, so:
-            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
-        }
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
-        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
-                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
-        if (isDefaultDeserializer(valueDeser)) {
-            valueDeser = null;
-        }
-        return withResolved(delegate, valueDeser, nuller, unwrapSingle);
 }
\ No newline at end of file
