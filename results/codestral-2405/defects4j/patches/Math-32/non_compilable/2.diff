diff --git a/tmp/7f0ef1e8-4517-4f12-8626-18b679cd4141_buggy.java b/tmp/0601b10b-f65e-4976-9d90-22dbf12ffeba_fixed.java
index c53ca2a..8539803 100644
--- a/tmp/7f0ef1e8-4517-4f12-8626-18b679cd4141_buggy.java
+++ b/tmp/0601b10b-f65e-4976-9d90-22dbf12ffeba_fixed.java
@@ -1,54 +1,60 @@
 /** {@inheritDoc} */
 @Override
 protected void computeGeometricalProperties() {
+    final SubHyperplane<?>[][] subHyperplanes = getSubHyperplanes();
 
-        final Vector2D[][] v = getVertices();
-
-        if (v.length == 0) {
-            final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
+    if (subHyperplanes.length == 0) {
+        final BSPTree<Hyperplane<Euclidean3D>> tree = getTree(false);
+        final Object attribute = tree.getAttribute();
+        if (attribute == null ||
+            (attribute instanceof BoundaryAttribute &&
+             ((BoundaryAttribute<Euclidean3D>) attribute).getPlusOutside() != null)) {
             // the instance covers the whole space
             setSize(Double.POSITIVE_INFINITY);
-                setBarycenter(Vector2D.NaN);
+            setBarycenter(Point.NaN);
         } else {
             setSize(0);
-                setBarycenter(new Vector2D(0, 0));
+            setBarycenter(new Vector3D(0, 0, 0));
         }
-        } else if (v[0][0] == null) {
-            // there is at least one open-loop: the polygon is infinite
+    } else if (subHyperplanes[0][0] instanceof InfiniteSubHyperplane) {
+        // there is at least one open-loop: the polyhedron is infinite
         setSize(Double.POSITIVE_INFINITY);
-            setBarycenter(Vector2D.NaN);
+        setBarycenter(Point.NaN);
     } else {
         // all loops are closed, we compute some integrals around the shape
 
         double sum  = 0;
         double sumX = 0;
         double sumY = 0;
+        double sumZ = 0;
 
-            for (Vector2D[] loop : v) {
-                double x1 = loop[loop.length - 1].getX();
-                double y1 = loop[loop.length - 1].getY();
-                for (final Vector2D point : loop) {
-                    final double x0 = x1;
-                    final double y0 = y1;
-                    x1 = point.getX();
-                    y1 = point.getY();
-                    final double factor = x0 * y1 - y0 * x1;
-                    sum  += factor;
-                    sumX += factor * (x0 + x1);
-                    sumY += factor * (y0 + y1);
+        for (SubHyperplane<?>[] loop : subHyperplanes) {
+            for (final SubHyperplane<?> subHyperplane : loop) {
+                if (subHyperplane instanceof SubPlane) {
+                    @SuppressWarnings("unchecked")
+                    SubPlane<Euclidean3D> plane = (SubPlane<Euclidean3D>) subHyperplane;
+                    Vector2D[] vertices = plane.getRemainingRegion().getVertices();
+                    Vector3D x1 = plane.getHyperplane().toSpace(vertices[vertices.length - 1]);
+                    for (final Vector2D vertex : vertices) {
+                        Vector3D x0 = x1;
+                        x1 = plane.getHyperplane().toSpace(vertex);
+                        sum += x0.getX() * x1.getY() - x0.getY() * x1.getX();
+                        sumX += x0.getX() * x1.getY() - x0.getY() * x1.getX() * (x0.getX() + x1.getX());
+                        sumY += x0.getX() * x1.getY() - x0.getY() * x1.getX() * (x0.getY() + x1.getY());
+                        sumZ += x0.getX() * x1.getY() - x0.getY() * x1.getX() * (x0.getZ() + x1.getZ());
+                    }
+                }
             }
         }
 
         if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+            // the polyhedron has a finite outside surrounded by an infinite inside
             setSize(Double.POSITIVE_INFINITY);
-                setBarycenter(Vector2D.NaN);
+            setBarycenter(Point.NaN);
         } else {
-                setSize(sum / 2);
-                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
+            setSize(Math.abs(sum) / 2.0);
+            setBarycenter(new Vector3D(sumX / (6 * sum), sumY / (6 * sum), sumZ / (6 * sum)));
         }
 
     }
-
 }
\ No newline at end of file
