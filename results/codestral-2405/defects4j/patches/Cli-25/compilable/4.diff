diff --git a/tmp/c3b62d02-5585-485f-b4c5-a0698cca593a_buggy.java b/tmp/411fda95-41f6-4a67-9e9d-8abd140a8f8e_fixed.java
index 875b31b..435f3eb 100644
--- a/tmp/c3b62d02-5585-485f-b4c5-a0698cca593a_buggy.java
+++ b/tmp/411fda95-41f6-4a67-9e9d-8abd140a8f8e_fixed.java
@@ -1,54 +1,49 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                         int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
     // all following lines must be padded with nextLineTabStop space
     // characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+    // Remove initial padding from the remaining text
+    text = text.substring(pos).trim();
+
+    while (text.length() > 0)
     {
-            text = padding + text.substring(pos).trim();
+        text = padding + text;
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        if ( (text.length() > width) && (pos == nextLineTabStop) )
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = text.substring(pos).trim();
     }
+
+    return sb;
 }
\ No newline at end of file
