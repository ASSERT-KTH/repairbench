diff --git a/tmp/9cd15202-0dcf-46e8-8059-367474a40d72_buggy.java b/tmp/5bee8905-d50b-4c66-9679-4eea935123dc_fixed.java
index a3709ee..9f8afd0 100644
--- a/tmp/9cd15202-0dcf-46e8-8059-367474a40d72_buggy.java
+++ b/tmp/5bee8905-d50b-4c66-9679-4eea935123dc_fixed.java
@@ -1,71 +1,33 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
-      case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
-      case Token.COMMA:
-        return evaluatesToLocalValue(value.getLastChild(), locals);
-      case Token.AND:
-      case Token.OR:
-        return evaluatesToLocalValue(value.getFirstChild(), locals)
-           && evaluatesToLocalValue(value.getLastChild(), locals);
-      case Token.HOOK:
-        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
-           && evaluatesToLocalValue(value.getLastChild(), locals);
-      case Token.INC:
-      case Token.DEC:
-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
-        } else {
-          return true;
-        }
-      case Token.THIS:
-        return locals.apply(value);
-      case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
-      case Token.GETELEM:
-      case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
+    ...
+    case Token.NEW:
+      // A new local object is local, but we must check that it's not being modified
+      // or having its methods called with side effects.
+      return !value.hasChildren() || evaluatesToLocalValue(value.getFirstChild(), locals);
     case Token.CALL:
+      // If the method is called on a local object, the result is local
+      // only if the object's properties are not being modified.
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
-            || locals.apply(value);
-      case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
-      case Token.FUNCTION:
-      case Token.REGEXP:
-      case Token.ARRAYLIT:
-      case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
-        return true;
-      case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
-        return true;
-      default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
-        if (isAssignmentOp(value)
-            || isSimpleOperator(value)
-            || isImmutableValue(value)) {
-          return true;
+          || (locals.apply(value.getFirstChild())
+              && !modifiesLocalObject(value));
+    ...
   }
 
-        throw new IllegalStateException(
-            "Unexpected expression node" + value +
-            "\n parent:" + value.getParent());
+  // Add a helper function to check if a CALL node modifies a local object
+  private static boolean modifiesLocalObject(Node call) {
+    for (Node child = call.getFirstChild(); child != null; child = child.getNext()) {
+      if (child.isGetProp() || child.isSetProp()) {
+        Node object = child.getFirstChild();
+        if (object.isName() || object.isGetProp() || object.isGetElem()) {
+          if (NodeUtil.isImmutableValue(object) || locals.apply(object)) {
+            // The object is a local object, and its properties are being modified.
+            return true;
+          }
+        }
+      }
+    }
+    return false;
   }
 }
\ No newline at end of file
