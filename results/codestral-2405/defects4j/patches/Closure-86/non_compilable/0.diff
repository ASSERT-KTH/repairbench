diff --git a/tmp/f983ecc6-407f-4fba-be51-43b097c8ffcd_buggy.java b/tmp/a1557040-2b14-4980-a5a4-f452e080b56f_fixed.java
index a3709ee..73496c4 100644
--- a/tmp/f983ecc6-407f-4fba-be51-43b097c8ffcd_buggy.java
+++ b/tmp/a1557040-2b14-4980-a5a4-f452e080b56f_fixed.java
@@ -1,71 +1,73 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
   switch (value.getType()) {
     case Token.ASSIGN:
       // A result that is aliased by a non-local name, is the effectively the
       // same as returning a non-local name, but this doesn't matter if the
       // value is immutable.
       return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
+          || (locals.apply(value.getFirstChild())
               && evaluatesToLocalValue(value.getLastChild(), locals));
     case Token.COMMA:
       return evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.AND:
     case Token.OR:
       return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.HOOK:
       return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
     case Token.INC:
     case Token.DEC:
       if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+        return true;
       } else {
-          return true;
+        return evaluatesToLocalValue(value.getFirstChild(), locals);
       }
     case Token.THIS:
       return locals.apply(value);
     case Token.NAME:
       return isImmutableValue(value) || locals.apply(value);
     case Token.GETELEM:
     case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
+      // Properties on a local object are considered local.
+      return evaluatesToLocalValue(value.getFirstChild(), locals);
     case Token.CALL:
       return callHasLocalResult(value)
           || isToStringMethodCall(value)
           || locals.apply(value);
     case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+      // Constructors that return this are assumed to have aliased this.
+      // Other constructors are assumed to have no side effects.
+      return !isConstructorThatReturnsThis(value)
+          || locals.apply(value);
     case Token.FUNCTION:
     case Token.REGEXP:
     case Token.ARRAYLIT:
     case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+      // Literals objects with non-local children are not allowed.
+      if (!isLiteral(value)) {
+        for (Node child = value.getFirstChild(); child != null;
+             child = child.getNext()) {
+          if (!evaluatesToLocalValue(child, locals)) {
+            return false;
+          }
+        }
+      }
       return true;
     case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
       return true;
     default:
       // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+      //  x = '' + g (x is now a local string)
+      //  x -= g (x is now a local number)
       if (isAssignmentOp(value)
           || isSimpleOperator(value)
           || isImmutableValue(value)) {
         return true;
       }
 
       throw new IllegalStateException(
           "Unexpected expression node" + value +
           "\n parent:" + value.getParent());
   }
 }
\ No newline at end of file
