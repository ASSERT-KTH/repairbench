diff --git a/tmp/4ca7f907-c4c5-4a85-809c-375fecac61de_buggy.java b/tmp/e6e42752-9f07-4353-957c-1ae411e3ab36_fixed.java
index eb0c9a2..8debab1 100644
--- a/tmp/4ca7f907-c4c5-4a85-809c-375fecac61de_buggy.java
+++ b/tmp/e6e42752-9f07-4353-957c-1ae411e3ab36_fixed.java
@@ -1,85 +1,52 @@
-    /**
-     * Update the index values for the maximum and minimum bounds.
-     * 
-     * @param period  the time period.
-     * @param index  the index of the time period.
-     */
 private void updateBounds(TimePeriod period, int index) {
-        
     long start = period.getStart().getTime();
     long end = period.getEnd().getTime();
     long middle = start + ((end - start) / 2);
 
-        if (this.minStartIndex >= 0) {
-            long minStart = getDataItem(this.minStartIndex).getPeriod()
-                .getStart().getTime();
-            if (start < minStart) {
-                this.minStartIndex = index;           
-            }
-        }
-        else {
-            this.minStartIndex = index;
-        }
+    // Update minStartIndex and maxStartIndex
+    updateIndex(this.minStartIndex, start, index, period, true);
+    updateIndex(this.maxStartIndex, start, index, period, false);
 
-        if (this.maxStartIndex >= 0) {
-            long maxStart = getDataItem(this.maxStartIndex).getPeriod()
-                .getStart().getTime();
-            if (start > maxStart) {
-                this.maxStartIndex = index;           
-            }
-        }
-        else {
-            this.maxStartIndex = index;
-        }
-        
-        if (this.minMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long minMiddle = s + (e - s) / 2;
+    // Update minMiddleIndex and maxMiddleIndex
+    long minMiddle = (this.minMiddleIndex < 0) ? Long.MAX_VALUE : getMiddle(this.minMiddleIndex);
+    long maxMiddle = (this.maxMiddleIndex < 0) ? Long.MIN_VALUE : getMiddle(this.maxMiddleIndex);
     if (middle < minMiddle) {
         this.minMiddleIndex = index;
     }
-        }
-        else {
-            this.minMiddleIndex = index;
-        }
-        
-        if (this.maxMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long maxMiddle = s + (e - s) / 2;
     if (middle > maxMiddle) {
         this.maxMiddleIndex = index;
     }
-        }
-        else {
-            this.maxMiddleIndex = index;
+
+    // Update minEndIndex and maxEndIndex
+    updateIndex(this.minEndIndex, end, index, period, true);
+    updateIndex(this.maxEndIndex, end, index, period, false);
 }
 
-        if (this.minEndIndex >= 0) {
-            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()
-                .getTime();
-            if (end < minEnd) {
-                this.minEndIndex = index;           
+private long getMiddle(int index) {
+    TimePeriod period = getDataItem(index).getPeriod();
+    long s = period.getStart().getTime();
+    long e = period.getEnd().getTime();
+    return s + ((e - s) / 2);
 }
+
+private void updateIndex(int currentIndex, long currentValue, int newIndex, TimePeriod newPeriod, boolean isMin) {
+    if (currentIndex < 0) {
+        if (isMin) {
+            currentValue = Long.MAX_VALUE;
+        } else {
+            currentValue = Long.MIN_VALUE;
         }
-        else {
-            this.minEndIndex = index;
+    } else {
+        currentValue = isMin ? newPeriod.getStart().getTime() : newPeriod.getEnd().getTime();
     }
 
-        if (this.maxEndIndex >= 0) {
-            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()
-                .getTime();
-            if (end > maxEnd) {
-                this.maxEndIndex = index;           
+    if ((isMin && newValue < currentValue) || (!isMin && newValue > currentValue)) {
+        if (isMin) {
+            this.minStartIndex = newIndex;
+            this.minEndIndex = newIndex;
+        } else {
+            this.maxStartIndex = newIndex;
+            this.maxEndIndex = newIndex;
         }
     }
-        else {
-            this.maxEndIndex = index;
-        }
-        
 }
\ No newline at end of file
