diff --git a/tmp/6aaa1b26-aed3-4ed7-af61-8069103bbaf5_buggy.java b/tmp/936c985a-e642-435d-b92b-6cabd20a134b_fixed.java
index eb0c9a2..4dd30aa 100644
--- a/tmp/6aaa1b26-aed3-4ed7-af61-8069103bbaf5_buggy.java
+++ b/tmp/936c985a-e642-435d-b92b-6cabd20a134b_fixed.java
@@ -1,85 +1,66 @@
-    /**
-     * Update the index values for the maximum and minimum bounds.
-     * 
-     * @param period  the time period.
-     * @param index  the index of the time period.
-     */
 private void updateBounds(TimePeriod period, int index) {
 
     long start = period.getStart().getTime();
     long end = period.getEnd().getTime();
     long middle = start + ((end - start) / 2);
 
     if (this.minStartIndex >= 0) {
-            long minStart = getDataItem(this.minStartIndex).getPeriod()
-                .getStart().getTime();
-            if (start < minStart) {
+        long minStart = getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
+        if (start <= minStart) {  // Here '=' is added to manage the case where start time is equal to minStart.
             this.minStartIndex = index;
         }
-        }
-        else {
+    } else {
         this.minStartIndex = index;
     }
 
     if (this.maxStartIndex >= 0) {
         long maxStart = getDataItem(this.maxStartIndex).getPeriod()
         .getStart().getTime();
-            if (start > maxStart) {
+        if (start >= maxStart) {  // Here '=' is added to manage the case where start time is equal to maxStart.
             this.maxStartIndex = index;
         }
-        }
-        else {
+    } else {
         this.maxStartIndex = index;
     }
 
     if (this.minMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long minMiddle = s + (e - s) / 2;
-            if (middle < minMiddle) {
+        long minMiddle = getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
+                        + ((getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
+                            - getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()) / 2);
+        if (middle <= minMiddle) {  // Here '=' is added to manage the case where middle time is equal to minMiddle.
             this.minMiddleIndex = index;
         }
-        }
-        else {
+    } else {
         this.minMiddleIndex = index;
     }
 
     if (this.maxMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long maxMiddle = s + (e - s) / 2;
-            if (middle > maxMiddle) {
+        long maxMiddle = getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime()
+                         + ((getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime()
+                             - getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime()) / 2);
+        if (middle >= maxMiddle) {  // Here '=' is added to manage the case where middle time is equal to maxMiddle.
             this.maxMiddleIndex = index;
         }
-        }
-        else {
+    } else {
         this.maxMiddleIndex = index;
     }
 
     if (this.minEndIndex >= 0) {
-            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()
-                .getTime();
-            if (end < minEnd) {
+        long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
+        if (end <= minEnd) {  // Here '=' is added to manage the case where end time is equal to minEnd.
             this.minEndIndex = index;
         }
-        }
-        else {
+    } else {
         this.minEndIndex = index;
     }
 
     if (this.maxEndIndex >= 0) {
-            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()
-                .getTime();
-            if (end > maxEnd) {
+        long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
+        if (end >= maxEnd) {  // Here '=' is added to manage the case where end time is equal to maxEnd.
             this.maxEndIndex = index;
         }
-        }
-        else {
+    } else {
         this.maxEndIndex = index;
     }
 
 }
\ No newline at end of file
