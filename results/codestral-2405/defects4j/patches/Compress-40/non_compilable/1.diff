diff --git a/tmp/c473e5c2-c322-481c-8680-fb11a466f5dd_buggy.java b/tmp/c07dbd42-f0b3-42b6-b023-631457e40bb9_fixed.java
index 7116384..5bdf8cd 100644
--- a/tmp/c473e5c2-c322-481c-8680-fb11a466f5dd_buggy.java
+++ b/tmp/c07dbd42-f0b3-42b6-b023-631457e40bb9_fixed.java
@@ -1,39 +1,42 @@
 /**
  * Returns at most 63 bits read from the underlying stream.
  *
  * @param count the number of bits to read, must be a positive
  * number not bigger than 63.
  * @return the bits concatenated as a long using the stream's byte order.
  *         -1 if the end of the underlying stream has been reached before reading
  *         the requested number of bits
  * @throws IOException on error
  */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
+        throw new IllegalArgumentException("count must not be positive and less than or equal to " + MAXIMUM_CACHE_SIZE);
     }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
-            }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
-            }
-            bitsCachedSize += 8;
-        }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
+    loadBytesIfNecessary(count);
 
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
         bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
     } else {
         bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        bitsCached <<= count;
     }
     bitsCachedSize -= count;
     return bitsOut;
 }
+
+private void loadBytesIfNecessary(final int count) throws IOException {
+    while (bitsCachedSize < count) {
+        final long nextByte = in.read();
+        if (nextByte < 0) {
+            throw new EOFException("Unexpected end of input stream");
+        }
+        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            bitsCached |= (nextByte << bitsCachedSize);
+        } else {
+            bitsCached >>= 8;
+            bitsCached |= (nextByte << (bitsCachedSize >= 8 ? bitsCachedSize - 8 : 56));
+        }
+        bitsCachedSize += 8;
+    }
+}
\ No newline at end of file
