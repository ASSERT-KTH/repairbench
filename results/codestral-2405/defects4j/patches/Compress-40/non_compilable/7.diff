diff --git a/tmp/8c53bce9-7cf6-4a2d-a0d2-d4fccc6f0d50_buggy.java b/tmp/8bbbbf15-d723-46e2-8249-8e17556de4bc_fixed.java
index 7116384..ce241e4 100644
--- a/tmp/8c53bce9-7cf6-4a2d-a0d2-d4fccc6f0d50_buggy.java
+++ b/tmp/8bbbbf15-d723-46e2-8249-8e17556de4bc_fixed.java
@@ -1,39 +1,34 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
     while (bitsCachedSize < count) {
         final long nextByte = in.read();
         if (nextByte < 0) {
             return nextByte;
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsCached |= (nextByte << bitsCachedSize);
         } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+            bitsCached = (bitsCached << 8) | nextByte;
         }
         bitsCachedSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
         bitsOut = (bitsCached & MASKS[count]);
         bitsCached >>>= count;
     } else {
         bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        int leftBitsInLastByte = bitsCachedSize % 8;
+        if (leftBitsInLastByte != 0 && count > leftBitsInLastByte) {
+            int missingBits = count - leftBitsInLastByte;
+            bitsOut |= (bitsCached & ((1L << leftBitsInLastByte) - 1)) << missingBits;
+            bitsCached >>>= leftBitsInLastByte;
+            bitsCachedSize -= leftBitsInLastByte;
+        }
     }
     bitsCachedSize -= count;
     return bitsOut;
 }
\ No newline at end of file
