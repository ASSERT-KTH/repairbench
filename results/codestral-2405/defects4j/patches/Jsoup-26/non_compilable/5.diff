diff --git a/tmp/4ab8e808-8933-42ca-8008-7bb0f6ede856_buggy.java b/tmp/4ff04d05-4f9c-448b-8f03-bc14a3750cd5_fixed.java
index f7bc541..9c4e7a7 100644
--- a/tmp/4ab8e808-8933-42ca-8008-7bb0f6ede856_buggy.java
+++ b/tmp/4ff04d05-4f9c-448b-8f03-bc14a3750cd5_fixed.java
@@ -1,14 +1,46 @@
-    /**
-     Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.
-     The original document is not modified. Only elements from the dirt document's <code>body</code> are used.
-     @param dirtyDocument Untrusted base document to clean.
-     @return cleaned document.
-     */
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.safety.Whitelist;
+import org.jsoup.validate.ValidationError;
+import org.jsoup.validator.Validator;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+
+public class Cleaner {
+    private Whitelist whitelist;
+
+    public Cleaner(Whitelist whitelist) {
+        this.whitelist = whitelist;
+    }
+
     public Document clean(Document dirtyDocument) {
         Validate.notNull(dirtyDocument);
 
         Document clean = Document.createShell(dirtyDocument.baseUri());
         copySafeNodes(dirtyDocument.body(), clean.body());
 
         return clean;
     }
+
+    // The copySafeNodes method has been implemented as a basic example. Adjust this based on your specific use-case.
+    private void copySafeNodes(Element source, Element destination) {
+        for (org.jsoup.nodes.Node node : source.childNodes()) {
+            if (node instanceof Element) {
+                Element element = (Element) node;
+                if (isSafe(element)) {
+                    destination.appendChild(element.clone());
+                }
+            } else if (node instanceof TextNode) {
+                // If text is allowed, you might want to add checks to sanitize the text or ignore it
+                destination.appendChild(node.clone());
+            }
+        }
+    }
+
+    private boolean isSafe(Element element) {
+        Collection<ValidationError> errors = Validator.validate(element, whitelist);
+        return errors.isEmpty();
+    }
+}
\ No newline at end of file
