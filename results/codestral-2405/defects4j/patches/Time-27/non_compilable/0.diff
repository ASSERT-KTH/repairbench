diff --git a/tmp/fd641d31-20eb-47e3-ab71-b592879769d8_buggy.java b/tmp/4e49016a-bc1e-41c1-a41a-c4fa5d2e0269_fixed.java
index ec6c9ee..4606619 100644
--- a/tmp/fd641d31-20eb-47e3-ab71-b592879769d8_buggy.java
+++ b/tmp/4e49016a-bc1e-41c1-a41a-c4fa5d2e0269_fixed.java
@@ -1,21 +1,64 @@
-    //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
         PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
         sep = sep.finish(f.getPrinter(), f.getParser());
         return new PeriodFormatter(sep, sep);
     }
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+        // Assuming that comp[1] is a PeriodParser object
+        PeriodParser parser = (PeriodParser) comp[1];
+        parser = new PeriodParser() {
+            @Override
+            public Period parsePeriod(String periodStr) {
+                int hours;
+                int minutes;
+                int seconds;
+
+                // Get the index of "H", "M", and "S" in the period string
+                int hIndex = periodStr.indexOf("H");
+                int mIndex = periodStr.indexOf("M", hIndex + 1);
+                int sIndex = periodStr.indexOf("S", mIndex + 1);
+
+                // If "H", "M", and "S" are all present in the string
+                if (hIndex != -1 && mIndex != -1 && sIndex != -1) {
+                    hours = Integer.parseInt(periodStr.substring(hIndex + 1, mIndex));
+                    minutes = Integer.parseInt(periodStr.substring(mIndex + 1, sIndex));
+                    seconds = Integer.parseInt(periodStr.substring(sIndex + 1));
+                } else {
+                    // If "H" and "M" are present, but "S" is not, then parse the remaining part as minutes and seconds
+                    if (hIndex != -1 && mIndex != -1) {
+                        hours = Integer.parseInt(periodStr.substring(hIndex + 1, mIndex));
+                        minutes = Integer.parseInt(periodStr.substring(mIndex + 1));
+                        seconds = 0;
+                    } else {
+                        // If only "H" is present, then parse the remaining part as hours and minutes
+                        if (hIndex != -1) {
+                            hours = Integer.parseInt(periodStr.substring(hIndex + 1));
+                            minutes = 0;
+                            seconds = 0;
+                        } else {
+                            // If none of "H", "M", and "S" are present, then parse the remaining part as seconds
+                            hours = 0;
+                            minutes = 0;
+                            seconds = Integer.parseInt(periodStr.substring(1)); // Skipping the "T"
+                        }
+                    }
+                }
+
+                // Create a Period object with the parsed hours, minutes, and seconds
+                return new Period(0, 0, 0, hours, minutes, seconds, 0, 0, 0);
+            }
+        };
+        return new PeriodFormatter((PeriodPrinter) comp[0], parser);
     }
 }
\ No newline at end of file
