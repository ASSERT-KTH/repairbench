diff --git a/tmp/509071e6-460a-4ceb-9a75-b7a172289041_buggy.java b/tmp/c1255d31-fb5e-4909-bd9a-cab2cb1a552d_fixed.java
index 3127f85..75a3953 100644
--- a/tmp/509071e6-460a-4ceb-9a75-b7a172289041_buggy.java
+++ b/tmp/c1255d31-fb5e-4909-bd9a-cab2cb1a552d_fixed.java
@@ -1,24 +1,12 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
+    if (Double.isInfinite(dev)) {
+        return x > 0 ? 1.0 : 0.0;
+    }
     try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
+        throw new MathException(ex); // Remove this block if you want to handle NaNs as 0 or 1
     }
 }
\ No newline at end of file
