diff --git a/tmp/245c79d8-7a16-4d62-810d-1d46b6e886ed_buggy.java b/tmp/e3d273c4-9a1e-42f7-a2df-1f28631fa7e1_fixed.java
index 3127f85..5cb61aa 100644
--- a/tmp/245c79d8-7a16-4d62-810d-1d46b6e886ed_buggy.java
+++ b/tmp/e3d273c4-9a1e-42f7-a2df-1f28631fa7e1_fixed.java
@@ -1,24 +1,26 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
+    if (Double.isInfinite(x)) {
+        return x < 0 ? 0 : 1;
+    }
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+        if (x < (mean - 40 * standardDeviation)) {
             return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+        } else if (x > (mean + 40 * standardDeviation)) {
             return 1;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
