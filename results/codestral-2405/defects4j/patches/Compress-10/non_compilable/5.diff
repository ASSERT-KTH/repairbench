diff --git a/tmp/962adfdf-9eaf-45da-b839-ecbc8e338d8a_buggy.java b/tmp/f842d807-5c33-425b-bf2b-69f2f8309611_fixed.java
index 85e6a42..fe28f8d 100644
--- a/tmp/962adfdf-9eaf-45da-b839-ecbc8e338d8a_buggy.java
+++ b/tmp/f842d807-5c33-425b-bf2b-69f2f8309611_fixed.java
@@ -1,50 +1,43 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
-        // changing the name of a ZipArchiveEntry is going to change
-        // the hashcode - see COMPRESS-164
-        // Map needs to be reconstructed in order to keep central
-        // directory order
+        Map<ZipArchiveEntry, OffsetEntry> updatedEntries = new LinkedHashMap<>(); // Add this line to keep the original order
         for (ZipArchiveEntry ze : entries.keySet()) {
             OffsetEntry offsetEntry = entries.get(ze);
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
             archive.readFully(b);
             int fileNameLen = ZipShort.getValue(b);
             archive.readFully(b);
             int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
-                }
-                lenToSkip -= skipped;
+            long fileEndOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen;
+
+            // Change from skipping bytes to reading bytes and then throwing exception if didn't fully read
+            byte[] fileNameBytes = new byte[fileNameLen];
+            int bytesRead = archive.read(fileNameBytes);
+            if (bytesRead != fileNameLen) {
+                throw new RuntimeException("failed to read file name in local file header");
             }
+
             byte[] localExtraData = new byte[extraFieldLen];
-            archive.readFully(localExtraData);
+            bytesRead = archive.read(localExtraData);
+            if (bytesRead != extraFieldLen) {
+                throw new RuntimeException("failed to read extra field in local file header");
+            }
             ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
+            offsetEntry.dataOffset = fileEndOffset + extraFieldLen;
 
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
                 if (!orig.equals(ze.getName())) {
                     nameMap.remove(orig);
                     nameMap.put(ze.getName(), ze);
                 }
             }
+            updatedEntries.put(ze, offsetEntry); // Add this line to maintain the order
         }
+        entries = updatedEntries; // Replace the original map with the updated one
     }
\ No newline at end of file
