diff --git a/tmp/db0f770a-0106-44ea-bc0c-2c7fa2e0d4f4_buggy.java b/tmp/3453d48f-9c1f-4602-aded-1ac5f27bf131_fixed.java
index 85e6a42..e9794fe 100644
--- a/tmp/db0f770a-0106-44ea-bc0c-2c7fa2e0d4f4_buggy.java
+++ b/tmp/3453d48f-9c1f-4602-aded-1ac5f27bf131_fixed.java
@@ -1,50 +1,47 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
-    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
-                                            entriesWithoutUTF8Flag)
+private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag)
     throws IOException {
-        // changing the name of a ZipArchiveEntry is going to change
-        // the hashcode - see COMPRESS-164
-        // Map needs to be reconstructed in order to keep central
-        // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
-            OffsetEntry offsetEntry = entries.get(ze);
+    Map<ZipArchiveEntry, OffsetEntry> updatedEntries = new LinkedHashMap<>();
+    for (Map.Entry<ZipArchiveEntry, OffsetEntry> entry : entries.entrySet()) {
+        ZipArchiveEntry ze = entry.getKey();
+        OffsetEntry offsetEntry = entry.getValue();
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
+
+        byte[] fileNameBytes = new byte[fileNameLen];
+        archive.readFully(fileNameBytes);
+        ze.setName(new String(fileNameBytes, StandardCharsets.UTF_8));  // Corrected to read filename in UTF-8
+
+        int lenToSkip = extraFieldLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
+                throw new RuntimeException("failed to skip extra field in"
                                            + " local file header");
             }
             lenToSkip -= skipped;
         }
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
+
         offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
             + SHORT + SHORT + fileNameLen + extraFieldLen;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
+            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
+        updatedEntries.put(ze, offsetEntry);
     }
+    entries = updatedEntries;
 }
\ No newline at end of file
