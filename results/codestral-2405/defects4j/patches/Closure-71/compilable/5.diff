diff --git a/tmp/500bf53c-b0e2-4930-b3c2-ec1fac111ff7_buggy.java b/tmp/bcfe96f5-958e-4c07-8f5b-5f53ed26bc15_fixed.java
index 6f24eb6..404f9b9 100644
--- a/tmp/500bf53c-b0e2-4930-b3c2-ec1fac111ff7_buggy.java
+++ b/tmp/bcfe96f5-958e-4c07-8f5b-5f53ed26bc15_fixed.java
@@ -1,99 +1,51 @@
-  /**
-   * Determines whether the given property is visible in the current context.
-   * @param t The current traversal.
-   * @param getprop The getprop node.
-   */
-  private void checkPropertyVisibility(NodeTraversal t,
-      Node getprop, Node parent) {
-    ObjectType objectType =
-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
+private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {
+    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
     String propertyName = getprop.getLastChild().getString();
 
     if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
-          parent.getType() == Token.ASSIGN &&
-          parent.getFirstChild() == getprop;
+        // Is this a normal property access, or are we trying to override an existing property?
+        boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;
 
-      // Find the lowest property defined on a class with visibility
-      // information.
+        // Find the lowest property defined on a class with visibility information.
+        ObjectType tempObjectType = objectType;
         if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
+            tempObjectType = objectType.getImplicitPrototype();
         }
         JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
-        if (docInfo != null &&
-            docInfo.getVisibility() != Visibility.INHERITED) {
+        for (; tempObjectType != null; tempObjectType = tempObjectType.getImplicitPrototype()) {
+            docInfo = tempObjectType.getOwnPropertyJSDocInfo(propertyName);
+            if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {
                 break;
             }
         }
 
-      if (objectType == null) {
+        if (tempObjectType == null) {
             // We couldn't find a visibility modifier; assume it's public.
             return;
         }
 
-      boolean sameInput =
-          t.getInput().getName().equals(docInfo.getSourceName());
+        boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());
         Visibility visibility = docInfo.getVisibility();
-      JSType ownerType = normalizeClassType(objectType);
+        JSType ownerType = normalizeClassType(tempObjectType);
         if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
-        JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
-
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
+            // Check an ASSIGN statement that's trying to override a property on a superclass.
             if (visibility == Visibility.PRIVATE && !sameInput) {
-          compiler.report(
-              t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
-            overridingVisibility != visibility) {
-          compiler.report(
-              t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
-                  overridingVisibility.name()));
+                compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));
+                return; // Add this line to prevent further checks for private override.
             }
-      } else {
-        if (sameInput) {
-          // private access is always allowed in the same file.
-          return;
-        } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
-          if (docInfo.isConstructor() &&
-              isValidPrivateConstructorAccess(parent)) {
-            return;
+        } else if (visibility == Visibility.PRIVATE && !sameInput) {
+            // Check for private property access in a different file.
+            compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
         }
 
-          // private access is not allowed outside the file from a different
-          // enclosing class.
-          compiler.report(
-              t.makeError(getprop,
-                  BAD_PRIVATE_PROPERTY_ACCESS,
-                  propertyName,
-                  validator.getReadableJSTypeName(
-                      getprop.getFirstChild(), true)));
-        } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
-            compiler.report(
-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
-                    propertyName,
-                    validator.getReadableJSTypeName(
-                        getprop.getFirstChild(), true)));
-          }
+        JSDocInfo overridingInfo = parent.getJSDocInfo();
+        Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();
+        if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {
+            compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));
         }
+
+        if (visibility == Visibility.PROTECTED && currentClass != null && !currentClass.isSubtype(ownerType)) {
+            compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
         }
     }
 }
\ No newline at end of file
