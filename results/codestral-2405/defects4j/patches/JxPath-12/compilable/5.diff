diff --git a/tmp/a44f0212-e461-4e1f-a650-8acfe6519051_buggy.java b/tmp/5cb3ff65-cf75-40f6-a8b7-b7b33c61f91a_fixed.java
index 40f74f7..70642de 100644
--- a/tmp/a44f0212-e461-4e1f-a650-8acfe6519051_buggy.java
+++ b/tmp/5cb3ff65-cf75-40f6-a8b7-b7b33c61f91a_fixed.java
@@ -1,50 +1,48 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
             String namespaceURI = nodeNameTest.getNamespaceURI();
             boolean wildcard = nodeNameTest.isWildcard();
-            String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
-                return true;
-            }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+            String testLocalName = testName.getName();
+            String nodeLocalName = DOMNodePointer.getLocalName(node);
+
+            // Check if the node's local name matches the test's local name or the test is a wildcard
+            if (wildcard || testLocalName.equals(nodeLocalName)) {
                 String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+                return namespaceURI == null || namespaceURI.equals(nodeNS);
             }
             return false;
         }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE:
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT:
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT:
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI:
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
                 return testPI.equals(nodePI);
             }
         }
         return false;
     }
\ No newline at end of file
