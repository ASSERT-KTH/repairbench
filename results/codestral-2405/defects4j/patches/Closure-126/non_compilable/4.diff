diff --git a/tmp/1592e7e3-11fc-485a-b31d-86de8b78d2cf_buggy.java b/tmp/afccb9b0-4b0e-4a5d-a870-a49b262a0c03_fixed.java
index 7d7ab59..4844d50 100644
--- a/tmp/1592e7e3-11fc-485a-b31d-86de8b78d2cf_buggy.java
+++ b/tmp/afccb9b0-4b0e-4a5d-a870-a49b262a0c03_fixed.java
@@ -1,124 +1,78 @@
-  /**
-   * Attempts to minimize the number of explicit exit points in a control
-   * structure to take advantage of the implied exit at the end of the
-   * structure.  This is accomplished by removing redundant statements, and
-   * moving statements following a qualifying IF node into that node.
-   * For example:
-   *
-   * function () {
-   *   if (x) return;
-   *   else blah();
-   *   foo();
-   * }
-   *
-   * becomes:
-   *
-   * function () {
-   *  if (x) ;
-   *  else {
-   *    blah();
-   *    foo();
-   *  }
-   *
-   * @param n The execution node of a parent to inspect.
-   * @param exitType The type of exit to look for.
-   * @param labelName If parent is a label the name of the label to look for,
-   *   null otherwise.
-   * @nullable labelName non-null only for breaks within labels.
-   */
 void tryMinimizeExits(Node n, int exitType, String labelName) {
 
-    // Just an 'exit'.
+  // A 'return' or 'throw' node.
   if (matchingExitNode(n, exitType, labelName)) {
+    if (n.getParent().isTry() && !n.getParent().getLastChild().isFinally()) {
+      // Replace with a throw statement.
+      n.putBooleanProp(Node.REMOVED, true);
+      n = new Node(IR.THROW);
+      NodeUtil.addChildToFront(n, IR.UNDEFINED, compiler);
+      NodeUtil.replaceChild(n.getParent(), n, compiler);
+      compiler.reportCodeChange();
+    } else {
+      // Remove the exit node.
       NodeUtil.removeChild(n.getParent(), n);
       compiler.reportCodeChange();
       return;
     }
+  }
 
-    // Just an 'if'.
-    if (n.isIf()) {
+  // Node types where we can try to minimize exits.
+  switch (n.getToken()) {
+    case IF:
         Node ifBlock = n.getFirstChild().getNext();
         tryMinimizeExits(ifBlock, exitType, labelName);
         Node elseBlock = ifBlock.getNext();
         if (elseBlock != null) {
             tryMinimizeExits(elseBlock, exitType, labelName);
         }
-      return;
-    }
+        break;
 
-    // Just a 'try/catch/finally'.
-    if (n.isTry()) {
+    case TRY:
         Node tryBlock = n.getFirstChild();
         tryMinimizeExits(tryBlock, exitType, labelName);
-      Node allCatchNodes = NodeUtil.getCatchBlock(n);
-      if (NodeUtil.hasCatchHandler(allCatchNodes)) {
-        Preconditions.checkState(allCatchNodes.hasOneChild());
-        Node catchNode = allCatchNodes.getFirstChild();
+        if (NodeUtil.hasCatchHandler(n)) {
+            Node catchNode = NodeUtil.getCatchBlock(n).getFirstChild();
             Node catchCodeBlock = catchNode.getLastChild();
             tryMinimizeExits(catchCodeBlock, exitType, labelName);
         }
-      /* Don't try to minimize the exits of finally blocks, as this
-       * can cause problems if it changes the completion type of the finally
-       * block. See ECMA 262 Sections 8.9 & 12.14
-       */
         if (NodeUtil.hasFinally(n)) {
             Node finallyBlock = n.getLastChild();
             tryMinimizeExits(finallyBlock, exitType, labelName);
         }
-    }
+        break;
 
-    // Just a 'label'.
-    if (n.isLabel()) {
+    case LABEL:
         Node labelBlock = n.getLastChild();
         tryMinimizeExits(labelBlock, exitType, labelName);
-    }
+        break;
 
-    // TODO(johnlenz): The last case of SWITCH statement?
-
-    // The rest assumes a block with at least one child, bail on anything else.
-    if (!n.isBlock() || n.getLastChild() == null) {
-      return;
-    }
-
-    // Multiple if-exits can be converted in a single pass.
-    // Convert "if (blah) break;  if (blah2) break; other_stmt;" to
-    // become "if (blah); else { if (blah2); else { other_stmt; } }"
-    // which will get converted to "if (!blah && !blah2) { other_stmt; }".
+    // The rest assumes a block with at least one child.
+    default:
+        if (n.isBlock() && n.getLastChild() != null) {
             for (Node c : n.children()) {
-
-      // An 'if' block to process below.
                 if (c.isIf()) {
                     Node ifTree = c;
-        Node trueBlock, falseBlock;
+                    Node trueBlock = ifTree.getFirstChild().getNext();
+                    Node falseBlock = trueBlock.getNext();
 
-        // First, the true condition block.
-        trueBlock = ifTree.getFirstChild().getNext();
-        falseBlock = trueBlock.getNext();
-        tryMinimizeIfBlockExits(trueBlock, falseBlock,
-            ifTree, exitType, labelName);
+                    tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);
 
-        // Now the else block.
-        // The if blocks may have changed, get them again.
                     trueBlock = ifTree.getFirstChild().getNext();
                     falseBlock = trueBlock.getNext();
                     if (falseBlock != null) {
-          tryMinimizeIfBlockExits(falseBlock, trueBlock,
-              ifTree, exitType, labelName);
+                        tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);
                     }
                 }
-
-      if (c == n.getLastChild()) {
-        break;
-      }
             }
 
-    // Now try to minimize the exits of the last child, if it is removed
-    // look at what has become the last child.
             for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
                 tryMinimizeExits(c, exitType, labelName);
-      // If the node is still the last child, we are done.
                 if (c == n.getLastChild()) {
                     break;
                 }
             }
         }
+        break;
+  }
+}
\ No newline at end of file
