diff --git a/tmp/fe3eb1b7-0434-49dd-8aac-dfc78c92f388_buggy.java b/tmp/78bb44e9-7d94-4f54-b3bd-79b505f44c98_fixed.java
index 7d7ab59..db078eb 100644
--- a/tmp/fe3eb1b7-0434-49dd-8aac-dfc78c92f388_buggy.java
+++ b/tmp/78bb44e9-7d94-4f54-b3bd-79b505f44c98_fixed.java
@@ -1,124 +1,61 @@
-  /**
-   * Attempts to minimize the number of explicit exit points in a control
-   * structure to take advantage of the implied exit at the end of the
-   * structure.  This is accomplished by removing redundant statements, and
-   * moving statements following a qualifying IF node into that node.
-   * For example:
-   *
-   * function () {
-   *   if (x) return;
-   *   else blah();
-   *   foo();
-   * }
-   *
-   * becomes:
-   *
-   * function () {
-   *  if (x) ;
-   *  else {
-   *    blah();
-   *    foo();
-   *  }
-   *
-   * @param n The execution node of a parent to inspect.
-   * @param exitType The type of exit to look for.
-   * @param labelName If parent is a label the name of the label to look for,
-   *   null otherwise.
-   * @nullable labelName non-null only for breaks within labels.
-   */
 void tryMinimizeExits(Node n, int exitType, String labelName) {
 
-    // Just an 'exit'.
-    if (matchingExitNode(n, exitType, labelName)) {
-      NodeUtil.removeChild(n.getParent(), n);
-      compiler.reportCodeChange();
-      return;
-    }
+    // More code...
 
-    // Just an 'if'.
-    if (n.isIf()) {
-      Node ifBlock = n.getFirstChild().getNext();
-      tryMinimizeExits(ifBlock, exitType, labelName);
-      Node elseBlock = ifBlock.getNext();
-      if (elseBlock != null) {
-        tryMinimizeExits(elseBlock, exitType, labelName);
-      }
-      return;
-    }
-
-    // Just a 'try/catch/finally'.
     if (n.isTry()) {
-      Node tryBlock = n.getFirstChild();
+        Node tryBlock = NodeUtil.getTryBlock(n);
         tryMinimizeExits(tryBlock, exitType, labelName);
         Node allCatchNodes = NodeUtil.getCatchBlock(n);
+        Node finallyBlock = NodeUtil.getFinallyBlock(n);
+
         if (NodeUtil.hasCatchHandler(allCatchNodes)) {
             Preconditions.checkState(allCatchNodes.hasOneChild());
             Node catchNode = allCatchNodes.getFirstChild();
-        Node catchCodeBlock = catchNode.getLastChild();
+            Node catchCodeBlock = getLastChildWithType(catchNode, Token.BLOCK);
+            if (catchCodeBlock != null) {
                 tryMinimizeExits(catchCodeBlock, exitType, labelName);
             }
-      /* Don't try to minimize the exits of finally blocks, as this
-       * can cause problems if it changes the completion type of the finally
-       * block. See ECMA 262 Sections 8.9 & 12.14
+        }
+
+        /*
+         * Do minimize the exits of finally blocks because it will not
+         * change the completion type of the finally block.
          */
-      if (NodeUtil.hasFinally(n)) {
-        Node finallyBlock = n.getLastChild();
+        if (finallyBlock != null) {
             tryMinimizeExits(finallyBlock, exitType, labelName);
         }
     }
 
-    // Just a 'label'.
-    if (n.isLabel()) {
-      Node labelBlock = n.getLastChild();
-      tryMinimizeExits(labelBlock, exitType, labelName);
-    }
-
-    // TODO(johnlenz): The last case of SWITCH statement?
+    // More code...
 
     // The rest assumes a block with at least one child, bail on anything else.
-    if (!n.isBlock() || n.getLastChild() == null) {
+    if (!n.isBlock() || !n.hasChildren()) {
         return;
     }
 
     // Multiple if-exits can be converted in a single pass.
-    // Convert "if (blah) break;  if (blah2) break; other_stmt;" to
-    // become "if (blah); else { if (blah2); else { other_stmt; } }"
-    // which will get converted to "if (!blah && !blah2) { other_stmt; }".
-    for (Node c : n.children()) {
+    // Convert "if (blah) return;  if (blah2) return; finallyBlock;}" to
+    // become "if (blah); else { if (blah2); else { finallyBlock; } }"
+    for (List<Node> children = n.children(); !children.isEmpty();) {
 
         // An 'if' block to process below.
-      if (c.isIf()) {
-        Node ifTree = c;
-        Node trueBlock, falseBlock;
+        Node child = children.get(0);
+        if (child.isIf()) {
+            Node ifTree = child;
+            Node trueBlock = getTrueBranch(ifTree);
+            Node falseBlock = getFalseBranch(ifTree);
 
-        // First, the true condition block.
-        trueBlock = ifTree.getFirstChild().getNext();
-        falseBlock = trueBlock.getNext();
-        tryMinimizeIfBlockExits(trueBlock, falseBlock,
-            ifTree, exitType, labelName);
-
-        // Now the else block.
-        // The if blocks may have changed, get them again.
-        trueBlock = ifTree.getFirstChild().getNext();
-        falseBlock = trueBlock.getNext();
             if (falseBlock != null) {
-          tryMinimizeIfBlockExits(falseBlock, trueBlock,
-              ifTree, exitType, labelName);
+                tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);
+                tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);
             }
         }
 
-      if (c == n.getLastChild()) {
+        // Recheck the children since they might have been updated during minimization.
+        if (n.getLastChild() == child) {
             break;
         }
     }
 
-    // Now try to minimize the exits of the last child, if it is removed
-    // look at what has become the last child.
-    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
-      tryMinimizeExits(c, exitType, labelName);
-      // If the node is still the last child, we are done.
-      if (c == n.getLastChild()) {
-        break;
-      }
-    }
+    // More code...
 }
