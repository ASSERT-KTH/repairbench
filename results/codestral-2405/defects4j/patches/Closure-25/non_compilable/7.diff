diff --git a/tmp/34971f45-fd0a-4093-8a55-6c19b85bebca_buggy.java b/tmp/258809b6-52c8-4742-aa46-bf6f79eefc0e_fixed.java
index b98f0a7..2560d77 100644
--- a/tmp/34971f45-fd0a-4093-8a55-6c19b85bebca_buggy.java
+++ b/tmp/258809b6-52c8-4742-aa46-bf6f79eefc0e_fixed.java
@@ -1,29 +1,33 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+
+        // Add type inference based on the constructor's parameter
+        Node arg = constructor.getNext();
+        if (arg != null) {
+          JSType paramType = ct.getParameters().get(0);
+          arg.setJSType(paramType);
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
