diff --git a/tmp/fbf1d4db-c7b5-4816-86dd-bb8359ccec02_buggy.java b/tmp/42cd8c22-32f6-4b86-ab4e-1464e2a4da68_fixed.java
index b98f0a7..4c5271f 100644
--- a/tmp/fbf1d4db-c7b5-4816-86dd-bb8359ccec02_buggy.java
+++ b/tmp/42cd8c22-32f6-4b86-ab4e-1464e2a4da68_fixed.java
@@ -1,29 +1,42 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
+          // If constructorType is a NoObjectType, then toMaybeFunctionType
+          // will return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
+        // In case of new keyword, we need to handle constructor parameters
+        if (type != null && type.isRecordType()) {
+          Node arg = constructor.getNext();
+          if (arg != null && arg.isQualifiedName()) {
+            QualifiedName fnRef = arg.getQualifiedName();
+            Var var = fnRef == null ? null : fnRef.lookupVar();
+            if (var != null && var.isParameter()) {
+              JSType argType = arg.getJSType();
+              if (argType != null && argType.isRecordType()) {
+                type.meetWith(argType);
+              }
+            }
+          }
+        }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
