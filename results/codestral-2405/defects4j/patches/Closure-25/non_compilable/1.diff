diff --git a/tmp/92cf5efc-c21d-4b39-8d4f-bc8f6117a526_buggy.java b/tmp/6ee185c2-f7e2-4df5-87a7-daeb0c1584a5_fixed.java
index b98f0a7..64a258e 100644
--- a/tmp/92cf5efc-c21d-4b39-8d4f-bc8f6117a526_buggy.java
+++ b/tmp/6ee185c2-f7e2-4df5-87a7-daeb0c1584a5_fixed.java
@@ -1,29 +1,31 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
-    if (constructorType != null) {
-      constructorType = constructorType.restrictByNotNullOrUndefined();
-      if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
-      } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
+    JSType argType = null;
+    if (constructorType != null && constructorType instanceof FunctionType) {
+        FunctionType functionType = (FunctionType) constructorType;
+        if (functionType.isConstructor()) {
+            // perform type check of constructor argument
+            Node arg = constructor.getNext();
+            traverse(arg, scope);
+            JSType argJSType = arg.getJSType();
+            if (argJSType != null) {
+                argType = functionType.checkParameterType(argJSType);
+                if (argJSType.isObject() && arg instanceof Node.ObjectLit) {
+                    // if the argument is an object literal, merge its properties with the expected parameter type
+                    ObjectType objectType = argJSType.toObjectType();
+                    if (objectType != null && argType != null && argType.isObject()) {
+                        ObjectType paramObjectType = argType.toObjectType();
+                        if (paramObjectType != null) {
+                            paramObjectType.mergeWith(objectType);
+                            argType = paramObjectType;
                         }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
                     }
                 }
             }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
         }
+    }
+    n.setJSType(argType);
     return scope;
 }
\ No newline at end of file
