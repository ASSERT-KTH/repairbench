diff --git a/tmp/02de5846-4938-4765-8b52-7fda4a4bb4c1_buggy.java b/tmp/d5d134d6-fdcc-4b1f-88b0-b728963eeb56_fixed.java
index b98f0a7..e01d7c3 100644
--- a/tmp/02de5846-4938-4765-8b52-7fda4a4bb4c1_buggy.java
+++ b/tmp/d5d134d6-fdcc-4b1f-88b0-b728963eeb56_fixed.java
@@ -1,29 +1,38 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        // Added code to handle backwards inference
+        Node arg = constructor.getNext();
+        if (arg != null) {
+          if (type instanceof ObjectType) {
+            ObjectType objType = (ObjectType) type;
+            objType.getProperty(scope, arg, "constructorParameter");
+            arg.setJSType(objType);
+          }
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
