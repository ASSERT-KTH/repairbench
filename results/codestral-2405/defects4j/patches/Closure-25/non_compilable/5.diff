diff --git a/tmp/5b251af5-4e3e-4016-93f5-0ac8222d07e3_buggy.java b/tmp/15396373-1a5b-494c-ade3-6bf212be7191_fixed.java
index b98f0a7..ff2fcb4 100644
--- a/tmp/5b251af5-4e3e-4016-93f5-0ac8222d07e3_buggy.java
+++ b/tmp/15396373-1a5b-494c-ade3-6bf212be7191_fixed.java
@@ -1,29 +1,41 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+
+        // New fix in the else-if block
+        Node arg = constructor.getNext();
+        if (arg != null) {
+          JSType argType = arg.getJSType();
+          if (argType != null && type.isObject()) {
+            type = type.mergeWith(new ObjectType(JSTypeRegistry.createEmptyTypeMap().
+              setPropertyType(JSTypeRegistry.createStringLiteralType("foo"),
+                             JSTypeRegistry.getUnionType(JSTypeRegistry.getNumberType(),
+                                                         JSTypeRegistry.getUndefinedType()))));
+          }
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
