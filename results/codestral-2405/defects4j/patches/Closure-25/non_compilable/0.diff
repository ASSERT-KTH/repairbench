diff --git a/tmp/63040c6f-75fa-4f1c-b0f6-6fd668fbbae1_buggy.java b/tmp/257a875d-c51b-46e9-8b1f-23b4033da7a2_fixed.java
index b98f0a7..02b9574 100644
--- a/tmp/63040c6f-75fa-4f1c-b0f6-6fd668fbbae1_buggy.java
+++ b/tmp/257a875d-c51b-46e9-8b1f-23b4033da7a2_fixed.java
@@ -1,29 +1,46 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
+
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        // add this line to update the constructor's type
+        constructorType = type;
       }
     }
   }
+
+  // modify this block to update the argument's type
+  if (constructorType instanceof FunctionType && constructor.getSecondChild() != null) {
+    Node arg = constructor.getSecondChild();
+    JSType argType = arg.getJSType();
+    if (argType instanceof ObjectType) {
+      ObjectType o = (ObjectType) argType;
+      ObjectType t = ((FunctionType) constructorType).getPrototype();
+      t.seal();
+      o.forEachProperty((name, propType) -> {
+        JSType tType = t.getPropertyType(name);
+        propType.asMutable().bitwiseOr(tType);
+      });
+    }
+    scope = traverse(arg, scope);
+  }
+
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
