diff --git a/tmp/080b1509-5818-4026-8988-3066cd91ff0c_buggy.java b/tmp/6901b9c7-f386-4ed2-ae1d-d38c18172707_fixed.java
index b98f0a7..438e6d8 100644
--- a/tmp/080b1509-5818-4026-8988-3066cd91ff0c_buggy.java
+++ b/tmp/6901b9c7-f386-4ed2-ae1d-d38c18172707_fixed.java
@@ -1,29 +1,43 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
+    FlowScope originScope = scope.copy();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Update scope after determining the instance type
+                if (ct.hasParameters()) {
+                    originScope.mergeWith(updateScopeWithConstructorParameters(originScope, ct.getParameters(), n.getSecondChild()));
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+        scope = traverse(arg, originScope);
+    }
+    return scope;
+}
+
+private FlowScope updateScopeWithConstructorParameters(FlowScope scope, List<FunctionType.Parameter> parameters, Node argument) {
+    if (parameters.size() > 0 && argument != null) {
+        JSType argumentType = argument.getJSType();
+        if (argumentType != null) {
+            scope.setTypeOf(parameters.get(0).getNameNode(), argumentType.restrictByNotNullOrUndefined());
+        }
     }
     return scope;
 }
\ No newline at end of file
