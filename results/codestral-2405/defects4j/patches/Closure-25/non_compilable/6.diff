diff --git a/tmp/34c90efe-3db9-4ec7-b4c3-cd4275888d65_buggy.java b/tmp/e7ac9e10-862d-4ba1-ade5-3ab6c05a71d2_fixed.java
index b98f0a7..4944fa2 100644
--- a/tmp/34c90efe-3db9-4ec7-b4c3-cd4275888d65_buggy.java
+++ b/tmp/e7ac9e10-862d-4ba1-ade5-3ab6c05a71d2_fixed.java
@@ -1,29 +1,33 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
-      constructorType = constructorType.restrictByNotNullOrUndefined();
-      if (constructorType.isUnknownType()) {
+      JSType withoutNullOrUndefined = constructorType.restrictByNotNullOrUndefined();
+      if (withoutNullOrUndefined.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        FunctionType ct = withoutNullOrUndefined.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
+
+        // get the type of the argument
+        Node firstArg = constructor.getNext();
+        if (firstArg != null && ct != null) {
+          JSType argType = firstArg.getJSType();
+          JSType withoutNullOrUndefinedArg = argType.restrictByNotNullOrUndefined();
+          JSType mergedType = type.getObjectProperty("x").getType().getUnion(withoutNullOrUndefinedArg);
+          type = type.setProperty("x", mergedType);
+        }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
