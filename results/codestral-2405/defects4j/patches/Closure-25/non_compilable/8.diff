diff --git a/tmp/5e88f832-e354-4c89-8c7f-c509b4cc2bdd_buggy.java b/tmp/3656e2aa-b7cd-45fe-99e0-de89f815f730_fixed.java
index b98f0a7..de73e00 100644
--- a/tmp/5e88f832-e354-4c89-8c7f-c509b4cc2bdd_buggy.java
+++ b/tmp/3656e2aa-b7cd-45fe-99e0-de89f815f730_fixed.java
@@ -1,29 +1,41 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
+    // Traverse the constructor
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Check if the constructor expects parameters and consider backward type inference for them
+          if (ct.getParameters() != null) {
+            Node parameter = constructor.getNext();
+            for (Parameter param : ct.getParameters()) {
+              if (parameter != null && param.getType() != null) {
+                JSType paramType = param.getType();
+                JSType argType = parameter.getJSType();
+                if (argType != null) {
+                  argType.bitwiseMeet(paramType.toObjectType()); //Update the argument type with the constructor parameter type
+                }
+                parameter = parameter.getNext();
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
