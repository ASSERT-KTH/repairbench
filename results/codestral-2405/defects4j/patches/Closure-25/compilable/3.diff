diff --git a/tmp/eca09563-7304-44c8-b421-7c18f38508db_buggy.java b/tmp/44904b4f-c682-4593-be9f-6cb5f6f293a2_fixed.java
index b98f0a7..35c5da1 100644
--- a/tmp/eca09563-7304-44c8-b421-7c18f38508db_buggy.java
+++ b/tmp/44904b4f-c682-4593-be9f-6cb5f6f293a2_fixed.java
@@ -1,29 +1,32 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
+  if (type != null) {
+    Node arg = constructor.getNext();
+    if (arg != null) {
+      arg.setJSType(type);
+    }
+  }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
