diff --git a/tmp/1219cb30-00f4-41f9-a182-69ceb741bcfa_buggy.java b/tmp/a02e93eb-61fe-4748-9513-d16b102c392c_fixed.java
index 3652aad..e46d7dc 100644
--- a/tmp/1219cb30-00f4-41f9-a182-69ceb741bcfa_buggy.java
+++ b/tmp/a02e93eb-61fe-4748-9513-d16b102c392c_fixed.java
@@ -1,86 +1,74 @@
-    /**
-     * Defines a typed variable. The defining node will be annotated with the
-     * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is
-     * inferred.
-     *
-     * Slots may be any variable or any qualified name in the global scope.
-     *
-     * @param n the defining NAME or GETPROP node.
-     * @param parent the {@code n}'s parent.
-     * @param type the variable's type. It may be {@code null} if
-     *     {@code inferred} is {@code true}.
-     */
 void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
   Preconditions.checkArgument(inferred || type != null);
 
-      // Only allow declarations of NAMEs and qualfied names.
+  // Only allow declarations of NAMEs and qualified names.
   boolean shouldDeclareOnGlobalThis = false;
   if (n.getType() == Token.NAME) {
     Preconditions.checkArgument(
         parent.getType() == Token.FUNCTION ||
         parent.getType() == Token.VAR ||
         parent.getType() == Token.LP ||
         parent.getType() == Token.CATCH);
-        shouldDeclareOnGlobalThis = scope.isGlobal() &&
-            (parent.getType() == Token.VAR ||
-             parent.getType() == Token.FUNCTION);
+    shouldDeclareOnGlobalThis = scope.isGlobal() && parent.getType() == Token.VAR;
   } else {
     Preconditions.checkArgument(
         n.getType() == Token.GETPROP &&
-            (parent.getType() == Token.ASSIGN ||
-             parent.getType() == Token.EXPR_RESULT));
+        (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));
   }
   String variableName = n.getQualifiedName();
   Preconditions.checkArgument(!variableName.isEmpty());
 
-      // If n is a property, then we should really declare it in the
-      // scope where the root object appears. This helps out people
-      // who declare "global" names in an anonymous namespace.
+  // If n is a property, then we should really declare it in the scope where the root object appears.
   Scope scopeToDeclareIn = scope;
 
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
+  if (variableName.contains(".")) {
+    String[] parts = variableName.split("\\.");
+    for (int i = 0; i < parts.length - 1; i++) {
+      String part = String.join(".", Arrays.copyOfRange(parts, 0, i + 1));
+      if (!scopeToDeclareIn.isDeclared(part, false)) {
+        scopeToDeclareIn.declare(part, n, getNativeType(OBJECT_TYPE), compiler.getInput(sourceName), true);
+      }
+      scopeToDeclareIn = scopeToDeclareIn.getChild(part);
+    }
+    variableName = parts[parts.length - 1];
+  }
 
-      // declared in closest scope?
+  // Don't try to declare in the global scope if there's already a symbol there with this name.
   if (scopeToDeclareIn.isDeclared(variableName, false)) {
     Var oldVar = scopeToDeclareIn.getVar(variableName);
     validator.expectUndeclaredVariable(
         sourceName, n, parent, oldVar, variableName, type);
   } else {
     if (!inferred) {
       setDeferredType(n, type);
     }
     CompilerInput input = compiler.getInput(sourceName);
     scopeToDeclareIn.declare(variableName, n, type, input, inferred);
 
     if (shouldDeclareOnGlobalThis) {
       ObjectType globalThis =
           typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
       boolean isExtern = input.isExtern();
       if (inferred) {
         globalThis.defineInferredProperty(variableName,
-                type == null ?
-                    getNativeType(JSTypeNative.NO_TYPE) :
-                    type,
-                isExtern);
+            type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);
       } else {
         globalThis.defineDeclaredProperty(variableName, type, isExtern);
       }
     }
 
-        // If we're in the global scope, also declare var.prototype
-        // in the scope chain.
+    // If we're in the global scope, also declare var.prototype in the scope chain.
     if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
       FunctionType fnType = (FunctionType) type;
       if (fnType.isConstructor() || fnType.isInterface()) {
         FunctionType superClassCtor = fnType.getSuperClassConstructor();
         scopeToDeclareIn.declare(variableName + ".prototype", n,
             fnType.getPrototype(), compiler.getInput(sourceName),
             /* declared iff there's an explicit supertype */
             superClassCtor == null ||
             superClassCtor.getInstanceType().equals(
                 getNativeType(OBJECT_TYPE)));
       }
     }
   }
 }
\ No newline at end of file
