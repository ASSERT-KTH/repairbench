diff --git a/tmp/c2e214c7-370c-48f4-808b-52abd3150d4e_buggy.java b/tmp/2cf916c9-30d5-4e1c-b738-1731e92be05b_fixed.java
index 3652aad..5717707 100644
--- a/tmp/c2e214c7-370c-48f4-808b-52abd3150d4e_buggy.java
+++ b/tmp/2cf916c9-30d5-4e1c-b738-1731e92be05b_fixed.java
@@ -1,86 +1,64 @@
-    /**
-     * Defines a typed variable. The defining node will be annotated with the
-     * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is
-     * inferred.
-     *
-     * Slots may be any variable or any qualified name in the global scope.
-     *
-     * @param n the defining NAME or GETPROP node.
-     * @param parent the {@code n}'s parent.
-     * @param type the variable's type. It may be {@code null} if
-     *     {@code inferred} is {@code true}.
-     */
 void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
   Preconditions.checkArgument(inferred || type != null);
 
-      // Only allow declarations of NAMEs and qualfied names.
   boolean shouldDeclareOnGlobalThis = false;
   if (n.getType() == Token.NAME) {
     Preconditions.checkArgument(
         parent.getType() == Token.FUNCTION ||
         parent.getType() == Token.VAR ||
         parent.getType() == Token.LP ||
         parent.getType() == Token.CATCH);
     shouldDeclareOnGlobalThis = scope.isGlobal() &&
         (parent.getType() == Token.VAR ||
          parent.getType() == Token.FUNCTION);
   } else {
     Preconditions.checkArgument(
         n.getType() == Token.GETPROP &&
         (parent.getType() == Token.ASSIGN ||
          parent.getType() == Token.EXPR_RESULT));
   }
   String variableName = n.getQualifiedName();
   Preconditions.checkArgument(!variableName.isEmpty());
 
-      // If n is a property, then we should really declare it in the
-      // scope where the root object appears. This helps out people
-      // who declare "global" names in an anonymous namespace.
-      Scope scopeToDeclareIn = scope;
+  Scope globalScope = scope.getRoot(); // get the global scope
 
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
-
-      // declared in closest scope?
-      if (scopeToDeclareIn.isDeclared(variableName, false)) {
-        Var oldVar = scopeToDeclareIn.getVar(variableName);
-        validator.expectUndeclaredVariable(
-            sourceName, n, parent, oldVar, variableName, type);
-      } else {
+  // declare in the global scope if not already declared
+  if (!globalScope.isDeclared(variableName, false)) {
     if (!inferred) {
       setDeferredType(n, type);
     }
     CompilerInput input = compiler.getInput(sourceName);
-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);
+    globalScope.declare(variableName, n, type, input, inferred);
+  } else {
+    Var oldVar = globalScope.getVar(variableName);
+    validator.expectUndeclaredVariable(
+        sourceName, n, parent, oldVar, variableName, type);
+  }
 
   if (shouldDeclareOnGlobalThis) {
     ObjectType globalThis =
         typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
     boolean isExtern = input.isExtern();
     if (inferred) {
       globalThis.defineInferredProperty(variableName,
           type == null ?
               getNativeType(JSTypeNative.NO_TYPE) :
               type,
           isExtern);
     } else {
       globalThis.defineDeclaredProperty(variableName, type, isExtern);
     }
   }
 
-        // If we're in the global scope, also declare var.prototype
-        // in the scope chain.
-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
+  if (scope.isGlobal() && type instanceof FunctionType) {
     FunctionType fnType = (FunctionType) type;
     if (fnType.isConstructor() || fnType.isInterface()) {
       FunctionType superClassCtor = fnType.getSuperClassConstructor();
-            scopeToDeclareIn.declare(variableName + ".prototype", n,
+      scope.declare(variableName + ".prototype", n,
           fnType.getPrototype(), compiler.getInput(sourceName),
-                /* declared iff there's an explicit supertype */
           superClassCtor == null ||
-                superClassCtor.getInstanceType().equals(
+          !superClassCtor.getInstanceType().equals(
               getNativeType(OBJECT_TYPE)));
     }
   }
 }
\ No newline at end of file
-    }
