diff --git a/tmp/1ab0ed8e-ccfd-4cb2-99a4-a94c748d4983_buggy.java b/tmp/988b71bb-a0ba-44e9-90a6-6fe7045cc24a_fixed.java
index 5abdeb5..444721b 100644
--- a/tmp/1ab0ed8e-ccfd-4cb2-99a4-a94c748d4983_buggy.java
+++ b/tmp/988b71bb-a0ba-44e9-90a6-6fe7045cc24a_fixed.java
@@ -1,29 +1,18 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
       @Override
       public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+        if (n.isName() && n.getString().equals(varName)) {
           numUsesWithinCfgNode++;
         }
       }
-
   };
-
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
