diff --git a/tmp/b54a10f9-1248-4a7a-a496-042db7533bbc_buggy.java b/tmp/442a8833-1fcf-4bfa-8827-e6daa816212e_fixed.java
index 5abdeb5..234dc70 100644
--- a/tmp/b54a10f9-1248-4a7a-a496-042db7533bbc_buggy.java
+++ b/tmp/442a8833-1fcf-4bfa-8827-e6daa816212e_fixed.java
@@ -1,29 +1,24 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+              // We make a special exception when the usage is not on the left-hand side of a top-level assignment
+              !(parent.isAssign() && n == parent.getFirstChild())) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
