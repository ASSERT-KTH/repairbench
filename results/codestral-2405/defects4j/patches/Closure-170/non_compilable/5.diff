diff --git a/tmp/58abca4b-0452-4c5a-82ac-d99bc08498f1_buggy.java b/tmp/657d1296-e9d1-4f5d-891e-fb5228ae6582_fixed.java
index 5abdeb5..0a9437a 100644
--- a/tmp/58abca4b-0452-4c5a-82ac-d99bc08498f1_buggy.java
+++ b/tmp/657d1296-e9d1-4f5d-891e-fb5228ae6582_fixed.java
@@ -1,29 +1,18 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
     numUsesWithinCfgNode = 0;
     AbstractCfgNodeTraversalCallback gatherCb =
         new AbstractCfgNodeTraversalCallback() {
 
             @Override
             public void visit(NodeTraversal t, Node n, Node parent) {
                 if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+                    !((parent.isAssign() && parent.getFirstChild() == n) ||
+                    (parent.isConditional() && parent.getFirstChild() == n))) {
                     numUsesWithinCfgNode++;
                 }
             }
-
         };
 
     NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
