diff --git a/tmp/282306e5-2635-43ec-895e-d58ac73e01c0_buggy.java b/tmp/d5c7d6c5-f62e-4dd0-93b2-e7bf08cbca72_fixed.java
index 5abdeb5..156f70e 100644
--- a/tmp/282306e5-2635-43ec-895e-d58ac73e01c0_buggy.java
+++ b/tmp/d5c7d6c5-f62e-4dd0-93b2-e7bf08cbca72_fixed.java
@@ -1,29 +1,33 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
-    private void getNumUseInUseCfgNode(final Node cfgNode) {
+private void getNumUseInUseCfgNode(final Node cfgNode, final String varName) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // If the parent is a hook, check if it's an assignment that uses the variable.
+        if (parent.isHook()) {
+          Node firstChild = parent.getFirstChild();
+          Node secondChild = parent.getSecondChild();
+          Node thirdChild = parent.getChildCount() > 2 ? parent.getChild(2) : null;
+          if (!(firstChild.isAssign() && firstChild.getFirstChild() == n) &&
+              !(secondChild.isAssign() && secondChild.getFirstChild() == n) &&
+              !(thirdChild != null && thirdChild.isAssign() && thirdChild.getFirstChild() == n)) {
             numUsesWithinCfgNode++;
           }
+        } else if (!(parent.isAssign() && parent.getFirstChild() == n)) {
+          numUsesWithinCfgNode++;
+        }
+      }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
