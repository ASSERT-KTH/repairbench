diff --git a/tmp/6786afeb-946c-40c2-ab7d-45d7eb33ce84_buggy.java b/tmp/99e50cbf-4d64-44a2-a3f1-08f1e3987102_fixed.java
index 5abdeb5..ebe0263 100644
--- a/tmp/6786afeb-946c-40c2-ab7d-45d7eb33ce84_buggy.java
+++ b/tmp/99e50cbf-4d64-44a2-a3f1-08f1e3987102_fixed.java
@@ -1,29 +1,48 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          // Check if the node is part of an assignment expression and that assignment is not a descendant of cfgNode
+          (!getNodeWithRole(n, Node.Role.LHS) != null &&
+          !isDescendant(getNodeWithRole(n, Node.Role.LHS).getParent(), cfgNode))) {
         numUsesWithinCfgNode++;
       }
     }
 
+    // Helper method to get the node with a specific role
+    private Node getNodeWithRole(Node n, Node.Role role) {
+      Node traversal = n;
+      while (traversal != null) {
+        if (traversal.getRole() == role) {
+          return traversal;
+        }
+        traversal = traversal.getParent();
+      }
+      return null;
+    }
+
+    // Helper method to check if a node is a descendant of another node
+    private boolean isDescendant(Node n, Node potentialAncestor) {
+      Node traversal = n;
+      while (traversal != null) {
+        if (traversal == potentialAncestor) {
+          return true;
+        }
+        traversal = traversal.getParent();
+      }
+      return false;
+    }
+
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
