diff --git a/tmp/9583d244-77f1-467c-9d12-91a9293352b7_buggy.java b/tmp/455bb376-5efd-41ab-ba0e-2d6154341c16_fixed.java
index 5abdeb5..f5c9570 100644
--- a/tmp/9583d244-77f1-467c-9d12-91a9293352b7_buggy.java
+++ b/tmp/455bb376-5efd-41ab-ba0e-2d6154341c16_fixed.java
@@ -1,29 +1,24 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            // Check if the name is used in a side-effect expression or
+            // under a special context like conditional statements
+              !(parent.isAssign() && parent.getFirstChild() == n) &&
+              !(parent.isConditional() && parent.getFirstChild().isAssign()) &&
+              !(parent.isLogicalOr() && parent.getFirstChild().isAssign()) &&
+              !(parent.isBinaryOperation() && parent.getFirstChild().isAssign())) {
+              // Don't count lhs of top-level assignment or special context
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
