diff --git a/tmp/f41b0f68-d959-4857-8b88-3c25e5667ada_buggy.java b/tmp/0ddde537-06fd-4ac4-be67-6e70a9d7c39c_fixed.java
index 5abdeb5..e08b4e5 100644
--- a/tmp/f41b0f68-d959-4857-8b88-3c25e5667ada_buggy.java
+++ b/tmp/0ddde537-06fd-4ac4-be67-6e70a9d7c39c_fixed.java
@@ -1,29 +1,19 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            !(parent.isAssign() && n.isFirstChildOf(parent) && n.isNameDef())
+            && !(parent.isComma() && n.isFirstChildOf(parent) && parent.getLastChild() != n)) {
             numUsesWithinCfgNode++;
           }
         }
 
       };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
