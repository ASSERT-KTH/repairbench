diff --git a/tmp/a0c253d2-d907-4fd6-ab35-c09437f7c9e3_buggy.java b/tmp/b629109e-8551-4ce3-a324-9ab9186e426e_fixed.java
index ae1f3a6..0f7159b 100644
--- a/tmp/a0c253d2-d907-4fd6-ab35-c09437f7c9e3_buggy.java
+++ b/tmp/b629109e-8551-4ce3-a324-9ab9186e426e_fixed.java
@@ -1,34 +1,38 @@
-    protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
-    {
+protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException {
     /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
      *   check if any generics info is added; and only then ask factory
      *   to do translation when necessary
      */
     TypeFactory tf = ctxt.getTypeFactory();
     if (id.indexOf('<') > 0) {
-            // note: may want to try combining with specialization (esp for EnumMap)?
-            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
-            //    compatibility -- needed later anyway, and not doing so may open
-            //    security issues.
+        // Check the assignment compatibility
         JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+        if (!t.isTypeOrSubTypeOf(_baseType)) {
+            // If the type is not compatible, throw an exception
+            throw new JsonMappingException(r("Can not instantiate polymorphic type '%s' (from id '%s')", _baseType, id), _currentLocation);
+        }
         return t;
     }
     Class<?> cls;
     try {
         cls =  tf.findClass(id);
     } catch (ClassNotFoundException e) {
         // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
         // DeserializationContext, just playing it safe
         if (ctxt instanceof DeserializationContext) {
             DeserializationContext dctxt = (DeserializationContext) ctxt;
             // First: we may have problem handlers that can deal with it?
             return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
         }
         // ... meaning that we really should never get here.
         return null;
     } catch (Exception e) {
         throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
     }
-        return tf.constructSpecializedType(_baseType, cls);
+    // Construct the specialized type, check the assignment compatibility, and then return it
+    JavaType specializedType = tf.constructSpecializedType(_baseType, cls);
+    if (!specializedType.isTypeOrSubTypeOf(_baseType)) {
+        throw new JsonMappingException(r("Type '%s' constructed from class '%s' is not subtype of '%s'", specializedType, cls, _baseType), _currentLocation);
+    }
+    return specializedType;
 }
\ No newline at end of file
