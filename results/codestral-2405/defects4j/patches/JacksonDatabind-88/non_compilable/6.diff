diff --git a/tmp/e79cbf70-b79f-4d85-a272-c8664846592b_buggy.java b/tmp/51ccede5-0b87-4bc3-9d41-6a63f42228bf_fixed.java
index ae1f3a6..54d3ab6 100644
--- a/tmp/e79cbf70-b79f-4d85-a272-c8664846592b_buggy.java
+++ b/tmp/51ccede5-0b87-4bc3-9d41-6a63f42228bf_fixed.java
@@ -1,34 +1,34 @@
 protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
 {
-        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
-         *    check if any generics info is added; and only then ask factory
-         *    to do translation when necessary
-         */
     TypeFactory tf = ctxt.getTypeFactory();
+    JavaType rawType = _baseType;
+
+    // Properly handle generic type information
     if (id.indexOf('<') > 0) {
-            // note: may want to try combining with specialization (esp for EnumMap)?
-            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
-            //    compatibility -- needed later anyway, and not doing so may open
-            //    security issues.
         JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+        // Add check to ensure assignment compatibility with the expected base type
+        if (t.isTypeOrSubTypeOf(rawType)) {
             return t;
+        } else {
+            throw new JsonMappingException(ctxt, "Can not create instance of " + id + ", problem: not subtype of " + rawType);
         }
-        Class<?> cls;
+    }
+
     try {
-            cls =  tf.findClass(id);
+        Class<?> cls =  tf.findClass(id);
+        // Check assignment compatibility with the expected base type
+        if (rawType.getRawClass().isAssignableFrom(cls)) {
+            return tf.constructSpecializedType(rawType, cls);
+        } else {
+            throw new JsonMappingException(ctxt, "Can not create instance of " + id + ", problem: not subtype of " + rawType);
+        }
     } catch (ClassNotFoundException e) {
-            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
-            //   DeserializationContext, just playing it safe
         if (ctxt instanceof DeserializationContext) {
             DeserializationContext dctxt = (DeserializationContext) ctxt;
-                // First: we may have problem handlers that can deal with it?
-                return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
+            return dctxt.handleUnknownTypeId(rawType, id, this, "no such class found");
         }
-            // ... meaning that we really should never get here.
-            return null;
+        throw new JsonMappingException(ctxt, "Unknown type id '"+ id + "': " + e.getMessage());
     } catch (Exception e) {
-            throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
+        throw new JsonMappingException(ctxt, "Invalid type id '"+id+"' (for id type 'Id.class'): " + e.getMessage(), e);
     }
-        return tf.constructSpecializedType(_baseType, cls);
 }
\ No newline at end of file
