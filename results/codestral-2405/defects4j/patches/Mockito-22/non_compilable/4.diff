diff --git a/tmp/6115f6de-c29b-4264-9472-638bb4eddaf5_buggy.java b/tmp/c346a8f7-9391-4f57-9cab-4f42d460e28a_fixed.java
index 111ba5e..27ba0f8 100644
--- a/tmp/6115f6de-c29b-4264-9472-638bb4eddaf5_buggy.java
+++ b/tmp/c346a8f7-9391-4f57-9cab-4f42d460e28a_fixed.java
@@ -1,9 +1,40 @@
+import java.util.Arrays;
+
 public static boolean areEqual(Object o1, Object o2) {
     if (o1 == null || o2 == null) {
         return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+    } else if (o1 instanceof Object[] && o2 instanceof Object[]) {
+        return areArraysEqual((Object[]) o1, (Object[]) o2);
+    } else if (o1 instanceof int[] && o2 instanceof int[]) {
+        return Arrays.equals((int[]) o1, (int[]) o2);
+    } else if (o1 instanceof double[] && o2 instanceof double[]) {
+        return Arrays.equals((double[]) o1, (double[]) o2);
+    } else if (o1 instanceof char[] && o2 instanceof char[]) {
+        return Arrays.equals((char[]) o1, (char[]) o2);
+    } else if (o1 instanceof byte[] && o2 instanceof byte[]) {
+        return Arrays.equals((byte[]) o1, (byte[]) o2);
+    } else if (o1 instanceof short[] && o2 instanceof short[]) {
+        return Arrays.equals((short[]) o1, (short[]) o2);
+    } else if (o1 instanceof long[] && o2 instanceof long[]) {
+        return Arrays.equals((long[]) o1, (long[]) o2);
+    } else if (o1 instanceof float[] && o2 instanceof float[]) {
+        return Arrays.equals((float[]) o1, (float[]) o2);
     } else {
         return o1.equals(o2);
     }
 }
+
+private static boolean areArraysEqual(Object[] a, Object[] b) {
+    if (a == b) {
+        return true;
+    }
+    if (a == null || b == null || a.length != b.length) {
+        return false;
+    }
+    for (int i = 0; i < a.length; i++) {
+        if (!areEqual(a[i], b[i])) {
+            return false;
+        }
+    }
+    return true;
+}
\ No newline at end of file
