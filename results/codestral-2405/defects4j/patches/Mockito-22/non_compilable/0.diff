diff --git a/tmp/94db5d95-8bcc-481a-b87c-376a239e2cf7_buggy.java b/tmp/28d54c95-49e2-455f-9d8e-13bc4ac2cc2a_fixed.java
index 111ba5e..c2d0b39 100644
--- a/tmp/94db5d95-8bcc-481a-b87c-376a239e2cf7_buggy.java
+++ b/tmp/28d54c95-49e2-455f-9d8e-13bc4ac2cc2a_fixed.java
@@ -1,9 +1,40 @@
     public static boolean areEqual(Object o1, Object o2) {
         if (o1 == null || o2 == null) {
             return o1 == null && o2 == null;
         } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+            if (isArray(o2)) {
+                return convertAndCompareArrays(o1, o2);
+            }
+            return false;
         } else {
             return o1.equals(o2);
         }
     }
+
+    private static boolean convertAndCompareArrays(Object o1, Object o2) {
+        if (o1 instanceof int[] && o2 instanceof Integer[])
+            return Arrays.equals((int[])o1, convertIntegerToInt((Integer[])o2));
+        if (o1 instanceof double[] && o2 instanceof Double[])
+            return Arrays.equals((double[])o1, convertDoubleToDoublePrimitive((Double[])o2));
+        if (o1 instanceof Object[] && o2 instanceof String[])
+            return Arrays.equals((Object[])o1, (Object[])o2);
+        return Arrays.equals((Object[])o1, (Object[])o2);
+    }
+
+    private static int[] convertIntegerToInt(Integer[] arr) {
+        int[] result = new int[arr.length];
+        for (int i = 0; i < arr.length; i++) {
+            if (arr[i] != null)
+                result[i] = arr[i];
+        }
+        return result;
+    }
+
+    private static double[] convertDoubleToDoublePrimitive(Double[] arr) {
+        double[] result = new double[arr.length];
+        for (int i = 0; i < arr.length; i++) {
+            if (arr[i] != null)
+                result[i] = arr[i];
+        }
+        return result;
+    }
\ No newline at end of file
