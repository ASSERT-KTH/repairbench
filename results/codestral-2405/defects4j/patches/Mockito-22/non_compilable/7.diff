diff --git a/tmp/2d3eaab1-fc9b-4ed2-b19f-a67363173374_buggy.java b/tmp/e8b6dd07-3ab1-45b8-ab74-e78521fa052b_fixed.java
index 111ba5e..e2c32c7 100644
--- a/tmp/2d3eaab1-fc9b-4ed2-b19f-a67363173374_buggy.java
+++ b/tmp/e8b6dd07-3ab1-45b8-ab74-e78521fa052b_fixed.java
@@ -1,9 +1,35 @@
+import java.lang.reflect.Array;
+import java.util.Arrays;
+
 public static boolean areEqual(Object o1, Object o2) {
     if (o1 == null || o2 == null) {
         return o1 == null && o2 == null;
-        } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+    } else if (isArray(o1) && isArray(o2)) {
+        if (o1.getClass().getComponentType().isPrimitive() && o2.getClass().getComponentType().isPrimitive()) {
+            // Both objects are arrays of primitive types.
+            return Arrays.equals((Object[]) toObjectArray(o1), (Object[]) toObjectArray(o2));
+        } else {
+            // One or both objects are arrays of non-primitive types.
+            return Arrays.equals((Object[]) o1, (Object[]) o2);
+        }
     } else {
         return o1.equals(o2);
     }
 }
+
+private static boolean isArray(Object obj) {
+    return obj.getClass().isArray();
+}
+
+private static Object toObjectArray(Object array) {
+    if (array.getClass().getComponentType().isPrimitive()) {
+        int length = Array.getLength(array);
+        Object[] result = new Object[length];
+        for (int i = 0; i < length; i++) {
+            result[i] = Array.get(array, i);
+        }
+        return result;
+    } else {
+        return array;
+    }
+}
\ No newline at end of file
