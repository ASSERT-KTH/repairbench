diff --git a/tmp/b632616e-8ceb-43b2-87e7-6dd7f3d974cc_buggy.java b/tmp/0c356d80-cec7-4760-9c9c-880e61b22b39_fixed.java
index 7ea7ac9..3aad98a 100644
--- a/tmp/b632616e-8ceb-43b2-87e7-6dd7f3d974cc_buggy.java
+++ b/tmp/0c356d80-cec7-4760-9c9c-880e61b22b39_fixed.java
@@ -1,63 +1,49 @@
-    /**
-     * Gets a copy of this date with the specified field set to a new value.
-     * <p>
-     * If this partial did not previously support the field, the new one will.
-     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
-     * <p>
-     * For example, if the field type is <code>dayOfMonth</code> then the day
-     * would be changed/added in the returned instance.
-     *
-     * @param fieldType  the field type to set, not null
-     * @param value  the value to set
-     * @return a copy of this instance with the field set
-     * @throws IllegalArgumentException if the value is null or invalid
-     */
 public Partial with(DateTimeFieldType fieldType, int value) {
     if (fieldType == null) {
         throw new IllegalArgumentException("The field type must not be null");
     }
     int index = indexOf(fieldType);
     if (index == -1) {
+        // Create new arrays with additional space for the new field type and value
         DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
         int[] newValues = new int[newTypes.length];
 
-            // find correct insertion point to keep largest-smallest order
+        // Find correct insertion point to keep largest-smallest order
         int i = 0;
         DurationField unitField = fieldType.getDurationType().getField(iChronology);
         if (unitField.isSupported()) {
             for (; i < iTypes.length; i++) {
                 DateTimeFieldType loopType = iTypes[i];
                 DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                 if (loopUnitField.isSupported()) {
                     int compare = unitField.compareTo(loopUnitField);
-                        if (compare > 0) {
+                    if (compare > 0 || (compare == 0 && fieldType.getRangeDurationType().getField(iChronology).compareTo(loopType.getRangeDurationType().getField(iChronology)) > 0)) {
                         break;
-                        } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                            if (rangeField.compareTo(loopRangeField) > 0) {
-                                break;
-                            }
                     }
                 }
             }
         }
+        // Moved copying elements to insert the new field and value
         System.arraycopy(iTypes, 0, newTypes, 0, i);
-            System.arraycopy(iValues, 0, newValues, 0, i);
         newTypes[i] = fieldType;
+        System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);
+
+        System.arraycopy(iValues, 0, newValues, 0, i);
         newValues[i] = value;
-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-            // use public constructor to ensure full validation
-            // this isn't overly efficient, but is safe
+        System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);
+
+        // Ensure validation of the new partial
         Partial newPartial = new Partial(iChronology, newTypes, newValues);
         iChronology.validate(newPartial, newValues);
         return newPartial;
-        }
-        if (value == getValue(index)) {
-            return this;
-        }
+    } else {
         int[] newValues = getValues();
         newValues = getField(index).set(this, index, newValues, value);
+        // Check if the new value is different to avoid unnecessary object creation
+        if (value != getValue(index)) {
             return new Partial(this, newValues);
+        } else {
+            return this;
+        }
+    }
 }
\ No newline at end of file
