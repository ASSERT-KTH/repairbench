diff --git a/tmp/40fb9e26-da27-40bc-944f-77bf31e4c659_buggy.java b/tmp/912cdd94-e981-48e8-bd48-f8c7f4bc0796_fixed.java
index 91dc4ff..376dd80 100644
--- a/tmp/40fb9e26-da27-40bc-944f-77bf31e4c659_buggy.java
+++ b/tmp/912cdd94-e981-48e8-bd48-f8c7f4bc0796_fixed.java
@@ -1,107 +1,65 @@
-    // the original object is needed so can check for Number
 private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
         int start = offset;
         int pos = offset;
         final int end = offset + len;
 
-        final char delimChar = getDelimiter();
-        final char quoteChar = getQuoteCharacter().charValue();
-
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
         switch (quoteModePolicy) {
         case ALL:
             quote = true;
             break;
         case NON_NUMERIC:
             quote = !(object instanceof Number);
             break;
         case NONE:
-            // Use the existing escaping code
-            printAndEscape(value, offset, len, out);
+            outline.append(value, start, end);
             return;
         case MINIMAL:
-            if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
+            if (len == 0) {
                 if (newRecord) {
                     quote = true;
                 }
             } else {
                 char c = value.charAt(pos);
-
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
+                if (newRecord && !Character.isDigit(c) && !Character.isLetter(c)) {
                     quote = true;
-                } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
-                    quote = true;
-                } else {
-                    while (pos < end) {
+                }
+                while (pos < end && !quote) {
                     c = value.charAt(pos);
-                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {
+                    if (c == LF || c == CR || c == getQuoteCharacter() || c == getDelimiter()) {
                         quote = true;
                         break;
                     }
                     pos++;
                 }
-
-                    if (!quote) {
-                        pos = end - 1;
-                        c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
-                        if (c <= SP) {
+                if (!quote && c <= COMMENT) {
                     quote = true;
                 }
             }
-                }
-            }
-
-            if (!quote) {
-                // no encapsulation needed - write out the original value
-                out.append(value, start, end);
-                return;
-            }
             break;
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
         }
 
         if (!quote) {
-            // no encapsulation needed - write out the original value
             out.append(value, start, end);
             return;
         }
 
-        // we hit something that needed encapsulation
-        out.append(quoteChar);
-
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
-        while (pos < end) {
+        out.append(getQuoteCharacter());
+        for (pos = start; pos < end; pos++) {
             final char c = value.charAt(pos);
-            if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
-                out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
-                start = pos;
-            }
-            pos++;
-        }
-
-        // write the last segment
+            if (c == getQuoteCharacter()) {
                 out.append(value, start, pos);
-        out.append(quoteChar);
+                out.append(getQuoteCharacter());
+                start = pos;
+            }
+        }
+        out.append(value, start, end);
+        out.append(getQuoteCharacter());
     }
\ No newline at end of file
