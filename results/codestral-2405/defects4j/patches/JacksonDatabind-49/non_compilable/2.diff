diff --git a/tmp/d2698b2e-ed89-48b1-9923-4b050e692e3a_buggy.java b/tmp/c103fd3a-ecd5-439a-8fd7-ee204d10e749_fixed.java
index c222270..293d352 100644
--- a/tmp/d2698b2e-ed89-48b1-9923-4b050e692e3a_buggy.java
+++ b/tmp/c103fd3a-ecd5-439a-8fd7-ee204d10e749_fixed.java
@@ -1,7 +1,27 @@
+import java.util.HashMap;
+import java.util.Map;
+
+public class IdGenerator {
+    private Map<Object, Object> idMap = new HashMap<>();
+
     public Object generateId(Object forPojo) {
-        // 04-Jun-2016, tatu: As per [databind#1255], need to consider possibility of
-        //    id being generated for "alwaysAsId", but not being written as POJO; regardless,
-        //    need to use existing id if there is one:
+        if(!idMap.containsKey(forPojo)) {
+            idMap.put(forPojo, idMap.size() + 1);
+        }
+        return idMap.get(forPojo);
+    }
+}
+
+// ...
+
+public Object generateId(Object forPojo) {
+    // Check if the id is already generated for this POJO
+    // If yes, return the existing id
+    // If no, generate a new id and store it
+    Object id = idMap.get(forPojo);
+    if(id == null) {
         id = generator.generateId(forPojo);
+        idMap.put(forPojo, id);
+    }
     return id;
 }
\ No newline at end of file
