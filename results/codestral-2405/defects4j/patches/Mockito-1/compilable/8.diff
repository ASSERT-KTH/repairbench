diff --git a/tmp/0d25e57e-f41c-4868-b16d-610bd66c347b_buggy.java b/tmp/4bf9da5c-c9ea-4c41-bf0e-08d888cf0da6_fixed.java
index 1c875ad..9cc6644 100644
--- a/tmp/0d25e57e-f41c-4868-b16d-610bd66c347b_buggy.java
+++ b/tmp/4bf9da5c-c9ea-4c41-bf0e-08d888cf0da6_fixed.java
@@ -1,31 +1,8 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
         int indexOfVararg = invocation.getRawArguments().length - 1;
         throw new UnsupportedOperationException();
-
     } else {
-            for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+        // code for non-varargs case...
     }
 }
\ No newline at end of file
-        }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
-    }
