diff --git a/tmp/51f1f49f-93d6-49b2-bdcf-9408f5d1691d_buggy.java b/tmp/34d9cf67-d2e7-410c-8456-1bff49f7751b_fixed.java
index 10616db..a603bd3 100644
--- a/tmp/51f1f49f-93d6-49b2-bdcf-9408f5d1691d_buggy.java
+++ b/tmp/34d9cf67-d2e7-410c-8456-1bff49f7751b_fixed.java
@@ -1,19 +1,60 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
+        switch (fieldIndex) {
+            case MONTH_OF_YEAR:
+                int newMonth = values[MONTH_OF_YEAR] + valueToAdd;
+                int newYear = values[YEAR];
+                while (newMonth < 1) {
+                    newMonth += 12;
+                    newYear--;
+                }
+                while (newMonth > 12) {
+                    newMonth -= 12;
+                    newYear++;
+                }
+                return new int[]{newYear, newMonth, adjustDayOfMonth(values[YEAR], newMonth, values[DAY_OF_MONTH])};
+            case DAY_OF_MONTH:
+                int newDay = values[DAY_OF_MONTH] + valueToAdd;
+                int newMonthFromDay = values[MONTH_OF_YEAR];
+                int newYearFromDay = values[YEAR];
+                while (newDay < 1) {
+                    newMonthFromDay--;
+                    if (newMonthFromDay < 1) {
+                        newMonthFromDay = 12;
+                        newYearFromDay--;
+                    }
+                    newDay += DateTimeUtils.getDaysInMonthLenient(iChronology, newYearFromDay, newMonthFromDay);
+                }
+                while (newDay > DateTimeUtils.getDaysInMonthLenient(iChronology, newYearFromDay, newMonthFromDay)) {
+                    newDay -= DateTimeUtils.getDaysInMonthLenient(iChronology, newYearFromDay, newMonthFromDay);
+                    newMonthFromDay++;
+                    if (newMonthFromDay > 12) {
+                        newMonthFromDay = 1;
+                        newYearFromDay++;
+                    }
+                }
+                return new int[]{newYearFromDay, newMonthFromDay, newDay};
+            default:
                 long instant = 0L;
                 for (int i = 0, isize = partial.size(); i < isize; i++) {
                     instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
                 }
                 instant = add(instant, valueToAdd);
                 return iChronology.get(partial, instant);
+        }
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
+
+private int adjustDayOfMonth(int year, int month, int dayOfMonth) {
+    // If the target month has fewer days than the current dayOfMonth,
+    // then set the dayOfMonth to the last day of the target month.
+    if (dayOfMonth > DateTimeUtils.getDaysInMonthLenient(iChronology, year, month)) {
+        return DateTimeUtils.getDaysInMonthLenient(iChronology, year, month);
+    }
+    return dayOfMonth;
+}
\ No newline at end of file
