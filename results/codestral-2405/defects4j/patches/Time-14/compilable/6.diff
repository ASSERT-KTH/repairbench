diff --git a/tmp/9c76a422-419a-4701-b7ed-824a47f9030b_buggy.java b/tmp/6ab76566-1cdd-4084-9e68-0640ec28e9e9_fixed.java
index 10616db..935ef20 100644
--- a/tmp/9c76a422-419a-4701-b7ed-824a47f9030b_buggy.java
+++ b/tmp/6ab76566-1cdd-4084-9e68-0640ec28e9e9_fixed.java
@@ -1,19 +1,29 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+
+        // Get the modified month and year
+        int[] modifiedValues = iChronology.get(partial, instant);
+
+        // Check if the modified month is February and day is 29
+        if (modifiedValues[0] == 2 && modifiedValues[1] == 29) {
+            // Check if the modified year is a leap year
+            if (!iChronology.year().isLeap(modifiedValues[2])) {
+                // If not, adjust the day to 28
+                modifiedValues[1] = 28;
+            }
+        }
+
+        return modifiedValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
