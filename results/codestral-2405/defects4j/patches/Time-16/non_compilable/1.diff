diff --git a/tmp/56b91607-6d3f-4f8f-bd2f-ef7edb71ddd8_buggy.java b/tmp/69cc38e8-65fe-46c9-b696-4e0c4681807a_fixed.java
index b9f1241..f87c160 100644
--- a/tmp/56b91607-6d3f-4f8f-bd2f-ef7edb71ddd8_buggy.java
+++ b/tmp/69cc38e8-65fe-46c9-b696-4e0c4681807a_fixed.java
@@ -1,60 +1,52 @@
-    /**
-     * Parses a datetime from the given text, at the given position, saving the
-     * result into the fields of the given ReadWritableInstant. If the parse
-     * succeeds, the return value is the new text position. Note that the parse
-     * may succeed without fully reading the text and in this case those fields
-     * that were read will be set.
-     * <p>
-     * Only those fields present in the string will be changed in the specified
-     * instant. All other fields will remain unaltered. Thus if the string only
-     * contains a year and a month, then the day and time will be retained from
-     * the input instant. If this is not the behaviour you want, then reset the
-     * fields before calling this method, or use {@link #parseDateTime(String)}
-     * or {@link #parseMutableDateTime(String)}.
-     * <p>
-     * If it fails, the return value is negative, but the instant may still be
-     * modified. To determine the position where the parse failed, apply the
-     * one's complement operator (~) on the return value.
-     * <p>
-     * This parse method ignores the {@link #getDefaultYear() default year} and
-     * parses using the year from the supplied instant as the default.
-     * <p>
-     * The parse will use the chronology of the instant.
-     *
-     * @param instant  an instant that will be modified, not null
-     * @param text  the text to parse
-     * @param position  position to start parsing from
-     * @return new position, negative value means parse failed -
-     *  apply complement operator (~) to get position of failure
-     * @throws UnsupportedOperationException if parsing is not supported
-     * @throws IllegalArgumentException if the instant is null
-     * @throws IllegalArgumentException if any field is out of range
-     */
 public int parseInto(ReadWritableInstant instant, String text, int position) {
     DateTimeParser parser = requireParser();
     if (instant == null) {
         throw new IllegalArgumentException("Instant must not be null");
     }
 
     long instantMillis = instant.getMillis();
     Chronology chrono = instant.getChronology();
     long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
     chrono = selectChronology(chrono);
 
-        DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
+    int defaultYear;
+    if (iDefaultYear == null) {
+        defaultYear = chrono.year().get(instantLocal);
+    } else {
+        defaultYear = iDefaultYear;
+    }
+
+    DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, defaultYear);
     int newPos = parser.parseInto(bucket, text, position);
-        instant.setMillis(bucket.computeMillis(false, text));
+
+    // use the year from the input instant if it's not provided by the parser bucket
+    // or wasn't changed during the parsing
+    int year = iDefaultYear != null ? bucket.getYear() : chrono.year().get(instantLocal);
+    if (year == bucket.getDefaultYear()) {
+        year = chrono.year().get(instantLocal);
+    }
+
+    long parsedInstantLocal = bucket.computeMillis(false, text);
+    DateMidnight base = new DateMidnight(year, 1, 1, chrono);
+    base = base.plusMonths(bucket.getMonthOfYear() - 1);  // MonthOfYear is 1-based
+    base = base.dayOfMonth().set Copy(bucket.getDayOfMonth());
+
+    DateTimeZone parsedZone;
     if (iOffsetParsed && bucket.getOffsetInteger() != null) {
         int parsedOffset = bucket.getOffsetInteger();
-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
+        parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
     } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
+        parsedZone = bucket.getZone();
+    } else {
+        parsedZone = instant.getZone();
     }
-        instant.setChronology(chrono);
+
+    long parsedInstantMillis = base.getMillis() + (parsedZone.getOffset(base.getMillis()) - chrono.getZone().getOffset(base.getMillis()));
+    instant.setMillis(parsedInstantMillis);
+
+    instant.setChronology(chrono.withZone(parsedZone));
     if (iZone != null) {
         instant.setZone(iZone);
     }
     return newPos;
 }
\ No newline at end of file
