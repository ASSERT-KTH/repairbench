diff --git a/tmp/6c8298e2-3e2a-4a83-b5e3-c50903ada025_buggy.java b/tmp/49e1470a-82df-4ccb-bf6e-d1736b0d101f_fixed.java
index d6a560a..19d081a 100644
--- a/tmp/6c8298e2-3e2a-4a83-b5e3-c50903ada025_buggy.java
+++ b/tmp/49e1470a-82df-4ccb-bf6e-d1736b0d101f_fixed.java
@@ -1,33 +1,40 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+  boolean resolved = false;
+  int cycleDetectionLimit = 10; // Limit the number of cycles to detect
+
+  while (!resolved && cycleDetectionLimit > 0) {
+    resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      break; // Stop resolving if a type cycle is detected
     }
-
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      break; // Stop resolving if a type cycle is detected
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
+      resolved = true;
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    cycleDetectionLimit--; // Decrease the limit with each iteration
+  }
+
+  if (cycleDetectionLimit == 0) {
+    t.report(JSError.make(errorNode, ERROR_TYPE_CYCLE_DETECTED, getQualifiedName()));
+  }
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
