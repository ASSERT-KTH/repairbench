diff --git a/tmp/72a0d1a5-109e-436d-bed6-8829cacc573e_buggy.java b/tmp/2c91756b-e8fc-43fb-9d43-0a5b57a07a77_fixed.java
index d6a560a..f5ae95e 100644
--- a/tmp/72a0d1a5-109e-436d-bed6-8829cacc573e_buggy.java
+++ b/tmp/2c91756b-e8fc-43fb-9d43-0a5b57a07a77_fixed.java
@@ -1,33 +1,23 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+    Set<JSType> pendingTypes = new HashSet<>();
+    pendingTypes.add(this);
+    if (resolveViaRegistry(t, enclosing, pendingTypes) &&
+        detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
-    }
-
-    if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
-    resolveViaProperties(t, enclosing);
+    } else {
+      resolveViaProperties(t, enclosing, pendingTypes);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
+    }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
