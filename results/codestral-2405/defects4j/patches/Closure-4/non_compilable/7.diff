diff --git a/tmp/71f30057-0327-44e3-8f57-77bdb035ed1e_buggy.java b/tmp/e9a5bf2f-d582-496e-9470-aebf3abf2875_fixed.java
index d6a560a..e9bff4a 100644
--- a/tmp/71f30057-0327-44e3-8f57-77bdb035ed1e_buggy.java
+++ b/tmp/e9a5bf2f-d582-496e-9470-aebf3abf2875_fixed.java
@@ -1,33 +1,33 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    if (this.getVisitedForCycleDetection()) {
+      reportTypeCycle(t);
+      return super.resolveInternal(t, enclosing);
+    }
+
+    this.setVisitedForCycleDetection(true);
+
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
-      super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
+    } else {
       resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
-    if (isResolved()) {
+    if (this.isResolved()) {
       finishPropertyContinuations();
     }
+
+    this.setVisitedForCycleDetection(false);
+
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
+
+  private void reportTypeCycle(ErrorReporter t) {
+    t.report(JSError.make(ErrorCode.IMPLICIT_PROTOTYPE_CYCLE, this));
+  }
\ No newline at end of file
