diff --git a/tmp/21fec741-c269-432e-be53-9ba030018cd5_buggy.java b/tmp/7b6b1218-147f-4022-9637-706bdfdf618e_fixed.java
index d6a560a..39070cf 100644
--- a/tmp/21fec741-c269-432e-be53-9ba030018cd5_buggy.java
+++ b/tmp/7b6b1218-147f-4022-9637-706bdfdf618e_fixed.java
@@ -1,33 +1,23 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    if (detectedCycle()) {
+        t.report(JSError.make("Parse error. Cycle detected in inheritance chain of type " + getName()));
+        return this;
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
-    if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
+    if (!resolved) {
         resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
     }
 
+    if (isResolved() && !(isInterface() && getSuperClass() != null)) {
         super.resolveInternal(t, enclosing);
-    if (isResolved()) {
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    return registry.isLastGeneration() ? getReferencedType() : this;
+}
+
+private boolean detectedCycle() {
+    return detectImplicitPrototypeCycle() || (isInterface() && getSuperClass() != null && getSuperClass().isSubTypeOf(this));
 }
\ No newline at end of file
