diff --git a/tmp/6cd9bbf1-b0b2-460c-bf58-78eba50df1c0_buggy.java b/tmp/e0ffe9f0-d93e-4aaa-a2b3-f31d6ab217b9_fixed.java
index d6a560a..9d74bea 100644
--- a/tmp/6cd9bbf1-b0b2-460c-bf58-78eba50df1c0_buggy.java
+++ b/tmp/e0ffe9f0-d93e-4aaa-a2b3-f31d6ab217b9_fixed.java
@@ -1,33 +1,50 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+    HashSet<JSType> typesInProgress = new HashSet<>();
+    boolean resolved = resolveViaRegistry(t, enclosing, typesInProgress);
+    if (detectImplicitPrototypeCycle(typesInProgress)) {
         handleTypeCycle(t);
     }
 
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ?
               getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+    resolved = resolveViaProperties(t, enclosing, typesInProgress);
+    if (detectImplicitPrototypeCycle(typesInProgress)) {
         handleTypeCycle(t);
     }
 
+    if (resolved) {
         super.resolveInternal(t, enclosing);
-    if (isResolved()) {
         finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
 }
+
+private boolean resolveViaRegistry(ErrorReporter t, StaticScope<JSType> enclosing, HashSet<JSType> typesInProgress) {
+    if (typesInProgress.contains(this)) {
+        t.warning("Parse error. Cycle detected in inheritance chain of type " + getName());
+        return true;
+    }
+    typesInProgress.add(this);
+    // Rest of the method...
+}
+
+private boolean resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing, HashSet<JSType> typesInProgress) {
+    if (typesInProgress.contains(this)) {
+        t.warning("Parse error. Cycle detected in inheritance chain of type " + getName());
+        return true;
+    }
+    typesInProgress.add(this);
+    // Rest of the method...
+}
+
+private boolean detectImplicitPrototypeCycle(HashSet<JSType> typesInProgress) {
+    // Check for cycle keeping a track of types currently being processed
+    // ...
+}
\ No newline at end of file
