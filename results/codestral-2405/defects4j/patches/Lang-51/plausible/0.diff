diff --git a/tmp/08458306-b84e-4eb6-972e-d915a1e75873_buggy.java b/tmp/b538cb9c-8cab-4ab9-b068-0f3b3421d0be_fixed.java
index 55b319a..e537cc4 100644
--- a/tmp/08458306-b84e-4eb6-972e-d915a1e75873_buggy.java
+++ b/tmp/b538cb9c-8cab-4ab9-b068-0f3b3421d0be_fixed.java
@@ -1,77 +1,48 @@
-    /**
-     * <p>Converts a String to a boolean (optimised for performance).</p>
-     * 
-     * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
-     * (case insensitive) will return <code>true</code>. Otherwise,
-     * <code>false</code> is returned.</p>
-     * 
-     * <p>This method performs 4 times faster (JDK1.4) than
-     * <code>Boolean.valueOf(String)</code>. However, this method accepts
-     * 'on' and 'yes' as true values.
-     *
-     * <pre>
-     *   BooleanUtils.toBoolean(null)    = false
-     *   BooleanUtils.toBoolean("true")  = true
-     *   BooleanUtils.toBoolean("TRUE")  = true
-     *   BooleanUtils.toBoolean("tRUe")  = true
-     *   BooleanUtils.toBoolean("on")    = true
-     *   BooleanUtils.toBoolean("yes")   = true
-     *   BooleanUtils.toBoolean("false") = false
-     *   BooleanUtils.toBoolean("x gti") = false
-     * </pre>
-     *
-     * @param str  the String to check
-     * @return the boolean value of the string, <code>false</code> if no match
-     */
 public static boolean toBoolean(String str) {
-        // Previously used equalsIgnoreCase, which was fast for interned 'true'.
-        // Non interned 'true' matched 15 times slower.
-        // 
-        // Optimisation provides same performance as before for interned 'true'.
-        // Similar performance for null, 'false', and other strings not length 2/3/4.
-        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
     if (str == "true") {
         return true;
     }
     if (str == null) {
         return false;
     }
+
     switch (str.length()) {
         case 2: {
             char ch0 = str.charAt(0);
             char ch1 = str.charAt(1);
-                return 
-                    (ch0 == 'o' || ch0 == 'O') &&
+            return (ch0 == 'o' || ch0 == 'O') &&
                    (ch1 == 'n' || ch1 == 'N');
         }
         case 3: {
-                char ch = str.charAt(0);
-                if (ch == 'y') {
-                    return 
-                        (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&
-                        (str.charAt(2) == 's' || str.charAt(2) == 'S');
-                }
-                if (ch == 'Y') {
-                    return 
-                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
-                        (str.charAt(2) == 'S' || str.charAt(2) == 's');
+            char ch0 = str.charAt(0);
+            if (ch0 == 'y' || ch0 == 'Y') {
+                char ch1 = str.charAt(1);
+                char ch2 = str.charAt(2);
+                return (ch1 == 'e' || ch1 == 'E') &&
+                       (ch2 == 's' || ch2 == 'S');
             }
+            break;
         }
         case 4: {
-                char ch = str.charAt(0);
-                if (ch == 't') {
-                    return 
-                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&
-                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&
-                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');
+            char ch0 = str.charAt(0);
+            if (ch0 == 't' || ch0 == 'T') {
+                char ch1 = str.charAt(1);
+                char ch2 = str.charAt(2);
+                char ch3 = str.charAt(3);
+                return (ch1 == 'r' || ch1 == 'R') &&
+                       (ch2 == 'u' || ch2 == 'U') &&
+                       (ch3 == 'e' || ch3 == 'E');
             }
-                if (ch == 'T') {
-                    return 
-                        (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&
-                        (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&
-                        (str.charAt(3) == 'E' || str.charAt(3) == 'e');
+            if (ch0 == 'f' || ch0 == 'F') {
+                char ch1 = str.charAt(1);
+                char ch2 = str.charAt(2);
+                char ch3 = str.charAt(3);
+                return (ch1 == 'a' || ch1 == 'A') &&
+                       (ch2 == 'l' || ch2 == 'L') &&
+                       (ch3 == 's' || ch3 == 'S');
             }
+            break;
         }
     }
     return false;
 }
\ No newline at end of file
