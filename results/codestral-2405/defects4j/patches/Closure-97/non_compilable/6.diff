diff --git a/tmp/dc481421-43c3-4b90-a46b-5f4f0c9bc0cd_buggy.java b/tmp/fafa2fa1-2567-457d-bdf1-1fd5416e0854_fixed.java
index 1126687..a4f3906 100644
--- a/tmp/dc481421-43c3-4b90-a46b-5f4f0c9bc0cd_buggy.java
+++ b/tmp/fafa2fa1-2567-457d-bdf1-1fd5416e0854_fixed.java
@@ -1,65 +1,65 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
+    if (left.isNumber() && right.isNumber()) {
 
-      double result;
+      long result; // change to long to handle largest shift possible
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+      if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
+      if (rval < 0 || rval >= 32) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
+      // Check for fractional bitwise operands
+      if (lval != (int) lval || rval != (int) rval) {
+        error(FRACTIONAL_BITWISE_OPERAND, n);
+        return n;
+      }
+
+      // Convert the numbers to ints for shifting
       int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
       int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
-        return n;
-      }
 
       switch (n.getType()) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
+          // Perform left shift
+          result = (long) lvalInt << rvalInt;
           break;
         case Token.RSH:
-          result = lvalInt >> rvalInt;
+          // Perform arithmetic right shift
+          result = (long) lvalInt >> rvalInt;
           break;
         case Token.URSH:
           // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
+          // Java as a Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // Perform logical right shift
+          result = (long) lvalInt & 0xffffffffL >> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
+      // Convert the result back to a double to preserve precision
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
