diff --git a/tmp/cacac368-2a95-49b9-9023-2651601b4c37_buggy.java b/tmp/e223613c-dafe-470d-a2fc-7db688799204_fixed.java
index 1126687..abc5961 100644
--- a/tmp/cacac368-2a95-49b9-9023-2651601b4c37_buggy.java
+++ b/tmp/e223613c-dafe-470d-a2fc-7db688799204_fixed.java
@@ -1,65 +1,56 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {
 
-      double result;
         double lval = left.getDouble();
         double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
+        if (rval < 0) {
             error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
             return n;
         }
 
-      // Convert the numbers to ints
+        // check if values can be represented as ints or longs without losing precision
+        long lvalLong = (long) lval;
+        long rvalLong = (long) rval;
         int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
         int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
+
+        if (lvalInt != lval || lvalLong < Integer.MIN_VALUE || lvalLong > Integer.MAX_VALUE) {
+            error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+            return n;
+        }
+
+        if (rvalInt != rval || rvalInt < 0 || rvalInt > 31) {
+            error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
             return n;
         }
 
+        long result;
         switch (n.getType()) {
             case Token.LSH:
                 result = lvalInt << rvalInt;
                 break;
             case Token.RSH:
                 result = lvalInt >> rvalInt;
                 break;
             case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+                // A Java int cannot store the unsigned value that JavaScript handles,
+                // so a possible loss of precision is fine here.
+                result = lvalLong >>> rvalInt;
                 break;
             default:
-          throw new AssertionError("Unknown shift operator: " +
-              Node.tokenToName(n.getType()));
+                throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
         }
 
         Node newNumber = Node.newNumber(result);
         n.getParent().replaceChild(n, newNumber);
         reportCodeChange();
 
         return newNumber;
     }
 
     return n;
 }
\ No newline at end of file
