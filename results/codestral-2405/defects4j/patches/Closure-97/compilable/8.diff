diff --git a/tmp/bda9cf61-b813-45a5-91d5-ed567767da4f_buggy.java b/tmp/1cd44248-b55c-4c77-be70-97b83ccf0d02_fixed.java
index 1126687..e9e0137 100644
--- a/tmp/bda9cf61-b813-45a5-91d5-ed567767da4f_buggy.java
+++ b/tmp/1cd44248-b55c-4c77-be70-97b83ccf0d02_fixed.java
@@ -1,65 +1,70 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
   if (left.getType() == Token.NUMBER &&
       right.getType() == Token.NUMBER) {
 
-      double result;
+    long result;
     double lval = left.getDouble();
     double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
+    // Only the lower 5 bits are used when shifting, so don't do anything
+    // if the shift amount is outside [0,31]
     if (!(rval >= 0 && rval < 32)) {
       error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
       return n;
     }
 
-      // Convert the numbers to ints
-      int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
     int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
-        return n;
-      }
 
     switch (n.getType()) {
       case Token.LSH:
-          result = lvalInt << rvalInt;
-          break;
-        case Token.RSH:
-          result = lvalInt >> rvalInt;
-          break;
       case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+        if (lval >= 0) {
+          if (lval > Integer.MAX_VALUE) {
+            error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+            return n;
+          }
+          result = (long) lval << rvalInt;
+        } else {
+          if (lval < Integer.MIN_VALUE) {
+            error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+            return n;
+          }
+          result = ((long) lval) & 0xFFFFFFFFL;
+          result = result << rvalInt;
+        }
+        break;
+      case Token.RSH:
+        if (lval >= 0) {
+          if (lval > Integer.MAX_VALUE) {
+            error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+            return n;
+          }
+          result = (long) lval >> rvalInt;
+        } else {
+          if (lval < Integer.MIN_VALUE) {
+            error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+            return n;
+          }
+          result = (long) lval >> rvalInt;
+          if (rvalInt > 0) {
+            result |= (~0L) << (32 - rvalInt);
+          }
+        }
         break;
       default:
         throw new AssertionError("Unknown shift operator: " +
             Node.tokenToName(n.getType()));
     }
 
     Node newNumber = Node.newNumber(result);
     n.getParent().replaceChild(n, newNumber);
     reportCodeChange();
 
     return newNumber;
   }
 
   return n;
 }
\ No newline at end of file
