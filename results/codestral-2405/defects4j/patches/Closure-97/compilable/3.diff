diff --git a/tmp/ec32b222-45da-404b-96c6-a0144156cb0b_buggy.java b/tmp/5f6c3e42-d80a-41ef-a75f-2203dc3a12a2_fixed.java
index 1126687..c7bdbe9 100644
--- a/tmp/ec32b222-45da-404b-96c6-a0144156cb0b_buggy.java
+++ b/tmp/5f6c3e42-d80a-41ef-a75f-2203dc3a12a2_fixed.java
@@ -1,65 +1,61 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
-
-      double result;
+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {
+        long result;
         double lval = left.getDouble();
         double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
-        return n;
-      }
-
-      // Convert the numbers to ints
+        // Convert the numbers to ints or longs
         int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
         int rvalInt = (int) rval;
-      if (rvalInt != rval) {
+
+        // Check origins
+        if (lval != lvalInt) {
+            error(FRACTIONAL_BITWISE_OPERAND, left);
+            return n;
+        }
+        if (rval != rvalInt) {
             error(FRACTIONAL_BITWISE_OPERAND, right);
             return n;
         }
 
+        // Perform the operation
         switch (n.getType()) {
             case Token.LSH:
+                if (rvalInt < 0 || rvalInt >= 32) {
+                    error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+                    return n;
+                }
                 result = lvalInt << rvalInt;
                 break;
             case Token.RSH:
-          result = lvalInt >> rvalInt;
+                // Cast to long to preserve sign bit for negative numbers
+                long lvalLong = (long) lvalInt;
+                if (rvalInt < 0 || rvalInt >= 32) {
+                    error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+                    return n;
+                }
+                result = lvalLong >> rvalInt;
                 break;
             case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+                long lvalUnsigned = Integer.toUnsignedLong(lvalInt);
+                if (rvalInt < 0 || rvalInt >= 32) {
+                    error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+                    return n;
+                }
+                result = lvalUnsigned >>> rvalInt;
                 break;
             default:
-          throw new AssertionError("Unknown shift operator: " +
-              Node.tokenToName(n.getType()));
+                throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
         }
 
         Node newNumber = Node.newNumber(result);
         n.getParent().replaceChild(n, newNumber);
         reportCodeChange();
 
         return newNumber;
     }
-
     return n;
 }
\ No newline at end of file
