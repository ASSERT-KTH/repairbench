diff --git a/tmp/89649b1f-302c-4090-9a5a-ea7d8f728c53_buggy.java b/tmp/68fa5fd4-1844-4685-83de-4028705a0b70_fixed.java
index 1126687..e09b6d4 100644
--- a/tmp/89649b1f-302c-4090-9a5a-ea7d8f728c53_buggy.java
+++ b/tmp/68fa5fd4-1844-4685-83de-4028705a0b70_fixed.java
@@ -1,65 +1,41 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
-
-      double result;
+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {
+        long result;  // use long to handle the range of unsigned shift
         double lval = left.getDouble();
         double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
+        // Check if the values are integers within the valid range.
+        if ((lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE || lval != (int) lval)
+            || (rval < 0 || rval >= 32 || rval != (int) rval)) {
+            return n;  // return the original expression if values are not valid
         }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
-        return n;
-      }
-
-      // Convert the numbers to ints
         int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
         int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
-        return n;
-      }
 
         switch (n.getType()) {
             case Token.LSH:
-          result = lvalInt << rvalInt;
+                result = (long) lvalInt << rvalInt;
                 break;
             case Token.RSH:
-          result = lvalInt >> rvalInt;
+                result = (long) lvalInt >> rvalInt;
                 break;
             case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+                result = (long) lvalInt & 0xFFFFFFFFL >>> rvalInt;
                 break;
             default:
-          throw new AssertionError("Unknown shift operator: " +
-              Node.tokenToName(n.getType()));
+                throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
         }
 
         Node newNumber = Node.newNumber(result);
         n.getParent().replaceChild(n, newNumber);
         reportCodeChange();
 
         return newNumber;
     }
 
     return n;
 }
\ No newline at end of file
