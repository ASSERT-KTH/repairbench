diff --git a/tmp/ba5943af-1a82-4706-bd51-8fd2c04a5f1b_buggy.java b/tmp/bc2c95d8-c8e5-484d-ad46-88bbd40861e7_fixed.java
index 1126687..d3ceb56 100644
--- a/tmp/ba5943af-1a82-4706-bd51-8fd2c04a5f1b_buggy.java
+++ b/tmp/bc2c95d8-c8e5-484d-ad46-88bbd40861e7_fixed.java
@@ -1,65 +1,61 @@
-  /**
-   * Try to fold shift operations
-   */
 private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {
 
-      double result;
         double lval = left.getDouble();
         double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+        // Check for identity values
+        if (rval == 0) {
+            // When shifting by 0, the result is the same as the original number.
             return n;
+        } else if (lval == 1 && (n.getType() == Token.RSH || n.getType() == Token.URSH)) {
+            // Right shifting 1 by any amount results in 0.
+            return Node.newNumber(0);
+        } else if (lval == 0 && n.getType() == Token.LSH) {
+            // Left shifting 0 by any amount results in 0.
+            return Node.newNumber(0);
         }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
+        // Check ranges.
+        if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE || lval % 1 != 0) {
+            error(FRACTIONAL_BITWISE_OPERAND, left);
+            return n;
+        }
+
+        if (rval < 0 || rval >= 32 || rval % 1 != 0) {
             error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
             return n;
         }
 
         // Convert the numbers to ints
         int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
         int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
-        return n;
-      }
 
+        double result = 0;
         switch (n.getType()) {
             case Token.LSH:
-          result = lvalInt << rvalInt;
+                result = (double)(lvalInt << rvalInt);
                 break;
             case Token.RSH:
-          result = lvalInt >> rvalInt;
+                result = (double)(lvalInt >> rvalInt);
                 break;
             case Token.URSH:
                 // JavaScript handles zero shifts on signed numbers differently than
                 // Java as an Java int can not represent the unsigned 32-bit number
                 // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+                result = (double)((long) lvalInt >>> rvalInt);
                 break;
             default:
                 throw new AssertionError("Unknown shift operator: " +
                     Node.tokenToName(n.getType()));
         }
 
         Node newNumber = Node.newNumber(result);
         n.getParent().replaceChild(n, newNumber);
         reportCodeChange();
 
         return newNumber;
     }
 
     return n;
 }
\ No newline at end of file
