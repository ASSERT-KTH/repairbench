diff --git a/tmp/b8b6e6e8-de85-4ec2-9a00-38f25a3ef4bd_buggy.java b/tmp/a9129bf9-d7f3-40ac-a045-e3b9f858e9f9_fixed.java
index 25ca093..ae9c885 100644
--- a/tmp/b8b6e6e8-de85-4ec2-9a00-38f25a3ef4bd_buggy.java
+++ b/tmp/a9129bf9-d7f3-40ac-a045-e3b9f858e9f9_fixed.java
@@ -1,52 +1,69 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
     Document doc = null;
-
-        // look for BOM - overrides any other header or input
+    String docData;
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // Look for BOM to determine encoding
+        charsetName = detectCharset(byteData);
+        docData = Charset.forName(charsetName).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) { // if meta found, might override BOM detection
+            String foundCharset = getCharsetFromMeta(meta);
+            if (foundCharset != null && !foundCharset.equals(charsetName)) { // need to re-decode
+                charsetName = foundCharset;
+                byteData.rewind();
+                docData = Charset.forName(foundCharset).decode(byteData).toString();
+                doc = null;
+            }
+        }
+    } else { // specified by content type header (or by user on file load)
+        Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+    }
+
+    if (doc == null) {
+        doc = parser.parseInput(docData, baseUri);
+        doc.outputSettings().charset(charsetName);
+    }
+    return doc;
+}
+
+private static String detectCharset(ByteBuffer byteData) {
+    byte[] bom = new byte[4];
+    byteData.get(bom);
+    if ((bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) || (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)) {
+        // UTF-16 BOM detected
+        return bom[0] == (byte) 0xFE ? "UTF-16BE" : "UTF-16LE";
+    } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+        // UTF-8 BOM detected
+        byteData.position(3); // skip BOM
+        return "UTF-8";
+    } else if ((bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) ||
+                (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00)) {
+        // UTF-32 BOM detected
+        return bom[2] == (byte) 0xFE ? "UTF-32BE" : "UTF-32LE";
+    }
+    byteData.position(0); // reset position
+    return defaultCharset;
+}
+
+private static String getCharsetFromMeta(Element meta) {
     String foundCharset = null;
     if (meta.hasAttr("http-equiv")) {
         foundCharset = getCharsetFromContentType(meta.attr("content"));
     }
     if (foundCharset == null && meta.hasAttr("charset")) {
         try {
             if (Charset.isSupported(meta.attr("charset"))) {
                 foundCharset = meta.attr("charset");
             }
         } catch (IllegalCharsetNameException e) {
             foundCharset = null;
         }
     }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+    if (foundCharset != null) {
         foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
     }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
-        }
-        return doc;
+    return foundCharset;
 }
\ No newline at end of file
