diff --git a/tmp/700a7ae4-d46e-456e-abfb-8a7df69ed362_buggy.java b/tmp/a80fc6a9-d4fd-4cca-883a-6abb41532434_fixed.java
index 25ca093..0557aab 100644
--- a/tmp/700a7ae4-d46e-456e-abfb-8a7df69ed362_buggy.java
+++ b/tmp/a80fc6a9-d4fd-4cca-883a-6abb41532434_fixed.java
@@ -1,52 +1,71 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    Charset detectedCharset = null;
 
-        // look for BOM - overrides any other header or input
+    // handle BOM if present
+    if (byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {
+        // UTF-8 BOM
+        charsetName = "UTF-8";
+        detectedCharset = Charset.forName(charsetName);
+        ByteBuffer newBuffer = ByteBuffer.allocate(byteData.remaining() - 3);
+        byteData.position(3);
+        newBuffer.put(byteData);
+        byteData = newBuffer.rewind();
+    } else if (byteData.get(0) == (byte) 0xFE && byteData.get(1) == (byte) 0xFF) {
+        // UTF-16BE BOM
+        charsetName = "UTF-16BE";
+        detectedCharset = Charset.forName(charsetName);
+        ByteBuffer newBuffer = ByteBuffer.allocate(byteData.remaining() - 2);
+        byteData.position(2);
+        newBuffer.put(byteData);
+        byteData = newBuffer.rewind();
+    } else if (byteData.get(0) == (byte) 0xFF && byteData.get(1) == (byte) 0xFE) {
+        // UTF-16LE BOM
+        charsetName = "UTF-16LE";
+        detectedCharset = Charset.forName(charsetName);
+        ByteBuffer newBuffer = ByteBuffer.allocate(byteData.remaining() - 2);
+        byteData.position(2);
+        newBuffer.put(byteData);
+        byteData = newBuffer.rewind();
+    } else if (byteData.get(0) == (byte) 0x00 && byteData.get(1) == (byte) 0x00 && byteData.get(2) == (byte) 0xFE && byteData.get(3) == (byte) 0xFF) {
+        // UTF-32BE BOM
+        charsetName = "UTF-32BE";
+        detectedCharset = Charset.forName(charsetName);
+        ByteBuffer newBuffer = ByteBuffer.allocate(byteData.remaining() - 4);
+        byteData.position(4);
+        newBuffer.put(byteData);
+        byteData = newBuffer.rewind();
+    } else if (byteData.get(0) == (byte) 0xFF && byteData.get(1) == (byte) 0xFE && byteData.get(2) == (byte) 0x00 && byteData.get(3) == (byte) 0x00) {
+        // UTF-32LE BOM
+        charsetName = "UTF-32LE";
+        detectedCharset = Charset.forName(charsetName);
+        ByteBuffer newBuffer = ByteBuffer.allocate(byteData.remaining() - 4);
+        byteData.position(4);
+        newBuffer.put(byteData);
+        byteData = newBuffer.rewind();
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // if charset is null, try to detect from meta
+    if (charsetName == null) {
+        if (detectedCharset == null) { // safe parse as UTF-8 if BOM not detected
+            detectedCharset = Charset.forName("UTF-8");
+        }
+        docData = detectedCharset.decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
+        if (meta != null) {
+            // ... code to handle charset found in meta tag ...
         }
-                if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
-                    }
-                }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
+    } else { // specified charset
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+        detectedCharset = Charset.forName(charsetName);
+        docData = detectedCharset.decode(byteData).toString();
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
