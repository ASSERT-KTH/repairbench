diff --git a/tmp/81e12e30-2eed-4e46-afea-394e992e9437_buggy.java b/tmp/abaffdba-4e22-4d01-adca-96c88e7f5b7d_fixed.java
index 25ca093..3a5a0c1 100644
--- a/tmp/81e12e30-2eed-4e46-afea-394e992e9437_buggy.java
+++ b/tmp/abaffdba-4e22-4d01-adca-96c88e7f5b7d_fixed.java
@@ -1,52 +1,53 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) {
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
+
+        String foundCharset = getCharsetFromMeta(doc);
+        if (foundCharset != null) {
+            charsetName = foundCharset;
+        }
+    } else {
+        Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+    }
+
+    if (docData.startsWith(UTF_8_BOM)) {
+        byteData.position(UTF_8_BOM.length());
+        charsetName = "UTF-8";
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+    }
+
+    if (doc == null) {
+        doc = parser.parseInput(docData, baseUri);
+        doc.outputSettings().charset(charsetName);
+    }
+    return doc;
+}
+
+private static String getCharsetFromMeta(Document doc) {
     Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+    if (meta != null) {
         String foundCharset = null;
         if (meta.hasAttr("http-equiv")) {
             foundCharset = getCharsetFromContentType(meta.attr("content"));
         }
         if (foundCharset == null && meta.hasAttr("charset")) {
             try {
                 if (Charset.isSupported(meta.attr("charset"))) {
                     foundCharset = meta.attr("charset");
                 }
             } catch (IllegalCharsetNameException e) {
                 foundCharset = null;
             }
         }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+        if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
             foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+            return foundCharset;
         }
     }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
-        }
-        return doc;
+    return null;
 }
\ No newline at end of file
