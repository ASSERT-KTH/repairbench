diff --git a/tmp/a9ba2e2e-f912-41c4-9dcc-39269bca974a_buggy.java b/tmp/94b4f178-e8aa-4144-a6cc-ffa3a92610af_fixed.java
index 6c0aa19..6b5abf2 100644
--- a/tmp/a9ba2e2e-f912-41c4-9dcc-39269bca974a_buggy.java
+++ b/tmp/94b4f178-e8aa-4144-a6cc-ffa3a92610af_fixed.java
@@ -1,20 +1,37 @@
 /**
  * @param encoding the encoding to use for file names, use null
  * for the platform's default encoding
  * @param useUnicodeExtraFields whether to use InfoZIP Unicode
  * Extra Fields (if present) to set the file names.
  * @param allowStoredEntriesWithDataDescriptor whether the stream
  * will try to read STORED entries that use a data descriptor
  * @since 1.1
  */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
                              boolean allowStoredEntriesWithDataDescriptor) {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
     in = new PushbackInputStream(inputStream, buf.capacity());
     this.allowStoredEntriesWithDataDescriptor =
         allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+
+    // Try to determine entry size at the creation of ZipArchiveInputStream
+    try {
+        // Read the local file header
+        byte[] header = new byte[30];
+        int bytesRead = in.read(header);
+        if (bytesRead != 30) {
+            throw new IOException("Failed to read the local file header.");
+        }
+
+        // Determine entry size from the header
+        ByteBuffer buffer = ByteBuffer.wrap(header, 26, 4); // Size field is at offset 26
+        entrySize = buffer.getInt();
+    } catch (IOException e) {
+        // Handle exception appropriately
+        e.printStackTrace();
+        entrySize = -1; // Or set it to a default/error value
+    }
 }
\ No newline at end of file
