diff --git a/tmp/8d0c280d-9ae7-4394-9153-8df9e8a5a3e9_buggy.java b/tmp/7ac7cc86-ea94-4de2-8f81-880dcad4148d_fixed.java
index 6c0aa19..cefc5d6 100644
--- a/tmp/8d0c280d-9ae7-4394-9153-8df9e8a5a3e9_buggy.java
+++ b/tmp/7ac7cc86-ea94-4de2-8f81-880dcad4148d_fixed.java
@@ -1,20 +1,24 @@
 /**
  * @param encoding the encoding to use for file names, use null
  * for the platform's default encoding
  * @param useUnicodeExtraFields whether to use InfoZIP Unicode
  * Extra Fields (if present) to set the file names.
  * @param allowStoredEntriesWithDataDescriptor whether the stream
  * will try to read STORED entries that use a data descriptor
  * @since 1.1
  */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
                              boolean allowStoredEntriesWithDataDescriptor) {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+    in = new PushbackInputStream(inputStream, BUFFER_SIZE);
+    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;
+
+    // Prepare to read from the start of the stream
+    pushesBackInputStream = new PushbackInputStream(this.in, 2);
+    this.in = new BufferedInputStream(pushesBackInputStream, BUFFER_SIZE);
+
+    eos = false;
 }
\ No newline at end of file
