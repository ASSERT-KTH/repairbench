diff --git a/tmp/140f2a7c-b331-4d09-94d2-a338605e019a_buggy.java b/tmp/778a5c75-e309-4f25-91ea-b3e732e80c49_fixed.java
index 6c0aa19..983eaec 100644
--- a/tmp/140f2a7c-b331-4d09-94d2-a338605e019a_buggy.java
+++ b/tmp/778a5c75-e309-4f25-91ea-b3e732e80c49_fixed.java
@@ -1,20 +1,22 @@
 /**
+ * @param inputStream the input stream to read data from
  * @param encoding the encoding to use for file names, use null
  * for the platform's default encoding
  * @param useUnicodeExtraFields whether to use InfoZIP Unicode
  * Extra Fields (if present) to set the file names.
  * @param allowStoredEntriesWithDataDescriptor whether the stream
  * will try to read STORED entries that use a data descriptor
  * @since 1.1
  */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
-                                 boolean allowStoredEntriesWithDataDescriptor) {
+                             boolean allowStoredEntriesWithDataDescriptor)
+    throws IOException {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+    in = new PushbackInputStream(inputStream, buf.length);
+    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;
+    // Ensure we have enough capacity for a zip header
+    fillBuf();
 }
\ No newline at end of file
