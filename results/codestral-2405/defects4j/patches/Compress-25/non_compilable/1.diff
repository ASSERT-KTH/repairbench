diff --git a/tmp/eb48638a-b103-4661-b1aa-c83008fe63c8_buggy.java b/tmp/5ccabfe2-83e4-4ff5-9800-8188531e8d26_fixed.java
index 6c0aa19..7bbda88 100644
--- a/tmp/eb48638a-b103-4661-b1aa-c83008fe63c8_buggy.java
+++ b/tmp/5ccabfe2-83e4-4ff5-9800-8188531e8d26_fixed.java
@@ -1,20 +1,21 @@
-    /**
-     * @param encoding the encoding to use for file names, use null
-     * for the platform's default encoding
-     * @param useUnicodeExtraFields whether to use InfoZIP Unicode
-     * Extra Fields (if present) to set the file names.
-     * @param allowStoredEntriesWithDataDescriptor whether the stream
-     * will try to read STORED entries that use a data descriptor
-     * @since 1.1
-     */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
-                                 boolean allowStoredEntriesWithDataDescriptor) {
+                             boolean allowStoredEntriesWithDataDescriptor) throws IOException {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
+    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;
     in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+
+    // peek at next entry without advancing
+    in.mark(buf.length);
+    ZipArchiveEntry ze = getNextEntry();
+    in.reset();
+
+    // if first entry is stored without data descriptor and not allowed, skip it.
+    if (!this.allowStoredEntriesWithDataDescriptor && ze != null && ze.getMethod() == STORED && !ze.getDataDescriptorFlag()) {
+        try (InputStream entryData = new LimitedInputStream(in, ze.getSize())) {
+            IOUtils.skip(entryData, ze.getSize());
+        }
+    }
 }
\ No newline at end of file
