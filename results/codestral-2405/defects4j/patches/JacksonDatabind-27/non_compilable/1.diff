diff --git a/tmp/c55c7dbe-a971-4988-840f-5c9bcd3f3556_buggy.java b/tmp/f1a8264f-ac88-4dec-9ff1-288984e8a044_fixed.java
index 5bc9804..43efe31 100644
--- a/tmp/c55c7dbe-a971-4988-840f-5c9bcd3f3556_buggy.java
+++ b/tmp/f1a8264f-ac88-4dec-9ff1-288984e8a044_fixed.java
@@ -1,85 +1,54 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
     throws IOException
 {
     final ExternalTypeHandler ext = _externalTypeIdHandler.start();
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+    SettableBeanProperty classProp = creator.findCreatorProperty(_typePropertyName);
+    boolean processedClass = false;
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                // first: let's check to see if this might be part of value with external type id:
-                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
-                //   since it is not the bean
-                if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
-                    ;
-                } else {
-                    // Last creator property to set?
-                    if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                        t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
-                        Object bean;
-                        try {
-                            bean = creator.build(ctxt, buffer);
-                        } catch (Exception e) {
-                            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                            continue; // never gets here
-                        }
-                        // if so, need to copy all remaining tokens into buffer
-                        while (t == JsonToken.FIELD_NAME) {
-                            p.nextToken(); // to skip name
+            if (creatorProp != classProp) {
+                // Buffer other properties
+                tokens.writeFieldName(propName);
                 tokens.copyCurrentStructure(p);
                 t = p.nextToken();
+            } else {
+                // Process class property
+                processedClass = true;
+                if (!ext.handlePropertyValue(p, ctxt, propName, buffer)) {
+                    throw ctxt.mappingException("Invalid type id for external id property '" + propName + "'");
                 }
-                        if (bean.getClass() != _beanType.getRawClass()) {
-                            // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
-                            //   it's too complicated, so bail out
-                            throw ctxt.mappingException("Can not create polymorphic instances with unwrapped values");
-                        }
-                        return ext.complete(p, ctxt, bean);
-                    }
-                }
-                continue;
-            }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
-                continue;
-            }
-            // regular property? needs buffering
-            SettableBeanProperty prop = _beanProperties.find(propName);
-            if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
-            }
-            // external type id (or property that depends on it)?
-            if (ext.handlePropertyValue(p, ctxt, propName, null)) {
-                continue;
-            }
-            /* As per [JACKSON-313], things marked as ignorable should not be
-             * passed to any setter
-             */
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
-                handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
             }
-            // "any property"?
-            if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+        } else {
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
+            t = p.nextToken();
         }
     }
 
-        // We hit END_OBJECT; resolve the pieces:
-        try {
-            return ext.complete(p, ctxt, buffer, creator);
-        } catch (Exception e) {
-            wrapInstantiationProblem(e, ctxt);
-            return null; // never gets here
+    if (!processedClass) {
+        throw ctxt.mappingException("Missing external type id property '" + _typePropertyName + "'");
     }
+
+    // Build object
+    Object bean = creator.build(ctxt, buffer.getBuffered());
+    // Copy any remaining tokens into new TokenBuffer
+    TokenBuffer remaining = tokens.asCopyOfValueTokens();
+    // Add buffer to remaining tokens and reconstruct parser
+    remaining.insert(1, "payload").copyCurrentStructure(beanToString(bean, mapper));
+    JsonParser newParser = remaining.asParser();
+    newParser.nextToken(); // Move to first field name
+    // Deserialize remaining properties
+    return _beanDeserializer.deserialize(newParser, ctxt);
 }
\ No newline at end of file
