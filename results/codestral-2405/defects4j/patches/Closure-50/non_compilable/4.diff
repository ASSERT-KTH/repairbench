diff --git a/tmp/d4f05a1c-6c33-494b-90d2-19737bd57f51_buggy.java b/tmp/4d84032e-4c13-4e32-a819-24e4e656000b_fixed.java
index d8b0158..962be8a 100644
--- a/tmp/d4f05a1c-6c33-494b-90d2-19737bd57f51_buggy.java
+++ b/tmp/4d84032e-4c13-4e32-a819-24e4e656000b_fixed.java
@@ -1,113 +1,50 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
         return n;
     }
 
-    Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
+    Node functionName = callTarget.getLastChild();
+    if (!functionName.getString().equals("join")) {
         return n;
     }
+
+    // Check if the number of arguments to join is greater than 1
+    if (n.getChildCount() > 2) {
+        return n;
     }
 
     Node arrayNode = callTarget.getFirstChild();
-    Node functionName = arrayNode.getNext();
-
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
-        !functionName.getString().equals("join")) {
+    if (arrayNode.getType() != Token.ARRAYLIT) {
         return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
+    Node right = n.getLastChild();
+    String joinString = (right == null) ? "," : right.isString() ? right.getString() : String.valueOf(right.getDouble());
 
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
-    int foldedSize = 0;
-    Node prev = null;
+    StringBuilder sb = new StringBuilder();
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
     while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
-        if (sb == null) {
-          sb = new StringBuilder();
-        } else {
+        sb.append(NodeUtil.isImmutableValue(elem) || elem.isString() ? NodeUtil.getArrayElementStringValue(elem) : "String("+NodeUtil.nodeToString(elem)+")");
+        Node nextElem = elem.getNext();
+        if (nextElem != null && !(NodeUtil.isImmutableValue(nextElem) || nextElem.isString())) {
+            for (int i = elem.getNext().getIndex(); i < arrayNode.getChildCount(); i++) {
+                return n;
+            }
+        } else if (nextElem != null) {
             sb.append(joinString);
         }
-        sb.append(NodeUtil.getArrayElementStringValue(elem));
-      } else {
-        if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
-        }
-        foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
-      }
-      prev = elem;
-      elem = elem.getNext();
+        elem = nextElem;
     }
 
-    if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
-    }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
-
-    int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
-        reportCodeChange();
-        return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
-        }
+    Node foldedStringNode = Node.newString(sb.toString()).copyInformationFrom(n);
     arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
-        }
     n.getParent().replaceChild(n, foldedStringNode);
     reportCodeChange();
+
     return foldedStringNode;
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
-        reportCodeChange();
-        break;
-    }
-
-    return n;
 }
\ No newline at end of file
