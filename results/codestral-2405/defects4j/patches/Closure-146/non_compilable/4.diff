diff --git a/tmp/fc7c8c88-963b-4443-af5b-73ea4df8b12b_buggy.java b/tmp/84ad3ef6-36b1-450f-ade6-d0a2fed47fc9_fixed.java
index 210695a..1b75b66 100644
--- a/tmp/fc7c8c88-963b-4443-af5b-73ea4df8b12b_buggy.java
+++ b/tmp/84ad3ef6-36b1-450f-ade6-d0a2fed47fc9_fixed.java
@@ -1,32 +1,25 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+  // Switch this and that if that is a UnionType
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
-    // other types
+  // Handle equality
   switch (this.testForEquality(that)) {
     case TRUE:
       return new TypePair(null, null);
 
     case FALSE:
     case UNKNOWN:
+      if (this instanceof VoidType && that instanceof VoidType) {
+        // If both this and that are VOID_TYPE, return NO_TYPE for inequality
+        return new TypePair(NO_TYPE, NO_TYPE);
+      } else {
+        // Otherwise, return same types as input
         return new TypePair(this, that);
       }
+  }
 
-    // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
