diff --git a/tmp/ed61d0a7-8ef8-436a-b408-1f2c1a88cc33_buggy.java b/tmp/c524d400-382e-4eed-aa8c-2e9869dd14a4_fixed.java
index 210695a..1d26b5b 100644
--- a/tmp/ed61d0a7-8ef8-436a-b408-1f2c1a88cc33_buggy.java
+++ b/tmp/c524d400-382e-4eed-aa8c-2e9869dd14a4_fixed.java
@@ -1,32 +1,24 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
   // unions types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
   // other types
   switch (this.testForEquality(that)) {
     case TRUE:
+      // if the types are equal and they are undefined, return a pair of NO_TYPE
+      if (this.isUnknownType() && that.isUnknownType()) {
+        return new TypePair(NO_TYPE, NO_TYPE);
+      }
       return new TypePair(null, null);
 
     case FALSE:
     case UNKNOWN:
       return new TypePair(this, that);
   }
 
   // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
