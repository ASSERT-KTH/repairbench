diff --git a/tmp/89ef6997-c131-4328-9d3e-f9f4f186576e_buggy.java b/tmp/1a2f2f7e-fde2-4668-a4cf-1d06cb209733_fixed.java
index 210695a..3a4b234 100644
--- a/tmp/89ef6997-c131-4328-9d3e-f9f4f186576e_buggy.java
+++ b/tmp/1a2f2f7e-fde2-4668-a4cf-1d06cb209733_fixed.java
@@ -1,32 +1,40 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
-    if (that instanceof UnionType) {
+    if (that instanceof UnionType || this instanceof UnionType) {
+      if (this.hasType(VOID_TYPE) || that.hasType(VOID_TYPE)) {
+        return new TypePair(this.isUnionType() ? this.restrictByNotType(VOID_TYPE) : this,
+                            that.isUnionType() ? that.restrictByNotType(VOID_TYPE) : that);
+      } else {
         TypePair p = that.getTypesUnderInequality(this);
         return new TypePair(p.typeB, p.typeA);
       }
+    }
 
-    // other types
+    // specific types excluding void
+    if (!(this instanceof VoidType) && !(that instanceof VoidType)) {
       switch (this.testForEquality(that)) {
         case TRUE:
           return new TypePair(null, null);
 
         case FALSE:
         case UNKNOWN:
           return new TypePair(this, that);
       }
+    }
 
-    // switch case is exhaustive
-    throw new IllegalStateException();
+    // void type
+    return new TypePair(this instanceof VoidType ? NO_TYPE : this,
+                        that instanceof VoidType ? NO_TYPE : that);
   }
\ No newline at end of file
