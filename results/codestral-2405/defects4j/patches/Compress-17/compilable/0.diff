diff --git a/tmp/7e6f3953-8609-4878-998d-96326e3a3122_buggy.java b/tmp/e187bce5-80d6-4451-89ed-f46a603173a7_fixed.java
index 3b9a3c0..ee5ddb9 100644
--- a/tmp/7e6f3953-8609-4878-998d-96326e3a3122_buggy.java
+++ b/tmp/e187bce5-80d6-4451-89ed-f46a603173a7_fixed.java
@@ -1,71 +1,39 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        while (start < end && buffer[start] == ' ') {
             start++;
-            } else {
-                break;
-            }
         }
 
         // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
+        if (end < start + 1 || (buffer[end - 1] != 0 && buffer[end - 1] != ' ')) {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));
         }
         // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+        if (end - start > 1 && (buffer[end - 2] == 0 || buffer[end - 2] == ' ')) {
             end--;
         }
 
-        for ( ;start < end; start++) {
+        for ( ;start < end - 1; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
