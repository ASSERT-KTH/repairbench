diff --git a/tmp/04254448-7e59-40bf-852a-18ec740f3af1_buggy.java b/tmp/bbbbcdb8-2f0c-426f-ad2b-75585b7a9f03_fixed.java
index cd412d2..57a1509 100644
--- a/tmp/04254448-7e59-40bf-852a-18ec740f3af1_buggy.java
+++ b/tmp/bbbbcdb8-2f0c-426f-ad2b-75585b7a9f03_fixed.java
@@ -1,76 +1,54 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
-            }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
+            if (c == ':' || c == '+' || c == '-') {
                 len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
                 c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+                if (Character.isDigit(c)) { // if seconds are missing, insert
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    sb.insert(len-5, ":00");
                     dateStr = sb.toString();
                 }
+            }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
-                }
+            if (dateStr.charAt(len-1) != 'Z') { // if timezone is missing, append 'Z'
                 sb.append('Z');
+            }
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
+
+    // handle cases where milliseconds are partial or missing
+    if (dateStr.charAt(len-4) == '.') { // if milliseconds are partial or missing, pad with zeros
+        while (dateStr.length() < len + 3) {
+            dateStr += "0";
+        }
+    }
+
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
