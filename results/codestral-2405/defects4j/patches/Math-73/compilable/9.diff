diff --git a/tmp/6edd1266-a3c2-4359-a917-3029ae11a991_buggy.java b/tmp/56fcd673-8d17-4883-9a24-3a9c6bcb0693_fixed.java
index 757067a..3ff164d 100644
--- a/tmp/6edd1266-a3c2-4359-a917-3029ae11a991_buggy.java
+++ b/tmp/56fcd673-8d17-4883-9a24-3a9c6bcb0693_fixed.java
@@ -1,63 +1,49 @@
     /**
-     * Find a zero in the given interval with an initial guess.
-     * <p>Throws <code>IllegalArgumentException</code> if the values of the
-     * function at the three points have the same sign (note that it is
-     * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
-     *
-     * @param f function to solve.
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @param initial the start value to use (must be set to min if no
-     * initial point is known).
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException the maximum iteration count
-     * is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating
-     *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * ...
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        // Check if min, max, and initial form a valid interval and check if they bracket the root
+        double yMin = f.value(min);
+        double yMax = f.value(max);
         double yInitial = f.value(initial);
+
+        if(initial < min || initial > max || yInitial * yMin > 0 || yInitial * yMax > 0) {
+            throw new IllegalArgumentException("Initial point does not bracket a root");
+        }
+
+        // return the initial guess if it is good enough
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
-        double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
-        double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0);
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
-
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
-
     }
\ No newline at end of file
