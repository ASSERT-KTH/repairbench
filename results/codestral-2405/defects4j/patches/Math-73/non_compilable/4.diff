diff --git a/tmp/cabaaf1a-ccb5-4d9e-b4e9-99ae8e57259d_buggy.java b/tmp/1d2a87c5-a4bb-4452-85d0-7c5847e5dcb1_fixed.java
index 757067a..daa79aa 100644
--- a/tmp/cabaaf1a-ccb5-4d9e-b4e9-99ae8e57259d_buggy.java
+++ b/tmp/1d2a87c5-a4bb-4452-85d0-7c5847e5dcb1_fixed.java
@@ -1,63 +1,68 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
-        throws MaxIterationsExceededException, FunctionEvaluationException {
+        throws MaxIterationsExceededException, FunctionEvaluationException, IllegalArgumentException {
 
         clearResult();
-        verifySequence(min, initial, max);
+        verifyInterval(min, max);
+        verifyBracketing(min, max, initial, f);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0);
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
-
-
-        // full Brent algorithm starting with provided initial guess
+        // If we got here, we need to start full Brent's algorithm
         return solve(f, min, yMin, max, yMax, initial, yInitial);
+    }
 
+    private void verifyInterval(double min, double max) {
+        if (min >= max) {
+            throw new IllegalArgumentException("Invalid interval: min >= max");
+        }
+    }
+
+    private void verifyBracketing(double min, double max, double initial, UnivariateRealFunction f)
+        throws FunctionEvaluationException {
+        double yMin = f.value(min);
+        double yMax = f.value(max);
+        double yInitial = f.value(initial);
+        if (yMin * yInitial > 0 || yInitial * yMax > 0) {
+            throw new IllegalArgumentException("Initial guess does not bracket the root");
+        }
     }
\ No newline at end of file
