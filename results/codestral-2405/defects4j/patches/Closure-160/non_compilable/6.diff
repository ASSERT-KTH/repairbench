diff --git a/tmp/3ac941a6-016e-45b5-a972-58661f709304_buggy.java b/tmp/9a0b89be-2f33-4c33-804f-eb60ee7615c5_fixed.java
index b05b859..4fed61d 100644
--- a/tmp/3ac941a6-016e-45b5-a972-58661f709304_buggy.java
+++ b/tmp/9a0b89be-2f33-4c33-804f-eb60ee7615c5_fixed.java
@@ -1,61 +1,24 @@
-  /**
-   * Initialize the compiler options. Only necessary if you're not doing
-   * a normal compile() job.
-   */
 public void initOptions(CompilerOptions options) {
-    this.options = options;
-    if (errorManager == null) {
-      if (outStream == null) {
-        setErrorManager(
-            new LoggerErrorManager(createMessageFormatter(), logger));
-      } else {
-        PrintStreamErrorManager printer =
-            new PrintStreamErrorManager(createMessageFormatter(), outStream);
-        printer.setSummaryDetailLevel(options.summaryDetailLevel);
-        setErrorManager(printer);
-      }
-    }
+    // ...
 
-    // DiagnosticGroups override the plain checkTypes option.
-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
-      options.checkTypes = true;
-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
-      options.checkTypes = false;
-    } else if (!options.checkTypes) {
-      // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
-      // parser type warnings.
-      options.setWarningLevel(
-          DiagnosticGroup.forType(
-              RhinoErrorReporter.TYPE_PARSE_ERROR),
-          CheckLevel.OFF);
-    }
-
-    if (options.checkGlobalThisLevel.isOn()) {
-      options.setWarningLevel(
-          DiagnosticGroups.GLOBAL_THIS,
-          options.checkGlobalThisLevel);
-    }
-
-    // Initialize the warnings guard.
+    // All passes must run the variable check even if symbols are not checked.
+    // This synthesizes variables later so that the compiler doesn't crash.
+    // It also checks the externs file for validity. If you don't want to warn
+    // about missing variable declarations, we shut that specific error off.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
-    guards.add(options.getWarningsGuard());
 
-
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
-      guards.add(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+    // If symbols are not checked or the warnings guard disables CHECK_VARIABLES,
+    // disable the CHECK_VARIABLES error.
+    // However, do not disable it if the error is switched on explicitly by jscomp_error/--hide_warning.
+    CheckLevel checkVariablesLevel = CheckLevel.ON;
+    if ((!options.checkSymbols || options.disables(DiagnosticGroups.CHECK_VARIABLES))
+        && !options.getOptionOverrides().contains("checkVariables")) {
+        checkVariablesLevel = CheckLevel.OFF;
     }
+    guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, checkVariablesLevel));
 
-    this.warningsGuard = new ComposeWarningsGuard(guards);
+    options.getWarningsGuard().setGuard(guards);
 }
\ No newline at end of file
