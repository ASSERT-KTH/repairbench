diff --git a/tmp/964b4e04-62f0-4006-a4a5-3fa87ae26a61_buggy.java b/tmp/88f634f4-f037-46c8-97d6-548db56d4e79_fixed.java
index b05b859..bdf4810 100644
--- a/tmp/964b4e04-62f0-4006-a4a5-3fa87ae26a61_buggy.java
+++ b/tmp/88f634f4-f037-46c8-97d6-548db56d4e79_fixed.java
@@ -1,61 +1,43 @@
 /**
  * Initialize the compiler options. Only necessary if you're not doing
  * a normal compile() job.
  */
 public void initOptions(CompilerOptions options) {
   this.options = options;
   if (errorManager == null) {
     if (outStream == null) {
-        setErrorManager(
-            new LoggerErrorManager(createMessageFormatter(), logger));
+      setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger) );
     } else {
-        PrintStreamErrorManager printer =
-            new PrintStreamErrorManager(createMessageFormatter(), outStream);
+      PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream);
       printer.setSummaryDetailLevel(options.summaryDetailLevel);
       setErrorManager(printer);
     }
   }
 
   // DiagnosticGroups override the plain checkTypes option.
   if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = true;
   } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = false;
-    } else if (!options.checkTypes) {
-      // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
-      // parser type warnings.
-      options.setWarningLevel(
-          DiagnosticGroup.forType(
-              RhinoErrorReporter.TYPE_PARSE_ERROR),
-          CheckLevel.OFF);
   }
 
   if (options.checkGlobalThisLevel.isOn()) {
-      options.setWarningLevel(
-          DiagnosticGroups.GLOBAL_THIS,
-          options.checkGlobalThisLevel);
+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);
   }
 
-    // Initialize the warnings guard.
   List<WarningsGuard> guards = Lists.newArrayList();
-    guards.add(
-        new SuppressDocWarningsGuard(
-            getDiagnosticGroups().getRegisteredGroups()));
+  guards.add( new SuppressDocWarningsGuard( getDiagnosticGroups().getRegisteredGroups() ) );
   guards.add(options.getWarningsGuard());
 
-
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
-      guards.add(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+  if (!options.checkSymbols) {
+    // If checkSymbols is off, turn off the missing variable declarations warning.
+    guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+  } else {
+    // If checkSymbols is on, but the warning level is QUIET, then explicitly turn on the undefined variable error.
+    if (options.getWarningLevel(DiagnosticGroups.CHECK_VARIABLES).isOff()) {
+      guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.MISSING_UNDEFINED_VARIABLES, CheckLevel.ERROR));
+    }
   }
 
   this.warningsGuard = new ComposeWarningsGuard(guards);
 }
\ No newline at end of file
