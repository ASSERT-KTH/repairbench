diff --git a/tmp/447f425b-0b6c-4338-8f91-05b6e5cb33c2_buggy.java b/tmp/4b7fda74-f5a4-4bec-9d69-cee71651a080_fixed.java
index b05b859..85884df 100644
--- a/tmp/447f425b-0b6c-4338-8f91-05b6e5cb33c2_buggy.java
+++ b/tmp/4b7fda74-f5a4-4bec-9d69-cee71651a080_fixed.java
@@ -1,61 +1,57 @@
-  /**
-   * Initialize the compiler options. Only necessary if you're not doing
-   * a normal compile() job.
-   */
+// Fixed version of the buggy function
 public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
-    } else if (!options.checkTypes) {
-      // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
-      // parser type warnings.
+    }
+
+    // If DiagnosticGroups did not override the plain checkTypes option, we need to consider the plain checkTypes value.
+    if (!options.enables(DiagnosticGroups.CHECK_TYPES) && !options.disables(DiagnosticGroups.CHECK_TYPES)) {
+      if (!options.checkTypes) {
+        // Turn off the parser type warnings as they were not explicitly enabled.
         options.setWarningLevel(
             DiagnosticGroup.forType(
                 RhinoErrorReporter.TYPE_PARSE_ERROR),
             CheckLevel.OFF);
       }
+    }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
-
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
+    // Handle the CHECK_VARIABLES group based on the checkSymbols option.
+    // If checkSymbols is false and the warning guard doesn't explicitly disable CHECK_VARIABLES, then disable it.
     if (!options.checkSymbols &&
         (warningsGuard == null || !warningsGuard.disables(
             DiagnosticGroups.CHECK_VARIABLES))) {
       guards.add(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
