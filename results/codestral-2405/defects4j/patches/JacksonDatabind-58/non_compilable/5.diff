diff --git a/tmp/4effb79f-07b2-4664-9b76-e95e44ab49ad_buggy.java b/tmp/138d0cb1-a17b-4bf5-ac3f-41e61d7a0171_fixed.java
index 574b43c..ed088d3 100644
--- a/tmp/4effb79f-07b2-4664-9b76-e95e44ab49ad_buggy.java
+++ b/tmp/138d0cb1-a17b-4bf5-ac3f-41e61d7a0171_fixed.java
@@ -1,57 +1,5 @@
-    /**
-     * Method that will construct a regular bean property setter using
-     * the given setter method.
-     *
-     * @return Property constructed, if any; or null to indicate that
-     *   there should be no property based on given definitions.
-     */
-    protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
-            BeanDescription beanDesc, BeanPropertyDefinition propDef,
-            JavaType propType0)
-        throws JsonMappingException
-    {
-        // need to ensure method is callable (for non-public)
-        AnnotatedMember mutator = propDef.getNonConstructorMutator();
-
-        if (ctxt.canOverrideAccessModifiers()) {
-            // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
-            // never needed and attempts may cause problems on some platforms.
-            // !!! NOTE: should be handled better for 2.8 and later
-                mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
-        }
-        // note: this works since we know there's exactly one argument for methods
-        BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
-                propType0, propDef.getWrapperName(),
-                beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
-        JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
-        // did type change?
-        if (type != propType0) {
-            property = property.withType(type);
-        }
-
-        // First: does the Method specify the deserializer to use? If so, let's use it.
-        JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
-        type = modifyTypeByAnnotation(ctxt, mutator, type);
-        TypeDeserializer typeDeser = type.getTypeHandler();
-        SettableBeanProperty prop;
-        if (mutator instanceof AnnotatedMethod) {
-            prop = new MethodProperty(propDef, type, typeDeser,
-                    beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
-        } else {
-            prop = new FieldProperty(propDef, type, typeDeser,
-                    beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
-        }
-        if (propDeser != null) {
-            prop = prop.withValueDeserializer(propDeser);
-        }
-        // need to retain name of managed forward references:
-        AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
-        if (ref != null && ref.isManagedReference()) {
-            prop.setManagedReferenceName(ref.getName());
-        }
-        ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
-        if(objectIdInfo != null){
-            prop.setObjectIdInfo(objectIdInfo);
-        }
-        return prop;
-    }
+// Since the cause field of Throwable is never actually used directly and is always set through initCause()
+// We can safely bypass the access for Iterable.class which cases our security exception in the test
+final Class<?> clazz = propDef.getNonConstructorMutator().getRawType();
+Boolean shouldSkip = (clazz == Iterable.class && propDef.getNonConstructorMutator().getName().equals("cause"));
+mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS) && !shouldSkip);
\ No newline at end of file
