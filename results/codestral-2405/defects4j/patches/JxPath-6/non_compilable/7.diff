diff --git a/tmp/4b7484a6-b4eb-4185-b914-1a7ce16a82cb_buggy.java b/tmp/b699e51a-5c6f-4713-a48b-406d63250ead_fixed.java
index f650982..97b064b 100644
--- a/tmp/4b7484a6-b4eb-4185-b914-1a7ce16a82cb_buggy.java
+++ b/tmp/b699e51a-5c6f-4713-a48b-406d63250ead_fixed.java
@@ -1,42 +1,42 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right)
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // Fixed this part
+    if ((l instanceof Collection || l instanceof Iterator) && (r instanceof Collection || r instanceof Iterator)) {
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
-
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
-
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
-        }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
-        }
-        if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+
     return equal(l, r);
 }
+
+// Assuming findMatch method correctly checks for match between two iterators
+private boolean findMatch(Iterator l, Iterator r) {
+    while (l.hasNext() && r.hasNext()) {
+        if (!equal(l.next(), r.next())) {
+            return false;
+        }
+    }
+    return !(l.hasNext() || r.hasNext());
+}
\ No newline at end of file
