diff --git a/tmp/b10a69ce-f11b-4be9-a7e0-d91bf3662997_buggy.java b/tmp/3ab54e46-0292-423a-843e-60b37f220877_fixed.java
index f650982..58508b9 100644
--- a/tmp/b10a69ce-f11b-4be9-a7e0-d91bf3662997_buggy.java
+++ b/tmp/3ab54e46-0292-423a-843e-60b37f220877_fixed.java
@@ -1,42 +1,31 @@
-    /**
-     * Compares two values
-     */
-    protected boolean equal(
-        EvalContext context,
-        Expression left,
-        Expression right) 
-    {
+protected boolean equal(EvalContext context, Expression left, Expression right) {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        return contains(((Collection) l).iterator(), r);
     }
 
     if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        return contains(((Collection) r).iterator(), l);
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    return Objects.equals(l, r);
 }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+
+private boolean contains(Iterator<?> iterator, Object object) {
+    while (iterator.hasNext()) {
+        if (Objects.equals(iterator.next(), object)) {
+            return true;
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    return false;
 }
\ No newline at end of file
