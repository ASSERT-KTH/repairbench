diff --git a/tmp/bc3ca2b0-3fa2-41c0-affd-c00b5d3cc41a_buggy.java b/tmp/b8a91f98-6f92-4812-8ec9-3f2a3825d8cd_fixed.java
index f650982..961a125 100644
--- a/tmp/bc3ca2b0-3fa2-41c0-affd-c00b5d3cc41a_buggy.java
+++ b/tmp/b8a91f98-6f92-4812-8ec9-3f2a3825d8cd_fixed.java
@@ -1,42 +1,49 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right)
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        Collection lCol = (Collection) l;
+        if (lCol.size() == 1) {
+            l = lCol.iterator().next();
+        } else {
+            return collectionContains(lCol, r);
+        }
     }
 
     if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        Collection rCol = (Collection) r;
+        if (rCol.size() == 1) {
+            r = rCol.iterator().next();
+        } else {
+            return collectionContains(r, l);
+        }
+    }
+
+    if (l.equals(r)) {
+        return true;
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    return false;
 }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+
+private boolean collectionContains(Collection col, Object obj) {
+    for (Object item : col) {
+        if (obj.equals(item)) {
+            return true;
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    return false;
 }
\ No newline at end of file
