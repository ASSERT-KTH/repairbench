diff --git a/tmp/f5d21e25-2743-4150-8138-4adb2e4a03da_buggy.java b/tmp/6fcd970c-cdc9-4171-bf29-c2e42aea2e84_fixed.java
index f650982..008bbc1 100644
--- a/tmp/f5d21e25-2743-4150-8138-4adb2e4a03da_buggy.java
+++ b/tmp/6fcd970c-cdc9-4171-bf29-c2e42aea2e84_fixed.java
@@ -1,42 +1,48 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right)
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    Iterator<?> leftIterator = null;
+
     if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        leftIterator = ((Collection<?>) l).iterator();
     }
 
+    if (leftIterator != null) {
+        while(leftIterator.hasNext()) {
+            if (equal(context, new JXPathBeanContext(leftIterator.next()), right)) {
+                return true;
+            }
+        }
+        // if we've gone through the entire left iterator and no match is found, return false
+        return false;
+    } else {
         if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+            r = ((Collection<?>) r).iterator();
+        }
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    if ((r instanceof Iterator)) {
+        while(((Iterator<?>) r).hasNext()) {
+            if (equal(context, left, new JXPathBeanContext(((Iterator<?>) r).next()))) {
+                return true;
             }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        // if we've gone through the entire right iterator and no match is found, return false
+        return false;
     }
+
     return equal(l, r);
 }
\ No newline at end of file
