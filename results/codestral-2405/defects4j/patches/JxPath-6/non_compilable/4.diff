diff --git a/tmp/6449b829-4936-4db3-9249-1de7aa927f41_buggy.java b/tmp/45801ee0-c051-42d5-9670-29b60c89bb45_fixed.java
index f650982..ca851de 100644
--- a/tmp/6449b829-4936-4db3-9249-1de7aa927f41_buggy.java
+++ b/tmp/45801ee0-c051-42d5-9670-29b60c89bb45_fixed.java
@@ -1,42 +1,44 @@
-    /**
-     * Compares two values
-     */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        if (l instanceof Collection || l instanceof Iterator) {
+            if (!(l instanceof Collection)) {
+                l = toCollection((Iterator) l);
             }
-
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        if (r instanceof Collection || r instanceof Iterator) {
+            if (!(r instanceof Collection)) {
+                r = toCollection((Iterator) r);
             }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+
+        if (l instanceof Collection && r instanceof Collection) {
+            return ((Collection) l).containsAll((Collection) r)} &&
+                   ((Collection) r).containsAll((Collection) l))
         }
+
         return equal(l, r);
     }
+
+    // Helper method to convertIterator to Collection
+    private Collection toCollection(Iterator iterator) {
+        Collection list = new ArrayList();
+        while (iterator.hasNext()) {
+            list.add(iterator.next());
+        }
+        return list;
+    }
\ No newline at end of file
