diff --git a/tmp/2ec26d6b-3373-4a51-b78c-eabe577550ac_buggy.java b/tmp/e6d5822c-c89f-4084-bb24-299e452d6386_fixed.java
index f650982..76ded60 100644
--- a/tmp/2ec26d6b-3373-4a51-b78c-eabe577550ac_buggy.java
+++ b/tmp/e6d5822c-c89f-4084-bb24-299e452d6386_fixed.java
@@ -1,42 +1,36 @@
-    /**
-     * Compares two values
-     */
-    protected boolean equal(
-        EvalContext context,
-        Expression left,
-        Expression right) 
-    {
+protected boolean equal(EvalContext context, Expression left, Expression right) {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+
+    // If both are not iterators, directly compare them. If they're both iterators, find a match.
+    if (!(l instanceof Iterator) && !(r instanceof Iterator)) {
+        return l.equals(r);
+    }
+    return false;
 }
\ No newline at end of file
