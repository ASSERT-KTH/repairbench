diff --git a/tmp/89ec1a9f-2807-41c8-8cc7-c2289c47b5ff_buggy.java b/tmp/0c578801-bda7-4037-b1a2-baefa5c1ad17_fixed.java
index f650982..30c964c 100644
--- a/tmp/89ec1a9f-2807-41c8-8cc7-c2289c47b5ff_buggy.java
+++ b/tmp/0c578801-bda7-4037-b1a2-baefa5c1ad17_fixed.java
@@ -1,42 +1,44 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right)
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        return compareIterators((Iterator) l, (Iterator) r);
     }
     return equal(l, r);
 }
+
+private boolean compareIterators(Iterator<Object> l, Iterator<Object> r) {
+    while (l.hasNext() && r.hasNext()) {
+        if (!equal(l.next(), r.next())) {
+            return false;
+        }
+    }
+    return !l.hasNext() && !r.hasNext();
+}
\ No newline at end of file
