diff --git a/tmp/4a5afefb-eef5-4aad-b417-a04e66ba7ae9_buggy.java b/tmp/40214fa2-26c5-46cb-b718-be98c5e3472a_fixed.java
index 466a88c..5d0c204 100644
--- a/tmp/4a5afefb-eef5-4aad-b417-a04e66ba7ae9_buggy.java
+++ b/tmp/40214fa2-26c5-46cb-b718-be98c5e3472a_fixed.java
@@ -1,169 +1,139 @@
 /** {@inheritDoc} */
 @Override
 protected UnivariatePointValuePair doOptimize() {
     final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
-        final double lo = getMin();
-        final double mid = getStartValue();
-        final double hi = getMax();
+    double lo = getMin();
+    double mid = getStartValue();
+    double hi = getMax();
+
+    // Ensure lo < mid < hi for algorithm to work
+    if (lo > mid) {
+        double temp = lo;
+        lo = mid;
+        mid = temp;
+    }
+    if (mid > hi) {
+        double temp = mid;
+        mid = hi;
+        hi = temp;
+    }
+    if (lo > mid) {
+        double temp = lo;
+        lo = mid;
+        mid = temp;
+    }
 
     // Optional additional convergence criteria.
-        final ConvergenceChecker<UnivariatePointValuePair> checker
-            = getConvergenceChecker();
+    final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
 
-        double a;
-        double b;
-        if (lo < hi) {
-            a = lo;
-            b = hi;
-        } else {
-            a = hi;
-            b = lo;
-        }
+    double a = lo;
+    double b = hi;
 
     double x = mid;
-        double v = x;
     double w = x;
-        double d = 0;
-        double e = 0;
+    double v = w;
     double fx = computeObjectiveValue(x);
-        if (!isMinim) {
-            fx = -fx;
-        }
-        double fv = fx;
     double fw = fx;
+    double fv = fw;
+    double bestX = x;
+    double bestFx = fx;
+    boolean foundBest = true;
 
     UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-        // Best point encountered so far (which is the initial guess).
+    UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
 
     int iter = 0;
     while (true) {
         final double m = 0.5 * (a + b);
         final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
         final double tol2 = 2 * tol1;
 
-            // Default stopping criterion.
-            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
+        if (FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)) {
+            break; // Default termination (Brent's criterion).
+        }
+
         double p = 0;
         double q = 0;
-                double r = 0;
-                double u = 0;
 
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
-                    r = (x - w) * (fx - fv);
+        if (FastMath.abs(v - w) > tol1) {
             q = (x - v) * (fx - fw);
-                    p = (x - v) * q - (x - w) * r;
-                    q = 2 * (q - r);
+            p = (x - w) * (fx - fv);
+            q = q - p;
+            p = 2 * (p - q);
+        }
 
-                    if (q > 0) {
-                        p = -p;
-                    } else {
+        if (p > 0) {
             q = -q;
+        } else {
+            p = -p;
         }
 
-                    r = e;
-                    e = d;
-
-                    if (p > q * (a - x) &&
-                        p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
-                        d = p / q;
-                        u = x + d;
+        double u;
 
-                        // f must not be evaluated too close to a or b.
-                        if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
-                            }
-                        }
-                    } else {
-                        // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
-                        }
-                        d = GOLDEN_SECTION * e;
-                    }
+        if (FastMath.abs(p) >= tol1 && p <= q * (a - x) && p >= q * (b - x)) {
+            u = x + p / q;
         } else {
-                    // Golden section step.
             if (x < m) {
-                        e = b - x;
+                u = x + GOLDEN_SECTION * (b - x);
             } else {
-                        e = a - x;
+                u = x - GOLDEN_SECTION * (x - a);
             }
-                    d = GOLDEN_SECTION * e;
         }
 
-                // Update by at least "tol1".
-                if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
-                    } else {
+        u = clip(u, a, b);
+
+        if (u - x < tol2 && u - x > -tol2) {
+            if (x > m) {
                 u = x - tol1;
-                    }
             } else {
-                    u = x + d;
+                u = x + tol1;
             }
-
-                double fu = computeObjectiveValue(u);
-                if (!isMinim) {
-                    fu = -fu;
         }
 
-                // User-defined convergence checker.
-                previous = current;
-                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
-
-                if (checker != null) {
-                    if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
-                    }
-                }
+        final double fu = computeObjectiveValue(u);
 
-                // Update a, b, v, w and x.
         if (fu <= fx) {
-                    if (u < x) {
-                        b = x;
-                    } else {
-                        a = x;
-                    }
-                    v = w;
-                    fv = fw;
-                    w = x;
-                    fw = fx;
-                    x = u;
-                    fx = fu;
+            a = u >= x ? x : u;
+            b = u >= x ? u : x;
+
+            foundBest = false;
         } else {
             if (u < x) {
                 a = u;
             } else {
                 b = u;
             }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+
+            if (fu <= fw || w == x) {
                 v = w;
-                        fv = fw;
                 w = u;
+                fv = fw;
                 fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
+            } else if (fu <= fv || v == x || v == w) {
                 v = u;
                 fv = fu;
             }
+
+            if (foundBest) {
+                bestX = x;
+                bestFx = fx;
             }
-            } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
         }
+
+        x = u;
+        fx = fu;
+
+        final UnivariatePointValuePair previousCandidate = current;
+        current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+
+        if (checker != null) {
+            if (checker.converged(iter, previousCandidate, current)) {
+                return new UnivariatePointValuePair(bestX, isMinim ? bestFx : -bestFx);
+            }
+        }
+
         ++iter;
     }
+
+    return new UnivariatePointValuePair(bestX, isMinim ? bestFx : -bestFx);
 }
\ No newline at end of file
