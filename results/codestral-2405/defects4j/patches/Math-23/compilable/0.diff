diff --git a/tmp/82e3de67-3e4a-4f0e-9a12-12d31be8b0fd_buggy.java b/tmp/7d1f0bac-5e2b-4ba1-9dda-01bd8deecabc_fixed.java
index 466a88c..85e069e 100644
--- a/tmp/82e3de67-3e4a-4f0e-9a12-12d31be8b0fd_buggy.java
+++ b/tmp/7d1f0bac-5e2b-4ba1-9dda-01bd8deecabc_fixed.java
@@ -1,169 +1,134 @@
-    /** {@inheritDoc} */
 @Override
 protected UnivariatePointValuePair doOptimize() {
     final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
     final double lo = getMin();
     final double mid = getStartValue();
     final double hi = getMax();
+    final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
 
-        // Optional additional convergence criteria.
-        final ConvergenceChecker<UnivariatePointValuePair> checker
-            = getConvergenceChecker();
-
-        double a;
-        double b;
+    double a, b;
     if (lo < hi) {
         a = lo;
         b = hi;
     } else {
         a = hi;
         b = lo;
     }
 
     double x = mid;
-        double v = x;
     double w = x;
-        double d = 0;
-        double e = 0;
-        double fx = computeObjectiveValue(x);
+    double v = x;
+    double fw = computeObjectiveValue(x);
+    double fv = fw;
+    double fx = fw;
     if (!isMinim) {
+        fw = -fw;
+        fv = -fv;
         fx = -fx;
     }
-        double fv = fx;
-        double fw = fx;
 
     UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-        // Best point encountered so far (which is the initial guess).
+    UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+    double d = 0.0;
+    double e = 0.0;
 
     int iter = 0;
     while (true) {
         final double m = 0.5 * (a + b);
         final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
         final double tol2 = 2 * tol1;
 
-            // Default stopping criterion.
-            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
+        boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
         if (!stop) {
-                double p = 0;
-                double q = 0;
-                double r = 0;
-                double u = 0;
+            double u, fu;
+            double p = 0, q = 0, r = 0;
+            double uVal = x + d;
 
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
+            if (!Precision.equals(x, w) && !Precision.equals(x, v) &&
+                !Precision.equals(w, v) &&
+                FastMath.abs(e) > tol1) {
                 r = (x - w) * (fx - fv);
                 q = (x - v) * (fx - fw);
                 p = (x - v) * q - (x - w) * r;
                 q = 2 * (q - r);
 
                 if (q > 0) {
                     p = -p;
                 } else {
                     q = -q;
                 }
 
                 r = e;
                 e = d;
 
-                    if (p > q * (a - x) &&
-                        p < q * (b - x) &&
+                if (p > q * (a - x) && p < q * (b - x) &&
                     FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
                     d = p / q;
                     u = x + d;
 
-                        // f must not be evaluated too close to a or b.
                     if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
-                            }
+                        d = FastMath.copySign(tol1, m - x);
                     }
                 } else {
-                        // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
-                        }
+                    e = (x >= m) ? a - x : b - x;
                     d = GOLDEN_SECTION * e;
                 }
             } else {
-                    // Golden section step.
-                    if (x < m) {
-                        e = b - x;
-                    } else {
-                        e = a - x;
-                    }
+                e = (x >= m) ? a - x : b - x;
                 d = GOLDEN_SECTION * e;
             }
 
-                // Update by at least "tol1".
-                if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
-                    } else {
-                        u = x - tol1;
-                    }
+            if (FastMath.abs(d) >= tol1) {
+                uVal = x + d;
             } else {
-                    u = x + d;
+                uVal = x + FastMath.copySign(tol1, d);
             }
 
-                double fu = computeObjectiveValue(u);
+            u = uVal < a ? a : (uVal > b ? b : uVal);
+            fu = computeObjectiveValue(u);
             if (!isMinim) {
                 fu = -fu;
             }
 
-                // User-defined convergence checker.
             previous = current;
             current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
-
             if (checker != null) {
                 if (checker.converged(iter, previous, current)) {
                     return best(current, previous, isMinim);
                 }
             }
 
-                // Update a, b, v, w and x.
             if (fu <= fx) {
-                    if (u < x) {
-                        b = x;
-                    } else {
+                if (u >= x) {
                     a = x;
+                } else {
+                    b = x;
                 }
                 v = w;
                 fv = fw;
                 w = x;
                 fw = fx;
                 x = u;
                 fx = fu;
             } else {
-                    if (u < x) {
-                        a = u;
-                    } else {
+                if (u >= x) {
                     b = u;
+                } else {
+                    a = u;
                 }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                if (fu <= fw || Precision.equals(x, w)) {
                     v = w;
                     fv = fw;
                     w = u;
                     fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
+                } else if (fu <= fv || Precision.equals(x, v) || Precision.equals(w, u)) {
                     v = u;
                     fv = fu;
                 }
             }
-            } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
+        } else {
+            return best(current, previous, isMinim);
         }
         ++iter;
     }
 }
\ No newline at end of file
