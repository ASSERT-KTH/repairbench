diff --git a/tmp/c86dfa7c-bb47-4670-a28a-583705c73af8_buggy.java b/tmp/b04a57fb-ae91-4741-ae7a-12bb9bfdf3fb_fixed.java
index e4d90e7..97c1071 100644
--- a/tmp/c86dfa7c-bb47-4670-a28a-583705c73af8_buggy.java
+++ b/tmp/b04a57fb-ae91-4741-ae7a-12bb9bfdf3fb_fixed.java
@@ -1,45 +1,45 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
-      prettyPrint = false;
-
+  } else {
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
+      if (current == this && !forAnnotations) {
+        continue; // Skip self reference for non-annotation output
+      }
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+      JSType type = getPropertyType(property);
+      sb.append(type.isEquivalentTo(this) ? (forAnnotations ? "?" : "{...}") : type.toString());
 
       ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      if (forAnnotations || i < MAX_PRETTY_PRINTED_PROPERTIES) {
+        continue;
+      } else {
         sb.append(", ...");
         break;
       }
     }
 
     sb.append("}");
 
-      prettyPrint = true;
     return sb.toString();
-    } else {
-      return "{...}";
   }
 }
\ No newline at end of file
