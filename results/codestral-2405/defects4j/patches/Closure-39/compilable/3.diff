diff --git a/tmp/2352863a-e7dc-4a7a-8af5-ec185a861b3c_buggy.java b/tmp/c695016a-9b36-4507-8813-ab34ac4b2de1_fixed.java
index e4d90e7..51b495c 100644
--- a/tmp/2352863a-e7dc-4a7a-8af5-ec185a861b3c_buggy.java
+++ b/tmp/c695016a-9b36-4507-8813-ab34ac4b2de1_fixed.java
@@ -1,45 +1,52 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
         return getReferenceName();
     } else if (prettyPrint) {
-      // Don't pretty print recursively.
+        boolean originalPrettyPrint = prettyPrint;
         prettyPrint = false;
 
         // Use a tree set so that the properties are sorted.
         Set<String> propertyNames = Sets.newTreeSet();
         for (ObjectType current = this;
              current != null && !current.isNativeObjectType() &&
                     propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
              current = current.getImplicitPrototype()) {
             propertyNames.addAll(current.getOwnPropertyNames());
+            // Break if we have more than MAX_PRETTY_PRINTED_PROPERTIES properties
+            // and have not reached the original to avoid infinite loops
+            if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES
+                && current == this) {
+                break;
+            }
         }
 
         StringBuilder sb = new StringBuilder();
         sb.append("{");
 
         int i = 0;
         for (String property : propertyNames) {
             if (i > 0) {
                 sb.append(", ");
             }
 
             sb.append(property);
             sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+
+            // Recursively call toStringHelper to handle nested RecordTypes
+            sb.append(getPropertyType(property).toStringHelper(forAnnotations));
 
             ++i;
             if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
                 sb.append(", ...");
                 break;
             }
         }
 
         sb.append("}");
-
-      prettyPrint = true;
+        prettyPrint = originalPrettyPrint;
         return sb.toString();
     } else {
         return "{...}";
     }
 }
\ No newline at end of file
