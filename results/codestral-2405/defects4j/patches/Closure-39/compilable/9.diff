diff --git a/tmp/1a09964c-73e1-4e10-8195-47a4f95a406d_buggy.java b/tmp/32c37651-1fe0-4c73-84de-cadd666a026e_fixed.java
index e4d90e7..5537a24 100644
--- a/tmp/1a09964c-73e1-4e10-8195-47a4f95a406d_buggy.java
+++ b/tmp/32c37651-1fe0-4c73-84de-cadd666a026e_fixed.java
@@ -1,45 +1,45 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
-    } else if (prettyPrint) {
+    } else {
       // Don't pretty print recursively.
+      boolean originalPrettyPrint = prettyPrint;
       prettyPrint = false;
 
+      int depth = 0;
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
-           current = current.getImplicitPrototype()) {
+           current = (depth++ == 0 || !current.equals(this)) ? current.getImplicitPrototype() : null) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        sb.append(forAnnotations ? getPropertyType(property).toAnnotationString() : getPropertyType(property).toString());
 
         ++i;
         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
-      prettyPrint = true;
+      prettyPrint = originalPrettyPrint;
       return sb.toString();
-    } else {
-      return "{...}";
     }
 }
\ No newline at end of file
