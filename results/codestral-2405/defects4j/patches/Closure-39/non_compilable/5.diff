diff --git a/tmp/a24ec1e5-7c38-4db9-8e31-562d8d36f53f_buggy.java b/tmp/1b2a76e7-047c-462b-b4ff-9cf929e7f52d_fixed.java
index e4d90e7..d9879c7 100644
--- a/tmp/a24ec1e5-7c38-4db9-8e31-562d8d36f53f_buggy.java
+++ b/tmp/1b2a76e7-047c-462b-b4ff-9cf929e7f52d_fixed.java
@@ -1,45 +1,38 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if(hasReferenceName()) {
         return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
-      prettyPrint = false;
-
-      // Use a tree set so that the properties are sorted.
-      Set<String> propertyNames = Sets.newTreeSet();
-      for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
-           current = current.getImplicitPrototype()) {
-        propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
+    Set<String> properties = getOwnPropertyNames();
+
     sb.append("{");
-
     int i = 0;
-      for (String property : propertyNames) {
+    for (String property : properties) {
         if (i > 0) {
             sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+
+        ObjectType propertyType = getPropertyType(property);
+        // If it's the same as the current type (this), use "..." to avoid creating recursive loop.
+        sb.append(propertyType == this ? "..." : propertyType.toStringHelper(forAnnotations));
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        if (forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
+            sb.append(", ...");
+            break;
+        } else if (!forAnnotations && i >= MAX_PRETTY_PRINTED_PROPERTIES) {
+            // Only for toString() method, we break the loop and add "..." at the end.
             sb.append(", ...");
             break;
         }
     }
 
     sb.append("}");
 
-      prettyPrint = true;
     return sb.toString();
-    } else {
-      return "{...}";
-    }
 }
\ No newline at end of file
