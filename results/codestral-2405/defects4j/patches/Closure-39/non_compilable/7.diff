diff --git a/tmp/2ea4f54e-2898-438f-b0e3-c6bc7a76d192_buggy.java b/tmp/0979fbea-c9d4-47d1-ad53-6b66949db03c_fixed.java
index e4d90e7..548e28c 100644
--- a/tmp/2ea4f54e-2898-438f-b0e3-c6bc7a76d192_buggy.java
+++ b/tmp/0979fbea-c9d4-47d1-ad53-6b66949db03c_fixed.java
@@ -1,45 +1,44 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
+    boolean originalPrettyPrint = prettyPrint;
     if (hasReferenceName()) {
         return getReferenceName();
-    } else if (prettyPrint) {
+    } else if (prettyPrint && !reentrantPrettyPrint) {
         // Don't pretty print recursively.
-      prettyPrint = false;
-
+        reentrantPrettyPrint = true;
         // Use a tree set so that the properties are sorted.
-      Set<String> propertyNames = Sets.newTreeSet();
+        Set<String> propertyNames = new TreeSet<>();
         for (ObjectType current = this;
              current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
              current = current.getImplicitPrototype()) {
             propertyNames.addAll(current.getOwnPropertyNames());
         }
 
+        prettyPrint = false;
         StringBuilder sb = new StringBuilder();
         sb.append("{");
-
         int i = 0;
         for (String property : propertyNames) {
             if (i > 0) {
                 sb.append(", ");
             }
-
             sb.append(property);
             sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
+            sb.append(forAnnotations
+                      ? getPropertyType(property).toAnnotationString()
+                      : getPropertyType(property).toString());
             ++i;
             if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
                 sb.append(", ...");
                 break;
             }
         }
-
         sb.append("}");
-
-      prettyPrint = true;
+        reentrantPrettyPrint = false;
+        prettyPrint = originalPrettyPrint;
         return sb.toString();
     } else {
-      return "{...}";
+        return forAnnotations ? "{...}" : "Object";
     }
 }
\ No newline at end of file
