diff --git a/tmp/708fd6b5-b3c8-4845-8954-5c18dbf4ad27_buggy.java b/tmp/2db80750-75e9-49f3-ad2a-969e6e829c21_fixed.java
index e4d90e7..6e0a496 100644
--- a/tmp/708fd6b5-b3c8-4845-8954-5c18dbf4ad27_buggy.java
+++ b/tmp/2db80750-75e9-49f3-ad2a-969e6e829c21_fixed.java
@@ -1,45 +1,61 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
         return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
+    }
+
+    // Create a default representation
+    String defaultRepr = forAnnotations ? "?" : "{}";
+
+    // If we're pretty printing and not recursively
+    if (prettyPrint) {
         prettyPrint = false;
 
-      // Use a tree set so that the properties are sorted.
+        // Get property names in a sorted set
         Set<String> propertyNames = Sets.newTreeSet();
+        Set<ObjectType> visited = new HashSet<>();
         for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+             current != null && !current.isNativeObjectType() && !visited.contains(current);
              current = current.getImplicitPrototype()) {
+            visited.add(current);
             propertyNames.addAll(current.getOwnPropertyNames());
+            if (propertyNames.size() >= MAX_PRETTY_PRINTED_PROPERTIES) {
+                break;
+            }
         }
 
+        // Build the string representation
         StringBuilder sb = new StringBuilder();
         sb.append("{");
 
         int i = 0;
         for (String property : propertyNames) {
             if (i > 0) {
                 sb.append(", ");
             }
 
             sb.append(property);
             sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+
+            JSType propertyType = getPropertyType(property);
+            if (propertyType.equals(this)) {
+                sb.append(defaultRepr);
+            } else {
+                sb.append(propertyType.toStringHelper(forAnnotations));
+            }
 
             ++i;
             if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
                 sb.append(", ...");
                 break;
             }
         }
 
         sb.append("}");
 
         prettyPrint = true;
         return sb.toString();
     } else {
-      return "{...}";
+        return defaultRepr;
     }
 }
\ No newline at end of file
