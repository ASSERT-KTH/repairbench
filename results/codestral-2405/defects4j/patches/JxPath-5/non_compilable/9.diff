diff --git a/tmp/aa078f7b-246f-468a-97af-684e7d3a0259_buggy.java b/tmp/6eb9d2ef-c7fb-41cb-9d12-9f6f355563de_fixed.java
index 5f8ac1a..ffd0eff 100644
--- a/tmp/aa078f7b-246f-468a-97af-684e7d3a0259_buggy.java
+++ b/tmp/6eb9d2ef-c7fb-41cb-9d12-9f6f355563de_fixed.java
@@ -1,34 +1,43 @@
     private int compareNodePointers(
-        NodePointer p1,
+        Object p1,
         int depth1,
-        NodePointer p2,
+        Object p2,
         int depth2)
     {
+        if (p1 instanceof JXPathVariable || p2 instanceof JXPathVariable) {
+            // Comparing a variable with a NodePointer is not supported.
+            // Variables are not ordered, so we return a special value to indicate this.
+            return Integer.MAX_VALUE;
+        }
+
+        NodePointer nodePointer1 = (NodePointer) p1;
+        NodePointer nodePointer2 = (NodePointer) p2;
+
         if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+            int r = compareNodePointers(nodePointer1, depth1, nodePointer2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+            int r = compareNodePointers(nodePointer1.parent, depth1 - 1, nodePointer2, depth2);
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
+        if (nodePointer1 == null && nodePointer2 == null) {
             return 0;
         }
 
-        if (p1 != null && p1.equals(p2)) {
+        if (nodePointer1 != null && nodePointer1.equals(nodePointer2)) {
             return 0;
         }
 
         if (depth1 == 1) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+                            + nodePointer1 + "' and '" + nodePointer2 + "'");
         }
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+        int r = compareNodePointers(nodePointer1.parent, depth1 - 1, nodePointer2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
-        return p1.parent.compareChildNodePointers(p1, p2);
+        return nodePointer1.parent.compareChildNodePointers(nodePointer1, nodePointer2);
     }
\ No newline at end of file
