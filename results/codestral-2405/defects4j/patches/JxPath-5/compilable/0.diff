diff --git a/tmp/357eacd8-c996-4cef-88c6-e04e45b06d7e_buggy.java b/tmp/a46269c8-4604-46d9-ab67-1e9aa4085cd9_fixed.java
index 5f8ac1a..51cba82 100644
--- a/tmp/357eacd8-c996-4cef-88c6-e04e45b06d7e_buggy.java
+++ b/tmp/a46269c8-4604-46d9-ab67-1e9aa4085cd9_fixed.java
@@ -1,34 +1,46 @@
 private int compareNodePointers(
-        NodePointer p1,
+    Object p1,
     int depth1,
-        NodePointer p2,
+    Object p2,
     int depth2)
 {
+    // check if either p1 or p2 is a variable
+    if (!(p1 instanceof NodePointer) || !(p2 instanceof NodePointer)) {
+        throw new JXPathException(
+                "Cannot compare pointers of different types: "
+                        + p1.getClass().getName() + " and "
+                        + p2.getClass().getName()
+                        + ". This could happen when comparing a variable with a node.");
+    }
+
+    NodePointer np1 = (NodePointer) p1;
+    NodePointer np2 = (NodePointer) p2;
+
     if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
+        int r = compareNodePointers(np1, depth1, np2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
+        int r = compareNodePointers(np1.parent, depth1 - 1, np2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
+    if (np1 == null && np2 == null) {
         return 0;
     }
 
-        if (p1 != null && p1.equals(p2)) {
+    if (np1 != null && np1.equals(np2)) {
         return 0;
     }
 
     if (depth1 == 1) {
         throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+                        + np1 + "' and '" + np2 + "'");
     }
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
+    int r = compareNodePointers(np1.parent, depth1 - 1, np2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
-        return p1.parent.compareChildNodePointers(p1, p2);
+    return np1.parent.compareChildNodePointers(np1, np2);
 }
\ No newline at end of file
