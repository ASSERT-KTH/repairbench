diff --git a/tmp/5ffca374-9d69-4fe9-b632-d72bb0f927a4_buggy.java b/tmp/70d037b7-aa7f-4f84-875e-93f6f0b47d6d_fixed.java
index 5f8ac1a..3386e6f 100644
--- a/tmp/5ffca374-9d69-4fe9-b632-d72bb0f927a4_buggy.java
+++ b/tmp/70d037b7-aa7f-4f84-875e-93f6f0b47d6d_fixed.java
@@ -1,34 +1,40 @@
 private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2)
 {
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    else if (p1 instanceof VariablePointer || p2 instanceof VariablePointer) {
+        return -2; // Special value to indicate that the pointers are not comparable in the same tree
+    }
+
+    if (p1 != null && p2 != null && p1.equals(p2)) {
+        return 0;
+    }
+
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
-            return r == 0 ? -1 : r;
+        return r;
     }
-        if (depth1 > depth2) {
+    else if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
-            return r == 0 ? 1 : r;
+        return r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
-
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
-        }
-
+    else {
         if (depth1 == 1) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
-
+        else {
             return p1.parent.compareChildNodePointers(p1, p2);
         }
+    }
+}
\ No newline at end of file
