diff --git a/tmp/783297df-9272-42c0-aa3a-5cb7e5d8713d_buggy.java b/tmp/b53e90ff-2c12-47b4-b50a-96c00ffb669b_fixed.java
index 5f8ac1a..434a96c 100644
--- a/tmp/783297df-9272-42c0-aa3a-5cb7e5d8713d_buggy.java
+++ b/tmp/b53e90ff-2c12-47b4-b50a-96c00ffb669b_fixed.java
@@ -1,34 +1,30 @@
-    private int compareNodePointers(
-        NodePointer p1,
-        int depth1,
-        NodePointer p2,
-        int depth2) 
-    {
+private int compareNodePointers(NodePointer p1, int depth1, NodePointer p2, int depth2) {
+    if (p2 == null) { // this condition is not present in the original code
+        return p1 == null ? 0 : -1; // variable comes later when comparing to null
+    }
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
-
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
-
     if (depth1 == 1) {
         throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                         + p1 + "' and '" + p2 + "'");
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
