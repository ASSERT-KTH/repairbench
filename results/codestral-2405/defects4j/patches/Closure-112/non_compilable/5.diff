diff --git a/tmp/b2982738-5632-4f87-bf1e-f750b144e1a9_buggy.java b/tmp/56daf6aa-bbcf-402d-80be-2ddaab04ec1d_fixed.java
index 63641d0..31074c9 100644
--- a/tmp/b2982738-5632-4f87-bf1e-f750b144e1a9_buggy.java
+++ b/tmp/56daf6aa-bbcf-402d-80be-2ddaab04ec1d_fixed.java
@@ -1,33 +1,31 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+    FunctionType newFnType = fnType;
+    for (TemplateType key : keys) {
+      JSType inferredType = inferred.get(key);
+      if (inferredType != null) {
+        newFnType = newFnType.replaceTemplateType(key, inferredType);
+      }
+    }
 
-    callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+    callTarget.setJSType(newFnType);
+    n.setJSType(newFnType.getReturnType());
 
-    return replacer.madeChanges;
+    return !fnType.equals(newFnType);
   }
