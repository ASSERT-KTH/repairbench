diff --git a/tmp/74d11c3b-de40-4546-b924-07c3a6d45b26_buggy.java b/tmp/bd57f7f5-7efb-4d1b-a12a-1bfbed5ae417_fixed.java
index 63641d0..90bd716 100644
--- a/tmp/74d11c3b-de40-4546-b924-07c3a6d45b26_buggy.java
+++ b/tmp/bd57f7f5-7efb-4d1b-a12a-1bfbed5ae417_fixed.java
@@ -1,33 +1,38 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();
+
     if (keys.isEmpty()) {
         return false;
     }
 
     // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+    Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+    // Replace all template types. If we couldn't find a replacement, we replace it with UNKNOWN.
+    TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
     Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+    if (callTarget.getType() == Token.THIS) {
+        // If the call target is "this", it means the function call is a method call.
+        // We need to handle the possible template type on "this" separately.
+        Node parent = n.getParent();
+        JSType thisType = parent.getJSType();
+        thisType = thisType.visit(replacer);
+        parent.setJSType(thisType);
+
+        // Update fnType to ensure we're using the correct "this" type for further processing
+        fnType = thisType.toMaybeFunctionType();
+        if (fnType == null) {
+            // If thisType isn't a function type, we can't proceed
+            return replacer.madeChanges;
+        }
+    }
+
+    FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
 }
\ No newline at end of file
