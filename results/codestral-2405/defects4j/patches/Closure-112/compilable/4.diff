diff --git a/tmp/7a30e519-74f7-47de-b056-cf450033124d_buggy.java b/tmp/ee127517-b929-48ba-b0f1-b7f3841896e0_fixed.java
index 63641d0..802ce58 100644
--- a/tmp/7a30e519-74f7-47de-b056-cf450033124d_buggy.java
+++ b/tmp/ee127517-b929-48ba-b0f1-b7f3841896e0_fixed.java
@@ -1,33 +1,32 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  // Fix: Handle null return value from visiting function type
+  JSType replacementType = fnType.visit(replacer);
+  if (replacementType == null || !replacementType.isFunctionType()) {
+    return false;
+  }
+
+  FunctionType replacementFnType = replacementType.toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
