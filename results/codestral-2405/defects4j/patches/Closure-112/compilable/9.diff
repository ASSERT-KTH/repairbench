diff --git a/tmp/c613b9ec-6b21-4846-a777-6a2762c5760b_buggy.java b/tmp/4f523da3-84ce-46bb-b480-16c06101e204_fixed.java
index 63641d0..64c21cf 100644
--- a/tmp/c613b9ec-6b21-4846-a777-6a2762c5760b_buggy.java
+++ b/tmp/4f523da3-84ce-46bb-b480-16c06101e204_fixed.java
@@ -1,33 +1,40 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    if (inferred == null) {
+      return false;
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // return false.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+    JSType replacementJSType = fnType.visit(replacer);
+
+    if (!(replacementJSType instanceof FunctionType)) {
+      return false;
+    }
+
+    FunctionType replacementFnType = (FunctionType) replacementJSType;
+
+    // Validate if the replacementFnType corresponds to the function call node's child
+    if (!replacementFnType.isSubtype(callTarget.getJSType().toMaybeFunctionType())) {
+      return false;
+    }
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
 }
\ No newline at end of file
