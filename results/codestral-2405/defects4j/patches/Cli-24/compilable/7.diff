diff --git a/tmp/64b40e63-533b-4d5b-a1c2-7c4253af59ee_buggy.java b/tmp/eacefcf0-36a7-430d-a377-1f60cd02710c_fixed.java
index 229b3e7..90c1f50 100644
--- a/tmp/64b40e63-533b-4d5b-a1c2-7c4253af59ee_buggy.java
+++ b/tmp/eacefcf0-36a7-430d-a377-1f60cd02710c_fixed.java
@@ -1,55 +1,38 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
+    int leftPad = nextLineTabStop;
+    int nextLineWidth = width - leftPad;
+
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
+    if (nextLineWidth <= 0)
     {
         // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        throw new IllegalStateException("Total width is less than the width of the argument and indent - no room for the description");
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+    // all following lines must be padded with nextLineTabStop space characters
+    final String padding = createPadding(leftPad);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, nextLineWidth, leftPad);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
