diff --git a/tmp/34eb6ee0-9125-4c48-a05c-98561e20d227_buggy.java b/tmp/e75ee066-6b13-4104-b0b7-a394aad93eac_fixed.java
index 229b3e7..5bcf640 100644
--- a/tmp/34eb6ee0-9125-4c48-a05c-98561e20d227_buggy.java
+++ b/tmp/e75ee066-6b13-4104-b0b7-a394aad93eac_fixed.java
@@ -1,55 +1,41 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
+
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
+    if (nextLineTabStop >= width - nextLineTabStop)
     {
         // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        throw new IllegalStateException("Total width is less than the width of the argument and indent - no room for the description");
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // All following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
+    int availableWidth = width - nextLineTabStop;
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, availableWidth, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        if ((text.length() > availableWidth) && (pos == availableWidth - 1))
         {
-                pos = width;
+            pos = availableWidth;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
