diff --git a/tmp/afee9ddc-2821-4f68-830c-1d8c9dd3759c_buggy.java b/tmp/53c0600f-e5a6-48e0-a56f-e6d184f17cb0_fixed.java
index 229b3e7..ac391d2 100644
--- a/tmp/afee9ddc-2821-4f68-830c-1d8c9dd3759c_buggy.java
+++ b/tmp/53c0600f-e5a6-48e0-a56f-e6d184f17cb0_fixed.java
@@ -1,55 +1,39 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
+
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        throw new IllegalStateException("Total width is less than the width of the argument and indent - no room for the description");
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text.substring(nextLineTabStop), width - nextLineTabStop, 0); // Change here
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
         if ((text.length() > width) && (pos == nextLineTabStop - 1))
         {
-                pos = width;
+            pos = width - nextLineTabStop; // Change here
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(text.substring(0, nextLineTabStop + pos))).append(defaultNewLine); // Change here
+        pos += nextLineTabStop; // Change here
     }
 }
\ No newline at end of file
