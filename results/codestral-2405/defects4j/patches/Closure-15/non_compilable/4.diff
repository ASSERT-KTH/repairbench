diff --git a/tmp/c846079b-8af8-414c-be9c-e28406aeaa79_buggy.java b/tmp/ffffa445-1146-41cd-90c1-7a880c765978_fixed.java
index b56897c..e8d355d 100644
--- a/tmp/c846079b-8af8-414c-be9c-e28406aeaa79_buggy.java
+++ b/tmp/ffffa445-1146-41cd-90c1-7a880c765978_fixed.java
@@ -1,27 +1,26 @@
 @Override
 public boolean apply(Node n) {
     // When the node is null it means, we reached the implicit return
     // where the function returns (possibly without an return statement)
     if (n == null) {
         return false;
     }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+    // We care about calls to functions that pass one of the dependent variables
+    // to a non-side-effect free function. We also need to consider 'in' operator
+    if ((n.isCall() && NodeUtil.functionCallHasSideEffects(n))
+            || (n.isIn() && NodeUtil.hasSideEffects(n))) {
         return true;
     }
 
     if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
 
-
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
