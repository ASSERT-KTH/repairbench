diff --git a/tmp/5f4c85e4-3db3-414b-a138-b2d5f57fc2a5_buggy.java b/tmp/4324617f-60f9-4333-81b8-7c0bffd19cfa_fixed.java
index ae1bc64..d7e5bfc 100644
--- a/tmp/5f4c85e4-3db3-414b-a138-b2d5f57fc2a5_buggy.java
+++ b/tmp/4324617f-60f9-4333-81b8-7c0bffd19cfa_fixed.java
@@ -1,42 +1,48 @@
 /**
  * <p>
  * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.
  * </p>
  *
  * <p>
  * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.
  * The comparison is case sensitive.
  * </p>
  *
  * <pre>
  * StringUtils.equals(null, null)   = true
  * StringUtils.equals(null, "abc")  = false
  * StringUtils.equals("abc", null)  = false
  * StringUtils.equals("abc", "abc") = true
  * StringUtils.equals("abc", "ABC") = false
  * </pre>
  *
  * <p>
  * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).
  * </p>
  *
  * @see Object#equals(Object)
  * @param cs1
  *            the first CharSequence, may be <code>null</code>
  * @param cs2
  *            the second CharSequence, may be <code>null</code>
  * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>
  * @since 1.10
  */
 public static boolean equals(final CharSequence cs1, final CharSequence cs2) {
     if (cs1 == cs2) {
         return true;
     }
     if (cs1 == null || cs2 == null) {
         return false;
     }
     if (cs1 instanceof String && cs2 instanceof String) {
         return cs1.equals(cs2);
     }
-        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
+    int length = Math.min(cs1.length(), cs2.length());
+    for (int i = 0; i < length; i++) {
+        if (cs1.charAt(i) != cs2.charAt(i)) {
+            return false;
+        }
+    }
+    return cs1.length() == cs2.length();
 }
\ No newline at end of file
