diff --git a/tmp/4352958c-cedc-49f4-a261-e239a9298340_buggy.java b/tmp/9cf12228-2ed5-426a-a798-6769bfe71975_fixed.java
index 0eef537..5b58278 100644
--- a/tmp/4352958c-cedc-49f4-a261-e239a9298340_buggy.java
+++ b/tmp/9cf12228-2ed5-426a-a798-6769bfe71975_fixed.java
@@ -1,74 +1,59 @@
-    /**
-     * Calculates the Cholesky decomposition of the given matrix.
-     * @param matrix the matrix to decompose
-     * @param relativeSymmetryThreshold threshold above which off-diagonal
-     * elements are considered too different and matrix not symmetric
-     * @param absolutePositivityThreshold threshold below which diagonal
-     * elements are considered null and matrix not positive definite
-     * @exception NonSquareMatrixException if matrix is not square
-     * @exception NotSymmetricMatrixException if matrix is not symmetric
-     * @exception NotPositiveDefiniteMatrixException if the matrix is not
-     * strictly positive definite
-     * @see #CholeskyDecompositionImpl(RealMatrix)
-     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
-     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
-     */
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                  final double relativeSymmetryThreshold,
                                  final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                            matrix.getColumnDimension());
     }
 
     final int order = matrix.getRowDimension();
     lTData = matrix.getData();
     cachedL = null;
     cachedLT = null;
 
     // check the matrix before transformation
     for (int i = 0; i < order; ++i) {
 
         final double[] lI = lTData[i];
 
+        // check diagonal element first
+        // to avoid throwing both NotSymmetricMatrixException and NotPositiveDefiniteMatrixException
         if (lTData[i][i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
+
         // check off-diagonal elements (and reset them to 0)
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
             final double lJI = lJ[i];
             final double maxDelta =
                 relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
             lJ[i] = 0;
         }
     }
 
     // transform the matrix
     for (int i = 0; i < order; ++i) {
 
         final double[] ltI = lTData[i];
-
-            // check diagonal element
-
         ltI[i] = Math.sqrt(ltI[i]);
         final double inverse = 1.0 / ltI[i];
 
         for (int q = order - 1; q > i; --q) {
             ltI[q] *= inverse;
             final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
+            for (int p = q; p >= i; --p) { // updated to start from i instead of q to avoid negative arrays
                 ltQ[p] -= ltI[q] * ltI[p];
             }
         }
 
     }
 
 }
\ No newline at end of file
