diff --git a/tmp/e1145e06-c846-49f4-aefb-32f577f63a82_buggy.java b/tmp/d57c355b-2532-40cf-b463-831a83292cda_fixed.java
index 19fd63e..4566385 100644
--- a/tmp/e1145e06-c846-49f4-aefb-32f577f63a82_buggy.java
+++ b/tmp/d57c355b-2532-40cf-b463-831a83292cda_fixed.java
@@ -1,24 +1,15 @@
-  /**
-   * @return Whether the node is a block with a single statement that is
-   *     an expression.
-   */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
     Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+    if (NodeUtil.isExpressionStatement(maybeExpr)
+        && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())
+        && !checkForThisReference(maybeExpr)) {
+      return true;
     }
   }
-
   return false;
 }
+
+private boolean checkForThisReference(Node n) {
+  return n.hasDescendant(t -> t.isThis());
+}
\ No newline at end of file
