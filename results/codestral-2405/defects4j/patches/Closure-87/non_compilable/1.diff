diff --git a/tmp/2b3a9dea-e66e-421a-bada-ee09dfc83b86_buggy.java b/tmp/a450d4c9-0783-423e-a825-9072bb99a640_fixed.java
index 19fd63e..b04f909 100644
--- a/tmp/2b3a9dea-e66e-421a-bada-ee09dfc83b86_buggy.java
+++ b/tmp/a450d4c9-0783-423e-a825-9072bb99a640_fixed.java
@@ -1,24 +1,34 @@
-  /**
-   * @return Whether the node is a block with a single statement that is
-   *     an expression.
-   */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
+      if (NodeUtil.isExpressionNode(maybeExpr)) {
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
+        // We try to detect this case, but it's actually
+        // not necessary to skip folding EXPR_RESULT into other expressions
+        // because if there's only one statement in the block, EXPR_RESULT
+        // should be handled normally.
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        return true;
+      } else if (maybeExpr.getType() == Token.EXPR_RESULT) {
+        // Check if this is a function call
+        Node fnCall = maybeExpr.getFirstChild();
+        if (fnCall != null &&
+            fnCall.getType() == Token.CALL &&
+            fnCall.getFirstChild().getType() == Token.GETPROP &&
+            NodeUtil.getStringValue(fnCall.getFirstChild().getSecondChild()) != null) {
+          // This is a function call, so check if the function returns SteamObject
+          Node fnName = fnCall.getFirstChild().getFirstChild();
+          if (NodeUtil.doesNodeDefineSteamObject(fnName, maybeExpr.getStaticSourceFile())) {
+            return true;
+          }
+        }
+      }
     }
   }
 
   return false;
 }
\ No newline at end of file
