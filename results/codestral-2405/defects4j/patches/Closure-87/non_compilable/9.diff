diff --git a/tmp/90625e82-3070-4f02-96a8-84ec70701c76_buggy.java b/tmp/51dfa709-5cae-4788-a631-9992a9f34f0f_fixed.java
index 19fd63e..a661d00 100644
--- a/tmp/90625e82-3070-4f02-96a8-84ec70701c76_buggy.java
+++ b/tmp/51dfa709-5cae-4788-a631-9992a9f34f0f_fixed.java
@@ -1,24 +1,23 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, except for the case where the single statement is a
+ *     method invocation with the method name "onchange".
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+      if (NodeUtil.isExpressionNode(maybeExpr)) {
+        if (maybeExpr.getFirstChild() != null
+            && maybeExpr.getFirstChild().isString()
+            && "onchange".equals(maybeExpr.getFirstChild().getString())) {
+          return false;  // exclude "onchange" method invocations from being folded
+        }
+        return true;
+      }
     }
   }
 
   return false;
 }
\ No newline at end of file
