diff --git a/tmp/ff60ac79-bde4-4f50-8a1b-01a814c692fc_buggy.java b/tmp/c6783e5e-8b03-4aec-b988-4ae938096a9d_fixed.java
index fa42cd9..379a39d 100644
--- a/tmp/ff60ac79-bde4-4f50-8a1b-01a814c692fc_buggy.java
+++ b/tmp/c6783e5e-8b03-4aec-b988-4ae938096a9d_fixed.java
@@ -1,27 +1,32 @@
 /**
  * Declares a refined type in {@code scope} for the name represented by
  * {@code node}. It must be possible to refine the type of the given node in
  * the given scope, as determined by {@link #getTypeIfRefinable}.
  */
 protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
+  // Check for "this" node type first
+  if (node.getType() == Token.THIS) {  // Assuming Token.THIS is the correct type for "this"
+    Node thisNode = getThisNode();  // Assuming such a method exists
+    scope.inferQualifiedSlot(thisNode, "this", THIS_TYPE, type);
+  } else {
     switch (node.getType()) {
       case Token.NAME:
         scope.inferSlotType(node.getString(), type);
         break;
 
       case Token.GETPROP:
         String qualifiedName = node.getQualifiedName();
         Preconditions.checkNotNull(qualifiedName);
 
         JSType origType = node.getJSType();
         origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
         scope.inferQualifiedSlot(node, qualifiedName, origType, type);
         break;
 
-        // "this" references aren't currently modeled in the CFG.
-
       default:
+        // Throw the exception outside the switch for all other Node types
         throw new IllegalArgumentException("Node cannot be refined. \n" +
             node.toStringTree());
     }
   }
+}
\ No newline at end of file
