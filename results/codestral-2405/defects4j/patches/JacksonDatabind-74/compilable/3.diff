diff --git a/tmp/14cefdea-069d-4407-938a-3618a368810b_buggy.java b/tmp/67f623e9-e3de-4e3b-b611-b4c6d545ef62_fixed.java
index 658036e..4ae88a7 100644
--- a/tmp/14cefdea-069d-4407-938a-3618a368810b_buggy.java
+++ b/tmp/67f623e9-e3de-4e3b-b611-b4c6d545ef62_fixed.java
@@ -1,29 +1,39 @@
-    // off-lined to keep main method lean and mean...
-    @SuppressWarnings("resource")
 protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
         TokenBuffer tb) throws IOException
 {
-        // As per [JACKSON-614], may have default implementation to use
+    if (p.getCurrentToken() == JsonToken.START_OBJECT && p.nextToken() == JsonToken.FIELD_NAME) {
+        String fieldName = p.getCurrentName();
+        if (_typePropertyName.equals(fieldName)) {
+            p.nextToken();
+            if (p.currentToken() == JsonToken.VALUE_STRING) {
+                String typeId = p.getText();
+                if (typeId.isEmpty() && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                    return null;
+                }
+            }
+        }
+    }
+
     JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
     if (deser != null) {
         if (tb != null) {
             tb.writeEndObject();
             p = tb.asParser(p);
-                // must move to point to the first token:
             p.nextToken();
         }
         return deser.deserialize(p, ctxt);
     }
-        // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
+
     Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
     if (result != null) {
         return result;
     }
-        // or, something for which "as-property" won't work, changed into "wrapper-array" type:
+
     if (p.getCurrentToken() == JsonToken.START_ARRAY) {
         return super.deserializeTypedFromAny(p, ctxt);
     }
+
     ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
             "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
     return null;
 }
\ No newline at end of file
