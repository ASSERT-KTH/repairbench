diff --git a/tmp/72412f0a-1e16-4f44-b2f8-133650465a16_buggy.java b/tmp/5d9c2676-3dc2-411d-a2a8-1f30f6a3d85c_fixed.java
index 658036e..7f91bac 100644
--- a/tmp/72412f0a-1e16-4f44-b2f8-133650465a16_buggy.java
+++ b/tmp/5d9c2676-3dc2-411d-a2a8-1f30f6a3d85c_fixed.java
@@ -1,29 +1,33 @@
-    // off-lined to keep main method lean and mean...
-    @SuppressWarnings("resource")
 protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
         TokenBuffer tb) throws IOException
 {
-        // As per [JACKSON-614], may have default implementation to use
     JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
     if (deser != null) {
         if (tb != null) {
             tb.writeEndObject();
             p = tb.asParser(p);
-                // must move to point to the first token:
             p.nextToken();
         }
         return deser.deserialize(p, ctxt);
     }
-        // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
+
     Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
     if (result != null) {
         return result;
     }
-        // or, something for which "as-property" won't work, changed into "wrapper-array" type:
+
+    // additional handling for the case when the current token is not a natural value
+    if (p.getCurrentToken() == JsonToken.FIELD_NAME && p.getCurrentName().equals("value")) {
+        p.nextToken(); // move to the value token
+        deser = ctxt.findRootValueDeserializer(ctxt.constructType(Object.class));
+        return deser.deserialize(p, ctxt);
+    }
+
     if (p.getCurrentToken() == JsonToken.START_ARRAY) {
         return super.deserializeTypedFromAny(p, ctxt);
     }
+
     ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
             "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
     return null;
 }
\ No newline at end of file
