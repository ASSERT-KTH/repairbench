diff --git a/tmp/bcac5198-1a55-4064-a2a4-799db7d06f11_buggy.java b/tmp/536228e6-ad98-4d04-9937-3dadc587c30b_fixed.java
index 658036e..c388dd0 100644
--- a/tmp/bcac5198-1a55-4064-a2a4-799db7d06f11_buggy.java
+++ b/tmp/536228e6-ad98-4d04-9937-3dadc587c30b_fixed.java
@@ -1,29 +1,52 @@
-    // off-lined to keep main method lean and mean...
-    @SuppressWarnings("resource")
-    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
-            TokenBuffer tb) throws IOException
+protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt, TokenBuffer tb) throws IOException
 {
-        // As per [JACKSON-614], may have default implementation to use
+    if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+        // Look ahead to check for the "type" property
+        String fieldName = p.nextFieldName();
+        if ("type".equals(fieldName)) {
+            p.nextToken(); // Move the parser to the value of the "type" property
             JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
             if (deser != null) {
                 if (tb != null) {
                     tb.writeEndObject();
                     p = tb.asParser(p);
-                // must move to point to the first token:
+                    // Must move to point to the first token:
                     p.nextToken();
                 }
                 return deser.deserialize(p, ctxt);
             }
-        // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
+            // If "type" property exists but we don't have a deserializer, throw an exception
+            ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
+                    "Unexpected value for 'type' property, expected a value that can be deserialized by a default implementation of class " + baseTypeName());
+        }
+        // If "type" property does not exist, treat it as a "natural" value (boolean/int/double/String) or use the default implementation
+        p.nextToken(); // Move the parser to the value of the "value" property
+    }
+
     Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
     if (result != null) {
         return result;
     }
-        // or, something for which "as-property" won't work, changed into "wrapper-array" type:
-        if (p.getCurrentToken() == JsonToken.START_ARRAY) {
-            return super.deserializeTypedFromAny(p, ctxt);
+
+    // Empty string handling as per ACCEPT_EMPTY_STRING_AS_NULL_OBJECT feature
+    if (p.getCurrentToken() == JsonToken.VALUE_STRING && p.getText().isEmpty()) {
+        return null;
     }
+
+    // For other cases, try to use the default implementation
+    JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
+    if (deser != null) {
+        if (tb != null) {
+            tb.writeEndObject();
+            p = tb.asParser(p);
+            // Must move to point to the first token:
+            p.nextToken();
+        }
+        return deser.deserialize(p, ctxt);
+    }
+
+    // If no default implementation is found, throw an exception
     ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
             "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
     return null;
 }
\ No newline at end of file
