diff --git a/tmp/1d36dba3-1466-4a28-90b4-da2adf6d8111_buggy.java b/tmp/2db8c6c4-da27-4873-aecd-2454d8564a0a_fixed.java
index 658036e..663f10f 100644
--- a/tmp/1d36dba3-1466-4a28-90b4-da2adf6d8111_buggy.java
+++ b/tmp/2db8c6c4-da27-4873-aecd-2454d8564a0a_fixed.java
@@ -1,29 +1,51 @@
-    // off-lined to keep main method lean and mean...
-    @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
-        // As per [JACKSON-614], may have default implementation to use
+        JsonToken currToken = p.getCurrentToken();
+
+        // If the current token is FIELD_NAME, try to find a default deserializer
+        if (currToken == JsonToken.FIELD_NAME && p.getCurrentName().equals(_typePropertyName)) {
+            p.nextToken();
+            if (p.getCurrentToken() == JsonToken.VALUE_STRING
+                    && p.getText().isEmpty()
+                    && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                return null;
+            }
+            p.nextToken(); // Move to the next token for deserialization
+        }
+
+        // If the current token is VALUE_STRING, try to handle it as a null case if it's empty
+        if (currToken == JsonToken.VALUE_STRING && p.getText().isEmpty()
+                && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+            return null;
+        }
+
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
-                // must move to point to the first token:
+                // Must move to the point to the first token:
+                // But only if starting from the middle of the TokenBuffer, not from the initial JsonParser
+                if (currToken != JsonToken.START_OBJECT) {
                     p.nextToken();
                 }
+            }
             return deser.deserialize(p, ctxt);
         }
-        // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
+
+        // Or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
-        // or, something for which "as-property" won't work, changed into "wrapper-array" type:
+
+        // Or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
+
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
\ No newline at end of file
