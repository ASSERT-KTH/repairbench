diff --git a/tmp/fa7302e5-9cc1-4484-ae3a-8f79ee664700_buggy.java b/tmp/a08bbcbe-9088-46dc-b200-b8f37a51e6a9_fixed.java
index 658036e..4ab7abd 100644
--- a/tmp/fa7302e5-9cc1-4484-ae3a-8f79ee664700_buggy.java
+++ b/tmp/a08bbcbe-9088-46dc-b200-b8f37a51e6a9_fixed.java
@@ -1,29 +1,27 @@
-    // off-lined to keep main method lean and mean...
-    @SuppressWarnings("resource")
 protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
         TokenBuffer tb) throws IOException
 {
-        // As per [JACKSON-614], may have default implementation to use
+    if (p.currentToken() == JsonToken.START_OBJECT) {
+        p.nextToken();
+        if (p.currentToken() == JsonToken.FIELD_NAME && p.getCurrentName().equals("value")) {
+            p.nextToken();
+            if (p.currentToken() == JsonToken.VALUE_STRING && p.getText().isEmpty()) {
+                return new AsPropertyWrapper(null);
+            }
+        }
+    }
+    // trying to find the default implementation deserializer
     JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
     if (deser != null) {
         if (tb != null) {
             tb.writeEndObject();
             p = tb.asParser(p);
-                // must move to point to the first token:
+            // move to point to the first token:
             p.nextToken();
         }
         return deser.deserialize(p, ctxt);
     }
-        // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
-        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
-        if (result != null) {
-            return result;
-        }
-        // or, something for which "as-property" won't work, changed into "wrapper-array" type:
-        if (p.getCurrentToken() == JsonToken.START_ARRAY) {
-            return super.deserializeTypedFromAny(p, ctxt);
-        }
     ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
-                "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
+            "missing property 'value' that is to contain the value (for class "+baseTypeName()+")");
     return null;
 }
\ No newline at end of file
