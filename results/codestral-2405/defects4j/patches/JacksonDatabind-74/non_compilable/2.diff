diff --git a/tmp/886e39d4-bb17-4434-8ed7-005a3878a700_buggy.java b/tmp/766037c2-0841-417e-8b55-697fffd14109_fixed.java
index 658036e..2d613e1 100644
--- a/tmp/886e39d4-bb17-4434-8ed7-005a3878a700_buggy.java
+++ b/tmp/766037c2-0841-417e-8b55-697fffd14109_fixed.java
@@ -1,29 +1,48 @@
-    // off-lined to keep main method lean and mean...
-    @SuppressWarnings("resource")
 protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
         TokenBuffer tb) throws IOException
 {
-        // As per [JACKSON-614], may have default implementation to use
-        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
+    // First, try to find the 'type' field to determine the type of object to deserialize.
+    String typePropertyName = _typePropertyName(ctxt.getConfig());
+    if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+        String typeStr = null;
+        while (p.nextToken() != JsonToken.END_OBJECT) {
+            String fieldName = p.getCurrentName();
+            p.nextToken();
+            if (typePropertyName.equals(fieldName)) {
+                typeStr = p.getText();
+                break;
+            }
+        }
+        // If 'type' is present, handle it as before.
+        if (typeStr != null) {
+            JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt, typeStr);
             if (deser != null) {
                 if (tb != null) {
                     tb.writeEndObject();
                     p = tb.asParser(p);
-                // must move to point to the first token:
                     p.nextToken();
                 }
                 return deser.deserialize(p, ctxt);
             }
-        // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
+        }
+        // If 'type' is not present, try to deserialize the 'value' field directly.
+        else {
+            while (p.nextToken() != JsonToken.END_OBJECT) {
+                String fieldName = p.getCurrentName();
+                p.nextToken();
+                if ("value".equals(fieldName)) {
                     Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
                     if (result != null) {
                         return result;
                     }
-        // or, something for which "as-property" won't work, changed into "wrapper-array" type:
-        if (p.getCurrentToken() == JsonToken.START_ARRAY) {
+                    else if (p.getCurrentToken() == JsonToken.START_ARRAY) {
                         return super.deserializeTypedFromAny(p, ctxt);
                     }
+                }
+            }
+        }
+    }
     ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
-                "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
+            "missing property 'type' that is to contain type id  (for class "+baseTypeName()+")");
     return null;
 }
\ No newline at end of file
