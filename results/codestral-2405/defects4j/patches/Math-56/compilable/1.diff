diff --git a/tmp/faa0f34c-9868-45a6-97fc-800a6452f4dc_buggy.java b/tmp/c30bd150-2256-48c1-b01d-0d5a8d33afd9_fixed.java
index 2608424..cbc6ef6 100644
--- a/tmp/faa0f34c-9868-45a6-97fc-800a6452f4dc_buggy.java
+++ b/tmp/c30bd150-2256-48c1-b01d-0d5a8d33afd9_fixed.java
@@ -1,39 +1,26 @@
 /**
  * Convert to multidimensional counter.
  *
  * @param index Index in unidimensional counter.
  * @return the multidimensional counts.
  * @throws OutOfRangeException if {@code index} is not between
  * {@code 0} and the value returned by {@link #getSize()} (excluded).
  */
 public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
-            throw new OutOfRangeException(index, 0, totalSize);
+    if (index < 0 || index >= getSize()) {
+        throw new OutOfRangeException(index, 0, getSize());
     }
 
     final int[] indices = new int[dimension];
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
+    int count = index;
+    for (int i = 0; i < dimension; i++) {
+        final int offset = i == 0 ? 1 : uniCounterOffset[i - 1];
+        while (count >= offset) {
+            indices[i]++;
             count -= offset;
-            indices[i] = idx;
         }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
     }
-        --idx;
-        indices[last] = idx;
 
     return indices;
 }
\ No newline at end of file
