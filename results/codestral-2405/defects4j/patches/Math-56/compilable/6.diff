diff --git a/tmp/f0c564b0-88b4-4083-aadc-c97ec981c24c_buggy.java b/tmp/e5f6d6b3-cf0b-46c3-bb40-56165a9931c6_fixed.java
index 2608424..13336c6 100644
--- a/tmp/f0c564b0-88b4-4083-aadc-c97ec981c24c_buggy.java
+++ b/tmp/e5f6d6b3-cf0b-46c3-bb40-56165a9931c6_fixed.java
@@ -1,39 +1,15 @@
-    /**
-     * Convert to multidimensional counter.
-     *
-     * @param index Index in unidimensional counter.
-     * @return the multidimensional counts.
-     * @throws OutOfRangeException if {@code index} is not between
-     * {@code 0} and the value returned by {@link #getSize()} (excluded).
-     */
     public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
+        if (index < 0 || index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
-
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
+        int count = index;
+        for (int i = 0; i < dimension; i++) {
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+            indices[i] = count / offset;
+            count %= offset;
         }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
-        }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
 
         return indices;
     }
\ No newline at end of file
