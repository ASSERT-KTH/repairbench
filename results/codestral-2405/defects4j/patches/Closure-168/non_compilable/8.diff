diff --git a/tmp/0fdc8f29-fd48-4cf5-9ea4-f66561f03d91_buggy.java b/tmp/ee9503fa-d362-4072-966c-8e59db1b8476_fixed.java
index b12de99..a0f6b0f 100644
--- a/tmp/0fdc8f29-fd48-4cf5-9ea4-f66561f03d91_buggy.java
+++ b/tmp/ee9503fa-d362-4072-966c-8e59db1b8476_fixed.java
@@ -1,52 +1,46 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
     if (t.inGlobalScope()) {
         return;
     }
 
     if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
     }
 
     if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
         return;
     }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+    if (n.isName() && NodeUtil.isLValue(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
+
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordAssignedName(name);
             }
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+            if (scope != ownerScope && ownerScope.isLocal() && !NodeUtil.isBleedingFunctionName(n) && n.isFromType(Token.GETPROP)) {
+                // Change here: record escaped vars in the parent scope
+                Scope parentScope = scope.getParent();
+                data.get(parentScope.getRootNode()).recordEscapedVarName(name);
             }
         }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
+    } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
+
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+                // Similar change to the previous block
+                Scope parentScope = scope.getParent();
+                data.get(parentScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName());
             }
         }
     }
 }
\ No newline at end of file
