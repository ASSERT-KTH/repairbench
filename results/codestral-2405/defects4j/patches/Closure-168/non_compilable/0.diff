diff --git a/tmp/65bd7483-4bed-4403-a79b-c5208ff77292_buggy.java b/tmp/7150277e-eb6b-44d8-a7eb-287a54f62d25_fixed.java
index b12de99..e8affaa 100644
--- a/tmp/65bd7483-4bed-4403-a79b-c5208ff77292_buggy.java
+++ b/tmp/7150277e-eb6b-44d8-a7eb-287a54f62d25_fixed.java
@@ -1,52 +1,49 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (t.inGlobalScope()) {
-        return;
-      }
-
-      if (n.isReturn() && n.getFirstChild() != null) {
-        data.get(t.getScopeRoot()).recordNonEmptyReturn();
-      }
-
-      if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
+  if (t.inGlobalScope() || t.getScopeDepth() <= 2) {
+    // Skip global scope or if scope depth is 2 or less as we have handled these scenarios
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
-        String name = n.getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordAssignedName(name);
-          }
-
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
-          }
-        }
+    // Check local variables that are assigned or escaped
+    handleLocalVariables(t, n);
   } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
       NodeUtil.isLValue(n)) {
+    // Check local qualified names that are escaped
+    handleLocalQualifiedNames(t, n);
+  }
+
+  // Check for non-empty return statements
+  if (n.isReturn() && n.getFirstChild() != null) {
+    t.getData().get(t.getScopeRoot()).recordNonEmptyReturn();
+  }
+}
+
+private void handleLocalVariables(NodeTraversal t, Node n) {
+  String name = n.getString();
+  Scope scope = t.getScope();
+  Var var = scope.getVar(name);
+  if (var != null) {
+    Scope ownerScope = var.getScope();
+    if (ownerScope.isLocal()) {
+      t.getData().get(ownerScope.getRootNode()).recordAssignedName(name);
+      if (scope != ownerScope) {
+        t.getData().get(ownerScope.getRootNode()).recordEscapedVarName(name);
+      }
+    }
+  }
+}
+
+private void handleLocalQualifiedNames(NodeTraversal t, Node n) {
   String name = NodeUtil.getRootOfQualifiedName(n).getString();
   Scope scope = t.getScope();
   Var var = scope.getVar(name);
   if (var != null) {
     Scope ownerScope = var.getScope();
     if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
+      t.getData().get(ownerScope.getRootNode())
           .recordEscapedQualifiedName(n.getQualifiedName());
     }
   }
 }
\ No newline at end of file
-    }
