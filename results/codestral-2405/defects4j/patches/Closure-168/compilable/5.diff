diff --git a/tmp/5b5dc3f8-8da1-4f46-b96b-1a6292e77570_buggy.java b/tmp/ca340de3-8e02-456f-b06c-ca910d711f88_fixed.java
index b12de99..ae744af 100644
--- a/tmp/5b5dc3f8-8da1-4f46-b96b-1a6292e77570_buggy.java
+++ b/tmp/ca340de3-8e02-456f-b06c-ca910d711f88_fixed.java
@@ -1,52 +1,39 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
-      if (n.isReturn() && n.getFirstChild() != null) {
+  if (n.isReturn() && n.getFirstChild() != null && t.getScopeDepth() > 2) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
-      if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
-        return;
+  if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {
+    handleNameNode(t, n);
+  } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {
+    handleGetPropNode(t, n);
+  }
 }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+private void handleNameNode(NodeTraversal t, Node n) {
   String name = n.getString();
   Scope scope = t.getScope();
   Var var = scope.getVar(name);
-        if (var != null) {
+  if (var != null && var.getScope().isLocal()) {
     Scope ownerScope = var.getScope();
-          if (ownerScope.isLocal()) {
     data.get(ownerScope.getRootNode()).recordAssignedName(name);
-          }
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
+    if (scope != ownerScope) {
       data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
     }
   }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
+}
+
+private void handleGetPropNode(NodeTraversal t, Node n) {
   String name = NodeUtil.getRootOfQualifiedName(n).getString();
   Scope scope = t.getScope();
   Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
-          }
-        }
+  if (var != null && var.getScope().isLocal() && scope != var.getScope()) {
+    data.get(var.getScope().getRootNode()).recordEscapedQualifiedName(n.getQualifiedName());
   }
 }
\ No newline at end of file
