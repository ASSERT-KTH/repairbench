diff --git a/tmp/26fb77f6-6501-4087-95d5-12509fbbc2c9_buggy.java b/tmp/eb4e2171-2839-4340-bb78-1c4ba2c75c8e_fixed.java
index b12de99..ca72dd3 100644
--- a/tmp/26fb77f6-6501-4087-95d5-12509fbbc2c9_buggy.java
+++ b/tmp/eb4e2171-2839-4340-bb78-1c4ba2c75c8e_fixed.java
@@ -1,52 +1,55 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
+      // If we are in the global scope, ignore Node
       if (t.inGlobalScope()) {
         return;
       }
 
+      // If the Node is a return statement and it has a first child (the returned value)
       if (n.isReturn() && n.getFirstChild() != null) {
+        // Record the fact that a non-empty return statement exists
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
+      // If the scope depth is less than or equal to 2
       if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
+        // We skip analysis for these scopes
         return;
       }
 
+      // If the Node is a name (variable) and it is an l-value (could be assigned to),
+      // and it is not a name of a bleeding function (function that creates variables in inner scope)
       if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
+        // If the variable exists
         if (var != null) {
           Scope ownerScope = var.getScope();
+          // If the variable is local (not global)
           if (ownerScope.isLocal()) {
+            // Record the fact that this name was assigned
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
-
+          // If the variable is accessed from a scope other than its defining scope and it is local
           if (scope != ownerScope && ownerScope.isLocal()) {
+            // Record the fact that this was an escaped variable
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
+      }
+      // If the Node is a property access (getProp) and it is an unscoped qualified name,
+      // and it is an l-value (could be assigned to)
+      else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
                NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
+        // If the variable exists and it is local (not global)
+        if (var != null && var.getScope().isLocal()) {
+          // Record the fact that this was an escaped qualified name
+          data.get(var.getScope().getRootNode())
               .recordEscapedQualifiedName(n.getQualifiedName());
         }
       }
     }
\ No newline at end of file
-    }
