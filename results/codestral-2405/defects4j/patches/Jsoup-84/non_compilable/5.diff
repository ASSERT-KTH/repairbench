diff --git a/tmp/e1a7fbbd-58d3-400d-b69a-8104f6d49b57_buggy.java b/tmp/9c748a46-c50f-4bdd-95d4-707f6f9056f1_fixed.java
index 98dde53..d2620f4 100644
--- a/tmp/e1a7fbbd-58d3-400d-b69a-8104f6d49b57_buggy.java
+++ b/tmp/9c748a46-c50f-4bdd-95d4-707f6f9056f1_fixed.java
@@ -1,34 +1,60 @@
 public void head(org.jsoup.nodes.Node source, int depth) {
     namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack
     if (source instanceof org.jsoup.nodes.Element) {
         org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;
 
-                String prefix = updateNamespaces(sourceEl);
-                String namespace = namespacesStack.peek().get(prefix);
+        String prefix = sourceEl.prefix();
+        String namespace = sourceEl.namespaceURI();
         String tagName = sourceEl.tagName();
 
-                Element el =
-                    doc.createElementNS(namespace, tagName);
+        if (prefix.isEmpty()) {
+            // No prefix, no namespace
+            Element el = doc.createElement(tagName);
             copyAttributes(sourceEl, el);
             if (dest == null) { // sets up the root
                 doc.appendChild(el);
             } else {
                 dest.appendChild(el);
             }
             dest = el; // descend
+        } else {
+            // Prefix found, check if namespace is declared
+            if (!namespacesStack.peek().containsKey(prefix)) {
+                // Namespace is not declared, treat it as local name
+                String nodeName = prefix + ":" + tagName;
+                Element el = doc.createElement(nodeName);
+                copyAttributes(sourceEl, el);
+                if (dest == null) { // sets up the root
+                    doc.appendChild(el);
+                } else {
+                    dest.appendChild(el);
+                }
+                dest = el; // descend
+            } else {
+                // Namespace is declared, use namespace and local name
+                Element el = doc.createElementNS(namespace, tagName);
+                copyAttributes(sourceEl, el);
+                if (dest == null) { // sets up the root
+                    doc.appendChild(el);
+                } else {
+                    dest.appendChild(el);
+                }
+                dest = el; // descend
+            }
+        }
     } else if (source instanceof org.jsoup.nodes.TextNode) {
         org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;
         Text text = doc.createTextNode(sourceText.getWholeText());
         dest.appendChild(text);
     } else if (source instanceof org.jsoup.nodes.Comment) {
         org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;
         Comment comment = doc.createComment(sourceComment.getData());
         dest.appendChild(comment);
     } else if (source instanceof org.jsoup.nodes.DataNode) {
         org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;
         Text node = doc.createTextNode(sourceData.getWholeData());
         dest.appendChild(node);
     } else {
         // unhandled
     }
 }
\ No newline at end of file
