diff --git a/tmp/d3c59c80-597c-4f19-9963-6473416f619b_buggy.java b/tmp/8bbb51ea-f48a-4459-a0e3-91001e8fbeb2_fixed.java
index 9d42346..0fd1cfd 100644
--- a/tmp/d3c59c80-597c-4f19-9963-6473416f619b_buggy.java
+++ b/tmp/8bbb51ea-f48a-4459-a0e3-91001e8fbeb2_fixed.java
@@ -1,37 +1,14 @@
-  private ReflectiveTypeAdapterFactory.BoundField createBoundField(
-      final Gson context, final Field field, final String name,
-      final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
-    final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
-    JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
-    TypeAdapter<?> mapped = null;
-    if (annotation != null) {
-      mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
-    }
-    final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
+import com.google.gson.TypeAdapter;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonWriter;
+import com.google.gson.reflect.TypeToken;
+import java.io.IOException;
+import java.lang.reflect.Field;
 
-    final TypeAdapter<?> typeAdapter = mapped;
-    return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
-      @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
-      @Override void write(JsonWriter writer, Object value)
-          throws IOException, IllegalAccessException {
-        Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
-        t.write(writer, fieldValue);
-      }
-      @Override void read(JsonReader reader, Object value)
-          throws IOException, IllegalAccessException {
+// ...
+
+@Override void read(JsonReader reader, Object value) throws IOException, IllegalAccessException {
   Object fieldValue = typeAdapter.read(reader);
-        if (fieldValue != null || !isPrimitive) {
+  // Remove isPrimitive condition to correctly set primitive values
   field.set(value, fieldValue);
 }
\ No newline at end of file
-      }
-      @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
-        if (!serialized) return false;
-        Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
-      }
-    };
-  }
