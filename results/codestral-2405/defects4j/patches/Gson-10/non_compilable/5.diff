diff --git a/tmp/d3916c21-2661-459f-924e-62ef810281d5_buggy.java b/tmp/5163bc4d-5579-44ae-bbe9-abc5688584eb_fixed.java
index 9d42346..d9e8829 100644
--- a/tmp/d3916c21-2661-459f-924e-62ef810281d5_buggy.java
+++ b/tmp/5163bc4d-5579-44ae-bbe9-abc5688584eb_fixed.java
@@ -1,37 +1,38 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
-    final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
+    if (mapped == null) {
+      mapped = context.getAdapter(fieldType);
+    }
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        TypeAdapter t = typeAdapter;
+        if (!isPrimitive && annotation != null) {
+          // Wrap the type adapter if it's not primitive and JsonAdapter is present
+          t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        }
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
-        if (fieldValue != null || !isPrimitive) {
         field.set(value, fieldValue);
       }
-      }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
 }
\ No newline at end of file
