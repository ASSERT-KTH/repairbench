diff --git a/tmp/ec010f75-bba6-46ad-82a2-3dc5772d022b_buggy.java b/tmp/b74338d5-5e99-4981-9668-57b99f97b3bc_fixed.java
index 9d42346..c12336f 100644
--- a/tmp/ec010f75-bba6-46ad-82a2-3dc5772d022b_buggy.java
+++ b/tmp/b74338d5-5e99-4981-9668-57b99f97b3bc_fixed.java
@@ -1,37 +1,40 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
+    // The bug was here: It didn't validate if jsonAdapterPresent or if the mapped type was PrimitiveTypeAdapter
+    // before overriding it with a TypeAdapterRuntimeTypeWrapper. This causes the test failure.
+    if (jsonAdapterPresent || !(mapped instanceof PrimitiveTypeAdapter)) {
+        mapped = new TypeAdapterRuntimeTypeWrapper(context, mapped, fieldType.getType());
+    }
+
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
-      @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
+      @SuppressWarnings({"unchecked", "rawtypes"})
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
-        t.write(writer, fieldValue);
+        typeAdapter.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
-        if (!serialized) return false;
+        if (!serde) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
