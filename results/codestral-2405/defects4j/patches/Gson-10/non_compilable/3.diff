diff --git a/tmp/0b2775ca-965b-4ee8-bc09-6b9db315bdd4_buggy.java b/tmp/42df339f-6b97-49d2-83c7-4b1a1dfd1ec0_fixed.java
index 9d42346..2d72958 100644
--- a/tmp/0b2775ca-965b-4ee8-bc09-6b9db315bdd4_buggy.java
+++ b/tmp/42df339f-6b97-49d2-83c7-4b1a1dfd1ec0_fixed.java
@@ -1,37 +1,48 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
     final Gson context, final Field field, final String name,
     final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
   final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
   // special casing primitives here saves ~5% on Android...
   JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
   TypeAdapter<?> mapped = null;
   if (annotation != null) {
     mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
   }
   final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
+  if (mapped == null) mapped = context.getAdapter(isPrimitive ? Types.newParameterizedTypeWithOwner(null, fieldType.getRawType(), String.class) : fieldType);
 
   final TypeAdapter<?> typeAdapter = mapped;
   return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
     @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
     @Override void write(JsonWriter writer, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
-        t.write(writer, fieldValue);
+      TypeAdapter t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+      t.write(writer, fieldValue != null ? fieldValue.toString() : null);
     }
     @Override void read(JsonReader reader, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = typeAdapter.read(reader);
-        if (fieldValue != null || !isPrimitive) {
-          field.set(value, fieldValue);
+      if (fieldValue != null) {
+        field.set(value, convertValue(fieldType.getRawType(), fieldValue));
       }
     }
     @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
-        if (!serialized) return false;
+      if (!serialize) return false;
       Object fieldValue = field.get(value);
       return fieldValue != value; // avoid recursion for example for Throwable.cause
     }
+
+    private Object convertValue(Class<?> type, Object value) {
+      if (type == int.class) return Integer.valueOf((String) value);
+      if (type == double.class) return Double.valueOf((String) value);
+      if (type == boolean.class) return Boolean.valueOf((String) value);
+      if (type == char.class) return Character.valueOf(((String) value).charAt(0));
+      if (type == float.class) return Float.valueOf((String) value);
+      if (type == long.class) return Long.valueOf((String) value);
+      if (type == short.class) return Short.valueOf((String) value);
+      if (type == byte.class) return Byte.valueOf((String) value);
+      throw new IllegalArgumentException("Unsupported type: " + type);
+    }
   };
 }
\ No newline at end of file
