diff --git a/tmp/2588d4fc-ac0f-4fca-8f8b-64b6acee0f4d_buggy.java b/tmp/d6ea3918-ecd6-4fb8-a454-f618a616c76a_fixed.java
index 7e64f1d..e306906 100644
--- a/tmp/2588d4fc-ac0f-4fca-8f8b-64b6acee0f4d_buggy.java
+++ b/tmp/d6ea3918-ecd6-4fb8-a454-f618a616c76a_fixed.java
@@ -1,78 +1,120 @@
 /**
  * <p>This flatten method does so using the following rules:
  * <ol>
  *  <li>If an {@link Option} exists for the first character of
  *  the <code>arguments</code> entry <b>AND</b> an {@link Option}
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
+ *  does not exist for the whole <code>argument</code>, then always add the first character as an option
+ *  to the processed tokens list and add the rest of the entry to the list. e.g. "-Dproperty=value".</li>
+ *  <li>If an {@link Option} exists for the whole <code>argument</code>, then just add the whole argument to the
+ *  processed tokens list. e.g. "--foo=bar".</li>
+ *  <li>If an {@link Option} does not exist for both the first character and the whole <code>argument</code>, then
+ *  keep processing arguments further, unless stop processing is enabled by a "--" or non-option argument.</li>
  * </ol>
  * </p>
  *
  * @param options The Options to parse the arguments by.
  * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
+ * @param stopAtNonOption specifies whether to stop flattening when a non option has been encountered
  * @return a String array of the flattened arguments
  */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
-        List tokens = new ArrayList();
+    List<String> tokens = new ArrayList<>();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
+        else if (arg.startsWith("--="))
+        {
+            // special case where a single dash follows - with no option name
+            tokens.add(arg.substring(0, 2));
+            tokens.add(arg.substring(2));
+        }
+        else if (arg.startsWith("--"))
+        {
+            int sepIndex = arg.indexOf('=');
+
+            if(sepIndex != -1) // --foo=bar
+            {
+                if(options.hasLongOption(arg.substring(2, sepIndex)))
+                {
+                    tokens.add(arg);
+                }
+                else
+                {
+                    eatTheRest = stopAtNonOption;
+                    tokens.add(arg);
+                }
+            }
+            else // --foo
+            {
+                if(options.hasLongOption(arg.substring(2)))
+                {
+                    tokens.add(arg);
+                }
+                else
+                {
+                    eatTheRest = stopAtNonOption;
+                    tokens.add(arg);
+                }
+            }
+        }
         else if (arg.startsWith("-"))
         {
             String opt = Util.stripLeadingHyphens(arg);
+            int sepIndex = opt.indexOf('=');
 
-                if (options.hasOption(opt))
+            if(sepIndex != -1) // -Dproperty=value
+            {
+                if(!options.hasOption(opt.substring(0, sepIndex)))
+                {
+                    tokens.add(arg.substring(0, sepIndex+1));
+                    tokens.add(arg.substring(sepIndex+1));
+                }
+                else
                 {
                     tokens.add(arg);
                 }
+            }
             else
             {
                 if(options.hasOption(arg.substring(0, 2)))
                 {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                    tokens.add(arg);
                 }
                 else
                 {
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
         }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
+            break;
         }
     }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[0]);
 }
\ No newline at end of file
