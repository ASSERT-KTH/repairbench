diff --git a/tmp/d8078864-e346-407b-a7b5-7abae438e2cb_buggy.java b/tmp/b94e09b2-51e1-401e-aaeb-2e20c376c596_fixed.java
index 7e64f1d..4371352 100644
--- a/tmp/d8078864-e346-407b-a7b5-7abae438e2cb_buggy.java
+++ b/tmp/b94e09b2-51e1-401e-aaeb-2e20c376c596_fixed.java
@@ -1,78 +1,59 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
-        List tokens = new ArrayList();
-
-        boolean eatTheRest = false;
+    List<String> tokens = new ArrayList<>();
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
-            {
-                eatTheRest = true;
-                tokens.add("--");
-            }
-            else if ("-".equals(arg))
-            {
-                tokens.add("-");
-            }
-            else if (arg.startsWith("-"))
-            {
-                String opt = Util.stripLeadingHyphens(arg);
-
-                if (options.hasOption(opt))
         {
             tokens.add(arg);
-                }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
-                    }
-                    else
-                    {
-                        eatTheRest = stopAtNonOption;
-                        tokens.add(arg);
-                    }
-                }
-            }
-            else
-            {
-                tokens.add(arg);
-            }
-
-            if (eatTheRest)
-            {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
+            break;
+        }
+
+        if (arg.startsWith("-") && !"-".equals(arg))  // Skip the standalone "-" argument
+        {
+            String opt;
+            String value;
+
+            if (arg.indexOf('=') != -1)
+            {
+                opt = arg.substring(0, arg.indexOf('='));
+                value = arg.substring(arg.indexOf('=') + 1);
+            }
+            else if (arg.length() > 2 && arg.startsWith("--"))
+            {
+                opt = arg.substring(0, arg.indexOf('=', 2));
+                value = arg.substring(arg.indexOf('=') + 1);
+            }
+            else
+            {
+                opt = Util.stripLeadingHyphens(arg);
+                tokens.add(arg);
+                continue;
+            }
+
+            Option option = options.getOption(opt);
+            if (option != null && option.hasArg())
+            {
+                tokens.add(opt);
+                tokens.add(value);
+            }
+            else
+            {
+                tokens.add(arg);
+            }
+        }
+        else
+        {
+            tokens.add(arg);
         }
     }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[0]);
 }
\ No newline at end of file
