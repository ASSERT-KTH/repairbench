diff --git a/tmp/82d72146-dac4-4467-9aac-af2367695c4b_buggy.java b/tmp/75a30538-2957-49f2-9a17-128d049e2794_fixed.java
index 7e64f1d..28191e4 100644
--- a/tmp/82d72146-dac4-4467-9aac-af2367695c4b_buggy.java
+++ b/tmp/75a30538-2957-49f2-9a17-128d049e2794_fixed.java
@@ -1,78 +1,84 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
-        boolean eatTheRest = false;
-
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
-                eatTheRest = true;
                 tokens.add("--");
+                for (i++; i < arguments.length; i++)
+                {
+                    tokens.add(arguments[i]);
+                }
+                break; // break as we've added all the remaining arguments
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
+            else if (arg.startsWith("--"))
+            {
+                int eqPos = arg.indexOf('=');
+                if (eqPos != -1) // check for "--option=argument" format
+                {
+                    String opt = arg.substring(0, eqPos);
+                    Option option = options.getOption(opt);
+                    if (option != null)
+                    {
+                        tokens.add(opt);
+                        tokens.add(arg.substring(eqPos + 1));
+                        continue;
+                    }
+                    else // handle "--option=value" where option has no corresponding short option
+                    {
+                        tokens.add(arg);
+                        continue;
+                    }
+                }
+                else // for "--option argument" format
+                {
+                    tokens.add(arg);
+                }
+            }
             else if (arg.startsWith("-"))
             {
                 String opt = Util.stripLeadingHyphens(arg);
 
-                if (options.hasOption(opt))
+                // if single letter shorthand is present
+                if (options.hasOption(opt.substring(0, 1)))
                 {
-                    tokens.add(arg);
+                    tokens.add("-" + opt.substring(0, 1));
+                    if (opt.length() > 1)
+                    {
+                        tokens.add("-" + opt.substring(1));
                     }
-                else
+                }
+                else // handle "-Dproperty=value" format
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    int eqPos = arg.indexOf('=');
+                    if (eqPos != -1)
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        tokens.add(arg.substring(0, eqPos + 1)); // -D
+                        tokens.add(arg.substring(eqPos + 1)); // property=value
                     }
                     else
                     {
-                        eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
                 }
             }
             else
             {
                 tokens.add(arg);
-            }
-
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
+                if (stopAtNonOption)
                 {
-                    tokens.add(arguments[i]);
+                    break;
                 }
             }
         }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+        return (String[]) tokens.toArray(new String[0]);
     }
\ No newline at end of file
