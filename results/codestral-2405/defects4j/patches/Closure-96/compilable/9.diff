diff --git a/tmp/faf83b30-3a4a-4809-a48b-a1ac90e35661_buggy.java b/tmp/2c0e82fd-c362-4540-ab07-64168725b3ee_fixed.java
index e0ecec8..0c48e1d 100644
--- a/tmp/faf83b30-3a4a-4809-a48b-a1ac90e35661_buggy.java
+++ b/tmp/2c0e82fd-c362-4540-ab07-64168725b3ee_fixed.java
@@ -1,35 +1,42 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+    while (parameters.hasNext()) {
+      Node parameter = parameters.next();
+
+      // If there are no arguments left but parameters left, check if it's a var_args function.
+      if (!arguments.hasNext()) {
+        if (parameter.isVarArgs()) {
+          // If it's a var_args function, no more checks are needed, just break.
+          break;
+        } else {
+          // If it's not a var_args function and no arguments left, report error.
+          report(t, call, WRONG_ARGUMENT_COUNT,
+              validator.getReadableJSTypeName(call.getFirstChild(), false),
+              String.valueOf(ordinal - 1), String.valueOf(ordinal),
+              "");
+          break;
+        }
+      }
+
+      Node argument = arguments.next();
       ordinal++;
 
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
 }
\ No newline at end of file
