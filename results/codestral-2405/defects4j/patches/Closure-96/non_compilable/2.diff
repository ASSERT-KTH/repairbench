diff --git a/tmp/5da07934-cf4d-4f9a-aca8-bffffc02c5ff_buggy.java b/tmp/b011b44a-d96f-4391-a050-e28b7a8443b8_fixed.java
index e0ecec8..92c39de 100644
--- a/tmp/5da07934-cf4d-4f9a-aca8-bffffc02c5ff_buggy.java
+++ b/tmp/b011b44a-d96f-4391-a050-e28b7a8443b8_fixed.java
@@ -1,35 +1,48 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
-    Iterator<Node> parameters = functionType.getParameters().iterator();
+  List<Node> parameters = functionType.getParameters();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+  int varArgsIndex = parameters.size() - 1;
+  int parameterIndex = 0;
+  while (arguments.hasNext()) {
     argument = arguments.next();
     ordinal++;
 
+    if (parameterIndex < varArgsIndex) {
+      parameter = parameters.get(parameterIndex);
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
+      parameterIndex++;
+    } else if (parameterIndex == varArgsIndex) {
+      // This is the var_args parameter, validate against all remaining parameters
+      for (int i = parameterIndex; i < parameters.size(); i++) {
+        parameter = parameters.get(i);
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), getJSType(parameter), call, ordinal);
+      }
+      parameterIndex++;
+    } else {
+      // This should not happen, there are more arguments than parameters but they are not var_args
+      // TODO: Report an error or handle this case appropriately
+      break;
+    }
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
