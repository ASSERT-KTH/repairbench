diff --git a/tmp/b0cfb961-309a-4926-a92b-207c279a9270_buggy.java b/tmp/6fc94342-04a1-4407-ad1b-1c7b4e62dcb0_fixed.java
index e0ecec8..e3cb021 100644
--- a/tmp/b0cfb961-309a-4926-a92b-207c279a9270_buggy.java
+++ b/tmp/6fc94342-04a1-4407-ad1b-1c7b4e62dcb0_fixed.java
@@ -1,35 +1,63 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+  while (arguments.hasNext() && parameters.hasNext()) {
+    // Increment ordinal here so rest parameters have a valid ordinal.
+    ordinal++;
     parameter = parameters.next();
     argument = arguments.next();
-      ordinal++;
-
+    if (parameter.isVarArgs()) {
+      // We only support checking the type of the rest argument.
+      // If there are more arguments, we can't check their types according
+      // to JSDoc.
+      validator.expectArgumentMatchesRestParameter(t, argument,
+          getJSType(argument), call, ordinal);
+      break;
+    }
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
+  // Check that rest arguments are correct.
+  while (arguments.hasNext()) {
+    argument = arguments.next();
+    parameter = functionType.getParameters().getOnlyElement();
+    // Parameter should have been a rest parameter, or it should not exist.
+    // The following check handles both cases.
+    if (parameter != null && !parameter.isVarArgs()) {
+      report(t, call, WRONG_ARGUMENT_COUNT,
+              validator.getReadableJSTypeName(call.getFirstChild(), false),
+              String.valueOf(ordinal - 1),
+              String.valueOf(ordinal - 1), "");
+    }
+    validator.expectArgumentMatchesRestParameter(t, argument,
+        getJSType(argument), call, ordinal);
+    ordinal++;
+  }
+
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+  if (minArgs > numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
+  } else if (maxArgs < numArgs && !functionType.getParameters().isEmpty() &&
+              !functionType.getParameters().getOnlyElement().isVarArgs()) {
+    report(t, call, WRONG_ARGUMENT_COUNT,
+            validator.getReadableJSTypeName(call.getFirstChild(), false),
+            String.valueOf(numArgs), String.valueOf(minArgs),
+            " and no more than " + maxArgs + " argument(s)");
   }
 }
\ No newline at end of file
