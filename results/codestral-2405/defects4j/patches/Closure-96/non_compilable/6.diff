diff --git a/tmp/17727bac-1c18-4757-9945-3809d41ee233_buggy.java b/tmp/8532e421-2b95-42dc-853c-edf648a7ec14_fixed.java
index e0ecec8..f30b598 100644
--- a/tmp/17727bac-1c18-4757-9945-3809d41ee233_buggy.java
+++ b/tmp/8532e421-2b95-42dc-853c-edf648a7ec14_fixed.java
@@ -1,35 +1,48 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
+  boolean isVariadic = functionType.isVariadic();
+  if (isVariadic) {
+    if (functionType.getParameterCount() > 0) {
+      Node lastParameter = functionType.getLastParameter();
+      while (arguments.hasNext()) {
+        Node argument = arguments.next();
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), getJSType(lastParameter), call, Node.NUM_CHILDREN);
+      }
+    }
+  } else {
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+    while (arguments.hasNext() && parameters.hasNext()) {
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
-
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
+  }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+  if (numArgs < minArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
         String.valueOf(numArgs), String.valueOf(minArgs),
         maxArgs != Integer.MAX_VALUE ?
         " and no more than " + maxArgs + " argument(s)" : "");
+  } else if (!isVariadic && maxArgs < numArgs) {
+    report(t, call, WRONG_ARGUMENT_COUNT,
+        validator.getReadableJSTypeName(call.getFirstChild(), false),
+        String.valueOf(numArgs), String.valueOf(minArgs),
+        " and no more than " + maxArgs + " argument(s)");
   }
 }
\ No newline at end of file
