diff --git a/tmp/4ec65dd9-7b36-43e6-bb5d-c00ee2c0eeaf_buggy.java b/tmp/48cf0029-10e0-4971-9cc0-e085867fce4e_fixed.java
index bf9c086..89a171d 100644
--- a/tmp/4ec65dd9-7b36-43e6-bb5d-c00ee2c0eeaf_buggy.java
+++ b/tmp/48cf0029-10e0-4971-9cc0-e085867fce4e_fixed.java
@@ -1,54 +1,30 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
 private void visitCall(NodeTraversal t, Node n) {
   Node child = n.getFirstChild();
   JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
   if (!childType.canBeCalled()) {
     report(t, n, NOT_CALLABLE, childType.toString());
     ensureTyped(t, n);
     return;
   }
 
-    // A couple of types can be called as if they were functions.
-    // If it is a function type, then validate parameters.
   if (childType instanceof FunctionType) {
     FunctionType functionType = (FunctionType) childType;
+    JSType thisType = functionType.getThisType();
 
-      boolean isExtern = false;
-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
-      if(functionJSDocInfo != null) {
-        String sourceName = functionJSDocInfo.getSourceName();
-        CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
-      }
-
-      // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
-      if (functionType.isConstructor() &&
-          !functionType.isNativeObjectType() &&
-          (functionType.getReturnType().isUnknownType() ||
-           functionType.getReturnType().isVoidType() ||
-           !isExtern)) {
-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
-      }
-
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-
-      visitParameterList(t, n, functionType);
+    if (thisType != null && !thisType.isUnknownType()) {
+      Node parent = n.getParent();
+      if (parent.isGetProp() || parent.isGetElem()) {
         ensureTyped(t, n, functionType.getReturnType());
+      } else {
+        report(t, n, NOT_CALLED_WITH_THIS_TYPE, thisType.toString());
+      }
     } else {
       ensureTyped(t, n);
     }
 
-    // TODO: Add something to check for calls of RegExp objects, which is not
-    // supported by IE.  Either say something about the return type or warn
-    // about the non-portability of the call or both.
+    visitParameterList(t, n, functionType);
+  } else {
+    ensureTyped(t, n);
+  }
 }
\ No newline at end of file
