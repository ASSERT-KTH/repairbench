diff --git a/tmp/9b17f07c-5bfd-4ea4-910e-4079d5e1a9a4_buggy.java b/tmp/1624e497-6e94-443a-a480-b636c968900d_fixed.java
index bf9c086..467bcc8 100644
--- a/tmp/9b17f07c-5bfd-4ea4-910e-4079d5e1a9a4_buggy.java
+++ b/tmp/1624e497-6e94-443a-a480-b636c968900d_fixed.java
@@ -1,54 +1,44 @@
 /**
  * Visits a CALL node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  */
 private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
-    // A couple of types can be called as if they were functions.
-    // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
-
-      boolean isExtern = false;
-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
-      if(functionJSDocInfo != null) {
-        String sourceName = functionJSDocInfo.getSourceName();
-        CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
+      ...
+      // If the function type has a 'this' type, ensure that the function is called
+      // with a 'this' type that matches the specified 'this' type for the function.
+      if (functionType.hasThisType()) {
+        Node thisNode = child.getParent();
+        if (thisNode != null && thisNode.isGetprop()) {
+          JSType thisType = getJSType(thisNode.getFirstChild());
+          if (!thisType.isSubtype(functionType.getThisType())) {
+            report(t, n, THIS_TYPE_MISMATCH,
+                functionType.getThisType().toString(), thisType.toString());
+            ensureTyped(t, n);
+            return;
+          }
+        } else {
+          report(t, n, MISSING_THIS_TYPE, functionType.getThisType().toString());
+          ensureTyped(t, n);
+          return;
         }
-
-      // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
-      if (functionType.isConstructor() &&
-          !functionType.isNativeObjectType() &&
-          (functionType.getReturnType().isUnknownType() ||
-           functionType.getReturnType().isVoidType() ||
-           !isExtern)) {
-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
-
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-
-      visitParameterList(t, n, functionType);
-      ensureTyped(t, n, functionType.getReturnType());
+      ...
     } else {
       ensureTyped(t, n);
     }
-
-    // TODO: Add something to check for calls of RegExp objects, which is not
-    // supported by IE.  Either say something about the return type or warn
-    // about the non-portability of the call or both.
+    ...
 }
\ No newline at end of file
