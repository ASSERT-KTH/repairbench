diff --git a/tmp/7efca751-94d8-4b5e-b6ba-5b3e6d9d0040_buggy.java b/tmp/85cdc8fe-cd33-4415-8981-19d6e2242e3e_fixed.java
index bf9c086..fc802f8 100644
--- a/tmp/7efca751-94d8-4b5e-b6ba-5b3e6d9d0040_buggy.java
+++ b/tmp/85cdc8fe-cd33-4415-8981-19d6e2242e3e_fixed.java
@@ -1,54 +1,37 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
 private void visitCall(NodeTraversal t, Node n) {
   Node child = n.getFirstChild();
-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();
+  JSType childType = getJSType(child);
+
+  if (childType.isUnknownType()) {
+    report(t, n, UNKNOWN_TYPE_IN_CALL, child.getString());
+    ensureTyped(t, n);
+    return;
+  }
+
+  childType = childType.restrictByNotNullOrUndefined();
 
   if (!childType.canBeCalled()) {
     report(t, n, NOT_CALLABLE, childType.toString());
     ensureTyped(t, n);
     return;
   }
 
-    // A couple of types can be called as if they were functions.
-    // If it is a function type, then validate parameters.
   if (childType instanceof FunctionType) {
     FunctionType functionType = (FunctionType) childType;
-
-      boolean isExtern = false;
-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
-      if(functionJSDocInfo != null) {
-        String sourceName = functionJSDocInfo.getSourceName();
-        CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
-      }
-
-      // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
-      if (functionType.isConstructor() &&
-          !functionType.isNativeObjectType() &&
-          (functionType.getReturnType().isUnknownType() ||
-           functionType.getReturnType().isVoidType() ||
-           !isExtern)) {
-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
-      }
-
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-
+    ensureValidThisType(t, functionType, n);
     visitParameterList(t, n, functionType);
     ensureTyped(t, n, functionType.getReturnType());
   } else {
     ensureTyped(t, n);
   }
+}
 
-    // TODO: Add something to check for calls of RegExp objects, which is not
-    // supported by IE.  Either say something about the return type or warn
-    // about the non-portability of the call or both.
+private void ensureValidThisType(NodeTraversal t, FunctionType functionType, Node n) {
+  if (functionType.hasExplicitThisType()) {
+    Node qualifier = n.getFirstChild();
+    Node parent = n.getParent();
+    if (!((parent.isGetProp() || parent.isGetElem()) && parent.getFirstChild().equals(qualifier))) {
+      report(t, n, THIS_TYPE_NOT_IN_CONTEXT, functionType.getExplicitThisType().toString());
+    }
+  }
 }
\ No newline at end of file
