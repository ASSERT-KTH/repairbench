diff --git a/tmp/8f97c60f-d781-4223-94ed-f82a5f81cc83_buggy.java b/tmp/984872dc-9abb-4f5f-9969-44fa5c7b76e9_fixed.java
index bf9c086..c465b2a 100644
--- a/tmp/8f97c60f-d781-4223-94ed-f82a5f81cc83_buggy.java
+++ b/tmp/984872dc-9abb-4f5f-9969-44fa5c7b76e9_fixed.java
@@ -1,54 +1,49 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
 private void visitCall(NodeTraversal t, Node n) {
   Node child = n.getFirstChild();
   JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
   if (!childType.canBeCalled()) {
     report(t, n, NOT_CALLABLE, childType.toString());
     ensureTyped(t, n);
     return;
   }
 
-    // A couple of types can be called as if they were functions.
-    // If it is a function type, then validate parameters.
   if (childType instanceof FunctionType) {
     FunctionType functionType = (FunctionType) childType;
 
     boolean isExtern = false;
     JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
     if(functionJSDocInfo != null) {
       String sourceName = functionJSDocInfo.getSourceName();
       CompilerInput functionSource = compiler.getInput(sourceName);
       isExtern = functionSource.isExtern();
     }
 
-      // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
-      if (functionType.isConstructor() &&
-          !functionType.isNativeObjectType() &&
+    if (functionType.isConstructor() && !functionType.isNativeObjectType() &&
         (functionType.getReturnType().isUnknownType() ||
         functionType.getReturnType().isVoidType() ||
         !isExtern)) {
       report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
     }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-
     visitParameterList(t, n, functionType);
+
+    // Check if the function has an explicit 'this' type and report an error if not called with the correct 'this' type
+    if (functionType.hasExplicitThisType() && !isThisTypeCorrect(t, n, functionType)) {
+      report(t, n, THIS_TYPE_MISMATCH, functionType.getTypeOfThis().toString());
+    }
+
     ensureTyped(t, n, functionType.getReturnType());
   } else {
     ensureTyped(t, n);
   }
+  // TODO: Add check for calls of RegExp objects
+}
 
-    // TODO: Add something to check for calls of RegExp objects, which is not
-    // supported by IE.  Either say something about the return type or warn
-    // about the non-portability of the call or both.
+// Helper method to check if the 'this' type of the function call is correct
+private boolean isThisTypeCorrect(NodeTraversal t, Node n, FunctionType functionType) {
+  // Get the parent node of the function call
+  Node parent = n.getParent();
+  // Check if the parent is a GETPROP or GETELEM node and the type of the grandparent matches the explicit 'this' type
+  return (parent.isGetProp() || parent.isGetElem()) && t.getType(parent.getParent()).subtype(functionType.getTypeOfThis());
 }
\ No newline at end of file
