diff --git a/tmp/11d38d78-1b04-4baf-b6a0-bc78668475b1_buggy.java b/tmp/13175b44-4212-4ed2-a6d2-e98a768beae3_fixed.java
index efa499e..74b8746 100644
--- a/tmp/11d38d78-1b04-4baf-b6a0-bc78668475b1_buggy.java
+++ b/tmp/13175b44-4212-4ed2-a6d2-e98a768beae3_fixed.java
@@ -1,35 +1,29 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
     Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
     double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
     Set<Integer> basicRows = new HashSet<Integer>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
           coefficients[i] = 0;
           continue;
         }
         Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
+        // Add the basic row to the set before checking for its existence.
+        // This ensures that if multiple variables can take a given value,
+        // the first one is used and the rest are set to 0.
         if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+            coefficients[i] = 0;
         } else {
             basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            // If the basic row is found to be the objective function row,
+            // set the coefficient to the difference between the RHS and mostNegative.
+            // This case handles unconstrained variables that are still part of the objective function.
+            coefficients[i] = basicRow == null ? -mostNegative : getEntry(basicRow, getRhsOffset()) - mostNegative;
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
