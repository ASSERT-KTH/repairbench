diff --git a/tmp/45a28134-2ed2-477a-bd77-8b80ee32ba65_buggy.java b/tmp/8f189f5c-6d30-4575-bd88-40e32c7f25b2_fixed.java
index efa499e..5ecb6ab 100644
--- a/tmp/45a28134-2ed2-477a-bd77-8b80ee32ba65_buggy.java
+++ b/tmp/8f189f5c-6d30-4575-bd88-40e32c7f25b2_fixed.java
@@ -1,35 +1,30 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
   int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+  double mostNegative = 0;
+  if (negativeVarColumn > 0) {
+    Integer negativeVarBasicRow = getBasicRow(negativeVarColumn);
+    mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+  }
 
   Set<Integer> basicRows = new HashSet<Integer>();
   double[] coefficients = new double[getOriginalNumDecisionVariables()];
   for (int i = 0; i < coefficients.length; i++) {
       int colIndex = columnLabels.indexOf("x" + i);
       if (colIndex < 0) {
         coefficients[i] = 0;
         continue;
       }
       Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+      if (basicRow == null) { // check if basicRow is null
+        coefficients[i] = -mostNegative; // if so, just set the coefficient to negative of mostNegative
+      } else if (basicRow == getNumRows()) { // if the basic row is found to be the objective function row
+        coefficients[i] = 0;
+      } else if (basicRows.contains(basicRow)) {
+        coefficients[i] = 0; // if multiple variables can take a given value, then we choose the first and set the rest equal to 0
       } else {
         basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+        coefficients[i] = getEntry(basicRow, getRhsOffset()) - mostNegative; // get the positive value of the variable
       }
   }
   return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
