diff --git a/tmp/d2b8d91a-de08-4450-9323-0cabb3b4c888_buggy.java b/tmp/a6687720-126d-46e5-bef9-220c1ed917f4_fixed.java
index efa499e..46bbbfa 100644
--- a/tmp/d2b8d91a-de08-4450-9323-0cabb3b4c888_buggy.java
+++ b/tmp/a6687720-126d-46e5-bef9-220c1ed917f4_fixed.java
@@ -1,35 +1,34 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
         Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+        double mostNegative = negativeVarBasicRow == null ? 0.0 : -getEntry(negativeVarBasicRow, getRhsOffset());
 
-      Set<Integer> basicRows = new HashSet<Integer>();
+        Set<Integer> basicRows = new HashSet<>();
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         for (int i = 0; i < coefficients.length; i++) {
             int colIndex = columnLabels.indexOf("x" + i);
             if (colIndex < 0) {
                 coefficients[i] = 0;
                 continue;
             }
             Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
             if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+                coefficients[i] = 0;
+            } else if (basicRow == null) {
+                coefficients[i] = restrictToNonNegative ? 0.0 : mostNegative;
+                basicRows.add(basicRow);
             } else {
+                coefficients[i] = getEntry(basicRow, getRhsOffset());
+                if (!restrictToNonNegative && basicRow.equals(negativeVarBasicRow)) {
+                    coefficients[i] += mostNegative;
+                }
                 basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
