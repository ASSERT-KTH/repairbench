diff --git a/tmp/df4540fa-5c3f-4c6c-9fe7-3b6147fc3af2_buggy.java b/tmp/e18857a8-8bb4-4188-8ba7-18a22ce5d026_fixed.java
index efa499e..7c5d9a6 100644
--- a/tmp/df4540fa-5c3f-4c6c-9fe7-3b6147fc3af2_buggy.java
+++ b/tmp/e18857a8-8bb4-4188-8ba7-18a22ce5d026_fixed.java
@@ -1,35 +1,34 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
    Set<Integer> basicRows = new HashSet<Integer>();
    double[] coefficients = new double[getOriginalNumDecisionVariables()];
    for (int i = 0; i < coefficients.length; i++) {
        int colIndex = columnLabels.indexOf("x" + i);
        if (colIndex < 0) {
          coefficients[i] = 0;
          continue;
        }
        Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
+       // if the basic row is null or it's the objective function row
        // set the coefficient to 0 -> this case handles unconstrained
        // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
+       if (basicRow == null || basicRow.equals(OBJECTIVE_FUNCTION_ROW)) {
+         coefficients[i] = 0;
+       } else if (basicRows.contains(basicRow)) {
          // if multiple variables can take a given value
          // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+         coefficients[i] = 0;
        } else {
          basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+         coefficients[i] = getEntry(basicRow, getRhsOffset()) - mostNegative;
+         // ensure the coefficient is non-negative if restrictToNonNegative is true
+         if (restrictToNonNegative && coefficients[i] < 0) {
+           coefficients[i] = 0;
+         }
        }
    }
    return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
