diff --git a/tmp/3c2969b9-1020-45cb-bf81-07a314b36c0a_buggy.java b/tmp/e158b5f6-713a-4b99-9fd9-5162f1309efe_fixed.java
index b36c3f0..13d6af8 100644
--- a/tmp/3c2969b9-1020-45cb-bf81-07a314b36c0a_buggy.java
+++ b/tmp/e158b5f6-713a-4b99-9fd9-5162f1309efe_fixed.java
@@ -1,58 +1,23 @@
 /**
-   * Returns true if calls to this function have side effects.
+ * Returns true if calls or allocations to this node may have side effects.
+ * This is more accurate than the simpler functionCallHasSideEffects().
  *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
+ * @param node The node to be inspected. It can be a CALL, NEW, or possibly
+ *     a TYPEOF node.
+ * @param compiler A compiler object to provide program state changing context
+ *     information. Can be null.
  */
-  static boolean functionCallHasSideEffects(
-      Node callNode, @Nullable AbstractCompiler compiler) {
-    if (callNode.getType() != Token.CALL) {
-      throw new IllegalStateException(
-          "Expected CALL node, got " + Token.name(callNode.getType()));
-    }
-
-    if (callNode.isNoSideEffectsCall()) {
-      return false;
-    }
-
-    Node nameNode = callNode.getFirstChild();
-
-    // Built-in functions with no side effects.
-    if (nameNode.getType() == Token.NAME) {
-      String name = nameNode.getString();
-      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
-        return false;
-      }
-    } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
-        return false;
-      }
-
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
-        return false;
-      }
-
-      // Functions in the "Math" namespace have no side effects.
-
-      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+static boolean allocationOrCallHasSideEffects(
+    Node node, @Nullable AbstractCompiler compiler) {
+  switch (node.getType()) {
+    case Token.NEW:
+      return true; // Every constructor call is assumed to have side effects.
+    case Token.CALL:
+      return functionCallHasSideEffects(node, compiler);
+    case Token.TYPEOF:
+      // TYPEOF consts have no side effects.
+      return !(node.getLastChild().isName() && node.getLastChild().isQualifiedName());
+    default:
       return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
-          Node param = nameNode.getNext();
-          if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
-          return false;
-        }
-      }
   }
-
-    return true;
 }
\ No newline at end of file
