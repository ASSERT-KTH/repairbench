diff --git a/tmp/b0e2f62f-9208-49fc-93ba-4f82ec33c455_buggy.java b/tmp/02b795c5-71f1-44fa-bf87-1a44f4179883_fixed.java
index b36c3f0..63377d6 100644
--- a/tmp/b0e2f62f-9208-49fc-93ba-4f82ec33c455_buggy.java
+++ b/tmp/02b795c5-71f1-44fa-bf87-1a44f4179883_fixed.java
@@ -1,58 +1,58 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
 static boolean functionCallHasSideEffects(
     Node callNode, @Nullable AbstractCompiler compiler) {
   if (callNode.getType() != Token.CALL) {
     throw new IllegalStateException(
         "Expected CALL node, got " + Token.name(callNode.getType()));
   }
 
   if (callNode.isNoSideEffectsCall()) {
     return false;
   }
 
   Node nameNode = callNode.getFirstChild();
 
   // Built-in functions with no side effects.
   if (nameNode.getType() == Token.NAME) {
     String name = nameNode.getString();
     if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
       return false;
     }
   } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
+    if (callNode.hasOneChild()) {
+      Node firstChild = nameNode.getFirstChild();
+      String property = nameNode.getLastChild().getString();
+      // Functions in the "Math" namespace have no side effects.
+      if (firstChild != null && firstChild.getType() == Token.NAME
+          && "Math".equals(firstChild.getString())
+          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(property)) {
         return false;
       }
+      if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(property)) {
+        return false;
+      }
+    }
 
     if (callNode.isOnlyModifiesThisCall()
         && evaluatesToLocalValue(nameNode.getFirstChild())) {
       return false;
     }
 
-      // Functions in the "Math" namespace have no side effects.
-
     if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+      Node firstChild = nameNode.getFirstChild();
+      Node lastChild = nameNode.getLastChild();
+      if (firstChild != null && lastChild != null
+          && firstChild.getType() == Token.REGEXP
+          && REGEXP_METHODS.contains(lastChild.getString())) {
         return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+      } else if (firstChild != null && lastChild != null
+          && firstChild.getType() == Token.STRING
+          && STRING_REGEXP_METHODS.contains(lastChild.getString())) {
         Node param = nameNode.getNext();
-          if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+        if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP))
           return false;
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
