diff --git a/tmp/5fdc69bd-1eb0-4fc2-b05c-edb0c7255e6c_buggy.java b/tmp/9701396e-c2a6-465c-b5c4-fed7d38b45fb_fixed.java
index 710fcc0..c56ef67 100644
--- a/tmp/5fdc69bd-1eb0-4fc2-b05c-edb0c7255e6c_buggy.java
+++ b/tmp/9701396e-c2a6-465c-b5c4-fed7d38b45fb_fixed.java
@@ -1,37 +1,32 @@
 Object returnValueFor(Class<?> type) {
     if (Primitives.isPrimitiveOrWrapper(type)) {
         return Primitives.defaultValueForPrimitiveOrWrapper(type);
-            //new instances are used instead of Collections.emptyList(), etc.
-            //to avoid UnsupportedOperationException if code under test modifies returned collection
-        } else if (type == Collection.class) {
-            return new LinkedList<Object>();
-        } else if (type == Set.class) {
+    } else if (Collection.class.isAssignableFrom(type)) {
+        if (type == HashSet.class) {
             return new HashSet<Object>();
-        } else if (type == HashSet.class) {
-            return new HashSet<Object>();
-        } else if (type == SortedSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == TreeSet.class) {
+        } else if (type == SortedSet.class || type == TreeSet.class) {
             return new TreeSet<Object>();
         } else if (type == LinkedHashSet.class) {
             return new LinkedHashSet<Object>();
-        } else if (type == List.class) {
-            return new LinkedList<Object>();
-        } else if (type == LinkedList.class) {
-            return new LinkedList<Object>();
-        } else if (type == ArrayList.class) {
+        } else if (type == List.class || type == LinkedList.class || type == ArrayList.class) {
             return new ArrayList<Object>();
-        } else if (type == Map.class) {
+        } else if (type == Collection.class || type == Set.class) {
+            // Since Set and List are collections but didn't match previous conditions, return a default Collection.
+            // A LinkedHashSet is chosen as it has predictable iteration order.
+            return new LinkedHashSet<Object>();
+        }
+    } else if (Map.class.isAssignableFrom(type)) {
+        if (type == HashMap.class) {
             return new HashMap<Object, Object>();
-        } else if (type == HashMap.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == SortedMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == TreeMap.class) {
+        } else if (type == SortedMap.class || type == TreeMap.class) {
             return new TreeMap<Object, Object>();
         } else if (type == LinkedHashMap.class) {
             return new LinkedHashMap<Object, Object>();
+        } else if (type == Map.class) {
+            // Since TreeMap is a SortedMap but didn't match previous conditions, return a default Map.
+            return new TreeMap<Object, Object>();
         }
-        //Let's not care about the rest of collections.
+    }
+    // For greater flexibility, return null for other types.
     return null;
 }
\ No newline at end of file
