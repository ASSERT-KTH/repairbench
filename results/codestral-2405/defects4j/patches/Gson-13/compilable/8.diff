diff --git a/tmp/278414d5-facd-4dc6-8d42-0067edf04c9a_buggy.java b/tmp/19726dfd-0a95-4ece-8f0e-9f2d91fd28fb_fixed.java
index 2bd7d6c..ce45dbc 100644
--- a/tmp/278414d5-facd-4dc6-8d42-0067edf04c9a_buggy.java
+++ b/tmp/19726dfd-0a95-4ece-8f0e-9f2d91fd28fb_fixed.java
@@ -1,102 +1,81 @@
 private int peekNumber() throws IOException {
     // Like nextNonWhitespace, this uses locals 'p' and 'l' to save inner-loop field access.
     char[] buffer = this.buffer;
     int p = pos;
     int l = limit;
 
-    long value = 0; // Negative to accommodate Long.MIN_VALUE more easily.
-    boolean negative = false;
-    boolean fitsInLong = true;
-    int last = NUMBER_CHAR_NONE;
+    // Track if the number is negative
+    boolean isNegative = false;
+    // Used to determine if the number is decimal or not
+    boolean isFractionDigit = false;
+    // Used to check if the number is in exponential format
+    boolean isExponential = false;
 
     int i = 0;
-
     charactersOfNumber:
     for (; true; i++) {
         if (p + i == l) {
             if (i == buffer.length) {
                 // Though this looks like a well-formed number, it's too long to continue reading. Give up
                 // and let the application handle this as an unquoted literal.
                 return PEEKED_NONE;
             }
             if (!fillBuffer(i + 1)) {
                 break;
             }
             p = pos;
             l = limit;
         }
 
         char c = buffer[p + i];
         switch (c) {
             case '-':
-        if (last == NUMBER_CHAR_NONE) {
-          negative = true;
-          last = NUMBER_CHAR_SIGN;
+                // The first character could be '-' sign
+                if (i == 0) {
+                    isNegative = true;
                     continue;
-        } else if (last == NUMBER_CHAR_EXP_E) {
-          last = NUMBER_CHAR_EXP_SIGN;
+                }
+                // But not after 'e' or 'E' in a decimal number
+                else if (isExponential) {
                     continue;
                 }
                 return PEEKED_NONE;
 
             case '+':
-        if (last == NUMBER_CHAR_EXP_E) {
-          last = NUMBER_CHAR_EXP_SIGN;
+                // The '+' sign can only occur after 'e' or 'E' in a decimal number
+                if (isExponential) {
                     continue;
                 }
                 return PEEKED_NONE;
 
             case 'e':
             case 'E':
-        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {
-          last = NUMBER_CHAR_EXP_E;
-          continue;
-        }
+                // 'e' or 'E' can only occur once in a decimal number
+                if (isExponential) {
                     return PEEKED_NONE;
+                }
+                isExponential = true;
+                continue;
 
             case '.':
-        if (last == NUMBER_CHAR_DIGIT) {
-          last = NUMBER_CHAR_DECIMAL;
-          continue;
-        }
+                // A decimal number can only contain one '.'
+                if (isFractionDigit || isExponential) {
                     return PEEKED_NONE;
+                }
+                isFractionDigit = true;
+                continue;
 
             default:
                 if (c < '0' || c > '9') {
                     if (!isLiteral(c)) {
                         break charactersOfNumber;
                     }
                     return PEEKED_NONE;
                 }
-        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {
-          value = -(c - '0');
-          last = NUMBER_CHAR_DIGIT;
-        } else if (last == NUMBER_CHAR_DIGIT) {
-          if (value == 0) {
-            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).
-          }
-          long newValue = value * 10 - (c - '0');
-          fitsInLong &= value > MIN_INCOMPLETE_INTEGER
-              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);
-          value = newValue;
-        } else if (last == NUMBER_CHAR_DECIMAL) {
-          last = NUMBER_CHAR_FRACTION_DIGIT;
-        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {
-          last = NUMBER_CHAR_EXP_DIGIT;
-        }
         }
     }
 
-    // We've read a complete number. Decide if it's a PEEKED_LONG or a PEEKED_NUMBER.
-    if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {
-      peekedLong = negative ? value : -value;
-      pos += i;
-      return peeked = PEEKED_LONG;
-    } else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT
-        || last == NUMBER_CHAR_EXP_DIGIT) {
+    // At this point, a well-formed number has been read. Process it accordingly.
     peekedNumberLength = i;
-      return peeked = PEEKED_NUMBER;
-    } else {
-      return PEEKED_NONE;
-    }
+    return peeked = isNegative || isFractionDigit || isExponential ? PEEKED_NUMBER : PEEKED_LONG;
 }
\ No newline at end of file
