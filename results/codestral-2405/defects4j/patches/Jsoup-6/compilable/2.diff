diff --git a/tmp/b06bbacc-2182-4814-a413-c8f763010450_buggy.java b/tmp/cb0e6044-7ba3-4e7f-b5bc-b4113a752dd3_fixed.java
index 99141e0..cd1720c 100644
--- a/tmp/b06bbacc-2182-4814-a413-c8f763010450_buggy.java
+++ b/tmp/cb0e6044-7ba3-4e7f-b5bc-b4113a752dd3_fixed.java
@@ -1,33 +1,34 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    StringBuffer accum = new StringBuffer(string.length());
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num != null) {
             try {
                 int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                charval = Integer.parseInt(num, base); // Change here: Integer.valueOf to Integer.parseInt
             } catch (NumberFormatException e) {
-                } // skip
+                // skip
+            }
         } else {
             String name = m.group(1);
-                if (full.containsKey(name))
+            if (full.containsKey(name)) {
                 charval = full.get(name);
             }
+        }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+        if (charval >= 0 && charval <= 0xFFFD) { // Change here: Check out of range correctly
             String c = Character.toString((char) charval);
             m.appendReplacement(accum, c);
         } else {
             m.appendReplacement(accum, m.group(0));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
