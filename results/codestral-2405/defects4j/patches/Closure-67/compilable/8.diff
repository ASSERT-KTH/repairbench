diff --git a/tmp/d1b16c0c-3fef-4c33-b96c-ffafa97a6ca6_buggy.java b/tmp/458e93fc-2601-40b7-b5b5-690b8a076791_fixed.java
index 939f49b..4accccd 100644
--- a/tmp/d1b16c0c-3fef-4c33-b96c-ffafa97a6ca6_buggy.java
+++ b/tmp/458e93fc-2601-40b7-b5b5-690b8a076791_fixed.java
@@ -1,21 +1,31 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+
+        if (n.getType() == Token.GETPROP && n.getFirstChild() != null) {
+            Node child = n.getFirstChild().getFirstChild();
+
+            // Check if the property being assigned to is "prototype"
+            if (child != null && child.getType() == Token.STRING
+                    && child.getString().equals("prototype")) {
+                return true;
+            }
+
+            /*
+               If `child` is still a GETPROP node, it means the assignment
+               is a chained property assignment. In this case, we need to
+               check the next child of `child` to see if it's "prototype".
+            */
+            else if (child != null && child.getType() == Token.GETPROP) {
+
+                Node nextChild = child.getFirstChild().getNext();
+                if(nextChild != null && nextChild.getType() == Token.STRING
+                        && nextChild.getString().equals("prototype")) {
                     return true;
                 }
             }
         }
+    }
 
     return false;
 }
\ No newline at end of file
