diff --git a/tmp/54e3cd2e-4744-45eb-9aca-eb1c76a64c00_buggy.java b/tmp/90cb7a92-f223-40f5-ac3f-89f5250a0cfa_fixed.java
index 939f49b..8692535 100644
--- a/tmp/54e3cd2e-4744-45eb-9aca-eb1c76a64c00_buggy.java
+++ b/tmp/90cb7a92-f223-40f5-ac3f-89f5250a0cfa_fixed.java
@@ -1,21 +1,48 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
       && n.getType() == Token.GETPROP
       ) {
     // We want to exclude the assignment itself from the usage list
     boolean isChainedProperty =
         n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
       Node child = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      // Check for a string literal OR a expression resolving to "prototype"
+      if (child.getType() == Token.STRING) {
+        if (child.getString().equals("prototype")) {
           return true;
         }
+      } else {
+        // Recursively check for subtree that may resolve to "prototype"
+        String subtreeString = getSubtreeStringLiteral(child);
+        if (subtreeString != null && subtreeString.equals("prototype")) {
+          return true;
+        }
+      }
     }
   }
 
   return false;
 }
+
+private String getSubtreeStringLiteral(Node node) {
+  if (node == null) {
+    return null;
+  }
+
+  if (node.getType() == Token.STRING) {
+    return node.getString();
+  }
+
+  for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {
+    String subtreeString = getSubtreeStringLiteral(child);
+    if (subtreeString != null) {
+      return subtreeString;
+    }
+  }
+
+  return null;
+}
\ No newline at end of file
