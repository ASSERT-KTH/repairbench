diff --git a/tmp/8750b15c-9e39-495a-b5a7-643fa19c8e80_buggy.java b/tmp/fdd20199-79e0-4d77-a5cd-a7e003ea8c0e_fixed.java
index 939f49b..803ca43 100644
--- a/tmp/8750b15c-9e39-495a-b5a7-643fa19c8e80_buggy.java
+++ b/tmp/fdd20199-79e0-4d77-a5cd-a7e003ea8c0e_fixed.java
@@ -1,21 +1,18 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+    Node propertyNode = n.getFirstChild();
+    if (propertyNode != null && propertyNode.getType() == Token.STRING && propertyNode.getString().equals("prototype")) {
+      n = propertyNode.getNext();
+      if (n != null && n.getType() == Token.GETPROP) {
+        // Now, we want to check if the property access is "prototype"
+        Node protoPropNode = n.getFirstChild();
+        if (protoPropNode != null && protoPropNode.getType() == Token.STRING
+            && protoPropNode.getString().equals("prototype")) {
             return true;
         }
       }
     }
-
+  }
   return false;
 }
\ No newline at end of file
