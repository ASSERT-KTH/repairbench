diff --git a/tmp/b5824d32-2f67-452d-9706-ba1cb0986c70_buggy.java b/tmp/1448e318-06c0-4be2-9d6d-5dc99bc4b746_fixed.java
index 939f49b..8041f21 100644
--- a/tmp/b5824d32-2f67-452d-9706-ba1cb0986c70_buggy.java
+++ b/tmp/1448e318-06c0-4be2-9d6d-5dc99bc4b746_fixed.java
@@ -1,21 +1,21 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP) {
+    // Check if the property is on the prototype object
+    Node object = n.getFirstChild();
+    Node property = object.getNext();
+    if (property != null && property.getType() == Token.STRING && property.getString().equals("prototype")) {
+      // Check if it's a chained property
+      if (object.getType() == Token.GETPROP) {
+        Node grandObject = object.getFirstChild();
+        if (grandObject.getType() != Token.THIS) {
+          return true;
+        }
+      } else if (object.getType() == Token.THIS) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
