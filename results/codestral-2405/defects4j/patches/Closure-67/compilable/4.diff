diff --git a/tmp/f0287058-d48e-408f-9a68-67ef3c667d1f_buggy.java b/tmp/954efb9b-36db-41da-a1e6-2621794b3514_fixed.java
index 939f49b..8daaf65 100644
--- a/tmp/f0287058-d48e-408f-9a68-67ef3c667d1f_buggy.java
+++ b/tmp/954efb9b-36db-41da-a1e6-2621794b3514_fixed.java
@@ -1,21 +1,26 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+    if (n.getType() == Token.GETPROP) {
       // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+      boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
 
       if (isChainedProperty) {
         Node child = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        if (child.getType() == Token.STRING && child.getString().equals("prototype")) {
+          return true;
+        }
+      }
+    } else if (n.getType() == Token.GETELEM && n.getFirstChild().getType() == Token.GETPROP) {
+      // To account for the test environment: `e.prototype['alias1'] = ...`
+      Node grandchild = n.getFirstChild().getFirstChild().getNext();
+
+      if (grandchild.getType() == Token.STRING && grandchild.getString().equals("prototype")) {
         return true;
       }
      }
   }
 
   return false;
 }
\ No newline at end of file
