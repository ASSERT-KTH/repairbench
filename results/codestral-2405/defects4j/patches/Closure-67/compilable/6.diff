diff --git a/tmp/de1960fa-e9a1-429d-b99d-75de26b27c17_buggy.java b/tmp/265deb7c-70e0-44fc-bbf4-e04d277205b0_fixed.java
index 939f49b..4cdd608 100644
--- a/tmp/de1960fa-e9a1-429d-b99d-75de26b27c17_buggy.java
+++ b/tmp/265deb7c-70e0-44fc-bbf4-e04d277205b0_fixed.java
@@ -1,21 +1,18 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+    if (n.getType() == Token.GETPROP) { // Simple property
+      Node child = n.getFirstChild().getNext();
+      if (child.getType() == Token.STRING && child.getString().equals("prototype")) {
+        return true;
+      }
+    } else if (n.getType() == Token.GETELEM) { // Computed property
+      Node child = n.getFirstChild().getNext().getFirstChild();
+      if (child.getType() == Token.STRING && child.getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
