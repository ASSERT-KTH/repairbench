diff --git a/tmp/b69870af-c8b2-4786-939f-7f2467756eee_buggy.java b/tmp/041aea6c-a494-4286-ab01-4ac2f8014ec0_fixed.java
index 939f49b..cd6136e 100644
--- a/tmp/b69870af-c8b2-4786-939f-7f2467756eee_buggy.java
+++ b/tmp/041aea6c-a494-4286-ab01-4ac2f8014ec0_fixed.java
@@ -1,21 +1,20 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
-            return true;
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+    boolean isPrototype = false;
+    if (n.getType() == Token.GETPROP) {
+      Node firstChild = n.getFirstChild();
+      Node prop = firstChild.getLastChild();
+      if (prop.getType() == Token.STRING && "prototype".equals(prop.getString())) {
+        isPrototype = true;
+      } else if (firstChild.getType() == Token.GETPROP && NodeUtil.isName(firstChild.getLastChild(), "prototype")) {
+        prop = firstChild.getFirstChild().getLastChild();
+        if (prop.getType() == Token.STRING && "prototype".equals(prop.getString())) {
+          isPrototype = true;
         }
       }
     }
-
+    return isPrototype;
+  }
   return false;
 }
\ No newline at end of file
