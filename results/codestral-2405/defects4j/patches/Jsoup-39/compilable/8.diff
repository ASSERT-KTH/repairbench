diff --git a/tmp/219ecb24-a99b-441f-acd7-0972d037828d_buggy.java b/tmp/c239aea0-9de6-406c-bb68-7ccc5a8a1470_fixed.java
index c4b260c..92106e3 100644
--- a/tmp/219ecb24-a99b-441f-acd7-0972d037828d_buggy.java
+++ b/tmp/c239aea0-9de6-406c-bb68-7ccc5a8a1470_fixed.java
@@ -1,51 +1,61 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) {
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+        if (meta != null) {
+            String foundCharset = getCharsetFromMeta(meta); // Extracted common logic into a separate method
+            if (foundCharset != null && !foundCharset.equals(defaultCharset)) {
+                docData = Charset.forName(foundCharset).decode(byteData).toString();
+                charsetName = foundCharset;
+                doc = parser.parseInput(docData, baseUri); // Re-parse document data after charset has been changed
+            }
+        }
+        byteData.rewind();
+    } else {
+        Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+    }
+
+    // UTF-8 BOM indicator
+    if (docData.length() > 0 && docData.charAt(0) == 65279) {
+        docData = docData.substring(1);
+        byteData.rewind();
+        if (charsetName == null || charsetName.equals(defaultCharset)) {
+            charsetName = "UTF-8";
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+            doc = parser.parseInput(docData, baseUri); // Re-parse document data after BOM has been removed
+        }
+    }
+
+    if (doc == null) {
+        doc = parser.parseInput(docData, baseUri);
+    }
+    doc.outputSettings().charset(charsetName);
+    return doc;
+}
+
+private static String getCharsetFromMeta(Element meta) {
+    String foundCharset = null;
     if (meta.hasAttr("http-equiv")) {
         foundCharset = getCharsetFromContentType(meta.attr("content"));
         if (foundCharset == null && meta.hasAttr("charset")) {
             try {
                 if (Charset.isSupported(meta.attr("charset"))) {
                     foundCharset = meta.attr("charset");
                 }
             } catch (IllegalCharsetNameException e) {
                 foundCharset = null;
             }
         }
     } else {
         foundCharset = meta.attr("charset");
     }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+    if (foundCharset != null) {
         foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
     }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
-        }
-        return doc;
+    return foundCharset;
 }
\ No newline at end of file
