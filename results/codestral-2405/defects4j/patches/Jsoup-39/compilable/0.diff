diff --git a/tmp/b8a7f1aa-d978-4330-b0e5-5f601dfe3a24_buggy.java b/tmp/5ebebb23-8dfa-4a39-94f5-450c58dde8f4_fixed.java
index c4b260c..347a275 100644
--- a/tmp/b8a7f1aa-d978-4330-b0e5-5f601dfe3a24_buggy.java
+++ b/tmp/5ebebb23-8dfa-4a39-94f5-450c58dde8f4_fixed.java
@@ -1,51 +1,44 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) {
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                    if (foundCharset == null && meta.hasAttr("charset")) {
-                        try {
-                            if (Charset.isSupported(meta.attr("charset"))) {
-                                foundCharset = meta.attr("charset");
-                            }
-                        } catch (IllegalCharsetNameException e) {
-                            foundCharset = null;
-                        }
-                    }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+        if (meta != null) {
+            String foundCharset = getCharsetFromMeta(meta);
+            if (foundCharset != null && !foundCharset.equals(defaultCharset)) {
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
     if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
+        charsetName = "UTF-8";
     }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
+    if (doc == null) doc = parser.parseInput(docData, baseUri);
     doc.outputSettings().charset(charsetName);
-        }
     return doc;
 }
+
+private static String getCharsetFromMeta(Element meta) {
+    String foundCharset = null;
+    if (meta.hasAttr("http-equiv")) {
+        foundCharset = getCharsetFromContentType(meta.attr("content"));
+        if (foundCharset == null && meta.hasAttr("charset")) {
+            try {
+                if (Charset.isSupported(meta.attr("charset"))) foundCharset = meta.attr("charset");
+            } catch (IllegalCharsetNameException e) {
+                foundCharset = null;
+            }
+        }
+    } else foundCharset = meta.attr("charset");
+    if (foundCharset != null) foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+    return foundCharset;
+}
\ No newline at end of file
