diff --git a/tmp/53d9bb9f-14e6-437c-8b6d-448d21d67907_buggy.java b/tmp/4d23b47a-7cde-4736-9b7e-71ca271bd64c_fixed.java
index 7d8d756..953c02b 100644
--- a/tmp/53d9bb9f-14e6-437c-8b6d-448d21d67907_buggy.java
+++ b/tmp/4d23b47a-7cde-4736-9b7e-71ca271bd64c_fixed.java
@@ -1,48 +1,54 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
-        if (p.canReadTypeId()) {
+    JsonToken token = p.getCurrentToken();
+    if (token == JsonToken.START_OBJECT && p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
+
     // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+    if (token != JsonToken.START_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                 "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
     }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
+
+    // Consume the START_OBJECT if it hasn't been consumed yet
+    if (token != JsonToken.FIELD_NAME) {
+        token = p.nextToken();
     }
+
+    // If the token is a FIELD_NAME, it is likely to be a type ID
+    if (token == JsonToken.FIELD_NAME) {
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
+        token = p.nextToken();
 
-        // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
+        // Check for TYPE_ID wrap, if needed
+        if (_typeIdVisible && token == JsonToken.START_OBJECT) {
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
+            token = p.nextToken();
         }
 
         Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
+
+        // Consume the END_OBJECT after deserializing the value
+        token = p.nextToken();
+        if (token != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
+
         return value;
     }
+
+    throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+            "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
+}
\ No newline at end of file
