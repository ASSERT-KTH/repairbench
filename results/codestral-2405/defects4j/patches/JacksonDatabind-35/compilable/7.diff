diff --git a/tmp/e3483eca-6051-45be-92e0-f9b27d9cb427_buggy.java b/tmp/48482fec-61bb-4140-8f08-d07fcd5d9c09_fixed.java
index 7d8d756..0494443 100644
--- a/tmp/e3483eca-6051-45be-92e0-f9b27d9cb427_buggy.java
+++ b/tmp/48482fec-61bb-4140-8f08-d07fcd5d9c09_fixed.java
@@ -1,48 +1,31 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
-    @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
-        // 02-Aug-2013, tatu: May need to use native type ids
-        if (p.canReadTypeId()) {
-            Object typeId = p.getTypeId();
-            if (typeId != null) {
-                return _deserializeWithNativeTypeId(p, ctxt, typeId);
-            }
-        }
-        // first, sanity checks
+    // previous code...
+
     if (p.getCurrentToken() != JsonToken.START_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                 "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
     }
-            // should always get field name, but just in case...
+
     if (p.nextToken() != JsonToken.FIELD_NAME) {
         throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                 "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
     }
     final String typeId = p.getText();
+    // Consume the FIELD_NAME and expect the following value to be START_OBJECT
+    if (p.nextToken() != JsonToken.START_OBJECT) {
+        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                "Expected START_OBJECT after type id");
+    }
+
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
-
-        // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
-            tb.writeFieldName(_typePropertyName);
-            tb.writeString(typeId);
-            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
-        }
-        
     Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
+
+    // Check for END_OBJECT after deserialization
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                 "expected closing END_OBJECT after type information and deserialized value");
     }
+
     return value;
 }
\ No newline at end of file
