diff --git a/tmp/1f35dbac-4ee8-4609-81e6-c30488c5178b_buggy.java b/tmp/bfd25f04-3930-4e61-a813-e4e6aeb46975_fixed.java
index addeb8d..904e316 100644
--- a/tmp/1f35dbac-4ee8-4609-81e6-c30488c5178b_buggy.java
+++ b/tmp/bfd25f04-3930-4e61-a813-e4e6aeb46975_fixed.java
@@ -1,38 +1,39 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      *
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
-        startIndex = (startIndex < 0 ? 0 : startIndex);
-        if (str == null || startIndex >= size) {
+        startIndex = Math.max(startIndex, 0);
+        if (str == null || startIndex >= length()) {
             return -1;
         }
         int strLen = str.length();
         if (strLen == 1) {
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
             return startIndex;
         }
-        if (strLen > size) {
+        if (strLen > length()) {
             return -1;
         }
+        char[] strBuf = str.toCharArray();
         char[] thisBuf = buffer;
         int len = thisBuf.length - strLen;
         outer:
-        for (int i = startIndex; i < len; i++) {
+        for (int i = startIndex; i <= len; i++) {
             for (int j = 0; j < strLen; j++) {
-                if (str.charAt(j) != thisBuf[i + j]) {
+                if (strBuf[j] != thisBuf[i + j]) {
                     continue outer;
                 }
             }
             return i;
         }
         return -1;
     }
\ No newline at end of file
