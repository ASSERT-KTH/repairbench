diff --git a/tmp/2585e109-271b-402d-9f92-e9220d5656ca_buggy.java b/tmp/19643787-4523-4279-a90d-db9676234449_fixed.java
index 03b03d7..69069ce 100644
--- a/tmp/2585e109-271b-402d-9f92-e9220d5656ca_buggy.java
+++ b/tmp/19643787-4523-4279-a90d-db9676234449_fixed.java
@@ -1,25 +1,21 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
 
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
 
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    long[] offsets = getOffsetsByLocal(local);
+    if (offsets.length == 1) {
+        return instant;  // not an overlap
+    } else if (offsets.length == 2) {
+        return convertLocalToUTC(local, false, earlierOrLater ? offsets[1] : offsets[0]);
+    } else {
+        throw new IllegalStateException("Unexpected number of offsets");
+    }
 }
\ No newline at end of file
