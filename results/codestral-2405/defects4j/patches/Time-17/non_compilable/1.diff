diff --git a/tmp/78ca7aa4-1b20-4be0-ab9a-48e02fc4e50f_buggy.java b/tmp/65e025dc-0dee-4229-802e-9d32dc2598ec_fixed.java
index 03b03d7..97a6bd1 100644
--- a/tmp/78ca7aa4-1b20-4be0-ab9a-48e02fc4e50f_buggy.java
+++ b/tmp/65e025dc-0dee-4229-802e-9d32dc2598ec_fixed.java
@@ -1,25 +1,28 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
 
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
 
-        // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long[] offsets = getOffsetValues(local);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    if (offsets.length == 2) {
+        // if there is a DST transition, choose the earlier or later offset based on the input parameter
+        return convertLocalToUTC(local, false, earlierOrLater ? offsets[1] : offsets[0]);
+    }
+
+    return convertLocalToUTC(local, false, offsets[0]);
+}
+
+private long[] getOffsetValues(long local) {
+    long[] offsets = new long[getOffset(local)];
+    for (int i = 0; i < offsets.length; i++) {
+        offsets[i] = getOffset(local, i);
+    }
+    return offsets;
 }
\ No newline at end of file
