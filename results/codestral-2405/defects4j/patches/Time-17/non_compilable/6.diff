diff --git a/tmp/45ed183c-d1ef-4d95-b1b1-7c56bba84dbb_buggy.java b/tmp/dc59ba08-1955-40a7-8bf8-143648b3dd42_fixed.java
index 03b03d7..c643ec5 100644
--- a/tmp/45ed183c-d1ef-4d95-b1b1-7c56bba84dbb_buggy.java
+++ b/tmp/dc59ba08-1955-40a7-8bf8-143648b3dd42_fixed.java
@@ -1,25 +1,16 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
+    // Work out if we're in an overlap / gap
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        return instant;  // Not an overlap (less than is a gap, equal is normal case)
     }
 
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    // We are in an overlap
+    long targetLocal = convertUTCToLocal(instant);
+    long potentialUTCEarlier = convertLocalToUTCEarlier(targetLocal);
+    long potentialUTCLater = convertLocalToUTCLater(targetLocal);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Return the appropriate potential timestamp based on earlierOrLater
+    return earlierOrLater ? potentialUTCEarlier : potentialUTCLater;
 }
\ No newline at end of file
