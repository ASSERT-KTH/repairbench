diff --git a/tmp/7314dfd8-b43f-42f9-b2f9-73871eb433f8_buggy.java b/tmp/8fd9883e-e5fc-4f80-b3be-dd39567bef90_fixed.java
index 03b03d7..14f6596 100644
--- a/tmp/7314dfd8-b43f-42f9-b2f9-73871eb433f8_buggy.java
+++ b/tmp/8fd9883e-e5fc-4f80-b3be-dd39567bef90_fixed.java
@@ -1,25 +1,13 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
-        }
-        
-        // work out range of instants that have duplicate local times
+    long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
+    long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
+    long localBefore = convertUTCToLocal(instantBefore);
+    long localAfter = convertUTCToLocal(instantAfter);
+    if (localBefore != localAfter) {
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        long localInstant = earlierOrLater ? localAfter : localBefore;
+        return convertLocalToUTC(local, false, localInstant);
+    }
+    return instant;
 }
\ No newline at end of file
