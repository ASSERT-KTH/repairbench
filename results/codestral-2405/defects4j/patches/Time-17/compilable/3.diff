diff --git a/tmp/3cb51931-6ed6-4e90-a196-8531ac850680_buggy.java b/tmp/5f465fee-6905-4923-8df8-8abebe706284_fixed.java
index 03b03d7..69ec9d4 100644
--- a/tmp/3cb51931-6ed6-4e90-a196-8531ac850680_buggy.java
+++ b/tmp/5f465fee-6905-4923-8df8-8abebe706284_fixed.java
@@ -1,25 +1,19 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        return instant;  // not an overlap
     }
 
-        // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
+    if (local == instantBefore) {
+        // there are at least two suitable offsets
+        return convertLocalToUTC(local, true, earlierOrLater ? instantAfter : instantBefore);
+    } else if (local == instantAfter) {
+        // there are at least two suitable offsets
         return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    } else {
+        // local falls between the two instants, not an overlap
+        return instant;
+    }
 }
\ No newline at end of file
