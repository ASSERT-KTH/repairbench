diff --git a/tmp/c6ce4b70-94e6-4606-a53b-c2bd15037582_buggy.java b/tmp/36b8ae97-3602-4755-ba68-dca4c073321f_fixed.java
index 03b03d7..aa42540 100644
--- a/tmp/c6ce4b70-94e6-4606-a53b-c2bd15037582_buggy.java
+++ b/tmp/36b8ae97-3602-4755-ba68-dca4c073321f_fixed.java
@@ -1,25 +1,22 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      *
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
 
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
-        }
+        int offset = getOffset(instant);
+        long transition = nextTransition(instant);
 
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        if (offset != getOffset(transition)) { // in gap or overlap
+            if (earlierOrLater && offset < getOffset(transition)) {  // in gap
+                return transition;
+            } else if (!earlierOrLater && offset > getOffset(transition)) { // in overlap
+                return transition;
+            }
+        }
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        return instant;
     }
\ No newline at end of file
