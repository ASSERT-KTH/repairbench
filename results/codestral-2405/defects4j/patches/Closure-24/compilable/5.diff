diff --git a/tmp/848386d2-6c0e-4190-a738-12b8d9e92300_buggy.java b/tmp/3cc7215e-c6c5-4e4d-866e-0f3a08e26fc2_fixed.java
index 602226b..d0ca58e 100644
--- a/tmp/848386d2-6c0e-4190-a738-12b8d9e92300_buggy.java
+++ b/tmp/3cc7215e-c6c5-4e4d-866e-0f3a08e26fc2_fixed.java
@@ -1,26 +1,14 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+    if (type == Token.VAR) {
       String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
-          transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+      Node initialValue = v.getInitialValue();
+      if (initialValue != null && !initialValue.isQualifiedName()) {
+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);
       }
     }
   }
 }
\ No newline at end of file
