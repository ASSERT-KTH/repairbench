diff --git a/tmp/5c6453dc-0078-4a19-b4b5-6913922a47bd_buggy.java b/tmp/25063e4a-41fb-46e5-a0ce-38e1ccf238c8_fixed.java
index 602226b..8a07da8 100644
--- a/tmp/5c6453dc-0078-4a19-b4b5-6913922a47bd_buggy.java
+++ b/tmp/25063e4a-41fb-46e5-a0ce-38e1ccf238c8_fixed.java
@@ -1,26 +1,22 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+    if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {
       String name = n.getString();
       Var aliasVar = scope.getVar(name);
       aliases.put(name, aliasVar);
 
       String qualifiedName =
           aliasVar.getInitialValue().getQualifiedName();
       transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+    } else if (parent.isScript() && n.isName() && scope.getVar(n.getString()) != null) {
+      // Do nothing for named variables that are not aliases.
     } else {
-          // TODO(robbyw): Support using locals for private variables.
+      // Report error for unsupported cases.
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
-    }
