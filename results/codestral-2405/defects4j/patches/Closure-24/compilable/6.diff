diff --git a/tmp/43aeaf93-490f-42bf-98bf-dced18139909_buggy.java b/tmp/4c45840a-df05-4ce0-8f9d-121143357497_fixed.java
index 602226b..06a09ae 100644
--- a/tmp/43aeaf93-490f-42bf-98bf-dced18139909_buggy.java
+++ b/tmp/4c45840a-df05-4ce0-8f9d-121143357497_fixed.java
@@ -1,26 +1,29 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
+    Node init = v.getInitialValue();
+    if (init != null) {
+      int type = init.getType();
       Node parent = n.getParent();
       if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+        if (init.hasChildren() && init.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
+          if (aliasVar != null) {
             aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+          }
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          // Check if the initial value is a local variable or a function.
+          // If so, then we report an error.
+          if (init.isName() || init.isFunction()) {
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
+  }
+}
\ No newline at end of file
