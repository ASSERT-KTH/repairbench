diff --git a/tmp/0f970342-c8c8-4443-8734-f7ac7f46915a_buggy.java b/tmp/9465b7e3-4253-4481-8f3b-e912cab9ab5c_fixed.java
index 602226b..266ef57 100644
--- a/tmp/0f970342-c8c8-4443-8734-f7ac7f46915a_buggy.java
+++ b/tmp/9465b7e3-4253-4481-8f3b-e912cab9ab5c_fixed.java
@@ -1,26 +1,23 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+      }
+    } else if (n.hasInitialValue() &&
+               n.getInitialValue().isQualifiedName() &&
+               n.getInitialValue().getString().startsWith("goog")) {
+        // Do nothing, as initial value is a qualified name that starts with "goog"
     } else {
-          // TODO(robbyw): Support using locals for private variables.
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
-    }
