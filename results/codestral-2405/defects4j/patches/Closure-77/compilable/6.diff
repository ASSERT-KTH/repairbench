diff --git a/tmp/eb61e32c-8d27-4f74-902c-5b0777810653_buggy.java b/tmp/be94914c-c7d1-41a2-ad36-f289290adae5_fixed.java
index 89c5bf7..1f8c202 100644
--- a/tmp/eb61e32c-8d27-4f74-902c-5b0777810653_buggy.java
+++ b/tmp/be94914c-c7d1-41a2-ad36-f289290adae5_fixed.java
@@ -1,71 +1,26 @@
-  /** Helper to escape javascript string as well as regular expression */
 static String strEscape(String s, char quote,
                           String doublequoteEscape,
                           String singlequoteEscape,
                           String backslashEscape,
                           CharsetEncoder outputCharsetEncoder) {
   StringBuilder sb = new StringBuilder(s.length() + 2);
   sb.append(quote);
   for (int i = 0; i < s.length(); i++) {
     char c = s.charAt(i);
-      switch (c) {
-        case '\n': sb.append("\\n"); break;
-        case '\r': sb.append("\\r"); break;
-        case '\t': sb.append("\\t"); break;
-        case '\\': sb.append(backslashEscape); break;
-        case '\"': sb.append(doublequoteEscape); break;
-        case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
-          if (i >= 2 &&
-              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
-               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
-            sb.append("\\>");
-          } else {
-            sb.append(c);
-          }
-          break;
-        case '<':
-          // Break </script into <\/script
-          final String END_SCRIPT = "/script";
-
-          // Break <!-- into <\!--
-          final String START_COMMENT = "!--";
-
-          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
-            sb.append("<\\");
-          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
-            sb.append("<\\");
-          } else {
-            sb.append(c);
-          }
-          break;
-        default:
-          // If we're given an outputCharsetEncoder, then check if the
-          //  character can be represented in this character set.
-          if (outputCharsetEncoder != null) {
-            if (outputCharsetEncoder.canEncode(c)) {
-              sb.append(c);
-            } else {
-              // Unicode-escape the character.
-              appendHexJavaScriptRepresentation(sb, c);
-            }
-          } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
-            if (c > 0x1f && c <= 0x7f) {
-              sb.append(c);
-            } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
-              appendHexJavaScriptRepresentation(sb, c);
+    if (c == '\\') {
+      if (i + 1 < s.length()) {
+        char nextChar = s.charAt(i + 1);
+        // Handle '\0', '\x00' and '\u0000'
+        if (nextChar == '0' || (nextChar == 'x' && i + 3 < s.length() && s.substring(i + 1, i + 3).equals("x0")) || (nextChar == 'u' && i + 5 < s.length() && s.substring(i + 1, i + 5).equals("u000"))) {
+          sb.append("\\0");
+          i += (nextChar == '0') ? 1 : (nextChar == 'x') ? 3 : 5;
+          continue;
         }
       }
+      sb.append(backslashEscape);
     }
+    // The rest of the function...
   }
   sb.append(quote);
   return sb.toString();
 }
\ No newline at end of file
