diff --git a/tmp/88d6856b-e9b0-4343-8eef-d7a0fa79ab08_buggy.java b/tmp/0525e8e3-b3dd-4b68-85d8-8735a166f3d5_fixed.java
index 9353941..cea88f9 100644
--- a/tmp/88d6856b-e9b0-4343-8eef-d7a0fa79ab08_buggy.java
+++ b/tmp/0525e8e3-b3dd-4b68-85d8-8735a166f3d5_fixed.java
@@ -1,30 +1,30 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+        // Still a kill since it's the left-hand side of an assignment
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
+    if (n.isAnd() || n.isOr()) {
+      // If we encounter a logical AND or OR, we return MAYBE_LIVE because
+      // the right-hand side may not be evaluated.
+      return VariableLiveness.MAYBE_LIVE;
+    } else {
       // Expressions are evaluated left-right, depth first.
       for (Node child = n.getFirstChild();
           child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
           VariableLiveness state = isVariableReadBeforeKill(child, variable);
           if (state != VariableLiveness.MAYBE_LIVE) {
             return state;
           }
         }
       }
+    }
+
     return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
