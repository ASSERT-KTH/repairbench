diff --git a/tmp/dd65db4d-ed2f-414c-86d0-2ef59cb98262_buggy.java b/tmp/1b346ba0-cedd-4efd-9581-dccf8fd428a1_fixed.java
index 9353941..395e9ac 100644
--- a/tmp/dd65db4d-ed2f-414c-86d0-2ef59cb98262_buggy.java
+++ b/tmp/1b346ba0-cedd-4efd-9581-dccf8fd428a1_fixed.java
@@ -1,30 +1,29 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
         if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+            // This is a KILL, but we only return READ if there's no other READ before this
+            // We need to check all left siblings to see if they are READ
+            Node sibling = n.getPreviousSibling();
+            while (sibling != null) {
+                if (isVariableReadBeforeKill(sibling, variable) == VariableLiveness.READ) {
+                    return VariableLiveness.READ;
+                }
+                sibling = sibling.getPreviousSibling();
+            }
             return VariableLiveness.KILL;
         } else {
             return VariableLiveness.READ;
         }
     }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+    // Recursively check children
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
             VariableLiveness state = isVariableReadBeforeKill(child, variable);
             if (state != VariableLiveness.MAYBE_LIVE) {
                 return state;
             }
         }
     }
     return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
