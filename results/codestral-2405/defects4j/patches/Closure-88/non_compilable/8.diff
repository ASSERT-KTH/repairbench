diff --git a/tmp/22eae3f3-93b5-48dc-ba1f-44f660c02aa0_buggy.java b/tmp/6c17bcdd-39c4-45f8-b780-346ee7577d79_fixed.java
index 9353941..3e0cf67 100644
--- a/tmp/22eae3f3-93b5-48dc-ba1f-44f660c02aa0_buggy.java
+++ b/tmp/6c17bcdd-39c4-45f8-b780-346ee7577d79_fixed.java
@@ -1,30 +1,26 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable, boolean isLeftInAndOr) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+        if (isLeftInAndOr && NodeUtil.isLhs(n, n.getParent())) {
+            // If the variable is assigned a new value while in 'and' or 'or' condition,
+            // it should be treated as 'KILL' automatically.
+            return VariableLiveness.KILL;
+        } else if (NodeUtil.isLhs(n, n.getParent())) {
+            // The assignment occurs after the RHS is evaluated.
             return VariableLiveness.KILL;
         } else {
+            // If not, it's a read.
             return VariableLiveness.READ;
         }
     }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
+            boolean childIsLeftInAndOr = NodeUtil.isAndOrNode(n);
+            VariableLiveness state = isVariableReadBeforeKill(child, variable, childIsLeftInAndOr);
             if (state != VariableLiveness.MAYBE_LIVE) {
                 return state;
             }
         }
     }
     return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
