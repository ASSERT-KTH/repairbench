diff --git a/tmp/bcf6e747-26fc-4e7a-8778-afcc5bbb5bab_buggy.java b/tmp/471aa724-9051-4d4a-8598-d6312fef871d_fixed.java
index 9353941..988aa20 100644
--- a/tmp/bcf6e747-26fc-4e7a-8778-afcc5bbb5bab_buggy.java
+++ b/tmp/471aa724-9051-4d4a-8598-d6312fef871d_fixed.java
@@ -1,30 +1,26 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+    if (n.getParent() != null && NodeUtil.isLhs(n, n.getParent()) && n.getParent() != n.getGrandparent().getFirstChild()) {
       return VariableLiveness.KILL;
-      } else {
+    }
+    if (n.getParent() != null && NodeUtil.isLhs(n, n.getParent()) && n.getParent() == n.getGrandparent().getFirstChild()) {
+      return VariableLiveness.MAYBE_LIVE;
+    }
+    else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
        child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
