diff --git a/tmp/b35475d7-91b9-44e2-a67d-0ba1f78fb8f4_buggy.java b/tmp/a61c440d-f24f-4fc7-a20d-f4dfad11ca40_fixed.java
index 9353941..2738227 100644
--- a/tmp/b35475d7-91b9-44e2-a67d-0ba1f78fb8f4_buggy.java
+++ b/tmp/a61c440d-f24f-4fc7-a20d-f4dfad11ca40_fixed.java
@@ -1,30 +1,27 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
-        return VariableLiveness.KILL;
-      } else {
+    Node parent = n.getParent();
+    if (NodeUtil.isAssignmentOp(parent) && NodeUtil.isRhs(n, parent)) {
+      // If variable is on the right of an assignment node and
+      // it's not an initialization, it's a read.
+      if (!NodeUtil.isDeclaration(parent) && NodeUtil.isLhs(n, parent)) {
         return VariableLiveness.READ;
       }
+      // If variable is on the left of an assignment node, it's a KILL.
+      if (NodeUtil.isLhs(n, parent)) {
+        return VariableLiveness.KILL;
+      }
+    }
   }
 
   // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
