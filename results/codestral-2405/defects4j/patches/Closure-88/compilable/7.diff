diff --git a/tmp/b9a166ec-dee0-4d12-9157-8a119726c35f_buggy.java b/tmp/f08cc569-6dc9-4c2a-9712-aa344803db07_fixed.java
index 9353941..50fb3b2 100644
--- a/tmp/b9a166ec-dee0-4d12-9157-8a119726c35f_buggy.java
+++ b/tmp/f08cc569-6dc9-4c2a-9712-aa344803db07_fixed.java
@@ -1,30 +1,37 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
+    if (NodeUtil.isName(n)) {
+        if (variable.equals(n.getString())) {
             if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
                 return VariableLiveness.KILL;
             } else {
                 return VariableLiveness.READ;
             }
         }
+        else if (NodeUtil.isLhs(n, n.getParent())) {
+            return VariableLiveness.MAYBE_LIVE;
+        }
+    }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
             VariableLiveness state = isVariableReadBeforeKill(child, variable);
             if (state != VariableLiveness.MAYBE_LIVE) {
+                // If variable is killed or read in child, then in the parent, it must be read after it's killed
+                if(state == VariableLiveness.KILL ||
+                        (state == VariableLiveness.READ && NodeUtil.isLhs(n, n.getParent()))) {
+                    return VariableLiveness.READ;
+                }
+                else {
                     return state;
                 }
             }
         }
+    }
+
+    // If variable is assigned in this node, then it's killed, unless it's read later in this node
+    if (NodeUtil.isLhs(n, n.getParent())) {
+        return VariableLiveness.KILL;
+    }
+
     return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
