diff --git a/tmp/55ef5c58-5c2c-4549-b02b-3711e39d78f0_buggy.java b/tmp/159acf5e-bf76-480d-b24b-d0a20e3897f4_fixed.java
index 9353941..0d2e03a 100644
--- a/tmp/55ef5c58-5c2c-4549-b02b-3711e39d78f0_buggy.java
+++ b/tmp/159acf5e-bf76-480d-b24b-d0a20e3897f4_fixed.java
@@ -1,30 +1,46 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      Node assignment = n.getParent();
+      Node rhs = assignment.getChildAtIndex(1);
+      if (NodeUtil.isName(rhs) && rhs.getString().equals(variable)) {
+        // If the right-hand side of the assignment is the same variable,
+        // then it is not a new assignment and should not be considered a KILL.
+        return VariableLiveness.MAYBE_LIVE;
+      }
+      // If the right-hand side of the assignment is a different variable or
+      // an expression, then it is a new assignment and should be considered a KILL.
       return VariableLiveness.KILL;
     } else {
+      // If the variable is not on the left-hand side of an assignment,
+      // then it must be read before a later assignment or kill.
+      // Check if there is a later assignment to the variable.
+      boolean readBeforeKill = false;
+      for (Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) {
+        if (NodeUtil.isName(sibling) && variable.equals(sibling.getString()) &&
+            NodeUtil.isLhs(sibling, sibling.getParent())) {
+          readBeforeKill = true;
+          break;
+        }
+      }
+      if (readBeforeKill) {
         return VariableLiveness.READ;
+      } else {
+        // If there is no later assignment to the variable,
+        // then it must be read before a kill.
+        return VariableLiveness.MAYBE_LIVE;
+      }
     }
   }
 
   // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
