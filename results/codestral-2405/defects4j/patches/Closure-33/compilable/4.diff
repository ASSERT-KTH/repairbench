diff --git a/tmp/4349a6f9-6777-414b-8961-6b51d8308316_buggy.java b/tmp/6626c496-8bd9-4088-9833-cf6e6b50fd2b_fixed.java
index fb2b020..c03ae24 100644
--- a/tmp/4349a6f9-6777-414b-8961-6b51d8308316_buggy.java
+++ b/tmp/6626c496-8bd9-4088-9833-cf6e6b50fd2b_fixed.java
@@ -1,27 +1,14 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
+      JSType objPropType = getPropertyType(prop);
+
       if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
+        JSType typeToInfer = objPropType == null ? propType : objPropType.getLeastSupertype(propType);
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
