diff --git a/tmp/d1c94f91-6ef8-414c-8a20-f071c87cedfb_buggy.java b/tmp/f800a9f3-e97c-4ccf-845c-6bd8344403fc_fixed.java
index fb2b020..a01d47e 100644
--- a/tmp/d1c94f91-6ef8-414c-8a20-f071c87cedfb_buggy.java
+++ b/tmp/f800a9f3-e97c-4ccf-845c-6bd8344403fc_fixed.java
@@ -1,27 +1,21 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+        JSType typeToInfer;
+        if (hasProperty(prop)) {
+          typeToInfer = getPropertyType(prop);
+          typeToInfer = typeToInfer.getLeastSupertype(propType);
+        } else {
+          typeToInfer = propType;
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
