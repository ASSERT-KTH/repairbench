diff --git a/tmp/12f167da-f966-4d81-a6a3-fe525050f3cd_buggy.java b/tmp/871a511e-689f-4551-9eaf-ff24e0a299a3_fixed.java
index fb2b020..4f0b39b 100644
--- a/tmp/12f167da-f966-4d81-a6a3-fe525050f3cd_buggy.java
+++ b/tmp/871a511e-689f-4551-9eaf-ff24e0a299a3_fixed.java
@@ -1,27 +1,16 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+          // The bug was here. We should always use propType for type inference if the property is not present.
+          typeToInfer = typeToInfer.restrictByNotNullOrUndefined();
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
