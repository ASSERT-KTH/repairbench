diff --git a/tmp/3a7fd28a-71eb-49ca-8730-42fdae700dd6_buggy.java b/tmp/c94553ac-5f78-4a65-8223-e533e1eaf117_fixed.java
index fb2b020..aed4994 100644
--- a/tmp/3a7fd28a-71eb-49ca-8730-42fdae700dd6_buggy.java
+++ b/tmp/c94553ac-5f78-4a65-8223-e533e1eaf117_fixed.java
@@ -1,27 +1,23 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+  // Handle the case where the constraint object is a record type
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+        if (hasProperty(prop) && getPropertyJSType(prop).isEquivalentTo(propType)) {
+          // If the property already exists and its type matches the constraint type, do nothing.
+          continue;
+        } else if (hasProperty(prop) && !getPropertyJSType(prop).isUnknownType()) {
+          // If the property already exists with another type, find the least supertype.
+          typeToInfer = getNativeType(JSTypeNative.UNKNOWN_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
