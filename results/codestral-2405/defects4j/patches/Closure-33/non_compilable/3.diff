diff --git a/tmp/62145021-de59-422b-a027-c03e45d94896_buggy.java b/tmp/b5a0874e-07b2-4b61-81fc-ca1b6d6c3a2a_fixed.java
index fb2b020..15e846b 100644
--- a/tmp/62145021-de59-422b-a027-c03e45d94896_buggy.java
+++ b/tmp/b5a0874e-07b2-4b61-81fc-ca1b6d6c3a2a_fixed.java
@@ -1,27 +1,24 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                         .getLeastSupertype(propType);
+                } else {
+                    // If the property type is an object, recursively call matchConstraint
+                    if (propType.isObjectType()) {
+                        ObjectType objectPropType = propType.toObjectType();
+                        if (isPropertyTypeSubtype(prop, objectPropType)) {
+                            getProperty(prop).toObjectType().matchConstraint(objectPropType);
+                        }
+                    }
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
