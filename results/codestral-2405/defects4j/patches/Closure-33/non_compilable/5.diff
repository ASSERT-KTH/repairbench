diff --git a/tmp/4501f0b6-cf68-44d4-a366-d1ebbb3c88ec_buggy.java b/tmp/b718a455-49c9-452c-8e8b-ed1b6668d9a1_fixed.java
index fb2b020..247ec74 100644
--- a/tmp/4501f0b6-cf68-44d4-a366-d1ebbb3c88ec_buggy.java
+++ b/tmp/b718a455-49c9-452c-8e8b-ed1b6668d9a1_fixed.java
@@ -1,27 +1,19 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
+        if (!hasProperty(prop) || !getDeclaredTypeOfProperty(prop).isSubtype(propType)) {
+          typeToInfer = propType;
+        } else if (hasProperty(prop) && !getTypeOfThisProperty(prop).isSubtype(propType)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
