diff --git a/tmp/3cba809b-448a-4d2a-9df6-4274b2c79a02_buggy.java b/tmp/094cd132-ec6d-40e9-9520-de865b62f430_fixed.java
index fa6828a..ab7eabf 100644
--- a/tmp/3cba809b-448a-4d2a-9df6-4274b2c79a02_buggy.java
+++ b/tmp/094cd132-ec6d-40e9-9520-de865b62f430_fixed.java
@@ -1,5 +1,26 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+    List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+    for(Field field : fields) {
+        List<Object> compatibleMocks = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);
+        if (!compatibleMocks.isEmpty()) {
+            Object bestMatchingMock = getBestMatchingMock(compatibleMocks, field);
+            mockInjector.inject(bestMatchingMock, field, fieldInstance);
         }
     }
+}
+
+private Object getBestMatchingMock(List<Object> compatibleMocks, Field field) {
+    return compatibleMocks.stream()
+            .sorted((mock1, mock2) -> {
+                Class<?> fieldType = field.getType();
+                if (fieldType.isAssignableFrom(mock1.getClass()) && !fieldType.isAssignableFrom(mock2.getClass())) {
+                    return -1;
+                } else if (!fieldType.isAssignableFrom(mock1.getClass()) && fieldType.isAssignableFrom(mock2.getClass())) {
+                    return 1;
+                } else {
+                    return 0;
+                }
+            })
+            .findFirst()
+            .orElseThrow(() -> new IllegalStateException("No compatible mock found"));
+}
\ No newline at end of file
