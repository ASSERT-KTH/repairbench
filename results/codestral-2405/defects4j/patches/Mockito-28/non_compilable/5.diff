diff --git a/tmp/0f33021e-ccaf-40e1-8e83-312b4f65db28_buggy.java b/tmp/2727ed8b-2da6-43ff-9e4f-e0f460bf8ce7_fixed.java
index fa6828a..d6d1518 100644
--- a/tmp/0f33021e-ccaf-40e1-8e83-312b4f65db28_buggy.java
+++ b/tmp/2727ed8b-2da6-43ff-9e4f-e0f460bf8ce7_fixed.java
@@ -1,5 +1,28 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
     for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        List<Object> filteredMocks = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);
+        if (!filteredMocks.isEmpty()) {
+            Object bestMatchingMock = getBestMatchingMock(filteredMocks, field.getType());
+            if (bestMatchingMock != null) {
+                try {
+                    field.setAccessible(true);
+                    field.set(fieldInstance, bestMatchingMock);
+                } catch (IllegalAccessException e) {
+                    // handle exception
                 }
             }
+        }
+    }
+}
+
+private Object getBestMatchingMock(List<Object> mocks, Class<?> fieldType) {
+    Object bestMatchingMock = null;
+    for (Object mock : mocks) {
+        if (fieldType.isAssignableFrom(mock.getClass())) {
+            if (bestMatchingMock == null || fieldType.isAssignableFrom(bestMatchingMock.getClass())) {
+                bestMatchingMock = mock;
+            }
+        }
+    }
+    return bestMatchingMock;
+}
\ No newline at end of file
