diff --git a/tmp/3e285c08-be91-44bf-9fd0-3e207405d38a_buggy.java b/tmp/11b20b3b-20ab-45ef-a5fa-1316619248a1_fixed.java
index 730ab7d..b5cc947 100644
--- a/tmp/3e285c08-be91-44bf-9fd0-3e207405d38a_buggy.java
+++ b/tmp/11b20b3b-20ab-45ef-a5fa-1316619248a1_fixed.java
@@ -1,48 +1,32 @@
-    /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
-     *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
-     */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
+        if ((hasUncompressedSize || hasCompressedSize || hasRelativeHeaderOffset || hasDiskStart) &&
+            rawCentralDirectoryData.length < (DWORD * 3 + WORD)) {
+            throw new ZipException("central directory zip64 extended information extra field has insufficient data.");
         }
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
+            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
+            relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasDiskStart) {
+            if (rawCentralDirectoryData.length - offset >= WORD) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+            } else {
+                throw new ZipException("central directory zip64 extended information extra field has insufficient data for disk start.");
+            }
         }
     }
 }
\ No newline at end of file
