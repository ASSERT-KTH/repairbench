diff --git a/tmp/eb1e4c75-489e-4450-b31d-2d781d7fabf1_buggy.java b/tmp/fc18b15c-f14b-4eeb-a927-fc5b169214b1_fixed.java
index 730ab7d..b4e62bd 100644
--- a/tmp/eb1e4c75-489e-4450-b31d-2d781d7fabf1_buggy.java
+++ b/tmp/fc18b15c-f14b-4eeb-a927-fc5b169214b1_fixed.java
@@ -1,48 +1,44 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
-            }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
                 offset += WORD;
             }
+            if (offset < rawCentralDirectoryData.length) {
+                // This is an error as there should be no more data left.
+                throw new ZipException("central directory zip64 extended"
+                                       + " information extra field contains"
+                                       + " unparsed data. Expected length "
+                                       + offset + " but is "
+                                       + rawCentralDirectoryData.length);
+            }
         }
     }
\ No newline at end of file
