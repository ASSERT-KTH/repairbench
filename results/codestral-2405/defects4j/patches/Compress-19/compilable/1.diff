diff --git a/tmp/c36a83d5-4173-424d-8da5-e9b76cff482b_buggy.java b/tmp/9981dbf7-2a65-4049-b88e-d5382e0da3ff_fixed.java
index 730ab7d..cbc38a5 100644
--- a/tmp/c36a83d5-4173-424d-8da5-e9b76cff482b_buggy.java
+++ b/tmp/9981dbf7-2a65-4049-b88e-d5382e0da3ff_fixed.java
@@ -1,48 +1,43 @@
-    /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
-     *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
-     */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
         throws ZipException {
+        final int DWORD = 8;
+        final int WORD = 4;
+
         if (rawCentralDirectoryData != null) {
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
-            }
+
+            // Adjust the expectation for excess data in zip64 extra field
+            if (rawCentralDirectoryData.length >= expectedLength) {
                 int offset = 0;
                 if (hasUncompressedSize) {
                     size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                     offset += DWORD;
                 }
                 if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
+                    compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                     offset += DWORD;
                 }
                 if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                    relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                     offset += DWORD;
                 }
                 if (hasDiskStart) {
                     diskStart = new ZipLong(rawCentralDirectoryData, offset);
                     offset += WORD;
                 }
+            } else {
+                throw new ZipException("central directory zip64 extended"
+                                       + " information extra field's length"
+                                       + " doesn't match central directory"
+                                       + " data.  Expected length "
+                                       + expectedLength + " but is "
+                                       + rawCentralDirectoryData.length);
+            }
         }
     }
\ No newline at end of file
