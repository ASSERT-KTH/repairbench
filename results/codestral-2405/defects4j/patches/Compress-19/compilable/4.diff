diff --git a/tmp/ed45d0a8-d0a1-4d88-8e39-6e744a26ba2e_buggy.java b/tmp/870becce-5ab6-4266-ae46-c98edaa86b23_fixed.java
index 730ab7d..cb87072 100644
--- a/tmp/ed45d0a8-d0a1-4d88-8e39-6e744a26ba2e_buggy.java
+++ b/tmp/870becce-5ab6-4266-ae46-c98edaa86b23_fixed.java
@@ -1,48 +1,45 @@
-    /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
-     *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
-     */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
+        int expectedMinLength = (hasUncompressedSize ? DWORD : 0)
             + (hasCompressedSize ? DWORD : 0)
             + (hasRelativeHeaderOffset ? DWORD : 0)
             + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+        if (rawCentralDirectoryData.length < expectedMinLength) {
             throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
+                                   + " information extra field's length is too short."
+                                   + " Expected at least length "
+                                   + expectedMinLength + " but is "
                                    + rawCentralDirectoryData.length);
         }
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
+            if (offset >= rawCentralDirectoryData.length) {
+                throw new ZipException("Unexpected end of central directory zip64 extended information extra field.");
+            }
+            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
+            if (offset >= rawCentralDirectoryData.length) {
+                throw new ZipException("Unexpected end of central directory zip64 extended information extra field.");
+            }
+            relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasDiskStart) {
+            if (offset >= rawCentralDirectoryData.length) {
+                throw new ZipException("Unexpected end of central directory zip64 extended information extra field.");
+            }
             diskStart = new ZipLong(rawCentralDirectoryData, offset);
             offset += WORD;
         }
     }
 }
\ No newline at end of file
