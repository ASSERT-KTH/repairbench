diff --git a/tmp/105d464d-0610-45ca-8c97-fc870f2ff1c6_buggy.java b/tmp/e47daeac-a59a-4ff2-a6f1-affed535fca9_fixed.java
index ad4b0d8..0ec8da9 100644
--- a/tmp/105d464d-0610-45ca-8c97-fc870f2ff1c6_buggy.java
+++ b/tmp/e47daeac-a59a-4ff2-a6f1-affed535fca9_fixed.java
@@ -1,47 +1,38 @@
-    /**
-     * Use K-means++ to choose the initial centers.
-     *
-     * @param <T> type of the points to cluster
-     * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
-     * @param random random generator to use
-     * @return the initial centers
-     */
 private static <T extends Clusterable<T>> List<Cluster<T>>
     chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
 
     final double[] dx2 = new double[pointSet.size()];
+    double sum = 0;
     while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
+        sum = 0;
         for (int i = 0; i < pointSet.size(); i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
+            double d = p.distanceFrom(nearest.getCenter());
+            // Make sure distance is not zero to avoid div by zero errors.
+            d = Math.max(d, Double.MIN_NORMAL);
             sum += d * d;
             dx2[i] = sum;
         }
 
         // Add one new data point as a center. Each point x is chosen with
         // probability proportional to D(x)2
         final double r = random.nextDouble() * sum;
         for (int i = 0 ; i < dx2.length; i++) {
             if (dx2[i] >= r) {
                 final T p = pointSet.remove(i);
                 resultSet.add(new Cluster<T>(p));
                 break;
             }
         }
     }
 
     return resultSet;
-
 }
\ No newline at end of file
