diff --git a/tmp/d3b375ea-e605-405f-b04a-a751b814fe57_buggy.java b/tmp/71d43f77-5dc6-4c11-afb2-7d625783eca4_fixed.java
index ad4b0d8..7ab1224 100644
--- a/tmp/d3b375ea-e605-405f-b04a-a751b814fe57_buggy.java
+++ b/tmp/71d43f77-5dc6-4c11-afb2-7d625783eca4_fixed.java
@@ -1,47 +1,39 @@
-    /**
-     * Use K-means++ to choose the initial centers.
-     *
-     * @param <T> type of the points to cluster
-     * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
-     * @param random random generator to use
-     * @return the initial centers
-     */
 private static <T extends Clusterable<T>> List<Cluster<T>>
     chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
+        final double[] sumOfDistances = new double[pointSet.size()];
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            double sum = 0.0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
+                // Make sure the distance isn't zero to avoid getting stuck
+                double d = Math.max(p.distanceFrom(nearest.getCenter()), Double.MIN_VALUE);
                 sum += d * d;
-                dx2[i] = sum;
+                sumOfDistances[i] = sum;
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
+            // probability proportional to D(x)^2
+            double r = random.nextDouble() * sum;
+            for (int i = 0 ; i < sumOfDistances.length; i++) {
+                if (sumOfDistances[i] >= r) {
                     final T p = pointSet.remove(i);
                     resultSet.add(new Cluster<T>(p));
                     break;
                 }
             }
         }
 
         return resultSet;
 
     }
\ No newline at end of file
