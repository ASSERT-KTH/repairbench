diff --git a/tmp/e60936f6-aaba-4177-abf2-babbc5b01e80_buggy.java b/tmp/dd827ecd-ca18-450b-b0f0-2d914b1050a9_fixed.java
index ad4b0d8..f6d79c0 100644
--- a/tmp/e60936f6-aaba-4177-abf2-babbc5b01e80_buggy.java
+++ b/tmp/dd827ecd-ca18-450b-b0f0-2d914b1050a9_fixed.java
@@ -1,47 +1,42 @@
-    /**
-     * Use K-means++ to choose the initial centers.
-     *
-     * @param <T> type of the points to cluster
-     * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
-     * @param random random generator to use
-     * @return the initial centers
-     */
 private static <T extends Clusterable<T>> List<Cluster<T>>
 chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
-        final List<T> pointSet = new ArrayList<T>(points);
-        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
+    final List<T> pointSet = new ArrayList<>(points);
+    final List<Cluster<T>> resultSet = new ArrayList<>();
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
-        resultSet.add(new Cluster<T>(firstPoint));
+    resultSet.add(new Cluster<>(firstPoint));
 
     final double[] dx2 = new double[pointSet.size()];
     while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
+        double sum = 0;
+        int iMax = 0;
         for (int i = 0; i < pointSet.size(); i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
             final double d = p.distanceFrom(nearest.getCenter());
             sum += d * d;
             dx2[i] = sum;
+            if (d * d > dx2[iMax]) {
+                iMax = i;
             }
+        }
+
+        // Add one new data point as a center.
+        // Always add the point with the farthest distance from existing centers
+        // to ensure that the loop always makes progress.
+        final T p = pointSet.remove(iMax);
+        resultSet.add(new Cluster<>(p));
 
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
-                    break;
+        // If there are still more centers to choose, adjust the squared distances for the remaining points.
+        if (resultSet.size() < k) {
+            final double removedDistance = dx2[iMax];
+            for (int i = iMax; i < dx2.length; i++) {
+                dx2[i] -= removedDistance;
             }
         }
     }
 
     return resultSet;
-
 }
\ No newline at end of file
