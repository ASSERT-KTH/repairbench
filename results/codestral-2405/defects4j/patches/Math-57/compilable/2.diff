diff --git a/tmp/31ca2f41-30b7-438e-b8df-e0c8a2ea9e22_buggy.java b/tmp/b1e444c7-b3e6-47bb-bc98-cec25c14de66_fixed.java
index ad4b0d8..0f8f28a 100644
--- a/tmp/31ca2f41-30b7-438e-b8df-e0c8a2ea9e22_buggy.java
+++ b/tmp/b1e444c7-b3e6-47bb-bc98-cec25c14de66_fixed.java
@@ -1,47 +1,53 @@
 /**
  * Use K-means++ to choose the initial centers.
  *
  * @param <T> type of the points to cluster
  * @param points the points to choose the initial centers from
  * @param k the number of centers to choose
  * @param random random generator to use
  * @return the initial centers
  */
 private static <T extends Clusterable<T>> List<Cluster<T>>
     chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
+    double totalDistance = 0.0;
+    final double[] distances = new double[pointSet.size()];
     while (resultSet.size() < k) {
+        double maxDistance = 0.0;
         // For each data point x, compute D(x), the distance between x and
         // the nearest center that has already been chosen.
-            int sum = 0;
         for (int i = 0; i < pointSet.size(); i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+            final double d = squaredDistance(p, nearest.getCenter());
+            totalDistance += d;
+            distances[i] = Math.max(distances[i], d);
+            maxDistance = Math.max(maxDistance, distances[i]);
         }
 
         // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
+        // probability proportional to D(x)^2
+        final double r = random.nextDouble() * totalDistance;
+        for (int i = 0; i < distances.length; i++) {
+            if (r <= distances[i]) {
                 final T p = pointSet.remove(i);
                 resultSet.add(new Cluster<T>(p));
                 break;
             }
         }
     }
 
     return resultSet;
+}
 
+// Calculate squared Euclidean distance between two points
+private static <T extends Clusterable<T>> double squaredDistance(final T p, final T center) {
+    return p.distanceFrom(center) * p.distanceFrom(center);
 }
\ No newline at end of file
