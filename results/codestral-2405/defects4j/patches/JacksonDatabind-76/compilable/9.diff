diff --git a/tmp/56c37136-6a8f-4cb9-bbb3-b48517839594_buggy.java b/tmp/d3f587d0-72c7-4971-a912-1a9448d61eaa_fixed.java
index 3effef5..c218509 100644
--- a/tmp/56c37136-6a8f-4cb9-bbb3-b48517839594_buggy.java
+++ b/tmp/d3f587d0-72c7-4971-a912-1a9448d61eaa_fixed.java
@@ -1,73 +1,83 @@
-    @SuppressWarnings("resource")
-    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
-    		DeserializationContext ctxt)
-        throws IOException, JsonProcessingException
-    {
+protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
+
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                     continue;
                 }
+
                 while (t == JsonToken.FIELD_NAME) {
                     p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
+                    propName = p.getCurrentName();
+                    p.nextToken(); // to point to value
+
+                    SettableBeanProperty prop = _beanProperties.find(propName);
+                    if (prop != null) {
+                        prop.set(bean, prop.deserialize(p, ctxt));
+                    } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                        handleIgnoredProperty(p, ctxt, handledType(), propName);
+                    } else if (_anySetter != null) {
+                        _anySetter.set(bean, propName, _anySetter.deserialize(p, ctxt));
+                    } else {
+                        handleUnknownProperty(p, ctxt, bean, propName);
                     }
+                }
+
                 tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
             continue;
         }
+
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
+
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
+
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
+
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
+
         // "any property"?
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
     // We hit END_OBJECT, so:
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
+
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
