diff --git a/tmp/6ebf61fe-07d2-40ae-a49d-048cf456588f_buggy.java b/tmp/0f80aa93-4932-4e51-a1f7-6c19c3667ac2_fixed.java
index 3effef5..ff7b513 100644
--- a/tmp/6ebf61fe-07d2-40ae-a49d-048cf456588f_buggy.java
+++ b/tmp/0f80aa93-4932-4e51-a1f7-6c19c3667ac2_fixed.java
@@ -1,73 +1,69 @@
-    @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
                                                             DeserializationContext ctxt)
         throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
-        TokenBuffer tokens = new TokenBuffer(p, ctxt);
-        tokens.writeStartObject();
+    boolean creatorPropertiesProcessed = false;
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
-            // creator property?
+
+        // Creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
-                    try {
-                        bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                creatorPropertiesProcessed = true;
+                // Continue to the next property in the JSON object
                 continue;
             }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
-                }
-                continue;
         }
+
+        if (creatorPropertiesProcessed) {
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
             // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
+    }
 
-        // We hit END_OBJECT, so:
+    // We hit END_OBJECT
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
-        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+
+    // If any properties remain after object construction, we process them here
+    if (!creatorPropertiesProcessed) {
+        final TokenBuffer tokens = new TokenBuffer(p, ctxt);
+        tokens.writeStartObject();
+        while (t == JsonToken.FIELD_NAME) {
+            p.nextToken();
+            tokens.copyCurrentStructure(p);
+            t = p.nextToken();
+        }
+        tokens.writeEndObject();
+        bean = _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+    }
+
+    return bean;
 }
\ No newline at end of file
