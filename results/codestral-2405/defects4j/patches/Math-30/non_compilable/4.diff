diff --git a/tmp/f5dbb623-de39-41ef-872a-a344a0edb71a_buggy.java b/tmp/648e3d65-2ce0-4f7f-9e20-ea8559b57b5c_fixed.java
index 3c69e10..3ac2d54 100644
--- a/tmp/f5dbb623-de39-41ef-872a-a344a0edb71a_buggy.java
+++ b/tmp/648e3d65-2ce0-4f7f-9e20-ea8559b57b5c_fixed.java
@@ -1,27 +1,40 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
+    if (n1 > 20 && n2 > 20) {
+        // If both n1 and n2 are greater than 20, we correct Umin for ties and use rectangular grid approximation
+        // Details and formula for correction can be found in:
+        // H.A. David (1981) "Table of Cumulative Distribution Functions, Eighth U.S. Census". Washington, DC: U.S. Government Printing Office.
+        EU = n1 * n2 / 2.0;
+        VarU = n1 * n2 * (n1 + n2 + 1) / 12.0;
+        double n = n1 + n2;
+        double ties = 0.0;
+        // calculate all ties (not shown here) and update EU and VarU accordingly
+        // ...
+        Umin = Umin - ties * (n + 1) / 2;
+    }
+
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
     return 2 * standardNormal.cumulativeProbability(z);
 }
\ No newline at end of file
