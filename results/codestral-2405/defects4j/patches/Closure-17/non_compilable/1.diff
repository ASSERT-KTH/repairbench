diff --git a/tmp/1f2629dd-c4ed-474d-978c-9397b0a22552_buggy.java b/tmp/b763023a-0005-4832-be67-5f9f55cad8ad_fixed.java
index eb9ce9f..175b0a9 100644
--- a/tmp/1f2629dd-c4ed-474d-978c-9397b0a22552_buggy.java
+++ b/tmp/b763023a-0005-4832-be67-5f9f55cad8ad_fixed.java
@@ -1,60 +1,24 @@
-    /**
-     * Look for a type declaration on a property assignment
-     * (in an ASSIGN or an object literal key).
-     *
-     * @param info The doc info for this property.
-     * @param lValue The l-value node.
-     * @param rValue The node that {@code n} is being initialized to,
-     *     or {@code null} if this is a stub declaration.
-     */
-    private JSType getDeclaredType(String sourceName, JSDocInfo info,
-        Node lValue, @Nullable Node rValue) {
-      if (info != null && info.hasType()) {
-        return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
-          shouldUseFunctionLiteralType(
-              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
-        return rValue.getJSType();
-      } else if (info != null) {
-        if (info.hasEnumParameterType()) {
-          if (rValue != null && rValue.isObjectLit()) {
-            return rValue.getJSType();
-          } else {
-            return createEnumTypeFromNodes(
-                rValue, lValue.getQualifiedName(), info, lValue);
-          }
-        } else if (info.isConstructor() || info.isInterface()) {
-          return createFunctionTypeFromNodes(
-              rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
+if (info != null && info.isConstant()) {
   if (rValue != null) {
     if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
       // If rValue has a type-cast, we use the type in the type-cast.
       // If rValue's type was already computed during scope creation,
       // then we can safely use that.
       return rValue.getJSType();
     } else if (rValue.isOr()) {
       // Check for a very specific JS idiom:
       // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+      // This is used by Closure's base namespace for esoteric reasons.
       Node firstClause = rValue.getFirstChild();
       Node secondClause = firstClause.getNext();
-                boolean namesMatch = firstClause.isName()
-                    && lValue.isName()
-                    && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
-                    && !secondClause.getJSType().isUnknownType()) {
+      boolean namesMatch = firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString());
+      if (namesMatch && secondClause.getJSType() != null && !secondClause.getJSType().isUnknownType()) {
         return secondClause.getJSType();
       }
     }
   }
-          }
-        }
-      }
-
+  // If this is a constant and has an annotated type, we should return that type
+  if (info.hasType()) {
     return getDeclaredTypeInAnnotation(sourceName, lValue, info);
   }
+}
\ No newline at end of file
