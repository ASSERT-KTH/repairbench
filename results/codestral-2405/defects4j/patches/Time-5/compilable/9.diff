diff --git a/tmp/5cb92496-37c3-456b-b71e-faba6056e1c8_buggy.java b/tmp/c49b54c2-954e-4c57-91ff-8aa9f81507b3_fixed.java
index dbda381..a276260 100644
--- a/tmp/5cb92496-37c3-456b-b71e-faba6056e1c8_buggy.java
+++ b/tmp/c49b54c2-954e-4c57-91ff-8aa9f81507b3_fixed.java
@@ -1,54 +1,54 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
+
+    long weeks = DateTimeConstants.MILLIS_PER_WEEK * (long) getWeeks();
+    long days = DateTimeConstants.MILLIS_PER_DAY * ((long) getDays() + weeks / DateTimeConstants.MILLIS_PER_DAY);
+    weeks %= DateTimeConstants.MILLIS_PER_WEEK;
+    long hours = DateTimeConstants.MILLIS_PER_HOUR * ((long) getHours() + days / DateTimeConstants.MILLIS_PER_HOUR);
+    days %= DateTimeConstants.MILLIS_PER_DAY;
+    long minutes = DateTimeConstants.MILLIS_PER_MINUTE * ((long) getMinutes() + hours / DateTimeConstants.MILLIS_PER_MINUTE);
+    hours %= DateTimeConstants.MILLIS_PER_HOUR;
+    long seconds = getSeconds() + minutes / DateTimeConstants.MILLIS_PER_SECOND;
+    minutes %= DateTimeConstants.MILLIS_PER_MINUTE;
+    long millis = getMillis() + seconds * DateTimeConstants.MILLIS_PER_SECOND + minutes * DateTimeConstants.MILLIS_PER_MINUTE + hours * DateTimeConstants.MILLIS_PER_HOUR + days * DateTimeConstants.MILLIS_PER_DAY + weeks * DateTimeConstants.MILLIS_PER_WEEK;
+
+    int years = getYears(), months = getMonths();
     if (years != 0 || months != 0) {
         years = FieldUtils.safeAdd(years, months / 12);
         months = months % 12;
+    }
+
+    Period result = new Period(0L, type, ISOChronology.getInstanceUTC());
+    if (type.isSupported(DurationFieldType.weeks())) {
+        result = result.withWeeks((int) (weeks / DateTimeConstants.MILLIS_PER_WEEK));
+    }
+    int daysInMonth = (int) (days / DateTimeConstants.MILLIS_PER_DAY);
+    if (type.isSupported(DurationFieldType.days())) {
+        result = result.withDays(daysInMonth);
+    }
+    int hoursInDay = (int) (hours / DateTimeConstants.MILLIS_PER_HOUR);
+    if (type.isSupported(DurationFieldType.hours())) {
+        result = result.withHours(hoursInDay);
+    }
+    int minutesInHour = (int) (minutes / DateTimeConstants.MILLIS_PER_MINUTE);
+    if (type.isSupported(DurationFieldType.minutes())) {
+        result = result.withMinutes(minutesInHour);
+    }
+    int secondsInMinute = (int) (seconds % DateTimeConstants.SECONDS_PER_MINUTE);
+    if (type.isSupported(DurationFieldType.seconds())) {
+        result = result.withSeconds(secondsInMinute);
+    }
+    int millisInSecond = (int) (millis % DateTimeConstants.MILLIS_PER_SECOND);
+    if (type.isSupported(DurationFieldType.millis())) {
+        result = result.withMillis(millisInSecond);
+    }
+
     if (years != 0) {
         result = result.withYears(years);
     }
     if (months != 0) {
         result = result.withMonths(months);
     }
-        }
+
     return result;
 }
\ No newline at end of file
