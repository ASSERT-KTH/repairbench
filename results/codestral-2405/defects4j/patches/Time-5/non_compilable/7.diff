diff --git a/tmp/2b8697f6-f85a-4cd8-b15c-fc76f26eb852_buggy.java b/tmp/51843ee9-ea75-4684-8973-604460163361_fixed.java
index dbda381..45bf11d 100644
--- a/tmp/2b8697f6-f85a-4cd8-b15c-fc76f26eb852_buggy.java
+++ b/tmp/51843ee9-ea75-4684-8973-604460163361_fixed.java
@@ -1,54 +1,50 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
+        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUE's
         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
+
+        // Create period with requested type and convert millis into the appropriate units
+        Chronology chrono = ISOChronology.getInstanceUTC();
+        long years = millis / DateTimeConstants.MILLIS_PER_YEAR;
+        millis %= DateTimeConstants.MILLIS_PER_YEAR;
+        long months = millis / DateTimeConstants.MILLIS_PER_MONTH;
+        millis %= DateTimeConstants.MILLIS_PER_MONTH;
+
+        // Check if period type supports years or months, throw exception if not
+        if (!type.isSupported(DurationFieldType.years()) && years != 0) {
+            throw new UnsupportedOperationException("Field 'years' is not supported by the specified period type");
+        }
+        if (!type.isSupported(DurationFieldType.months()) && months != 0) {
+            throw new UnsupportedOperationException("Field 'months' is not supported by the specified period type");
+        }
+
+        // Adjust months if years are present
+        years += months / 12;
+        months %= 12;
+
+        // Adjust mistake in previous conversion
+        months += daysToStandardMonths(millis, chrono);
+        millis = daysToStandardDays(millis, chrono);
+
+        Period result = new Period(millis, type, chrono);
+        result = result.withMonths(months);
+
         if (years != 0) {
             result = result.withYears(years);
         }
-            if (months != 0) {
-                result = result.withMonths(months);
-            }
-        }
+
         return result;
     }
+
+    // Helper functions to convert days to standard months and vice versa
+    private long daysToStandardMonths(long days, Chronology chrono) {
+        return (days / chrono.days().getAverageValues().getAverageMillisPerMonth());
+    }
+
+    private long daysToStandardDays(long days, Chronology chrono) {
+        return (days % chrono.days().getAverageValues().getAverageMillisPerMonth());
+    }
\ No newline at end of file
