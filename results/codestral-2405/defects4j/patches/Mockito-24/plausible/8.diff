diff --git a/tmp/d46a5e35-1667-4be1-b322-ae3f84db355a_buggy.java b/tmp/969298e0-c6ef-4712-b17d-16c238d8cc08_fixed.java
index 47915ed..57cc59c 100644
--- a/tmp/d46a5e35-1667-4be1-b322-ae3f84db355a_buggy.java
+++ b/tmp/969298e0-c6ef-4712-b17d-16c238d8cc08_fixed.java
@@ -1,22 +1,23 @@
-    /* (non-Javadoc)
-     * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
-     */
 public Object answer(InvocationOnMock invocation) {
     if (methodsGuru.isToString(invocation.getMethod())) {
         Object mock = invocation.getMock();
         MockName name = mockUtil.getMockName(mock);
         if (name.isDefault()) {
             return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
         } else {
             return name.toString();
         }
     } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
-            //see issue 184.
-            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
-            //Only for compareTo() method by the Comparable interface
+        Object arg0 = invocation.getArguments()[0];
+        if (invocation.getMock() == arg0) {
+            // If comparing the same mock object to itself, return 0 as per Comparable interface contract
+            return 0;
+        } else {
+            // For different objects, return 1
             return 1;
         }
+    }
 
     Class<?> returnType = invocation.getMethod().getReturnType();
     return returnValueFor(returnType);
 }
\ No newline at end of file
