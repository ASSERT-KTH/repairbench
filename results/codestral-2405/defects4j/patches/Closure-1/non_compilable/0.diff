diff --git a/tmp/e53a2c29-36ae-4cbf-bd55-8b8ac44c4aee_buggy.java b/tmp/344a6613-86f3-41e0-b88f-9e843a4083c1_fixed.java
index 61ffdbf..47f83c9 100644
--- a/tmp/e53a2c29-36ae-4cbf-bd55-8b8ac44c4aee_buggy.java
+++ b/tmp/344a6613-86f3-41e0-b88f-9e843a4083c1_fixed.java
@@ -1,44 +1,35 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
+    Set<Var> referencedArgs = new HashSet<>(referenced);
+    referencedArgs.retainAll(fnScope.getVars());
+
+    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {
+      callSiteOptimizer.optimize(fnScope, referencedArgs);
+    } else {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
+        if (!referencedArgs.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
-    } else {
-      callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
