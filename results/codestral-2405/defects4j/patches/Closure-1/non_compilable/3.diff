diff --git a/tmp/e53a1007-9584-4fc5-9a7a-fa1f78bd28b6_buggy.java b/tmp/674fffa3-3bd2-49da-ba6c-cdaf4581153c_fixed.java
index 61ffdbf..d5a8d2d 100644
--- a/tmp/e53a1007-9584-4fc5-9a7a-fa1f78bd28b6_buggy.java
+++ b/tmp/674fffa3-3bd2-49da-ba6c-cdaf4581153c_fixed.java
@@ -1,44 +1,29 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
+
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
         return;
     }
 
+    if (removeGlobal) {
         Node argList = getFunctionArgList(function);
         boolean modifyCallers = modifyCallSites
                 && callSiteOptimizer.canModifyCallers(function);
+
         if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
-      Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
+            Node current = argList.getFirstChild();
+            while (current != null) {
+                Node next = current.getNext();
+                Var var = fnScope.getVar(current.getString());
                 if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
+                    argList.removeChild(current);
                     compiler.reportCodeChange();
-        } else {
-          break;
                 }
+                current = next;
             }
         } else {
             callSiteOptimizer.optimize(fnScope, referenced);
         }
     }
+}
\ No newline at end of file
