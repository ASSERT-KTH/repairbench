diff --git a/tmp/92a576cd-e7df-4b32-bd19-e126005265c4_buggy.java b/tmp/77de0231-4b6f-4c00-aba8-34c60e0cb0d4_fixed.java
index 61ffdbf..f52f475 100644
--- a/tmp/92a576cd-e7df-4b32-bd19-e126005265c4_buggy.java
+++ b/tmp/77de0231-4b6f-4c00-aba8-34c60e0cb0d4_fixed.java
@@ -1,44 +1,19 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
     Node lastArg;
     while ((lastArg = argList.getLastChild()) != null) {
       Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
+      if (!removeGlobal || !referenced.contains(var)) {
         argList.removeChild(lastArg);
         compiler.reportCodeChange();
       } else {
         break;
       }
     }
-    } else {
-      callSiteOptimizer.optimize(fnScope, referenced);
-    }
   }
\ No newline at end of file
