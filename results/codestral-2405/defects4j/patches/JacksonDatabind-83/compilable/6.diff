diff --git a/tmp/44325d3e-fe03-4faa-a304-8891c4359a69_buggy.java b/tmp/0c6ecbd6-5f67-4eb6-ad29-8ac31f87d8d6_fixed.java
index abe09ae..3f63a3d 100644
--- a/tmp/44325d3e-fe03-4faa-a304-8891c4359a69_buggy.java
+++ b/tmp/0c6ecbd6-5f67-4eb6-ad29-8ac31f87d8d6_fixed.java
@@ -1,57 +1,51 @@
 @SuppressWarnings("unchecked")
 @Override
 public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
-        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
     String text = p.getValueAsString();
-        if (text != null) { // has String representation
-            if (text.length() == 0 || (text = text.trim()).length() == 0) {
-                // 04-Feb-2013, tatu: Usually should become null; but not always
-                return _deserializeFromEmptyString();
+    if (text != null) {
+        text = text.trim();
+        return _handleWeirdString(text, ctxt);
     }
+    JsonToken t = p.getCurrentToken();
+    if (t == JsonToken.START_ARRAY) {
+        return _deserializeFromArray(p, ctxt);
+    }
+    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
+        Object ob = p.getEmbeddedObject();
+        if (_valueClass.isAssignableFrom(ob.getClass())) {
+            return (T) ob;
+        }
+        return _handleWeirdString(ob.toString(), ctxt);
+    }
+    return (T) ctxt.handleUnexpectedToken(_valueClass, p);
+}
+
+private T _handleWeirdString(String text, DeserializationContext ctxt) throws IOException {
     Exception cause = null;
     try {
-                // 19-May-2017, tatu: Used to require non-null result (assuming `null`
-                //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
         if (_deserialize(text, ctxt) != null) {
             return _deserialize(text, ctxt);
         }
     } catch (IllegalArgumentException iae) {
         cause = iae;
     } catch (MalformedURLException me) {
         cause = me;
     }
     String msg = "not a valid textual representation";
     if (cause != null) {
         String m2 = cause.getMessage();
         if (m2 != null) {
             msg = msg + ", problem: " + m2;
         }
     }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
     JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
     if (cause != null) {
         e.initCause(cause);
     }
+    Object weirdResult = ctxt.handleWeirdStringValue(_valueClass, text, null, e);
+    if (weirdResult == null) {
         throw e;
-            // nothing to do here, yet? We'll fail anyway
     }
-        JsonToken t = p.getCurrentToken();
-        // [databind#381]
-        if (t == JsonToken.START_ARRAY) {
-            return _deserializeFromArray(p, ctxt);
-        }
-        if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
-            // Trivial cases; null to null, instance of type itself returned as is
-            Object ob = p.getEmbeddedObject();
-            if (ob == null) {
-                return null;
-            }
-            if (_valueClass.isAssignableFrom(ob.getClass())) {
-                return (T) ob;
-            }
-            return _deserializeEmbedded(ob, ctxt);
-        }
-        return (T) ctxt.handleUnexpectedToken(_valueClass, p);
+    return (T) weirdResult;
 }
\ No newline at end of file
