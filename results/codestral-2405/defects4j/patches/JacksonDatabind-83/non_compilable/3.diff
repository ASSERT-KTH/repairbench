diff --git a/tmp/5767b205-1ce9-41e2-98a2-953038b11d27_buggy.java b/tmp/275f851d-1a96-4214-a09c-f28696f92f31_fixed.java
index abe09ae..a747185 100644
--- a/tmp/5767b205-1ce9-41e2-98a2-953038b11d27_buggy.java
+++ b/tmp/275f851d-1a96-4214-a09c-f28696f92f31_fixed.java
@@ -1,57 +1,40 @@
 @SuppressWarnings("unchecked")
 @Override
 public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
     String text = p.getValueAsString();
     if (text != null) { // has String representation
         if (text.length() == 0 || (text = text.trim()).length() == 0) {
-                // 04-Feb-2013, tatu: Usually should become null; but not always
-                return _deserializeFromEmptyString();
+            // 04-Feb-2013, tatu: Should return deserialized value from empty string, and not null
+            return _deserializeFromEmptyString(ctxt);
         }
-            Exception cause = null;
         try {
-                // 19-May-2017, tatu: Used to require non-null result (assuming `null`
-                //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
+            // 19-May-2017, tatu: Allowed to return `null` as value.
             return _deserialize(text, ctxt);
-                }
         } catch (IllegalArgumentException iae) {
-                cause = iae;
+            throwQuietly(ctxt, iae, text, _valueClass, iae.getMessage());
         } catch (MalformedURLException me) {
-                cause = me;
+            throwQuietly(ctxt, me, text, _valueClass, me.getMessage());
         }
+        throwWeirdStringException(ctxt, text, _valueClass, "not a valid textual representation");
+    }
+    // ... rest of the function ...
+}
+
+private void throwQuietly(DeserializationContext ctxt, Throwable cause, String text,
+                          Class<?> valueClass, String message) throws IOException {
     String msg = "not a valid textual representation";
-            if (cause != null) {
-                String m2 = cause.getMessage();
-                if (m2 != null) {
-                    msg = msg + ", problem: "+m2;
+    if (message != null) {
+        msg = msg + ", problem: "+message;
     }
-            }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
-            if (cause != null) {
+    JsonMappingException e = ctxt.weirdStringException(text, valueClass, msg);
     e.initCause(cause);
-            }
     throw e;
-            // nothing to do here, yet? We'll fail anyway
-        }
-        JsonToken t = p.getCurrentToken();
-        // [databind#381]
-        if (t == JsonToken.START_ARRAY) {
-            return _deserializeFromArray(p, ctxt);
-        }
-        if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
-            // Trivial cases; null to null, instance of type itself returned as is
-            Object ob = p.getEmbeddedObject();
-            if (ob == null) {
-                return null;
 }
-            if (_valueClass.isAssignableFrom(ob.getClass())) {
-                return (T) ob;
-            }
-            return _deserializeEmbedded(ob, ctxt);
-        }
-        return (T) ctxt.handleUnexpectedToken(_valueClass, p);
+
+private void throwWeirdStringException(DeserializationContext ctxt, String text,
+                                       Class<?> valueClass, String message) throws IOException {
+    JsonMappingException e = ctxt.weirdStringException(text, valueClass, message);
+    throw e;
 }
\ No newline at end of file
