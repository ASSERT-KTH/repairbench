diff --git a/tmp/720f5ae8-b265-49e6-bc81-72c26df1af49_buggy.java b/tmp/4c8afa57-950e-4e02-b9f4-6cd416a6418f_fixed.java
index abe09ae..02922c2 100644
--- a/tmp/720f5ae8-b265-49e6-bc81-72c26df1af49_buggy.java
+++ b/tmp/4c8afa57-950e-4e02-b9f4-6cd416a6418f_fixed.java
@@ -1,57 +1,47 @@
-    @SuppressWarnings("unchecked")
 @Override
 public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
-        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
     String text = p.getValueAsString();
-        if (text != null) { // has String representation
+    if (text != null) {
         if (text.length() == 0 || (text = text.trim()).length() == 0) {
-                // 04-Feb-2013, tatu: Usually should become null; but not always
             return _deserializeFromEmptyString();
         }
         Exception cause = null;
         try {
-                // 19-May-2017, tatu: Used to require non-null result (assuming `null`
-                //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
+            if (_valueClass.equals(UUID.class) && !isValidUUID(text)) {
+                return null;
+            }
+            T value = _deserialize(text, ctxt);
+            if (value != null) {
+                return value;
             }
         } catch (IllegalArgumentException iae) {
             cause = iae;
         } catch (MalformedURLException me) {
             cause = me;
         }
         String msg = "not a valid textual representation";
         if (cause != null) {
             String m2 = cause.getMessage();
             if (m2 != null) {
                 msg = msg + ", problem: " + m2;
             }
         }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
         JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
         if (cause != null) {
             e.initCause(cause);
         }
         throw e;
-            // nothing to do here, yet? We'll fail anyway
     }
     JsonToken t = p.getCurrentToken();
-        // [databind#381]
-        if (t == JsonToken.START_ARRAY) {
-            return _deserializeFromArray(p, ctxt);
+    // ... rest of the code...
 }
-        if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
-            // Trivial cases; null to null, instance of type itself returned as is
-            Object ob = p.getEmbeddedObject();
-            if (ob == null) {
-                return null;
+
+private boolean isValidUUID(String text) {
+    try {
+        UUID.fromString(text);
+        return true;
+    } catch (IllegalArgumentException e) {
+        return false;
     }
-            if (_valueClass.isAssignableFrom(ob.getClass())) {
-                return (T) ob;
-            }
-            return _deserializeEmbedded(ob, ctxt);
-        }
-        return (T) ctxt.handleUnexpectedToken(_valueClass, p);
 }
\ No newline at end of file
