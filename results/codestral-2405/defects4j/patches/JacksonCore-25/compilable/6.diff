diff --git a/tmp/2b1480e9-6270-435e-b903-45d2e978b720_buggy.java b/tmp/e9a26cc9-7b81-4232-87d7-4f97a6911cc5_fixed.java
index 8dfbd84..c54c405 100644
--- a/tmp/2b1480e9-6270-435e-b903-45d2e978b720_buggy.java
+++ b/tmp/e9a26cc9-7b81-4232-87d7-4f97a6911cc5_fixed.java
@@ -1,43 +1,48 @@
 private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
 {
     _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
     char[] outBuf = _textBuffer.getCurrentSegment();
     int outPtr = _textBuffer.getCurrentSegmentSize();
     final int maxCode = codes.length;
 
     while (true) {
         if (_inputPtr >= _inputEnd) {
             if (!_loadMore()) { // acceptable for now (will error out later)
                 break;
             }
         }
         char c = _inputBuffer[_inputPtr];
         int i = (int) c;
+        if (i < Character.MIN_HIGH_SURROGATE || i > Character.MAX_LOW_SURROGATE) {
             if (i <= maxCode) {
                 if (codes[i] != 0) {
                     break;
                 }
             } else if (!Character.isJavaIdentifierPart(c)) {
                 break;
             }
             ++_inputPtr;
             hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
             // Ok, let's add char to output:
             outBuf[outPtr++] = c;
 
             // Need more room?
             if (outPtr >= outBuf.length) {
                 outBuf = _textBuffer.finishCurrentSegment();
                 outPtr = 0;
             }
+        } else {
+            // Ignore any characters that are not in the Basic Multilingual Plane
+            ++_inputPtr;
+        }
     }
     _textBuffer.setCurrentLength(outPtr);
     {
         TextBuffer tb = _textBuffer;
         char[] buf = tb.getTextBuffer();
         int start = tb.getTextOffset();
         int len = tb.size();
 
         return _symbols.findSymbol(buf, start, len, hash);
     }
 }
\ No newline at end of file
