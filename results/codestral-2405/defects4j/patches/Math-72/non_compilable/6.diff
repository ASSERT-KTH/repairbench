diff --git a/tmp/7919fc19-6cdf-4304-b854-94888f2baf52_buggy.java b/tmp/4960d828-30de-4c6c-b81b-c459febd1f2e_fixed.java
index 0fe7b81..b385eec 100644
--- a/tmp/7919fc19-6cdf-4304-b854-94888f2baf52_buggy.java
+++ b/tmp/4960d828-30de-4c6c-b81b-c459febd1f2e_fixed.java
@@ -1,67 +1,41 @@
-    /**
-     * Find a zero in the given interval with an initial guess.
-     * <p>Throws <code>IllegalArgumentException</code> if the values of the
-     * function at the three points have the same sign (note that it is
-     * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
-     *
-     * @param f function to solve.
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @param initial the start value to use (must be set to min if no
-     * initial point is known).
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException the maximum iteration count
-     * is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating
-     *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
-     */
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifySequence(min, initial, max);
 
     // return the initial guess if it is good enough
-        double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
+    double initialValue = f.value(initial);
+    if (Math.abs(initialValue) <= functionValueAccuracy) {
         setResult(initial, 0);
         return result;
     }
 
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+    // return the endpoints if they are good enough
+    double minValue = f.value(min);
+    if (Math.abs(minValue) <= functionValueAccuracy) {
+        setResult(min, 0);
         return result;
     }
-
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+    double maxValue = f.value(max);
+    if (Math.abs(maxValue) <= functionValueAccuracy) {
+        setResult(max, 0);
         return result;
     }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+    // what to do with these endpoints
+    if (minValue * initialValue < 0) {
+        return solve(f, min, initial, initialValue, min, minValue);
+    } else if (initialValue * maxValue < 0) {
+        return solve(f, initial, max, initialValue, initial, maxValue);
     }
 
-        if (yMin * yMax > 0) {
+    if (minValue * maxValue > 0) {
         throw MathRuntimeException.createIllegalArgumentException(
-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
+              NON_BRACKETING_MESSAGE, min, max, minValue, maxValue);
     }
 
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+    // full Brent algorithm
+    return solve(f, min, initial, max, initialValue, maxValue);
 }
\ No newline at end of file
