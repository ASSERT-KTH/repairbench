diff --git a/tmp/ef9c5f7d-c149-4679-8dd0-133d28544b6b_buggy.java b/tmp/a882c6a3-2cd6-4baf-a323-fa1c35410836_fixed.java
index 3ec995f..9d254a2 100644
--- a/tmp/ef9c5f7d-c149-4679-8dd0-133d28544b6b_buggy.java
+++ b/tmp/a882c6a3-2cd6-4baf-a323-fa1c35410836_fixed.java
@@ -1,26 +1,32 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+
+    int major = 0;
+    int minor = 0;
+
+    int end;
+    try {
+        end = version.indexOf('.', 1);
+        major = Integer.parseInt(version.substring(0, end));
+        if (end < version.length()) {
+            int start = end + 1;
+            end = version.indexOf('.', start);
+            if (end == -1) {
+                end = version.indexOf('_', start);
+            }
+            if (end == -1) {
+                end = version.indexOf(' ', start);
+            }
+            if (end == -1) {
+                end = version.length();
+            }
+            minor = Integer.parseInt(version.substring(start, end));
+        }
+    } catch (IndexOutOfBoundsException | NumberFormatException | StringIndexOutOfBoundsException | NoSuchElementException e) {
+        return 0;
+    }
+
+    return (major * 100) + minor;
 }
\ No newline at end of file
