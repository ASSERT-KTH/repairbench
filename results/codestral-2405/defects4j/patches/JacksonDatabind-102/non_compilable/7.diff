diff --git a/tmp/7486884b-b10f-4c45-9645-0f0666b5ab95_buggy.java b/tmp/1c9f8c43-87f4-415f-8fe2-7fe48a0ef34d_fixed.java
index 1b07d98..f590a8e 100644
--- a/tmp/7486884b-b10f-4c45-9645-0f0666b5ab95_buggy.java
+++ b/tmp/1c9f8c43-87f4-415f-8fe2-7fe48a0ef34d_fixed.java
@@ -1,76 +1,61 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     // Note! Should not skip if `property` null since that'd skip check
     // for config overrides, in case of root value
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
-            return withFormat(Boolean.TRUE, null);
+        return this;
     }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+    // Custom pattern will override things
     if (format.hasPattern()) {
         final Locale loc = format.hasLocale()
                 ? format.getLocale()
                 : serializers.getLocale();
         SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
         TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
                 : serializers.getTimeZone();
         df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
+        return withFormat(df);
     }
 
     // Otherwise, need one of these changes:
     final boolean hasLocale = format.hasLocale();
     final boolean hasTZ = format.hasTimeZone();
-        final boolean asString = (shape == JsonFormat.Shape.STRING);
-
-        if (!hasLocale && !hasTZ && !asString) {
-            return this;
-        }
 
     DateFormat df0 = serializers.getConfig().getDateFormat();
     // Jackson's own `StdDateFormat` is quite easy to deal with...
     if (df0 instanceof StdDateFormat) {
         StdDateFormat std = (StdDateFormat) df0;
         if (format.hasLocale()) {
             std = std.withLocale(format.getLocale());
         }
         if (format.hasTimeZone()) {
             std = std.withTimeZone(format.getTimeZone());
         }
-            return withFormat(Boolean.FALSE, std);
+        return withFormat(std);
     }
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-        if (!(df0 instanceof SimpleDateFormat)) {
-            serializers.reportBadDefinition(handledType(), String.format(
-"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
-df0.getClass().getName()));
-        }
-        SimpleDateFormat df = (SimpleDateFormat) df0;
+    // If not StdDateFormat, we need to handle it as SimpleDateFormat
+    else if (df0 instanceof SimpleDateFormat) {
+        SimpleDateFormat df = (SimpleDateFormat) df0.clone();
         if (hasLocale) {
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-            df = new SimpleDateFormat(df.toPattern(), format.getLocale());
-        } else {
-            df = (SimpleDateFormat) df.clone();
+            df.setDateFormatSymbols(new DateFormatSymbols(format.getLocale()));
         }
-        TimeZone newTz = format.getTimeZone();
-        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
-        if (changeTZ) {
-            df.setTimeZone(newTz);
+        if (hasTZ) {
+            df.setTimeZone(format.getTimeZone());
         }
-        return withFormat(Boolean.FALSE, df);
+        return withFormat(df);
+    }
+
+    return this;
 }
\ No newline at end of file
