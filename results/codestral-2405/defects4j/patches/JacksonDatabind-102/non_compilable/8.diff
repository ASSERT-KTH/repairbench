diff --git a/tmp/ff0775d8-dd87-480d-8fd1-2c57e2d8c77f_buggy.java b/tmp/d6ed5c86-4f25-4420-850e-6631a28b755d_fixed.java
index 1b07d98..6569fd7 100644
--- a/tmp/ff0775d8-dd87-480d-8fd1-2c57e2d8c77f_buggy.java
+++ b/tmp/d6ed5c86-4f25-4420-850e-6631a28b755d_fixed.java
@@ -1,76 +1,64 @@
 @Override
-    public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
-        // Note! Should not skip if `property` null since that'd skip check
-        // for config overrides, in case of root value
+public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {
+    // Note! Should not skip if `property` null since that'd skip check for config overrides, in case of root value
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
     if (format.hasPattern()) {
         final Locale loc = format.hasLocale()
                 ? format.getLocale()
                 : serializers.getLocale();
         SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
         TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
                 : serializers.getTimeZone();
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
 
     // Otherwise, need one of these changes:
     final boolean hasLocale = format.hasLocale();
     final boolean hasTZ = format.hasTimeZone();
     final boolean asString = (shape == JsonFormat.Shape.STRING);
 
     if (!hasLocale && !hasTZ && !asString) {
         return this;
     }
 
     DateFormat df0 = serializers.getConfig().getDateFormat();
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-        if (df0 instanceof StdDateFormat) {
-            StdDateFormat std = (StdDateFormat) df0;
+    // If it's already a SimpleDateFormat, we can apply formatting changes
+    if (df0 instanceof SimpleDateFormat) {
+        SimpleDateFormat df = (SimpleDateFormat) df0.clone();
+        if (hasLocale) {
+            df.setLocale(format.getLocale());
+        }
+        if (hasTZ) {
+            df.setTimeZone(format.getTimeZone());
+        }
+        return withFormat(Boolean.FALSE, df);
+    }
+
+    // If it's not a SimpleDateFormat, we need to create a new one
+    SimpleDateFormat df = new SimpleDateFormat();
     if (format.hasLocale()) {
-                std = std.withLocale(format.getLocale());
+        df.setLocale(format.getLocale());
+    } else {
+        df.setLocale(serializers.getLocale());
     }
     if (format.hasTimeZone()) {
-                std = std.withTimeZone(format.getTimeZone());
-            }
-            return withFormat(Boolean.FALSE, std);
-        }
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-        if (!(df0 instanceof SimpleDateFormat)) {
-            serializers.reportBadDefinition(handledType(), String.format(
-"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
-df0.getClass().getName()));
-        }
-        SimpleDateFormat df = (SimpleDateFormat) df0;
-        if (hasLocale) {
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-            df = new SimpleDateFormat(df.toPattern(), format.getLocale());
+        df.setTimeZone(format.getTimeZone());
     } else {
-            df = (SimpleDateFormat) df.clone();
-        }
-        TimeZone newTz = format.getTimeZone();
-        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
-        if (changeTZ) {
-            df.setTimeZone(newTz);
+        df.setTimeZone(serializers.getTimeZone());
     }
     return withFormat(Boolean.FALSE, df);
 }
\ No newline at end of file
