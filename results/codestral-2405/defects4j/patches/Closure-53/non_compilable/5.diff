diff --git a/tmp/0db9c9dc-075d-49ae-ad70-f2dac88df2d9_buggy.java b/tmp/7c70e3a3-b86d-4b00-8c62-c05a7839721c_fixed.java
index 41ea16c..9e64335 100644
--- a/tmp/0db9c9dc-075d-49ae-ad70-f2dac88df2d9_buggy.java
+++ b/tmp/7c70e3a3-b86d-4b00-8c62-c05a7839721c_fixed.java
@@ -1,63 +1,57 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                          Map<String, String> varmap) {
   // Compute all of the assignments necessary
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
   for (Node key = val.getFirstChild(); key != null;
        key = key.getNext()) {
     String var = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
     nodes.add(
       new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
+               new Node(Token.NAME, new StringLiteral(varmap.get(var))), value));
     all.remove(var);
   }
 
   // TODO(user): Better source information.
   for (String var : all) {
     nodes.add(
       new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)),
+               new Node(Token.NAME, new StringLiteral(varmap.get(var))),
                NodeUtil.newUndefinedNode(null)));
   }
 
-      Node replacement;
   // All assignments evaluate to true, so make sure that the
   // expr statement evaluates to true in case it matters.
-        nodes.add(new Node(Token.TRUE));
+  Node lastNode = new Node(Token.TRUE);
+  nodes.add(lastNode);
 
   // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
+  // create a tree. In the tree, the first child should be the COMMA to match
   // the parser, otherwise tree equality tests fail.
   nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+  Node replacement = new Node(Token.COMMA);
+  Node currentNode = replacement;
+  for (int i = 0; i < nodes.size() - 1; i++) {
+    currentNode.addChildToBack(nodes.get(i));
+    if (i < nodes.size() - 2) {
+      Node tempNode = new Node(Token.COMMA);
+      currentNode.addChildToBack(tempNode);
+      currentNode = tempNode;
+    }
   }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
 
   if (replace.getType() == Token.VAR) {
     replace.getParent().replaceChild(
         replace, NodeUtil.newExpr(replacement));
   } else {
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
