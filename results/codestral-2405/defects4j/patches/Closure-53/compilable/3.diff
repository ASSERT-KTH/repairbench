diff --git a/tmp/8a0b302b-9486-402c-aac4-5354efd6cd3c_buggy.java b/tmp/ab0bd8fb-04d4-40a0-ab84-1f522fbe7528_fixed.java
index 41ea16c..f425ffd 100644
--- a/tmp/8a0b302b-9486-402c-aac4-5354efd6cd3c_buggy.java
+++ b/tmp/ab0bd8fb-04d4-40a0-ab84-1f522fbe7528_fixed.java
@@ -1,63 +1,51 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                          Map<String, String> varmap) {
   // Compute all of the assignments necessary
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
   for (Node key = val.getFirstChild(); key != null;
        key = key.getNext()) {
     String var = key.getString();
     Node value = key.removeFirstChild();
-        // TODO(user): Copy type information.
+    // Copy type information.
+    value.setJSType(key.getJSType());
     nodes.add(
       new Node(Token.ASSIGN,
                Node.newString(Token.NAME, varmap.get(var)), value));
     all.remove(var);
   }
 
-      // TODO(user): Better source information.
+  // Fallback assignments for any unused variables
   for (String var : all) {
     nodes.add(
       new Node(Token.ASSIGN,
                Node.newString(Token.NAME, varmap.get(var)),
                NodeUtil.newUndefinedNode(null)));
   }
 
-      Node replacement;
   // All assignments evaluate to true, so make sure that the
   // expr statement evaluates to true in case it matters.
   nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
+  // Join these using COMMA.
   nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+  Node replacement = nodes.get(0);
+  for (int i = 1; i < nodes.size(); i++) {
+    Node commaNode = new Node(Token.COMMA, nodes.get(i), replacement);
+    replacement.copyInformationFrom(nodes.get(i));  // Update source info
+    replacement = commaNode;
   }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
   Node replace = ref.getParent();
-      replacement.copyInformationFromForTree(replace);
+  replacement.copyInformationFrom(replace);
 
   if (replace.getType() == Token.VAR) {
     replace.getParent().replaceChild(
         replace, NodeUtil.newExpr(replacement));
   } else {
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
