diff --git a/tmp/858a31e1-8b6d-4ea2-b5a0-4b018c1407b8_buggy.java b/tmp/2b864cc0-3dff-4c0f-9d54-418c4f88198d_fixed.java
index 139579d..6339fc8 100644
--- a/tmp/858a31e1-8b6d-4ea2-b5a0-4b018c1407b8_buggy.java
+++ b/tmp/2b864cc0-3dff-4c0f-9d54-418c4f88198d_fixed.java
@@ -1,43 +1,49 @@
     // performance sensitive
     public boolean hasClass(String className) {
         final String classAttr = attributes.get("class");
+        if (classAttr == null || classAttr.isEmpty()) {
+            return false;
+        }
+
         final int len = classAttr.length();
         final int wantLen = className.length();
-
-        if (len == 0 || len < wantLen) {
-            return false;
-        }
-
+        final char attrCharEnd = len > 0 ? classAttr.charAt(0) : '\0'; // this line was added to fix the bug
+        if (!Character.isWhitespace(attrCharEnd) && wantLen <= len) {
             // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
-            return className.equalsIgnoreCase(classAttr);
+            if (len == wantLen && classAttr.equalsIgnoreCase(className)) {
+                return true;
+            }
+            // if className might be at start of attr, check it
+            if (classAttr.regionMatches(true, 0, className, 0, wantLen)) {
+                final char afterClassChar = len > wantLen ? classAttr.charAt(wantLen) : '\0';
+                if (afterClassChar == '\0' || Character.isWhitespace(afterClassChar)) {
+                    return true;
+                }
+            }
         }
-
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
-                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+                    if ((i - start == wantLen) && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
-
         // check the last entry
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
-
         return false;
     }
\ No newline at end of file
