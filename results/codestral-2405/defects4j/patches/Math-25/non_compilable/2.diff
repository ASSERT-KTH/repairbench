diff --git a/tmp/05ee78be-0894-4156-b1fa-4a495fcccc35_buggy.java b/tmp/46656126-39af-4b43-8bb6-f49271126a22_fixed.java
index 940af3f..b3d8b95 100644
--- a/tmp/05ee78be-0894-4156-b1fa-4a495fcccc35_buggy.java
+++ b/tmp/46656126-39af-4b43-8bb6-f49271126a22_fixed.java
@@ -1,82 +1,50 @@
-        /**
-         * Estimate a first guess of the amplitude and angular frequency.
-         * This method assumes that the {@link #sortObservations()} method
-         * has been called previously.
-         *
-         * @throws ZeroException if the abscissa range is zero.
-         * @throws MathIllegalStateException when the guessing procedure cannot
-         * produce sensible results.
-         */
 private void guessAOmega() {
-            // initialize the sums for the linear model between the two integrals
+    double sx = 0;
     double sx2 = 0;
-            double sy2 = 0;
+    double sy = 0;
     double sxy = 0;
-            double sxz = 0;
-            double syz = 0;
 
-            double currentX = observations[0].getX();
-            double currentY = observations[0].getY();
-            double f2Integral = 0;
-            double fPrime2Integral = 0;
-            final double startX = currentX;
-            for (int i = 1; i < observations.length; ++i) {
-                // one step forward
-                final double previousX = currentX;
-                final double previousY = currentY;
-                currentX = observations[i].getX();
-                currentY = observations[i].getY();
+    final int len = observations.length;
+    double startX = observations[0].getX();
+    double endX = observations[len - 1].getX();
+    double xRange = endX - startX;
 
-                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
-                // considering a linear model for f (and therefore constant f')
-                final double dx = currentX - previousX;
-                final double dy = currentY - previousY;
-                final double f2StepIntegral =
-                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
-                final double fPrime2StepIntegral = dy * dy / dx;
-
-                final double x = currentX - startX;
-                f2Integral += f2StepIntegral;
-                fPrime2Integral += fPrime2StepIntegral;
+    for (int i = 0; i < len; i++) {
+        double x = observations[i].getX() - startX;
+        double y = observations[i].getY();
 
+        sx += x;
         sx2 += x * x;
-                sy2 += f2Integral * f2Integral;
-                sxy += x * f2Integral;
-                sxz += x * fPrime2Integral;
-                syz += f2Integral * fPrime2Integral;
+        sy += y;
+        sxy += x * y;
     }
 
-            // compute the amplitude and pulsation coefficients
-            double c1 = sy2 * sxz - sxy * syz;
-            double c2 = sxy * sxz - sx2 * syz;
-            double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
-                final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
-                if (xRange == 0) {
-                    throw new ZeroException();
-                }
-                omega = 2 * Math.PI / xRange;
+    double sy_ = sx * sy / len;
+    double sxy_ = sx * sxy / len;
 
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
-                for (int i = 1; i < observations.length; ++i) {
-                    final double y = observations[i].getY();
-                    if (y < yMin) {
-                        yMin = y;
-                    }
-                    if (y > yMax) {
-                        yMax = y;
-                    }
+    double sxx_ = sx * sx / len;
+    double sx2_ = sx2 / len;
+
+    double syy_ = 0;
+    double sx2y2_ = 0;
+    for (int i = 0; i < len; i++) {
+        double y = observations[i].getY() - sy_ ;
+        double x2 = (observations[i].getX() - startX) * (observations[i].getX() - startX);
+        syy_ += y * y ;
+        sx2y2_ += x2 * y * y ;
     }
-                a = 0.5 * (yMax - yMin);
+    syy_ /= len;
+    sx2y2_ /= len;
+
+    double c1 = syy_ * sx2_ - sxy_ * sxy_;
+    double c2 = sxy_ * sx2_ - sx_ * sxy_;
+    double c3 = sx2_ * sx2_ - sxx_ * sxx_;
+
+    if (c1 <= 0 || c2 <= 0 || c3 <= 0) {
+        omega = 2 * FastMath.PI / xRange;
+        a = (sy / len);
     } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
-
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+        a = FastMath.sqrt(c1) * FastMath.sqrt(sx2_ / c3);
+        omega = FastMath.sqrt(c3) * FastMath.sqrt(syy_ / c2) / xRange;
     }
 }
\ No newline at end of file
