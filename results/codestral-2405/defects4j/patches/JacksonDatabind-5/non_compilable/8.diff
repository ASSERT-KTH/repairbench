diff --git a/tmp/17644af4-b8c5-46d3-9c0b-0d48813651c4_buggy.java b/tmp/cbebeedc-9aac-4564-9641-5046a098f6f7_fixed.java
index b2db1d6..a8ca0a8 100644
--- a/tmp/17644af4-b8c5-46d3-9c0b-0d48813651c4_buggy.java
+++ b/tmp/cbebeedc-9aac-4564-9641-5046a098f6f7_fixed.java
@@ -1,29 +1,53 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
+
+        // Store methods in map for efficient lookup
+        Map<Signature, AnnotatedMethod> existingMethods = new HashMap<>();
+        for (AnnotatedMethod am : methods.values()) {
+            existingMethods.put(am.getSignature(), am);
+        }
+
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
-                AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
+                AnnotatedMethod am = existingMethods.get(new Signature(m));
+                // if the method already exists, synthesize mix-under method
                 if (am != null) {
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                    // if the method doesn't exist, add it to the mixIns
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+
+    // A simple helper class to store method signatures for efficient lookup
+    private static class Signature {
+        final String name;
+        final Class<?>[] params;
+
+        Signature(Method m) {
+            name = m.getName();
+            params = m.getParameterTypes();
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+            Signature that = (Signature) o;
+            return name.equals(that.name) && Arrays.equals(params, that.params);
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(name, Arrays.hashCode(params));
+        }
+    }
\ No newline at end of file
