diff --git a/tmp/bb390cef-f0bb-4d49-9bb7-cb1c4db87ea4_buggy.java b/tmp/bf148da6-4855-4477-98f1-80408de12171_fixed.java
index b5a206b..1734e2a 100644
--- a/tmp/bb390cef-f0bb-4d49-9bb7-cb1c4db87ea4_buggy.java
+++ b/tmp/bf148da6-4855-4477-98f1-80408de12171_fixed.java
@@ -1,80 +1,85 @@
     /**
      * Get the next entry in this tar archive. This will skip
      * over any remaining data in the current entry, if there
      * is one, and place the input stream at the header of the
      * next entry, and read the header and instantiate a new
      * TarEntry from the header bytes and return that entry.
      * If there are no more entries in the archive, null will
      * be returned to indicate that the end of the archive has
      * been reached.
      *
      * @return The next TarEntry in the archive, or null.
      * @throws IOException on error
      */
     public TarArchiveEntry getNextTarEntry() throws IOException {
         if (hasHitEOF) {
             return null;
         }
 
         if (currEntry != null) {
             long numToSkip = entrySize - entryOffset;
 
             while (numToSkip > 0) {
                 long skipped = skip(numToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip current tar entry");
                 }
                 numToSkip -= skipped;
             }
 
             readBuf = null;
         }
 
         byte[] headerBuf = getRecord();
 
         if (hasHitEOF) {
             currEntry = null;
             return null;
         }
 
         currEntry = new TarArchiveEntry(headerBuf);
         entryOffset = 0;
         entrySize = currEntry.getSize();
 
         if (currEntry.isGNULongNameEntry()) {
-            // read in the name
-            StringBuffer longName = new StringBuffer();
-            byte[] buf = new byte[SMALL_BUFFER_SIZE];
-            int length = 0;
-            while ((length = read(buf)) >= 0) {
-                longName.append(new String(buf, 0, length));
+            // Calcualte size of long name entry and read it
+            long longNameSize = Long.parseLong(currEntry.getName(), 8) - 1;
+            byte[] buf = new byte[(int) longNameSize];
+            int length = read(buf);
+            if (length != longNameSize) {
+                throw new IOException("Failed to read long name entry");
             }
-            getNextEntry();
-            if (currEntry == null) {
-                // Bugzilla: 40334
+
+            // Get next entry which should have the long name
+            TarArchiveEntry nextEntry = getNextTarEntry();
+            if (nextEntry == null) {
                 // Malformed tar file - long entry name not followed by entry
-                return null;
+                throw new IOException("Malformed tar file: long entry name not followed by entry");
             }
-            // remove trailing null terminator
+
+            // Set current entry's name to the long name
+            String longName = new String(buf, StandardCharsets.UTF_8);
+            // Remove trailing null terminator
             if (longName.length() > 0
                 && longName.charAt(longName.length() - 1) == 0) {
-                longName.deleteCharAt(longName.length() - 1);
+                longName = longName.substring(0, longName.length() - 1);
             }
-            currEntry.setName(longName.toString());
+            nextEntry.setName(longName);
+            currEntry = nextEntry;
         }
 
         if (currEntry.isPaxHeader()){ // Process Pax headers
             paxHeaders();
         }
 
         if (currEntry.isGNUSparse()){ // Process sparse files
             readGNUSparse();
         }
 
         // If the size of the next element in the archive has changed
-        // due to a new size being reported in the posix header
+        // due to a new size being reported in the POSIX header
         // information, we update entrySize here so that it contains
         // the correct value.
         entrySize = currEntry.getSize();
         return currEntry;
     }
\ No newline at end of file
