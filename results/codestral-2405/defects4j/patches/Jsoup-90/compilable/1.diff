diff --git a/tmp/49d51ecd-0aec-4264-a669-29accaf6ee2c_buggy.java b/tmp/103576b7-2e9c-4f29-b521-f7d7be2e46c4_fixed.java
index 373b1e8..9b3a570 100644
--- a/tmp/49d51ecd-0aec-4264-a669-29accaf6ee2c_buggy.java
+++ b/tmp/103576b7-2e9c-4f29-b521-f7d7be2e46c4_fixed.java
@@ -1,37 +1,40 @@
 private static boolean looksLikeUtf8(byte[] input) {
     int i = 0;
     // BOM:
     if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+        && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) { // Bug fix: Correct logical operator from bitwise (&) to logical (&&)
         i = 3;
     }
 
     int end;
     for (int j = input.length; i < j; ++i) {
         int o = input[i];
         if ((o & 0x80) == 0) {
             continue; // ASCII
         }
 
         // UTF-8 leading:
         if ((o & 0xE0) == 0xC0) {
             end = i + 1;
         } else if ((o & 0xF0) == 0xE0) {
             end = i + 2;
         } else if ((o & 0xF8) == 0xF0) {
             end = i + 3;
         } else {
             return false;
         }
 
-
-                while (i < end) {
+        while (i < end && i < input.length) { // Bug fix: Check to ensure i doesn't go out of bounds
             i++;
+            if (i < input.length) { // Additional check to prevent ArrayIndexOutOfBoundsException
                 o = input[i];
                 if ((o & 0xC0) != 0x80) {
                     return false;
                 }
+            } else {
+                return false; // Invalid UTF-8: incomplete sequence
+            }
         }
     }
     return true;
 }
\ No newline at end of file
