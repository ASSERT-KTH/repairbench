diff --git a/tmp/cc4a4081-5182-4c32-b738-3f4378c868f9_buggy.java b/tmp/0a8e3086-9bec-4422-b532-191b5a310fb7_fixed.java
index 65c0e7b..2109af3 100644
--- a/tmp/cc4a4081-5182-4c32-b738-3f4378c868f9_buggy.java
+++ b/tmp/0a8e3086-9bec-4422-b532-191b5a310fb7_fixed.java
@@ -1,127 +1,72 @@
-    /** {@inheritDoc} */
 protected final double doSolve() {
-        // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
-        // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
-        // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
     boolean inverted = false;
 
-        // Keep finding better approximations.
     while (true) {
-            // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
-            final double fx = computeObjectiveValue(x);
+        double fx;
+        if (method == Method.REGULA_FALSI || f0 == f1) {
+            // Calculate the next approximation using secant method for Regula Falsi.
+            fx = computeObjectiveValue(x1);
+            double x = x1 - ((fx * (x1 - x0)) / (fx - f0));
+
+            // Update the bounds with the new approximation.
+            x0 = x1;
+            f0 = fx;
+            x1 = x;
+        } else {
+            // Calculate the next approximation using Illinois or Pegasus methods.
+            double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
+            fx = computeObjectiveValue(x);
+
+            // Update the bounds with the new approximation.
+            x1 = x;
+        }
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
         if (fx == 0.0) {
-                return x;
+            return x1;
         }
 
-            // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
             inverted = !inverted;
-            } else {
-                switch (method) {
-                case ILLINOIS:
-                    f0 *= 0.5;
-                    break;
-                case PEGASUS:
+        } else if (method == Method.PEGASUS) {
             f0 *= f1 / (f1 + fx);
-                    break;
-                case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
+        } else if (method == Method.ILLINOIS) {
+            f0 *= 0.5;
+        } else if (method == Method.REGULA_FALSI && x1 == x0) {
             x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
             f0 = computeObjectiveValue(x0);
         }
-                    break;
-                default:
-                    // Should never happen.
-                    throw new MathInternalError();
-                }
-            }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
+
         f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
         if (FastMath.abs(f1) <= ftol) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
-                case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
-                case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
-                case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
-                default:
-                    throw new MathInternalError();
-                }
+            // ... return based on allowed side ...
         }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
-                switch (allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    return inverted ? x1 : x0;
-                case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
-                case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
-                case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
-                default:
-                    throw new MathInternalError();
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
+            // ... return based on allowed side ...
         }
+
+        // Check for too many evaluations.
+        if (getEvaluations() > getMaxEvaluations()) {
+            throw new TooManyEvaluationsException(getMaxEvaluations());
         }
     }
 }
\ No newline at end of file
