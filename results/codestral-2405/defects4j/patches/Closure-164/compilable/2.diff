diff --git a/tmp/f57f5c18-c8a0-4db6-a768-3a702579e75b_buggy.java b/tmp/211f76d9-0230-40f0-94f5-4d7565c96e82_fixed.java
index 9976e43..0566a1b 100644
--- a/tmp/f57f5c18-c8a0-4db6-a768-3a702579e75b_buggy.java
+++ b/tmp/211f76d9-0230-40f0-94f5-4d7565c96e82_fixed.java
@@ -1,76 +1,58 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
   // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+    if (thatParamType == null || thisParamType != null && !thatParamType.isSubtype(thisParamType)) {
+      // If "thatParamType" is null or "thisParamType" is not a subtype of "thatParamType", return false.
       return false;
     }
-      }
 
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
     // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+    // This check is correct, but it needs to be adjusted for variable arguments.
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
-      if (!thatIsVarArgs) {
+    if (!thatIsVarArgs || thisIsVarArgs) { // Always advance "thatParam" if "thisParam" is variable arguments.
       thatParam = thatParam.getNext();
     }
 
     // both var_args indicates the end
     if (thisIsVarArgs && thatIsVarArgs) {
       thisParam = null;
       thatParam = null;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // "that" can't be a supertype, because it's missing a required argument.
+  // This check needs to be adjusted for cases where all parameters of "that" are optional.
+  if (thatParam != null) {
+    while (thatParam != null) {
+      if (!thatParam.isOptionalArg()) {
+        // If "that" has a non-optional argument that "this" doesn't have, return false.
+        return false;
+      }
+      thatParam = thatParam.getNext();
+    }
+  }
 
+  // If none of the above conditions failed, "this" is a subtype of "that".
   return true;
 }
\ No newline at end of file
