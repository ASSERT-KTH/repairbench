diff --git a/tmp/c9c26b32-3218-4541-b7d6-af01df0ba889_buggy.java b/tmp/2cc19e09-eb30-409f-86c1-e8f227678465_fixed.java
index d666a67..d8dad8e 100644
--- a/tmp/c9c26b32-3218-4541-b7d6-af01df0ba889_buggy.java
+++ b/tmp/2cc19e09-eb30-409f-86c1-e8f227678465_fixed.java
@@ -1,36 +1,29 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
 private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
+    // Limit (no cache):
     if (count > maxStringCacheLen)
         return new String(charBuf, start, count);
 
-        // calculate hash:
+    // Calculate hash:
     int hash = 0;
     int offset = start;
-        for (int i = 0; i < count; i++) {
+    for (int i = 0; i < count && offset < charBuf.length; i++) {
         hash = 31 * hash + charBuf[offset++];
     }
 
-        // get from cache
+    // Get from cache
     final int index = hash & stringCache.length - 1;
     String cached = stringCache[index];
 
-        if (cached == null) { // miss, add
+    if (cached == null) { // Miss, add
         cached = new String(charBuf, start, count);
         stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
+    } else { // Hashcode hit, check equality
+        if (rangeEquals(charBuf, start, count, cached)) { // Hit
             return cached;
-            } else { // hashcode conflict
+        } else { // Hashcode conflict
             cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
+            stringCache[index] = cached; // Update the cache, as recently used strings are more likely to show up again
         }
     }
     return cached;
 }
\ No newline at end of file
