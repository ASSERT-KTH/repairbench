diff --git a/tmp/2f3a181a-ee5f-41a2-9e3b-9d867644c5fa_buggy.java b/tmp/8bfe6dd5-3a21-449d-b0f4-763d09f2a238_fixed.java
index d666a67..2b6bf44 100644
--- a/tmp/2f3a181a-ee5f-41a2-9e3b-9d867644c5fa_buggy.java
+++ b/tmp/8bfe6dd5-3a21-449d-b0f4-763d09f2a238_fixed.java
@@ -1,36 +1,18 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
-    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
-        if (count > maxStringCacheLen)
-            return new String(charBuf, start, count);
+private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, int count) {
+    count = Math.min(count, maxStringCacheLen);
 
-        // calculate hash:
     int hash = 0;
     int offset = start;
     for (int i = 0; i < count; i++) {
         hash = 31 * hash + charBuf[offset++];
     }
 
-        // get from cache
-        final int index = hash & stringCache.length - 1;
+    final int index = hash & (stringCache.length - 1);
     String cached = stringCache[index];
 
-        if (cached == null) { // miss, add
+    if (cached == null || !rangeEquals(charBuf, start, count, cached)) {
         cached = new String(charBuf, start, count);
         stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
-                return cached;
-            } else { // hashcode conflict
-                cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
-            }
     }
     return cached;
 }
\ No newline at end of file
