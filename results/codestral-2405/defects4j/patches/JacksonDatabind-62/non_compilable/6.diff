diff --git a/tmp/fb85445b-fda4-46eb-9657-df99fbec1eae_buggy.java b/tmp/66ab697a-1ac3-4c9c-96f5-21b5f9d6c134_fixed.java
index 6c9090f..3afed0b 100644
--- a/tmp/fb85445b-fda4-46eb-9657-df99fbec1eae_buggy.java
+++ b/tmp/66ab697a-1ac3-4c9c-96f5-21b5f9d6c134_fixed.java
@@ -1,45 +1,47 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
                                                BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
    JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
+
+   // If valueInstantiator is null or can't create using delegate, just use the default behavior
+   if (_valueInstantiator != null && _valueInstantiator.canCreateUsingDelegate()) {
        JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
-                if (delegateType == null) {
-                    throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
+       requireNonNull(delegateType, "Invalid delegate-creator definition for " + _collectionType
            + ": value instantiator (" + _valueInstantiator.getClass().getName()
            + ") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
-                }
+
        delegateDeser = findDeserializer(ctxt, delegateType, property);
    }
-        }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
+
    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
        JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
+
    JsonDeserializer<?> valueDeser = _valueDeserializer;
 
-        // May have a content converter
    valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
    final JavaType vt = _collectionType.getContentType();
    if (valueDeser == null) {
+       if (ctxt.getTypeFactory().constructType(Collections.unmodifiableSet(Collections.emptySet())).equals(vt)) {
+           // we need to explicitly create UnmodifiableSet from the deserialized delegate
+           valueDeser = new JsonDeserializer<Set<?>>() {
+               @Override
+               public Set<?> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
+                   Set<Object> delegateSet = jp.readValueAs(Set.class);
+                   return Collections.unmodifiableSet(delegateSet);
+               }
+           };
+       } else {
            valueDeser = ctxt.findContextualValueDeserializer(vt, property);
+       }
    } else { // if directly assigned, probably not yet contextual, so:
        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
    }
-        // and finally, type deserializer needs context as well
+
    TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
    if (valueTypeDeser != null) {
-            valueTypeDeser = valueTypeDeser.forProperty(property);
+       valueTypeDeser = valueTypeDeserializer.forProperty(property);
    }
+
    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
