diff --git a/tmp/e2fc5ac3-e4f3-4c81-98c5-d3e3d6d25e51_buggy.java b/tmp/f9a7a4c7-8821-4e4d-8153-b3ffac79f2a8_fixed.java
index 6c9090f..14b9926 100644
--- a/tmp/e2fc5ac3-e4f3-4c81-98c5-d3e3d6d25e51_buggy.java
+++ b/tmp/f9a7a4c7-8821-4e4d-8153-b3ffac79f2a8_fixed.java
@@ -1,45 +1,41 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
-        // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+    if (_valueDeserializer != null) {
+        if (_valueDeserializer.isUnwrappingPossible()) {
+            JavaType delegateType = _valueDeserializer.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
-                            +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
+                        +": value deserializer ("+_valueDeserializer.getClass().getName()
+                        +") returned true for 'isUnwrappingPossible()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
         }
     }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
+
     JsonDeserializer<?> valueDeser = _valueDeserializer;
-        
-        // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
+    } else {
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
-        // and finally, type deserializer needs context as well
+
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser != null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
+
+    // This fixes the issue by ensuring that when the collection type is unmodifiable,
+    // collection deserializer falls back to using default constructor.
+    if (_collectionType.isCollectionLikeType() && !_collectionType.getRawClass().isInstantiable()) {
+        _valueInstantiator = ValueInstantiators.fromDefault();
+    }
+
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
