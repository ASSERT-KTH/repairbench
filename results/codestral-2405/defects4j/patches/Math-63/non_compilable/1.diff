diff --git a/tmp/f9ceee6b-c183-474a-a882-194d61c72703_buggy.java b/tmp/b7511149-db2b-4f87-9f8b-75cf43faee5d_fixed.java
index 9033e1c..a9a7d2a 100644
--- a/tmp/f9ceee6b-c183-474a-a882-194d61c72703_buggy.java
+++ b/tmp/b7511149-db2b-4f87-9f8b-75cf43faee5d_fixed.java
@@ -1,11 +1,35 @@
     /**
-     * Returns true iff they are equal as defined by
-     * {@link #equals(double,double,int) equals(x, y, 1)}.
+     * Returns true iff they are equal. Two arrays are considered equal if both arrays contain the
+     * same number of elements and all corresponding pairs of elements in the two arrays are equal
+     * as defined by {@link #equals(double,double,int) equals(x, y, 1)}.
      *
-     * @param x first value
-     * @param y second value
+     * This method handles {@code null} input gracefully. {@code null} arrays are equal to {@code null}
+     * arrays. {@code null} arrays are not equal to empty arrays or arrays of differing length.
+     * {@code null} elements are equal to {@code null} elements.
+     * {@code Double.NaN} elements are considered unequal to every other {@code Double.NaN} element
+     * and unequal to {@code null}
+     *
+     * @param actual first value
+     * @param expected second value
      * @return {@code true} if the values are equal.
      */
-    public static boolean equals(double x, double y) {
-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
+    public static boolean equals(double[] actual, double[] expected) {
+        if(actual == null || expected == null) {
+            return actual == expected;
+        }
+
+        if(actual.length != expected.length) {
+            return false;
+        }
+
+        for(int i=0; i<actual.length; i++) {
+            if(Double.isNaN(actual[i]) && Double.isNaN(expected[i])) {
+                return false;
+            }
+            if(actual[i] != expected[i]) {
+                return false;
+            }
+        }
+
+        return true;
     }
\ No newline at end of file
