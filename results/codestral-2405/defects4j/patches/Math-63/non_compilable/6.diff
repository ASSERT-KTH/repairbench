diff --git a/tmp/f65fb150-07da-4629-b7d0-d98b9c662fcc_buggy.java b/tmp/d4d62664-574f-4bf7-9acb-b79cee4e759b_fixed.java
index 9033e1c..bba4d61 100644
--- a/tmp/f65fb150-07da-4629-b7d0-d98b9c662fcc_buggy.java
+++ b/tmp/d4d62664-574f-4bf7-9acb-b79cee4e759b_fixed.java
@@ -1,11 +1,35 @@
 /**
-     * Returns true iff they are equal as defined by
-     * {@link #equals(double,double,int) equals(x, y, 1)}.
+ * Returns true if the arrays are equal. Both arrays are considered
+ * equal if they contain the same number of elements, and all
+ * corresponding pairs of elements in the two arrays are equal and
+ * in the same order.
  *
-     * @param x first value
-     * @param y second value
-     * @return {@code true} if the values are equal.
+ * Two doubles are considered equal if their absolute difference
+ * is less than a small tolerance value (to account for precision
+ * issues), and NaN values are considered equal to each other.
+ *
+ * @param x the first array
+ * @param y the second array
+ * @return true if the arrays are equal, false otherwise
  */
-    public static boolean equals(double x, double y) {
-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
+public static boolean equals(double[] x, double[] y) {
+    if (x == y)
+        return true;
+    if (x == null || y == null)
+        return false;
+
+    if (x.length != y.length)
+        return false;
+
+    for (int i = 0; i < x.length; i++) {
+        if (Double.isNaN(x[i])) {
+            if (!Double.isNaN(y[i]))
+                return false;
+        } else if (Double.isNaN(y[i])) {
+            return false;
+        } else if (Math.abs(x[i] - y[i]) >= 1e-15) {
+            return false;
+        }
+    }
+    return true;
 }
\ No newline at end of file
