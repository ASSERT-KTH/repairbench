diff --git a/tmp/ff384df6-4491-4dd0-a693-6b27f7231eb0_buggy.java b/tmp/ef28509c-8c0d-459c-af9c-06ae88fa203a_fixed.java
index ef65dd9..a75bd7a 100644
--- a/tmp/ff384df6-4491-4dd0-a693-6b27f7231eb0_buggy.java
+++ b/tmp/ef28509c-8c0d-459c-af9c-06ae88fa203a_fixed.java
@@ -1,92 +1,44 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
-                         Node parent) {
+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
         return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
-        !functionName.getString().equals("join")) {
+    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals("join")) {
         return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
+
+    if (arrayNode.getChildCount() == 0) {
+        parent.replaceChild(n, Node.newString(""));
+        t.getCompiler().reportCodeChange();
+        return;
+    }
+
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
     while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
             sb.append(joinString);
         }
+        if (NodeUtil.isImmutableValue(elem)) {
             sb.append(NodeUtil.getStringValue(elem));
         } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
-        }
-        foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
+            sb.append(elem.getType().toString()); // For non-string types, just append the type
         }
         elem = elem.getNext();
     }
 
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(Node.newString(sb.toString()));
-    }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
-
     int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
-        break;
+    int foldedSize = sb.length();
+    foldedSize += InlineCostEstimator.getCost(right); // Add the cost of the joinString
 
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return;
-        }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        parent.replaceChild(n, foldedStringNode);
-        break;
-
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
-        }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
-        break;
-    }
+    if (foldedSize < originalSize) {
+        parent.replaceChild(n, Node.newString(sb.toString()));
         t.getCompiler().reportCodeChange();
     }
+}
\ No newline at end of file
