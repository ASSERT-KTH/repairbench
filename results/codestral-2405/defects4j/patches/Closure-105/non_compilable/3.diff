diff --git a/tmp/dbde6960-5c85-4ecb-b054-44a45d5ecdf2_buggy.java b/tmp/aa3a3399-3eb3-4594-89a2-60295cf0b7b7_fixed.java
index ef65dd9..c186691 100644
--- a/tmp/dbde6960-5c85-4ecb-b054-44a45d5ecdf2_buggy.java
+++ b/tmp/aa3a3399-3eb3-4594-89a2-60295cf0b7b7_fixed.java
@@ -1,92 +1,60 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
-                         Node parent) {
+  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
+    Node originArray = arrayNode.copy(); // Make a copy of the original array to keep its position
+    boolean hasNonString = false;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
+        hasNonString = true;
         if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
+          Node newNode = Node.newString(sb.toString()).detach();
+          foldedSize = sb.length();
           sb = new StringBuilder();
+          originArray.replaceChild(elem, newNode);
+          elem = newNode;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(Node.newString(sb.toString()));
+      Node newNode = Node.newString(sb.toString()).detach();
+      foldedSize += sb.length();
+      originArray.replaceChild(originArray.getLastChild().getNext(), newNode);
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
-        break;
 
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return;
+    if (hasNonString) {
+      // Only replace the original array with a new one if necessary
+      parent.replaceChild(left, originArray);
     }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        parent.replaceChild(n, foldedStringNode);
-        break;
 
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
-        }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
-        break;
-    }
+    if (foldedSize < originalSize) {
       t.getCompiler().reportCodeChange();
+    } else {
+      // Revert the changes if the folded size is not smaller than the original size
+      parent.replaceChild(left, arrayNode);
+    }
   }
\ No newline at end of file
