diff --git a/tmp/8074399b-9e8e-48ab-89b0-b9f06be83f73_buggy.java b/tmp/a2641daa-fbb3-4408-bd80-32af993ea3f8_fixed.java
index ef65dd9..028a800 100644
--- a/tmp/8074399b-9e8e-48ab-89b0-b9f06be83f73_buggy.java
+++ b/tmp/a2641daa-fbb3-4408-bd80-32af993ea3f8_fixed.java
@@ -1,92 +1,78 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
-                         Node parent) {
+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
         return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
-    if ((arrayNode.getType() != Token.ARRAYLIT) ||
-        !functionName.getString().equals("join")) {
+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) {
         return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
+    boolean first = true;
     Node elem = arrayNode.getFirstChild();
+
     // Merges adjacent String nodes.
     while (elem != null) {
         if (NodeUtil.isImmutableValue(elem)) {
-        if (sb.length() > 0) {
+            if (!first) {
                 sb.append(joinString);
             }
             sb.append(NodeUtil.getStringValue(elem));
         } else {
             if (sb.length() > 0) {
                 // + 2 for the quotes.
                 foldedSize += sb.length() + 2;
                 arrayFoldedChildren.add(Node.newString(sb.toString()));
                 sb = new StringBuilder();
             }
             foldedSize += InlineCostEstimator.getCost(elem);
             arrayFoldedChildren.add(elem);
         }
         elem = elem.getNext();
+        first = false;
     }
 
     if (sb.length() > 0) {
         // + 2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+    // one for each separator.
+    foldedSize += Math.max(arrayFoldedChildren.size() - 1, 0);
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
         case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
-        break;
-
         case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
+            Node foldedNode = arrayFoldedChildren.size() > 0 ? arrayFoldedChildren.remove(0) : Node.newString("");
             if (foldedSize > originalSize) {
                 return;
             }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        parent.replaceChild(n, foldedStringNode);
+            parent.replaceChild(n, foldedNode);
             break;
 
         default:
             // No folding could actually be performed.
             if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
                 return;
             }
             int kJoinOverhead = "[].join()".length();
             foldedSize += kJoinOverhead;
             foldedSize += InlineCostEstimator.getCost(right);
             if (foldedSize > originalSize) {
                 return;
             }
             arrayNode.detachChildren();
             for (Node node : arrayFoldedChildren) {
                 arrayNode.addChildToBack(node);
             }
             break;
     }
     t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
