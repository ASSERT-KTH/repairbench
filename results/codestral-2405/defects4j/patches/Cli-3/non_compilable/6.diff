diff --git a/tmp/6b693f01-0d83-4c56-90e8-b9b4865681ed_buggy.java b/tmp/87f1a1de-d94e-46f3-a3f7-f0f4de7de6a9_fixed.java
index d9b400d..ceb9159 100644
--- a/tmp/6b693f01-0d83-4c56-90e8-b9b4865681ed_buggy.java
+++ b/tmp/87f1a1de-d94e-46f3-a3f7-f0f4de7de6a9_fixed.java
@@ -1,21 +1,34 @@
+import org.apache.commons.lang.math.NumberUtils;
+
 /**
-     * <p>Create a number from a String. If a . is present, it creates a 
-     *    Double, otherwise a Long. </p>
+ * <p>Create a number from a String. If a . is present, it creates a Double, otherwise a Long. </p>
  *
  * @param str the value
  * @return the number represented by <code>str</code>, if <code>str</code>
  * is not a number, null is returned.
  */
 public static Number createNumber(String str)
 {
-        try
-        {
-            return org.apache.commons.lang.math.NumberUtils.createNumber(str);
+    if (str == null) {
+        return null;
     }
-        catch (NumberFormatException nfe)
-        {
+
+    char decimalPoint = NumberUtils.DECIMAL_POINT;
+    int decimalPointIndex = str.indexOf(decimalPoint);
+
+    if (decimalPointIndex > -1 && decimalPointIndex != str.lastIndexOf(decimalPoint)) {
+        System.err.println("Invalid number format: " + str);
+        return null;
+    }
+
+    try {
+        if (decimalPointIndex > -1) {
+            return Double.valueOf(str);
+        } else {
+            return Long.valueOf(str);
+        }
+    } catch (NumberFormatException nfe) {
         System.err.println(nfe.getMessage());
-        }
-
         return null;
     }
+}
\ No newline at end of file
