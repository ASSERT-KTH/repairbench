diff --git a/tmp/db295431-a3c4-4911-ac60-a8c36e58f53f_buggy.java b/tmp/fdc499cd-b746-44ef-8243-8bab228a1f5d_fixed.java
index 2573d30..208ac8c 100644
--- a/tmp/db295431-a3c4-4911-ac60-a8c36e58f53f_buggy.java
+++ b/tmp/fdc499cd-b746-44ef-8243-8bab228a1f5d_fixed.java
@@ -1,20 +1,35 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
     node = node.getFirstChild();
     if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+        && isNameAssignedToInSubtree(node.getString(), replacement)) {
       return false;
     }
 
     return true;
   }
+
+  /**
+   * Helper function to check if a name is assigned to in a subtree of node.
+   */
+  private boolean isNameAssignedToInSubtree(String name, Node node) {
+    if (node.isAssign() && node.getFirstChild().isName() && name.equals(node.getFirstChild().getString())) {
+      return true;
+    }
+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {
+      if (isNameAssignedToInSubtree(name, child)) {
+        return true;
+      }
+    }
+    return false;
+  }
\ No newline at end of file
