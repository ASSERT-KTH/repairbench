diff --git a/tmp/21c1af52-6422-4e7a-9199-7393abb14989_buggy.java b/tmp/5bce7626-8c59-480e-aeef-1b06cb9a9e00_fixed.java
index 4be01ab..f798d4a 100644
--- a/tmp/21c1af52-6422-4e7a-9199-7393abb14989_buggy.java
+++ b/tmp/5bce7626-8c59-480e-aeef-1b06cb9a9e00_fixed.java
@@ -1,115 +1,72 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
-  @SuppressWarnings("fallthrough")
-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
-                                                      WhitespaceOption option) {
+  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
+
     int startLineno = stream.getLineno();
-    int startCharno = stream.getCharno() + 1;
-
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
+    int startCharno = stream.getCharno();
 
     StringBuilder builder = new StringBuilder();
-    builder.append(line);
-
-    state = State.SEARCHING_ANNOTATION;
-    token = next();
 
     boolean ignoreStar = false;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
     do {
+      token = next();
       switch (token) {
         case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
-            }
-
+          if (!ignoreStar) {
             builder.append('*');
           }
-
-          token = next();
           continue;
 
         case EOL:
-          if (option != WhitespaceOption.SINGLE_LINE) {
+          if (option == WhitespaceOption.PRESERVE) {
             builder.append("\n");
+            // keep track of extra whitespaces after the star
+            int charno = stream.getCharno();
+            for (int i = startCharno; i < charno; i++) {
+              builder.append(' ');
+            }
+            startCharno = charno + 1;
+          } else {
+            builder.append(" ");
           }
-
           ignoreStar = true;
-          token = next();
           continue;
 
-        default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+        case EOC:
+        case EOF:
           String multilineText = builder.toString();
 
           if (option != WhitespaceOption.PRESERVE) {
             multilineText = multilineText.trim();
           }
 
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
 
           if (multilineText.length() > 0) {
             jsdocBuilder.markText(multilineText, startLineno, startCharno,
                 endLineno, endCharno);
           }
 
           return new ExtractionInfo(multilineText, token);
-          }
 
-          if (builder.length() > 0) {
-            builder.append(' ');
-          }
+        default:
+          ignoreStar = false;
           builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
+          if (option == WhitespaceOption.PRESERVE) {
+            int charno = stream.getCharno();
+            for (int i = startCharno; i < charno; i++) {
+              builder.append(' ');
             }
-
-          builder.append(line);
-          token = next();
+            startCharno = charno;
+          }
+          continue;
       }
     } while (true);
   }
\ No newline at end of file
