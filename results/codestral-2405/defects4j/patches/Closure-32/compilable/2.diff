diff --git a/tmp/dbbecac3-7e24-4660-b8a5-5f68f1b24071_buggy.java b/tmp/3caf9f34-6dc9-4608-a636-00999d743602_fixed.java
index 4be01ab..04e4b34 100644
--- a/tmp/dbbecac3-7e24-4660-b8a5-5f68f1b24071_buggy.java
+++ b/tmp/3caf9f34-6dc9-4608-a636-00999d743602_fixed.java
@@ -1,115 +1,65 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
-  @SuppressWarnings("fallthrough")
-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
-                                                      WhitespaceOption option) {
+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {
 
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
-        token == JsDocToken.EOF) {
+    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
-
     StringBuilder builder = new StringBuilder();
-    builder.append(line);
 
     state = State.SEARCHING_ANNOTATION;
+
+    // Preserve the first line of the textual block as it is, without trimming.
+    // This preserves the indentation for ASCII art.
+    builder.append(stream.getRemainingJSDocLine());
+    if (builder.charAt(0) == '@') {
+        // If the block starts with '@' its a tag declaration, remove the tag.
+        int idx = builder.indexOf(" ");
+        builder.delete(0, idx + 1);
+    }
+
     token = next();
 
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
     do {
       switch (token) {
         case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
+          // If the star is the first character in a line, skip it.
+          if (stream.getCharno() == 0) {
+            token = next();
+            continue;
           }
-
           builder.append('*');
-          }
-
+          builder.append(stream.getRemainingJSDocLine());
           token = next();
           continue;
 
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
-
-          ignoreStar = true;
           token = next();
           continue;
 
         default:
-          ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
-            String multilineText = builder.toString();
-
-            if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
-            }
+          if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
+            String multilineText = builder.toString().trim();
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
             return new ExtractionInfo(multilineText, token);
           }
 
-          if (builder.length() > 0) {
-            builder.append(' ');
-          }
-          builder.append(toString(token));
-
-          line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
-          }
-
-          builder.append(line);
           token = next();
       }
     } while (true);
   }
\ No newline at end of file
