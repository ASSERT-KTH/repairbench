diff --git a/tmp/f4807a97-e35d-4fc3-a494-d219ce2a14be_buggy.java b/tmp/e09c20c0-d141-4055-97ea-0336eb7ec861_fixed.java
index 4be01ab..a21a9fd 100644
--- a/tmp/f4807a97-e35d-4fc3-a494-d219ce2a14be_buggy.java
+++ b/tmp/e09c20c0-d141-4055-97ea-0336eb7ec861_fixed.java
@@ -1,115 +1,46 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
-  @SuppressWarnings("fallthrough")
-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
-                                                      WhitespaceOption option) {
+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {
 
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
-        token == JsDocToken.EOF) {
+  if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
-    String line = stream.getRemainingJSDocLine();
-    if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
-    }
-
   StringBuilder builder = new StringBuilder();
-    builder.append(line);
+  builder.append(stream.getRemainingJSDocLine().trim());
 
-    state = State.SEARCHING_ANNOTATION;
-    token = next();
-
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
-    do {
-      switch (token) {
-        case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
-            }
-
-            builder.append('*');
-          }
-
-          token = next();
-          continue;
+  boolean insideBlock = true;
 
+  while (insideBlock) {
+    switch (token = next()) {
       case EOL:
-          if (option != WhitespaceOption.SINGLE_LINE) {
         builder.append("\n");
+        if (option != WhitespaceOption.SINGLE_LINE) {
+          startCharno = stream.getCharno() + 1;
         }
-
-          ignoreStar = true;
-          token = next();
-          continue;
-
+        break;
+      case STAR:
+        builder.append("*");
+        builder.append(stream.getRemainingJSDocLine().trim());
+        break;
       default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
-            String multilineText = builder.toString();
+        stream.pushBack(token);
+        insideBlock = false;
+    }
+  }
 
   if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
+    builder = new StringBuilder(builder.toString().trim());
   }
 
   int endLineno = stream.getLineno();
   int endCharno = stream.getCharno();
 
-            if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
-                  endLineno, endCharno);
-            }
-
-            return new ExtractionInfo(multilineText, token);
-          }
-
   if (builder.length() > 0) {
-            builder.append(' ');
+    jsdocBuilder.markText(builder.toString(), startLineno, startCharno, endLineno, endCharno);
   }
-          builder.append(toString(token));
 
-          line = stream.getRemainingJSDocLine();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            line = trimEnd(line);
-          }
-
-          builder.append(line);
-          token = next();
-      }
-    } while (true);
+  return new ExtractionInfo(builder.toString(), token);
 }
\ No newline at end of file
