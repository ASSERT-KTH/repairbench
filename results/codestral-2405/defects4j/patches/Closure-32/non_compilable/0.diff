diff --git a/tmp/f830ac43-a42c-47ed-a00c-bf1732d3f216_buggy.java b/tmp/999221f2-4b80-4b96-af70-242df344aec9_fixed.java
index 4be01ab..028bd59 100644
--- a/tmp/f830ac43-a42c-47ed-a00c-bf1732d3f216_buggy.java
+++ b/tmp/999221f2-4b80-4b96-af70-242df344aec9_fixed.java
@@ -1,115 +1,92 @@
-  /**
-   * Extracts the text found on the current line and all subsequent
-   * until either an annotation, end of comment or end of file is reached.
-   * Note that if this method detects an end of line as the first token, it
-   * will quit immediately (indicating that there is no text where it was
-   * expected).  Note that token = info.token; should be called after this
-   * method is used to update the token properly in the parser.
-   *
-   * @param token The start token.
-   * @param option How to handle whitespace.
-   *
-   * @return The extraction information.
-   */
-  @SuppressWarnings("fallthrough")
-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
-                                                      WhitespaceOption option) {
+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {
 
-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
-        token == JsDocToken.EOF) {
+  if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
   String line = stream.getRemainingJSDocLine();
   if (option != WhitespaceOption.PRESERVE) {
     line = line.trim();
   }
 
   StringBuilder builder = new StringBuilder();
   builder.append(line);
 
   state = State.SEARCHING_ANNOTATION;
   token = next();
 
   boolean ignoreStar = false;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
   do {
     switch (token) {
       case STAR:
         if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
+          // Do nothing if star is the first token of the line. It equals blank in the result.
         } else {
-            // The star is part of the comment.
+          // Append '*' to the builder if it's not the first token of the line.
           if (builder.length() > 0) {
             builder.append(' ');
           }
-
           builder.append('*');
         }
 
         token = next();
         continue;
 
       case EOL:
         if (option != WhitespaceOption.SINGLE_LINE) {
           builder.append("\n");
         }
 
         ignoreStar = true;
         token = next();
         continue;
 
       default:
         ignoreStar = false;
         state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+        if (token == JsDocToken.EOC || token == JsDocToken.EOF) {
           String multilineText = builder.toString();
 
           if (option != WhitespaceOption.PRESERVE) {
             multilineText = multilineText.trim();
           }
 
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
 
+          // If first token was a license or preserve annotation add extracted text to JSDocInfo,
+          // else handle the token as normal text.
+          if (annotationType == JsDocToken.ANNOTATION_LICENSE ||
+              annotationType == JsDocToken.ANNOTATION_PRESERVE) {
             if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
-                  endLineno, endCharno);
+              jsdocBuilder.setLicense(multilineText, startLineno, startCharno, endLineno, endCharno);
+            }
+          } else if (multilineText.length() > 0) {
+            jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);
           }
 
           return new ExtractionInfo(multilineText, token);
         }
 
         if (builder.length() > 0) {
           builder.append(' ');
         }
         builder.append(toString(token));
 
         line = stream.getRemainingJSDocLine();
 
         if (option != WhitespaceOption.PRESERVE) {
           line = trimEnd(line);
         }
 
         builder.append(line);
         token = next();
     }
   } while (true);
 }
\ No newline at end of file
