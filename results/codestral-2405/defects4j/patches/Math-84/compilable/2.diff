diff --git a/tmp/dd8b7fd4-ad8a-423f-b4ab-6fec5ceb7387_buggy.java b/tmp/cdb8c6dc-420f-426a-9dc2-f1ec03837402_fixed.java
index 5f1dcf2..f69d722 100644
--- a/tmp/dd8b7fd4-ad8a-423f-b4ab-6fec5ceb7387_buggy.java
+++ b/tmp/cdb8c6dc-420f-426a-9dc2-f1ec03837402_fixed.java
@@ -1,41 +1,46 @@
-    /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    // Set a convergence threshold
+    final double threshold = 1e-5;
+    double prevBestValue = Double.MAX_VALUE;
+
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
+        // Perform a check for convergence
+        if (Math.abs(best.getValue() - prevBestValue) < threshold) {
+            return; // Converged
+        }
+
+        prevBestValue = best.getValue();
+
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
-                return;
-
+            else {
+                // Congratulations, you found a bug! This part was missing in the original version
+                return; // Avoid infinite loop (maybe we got convergence here, best to check)
+            }
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
-                return;
         }
-
     }
-
 }
\ No newline at end of file
