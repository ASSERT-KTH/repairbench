diff --git a/tmp/29c8760d-d327-416a-8920-9659c9f24755_buggy.java b/tmp/3bab094d-36e3-429d-b964-6718e03844f8_fixed.java
index 5f1dcf2..63677ad 100644
--- a/tmp/29c8760d-d327-416a-8920-9659c9f24755_buggy.java
+++ b/tmp/3bab094d-36e3-429d-b964-6718e03844f8_fixed.java
@@ -1,41 +1,46 @@
-    /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    RealPointValuePair best = simplex[0];
+    double lastBestValue = Double.POSITIVE_INFINITY;
+
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+        final RealPointValuePair[] original = simplex.clone();
+        best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
-
-                return;
+            // found better point, so we add the reflection and continue to the next simplex
+            simplex = Arrays.copyOf(original, original.length);
+            simplex[simplex.length - 1] = reflected;
+            continue;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
-                return;
+            simplex = Arrays.copyOf(original, original.length);
+            simplex[simplex.length - 1] = contracted;
+            continue;
         }
 
+        // Check convergence
+        if (Math.abs(best.getValue() - lastBestValue) < convergenceThreshold) {
+            break; // Leave the loop if the simplex has converged
         }
 
+        lastBestValue = best.getValue();
+
+        // If the simplex hasn't converged, reduce it
+        reduce(original, comparator);
+    }
 }
\ No newline at end of file
