diff --git a/tmp/1c0b4485-a061-48ed-9327-4648e49f8658_buggy.java b/tmp/96595786-6c77-4985-a4e6-7a3b2ce24d68_fixed.java
index 5f1dcf2..0356f46 100644
--- a/tmp/1c0b4485-a061-48ed-9327-4648e49f8658_buggy.java
+++ b/tmp/96595786-6c77-4985-a4e6-7a3b2ce24d68_fixed.java
@@ -1,41 +1,42 @@
-    /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (!getConvergenceChecker().converged(getIterations(), simplex)) {
 
             incrementIterationsCounter();
 
             // save the original vertex
-            final RealPointValuePair[] original = simplex;
+            final RealPointValuePair[] original = Arrays.copyOf(simplex, simplex.length);
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(expanded, reflected) >= 0) {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = copyBestSimplex(original, reflected);
                 }
-
-                return;
-
-            }
-
+            } else {
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+                if (comparator.compare(contracted, reflected) <= 0) {
                     // accept the contracted simplex
-
-            // check convergence
-                return;
+                    simplex = copyBestSimplex(original, contracted);
+                } else {
+                    // shrink the simplex
+                    obtainShrunkSimplex(original[0]);
+                }
+            }
         }
 
     }
 
+    private RealPointValuePair[] copyBestSimplex(final RealPointValuePair[] original, final RealPointValuePair best) {
+        final RealPointValuePair[] newSimplex = Arrays.copyOf(original, original.length);
+        newSimplex[newSimplex.length - 1] = best;
+        return newSimplex;
     }
\ No newline at end of file
