diff --git a/tmp/4698ae13-dc32-4af2-abbb-7ecfe956946c_buggy.java b/tmp/f96bc252-cade-4f1c-a324-8b2aadd7e1a6_fixed.java
index 5f1dcf2..9fc6c21 100644
--- a/tmp/4698ae13-dc32-4af2-abbb-7ecfe956946c_buggy.java
+++ b/tmp/f96bc252-cade-4f1c-a324-8b2aadd7e1a6_fixed.java
@@ -1,41 +1,41 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
+        final RealPointValuePair currentBest = findCurrentBest(original, comparator);
+
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = getCurrentSimplex();
             }
-
-                return;
-
-            }
-
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+            if (comparator.compare(contracted, best) >= 0) {
+                // shrink the simplex
+                shrinkSimplex(original, comparator);
+            }
+        }
 
         // check convergence
+        if (convergenceChecker.converged(getIterations(), findCurrentBest(simplex, comparator), currentBest)) {
             return;
         }
-
     }
-
+    throw new MaxIterationsExceededException(getMaxIterations());
 }
\ No newline at end of file
