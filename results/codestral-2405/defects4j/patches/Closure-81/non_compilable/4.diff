diff --git a/tmp/8db24390-535f-4164-8e28-da543f42d6f3_buggy.java b/tmp/30b7293b-faab-4c9f-83a3-f2ef30b745d1_fixed.java
index 6e05e4b..3799893 100644
--- a/tmp/8db24390-535f-4164-8e28-da543f42d6f3_buggy.java
+++ b/tmp/30b7293b-faab-4c9f-83a3-f2ef30b745d1_fixed.java
@@ -1,51 +1,47 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
   Boolean isUnnamedFunction = false;
   if (name == null) {
     name = new Name();
     name.setIdentifier("");
     isUnnamedFunction = true;
+
+    // Add this block to set the line number and character number for unnamed functions
+    String sourceName = functionNode.getSourceFileName();
+    Node errNode = new Node(Token.ERROR);
+    errNode.setError("name", "unnamed function statement", sourceName, functionNode.getLineno(),
+        functionNode.getCharno());
+    this.tree.addChildToBack(errNode);
+    // End of added block
   }
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
   if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
     int lpColumn = functionNode.getAbsolutePosition() +
         functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
 
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
+  if (name != null) {
+    lp.setLineno(name.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
   int lparenCharno = functionNode.getLp() +
       functionNode.getAbsolutePosition();
 
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
  return node;
 }
\ No newline at end of file
