diff --git a/tmp/cc277f35-defc-45a5-80c5-58aaf69c955e_buggy.java b/tmp/25c19db1-770e-4dff-97ed-8fcb0cfb4837_fixed.java
index 6e05e4b..f960782 100644
--- a/tmp/cc277f35-defc-45a5-80c5-58aaf69c955e_buggy.java
+++ b/tmp/25c19db1-770e-4dff-97ed-8fcb0cfb4837_fixed.java
@@ -1,51 +1,42 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
-      if (name == null) {
-        name = new Name();
-        name.setIdentifier("");
-        isUnnamedFunction = true;
-      }
   Node node = newNode(Token.FUNCTION);
-      Node newName = transform(name);
-      if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
+  Node newName = new Node(Token.NAME);
+  newName.setString("");
+  newName.setQuotedString("");
+
+  // For unnamed function expressions, remove the FUNCTION token and use an empty NAME
+  if (name == null && functionNode.getParent() instanceof AstExprResult) {
+    node = newName;  // Use empty NAME directly
+  } else {
+    node.addChildToBack(newName);  // Still add the empty NAME as a child of FUNCTION node for unnamed function statements
+  }
+
+  if (name == null) {
+    // For all unnamed cases, set the line number based on functionNode's getLineno()
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
-        newName.setCharno(position2charno(lpColumn));
-      }
-
+    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
+    newName.setCharno(position2charno(lparenCharno));
+  } else {
+    // For named functions, transform the name node as before
+    newName = transform(name);
     node.addChildToBack(newName);
+  }
+
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
-      } else {
-        lp.setLineno(functionNode.getLineno());
-      }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+  lp.setLineno(name != null ? name.getLineno() : functionNode.getLineno());
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
   lp.setCharno(position2charno(lparenCharno));
+
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
+
   return node;
 }
\ No newline at end of file
