diff --git a/tmp/025593b1-4918-42ac-b732-19550b3e380e_buggy.java b/tmp/2cf0236d-b374-454e-8aff-fdedfb671533_fixed.java
index a7d0787..b3377a0 100644
--- a/tmp/025593b1-4918-42ac-b732-19550b3e380e_buggy.java
+++ b/tmp/2cf0236d-b374-454e-8aff-fdedfb671533_fixed.java
@@ -1,54 +1,58 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
-    @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
-            return (T) str;
+        return clazz.cast(str);
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
-            return (T) createObject(str);
+        return clazz.cast(createObject(str));
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
-            return (T) createNumber(str);
+        if (clazz == Integer.class)
+        {
+            return clazz.cast(Integer.parseInt(str));
+        }
+        else if (clazz == Float.class)
+        {
+            return clazz.cast(Float.parseFloat(str));
+        }
+        else if (clazz == Double.class)
+        {
+            return clazz.cast(Double.parseDouble(str));
+        }
+        else
+        {
+            throw new ParseException("Unsupported numeric type");
+        }
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
-            return (T) createDate(str);
+        return clazz.cast(createDate(str));
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
-            return (T) createClass(str);
+        return clazz.cast(createClass(str));
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
-            return (T) createFile(str);
+        return clazz.cast(createFile(str));
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
-            return (T) openFile(str);
+        return clazz.cast(openFile(str));
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
-            return (T) createFiles(str);
+        return clazz.cast(createFiles(str));
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
-            return (T) createURL(str);
+        return clazz.cast(createURL(str));
     }
     else
     {
-            return null;
+        throw new ParseException("Unsupported type");
     }
 }
\ No newline at end of file
