diff --git a/tmp/acefe037-08a4-4ae8-8995-b1cdba66a3ad_buggy.java b/tmp/9fdf394f-c2d2-4f37-bc5d-a8d8e0e23783_fixed.java
index a7d0787..76be5e9 100644
--- a/tmp/acefe037-08a4-4ae8-8995-b1cdba66a3ad_buggy.java
+++ b/tmp/9fdf394f-c2d2-4f37-bc5d-a8d8e0e23783_fixed.java
@@ -1,54 +1,23 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
-    @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
-            return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
-            return (T) createObject(str);
-        }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
-            return (T) createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
-            return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
-            return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
-            return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
-            return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
-            return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
-            return (T) createURL(str);
-        }
-        else
-        {
-            return null;
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    if (String.class.equals(clazz)) {
+        return clazz.cast(str);
+    } else if (PatternOptionBuilder.OBJECT_VALUE.equals(clazz)) {
+        return clazz.cast(createObject(str));
+    } else if (Number.class.isAssignableFrom(clazz)) {
+        return clazz.cast(createNumber(str));
+    } else if (Date.class.equals(clazz)) {
+        return clazz.cast(createDate(str));
+    } else if (Class.class.equals(clazz)) {
+        return clazz.cast(createClass(str));
+    } else if (File.class.equals(clazz)) {
+        return clazz.cast(createFile(str));
+    } else if (File.class.equals(clazz) && PatternOptionBuilder.EXISTING_FILE_VALUE.equals(clazz)) {
+        return clazz.cast(openFile(str));
+    } else if (File[].class.equals(clazz) && PatternOptionBuilder.FILES_VALUE.equals(clazz)) {
+        return clazz.cast(createFiles(str));
+    } else if (URL.class.equals(clazz)) {
+        return clazz.cast(createURL(str));
+    } else {
+        throw new ParseException("Unsupported type: " + clazz.getName());
     }
 }
\ No newline at end of file
