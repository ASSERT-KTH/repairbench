diff --git a/tmp/a3105088-8abb-4110-9b7d-825aa4abc970_buggy.java b/tmp/dd5879b9-87a3-4a5b-909f-b505e0b9979a_fixed.java
index 42c5923..142b745 100644
--- a/tmp/a3105088-8abb-4110-9b7d-825aa4abc970_buggy.java
+++ b/tmp/dd5879b9-87a3-4a5b-909f-b505e0b9979a_fixed.java
@@ -1,89 +1,27 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
-    public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
-        Fraction ret = super.parse(source, pos);
-        if (ret != null) {
-            return ret;
-        }
-        
-        int initialIndex = pos.getIndex();
-
-        // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
-
-        // parse whole
-        Number whole = getWholeFormat().parse(source, pos);
-        if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
-            return null;
-        }
-
-        // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
-        
 // parse numerator
 Number num = getNumeratorFormat().parse(source, pos);
 if (num == null) {
     // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
     pos.setIndex(initialIndex);
     return null;
-        }
-        
-            // minus signs should be leading, invalid expression
-
-        // parse '/'
-        int startIndex = pos.getIndex();
-        char c = parseNextCharacter(source, pos);
-        switch (c) {
-        case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
-        case '/' :
-            // found '/', continue parsing denominator
-            break;
-        default :
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
+} else if (num.intValue() < 0) {
+    // minus sign in numerator
     pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
-            return null;
+    pos.setErrorIndex(pos.getIndex() + 1);
+    throw new ParseException("Minus sign in numerator is not allowed in a proper fraction.", pos.getErrorIndex());
 }
 
-        // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
+// ...(rest of the function)...
 
 // parse denominator
 Number den = getDenominatorFormat().parse(source, pos);
 if (den == null) {
     // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
     pos.setIndex(initialIndex);
     return null;
-        }
-        
-            // minus signs must be leading, invalid
-
-        int w = whole.intValue();
-        int n = num.intValue();
-        int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+} else if (den.intValue() < 0) {
+    // minus sign in denominator
+    pos.setIndex(initialIndex);
+    pos.setErrorIndex(pos.getIndex() + 1);
+    throw new ParseException("Minus sign in denominator is not allowed in a proper fraction.", pos.getErrorIndex());
 }
\ No newline at end of file
