diff --git a/tmp/21ed621c-115b-4ce4-b357-c423a40d6373_buggy.java b/tmp/7f638d6c-3f36-48b3-bb56-2708df2dae71_fixed.java
index 904dba7..7f04e2b 100644
--- a/tmp/21ed621c-115b-4ce4-b357-c423a40d6373_buggy.java
+++ b/tmp/7f638d6c-3f36-48b3-bb56-2708df2dae71_fixed.java
@@ -1,46 +1,45 @@
 private String format(JSError error, boolean warning) {
     // extract source excerpt
     SourceExcerptProvider source = getSource();
     String sourceExcerpt = source == null ? null :
-        excerpt.get(
-            source, error.sourceName, error.lineNumber, excerptFormatter);
+        excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);
 
     // formatting the message
     StringBuilder b = new StringBuilder();
     if (error.sourceName != null) {
       b.append(error.sourceName);
       if (error.lineNumber > 0) {
         b.append(':');
         b.append(error.lineNumber);
       }
       b.append(": ");
     }
 
     b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));
     b.append(" - ");
 
-    b.append(error.description);
+    b.append(error.getDescription()); // Fixed line: use error.getDescription() instead of error.description
     b.append('\n');
     if (sourceExcerpt != null) {
       b.append(sourceExcerpt);
       b.append('\n');
-      int charno = error.getCharno();
+      int charno = error.getCharno() - 1; // Fixed line: subtract 1 from charno because it is 1-based
 
       // padding equal to the excerpt and arrow at the end
       // charno == sourceExpert.length() means something is missing
       // at the end of the line
       if (excerpt.equals(LINE)
           && 0 <= charno && charno < sourceExcerpt.length()) {
-        for (int i = 0; i < charno; i++) {
+        for (int i = 0; i < error.columnNumber - 1; i++) { // Fixed line: use error.columnNumber - 1 instead of charno
           char c = sourceExcerpt.charAt(i);
           if (Character.isWhitespace(c)) {
             b.append(c);
           } else {
             b.append(' ');
           }
         }
         b.append("^\n");
       }
     }
     return b.toString();
   }
\ No newline at end of file
