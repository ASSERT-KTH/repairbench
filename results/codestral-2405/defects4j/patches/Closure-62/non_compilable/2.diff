diff --git a/tmp/f832d01b-5629-44d7-9cd1-bd765655bb6f_buggy.java b/tmp/2fb5c434-3c62-480b-8cc3-72b13de58bf4_fixed.java
index 904dba7..8fb1a51 100644
--- a/tmp/f832d01b-5629-44d7-9cd1-bd765655bb6f_buggy.java
+++ b/tmp/2fb5c434-3c62-480b-8cc3-72b13de58bf4_fixed.java
@@ -1,46 +1,52 @@
 private String format(JSError error, boolean warning) {
   // extract source excerpt
   SourceExcerptProvider source = getSource();
   String sourceExcerpt = source == null ? null :
       excerpt.get(
           source, error.sourceName, error.lineNumber, excerptFormatter);
 
   // formatting the message
   StringBuilder b = new StringBuilder();
   if (error.sourceName != null) {
     b.append(error.sourceName);
     if (error.lineNumber > 0) {
       b.append(':');
       b.append(error.lineNumber);
     }
     b.append(": ");
   }
 
   b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));
   b.append(" - ");
 
   b.append(error.description);
   b.append('\n');
   if (sourceExcerpt != null) {
     b.append(sourceExcerpt);
     b.append('\n');
     int charno = error.getCharno();
 
     // padding equal to the excerpt and arrow at the end
     // charno == sourceExpert.length() means something is missing
     // at the end of the line
-      if (excerpt.equals(LINE)
-          && 0 <= charno && charno < sourceExcerpt.length()) {
-        for (int i = 0; i < charno; i++) {
-          char c = sourceExcerpt.charAt(i);
-          if (Character.isWhitespace(c)) {
-            b.append(c);
+    if (excerpt.equals(Excerpt.Format.LINE)
+        && 0 <= charno && charno <= sourceExcerpt.length()) {
+      int i = 0;
+      for (; i < charno; i++) {
+        if (i < sourceExcerpt.length() - 1 && sourceExcerpt.charAt(i) == '\t') {
+          // preserve tab spacing
+          b.append('\t');
+        } else if (Character.isWhitespace(sourceExcerpt.charAt(i))) {
+          b.append(' ');
         } else {
+          break;
+        }
+      }
+      for (; i < charno; i++) {
         b.append(' ');
       }
-        }
       b.append("^\n");
     }
   }
   return b.toString();
 }
\ No newline at end of file
