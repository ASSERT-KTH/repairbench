diff --git a/tmp/7bf0bd42-a993-4df5-b7d9-0a7fd1360c86_buggy.java b/tmp/5bd7ced0-3c2b-4a32-89b9-98ded662d4fe_fixed.java
index fe73b81..c7e6d1d 100644
--- a/tmp/7bf0bd42-a993-4df5-b7d9-0a7fd1360c86_buggy.java
+++ b/tmp/5bd7ced0-3c2b-4a32-89b9-98ded662d4fe_fixed.java
@@ -1,42 +1,37 @@
-    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
-    {
+protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context) {
     final String name = type.getName();
-        // 19-Mar-2015: Without context, all we can check are bounds.
+
     if (context == null) {
-            // And to prevent infinite loops, now need this:
         return _unknownType();
     } else {
-            // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
-             */
         JavaType actualType = context.findType(name);
         if (actualType != null) {
             return actualType;
         }
-        }
 
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
+        // If the actual type is still null, check the bounds of the type variable
         Type[] bounds = type.getBounds();
-
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
-
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
-        context._addPlaceholder(name);
+        if (bounds.length > 0) {
+            // If there are bounds and the first one is a parameterized type and it has an actual type argument, use it
+            if (bounds[0] instanceof ParameterizedType) {
+                ParameterizedType paramType = (ParameterizedType) bounds[0];
+                Type rawType = paramType.getRawType();
+                if (rawType instanceof Class && ((Class<?>) rawType).getTypeParameters().length > 0) {
+                    Type actualTypeArgument = paramType.getActualTypeArguments()[0];
+                    if (actualTypeArgument instanceof TypeVariable) {
+                        // If the actual type argument is a type variable, try to resolve it using the context
+                        return _fromVariable((TypeVariable<?>) actualTypeArgument, context);
+                    } else {
+                        // Otherwise, construct the type from the actual type argument
+                        return _constructType(actualTypeArgument, context);
+                    }
+                }
+            }
+            // If the first bound is not a parameterized type or it does not have an actual type argument, use it
             return _constructType(bounds[0], context);
         }
+
+        // If there are no bounds, use the Object type as the default bound
+        return _constructType(Object.class, context);
+    }
+}
\ No newline at end of file
