diff --git a/tmp/35480dcd-bf11-4805-8dcd-2779cdef0c36_buggy.java b/tmp/c0c5d5aa-f13e-4b71-9529-4130ece7969d_fixed.java
index fe73b81..c8d07be 100644
--- a/tmp/35480dcd-bf11-4805-8dcd-2779cdef0c36_buggy.java
+++ b/tmp/c0c5d5aa-f13e-4b71-9529-4130ece7969d_fixed.java
@@ -1,42 +1,33 @@
 protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
 {
     final String name = type.getName();
-        // 19-Mar-2015: Without context, all we can check are bounds.
-        if (context == null) {
-            // And to prevent infinite loops, now need this:
-            return _unknownType();
-        } else {
-            // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
-             */
-            JavaType actualType = context.findType(name);
+    JavaType actualType = (context == null) ? null : context.findType(name);
+
+    // If the type is already known, return it
     if (actualType != null) {
         return actualType;
     }
-        }
 
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
     Type[] bounds = type.getBounds();
 
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
+    // If there are bounds and no context passed, use the first bound
+    if (bounds.length > 0 && context == null) {
+        return _constructType(bounds[0], context);
+    }
 
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
+    // If there are no bounds and no context, return unknown type
+    if (bounds.length == 0 && context == null) {
+        return _unknownType();
+    }
+
+    /* Add placeholder for resolution to catch types like Comparable<T> */
     context._addPlaceholder(name);
+
+    // If there are bounds, use them to construct the type
+    if (bounds.length > 0) {
         return _constructType(bounds[0], context);
     }
+
+    // If none of the conditions above are met, return unknown type
+    return _unknownType();
+}
\ No newline at end of file
