diff --git a/tmp/6b474d19-4f8c-476a-b70b-544485d8d63b_buggy.java b/tmp/2784be20-58c6-48d9-b591-191463bb60a4_fixed.java
index d80b7d0..c0438df 100644
--- a/tmp/6b474d19-4f8c-476a-b70b-544485d8d63b_buggy.java
+++ b/tmp/2784be20-58c6-48d9-b591-191463bb60a4_fixed.java
@@ -1,61 +1,47 @@
-    /**
-     * Checks dimensions and values of boundaries and inputSigma if defined.
-     */
 private void checkParameters() {
     final double[] init = getStartPoint();
     final double[] lB = getLowerBound();
     final double[] uB = getUpperBound();
 
     // Checks whether there is at least one finite bound value.
-        boolean hasFiniteBounds = false;
-        for (int i = 0; i < lB.length; i++) {
-            if (!Double.isInfinite(lB[i]) ||
-                !Double.isInfinite(uB[i])) {
-                hasFiniteBounds = true;
-                break;
-            }
-        }
+    boolean hasFiniteBounds = ArrayUtils.containsAnyFinite(lB, uB);
     // Checks whether there is at least one infinite bound value.
-        boolean hasInfiniteBounds = false;
-        if (hasFiniteBounds) {
-            for (int i = 0; i < lB.length; i++) {
-                if (Double.isInfinite(lB[i]) ||
-                    Double.isInfinite(uB[i])) {
-                    hasInfiniteBounds = true;
-                    break;
-                }
-            }
+    boolean hasInfiniteBounds = ArrayUtils.containsAnyInfinite(lB, uB);
 
-            if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
+    if (hasFiniteBounds && hasInfiniteBounds) {
+        // If there is at least one finite and one infinite bound, throw an exception.
         throw new MathUnsupportedOperationException();
-            } else {
+    } else if (hasFiniteBounds) {
         // Convert API to internal handling of boundaries.
         boundaries = new double[2][];
         boundaries[0] = lB;
         boundaries[1] = uB;
 
-                // Abort early if the normalization will overflow (cf. "encode" method).
+        // Check the range of boundaries to avoid overflow.
+        for (int i = 0; i < lB.length; i++) {
+            if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {
+                continue;  // Skip infinite bounds
+            }
+            if (Double.isInfinite(lB[i] - uB[i]) || Double.isInfinite(uB[i] - lB[i])) {
+                throw new NumberIsTooLargeException(uB[i] - lB[i], Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false);
+            }
         }
     } else {
         // Convert API to internal handling of boundaries.
         boundaries = null;
     }
 
     if (inputSigma != null) {
         if (inputSigma.length != init.length) {
             throw new DimensionMismatchException(inputSigma.length, init.length);
         }
         for (int i = 0; i < init.length; i++) {
             if (inputSigma[i] < 0) {
                 throw new NotPositiveException(inputSigma[i]);
             }
-                if (boundaries != null) {
-                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
-                    }
+            if (boundaries != null && inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
+                throw new NumberIsTooLargeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i], false);
             }
         }
     }
 }
\ No newline at end of file
