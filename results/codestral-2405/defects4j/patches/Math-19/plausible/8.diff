diff --git a/tmp/40135c57-8e22-4ac8-a8b6-14f997446351_buggy.java b/tmp/04491296-5b02-4b7b-a607-a7ac2ba67ed3_fixed.java
index d80b7d0..09a559a 100644
--- a/tmp/40135c57-8e22-4ac8-a8b6-14f997446351_buggy.java
+++ b/tmp/04491296-5b02-4b7b-a607-a7ac2ba67ed3_fixed.java
@@ -1,61 +1,64 @@
-    /**
-     * Checks dimensions and values of boundaries and inputSigma if defined.
-     */
 private void checkParameters() {
     final double[] init = getStartPoint();
     final double[] lB = getLowerBound();
     final double[] uB = getUpperBound();
 
     // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
-            if (!Double.isInfinite(lB[i]) ||
-                !Double.isInfinite(uB[i])) {
+        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {
             hasFiniteBounds = true;
             break;
         }
     }
     // Checks whether there is at least one infinite bound value.
     boolean hasInfiniteBounds = false;
     if (hasFiniteBounds) {
         for (int i = 0; i < lB.length; i++) {
-                if (Double.isInfinite(lB[i]) ||
-                    Double.isInfinite(uB[i])) {
+            if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {
                 hasInfiniteBounds = true;
                 break;
             }
         }
 
         if (hasInfiniteBounds) {
             // If there is at least one finite bound, none can be infinite,
             // because mixed cases are not supported by the current code.
             throw new MathUnsupportedOperationException();
-            } else {
+        }
+
+        // Abort early if the normalization will overflow (cf. "encode" method).
+        for (int i = 0; i < lB.length; i++) {
+            if (Double.isFinite(lB[i]) && Double.isFinite(uB[i])) {
+                if (uB[i] - lB[i] > Double.MAX_VALUE) {
+                    throw new NumberIsTooLargeException(uB[i] - lB[i], Double.MAX_VALUE, true);
+                }
+            }
+        }
+
         // Convert API to internal handling of boundaries.
         boundaries = new double[2][];
         boundaries[0] = lB;
         boundaries[1] = uB;
 
-                // Abort early if the normalization will overflow (cf. "encode" method).
-            }
     } else {
         // Convert API to internal handling of boundaries.
         boundaries = null;
     }
 
     if (inputSigma != null) {
         if (inputSigma.length != init.length) {
             throw new DimensionMismatchException(inputSigma.length, init.length);
         }
         for (int i = 0; i < init.length; i++) {
             if (inputSigma[i] < 0) {
                 throw new NotPositiveException(inputSigma[i]);
             }
             if (boundaries != null) {
                 if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
                     throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
                 }
             }
         }
     }
 }
\ No newline at end of file
