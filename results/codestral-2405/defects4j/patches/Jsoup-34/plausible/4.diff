diff --git a/tmp/a0c76071-a735-47b4-a72e-e8855ff6b177_buggy.java b/tmp/3c46a057-2caf-4f9d-8787-556c3b4497e7_fixed.java
index 21f64c6..1f0cb7d 100644
--- a/tmp/a0c76071-a735-47b4-a72e-e8855ff6b177_buggy.java
+++ b/tmp/3c46a057-2caf-4f9d-8787-556c3b4497e7_fixed.java
@@ -1,23 +1,18 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+        // scan to first instance of startchar, taking surrogate pairs into account:
+        int c = Character.codePointAt(input, offset);
+        if (startChar != c) {
+            while (++offset < length && startChar != Character.codePointAt(input, offset));
+        }
+        int i = offset + Character.charCount(c);
+        int last = i + seq.length() - Character.charCount(seq.charAt(0));
+        if (last <= length) {
+            for (int j = 1; i < last && seq.charAt(j) == Character.codePointAt(input, i); i += Character.charCount(Character.codePointAt(input, i)), j++);
             if (i == last) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
