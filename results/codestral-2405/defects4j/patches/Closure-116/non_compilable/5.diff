diff --git a/tmp/d2806157-bd86-4de2-9d94-660578419c5d_buggy.java b/tmp/f868a7d8-24c3-4cc9-b4ff-0deb531d25de_fixed.java
index 233a867..39d8625 100644
--- a/tmp/d2806157-bd86-4de2-9d94-660578419c5d_buggy.java
+++ b/tmp/f868a7d8-24c3-4cc9-b4ff-0deb531d25de_fixed.java
@@ -1,73 +1,38 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
-  private CanInlineResult canInlineReferenceDirectly(
-      Node callNode, Node fnNode) {
-    if (!isDirectCallNodeReplacementPossible(fnNode)) {
-      return CanInlineResult.NO;
-    }
-
-    Node block = fnNode.getLastChild();
-
-
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
-    Node cArg = callNode.getFirstChild().getNext();
-
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
-    if (!callNode.getFirstChild().isName()) {
-      if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
-        if (cArg == null || !cArg.isThis()) {
-          return CanInlineResult.NO;
-        }
-        cArg = cArg.getNext();
-      } else {
-        // ".apply" call should be filtered before this.
-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
-      }
-    }
-
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
 while (cArg != null || fnParam != null) {
   // For each named parameter check if a mutable argument use more than one.
   if (fnParam != null) {
     if (cArg != null) {
+      // Get the references to the function parameter within the called function
+      List<Node> fnParamReferences = NodeUtil.findReferencesToParameter(block, fnParam);
 
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+      // Check if the call argument is a reference to the function parameter
+      if (cArg.isName() && cArg.getString().equals(fnParam.getString())) {
+        // Check if the function parameter is modified inside the called function
+        boolean isModifiedInFunction = isParameterModifiedWithinFunction(fnNode, fnParam);
+
+        // Check if the function parameter is referenced more than once in the called function
+        boolean isReferencedMultipleTimes = fnParamReferences.size() > 1;
+
+        // Check if the call argument may effect mutable state
+        boolean hasSideEffects = NodeUtil.mayEffectMutableState(cArg, compiler);
+
+        // If the function parameter is modified and referenced multiple times or has side effects, return CanInlineResult.NO
+        if (isModifiedInFunction || isReferencedMultipleTimes || hasSideEffects) {
           return CanInlineResult.NO;
         }
       }
+    }
 
     // Move to the next name.
     fnParam = fnParam.getNext();
   }
 
   // For every call argument check for side-effects, even if there
   // isn't a named parameter to match.
   if (cArg != null) {
     if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
       return CanInlineResult.NO;
     }
     cArg = cArg.getNext();
   }
 }
\ No newline at end of file
-
-    return CanInlineResult.YES;
-  }
