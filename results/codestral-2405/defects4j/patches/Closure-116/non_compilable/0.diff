diff --git a/tmp/30f5f0ce-c622-49fd-a3e8-230447b983da_buggy.java b/tmp/b39652e6-7a73-46df-b6d0-aa02266a3538_fixed.java
index 233a867..a686c6c 100644
--- a/tmp/30f5f0ce-c622-49fd-a3e8-230447b983da_buggy.java
+++ b/tmp/b39652e6-7a73-46df-b6d0-aa02266a3538_fixed.java
@@ -1,73 +1,43 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
-    Node block = fnNode.getLastChild();
+  Node block = fnNode.getFirstChild();
+  Node resultNode = block.getLastChild().getPrevious();
 
-
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+  // CALL NODE: [ NAME, THIS (optional), ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
-
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
-    if (!callNode.getFirstChild().isName()) {
-      if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
-        if (cArg == null || !cArg.isThis()) {
-          return CanInlineResult.NO;
-        }
+  if (cArg != null && cArg.isThis()) {
     cArg = cArg.getNext();
-      } else {
-        // ".apply" call should be filtered before this.
-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
-      }
   }
 
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+  // FUNCTION NODE: [ NAME, ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+          return CanInlineResult.NO;
+        }
+        // Side effect checks should be made for both the functions that are
+        // called directly and also the functions that are inlined into each other.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+            && ((NodeUtil.getNameReferenceCount(resultNode, fnParam.getString()) > 1)
+                || NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 0)) {
           return CanInlineResult.NO;
         }
       }
-
-        // Move to the next name.
       fnParam = fnParam.getNext();
-      }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
+    } else if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
