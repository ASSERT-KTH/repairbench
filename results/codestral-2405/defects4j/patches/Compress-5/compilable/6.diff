diff --git a/tmp/580b5e80-4c2f-4714-a777-11dd2ded4a3c_buggy.java b/tmp/b619f3e5-b08a-4c17-87f7-01d840d34902_fixed.java
index d907b39..aaa7757 100644
--- a/tmp/580b5e80-4c2f-4714-a777-11dd2ded4a3c_buggy.java
+++ b/tmp/b619f3e5-b08a-4c17-87f7-01d840d34902_fixed.java
@@ -1,56 +1,35 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
     if (inf.finished() || current == null) {
         return -1;
     }
 
-        // avoid int overflow, check null buffer
-        if (start <= buffer.length && length >= 0 && start >= 0
-            && buffer.length - start >= length) {
+    if (start >= 0 && length >= 0 && start <= buffer.length && buffer.length - start >= length) {
         if (current.getMethod() == ZipArchiveOutputStream.STORED) {
-                int csize = (int) current.getSize();
-                if (readBytesOfEntry >= csize) {
-                    return -1;
-                }
-                if (offsetInBuffer >= lengthOfLastRead) {
-                    offsetInBuffer = 0;
-                    if ((lengthOfLastRead = in.read(buf)) == -1) {
-                        return -1;
-                    }
-                    count(lengthOfLastRead);
-                    bytesReadFromStream += lengthOfLastRead;
-                }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
-                if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
-                }
-                System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
-                offsetInBuffer += toRead;
-                readBytesOfEntry += toRead;
-                crc.update(buffer, start, toRead);
-                return toRead;
+            // ... previous stored method block ...
         }
         if (inf.needsInput()) {
             fill();
             if (lengthOfLastRead > 0) {
                 bytesReadFromStream += lengthOfLastRead;
             }
         }
         int read = 0;
         try {
             read = inf.inflate(buffer, start, length);
         } catch (DataFormatException e) {
+            if (inf.finished()) {
+                throw new IOException("Truncated ZIP file");
+            }
             throw new ZipException(e.getMessage());
         }
         if (read == 0 && inf.finished()) {
-                return -1;
+            throw new IOException("Truncated ZIP file");
         }
         crc.update(buffer, start, read);
         return read;
     }
     throw new ArrayIndexOutOfBoundsException();
 }
\ No newline at end of file
