diff --git a/tmp/8b417d26-0199-4373-b165-6b16421fe1f3_buggy.java b/tmp/2e293683-c671-4193-a950-3eba07605178_fixed.java
index 851ffc2..e521b5e 100644
--- a/tmp/8b417d26-0199-4373-b165-6b16421fe1f3_buggy.java
+++ b/tmp/2e293683-c671-4193-a950-3eba07605178_fixed.java
@@ -1,70 +1,81 @@
     /**
-     * Replace the provide statement.
+     * Replace the provided statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
-      // Handle the case where there is a duplicate definition for an explicitly
-      // provided symbol.
+      // Handle the case where there is a duplicate definition for an explicitly provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
-        replacementNode = candidateDefinition;
+        Node sourceNode = candidateDefinition.getParent();
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
-          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
           if (nameNode.getType() == Token.NAME) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
             assignNode.removeChild(nameNode);
             assignNode.removeChild(valueNode);
             nameNode.addChildToFront(valueNode);
             Node varNode = new Node(Token.VAR, nameNode);
             varNode.copyInformationFrom(candidateDefinition);
-            candidateDefinition.getParent().replaceChild(
-                candidateDefinition, varNode);
+            sourceNode.replaceChild(candidateDefinition, varNode);
             nameNode.setJSDocInfo(assignNode.getJSDocInfo());
-            compiler.reportCodeChange();
             replacementNode = varNode;
+            compiler.reportCodeChange();
+          } else {
+            replacementNode = candidateDefinition;
           }
+        } else {
+          replacementNode = candidateDefinition;
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
         if (firstModule == minimumModule) {
           firstNode.getParent().addChildBefore(replacementNode, firstNode);
+        } else if (explicitNode != null) {
+          explicitNode.detachFromParent();
+          firstNode.getParent().addChildBefore(replacementNode, firstNode);
         } else {
-          // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
+          // In this case, the name was implicitly provided by two independent modules.
+          // We need to move this code up to a common module.
           int indexOfDot = namespace.indexOf('.');
-          if (indexOfDot == -1) {
-            // Any old place is fine.
-            compiler.getNodeForCodeInsertion(minimumModule)
-                .addChildToBack(replacementNode);
+          if (indexOfDot == -1 || namespace.startsWith("goog.")) {
+            // Any old place at the top level or after the parent namespace is fine.
+            Node insertNode = compiler.getNodeForCodeInsertion(minimumModule);
+            if (indexOfDot != -1) {
+              ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));
+              Preconditions.checkNotNull(parentName);
+              if (parentName.replacementNode != null) {
+                insertNode = parentName.replacementNode.getParent();
+                insertNode.addChildAfter(replacementNode, parentName.replacementNode);
+              } else {
+                insertNode.addChildToBack(replacementNode);
+              }
+            } else {
+              insertNode.addChildToBack(replacementNode);
+            }
           } else {
             // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
+            ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));
             Preconditions.checkNotNull(parentName);
             Preconditions.checkNotNull(parentName.replacementNode);
             parentName.replacementNode.getParent().addChildAfter(
                 replacementNode, parentName.replacementNode);
           }
         }
-        if (explicitNode != null) {
-          explicitNode.detachFromParent();
-        }
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
