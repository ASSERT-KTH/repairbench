diff --git a/tmp/294ede89-d6e4-4585-8987-fc2e065a0f5f_buggy.java b/tmp/3c175fdc-a9b9-4ab9-b2b0-97233eb1ec61_fixed.java
index d28ed6a..c6924a1 100644
--- a/tmp/294ede89-d6e4-4585-8987-fc2e065a0f5f_buggy.java
+++ b/tmp/3c175fdc-a9b9-4ab9-b2b0-97233eb1ec61_fixed.java
@@ -1,78 +1,93 @@
-    // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations
 static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                    boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
 
     boolean lastWasWhite = false;
     boolean reachedNonWhite = false;
     final EscapeMode escapeMode = out.escapeMode();
     final CharsetEncoder encoder = out.encoder();
     final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
     final Map<Character, String> map = escapeMode.getMap();
     final int length = string.length();
 
     int codePoint;
     for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
         codePoint = string.codePointAt(offset);
 
         if (normaliseWhite) {
             if (StringUtil.isWhitespace(codePoint)) {
                 if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
                     continue;
                 accum.append(' ');
                 lastWasWhite = true;
                 continue;
             } else {
                 lastWasWhite = false;
                 reachedNonWhite = true;
             }
         }
-            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
+
         if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
             final char c = (char) codePoint;
-                // html specific and required escapes:
+
+            if (inAttribute) {  // inside an attribute
+                switch (c) {
+                    case '<':
+                        accum.append("&lt;");
+                        break;
+                    case '>':
+                        if (escapeMode == EscapeMode.xhtml)  // additional check for XHTML mode
+                            accum.append("&gt;");
+                        else
+                            accum.append(c);
+                        break;
+                    case '&':
+                        accum.append("&amp;");
+                        break;
+                    case '"':
+                        accum.append("&quot;");
+                        break;
+                    default:
+                        if (canEncode(coreCharset, c, encoder))
+                            accum.append(c);
+                        else if (map.containsKey(c))
+                            accum.append('&').append(map.get(c)).append(';');
+                        else
+                            accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+                        break;
+                }
+            } else {  // not in an attribute
                 switch (c) {
                     case '&':
                         accum.append("&amp;");
                         break;
                     case 0xA0:
                         if (escapeMode != EscapeMode.xhtml)
                             accum.append("&nbsp;");
                         else
                             accum.append("&#xa0;");
                         break;
                     case '<':
-                        // escape when in character data or when in a xml attribue val; not needed in html attr val
-                        if (!inAttribute)
                         accum.append("&lt;");
-                        else
-                            accum.append(c);
                         break;
                     case '>':
-                        if (!inAttribute)
                         accum.append("&gt;");
-                        else
-                            accum.append(c);
-                        break;
-                    case '"':
-                        if (inAttribute)
-                            accum.append("&quot;");
-                        else
-                            accum.append(c);
                         break;
                     default:
                         if (canEncode(coreCharset, c, encoder))
                             accum.append(c);
                         else if (map.containsKey(c))
                             accum.append('&').append(map.get(c)).append(';');
                         else
                             accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
+                        break;
+                }
             }
         } else {
             final String c = new String(Character.toChars(codePoint));
-                if (encoder.canEncode(c)) // uses fallback encoder for simplicity
+            if (encoder.canEncode(c))
                 accum.append(c);
             else
                 accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
         }
     }
 }
\ No newline at end of file
