diff --git a/tmp/3e57c712-267c-46dc-b21f-c3e1b9a6f7dd_buggy.java b/tmp/003ac0f2-481b-4880-9dc8-279c422ea040_fixed.java
index 2ff27ef..d5930fb 100644
--- a/tmp/3e57c712-267c-46dc-b21f-c3e1b9a6f7dd_buggy.java
+++ b/tmp/003ac0f2-481b-4880-9dc8-279c422ea040_fixed.java
@@ -1,97 +1,78 @@
-  /**
-   * Computes the GEN and KILL set.
-   *
-   * @param n Root node.
-   * @param gen Local variables that are live because of the instruction at
-   *        {@code n} will be added to this set.
-   * @param kill Local variables that are killed because of the instruction at
-   *        {@code n} will be added to this set.
-   * @param conditional {@code true} if any assignments encountered are
-   *        conditionally executed. These assignments might not kill a variable.
-   */
-  private void computeGenKill(Node n, BitSet gen, BitSet kill,
-      boolean conditional) {
+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {
 
     switch (n.getType()) {
       case Token.SCRIPT:
       case Token.BLOCK:
       case Token.FUNCTION:
         return;
 
       case Token.WHILE:
       case Token.DO:
       case Token.IF:
-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-            conditional);
+        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);
         return;
 
       case Token.FOR:
         if (!NodeUtil.isForIn(n)) {
-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-              conditional);
+          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);
         } else {
           // for(x in y) {...}
           Node lhs = n.getFirstChild();
           Node rhs = lhs.getNext();
           if (NodeUtil.isVar(lhs)) {
             // for(var x in y) {...}
             lhs = lhs.getLastChild();
           }
-            addToSetIfLocal(lhs, kill);
-            addToSetIfLocal(lhs, gen);
+          addToSetIfLocal(lhs, gen);  // lhs is used (read) in a for-in loop
+          addToSetIfLocal(lhs, kill);  // lhs is declared (killed) in a for-in loop
           computeGenKill(rhs, gen, kill, conditional);
         }
         return;
 
       case Token.VAR:
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+          addToSetIfLocal(c, kill);  // variable is declared (killed)
           if (c.hasChildren()) {
             computeGenKill(c.getFirstChild(), gen, kill, conditional);
-            if (!conditional) {
-              addToSetIfLocal(c, kill);
-            }
           }
         }
         return;
 
       case Token.AND:
       case Token.OR:
-        computeGenKill(n.getFirstChild(), gen, kill, conditional);
-        // May short circuit.
+        computeGenKill(n.getFirstChild(), gen, kill, true);  // both sides can be conditionally executed
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.HOOK:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
-        // Assume both sides are conditional.
+        // Assume both sides are conditionally executed.
         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.NAME:
         if (isArgumentsName(n)) {
           markAllParametersEscaped();
         } else {
           addToSetIfLocal(n, gen);
         }
         return;
 
       default:
         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
           Node lhs = n.getFirstChild();
-          if (!conditional) {
-            addToSetIfLocal(lhs, kill);
-          }
+          addToSetIfLocal(lhs, kill);  // lhs is reassigned (killed)
           if (!NodeUtil.isAssign(n)) {
             // assignments such as a += 1 reads a.
-            addToSetIfLocal(lhs, gen);
+            addToSetIfLocal(lhs, gen);  // lhs is used (read) in an assignment
           }
           computeGenKill(lhs.getNext(), gen, kill, conditional);
         } else {
           for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
             computeGenKill(c, gen, kill, conditional);
           }
         }
         return;
     }
 }
\ No newline at end of file
