diff --git a/tmp/6628fed8-d347-42d0-9033-a0cd4122d713_buggy.java b/tmp/dbf5a1f9-c8f8-4e2d-9ce3-8cc501e56215_fixed.java
index 2ff27ef..9ed3492 100644
--- a/tmp/6628fed8-d347-42d0-9033-a0cd4122d713_buggy.java
+++ b/tmp/dbf5a1f9-c8f8-4e2d-9ce3-8cc501e56215_fixed.java
@@ -1,97 +1,111 @@
   /**
    * Computes the GEN and KILL set.
    *
    * @param n Root node.
    * @param gen Local variables that are live because of the instruction at
    *        {@code n} will be added to this set.
    * @param kill Local variables that are killed because of the instruction at
    *        {@code n} will be added to this set.
    * @param conditional {@code true} if any assignments encountered are
    *        conditionally executed. These assignments might not kill a variable.
    */
   private void computeGenKill(Node n, BitSet gen, BitSet kill,
       boolean conditional) {
 
     switch (n.getType()) {
       case Token.SCRIPT:
       case Token.BLOCK:
       case Token.FUNCTION:
         return;
 
       case Token.WHILE:
       case Token.DO:
       case Token.IF:
         computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
             conditional);
         return;
 
       case Token.FOR:
         if (!NodeUtil.isForIn(n)) {
           computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
               conditional);
         } else {
           // for(x in y) {...}
           Node lhs = n.getFirstChild();
           Node rhs = lhs.getNext();
           if (NodeUtil.isVar(lhs)) {
             // for(var x in y) {...}
             lhs = lhs.getLastChild();
           }
           addToSetIfLocal(lhs, kill);
           addToSetIfLocal(lhs, gen);
+          computeGenKillArrayExpression(lhs, gen, kill, conditional); // Added new method for array expressions
           computeGenKill(rhs, gen, kill, conditional);
         }
         return;
 
       case Token.VAR:
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (c.hasChildren()) {
             computeGenKill(c.getFirstChild(), gen, kill, conditional);
             if (!conditional) {
               addToSetIfLocal(c, kill);
             }
           }
         }
         return;
 
       case Token.AND:
       case Token.OR:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // May short circuit.
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.HOOK:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // Assume both sides are conditional.
         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.NAME:
         if (isArgumentsName(n)) {
           markAllParametersEscaped();
         } else {
           addToSetIfLocal(n, gen);
         }
         return;
 
       default:
         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
           Node lhs = n.getFirstChild();
           if (!conditional) {
             addToSetIfLocal(lhs, kill);
           }
           if (!NodeUtil.isAssign(n)) {
             // assignments such as a += 1 reads a.
             addToSetIfLocal(lhs, gen);
           }
           computeGenKill(lhs.getNext(), gen, kill, conditional);
         } else {
           for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
             computeGenKill(c, gen, kill, conditional);
           }
         }
         return;
     }
   }
+
+  // New method for array expressions
+  private void computeGenKillArrayExpression(Node n, BitSet gen, BitSet kill,
+      boolean conditional) {
+    if (n.getType() == Token.GETELEM) {
+      computeGenKill(n.getFirstChild(), gen, kill, conditional); // Compute for the base expression
+      computeGenKill(n.getLastChild(), gen, kill, conditional); // Compute for the index expression
+    } else if (n.getType() == Token.ARRAYLIT) {
+      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+        computeGenKill(c, gen, kill, conditional); // Compute for each array element
+      }
+    }
+  }
\ No newline at end of file
