diff --git a/tmp/93f608ae-eb71-4ccd-9033-b7dadc397456_buggy.java b/tmp/4dfee9e9-2ea5-43cf-9570-c0ac9568ef2f_fixed.java
index 2ff27ef..d5ec558 100644
--- a/tmp/93f608ae-eb71-4ccd-9033-b7dadc397456_buggy.java
+++ b/tmp/4dfee9e9-2ea5-43cf-9570-c0ac9568ef2f_fixed.java
@@ -1,97 +1,42 @@
-  /**
-   * Computes the GEN and KILL set.
-   *
-   * @param n Root node.
-   * @param gen Local variables that are live because of the instruction at
-   *        {@code n} will be added to this set.
-   * @param kill Local variables that are killed because of the instruction at
-   *        {@code n} will be added to this set.
-   * @param conditional {@code true} if any assignments encountered are
-   *        conditionally executed. These assignments might not kill a variable.
-   */
-  private void computeGenKill(Node n, BitSet gen, BitSet kill,
-      boolean conditional) {
-
-    switch (n.getType()) {
-      case Token.SCRIPT:
-      case Token.BLOCK:
-      case Token.FUNCTION:
-        return;
-
-      case Token.WHILE:
-      case Token.DO:
-      case Token.IF:
-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-            conditional);
-        return;
-
+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {
+  // ...
   case Token.FOR:
     if (!NodeUtil.isForIn(n)) {
-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-              conditional);
+      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);
     } else {
       // for(x in y) {...}
       Node lhs = n.getFirstChild();
       Node rhs = lhs.getNext();
-          if (NodeUtil.isVar(lhs)) {
-            // for(var x in y) {...}
+
+      if (NodeUtil.isName(lhs)) {
+        // for(var x in y) {...} or for(x in y)
+        if (NodeUtil.isVar(lhs.getParent())) {
+          lhs = lhs.getParent();
+        }
+      } else if (NodeUtil.isArrayPatternElement(lhs) && NodeUtil.isName(lhs.getLastChild())) {
+        // for([x] in y)
         lhs = lhs.getLastChild();
+      } else if (NodeUtil.isObjectPatternElement(lhs) && NodeUtil.isEmptyPattern(lhs.getLastChild())) {
+        // for({x: {}} in y)
+        lhs = lhs.getFirstChild();
       }
-            addToSetIfLocal(lhs, kill);
-            addToSetIfLocal(lhs, gen);
+
+      addVariableToSet(lhs, kill);
+      addVariableToSet(lhs, gen);
       computeGenKill(rhs, gen, kill, conditional);
     }
     return;
-
-      case Token.VAR:
-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (c.hasChildren()) {
-            computeGenKill(c.getFirstChild(), gen, kill, conditional);
-            if (!conditional) {
-              addToSetIfLocal(c, kill);
-            }
-          }
-        }
-        return;
-
-      case Token.AND:
-      case Token.OR:
-        computeGenKill(n.getFirstChild(), gen, kill, conditional);
-        // May short circuit.
-        computeGenKill(n.getLastChild(), gen, kill, true);
-        return;
-
-      case Token.HOOK:
-        computeGenKill(n.getFirstChild(), gen, kill, conditional);
-        // Assume both sides are conditional.
-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
-        computeGenKill(n.getLastChild(), gen, kill, true);
-        return;
-
-      case Token.NAME:
-        if (isArgumentsName(n)) {
-          markAllParametersEscaped();
-        } else {
-          addToSetIfLocal(n, gen);
-        }
-        return;
-
-      default:
-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
-          Node lhs = n.getFirstChild();
-          if (!conditional) {
-            addToSetIfLocal(lhs, kill);
-          }
-          if (!NodeUtil.isAssign(n)) {
-            // assignments such as a += 1 reads a.
-            addToSetIfLocal(lhs, gen);
-          }
-          computeGenKill(lhs.getNext(), gen, kill, conditional);
-        } else {
-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-            computeGenKill(c, gen, kill, conditional);
-          }
-        }
-        return;
+  // ...
+}
+
+private void addVariableToSet(Node node, BitSet set) {
+  if (NodeUtil.isName(node)) {
+    addToSetIfLocal(node, set);
+  } else if (NodeUtil.isArrayPatternElement(node) && NodeUtil.isName(node.getLastChild())) {
+    // ArrayPatternElement case: [x]
+    addToSetIfLocal(node.getLastChild(), set);
+  } else if (NodeUtil.isObjectPatternElement(node) && NodeUtil.isEmptyPattern(node.getLastChild())) {
+    // ObjectPatternElement case: {x: {}}
+    addToSetIfLocal(node.getFirstChild(), set);
   }
 }
\ No newline at end of file
