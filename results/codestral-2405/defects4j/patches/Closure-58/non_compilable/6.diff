diff --git a/tmp/18067d5e-80c3-43ae-abf2-63bf19701ee1_buggy.java b/tmp/151adf4f-5377-4564-b1c1-b35a20a6b358_fixed.java
index 2ff27ef..c7016a7 100644
--- a/tmp/18067d5e-80c3-43ae-abf2-63bf19701ee1_buggy.java
+++ b/tmp/151adf4f-5377-4564-b1c1-b35a20a6b358_fixed.java
@@ -1,97 +1,27 @@
-  /**
-   * Computes the GEN and KILL set.
-   *
-   * @param n Root node.
-   * @param gen Local variables that are live because of the instruction at
-   *        {@code n} will be added to this set.
-   * @param kill Local variables that are killed because of the instruction at
-   *        {@code n} will be added to this set.
-   * @param conditional {@code true} if any assignments encountered are
-   *        conditionally executed. These assignments might not kill a variable.
-   */
-  private void computeGenKill(Node n, BitSet gen, BitSet kill,
-      boolean conditional) {
-
-    switch (n.getType()) {
-      case Token.SCRIPT:
-      case Token.BLOCK:
-      case Token.FUNCTION:
-        return;
-
-      case Token.WHILE:
-      case Token.DO:
-      case Token.IF:
-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-            conditional);
-        return;
+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {
+  ...
 
   case Token.FOR:
     if (!NodeUtil.isForIn(n)) {
-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-              conditional);
+      ...
     } else {
-          // for(x in y) {...}
       Node lhs = n.getFirstChild();
       Node rhs = lhs.getNext();
-          if (NodeUtil.isVar(lhs)) {
-            // for(var x in y) {...}
-            lhs = lhs.getLastChild();
-          }
-            addToSetIfLocal(lhs, kill);
-            addToSetIfLocal(lhs, gen);
+      addLocalVariablesInExpressionToSets(lhs, gen, kill); // New method to be added
       computeGenKill(rhs, gen, kill, conditional);
     }
     return;
 
-      case Token.VAR:
-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (c.hasChildren()) {
-            computeGenKill(c.getFirstChild(), gen, kill, conditional);
-            if (!conditional) {
-              addToSetIfLocal(c, kill);
+  ...
 }
-          }
-        }
-        return;
-
-      case Token.AND:
-      case Token.OR:
-        computeGenKill(n.getFirstChild(), gen, kill, conditional);
-        // May short circuit.
-        computeGenKill(n.getLastChild(), gen, kill, true);
-        return;
-
-      case Token.HOOK:
-        computeGenKill(n.getFirstChild(), gen, kill, conditional);
-        // Assume both sides are conditional.
-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
-        computeGenKill(n.getLastChild(), gen, kill, true);
-        return;
 
-      case Token.NAME:
-        if (isArgumentsName(n)) {
-          markAllParametersEscaped();
-        } else {
+private void addLocalVariablesInExpressionToSets(Node n, BitSet gen, BitSet kill) {
+  if (n.isName()) {
+    addToSetIfLocal(n, kill);
     addToSetIfLocal(n, gen);
-        }
-        return;
-
-      default:
-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
-          Node lhs = n.getFirstChild();
-          if (!conditional) {
-            addToSetIfLocal(lhs, kill);
-          }
-          if (!NodeUtil.isAssign(n)) {
-            // assignments such as a += 1 reads a.
-            addToSetIfLocal(lhs, gen);
-          }
-          computeGenKill(lhs.getNext(), gen, kill, conditional);
   } else {
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-            computeGenKill(c, gen, kill, conditional);
+      addLocalVariablesInExpressionToSets(c, gen, kill);
     }
   }
-        return;
-    }
 }
\ No newline at end of file
