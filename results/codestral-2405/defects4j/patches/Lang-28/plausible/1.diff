diff --git a/tmp/7ab808ae-02bd-494c-bc83-747cb39e798b_buggy.java b/tmp/094781b5-3f7a-40cf-ae42-23527cde23b0_fixed.java
index 4bbd561..c25cd77 100644
--- a/tmp/7ab808ae-02bd-494c-bc83-747cb39e798b_buggy.java
+++ b/tmp/094781b5-3f7a-40cf-ae42-23527cde23b0_fixed.java
@@ -1,37 +1,40 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    int inputLength = input.length();
+    if (index < inputLength - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while(end < inputLength && input.charAt(end) != ';') {
             end++;
         }
 
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
+        // To handle supplementary characters, we'll create a char array and encode to UTF-16
+        char[] chars = Character.toChars(entityValue);
+        out.write(chars);
+
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
