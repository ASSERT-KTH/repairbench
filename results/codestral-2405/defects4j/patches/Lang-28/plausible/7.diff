diff --git a/tmp/25732b01-b9e5-4665-ab01-dca7bfff39eb_buggy.java b/tmp/e727d663-1adf-4058-9e4c-effd7fca2855_fixed.java
index 4bbd561..982676c 100644
--- a/tmp/25732b01-b9e5-4665-ab01-dca7bfff39eb_buggy.java
+++ b/tmp/e727d663-1adf-4058-9e4c-effd7fca2855_fixed.java
@@ -1,37 +1,41 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    if(input.charAt(index) == '&' && index < input.length() - 2 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while(end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end < input.length()) {
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
                 return 0;
             }
 
-                out.write(entityValue);
+            // Properly handle supplementary characters
+            if (entityValue > Character.MAX_CODE_POINT) {
+                return 0;
+            } else {
+                out.write(Character.toChars(entityValue));
+            }
+
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
+    }
     return 0;
 }
\ No newline at end of file
