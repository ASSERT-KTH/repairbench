diff --git a/tmp/69e77cd9-f536-467a-adfb-c1e17ab08788_buggy.java b/tmp/5c3b2828-02bc-41f3-9c14-52a177ae0f7e_fixed.java
index 4bbd561..057d95e 100644
--- a/tmp/69e77cd9-f536-467a-adfb-c1e17ab08788_buggy.java
+++ b/tmp/5c3b2828-02bc-41f3-9c14-52a177ae0f7e_fixed.java
@@ -1,37 +1,44 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    if(input.charAt(index) == '&' && index < input.length() - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if(start < input.length()) {
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while(end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
-            } catch(NumberFormatException nfe) {
-                return 0;
-            }
 
+            // Write two chars if the character is supplementary
+            if (entityValue > 0xFFFF) {
+                out.write(Character.toChars(entityValue));
+            } else {
                 out.write(entityValue);
+            }
+
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        } catch(NumberFormatException nfe) {
+            return 0;
+        }
     }
     return 0;
 }
\ No newline at end of file
