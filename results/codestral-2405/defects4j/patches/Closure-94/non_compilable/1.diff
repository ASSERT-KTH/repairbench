diff --git a/tmp/d21e4696-13f3-430b-b2c1-5dbe048c9d13_buggy.java b/tmp/6e74fd4f-6bb3-4df2-8e47-126529523123_fixed.java
index 66e3d01..9575f1b 100644
--- a/tmp/d21e4696-13f3-430b-b2c1-5dbe048c9d13_buggy.java
+++ b/tmp/6e74fd4f-6bb3-4df2-8e47-126529523123_fixed.java
@@ -1,34 +1,32 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
         case Token.STRING:
         case Token.NUMBER:
         case Token.TRUE:
         case Token.FALSE:
             return true;
 
         // Binary operators are only valid if both children are valid.
         case Token.BITAND:
         case Token.BITNOT:
         case Token.BITOR:
         case Token.BITXOR:
-
+        case Token.ADD:
         // Uniary operators are valid if the child is valid.
         case Token.NOT:
         case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getSecondChild(), defines);
 
-      // Names are valid if and only if they are defines themselves.
+        // Names are valid if and only if they are defines themselves or a literal string in case of ADD operator.
         case Token.NAME:
         case Token.GETPROP:
             if (val.isQualifiedName()) {
                 return defines.contains(val.getQualifiedName());
             }
+            // Allow literal strings in ADD operations
+            if (val.getType() == Token.STRING && val.getParent() != null && val.getParent().getType() == Token.ADD) {
+                return true;
+            }
     }
     return false;
 }
\ No newline at end of file
