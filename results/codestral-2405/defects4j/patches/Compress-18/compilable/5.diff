diff --git a/tmp/064019b9-200c-46cd-ab7b-88e9ea875a48_buggy.java b/tmp/dfcf7f15-cfbd-444f-8616-670713bf9fd8_fixed.java
index 08093b4..6b32b3c 100644
--- a/tmp/064019b9-200c-46cd-ab7b-88e9ea875a48_buggy.java
+++ b/tmp/dfcf7f15-cfbd-444f-8616-670713bf9fd8_fixed.java
@@ -1,42 +1,19 @@
-    /**
-     * Writes a PAX extended header with the given map as contents.
-     * @since 1.4
-     */
-    void writePaxHeaders(String entryName,
-                         Map<String, String> headers) throws IOException {
+void writePaxHeaders(String entryName, Map<String, String> headers) throws IOException {
     String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
     }
-        TarArchiveEntry pex = new TarArchiveEntry(name,
-                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);
+    TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
-        StringWriter w = new StringWriter();
+    StringBuilder sb = new StringBuilder();
     for (Map.Entry<String, String> h : headers.entrySet()) {
         String key = h.getKey();
         String value = h.getValue();
-            int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
-            String line = len + " " + key + "=" + value + "\n";
-            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
-            while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
-                len = actualLength;
-                line = len + " " + key + "=" + value + "\n";
-                actualLength = line.getBytes(CharsetNames.UTF_8).length;
+        sb.append(key.length() + value.length() + 3).append(' ').append(key).append('=').append(value).append('\n');
     }
-            w.write(line);
-        }
-        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
+    byte[] data = sb.toString().getBytes(CharsetNames.UTF_8);
     pex.setSize(data.length);
     putArchiveEntry(pex);
     write(data);
     closeArchiveEntry();
 }
\ No newline at end of file
