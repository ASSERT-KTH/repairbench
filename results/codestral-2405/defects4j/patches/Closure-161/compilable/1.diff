diff --git a/tmp/d5aba73a-d0d4-43b5-aa56-0b37bc3fe9f1_buggy.java b/tmp/805301f3-e3c0-4903-a60b-62de1bf82874_fixed.java
index 1303a19..b56d684 100644
--- a/tmp/d5aba73a-d0d4-43b5-aa56-0b37bc3fe9f1_buggy.java
+++ b/tmp/805301f3-e3c0-4903-a60b-62de1bf82874_fixed.java
@@ -1,45 +1,32 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
   Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
 
   if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
-    if (intIndex != index) {
-      error(INVALID_GETELEM_INDEX_ERROR, right);
-      return n;
-    }
-
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    Node elem = left.getFirstChild();
-    for (int i = 0; elem != null && i < intIndex; i++) {
-      elem = elem.getNext();
-    }
 
-    if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+  if (intIndex != index || intIndex < 0) {
     return n;
   }
 
+  Node elem;
+  if (!left.hasChildren() || intIndex >= left.getChildCount()) {
+    // Index out of bounds; create a new EMPTY node
+    elem = NodeUtil.newUndefinedNode(left);
+  } else {
+    elem = left.getChildAtIndex(intIndex);
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
+  }
 
   // Replace the entire GETELEM with the value
   n.getParent().replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
