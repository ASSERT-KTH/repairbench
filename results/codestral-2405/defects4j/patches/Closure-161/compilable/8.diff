diff --git a/tmp/05408d03-4122-4249-9f8d-e355770e076b_buggy.java b/tmp/59d3de50-06d4-40d2-948f-c53acf3f996f_fixed.java
index 1303a19..ed87966 100644
--- a/tmp/05408d03-4122-4249-9f8d-e355770e076b_buggy.java
+++ b/tmp/59d3de50-06d4-40d2-948f-c53acf3f996f_fixed.java
@@ -1,45 +1,44 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
   Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
 
   if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
 
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
   Node elem = left.getFirstChild();
-    for (int i = 0; elem != null && i < intIndex; i++) {
+  int i;
+  for (i = 0; elem != null && i < intIndex; i++) {
     elem = elem.getNext();
   }
 
   if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
+    // If the index is out of bounds, replace the GETELEM with an EMPTY node instead of returning
+    elem = NodeUtil.newUndefinedNode(right);
+    n.getParent().replaceChild(n, elem);
+    reportCodeChange();
+    return elem;
   }
 
   if (elem.getType() == Token.EMPTY) {
     elem = NodeUtil.newUndefinedNode(elem);
   } else {
     left.removeChild(elem);
   }
 
   // Replace the entire GETELEM with the value
   n.getParent().replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
