diff --git a/tmp/857c1875-abf7-4560-a60c-a084abea7566_buggy.java b/tmp/6836a2d7-4f55-420a-bd11-10c836c2245f_fixed.java
index 1303a19..f5964d4 100644
--- a/tmp/857c1875-abf7-4560-a60c-a084abea7566_buggy.java
+++ b/tmp/6836a2d7-4f55-420a-bd11-10c836c2245f_fixed.java
@@ -1,45 +1,45 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
 
     if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
+    if (left.getType() != Token.ARRAYLIT) {
+        // We can only fold constant indexing into array literals
+        return n;
+    }
+
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
         elem = elem.getNext();
     }
 
     if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    if (elem.getType() == Token.EMPTY) {
+        // We're trying to access an index within bounds, but there are no
+        // elements in the array literal to access. So we insert an empty node.
+        elem = NodeUtil.newUndefinedNode(left);
+        left.insertChildAt(elem, intIndex);
+    } else if (elem.getType() == Token.EMPTY) {
         elem = NodeUtil.newUndefinedNode(elem);
     } else {
         left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
