diff --git a/tmp/928067a9-0e3a-45a1-9a70-ddd7d82a1e9a_buggy.java b/tmp/248e89c1-ffc2-463c-b146-ab97a7627baa_fixed.java
index 1303a19..ff5bacc 100644
--- a/tmp/928067a9-0e3a-45a1-9a70-ddd7d82a1e9a_buggy.java
+++ b/tmp/248e89c1-ffc2-463c-b146-ab97a7627baa_fixed.java
@@ -1,45 +1,44 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
+    // If GETPROP/GETELEM is used as assignment target, fail fast
+    // because the array literal is acting as a temporary we can't fold it here:
     //    "[][0] += 1"
+    if (parent.getType() == Token.ASSIGN ||
+        (parent.getType() == Token.ASSIGN_BITOR && parent.getParent().getType() != Token.EXPR_RESULT)) {
+      return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
-    if (intIndex != index) {
-      error(INVALID_GETELEM_INDEX_ERROR, right);
+    if (intIndex != index || intIndex < 0) {
       return n;
     }
 
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    Node elem = left.getFirstChild();
+    Node elem;
+    if (left.isEmpty()) {
+      // Indexing an empty array should return undefined
+      elem = NodeUtil.newUndefinedNode(left);
+    } else {
+      elem = left.getFirstChild();
       for (int i = 0; elem != null && i < intIndex; i++) {
         elem = elem.getNext();
       }
-
       if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    if (elem.getType() == Token.EMPTY) {
-      elem = NodeUtil.newUndefinedNode(elem);
+        // Index is greater than array's length, return undefined
+        elem = NodeUtil.newUndefinedNode(left);
       } else {
         left.removeChild(elem);
       }
+    }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
