diff --git a/tmp/0a11c398-17f5-4873-9e03-02ecc731d1d5_buggy.java b/tmp/f38c1331-0d48-4d0d-a1ae-971a28a3cdcc_fixed.java
index 1ad070d..78e4bf8 100644
--- a/tmp/0a11c398-17f5-4873-9e03-02ecc731d1d5_buggy.java
+++ b/tmp/f38c1331-0d48-4d0d-a1ae-971a28a3cdcc_fixed.java
@@ -1,38 +1,33 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
     case CR:
     case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
+    case FF:
+    case TAB:
+    case BACKSPACE:
+    case '\\': // Escape character should be treated as is, not as an escape for other characters
     case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
+        return c;
     default:
         // Now check for meta-characters
+        if (isNonPrintableChar(c)) {
+            throw new IOException("Invalid escape sequence \\" + (char) c);
+        }
         return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
 }
+
+private boolean isNonPrintableChar(int c) {
+    return c < 0x20 || c > 0x7E;
+}
\ No newline at end of file
