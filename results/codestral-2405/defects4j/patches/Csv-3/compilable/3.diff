diff --git a/tmp/25cb43d0-64f5-4edb-b9d2-8aff506eb1f9_buggy.java b/tmp/5f29227c-7ae9-48f3-ae58-a533c3a550f3_fixed.java
index 1ad070d..bf2e8ed 100644
--- a/tmp/25cb43d0-64f5-4edb-b9d2-8aff506eb1f9_buggy.java
+++ b/tmp/5f29227c-7ae9-48f3-ae58-a533c3a550f3_fixed.java
@@ -1,38 +1,31 @@
 /**
  * Handle an escape sequence.
  * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
+ * On return, the next character is available by calling {@link ExtendedBufferedReader#read()}
  * on the input stream.
  *
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
+ * @return the unescaped character (as an int) or {@code END_OF_STREAM} if char following the escape is invalid.
+ * @throws IOException if there is a problem reading the stream or the end of stream is detected.
  */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
         case 'r':
-            return CR;
+            return '\r';
         case 'n':
-            return LF;
+            return '\n';
         case 't':
-            return TAB;
-        case 'b':
-            return BACKSPACE;
-        case 'f':
-            return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
+            return '\t';
+        case '"':
+            return '\"';
+        case '\'':
+            return '\'';
+        case '\\':
+            return '\\';
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
+            return c; // return the escaped character as is
     }
 }
\ No newline at end of file
