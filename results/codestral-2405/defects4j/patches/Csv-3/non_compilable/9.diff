diff --git a/tmp/30238114-a380-4595-82d0-859f877f37dc_buggy.java b/tmp/85a6d5f4-f0fb-410c-ba11-b88cc47d2328_fixed.java
index 1ad070d..6c23af9 100644
--- a/tmp/30238114-a380-4595-82d0-859f877f37dc_buggy.java
+++ b/tmp/85a6d5f4-f0fb-410c-ba11-b88cc47d2328_fixed.java
@@ -1,38 +1,32 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
+    case 'N':
+        return END_OF_STREAM; // Fix for MySQL null value handling
     case CR:
     case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
+    case FF:
+    case TAB:
+    case BACKSPACE:
     case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
+        return c;
     default:
-            // Now check for meta-characters
+        if ((format.getEscapeChar() != '\0') && (format.getEscapeChar() == c)) {
+            // If there is an escape character defined and the next character is the escape character,
+            // then return the escape character as is, without any escaping.
             return c;
-            // indicate unexpected char - available from in.getLastChar()
+        }
+        throw new IOException("Unexpected char while processing escape sequence: " + (char) c);
     }
 }
\ No newline at end of file
