diff --git a/tmp/1a1e3175-b07a-4495-b693-7a9f29f86748_buggy.java b/tmp/4686e3c1-0f74-4c20-9a99-60fcfc05d720_fixed.java
index f843d29..7238d33 100644
--- a/tmp/1a1e3175-b07a-4495-b693-7a9f29f86748_buggy.java
+++ b/tmp/4686e3c1-0f74-4c20-9a99-60fcfc05d720_fixed.java
@@ -1,68 +1,87 @@
 /**
  * <p>Converts a String to a Locale.</p>
  *
  * <p>This method takes the string format of a locale and creates the
  * locale object from it.</p>
  *
  * <pre>
  *   LocaleUtils.toLocale("en")         = new Locale("en", "")
  *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+ *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")
+ *   LocaleUtils.toLocale("_GB")         = new Locale("", "GB")
+ *   LocaleUtils.toLocale("_GB_P")       = new Locale("", "GB", "P")
+ *   LocaleUtils.toLocale("_GB_POSIX")   = new Locale("", "GB", "POSIX")
  * </pre>
  *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
  * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
+ * The language code must be lowercase if present.
+ * The country code must be uppercase if present.
  * The separator must be an underscore.
  * The length must be correct.
  * </p>
  *
  * @param str  the locale String to convert, null returns null
  * @return a Locale, null if null input
  * @throws IllegalArgumentException if the string is an invalid format
  */
 public static Locale toLocale(final String str) {
     if (str == null) {
         return null;
     }
+
     final int len = str.length();
     if (len < 2) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+
+    if (str.charAt(0) == '_') {
+        final char ch1 = str.charAt(1);
+        if (Character.isUpperCase(ch1)) {
+            if (len == 2) {
+                return new Locale("", str.substring(1, 2));
+            }
+            if (len < 5 || str.charAt(2) != '_') {
+                throw new IllegalArgumentException("Invalid locale format: " + str + ". Must be at least 5 chars if starts with underscore");
+            }
+            final char ch3 = str.charAt(3);
+            final char ch4 = str.charAt(4);
+            if (Character.isUpperCase(ch3) && Character.isUpperCase(ch4)) {
+                if (len == 5) {
+                    return new Locale("", str.substring(1, 3));
+                }
+                if (len < 7 || str.charAt(5) != '_') {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                return new Locale("", str.substring(1, 3), str.substring(6));
+            }
+        }
+        throw new IllegalArgumentException("Invalid locale format: " + str + ". Must be letter if starts with underscore");
+    }
+
     final char ch0 = str.charAt(0);
     final char ch1 = str.charAt(1);
     if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (len == 2) {
         return new Locale(str);
     }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(2) != '_') {
+    if (len < 5 || str.charAt(2) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     final char ch3 = str.charAt(3);
     if (ch3 == '_') {
         return new Locale(str.substring(0, 2), "", str.substring(4));
     }
     final char ch4 = str.charAt(4);
     if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (len == 5) {
         return new Locale(str.substring(0, 2), str.substring(3, 5));
     }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(5) != '_') {
+    if (len < 7 || str.charAt(5) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
 }
\ No newline at end of file
