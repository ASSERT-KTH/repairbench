diff --git a/tmp/5afae131-6d38-4550-8b79-27791f410a83_buggy.java b/tmp/7f7553c8-f574-4149-949d-7491df68bf96_fixed.java
index b6b11b6..d638634 100644
--- a/tmp/5afae131-6d38-4550-8b79-27791f410a83_buggy.java
+++ b/tmp/7f7553c8-f574-4149-949d-7491df68bf96_fixed.java
@@ -1,38 +1,31 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
     if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        if (appendTo != null) {
+            appendTo.append(QUOTE);
         }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+        pos.setIndex(start + 1); // move past the initial quote
+    }
+    int lastHold = pos.getIndex();
+    while (pos.getIndex() < pattern.length()) {
+        if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {
+            if (appendTo != null) {
+                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);
+            }
+            pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());
             lastHold = pos.getIndex();
-                continue;
+        } else if (c[pos.getIndex()] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(c, lastHold, pos.getIndex() - lastHold);
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+            pos.setIndex(pos.getIndex() + 1); // move past the closing quote
+            return appendTo;
+        } else {
+            pos.setIndex(pos.getIndex() + 1);
         }
     }
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
