diff --git a/tmp/6f34344c-92ab-40c5-bbbf-1a1bb07b9f42_buggy.java b/tmp/439fc6e0-128e-4e60-998d-55cbd7103824_fixed.java
index d4e6d48..76ae6da 100644
--- a/tmp/6f34344c-92ab-40c5-bbbf-1a1bb07b9f42_buggy.java
+++ b/tmp/439fc6e0-128e-4e60-998d-55cbd7103824_fixed.java
@@ -1,23 +1,15 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
+  if (callTarget != null && callTarget.isName() && callTarget.getString().equals("String")
+      && callTarget.getNext() == null) { // correct check for no more children than value
+    Node value = n.getSecondChild();
     if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
+      Node addition = IR.add(IR.string("").srcref(callTarget), value.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
