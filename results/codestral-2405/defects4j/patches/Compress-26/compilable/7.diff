diff --git a/tmp/bbbe99e0-3b8f-496b-baca-f29e62ace75e_buggy.java b/tmp/9e541c17-b260-4992-bd87-0cbb47c68a46_fixed.java
index 4b163f6..1c3a8a4 100644
--- a/tmp/bbbe99e0-3b8f-496b-baca-f29e62ace75e_buggy.java
+++ b/tmp/9e541c17-b260-4992-bd87-0cbb47c68a46_fixed.java
@@ -1,28 +1,27 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
+    byte[] buffer = new byte[8192];
+
     while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+        long skipped;
+        if (input.available() > 0) {
+            skipped = input.skip(numToSkip);
+        } else {
+            skipped = input.read(buffer, 0, (int) Math.min(buffer.length, numToSkip));
+            if (skipped < 0) {
+                break;
+            }
+        }
+
         if (skipped == 0) {
+            if (input.read() == -1) {
                 break;
             }
+            numToSkip--;
+        } else {
             numToSkip -= skipped;
         }
+    }
 
     return available - numToSkip;
 }
\ No newline at end of file
