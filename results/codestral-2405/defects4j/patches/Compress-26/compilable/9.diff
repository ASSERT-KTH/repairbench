diff --git a/tmp/6022c987-0962-4572-b77a-2e99aa508b03_buggy.java b/tmp/ae01f7b9-6e5d-4e9e-b62c-d442a716bf9b_fixed.java
index 4b163f6..5283af9 100644
--- a/tmp/6022c987-0962-4572-b77a-2e99aa508b03_buggy.java
+++ b/tmp/ae01f7b9-6e5d-4e9e-b62c-d442a716bf9b_fixed.java
@@ -1,28 +1,14 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long skipped = 0;
+    byte[] buf = new byte[2048];
     while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        long toSkip = numToSkip > buf.length ? buf.length : numToSkip;
+        int read = input.read(buf, 0, (int) toSkip);
+        if (read == -1) {
             break;
         }
-            numToSkip -= skipped;
+        numToSkip -= read;
+        skipped += read;
     }
-            
-        return available - numToSkip;
+    return skipped;
 }
\ No newline at end of file
