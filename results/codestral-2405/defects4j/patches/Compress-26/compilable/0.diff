diff --git a/tmp/234adfb0-e8e9-44a9-9699-f3ca3c98e2c2_buggy.java b/tmp/1d8ebce4-47ed-46dc-af8a-4d9e236779c3_fixed.java
index 4b163f6..e1c9be5 100644
--- a/tmp/234adfb0-e8e9-44a9-9699-f3ca3c98e2c2_buggy.java
+++ b/tmp/1d8ebce4-47ed-46dc-af8a-4d9e236779c3_fixed.java
@@ -1,28 +1,16 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+    long skipped = 0;
+    long toSkip = numToSkip;
+    byte[] buf = new byte[2048];
+
+    int n;
+    while (toSkip > 0 && (n = input.read(buf, 0, (int) Math.min(toSkip, buf.length))) != -1) {
+        toSkip -= n;
+        skipped += n;
+        if (n < buf.length) {
             break;
         }
-            numToSkip -= skipped;
     }
 
-        return available - numToSkip;
+    return skipped;
 }
\ No newline at end of file
