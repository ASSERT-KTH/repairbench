diff --git a/tmp/a906693e-a04d-4d28-9a8f-949b44a6e587_buggy.java b/tmp/eec77f58-b1f2-4b19-a1c5-97364d17aa47_fixed.java
index 4b163f6..540c673 100644
--- a/tmp/a906693e-a04d-4d28-9a8f-949b44a6e587_buggy.java
+++ b/tmp/eec77f58-b1f2-4b19-a1c5-97364d17aa47_fixed.java
@@ -1,28 +1,18 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long totalSkipped = 0;
+    byte[] skipBuffer = new byte[8 * 1024];
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
         if (skipped == 0) {
+            // Input stream's skip method is not working, use read method as a fallback.
+            skipped = input.read(skipBuffer, 0, (int)Math.min(skipBuffer.length, numToSkip));
+            if (skipped < 0) {
+                // EOF has been encountered.
                 break;
             }
+        }
         numToSkip -= skipped;
+        totalSkipped += skipped;
     }
-            
-        return available - numToSkip;
+    return totalSkipped;
 }
\ No newline at end of file
