diff --git a/tmp/8d8c0dd9-e0ca-4a72-b333-8d93314c0d8d_buggy.java b/tmp/3b93c107-3222-4cc8-8b18-5a664dff14b1_fixed.java
index 4b163f6..c80a7a4 100644
--- a/tmp/8d8c0dd9-e0ca-4a72-b333-8d93314c0d8d_buggy.java
+++ b/tmp/3b93c107-3222-4cc8-8b18-5a664dff14b1_fixed.java
@@ -1,28 +1,33 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+ * the requested number of bytes has been skipped, this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+    long skipped = 0;
+    while (skipped < numToSkip) {
+        long skippedNow = input.skip(numToSkip - skipped);
+        if (skippedNow <= 0) {
+            // Use read() to skip 1 byte if skip() fails or skips nothing
+            int read = input.read();
+            if (read < 0) {
                 break;
             }
-            numToSkip -= skipped;
+            skippedNow = 1;
+        }
+        skipped += skippedNow;
     }
 
-        return available - numToSkip;
+    return skipped;
 }
\ No newline at end of file
