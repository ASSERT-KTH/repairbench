diff --git a/tmp/5252d0e3-7667-4cd0-84dd-4de63ca5c4f2_buggy.java b/tmp/f9846338-e6f7-4817-9adb-ccc5ad02b696_fixed.java
index 4b163f6..91b02cc 100644
--- a/tmp/5252d0e3-7667-4cd0-84dd-4de63ca5c4f2_buggy.java
+++ b/tmp/f9846338-e6f7-4817-9adb-ccc5ad02b696_fixed.java
@@ -1,28 +1,14 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
+    long skipped = 0;
+    while (numToSkip > 0 && (skipped = input.skip(numToSkip)) > 0) {
+        numToSkip -= skipped;
     }
+    if (numToSkip > 0) {
+        byte[] buf = new byte[(int) Math.min(numToSkip, 4096)];
+        while (numToSkip > 0 && (skipped = input.read(buf, 0, (int) Math.min(numToSkip, buf.length))) > 0) {
             numToSkip -= skipped;
         }
-            
+    }
     return available - numToSkip;
 }
\ No newline at end of file
