diff --git a/tmp/f50b644b-9b03-44c4-8e21-204df206d9cd_buggy.java b/tmp/f2636dfe-e4f9-4202-bb21-471e769298ce_fixed.java
index cc69d41..b5ae1e9 100644
--- a/tmp/f50b644b-9b03-44c4-8e21-204df206d9cd_buggy.java
+++ b/tmp/f2636dfe-e4f9-4202-bb21-471e769298ce_fixed.java
@@ -1,29 +1,31 @@
-    /**
-     * Create an Option using the current settings and with
-     * the specified Option <code>char</code>.
-     *
-     * @param opt the <code>java.lang.String</code> representation
-     * of the Option
-     * @return the Option instance
-     * @throws IllegalArgumentException if <code>opt</code> is not
-     * a valid character.  See Option.
-     */
-    public static Option create(String opt) throws IllegalArgumentException
-    {
+public static Option create(String opt) throws IllegalArgumentException {
     // create the option
-        Option option = new Option(opt, description);
+    Option option = new Option(opt.charAt(0), description);
+
+    // check if opt is a valid single character
+    if(opt.length() != 1) {
+        throw new IllegalArgumentException("opt is not a valid character");
+    }
 
     // set the option properties
     option.setLongOpt(longopt);
     option.setRequired(required);
     option.setOptionalArg(optionalArg);
     option.setArgs(numberOfArgs);
     option.setType(type);
     option.setValueSeparator(valuesep);
     option.setArgName(argName);
+
     // reset the OptionBuilder properties
-            OptionBuilder.reset();
+    description = null;
+    longopt = null;
+    required = false;
+    optionalArg = false;
+    numberOfArgs = Option.UNLIMITED_VALUES;
+    type = null;
+    valuesep = null;
+    argName = null;
 
     // return the Option instance
     return option;
 }
\ No newline at end of file
