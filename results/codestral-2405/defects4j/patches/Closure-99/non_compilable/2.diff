diff --git a/tmp/f9dcfa96-9f82-47ab-91f3-b7bdedba8242_buggy.java b/tmp/08acb64a-0a6c-4966-a1e8-2ccc1c2d9bf3_fixed.java
index 86553f4..425049e 100644
--- a/tmp/f9dcfa96-9f82-47ab-91f3-b7bdedba8242_buggy.java
+++ b/tmp/08acb64a-0a6c-4966-a1e8-2ccc1c2d9bf3_fixed.java
@@ -1,57 +1,34 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
-    if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);
-      if (jsDoc != null &&
-          (jsDoc.isConstructor() ||
-           jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
-        return false;
-      }
-
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
-      int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
-        return false;
-      }
-    }
-
 if (parent != null && parent.getType() == Token.ASSIGN) {
   Node lhs = parent.getFirstChild();
   Node rhs = lhs.getNext();
 
   if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
+    // Always traverse the left side of the assignment...
     if (assignLhsChild == null) {
       assignLhsChild = lhs;
     }
-      } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+  } else if (n.getType() == Token.FUNCTION && rhs.getType() == Token.FUNCTION) {
+    // Don't traverse prototype assignment of methods
+    if (lhs.getType() == Token.GETPROP || lhs.getType() == Token.GETELEM) {
+      Node parentProp = lhs.getFirstChild();
+      if (parentProp.getType() == Token.GETPROP &&
+          parentProp.getLastChild().getString().equals("prototype")) {
         return false;
       }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+
+      if (parentProp.getQualifiedName() != null &&
+          parentProp.getQualifiedName().contains(".prototype.")) {
         return false;
       }
     }
-    }
 
-    return true;
+    // Don't traverse interface method definitions
+    Node grannyp = parent.getParent();
+    if (grannyp != null && grannyp.getType() == Token.MEMBER_FUNCTION_DEF) {
+      JSDocInfo jsDoc = getFunctionJsDocInfo(grannyp.getParent());
+      if (jsDoc != null && jsDoc.isInterface()) {
+        return false;
+      }
+    }
+  }
 }
\ No newline at end of file
