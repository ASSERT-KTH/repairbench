diff --git a/tmp/a32a12c6-3900-43f4-81d0-76a807ebb0a8_buggy.java b/tmp/fb4763e7-32c9-4391-8bfd-1d49356c14f5_fixed.java
index 86553f4..df28dcb 100644
--- a/tmp/a32a12c6-3900-43f4-81d0-76a807ebb0a8_buggy.java
+++ b/tmp/fb4763e7-32c9-4391-8bfd-1d49356c14f5_fixed.java
@@ -1,57 +1,58 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
     if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
         JSDocInfo jsDoc = getFunctionJsDocInfo(n);
         if (jsDoc != null &&
             (jsDoc.isConstructor() ||
              jsDoc.hasThisType() ||
              jsDoc.isOverride())) {
             return false;
         }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
         int pType = parent.getType();
         if (!(pType == Token.BLOCK ||
               pType == Token.SCRIPT ||
               pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+              pType == Token.ASSIGN ||
+              pType == Token.GETPROP ||
+              pType == Token.GETELEM ||
+              pType == Token.BIND)) {
+            return false;
+        }
+
+        // If the function is not a method (i.e., it's a property of an object),
+        // it shouldn't be traversed.
+        if (parent.getType() == Token.GETPROP &&
+            !"\nconstructor".equals(parent.getLastChild().getString()) &&
+            parent == n.getParent()) {
+            return false;
+        }
+
+        // If the function is assigned as a property of a 'prototype' object,
+        // it shouldn't be traversed.
+        Node grandparent = parent.getParent();
+        if (grandparent != null && grandparent.getType() == Token.GETPROP &&
+            grandparent.getLastChild().getString().equals("prototype")) {
             return false;
         }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
         Node lhs = parent.getFirstChild();
         Node rhs = lhs.getNext();
 
         if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
             if (assignLhsChild == null) {
                 assignLhsChild = lhs;
             }
         } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
+            // Don't traverse the right side if it's assigned to a property of a 'prototype' object
             if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
-            return false;
-          }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+                lhs.getParent().getType() == Token.GETPROP &&
+                lhs.getParent().getLastChild().getString().equals("prototype")) {
                 return false;
             }
         }
     }
 
     return true;
 }
\ No newline at end of file
