diff --git a/tmp/21aa8fac-752f-4a5e-b40e-2bfc450eb902_buggy.java b/tmp/00d58dca-54a9-480f-92ce-62d94feaea09_fixed.java
index 58a1651..368f6c6 100644
--- a/tmp/21aa8fac-752f-4a5e-b40e-2bfc450eb902_buggy.java
+++ b/tmp/00d58dca-54a9-480f-92ce-62d94feaea09_fixed.java
@@ -1,32 +1,41 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
+  // Check if the resolved typeOfThis is an instance of ObjectType
+  if (typeOfThis.isInstanceType()) {
     typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  } else {
+    if (typeOfThis.isUnionType() && typeOfThis.toMaybeUnionType().isObjectUnion()) {
+      typeOfThis = typeOfThis.toMaybeUnionType().getObjectMembers().get(0);
+    } else {
+      // This treated like a warning instead of an error.
+      t.warning(JSError.TYPE_OF_THIS_NOT_OBJECT,
+                node.getSourceFileName(), node.getLineno(),
+                "This type expected to be an object, found: " + typeOfThis);
+    }
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
