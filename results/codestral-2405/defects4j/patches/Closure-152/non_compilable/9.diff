diff --git a/tmp/d055e2a0-606b-4c7a-90ae-31e5955bcac3_buggy.java b/tmp/9bfa8b0a-2851-4d7b-980b-0e91475d6d01_fixed.java
index 58a1651..3c1227a 100644
--- a/tmp/d055e2a0-606b-4c7a-90ae-31e5955bcac3_buggy.java
+++ b/tmp/9bfa8b0a-2851-4d7b-980b-0e91475d6d01_fixed.java
@@ -1,32 +1,34 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  typeOfThis = safeResolve(typeOfThis, t, scope);
+  if (!typeOfThis.isSubtype(getNativeObjectType())) {
+    t.warning(JSError.make(this, "JSC_INCOMPATIBLE_TYPE_WITH_THIS",
+        typeOfThis.getDisplayName()));
+    typeOfThis = getNativeObjectPrototype();
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
