diff --git a/tmp/ca132a24-313e-4e9b-ba4b-c4b2d351e445_buggy.java b/tmp/5f4ee738-42de-4053-a113-c99d3a75777a_fixed.java
index 58a1651..f2253c6 100644
--- a/tmp/ca132a24-313e-4e9b-ba4b-c4b2d351e445_buggy.java
+++ b/tmp/5f4ee738-42de-4053-a113-c99d3a75777a_fixed.java
@@ -1,32 +1,37 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis and check if it is an ObjectType or a UnionType containing an ObjectType
+    typeOfThis = safeResolve(typeOfThis, t, scope);
+    if (typeOfThis instanceof UnionType) {
+        UnionType unionType = (UnionType) typeOfThis;
+        if (!unionType.isSubtype(getNativeType(NATIVE_TYPE_OBJECT))) {
+            t.warning(JSError.make(NoTypeCheckingCode.LINE_NO_INFO, t.select("@this type of a function must be an object"), unionType));
+        }
+    } else if (!(typeOfThis instanceof ObjectType)) {
+        t.warning(JSError.make(NoTypeCheckingCode.LINE_NO_INFO, t.select("@this type of a function must be an object"), typeOfThis));
+    }
 
     boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
