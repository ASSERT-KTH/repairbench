diff --git a/tmp/c00622af-46b3-45e5-9aa8-2ceeb5b7b6ba_buggy.java b/tmp/4e0d3dc7-fda9-44a1-96e7-ca4b8964fbe5_fixed.java
index 58a1651..a258c92 100644
--- a/tmp/c00622af-46b3-45e5-9aa8-2ceeb5b7b6ba_buggy.java
+++ b/tmp/4e0d3dc7-fda9-44a1-96e7-ca4b8964fbe5_fixed.java
@@ -1,32 +1,38 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  typeOfThis = safeResolve(typeOfThis, t, scope);
+  if (!typeOfThis.isSubtypeOf(ObjectType.getInstance())) {
+    t.report(JSError.make("@this type of a function must be an object\n"
+        + "Actual type: " + typeOfThis.toStringTree(), this));
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
   ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+    ObjectType resolvedIface = (ObjectType) safeResolve(iface, t, scope);
+    if (!(resolvedIface instanceof ObjectType)) {
+      t.report(JSError.make("Implemented interface type must be an object\n"
+        + "Actual type: " + resolvedIface.toStringTree(), this));
+      continue;
+    }
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
