diff --git a/tmp/d40eacc7-a51b-4099-9647-c8c2a55b2d63_buggy.java b/tmp/29ebffa5-f9cf-4780-8ea8-7c42656f94b3_fixed.java
index 58a1651..c54d7df 100644
--- a/tmp/d40eacc7-a51b-4099-9647-c8c2a55b2d63_buggy.java
+++ b/tmp/29ebffa5-f9cf-4780-8ea8-7c42656f94b3_fixed.java
@@ -1,32 +1,37 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
+  if (typeOfThis.isSubtypeOf(JSType.getInstance(ObjectType.OBJECT_TYPE))) {
     typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  } else {
+    t.warning("@this type of a function must be an object, Actual type: " + typeOfThis);
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+    if (resolvedIface.isSubtypeOf(JSType.getInstance(ObjectType.OBJECT_TYPE))) {
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
+    } else {
+      t.warning("Implemented interface must be an object, Actual type: " + resolvedIface);
+    }
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
