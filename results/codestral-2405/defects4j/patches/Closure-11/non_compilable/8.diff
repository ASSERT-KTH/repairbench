diff --git a/tmp/d48035f9-51ce-4aed-91d4-7ecab2140a9e_buggy.java b/tmp/eb99ce05-2feb-422a-907e-dcfababee14a_fixed.java
index 57c40b2..dc73416 100644
--- a/tmp/d48035f9-51ce-4aed-91d4-7ecab2140a9e_buggy.java
+++ b/tmp/eb99ce05-2feb-422a-907e-dcfababee14a_fixed.java
@@ -1,27 +1,27 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      // Add a check for null and undefined types before proceeding.
+      if (!childType.isSubtype(createNullType(), t.getCompiler()) &&
+          !childType.isSubtype(createUndefinedType(), t.getCompiler())) {
+        checkPropertyAccess(childType, property.getString(), t, n);
+      }
+    } else if (validator.expectNotNullOrUndefined(t, n, childType)) {
       checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
   }
\ No newline at end of file
