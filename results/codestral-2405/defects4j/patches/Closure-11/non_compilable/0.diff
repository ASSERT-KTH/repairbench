diff --git a/tmp/7341c264-6663-49df-89a9-f0526e2c4bec_buggy.java b/tmp/e45fe0d3-d1ce-4689-b4f6-75754ea770e3_fixed.java
index 57c40b2..c839ea8 100644
--- a/tmp/7341c264-6663-49df-89a9-f0526e2c4bec_buggy.java
+++ b/tmp/e45fe0d3-d1ce-4689-b4f6-75754ea770e3_fixed.java
@@ -1,27 +1,19 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
-    // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
-    if (childType.isDict()) {
-      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
+    if (childType.isUnknownType() || childType.isNullType()) {
+      report(t, objNode, TypeValidator.NULL_OR_UNDEFINED_ERROR, "'.'", objNode.getQualifiedName());
+    } else if (childType.isDict() || childType.isUnknownDictionary()) {
+      // Dictionary types can have any property, so no property access check is needed.
     } else if (n.getJSType() != null && parent.isAssign()) {
       return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+    } else if (childType.isObject() || childType.isUnionType() || childType.isTemplatizedType() ||
+               childType.isAllType() || childType.isFunctionType()) {
       checkPropertyAccess(childType, property.getString(), t, n);
+    } else {
+      report(t, objNode, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", childType.toString());
     }
     ensureTyped(t, n);
   }
\ No newline at end of file
