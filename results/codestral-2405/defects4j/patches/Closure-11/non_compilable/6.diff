diff --git a/tmp/f1da394e-8912-4a27-aa2b-845c7afcbedb_buggy.java b/tmp/8ec3f011-ed98-4913-982e-a75a068e11e7_fixed.java
index 57c40b2..f908a15 100644
--- a/tmp/f1da394e-8912-4a27-aa2b-845c7afcbedb_buggy.java
+++ b/tmp/8ec3f011-ed98-4913-982e-a75a068e11e7_fixed.java
@@ -1,27 +1,20 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
-    // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
   Node property = n.getLastChild();
   Node objNode = n.getFirstChild();
   JSType childType = getJSType(objNode);
 
   if (childType.isDict()) {
     report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+  } else if (parent.isAssign()) {
+    ensureTyped(t, n); // Moved this line up to handle assignments correctly
+  } else if (childType == null || childType.isUndefined()) {
+    report(t, objNode, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", nullOrUndefinedErrorMessage(childType));
+  } else if (childType.isNull()) {
+    report(t, objNode, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "null");
+  } else if (childType.isInterface() && !property.getString().equals("prototype")) {
+    report(t, property, TypeValidator.MISSING_PROPERTIES, property.getString(), childType.toString());
+  } else {
     checkPropertyAccess(childType, property.getString(), t, n);
-    }
     ensureTyped(t, n);
   }
+}
\ No newline at end of file
