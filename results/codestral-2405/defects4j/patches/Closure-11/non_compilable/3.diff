diff --git a/tmp/be210083-6dc7-4535-9ca5-3e8bcaedba51_buggy.java b/tmp/ee3cfef2-5ee4-4385-b335-30bf9d780016_fixed.java
index 57c40b2..06d2e23 100644
--- a/tmp/be210083-6dc7-4535-9ca5-3e8bcaedba51_buggy.java
+++ b/tmp/ee3cfef2-5ee4-4385-b335-30bf9d780016_fixed.java
@@ -1,27 +1,18 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
-    // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
   Node property = n.getLastChild();
   Node objNode = n.getFirstChild();
   JSType childType = getJSType(objNode);
 
   if (childType.isDict()) {
     report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
+  } else if (!(childType.isNull() || childType.isUndefined()) && parent.isAssign()) {
     return;
   } else if (validator.expectNotNullOrUndefined(t, n, childType,
       "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+    if (!childType.isDictionary()) {
+      // only check property access if objNode is not a dictionary
       checkPropertyAccess(childType, property.getString(), t, n);
     }
+  }
   ensureTyped(t, n);
 }
\ No newline at end of file
