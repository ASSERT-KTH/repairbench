diff --git a/tmp/0c3d145b-c55d-46ae-ac35-bbbea866e35d_buggy.java b/tmp/6b09c89a-3e05-4542-9aef-8d002854d30b_fixed.java
index 57c40b2..07efd66 100644
--- a/tmp/0c3d145b-c55d-46ae-ac35-bbbea866e35d_buggy.java
+++ b/tmp/6b09c89a-3e05-4542-9aef-8d002854d30b_fixed.java
@@ -1,27 +1,25 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
   // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
   Node property = n.getLastChild();
   Node objNode = n.getFirstChild();
   JSType childType = getJSType(objNode);
 
   if (childType.isDict()) {
     report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
   } else if (n.getJSType() != null && parent.isAssign()) {
     return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+  } else if (childType.isUnknown() || childType.isNull() || childType.isVoid()) {
+    report(t, objNode, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", childType.toString());
+  } else if (validator.expectNotNullOrUndefined(t, n, childType, "", getNativeType(OBJECT_TYPE))) {
     checkPropertyAccess(childType, property.getString(), t, n);
   }
   ensureTyped(t, n);
 }
\ No newline at end of file
