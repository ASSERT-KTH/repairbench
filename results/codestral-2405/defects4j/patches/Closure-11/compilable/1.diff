diff --git a/tmp/d4831d73-4d79-4358-9565-abee406dbb7b_buggy.java b/tmp/0208147a-4fc0-4741-aa31-0c8f3b778b42_fixed.java
index 57c40b2..dbf8021 100644
--- a/tmp/d4831d73-4d79-4358-9565-abee406dbb7b_buggy.java
+++ b/tmp/0208147a-4fc0-4741-aa31-0c8f3b778b42_fixed.java
@@ -1,27 +1,28 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
-    // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
+    if (childType == null) {
+        // If childType is null, we cannot perform further checks, so we return.
+        return;
+    }
+
     if (childType.isDict()) {
         report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
         return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
         checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
 }
\ No newline at end of file
