diff --git a/tmp/5ab09877-111e-418f-b207-b19c30348e9f_buggy.java b/tmp/b92d37dd-9b20-42b3-bc4a-0fa43579d8a7_fixed.java
index 71189c3..84eaa33 100644
--- a/tmp/5ab09877-111e-418f-b207-b19c30348e9f_buggy.java
+++ b/tmp/b92d37dd-9b20-42b3-bc4a-0fa43579d8a7_fixed.java
@@ -1,46 +1,64 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
 
                 break;
             }
 
             option.validate(commandLine);
+            if (option.hasArgument()) { // Add this check
+                Validator validator = option.getArgument().getValidator();
+                Object value = commandLine.getValue(option);
+                try {
+                    validator.validate(option.getArgument(), value);
+                } catch (ValidationException e) {
+                    throw new OptionException(option, e.getResource(), e.getCause());
+                }
+            }
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
+        if (option.hasArgument()) { // Add this check
+            Validator validator = option.getArgument().getValidator();
+            Object value = commandLine.getValue(option.getArgument());
+            try {
+                validator.validate(option.getArgument(), value);
+            } catch (ValidationException e) {
+                throw new OptionException(option, e.getResource(), e.getCause());
+            }
+        }
         option.validate(commandLine);
     }
 }
\ No newline at end of file
