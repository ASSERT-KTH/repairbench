diff --git a/tmp/2c3765a2-9cd4-4d6f-8e68-5da04930848c_buggy.java b/tmp/85c8ecd6-535f-4803-9a83-35efc6b28567_fixed.java
index 6b160ef..9aff93d 100644
--- a/tmp/2c3765a2-9cd4-4d6f-8e68-5da04930848c_buggy.java
+++ b/tmp/85c8ecd6-535f-4803-9a83-35efc6b28567_fixed.java
@@ -1,68 +1,57 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  *
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
-        in.mark(signature.length);
+    final byte[] buffer = new byte[512];
+    in.mark(buffer.length);
     try {
-            int signatureLength = in.read(signature);
+        int bytesRead = in.read(buffer);
         in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
+
+        if (bytesRead == -1) {
+            throw new ArchiveException("Empty input stream");
+        }
+
+        if (ZipArchiveInputStream.matches(buffer, bytesRead)) {
             return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+        } else if (JarArchiveInputStream.matches(buffer, bytesRead)) {
             return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+        } else if (ArArchiveInputStream.matches(buffer, bytesRead)) {
             return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+        } else if (CpioArchiveInputStream.matches(buffer, bytesRead)) {
             return new CpioArchiveInputStream(in);
-            }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+        } else if (DumpArchiveInputStream.matches(buffer, bytesRead)) {
             return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+        } else if (TarArchiveInputStream.matches(buffer, bytesRead) || isTarArchive(buffer)) {
             return new TarArchiveInputStream(in);
         }
-            // COMPRESS-117 - improve auto-recognition
-            try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
-                return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
-            }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
+
+private boolean isTarArchive(byte[] buffer) throws IOException {
+    try (TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(buffer))) {
+        return tais.getNextEntry() != null;
+    } catch (Exception e) {
+        return false;
+    }
+}
\ No newline at end of file
