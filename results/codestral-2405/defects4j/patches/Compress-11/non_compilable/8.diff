diff --git a/tmp/cbe8d6de-e3ad-4e75-93c2-b6cd556a1b9b_buggy.java b/tmp/7037ff93-f4cf-4ffc-9aa1-eed2ed776543_fixed.java
index 6b160ef..2a98f95 100644
--- a/tmp/cbe8d6de-e3ad-4e75-93c2-b6cd556a1b9b_buggy.java
+++ b/tmp/7037ff93-f4cf-4ffc-9aa1-eed2ed776543_fixed.java
@@ -1,68 +1,53 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  *
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
+    final byte[] signature = new byte[512];
+    try {
         in.mark(signature.length);
-        try {
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-                return new ZipArchiveInputStream(in);
+            return new ZipArchiveInputStream(new LimitedInputStream(in, ZipArchiveInputStream.getSignature().length));
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-                return new JarArchiveInputStream(in);
+            return new JarArchiveInputStream(new LimitedInputStream(in, JarArchiveInputStream.getSignature().length));
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-                return new ArArchiveInputStream(in);
+            return new ArArchiveInputStream(new LimitedInputStream(in, ArArchiveInputStream.getSignature().length));
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-                return new CpioArchiveInputStream(in);
-            }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
+            return new CpioArchiveInputStream(new LimitedInputStream(in, signatureLength));
+        } else if (DumpArchiveInputStream.matches(signature, signatureLength)) {
+            return new DumpArchiveInputStream(new LimitedInputStream(in, DumpArchiveInputStream.getSignature().length));
+        } else if (TarArchiveInputStream.matches(signature, signatureLength)) {
+            // COMPRESS-117 - improve auto-recognition by checking entries
             try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature));
                 tais.getNextEntry();
-                return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
+                // If no further exception is thrown, it is a TAR
+                return new TarArchiveInputStream(new LimitedInputStream(in, signatureLength));
+            } catch (Exception e) {
+                // Not a TAR after all
+                throw new ArchiveException("No Archiver found for the stream signature");
+            }
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
