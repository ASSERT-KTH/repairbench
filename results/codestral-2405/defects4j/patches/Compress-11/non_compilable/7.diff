diff --git a/tmp/8ce7aa22-eccd-4726-8ab2-fcbe94fcb9a6_buggy.java b/tmp/096afb32-9f8c-432c-afe1-f19ffd31c2e7_fixed.java
index 6b160ef..b0f0134 100644
--- a/tmp/8ce7aa22-eccd-4726-8ab2-fcbe94fcb9a6_buggy.java
+++ b/tmp/096afb32-9f8c-432c-afe1-f19ffd31c2e7_fixed.java
@@ -1,68 +1,71 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
-        in.mark(signature.length);
+    final ByteArrayOutputStream out = new ByteArrayOutputStream();
     try {
-            int signatureLength = in.read(signature);
-            in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-                return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-                return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-                return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-                return new CpioArchiveInputStream(in);
+        int bytesRead;
+        while ((bytesRead = in.read(signature, 0, Math.min(signature.length, out.size() - out.size()))) != -1) {
+            out.write(signature, 0, bytesRead);
+            if (out.size() >= signature.length) {
+                break;
             }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
         }
+        final byte[] data = out.toByteArray();
+        if (ZipArchiveInputStream.matches(data)) {
+            return new ZipArchiveInputStream(new ByteArrayInputStreamWithMark(data));
+        } else if (JarArchiveInputStream.matches(data)) {
+            return new JarArchiveInputStream(new ByteArrayInputStreamWithMark(data));
+        } else if (ArArchiveInputStream.matches(data)) {
+            return new ArArchiveInputStream(new ByteArrayInputStreamWithMark(data));
+        } else if (CpioArchiveInputStream.matches(data)) {
+            return new CpioArchiveInputStream(new ByteArrayInputStreamWithMark(data));
+        } else if (DumpArchiveInputStream.matches(data)) {
+            return new DumpArchiveInputStream(new ByteArrayInputStreamWithMark(data));
+        } else if (TarArchiveInputStream.matches(data)) {
+            return new TarArchiveInputStream(new ByteArrayInputStreamWithMark(data));
+        } else {
             // COMPRESS-117 - improve auto-recognition
-            try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
-                return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
+            try (TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(data))) {
+                if (tais.getNextEntry() != null) {
+                    return new TarArchiveInputStream(new ByteArrayInputStreamWithMark(data));
+                }
+            } catch (Exception e) {
                 // autodetection, simply not a TAR
                 // ignored
             }
+        }
     } catch (IOException e) {
-            throw new ArchiveException("Could not use reset and mark operations.", e);
+        throw new ArchiveException("Could not read input stream.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
+
+private static class ByteArrayInputStreamWithMark extends ByteArrayInputStream {
+    ByteArrayInputStreamWithMark(byte[] buf) {
+        super(buf);
+    }
+
+    @Override
+    public boolean markSupported() {
+        return true;
+    }
+
+    @Override
+    public void mark(int readlimit) {
+        // do nothing
+    }
+
+    @Override
+    public void reset() {
+        pos = 0;
+    }
+}
\ No newline at end of file
