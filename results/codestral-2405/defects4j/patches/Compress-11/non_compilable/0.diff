diff --git a/tmp/01c1b84d-9f72-4ddb-aca9-bceebde4308a_buggy.java b/tmp/6d6b1422-f36f-4760-87b8-66f034be01e2_fixed.java
index 6b160ef..1df97e5 100644
--- a/tmp/01c1b84d-9f72-4ddb-aca9-bceebde4308a_buggy.java
+++ b/tmp/6d6b1422-f36f-4760-87b8-66f034be01e2_fixed.java
@@ -1,68 +1,57 @@
 /**
 * Create an archive input stream from an input stream, autodetecting
 * the archive type from the first few bytes of the stream. The InputStream
 * must support marks, like BufferedInputStream.
 *
 * @param in the input stream
 * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
+* @throws ArchiveException if the archiver name is not known or if a matching archiver fails to initialize
 * @throws IllegalArgumentException if the stream is null or does not support mark
 */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
-        in.mark(signature.length);
     try {
-            int signatureLength = in.read(signature);
+        final int bufferSize = Math.max(ZipArchiveInputStream.MAXIMUM_ZIP_ENTRY_COMMENT_LENGTH, Math.max(DumpArchiveInputStream.MAXIMUM_HEADER_LENGTH, TarArchiveInputStream.ARCHIVE_RECORD_SIZE));
+        final byte[] buffer = new byte[bufferSize];
+        in.mark(bufferSize);
+        int signatureLength = in.read(buffer);
         in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-                return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-                return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-                return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-                return new CpioArchiveInputStream(in);
-            }
 
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
+        if (ZipArchiveInputStream.matches(buffer, signatureLength)) {
+            return new ZipArchiveInputStream(new BufferedInputStream(in));
+        } else if (JarArchiveInputStream.matches(buffer, signatureLength)) {
+            return new JarArchiveInputStream(new BufferedInputStream(in));
+        } else if (ArArchiveInputStream.matches(buffer, signatureLength)) {
+            return new ArArchiveInputStream(new BufferedInputStream(in));
+        } else if (CpioArchiveInputStream.matches(buffer, signatureLength)) {
+            return new CpioArchiveInputStream(new BufferedInputStream(in));
+        } else if (DumpArchiveInputStream.matches(buffer, signatureLength)) {
+            return new DumpArchiveInputStream(new BufferedInputStream(in));
+        } else if (TarArchiveInputStream.matches(buffer, signatureLength)) {
+            return new TarArchiveInputStream(new BufferedInputStream(in), TarArchiveInputStream.DEFAULT_EOF_BEHAVIOR); // Ensure this behaves the same way as before for this case
+        } else {
             // COMPRESS-117 - improve auto-recognition
             try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
-                return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
+                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(buffer));
+                if (tais.getNextEntry() != null) {
+                    throw new ArchiveException("Invalid TAR archive. First entry not supported.");
+                }
+            } catch (Exception e) {
+                // not a TAR
+                throw new ArchiveException("No Archiver found for the stream signature", e);
+            }
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
