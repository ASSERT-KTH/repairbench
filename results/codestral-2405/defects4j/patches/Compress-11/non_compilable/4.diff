diff --git a/tmp/b53ffaf3-1110-40f1-8786-4a2c3af3fe3d_buggy.java b/tmp/9f8302ac-a500-457b-b3ac-275aa7e7a3f3_fixed.java
index 6b160ef..92a3147 100644
--- a/tmp/b53ffaf3-1110-40f1-8786-4a2c3af3fe3d_buggy.java
+++ b/tmp/9f8302ac-a500-457b-b3ac-275aa7e7a3f3_fixed.java
@@ -1,68 +1,62 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
-        in.mark(signature.length);
+    // BufferedInputStream through a BufferedDataInputStream works better for some InputStreams
+    final BufferedInputStream bufferedInput = new BufferedInputStream(in);
+    final DataInputStream dataInput = new DataInputStream(bufferedInput);
+
     try {
-            int signatureLength = in.read(signature);
-            in.reset();
+        byte[] signature = new byte[12];
+        dataInput.mark(signature.length);
+        int signatureLength = dataInput.read(signature);
+        dataInput.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-                return new ZipArchiveInputStream(in);
+            return new ZipArchiveInputStream(bufferedInput);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-                return new JarArchiveInputStream(in);
+            return new JarArchiveInputStream(bufferedInput);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-                return new ArArchiveInputStream(in);
+            return new ArArchiveInputStream(bufferedInput);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-                return new CpioArchiveInputStream(in);
+            return new CpioArchiveInputStream(bufferedInput);
         }
 
         // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in);
+        signature = new byte[32];
+        dataInput.mark(signature.length);
+        signatureLength = dataInput.read(signature);
+        dataInput.reset();
+        if (DumpArchiveInputStream.matches(signature, signatureLength)) {
+            return new DumpArchiveInputStream(bufferedInput);
         }
 
         // Tar needs an even bigger buffer to check the signature; read the first block
         final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
+        dataInput.mark(tarheader.length);
+        signatureLength = dataInput.read(tarheader);
+        dataInput.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
+            return new TarArchiveInputStream(bufferedInput);
         }
         // COMPRESS-117 - improve auto-recognition
         try {
             TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
             tais.getNextEntry();
-                return new TarArchiveInputStream(in);
+            return new TarArchiveInputStream(bufferedInput);
         } catch (Exception e) { // NOPMD
             // can generate IllegalArgumentException as well as IOException
             // autodetection, simply not a TAR
             // ignored
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
