diff --git a/tmp/28424332-ed18-4851-b88e-e4e6628bade3_buggy.java b/tmp/cb04cb62-26ad-47d8-98c9-a5aa31460486_fixed.java
index 6b160ef..ff074f2 100644
--- a/tmp/28424332-ed18-4851-b88e-e4e6628bade3_buggy.java
+++ b/tmp/cb04cb62-26ad-47d8-98c9-a5aa31460486_fixed.java
@@ -1,68 +1,64 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
-    public ArchiveInputStream createArchiveInputStream(final InputStream in)
-            throws ArchiveException {
+public ArchiveInputStream createArchiveInputStream(final InputStream in) throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
-            // Dump needs a bigger buffer to check the signature;
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
-            // COMPRESS-117 - improve auto-recognition
+
         try {
             TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
             tais.getNextEntry();
             return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
+        } catch (Exception e) {
             // ignored
         }
+
+        // If we haven't returned yet, check if the entire stream has been read
+        byte[] buf = new byte[1024];
+        if (in.read(buf) == -1) {
+            // The entire stream has been read, so throw an exception
+            throw new ArchiveException("No Archiver found for the stream signature");
+        } else {
+            // If we haven't reached the end of the stream, reset it and continue searching
+            in.reset();
+        }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
+    // If no archive type has been found, throw an exception
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
