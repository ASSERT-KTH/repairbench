diff --git a/tmp/17bbf318-15f2-482b-ae92-30d45a8dd005_buggy.java b/tmp/2d8b5d85-6bb6-4659-ad78-dc5cc37496d9_fixed.java
index 6b160ef..1aa7b19 100644
--- a/tmp/17bbf318-15f2-482b-ae92-30d45a8dd005_buggy.java
+++ b/tmp/2d8b5d85-6bb6-4659-ad78-dc5cc37496d9_fixed.java
@@ -1,68 +1,52 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
-    public ArchiveInputStream createArchiveInputStream(final InputStream in)
-            throws ArchiveException {
+public ArchiveInputStream createArchiveInputStream(final InputStream in) throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
+    try {
+        final byte[] signature = new byte[512];
         in.mark(signature.length);
-        try {
         int signatureLength = in.read(signature);
         in.reset();
+
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+        }
+
+        if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+        }
+
+        if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+        }
+
+        if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+        if (DumpArchiveInputStream.matches(signature, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+        if (TarArchiveInputStream.matches(signature, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
+
         // COMPRESS-117 - improve auto-recognition
-            try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
+        TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature, 0, signatureLength));
+        if (tais.getNextEntry() != null) {
+            tais.close(); // ensure internal stream is free
             return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
         }
+        tais.close(); // ensure internal stream is free
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
