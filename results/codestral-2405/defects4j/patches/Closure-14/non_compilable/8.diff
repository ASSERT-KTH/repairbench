diff --git a/tmp/172f6f94-7aa5-4aec-8705-cc21a3b10bc4_buggy.java b/tmp/6181fe91-8838-4319-9906-6d1f9ee0aaf1_fixed.java
index bf9bb88..a587c76 100644
--- a/tmp/172f6f94-7aa5-4aec-8705-cc21a3b10bc4_buggy.java
+++ b/tmp/6181fe91-8838-4319-9906-6d1f9ee0aaf1_fixed.java
@@ -1,108 +1,49 @@
-  /**
-   * Computes the follow() node of a given node and its parent. There is a side
-   * effect when calling this function. If this function computed an edge that
-   * exists a FINALLY, it'll attempt to connect the fromNode to the outer
-   * FINALLY according to the finallyMap.
-   *
-   * @param fromNode The original source node since {@code node} is changed
-   *        during recursion.
-   * @param node The node that follow() should compute.
-   */
-  private static Node computeFollowNode(
-      Node fromNode, Node node, ControlFlowAnalysis cfa) {
-    /*
-     * This is the case where:
-     *
-     * 1. Parent is null implies that we are transferring control to the end of
-     * the script.
-     *
-     * 2. Parent is a function implies that we are transferring control back to
-     * the caller of the function.
-     *
-     * 3. If the node is a return statement, we should also transfer control
-     * back to the caller of the function.
-     *
-     * 4. If the node is root then we have reached the end of what we have been
-     * asked to traverse.
-     *
-     * In all cases we should transfer control to a "symbolic return" node.
-     * This will make life easier for DFAs.
-     */
-    Node parent = node.getParent();
-    if (parent == null || parent.isFunction() ||
-        (cfa != null && node == cfa.root)) {
-      return null;
-    }
+private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {
+    // ... (existing code before changes)
 
-    // If we are just before a IF/WHILE/DO/FOR:
     switch (parent.getType()) {
-      // The follow() of any of the path from IF would be what follows IF.
-      case Token.IF:
-        return computeFollowNode(fromNode, parent, cfa);
-      case Token.CASE:
-      case Token.DEFAULT_CASE:
-        // After the body of a CASE, the control goes to the body of the next
-        // case, without having to go to the case condition.
-        if (parent.getNext() != null) {
-          if (parent.getNext().isCase()) {
-            return parent.getNext().getFirstChild().getNext();
-          } else if (parent.getNext().isDefaultCase()) {
-            return parent.getNext().getFirstChild();
-          } else {
-            Preconditions.checkState(false, "Not reachable");
-          }
-        } else {
-          return computeFollowNode(fromNode, parent, cfa);
-        }
-        break;
-      case Token.FOR:
-        if (NodeUtil.isForIn(parent)) {
-          return parent;
-        } else {
-          return parent.getFirstChild().getNext().getNext();
-        }
-      case Token.WHILE:
-      case Token.DO:
-        return parent;
+        // ... (existing cases)
+
         case Token.TRY:
             // If we are coming out of the TRY block...
             if (parent.getFirstChild() == node) {
                 if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(parent.getLastChild());
-          } else { // and have no FINALLY.
+                    return computeFallThrough(parent.getLastChild().getFirstChild()); // Fix 1: Connect to the first statement in FINALLY block.
+                } else {
                     return computeFollowNode(fromNode, parent, cfa);
                 }
+            }
             // CATCH block.
-        } else if (NodeUtil.getCatchBlock(parent) == node){
+            else if (NodeUtil.getCatchBlock(parent) == node){
                 if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(node.getNext());
+                    return computeFallThrough(parent.getLastChild().getFirstChild()); // Fix 2: Connect to the first statement in FINALLY block.
                 } else {
                     return computeFollowNode(fromNode, parent, cfa);
                 }
+            }
             // If we are coming out of the FINALLY block...
-        } else if (parent.getLastChild() == node){
+            else if (parent.getLastChild() == node){
                 if (cfa != null) {
                     for (Node finallyNode : cfa.finallyMap.get(parent)) {
                         cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
                     }
                 }
                 return computeFollowNode(fromNode, parent, cfa);
             }
-    }
-
-    // Now that we are done with the special cases follow should be its
-    // immediate sibling, unless its sibling is a function
-    Node nextSibling = node.getNext();
+            break;
 
-    // Skip function declarations because control doesn't get pass into it.
-    while (nextSibling != null && nextSibling.isFunction()) {
-      nextSibling = nextSibling.getNext();
+        case Token.WHILE:
+        case Token.DO:
+        case Token.FOR:
+            // If we are coming out of a loop with a FINALLY block due to a BREAK statement...
+            if (node.isBreak()) {
+                if (NodeUtil.hasFinallyInAncestors(node)) {
+                    Node finallyNode = NodeUtil.getFinallyInAncestors(node);
+                    return computeFallThrough(finallyNode.getFirstChild()); // Fix 3: Connect to the first statement in the nearest FINALLY block.
                 }
-
-    if (nextSibling != null) {
-      return computeFallThrough(nextSibling);
-    } else {
-      // If there are no more siblings, control is transferred up the AST.
-      return computeFollowNode(fromNode, parent, cfa);
             }
+            return parent.getNext();
+    }
+
+    // ... (existing code after changes)
 }
\ No newline at end of file
