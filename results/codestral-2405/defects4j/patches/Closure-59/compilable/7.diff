diff --git a/tmp/ebbaf2cc-6580-4b69-8190-98b2d48bac76_buggy.java b/tmp/669eeccf-b284-41d7-a152-2de9c71bb97b_fixed.java
index 29fabfa..8ab6217 100644
--- a/tmp/ebbaf2cc-6580-4b69-8190-98b2d48bac76_buggy.java
+++ b/tmp/669eeccf-b284-41d7-a152-2de9c71bb97b_fixed.java
@@ -1,67 +1,49 @@
-  /**
-   * Initialize the compiler options. Only necessary if you're not doing
-   * a normal compile() job.
-   */
 public void initOptions(CompilerOptions options) {
   this.options = options;
   if (errorManager == null) {
     if (outStream == null) {
-        setErrorManager(
-            new LoggerErrorManager(createMessageFormatter(), logger));
+      setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));
     } else {
-        PrintStreamErrorManager printer =
-            new PrintStreamErrorManager(createMessageFormatter(), outStream);
+      PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream);
       printer.setSummaryDetailLevel(options.summaryDetailLevel);
       setErrorManager(printer);
     }
   }
 
   // DiagnosticGroups override the plain checkTypes option.
   if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = true;
   } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = false;
-    } else if (!options.checkTypes) {
-      // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
-      // parser type warnings.
-      options.setWarningLevel(
-          DiagnosticGroup.forType(
-              RhinoErrorReporter.TYPE_PARSE_ERROR),
-          CheckLevel.OFF);
+  }
+
+  // If DiagnosticGroups did not override the plain checkTypes option, and checkTypes is enabled,
+  // then turn off the parser type warnings, unless globalThis check is enabled.
+  if (options.checkTypes && !options.checkGlobalThisLevel.isOn()) {
+    options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF);
   }
 
   if (options.checkGlobalThisLevel.isOn()) {
-      options.setWarningLevel(
-          DiagnosticGroups.GLOBAL_THIS,
-          options.checkGlobalThisLevel);
+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);
   }
 
   if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {
-      options.setWarningLevel(
-          DiagnosticGroups.ES5_STRICT,
-          CheckLevel.ERROR);
+    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR);
   }
 
   // Initialize the warnings guard.
   List<WarningsGuard> guards = Lists.newArrayList();
-    guards.add(
-        new SuppressDocWarningsGuard(
-            getDiagnosticGroups().getRegisteredGroups()));
+  guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
   guards.add(options.getWarningsGuard());
 
   ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);
 
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
-      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+  // All passes must run the variable check. This synthesizes variables later so that the compiler doesn't crash.
+  // It also checks the externs file for validity. If you don't want to warn about missing variable declarations,
+  // we shut that specific error off, unless specifically enabled by the user.
+  if (!options.checkSymbols && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
+    composedGuards.addGuard(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
   }
 
   this.warningsGuard = composedGuards;
 }
\ No newline at end of file
