diff --git a/tmp/de4f2779-e4c3-4807-9052-f5a884a02b0a_buggy.java b/tmp/37f7b0ac-b1e5-4177-8257-59d64e4b7aac_fixed.java
index 29fabfa..a05df8b 100644
--- a/tmp/de4f2779-e4c3-4807-9052-f5a884a02b0a_buggy.java
+++ b/tmp/37f7b0ac-b1e5-4177-8257-59d64e4b7aac_fixed.java
@@ -1,67 +1,57 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
+      // option, and checkTypes is disabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
-          DiagnosticGroup.forType(
-              RhinoErrorReporter.TYPE_PARSE_ERROR),
+          DiagnosticGroups.PARSER_TYPE_WARNINGS,
           CheckLevel.OFF);
     }
 
-    if (options.checkGlobalThisLevel.isOn()) {
-      options.setWarningLevel(
-          DiagnosticGroups.GLOBAL_THIS,
-          options.checkGlobalThisLevel);
+    // Check for globalThis directives
+    if (!options.enables(DiagnosticGroups.GLOBAL_THIS)) {
+      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);
     }
 
+    // Check for ES5 strict mode
     if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {
-      options.setWarningLevel(
-          DiagnosticGroups.ES5_STRICT,
-          CheckLevel.ERROR);
+      options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
-    guards.add(
-        new SuppressDocWarningsGuard(
-            getDiagnosticGroups().getRegisteredGroups()));
+    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
     ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);
 
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
-      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+    // Initialize check variables pass
+    if (!options.checkSymbols && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
+      composedGuards.addGuard(
+          new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
     this.warningsGuard = composedGuards;
   }
\ No newline at end of file
