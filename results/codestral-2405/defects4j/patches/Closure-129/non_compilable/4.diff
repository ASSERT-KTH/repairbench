diff --git a/tmp/c4be0aa6-b1c7-4072-9d57-ca89ad72ae0a_buggy.java b/tmp/a3dd556f-c6f0-493b-bd45-d249d5b4c679_fixed.java
index e8705ac..1c42e97 100644
--- a/tmp/c4be0aa6-b1c7-4072-9d57-ca89ad72ae0a_buggy.java
+++ b/tmp/a3dd556f-c6f0-493b-bd45-d249d5b4c679_fixed.java
@@ -1,24 +1,24 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
+  // Keep track of of the "this" context of a call.
+  // A call without an explicit "this" is a free call.
   Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+  // Skip past any cast nodes.
+  Node firstNonCast = NodeUtil.skipCastNode(first);
 
-      if (!NodeUtil.isGet(first)) {
+  if (firstNonCast.isGetProp() &&
+      !firstNonCast.hasChildren() &&
+      !firstNonCast.getFirstChild().hasChildren()) {
+  		// This is a call with an implicit "this" (free call)
         n.putBooleanProp(Node.FREE_CALL, true);
   }
 
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+  if (firstNonCast.isName() &&
+      "eval".equals(firstNonCast.getString())) {
+        firstNonCast.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
