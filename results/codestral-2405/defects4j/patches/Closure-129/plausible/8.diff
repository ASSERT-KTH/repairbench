diff --git a/tmp/59957521-9229-495c-b176-0f57638a6da7_buggy.java b/tmp/39f86018-2996-46c2-9a9e-9a9370e45ef7_fixed.java
index e8705ac..ecde91b 100644
--- a/tmp/59957521-9229-495c-b176-0f57638a6da7_buggy.java
+++ b/tmp/39f86018-2996-46c2-9a9e-9a9370e45ef7_fixed.java
@@ -1,24 +1,29 @@
 /**
-     * There are two types of calls we are interested in calls without explicit
+ * There are two types of calls we are interested in: calls without explicit
  * "this" values (what we are call "free" calls) and direct call to eval.
  */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
   // Keep track of of the "this" context of a call.  A call without an
   // explicit "this" is a free call.
   Node first = n.getFirstChild();
 
   // ignore cast nodes.
+  if (first.isCast()) {
+    first = first.getFirstChild();
+  }
 
   if (!NodeUtil.isGet(first)) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+  if (first.isName() && "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
+  } else if (first.isGetProp() && first.getFirstChild().isName() &&
+      "eval".equals(first.getFirstChild().getString())) {
+    first.getFirstChild().putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
