diff --git a/tmp/10e4016f-5ea1-4087-9e1b-b72675b49c8a_buggy.java b/tmp/1f65790f-7213-4673-bee9-6f63c9eca755_fixed.java
index e8705ac..062392e 100644
--- a/tmp/10e4016f-5ea1-4087-9e1b-b72675b49c8a_buggy.java
+++ b/tmp/1f65790f-7213-4673-bee9-6f63c9eca755_fixed.java
@@ -1,24 +1,21 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
   // Keep track of of the "this" context of a call.  A call without an
   // explicit "this" is a free call.
   Node first = n.getFirstChild();
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  // Fix the issue: Ignore all nodes that are not NAME or GET nodes
+  if (!(first.isName() || NodeUtil.isGet(first))) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+  if (first.isName() && "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
+  } else if (NodeUtil.isGet(first) && first.getFirstChild().isName() && "eval".equals(first.getFirstChild().getString())) {
+    // Add this block to handle the case where eval is called indirectly such as via a GETPROP
+    first.getFirstChild().putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
