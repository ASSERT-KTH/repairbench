diff --git a/tmp/51614614-241a-489d-998f-61f59a115466_buggy.java b/tmp/711f7540-cc3e-419d-87f6-0306fb0ffc95_fixed.java
index e8705ac..3153dbc 100644
--- a/tmp/51614614-241a-489d-998f-61f59a115466_buggy.java
+++ b/tmp/711f7540-cc3e-419d-87f6-0306fb0ffc95_fixed.java
@@ -1,24 +1,23 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
   // Keep track of of the "this" context of a call.  A call without an
   // explicit "this" is a free call.
   Node first = n.getFirstChild();
 
   // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  if (first.isGetProp() && !NodeUtil.isGet(first.getFirstChild())) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+  if (first.isName() && "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
+  } else if (first.isGetProp()) {
+    Node firstChild = first.getFirstChild();
+    if (firstChild.isName() && "eval".equals(firstChild.getString())) {
+      firstChild.putBooleanProp(Node.DIRECT_EVAL, true);
+    }
   }
 }
\ No newline at end of file
