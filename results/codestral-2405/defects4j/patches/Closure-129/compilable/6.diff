diff --git a/tmp/8a7aee72-e4ab-499c-9c4c-443fa74db09d_buggy.java b/tmp/5035899d-f6ff-4ba8-814c-4fc5f3cac535_fixed.java
index e8705ac..eb27ec1 100644
--- a/tmp/8a7aee72-e4ab-499c-9c4c-443fa74db09d_buggy.java
+++ b/tmp/5035899d-f6ff-4ba8-814c-4fc5f3cac535_fixed.java
@@ -1,24 +1,29 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
-      Node first = n.getFirstChild();
-
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  // Check if any node in the structure is a GET node, if not, then it's a free call.
+  if (!isNodeOrDescendantGet(n)) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+  // Keep track of the context in which eval is called.
+  Node first = n.getFirstChild();
+  if (first.isName() && "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
+
+// Recursive helper function to check if a node or any of its descendants is a GET node
+private boolean isNodeOrDescendantGet(Node n) {
+  if (NodeUtil.isGet(n)) {
+    return true;
+  }
+
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    if (isNodeOrDescendantGet(child)) {
+      return true;
+    }
+  }
+
+  return false;
+}
\ No newline at end of file
