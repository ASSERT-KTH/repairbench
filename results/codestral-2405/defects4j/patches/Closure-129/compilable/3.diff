diff --git a/tmp/7e3752db-2f3b-4552-b04e-32ed05181e69_buggy.java b/tmp/4aafc587-05b6-49bb-88be-bbc66ac55d93_fixed.java
index e8705ac..8e25601 100644
--- a/tmp/7e3752db-2f3b-4552-b04e-32ed05181e69_buggy.java
+++ b/tmp/4aafc587-05b6-49bb-88be-bbc66ac55d93_fixed.java
@@ -1,24 +1,14 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
   Node first = n.getFirstChild();
-
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  if (first.isGetProp()) {
+    Node object = first.getFirstChild();
+    Node property = first.getLastChild();
+    if (!NodeUtil.isGet(object) && !("eval".equals(property.getString()))) {
       n.putBooleanProp(Node.FREE_CALL, true);
     }
-
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+  } else if (first.isName() && "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
