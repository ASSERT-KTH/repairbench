diff --git a/tmp/b810c9a8-a587-4279-8bc1-dcc3236bcc3e_buggy.java b/tmp/612b3bb5-b620-46e0-8806-3f4e9bb239ab_fixed.java
index 08a41cf..abb8b2e 100644
--- a/tmp/b810c9a8-a587-4279-8bc1-dcc3236bcc3e_buggy.java
+++ b/tmp/612b3bb5-b620-46e0-8806-3f4e9bb239ab_fixed.java
@@ -1,12 +1,30 @@
-    /**
-     * Overloaded version of {@link #readValue(InputStream)}.
-     */
 public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)
     throws IOException, JsonProcessingException
 {
+    byte[] cleanedSrc = cleanInvalidUtf8Bytes(src, offset, length);
+
     if (_dataFormatReaders != null) {
-            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);
+        return _detectBindAndReadValues(_dataFormatReaders.findFormat(cleanedSrc, offset, length), false);
     }
-        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),
+    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(cleanedSrc, offset, length),
             true));
 }
+
+private byte[] cleanInvalidUtf8Bytes(byte[] src, int offset, int length) {
+    ByteArrayOutputStream cleanedStream = new ByteArrayOutputStream();
+
+    for (int i = offset; i < offset + length; i++) {
+        int b = src[i] & 0xff;
+
+        if ((b <= 0b11111111) ||
+            (b >= 0b11110000 && b <= 0b11110111) ||
+            (b >= 0b11100000 && b <= 0b11101111) ||
+            (b >= 0b11000000 && b <= 0b11011111)) {
+            cleanedStream.write(b);
+        } else {
+            cleanedStream.write((byte) 0x20);  // replace by default byte
+        }
+    }
+
+    return cleanedStream.toByteArray();
+}
\ No newline at end of file
