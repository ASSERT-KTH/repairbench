diff --git a/tmp/7f0a400a-5be1-40bb-8dd3-13853b260f74_buggy.java b/tmp/55d40f93-866a-4942-a298-e12c374e1054_fixed.java
index 46817a7..3a965c2 100644
--- a/tmp/7f0a400a-5be1-40bb-8dd3-13853b260f74_buggy.java
+++ b/tmp/55d40f93-866a-4942-a298-e12c374e1054_fixed.java
@@ -1,16 +1,31 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    JSType thatType = that.toMaybeRecordType();
+
+    // Get all possible properties from both types
+    Set<String> allProperties = new HashSet<>();
+    allProperties.addAll(properties.keySet());
+    allProperties.addAll(thatType.getProperties().keySet());
+
+    for (String property : allProperties) {
+        JSType thisProperty = this.getOwnPropertyType(property);
+        JSType thatProperty = thatType.getOwnPropertyType(property);
+
+        // Check if both properties exist and are equivalent
+        if (thisProperty.isNormalized() && thatProperty.isNormalized()
+                && thisProperty.isEquivalentTo(thatProperty)) {
+            builder.addProperty(property, thisProperty, getPropertyNode(property));
+        } else if (thisProperty.isNormalized()) {
+            // If only the current type has this property, add union type to the builder
+            builder.addProperty(property, registry.createUnionType(thisProperty, thatProperty), getPropertyNode(property));
+        } else if (thatProperty.isNormalized()) {
+            // If only the other type has this property, add union type to the builder
+            builder.addProperty(property, registry.createUnionType(thisProperty, thatProperty), thatType.getPropertyNode(property));
         }
     }
     return builder.build();
 }
\ No newline at end of file
