diff --git a/tmp/18ebb138-e9f7-4a7b-ba5a-8e51ce369617_buggy.java b/tmp/5dcb0e88-cd01-4c2f-8d60-1b866df2d7c6_fixed.java
index 46817a7..d894c30 100644
--- a/tmp/18ebb138-e9f7-4a7b-ba5a-8e51ce369617_buggy.java
+++ b/tmp/5dcb0e88-cd01-4c2f-8d60-1b866df2d7c6_fixed.java
@@ -1,16 +1,29 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());
+    for (String property : allProperties) {
+      if (properties.containsKey(property) && that.toMaybeRecordType().hasProperty(property)) {
+        // If both record types have the property, put the union of the types in the least supertype
+        JSType type1 = properties.get(property).getType();
+        JSType type2 = that.toMaybeRecordType().getPropertyType(property).getType();
+        JSType unionType = registry.createUnionType(type1, type2);
+        if (unionType == null) {
+          // If no common supertype, the least supertype is a ProxyObjectType
+          unionType = new ProxyObjectType(registry, type1, type2);
+        }
+        builder.addProperty(property, unionType, getPropertyNode(property));
+      } else if (properties.containsKey(property)) {
+        // If only the current record type has the property, put its type in the least supertype
+        builder.addProperty(property, properties.get(property).getType(), getPropertyNode(property));
+      } else {
+        // If only the other record type has the property, put its type in the least supertype
+        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property).getType(), that.toMaybeRecordType().getPropertyNode(property));
       }
     }
     return builder.build();
   }
\ No newline at end of file
