diff --git a/tmp/5c917792-a6bf-4197-a2be-5f108da42c68_buggy.java b/tmp/88df09b7-a348-49eb-a208-62b8db0670a5_fixed.java
index 46817a7..3bc7bb4 100644
--- a/tmp/5c917792-a6bf-4197-a2be-5f108da42c68_buggy.java
+++ b/tmp/88df09b7-a348-49eb-a208-62b8db0670a5_fixed.java
@@ -1,16 +1,34 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
-      return super.getLeastSupertype(that);
+    return registry.createUnionType(this, that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+  Set<String> allProperties = new HashSet<>(properties.keySet());
+  allProperties.addAll(that.toMaybeRecordType().getProperties());
+
+  for (String property : allProperties) {
+    JSType thisPropertyType = isRecordType() && properties.containsKey(property)
+        ? getPropertyType(property)
+        : null;
+    JSType thatPropertyType = that.isRecordType() && that.toMaybeRecordType().hasProperty(property)
+        ? that.toMaybeRecordType().getPropertyType(property)
+        : null;
+
+    if (thisPropertyType != null && thisPropertyType.equals(thatPropertyType)) {
+      builder.addProperty(property, thisPropertyType, getPropertyNode(property));
+    } else if (thisPropertyType != null && thatPropertyType != null) {
+      builder.addProperty(property, registry.createUnionType(thisPropertyType, thatPropertyType), null);
+    } else if (thisPropertyType != null) {
+      builder.addProperty(property, thisPropertyType, getPropertyNode(property));
+    } else if (thatPropertyType != null) {
+      builder.addProperty(property, thatPropertyType, that.toMaybeRecordType().getPropertyNode(property));
     }
   }
-    return builder.build();
+  JSType leastSupertype = builder.build();
+  if (!this.equals(leastSupertype) || !that.equals(leastSupertype)) {
+    return registry.createUnionType(this, that);
+  } else {
+    return leastSupertype;
+  }
 }
\ No newline at end of file
