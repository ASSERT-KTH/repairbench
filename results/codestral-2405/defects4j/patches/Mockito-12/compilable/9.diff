diff --git a/tmp/fcdd358e-1f5c-43b5-a371-541641d9b2a0_buggy.java b/tmp/3308d403-889d-4c45-8167-942856af741a_fixed.java
index bada2b6..58cb3d4 100644
--- a/tmp/fcdd358e-1f5c-43b5-a371-541641d9b2a0_buggy.java
+++ b/tmp/3308d403-889d-4c45-8167-942856af741a_fixed.java
@@ -1,16 +1,17 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
-    public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+public Class<?> getGenericType(Field field) {
+    Type type = field.getGenericType();
+    return resolveType(type);
 }
 
+private Class<?> resolveType(Type type) {
+    if (type instanceof Class) {
+        return (Class<?>) type;
+    }
+    if (type instanceof ParameterizedType) {
+        ParameterizedType paramType = (ParameterizedType) type;
+        Type[] argTypes = paramType.getActualTypeArguments();
+        // return the first argument type for show, it's up to the caller to decide how to handle multi-arguments
+        return resolveType(argTypes[0]);
+    }
     return Object.class;
 }
\ No newline at end of file
