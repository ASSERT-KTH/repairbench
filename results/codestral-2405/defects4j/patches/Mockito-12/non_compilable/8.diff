diff --git a/tmp/b3f9a5f6-b831-466a-a6f4-72a7d244ddc4_buggy.java b/tmp/322cb5f5-407e-4191-9d53-b3036223597e_fixed.java
index bada2b6..0fb8073 100644
--- a/tmp/b3f9a5f6-b831-466a-a6f4-72a7d244ddc4_buggy.java
+++ b/tmp/322cb5f5-407e-4191-9d53-b3036223597e_fixed.java
@@ -1,16 +1,29 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
  *
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
+    if (generic != null) {
+        if (generic instanceof ParameterizedType) {
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+            return (Class<?>) getRawType(actual);
+        } else if (generic instanceof GenericArrayType) {
+            Type componentType = ((GenericArrayType) generic).getGenericComponentType();
+            Class<?> componentClass = getRawType(componentType);
+            return Array.newInstance(componentClass, 0).getClass();
+        }
     }
 
     return Object.class;
 }
+
+private Type getRawType(Type type) {
+    if (type instanceof ParameterizedType) {
+        return getRawType(((ParameterizedType) type).getRawType());
+    } else {
+        return (Class<?>) type;
+    }
+}
\ No newline at end of file
