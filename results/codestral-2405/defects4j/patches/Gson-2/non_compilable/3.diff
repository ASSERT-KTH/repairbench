diff --git a/tmp/45d1f7ef-2a2d-4b96-b94d-81625551f521_buggy.java b/tmp/9ef5dd78-a43c-4091-9554-d4a2ccedf6eb_fixed.java
index 6e45f80..56cb9f3 100644
--- a/tmp/45d1f7ef-2a2d-4b96-b94d-81625551f521_buggy.java
+++ b/tmp/9ef5dd78-a43c-4091-9554-d4a2ccedf6eb_fixed.java
@@ -1,21 +1,32 @@
-  /**
-   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
-   * that the deserialized type matches the type requested.
-   */
-  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
+static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
-      @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked", "rawtypes"})
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
-        final Class<? super T2> requestedType = typeToken.getRawType();
-        if (!clazz.isAssignableFrom(requestedType)) {
+      if (!clazz.isAssignableFrom(typeToken.getRawType())) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
+      return new TypeAdapter<T2>() {
+        @Override
+        public T2 read(JsonReader in) throws IOException {
+          JsonElement element = new JsonTreeReader(gson).nextValue();
+          if (!element.getClass().isAssignableFrom(clazz)) {
+            throw new JsonSyntaxException("Expected " + clazz.getName() + " but was "
+                + element.getClass().getName());
+          }
+          return typeAdapter.fromJsonTree(element);
+        }
 
+        @Override
+        public void write(JsonWriter out, T2 value) throws IOException {
+          typeAdapter.write(out, value);
         }
-      @Override public String toString() {
+      };
+    }
+
+    @Override
+    public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ", adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
