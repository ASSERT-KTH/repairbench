diff --git a/tmp/af24ef23-1af7-4c53-8151-13966afbdb32_buggy.java b/tmp/9916b736-4607-4028-b2cc-94a581c9f0be_fixed.java
index 6e45f80..e4b87e1 100644
--- a/tmp/af24ef23-1af7-4c53-8151-13966afbdb32_buggy.java
+++ b/tmp/9916b736-4607-4028-b2cc-94a581c9f0be_fixed.java
@@ -1,21 +1,21 @@
 /**
  * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
  * that the deserialized type matches the type requested.
  */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
-          return null;
+          return null;  // return null if type is not assignable
         }
-        return (TypeAdapter<T2>) typeAdapter;
-
+        // Only return the typeAdapter when the requested type is the same or it's a superclass of the clazz
+        return requestedType == clazz || requestedType.isAssignableFrom(clazz) ? (TypeAdapter<T2>) typeAdapter : null;
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
 }
\ No newline at end of file
