diff --git a/tmp/d54b3f94-3572-4ebd-8331-fe2bf4b89957_buggy.java b/tmp/aa009067-5a17-470a-ab0e-0a22ec297069_fixed.java
index 39981f0..bef8019 100644
--- a/tmp/d54b3f94-3572-4ebd-8331-fe2bf4b89957_buggy.java
+++ b/tmp/aa009067-5a17-470a-ab0e-0a22ec297069_fixed.java
@@ -1,65 +1,56 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
 
-    // The best type name is the actual type name.
+    ObjectType objectType = null;
+    String propName = null;
 
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+    // For GETPROP, navigate through the prototype chain to find the original definition
     if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+      objectType = getJSType(n.getFirstChild()).dereference();
+      propName = n.getLastChild().getString();
       if (objectType != null) {
-        String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
-          // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
       }
     }
+
+    // Return the readable name
+    if (objectType != null && propName != null) {
+      return getReadableTypeName(objectType) + "." + propName;
     }
 
+    // Apply dereference if needed
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
+
+    // Return the readable type name
+    return getReadableTypeName(type);
+}
+
+// Helper function to get a readable name for a given type
+private String getReadableTypeName(JSType type) {
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
-      // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
 }
\ No newline at end of file
