diff --git a/tmp/b7002edf-bd02-4c5b-ac13-4e2358450024_buggy.java b/tmp/ac8702c4-c9d6-4b6f-a446-1df71f99d155_fixed.java
index 544303b..4bc4235 100644
--- a/tmp/b7002edf-bd02-4c5b-ac13-4e2358450024_buggy.java
+++ b/tmp/ac8702c4-c9d6-4b6f-a446-1df71f99d155_fixed.java
@@ -1,29 +1,25 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+    double mostNegative = basicRow == null ? Double.POSITIVE_INFINITY : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+        if (basicRow != null) {
+            mostNegative = Math.min(mostNegative, getEntry(basicRow, getRhsOffset()));
+        }
+    }
+    for (int i = 0; i < coefficients.length; i++) {
+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                           (restrictToNonNegative ? 0 : mostNegative);
         if (basicRow != null) {
             for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                 if (tableau.getEntry(basicRow, j) == 1) {
                     coefficients[i] = 0;
+                    break;
                 }
             }
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
