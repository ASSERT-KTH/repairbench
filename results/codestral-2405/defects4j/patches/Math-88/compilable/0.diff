diff --git a/tmp/62a2ca48-c4b9-4181-8002-5a75bdec45e3_buggy.java b/tmp/8d880e33-6917-4dff-a105-289397187f00_fixed.java
index 544303b..0047f11 100644
--- a/tmp/62a2ca48-c4b9-4181-8002-5a75bdec45e3_buggy.java
+++ b/tmp/8d880e33-6917-4dff-a105-289397187f00_fixed.java
@@ -1,29 +1,29 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    double mostNegative = Double.POSITIVE_INFINITY;
+
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        double value = 0;
         if (basicRow != null) {
+            value = getEntry(basicRow, getRhsOffset());
+
+            // Check if multiple variables can take the given value
+            // If so, set their coefficients to 0, except for the first one
             for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                 if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+                    coefficients[j - getNumObjectiveFunctions()] = 0;
                 }
             }
+
+            // Update the most negative value
+            if (value < mostNegative) {
+                mostNegative = value;
             }
         }
+
+        coefficients[i] = value - (restrictToNonNegative ? 0 : mostNegative);
+    }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
