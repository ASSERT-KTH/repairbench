diff --git a/tmp/8cae13e2-ba0e-4219-9ef4-4303870f6029_buggy.java b/tmp/8ae5cbdb-604a-4cf1-91f7-37bea375bbf1_fixed.java
index 544303b..59c0693 100644
--- a/tmp/8cae13e2-ba0e-4219-9ef4-4303870f6029_buggy.java
+++ b/tmp/8ae5cbdb-604a-4cf1-91f7-37bea375bbf1_fixed.java
@@ -1,29 +1,41 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    double mostNegative = Double.MAX_VALUE;
+
+    // Find the most negative value in the RHS vector
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        if (basicRow != null) {
+            double basicRowValue = getEntry(basicRow, getRhsOffset());
+            if (basicRowValue < mostNegative) {
+                mostNegative = basicRowValue;
+            }
+        }
+    }
+    mostNegative = mostNegative == Double.MAX_VALUE ? 0 : mostNegative;
+
+    // Compute the coefficients for each variable
+    for (int i = 0; i < coefficients.length; i++) {
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        coefficients[i] = (basicRow == null) ? 0 : getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);
+
+        // If multiple variables can take a given value, set them all to zero
         if (basicRow != null) {
             for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+                if (Math.abs(tableau.getEntry(basicRow, j)) > 1e-6) {
                     coefficients[i] = 0;
+                    break;
                 }
             }
         }
     }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
