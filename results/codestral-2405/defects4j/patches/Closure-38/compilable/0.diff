diff --git a/tmp/beda843c-5936-4efe-847d-194feec098f2_buggy.java b/tmp/d8afc199-81ac-468a-9d53-993e90457699_fixed.java
index a7d4ff8..fafe146 100644
--- a/tmp/beda843c-5936-4efe-847d-194feec098f2_buggy.java
+++ b/tmp/d8afc199-81ac-468a-9d53-993e90457699_fixed.java
@@ -1,28 +1,31 @@
 void addNumber(double x) {
-    // This is not pretty printing. This is to prevent misparsing of x- -4 as
-    // x--4 (which is a syntax error).
   char prev = getLastChar();
   boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
+
+  // Check if we need to insert a space when printing a negative number shortly after a '-' sign
+  if (x < 0 && prev == '-' && x != -0.0) { // I added a condition to prevent a space from being added before '-0.0'
     add(" ");
+  } else if (x == 0 && Double.doubleToRawLongBits(x) < 0) { // This ensures a space is added when printing '-0'
+    add(" -0");
+    return; // We can return as we have already added the number to the output
   }
 
   if ((long) x == x && !negativeZero) {
     long value = (long) x;
     long mantissa = value;
     int exp = 0;
     if (Math.abs(x) >= 100) {
       while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
         mantissa /= 10;
         exp++;
       }
     }
     if (exp > 2) {
       add(Long.toString(mantissa) + "E" + Integer.toString(exp));
     } else {
       add(Long.toString(value));
     }
   } else {
     add(String.valueOf(x));
   }
 }
\ No newline at end of file
