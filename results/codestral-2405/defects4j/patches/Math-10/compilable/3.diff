diff --git a/tmp/0ac7ffe6-52c2-4361-9a22-c0d7c33799f3_buggy.java b/tmp/31b9c19b-778f-49b4-b668-3394ed9f4a9b_fixed.java
index d27c40c..53d1d8f 100644
--- a/tmp/0ac7ffe6-52c2-4361-9a22-c0d7c33799f3_buggy.java
+++ b/tmp/31b9c19b-778f-49b4-b668-3394ed9f4a9b_fixed.java
@@ -1,49 +1,32 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
     // compute r = sqrt(x^2+y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
-        if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
     for (int i = 0; i < tmp2.length; ++i) {
+        if (Double.isNaN(x[xOffset + i])) {
+            // Handle special case of arctan2(double, double)
+            result[resultOffset + i] = ((y[yOffset + i] >= 0) ? 0.0 : -0.0);
+        } else if (x[xOffset + i] >= 0) {
+            // compute atan2(y, x) = 2 atan(y / (r + x))
+            add(tmp1, i, x, xOffset + i, tmp2, i);  // r + x
+            divide(y, yOffset + i, tmp2, i, tmp1, i);   // y /(r + x)
+            atan(tmp1, i, tmp2, i);                 // atan(y / (r + x))
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
-            }
-
         } else {
-
             // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+            subtract(tmp1, i, x, xOffset + i, tmp2, i); // r - x
+            divide(y, yOffset + i, tmp2, i, tmp1, i);   // y /(r - x)
+            atan(tmp1, i, tmp2, i);                 // atan(y / (r - x))
+            result[resultOffset + i] =
+                    ((tmp2[i] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
         }
-
     }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
