diff --git a/tmp/2d60e274-4a7b-4eba-95c8-162e2bae650d_buggy.java b/tmp/7bb7c67f-80d3-47db-af61-c86ca4e5a11a_fixed.java
index d27c40c..e1f4aab 100644
--- a/tmp/2d60e274-4a7b-4eba-95c8-162e2bae650d_buggy.java
+++ b/tmp/7bb7c67f-80d3-47db-af61-c86ca4e5a11a_fixed.java
@@ -1,49 +1,50 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
+    if (!Double.isFinite(y[yOffset]) || !Double.isFinite(x[xOffset])) {
+        if (Double.isNaN(y[yOffset]) || Double.isNaN(x[xOffset])) {
+            Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);
+        } else if (y[yOffset] == 0 && x[xOffset] > 0) {
+            Arrays.fill(result, resultOffset, resultOffset + getSize(), y[yOffset]);
+        } else if (y[yOffset] > 0 && Double.isInfinite(x[xOffset])) {
+            Arrays.fill(result, resultOffset, resultOffset + getSize(), FastMath.PI / 2.0);
+        } else if (y[yOffset] < 0 && Double.isInfinite(x[xOffset])) {
+            Arrays.fill(result, resultOffset, resultOffset + getSize(), -FastMath.PI / 2.0);
+        } else if (y[yOffset] == 0 && x[xOffset] < 0) {
+            Arrays.fill(result, resultOffset, resultOffset + getSize(), -y[yOffset]);
+        } else if (y[yOffset] == 0 && Double.isInfinite(x[xOffset])) {
+            Arrays.fill(result, resultOffset, resultOffset + getSize(), (x[xOffset] > 0) ? FastMath.PI : -FastMath.PI);
+        } else if (Double.isInfinite(y[yOffset]) && Double.isInfinite(x[xOffset])) {
+            Arrays.fill(result, resultOffset, resultOffset + getSize(), (y[yOffset] == x[xOffset]) ? FastMath.PI / 4.0 : 3.0 * FastMath.PI / 4.0);
+        } else {
+            Arrays.fill(result, resultOffset, resultOffset + getSize(), y[yOffset]);
+        }
+    } else {
         // compute r = sqrt(x^2+y^2)
         double[] tmp1 = new double[getSize()];
         multiply(x, xOffset, x, xOffset, tmp1, 0); // x^2
         double[] tmp2 = new double[getSize()];
         multiply(y, yOffset, y, yOffset, tmp2, 0); // y^2
         add(tmp1, 0, tmp2, 0, tmp2, 0); // x^2 + y^2
         rootN(tmp2, 0, 2, tmp1, 0); // r = sqrt(x^2 + y^2)
 
         if (x[xOffset] >= 0) {
-
             // compute atan2(y, x) = 2 atan(y / (r + x))
             add(tmp1, 0, x, xOffset, tmp2, 0); // r + x
             divide(y, yOffset, tmp2, 0, tmp1, 0); // y /(r + x)
             atan(tmp1, 0, tmp2, 0); // atan(y / (r + x))
             for (int i = 0; i < tmp2.length; ++i) {
                 result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
             }
-
         } else {
-
             // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
             subtract(tmp1, 0, x, xOffset, tmp2, 0); // r - x
             divide(y, yOffset, tmp2, 0, tmp1, 0); // y /(r - x)
             atan(tmp1, 0, tmp2, 0); // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+            for (int i = 0; i < tmp2.length; ++i) {
+                result[resultOffset + i] = ((tmp2[i] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+            }
         }
-
     }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
