diff --git a/tmp/81ae94df-5224-42b0-8b44-189fdeec1e74_buggy.java b/tmp/e91e3bd6-2a6e-43a7-bbe9-1fdb2bbfb8eb_fixed.java
index 0722547..4eaea35 100644
--- a/tmp/81ae94df-5224-42b0-8b44-189fdeec1e74_buggy.java
+++ b/tmp/e91e3bd6-2a6e-43a7-bbe9-1fdb2bbfb8eb_fixed.java
@@ -1,26 +1,29 @@
 @Override
 public void feedInput(byte[] buf, int start, int end) throws IOException
 {
     // Must not have remaining input
     if (_inputPtr < _inputEnd) {
         _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
     }
     if (end < start) {
         _reportError("Input end (%d) may not be before start (%d)", end, start);
     }
     // and shouldn't have been marked as end-of-input
     if (_endOfInput) {
         _reportError("Already closed, can not feed more input");
     }
-        // Time to update pointers first
-        _currInputProcessed += _origBufferLen;
+    // Update the current input processed based on the original buffer length
+    _currInputProcessed += (_inputEnd - _inputPtr);
 
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
-        _currInputRowStart = start - (_inputEnd - _currInputRowStart);
+    // Adjust row start to correctly represent the start of the new buffer
+    // This handles the case where new data starts before the end of the previous data
+    if(start < _inputEnd) {
+        _currInputRowStart = _currInputRowStart - (_inputEnd - start);
+    }
 
-        // And then update buffer settings
+    // Then update the buffer settings
     _inputBuffer = buf;
     _inputPtr = start;
     _inputEnd = end;
     _origBufferLen = end - start;
 }
\ No newline at end of file
