diff --git a/tmp/40390afa-08b1-4c1b-b363-19f3f83c1f49_buggy.java b/tmp/2e98f268-4c6f-4a9a-b1a3-46bac8c033d1_fixed.java
index 8e93a5e..d871521 100644
--- a/tmp/40390afa-08b1-4c1b-b363-19f3f83c1f49_buggy.java
+++ b/tmp/2e98f268-4c6f-4a9a-b1a3-46bac8c033d1_fixed.java
@@ -1,43 +1,31 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+        // The bug is here, the trim() method should be called before prepending the padding
+        text = text.substring(pos).trim();
+        pos = findWrapPos(padding + text, width, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
-
+            sb.append(padding).append(text);
             return sb;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // update the text for the next iteration
+        text = text.substring(pos);
     }
 }
\ No newline at end of file
