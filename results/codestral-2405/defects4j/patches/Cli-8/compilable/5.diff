diff --git a/tmp/54f09e96-07b3-43a0-bc71-4d6f2fff9a2f_buggy.java b/tmp/b30650f2-fb11-4c81-b192-7bc950f93afc_fixed.java
index 8e93a5e..60b0b7d 100644
--- a/tmp/54f09e96-07b3-43a0-bc71-4d6f2fff9a2f_buggy.java
+++ b/tmp/b30650f2-fb11-4c81-b192-7bc950f93afc_fixed.java
@@ -1,43 +1,31 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
-    {
-        int pos = findWrapPos(text, width, 0);
+                                         int nextLineTabStop, String text) {
+    int offset = 0;
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
+    while (text.length() > offset) {
+        int pos = findWrapPos(text, width, offset);
+
+        if (pos == -1) {
+            sb.append(rtrim(text.substring(offset)));
 
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+        if (pos == offset) {
+            ++pos; // ensure we make some progress
+        }
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+        sb.append(rtrim(text.substring(offset, pos)));
 
-            if (pos == -1)
-            {
-                sb.append(text);
+        if (text.length() > pos) {
+            sb.append(defaultNewLine);
 
-                return sb;
+            if (offset == 0 && nextLineTabStop > 0) { // only first line
+                sb.append(createPadding(nextLineTabStop));
+                offset = nextLineTabStop; // add padding offset
             }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
+
+    return sb;
+}
\ No newline at end of file
