diff --git a/tmp/db5b3231-4683-4919-b6f1-50c24de4c22f_buggy.java b/tmp/a3de0791-e24d-49a5-9822-f0fe5e8ba0bf_fixed.java
index 2d9cf24..2f15dc6 100644
--- a/tmp/db5b3231-4683-4919-b6f1-50c24de4c22f_buggy.java
+++ b/tmp/a3de0791-e24d-49a5-9822-f0fe5e8ba0bf_fixed.java
@@ -1,33 +1,36 @@
-    public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
-    {
+public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {
     // There are certain nasty classes that could cause problems, mostly
     // via default typing -- catch them here.
     final Class<?> raw = type.getRawClass();
     String full = raw.getName();
 
-        main_check:
     do {
         if (_cfgIllegalClassNames.contains(full)) {
             break;
         }
 
-            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
-            //    for some Spring framework types
-            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
-            if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+        // 18-Dec-2017: As per [databind#1855], need bit more sophisticated handling
+        //    for some Spring framework types.
+        // Also, it only applies to classes, not interfaces.
+        if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {
+            Class<?> cls = raw;
+            while (cls != Object.class) {
                 String name = cls.getSimpleName();
-                    // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
-                    if ("AbstractPointcutAdvisor".equals(name)
-                            // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
-                            || "AbstractApplicationContext".equals(name)) {
-                        break main_check;
+                // If we find one of these problematic types, break the loop.
+                if ("AbstractPointcutAdvisor".equals(name) || "AbstractApplicationContext".equals(name)) {
+                    break;
                 }
+                cls = cls.getSuperclass(); // Move to the superclass for the next iteration.
             }
+            if (cls != Object.class) {
+                break;
             }
+        }
+
+        // If we have not broken the loop by now, the type is valid, return.
         return;
     } while (false);
 
     throw JsonMappingException.from(ctxt,
             String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
 }
\ No newline at end of file
