diff --git a/tmp/540e6c31-54b7-4359-a7b5-f5ce18773d74_buggy.java b/tmp/ec8bc86f-93e9-4551-bd46-408cec096ac4_fixed.java
index 2d9cf24..41fecd1 100644
--- a/tmp/540e6c31-54b7-4359-a7b5-f5ce18773d74_buggy.java
+++ b/tmp/ec8bc86f-93e9-4551-bd46-408cec096ac4_fixed.java
@@ -1,33 +1,32 @@
 public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
 {
-        // There are certain nasty classes that could cause problems, mostly
-        // via default typing -- catch them here.
     final Class<?> raw = type.getRawClass();
+    if (raw == null)
+    {
+        return;
+    }
+
     String full = raw.getName();
 
-        main_check:
-        do {
-            if (_cfgIllegalClassNames.contains(full)) {
-                break;
+    if (_cfgIllegalClassNames.contains(full))
+    {
+        throwJsonMappingException(ctxt, full);
     }
 
-            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
-            //    for some Spring framework types
-            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
-            if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+    if (full.startsWith(PREFIX_STRING))
+    {
+        for (Class<?> cls = raw; cls != null; cls = cls.getSuperclass())
+        {
             String name = cls.getSimpleName();
-                    // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
-                    if ("AbstractPointcutAdvisor".equals(name)
-                            // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
-                            || "AbstractApplicationContext".equals(name)) {
-                        break main_check;
+            if ("AbstractPointcutAdvisor".equals(name) || "AbstractApplicationContext".equals(name))
+            {
+                throwJsonMappingException(ctxt, full);
+            }
         }
     }
 }
-            return;
-        } while (false);
 
-        throw JsonMappingException.from(ctxt,
-                String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
+private void throwJsonMappingException(DeserializationContext ctxt, String full) throws JsonMappingException
+{
+    throw JsonMappingException.from(ctxt, String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
 }
\ No newline at end of file
