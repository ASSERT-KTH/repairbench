diff --git a/tmp/3b0871d1-28c4-48a4-a1e9-c159572c441d_buggy.java b/tmp/bedfc346-1f29-47e2-905f-823af2cc6f15_fixed.java
index 227a4ef..6eb115e 100644
--- a/tmp/3b0871d1-28c4-48a4-a1e9-c159572c441d_buggy.java
+++ b/tmp/bedfc346-1f29-47e2-905f-823af2cc6f15_fixed.java
@@ -1,48 +1,22 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
-    {
+                int nextLineTabStop, String text) {
+
+    while (text.length() > 0) {
         int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
+        if (pos == -1) {
+            pos = text.length();
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = text.substring(pos).trim();
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
+        if (text.length() <= width - nextLineTabStop) {
             sb.append(text);
+            break;
+        } else {
+            final String padding = createPadding(nextLineTabStop);
+            text = padding + text;
+        }
+    }
 
     return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
 }
\ No newline at end of file
