diff --git a/tmp/db87470d-c504-4343-b2d0-2d97d47095ff_buggy.java b/tmp/98df1e66-a231-495c-b269-c9c26970388c_fixed.java
index 227a4ef..cb29f60 100644
--- a/tmp/db87470d-c504-4343-b2d0-2d97d47095ff_buggy.java
+++ b/tmp/98df1e66-a231-495c-b269-c9c26970388c_fixed.java
@@ -1,48 +1,30 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
     int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
+    int lastPos = 0;
+    while (pos < text.length()) {
+        text = text.substring(pos).trim();
+        pos = findWrapPos(padding + text, width, 0);
 
+        if (pos == -1) {
+            sb.append(padding).append(text);
             return sb;
-            } else
-            if (pos == lastPos)
-            {
+        }
+        else if (pos == lastPos) {
             throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        pos += lastPos + 1; // considering padding length for next round calculation
+        lastPos = pos;
     }
+    return sb;
 }
\ No newline at end of file
