diff --git a/tmp/9efb4fef-1090-474b-a0aa-5348fb894215_buggy.java b/tmp/568af847-1784-4b51-8b49-b70889ea5e7a_fixed.java
index 227a4ef..c9d5aa3 100644
--- a/tmp/9efb4fef-1090-474b-a0aa-5348fb894215_buggy.java
+++ b/tmp/568af847-1784-4b51-8b49-b70889ea5e7a_fixed.java
@@ -1,48 +1,50 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                         int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        String tmpText = text.substring(pos);
+        int trimStartIndex = 0;
+        int trimEndIndex = tmpText.length();
+
+        // Find the start of non-whitespace characters.
+        while(trimStartIndex < tmpText.length() && Character.isWhitespace(tmpText.charAt(trimStartIndex))) {
+            trimStartIndex++;
+        }
+
+        // Find the end of non-whitespace characters.
+        while(trimEndIndex > trimStartIndex && Character.isWhitespace(tmpText.charAt(trimEndIndex - 1))) {
+            trimEndIndex--;
+        }
+
+        tmpText = tmpText.substring(trimStartIndex, trimEndIndex);
+        pos = findWrapPos(padding + tmpText, width, 0) - nextLineTabStop;
 
         if (pos == -1)
         {
-                sb.append(text);
+            sb.append(padding).append(tmpText);
 
             return sb;
-            } else
-            if (pos == lastPos)
+        } else if (pos == lastPos)
         {
             throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(padding).append(rtrim(tmpText.substring(0, pos))).append(defaultNewLine);
+        text = tmpText.substring(pos);
     }
 }
\ No newline at end of file
