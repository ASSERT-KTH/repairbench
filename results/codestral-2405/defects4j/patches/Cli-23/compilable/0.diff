diff --git a/tmp/18580f49-eb48-46ca-bcb8-50ec90d26c02_buggy.java b/tmp/0cfde009-e2d8-476f-ad04-3a5fa76a2297_fixed.java
index 227a4ef..5ec0aee 100644
--- a/tmp/18580f49-eb48-46ca-bcb8-50ec90d26c02_buggy.java
+++ b/tmp/0cfde009-e2d8-476f-ad04-3a5fa76a2297_fixed.java
@@ -1,48 +1,34 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        text = text.substring(pos).trim();
+        pos = findWrapPos(text, width - nextLineTabStop, nextLineTabStop);
 
         if (pos == -1)
         {
+            text = createPadding(nextLineTabStop) + text;
             sb.append(text);
-
             return sb;
-            } else
-            if (pos == lastPos)
+        }
+        else if (pos == lastPos)
         {
             throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
         }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        else
+        {
+            text = createPadding(nextLineTabStop) + text;
+        }
     }
 }
\ No newline at end of file
