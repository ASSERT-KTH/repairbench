diff --git a/tmp/9df6ee88-2106-40d7-bc76-ea97f1d7551b_buggy.java b/tmp/d16bf88a-83da-4a4e-9fe4-c854f43707a6_fixed.java
index be2af16..bac9850 100644
--- a/tmp/9df6ee88-2106-40d7-bc76-ea97f1d7551b_buggy.java
+++ b/tmp/d16bf88a-83da-4a4e-9fe4-c854f43707a6_fixed.java
@@ -1,29 +1,27 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
+    // Try Julian first.
+    long instant = iJulianChronology.getDateTimeMillis
+        (year, monthOfYear, dayOfMonth,
+         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    if (instant >= iCutoverMillis || (instant < 0 && year >= 1582)) {
+        // If it's out of range, try Gregorian.
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+        if (instant < iCutoverMillis) { // It's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
     return instant;
 }
\ No newline at end of file
