diff --git a/tmp/7c749572-efdf-4dc4-996b-5a355b9e0dcb_buggy.java b/tmp/abacc35c-9fd6-4f0d-8258-5fdd996ef179_fixed.java
index be2af16..bddd770 100644
--- a/tmp/7c749572-efdf-4dc4-996b-5a355b9e0dcb_buggy.java
+++ b/tmp/abacc35c-9fd6-4f0d-8258-5fdd996ef179_fixed.java
@@ -1,29 +1,25 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
+    // Always use Gregorian for years on or after the cutover
+    if (year >= iCutoverYearJulianToGregorian) {
+        return iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // For years before the cutover, try Julian first
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
     instant = iJulianChronology.getDateTimeMillis
         (year, monthOfYear, dayOfMonth,
          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+    if (instant < iCutoverMillis) {
+        // If the Julian date is not a valid Gregorian date, throw an exception
         throw new IllegalArgumentException("Specified date does not exist");
     }
-        }
+
+    // If the Julian date is a valid Gregorian date, return it
     return instant;
 }
\ No newline at end of file
