diff --git a/tmp/237d7c03-9585-40ae-a9e7-f1357e089182_buggy.java b/tmp/814e29d3-7b17-4719-b24f-a564d68f1602_fixed.java
index d64eec3..426a16b 100644
--- a/tmp/237d7c03-9585-40ae-a9e7-f1357e089182_buggy.java
+++ b/tmp/814e29d3-7b17-4719-b24f-a564d68f1602_fixed.java
@@ -1,122 +1,69 @@
-    /**
-     * Draws the axis label.
-     *
-     * @param label  the label text.
-     * @param g2  the graphics device.
-     * @param plotArea  the plot area.
-     * @param dataArea  the area inside the axes.
-     * @param edge  the location of the axis.
-     * @param state  the axis state (<code>null</code> not permitted).
-     * @param plotState  the plot state (<code>null</code> permitted).
-     *
-     * @return Information about the axis.
-     */
-    protected AxisState drawLabel(String label, Graphics2D g2, 
-            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, 
-            AxisState state, PlotRenderingInfo plotState) {
-
-        // it is unlikely that 'state' will be null, but check anyway...
+protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {
     if (state == null) {
         throw new IllegalArgumentException("Null 'state' argument.");
     }
 
     if ((label == null) || (label.equals(""))) {
         return state;
     }
 
     Font font = getLabelFont();
     RectangleInsets insets = getLabelInsets();
     g2.setFont(font);
     g2.setPaint(getLabelPaint());
     FontMetrics fm = g2.getFontMetrics();
     Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
-        Shape hotspot = null;
+
+    if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {
+        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());
+        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
+        labelBounds = rotatedLabelBounds.getBounds2D();
+        float w = (float) labelBounds.getWidth();
+        float h = (float) labelBounds.getHeight();
+        float labelx = (float) dataArea.getCenterX();
+        float labely = (edge == RectangleEdge.TOP) ? (float) (state.getCursor() - insets.getBottom() - h / 2.0) : (float) (state.getCursor() + insets.getTop() + h / 2.0);
+        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
+
+        if (plotState != null) {
+            addLabelEntity(plotState, labelx, labely, w, h);
+        }
 
         if (edge == RectangleEdge.TOP) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() - insets.getBottom() 
-                    - h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorUp(insets.getTop() + labelBounds.getHeight() 
-                    + insets.getBottom());
-        }
-        else if (edge == RectangleEdge.BOTTOM) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle(), labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) dataArea.getCenterX();
-            float labely = (float) (state.getCursor() + insets.getTop() 
-                    + h / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorDown(insets.getTop() + labelBounds.getHeight() 
-                    + insets.getBottom());
+            state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());
+        } else {
+            state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());
         }
-        else if (edge == RectangleEdge.LEFT) {
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), 
-                    labelBounds.getCenterY());
+    } else if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {
+        AffineTransform t = AffineTransform.getRotateInstance(edge == RectangleEdge.LEFT ? getLabelAngle() - Math.PI / 2.0 : getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());
         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
         labelBounds = rotatedLabelBounds.getBounds2D();
         float w = (float) labelBounds.getWidth();
         float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() - insets.getRight() 
-                    - w / 2.0);
+        float labelx = (edge == RectangleEdge.LEFT) ? (float) (state.getCursor() - insets.getRight() - w / 2.0) : (float) (state.getCursor() + insets.getLeft() + w / 2.0);
         float labely = (float) dataArea.getCenterY();
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() 
-                    + insets.getRight());
+        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, edge == RectangleEdge.LEFT ? getLabelAngle() - Math.PI / 2.0 : getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);
+
+        if (plotState != null) {
+            addLabelEntity(plotState, labelx, labely, w, h);
         }
-        else if (edge == RectangleEdge.RIGHT) {
 
-            AffineTransform t = AffineTransform.getRotateInstance(
-                    getLabelAngle() + Math.PI / 2.0, 
-                    labelBounds.getCenterX(), labelBounds.getCenterY());
-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-            labelBounds = rotatedLabelBounds.getBounds2D();
-            float w = (float) labelBounds.getWidth();
-            float h = (float) labelBounds.getHeight();
-            float labelx = (float) (state.getCursor() 
-                            + insets.getLeft() + w / 2.0);
-            float labely = (float) (dataArea.getY() + dataArea.getHeight() 
-                    / 2.0);
-            TextUtilities.drawRotatedString(label, g2, labelx, labely, 
-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, 
-                    TextAnchor.CENTER);
-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, 
-                    labely - h / 2.0f, w, h);
-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() 
-                    + insets.getRight());
+        if (edge == RectangleEdge.LEFT) {
+            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());
+        } else {
+            state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());
+        }
+    }
 
+    return state;
 }
-        if (plotState != null && hotspot != null) {
+
+private void addLabelEntity(PlotRenderingInfo plotState, float labelx, float labely, float w, float h) {
     ChartRenderingInfo owner = plotState.getOwner();
+    if (owner != null) {
         EntityCollection entities = owner.getEntityCollection();
         if (entities != null) {
-                    entities.add(new AxisLabelEntity(this, hotspot, 
-                            this.labelToolTip, this.labelURL));
+            Shape hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);
+            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));
         }
     }
-        return state;
-
 }
\ No newline at end of file
