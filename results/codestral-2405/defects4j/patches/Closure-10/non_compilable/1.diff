diff --git a/tmp/5b3e0832-5ad5-46e1-aab7-be20c30c3b81_buggy.java b/tmp/d0e90ede-e8a7-4ea2-8508-2aa750606fbf_fixed.java
index 6fecc90..7fdb543 100644
--- a/tmp/5b3e0832-5ad5-46e1-aab7-be20c30c3b81_buggy.java
+++ b/tmp/d0e90ede-e8a7-4ea2-8508-2aa750606fbf_fixed.java
@@ -1,7 +1,27 @@
-  static boolean mayBeString(Node n, boolean recurse) {
+  static boolean mayBeString(Node node, boolean recurse) {
     if (recurse) {
-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
+      // Check if all child nodes match the MAY_BE_STRING_PREDICATE
+      for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {
+        if (!MAY_BE_STRING_PREDICATE.apply(child)) {
+          return false;
+        }
+      }
+      return true;
     } else {
-      return mayBeStringHelper(n);
+      return mayBeStringHelper(node);
+    }
+  }
+
+  // Elementary conditional and ternary expression checks for string
+  private static boolean mayBeStringHelper(Node node) {
+    switch (node.getType()) {
+      case Token.STRING:
+        return true;
+      case Token.COND_EXPR:
+        return mayBeString(node.getFirstChild(), false) || mayBeString(node.getSecondChild(), false);
+      case Token.HOOK: // TERNARY_EXPR
+        return mayBeString(node.getFirstChild().getNext(), false) && mayBeString(node.getSecondChild(), false);
+      default:
+        return false;
     }
   }
\ No newline at end of file
