diff --git a/tmp/bbca798c-1ba2-4d8f-93b8-f2945cfea012_buggy.java b/tmp/cbb633fc-00e1-4572-b491-647fee4bf331_fixed.java
index ae9ef3f..54d95a3 100644
--- a/tmp/bbca798c-1ba2-4d8f-93b8-f2945cfea012_buggy.java
+++ b/tmp/cbb633fc-00e1-4572-b491-647fee4bf331_fixed.java
@@ -1,158 +1,125 @@
 /**
  * Parses the externs and main inputs.
  *
  * @return A synthetic root node whose two children are the externs root
  *     and the main root
  */
 Node parseInputs() {
   boolean devMode = options.devMode != DevMode.OFF;
 
   // If old roots exist (we are parsing a second time), detach each of the
   // individual file parse trees.
   if (externsRoot != null) {
     externsRoot.detachChildren();
   }
   if (jsRoot != null) {
     jsRoot.detachChildren();
   }
 
   // Parse main js sources.
   jsRoot = IR.block();
   jsRoot.setIsSyntheticBlock(true);
 
   externsRoot = IR.block();
   externsRoot.setIsSyntheticBlock(true);
 
   externAndJsRoot = IR.block(externsRoot, jsRoot);
   externAndJsRoot.setIsSyntheticBlock(true);
 
   if (options.tracer.isOn()) {
     tracker = new PerformanceTracker(jsRoot, options.tracer);
     addChangeHandler(tracker.getCodeChangeHandler());
   }
 
   Tracer tracer = newTracer("parseInputs");
 
   try {
     // Parse externs sources.
     for (CompilerInput input : externs) {
       Node n = input.getAstRoot(this);
       if (hasErrors()) {
         return null;
       }
       externsRoot.addChildToBack(n);
     }
 
-      // Modules inferred in ProcessCommonJS pass.
     if (options.transformAMDToCJSModules || options.processCommonJSModules) {
       processAMDAndCommonJSModules();
     }
 
-      // Check if inputs need to be rebuilt from modules.
     boolean staleInputs = false;
 
-      // Check if the sources need to be re-ordered.
-      if (options.dependencyOptions.needsManagement() &&
-          !options.skipAllPasses &&
-          options.closurePass) {
+    if (options.dependencyOptions.needsManagement() && !options.skipAllPasses && options.closurePass) {
       for (CompilerInput input : inputs) {
-          // Forward-declare all the provided types, so that they
-          // are not flagged even if they are dropped from the process.
         for (String provide : input.getProvides()) {
           getTypeRegistry().forwardDeclareType(provide);
         }
       }
 
-        try {
-          inputs =
-              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
-              .manageDependencies(options.dependencyOptions, inputs);
+      inputs = manageDependencies();
       staleInputs = true;
-        } catch (CircularDependencyException e) {
-          report(JSError.make(
-              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
-          if (hasErrors()) {
-            return null;
-          }
-        } catch (MissingProvideException e) {
-          report(JSError.make(
-              MISSING_ENTRY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
-          if (hasErrors()) {
-            return null;
-          }
-        }
     }
 
     for (CompilerInput input : inputs) {
       Node n = input.getAstRoot(this);
 
-        // Inputs can have a null AST during initial parse.
-        if (n == null) {
+      if (n == null || n.getJSDocInfo() == null) {
         continue;
       }
 
-        if (n.getJSDocInfo() != null) {
-          JSDocInfo info = n.getJSDocInfo();
-          if (info.isExterns()) {
-            // If the input file is explicitly marked as an externs file, then
-            // assume the programmer made a mistake and throw it into
-            // the externs pile anyways.
+      if (n.getJSDocInfo().isExterns()) {
         externsRoot.addChildToBack(n);
         input.setIsExtern(true);
-
         input.getModule().remove(input);
-
         externs.add(input);
         staleInputs = true;
-          } else if (info.isNoCompile()) {
+      } else if (n.getJSDocInfo().isNoCompile()) {
         input.getModule().remove(input);
         staleInputs = true;
-          }
-        }
-      }
-
-      if (staleInputs) {
-        fillEmptyModules(modules);
-        rebuildInputsFromModules();
-      }
-
-      // Build the AST.
-      for (CompilerInput input : inputs) {
-        Node n = input.getAstRoot(this);
-        if (n == null) {
-          continue;
-        }
+      } else {
+        jsRoot.addChildToBack(n);
 
         if (devMode) {
           runSanityCheck();
           if (hasErrors()) {
             return null;
           }
         }
 
-        if (options.sourceMapOutputPath != null ||
-            options.nameReferenceReportPath != null) {
-
-          // Annotate the nodes in the tree with information from the
-          // input file. This information is used to construct the SourceMap.
-          SourceInformationAnnotator sia =
-              new SourceInformationAnnotator(
-                  input.getName(), options.devMode != DevMode.OFF);
+        if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null) {
+          SourceInformationAnnotator sia = new SourceInformationAnnotator(input.getName(), options.devMode != DevMode.OFF);
           NodeTraversal.traverse(this, n, sia);
         }
+      }
+    }
 
-        jsRoot.addChildToBack(n);
+    if (staleInputs) {
+      fillEmptyModules(modules);
+      rebuildInputsFromModules();
     }
 
     if (hasErrors()) {
       return null;
     }
     return externAndJsRoot;
   } finally {
     stopTracer(tracer, "parseInputs");
   }
 }
+
+private CompilerOptions.DependencyOptionsManagedOption manageDependencies() {
+  try {
+    JSModuleGraph moduleGraph = this.moduleGraph == null ? new JSModuleGraph(modules) : this.moduleGraph;
+    return moduleGraph.manageDependencies(options.dependencyOptions, inputs);
+  } catch (CircularDependencyException e) {
+    report(JSError.make(JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
+  } catch (MissingProvideException e) {
+    report(JSError.make(MISSING_ENTRY_ERROR, e.getMessage()));
+  }
+
+  if (hasErrors()) {
+    throw new RuntimeException("There were errors while managing dependencies.");
+  }
+
+  return null;
+}
\ No newline at end of file
