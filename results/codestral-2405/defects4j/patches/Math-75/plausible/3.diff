diff --git a/tmp/fbddbb18-83b3-4632-b5e1-7f0b8e0fedbe_buggy.java b/tmp/86c4cd16-6284-4c87-be83-a578698785e9_fixed.java
index 877a1a1..3a26c93 100644
--- a/tmp/fbddbb18-83b3-4632-b5e1-7f0b8e0fedbe_buggy.java
+++ b/tmp/86c4cd16-6284-4c87-be83-a578698785e9_fixed.java
@@ -1,14 +1,21 @@
-    /**
-      * Returns the percentage of values that are equal to v
-     * (as a proportion between 0 and 1).
-     * <p>
-     * Returns <code>Double.NaN</code> if no values have been added.</p>
-     *
-     * @param v the value to lookup
-     * @return the proportion of values equal to v
-     * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
-     */
-    @Deprecated
 public double getPct(Object v) {
-        return getCumPct((Comparable<?>) v);
+    if (v instanceof Comparable) {
+        return getCumPct((Comparable<?>) v) - getCumPct(decrement((Comparable<?>) v));
+    } else {
+        throw new IllegalArgumentException("Input object is not Comparable");
+    }
+}
+
+private Comparable<?> decrement(Comparable<?> v) {
+    if (v instanceof Integer) {
+        return ((Integer) v) - 1;
+    } else if (v instanceof Long) {
+        return ((Long) v) - 1;
+    } else if (v instanceof Double) {
+        return ((Double) v) - 1;
+    } else if (v instanceof Float) {
+        return ((Float) v) - 1;
+    } else {
+        throw new IllegalArgumentException("Unsupported type for decrement");
+    }
 }
\ No newline at end of file
