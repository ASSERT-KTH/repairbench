diff --git a/tmp/7549715d-0137-4a03-8665-c1c6352286fe_buggy.java b/tmp/99f97b62-7102-4bd4-8abf-3fb03a2e615d_fixed.java
index 877a1a1..486e66a 100644
--- a/tmp/7549715d-0137-4a03-8665-c1c6352286fe_buggy.java
+++ b/tmp/99f97b62-7102-4bd4-8abf-3fb03a2e615d_fixed.java
@@ -1,14 +1,15 @@
-    /**
-      * Returns the percentage of values that are equal to v
-     * (as a proportion between 0 and 1).
-     * <p>
-     * Returns <code>Double.NaN</code> if no values have been added.</p>
-     *
-     * @param v the value to lookup
-     * @return the proportion of values equal to v
-     * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
-     */
 @Deprecated
 public double getPct(Object v) {
-        return getCumPct((Comparable<?>) v);
+    if (v instanceof Comparable) {
+        return getCumPct((Comparable<?>) v) - getCumPctPrevious((Comparable<?>) v);
+    } else {
+        throw new IllegalArgumentException("The provided value must be comparable");
+    }
+}
+
+private double getCumPctPrevious(Comparable<?> v) {
+    Map<Comparable<?>, Long> freqMap = this.getData();
+    SortedMap<Comparable<?>, Long> headMap = freqMap.headMap(v);
+    long count = headMap.values().stream().mapToLong(Long::longValue).sum();
+    return (double) count / this.getSumFreq();
 }
\ No newline at end of file
