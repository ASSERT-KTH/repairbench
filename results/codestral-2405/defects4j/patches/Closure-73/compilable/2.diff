diff --git a/tmp/42804100-dd15-4b45-a331-7373ad9b3739_buggy.java b/tmp/ab497cc7-2846-4f8a-9ae3-0eded6f2171f_fixed.java
index 98f719c..f30e599 100644
--- a/tmp/42804100-dd15-4b45-a331-7373ad9b3739_buggy.java
+++ b/tmp/ab497cc7-2846-4f8a-9ae3-0eded6f2171f_fixed.java
@@ -1,72 +1,88 @@
 /** Helper to escape javascript string as well as regular expression */
 static String strEscape(String s, char quote,
                         String doublequoteEscape,
                         String singlequoteEscape,
                         String backslashEscape,
                         CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
-    for (int i = 0; i < s.length(); i++) {
+    int i = 0;
+    while (i < s.length()) {
         char c = s.charAt(i);
+        if (c == '\\' && i + 1 < s.length()) {
+            i++;
+            char nextChar = s.charAt(i);
+            if (nextChar == 'x') {
+                if (i + 4 < s.length() && isValidHex(s.substring(i + 1, i + 5))) {
+                    int code = Integer.parseInt(s.substring(i + 1, i + 5), 16);
+                    c = (char) code;
+                    i += 4;
+                }
+            } else if (isValidHex(String.valueOf(nextChar))) {
+                if (i + 1 < s.length() && isValidHex(s.substring(i, i + 2))) {
+                    int code = Integer.parseInt(s.substring(i, i + 2), 16);
+                    c = (char) code;
+                    i += 1;
+                }
+            }
+        }
         switch (c) {
             case '\0': sb.append("\\0"); break;
             case '\n': sb.append("\\n"); break;
             case '\r': sb.append("\\r"); break;
             case '\t': sb.append("\\t"); break;
             case '\\': sb.append(backslashEscape); break;
             case '\"': sb.append(doublequoteEscape); break;
             case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
+            case '>':
                 if (i >= 2 &&
                         ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
                                 (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
                     sb.append("\\>");
                 } else {
                     sb.append(c);
                 }
                 break;
             case '<':
-          // Break </script into <\/script
                 final String END_SCRIPT = "/script";
-
-          // Break <!-- into <\!--
                 final String START_COMMENT = "!--";
-
                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
                         END_SCRIPT.length())) {
                     sb.append("<\\");
                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                         START_COMMENT.length())) {
                     sb.append("<\\");
                 } else {
                     sb.append(c);
                 }
                 break;
             default:
-          // If we're given an outputCharsetEncoder, then check if the
-          //  character can be represented in this character set.
                 if (outputCharsetEncoder != null) {
                     if (outputCharsetEncoder.canEncode(c)) {
                         sb.append(c);
                     } else {
-              // Unicode-escape the character.
                         appendHexJavaScriptRepresentation(sb, c);
                     }
                 } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
                     if (c > 0x1f && c <= 0x7f) {
                         sb.append(c);
                     } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
                         appendHexJavaScriptRepresentation(sb, c);
                     }
                 }
         }
+        i++;
     }
     sb.append(quote);
     return sb.toString();
 }
+
+// A helper method to check if a string is a valid hexadecimal number
+private static boolean isValidHex(String s) {
+    try {
+        Integer.parseInt(s, 16);
+        return true;
+    } catch (NumberFormatException e) {
+        return false;
+    }
+}
\ No newline at end of file
