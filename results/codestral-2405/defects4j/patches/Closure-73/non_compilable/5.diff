diff --git a/tmp/7b6caad9-b6df-4201-9b4a-b27f77c36232_buggy.java b/tmp/f3d481b1-da03-4b99-89fd-e149476cbdbf_fixed.java
index 98f719c..f60da1b 100644
--- a/tmp/7b6caad9-b6df-4201-9b4a-b27f77c36232_buggy.java
+++ b/tmp/f3d481b1-da03-4b99-89fd-e149476cbdbf_fixed.java
@@ -1,72 +1,80 @@
-  /** Helper to escape javascript string as well as regular expression */
 static String strEscape(String s, char quote,
     String doublequoteEscape,
     String singlequoteEscape,
     String backslashEscape,
     CharsetEncoder outputCharsetEncoder) {
   StringBuilder sb = new StringBuilder(s.length() + 2);
   sb.append(quote);
   for (int i = 0; i < s.length(); i++) {
     char c = s.charAt(i);
     switch (c) {
       case '\0': sb.append("\\0"); break;
       case '\n': sb.append("\\n"); break;
       case '\r': sb.append("\\r"); break;
       case '\t': sb.append("\\t"); break;
-        case '\\': sb.append(backslashEscape); break;
+      case '\\':
+        if (i + 1 < s.length()) {
+          if (s.charAt(i + 1) == 'x') {
+            sb.append("\\x");   // preserve "\x" as-is
+            i += 1;             // skip 'x'
+            c = (char) Integer.parseInt(s.substring(i + 1, i + 3), 16);
+            i += 2;             // skip two hex digits
+            // Unicode-escape the character if needed based on outputCharsetEncoder
+            handleUnicodeEscape(sb, c, outputCharsetEncoder);
+          } else {
+            sb.append(backslashEscape);
+          }
+        } else {
+          sb.append(backslashEscape);
+        }
+        break;
       case '\"': sb.append(doublequoteEscape); break;
       case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
+      case '>':
         if (i >= 2 &&
             ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
              (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
           sb.append("\\>");
         } else {
           sb.append(c);
         }
         break;
       case '<':
-          // Break </script into <\/script
         final String END_SCRIPT = "/script";
-
-          // Break <!-- into <\!--
         final String START_COMMENT = "!--";
 
-          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
+        if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
           sb.append("<\\");
-          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
+        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
           sb.append("<\\");
         } else {
           sb.append(c);
         }
         break;
       default:
-          // If we're given an outputCharsetEncoder, then check if the
-          //  character can be represented in this character set.
+        handleUnicodeEscape(sb, c, outputCharsetEncoder);
+    }
+  }
+  sb.append(quote);
+  return sb.toString();
+}
+
+private static void handleUnicodeEscape(StringBuilder sb, char c, CharsetEncoder outputCharsetEncoder) {
   if (outputCharsetEncoder != null) {
     if (outputCharsetEncoder.canEncode(c)) {
       sb.append(c);
     } else {
-              // Unicode-escape the character.
       appendHexJavaScriptRepresentation(sb, c);
     }
   } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
-            if (c > 0x1f && c <= 0x7f) {
+    if (c >= 0x20 && c <= 0x7E) {
       sb.append(c);
     } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
       appendHexJavaScriptRepresentation(sb, c);
     }
   }
 }
-    }
-    sb.append(quote);
-    return sb.toString();
+
+private static void appendHexJavaScriptRepresentation(StringBuilder sb, char c) {
+  sb.append(String.format("\\u%04x", (int) c));
 }
\ No newline at end of file
