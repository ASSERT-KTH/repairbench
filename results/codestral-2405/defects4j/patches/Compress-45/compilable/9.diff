diff --git a/tmp/174333cb-a644-416d-996b-27d78fe6497d_buggy.java b/tmp/00fc5ef0-42ac-4004-9f03-aad710bcf729_fixed.java
index 1bbc082..860b20c 100644
--- a/tmp/174333cb-a644-416d-996b-27d78fe6497d_buggy.java
+++ b/tmp/00fc5ef0-42ac-4004-9f03-aad710bcf729_fixed.java
@@ -1,36 +1,20 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
-    public static int formatLongOctalOrBinaryBytes(
-        final long value, final byte[] buf, final int offset, final int length) {
-
-        // Check whether we are dealing with UID/GID or SIZE field
+public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {
     final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
     if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+    if (length < 9 || (negative && length < 10)) {
+        throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
     }
-        formatBigIntegerBinary(value, buf, offset, length, negative);
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+    if (negative) {
+        formatBigIntegerBinary(value & Long.MAX_VALUE, buf, offset, length - 1, true);
+        buf[offset + length - 1] = (byte) (buf[offset + length - 1] | 0x80);
+    } else {
+        formatBigIntegerBinary(value, buf, offset, length, false);
+    }
     return offset + length;
 }
\ No newline at end of file
