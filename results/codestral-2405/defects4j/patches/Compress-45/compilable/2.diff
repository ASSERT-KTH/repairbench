diff --git a/tmp/ecec3957-22f4-45b4-9d17-4d27d0efede3_buggy.java b/tmp/5580681e-abd0-4d78-9a58-59f3e5847d30_fixed.java
index 1bbc082..3e1ee34 100644
--- a/tmp/ecec3957-22f4-45b4-9d17-4d27d0efede3_buggy.java
+++ b/tmp/5580681e-abd0-4d78-9a58-59f3e5847d30_fixed.java
@@ -1,36 +1,24 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
-    public static int formatLongOctalOrBinaryBytes(
-        final long value, final byte[] buf, final int offset, final int length) {
-
+public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {
     // Check whether we are dealing with UID/GID or SIZE field
     final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
+
+    // If the value is negative and we cannot store it as a long byte, we need to throw an exception
+    if (negative && length < 9) {
+        throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
+    }
+
     if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
     if (length < 9) {
         formatLongBinary(value, buf, offset, length, negative);
-        }
+    } else {
         formatBigIntegerBinary(value, buf, offset, length, negative);
+    }
 
     buf[offset] = (byte) (negative ? 0xff : 0x80);
     return offset + length;
 }
\ No newline at end of file
