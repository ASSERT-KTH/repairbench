diff --git a/tmp/b795859d-a5f3-4f51-86db-78930103f2f9_buggy.java b/tmp/7cbe9c89-e08f-44fd-8d1b-558417cad77a_fixed.java
index afcc27c..220e401 100644
--- a/tmp/b795859d-a5f3-4f51-86db-78930103f2f9_buggy.java
+++ b/tmp/7cbe9c89-e08f-44fd-8d1b-558417cad77a_fixed.java
@@ -1,61 +1,53 @@
-    /**
-     * Variant called when creation of the POJO involves buffering of creator properties
-     * as well as property-based creator.
-     */
 public Object complete(JsonParser p, DeserializationContext ctxt,
         PropertyValueBuffer buffer, PropertyBasedCreator creator)
     throws IOException
 {
     // first things first: deserialize all data buffered:
     final int len = _properties.length;
     Object[] values = new Object[len];
+    Object typeIdObj = null;
     for (int i = 0; i < len; ++i) {
         String typeId = _typeIds[i];
         final ExtTypedProperty extProp = _properties[i];
-            if (typeId == null) {
-                // let's allow missing both type and property (may already have been set, too)
         if (_tokens[i] == null) {
             continue;
         }
-                // but not just one
-                // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
-                if (!extProp.hasDefaultType()) {
-                    ctxt.reportInputMismatch(_beanType,
-                            "Missing external type id property '%s'",
-                            extProp.getTypePropertyName());
-                } else {
-                    typeId = extProp.getDefaultTypeId();
-                }
-            } else if (_tokens[i] == null) {
-                SettableBeanProperty prop = extProp.getProperty();
-                ctxt.reportInputMismatch(_beanType,
-                        "Missing property '%s' for external type id '%s'",
-                        prop.getName(), _properties[i].getTypePropertyName());
-            }
         values[i] = _deserialize(p, ctxt, i, typeId);
-
+        if (typeId != null) {
+            typeIdObj = _convertToEnum(ctxt, typeId);
+        } else if (extProp.hasDefaultType()) {
+            typeIdObj = extProp.getDefaultTypeId();
+        }
         final SettableBeanProperty prop = extProp.getProperty();
         // also: if it's creator prop, fill in
         if (prop.getCreatorIndex() >= 0) {
             buffer.assignParameter(prop, values[i]);
-
-                // [databind#999] And maybe there's creator property for type id too?
+            // Assign type ID object to creator property as well
             SettableBeanProperty typeProp = extProp.getTypeProperty();
-                // for now, should only be needed for creator properties, too
             if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
-                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to
-                    //    apply deserializer... fun fun.
-                    buffer.assignParameter(typeProp, typeId);
+                buffer.assignParameter(typeProp, typeIdObj);
             }
         }
     }
     Object bean = creator.build(ctxt, buffer);
     // third: assign non-creator properties
     for (int i = 0; i < len; ++i) {
         SettableBeanProperty prop = _properties[i].getProperty();
         if (prop.getCreatorIndex() < 0) {
             prop.set(bean, values[i]);
         }
     }
     return bean;
 }
+
+// New method to convert typeId to Enum
+private Object _convertToEnum(DeserializationContext ctxt, String typeId) {
+    try {
+        return Enum.valueOf(AnimalType.class, typeId);
+    } catch (IllegalArgumentException e) {
+        ctxt.reportInputMismatch(_beanType,
+                "Invalid Enum value '%s' for external type id '%s'",
+                typeId, _properties[0].getTypePropertyName());
+        return null;
+    }
+}
\ No newline at end of file
