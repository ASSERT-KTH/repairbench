diff --git a/tmp/08416f79-d511-43bb-be2c-ce5b9e38848b_buggy.java b/tmp/4913831e-f293-4ab4-8585-c65c5e5d15bb_fixed.java
index 0313249..c32bb10 100644
--- a/tmp/08416f79-d511-43bb-be2c-ce5b9e38848b_buggy.java
+++ b/tmp/4913831e-f293-4ab4-8585-c65c5e5d15bb_fixed.java
@@ -1,32 +1,26 @@
-    /**
-     * Specialized method for removing specified existing entry.
-     * NOTE: entry MUST exist, otherwise an exception is thrown.
-     */
-    public void remove(SettableBeanProperty propToRm)
-    {
+public void remove(SettableBeanProperty propToRm) {
     ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
-        String key = getPropertyName(propToRm);
+    String key = propToRm.getName();  // change is here, use prop name directly
     boolean found = false;
 
     for (int i = 1, end = _hashArea.length; i < end; i += 2) {
         SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
         if (prop == null) {
             continue;
         }
         if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+            // change is here, use equalsIgnoreCase to handle case-insensitivity
+            found = key.equalsIgnoreCase(prop.getName());
             if (found) {
                 // need to leave a hole here
                 _propsInOrder[_findFromOrdered(prop)] = null;
                 continue;
             }
         }
         props.add(prop);
     }
     if (!found) {
-            throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
+        throw new NoSuchElementException("No entry '"+key+"' found, can't remove");
     }
     init(props);
 }
\ No newline at end of file
