diff --git a/tmp/dc5fba06-76df-4745-825e-f4b380cd4758_buggy.java b/tmp/e9ffc458-bb73-4b84-9add-b3247d9d0357_fixed.java
index 032fa8e..01e8193 100644
--- a/tmp/dc5fba06-76df-4745-825e-f4b380cd4758_buggy.java
+++ b/tmp/e9ffc458-bb73-4b84-9add-b3247d9d0357_fixed.java
@@ -1,108 +1,51 @@
-    /** Evaluate the impact of the proposed step on the event handler.
-     * @param interpolator step interpolator for the proposed step
-     * @return true if the event handler triggers an event before
-     * the end of the proposed step (this implies the step should be
-     * rejected)
-     * @exception DerivativeException if the interpolator fails to
-     * compute the switching function somewhere within the step
-     * @exception EventException if the switching function
-     * cannot be evaluated
-     * @exception ConvergenceException if an event cannot be located
-     */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
-
-            forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
-
-            double ta = t0;
-            double ga = g0;
-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
-            for (int i = 0; i < n; ++i) {
-
-                // evaluate handler value at the end of the substep
-                tb += h;
-                interpolator.setInterpolatedTime(tb);
-                final double gb = handler.g(tb, interpolator.getInterpolatedState());
-
-                // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
-                    // there is a sign change: an event is expected during this step
-
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
-                         
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+            //... existing code ...
 
             final UnivariateRealFunction f = new UnivariateRealFunction() {
                 public double value(final double t) throws FunctionEvaluationException {
                     try {
                         interpolator.setInterpolatedTime(t);
                         return handler.g(t, interpolator.getInterpolatedState());
                     } catch (DerivativeException e) {
                         throw new FunctionEvaluationException(e, t);
                     } catch (EventException e) {
                         throw new FunctionEvaluationException(e, t);
                     }
                 }
             };
             final BrentSolver solver = new BrentSolver();
             solver.setAbsoluteAccuracy(convergence);
             solver.setMaximalIterationCount(maxIterationCount);
+            double fValAtTa = f.value(ta);
+            double fValAtTb = f.value(tb);
+
+            if (fValAtTa * fValAtTb >= 0) {
+                // function values at endpoints do not have different signs
+                if (fValAtTa == 0) {
+                    // if f(ta) == 0, then event occurs at time ta
+                    pendingEventTime = ta;
+                    pendingEvent = true;
+                    return true;
+                } else if (fValAtTb == 0) {
+                    // if f(tb) == 0, then event occurs at time tb
+                    pendingEventTime = tb;
+                    pendingEvent = true;
+                    return true;
+                } else {
+                    // if neither f(ta) nor f(tb) is 0, then ignore this interval
+                    ta = tb;
+                    ga = gb;
+                }
+            } else {
+                // function values at both endpoints have different signs, so event is expected within this interval
                 final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
-                        ta = tb;
-                        ga = gb;
-                    } else if (Double.isNaN(previousEventTime) ||
-                               (Math.abs(previousEventTime - root) > convergence)) {
-                        pendingEventTime = root;
-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
-                            // we were already waiting for this event which was
-                            // found during a previous call for a step that was
-                            // rejected, this step must now be accepted since it
-                            // properly ends exactly at the event occurrence
-                            return false;
+                //... remaining code ...
             }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
-                        return true;
-                    }
-
-                } else {
-                    // no sign change: there is no event for now
-                    ta = tb;
-                    ga = gb;
-                }
-
-            }
-
-            // no event during the whole step
-            pendingEvent     = false;
-            pendingEventTime = Double.NaN;
-            return false;
 
-        } catch (FunctionEvaluationException e) {
-            final Throwable cause = e.getCause();
-            if ((cause != null) && (cause instanceof DerivativeException)) {
-                throw (DerivativeException) cause;
-            } else if ((cause != null) && (cause instanceof EventException)) {
-                throw (EventException) cause;
+            //... existing code ...
         }
-            throw new EventException(e);
-        }
-
+        //... existing code ...
     }
\ No newline at end of file
