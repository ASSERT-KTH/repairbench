diff --git a/tmp/3465d87a-0111-41aa-b5ea-99fa50c7ada4_buggy.java b/tmp/fe732af2-09b7-4492-8375-379a1a092cb2_fixed.java
index 032fa8e..074eb70 100644
--- a/tmp/3465d87a-0111-41aa-b5ea-99fa50c7ada4_buggy.java
+++ b/tmp/fe732af2-09b7-4492-8375-379a1a092cb2_fixed.java
@@ -1,108 +1,92 @@
-    /** Evaluate the impact of the proposed step on the event handler.
-     * @param interpolator step interpolator for the proposed step
-     * @return true if the event handler triggers an event before
-     * the end of the proposed step (this implies the step should be
-     * rejected)
-     * @exception DerivativeException if the interpolator fails to
-     * compute the switching function somewhere within the step
-     * @exception EventException if the switching function
-     * cannot be evaluated
-     * @exception ConvergenceException if an event cannot be located
-     */
 public boolean evaluateStep(final StepInterpolator interpolator)
     throws DerivativeException, EventException, ConvergenceException {
 
     try {
-
         forward = interpolator.isForward();
         final double t1 = interpolator.getCurrentTime();
+        if (Math.abs(t1 - t0) <= convergence) {
+            // No sensible check possible if time interval is too small.
+            return false;
+        }
         final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+        final double h = (interpolator.isForward() ? t1 - t0 : t0 - t1) / n;
 
         double ta = t0;
         double ga = g0;
-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+        double tb = t0 + h;
         for (int i = 0; i < n; ++i) {
-
-                // evaluate handler value at the end of the substep
-                tb += h;
+            // Evaluate handler value at the end of the substep.
             interpolator.setInterpolatedTime(tb);
             final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
-                // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
-                    // there is a sign change: an event is expected during this step
+            // Check events occurrence.
+            if ((ga >= 0 && gb < 0) || (ga < 0 && gb >= 0)) {
+                // There is a sign change: an event is expected during this step.
 
-                        // this is a corner case:
+                // This is a corner case handling:
                 // - there was an event near ta,
-                        // - there is another event between ta and tb
+                // - there might be another event between ta and tb
                 // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
+                // This implies that the real sign of ga is the same as gb,
+                // So we need to slightly shift ta to make sure ga and gb get opposite signs and the solver won't complain about bracketing.
+                if (ga <= 0 && gb <=0 || ga >= 0 && gb >= 0) {
+                    ta = ta + (ga <= gb ? convergence : -convergence);
+                    interpolator.setInterpolatedTime(ta);
+                    ga = handler.g(ta, interpolator.getInterpolatedState());
+                }
 
-                    // variation direction, with respect to the integration direction
+                // Variation direction, with respect to the integration direction.
                 increasing = gb >= ga;
 
                 final UnivariateRealFunction f = new UnivariateRealFunction() {
                     public double value(final double t) throws FunctionEvaluationException {
                         try {
                             interpolator.setInterpolatedTime(t);
                             return handler.g(t, interpolator.getInterpolatedState());
                         } catch (DerivativeException e) {
                             throw new FunctionEvaluationException(e, t);
                         } catch (EventException e) {
                             throw new FunctionEvaluationException(e, t);
                         }
                     }
                 };
                 final BrentSolver solver = new BrentSolver();
                 solver.setAbsoluteAccuracy(convergence);
                 solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+                final double root = solver.solve(f, ta, tb);
                 if ((Math.abs(root - ta) <= convergence) &&
                     (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
-                        ta = tb;
-                        ga = gb;
+                    // We have either found nothing or found (again ?) a past event, we simply ignore it.
                 } else if (Double.isNaN(previousEventTime) ||
                            (Math.abs(previousEventTime - root) > convergence)) {
                     pendingEventTime = root;
                     if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
-                            // we were already waiting for this event which was
-                            // found during a previous call for a step that was
-                            // rejected, this step must now be accepted since it
-                            // properly ends exactly at the event occurrence
+                        // We were already waiting for this event which was found during a previous call for a step that was rejected, this step must now be accepted since it properly ends exactly at the event occurrence.
                         return false;
                     }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
+                    // Either we were not waiting for the event or it has moved in such a way the step cannot be accepted.
                     pendingEvent = true;
                     return true;
                 }
-
-                } else {
-                    // no sign change: there is no event for now
+            }
+            // No sign change: there is no event for now.
             ta = tb;
             ga = gb;
+            tb += h;
         }
-
-            }
-
-            // no event during the whole step
+        // No event during the whole step.
         pendingEvent = false;
         pendingEventTime = Double.NaN;
         return false;
-
     } catch (FunctionEvaluationException e) {
         final Throwable cause = e.getCause();
-            if ((cause != null) && (cause instanceof DerivativeException)) {
+        if (cause != null) {
+            if (cause instanceof DerivativeException) {
                 throw (DerivativeException) cause;
-            } else if ((cause != null) && (cause instanceof EventException)) {
+            } else if (cause instanceof EventException) {
                 throw (EventException) cause;
             }
+        }
         throw new EventException(e);
     }
-
 }
\ No newline at end of file
