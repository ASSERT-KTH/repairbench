diff --git a/tmp/0a2992a2-0b0a-4ae1-a7c5-1ae7eed9c7c1_buggy.java b/tmp/35736fa5-4129-4b9b-80bf-8f1fa12b7d97_fixed.java
index 29a9d2f..f5b0868 100644
--- a/tmp/0a2992a2-0b0a-4ae1-a7c5-1ae7eed9c7c1_buggy.java
+++ b/tmp/35736fa5-4129-4b9b-80bf-8f1fa12b7d97_fixed.java
@@ -1,43 +1,43 @@
 /**
  * Handles a goog.require call.
  */
 private void processRequireCall(NodeTraversal t, Node n, Node parent) {
   Node left = n.getFirstChild();
   Node arg = left.getNext();
   if (verifyLastArgumentIsString(t, left, arg)) {
     String ns = arg.getString();
     ProvidedName provided = providedNames.get(ns);
-      if (provided == null || !provided.isExplicitlyProvided()) {
-        unrecognizedRequires.add(
-            new UnrecognizedRequire(n, ns, t.getSourceName()));
+    if (provided == null) {
+      // If the module is not provided, we check if it's a global module and update the providedNames before proceeding
+      String moduleName = getModuleNameFromNs(ns);
+      if (isGlobalModule(moduleName)) {
+        provided = new ProvidedName();
+        provided.isGlobal = true;
+        providedNames.put(ns, provided);
       } else {
+        unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));
+        return;
+      }
+    }
+
+    if (!provided.isGlobal) {
       JSModule providedModule = provided.explicitModule;
 
       // This must be non-null, because there was an explicit provide.
       Preconditions.checkNotNull(providedModule);
 
       JSModule module = t.getModule();
-        if (moduleGraph != null &&
-            module != providedModule &&
-            !moduleGraph.dependsOn(module, providedModule)) {
+      if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {
         compiler.report(
-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
-                  providedModule.getName(),
-                  module.getName()));
+            t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));
       }
     }
 
     maybeAddToSymbolTable(left);
     maybeAddStringNodeToSymbolTable(arg);
 
     // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
     parent.detachFromParent();
     compiler.reportCodeChange();
   }
 }
\ No newline at end of file
-  }
