diff --git a/tmp/73047211-c02e-46b5-b8db-3a3c6cd8d1f9_buggy.java b/tmp/ca1b372a-e5a4-4ced-bd4a-82d3ef2985cf_fixed.java
index 29a9d2f..8a3cdb5 100644
--- a/tmp/73047211-c02e-46b5-b8db-3a3c6cd8d1f9_buggy.java
+++ b/tmp/ca1b372a-e5a4-4ced-bd4a-82d3ef2985cf_fixed.java
@@ -1,43 +1,48 @@
 /**
  * Handles a goog.require call.
  */
 private void processRequireCall(NodeTraversal t, Node n, Node parent) {
   Node left = n.getFirstChild();
   Node arg = left.getNext();
   if (verifyLastArgumentIsString(t, left, arg)) {
     String ns = arg.getString();
     ProvidedName provided = providedNames.get(ns);
+    if (provided == null) {
+      // This ensures that all providedGoogleNamespaces are recognized here,
+      // even if they are not explicitly provided.
+      provided = providedGoogleNamespaces.get(ns);
+    }
     if (provided == null || !provided.isExplicitlyProvided()) {
       unrecognizedRequires.add(
           new UnrecognizedRequire(n, ns, t.getSourceName()));
     } else {
       JSModule providedModule = provided.explicitModule;
-
-        // This must be non-null, because there was an explicit provide.
-        Preconditions.checkNotNull(providedModule);
-
       JSModule module = t.getModule();
       if (moduleGraph != null &&
           module != providedModule &&
           !moduleGraph.dependsOn(module, providedModule)) {
         compiler.report(
             t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                 providedModule.getName(),
                 module.getName()));
       }
     }
 
+    // Add the namespace to the symbol table to prevent undeclared variable errors.
+    Node symbolNode = IR.string(ns).srcref(n);
+    symbolTable.declare(symbolNode, n, SymbolTable.Source.EXPLICIT);
+
     maybeAddToSymbolTable(left);
     maybeAddStringNodeToSymbolTable(arg);
 
     // Requires should be removed before further processing.
     // Some clients run closure pass multiple times, first with
     // the checks for broken requires turned off. In these cases, we
     // allow broken requires to be preserved by the first run to
     // let them be caught in the subsequent run.
     if (provided != null) {
       parent.detachFromParent();
       compiler.reportCodeChange();
     }
   }
 }
\ No newline at end of file
