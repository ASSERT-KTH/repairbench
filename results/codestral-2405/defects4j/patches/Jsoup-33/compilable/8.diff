diff --git a/tmp/328297d8-ae0a-4629-b621-f2566d903eed_buggy.java b/tmp/e32ee30b-0e22-4a5a-85b1-c68704c0b3a7_fixed.java
index dc93be3..f7e20c6 100644
--- a/tmp/328297d8-ae0a-4629-b621-f2566d903eed_buggy.java
+++ b/tmp/e32ee30b-0e22-4a5a-85b1-c68704c0b3a7_fixed.java
@@ -1,14 +1,15 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        // handle empty known tags
+        if (startTag.isSelfClosing() || Tag.valueOf(startTag.name()).isSelfClosing()) {
+            Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+            insert(el);
+            // Force an end tag to be emitted for self-closing tags.
+            tokeniser.emit(new Token.EndTag(el.tagName()));
             return el;
         }
 
+        // handle non-empty tags
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
\ No newline at end of file
