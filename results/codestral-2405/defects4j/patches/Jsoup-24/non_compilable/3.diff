diff --git a/tmp/ede9cb92-5da9-4578-ac18-cffe0608122d_buggy.java b/tmp/daa13427-2862-43b7-b13e-80b2be0fbb93_fixed.java
index b2d53db..96d6abf 100644
--- a/tmp/ede9cb92-5da9-4578-ac18-cffe0608122d_buggy.java
+++ b/tmp/daa13427-2862-43b7-b13e-80b2be0fbb93_fixed.java
@@ -1,34 +1,52 @@
 void read(Tokeniser t, CharacterReader r) {
+    if (t.getState() == TagOpen) {
         if (r.matchesLetter()) {
             String name = r.consumeLetterSequence();
             t.tagPending.appendTagName(name.toLowerCase());
             t.dataBuffer.append(name);
-                r.advance();
             return;
         }
+        if (r.matches("!--")) {
+            t.transition(MarkupDeclarationOpen);
+            r.advance("!--".length());
+            return;
+        }
+        if (r.matches("/script")) {
+            t.transition(EndTagOpen);
+            t.appendTagPending().append("script");
+            r.advance("/script".length());
+            return;
+        }
+        // parse script content separately
+        else if (t.tagPending.toString().equals("script")) {
+            t.transition(RawText); // Assuming this is the correct state for script content.
+            return;
+        }
+    }
 
+    // Previous conditions not met, continue as normal...
     if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
         char c = r.consume();
         switch (c) {
             case '\t':
             case '\n':
             case '\f':
             case ' ':
                 t.transition(BeforeAttributeName);
                 break;
             case '/':
                 t.transition(SelfClosingStartTag);
                 break;
             case '>':
                 t.emitTagPending();
                 t.transition(Data);
                 break;
             default:
                 t.dataBuffer.append(c);
                 anythingElse(t, r);
                 break;
         }
     } else {
         anythingElse(t, r);
     }
 }
\ No newline at end of file
