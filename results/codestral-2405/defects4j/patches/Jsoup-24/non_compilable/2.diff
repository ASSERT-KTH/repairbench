diff --git a/tmp/1eff3b8f-b27a-458c-a5ac-1c622babfe4f_buggy.java b/tmp/2c8603ff-a6c4-4cae-84c0-350da2a73f12_fixed.java
index b2d53db..2b56771 100644
--- a/tmp/1eff3b8f-b27a-458c-a5ac-1c622babfe4f_buggy.java
+++ b/tmp/2c8603ff-a6c4-4cae-84c0-350da2a73f12_fixed.java
@@ -1,34 +1,48 @@
 void read(Tokeniser t, CharacterReader r) {
-            if (r.matchesLetter()) {
-                String name = r.consumeLetterSequence();
-                t.tagPending.appendTagName(name.toLowerCase());
-                t.dataBuffer.append(name);
-                r.advance();
+    if (t.getState() == CharacterReadState.TagOpen) {
+        if (r.matchesLetter() && r.matchesIgnoreCase("script")) {
+            // Handle script tag
+            t.transition(CharacterReadState.ScriptData);
             return;
         }
-
-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
-                char c = r.consume();
-                switch (c) {
-                    case '\t':
-                    case '\n':
-                    case '\f':
-                    case ' ':
-                        t.transition(BeforeAttributeName);
-                        break;
-                    case '/':
-                        t.transition(SelfClosingStartTag);
-                        break;
-                    case '>':
+        // other tag handling...
+    } else if (t.getState() == CharacterReadState.ScriptData) {
+        if (r.matches("<!--")) {
+            // Handle script comment
+            t.addMarker(new CommentMarker());
+            r.advance(); // consume '<'
+            r.advance(); // consume '!'
+            r.advance(); // consume '-'
+            r.advance(); // consume '-'
+            t.transition(CharacterReadState.ScriptDataComment);
+        } else if (r.matches("<'")) {
+            // Handle single quote in script
+            t.dataBuffer.append(r.consume());
+        } else if (r.matches("</") && r.matchesIgnoreCase("script")) {
+            // Handle end of script tag
             t.emitTagPending();
-                        t.transition(Data);
-                        break;
-                    default:
-                        t.dataBuffer.append(c);
-                        anythingElse(t, r);
-                        break;
+            r.advance(); // consume '<'
+            r.advance(); // consume '/'
+            // consume script tag name
+            while (r.matchesLetter()) r.advance();
+            t.transition(CharacterReadState.Data);
+        } else {
+            // Process script data
+            t.dataBuffer.append(r.consume());
+        }
+    } else if (t.getState() == CharacterReadState.ScriptDataComment) {
+        if (r.matches("-->")) {
+            // Handle end of comment
+            r.advance(); // consume '-'
+            r.advance(); // consume '-'
+            r.advance(); // consume '>'
+            t.removeMarker();
+            t.transition(CharacterReadState.ScriptData);
+        } else {
+            // Process comment data
+            t.dataBuffer.append(r.consume());
         }
     } else {
-                anythingElse(t, r);
+        // Handle other states...
     }
 }
\ No newline at end of file
