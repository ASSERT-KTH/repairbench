diff --git a/tmp/84ce8e2b-1942-4c29-b8e6-8d9c5929504c_buggy.java b/tmp/0c93bc68-a7f8-4393-b8a5-b2264c4ca21f_fixed.java
index 2ce28b5..4cdb4c3 100644
--- a/tmp/84ce8e2b-1942-4c29-b8e6-8d9c5929504c_buggy.java
+++ b/tmp/0c93bc68-a7f8-4393-b8a5-b2264c4ca21f_fixed.java
@@ -1,72 +1,55 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
-    public ArchiveInputStream createArchiveInputStream(final InputStream in)
-            throws ArchiveException {
+public ArchiveInputStream createArchiveInputStream(final InputStream in) throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
-        in.mark(signature.length);
     try {
-            int signatureLength = in.read(signature);
-            in.reset();
+        final byte[] signature = new byte[128];
+        int signatureLength = fillBuffer(in, signature);
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-                return new ZipArchiveInputStream(in);
+            return new ZipArchiveInputStream(new BufferedInputStream(in));
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-                return new JarArchiveInputStream(in);
+            return new JarArchiveInputStream(new BufferedInputStream(in));
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-                return new ArArchiveInputStream(in);
+            return new ArArchiveInputStream(new BufferedInputStream(in));
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-                return new CpioArchiveInputStream(in);
-            }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
+            return new CpioArchiveInputStream(new BufferedInputStream(in));
+        } else if (DumpArchiveInputStream.matches(signature, signatureLength)) {
+            return new DumpArchiveInputStream(new BufferedInputStream(in));
+        } else if (signatureLength >= 512 && TarArchiveInputStream.matches(signature, signatureLength)) {
             try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
-                        return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
+                TarArchiveInputStream tis = new TarArchiveInputStream(new BufferedInputStream(in));
+                if (tis.getNextEntry() != null) {
+                    return new TarArchiveInputStream(new BufferedInputStream(in));
+                }
+            } catch (Exception e) {
                 // ignored
             }
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
+
+private int fillBuffer(InputStream in, byte[] buffer) throws IOException {
+    int read = 0;
+    int off = 0;
+    int len = buffer.length;
+    in.mark(len);
+    while (off < len) {
+        int bytesRead = in.read(buffer, off, len - off);
+        if (bytesRead < 0) {
+            break;
+        }
+        read += bytesRead;
+        off += bytesRead;
+    }
+    in.reset();
+    return read;
+}
\ No newline at end of file
