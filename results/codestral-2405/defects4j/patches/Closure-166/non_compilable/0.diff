diff --git a/tmp/7e46c94a-a29d-4767-a138-3cb0ca226f34_buggy.java b/tmp/5eabfaf5-9506-4035-9ea1-268ef0d46280_fixed.java
index 5f96616..a2d94b0 100644
--- a/tmp/7e46c94a-a29d-4767-a138-3cb0ca226f34_buggy.java
+++ b/tmp/5eabfaf5-9506-4035-9ea1-268ef0d46280_fixed.java
@@ -1,20 +1,30 @@
 @Override
 public void matchConstraint(JSType constraint) {
-    // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
+  // Handle the case where the constraint object is a union type.
+  if (constraint.isUnionType()) {
+    for (JSType alternate : constraint.toUnionType().alternates()) {
+      matchConstraint(alternate);
+    }
+    return;
+  }
+
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
+    return;
   }
+
+  // Handle the case where the constraint object is a non-record type.
+  if (!constraint.isUnknownType()) {
+    setType(constraint);
+    return;
+  }
+
+  // If the constraint is unknown and it isn't handled by earlier conditions,
+  // we might need to add more specific handling for other types.
+  throw new IllegalArgumentException("Unhandled type: " + constraint);
 }
\ No newline at end of file
