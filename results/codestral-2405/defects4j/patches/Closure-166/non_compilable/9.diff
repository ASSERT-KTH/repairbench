diff --git a/tmp/d76f43f5-9d45-4fea-ae30-8df57e156a45_buggy.java b/tmp/3ce25057-c3a0-433c-a03b-5a058fdae9da_fixed.java
index 5f96616..f2b6d73 100644
--- a/tmp/d76f43f5-9d45-4fea-ae30-8df57e156a45_buggy.java
+++ b/tmp/3ce25057-c3a0-433c-a03b-5a058fdae9da_fixed.java
@@ -1,20 +1,31 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    // Here we're fixing the bug by correctly calling the method for ObjectType
+    matchObjectTypeConstraint(constraint.toMaybeObjectType());
   }
 }
+
+private void matchObjectTypeConstraint(JSType constraint) {
+  if (constraint.isUnionType()) {
+    // here we handle the union type by applying each type in the union
+    for (JSType type : constraint.getAlternates()) {
+      matchSingleTypeConstraint(type.toMaybeObjectType());
+    }
+  } else {
+    // handling single object type
+    matchSingleTypeConstraint(constraint.toMaybeObjectType());
+  }
+}
+
+private void matchSingleTypeConstraint(MaybeObjectType constraint) {
+  constraint.getOwnPropertyNames().forEach(propName ->
+    // adding each property from the constraint to the object
+    this.addProperty(propName, constraint.getPropertyType(propName)));
+}
\ No newline at end of file
