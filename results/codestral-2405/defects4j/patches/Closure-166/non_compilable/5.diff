diff --git a/tmp/4dbc916d-d8f3-45e8-a9e2-fcc8a6630cfb_buggy.java b/tmp/d6ed18f4-a268-4a4d-b639-30d841650416_fixed.java
index 5f96616..7bae3ab 100644
--- a/tmp/4dbc916d-d8f3-45e8-a9e2-fcc8a6630cfb_buggy.java
+++ b/tmp/d6ed18f4-a268-4a4d-b639-30d841650416_fixed.java
@@ -1,20 +1,17 @@
 @Override
 public void matchConstraint(JSType constraint) {
-    // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) { // handle union type
+        for (JSType type : constraint.isUnionType().getAlternates()) {
+            if (type.isRecordType()) {
+                matchRecordTypeConstraint(type.toObjectType());
+            }
+        }
     }
 }
\ No newline at end of file
