diff --git a/tmp/53801d10-225b-4ad0-b92e-63fa94e4aff4_buggy.java b/tmp/52983072-27aa-41f2-84eb-e8d02b8ad35c_fixed.java
index 5f96616..8c90159 100644
--- a/tmp/53801d10-225b-4ad0-b92e-63fa94e4aff4_buggy.java
+++ b/tmp/52983072-27aa-41f2-84eb-e8d02b8ad35c_fixed.java
@@ -1,20 +1,32 @@
   @Override
   public void matchConstraint(JSType constraint) {
-    // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+      JSType possibility = constraint.getPossibility();
+      if (possibility.isUnionType()) {
+        // Handle union of record types
+        for (JSType type : possibility.getAlternates()) {
+          matchRecordTypeConstraint(type.toObjectType());
+        }
+      } else if (possibility.isRecordType()) {
+        // Handle a single record type
+        matchRecordTypeConstraint(possibility.toObjectType());
+      }
+    }
+  }
+
+  private void matchRecordTypeConstraint(JSType recordType) {
+    ObjectType objectType = recordType.toObjectType();
+    for (String property : objectType.getPropertyNames()) {
+      JSType type = objectType.getPropertyType(property);
+      if (!this.hasProperty(property)) {
+        // If the object does not have the property, add it
+        this.addProperty(property, type, true);
+      } else {
+        // If the object already has the property, merge the types
+        this.updatePropertyType(property, type);
+      }
     }
   }
\ No newline at end of file
