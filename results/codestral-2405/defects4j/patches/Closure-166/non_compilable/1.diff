diff --git a/tmp/0d95c2ac-6c06-4a38-81b8-71b0f6351ac6_buggy.java b/tmp/c3e6314a-d266-4eff-9632-08316f8121ca_fixed.java
index 5f96616..1ec48a0 100644
--- a/tmp/0d95c2ac-6c06-4a38-81b8-71b0f6351ac6_buggy.java
+++ b/tmp/c3e6314a-d266-4eff-9632-08316f8121ca_fixed.java
@@ -1,20 +1,24 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+  // Check if the constraint object is a union type
+  if (constraint.isUnionType()) {
+    // Iterate over each type in the union
+    for (JSType type : constraint.toUnionType().getAlternates()) {
+      // If the type is a record type
+      if (type.isRecordType()) {
+        // Match the constraint
+        matchRecordTypeConstraint(type.toObjectType());
+      }
+    }
+  }
+
+  // Handle the case where the constraint object is a record type
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
