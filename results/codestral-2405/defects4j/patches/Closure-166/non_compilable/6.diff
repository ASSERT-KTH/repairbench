diff --git a/tmp/a3c5aece-162f-42a6-a30f-decd08801558_buggy.java b/tmp/f01ae41a-b4c4-4d94-a6b3-12bf082d02d1_fixed.java
index 5f96616..2b5d017 100644
--- a/tmp/a3c5aece-162f-42a6-a30f-decd08801558_buggy.java
+++ b/tmp/f01ae41a-b4c4-4d94-a6b3-12bf082d02d1_fixed.java
@@ -1,20 +1,29 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
+  // Handle the case where the constraint object is a union type.
+  if (constraint.isUnionType()) {
+    UnionType unionConstraint = constraint.toUnionType();
+    JSType[] alternatives = unionConstraint.getAlternates();
+
+    for (JSType alt : alternatives) {
+      // If the alternative is a record type, match it with the object type.
+      if (alt.isRecordType()) {
+        matchRecordTypeConstraint(alt.toObjectType());
+      }
+      // If the alternative is not a record type and it's not equal to the current object type,
+      // then there's no way to match the constraint, so we return.
+      else if (!alt.equals(getType())) {
+        return;
+      }
+    }
+  }
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+  else if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
