diff --git a/tmp/0133b9af-ad0d-4c52-ab82-bbfdc0ebbba3_buggy.java b/tmp/740a03fa-cea6-4a21-8e48-680c6dcc31fe_fixed.java
index 5f96616..145f300 100644
--- a/tmp/0133b9af-ad0d-4c52-ab82-bbfdc0ebbba3_buggy.java
+++ b/tmp/740a03fa-cea6-4a21-8e48-680c6dcc31fe_fixed.java
@@ -1,20 +1,27 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // We want to modify the object literal to match the constraint by
+    // taking each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
+    // Handle the case where the constraint object is a union type,
+    // which can include a record type. We check for any record type in
+    // the union and apply that constraint.
+    else if (constraint.isUnionType()) {
+      for (JSType alternate : constraint.toUnionType().getAlternates()) {
+        if (alternate.isRecordType()) {
+          matchRecordTypeConstraint(alternate.toObjectType());
+          // As we found a match, we can stop further checking for union types.
+          break;
+        }
+      }
+    }
   }
\ No newline at end of file
