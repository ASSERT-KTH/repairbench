diff --git a/tmp/237e23a7-60ae-4e39-839d-1d3695669a73_buggy.java b/tmp/7cc65ef0-1490-43b3-b429-81ba5850e34e_fixed.java
index 5f96616..3a3a2d8 100644
--- a/tmp/237e23a7-60ae-4e39-839d-1d3695669a73_buggy.java
+++ b/tmp/7cc65ef0-1490-43b3-b429-81ba5850e34e_fixed.java
@@ -1,20 +1,7 @@
-  @Override
-  public void matchConstraint(JSType constraint) {
-    // We only want to match constraints on anonymous types.
-    if (hasReferenceName()) {
-      return;
+if (constraint.isUnionType()) {
+  for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+    if (alt.isRecordType()) {
+      matchRecordTypeConstraint(alt.toObjectType());
     }
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
