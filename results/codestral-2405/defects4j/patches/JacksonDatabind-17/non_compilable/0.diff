diff --git a/tmp/8929068e-49c5-4fe3-b2e9-a810fc587273_buggy.java b/tmp/39d9b8bd-f16f-46c2-bede-c08ed7fc188e_fixed.java
index 01967cc..879a05d 100644
--- a/tmp/8929068e-49c5-4fe3-b2e9-a810fc587273_buggy.java
+++ b/tmp/39d9b8bd-f16f-46c2-bede-c08ed7fc188e_fixed.java
@@ -1,35 +1,32 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
     public boolean useForType(JavaType t)
     {
         switch (_appliesFor) {
         case NON_CONCRETE_AND_ARRAYS:
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
             // fall through
         case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+            if (t.isJavaLangObject()) {
+                return true;
+            }
+
+            // Handle primitive types separately
+            Class<?> rawClass = t.getRawClass();
+            if (rawClass.isPrimitive()) {
+                return false;
+            }
+
+            return !t.isConcrete()
+                    || TreeNode.class.isAssignableFrom(t.getRawClass());
 
         case NON_FINAL:
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
-                // [Issue#88] Should not apply to JSON tree models:
             return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+
         default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
-                return (t.getRawClass() == Object.class);
+            return t.isJavaLangObject();
         }
     }
\ No newline at end of file
