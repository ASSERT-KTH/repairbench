diff --git a/tmp/e53a28a7-9659-4ca9-8b68-0e49758662ee_buggy.java b/tmp/cc4bb5a3-d150-4b7b-a0b2-1f8a76947075_fixed.java
index 01967cc..330cf60 100644
--- a/tmp/e53a28a7-9659-4ca9-8b68-0e49758662ee_buggy.java
+++ b/tmp/cc4bb5a3-d150-4b7b-a0b2-1f8a76947075_fixed.java
@@ -1,35 +1,20 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
-        public boolean useForType(JavaType t)
-        {
+public boolean useForType(JavaType t) {
     switch (_appliesFor) {
         case NON_CONCRETE_AND_ARRAYS:
-                while (t.isArrayType()) {
+            if (t.isArrayType()) {
                 t = t.getContentType();
+                return false; // do not use for array types
             }
             // fall through
         case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+            return t.getRawClass() == Object.class || (!t.isConcrete() || TreeNode.class.isAssignableFrom(t.getRawClass()));
 
         case NON_FINAL:
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
-                // [Issue#88] Should not apply to JSON tree models:
             return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
         default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
             return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
