diff --git a/tmp/10b90e0b-80f7-49a7-b234-01946d33f682_buggy.java b/tmp/9abce206-58a1-4f4a-9e81-80d5d1582b28_fixed.java
index b529d33..0e1eb34 100644
--- a/tmp/10b90e0b-80f7-49a7-b234-01946d33f682_buggy.java
+++ b/tmp/9abce206-58a1-4f4a-9e81-80d5d1582b28_fixed.java
@@ -1,29 +1,28 @@
-    /**
-     * Used internally by the Soundex algorithm.
-     *
-     * Consonants from the same code group separated by W or H are treated as one.
-     *
-     * @param str
-     *                  the cleaned working string to encode (in upper case).
-     * @param index
-     *                  the character position to encode
-     * @return Mapping code for a particular character
-     * @throws IllegalArgumentException
-     *                  if the character is not mapped
-     */
 private char getMappingCode(final String str, final int index) {
     // map() throws IllegalArgumentException
     final char mappedChar = this.map(str.charAt(index));
+
     // HW rule check
     if (index > 1 && mappedChar != '0') {
         final char hwChar = str.charAt(index - 1);
         if ('H' == hwChar || 'W' == hwChar) {
             final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
+            final char preHWCode = this.map(preHWChar);
+
+            // Check if previous character was also mapped to the same digit,
+            // indicating they should be treated as one.
+            if (preHWCode == mappedChar && preHWCode != '0') {
+                return 0;
+            }
+        } else if (index > 2) {
+            // If 'HW' was not present, check if the character before 'HW'
+            // should be treated as grouped with the current character.
+            final char prepreHWChar = str.charAt(index - 2);
+            final char prepreHWCode = this.map(prepreHWChar);
+            if (prepreHWCode == mappedChar && prepreHWCode != '0') {
                 return 0;
             }
         }
     }
     return mappedChar;
 }
\ No newline at end of file
