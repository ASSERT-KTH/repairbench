diff --git a/tmp/c4e47fd6-cb8c-44a3-aae7-dbf8b34bdd6a_buggy.java b/tmp/42314135-4d98-410d-baf9-c4c6888d0091_fixed.java
index b529d33..5a97ab3 100644
--- a/tmp/c4e47fd6-cb8c-44a3-aae7-dbf8b34bdd6a_buggy.java
+++ b/tmp/42314135-4d98-410d-baf9-c4c6888d0091_fixed.java
@@ -1,29 +1,26 @@
-    /**
-     * Used internally by the Soundex algorithm.
-     *
-     * Consonants from the same code group separated by W or H are treated as one.
-     *
-     * @param str
-     *                  the cleaned working string to encode (in upper case).
-     * @param index
-     *                  the character position to encode
-     * @return Mapping code for a particular character
-     * @throws IllegalArgumentException
-     *                  if the character is not mapped
-     */
 private char getMappingCode(final String str, final int index) {
     // map() throws IllegalArgumentException
     final char mappedChar = this.map(str.charAt(index));
     // HW rule check
     if (index > 1 && mappedChar != '0') {
-            final char hwChar = str.charAt(index - 1);
-            if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
-                final char firstCode = this.map(preHWChar);
-                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+        final char prevChar = str.charAt(index - 1);
+        if ('H' == prevChar || 'W' == prevChar) {
+            final char prev2Char = str.charAt(index - 2);
+            char prev2MappedChar = this.map(prev2Char);
+            if (prev2MappedChar == mappedChar || 'H' == prev2Char || 'W' == prev2Char) {
+                return '0';
+            }
+        }
+        // Add the check for HW sequence before the current index
+        else if (index > 2) {
+            final char prev2Char = str.charAt(index - 2);
+            final char prev3Char = str.charAt(index - 3);
+            char prev2MappedChar = this.map(prev2Char);
+            char prev3MappedChar = this.map(prev3Char);
+            if (('H' == prev3Char || 'W' == prev3Char) && prev2MappedChar == mappedChar) {
+                return '0';
             }
         }
     }
     return mappedChar;
 }
\ No newline at end of file
