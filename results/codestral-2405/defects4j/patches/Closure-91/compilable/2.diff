diff --git a/tmp/6660679b-bc47-45f8-846f-66c5539ebd2f_buggy.java b/tmp/472b0507-f6a7-4674-87e8-8543eabb766d_fixed.java
index 30d7266..f0a3fda 100644
--- a/tmp/6660679b-bc47-45f8-846f-66c5539ebd2f_buggy.java
+++ b/tmp/472b0507-f6a7-4674-87e8-8543eabb766d_fixed.java
@@ -1,69 +1,74 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
     if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {}; // or
-      // var a = {x: function() {}};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN ||
-
-            // object literal keys
             pType == Token.STRING ||
             pType == Token.NUMBER)) {
         return false;
       }
 
-      // Don't traverse functions that are getting lent to a prototype.
+      // If parent is a call to dojo.declare that includes a @lends annotation,
+      // we need to traverse the function.
+      if (parent.getType() == Token.CALL) {
+        Node caller = parent.getFirstChild();
+        if (caller.getType() == Token.GETPROP &&
+            caller.getFirstChild().getString().equals("dojo") &&
+            caller.getLastChild().getString().equals("declare")) {
+
+          int childrenCount = parent.getChildCount();
+          // There should be at least 3 children in a call to dojo.declare
+          // The first is 'dojo.declare', the second is the function to declare,
+          // and the third should be the object containing the @lends annotation.
+          if (childrenCount >= 3) {
+            Node lendsObject = parent.getChildAtIndex(2);
+            // If the @lends annotation is present and refers to the prototype of the function,
+            // we need to traverse the function.
+            if (lendsObject.getType() == Token.OBJECTLIT) {
+              for (Node child : lendsObject.children()) {
+                if (child.getType() == Token.STRING && child.getFirstChild().getString().contains("prototype")) {
+                  return true;
+                }
+              }
+            }
+          }
+        }
+      }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
       if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
         if (NodeUtil.isGet(lhs)) {
           if (lhs.getType() == Token.GETPROP &&
               lhs.getLastChild().getString().equals("prototype")) {
             return false;
           }
           Node llhs = lhs.getFirstChild();
           if (llhs.getType() == Token.GETPROP &&
               llhs.getLastChild().getString().equals("prototype")) {
             return false;
           }
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
