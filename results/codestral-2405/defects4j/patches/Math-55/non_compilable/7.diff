diff --git a/tmp/969d8f5e-6542-4026-9fe4-6bbc926b80db_buggy.java b/tmp/7eb8d831-34b6-42cf-91b5-a29d74a735a6_fixed.java
index 1478ee1..5683456 100644
--- a/tmp/969d8f5e-6542-4026-9fe4-6bbc926b80db_buggy.java
+++ b/tmp/7eb8d831-34b6-42cf-91b5-a29d74a735a6_fixed.java
@@ -1,24 +1,16 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    double normV2Squared = v2.dotProduct(v2);
+    double rho = 0.0;
+
+    // Before computing v3 = v1 - rho * v2, replace v1 by v1 - rho * v2 to compute rho,
+    // to minimize cancellation errors.
+    if (normV2Squared != 0.0) {
+        Vector3D cv1 = new Vector3D(v1);
+        rho = cv1.dotProduct(v2) / normV2Squared;
+        cv1.subtract(v2.scalarMultiply(rho));
+        // Now compute the cross product from cv1 (v3) and v2
+        return new Vector3D(cv1.y * v2.z - cv1.z * v2.y, cv1.z * v2.x - cv1.x * v2.z, cv1.x * v2.y - cv1.y * v2.x);
+    } else {
+        return new Vector3D(0,0,0);
+    }
 }
\ No newline at end of file
