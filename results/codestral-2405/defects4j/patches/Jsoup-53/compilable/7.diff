diff --git a/tmp/e0c06298-e69f-490d-ba2b-97ebd0197e6f_buggy.java b/tmp/275a8aa0-1916-4733-92fc-c35404ac3d1f_fixed.java
index fecb896..58e28b1 100644
--- a/tmp/e0c06298-e69f-490d-ba2b-97ebd0197e6f_buggy.java
+++ b/tmp/275a8aa0-1916-4733-92fc-c35404ac3d1f_fixed.java
@@ -1,34 +1,49 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
+ * and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean quoted = false;
+    char quoteChar = 0;
 
-        do {
-            if (isEmpty()) break;
+    while (!isEmpty()) {
         Character c = consume();
-            if (last == 0 || last != ESC) {
+
+        if (c.equals('\'') || c.equals('"')) {
+            if (quoted && c.equals(quoteChar)) {
+                quoted = false;
+                quoteChar = 0;
+            } else if (!quoted) {
+                quoted = true;
+                quoteChar = c;
+            }
+        }
+
+        if (!quoted && last != ESC) {
             if (c.equals(open)) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c.equals(close))
                 depth--;
         }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        if (depth > 0)
+            end = pos;
+
         last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        if (depth <= 0)
+            break;
+    }
+
+    return (start >= 0 && end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
