diff --git a/tmp/abe5df36-1012-493d-86c4-66e91dd30b3d_buggy.java b/tmp/6e4fc10c-c952-4621-b465-8d306ec73d65_fixed.java
index 7f61a8c..4b2d1bf 100644
--- a/tmp/abe5df36-1012-493d-86c4-66e91dd30b3d_buggy.java
+++ b/tmp/6e4fc10c-c952-4621-b465-8d306ec73d65_fixed.java
@@ -1,73 +1,64 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+  if (n.isEmpty() || n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
-    if (parent.getType() == Token.COMMA) {
-      Node gramps = parent.getParent();
-      if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
-      return;
+  if (parent.getType() == Token.COMMA && parent.getParent().isCall()) {
+    Node sibling = NodeUtil.getPrecedingSibling(n);
+    if (sibling != null && NodeUtil.mayHaveSideEffects(sibling, t.getCompiler())) {
+      reportUselessCode(t, sibling);
     }
+  } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
+    if (n == parent.getFirstChild()) {
+      // Check for side-effects in the first child of a for loop
+      if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
+        reportUselessCode(t, n);
       }
-
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
-            continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
-          else
-            break;
+    } else if (n == parent.getFirstChild().getNext().getNext()) {
+      // Check for side-effects in the third child of a for loop
+      if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
+        reportUselessCode(t, n);
       }
     }
+  } else if (parent.getType() == Token.ARRAYLIT) {
+    // Check for side-effects in elements of an array literal
+    if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
+      reportUselessCode(t, n);
+    }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
-           n == parent.getFirstChild().getNext().getNext())) {
-      } else {
     return;
   }
-    }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (!isResultUsed &&
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {
-        return;
-      } else if (n.isExprResult()) {
-        return;
-      }
+  if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
-        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
-            "' operator is not being used.";
+      msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used.";
     }
 
-      t.getCompiler().report(
-          t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
+
+private void reportUselessCode(NodeTraversal t, Node n) {
+  String msg = "The result of this expression is not being used.";
+  if (NodeUtil.isSimpleOperatorType(n.getType())) {
+    msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used.";
+  } else if (n.isFunction()) {
+    msg = "The result of this function call is not being used.";
+  }
+
+  t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));
+  problemNodes.add(n);
+}
\ No newline at end of file
