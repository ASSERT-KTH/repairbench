diff --git a/tmp/b905d4a7-6b71-4845-95f7-02d00874a01e_buggy.java b/tmp/1ae52c3e-53fc-40dd-a217-8ac8373003bf_fixed.java
index 1c53d31..5b9ba97 100644
--- a/tmp/b905d4a7-6b71-4845-95f7-02d00874a01e_buggy.java
+++ b/tmp/1ae52c3e-53fc-40dd-a217-8ac8373003bf_fixed.java
@@ -1,20 +1,47 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
+      TypeAdapter<?> createdTypeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
+
+      if (createdTypeAdapter != null) { // if createdTypeAdapter is null, typeAdapter will not be NullSafe
+        typeAdapter = createdTypeAdapter.nullSafe();
+      } else {
+        typeAdapter = new NullSafeTypeAdapterFactoryDecorator(constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct());
+      }
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-      typeAdapter = typeAdapter.nullSafe();
     return typeAdapter;
 }
+
+// NullSafeTypeAdapterFactoryWrapper to mimic nullSafe() behavior when TypeAdapter is null
+static class NullSafeTypeAdapterFactoryDecorator implements TypeAdapter<Object> {
+    private final TypeAdapterFactory delegate;
+
+    NullSafeTypeAdapterFactoryDecorator(TypeAdapterFactory delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    public Object read(JsonReader in) throws IOException {
+        throw new UnsupportedOperationException("Deserialization not supported");
+    }
+
+    @Override
+    public void write(JsonWriter out, Object value) throws IOException {
+        TypeAdapter<Object> ad = delegate.create(new Gson(), TypeToken.get(Object.class));
+        if (ad != null) {
+            ad.write(out, value);
+        }
+    }
+}
\ No newline at end of file
