diff --git a/tmp/61d30b7c-1494-4b13-bc60-a9de8d2d0db7_buggy.java b/tmp/0368dd1c-4158-4d37-927f-869c7745c4f1_fixed.java
index c9da1b7..03d70ec 100644
--- a/tmp/61d30b7c-1494-4b13-bc60-a9de8d2d0db7_buggy.java
+++ b/tmp/0368dd1c-4158-4d37-927f-869c7745c4f1_fixed.java
@@ -1,33 +1,23 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+        // already had an explicitly marked one?
+        if (explicit && (_explicitCreators & mask) != 0) {
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                    +" creator: already had explicitly marked "+oldOne+", encountered "+newOne);
+        } else if (oldOne.equals(newOne)) {
+            // identical constructors, skip new one
+            return;
         }
     }
+
     if (explicit) {
         _explicitCreators |= mask;
     }
+
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
