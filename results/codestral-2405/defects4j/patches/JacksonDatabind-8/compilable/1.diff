diff --git a/tmp/3b5b895b-8449-489c-859d-dc641dd418a1_buggy.java b/tmp/0e06a9c8-28d5-48a2-bb3d-331734520b90_fixed.java
index c9da1b7..44b3e68 100644
--- a/tmp/3b5b895b-8449-489c-859d-dc641dd418a1_buggy.java
+++ b/tmp/0e06a9c8-28d5-48a2-bb3d-331734520b90_fixed.java
@@ -1,33 +1,39 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
+        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated
+            if (explicit) { // and new one is also explicitly annotated
+                // It's an error if the old and new creators are instances of the same class
                 if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
                 }
+            } else { // new one is not explicitly annotated
+                return; // so we can skip this verification
             }
+        } else { // old one is not explicitly annotated
+            // both explicit: verify
+            // otherwise only verify if neither explicitly annotated.
+            if (explicit) {
+                _explicitCreators |= mask;
+                _creators[typeIndex] = _fixAccess(newOne);
+            } else { // new one is not explicitly annotated either
+                // For not annotated creators, existing creator is not overwritten unless the new one is from a subclass
+                if (!oldOne.getClass().isAssignableFrom(newOne.getClass())) {
+                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                            +" creators: already had unmarked "+oldOne+", encountered "+newOne);
+                }
+            }
+        }
+    } else { // no existing creator for this type
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
+}
\ No newline at end of file
