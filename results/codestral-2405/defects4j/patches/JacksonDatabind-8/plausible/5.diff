diff --git a/tmp/e46ff7f5-588a-4c66-a737-870c72406f8a_buggy.java b/tmp/e66444d1-ec65-4533-92d2-ce5a5b457007_fixed.java
index c9da1b7..06ce038 100644
--- a/tmp/e46ff7f5-588a-4c66-a737-870c72406f8a_buggy.java
+++ b/tmp/e66444d1-ec65-4533-92d2-ce5a5b457007_fixed.java
@@ -1,33 +1,32 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
+        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated
+            if (explicit) { // both new and old are explicitly annotated
                 // [databind#667]: avoid one particular class of bogus problems
-
+                if (oldOne.getClass() == newOne.getClass()) {
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
                 }
+                // else new type must be more specific than the old but not the same, therefore use the new one
+            } else { // new one is not explicitly annotated so leave as-is
+                return;
             }
+        } else { // old one was not explicitly annotated
+            if (explicit) { // new one is explicitly annotated
+                _explicitCreators |= mask; // mark it as explicitly annotated
+            }
+            // overwrite old one with new one, no matter if it's explicitly annotated or not
+        }
+    } else { // No oldOne, nothing to conflict with
         if (explicit) {
             _explicitCreators |= mask;
         }
+    }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
