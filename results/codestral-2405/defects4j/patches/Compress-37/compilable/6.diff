diff --git a/tmp/bef6e126-adc4-4192-acd5-d09506414637_buggy.java b/tmp/90efbf56-a968-409b-a493-e54c9b3f939b_fixed.java
index 4b7e1e4..dc09ead 100644
--- a/tmp/bef6e126-adc4-4192-acd5-d09506414637_buggy.java
+++ b/tmp/90efbf56-a968-409b-a493-e54c9b3f939b_fixed.java
@@ -1,52 +1,48 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
-            int read = 0;
         while ((ch = i.read()) != -1) {
-                read++;
             if (ch == ' ') {
+                break;
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (ch == -1) { // EOF
+            break;
+        }
+        if (len == 0) { // Handle empty line in pax headers
+            continue;
+        }
         // Get keyword
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
-                        read++;
             if (ch == '=') { // end of keyword
                 final String keyword = coll.toString(CharsetNames.UTF_8);
                 // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                final int restLen = len - keyword.length() - 2; // subtract keyword, '=' and '\n'
+                if (restLen <= 0) {
                     headers.remove(keyword);
                 } else {
                     final byte[] rest = new byte[restLen];
                     final int got = IOUtils.readFully(i, rest);
                     if (got != restLen) {
                         throw new IOException("Failed to read "
                                               + "Paxheader. Expected "
                                               + restLen
                                               + " bytes, read "
                                               + got);
                     }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                    final String value = new String(rest, 0, restLen, CharsetNames.UTF_8);
                     headers.put(keyword, value);
                 }
                 break;
             }
             coll.write((byte) ch);
         }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
