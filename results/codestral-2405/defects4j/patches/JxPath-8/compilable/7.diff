diff --git a/tmp/b3c8d11b-bfc5-46a7-b23e-e36a876f13eb_buggy.java b/tmp/306e0b94-eaeb-4f62-8a0e-861c1fe1ce9b_fixed.java
index 98d89dc..49a428d 100644
--- a/tmp/b3c8d11b-bfc5-46a7-b23e-e36a876f13eb_buggy.java
+++ b/tmp/306e0b94-eaeb-4f62-8a0e-861c1fe1ce9b_fixed.java
@@ -1,23 +1,30 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
-        double ld = InfoSetUtil.doubleValue(left);
-        double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+        double ld = convertToDouble(left);
+        double rd = convertToDouble(right);
+        return evaluateCompare(Double.compare(ld, rd));
+    }
+
+    private double convertToDouble(Object o) {
+        if (o instanceof Double && ((Double) o).isNaN()) {
+            return Double.NaN;
+        }
+        return InfoSetUtil.doubleValue(o);
     }
\ No newline at end of file
