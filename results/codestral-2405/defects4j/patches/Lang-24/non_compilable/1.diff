diff --git a/tmp/d463bd5d-d96b-463b-840d-3943fdd69a87_buggy.java b/tmp/df17b70a-a9ef-4b92-a0fb-3ff33906de4d_fixed.java
index 33b47bc..264cce7 100644
--- a/tmp/d463bd5d-d96b-463b-840d-3943fdd69a87_buggy.java
+++ b/tmp/df17b70a-a9ef-4b92-a0fb-3ff33906de4d_fixed.java
@@ -1,116 +1,24 @@
-    /**
-     * <p>Checks whether the String a valid Java number.</p>
-     *
-     * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
-     * qualifier, scientific notation and numbers marked with a type
-     * qualifier (e.g. 123L).</p>
-     *
-     * <p><code>Null</code> and empty String will return
-     * <code>false</code>.</p>
-     *
-     * @param str  the <code>String</code> to check
-     * @return <code>true</code> if the string is a correctly formatted number
-     */
-    public static boolean isNumber(String str) {
-        if (StringUtils.isEmpty(str)) {
+isNumber(String str) {
+    //... existing code ...
+    if (chars[i] == '.' || chars[i] == 'e' || chars[i] == 'E') {
+        //... existing code ...
+    } else if (chars[i] == 'f' || chars[i] == 'F') {
+        if (!hasDecPoint && !hasExp) {
             return false;
         }
-        char[] chars = str.toCharArray();
-        int sz = chars.length;
-        boolean hasExp = false;
-        boolean hasDecPoint = false;
-        boolean allowSigns = false;
-        boolean foundDigit = false;
-        // deal with any possible sign up front
-        int start = (chars[0] == '-') ? 1 : 0;
-        if (sz > start + 1) {
-            if (chars[start] == '0' && chars[start + 1] == 'x') {
-                int i = start + 2;
-                if (i == sz) {
-                    return false; // str == "0x"
-                }
-                // checking hex (it can't be anything else)
-                for (; i < chars.length; i++) {
-                    if ((chars[i] < '0' || chars[i] > '9')
-                        && (chars[i] < 'a' || chars[i] > 'f')
-                        && (chars[i] < 'A' || chars[i] > 'F')) {
-                        return false;
-                    }
-                }
-                return true;
-            }
-        }
-        sz--; // don't want to loop to the last char, check it afterwords
-              // for type qualifiers
-        int i = start;
-        // loop to the next to last char or to the last char if we need another digit to
-        // make a valid number (e.g. chars[0..5] = "1234E")
-        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
-            if (chars[i] >= '0' && chars[i] <= '9') {
-                foundDigit = true;
-                allowSigns = false;
-
-            } else if (chars[i] == '.') {
+        return i == sz - 1 && foundDigit;
+    } else if (chars[i] == 'd' || chars[i] == 'D') {
         if (hasDecPoint || hasExp) {
-                    // two decimal points or dec in exponent   
             return false;
         }
-                hasDecPoint = true;
-            } else if (chars[i] == 'e' || chars[i] == 'E') {
-                // we've already taken care of hex.
-                if (hasExp) {
-                    // two E's
-                    return false;
-                }
-                if (!foundDigit) {
-                    return false;
-                }
-                hasExp = true;
-                allowSigns = true;
-            } else if (chars[i] == '+' || chars[i] == '-') {
-                if (!allowSigns) {
+        return i == sz - 1 && foundDigit;
+    } else if (chars[i] == 'l' || chars[i] == 'L') {
+        if (hasDecPoint || hasExp) {
             return false;
         }
-                allowSigns = false;
-                foundDigit = false; // we need a digit after the E
+        return i == sz - 1 && foundDigit;
     } else {
         return false;
     }
-            i++;
-        }
-        if (i < chars.length) {
-            if (chars[i] >= '0' && chars[i] <= '9') {
-                // no type qualifier, OK
-                return true;
-            }
-            if (chars[i] == 'e' || chars[i] == 'E') {
-                // can't have an E at the last byte
-                return false;
-            }
-            if (chars[i] == '.') {
-                if (hasDecPoint || hasExp) {
-                    // two decimal points or dec in exponent
-                    return false;
-                }
-                // single trailing decimal point after non-exponent is ok
-                return foundDigit;
-            }
-            if (!allowSigns
-                && (chars[i] == 'd'
-                    || chars[i] == 'D'
-                    || chars[i] == 'f'
-                    || chars[i] == 'F')) {
-                return foundDigit;
-            }
-            if (chars[i] == 'l'
-                || chars[i] == 'L') {
-                // not allowing L with an exponent or decimal point
-                return foundDigit && !hasExp;
-            }
-            // last character is illegal
-            return false;
-        }
-        // allowSigns is true iff the val ends in 'E'
-        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
-        return !allowSigns && foundDigit;
+    //... existing code ...
 }
\ No newline at end of file
