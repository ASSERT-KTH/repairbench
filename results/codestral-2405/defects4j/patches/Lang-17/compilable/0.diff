diff --git a/tmp/b3e52711-5aaf-4aca-9661-db0243feff34_buggy.java b/tmp/90cec798-2800-4b05-9e85-3724b08387a5_fixed.java
index b86c1ea..becddfd 100644
--- a/tmp/b3e52711-5aaf-4aca-9661-db0243feff34_buggy.java
+++ b/tmp/90cec798-2800-4b05-9e85-3724b08387a5_fixed.java
@@ -1,38 +1,28 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = Character.codePointCount(input, 0, input.length());
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
             char[] c = Character.toChars(Character.codePointAt(input, pos));
             out.write(c);
         }
         else {
 //          // contract with translators is that they have to understand codepoints
 //          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+            pos += consumed;
+        }
+        // Increment pos only if it's not already at the end of the input string
+        if(pos < len - 1) {
+            pos++;
         } else {
-                        pos++;
+            break;
         }
     }
-                pos--;
-            }
-            pos++;
-        }
 }
\ No newline at end of file
