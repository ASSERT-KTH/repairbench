diff --git a/tmp/136c186c-0eac-4424-9b64-85477520867a_buggy.java b/tmp/5b1be3f7-f729-4dd6-90c2-aa572f9af1cf_fixed.java
index 3fb3172..94d74cc 100644
--- a/tmp/136c186c-0eac-4424-9b64-85477520867a_buggy.java
+++ b/tmp/5b1be3f7-f729-4dd6-90c2-aa572f9af1cf_fixed.java
@@ -1,13 +1,29 @@
-    /**
-     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.
-     * <p>
-     * When encoding the line length is 0 (no chunking), and the encoding table is STANDARD_ENCODE_TABLE.
-     * </p>
-     * 
-     * <p>
-     * When decoding all variants are supported.
-     * </p>
-     */
-    public Base64() {
-        this(false);
+import org.apache.commons.codec.EncoderException;
+import org.apache.commons.codec.binary.Base64;
+import org.apache.commons.codec.Encoder;
+import org.apache.commons.codec.binary.BinaryEncoder;
+import java.io.IOException;
+
+public class Base64Codec extends Base64 implements Encoder, BinaryEncoder {
+
+    public Base64Codec() {
+        super(false);
+    }
+
+    @Override
+    public Object encode(Object source) throws EncoderException {
+        if (!(source instanceof byte[])) {
+            throw new EncoderException("Base64 can only encode byte array");
+        }
+        try {
+            return encode((byte[]) source);
+        } catch (IOException e) {
+            throw new EncoderException("Error during encoding", e);
+        }
+    }
+
+    @Override
+    public byte[] encode(byte[] source) {
+        return super.encode(source);
+    }
 }
\ No newline at end of file
