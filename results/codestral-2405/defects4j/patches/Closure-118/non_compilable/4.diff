diff --git a/tmp/e2cf87cd-1e03-4a86-8eed-b777ef38916e_buggy.java b/tmp/65511757-caa5-4834-8c02-207b2b3989e8_fixed.java
index 0b7c52e..c8e4a21 100644
--- a/tmp/e2cf87cd-1e03-4a86-8eed-b777ef38916e_buggy.java
+++ b/tmp/65511757-caa5-4834-8c02-207b2b3989e8_fixed.java
@@ -1,27 +1,22 @@
-    /**
-     * Processes a OBJECTLIT node.
-     */
 private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
+  for (Node child = n.getFirstChild(); child != null; child = child.getNextSibling()) {
     String name = child.getString();
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+    if (!prop.scheduleRenaming(child)) {
       if (propertiesToErrorFor.containsKey(name)) {
+        // Modify the error message to include more information for debugging
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+            (type == null ? "null" : type.toString()), n.toString(),
+            "Renaming schedule failed for property '" + name + "'"));
       }
+    } else {
+      // Try to get the type of the property after it's been successfully renamed
+      T renamedType = typeSystem.getType(getScope(), n, prop.getName());
+      processProperty(t, prop, renamedType, null);
     }
   }
 }
\ No newline at end of file
