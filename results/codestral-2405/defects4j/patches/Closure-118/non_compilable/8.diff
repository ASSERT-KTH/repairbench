diff --git a/tmp/77b6a28b-63a4-4e5e-b338-5dd389a362fa_buggy.java b/tmp/6722ac52-d294-4f11-b991-47353da2e8a0_fixed.java
index 0b7c52e..a90aa4b 100644
--- a/tmp/77b6a28b-63a4-4e5e-b338-5dd389a362fa_buggy.java
+++ b/tmp/6722ac52-d294-4f11-b991-47353da2e8a0_fixed.java
@@ -1,27 +1,45 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
+      Map<String, Node> propertyNodes = new HashMap<>();
+
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
-        // We should never see a mix of numbers and strings.
         String name = child.getString();
+        Node existingNode = propertyNodes.get(name);
+
+        // If we've seen this property before, make sure the types are consistent
+        if (existingNode != null) {
           T type = typeSystem.getType(getScope(), n, name);
+          if (!type.equals(typeSystem.getType(getScope(), existingNode, name))) {
+            // Types are inconsistent, report an error
+            compiler.report(JSError.make(
+                t.getSourceName(), child, INCONSISTENT_PROPERTIES_TYPE,
+                Warnings.INVALIDATION, name,
+                type.toString(), typeSystem.getType(getScope(), existingNode, name).toString(),
+                existingNode.getLocation().toString()));
+          }
+        } else {
+          // This is the first time we've seen this property, store it
+          propertyNodes.put(name, child);
+        }
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+                                   processProperty(t, prop, typeSystem.getType(getScope(), n, name), null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+                typeSystem.getType(getScope(), n, name) == null ? "null" : typeSystem.getType(getScope(), n, name).toString(),
+                n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
