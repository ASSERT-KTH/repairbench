diff --git a/tmp/3062c1f8-6eb7-472f-9d5f-5c7f5ca8ab6d_buggy.java b/tmp/336c9f25-7818-4448-8c82-62af81829013_fixed.java
index f9a9b5b..5c342cb 100644
--- a/tmp/3062c1f8-6eb7-472f-9d5f-5c7f5ca8ab6d_buggy.java
+++ b/tmp/336c9f25-7818-4448-8c82-62af81829013_fixed.java
@@ -1,30 +1,62 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
-        T mockInstance = null;
+
+    Constructor<? extends T> constructor;
     try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        constructor = determineConstructor(settings);
+    } catch (NoSuchMethodException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
+    }
+
+    T mockInstance;
+    try {
+        mockInstance = constructor.newInstance(determineConstructorArgs(settings, constructor));
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
-            return ensureMockIsAssignableToMockedType(settings, mockInstance);
+    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
     }
+
+    return ensureMockIsAssignableToMockedType(settings, mockInstance);
+}
+
+private <T> Constructor<? extends T> determineConstructor(MockCreationSettings<T> settings) throws NoSuchMethodException {
+    if (settings.shouldUseConstructor()) {
+        return settings.getConstructor();
+    } else if (settings.getTypeToMock().isMemberClass() && !Modifier.isStatic(settings.getTypeToMock().getModifiers())) {
+        Constructor<?>[] constructors = settings.getTypeToMock().getDeclaredConstructors();
+        for (Constructor<?> constructor : constructors) {
+            if (constructor.getParameterCount() == 1 && constructor.getParameterTypes()[0].equals(settings.getTypeToMock().getDeclaringClass())) {
+                return (Constructor<? extends T>) constructor;
+            }
+        }
+    }
+    return settings.getTypeToMock().getDeclaredConstructor();
+}
+
+private Object[] determineConstructorArgs(MockCreationSettings<T> settings, Constructor<? extends T> constructor) {
+    if (settings.shouldUseConstructor() && settings.getConstructorArgs().length > 0) {
+        return settings.getConstructorArgs();
+    } else if (settings.getTypeToMock().isMemberClass() && !Modifier.isStatic(settings.getTypeToMock().getModifiers())) {
+        return new Object[]{settings.getTypeToMock().getDeclaringClass().cast(settings.getOuterInstance())};
+    }
+    return new Object[0];
 }
\ No newline at end of file
