diff --git a/tmp/bfa921cb-1b23-4e30-90a5-e7f00f4eae21_buggy.java b/tmp/7e2bb2d7-b379-413c-ae14-70a3f7ad780a_fixed.java
index f9a9b5b..644b75b 100644
--- a/tmp/bfa921cb-1b23-4e30-90a5-e7f00f4eae21_buggy.java
+++ b/tmp/7e2bb2d7-b379-413c-ae14-70a3f7ad780a_fixed.java
@@ -1,30 +1,18 @@
-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
-            throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
+   // Add constructor checking logic for nested or inner classes
+   if (mockedProxyType.isMemberClass() && !Modifier.isStatic(mockedProxyType.getModifiers())) {
+     try {
+       Constructor<? extends T> ctor = mockedProxyType.getDeclaredConstructor(mockedProxyType.getEnclosingClass());
+       ctor.setAccessible(true);
+       mockInstance = ctor.newInstance(settings.getOuterInstance());
+     } catch (Exception e) {
+       throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
      }
-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
-                settings.getTypeToMock(),
-                settings.getExtraInterfaces()
-        );
-        T mockInstance = null;
+   } else {
      try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
-
-            return ensureMockIsAssignableToMockedType(settings, mockInstance);
-        } catch (ClassCastException cce) {
-            throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
-                    "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
-                    ""
-            ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+       Constructor<? extends T> ctor = mockedProxyType.getDeclaredConstructor();
+       ctor.setAccessible(true);
+       mockInstance = ctor.newInstance();
+     } catch (Exception e) {
+       throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'. Please ensure that the target class has a no-args constructor.", e);
      }
    }
\ No newline at end of file
