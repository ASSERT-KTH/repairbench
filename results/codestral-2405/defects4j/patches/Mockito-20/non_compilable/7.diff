diff --git a/tmp/223e8977-902c-4240-a638-91b3182ddaea_buggy.java b/tmp/6b56ac40-68cc-41db-8564-eebf593501ec_fixed.java
index f9a9b5b..1ae326a 100644
--- a/tmp/223e8977-902c-4240-a638-91b3182ddaea_buggy.java
+++ b/tmp/6b56ac40-68cc-41db-8564-eebf593501ec_fixed.java
@@ -1,30 +1,49 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
-        T mockInstance = null;
+
+    MockMethodInterceptor.MockAccess mockAccess;
     try {
+        T mockInstance;
+        if (settings.getOuterInstance() != null || settings.getTypeToMock().getEnclosingClass() != null) {
+            // Handle inner classes or classes with outer instance
+            Constructor<?> constructor = settings.getTypeToMock().getDeclaredConstructor(settings.getTypeToMock().getEnclosingClass());
+            constructor.setAccessible(true);
+            mockInstance = (T) constructor.newInstance(settings.getOuterInstance());
+        } else if (settings.getConstructorArgs() != null) {
+            // Handle classes with constructor arguments
+            Class<?>[] paramTypes = new Class<?>[settings.getConstructorArgs().length];
+            for (int i = 0; i < paramTypes.length; i++) {
+                paramTypes[i] = settings.getConstructorArgs()[i].getClass();
+            }
+            Constructor<?> constructor = settings.getTypeToMock().getDeclaredConstructor(paramTypes);
+            constructor.setAccessible(true);
+            mockInstance = (T) constructor.newInstance(settings.getConstructorArgs());
+        } else if (Modifier.isAbstract(settings.getTypeToMock().getModifiers())) {
+            // Handle abstract classes
+            mockInstance = (T) Proxy.newProxyInstance(settings.getTypeToMock().getClassLoader(), new Class[]{settings.getTypeToMock()}, new InvocationHandler() {
+                @Override
+                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+                    return null;
+                }
+            });
+        } else {
+            // Handle default case
             mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
+        }
+        mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
+    } catch (ClassCastException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getName() + "'. Please ensure that the class is mockable.", e);
+    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    }
+
     mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
     return ensureMockIsAssignableToMockedType(settings, mockInstance);
-        } catch (ClassCastException cce) {
-            throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
-                    "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
-                    ""
-            ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
-        }
 }
\ No newline at end of file
