diff --git a/tmp/b81cf807-28ea-4cab-8151-ae6c616e1ef3_buggy.java b/tmp/87e7cc89-995f-4c57-89c9-c15566beef9e_fixed.java
index f9a9b5b..cdc1c23 100644
--- a/tmp/b81cf807-28ea-4cab-8151-ae6c616e1ef3_buggy.java
+++ b/tmp/87e7cc89-995f-4c57-89c9-c15566beef9e_fixed.java
@@ -1,30 +1,28 @@
-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
+public <T> T createMock(Class<T> clazz, MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
-                settings.getTypeToMock(),
-                settings.getExtraInterfaces()
-        );
-        T mockInstance = null;
+
     try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        Constructor<T> constructor = null;
+        Object outerInstance = null;
+
+        if (settings.getTypeToMock().isMemberClass() &&
+                (Modifiers.STATIC ^ settings.getTypeToMock().getModifiers()) == 0) {
+            outerInstance = settings.getOuterInstance();
+            constructor = clazz.getDeclaredConstructor(clazz.getEnclosingClass());
+        } else {
+            constructor = clazz.getDeclaredConstructor();
+        }
+
+        constructor.setAccessible(true);
+        T mockInstance = outerInstance == null ? constructor.newInstance() : constructor.newInstance(outerInstance);
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
-        } catch (ClassCastException cce) {
-            throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
-                    "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
-                    ""
-            ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {
+        throw new MockitoException("Unable to create mock instance of type '"
+                + clazz.getSimpleName() + "'", e);
     }
 }
\ No newline at end of file
