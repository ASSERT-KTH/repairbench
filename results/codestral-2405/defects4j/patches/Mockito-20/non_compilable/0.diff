diff --git a/tmp/dc419b54-3900-4d00-90fa-7d3db6db87ff_buggy.java b/tmp/ec75a5d5-085e-40e4-9c97-909dfa93ef13_fixed.java
index f9a9b5b..a743107 100644
--- a/tmp/dc419b54-3900-4d00-90fa-7d3db6db87ff_buggy.java
+++ b/tmp/ec75a5d5-085e-40e4-9c97-909dfa93ef13_fixed.java
@@ -1,30 +1,35 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
-        T mockInstance = null;
+
+    T mockInstance;
     try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        if (settings.useConstructor()) {
+            ConstructorLookup constructorLookup = new ConstructorLookup(mockedProxyType, settings.getOuterInstance());
+            ConstructorInvocation constructorInvocation = constructorLookup.getConstructorInvocation();
+            mockInstance = constructorInvocation.invoke();
+        } else if (mockedProxyType.isAssignableFrom(OverrideMockingDefaultsSubclassMockMaker.class)
+                || InliningFailSafeSubclassMockMaker.class.isAssignableFrom(mockedProxyType)
+                || MockitoNamingPolicy.getDefault().mockTypeName().equals(mockedProxyType.getSimpleName())) {
+            mockInstance = InstantiatingVisitor.instantiateClass(mockedProxyType);
+        } else {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'." +
+                    " Please ensure that the target class is available in the classpath and has a 0-arg constructor.");
+        }
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
-            throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
-                    "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
-                    ""
-            ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException(/*...error message...*/, cce);
+    } catch (Exception e) {
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
     }
 }
\ No newline at end of file
