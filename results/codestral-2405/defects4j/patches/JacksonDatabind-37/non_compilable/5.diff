diff --git a/tmp/e0383da4-43c6-4879-b579-f12865026b47_buggy.java b/tmp/64d48a26-63bc-4df2-b3ec-1fbfb4e290ea_fixed.java
index e5ad041..0f8291b 100644
--- a/tmp/e0383da4-43c6-4879-b579-f12865026b47_buggy.java
+++ b/tmp/64d48a26-63bc-4df2-b3ec-1fbfb4e290ea_fixed.java
@@ -1,19 +1,27 @@
 @Override
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
+
     if (!_class.isAssignableFrom(subclass)) {
         throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                 +_class.getName());
     }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+
+    // Re-resolve all the type parameters to maintain correct hierarchy
+    JavaType superClass = null;
+    if(_superClass != null) {
+        superClass = _superClass.narrowBySubclass(subclass);
+    }
+    JavaType[] superInterfaces = null;
+    if(_superInterfaces != null) {
+        superInterfaces = new JavaType[_superInterfaces.length];
+        for (int i = 0; i < _superInterfaces.length; i++) {
+            superInterfaces[i] = _superInterfaces[i].narrowBySubclass(subclass);
+        }
+    }
+    return new SimpleType(subclass, _bindings, superClass, superInterfaces,
             _valueHandler, _typeHandler, _asStatic);
 }
\ No newline at end of file
