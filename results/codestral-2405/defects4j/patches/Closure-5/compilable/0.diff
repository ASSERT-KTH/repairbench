diff --git a/tmp/1edbb52b-b9d7-4b81-86f3-e92e3adef219_buggy.java b/tmp/6610dc7c-dc06-47b2-8ac7-06a209e06f0f_fixed.java
index 31af44b..5d6f9b6 100644
--- a/tmp/1edbb52b-b9d7-4b81-86f3-e92e3adef219_buggy.java
+++ b/tmp/6610dc7c-dc06-47b2-8ac7-06a209e06f0f_fixed.java
@@ -1,107 +1,77 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically, we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
 private boolean isInlinableObject(List<Reference> refs) {
-      boolean ret = false;
+  boolean ret = true;
   Set<String> validProperties = Sets.newHashSet();
+
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
     Node gramps = ref.getGrandparent();
 
-        // Ignore most indirect references, like x.y (but not x.y(),
-        // since the function referenced by y might reference 'this').
-        //
+    // Ignore most indirect references
     if (parent.isGetProp()) {
       Preconditions.checkState(parent.getFirstChild() == name);
       // A call target may be using the object as a 'this' value.
       if (gramps.isCall()
           && gramps.getFirstChild() == parent) {
-            return false;
+        ret = false;
       }
 
-          // Deleting a property has different semantics from deleting
-          // a variable, so deleted properties should not be inlined.
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+      // We care about a deletion if it happens to a property we've seen before
       String propName = parent.getLastChild().getString();
+      if (gramps.isDelProp()) {
+        if (validProperties.contains(propName)) {
+          ret = false;
+        }
+        continue;
+      }
+
       if (!validProperties.contains(propName)) {
         if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
           validProperties.add(propName);
         } else {
-              return false;
+          ret = false;
         }
       }
       continue;
     }
 
-        // Only rewrite VAR declarations or simple assignment statements
+    // Only accept VAR declarations or simple assignment statements
     if (!isVarOrAssignExprLhs(name)) {
-           return false;
+      ret = false;
     }
 
     Node val = ref.getAssignedValue();
     if (val == null) {
-          // A var with no assignment.
       continue;
     }
 
-        // We're looking for object literal assignments only.
+    // Only consider object literal assignments
     if (!val.isObjectLit()) {
-          return false;
+      ret = false;
     }
 
-        // Make sure that the value is not self-referential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
-            return false;
+    // Check for self-referential assignments
+    for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+      if (child.isGetterDef() || child.isSetterDef()) {
+        // ES5 get/set not supported
+        ret = false;
       }
 
       validProperties.add(child.getString());
 
       Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
       for (Reference t : refs) {
         Node refNode = t.getParent();
         while (!NodeUtil.isStatementBlock(refNode)) {
           if (refNode == childVal) {
-                // There's a self-referential assignment
-                return false;
+            // found a self-referential assignment
+            ret = false;
           }
           refNode = refNode.getParent();
         }
       }
     }
-
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
   }
+
   return ret;
 }
\ No newline at end of file
