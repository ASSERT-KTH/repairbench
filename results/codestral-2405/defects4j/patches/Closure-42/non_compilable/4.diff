diff --git a/tmp/d7f67bf9-60f0-4dcf-9f1a-0d35c1f84441_buggy.java b/tmp/f786ae5d-5265-451f-a9b3-db51b61f17b6_fixed.java
index 4d0be80..9cdf098 100644
--- a/tmp/d7f67bf9-60f0-4dcf-9f1a-0d35c1f84441_buggy.java
+++ b/tmp/f786ae5d-5265-451f-a9b3-db51b61f17b6_fixed.java
@@ -1,10 +1,24 @@
 @Override
-    Node processForInLoop(ForInLoop loopNode) {
-
-        // Return the bare minimum to put the AST in a valid state.
+Node processForInLoop(BaseNode loopNode) {
+    if (loopNode.isForInLoop()) {
+        // Process "for-in" loop nodes.
         return newNode(
             Token.FOR,
-          transform(loopNode.getIterator()),
-          transform(loopNode.getIteratedObject()),
-          transformBlock(loopNode.getBody()));
+            Token.VAR,
+            transform(loopNode.asForInLoop().getIterator()),
+            Token.IN,
+            transform(loopNode.asForInLoop().getIteratedObject()),
+            transformBlock(loopNode.asForInLoop().getBody()));
+    } else if (loopNode.isForEachLoop()) {
+        // Process "for-each" loop nodes.
+        return newNode(
+            Token.FOR,
+            Token.VAR,
+            transform(loopNode.asForEachLoop().getIterator()),
+            Token.IN,
+            transform(new Node(Token.THIS), new Node(loopNode.asForEachLoop().getIteratedObject())),
+            transformBlock(loopNode.asForEachLoop().getBody()));
+    }
+    // Throw exception for unsupported loop types.
+    throw new UnsupportedOperationException("Unsupported loop type: " + loopNode.getClass().getName());
 }
\ No newline at end of file
