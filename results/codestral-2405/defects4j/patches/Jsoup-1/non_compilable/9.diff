diff --git a/tmp/ffdc4bf5-2006-4740-b86f-0eac870adaf9_buggy.java b/tmp/e79a0b47-7178-49d0-a478-860d8093c144_fixed.java
index 00914da..8f19af0 100644
--- a/tmp/ffdc4bf5-2006-4740-b86f-0eac870adaf9_buggy.java
+++ b/tmp/e79a0b47-7178-49d0-a478-860d8093c144_fixed.java
@@ -1,17 +1,22 @@
-    // does not recurse.
-    private void normalise(Element element) {
+private void normalize(Element element) {
+    if (element.tag().getName().equals("body")) { // Only perform normalization for body elements
         List<Node> toMove = new ArrayList<Node>();
-        for (Node node: element.childNodes) {
+        for (Node node: new ArrayList<>(element.childNodes)) { // Use a copy to avoid ConcurrentModificationException
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
-                if (!tn.isBlank())
-                    toMove.add(tn);
+                if (tn.isBlank()) {
+                    continue; // Skip blank text nodes
                 }
             }
-
-        for (Node node: toMove) {
-            element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+            if (!toMove.isEmpty()) { // Insert collected nodes at the beginning of the body
+                element.childNodes.addAll(0, toMove);
+                toMove.clear();
+            }
+            toMove.add(node);
+            element.removeChild(node); // Remove the node from its original position
+        }
+        if (!toMove.isEmpty()) { // Insert remaining collected nodes at the beginning of the body
+            element.childNodes.addAll(0, toMove);
+        }
     }
 }
\ No newline at end of file
