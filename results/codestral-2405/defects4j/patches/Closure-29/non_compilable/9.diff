diff --git a/tmp/9809ce13-81df-4157-9df0-2d158701943a_buggy.java b/tmp/2d8653c2-93d7-4631-965c-5fb39062f634_fixed.java
index be9c8a3..c40b4ed 100644
--- a/tmp/9809ce13-81df-4157-9df0-2d158701943a_buggy.java
+++ b/tmp/2d8653c2-93d7-4631-965c-5fb39062f634_fixed.java
@@ -1,94 +1,98 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
 private boolean isInlinableObject(List<Reference> refs) {
   boolean ret = false;
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
     Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
+    // Ignore indirect references, like x.y or x.y().
     if (parent.isGetProp()) {
-          Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+      if (parent.getFirstChild() == name) {
+        if (gramps.isCall() && gramps.getFirstChild() == parent) {
           return false;
         }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+        // Check for indirect references via past references or a prototype.
+        if (isIndirectReference(ref, refs)) {
+          return false;
+        }
+      }
       continue;
     }
 
     // Only rewrite VAR declarations or simple assignment statements
     if (!isVarOrAssignExprLhs(name)) {
       return false;
     }
 
+    // Check for object literal assignments
     Node val = ref.getAssignedValue();
-        if (val == null) {
-          // A var with no assignment.
-          continue;
-        }
-
-        // We're looking for object literal assignments only.
-        if (!val.isObjectLit()) {
+    if (val == null || !val.isObjectLit()) {
       return false;
     }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
-            return false;
-          }
-
-
-          Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
-          for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
-                // There's a self-referential assignment
-                return false;
-              }
-              refNode = refNode.getParent();
-            }
-          }
-        }
-
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
+    // Make sure that the value is not self-referential (exclude unorderable self-referential assignments).
+    if (!isValueSelfReferential(val, refs)) {
       ret = true;
+    } else {
+      return false;
+    }
   }
   return ret;
 }
+
+// Check if the childValue is an indirect reference (past reference or a prototype).
+private boolean isIndirectReference(Reference ref, List<Reference> refs) {
+  Node parent = ref.getParent();
+  Node childValue = parent.getLastChild();
+  for (Reference t : refs) {
+    Node refNode = t.getParent();
+    while (!NodeUtil.isStatementBlock(refNode)) {
+      if (refNode == childValue && refNode != ref.getNode()) {
+        return true;
+      }
+      refNode = refNode.getParent();
+    }
+  }
+  return false;
+}
+
+// Check if the value is self-referential by using a depth-first search.
+private boolean isValueSelfReferential(Node value, List<Reference> refs, Set<Node> visited) {
+  if (visited.contains(value)) {
+    return false;
+  }
+  visited.add(value);
+
+  for (Node child = value.getFirstChild(); child != null; child = child.getNext()) {
+    if (child.isGetterDef() || child.isSetterDef()) {
+      return false;
+    }
+
+    Node childVal = child.getFirstChild();
+    for (Reference t : refs) {
+      Node refNode = t.getParent();
+      if (refNode == childVal && isAncestorOfCircularReference(t, value)) {
+        return true;
+      }
+    }
+
+    if (isValueSelfReferential(childVal, refs, visited)) {
+      return true;
+    }
+  }
+
+  return false;
+}
+
+// Check if the node is an ancestor of a circular reference.
+private boolean isAncestorOfCircularReference(Reference ref, Node value) {
+  Node refNode = ref.getParent();
+  while (refNode != null) {
+    if (refNode == value) {
+      return true;
+    }
+    refNode = refNode.getParent();
+  }
+  return false;
+}
\ No newline at end of file
