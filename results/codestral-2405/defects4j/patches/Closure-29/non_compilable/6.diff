diff --git a/tmp/e2830617-51c9-454c-81b5-15575d878259_buggy.java b/tmp/60fb8249-8bdf-4c69-82fa-a24fa7c30108_fixed.java
index be9c8a3..09e174d 100644
--- a/tmp/e2830617-51c9-454c-81b5-15575d878259_buggy.java
+++ b/tmp/60fb8249-8bdf-4c69-82fa-a24fa7c30108_fixed.java
@@ -1,94 +1,97 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
-    private boolean isInlinableObject(List<Reference> refs) {
-      boolean ret = false;
+private boolean isInlinableObject(List<Reference> refs, Node objectLiteral) {
     for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
         if (parent.isGetProp()) {
             Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+
+            if (gramps.isCall() && gramps.getFirstChild() == parent) {
                 return false;
             }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+            if (!hasOwnPropertyBarringConstructors(objectLiteral, name)) {
+                return false;
+            }
             continue;
         }
 
-        // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
-          // A var with no assignment.
             continue;
         }
 
-        // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
             return false;
         }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
+        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+            if (child.isGetterDef() || child.isSetterDef()) {
                 return false;
             }
 
-
             Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
             for (Reference t : refs) {
                 Node refNode = t.getParent();
                 while (!NodeUtil.isStatementBlock(refNode)) {
                     if (refNode == childVal) {
-                // There's a self-referential assignment
                         return false;
                     }
                     refNode = refNode.getParent();
                 }
             }
         }
+    }
+    return true;
+}
 
+private boolean hasOwnPropertyBarringConstructors(Node obj, Node property) {
+    if (obj.hasChildren()) {
+        for (Node child = obj.getFirstChild(); child != null; child = child.getNext()) {
+            if (child.isStringKey() && child.getString().equals(property.getString())) {
+                return true;
+            }
+        }
+    }
 
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
+    return hasOwnPrototypeProperty(obj, property);
+}
+
+private boolean hasOwnPrototypeProperty(Node obj, Node property) {
+    Node prototype = Node.newString("prototype");
+
+    if (obj.isGetProp() && obj.getFirstChild().isName() && obj.getFirstChild().getString().equals("Object")) {
+        return referenceHasPrototypeProperty(property);
+    }
+
+    Node parentObject = obj.getParent();
+    if (!parentObject.isGetProp() || parentObject.getLastChild() != obj) {
+        return false;
+    }
+
+    Node parentObjectName = parentObject.getFirstChild();
+    if (parentObjectName.isName() && parentObjectName.getString().equals("Object")) {
+        return referenceHasPrototypeProperty(property);
+    }
+
+    return hasOwnPrototypeProperty(parentObject, prototype) && hasOwnPropertyBarringConstructors(parentObjectName, property);
+}
+
+private boolean referenceHasPrototypeProperty(Node property) {
+    // Check if the property is defined on Object.prototype
+    // To prevent code explosion, assume all properties are defined if the referenced name is not a simple name.
+    if (property.isName()) {
+        String propName = property.getString();
+        try {
+            Object.class.getField(propName);
+        } catch (NoSuchFieldException e) {
+            return false;
+        }
     }
-      return ret;
+    return true;
 }
\ No newline at end of file
