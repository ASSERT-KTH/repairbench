diff --git a/tmp/3621dd04-3836-4684-8952-c7cad4329026_buggy.java b/tmp/e8f0dc8b-778a-4a5d-ae65-335cc9b6b2d9_fixed.java
index be9c8a3..414db4e 100644
--- a/tmp/3621dd04-3836-4684-8952-c7cad4329026_buggy.java
+++ b/tmp/e8f0dc8b-778a-4a5d-ae65-335cc9b6b2d9_fixed.java
@@ -1,94 +1,41 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
-    private boolean isInlinableObject(List<Reference> refs) {
-      boolean ret = false;
+    private boolean isInlinableObject(List<Reference> refs, Node val) {
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
-        Node gramps = ref.getGrandparent();
+        Node grandParent = ref.getGrandparent();
+        Node greatGrandParent = grandParent != null ? grandParent.getParent() : null;
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+          if (grandParent.isCall() && grandParent.getFirstChild() == parent) {
+            return false;
+          }
+          if (grandParent.isGetProp()) {
+            if (greatGrandParent != val) {
               return false;
             }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
             continue;
           }
+          return false;
+        }
 
-        // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
         }
 
-        Node val = ref.getAssignedValue();
-        if (val == null) {
-          // A var with no assignment.
-          continue;
-        }
+        Node valueNode = ref.getAssignedValue();
 
-        // We're looking for object literal assignments only.
-        if (!val.isObjectLit()) {
+        if (valueNode == null || !valueNode.isObjectLit()) {
           return false;
         }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
+        for (Node child = valueNode.getFirstChild(); child != null;
              child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
-            return false;
+          Node childKey = child.getFirstChild();
+          if (childKey != null && childKey.isName() && childKey.getString().equals(name.getString())) {
+            return false; // Self-referential assignment
           }
-
-
-          Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
-          for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
-                // There's a self-referential assignment
-                return false;
         }
-              refNode = refNode.getParent();
       }
-          }
-        }
-
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
-      }
-      return ret;
+      return true;
     }
\ No newline at end of file
