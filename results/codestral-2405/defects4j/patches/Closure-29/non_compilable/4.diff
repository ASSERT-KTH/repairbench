diff --git a/tmp/887520f0-29d6-428e-93d8-7e72200aa8fb_buggy.java b/tmp/3eeec562-1d92-49d4-82c1-8af800e2254b_fixed.java
index be9c8a3..20c9e6d 100644
--- a/tmp/887520f0-29d6-428e-93d8-7e72200aa8fb_buggy.java
+++ b/tmp/3eeec562-1d92-49d4-82c1-8af800e2254b_fixed.java
@@ -1,94 +1,55 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
 private boolean isInlinableObject(List<Reference> refs) {
     boolean ret = false;
+
+    HashSet<Node> objectLiterals = new HashSet<>();
+
     for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
         if (parent.isGetProp()) {
             Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+            if (gramps.isCall() && gramps.getFirstChild() == parent) {
                 return false;
             }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
             continue;
         }
 
-        // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
             return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
-          // A var with no assignment.
             continue;
         }
 
-        // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
             return false;
         }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
+        objectLiterals.add(val);
+
+        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+            if (child.isGetterDef() || child.isSetterDef()) {
                 return false;
             }
 
-
             Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
-          for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
-                // There's a self-referential assignment
+            for (Node o : objectLiterals) {
+                if (includesSelfReference(o, childVal)) {
                     return false;
                 }
-              refNode = refNode.getParent();
             }
         }
-        }
-
 
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
         ret = true;
     }
     return ret;
 }
+
+private boolean includesSelfReference(Node val, Node childVal) {
+    return val == childVal ||
+        (childVal.isGetProp() && includesSelfReference(val, childVal.getFirstChild()));
+}
\ No newline at end of file
