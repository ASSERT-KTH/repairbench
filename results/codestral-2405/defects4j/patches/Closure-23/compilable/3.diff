diff --git a/tmp/3d1c07ff-705b-49d9-a0b4-a09165bce60e_buggy.java b/tmp/1d30223a-a695-4a82-80cd-146b4ee844b1_fixed.java
index cfdcd9c..02569de 100644
--- a/tmp/3d1c07ff-705b-49d9-a0b4-a09165bce60e_buggy.java
+++ b/tmp/1d30223a-a695-4a82-80cd-146b4ee844b1_fixed.java
@@ -1,51 +1,34 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
         return n;
     }
 
     if (!right.isNumber()) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
-    if (intIndex < 0) {
+    if (intIndex < 0 || intIndex >= left.getChildCount()) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
-      current = current.getNext();
-    }
-
-    if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
+    Node elem = left.getChildAtIndex(intIndex);
 
     if (elem.isEmpty()) {
         elem = NodeUtil.newUndefinedNode(elem);
     } else {
         left.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
