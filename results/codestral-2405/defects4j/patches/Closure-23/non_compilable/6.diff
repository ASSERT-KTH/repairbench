diff --git a/tmp/97bcf0eb-c596-4bf3-9553-a2bf15b9569e_buggy.java b/tmp/9b8fd0bb-bc14-40b1-a672-72dc00cbf933_fixed.java
index cfdcd9c..73d6467 100644
--- a/tmp/97bcf0eb-c596-4bf3-9553-a2bf15b9569e_buggy.java
+++ b/tmp/9b8fd0bb-bc14-40b1-a672-72dc00cbf933_fixed.java
@@ -1,51 +1,57 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
-    if (isAssignmentTarget(n)) {
+    // If GETPROP/GETELEM is used as assignment target, the array literal is
+    // acting as a temporary, we can't fold it here: "[][0] += 1"
+    if (parent.isAssign() || parent.isIncDecOp()) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
-    Node current = left.getFirstChild();
+    Node arrayLiteral = left;
+    if (!arrayLiteral.isObjectLit()) {
+      return n;
+    }
+
     Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
-      current = current.getNext();
+    for (Node child = arrayLiteral.getFirstChild(); child != null && intIndex >= 0; child = child.getNext()) {
+      if (child.isStringKey() || child.isEmpty()) {
+        intIndex--;
+      }
+      if (intIndex == 0) {
+        elem = child;
+        break;
+      }
     }
 
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
-    } else {
-      left.removeChild(elem);
+    Node value = elem.getLastChild();
+    if (value == null) {
+      value = NodeUtil.newUndefinedNode(elem);
     }
 
     // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    n.getParent().replaceChild(n, value);
     reportCodeChange();
-    return elem;
+    return value;
   }
\ No newline at end of file
