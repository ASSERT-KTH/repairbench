diff --git a/tmp/beb14066-3e3f-4464-a71f-d2ac70f10522_buggy.java b/tmp/1e42ddbd-be77-4b04-901a-9bc705eb3188_fixed.java
index 800e6e1..f873ba6 100644
--- a/tmp/beb14066-3e3f-4464-a71f-d2ac70f10522_buggy.java
+++ b/tmp/1e42ddbd-be77-4b04-901a-9bc705eb3188_fixed.java
@@ -1,32 +1,48 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n == scope.getRootNode()) return;
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+    if (n == scope.getRootNode() || parent == n) return;
 
-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {
+    if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {
       handleFunctionInputs(parent);
       return;
     }
 
     attachLiteralTypes(n);
     switch (n.getType()) {
         case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
+        case Token.GETPROP:
+            if (parent.getType() != Token.ROOT) {
+                defineNamespacedFunction(n, parent);
             }
-          defineDeclaredFunction(n, parent);
             break;
         case Token.CATCH:
             defineCatch(n, parent);
             break;
         case Token.VAR:
             defineVar(n, parent);
             break;
     }
 }
+
+private void defineNamespacedFunction(Node function, Node parent) {
+    Node nameNode = getFunctionNameNode(function);
+    if (nameNode == null) {
+        return;
+    }
+
+    String name = nameNode.getString();
+    Var var = scope.getVar(name);
+    if (var == null) {
+        var = scope.createVar(name);
+    }
+    var.setType(getNodeJSType(function));
+    var.setNameNode(nameNode);
+}
+
+private Node getFunctionNameNode(Node function) {
+    // Implementation to return the name node of the function
+}
+
+private JSType getNodeJSType(Node node) {
+    // Implementation to return the JS Type of the node
+}
\ No newline at end of file
