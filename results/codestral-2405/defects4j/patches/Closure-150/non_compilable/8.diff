diff --git a/tmp/522f2f34-e88f-435b-8ba5-d9d13e765637_buggy.java b/tmp/b7530bbf-4305-4ba5-9871-db6514196cfe_fixed.java
index 800e6e1..b8ea531 100644
--- a/tmp/522f2f34-e88f-435b-8ba5-d9d13e765637_buggy.java
+++ b/tmp/b7530bbf-4305-4ba5-9871-db6514196cfe_fixed.java
@@ -1,32 +1,53 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
+  if (n != null && n.getType() == Token.NAME) {
+    Node grandParent = parent.getParent();
+    if (grandParent != null && grandParent.getType() == Token.GETPROP) {
+      String name = n.getString();
+      Node root = scope.getRootNode();
+      NodeTraversal traversal = scope.getTraversal();
+      if (root != null && root.getType() == Token.SCRIPT && name.contains(".")) {
+        String[] parts = name.split("\\.");
+        JSType parentType = null;
+        JSType type = null;
+        Node currentNode = n;
+        for (String part : parts) {
+          type = scope.getTypeOfNode(currentNode);
+          if (parentType != null && parentType.isObjectType() && !type.isUnknownType()) {
+            ObjectType objectType = parentType.toObjectType();
+            if (!objectType.hasProperty(part)) {
+              objectType.defineDeclaredProperty(part, type, null);
+            }
+          }
+          parentType = type;
+          currentNode = currentNode.getParent();
+          if (currentNode == null || currentNode.getType() != Token.GETPROP) break;
+          currentNode = currentNode.getLastChild();
+        }
+        return;
+      }
+    }
+  }
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
