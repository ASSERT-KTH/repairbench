diff --git a/tmp/72024fc5-2481-47df-b90b-229d02c2f87c_buggy.java b/tmp/1170ffd3-d805-4297-ac63-a025f38c18b6_fixed.java
index 800e6e1..1c6fe54 100644
--- a/tmp/72024fc5-2481-47df-b90b-229d02c2f87c_buggy.java
+++ b/tmp/1170ffd3-d805-4297-ac63-a025f38c18b6_fixed.java
@@ -1,32 +1,44 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
-          }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.NAME:
+      if (parent.getType() == Token.GETPROP &&
+          parent.getFirstChild().equals(n) &&
+          parent.getJSType() instanceof FunctionType) {
+        handleNamespaceProperty(n, parent);
+      }
+      break;
+  }
+}
+
+private void handleNamespaceProperty(Node nameNode, Node parent) {
+  Node objectNode = parent.getFirstChild();
+  Node propertyNode = parent.getLastChild();
+
+  JSType objectType = objectNode.getJSType();
+  if (objectType != null && objectType.isObjectType()) {
+    ObjectType objectObjectType = objectType.toObjectType();
+    if (objectObjectType.hasOwnProperty(propertyNode.getString())) {
+      scope.declare(
+          nameNode,
+          objectObjectType.getPropertyType(propertyNode.getString()),
+          symbolTable.getReadableNameForNode(parent));
+    }
   }
 }
\ No newline at end of file
