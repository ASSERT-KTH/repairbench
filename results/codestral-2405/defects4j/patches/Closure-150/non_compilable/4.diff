diff --git a/tmp/238edb9d-9d0b-4703-a4bc-f4706820746f_buggy.java b/tmp/7f62fbad-b0b8-4eb1-b1d0-e626a3f22a06_fixed.java
index 800e6e1..c7435db 100644
--- a/tmp/238edb9d-9d0b-4703-a4bc-f4706820746f_buggy.java
+++ b/tmp/7f62fbad-b0b8-4eb1-b1d0-e626a3f22a06_fixed.java
@@ -1,32 +1,43 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
+      if (parent != null && parent.getType() == Token.NAME) {
+        handleNamespacedFunction(n, parent);
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
+
+private void handleNamespacedFunction(Node function, Node parent) {
+  String functionName = parent.getString();
+  Node grandParent = parent.getParent();
+  if (grandParent != null && grandParent.getType() == Token.GETPROP) {
+    String namespaceName = grandParent.getFirstChild().getString();
+    Node namespaceNode = scope.getVar(namespaceName);
+    if (namespaceNode != null) {
+      JSType namespaceType = scope.getTypeOfOrUnknown(namespaceNode);
+      if (namespaceType.isObject()) {
+        ObjectType objectType = (ObjectType) namespaceType;
+        JSType functionStub = JSType.getFunctionType(objectType);
+        objectType.defineProperty(functionName, functionStub, Node.newString(functionName));
+        scope.setTypeOf(namespaceNode, objectType);
+      }
+    }
+  }
+}
\ No newline at end of file
