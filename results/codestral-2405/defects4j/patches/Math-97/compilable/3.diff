diff --git a/tmp/f34327ad-5676-4f33-ad94-cdde7d8f5415_buggy.java b/tmp/c47a1003-0315-4c15-9068-af33155b8ffa_fixed.java
index 88647d1..4baf754 100644
--- a/tmp/f34327ad-5676-4f33-ad94-cdde7d8f5415_buggy.java
+++ b/tmp/c47a1003-0315-4c15-9068-af33155b8ffa_fixed.java
@@ -1,44 +1,48 @@
 /**
  * Find a zero in the given interval.
  * <p>
  * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
+ * signs or at least one endpoint is a root. An <code>IllegalArgumentException</code>
+ * is thrown if this is not the case.</p>
  *
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
+ * @throws FunctionEvaluationException if an error occurs evaluating the function
  * @throws IllegalArgumentException if min is not less than max or the
  * signs of the values of the function at the endpoints are not opposites
+ * and neither endpoint is a root
  */
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
-        FunctionEvaluationException {
+public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifyInterval(min, max);
 
     double ret = Double.NaN;
 
     double yMin = f.value(min);
     double yMax = f.value(max);
 
     // Verify bracketing
     double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
+    if (sign > 0) {
         // neither value is close to zero and min and max do not bracket root.
         throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
+        ("Function values at endpoints do not have different signs and neither endpoint is a root." +
                 "  Endpoints: [" + min + "," + max + "]" +
                 "  Values: [" + yMin + "," + yMax + "]");
+    } else {
+        if (Math.abs(yMin) <= getFunctionValueAccuracy()) {
+            ret = min;
+        } else if (Math.abs(yMax) <= getFunctionValueAccuracy()) {
+            ret = max;
         } else {
             // solve using only the first endpoint as initial guess
             ret = solve(min, yMin, max, yMax, min, yMin);
             // either min or max is a root
         }
+    }
 
     return ret;
 }
\ No newline at end of file
