diff --git a/tmp/0488e7bc-5982-46c7-b989-f1dc4e8ad103_buggy.java b/tmp/1b633d50-f3a8-407e-a195-3d464d2e34de_fixed.java
index e087f95..8eb62c8 100644
--- a/tmp/0488e7bc-5982-46c7-b989-f1dc4e8ad103_buggy.java
+++ b/tmp/1b633d50-f3a8-407e-a195-3d464d2e34de_fixed.java
@@ -1,53 +1,51 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the buffer is too small, or if invalid bytes are detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2 || (offset + length) > buffer.length) {
+            throw new IllegalArgumentException("Buffer is too small or length is exceeding buffer size");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+            if (currentByte == 0 && stillPadding) {
                 continue;
             }
+
             if (currentByte == (byte) ' ') {
+                if (stillPadding) {
+                    continue;
+                }
                 break;
             }
-            }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+            result = (result << 3) + (currentByte - '0');
+            stillPadding = false;
         }
 
         return result;
     }
\ No newline at end of file
