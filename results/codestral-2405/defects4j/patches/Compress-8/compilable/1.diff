diff --git a/tmp/cb1a6557-b276-4bee-b84b-7fc9f140b604_buggy.java b/tmp/ca853a9a-70ae-4798-a8c3-3224992cda4b_fixed.java
index e087f95..9ae6b14 100644
--- a/tmp/cb1a6557-b276-4bee-b84b-7fc9f140b604_buggy.java
+++ b/tmp/ca853a9a-70ae-4798-a8c3-3224992cda4b_fixed.java
@@ -1,53 +1,55 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the buffer has less than 2 bytes, if it contains non-octal digits, or if it does not meet trailing SPACE or NUL requirements.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("The input buffer must be at least 2 bytes long.");
+        }
+
         long result = 0;
         boolean stillPadding = true;
+        boolean foundNonZero = false; // New variable to track if non-zero character is found
         int end = offset + length;
         int start = offset;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+
+            // Issue with trailing spaces only when there is a non-zero character
+            if (foundNonZero && (currentByte == 0 || currentByte == (byte)' ')) {
                 break;
             }
 
             // Skip leading spaces
             if (currentByte == (byte)' ' || currentByte == '0') {
                 if (stillPadding) {
+                    if (currentByte != (byte)' ') {
+                        foundNonZero = true;
+                    }
                     continue;
                 }
-                if (currentByte == (byte) ' ') {
-                break;
             }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
