diff --git a/tmp/1754e8b0-3fff-4dc3-82d5-79fe1ccd27e2_buggy.java b/tmp/a6fb6165-6473-4807-be21-9b2c4271958f_fixed.java
index e087f95..850e3a2 100644
--- a/tmp/1754e8b0-3fff-4dc3-82d5-79fe1ccd27e2_buggy.java
+++ b/tmp/a6fb6165-6473-4807-be21-9b2c4271958f_fixed.java
@@ -1,53 +1,60 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the buffer is not at least 2 bytes long,
+ * if it does not contain a trailing space/NUL, or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Buffer must be at least 2 bytes long");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+    for (int i = offset; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        // Skip leading spaces or '0' characters
+        if (currentByte == (byte)' ' || currentByte == (byte)'0') {
             if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
         }
 
+        stillPadding = false;
+
+        if (currentByte == (byte)' ' || currentByte == 0) {
             // Must have trailing NUL or space
             // May have additional NUL or space
+            if (i == end - 1 || i == end - 2 && buffer[i + 1] == 0) {
+                break;
+            }
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, offset, currentByte));
+        }
 
-            stillPadding = false;
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, offset, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
+
+        result = (result << 3) + (currentByte - '0'); // convert from ASCII
     }
 
     return result;
 }
\ No newline at end of file
