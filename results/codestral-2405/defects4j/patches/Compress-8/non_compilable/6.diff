diff --git a/tmp/73edf21d-686f-45ba-9577-65978b54d9d7_buggy.java b/tmp/00a44a79-62d3-487d-a152-3ce3a0ff1340_fixed.java
index e087f95..8bb2fb9 100644
--- a/tmp/73edf21d-686f-45ba-9577-65978b54d9d7_buggy.java
+++ b/tmp/00a44a79-62d3-487d-a152-3ce3a0ff1340_fixed.java
@@ -1,53 +1,67 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the length is less than 2 bytes,
+ * if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
     for (int i = start; i < end; i++){
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
         // Skip leading spaces
         if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
             if (currentByte == (byte) ' ') {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        // Check if the byte is a valid octal digit
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+        // Convert from ASCII and calculate the result
+        result = (result << 3) + (currentByte - '0');
+        stillPadding = false;
+    }
+
+    // Must have trailing NUL or space
+    if (i < end || (buffer[i] != ' ' && buffer[i] != 0)) {
+        throw new IllegalArgumentException("Expected trailing space or NUL");
+    }
+
+    // If an additional trailing NUL or space, check and skip
+    if (i + 1 < end && (buffer[i + 1] == ' ' || buffer[i + 1] == 0)) {
+        i++;
+    }
+
+    // If the buffer contains less characters than expected, throw an exception
+    if (i < end - 1) {
+        throw new IllegalArgumentException("Unexpected characters in the buffer");
     }
 
     return result;
 }
\ No newline at end of file
