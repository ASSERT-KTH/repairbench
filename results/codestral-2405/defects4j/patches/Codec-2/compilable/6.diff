diff --git a/tmp/354f8e9c-a4a7-4080-aa11-64f6175ce006_buggy.java b/tmp/5ee68859-1fed-4ba2-96da-0188dbefeb8a_fixed.java
index aea175a..a74c4e0 100644
--- a/tmp/354f8e9c-a4a7-4080-aa11-64f6175ce006_buggy.java
+++ b/tmp/5ee68859-1fed-4ba2-96da-0188dbefeb8a_fixed.java
@@ -1,76 +1,53 @@
-    /**
-     * <p>
-     * Encodes all of the provided data, starting at inPos, for inAvail bytes.
-     * Must be called at least twice:  once with the data to encode, and once
-     * with inAvail set to "-1" to alert encoder that EOF has been reached,
-     * so flush last remaining bytes (if not multiple of 3).
-     * </p><p>
-     * Thanks to "commons" project in ws.apache.org for the bitwise operations,
-     * and general approach.
-     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
-     * </p>
-     *
-     * @param in byte[] array of binary data to base64 encode.
-     * @param inPos Position to start reading data from.
-     * @param inAvail Amount of bytes available from input for encoding.
-     */
 void encode(byte[] in, int inPos, int inAvail) {
+    // return immediately if EOF has already been reached
     if (eof) {
         return;
     }
-        // inAvail < 0 is how we're informed of EOF in the underlying data we're
-        // encoding.
+    // inAvail < 0 is how we're informed of EOF in the underlying data we're encoding.
     if (inAvail < 0) {
         eof = true;
+        if (modulus != 0) {
+            // handle remaining bytes if the input size isn't a multiple of 3
+            x = x << (8 * (3 - modulus));
             if (buf == null || buf.length - pos < encodeSize) {
                 resizeBuf();
             }
-            switch (modulus) {
-                case 1:
-                    buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
-                    // URL-SAFE skips the padding to further reduce size.
-                    if (encodeTable == STANDARD_ENCODE_TABLE) {
-                        buf[pos++] = PAD;
-                        buf[pos++] = PAD;
+            for (int i = 0; i < modulus + 1; i++) {
+                buf[pos++] = encodeTable[(x >> (18 - 6 * i)) & MASK_6BITS];
             }
-                    break;
-
-                case 2:
-                    buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
             // URL-SAFE skips the padding to further reduce size.
             if (encodeTable == STANDARD_ENCODE_TABLE) {
+                while ((modulus + 1) < 3) {
                     buf[pos++] = PAD;
+                    modulus++;
+                }
             }
-                    break;
         }
         if (lineLength > 0) {
             System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
             pos += lineSeparator.length;
         }
     } else {
         for (int i = 0; i < inAvail; i++) {
             if (buf == null || buf.length - pos < encodeSize) {
                 resizeBuf();
             }
             modulus = (++modulus) % 3;
             int b = in[inPos++];
             if (b < 0) { b += 256; }
             x = (x << 8) + b;
             if (0 == modulus) {
                 buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                 buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
                 buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                 buf[pos++] = encodeTable[x & MASK_6BITS];
                 currentLinePos += 4;
                 if (lineLength > 0 && lineLength <= currentLinePos) {
                     System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                     pos += lineSeparator.length;
                     currentLinePos = 0;
                 }
             }
         }
     }
 }
\ No newline at end of file
