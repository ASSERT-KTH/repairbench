diff --git a/tmp/bb8879e5-1d5a-4eab-a8a2-41a687b9cc6a_buggy.java b/tmp/e9df6e8a-82b8-46d1-99ae-b03051859052_fixed.java
index 72a422c..cb001c0 100644
--- a/tmp/bb8879e5-1d5a-4eab-a8a2-41a687b9cc6a_buggy.java
+++ b/tmp/e9df6e8a-82b8-46d1-99ae-b03051859052_fixed.java
@@ -1,51 +1,63 @@
 /**
 * {@inheritDoc}
 */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if(index >= seqEnd - 2) {
+        return 0;
+    }
+
+    if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
 
-                // Check there's more than just an x after the &#
+            if(start >= seqEnd) {
+                return 0;
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
+        while(end < seqEnd && input.charAt(end) > 47 && input.charAt(end) < 58)
         {
+            if(isHex && (input.charAt(end) < 48 || input.charAt(end) > 57) &&
+               (input.charAt(end) < 65 || input.charAt(end) > 70) &&
+               (input.charAt(end) < 97 || input.charAt(end) > 102)) {
+                break;
+            }
             end++;
         }
 
+        if(end == start) {
+            return 0;
+        }
+
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return end - index + (isHex ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
