diff --git a/tmp/ea9785dc-9f2d-404d-9e02-3e9a250c870c_buggy.java b/tmp/055ad6b3-170e-4751-8214-f7bda9d6a15f_fixed.java
index 72a422c..17b80a9 100644
--- a/tmp/ea9785dc-9f2d-404d-9e02-3e9a250c870c_buggy.java
+++ b/tmp/055ad6b3-170e-4751-8214-f7bda9d6a15f_fixed.java
@@ -1,51 +1,50 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+        }
 
-                // Check there's more than just an x after the &#
+        // Check it has additional characters after the 'x' or '#'
+        if (start >= seqEnd) {
+            out.write(input.subSequence(index, start).toString());
+            return 0;
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
+        while(end < seqEnd && input.charAt(end) != ';')
         {
             end++;
         }
 
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
