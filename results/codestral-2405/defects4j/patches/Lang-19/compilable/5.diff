diff --git a/tmp/5cfe95d6-f9f7-46a8-8775-e41e0dcd3ca3_buggy.java b/tmp/d18bb778-ee00-4dc9-9680-e92a9ed6d219_fixed.java
index 72a422c..2895ba1 100644
--- a/tmp/5cfe95d6-f9f7-46a8-8775-e41e0dcd3ca3_buggy.java
+++ b/tmp/d18bb778-ee00-4dc9-9680-e92a9ed6d219_fixed.java
@@ -1,51 +1,52 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if(index >= seqEnd - 2 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+
     int start = index + 2;
     boolean isHex = false;
 
     char firstChar = input.charAt(start);
     if(firstChar == 'x' || firstChar == 'X') {
         start++;
         isHex = true;
 
         // Check there's more than just an x after the &#
+        if(start == seqEnd) {
+            return 0;
+        }
     }
 
     int end = start;
     // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+    while(end < seqEnd && input.charAt(end) != ';') {
         end++;
     }
 
     int entityValue;
     try {
         if(isHex) {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
         } else {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
         }
     } catch(NumberFormatException nfe) {
         System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
         return 0;
     }
 
     if(entityValue > 0xFFFF) {
         char[] chrs = Character.toChars(entityValue);
         out.write(chrs[0]);
         out.write(chrs[1]);
     } else {
         out.write(entityValue);
     }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd ? 1 : 0);
 }
\ No newline at end of file
