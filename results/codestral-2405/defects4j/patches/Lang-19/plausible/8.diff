diff --git a/tmp/7324e953-90e1-4504-b8eb-285b4256b7bb_buggy.java b/tmp/bcaca345-f2f2-43aa-932f-702db68000b6_fixed.java
index 72a422c..9186229 100644
--- a/tmp/7324e953-90e1-4504-b8eb-285b4256b7bb_buggy.java
+++ b/tmp/bcaca345-f2f2-43aa-932f-702db68000b6_fixed.java
@@ -1,51 +1,44 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+        if ((firstChar == 'x' || firstChar == 'X') && start < seqEnd - 1) {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';' && Character.isLetterOrDigit(input.charAt(end))) {
             end++;
         }
 
+        if (end > start) {
             int entityValue;
             try {
+                String number = input.subSequence(start, end).toString();
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(number, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(number);
                 }
             } catch (NumberFormatException nfe) {
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
                 return 0;
             }
 
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
-                out.write(chrs[0]);
-                out.write(chrs[1]);
+                out.write(chrs);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0);
+        }
     }
     return 0;
 }
\ No newline at end of file
