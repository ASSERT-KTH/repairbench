diff --git a/tmp/9df74e5f-5421-4965-835e-08fc17ae5752_buggy.java b/tmp/aceb0e05-4c99-46ed-9d32-ebed74752369_fixed.java
index d57736b..2cdad7c 100644
--- a/tmp/9df74e5f-5421-4965-835e-08fc17ae5752_buggy.java
+++ b/tmp/aceb0e05-4c99-46ed-9d32-ebed74752369_fixed.java
@@ -1,39 +1,21 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
-  private void inferPropertyTypesToMatchConstraint(
-      JSType type, JSType constraint) {
+private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
-    ObjectType constraintObj =
-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
+  ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
+        if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)
+            || !objType.getPropertyType(prop).isSubtype(propType)) {
+          // Always infer the widest type, in order to match the constraint
           JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
 }
\ No newline at end of file
