diff --git a/tmp/b0234ebf-8a6b-4a72-9fff-2b7681fc17a9_buggy.java b/tmp/9979cd5a-3f5b-4e74-ac5a-aee6c8c16c2a_fixed.java
index 388771b..cface4f 100644
--- a/tmp/b0234ebf-8a6b-4a72-9fff-2b7681fc17a9_buggy.java
+++ b/tmp/9979cd5a-3f5b-4e74-ac5a-aee6c8c16c2a_fixed.java
@@ -1,37 +1,30 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
     copy.data = new java.util.ArrayList();
+    copy.minY = Double.POSITIVE_INFINITY;
+    copy.maxY = Double.NEGATIVE_INFINITY;
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
             TimeSeriesDataItem item
                     = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
+                double y = clone.getValue().doubleValue();
+                copy.minY = Math.min(copy.minY, y);
+                copy.maxY = Math.max(copy.maxY, y);
             }
             catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
     }
     return copy;
 }
\ No newline at end of file
