diff --git a/tmp/f1074f33-069c-4bee-a722-bd28620e1e60_buggy.java b/tmp/c3cdd4d3-e50f-4c31-96eb-96f80096495c_fixed.java
index 388771b..1feac6a 100644
--- a/tmp/f1074f33-069c-4bee-a722-bd28620e1e60_buggy.java
+++ b/tmp/c3cdd4d3-e50f-4c31-96eb-96f80096495c_fixed.java
@@ -1,37 +1,30 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
-    public TimeSeries createCopy(int start, int end)
-            throws CloneNotSupportedException {
+public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
-        if (end < start) {
-            throw new IllegalArgumentException("Requires start <= end.");
+    if (end >= this.getItemCount() || start > end) {
+        throw new IllegalArgumentException("Invalid start or end index.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
     copy.data = new java.util.ArrayList();
-        if (this.data.size() > 0) {
+    copy.minY = Double.NaN;
+    copy.maxY = Double.NaN;
     for (int index = start; index <= end; index++) {
-                TimeSeriesDataItem item
-                        = (TimeSeriesDataItem) this.data.get(index);
+        TimeSeriesDataItem item = (TimeSeriesDataItem) this.getDataItem(index);
         TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
         try {
             copy.add(clone);
+            // Update minY and maxY for the copied series
+            double y = clone.getValue().doubleValue();
+            if (Double.isNaN(copy.minY) || y < copy.minY) {
+                copy.minY = y;
             }
-                catch (SeriesException e) {
+            if (Double.isNaN(copy.maxY) || y > copy.maxY) {
+                copy.maxY = y;
+            }
+        } catch (SeriesException e) {
             e.printStackTrace();
         }
     }
-        }
     return copy;
 }
\ No newline at end of file
