diff --git a/tmp/6ad5f61c-ad86-4ccd-966a-1b9237bd51b2_buggy.java b/tmp/e38effaa-9d6b-444f-a9ca-1433a223cb5c_fixed.java
index 388771b..9d3a3b3 100644
--- a/tmp/6ad5f61c-ad86-4ccd-966a-1b9237bd51b2_buggy.java
+++ b/tmp/e38effaa-9d6b-444f-a9ca-1433a223cb5c_fixed.java
@@ -1,37 +1,40 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
-        if (this.data.size() > 0) {
+    copy.data = new ArrayList<>();
+
+    if (end >= this.data.size()) {
+        end = this.data.size() - 1;
+    }
+
+    copy.minY = Double.POSITIVE_INFINITY;
+    copy.maxY = Double.NEGATIVE_INFINITY;
+
     for (int index = start; index <= end; index++) {
         TimeSeriesDataItem item
                 = (TimeSeriesDataItem) this.data.get(index);
         TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
         try {
             copy.add(clone);
+
+            double y = clone.getValue().doubleValue();
+            if (y < copy.minY) {
+                copy.minY = y;
+            }
+            if (y > copy.maxY) {
+                copy.maxY = y;
+            }
         }
         catch (SeriesException e) {
             e.printStackTrace();
         }
     }
-        }
+
     return copy;
 }
\ No newline at end of file
