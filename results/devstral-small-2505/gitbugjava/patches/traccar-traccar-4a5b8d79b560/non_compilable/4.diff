diff --git a/tmp/8851a4c6-cc92-440a-95c5-af080fd3a648_buggy.java b/tmp/72d0d5c9-b977-4d1f-b89c-7b505cbb1100_fixed.java
index 1c732f4..509a028 100644
--- a/tmp/8851a4c6-cc92-440a-95c5-af080fd3a648_buggy.java
+++ b/tmp/72d0d5c9-b977-4d1f-b89c-7b505cbb1100_fixed.java
@@ -1,88 +1,147 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         String sentence = (String) msg;
         sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
 
         Position position = new Position();
         position.setProtocol(getProtocolName());
 
         for (String entry : sentence.split(",")) {
             int delimiter = entry.indexOf('=');
             String key = entry.substring(0, delimiter);
             String value = entry.substring(delimiter + 1);
             switch (key) {
                 case "unit":
                     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                     if (deviceSession != null) {
                         position.setDeviceId(deviceSession.getDeviceId());
                     }
                     break;
-                case "gps_valid":
-                    position.setValid(Integer.parseInt(value) != 0);
+                case "unittype":
+                    position.set(Position.KEY_UNIT_TYPE, Integer.parseInt(value));
                     break;
-                case "datetime_actual":
-                    position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                case "address":
+                    position.set(Position.KEY_ADDRESS, value);
                     break;
-                case "latitude":
-                    position.setLatitude(Double.parseDouble(value));
+                case "kind":
+                    position.set(Position.KEY_KIND, Integer.parseInt(value));
+                    break;
+                case "pending":
+                    position.set(Position.KEY_PENDING, Integer.parseInt(value));
+                    break;
+                case "mileage":
+                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
+                    break;
+                case "odometer":
+                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
+                    break;
+                case "logic_state":
+                    position.set(Position.KEY_LOGIC_STATE, Integer.parseInt(value));
+                    break;
+                case "reason":
+                    position.set(Position.KEY_REASON, Integer.parseInt(value));
+                    break;
+                case "eventid":
+                    position.set(Position.KEY_EVENT, Integer.parseInt(value));
+                    break;
+                case "response":
+                    position.set(Position.KEY_RESPONSE, Integer.parseInt(value));
                     break;
                 case "longitude":
                     position.setLongitude(Double.parseDouble(value));
                     break;
+                case "latitude":
+                    position.setLatitude(Double.parseDouble(value));
+                    break;
                 case "altitude":
                     position.setAltitude(Double.parseDouble(value));
                     break;
+                case "gps_valid":
+                    position.setValid(Integer.parseInt(value) != 0);
+                    break;
+                case "gps_connected":
+                    position.set(Position.KEY_GPS_CONNECTED, Integer.parseInt(value) != 0);
+                    break;
+                case "satellites":
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    break;
                 case "velocity":
                     position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                     break;
                 case "heading":
                     position.setCourse(Integer.parseInt(value));
                     break;
-                case "eventid":
-                    position.set(Position.KEY_EVENT, Integer.parseInt(value));
+                case "emergency":
+                    position.set(Position.KEY_EMERGENCY, Integer.parseInt(value) != 0);
                     break;
-                case "mileage":
-                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
-                    break;
-                case "satellites":
-                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                case "driver":
+                    position.set(Position.KEY_DRIVER, Integer.parseInt(value) != 0);
                     break;
                 case "ignition":
                     position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                     break;
                 case "door":
                     position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                     break;
                 case "arm":
                     position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                     break;
+                case "disarm":
+                    position.set(Position.KEY_DISARMED, Integer.parseInt(value) != 0);
+                    break;
+                case "extra1":
+                case "extra2":
+                case "extra3":
+                    position.set(Position.PREFIX_EXTRA + (key.charAt(key.length() - 1) - '0'), Integer.parseInt(value));
+                    break;
+                case "siren":
+                    position.set(Position.KEY_SIREN, Integer.parseInt(value) != 0);
+                    break;
+                case "lock":
+                    position.set(Position.KEY_LOCK, Integer.parseInt(value) != 0);
+                    break;
+                case "immobilizer":
+                    position.set(Position.KEY_IMMOBILIZER, Integer.parseInt(value) != 0);
+                    break;
+                case "unlock":
+                    position.set(Position.KEY_UNLOCK, Integer.parseInt(value) != 0);
+                    break;
                 case "fuel":
                     position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                     break;
                 case "rpm":
                     position.set(Position.KEY_RPM, Integer.parseInt(value));
                     break;
+                case "modemsignal":
+                    position.set(Position.KEY_MODEM_SIGNAL, Integer.parseInt(value));
+                    break;
                 case "main_voltage":
                     position.set(Position.KEY_POWER, Double.parseDouble(value));
                     break;
                 case "backup_voltage":
                     position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                     break;
                 case "analog1":
                 case "analog2":
                 case "analog3":
                     position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
                     break;
-                case "extra1":
-                case "extra2":
-                case "extra3":
+                case "datetime_utc":
+                    position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                    break;
+                case "datetime_actual":
+                    position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                    break;
+                case "network":
+                    position.set(Position.KEY_NETWORK, value);
+                    break;
                 default:
                     position.set(key, value);
                     break;
             }
         }
 
         return position;
     }
\ No newline at end of file
