diff --git a/tmp/32d09030-211c-4e09-a220-380a3dacf851_buggy.java b/tmp/5200d2a2-04b7-46a1-9519-3b5428f4b5ce_fixed.java
index e883360..282a916 100644
--- a/tmp/32d09030-211c-4e09-a220-380a3dacf851_buggy.java
+++ b/tmp/5200d2a2-04b7-46a1-9519-3b5428f4b5ce_fixed.java
@@ -1,196 +1,277 @@
 private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
     Position position = new Position(getProtocolName());
 
     int index = 0;
     String[] values = sentence.split(",");
 
     index += 1; // header
     index += 1; // protocol version
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     position.setDeviceId(deviceSession.getDeviceId());
 
     index += 1; // device name
     index += 1; // report type
     index += 1; // canbus state
     long reportMask = Long.parseLong(values[index++], 16);
     long reportMaskExt = 0;
 
     if (BitUtil.check(reportMask, 0)) {
         position.set(Position.KEY_VIN, values[index++]);
     }
     if (BitUtil.check(reportMask, 1)) {
         position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
     }
     if (BitUtil.check(reportMask, 2)) {
         position.set(Position.KEY_OBD_ODOMETER, values[index++]);
     }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
+    if (BitUtil.check(reportMask, 3)) {
+        String fuelUsed = values[index++];
+        if (!fuelUsed.isEmpty()) {
+            position.set(Position.KEY_FUEL_USED, Double.parseDouble(fuelUsed));
         }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
     }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+    if (BitUtil.check(reportMask, 5)) {
+        String rpm = values[index++];
+        if (!rpm.isEmpty()) {
+            position.set(Position.KEY_RPM, Integer.parseInt(rpm));
         }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
     }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
+    if (BitUtil.check(reportMask, 4)) {
+        String obdSpeed = values[index++];
+        if (!obdSpeed.isEmpty()) {
+            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(obdSpeed)));
         }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
     }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
-            position.set("range", Long.parseLong(values[index - 1]) * 100);
+    if (BitUtil.check(reportMask, 6)) {
+        String coolantTemp = values[index++];
+        if (!coolantTemp.isEmpty()) {
+            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(coolantTemp));
         }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
     }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
+    if (BitUtil.check(reportMask, 7)) {
+        String fuelConsumption = values[index++];
+        if (!fuelConsumption.isEmpty()) {
+            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(fuelConsumption.substring(1)));
+        }
+    }
+    if (BitUtil.check(reportMask, 8)) {
+        String fuelLevel = values[index++];
+        if (!fuelLevel.isEmpty()) {
+            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(fuelLevel.substring(1)));
+        }
+    }
+    if (BitUtil.check(reportMask, 9)) {
+        String range = values[index++];
+        if (!range.isEmpty()) {
+            position.set("range", Long.parseLong(range) * 100);
+        }
+    }
+    if (BitUtil.check(reportMask, 10)) {
+        String throttle = values[index++];
+        if (!throttle.isEmpty()) {
+            position.set(Position.KEY_THROTTLE, Integer.parseInt(throttle));
+        }
+    }
+    if (BitUtil.check(reportMask, 11)) {
+        String hours = values[index++];
+        if (!hours.isEmpty()) {
+            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(hours)));
+        }
     }
     if (BitUtil.check(reportMask, 12)) {
         position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
     }
     if (BitUtil.check(reportMask, 13)) {
         position.set("idleHours", Double.parseDouble(values[index++]));
     }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
-            position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
+    if (BitUtil.check(reportMask, 14)) {
+        String idleFuelConsumption = values[index++];
+        if (!idleFuelConsumption.isEmpty()) {
+            position.set("idleFuelConsumption", Double.parseDouble(idleFuelConsumption));
         }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
     }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
-            position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
+    if (BitUtil.check(reportMask, 15)) {
+        String axleWeight = values[index++];
+        if (!axleWeight.isEmpty()) {
+            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(axleWeight));
         }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
-            position.set("indicators", Integer.parseInt(values[index - 1], 16));
     }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
-            position.set("lights", Integer.parseInt(values[index - 1], 16));
+    if (BitUtil.check(reportMask, 16)) {
+        String tachographInfo = values[index++];
+        if (!tachographInfo.isEmpty()) {
+            position.set("tachographInfo", Integer.parseInt(tachographInfo, 16));
         }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
-            position.set("doors", Integer.parseInt(values[index - 1], 16));
     }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
-            position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
+    if (BitUtil.check(reportMask, 17)) {
+        String indicators = values[index++];
+        if (!indicators.isEmpty()) {
+            position.set("indicators", Integer.parseInt(indicators, 16));
+        }
+    }
+    if (BitUtil.check(reportMask, 18)) {
+        String lights = values[index++];
+        if (!lights.isEmpty()) {
+            position.set("lights", Integer.parseInt(lights, 16));
+        }
+    }
+    if (BitUtil.check(reportMask, 19)) {
+        String doors = values[index++];
+        if (!doors.isEmpty()) {
+            position.set("doors", Integer.parseInt(doors, 16));
+        }
+    }
+    if (BitUtil.check(reportMask, 20)) {
+        String vehicleOverspeed = values[index++];
+        if (!vehicleOverspeed.isEmpty()) {
+            position.set("vehicleOverspeed", Double.parseDouble(vehicleOverspeed));
+        }
+    }
+    if (BitUtil.check(reportMask, 21)) {
+        String engineOverspeed = values[index++];
+        if (!engineOverspeed.isEmpty()) {
+            position.set("engineOverspeed", Double.parseDouble(engineOverspeed));
         }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
-            position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
     }
     if (BitUtil.check(reportMask, 29)) {
         reportMaskExt = Long.parseLong(values[index++], 16);
     }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMaskExt, 0)) {
+        String adBlueLevel = values[index++];
+        if (!adBlueLevel.isEmpty()) {
+            position.set("adBlueLevel", Integer.parseInt(adBlueLevel));
         }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
-            position.set("axleWeight1", Integer.parseInt(values[index - 1]));
     }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
-            position.set("axleWeight3", Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMaskExt, 1)) {
+        String axleWeight1 = values[index++];
+        if (!axleWeight1.isEmpty()) {
+            position.set("axleWeight1", Integer.parseInt(axleWeight1));
+        }
+    }
+    if (BitUtil.check(reportMaskExt, 2)) {
+        String axleWeight3 = values[index++];
+        if (!axleWeight3.isEmpty()) {
+            position.set("axleWeight3", Integer.parseInt(axleWeight3));
+        }
+    }
+    if (BitUtil.check(reportMaskExt, 3)) {
+        String axleWeight4 = values[index++];
+        if (!axleWeight4.isEmpty()) {
+            position.set("axleWeight4", Integer.parseInt(axleWeight4));
         }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
-            position.set("axleWeight4", Integer.parseInt(values[index - 1]));
     }
     if (BitUtil.check(reportMaskExt, 4)) {
         index += 1; // tachograph overspeed
     }
     if (BitUtil.check(reportMaskExt, 5)) {
         index += 1; // tachograph motion
     }
     if (BitUtil.check(reportMaskExt, 6)) {
         index += 1; // tachograph direction
     }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
-            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
+    if (BitUtil.check(reportMaskExt, 7)) {
+        String adc1 = values[index++];
+        if (!adc1.isEmpty()) {
+            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(adc1) * 0.001);
+        }
     }
     if (BitUtil.check(reportMaskExt, 8)) {
         index += 1; // pedal breaking factor
     }
     if (BitUtil.check(reportMaskExt, 9)) {
         index += 1; // engine breaking factor
     }
     if (BitUtil.check(reportMaskExt, 10)) {
         index += 1; // total accelerator kick-downs
     }
     if (BitUtil.check(reportMaskExt, 11)) {
         index += 1; // total effective engine speed
     }
     if (BitUtil.check(reportMaskExt, 12)) {
         index += 1; // total cruise control time
     }
     if (BitUtil.check(reportMaskExt, 13)) {
         index += 1; // total accelerator kick-down time
     }
     if (BitUtil.check(reportMaskExt, 14)) {
         index += 1; // total brake application
     }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
-            position.set("driver1Card", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 15)) {
+        String driver1Card = values[index++];
+        if (!driver1Card.isEmpty()) {
+            position.set("driver1Card", driver1Card);
         }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
-            position.set("driver2Card", values[index - 1]);
     }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
-            position.set("driver1Name", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 16)) {
+        String driver2Card = values[index++];
+        if (!driver2Card.isEmpty()) {
+            position.set("driver2Card", driver2Card);
         }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
-            position.set("driver2Name", values[index - 1]);
     }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
-            position.set("registration", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 17)) {
+        String driver1Name = values[index++];
+        if (!driver1Name.isEmpty()) {
+            position.set("driver1Name", driver1Name);
+        }
+    }
+    if (BitUtil.check(reportMaskExt, 18)) {
+        String driver2Name = values[index++];
+        if (!driver2Name.isEmpty()) {
+            position.set("driver2Name", driver2Name);
+        }
+    }
+    if (BitUtil.check(reportMaskExt, 19)) {
+        String registration = values[index++];
+        if (!registration.isEmpty()) {
+            position.set("registration", registration);
+        }
     }
     if (BitUtil.check(reportMaskExt, 20)) {
         index += 1; // expansion information
     }
     if (BitUtil.check(reportMaskExt, 21)) {
         index += 1; // rapid brakings
     }
     if (BitUtil.check(reportMaskExt, 22)) {
         index += 1; // rapid accelerations
     }
     if (BitUtil.check(reportMaskExt, 23)) {
         index += 1; // engine torque
     }
 
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
     if (BitUtil.check(reportMask, 30)) {
         while (values[index].isEmpty()) {
             index += 1;
         }
         position.setValid(Integer.parseInt(values[index++]) > 0);
         if (!values[index].isEmpty()) {
             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
             position.setCourse(Integer.parseInt(values[index++]));
             position.setAltitude(Double.parseDouble(values[index++]));
             position.setLongitude(Double.parseDouble(values[index++]));
             position.setLatitude(Double.parseDouble(values[index++]));
             position.setTime(dateFormat.parse(values[index++]));
         } else {
             index += 6; // no location
             getLastLocation(position, null);
         }
     } else {
         getLastLocation(position, null);
     }
 
     if (BitUtil.check(reportMask, 31)) {
         index += 4; // cell
         index += 1; // reserved
     }
 
     if (ignoreFixTime) {
         position.setTime(dateFormat.parse(values[index]));
     } else {
         position.setDeviceTime(dateFormat.parse(values[index]));
     }
 
     return position;
 }
\ No newline at end of file
