diff --git a/tmp/25fc6a86-a450-4938-a277-b2cf3ca2740a_buggy.java b/tmp/e6d2beb9-1a69-4097-a235-ea94a4b8d4a1_fixed.java
index 5f96616..5668f4e 100644
--- a/tmp/25fc6a86-a450-4938-a277-b2cf3ca2740a_buggy.java
+++ b/tmp/e6d2beb9-1a69-4097-a235-ea94a4b8d4a1_fixed.java
@@ -1,20 +1,18 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+      JSObjectType recordType = constraint.toObjectType();
+      for (String property : recordType.getPropertyNames()) {
+        JSPropertyType propertyType = recordType.getPropertyType(property);
+        if (propertyType != null) {
+          setPropertyType(property, propertyType);
+        }
+      }
     }
   }
\ No newline at end of file
