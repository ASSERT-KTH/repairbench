diff --git a/tmp/bdb3a2fd-5fa0-4bf1-8411-5aa17117ef84_buggy.java b/tmp/4f55c967-9a6c-4e71-8bc3-38d4bf372c3c_fixed.java
index 5f96616..0362fbe 100644
--- a/tmp/bdb3a2fd-5fa0-4bf1-8411-5aa17117ef84_buggy.java
+++ b/tmp/4f55c967-9a6c-4e71-8bc3-38d4bf372c3c_fixed.java
@@ -1,20 +1,27 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // taking each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+      JSType[] unionTypes = constraint.toUnionType().types;
+      for (JSType type : unionTypes) {
+        if (type.isRecordType()) {
+          matchRecordTypeConstraint(type.toObjectType());
+        }
+      }
     }
   }
\ No newline at end of file
