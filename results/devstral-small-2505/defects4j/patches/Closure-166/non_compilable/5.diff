diff --git a/tmp/3a530ecb-e10e-457d-8a5b-8fcb24911268_buggy.java b/tmp/1894d5b8-d828-4702-95d6-3399bb37d8d4_fixed.java
index 5f96616..9b8784a 100644
--- a/tmp/3a530ecb-e10e-457d-8a5b-8fcb24911268_buggy.java
+++ b/tmp/1894d5b8-d828-4702-95d6-3399bb37d8d4_fixed.java
@@ -1,20 +1,29 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraint {{prop: (number|undefined)}}
   // function f(constraint) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+  // taking each property on the record and trying to match
   // properties on this object.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
+  // Handle the case where the constraint is a union type.
+  else if (constraint.isUnionType()) {
+    JSType[] unionTypes = constraint.toUnionType().getUnionMembers();
+    for (JSType unionType : unionTypes) {
+      if (unionType.isRecordType()) {
+        matchRecordTypeConstraint(unionType.toObjectType());
+      }
+    }
+  }
 }
\ No newline at end of file
