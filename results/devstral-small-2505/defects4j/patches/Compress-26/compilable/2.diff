diff --git a/tmp/43e663c0-b21c-4010-a3a6-5d942125689b_buggy.java b/tmp/4ac4a63a-db83-4087-9351-d4320231f00e_fixed.java
index 4b163f6..47b8474 100644
--- a/tmp/43e663c0-b21c-4010-a3a6-5d942125689b_buggy.java
+++ b/tmp/4ac4a63a-db83-4087-9351-d4320231f00e_fixed.java
@@ -1,28 +1,18 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
         if (skipped == 0) {
+            // Fallback to read() if skip() returns 0
+            int read = input.read();
+            if (read == -1) {
+                // End of stream reached
                 break;
             }
+            skipped = 1;
+        }
         numToSkip -= skipped;
     }
 
     return available - numToSkip;
 }
\ No newline at end of file
