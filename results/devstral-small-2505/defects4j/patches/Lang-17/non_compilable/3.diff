diff --git a/tmp/225e36d4-ec79-4a96-a157-1fe60afc7648_buggy.java b/tmp/13d4d6b5-40c1-465b-b598-a2e08874dbba_fixed.java
index b86c1ea..643c28b 100644
--- a/tmp/225e36d4-ec79-4a96-a157-1fe60afc7648_buggy.java
+++ b/tmp/13d4d6b5-40c1-465b-b598-a2e08874dbba_fixed.java
@@ -1,38 +1,50 @@
 /**
  * Translate an input onto a Writer. This is intentionally final as its algorithm is
  * tightly coupled with the abstract method of this class.
  *
  * @param input CharSequence that is being translated
  * @param out Writer to translate the text to
  * @throws IOException if and only if the Writer produces an IOException
  */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+    int len = input.length();
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+            int codePoint = Character.codePointAt(input, pos);
+            if (Character.isHighSurrogate(codePoint)) {
+                // Handle surrogate pairs
+                if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {
+                    codePoint = Character.toCodePoint((char) codePoint, input.charAt(pos + 1));
+                    pos += 2;
+                } else {
+                    // Handle unpaired high surrogate
+                    pos++;
+                }
+            } else {
+                pos++;
+            }
+            char[] c = Character.toChars(codePoint);
             out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+        } else {
+            // contract with translators is that they have to understand codepoints
+            // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
                 if (pos < len - 2) {
                     pos += Character.charCount(Character.codePointAt(input, pos));
                 } else {
                     pos++;
                 }
             }
             pos--;
         }
         pos++;
     }
 }
\ No newline at end of file
