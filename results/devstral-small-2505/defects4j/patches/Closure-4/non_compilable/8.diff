diff --git a/tmp/135b72fe-62a3-4d16-9dde-0de710c8cdad_buggy.java b/tmp/bf2714b1-a023-4ba9-aaa1-8224a5910198_fixed.java
index d6a560a..8106d81 100644
--- a/tmp/135b72fe-62a3-4d16-9dde-0de710c8cdad_buggy.java
+++ b/tmp/bf2714b1-a023-4ba9-aaa1-8224a5910198_fixed.java
@@ -1,33 +1,32 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
+    resolved = resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
+    if (resolved) {
       super.resolveInternal(t, enclosing);
-    if (isResolved()) {
       finishPropertyContinuations();
-    }
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
+
+    return this;
+  }
\ No newline at end of file
