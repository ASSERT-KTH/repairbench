diff --git a/tmp/5a353096-7a7c-4580-8159-a39d9fdac80a_buggy.java b/tmp/2ba8f8db-2c86-4eb3-a7f1-ce5506e0d4f6_fixed.java
index 227a4ef..6b6d489 100644
--- a/tmp/5a353096-7a7c-4580-8159-a39d9fdac80a_buggy.java
+++ b/tmp/2ba8f8db-2c86-4eb3-a7f1-ce5506e0d4f6_fixed.java
@@ -1,48 +1,30 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
     int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
+    while (true) {
         int lastPos = pos;
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
-            {
+        if (pos == -1) {
             sb.append(text);
-
             return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
+        } else if (pos == lastPos) {
+            // Handle the case where the text is too long for the line
+            sb.append(text.substring(0, width - 1)).append(defaultNewLine);
+            text = text.substring(width - 1).trim();
+        } else {
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
+}
\ No newline at end of file
