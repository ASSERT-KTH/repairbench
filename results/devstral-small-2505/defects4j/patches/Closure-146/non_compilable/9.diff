diff --git a/tmp/b4fcd119-fd69-4625-a2c8-dea0fb84976e_buggy.java b/tmp/642727c2-4528-4cee-9d53-0acaccce8e37_fixed.java
index 210695a..684f46d 100644
--- a/tmp/b4fcd119-fd69-4625-a2c8-dea0fb84976e_buggy.java
+++ b/tmp/642727c2-4528-4cee-9d53-0acaccce8e37_fixed.java
@@ -1,32 +1,26 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
         return new TypePair(null, null);
 
       case FALSE:
+        return new TypePair(this, that);
+
       case UNKNOWN:
+        if (this.isUnknownType() || that.isUnknownType()) {
+          return new TypePair(NO_TYPE, NO_TYPE);
+        } else {
           return new TypePair(this, that);
         }
+    }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
