diff --git a/tmp/639900b4-0c20-41a8-942c-f501201dac51_buggy.java b/tmp/5b9d1509-d655-496e-b733-5e71f1697e0d_fixed.java
index b6b11b6..5ee9d0d 100644
--- a/tmp/639900b4-0c20-41a8-942c-f501201dac51_buggy.java
+++ b/tmp/5b9d1509-d655-496e-b733-5e71f1697e0d_fixed.java
@@ -1,38 +1,33 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
+        int length = pattern.length();
+
         if (escapingOn && c[start] == QUOTE) {
             return appendTo == null ? null : appendTo.append(QUOTE);
         }
+
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+        for (int i = pos.getIndex(); i < length; i++) {
+            if (escapingOn && i + 1 < length && c[i] == ESCAPE_CHAR && c[i + 1] == QUOTE) {
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
+                }
+                i++; // Skip the escaped quote
+                lastHold = i + 1;
+                pos.setIndex(lastHold);
                 continue;
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+
+            if (c[i] == QUOTE) {
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold);
                 }
+                pos.setIndex(i + 1); // Move past the closing quote
+                return appendTo;
             }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+        }
+
+        throw new IllegalArgumentException("Unterminated quoted string at position " + start);
     }
\ No newline at end of file
