diff --git a/tmp/36b24578-f21d-4b04-8c98-aad209b7edaa_buggy.java b/tmp/811e8232-5239-4c4d-b050-b5e9be27c1db_fixed.java
index 21f64c6..1dbf489 100644
--- a/tmp/36b24578-f21d-4b04-8c98-aad209b7edaa_buggy.java
+++ b/tmp/811e8232-5239-4c4d-b050-b5e9be27c1db_fixed.java
@@ -1,23 +1,40 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+        if (seq == null || seq.length() == 0) {
+            return -1;
+        }
+
+        int seqLength = seq.length();
         char startChar = seq.charAt(0);
+
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            if (input[offset] != startChar) {
+                continue;
+            }
+
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int last = i + seqLength - 1;
+
+            if (last > length) {
+                return -1;
+            }
+
+            int j = 1;
+            while (j < seqLength && i < length && seq.charAt(j) == input[i]) {
+                i++;
+                j++;
+            }
+
+            if (j == seqLength) {
                 return offset - pos;
             }
         }
+
         return -1;
     }
\ No newline at end of file
