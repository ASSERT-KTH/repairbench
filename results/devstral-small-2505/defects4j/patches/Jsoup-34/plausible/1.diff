diff --git a/tmp/83684b2d-1025-4a9c-85a4-e2d1b4d0b501_buggy.java b/tmp/60746ad9-11b7-42c8-976b-d4b107bddb44_fixed.java
index 21f64c6..c13112a 100644
--- a/tmp/83684b2d-1025-4a9c-85a4-e2d1b4d0b501_buggy.java
+++ b/tmp/60746ad9-11b7-42c8-976b-d4b107bddb44_fixed.java
@@ -1,23 +1,27 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+        if (seq == null || pos >= length) {
+            return -1;
+        }
+        int seqLength = seq.length();
+        if (seqLength == 0) {
+            return 0;
+        }
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while (++offset < length && startChar != input[offset]);
             int i = offset + 1;
-            int last = i + seq.length()-1;
+            int last = i + seqLength - 1;
             if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+                for (int j = 1; i < last && j < seqLength; i++, j++) {
+                    if (i >= length || seq.charAt(j) != input[i]) {
+                        break;
+                    }
+                }
                 if (i == last) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
