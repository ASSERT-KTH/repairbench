diff --git a/tmp/2c97ac46-f8a0-4f83-8e35-adb3f5a30564_buggy.java b/tmp/4aad2e44-7311-452a-857d-cdf92344990c_fixed.java
index a6dab52..2e89af5 100644
--- a/tmp/2c97ac46-f8a0-4f83-8e35-adb3f5a30564_buggy.java
+++ b/tmp/4aad2e44-7311-452a-857d-cdf92344990c_fixed.java
@@ -1,80 +1,79 @@
-    /**
-     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>
-     * 
-     * @param out write to receieve the escaped string
-     * @param str String to escape values in, may be null
-     * @param escapeSingleQuote escapes single quotes if <code>true</code>
-     * @throws IOException if an IOException occurs
-     */
 private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (str == null) {
         return;
     }
     int sz;
     sz = str.length();
     for (int i = 0; i < sz; i++) {
         char ch = str.charAt(i);
 
         // handle unicode
         if (ch > 0xfff) {
             out.write("\\u" + hex(ch));
         } else if (ch > 0xff) {
             out.write("\\u0" + hex(ch));
         } else if (ch > 0x7f) {
             out.write("\\u00" + hex(ch));
         } else if (ch < 32) {
             switch (ch) {
                 case '\b':
                     out.write('\\');
                     out.write('b');
                     break;
                 case '\n':
                     out.write('\\');
                     out.write('n');
                     break;
                 case '\t':
                     out.write('\\');
                     out.write('t');
                     break;
                 case '\f':
                     out.write('\\');
                     out.write('f');
                     break;
                 case '\r':
                     out.write('\\');
                     out.write('r');
                     break;
                 default :
                     if (ch > 0xf) {
                         out.write("\\u00" + hex(ch));
                     } else {
                         out.write("\\u000" + hex(ch));
                     }
                     break;
             }
         } else {
             switch (ch) {
                 case '\'':
                     if (escapeSingleQuote) {
                         out.write('\\');
                     }
                     out.write('\'');
                     break;
                 case '"':
                     out.write('\\');
                     out.write('"');
                     break;
                 case '\\':
                     out.write('\\');
                     out.write('\\');
                     break;
+                case '/':
+                    // Escape the closing tag of the script
+                    if (i + 1 < sz && str.charAt(i + 1) == 's' && i + 2 < sz && str.charAt(i + 2) == 'c' && i + 3 < sz && str.charAt(i + 3) == 'r' && i + 4 < sz && str.charAt(i + 4) == 'i' && i + 5 < sz && str.charAt(i + 5) == 'p' && i + 6 < sz && str.charAt(i + 6) == 't' && i + 7 < sz && str.charAt(i + 7) == '>') {
+                        out.write('\\');
+                    }
+                    out.write('/');
+                    break;
                 default :
                     out.write(ch);
                     break;
             }
         }
     }
 }
\ No newline at end of file
