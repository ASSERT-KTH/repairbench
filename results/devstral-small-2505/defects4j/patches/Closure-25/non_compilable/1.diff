diff --git a/tmp/110502c8-2dd9-4aea-b31b-0add3d3b2704_buggy.java b/tmp/9e8e3d1e-fc7c-45d4-8d66-37ea183aba46_fixed.java
index b98f0a7..4dfd3b4 100644
--- a/tmp/110502c8-2dd9-4aea-b31b-0add3d3b2704_buggy.java
+++ b/tmp/9e8e3d1e-fc7c-45d4-8d66-37ea183aba46_fixed.java
@@ -1,29 +1,42 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
+      if (arg.getJSType() != null) {
+        JSType argType = arg.getJSType().restrictByNotNullOrUndefined();
+        if (argType.isObjectType()) {
+          ObjectType objectType = (ObjectType) argType;
+          for (Node key : objectType.getPropertyNames()) {
+            JSType propertyType = objectType.getPropertyType(key);
+            if (propertyType != null) {
+              propertyType = propertyType.restrictByNotNullOrUndefined();
+              objectType.setPropertyType(key, propertyType);
+            }
+          }
+        }
+      }
     }
     return scope;
   }
\ No newline at end of file
