diff --git a/tmp/a420dfe9-0f91-4b7f-94cf-89ece61e514d_buggy.java b/tmp/ea379886-dc45-4725-a7dd-d78206a02601_fixed.java
index b98f0a7..4d31f81 100644
--- a/tmp/a420dfe9-0f91-4b7f-94cf-89ece61e514d_buggy.java
+++ b/tmp/ea379886-dc45-4725-a7dd-d78206a02601_fixed.java
@@ -1,29 +1,38 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+          // Traverse the arguments and infer their types based on the constructor's parameter types
+          Node arg = constructor.getNext();
+          int paramIndex = 0;
+          while (arg != null) {
             scope = traverse(arg, scope);
+            JSType paramType = ct.getParamType(paramIndex);
+            if (paramType != null) {
+              arg.setJSType(paramType);
             }
+            arg = arg.getNext();
+            paramIndex++;
+          }
+        }
+      }
+    }
+    n.setJSType(type);
     return scope;
   }
\ No newline at end of file
