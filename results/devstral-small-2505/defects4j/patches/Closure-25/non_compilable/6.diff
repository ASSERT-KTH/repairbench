diff --git a/tmp/1d15a8fb-cbcb-42b8-a7f3-a079bee71936_buggy.java b/tmp/e63cb796-73d4-4047-91ee-fd1b56c081da_fixed.java
index b98f0a7..db62c43 100644
--- a/tmp/1d15a8fb-cbcb-42b8-a7f3-a079bee71936_buggy.java
+++ b/tmp/e63cb796-73d4-4047-91ee-fd1b56c081da_fixed.java
@@ -1,29 +1,39 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          if (type != null) {
+            // Set the type of the constructor's argument
+            Node arg = constructor.getNext();
+            if (arg != null) {
+              JSType argType = type.getPropertyType(arg.getString());
+              if (argType != null) {
+                arg.setJSType(argType);
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
