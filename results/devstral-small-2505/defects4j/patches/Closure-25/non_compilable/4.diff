diff --git a/tmp/4b041a86-355d-4654-b6c1-b09bdd3ad35b_buggy.java b/tmp/16e46e29-8355-41b3-8467-4d2bba6465a5_fixed.java
index b98f0a7..3ac441b 100644
--- a/tmp/4b041a86-355d-4654-b6c1-b09bdd3ad35b_buggy.java
+++ b/tmp/16e46e29-8355-41b3-8467-4d2bba6465a5_fixed.java
@@ -1,29 +1,35 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+          if (type != null) {
             for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
               scope = traverse(arg, scope);
+              JSType argType = arg.getJSType();
+              if (argType != null) {
+                type = type.restrictByValue(argType);
               }
+            }
+          }
+        }
+      }
+    }
+    n.setJSType(type);
     return scope;
   }
\ No newline at end of file
