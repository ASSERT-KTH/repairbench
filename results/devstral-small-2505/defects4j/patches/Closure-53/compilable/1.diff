diff --git a/tmp/cabde468-2198-4536-8f21-2828bfee9ad8_buggy.java b/tmp/d70d6cd9-4a6d-4244-b1e7-1c964faf0e40_fixed.java
index 41ea16c..fc9bf9b 100644
--- a/tmp/cabde468-2198-4536-8f21-2828bfee9ad8_buggy.java
+++ b/tmp/d70d6cd9-4a6d-4244-b1e7-1c964faf0e40_fixed.java
@@ -1,63 +1,61 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
       // Compute all of the assignments necessary
       List<Node> nodes = Lists.newArrayList();
       Node val = ref.getAssignedValue();
       blacklistVarReferencesInTree(val, v.scope);
       Preconditions.checkState(val.getType() == Token.OBJECTLIT);
       Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
       for (Node key = val.getFirstChild(); key != null;
            key = key.getNext()) {
         String var = key.getString();
         Node value = key.removeFirstChild();
         // TODO(user): Copy type information.
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)), value));
         all.remove(var);
       }
 
       // TODO(user): Better source information.
       for (String var : all) {
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
 
       Node replacement;
       // All assignments evaluate to true, so make sure that the
       // expr statement evaluates to true in case it matters.
       nodes.add(new Node(Token.TRUE));
 
       // Join these using COMMA.  A COMMA node must have 2 children, so we
       // create a tree. In the tree the first child be the COMMA to match
       // the parser, otherwise tree equality tests fail.
       nodes = Lists.reverse(nodes);
       replacement = new Node(Token.COMMA);
       Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+      for (int i = 0; i < nodes.size(); i += 2) {
+        Node comma = new Node(Token.COMMA);
+        if (i + 1 < nodes.size()) {
+          comma.addChildToFront(nodes.get(i + 1));
+        }
+        comma.addChildToFront(nodes.get(i));
+        if (i == 0) {
+          cur.addChildToFront(comma);
+        } else {
+          cur = comma;
+        }
       }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
 
       if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));
       } else {
         replace.getParent().replaceChild(replace, replacement);
       }
     }
\ No newline at end of file
