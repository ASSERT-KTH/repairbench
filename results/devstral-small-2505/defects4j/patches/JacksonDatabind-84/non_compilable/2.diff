diff --git a/tmp/f3e0a952-5f23-465b-8bfc-9b15c82c6e9d_buggy.java b/tmp/8f323489-d982-4730-9ca7-4acb158e1f46_fixed.java
index e69de29..4000c0d 100644
--- a/tmp/f3e0a952-5f23-465b-8bfc-9b15c82c6e9d_buggy.java
+++ b/tmp/8f323489-d982-4730-9ca7-4acb158e1f46_fixed.java
@@ -0,0 +1,45 @@
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.type.TypeFactory;
+
+public class TestTypeFactoryWithRecursiveTypes {
+
+    public void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {
+        TypeFactory tf = TypeFactory.defaultInstance();
+        tf.constructType(Base.class);
+        tf.constructType(Sub.class);
+        Sub sub = new Sub();
+        String serialized = objectMapper().writeValueAsString(sub);
+        assertEquals("{\"base\":1,\"sub\":2}", serialized);
+    }
+
+    private ObjectMapper objectMapper() {
+        return new ObjectMapper();
+    }
+
+    public static class Base {
+        @JsonProperty("base")
+        private int base = 1;
+
+        public int getBase() {
+            return base;
+        }
+
+        public void setBase(int base) {
+            this.base = base;
+        }
+    }
+
+    public static class Sub extends Base {
+        @JsonProperty("sub")
+        private int sub = 2;
+
+        public int getSub() {
+            return sub;
+        }
+
+        public void setSub(int sub) {
+            this.sub = sub;
+        }
+    }
+}
\ No newline at end of file
