diff --git a/tmp/c10497f3-fc76-4fdc-87ca-684b03538c47_buggy.java b/tmp/a16f14a5-bc2b-4303-81b3-5a254d75cd4e_fixed.java
index 544303b..a5f9032 100644
--- a/tmp/c10497f3-fc76-4fdc-87ca-684b03538c47_buggy.java
+++ b/tmp/a16f14a5-bc2b-4303-81b3-5a254d75cd4e_fixed.java
@@ -1,29 +1,28 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    Integer basicRow = null;
+    double mostNegative = 0;
+
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
         // if multiple variables can take a given value
         // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
         if (basicRow != null) {
             for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                 if (tableau.getEntry(basicRow, j) == 1) {
                     coefficients[i] = 0;
                 }
             }
         }
     }
+
+    // Update mostNegative after the loop
+    basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+    mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    for (int i = 0; i < coefficients.length; i++) {
+        coefficients[i] -= (restrictToNonNegative ? 0 : mostNegative);
+    }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
