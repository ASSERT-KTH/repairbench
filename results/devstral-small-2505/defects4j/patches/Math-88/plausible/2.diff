diff --git a/tmp/c947e0f7-ce02-4beb-9cd2-e92e2ac8a778_buggy.java b/tmp/7071c71b-10e8-467c-bea4-00391821e9ca_fixed.java
index 544303b..c16a9d6 100644
--- a/tmp/c947e0f7-ce02-4beb-9cd2-e92e2ac8a778_buggy.java
+++ b/tmp/7071c71b-10e8-467c-bea4-00391821e9ca_fixed.java
@@ -1,29 +1,22 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
         // if multiple variables can take a given value
         // then we choose the first and set the rest equal to 0
         coefficients[i] =
             (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
             (restrictToNonNegative ? 0 : mostNegative);
         if (basicRow != null) {
             for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                 if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+                    coefficients[j - getNumObjectiveFunctions()] = 0;
                 }
             }
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
