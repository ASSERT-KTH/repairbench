diff --git a/tmp/c6c4f608-d569-4d7a-9991-463ea97a9efe_buggy.java b/tmp/01a1f911-8008-4cef-b52c-b276b8ea2270_fixed.java
index e087f95..a1711b8 100644
--- a/tmp/c6c4f608-d569-4d7a-9991-463ea97a9efe_buggy.java
+++ b/tmp/01a1f911-8008-4cef-b52c-b276b8ea2270_fixed.java
@@ -1,53 +1,64 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Buffer length must be at least 2 bytes");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
             // Skip leading spaces
             if (currentByte == (byte) ' ' || currentByte == '0') {
                 if (stillPadding) {
                     continue;
                 }
                 if (currentByte == (byte) ' ') {
                     break;
                 }
             }
 
+            // Check for all NULs
+            if (currentByte != 0) {
+                stillPadding = false;
+            }
+
             // Must have trailing NUL or space
             // May have additional NUL or space
-
-            stillPadding = false;
+            if (!stillPadding) {
                 // CheckStyle:MagicNumber OFF
                 if (currentByte < '0' || currentByte > '7') {
                     throw new IllegalArgumentException(
                             exceptionMessage(buffer, offset, length, start, currentByte));
                 }
                 result = (result << 3) + (currentByte - '0'); // convert from ASCII
                 // CheckStyle:MagicNumber ON
             }
+        }
+
+        // Ensure the buffer ends with a space or NUL
+        if (buffer[offset + length - 1] != 0 && buffer[offset + length - 1] != ' ') {
+            throw new IllegalArgumentException("Trailing space or NUL is missing");
+        }
 
         return result;
     }
\ No newline at end of file
