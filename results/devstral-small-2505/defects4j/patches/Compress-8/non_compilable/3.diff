diff --git a/tmp/677a140b-5ecc-4534-bba6-41253ab42648_buggy.java b/tmp/04386473-8150-44ba-9f8c-91bb4a629000_fixed.java
index e087f95..3c175b6 100644
--- a/tmp/677a140b-5ecc-4534-bba6-41253ab42648_buggy.java
+++ b/tmp/04386473-8150-44ba-9f8c-91bb4a629000_fixed.java
@@ -1,53 +1,64 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Buffer must be at least 2 bytes long");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
+
             if (currentByte == 0) {
                 break;
             }
 
             // Skip leading spaces
             if (currentByte == (byte) ' ' || currentByte == '0') {
                 if (stillPadding) {
                     continue;
                 }
                 if (currentByte == (byte) ' ') {
                     break;
                 }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+            // Check for valid octal digits
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        }
+
+        // Ensure there is a trailing NUL or space
+        if (buffer[end - 1] != 0 && buffer[end - 1] != ' ') {
+            throw new IllegalArgumentException("Trailing space or NUL is missing");
         }
 
         return result;
     }
+
+    private static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int start, final byte currentByte) {
+        return "Invalid byte detected: " + currentByte + " at position: " + (start - offset);
+    }
\ No newline at end of file
