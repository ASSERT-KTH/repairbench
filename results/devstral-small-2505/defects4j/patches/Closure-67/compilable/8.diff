diff --git a/tmp/b0b66b0d-851c-4fbe-a3af-876e25c9e10a_buggy.java b/tmp/786050e4-324c-4205-9ac2-adc504b4075f_fixed.java
index 939f49b..994aa02 100644
--- a/tmp/b0b66b0d-851c-4fbe-a3af-876e25c9e10a_buggy.java
+++ b/tmp/786050e4-324c-4205-9ac2-adc504b4075f_fixed.java
@@ -1,21 +1,23 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
       Node child = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      if (child.getType() == Token.STRING && child.getString().equals("prototype")) {
+        return true;
+      }
+    } else {
+      // Handle the case where the assignment is directly to the prototype property
+      Node propertyNode = n.getFirstChild().getNext();
+      if (propertyNode.getType() == Token.STRING && propertyNode.getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
