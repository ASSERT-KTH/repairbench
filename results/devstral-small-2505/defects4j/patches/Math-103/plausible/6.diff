diff --git a/tmp/545bd40b-43c6-4321-baa6-dadca9cbbb2c_buggy.java b/tmp/7e0ebd7c-8a16-4310-b828-e98e8e8b0437_fixed.java
index 6cfa79b..7c3b0d3 100644
--- a/tmp/545bd40b-43c6-4321-baa6-dadca9cbbb2c_buggy.java
+++ b/tmp/7e0ebd7c-8a16-4310-b828-e98e8e8b0437_fixed.java
@@ -1,12 +1,28 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X < <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>.
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));
+    if (z < -20.0) {
+        return 0.0;
+    } else if (z > 20.0) {
+        return 1.0;
+    } else {
+        try {
+            return 0.5 * (1.0 + Erf.erf(z));
+        } catch (MaxIterationsExceededException e) {
+            if (z < -20.0) {
+                return 0.0;
+            } else if (z > 20.0) {
+                return 1.0;
+            } else {
+                throw new MathException(e);
+            }
+        }
+    }
 }
\ No newline at end of file
