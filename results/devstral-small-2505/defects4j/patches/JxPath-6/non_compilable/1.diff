diff --git a/tmp/e81ec385-04e6-45e8-b059-c59dc8b39c7b_buggy.java b/tmp/c5e2d520-5c4a-4184-bf95-5857501c1d41_fixed.java
index f650982..b798776 100644
--- a/tmp/e81ec385-04e6-45e8-b059-c59dc8b39c7b_buggy.java
+++ b/tmp/c5e2d520-5c4a-4184-bf95-5857501c1d41_fixed.java
@@ -1,42 +1,66 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+        if (l instanceof Iterator && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+        if (!(l instanceof Iterator) && r instanceof Iterator) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
         return equal(l, r);
     }
+
+    private boolean contains(Iterator iterator, Object value) {
+        while (iterator.hasNext()) {
+            if (equal(iterator.next(), value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean findMatch(Iterator left, Iterator right) {
+        while (left.hasNext() && right.hasNext()) {
+            if (!equal(left.next(), right.next())) {
+                return false;
+            }
+        }
+        return !left.hasNext() && !right.hasNext();
+    }
+
+    private boolean equal(Object l, Object r) {
+        if (l == null && r == null) {
+            return true;
+        }
+        if (l == null || r == null) {
+            return false;
+        }
+        return l.equals(r);
+    }
\ No newline at end of file
