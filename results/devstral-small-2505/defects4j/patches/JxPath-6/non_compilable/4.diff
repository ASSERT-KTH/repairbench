diff --git a/tmp/70e69652-2f95-481d-bc0d-ef3eaf0bc1a4_buggy.java b/tmp/3d47b720-3da2-44e1-a9d9-a6e8e4dfb4d4_fixed.java
index f650982..2f9e1be 100644
--- a/tmp/70e69652-2f95-481d-bc0d-ef3eaf0bc1a4_buggy.java
+++ b/tmp/3d47b720-3da2-44e1-a9d9-a6e8e4dfb4d4_fixed.java
@@ -1,42 +1,87 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+        if (l instanceof Iterator && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+        if (!(l instanceof Iterator) && r instanceof Iterator) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
         return equal(l, r);
     }
+
+    /**
+     * Checks if an iterator contains a specific value.
+     * @param iterator the iterator to check
+     * @param value the value to check for
+     * @return true if the iterator contains the value, false otherwise
+     */
+    private boolean contains(Iterator iterator, Object value) {
+        while (iterator.hasNext()) {
+            if (equal(iterator.next(), value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Checks if two iterators have matching values.
+     * @param left the first iterator
+     * @param right the second iterator
+     * @return true if both iterators have the same values, false otherwise
+     */
+    private boolean findMatch(Iterator left, Iterator right) {
+        while (left.hasNext() && right.hasNext()) {
+            if (!equal(left.next(), right.next())) {
+                return false;
+            }
+        }
+        return !left.hasNext() && !right.hasNext();
+    }
+
+    /**
+     * Compares two values for equality.
+     * @param left the first value
+     * @param right the second value
+     * @return true if the values are equal, false otherwise
+     */
+    private boolean equal(Object left, Object right) {
+        if (left == null && right == null) {
+            return true;
+        }
+        if (left == null || right == null) {
+            return false;
+        }
+        if (left instanceof String && right instanceof String) {
+            return left.equals(right);
+        }
+        return left.equals(right);
+    }
\ No newline at end of file
