diff --git a/tmp/7fef4050-da74-4926-90c8-e5bb3b7075e5_buggy.java b/tmp/637435b6-9e72-43f2-a6fb-589ea76b7a2e_fixed.java
index 19fd63e..f01c0a9 100644
--- a/tmp/7fef4050-da74-4926-90c8-e5bb3b7075e5_buggy.java
+++ b/tmp/637435b6-9e72-43f2-a6fb-589ea76b7a2e_fixed.java
@@ -1,24 +1,40 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          // Check if the expression is a function call or a method call
+          if (maybeExpr.getFirstChild() != null &&
+              maybeExpr.getFirstChild().getType() == Token.GETPROP) {
+            Node getPropNode = maybeExpr.getFirstChild();
+            if (getPropNode.hasChildren() && getPropNode.getFirstChild() != null) {
+              Node propNode = getPropNode.getFirstChild();
+              if (propNode.getType() == Token.IDENTIFIER) {
+                String propName = propNode.getString();
+                if (propName.equals("onchange") || propName.equals("bonchange")) {
+                  return false;
+                }
+              }
+            }
+          }
+          return true;
+        }
       }
     }
 
     return false;
   }
\ No newline at end of file
