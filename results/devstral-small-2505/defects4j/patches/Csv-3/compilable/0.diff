diff --git a/tmp/e3df6731-0875-44fc-9d90-7c2562be403b_buggy.java b/tmp/a3897e15-edab-46e2-a953-4f3881187389_fixed.java
index 1ad070d..7b94d0e 100644
--- a/tmp/e3df6731-0875-44fc-9d90-7c2562be403b_buggy.java
+++ b/tmp/a3897e15-edab-46e2-a953-4f3881187389_fixed.java
@@ -1,38 +1,39 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      *
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid.
      * @throws IOException if there is a problem reading the stream or the end of stream is detected:
-     * the escape character is not allowed at end of strem
+     * the escape character is not allowed at end of stream
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
         case FF: // TODO is this correct?
         case TAB: // TODO is this correct? Do tabs need to be escaped?
         case BACKSPACE: // TODO is this correct?
             return c;
+        case 'N': // MySQL uses \N to symbolize null values
+            return 'N';
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
-                return c;
             // indicate unexpected char - available from in.getLastChar()
+            return c;
         }
     }
\ No newline at end of file
