diff --git a/tmp/b0f39596-a993-42a7-b9f9-98708944ba64_buggy.java b/tmp/a8284476-df9b-4fcc-91ba-0d9ca6d18430_fixed.java
index b12de99..81a524f 100644
--- a/tmp/b0f39596-a993-42a7-b9f9-98708944ba64_buggy.java
+++ b/tmp/a8284476-df9b-4fcc-91ba-0d9ca6d18430_fixed.java
@@ -1,52 +1,86 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
     // The first-order function analyzer looks at two types of variables:
     //
     // 1) Local variables that are assigned in inner scopes ("escaped vars")
     //
     // 2) Local variables that are assigned more than once.
     //
     // We treat all global variables as escaped by default, so there's
     // no reason to do this extra computation for them.
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
       // Be careful of bleeding functions, which create variables
       // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
 
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
   } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
       NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
   }
+
+  // Fix for testIssue726: Check for function calls and their parameter types
+  if (n.isCall() && n.getFirstChild() != null) {
+    Node callNode = n.getFirstChild();
+    if (callNode.isName()) {
+      String functionName = callNode.getString();
+      Scope scope = t.getScope();
+      Var functionVar = scope.getVar(functionName);
+      if (functionVar != null && functionVar.isFunction()) {
+        Node functionNode = functionVar.getNode();
+        if (functionNode.isFunction()) {
+          Node paramsNode = functionNode.getFirstChild();
+          if (paramsNode.isParamList()) {
+            for (Node paramNode : paramsNode.children()) {
+              if (paramNode.isParam()) {
+                Node typeNode = paramNode.getFirstChild();
+                if (typeNode.isType()) {
+                  // Check if the actual parameter type matches the formal parameter type
+                  Node actualParamNode = n.getChildAt(1); // Assuming the first parameter is at index 1
+                  if (actualParamNode != null && actualParamNode.isLiteral()) {
+                    String actualType = actualParamNode.getType().toString();
+                    String formalType = typeNode.getType().toString();
+                    if (!actualType.equals(formalType)) {
+                      data.get(t.getScopeRoot()).recordTypeMismatch(actualType, formalType);
+                    }
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
 }
\ No newline at end of file
