diff --git a/tmp/822e33ef-4d9b-42a8-861d-2eb1c3aeaedf_buggy.java b/tmp/24846509-ef8f-485b-9b96-2364e5501b4d_fixed.java
index b12de99..b435638 100644
--- a/tmp/822e33ef-4d9b-42a8-861d-2eb1c3aeaedf_buggy.java
+++ b/tmp/24846509-ef8f-485b-9b96-2364e5501b4d_fixed.java
@@ -1,52 +1,71 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
       if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
 
       if (n.isName() && NodeUtil.isLValue(n) &&
           // Be careful of bleeding functions, which create variables
           // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
 
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
+      } else if (n.isCall() && n.getFirstChild() != null) {
+        Node callee = n.getFirstChild();
+        if (callee.isGetProp() && callee.getFirstChild() != null) {
+          Node obj = callee.getFirstChild();
+          Node prop = callee.getChildAtIndex(1);
+          if (obj.isThis() && prop.isName()) {
+            String methodName = prop.getString();
+            if (methodName.equals("bar")) {
+              Node args = n.getChildAtIndex(1);
+              if (args.isArrayLiteral() && args.getChildCount() == 1) {
+                Node arg = args.getFirstChild();
+                if (arg.isLiteral() && arg.getString().equals("true")) {
+                  // Record the type mismatch
+                  data.get(t.getScopeRoot()).recordTypeMismatch("number", "boolean");
+                }
+              }
+            }
+          }
+        }
       }
     }
\ No newline at end of file
