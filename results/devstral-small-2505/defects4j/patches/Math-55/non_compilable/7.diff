diff --git a/tmp/b8b80c06-ef90-4aa9-a7ae-e7bfaddcae40_buggy.java b/tmp/7796de85-5587-4245-a7b0-05dc80aa2945_fixed.java
index 1478ee1..64fc939 100644
--- a/tmp/b8b80c06-ef90-4aa9-a7ae-e7bfaddcae40_buggy.java
+++ b/tmp/7796de85-5587-4245-a7b0-05dc80aa2945_fixed.java
@@ -1,24 +1,23 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // Ensure v1 and v2 are not the same vector to avoid precision issues
+    if (v1.equals(v2)) {
+        return Vector3D.ZERO;
+    }
 
+    // Compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    double rho = v1.dotProduct(v2) / v2.dotProduct(v2);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute v3 = v1 - rho * v2
+    Vector3D v3 = new Vector3D(
+        v1.x - rho * v2.x,
+        v1.y - rho * v2.y,
+        v1.z - rho * v2.z
+    );
 
+    // Compute cross product from v3 and v2
+    return new Vector3D(
+        v3.y * v2.z - v3.z * v2.y,
+        v3.z * v2.x - v3.x * v2.z,
+        v3.x * v2.y - v3.y * v2.x
+    );
 }
\ No newline at end of file
