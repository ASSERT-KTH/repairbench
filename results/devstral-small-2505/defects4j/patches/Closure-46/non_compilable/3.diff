diff --git a/tmp/8a934852-b63f-459c-9b7e-261bc8571a0b_buggy.java b/tmp/d0fd7b0a-8844-4e67-bdec-ddf151728105_fixed.java
index 46817a7..6d93464 100644
--- a/tmp/8a934852-b63f-459c-9b7e-261bc8571a0b_buggy.java
+++ b/tmp/d0fd7b0a-8844-4e67-bdec-ddf151728105_fixed.java
@@ -1,16 +1,27 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // Collect all properties from both record types
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());
+
+    for (String property : allProperties) {
+      JSType thisType = properties.get(property);
+      JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+
+      if (thisType != null && thatType != null) {
+        JSType leastSupertype = thisType.getLeastSupertype(thatType);
+        builder.addProperty(property, leastSupertype, getPropertyNode(property));
+      } else if (thisType != null) {
+        builder.addProperty(property, thisType, getPropertyNode(property));
+      } else if (thatType != null) {
+        builder.addProperty(property, thatType, that.toMaybeRecordType().getPropertyNode(property));
       }
     }
+
     return builder.build();
   }
\ No newline at end of file
