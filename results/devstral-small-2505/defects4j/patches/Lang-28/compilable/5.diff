diff --git a/tmp/372cbec3-1bf7-440d-aafe-199347be2fe1_buggy.java b/tmp/7e777539-d7ee-49a7-af10-e220368c7331_fixed.java
index 4bbd561..4a51eff 100644
--- a/tmp/372cbec3-1bf7-440d-aafe-199347be2fe1_buggy.java
+++ b/tmp/7e777539-d7ee-49a7-af10-e220368c7331_fixed.java
@@ -1,37 +1,47 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
         if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
-            int entityValue;
+            if (end >= input.length()) {
+                return 0;
+            }
+
+            long entityValue;
             try {
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Long.parseLong(input.subSequence(start, end).toString(), 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Long.parseLong(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
-                out.write(entityValue);
+            if (entityValue > 0xFFFF) {
+                // Supplementary characters
+                out.write(Character.toChars((int) (entityValue - 0x10000)));
+            } else {
+                out.write((char) entityValue);
+            }
+
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
