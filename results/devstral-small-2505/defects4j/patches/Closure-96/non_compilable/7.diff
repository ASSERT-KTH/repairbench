diff --git a/tmp/6093f943-ae7f-4ead-a3f3-692c7de37f70_buggy.java b/tmp/fa434560-a632-4f84-b15a-db76decb4134_fixed.java
index e0ecec8..65eaf4d 100644
--- a/tmp/6093f943-ae7f-4ead-a3f3-692c7de37f70_buggy.java
+++ b/tmp/fa434560-a632-4f84-b15a-db76decb4134_fixed.java
@@ -1,35 +1,39 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+  private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+    while (arguments.hasNext() && parameters.hasNext()) {
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
+    }
+
+    // Check for var_args function
+    if (arguments.hasNext() && functionType.isVarArgs()) {
+      parameter = functionType.getVarArgsParameter();
+      while (arguments.hasNext()) {
+        argument = arguments.next();
+        ordinal++;
+        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
+      }
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+    if (minArgs > numArgs || (maxArgs != Integer.MAX_VALUE && maxArgs < numArgs)) {
       report(t, call, WRONG_ARGUMENT_COUNT,
           validator.getReadableJSTypeName(call.getFirstChild(), false),
           String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+          maxArgs != Integer.MAX_VALUE ? " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
