diff --git a/tmp/84d0ce6f-37ba-49e8-8520-26aecbce96c3_buggy.java b/tmp/fa02456f-40c5-419a-8d39-45845484ff85_fixed.java
index e69de29..95d8b1e 100644
--- a/tmp/84d0ce6f-37ba-49e8-8520-26aecbce96c3_buggy.java
+++ b/tmp/fa02456f-40c5-419a-8d39-45845484ff85_fixed.java
@@ -0,0 +1,239 @@
+public SortedMap<K, V> prefixMap(String prefix) {
+    return new PrefixMapView(prefix);
+}
+
+private class PrefixMapView extends AbstractMap<K, V> implements SortedMap<K, V> {
+    private final String prefix;
+
+    public PrefixMapView(String prefix) {
+        this.prefix = prefix;
+    }
+
+    @Override
+    public Set<K> keySet() {
+        return new KeySetView();
+    }
+
+    @Override
+    public Collection<V> values() {
+        return new ValuesView();
+    }
+
+    @Override
+    public Set<Entry<K, V>> entrySet() {
+        return new EntrySetView();
+    }
+
+    @Override
+    public Comparator<? super K> comparator() {
+        return null;
+    }
+
+    @Override
+    public K firstKey() {
+        return keySet().isEmpty() ? null : keySet().iterator().next();
+    }
+
+    @Override
+    public K lastKey() {
+        return keySet().isEmpty() ? null : keySet().iterator().next();
+    }
+
+    @Override
+    public SortedMap<K, V> subMap(K fromKey, K toKey) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public SortedMap<K, V> headMap(K toKey) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public SortedMap<K, V> tailMap(K fromKey) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public V put(K key, V value) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public V remove(Object key) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void putAll(Map<? extends K, ? extends V> m) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void clear() {
+        for (K key : keySet()) {
+            PatriciaTrie.this.remove(key);
+        }
+    }
+
+    private class KeySetView extends AbstractSet<K> {
+        @Override
+        public Iterator<K> iterator() {
+            return new KeyIterator();
+        }
+
+        @Override
+        public int size() {
+            return PatriciaTrie.this.countPrefix(prefix);
+        }
+
+        @Override
+        public boolean contains(Object o) {
+            return PatriciaTrie.this.containsKey(o) && ((K) o).toString().startsWith(prefix);
+        }
+
+        @Override
+        public boolean remove(Object o) {
+            if (contains(o)) {
+                PatriciaTrie.this.remove(o);
+                return true;
+            }
+            return false;
+        }
+
+        @Override
+        public void clear() {
+            PrefixMapView.this.clear();
+        }
+    }
+
+    private class ValuesView extends AbstractCollection<V> {
+        @Override
+        public Iterator<V> iterator() {
+            return new ValueIterator();
+        }
+
+        @Override
+        public int size() {
+            return new KeySetView().size();
+        }
+
+        @Override
+        public boolean contains(Object o) {
+            return values().contains(o);
+        }
+
+        @Override
+        public void clear() {
+            PrefixMapView.this.clear();
+        }
+    }
+
+    private class EntrySetView extends AbstractSet<Entry<K, V>> {
+        @Override
+        public Iterator<Entry<K, V>> iterator() {
+            return new EntryIterator();
+        }
+
+        @Override
+        public int size() {
+            return new KeySetView().size();
+        }
+
+        @Override
+        public boolean contains(Object o) {
+            if (o instanceof Entry) {
+                Entry<?, ?> e = (Entry<?, ?>) o;
+                return containsKey(e.getKey()) && PatriciaTrie.this.get(e.getKey()).equals(e.getValue());
+            }
+            return false;
+        }
+
+        @Override
+        public boolean remove(Object o) {
+            if (contains(o)) {
+                PatriciaTrie.this.remove(((Entry<?, ?>) o).getKey());
+                return true;
+            }
+            return false;
+        }
+
+        @Override
+        public void clear() {
+            PrefixMapView.this.clear();
+        }
+    }
+
+    private class KeyIterator implements Iterator<K> {
+        private final Iterator<Entry<K, V>> entryIterator;
+
+        public KeyIterator() {
+            entryIterator = PatriciaTrie.this.entrySet().iterator();
+        }
+
+        @Override
+        public boolean hasNext() {
+            return entryIterator.hasNext();
+        }
+
+        @Override
+        public K next() {
+            return entryIterator.next().getKey();
+        }
+
+        @Override
+        public void remove() {
+            entryIterator.remove();
+        }
+    }
+
+    private class ValueIterator implements Iterator<V> {
+        private final Iterator<Entry<K, V>> entryIterator;
+
+        public ValueIterator() {
+            entryIterator = PatriciaTrie.this.entrySet().iterator();
+        }
+
+        @Override
+        public boolean hasNext() {
+            return entryIterator.hasNext();
+        }
+
+        @Override
+        public V next() {
+            return entryIterator.next().getValue();
+        }
+
+        @Override
+        public void remove() {
+            entryIterator.remove();
+        }
+    }
+
+    private class EntryIterator implements Iterator<Entry<K, V>> {
+        private final Iterator<Entry<K, V>> entryIterator;
+
+        public EntryIterator() {
+            entryIterator = PatriciaTrie.this.entrySet().iterator();
+        }
+
+        @Override
+        public boolean hasNext() {
+            return entryIterator.hasNext();
+        }
+
+        @Override
+        public Entry<K, V> next() {
+            Entry<K, V> entry = entryIterator.next();
+            if (entry.getKey().toString().startsWith(prefix)) {
+                return entry;
+            }
+            return next();
+        }
+
+        @Override
+        public void remove() {
+            entryIterator.remove();
+        }
+    }
+}
\ No newline at end of file
