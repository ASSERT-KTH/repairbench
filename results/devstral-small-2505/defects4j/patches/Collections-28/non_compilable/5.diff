diff --git a/tmp/1897f605-355d-4fd4-bf7a-fc6e47511010_buggy.java b/tmp/74fc6bf3-cf5c-4ca7-9ad0-e1f73100af0f_fixed.java
index e69de29..7834691 100644
--- a/tmp/1897f605-355d-4fd4-bf7a-fc6e47511010_buggy.java
+++ b/tmp/74fc6bf3-cf5c-4ca7-9ad0-e1f73100af0f_fixed.java
@@ -0,0 +1,39 @@
+@Override
+public SortedMap<K, V> prefixMap(final K prefix) {
+    final SortedMap<K, V> map = new TreeMap<>();
+    this.prefixMap(prefix, map);
+    return map;
+}
+
+private void prefixMap(final K prefix, final SortedMap<K, V> map) {
+    if (prefix == null) {
+        throw new IllegalArgumentException("Prefix cannot be null");
+    }
+    final Node<K, V> node = this.getNode(prefix);
+    if (node != null) {
+        this.collectPrefixes(node, prefix, map);
+    }
+}
+
+private void collectPrefixes(final Node<K, V> node, final K prefix, final SortedMap<K, V> map) {
+    if (node.getValue() != null) {
+        map.put(prefix, node.getValue());
+    }
+    for (final Map.Entry<K, Node<K, V>> entry : node.getChildren().entrySet()) {
+        final K key = entry.getKey();
+        final Node<K, V> child = entry.getValue();
+        if (child != null) {
+            final K newPrefix = this.createPrefix(prefix, key);
+            this.collectPrefixes(child, newPrefix, map);
+        }
+    }
+}
+
+private K createPrefix(final K prefix, final K key) {
+    if (prefix == null) {
+        return key;
+    }
+    final StringBuilder sb = new StringBuilder(prefix.toString());
+    sb.append(key.toString());
+    return (K) sb.toString();
+}
\ No newline at end of file
