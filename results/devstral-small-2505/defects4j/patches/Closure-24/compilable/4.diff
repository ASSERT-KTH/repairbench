diff --git a/tmp/be326dce-49fd-457b-857f-fd9e82259161_buggy.java b/tmp/476160a1-6bd2-4ff7-beab-cc2cbf06e6c0_fixed.java
index 602226b..0aab38b 100644
--- a/tmp/be326dce-49fd-457b-857f-fd9e82259161_buggy.java
+++ b/tmp/476160a1-6bd2-4ff7-beab-cc2cbf06e6c0_fixed.java
@@ -1,26 +1,27 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
+        if (aliasVar != null) {
           aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
           // Bleeding functions already get a BAD_PARAMETERS error, so just
           // do nothing.
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
+        }
+      }
     } else {
       // TODO(robbyw): Support using locals for private variables.
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
-    }
