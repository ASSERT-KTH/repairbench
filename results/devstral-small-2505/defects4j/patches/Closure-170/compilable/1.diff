diff --git a/tmp/7a61dc4f-20a6-4628-b008-90cdefeba3f5_buggy.java b/tmp/35c76a30-2912-41df-9f7f-ce9ea0de5fc4_fixed.java
index 5abdeb5..e208964 100644
--- a/tmp/7a61dc4f-20a6-4628-b008-90cdefeba3f5_buggy.java
+++ b/tmp/35c76a30-2912-41df-9f7f-ce9ea0de5fc4_fixed.java
@@ -1,29 +1,41 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
               !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+               (parent.getFirstChild() == n) &&
+               isTopLevelAssignmentChain(parent))) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
 
+        private boolean isTopLevelAssignmentChain(Node parent) {
+          Node current = parent;
+          while (current != null) {
+            if (current.isAssign()) {
+              current = current.getParent();
+            } else {
+              return false;
+            }
+          }
+          return true;
+        }
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
