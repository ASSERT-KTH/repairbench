diff --git a/tmp/c5d247e3-27e3-4504-bae3-a1cb6f6e0bb9_buggy.java b/tmp/6f9c4db6-52c5-46f4-a5b1-8623a41c295e_fixed.java
index 2955e62..49bb739 100644
--- a/tmp/c5d247e3-27e3-4504-bae3-a1cb6f6e0bb9_buggy.java
+++ b/tmp/6f9c4db6-52c5-46f4-a5b1-8623a41c295e_fixed.java
@@ -1,66 +1,91 @@
-    /**
-     * @return true if the provided reference and declaration can be safely
-     *         inlined according to our criteria
-     */
   private boolean canInline(
       Reference declaration,
       Reference initialization,
       Reference reference) {
     if (!isValidDeclaration(declaration)
         || !isValidInitialization(initialization)
         || !isValidReference(reference)) {
       return false;
     }
 
     // If the value is read more than once, skip it.
     // VAR declarations and EXPR_RESULT don't need the value, but other
     // ASSIGN expressions parents do.
     if (declaration != initialization &&
         !initialization.getGrandparent().isExprResult()) {
       return false;
     }
 
     // Be very conservative and do no cross control structures or
     // scope boundaries
     if (declaration.getBasicBlock() != initialization.getBasicBlock()
         || declaration.getBasicBlock() != reference.getBasicBlock()) {
       return false;
     }
 
     // Do not inline into a call node. This would change
     // the context in which it was being called. For example,
     //   var a = b.c;
     //   a();
     // should not be inlined, because it calls a in the context of b
     // rather than the context of the window.
     //   var a = b.c;
     //   f(a)
     // is ok.
     Node value = initialization.getAssignedValue();
     Preconditions.checkState(value != null);
     if (value.isGetProp()
         && reference.getParent().isCall()
         && reference.getParent().getFirstChild() == reference.getNode()) {
       return false;
     }
 
     if (value.isFunction()) {
       Node callNode = reference.getParent();
       if (reference.getParent().isCall()) {
         CodingConvention convention = compiler.getCodingConvention();
         // Bug 2388531: Don't inline subclass definitions into class defining
         // calls as this confused class removing logic.
         SubclassRelationship relationship =
             convention.getClassesDefinedByCall(callNode);
         if (relationship != null) {
           return false;
         }
 
         // issue 668: Don't inline singleton getter methods
         // calls as this confused class removing logic.
+        if (isSingletonGetterMethod(value)) {
+          return false;
+        }
       }
     }
 
     return canMoveAggressively(value) ||
         canMoveModerately(initialization, reference);
   }
+
+  private boolean isSingletonGetterMethod(Node functionNode) {
+    if (functionNode.isFunction()) {
+      Node functionBody = functionNode.getFirstChild();
+      if (functionBody.isBlock()) {
+        Node returnNode = functionBody.getLastChild();
+        if (returnNode.isReturn()) {
+          Node returnValue = returnNode.getFirstChild();
+          if (returnValue.isGetProp()) {
+            Node objectNode = returnValue.getFirstChild();
+            if (objectNode.isThis()) {
+              Node classNode = returnValue.getSecondChild();
+              if (classNode.isMember()) {
+                Node memberNode = classNode.getFirstChild();
+                if (memberNode.isName()) {
+                  String memberName = memberNode.getQualifiedName();
+                  return memberName.endsWith(".instance_");
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+    return false;
+  }
\ No newline at end of file
