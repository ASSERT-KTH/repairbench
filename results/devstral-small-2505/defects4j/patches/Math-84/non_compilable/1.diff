diff --git a/tmp/c2c3903a-b6ca-4f95-b840-8cd8eed15561_buggy.java b/tmp/12f548cf-02de-46d7-b530-b80d37916013_fixed.java
index 5f1dcf2..13f72e5 100644
--- a/tmp/c2c3903a-b6ca-4f95-b840-8cd8eed15561_buggy.java
+++ b/tmp/12f548cf-02de-46d7-b530-b80d37916013_fixed.java
@@ -1,41 +1,55 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
+                // check convergence
+                if (isConverged()) {
                     return;
-
                 }
 
+            } else {
+
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
+                    simplex = new RealPointValuePair[] { contracted, original[1], original[2], original[3] };
 
                     // check convergence
+                    if (isConverged()) {
                         return;
                     }
 
-        }
+                } else {
+                    // shrink the simplex
+                    shrinkSimplex(comparator);
 
+                    // check convergence
+                    if (isConverged()) {
+                        return;
+                    }
+                }
+            }
+        }
     }
\ No newline at end of file
