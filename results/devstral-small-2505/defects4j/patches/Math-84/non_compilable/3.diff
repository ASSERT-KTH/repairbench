diff --git a/tmp/c473f50e-7e50-4a77-8d4a-9fbf3b87c39f_buggy.java b/tmp/a243328d-4241-404a-a79f-bfa081baa41b_fixed.java
index 5f1dcf2..ed14264 100644
--- a/tmp/c473f50e-7e50-4a77-8d4a-9fbf3b87c39f_buggy.java
+++ b/tmp/a243328d-4241-404a-a79f-bfa081baa41b_fixed.java
@@ -1,41 +1,51 @@
-    /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
+            // check convergence
+            if (checkConvergence()) {
                 return;
-
             }
 
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[] { contracted, original[1], original[2], original[3] };
+            } else {
+                // shrink the simplex
+                for (int i = 0; i < simplex.length; i++) {
+                    if (i != 0) {
+                        simplex[i] = evaluateNewSimplex(original, sigma, comparator);
+                    }
+                }
+            }
 
             // check convergence
+            if (checkConvergence()) {
                 return;
             }
-
         }
-
+    }
 }
\ No newline at end of file
