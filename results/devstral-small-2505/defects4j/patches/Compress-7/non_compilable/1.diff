diff --git a/tmp/21ead291-7342-4d2c-bd44-95c39371f440_buggy.java b/tmp/022aa7ae-98ee-4319-b6ee-bba596651c3c_fixed.java
index d6662c7..6ceb576 100644
--- a/tmp/21ead291-7342-4d2c-bd44-95c39371f440_buggy.java
+++ b/tmp/022aa7ae-98ee-4319-b6ee-bba596651c3c_fixed.java
@@ -1,23 +1,23 @@
-    /**
-     * Parse an entry name from a buffer.
-     * Parsing stops when a NUL is found
-     * or the buffer length is reached.
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse.
-     * @return The entry name.
-     */
+import java.nio.charset.StandardCharsets;
+import java.nio.ByteBuffer;
+import java.nio.CharBuffer;
+import java.nio.charset.CharsetDecoder;
+import java.nio.charset.CodingErrorAction;
+
 public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
     int end = offset + length;
+    ByteBuffer byteBuffer = ByteBuffer.wrap(buffer, offset, length);
+    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()
+            .onMalformedInput(CodingErrorAction.REPLACE)
+            .onUnmappableCharacter(CodingErrorAction.REPLACE);
 
-        for (int i = offset; i < end; ++i) {
-            if (buffer[i] == 0) {
-                break;
+    CharBuffer charBuffer = decoder.decode(byteBuffer);
+
+    for (int i = 0; i < charBuffer.length(); i++) {
+        if (charBuffer.charAt(i) == 0) {
+            return charBuffer.subSequence(0, i).toString();
         }
-            result.append((char) buffer[i]);
     }
 
-        return result.toString();
+    return charBuffer.toString();
 }
\ No newline at end of file
