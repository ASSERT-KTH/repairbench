diff --git a/tmp/86956114-eafb-403a-a812-9701610751be_buggy.java b/tmp/4aaff2b1-3fde-43dd-a0b7-543aa64c0687_fixed.java
index f674e52..119fa46 100644
--- a/tmp/86956114-eafb-403a-a812-9701610751be_buggy.java
+++ b/tmp/4aaff2b1-3fde-43dd-a0b7-543aa64c0687_fixed.java
@@ -1,41 +1,35 @@
-    /**
-     * Test for the equality of two Complex objects.
-     * <p>
-     * If both the real and imaginary parts of two Complex numbers
-     * are exactly the same, and neither is <code>Double.NaN</code>, the two
-     * Complex objects are considered to be equal.</p>
-     * <p>
-     * All <code>NaN</code> values are considered to be equal - i.e, if either
-     * (or both) real and imaginary parts of the complex number are equal
-     * to <code>Double.NaN</code>, the complex number is equal to 
-     * <code>Complex.NaN</code>.</p>
-     *
-     * @param other Object to test for equality to this
-     * @return true if two Complex objects are equal, false if
-     *         object is null, not an instance of Complex, or
-     *         not equal to this Complex instance
-     * 
-     */
+@Override
 public boolean equals(Object other) {
     boolean ret;
 
     if (this == other) {
         ret = true;
     } else if (other == null) {
         ret = false;
     } else  {
         try {
             Complex rhs = (Complex)other;
             if (rhs.isNaN()) {
                 ret = this.isNaN();
             } else {
                 ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
             }
         } catch (ClassCastException ex) {
             // ignore exception
             ret = false;
         }
     }
 
     return ret;
 }
+
+@Override
+public int hashCode() {
+    if (isNaN()) {
+        return 7; // A prime number to represent NaN
+    } else {
+        long realBits = Double.doubleToRawLongBits(real);
+        long imaginaryBits = Double.doubleToRawLongBits(imaginary);
+        return 31 * (int)(realBits ^ (realBits >>> 32)) + (int)(imaginaryBits ^ (imaginaryBits >>> 32));
+    }
+}
\ No newline at end of file
