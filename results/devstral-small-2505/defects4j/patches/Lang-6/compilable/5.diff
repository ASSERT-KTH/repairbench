diff --git a/tmp/a53532da-91a1-4e12-821c-c8d801014e10_buggy.java b/tmp/ef950fe2-a615-4a82-88cd-97765cead9d1_fixed.java
index 4c1ed27..5a07202 100644
--- a/tmp/a53532da-91a1-4e12-821c-c8d801014e10_buggy.java
+++ b/tmp/ef950fe2-a615-4a82-88cd-97765cead9d1_fixed.java
@@ -1,32 +1,32 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
+                int codePoint = Character.codePointAt(input, pos);
+                out.write(Character.toChars(codePoint));
+                pos += Character.charCount(codePoint);
                 continue;
             }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+            // contract with translators is that they have to understand codepoints
+            // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
             }
         }
     }
\ No newline at end of file
