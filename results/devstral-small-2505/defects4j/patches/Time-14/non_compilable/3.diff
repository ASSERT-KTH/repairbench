diff --git a/tmp/76a58e4b-58f2-4242-9644-68e275049aaf_buggy.java b/tmp/574c9b03-f5f7-4dea-9cb7-3356f6853827_fixed.java
index 10616db..2fd2996 100644
--- a/tmp/76a58e4b-58f2-4242-9644-68e275049aaf_buggy.java
+++ b/tmp/574c9b03-f5f7-4dea-9cb7-3356f6853827_fixed.java
@@ -1,19 +1,31 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
+
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
+
+        // Adjust the day of month for leap years and end of month cases
+        if (fieldIndex == Chronology.DAY_OF_MONTH) {
+            int dayOfMonth = values[fieldIndex];
+            int month = values[Chronology.MONTH_OF_YEAR];
+            int year = values[Chronology.YEAR];
+
+            // Check if the day of month is out of range for the given month
+            if (dayOfMonth > iChronology.getMonthLength(year, month)) {
+                dayOfMonth = iChronology.getMonthLength(year, month);
+            }
+
+            values[fieldIndex] = dayOfMonth;
+        }
+
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
