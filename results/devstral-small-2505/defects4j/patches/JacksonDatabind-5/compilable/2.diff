diff --git a/tmp/6054fd66-6820-4b0f-b6bb-c0abef4a14bb_buggy.java b/tmp/13c80d16-bdb4-4b75-b5a4-031fac460f48_fixed.java
index b2db1d6..231a195 100644
--- a/tmp/6054fd66-6820-4b0f-b6bb-c0abef4a14bb_buggy.java
+++ b/tmp/13c80d16-bdb4-4b75-b5a4-031fac460f48_fixed.java
@@ -1,29 +1,38 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
                 /* Otherwise will have precedence, but must wait
                  * until we find the real method (mixIn methods are
                  * just placeholder, can't be called)
                  */
             } else {
                 // Well, or, as per [Issue#515], multi-level merge within mixins...
                 mixIns.add(_constructMethod(m));
             }
         }
     }
+    // Ensure the mixIns map contains the mixInCls methods
+    if (mixInCls != null) {
+        for (Method m : mixInCls.getDeclaredMethods()) {
+            if (!_isIncludableMemberMethod(m)) {
+                continue;
+            }
+            mixIns.add(_constructMethod(m));
+        }
+    }
 }
\ No newline at end of file
