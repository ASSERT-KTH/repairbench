diff --git a/tmp/2f42b70b-241d-46f7-a76b-a156f948a295_buggy.java b/tmp/3285bedb-63ca-4f59-8476-61980ba35aa6_fixed.java
index 822447c..d279b0b 100644
--- a/tmp/2f42b70b-241d-46f7-a76b-a156f948a295_buggy.java
+++ b/tmp/3285bedb-63ca-4f59-8476-61980ba35aa6_fixed.java
@@ -1,37 +1,38 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      *
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      *
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        for (int i = 0; i < len; ) {
+            int codePoint = str.codePointAt(i);
+            i += Character.charCount(codePoint);
+            String entityName = this.entityName(codePoint);
             if (entityName == null) {
-                if (c > 0x7F) {
+                if (codePoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codePoint, 10));
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    writer.write(codePoint);
                 }
             } else {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
         }
     }
\ No newline at end of file
