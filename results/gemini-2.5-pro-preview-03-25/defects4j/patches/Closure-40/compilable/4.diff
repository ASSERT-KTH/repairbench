diff --git a/tmp/97d1c57b-ff5b-4970-9449-b393c923cb92_buggy.java b/tmp/5c16469f-62f0-457e-93c8-492d087a308b_fixed.java
index 670114d..43e9455 100644
--- a/tmp/97d1c57b-ff5b-4970-9449-b393c923cb92_buggy.java
+++ b/tmp/5c16469f-62f0-457e-93c8-492d087a308b_fixed.java
@@ -1,48 +1,70 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null) {
+            // Use getName to ensure the name is registered
             JsName nameInfo = getName(nameNode.getString(), true);
             recordSet(nameInfo.name, nameNode);
           }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
 
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
       } else if (n.isCall()) {
-        Node nameNode = n.getFirstChild();
+        Node nameNode = n.getFirstChild(); // Callee
         NameInformation ns = createNameInformation(t, nameNode, n);
+
+        // Special handling for functions like goog.inherits, etc.
         if (ns != null && ns.onlyAffectsClassDef) {
           JsName name = getName(ns.name, false);
           if (name != null) {
             refNodes.add(new ClassDefiningFunctionNode(
                 name, n, parent, parent.getParent()));
+
+            // Record references to the arguments of this call.
+            // Arguments start from the second child.
+            for (int i = 1; i < n.getChildCount(); i++) {
+              Node argNode = n.getChildAtIndex(i);
+              // Check if argNode is a name or qualified name before creating NameInformation
+              if (argNode.isName() || argNode.isGetProp()) {
+                  NameInformation nsArg = createNameInformation(t, argNode, n);
+                  if (nsArg != null) {
+                    // Record a reference to the argument name.
+                    // Using getName(..., false) ensures the name exists in the graph
+                    // if it was previously defined, marking the reference link.
+                    getName(nsArg.name, false);
                   }
               }
             }
           }
+        }
+        // NOTE: General references within non-special calls are assumed to be
+        // handled implicitly by the traversal visiting the argument nodes themselves,
+        // or by a different analysis mechanism.
+      }
+    }
\ No newline at end of file
