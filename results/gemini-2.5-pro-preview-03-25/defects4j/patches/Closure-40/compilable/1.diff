diff --git a/tmp/4c2da8b9-c8c5-44c5-afda-4f2698386c49_buggy.java b/tmp/43108017-7734-4c76-a0d6-2f3414d7d6ff_fixed.java
index 670114d..57d9ab8 100644
--- a/tmp/4c2da8b9-c8c5-44c5-afda-4f2698386c49_buggy.java
+++ b/tmp/43108017-7734-4c76-a0d6-2f3414d7d6ff_fixed.java
@@ -1,48 +1,67 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
-        if (NodeUtil.isVarDeclaration(n)) {
-          NameInformation ns = createNameInformation(t, n, parent);
-          Preconditions.checkNotNull(ns);
-          recordSet(ns.name, n);
-        } else if (NodeUtil.isFunctionDeclaration(n)) {
+        // Note: Global vars are recorded in the CALCULATE_GLOBALS pass.
+        // Handle functions + objlit keys.
+        if (NodeUtil.isFunctionDeclaration(n)) {
+          // Function declarations are handled via assigns -> recordSet.
+          // FUNCTION nodes are handled by the Call callback below.
+          // TODO(nicksantos): Fix this. This is dead code.
           Node nameNode = n.getFirstChild();
+          // A function declaration in the global scope is assigned to a name.
+          // If we're computing smart name removal, we need to map this name
+          // back to the function node.
+          if (!nameNode.getString().isEmpty()) {
             NameInformation ns = createNameInformation(t, nameNode, n);
             if (ns != null) {
-            JsName nameInfo = getName(nameNode.getString(), true);
-            recordSet(nameInfo.name, nameNode);
+              recordSet(ns.name, nameNode);
+            }
           }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
 
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
       } else if (n.isCall()) {
         Node nameNode = n.getFirstChild();
         NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null && ns.onlyAffectsClassDef) {
+        // Record references to functions only if we can resolve the name.
+        if (ns != null) {
+          if (ns.onlyAffectsClassDef) {
             JsName name = getName(ns.name, false);
             if (name != null) {
               refNodes.add(new ClassDefiningFunctionNode(
                   name, n, parent, parent.getParent()));
             }
+          } else {
+            // Record function calls for naming purposes.
+            // Functions that are exported or potentially exported should be named.
+            recordSet(ns.name, nameNode);
+          }
+        }
+      } else if (n.isNew()) {
+        // Handle constructor calls similar to regular calls.
+        Node nameNode = n.getFirstChild();
+        NameInformation ns = createNameInformation(t, nameNode, n);
+        if (ns != null) {
+          recordSet(ns.name, nameNode);
         }
       }
     }
\ No newline at end of file
