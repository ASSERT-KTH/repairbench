diff --git a/tmp/13795880-1b6d-4930-b70b-467d7adcd426_buggy.java b/tmp/601ec19e-8660-4938-82cd-72e53e0bfa25_fixed.java
index 670114d..504b1a0 100644
--- a/tmp/13795880-1b6d-4930-b70b-467d7adcd426_buggy.java
+++ b/tmp/601ec19e-8660-4938-82cd-72e53e0bfa25_fixed.java
@@ -1,48 +1,78 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null) {
+            // Use getName to ensure that the name is defined.
             JsName nameInfo = getName(nameNode.getString(), true);
             recordSet(nameInfo.name, nameNode);
           }
-        } else if (NodeUtil.isObjectLitKey(n, parent)) {
-          NameInformation ns = createNameInformation(t, n, parent);
-          if (ns != null) {
-            recordSet(ns.name, n);
-          }
         }
+        // NOTE: Object literal keys are handled by the GETPROP case below.
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
-
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
+        // NOTE: The right side of the assignment is handled by the generic
+        // cases below.
       } else if (n.isCall()) {
         Node nameNode = n.getFirstChild();
         NameInformation ns = createNameInformation(t, nameNode, n);
+        // Record call sites for certain functions (e.g., goog.inherits).
         if (ns != null && ns.onlyAffectsClassDef) {
           JsName name = getName(ns.name, false);
           if (name != null) {
              refNodes.add(new ClassDefiningFunctionNode(
                  name, n, parent, parent.getParent()));
           }
         }
+        // NOTE: Arguments are handled by the generic cases below.
+
+      } else if (parent != null && parent.isExprResult()) {
+        // Record references. Unqualified names used as expressions
+        // are EXPR_RESULT children. Other names are handled by GETPROP.
+        if (n.isName()) {
+          // Make sure we are not recording function declarations, which are
+          // handled above. Check that the parent's parent is not a function
+          // or that the name is not the function name.
+          if (!parent.getParent().isFunction() || n != parent.getParent().getFirstChild()) {
+            // Make sure we are not recording 'eval' or 'arguments' which are
+            // special.
+             if (!"eval".equals(n.getString()) && !"arguments".equals(n.getString())) {
+               NameInformation ns = createNameInformation(t, n, parent);
+               if (ns != null) {
+                 recordSet(ns.name, n); // Record the reference.
                }
              }
+          }
+        }
+      } else if (n.isGetProp()) {
+        // Record references for qualified names.
+        NameInformation ns = createNameInformation(t, n, parent);
+        if (ns != null) {
+          // recordSet is used to record both sets and references for properties.
+          // Later analysis determines the type of reference.
+          recordSet(ns.name, n);
+        }
+      }
+      // NOTE: No specific handling for NAME nodes needed here other than the
+      // EXPR_RESULT case, because NAME nodes are typically children of other
+      // nodes (like GETPROP, ASSIGN, CALL, VAR) that are already handled.
+    }
\ No newline at end of file
