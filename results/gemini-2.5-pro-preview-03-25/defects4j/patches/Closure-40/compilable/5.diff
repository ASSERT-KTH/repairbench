diff --git a/tmp/108af9cc-ac34-41f2-b3d8-10d76677ba17_buggy.java b/tmp/c12a0758-b0a4-420d-b723-2ab06e66b16c_fixed.java
index 670114d..4624a4b 100644
--- a/tmp/108af9cc-ac34-41f2-b3d8-10d76677ba17_buggy.java
+++ b/tmp/c12a0758-b0a4-420d-b723-2ab06e66b16c_fixed.java
@@ -1,48 +1,73 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
-          if (ns != null) {
-            JsName nameInfo = getName(nameNode.getString(), true);
-            recordSet(nameInfo.name, nameNode);
-          }
+          // Function declarations are always namespace defining.
+          Preconditions.checkNotNull(ns);
+          recordSet(ns.name, nameNode);
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
 
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
       } else if (n.isCall()) {
         Node nameNode = n.getFirstChild();
         NameInformation ns = createNameInformation(t, nameNode, n);
+        // Determining if the call target is a class defining function like
+        // goog.inherits is potentially expensive, so we short circuit the
+        // ClassDefiningFunctionNode creation if we know that the name is
+        // not potentially referring to such a function.
         if (ns != null && ns.onlyAffectsClassDef) {
           JsName name = getName(ns.name, false);
           if (name != null) {
             refNodes.add(new ClassDefiningFunctionNode(
                 name, n, parent, parent.getParent()));
+
+            // If this call defines a class relationship (like goog.inherits),
+            // we need to ensure that the names of the classes involved
+            // (passed as arguments) are created in our map. This is necessary
+            // because the classes might not be defined anywhere else,
+            // especially in the case of interfaces or forward declarations.
+            // The later stages of analysis need to find these names.
+            Node firstArg = nameNode.getNext();
+            if (firstArg != null) {
+              NameInformation firstArgNs = createNameInformation(t, firstArg, n);
+              if (firstArgNs != null) {
+                getName(firstArgNs.name, true); // Ensure child class name exists
+              }
+
+              Node secondArg = firstArg.getNext();
+              if (secondArg != null) {
+                NameInformation secondArgNs = createNameInformation(t, secondArg, n);
+                if (secondArgNs != null) {
+                  getName(secondArgNs.name, true); // Ensure parent class name exists
+                }
+              }
+            }
           }
         }
       }
     }
\ No newline at end of file
