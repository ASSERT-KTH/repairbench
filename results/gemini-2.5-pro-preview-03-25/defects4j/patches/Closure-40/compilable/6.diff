diff --git a/tmp/1b1e7f30-5ac3-4b73-842d-c30c5660e7c5_buggy.java b/tmp/fb3d07db-da14-407f-a5ab-948965d8d860_fixed.java
index 670114d..e40365a 100644
--- a/tmp/1b1e7f30-5ac3-4b73-842d-c30c5660e7c5_buggy.java
+++ b/tmp/fb3d07db-da14-407f-a5ab-948965d8d860_fixed.java
@@ -1,48 +1,83 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null) {
-            JsName nameInfo = getName(nameNode.getString(), true);
+            // Use ns.name which is the canonical name.
+            JsName nameInfo = getName(ns.name, true);
             recordSet(nameInfo.name, nameNode);
           }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
-        Node nameNode = n.getFirstChild();
+        Node nameNode = n.getFirstChild(); // LHS
 
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
-            recordSet(ns.name, nameNode);
+            recordSet(ns.name, nameNode); // Record set for LHS
           }
+          // References in RHS are handled by traversal visiting RHS nodes
         }
       } else if (n.isCall()) {
-        Node nameNode = n.getFirstChild();
+        Node nameNode = n.getFirstChild(); // Function being called
         NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null && ns.onlyAffectsClassDef) {
-          JsName name = getName(ns.name, false);
+
+        if (ns != null) {
+          // Mark the called function name as referenced.
+          getName(ns.name, false);
+
+          if (ns.onlyAffectsClassDef) {
+            // Special handling for calls like goog.inherits, etc.
+
+            // Record the call itself for dependency analysis.
+            JsName name = getName(ns.name, false); // Re-retrieve the JsName
             if (name != null) {
               refNodes.add(new ClassDefiningFunctionNode(
                   name, n, parent, parent.getParent()));
             }
+
+            // Handle arguments for class-defining calls (like goog.inherits)
+            // First argument is the subclass name (definition)
+            Node subclassNode = nameNode.getNext();
+            if (subclassNode != null) {
+              NameInformation subNs = createNameInformation(t, subclassNode, n);
+              if (subNs != null) {
+                recordSet(subNs.name, subclassNode); // Treat subclass as defined
               }
+
+              // Second argument is the superclass name (reference)
+              Node superclassNode = subclassNode.getNext();
+              if (superclassNode != null) {
+                NameInformation superNs = createNameInformation(t, superclassNode, n);
+                if (superNs != null) {
+                  // Mark superclass as referenced. Calling getName should be sufficient
+                  // to ensure it's not removed if otherwise unused.
+                  getName(superNs.name, false);
+                }
+              }
+            }
+          }
+          // For non-class-defining calls, references in arguments
+          // are handled by standard traversal visiting argument nodes.
+        }
+        // If ns is null, createNameInformation failed (e.g., complex call target).
       }
     }
\ No newline at end of file
