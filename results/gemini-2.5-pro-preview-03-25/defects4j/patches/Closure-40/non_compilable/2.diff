diff --git a/tmp/95862c34-b953-4cc6-94b7-b508e566d990_buggy.java b/tmp/4d605dcc-ea3e-4d19-a04e-36570518b740_fixed.java
index 670114d..b12e73c 100644
--- a/tmp/95862c34-b953-4cc6-94b7-b508e566d990_buggy.java
+++ b/tmp/4d605dcc-ea3e-4d19-a04e-36570518b740_fixed.java
@@ -1,48 +1,77 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
-          if (ns != null) {
+          // Function statement names are NAME nodes, so they cannot be
+          // references to potentially undefined names.
+          Preconditions.checkNotNull(ns);
           JsName nameInfo = getName(nameNode.getString(), true);
           recordSet(nameInfo.name, nameNode);
-          }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
 
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
       } else if (n.isCall()) {
         Node nameNode = n.getFirstChild();
-        NameInformation ns = createNameInformation(t, nameNode, n);
+        NameInformation ns = createNameInformation(t, nameNode, n); // Info about the function being called
+
+        // Original logic for calls affecting class definition
+        // (e.g. goog.addSingletonGetter)
         if (ns != null && ns.onlyAffectsClassDef) {
           JsName name = getName(ns.name, false);
           if (name != null) {
           refNodes.add(new ClassDefiningFunctionNode(
               name, n, parent, parent.getParent()));
           }
         }
+
+        // START OF FIX: Special handling for goog.inherits arguments
+        // Need to make sure the names exists, and are related.
+        if (NodeUtil.isGoogInheritsCall(n)) {
+          Node childArg = nameNode.getNext();
+          Node parentArg = (childArg == null) ? null : childArg.getNext();
+
+          // Record the 'definition' implied by the child argument
+          if (childArg != null) {
+            NameInformation childNs = createNameInformation(t, childArg, n);
+            if (childNs != null) {
+              // Treat the child class as being 'set' or defined by this call
+              recordSet(childNs.name, childArg);
+            }
+          }
+          // Record the 'reference' to the parent argument
+          if (parentArg != null) {
+             NameInformation parentNs = createNameInformation(t, parentArg, n);
+             if (parentNs != null) {
+               // Ensure the parent name exists and is marked as referenced
+               getName(parentNs.name, true);
+             }
+          }
+        }
+        // END OF FIX
       }
     }
\ No newline at end of file
