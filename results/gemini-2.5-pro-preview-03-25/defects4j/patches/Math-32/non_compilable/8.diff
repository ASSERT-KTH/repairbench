diff --git a/tmp/cdb9424d-f05e-4e04-bf79-16ee124e66ed_buggy.java b/tmp/8c28dd2f-b1cb-44df-85ec-afb30c7fac62_fixed.java
index c53ca2a..1ea39b1 100644
--- a/tmp/cdb9424d-f05e-4e04-bf79-16ee124e66ed_buggy.java
+++ b/tmp/8c28dd2f-b1cb-44df-85ec-afb30c7fac62_fixed.java
@@ -1,54 +1,71 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
         if (v.length == 0) {
-            final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
-                setSize(Double.POSITIVE_INFINITY);
-                setBarycenter(Vector2D.NaN);
-            } else {
+            // Region has no vertices, check if it's empty or full
+            // Use isEmpty() and isFull() which are more robust than checking the root attribute directly
+            if (isEmpty()) {
+                // the instance is empty
                 setSize(0);
-                setBarycenter(new Vector2D(0, 0));
+                setBarycenter(Vector2D.NaN); // Barycenter is undefined for empty region
+            } else if (isFull()) {
+                 // the instance covers the whole space
+                 setSize(Double.POSITIVE_INFINITY);
+                 setBarycenter(Vector2D.NaN); // Barycenter is undefined for infinite region
+             } else {
+                 // This case should logically not happen for a valid PolygonsSet without vertices.
+                 // If it occurs, it might indicate an issue with the BSP tree structure or vertex extraction.
+                 // Assuming it implies an infinite region as a fallback.
+                 setSize(Double.POSITIVE_INFINITY);
+                 setBarycenter(Vector2D.NaN);
              }
         } else if (v[0][0] == null) {
             // there is at least one open-loop: the polygon is infinite
             setSize(Double.POSITIVE_INFINITY);
-            setBarycenter(Vector2D.NaN);
+            setBarycenter(Vector2D.NaN); // Barycenter is undefined for infinite region
         } else {
             // all loops are closed, we compute some integrals around the shape
 
             double sum  = 0;
             double sumX = 0;
             double sumY = 0;
 
             for (Vector2D[] loop : v) {
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
                     final double y0 = y1;
                     x1 = point.getX();
                     y1 = point.getY();
                     final double factor = x0 * y1 - y0 * x1;
                     sum  += factor;
                     sumX += factor * (x0 + x1);
                     sumY += factor * (y0 + y1);
                 }
             }
 
             if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+                // the polygon represents a finite hole in an infinite background
                 setSize(Double.POSITIVE_INFINITY);
-                setBarycenter(Vector2D.NaN);
+                setBarycenter(Vector2D.NaN); // Barycenter is undefined for infinite region
             } else {
+                // the polygon is finite
                 setSize(sum / 2);
+                // Avoid division by zero if sum is extremely small (close to zero)
+                if (sum < 1.0e-10) { // Use a small tolerance
+                    // Polygon is degenerate (e.g., a line segment), area is zero.
+                    // Compute barycenter as the average of vertices if possible, otherwise NaN.
+                    // For simplicity, setting to NaN as barycenter is ill-defined for zero area.
+                    setBarycenter(Vector2D.NaN);
+                } else {
                     setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
                 }
+            }
 
         }
 
     }
\ No newline at end of file
