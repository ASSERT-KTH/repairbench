diff --git a/tmp/0ac020ec-8a20-46c6-90a0-5f520ef78de9_buggy.java b/tmp/4f87ca7f-4701-45b0-848e-f28359456743_fixed.java
index c53ca2a..54aa1e7 100644
--- a/tmp/0ac020ec-8a20-46c6-90a0-5f520ef78de9_buggy.java
+++ b/tmp/4f87ca7f-4701-45b0-848e-f28359456743_fixed.java
@@ -1,54 +1,109 @@
+import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
+import org.apache.commons.math3.geometry.partitioning.BSPTree;
+import org.apache.commons.math3.util.Precision;
+// Other necessary imports like Euclidean2D assumed to be present in the class.
+
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
-        final Vector2D[][] v = getVertices();
-
-        if (v.length == 0) {
+        // Get the underlying BSP tree structure used to represent the polygon set
         final BSPTree<Euclidean2D> tree = getTree(false);
+
+        if (tree.getCut() == null) {
+            // The tree is a simple leaf node (no internal cuts/hyperplanes).
+            // This represents either the full 2D space or the empty 2D space.
+            // The attribute of a leaf node in this partitioning system must be a Boolean.
             if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
+                // Attribute is TRUE: Represents the full space.
                 setSize(Double.POSITIVE_INFINITY);
-                setBarycenter(Vector2D.NaN);
+                setBarycenter(Vector2D.NaN); // Barycenter is undefined for infinite space
             } else {
+                // Attribute is FALSE: Represents the empty space.
                 setSize(0);
+                // Keep the original convention for the barycenter of an empty set.
                 setBarycenter(new Vector2D(0, 0));
             }
+        } else {
+            // The tree has internal cuts (hyperplanes), representing boundaries.
+            // We need to compute properties based on the boundary vertices.
+            // The getVertices() method extracts these boundary loops.
+            // Note: getVertices() can return an empty array if the boundary
+            // extraction process finds no *closed* loops (e.g., for infinite regions
+            // defined by open boundaries, or degenerate cases), even though the tree is complex.
+            final Vector2D[][] v = getVertices();
+
+            if (v.length == 0) {
+                // Although the tree is complex (has cuts), no closed vertex loops were extracted.
+                // This typically indicates an infinite region that isn't the simple "full plane"
+                // handled by the leaf node case above.
+                // This scenario was previously mishandled by incorrectly assuming v.length == 0
+                // implied a leaf node, leading to the ClassCastException.
+                setSize(Double.POSITIVE_INFINITY);
+                setBarycenter(Vector2D.NaN);
             } else if (v[0][0] == null) {
-            // there is at least one open-loop: the polygon is infinite
+                // The first element of the first loop is null, which is a convention used
+                // by getVertices() to indicate that at least one open loop exists.
+                // This signifies an infinite polygon.
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
-            // all loops are closed, we compute some integrals around the shape
-
-            double sum  = 0;
-            double sumX = 0;
-            double sumY = 0;
+                // All extracted loops are closed. We can compute the size (area) and barycenter
+                // using the Shoelace formula (derived from Green's theorem applied to polygon integrals).
+                double sum = 0;  // Accumulates 2 * signed area
+                double sumX = 0; // Accumulates integral of x dA * 3 / 2 (related term)
+                double sumY = 0; // Accumulates integral of y dA * 3 / 2 (related term)
 
                 for (Vector2D[] loop : v) {
+                    // Process each closed loop (can be the outer boundary or boundaries of holes)
+                    // Add a defensive check for malformed loops (null or too few points)
+                    if (loop == null || loop.length < 1) {
+                        continue;
+                    }
+                    // Traverse the loop vertices using the Shoelace formula approach
                     double x1 = loop[loop.length - 1].getX();
                     double y1 = loop[loop.length - 1].getY();
                     for (final Vector2D point : loop) {
+                        // It's guaranteed loop points are non-null Vector2D here
                         final double x0 = x1;
                         final double y0 = y1;
                         x1 = point.getX();
                         y1 = point.getY();
+                        // Factor = x0*y1 - y0*x1 = 2 * signed area of the triangle (origin, p0, p1)
                         final double factor = x0 * y1 - y0 * x1;
                         sum  += factor;
+                        // Accumulate terms needed for the barycenter calculation
+                        // factor * (x0 + x1) relates to the integral of x dA
                         sumX += factor * (x0 + x1);
+                        // factor * (y0 + y1) relates to the integral of y dA
                         sumY += factor * (y0 + y1);
                     }
                 }
 
-            if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+                // Check the total signed area sum ('sum' is 2 * signed area)
+                // Use a small tolerance for floating point comparison to zero to handle potential inaccuracies.
+                if (Precision.equals(sum, 0.0, Precision.EPSILON)) {
+                    // The total signed area is effectively zero. This occurs for degenerate polygons
+                    // (e.g., reduced to a line or a point) or self-intersecting polygons where areas cancel out.
+                    setSize(0.0);
+                    // The barycenter is undefined or ill-defined for a zero-area polygon.
+                    setBarycenter(Vector2D.NaN);
+                } else if (sum < 0) {
+                    // A negative total signed area indicates a net clockwise orientation of boundaries.
+                    // In the convention used (counter-clockwise for solid, clockwise for hole),
+                    // this typically means the defined region is infinite (e.g., the plane with finite holes).
                     setSize(Double.POSITIVE_INFINITY);
                     setBarycenter(Vector2D.NaN);
                 } else {
-                setSize(sum / 2);
-                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
+                    // sum > 0 indicates a standard finite area defined by counter-clockwise outer boundary
+                    // possibly modified by clockwise hole boundaries (whose negative areas are included in sum).
+                    // The size is half the accumulated sum.
+                    setSize(sum / 2.0);
+                    // Compute the barycenter coordinates using the accumulated integral sums.
+                    // The barycenter (X, Y) is given by (Integral x dA / Area, Integral y dA / Area).
+                    // Using the computed sums: X = sumX / (3 * sum), Y = sumY / (3 * sum).
+                    setBarycenter(new Vector2D(sumX / (3.0 * sum), sumY / (3.0 * sum)));
+                }
             }
-
         }
-
     }
\ No newline at end of file
