diff --git a/tmp/0f2205f4-ee35-40d3-be65-76acc2b9e596_buggy.java b/tmp/e71b0fe3-2db7-4b99-8faf-52e1aa07462d_fixed.java
index c53ca2a..da53943 100644
--- a/tmp/0f2205f4-ee35-40d3-be65-76acc2b9e596_buggy.java
+++ b/tmp/e71b0fe3-2db7-4b99-8faf-52e1aa07462d_fixed.java
@@ -1,54 +1,76 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
         if (v.length == 0) {
+            // No closed boundary loops were found.
+            // The region might be empty, the full plane, or infinite (e.g., a half-plane).
             final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
-                setSize(Double.POSITIVE_INFINITY);
-                setBarycenter(Vector2D.NaN);
-            } else {
+
+            // Use Region methods to determine the nature of the region represented by the tree.
+            // These methods correctly handle complex tree structures, unlike simply
+            // checking the root node's attribute which might not be a Boolean for non-leaf nodes.
+            if (isEmpty(tree)) {
+                // the instance is empty
                 setSize(0);
-                setBarycenter(new Vector2D(0, 0));
+                setBarycenter(new Vector2D(0, 0)); // Consistent with original behavior for empty set
+            } else if (isFull(tree)) {
+                // the instance covers the whole space
+                setSize(Double.POSITIVE_INFINITY);
+                setBarycenter(Vector2D.NaN);
+            } else {
+                // The region is neither empty nor full, but has no finite boundary loops.
+                // This implies an infinite region (e.g., half-plane, infinite strip).
+                setSize(Double.POSITIVE_INFINITY);
+                setBarycenter(Vector2D.NaN);
             }
+
         } else if (v[0][0] == null) {
             // there is at least one open-loop: the polygon is infinite
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             // all loops are closed, we compute some integrals around the shape
 
             double sum  = 0;
             double sumX = 0;
             double sumY = 0;
 
             for (Vector2D[] loop : v) {
+                // Apply Green's theorem / Shoelace formula
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
                     final double y0 = y1;
                     x1 = point.getX();
                     y1 = point.getY();
+                    // 'factor' is twice the signed area of the triangle (origin, P0, P1)
                     final double factor = x0 * y1 - y0 * x1;
-                    sum  += factor;
-                    sumX += factor * (x0 + x1);
-                    sumY += factor * (y0 + y1);
+                    sum  += factor; // Accumulates 2 * signed area of the polygon
+                    sumX += factor * (x0 + x1); // Accumulates integral(x * (x dy - y dx))
+                    sumY += factor * (y0 + y1); // Accumulates integral(y * (x dy - y dx))
                 }
             }
 
+            // sum/2 is the signed area. getVertices() should orient loops
+            // (counter-clockwise for outer, clockwise for holes) so sum is positive.
             if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+                // This might indicate issues with loop orientation or complex shapes.
+                // Following the original code's behavior as a fallback.
+                // A negative area might imply the polygon represents the 'outside'.
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
-                setSize(sum / 2);
+                // Area = sum / 2
+                setSize(sum / 2.0);
+                // Barycenter coordinates are computed using related integrals.
+                // If sum (area) is 0, division results in NaN/Infinity, correctly yielding Vector2D.NaN.
                 setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
             }
 
         }
 
     }
\ No newline at end of file
