diff --git a/tmp/721e2605-4294-4be1-855c-2b5aa5e5f74d_buggy.java b/tmp/ee35439a-cd07-4b2d-a411-e376e9a78133_fixed.java
index c53ca2a..d530e11 100644
--- a/tmp/721e2605-4294-4be1-855c-2b5aa5e5f74d_buggy.java
+++ b/tmp/ee35439a-cd07-4b2d-a411-e376e9a78133_fixed.java
@@ -1,54 +1,71 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
         if (v.length == 0) {
-            final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
+            // The region is either empty or full, check using dedicated methods
+            // The ClassCastException occurred because tree.getAttribute() might not be a Boolean
+            // when v.length is 0, potentially due to tree construction details or boundary attributes.
+            // Using isFull() is a more robust way to check for the full space case.
+            if (isFull()) {
                 // the instance covers the whole space
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
+                // The instance is empty (since v.length == 0 and not full)
                 setSize(0);
-                setBarycenter(new Vector2D(0, 0));
+                setBarycenter(new Vector2D(0, 0)); // Keep original convention for empty set barycenter
             }
         } else if (v[0][0] == null) {
             // there is at least one open-loop: the polygon is infinite
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
-            // all loops are closed, we compute some integrals around the shape
+            // all loops are closed, we compute some integrals around the shape using Shoelace formula
 
-            double sum  = 0;
-            double sumX = 0;
-            double sumY = 0;
+            double sum  = 0; // accumulator for 2 * signed area
+            double sumX = 0; // accumulator for centroid integral component
+            double sumY = 0; // accumulator for centroid integral component
 
             for (Vector2D[] loop : v) {
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
                     final double y0 = y1;
                     x1 = point.getX();
                     y1 = point.getY();
+                    // 'factor' is 2 times the signed area of the triangle (origin, p0, p1)
                     final double factor = x0 * y1 - y0 * x1;
                     sum  += factor;
+                    // Accumulate terms for centroid calculation (based on extension of Shoelace formula)
                     sumX += factor * (x0 + x1);
                     sumY += factor * (y0 + y1);
                 }
             }
 
+            // The sign of 'sum' depends on the winding order of the vertices
             if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+                // Clockwise winding order implies the region is infinite (exterior of a polygon)
+                // or represents a hole. In PolygonsSet context, this means infinite size.
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
-                setSize(sum / 2);
-                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
+                // Counter-clockwise winding order for a finite polygon, or degenerate case (sum == 0)
+                final double area = sum / 2.0;
+                setSize(area);
+                // Handle potential division by zero if area is zero (degenerate polygon)
+                if (area == 0) {
+                    setBarycenter(Vector2D.NaN); // Barycenter is undefined for zero area
+                } else {
+                    // Compute barycenter using the formula derived from Green's theorem / Shoelace extension
+                    // Cx = (1 / (6 * Area)) * sum[(xi + x{i+1}) * (xi * y{i+1} - x{i+1} * yi)]
+                    // Cy = (1 / (6 * Area)) * sum[(yi + y{i+1}) * (xi * y{i+1} - x{i+1} * yi)]
+                    // Since Area = sum / 2.0, 6 * Area = 3 * sum
+                    setBarycenter(new Vector2D(sumX / (3.0 * sum), sumY / (3.0 * sum)));
+                }
             }
-
         }
-
     }
\ No newline at end of file
