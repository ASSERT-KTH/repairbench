diff --git a/tmp/ca24839a-ac9c-4b51-a5a1-7c757017489b_buggy.java b/tmp/70da492e-3d0b-4bd9-a94e-231925c26d7c_fixed.java
index c53ca2a..e403b20 100644
--- a/tmp/ca24839a-ac9c-4b51-a5a1-7c757017489b_buggy.java
+++ b/tmp/70da492e-3d0b-4bd9-a94e-231925c26d7c_fixed.java
@@ -1,54 +1,78 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
         if (v.length == 0) {
             final BSPTree<Euclidean2D> tree = getTree(false);
+            // Check the attribute of the root node
+            // A leaf node indicates either a full plane (true) or an empty plane (false)
+            // An internal node indicates a partition of the plane, which combined with
+            // v.length == 0 implies an infinite region (like a half-plane).
+            if (tree.getCut() == null && tree.getAttribute() instanceof Boolean) {
+                // It's a leaf node with a Boolean attribute
                 if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
+                    // Leaf node, attribute is true: represents the full space
                     setSize(Double.POSITIVE_INFINITY);
                     setBarycenter(Vector2D.NaN);
                 } else {
+                    // Leaf node, attribute is false: represents the empty space
                     setSize(0);
+                    // Original code used (0,0) for the empty set barycenter.
+                    // While NaN might be mathematically more appropriate, we keep the original behavior
+                    // unless it's proven wrong by tests.
                     setBarycenter(new Vector2D(0, 0));
                 }
+            } else {
+                // Either it's not a leaf node (internal node) or the attribute is not Boolean.
+                // This implies a non-trivial partition or an unexpected state.
+                // If v.length == 0, this usually means an infinite region resulted from operations.
+                setSize(Double.POSITIVE_INFINITY);
+                setBarycenter(Vector2D.NaN);
+            }
         } else if (v[0][0] == null) {
             // there is at least one open-loop: the polygon is infinite
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             // all loops are closed, we compute some integrals around the shape
 
             double sum  = 0;
             double sumX = 0;
             double sumY = 0;
 
             for (Vector2D[] loop : v) {
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
                     final double y0 = y1;
                     x1 = point.getX();
                     y1 = point.getY();
                     final double factor = x0 * y1 - y0 * x1;
                     sum  += factor;
                     sumX += factor * (x0 + x1);
                     sumY += factor * (y0 + y1);
                 }
             }
 
             if (sum < 0) {
                 // the polygon as a finite outside surrounded by an infinite inside
+                // Note: This interpretation depends on vertex winding order conventions.
+                // A negative sum generally implies the region is infinite.
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
-                setSize(sum / 2);
+                // Finite area polygon
+                final double size = sum / 2.0;
+                setSize(size);
+                if (sum == 0) {
+                   // Zero area, barycenter is undefined
+                   setBarycenter(Vector2D.NaN);
+                } else {
                    setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
                 }
-
             }
-
+        }
     }
\ No newline at end of file
