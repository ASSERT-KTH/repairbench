diff --git a/tmp/e5a587ea-08a1-4a11-8876-cc907047fd3a_buggy.java b/tmp/c17125bc-8389-459c-be84-a2c7b78783b8_fixed.java
index c53ca2a..92b2636 100644
--- a/tmp/e5a587ea-08a1-4a11-8876-cc907047fd3a_buggy.java
+++ b/tmp/c17125bc-8389-459c-be84-a2c7b78783b8_fixed.java
@@ -1,54 +1,95 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
         if (v.length == 0) {
-            final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
-                setSize(Double.POSITIVE_INFINITY);
-                setBarycenter(Vector2D.NaN);
-            } else {
+            // The PolygonsSet represents either the empty set or the full 2D space.
+            // We need to check the underlying BSP tree directly or use AbstractRegion methods.
+            // Using this.isEmpty() is safer than checking the root attribute directly,
+            // as the root attribute might not be a Boolean in all cases.
+            if (this.isEmpty()) {
+                // The region is empty
                 setSize(0);
-                setBarycenter(new Vector2D(0, 0));
+                setBarycenter(new Vector2D(0, 0)); // Convention for empty set
+            } else {
+                // The region is not empty, and since there are no vertices,
+                // it must represent the full space.
+                setSize(Double.POSITIVE_INFINITY);
+                setBarycenter(Vector2D.NaN);
             }
         } else if (v[0][0] == null) {
             // there is at least one open-loop: the polygon is infinite
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             // all loops are closed, we compute some integrals around the shape
 
             double sum  = 0;
             double sumX = 0;
             double sumY = 0;
 
             for (Vector2D[] loop : v) {
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
                     final double y0 = y1;
                     x1 = point.getX();
                     y1 = point.getY();
                     final double factor = x0 * y1 - y0 * x1;
                     sum  += factor;
                     sumX += factor * (x0 + x1);
                     sumY += factor * (y0 + y1);
                 }
             }
 
-            if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+            if (FastMath.abs(sum) < 1.0e-10) {
+                 // Degenerate polygon (likely zero area)
+                 // Treat as empty? Or compute barycenter of vertices?
+                 // The original code didn't handle this explicitly, leading to NaN/Infinity.
+                 // Let's compute the barycenter of the vertices for robustness,
+                 // although size will be (close to) zero.
+                 // This case might indicate issues elsewhere if sum is unexpectedly near zero
+                 // for a supposedly non-degenerate polygon.
+                 if (v.length > 0 && v[0].length > 0) {
+                     double bX = 0;
+                     double bY = 0;
+                     int count = 0;
+                     for (Vector2D[] loop : v) {
+                         for (Vector2D pt : loop) {
+                             bX += pt.getX();
+                             bY += pt.getY();
+                             count++;
+                         }
+                     }
+                     if (count > 0) {
+                         setBarycenter(new Vector2D(bX / count, bY / count));
+                     } else {
+                         // Should not happen if v.length > 0 and v[0][0] != null
+                         setBarycenter(Vector2D.NaN);
+                     }
+
+                 } else {
+                      // Should not happen based on outer checks
+                     setBarycenter(Vector2D.NaN);
+                 }
+                 setSize(0.0); // Force size to 0 if sum is negligible
+
+            } else if (sum < 0) {
+                 // A negative sum indicates that the vertices sequence corresponds to a hole,
+                 // or the reference frame is left-handed.
+                 // The calculation of size and barycenter relies on Green's theorem / Shoelace formula,
+                 // which assumes counter-clockwise winding for the exterior boundary and clockwise for holes.
+                 // The getVertices() method should return loops oriented correctly.
+                 // A negative total sum might indicate an issue with vertex ordering or structure,
+                 // potentially representing a finite "outside" surrounded by an infinite "inside".
                  setSize(Double.POSITIVE_INFINITY);
                  setBarycenter(Vector2D.NaN);
              } else {
-                setSize(sum / 2);
-                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
+                 setSize(sum / 2.0);
+                 setBarycenter(new Vector2D(sumX / (3.0 * sum), sumY / (3.0 * sum)));
              }
-
         }
-
     }
\ No newline at end of file
