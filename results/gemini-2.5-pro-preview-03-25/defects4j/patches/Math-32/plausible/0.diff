diff --git a/tmp/0f2dbd98-5f26-4356-a5df-b9ebc8313cbf_buggy.java b/tmp/4d92a0a3-e00c-438a-b156-40d4e60ece2a_fixed.java
index c53ca2a..55a695b 100644
--- a/tmp/0f2dbd98-5f26-4356-a5df-b9ebc8313cbf_buggy.java
+++ b/tmp/4d92a0a3-e00c-438a-b156-40d4e60ece2a_fixed.java
@@ -1,54 +1,69 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
         if (v.length == 0) {
             final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
+            final Object attribute = tree.getAttribute(); // Get attribute first
+
+            // Check the type of the attribute before casting
+            if (attribute instanceof Boolean) {
+                if ((Boolean) attribute) {
                     // the instance covers the whole space
                     setSize(Double.POSITIVE_INFINITY);
                     setBarycenter(Vector2D.NaN);
                 } else {
+                    // the instance is empty
                     setSize(0);
                     setBarycenter(new Vector2D(0, 0));
                 }
+            } else {
+                 // The attribute is not Boolean (e.g., BoundaryAttribute).
+                 // This might happen for degenerate cases or if getVertices() fails
+                 // to extract vertices for a valid but complex/degenerate region.
+                 // Treat as empty in this case.
+                 setSize(0);
+                 setBarycenter(new Vector2D(0, 0));
+            }
+
         } else if (v[0][0] == null) {
             // there is at least one open-loop: the polygon is infinite
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             // all loops are closed, we compute some integrals around the shape
 
             double sum  = 0;
             double sumX = 0;
             double sumY = 0;
 
             for (Vector2D[] loop : v) {
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
                     final double y0 = y1;
                     x1 = point.getX();
                     y1 = point.getY();
                     final double factor = x0 * y1 - y0 * x1;
                     sum  += factor;
                     sumX += factor * (x0 + x1);
                     sumY += factor * (y0 + y1);
                 }
             }
 
             if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
+                // the polygon represents a finite hole in an infinite domain
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
-                setSize(sum / 2);
-                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
+                // the polygon is finite
+                setSize(sum / 2.0);
+                setBarycenter(new Vector2D(sumX / (3.0 * sum), sumY / (3.0 * sum)));
             }
 
         }
 
     }
\ No newline at end of file
