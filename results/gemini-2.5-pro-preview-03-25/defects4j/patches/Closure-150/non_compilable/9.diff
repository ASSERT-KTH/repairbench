diff --git a/tmp/9cfec660-cb5e-4aa7-a81d-e5a5535aa37c_buggy.java b/tmp/9db1275f-c17b-474e-8b54-74e3da6a4060_fixed.java
index 800e6e1..379db9c 100644
--- a/tmp/9cfec660-cb5e-4aa7-a81d-e5a5535aa37c_buggy.java
+++ b/tmp/9db1275f-c17b-474e-8b54-74e3da6a4060_fixed.java
@@ -1,32 +1,72 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
+      // Ensure 'creator' and 'scope' fields are accessible and correctly set.
+      // creator: The TypedScopeCreator instance.
+      // scope: The current local scope being built.
+
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
+
       switch (n.getType()) {
         case Token.FUNCTION:
+          // Handle function statements, e.g., function f() { ... }
+          // Skip function expressions, e.g., var f = function() { ... };
+          // The original check parent.getType() == Token.NAME covers the `var f = function` case.
+          // We might need a more robust check like NodeUtil.isFunctionExpression(n)
+          // but stick to the original logic for minimal change unless proven necessary.
           if (parent.getType() == Token.NAME) {
             return;
           }
+          // Also skip functions assigned to properties, like obj.f = function() {}.
+          // Parent would be ASSIGN.
+          if (parent.isAssign()) {
+             return;
+          }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.EXPR_RESULT: // Fix: Add handling for expression results
+          Node expr = n.getFirstChild();
+          // Handle stub declarations like: /** @type {some.Type} */ ns.prop;
+          // These occur for GETPROP nodes within an EXPR_RESULT, carrying JSDoc.
+          if (expr.isGetProp()) {
+            JSDocInfo info = n.getJSDocInfo();
+            // If JSDoc is present, it might define a type or declare a property.
+            if (info != null) {
+              String qName = expr.getQualifiedName();
+              if (qName != null) {
+                // Delegate to the main creator instance to resolve the type from JSDoc.
+                // This method handles the complexity of type resolution.
+                JSType type = creator.getDeclaredType(n, expr, info);
+
+                // If a type was successfully resolved from JSDoc, define a slot for it.
+                // This ensures the symbol (e.g., "ns.prop") is declared in the local scope.
+                // defineSlot adds the symbol to the current scope (which is the local scope).
+                // Mark as not inferred because it's declared via JSDoc.
+                if (type != null) {
+                  creator.defineSlot(expr, n, type, false /* inferred */);
+                }
+              }
+            }
+          }
+          break; // End EXPR_RESULT case
       }
     }
\ No newline at end of file
