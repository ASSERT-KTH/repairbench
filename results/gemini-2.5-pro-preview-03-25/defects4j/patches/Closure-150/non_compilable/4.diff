diff --git a/tmp/ad32c0cc-dea2-4186-999b-49700f9b0528_buggy.java b/tmp/111e262f-5eca-48b1-b3f7-1bab0d615966_fixed.java
index 800e6e1..324e40c 100644
--- a/tmp/ad32c0cc-dea2-4186-999b-49700f9b0528_buggy.java
+++ b/tmp/111e262f-5eca-48b1-b3f7-1bab0d615966_fixed.java
@@ -1,32 +1,81 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
+      // Handle function inputs before traversing the function body.
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
+      // Try attaching type info to literal values.
       attachLiteralTypes(n);
+
       switch (n.getType()) {
         case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
+          // Function declarations are handled via checkDeclaredFunctions.
+          // We only need to handle function assignments here, by treating
+          // the function node as a constant value.
+          // We special-case this because we don't want to declare a symbol
+          // for the function name node.
+          if (NodeUtil.isFunctionExpression(n)) {
+            // Assigned function expressions are handled implicitly by VAR/ASSIGN
+            // or object literal handling. Don't declare here. Example: var x = function() {};
+            // Need to handle name of named function expressions: var x = function foo() {}; 'foo' scope
+            if (n.getFirstChild().hasChildren() && parent.getType() != Token.NAME) {
+              // It's a named function expression. Define the name locally
+              // to the function body.
+              defineDeclaredFunction(n, parent);
             }
+          } else {
+            // Function declaration: function f() {}
+            // Handled by checkDeclaredFunctions or need to be defined here?
+            // Based on original logic, only define if parent is not NAME.
+            if (parent.getType() != Token.NAME) {
                defineDeclaredFunction(n, parent);
+            }
+          }
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+
+        // Added case to handle JSDoc declarations on expression statements.
+        case Token.EXPR_RESULT:
+          // Check for JSDoc on the EXPR_RESULT node itself.
+          // This handles patterns like:
+          // /** @type {string} */ MyClass.prototype.prop;
+          // /** @param {number} x */ Namespace.method;
+          // /** @return {void} */ this.init = function() {}; // Assignment case
+          JSDocInfo jsDoc = n.getJSDocInfo();
+          if (jsDoc != null) {
+            Node child = n.getFirstChild();
+            if (child != null) {
+              if (child.isAssign()) {
+                // Case: /** @type ... */ a.b = ...;
+                // The JSDoc applies to the entire assignment expression result.
+                // Delegate to maybeDeclareQualifiedName, providing the JSDoc node (n),
+                // the L-Value (assignment target), and the R-Value (assigned value).
+                maybeDeclareQualifiedName(t, n, child.getFirstChild(), child.getLastChild());
+              } else if (child.isGetProp() || child.isQualifiedName()) { // Check for GETPROP and NAME (e.g., /** @type {number} */ var x;) - Though NAME usually handled by VAR
+                // Case: /** @type ... */ a.b;
+                // Only declare qualified names (GETPROP) here. Simple names are handled by VAR/params.
+                if (child.isGetProp()) {
+                   maybeDeclareQualifiedName(t, n, child, null); // No R-Value for stub declarations
+                }
+              }
+            }
+          }
+          break; // End of EXPR_RESULT case
       }
     }
\ No newline at end of file
