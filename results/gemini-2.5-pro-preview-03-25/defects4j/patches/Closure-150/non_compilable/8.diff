diff --git a/tmp/d55509c7-15f5-4867-9e63-868c9fcc9223_buggy.java b/tmp/4f4562af-10b2-438f-a89b-447b17c4b7bf_fixed.java
index 800e6e1..aef873d 100644
--- a/tmp/d55509c7-15f5-4867-9e63-868c9fcc9223_buggy.java
+++ b/tmp/4f4562af-10b2-438f-a89b-447b17c4b7bf_fixed.java
@@ -1,32 +1,92 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n == scope.getRootNode()) return;
+      // Don't visit the scope root itself.
+      if (n == scope.getRootNode()) {
+        return;
+      }
 
-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {
+      // Handle function parameters when visiting the PARAM_LIST node.
+      if (n.isParamList() && parent.isFunction()) {
+        // Ensure the parent function matches the scope root,
+        // as we only handle the inputs for the function defining this scope.
+        if (parent == scope.getRootNode()) {
             handleFunctionInputs(parent);
+        }
+        // We return here because PARAM_LIST content (NAME nodes for parameters)
+        // are handled by handleFunctionInputs.
         return;
       }
 
+      // Assign types to literals like numbers, strings, booleans, null, this, regexes.
       attachLiteralTypes(n);
+
+      // Handle declarations within the local scope.
       switch (n.getType()) {
         case Token.FUNCTION:
+          // Handle function declarations (e.g., function f() {}).
+          // Function expressions (e.g., var f = function() {}) are handled
+          // by VAR or ASSIGN nodes.
+          // The check `parent.getType() == Token.NAME` handles named function
+          // expressions (var f = function g() {}) where 'g' is local to the function.
           if (parent.getType() == Token.NAME) {
+            // This is the name node of a named function expression. e.g. N in
+            // var x = function N() {}; The name N is only visible within the
+            // function scope. Do nothing here.
             return;
           }
+          // If it's not a function expression name, define the function in the current scope.
           defineDeclaredFunction(n, parent);
           break;
+
         case Token.CATCH:
+          // Define the catch parameter.
           defineCatch(n, parent);
           break;
+
         case Token.VAR:
+          // Define variables declared with 'var'.
           defineVar(n, parent);
           break;
+
+        case Token.EXPR_RESULT:
+          // Handle declarations via expression statements with JSDoc.
+          // Examples:
+          // /** @type {Namespace} */ var ns = {}; // Handled by VAR
+          // /** @type {number} */ ns.property;    // Handled here
+          // /** @param {string} s */ ns.functionStub; // Handled here
+          // /** @return {boolean} */ this.methodStub; // Handled here (inside constructor/method)
+          // /** @enum {T} */ ns.E = {...};           // Handled here
+          // /** @constructor */ ns.C = function() {}; // Handled here
+          JSDocInfo info = n.getJSDocInfo();
+          if (info != null) {
+            Node child = n.getFirstChild();
+            // Check for assignment (ns.prop = value) or standalone name (ns.prop;)
+            if (child.isAssign()) {
+              // Handles: /** @enum {T} */ ns.E = {...};
+              // Handles: /** @constructor */ ns.C = function() {};
+              // Handles: /** @interface */ ns.I = function() {};
+              // We declare the name on the left side of the assignment.
+              Node potentialName = child.getFirstChild();
+              // Check if the LHS is a qualified name (a.b.c) or this.prop
+              if (potentialName.isQualifiedName() ||
+                  (potentialName.isGetProp() && potentialName.getFirstChild().isThis())) {
+                 maybeDeclareQualifiedName(t, info, potentialName, n, child);
+              }
+            } else if (child.isQualifiedName() ||
+                       (child.isGetProp() && child.getFirstChild().isThis())) {
+              // Handles: /** @type {T} */ ns.prop;
+              // Handles: /** @param {A} x */ ns.method;
+              // Handles: /** @return {T} */ this.prop;
+              maybeDeclareQualifiedName(t, info, child, n, child);
+            }
+          }
+          break;
       }
     }
\ No newline at end of file
