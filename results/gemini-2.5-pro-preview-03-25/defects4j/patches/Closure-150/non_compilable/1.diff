diff --git a/tmp/d34c0a9c-d2ca-4af5-b90e-d9fe756c649d_buggy.java b/tmp/2025df51-9e91-4e8b-bc82-311a2819bddd_fixed.java
index 800e6e1..e099106 100644
--- a/tmp/d34c0a9c-d2ca-4af5-b90e-d9fe756c649d_buggy.java
+++ b/tmp/2025df51-9e91-4e8b-bc82-311a2819bddd_fixed.java
@@ -1,32 +1,49 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
+      // Handle function inputs (parameters) at the PARAM_LIST node.
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
-      attachLiteralTypes(n);
+      // Delegate processing of JSDoc-based declarations and other symbols
+      // to the appropriate handlers based on node type.
       switch (n.getType()) {
         case Token.FUNCTION:
+          // Function declarations are handled via their name node.
+          // Function expressions need definition here.
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
+          // Define the catch variable.
           defineCatch(n, parent);
           break;
         case Token.VAR:
+          // Define variables declared with 'var', 'let', or 'const'.
           defineVar(n, parent);
           break;
+        case Token.EXPR_RESULT:
+          // Handle declarations documented on expression statements,
+          // like /** @type {number} */ obj.prop;
+          // or /** @param {string} s */ ns.func;
+          // These calls likely delegate to methods in the outer TypedScopeCreator class.
+          handleTypedefDefinition(t, n, parent);
+          handleFunctionStubDefinition(t, n, parent);
+          break;
       }
+
+      // After handling explicit declarations, try to infer types from literals.
+      attachLiteralTypes(n);
     }
\ No newline at end of file
