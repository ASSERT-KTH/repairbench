diff --git a/tmp/6ca6fa59-28fa-436e-b13e-08fab090e78b_buggy.java b/tmp/2a0b845a-2d8f-41ee-8e2c-f2a70ae827f1_fixed.java
index 800e6e1..313eb45 100644
--- a/tmp/6ca6fa59-28fa-436e-b13e-08fab090e78b_buggy.java
+++ b/tmp/2a0b845a-2d8f-41ee-8e2c-f2a70ae827f1_fixed.java
@@ -1,32 +1,84 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
+     * parameters into the local symbol table. Also handles JSDoc declarations
+     * attached to assignments and expressions.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n == scope.getRootNode()) return;
-
-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {
-        handleFunctionInputs(parent);
-        return;
-      }
-
+      // Attach types to literals, 'this', etc. This is necessary for type checking
+      // and should happen regardless of the specific declaration type below.
       attachLiteralTypes(n);
+
+      // Don't process the scope root itself.
+      if (n == scope.getRootNode()) {
+        return;
+      }
+
+      // Handle function parameters when visiting the LP (parameter list) node
+      // of a function definition.
+      if (n.isParamList() && parent == scope.getRootNode()) {
+        handleFunctionInputs(parent);
+        // Parameters are handled, no further processing needed for LP node itself.
+        return;
+      }
+
+      // Handle declarations and JSDoc-annotated expressions.
       switch (n.getType()) {
         case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
-          }
+          // Function declaration statements (like 'function foo() {}') have parent NAME.
+          // These are typically handled by hoisting logic (e.g., processing the VAR node
+          // created for the function name) calling declareNamespace.
+          // We only need to explicitly handle function expressions here.
+          if (parent.getType() != Token.NAME) {
+            // Defines the function symbol for expressions, handles its inner scope.
             defineDeclaredFunction(n, parent);
+          }
           break;
+
         case Token.CATCH:
+          // Define the variable introduced in a catch clause, e.g., catch (e) { ... }
           defineCatch(n, parent);
           break;
+
         case Token.VAR:
+          // Define variables declared with 'var', 'let', 'const'.
+          // This calls declareNamespace internally, handling JSDoc on the VAR.
           defineVar(n, parent);
           break;
+
+        // Handle JSDoc-based declarations on qualified names via assignments.
+        case Token.ASSIGN:
+          // Look for assignments used as statements, like /** @type {T} */ ns.prop = value;
+          // These often carry JSDoc type information.
+          if (parent.isExprResult()) {
+            Node lhs = n.getFirstChild();
+            // Check if the left-hand side is a qualified name (NAME or GETPROP).
+            if (lhs.isQualifiedName()) {
+              // Delegate to declareNamespace, which checks for JSDoc on the ASSIGN node (n)
+              // and defines the symbol accordingly.
+              // Arguments: traversal, block (parent=EXPR_RESULT), name node (lhs), parent of name (n=ASSIGN)
+              declareNamespace(t, parent, lhs, n);
+            }
+          }
+          break;
+
+        // Handle JSDoc-based stub declarations on qualified names.
+        case Token.GETPROP:
+          // Look for qualified names used as statements, like /** @type {T} */ ns.prop;
+          // These are stub declarations providing type information via JSDoc.
+          if (parent.isExprResult()) {
+            // Delegate to declareNamespace, which checks for JSDoc on the GETPROP node (n)
+            // or its parent (parent=EXPR_RESULT) and defines the symbol.
+            // Arguments: traversal, block (parent=EXPR_RESULT), name node (n=GETPROP), parent of name (parent=EXPR_RESULT)
+            declareNamespace(t, parent, n, parent);
+          }
+          break;
+
+        // Note: A similar case for Token.NAME under EXPR_RESULT (e.g., /** @type {T} */ myVar;)
+        // could be added but is less common for explicit declarations and often handled
+        // implicitly through VAR or ASSIGN processing.
       }
     }
\ No newline at end of file
