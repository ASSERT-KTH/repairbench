diff --git a/tmp/5d1b1afe-792e-4c34-b5bf-a8fa4b7ceee8_buggy.java b/tmp/6837039d-a2c1-4af2-86f9-c70bcc4bfc92_fixed.java
index 800e6e1..863be35 100644
--- a/tmp/5d1b1afe-792e-4c34-b5bf-a8fa4b7ceee8_buggy.java
+++ b/tmp/6837039d-a2c1-4af2-86f9-c70bcc4bfc92_fixed.java
@@ -1,32 +1,59 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
+      // Handle function inputs (parameters) specially. They are declared
+      // in the function's scope, but appear in the AST before the scope
+      // root node (the FUNCTION node).
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
+      // Attach types to literals and handle special cases.
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
+          // Function declarations are handled when visiting the NAME node.
+          // Function expressions are handled here.
+          if (NodeUtil.isFunctionDeclaration(n)) {
+             // Function declarations are handled by the NAME node.
              return;
           }
+          // Defines the function symbol and potentially its 'this' type.
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
+          // Define the catch variable in the catch block scope.
           defineCatch(n, parent);
           break;
         case Token.VAR:
+          // Define variables declared with 'var'.
           defineVar(n, parent);
           break;
+        case Token.EXPR_RESULT:
+          // Handle qualified name declarations via expression statements
+          // with JSDoc annotations, like:
+          // /** @type {SomeType} */ ns.subns.MyClass;
+          // /** @param {string} s */ ns.func;
+          // /** @return {number} */ this.method;
+          Node expr = n.getFirstChild();
+          JSDocInfo info = expr.getJSDocInfo();
+          if (info != null) {
+            // maybeDeclareQualifiedName checks if the expression is a qualified name
+            // (NAME or GETPROP) and if the JSDoc indicates a declaration
+            // (e.g., @type, @enum, @const, @interface, @constructor, @param, @return).
+            // If so, it declares the name/property in the current scope.
+            // Parameters: traversal, JSDoc, qualified name node, parent, grandparent
+            maybeDeclareQualifiedName(t, info, expr, n, parent);
+          }
+          break;
       }
     }
\ No newline at end of file
