diff --git a/tmp/e581bed7-8e8e-4dff-ab14-7bacb9791372_buggy.java b/tmp/b6d1908c-84ed-4d69-812c-fbeef9e4a48c_fixed.java
index d4e6d48..c406ac0 100644
--- a/tmp/e581bed7-8e8e-4dff-ab14-7bacb9791372_buggy.java
+++ b/tmp/b6d1908c-84ed-4d69-812c-fbeef9e4a48c_fixed.java
@@ -1,23 +1,33 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
+
+    // Check if the call target is the global String function
     if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
+          callTarget.getString().equals("String") &&
+          !callTarget.hasChildren()) { // Ensure it's not a method call like x.String()
+
+      // Check for exactly one argument
+      Node value = callTarget.getNext();
+      if (value != null && value.getNext() == null) {
+
+        // Fold String(a) to '' + (a) on immutable literals only.
         // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
+        // slightly different semantics than '' + (a) for objects. See
         // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
+        if (NodeUtil.isImmutableValue(value)) {
+          Node emptyString = IR.string("").srcref(callTarget);
+          Node addition = IR.add(emptyString, value.detach());
+          // Copy type information and source information.
+          // The type of the ADD node should be string.
+          addition.setJSType(emptyString.getJSType());
+          addition.useSourceInfoIfMissingFromForTree(n);
+
           n.getParent().replaceChild(n, addition);
           reportCodeChange();
           return addition;
         }
       }
+    }
     return n;
   }
\ No newline at end of file
