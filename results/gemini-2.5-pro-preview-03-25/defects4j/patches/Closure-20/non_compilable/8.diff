diff --git a/tmp/3e361d6e-cd14-4bae-b0b2-641ae49296f8_buggy.java b/tmp/9554d178-a553-425a-b953-61138fc86fef_fixed.java
index d4e6d48..2075138 100644
--- a/tmp/3e361d6e-cd14-4bae-b0b2-641ae49296f8_buggy.java
+++ b/tmp/9554d178-a553-425a-b953-61138fc86fef_fixed.java
@@ -1,23 +1,43 @@
+import com.google.javascript.jscomp.NodeUtil;
+import com.google.javascript.rhino.IR;
+import com.google.javascript.rhino.Node;
+import com.google.common.base.Preconditions;
+
+// ... inside the class PeepholeSubstituteAlternateSyntax ...
+
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
+
+    // Check if it's a call to the global String function: String(arg)
     if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
+
+      // Check for exactly one argument
+      Node value = callTarget.getNext();
+      // We require exactly one argument, and the argument must be immutable.
+      if (value != null && value.getNext() == null) {
+
         // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
+        // which allows further optimizations.
         //
         // We can't do this in the general case, because String(a) has
         // slightly different semantics than '' + (a). See
         // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
+        if (NodeUtil.isImmutableValue(value)) {
+          // Create the ADD node: '' + value
+          Node emptyString = IR.string("").srcref(callTarget);
+          // Detach the value node from the original call structure.
+          Node addition = IR.add(emptyString, value.detach());
+          // Copy source information from the original call node to the new add node.
+          addition.srcrefTreeIfMissing(n);
+
+          // Replace the original CALL node 'n' with the new ADD node 'addition'.
+          n.replaceWith(addition);
           reportCodeChange();
-        return addition;
+          return addition; // Return the new node
         }
       }
-    return n;
+    }
+    return n; // Return the original node if no change was made
   }
\ No newline at end of file
