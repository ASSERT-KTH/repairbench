diff --git a/tmp/c4b669af-5cd5-40f5-99e1-a3fc3eb42072_buggy.java b/tmp/bcf1e568-d705-4414-9aea-37e75f929796_fixed.java
index d4e6d48..c141671 100644
--- a/tmp/c4b669af-5cd5-40f5-99e1-a3fc3eb42072_buggy.java
+++ b/tmp/bcf1e568-d705-4414-9aea-37e75f929796_fixed.java
@@ -1,23 +1,37 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
+    // Check if the target is the String function e.g. String(1)
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
+
+      Node value = callTarget.getNext();
+      // Check that there is exactly one argument and it's an immutable value.
+      // We can't fold String(foo) if foo has valueOf defined, unless foo is a primitive.
+      // NodeUtil.isImmutableValue checks for primitives (string, number, boolean,
+      // null, undefined/void 0).
+      if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) {
+        // Fold String(a) to '' + (a) on immutable literals.
+        // This allows further optimizations. For example,
+        // String(1) + String(2) -> '' + 1 + '' + 2 -> '1' + '2' -> '12'
         // We can't do this in the general case, because String(a) has
         // slightly different semantics than '' + (a). See
         // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+
+        Node emptyString = IR.string("");
+        // Ensure the new node has the same source information as the original call.
+        emptyString.srcref(n);
+
         Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
+            emptyString,
+            value.detach());
+        // Make the ADD node inherit the source information from the original CALL node.
+        addition.srcrefTree(n);
+
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
\ No newline at end of file
