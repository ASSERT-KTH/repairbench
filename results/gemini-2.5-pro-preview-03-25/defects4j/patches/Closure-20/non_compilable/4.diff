diff --git a/tmp/3aecdb23-73b7-4c07-bc0c-a8fa06e2ab23_buggy.java b/tmp/d9881c26-254e-486a-beb7-8b8e3e452c1c_fixed.java
index d4e6d48..acc6d6b 100644
--- a/tmp/3aecdb23-73b7-4c07-bc0c-a8fa06e2ab23_buggy.java
+++ b/tmp/d9881c26-254e-486a-beb7-8b8e3e452c1c_fixed.java
@@ -1,23 +1,27 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
+
+    // Check if it's a call to the global String function
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
+
       Node value = callTarget.getNext();
-      if (value != null) {
+      // Check for exactly one argument, which must be immutable.
+      if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
+            value.detach()); // Detach value before reparenting
+        n.replaceWith(addition); // Use replaceWith for cleaner node replacement
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
\ No newline at end of file
