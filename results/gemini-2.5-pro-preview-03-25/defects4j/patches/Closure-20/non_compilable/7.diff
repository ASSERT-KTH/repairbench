diff --git a/tmp/aa539ab1-981c-47bc-a047-352c91abd446_buggy.java b/tmp/19785a9c-e8c9-47f2-aa40-af21e2cb3975_fixed.java
index d4e6d48..5a02bd5 100644
--- a/tmp/aa539ab1-981c-47bc-a047-352c91abd446_buggy.java
+++ b/tmp/19785a9c-e8c9-47f2-aa40-af21e2cb3975_fixed.java
@@ -1,23 +1,29 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
+    // Check if it's a call to the global "String" function.
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+
       Node value = callTarget.getNext();
-      if (value != null) {
+      // Check if there is exactly one argument and it's an immutable literal.
+      // We can't fold String(a) to '' + (a) in the general case because
+      // String(a) has slightly different semantics than '' + (a) for objects.
+      // Specifically, valueOf is called before toString in the '+' case, and
+      // the opposite is true for String(a).
+      // See http://code.google.com/p/closure-compiler/issues/detail?id=759
+      if (value != null && value.getNext() == null && NodeUtil.isLiteralValue(value, true)) {
+          // Create the expression '' + value
           Node addition = IR.add(
               IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
+              value.detach());
+          addition.srcrefTreeIfMissing(n); // Copy source info
+
+          // Replace the original call node with the new addition node
+          n.replaceWith(addition);
           reportCodeChange();
           return addition;
       }
     }
     return n;
   }
\ No newline at end of file
