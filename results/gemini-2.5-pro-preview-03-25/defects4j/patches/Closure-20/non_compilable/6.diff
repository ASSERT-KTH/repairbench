diff --git a/tmp/0ae3f3df-13d0-46f9-b823-a3442d0773c0_buggy.java b/tmp/318a5fea-44ee-4346-aeaa-f94c33a46f0f_fixed.java
index d4e6d48..efb5d7c 100644
--- a/tmp/0ae3f3df-13d0-46f9-b823-a3442d0773c0_buggy.java
+++ b/tmp/318a5fea-44ee-4346-aeaa-f94c33a46f0f_fixed.java
@@ -1,23 +1,38 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
+    // Check if the call target is the global function "String".
+    // We don't want to fold methods named "String".
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
+      //
+      // This optimization is only valid if String is the global String
+      // function and if the argument is an immutable primitive. We rely
+      // on the VarCheck pass to ensure that String has not been redefined.
       Node value = callTarget.getNext();
-      if (value != null) {
+
+      // Check for exactly one argument that is an immutable value.
+      if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) {
+        // Detach the value before associating it with the new ADD node.
+        Node detachedValue = value.detach();
+
+        // Create the ADD node: '' + value
         Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
+            IR.string("").srcref(callTarget), // Use callTarget's source info for the empty string
+            detachedValue);                   // Attach the detached value here
+        addition.srcrefTree(n); // Copy source info from the original CALL node
+
+        // Replace the original CALL node with the new ADD node.
+        n.replaceWith(addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
\ No newline at end of file
