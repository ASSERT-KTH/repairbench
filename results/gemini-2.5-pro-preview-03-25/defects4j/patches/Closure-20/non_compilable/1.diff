diff --git a/tmp/8f58bec6-3fee-48c7-8360-f78fab4fd606_buggy.java b/tmp/22f80db8-986c-4402-88df-7fe43ce70bf8_fixed.java
index d4e6d48..10d2c9c 100644
--- a/tmp/8f58bec6-3fee-48c7-8360-f78fab4fd606_buggy.java
+++ b/tmp/22f80db8-986c-4402-88df-7fe43ce70bf8_fixed.java
@@ -1,23 +1,34 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
+    // Check if the call target is the global constructor String.
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
+      // which allows further optimizations.
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
+      //
+      // We only handle the case with one argument, e.g. String(a).
+      // String() is handled by FoldConstants.tryFoldStringJoin().
+      // String(a, b) is not handled. The behavior is undefined in JS spec.
+
       Node value = callTarget.getNext();
-      if (value != null) {
+      // Check that there is exactly one argument and it is immutable.
+      if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
+            value.detach()); // Use detach() instead of detachFromParent()
+        // Copy source information and other properties from the original call node.
+        addition.copyInformationFromForTree(n); // Use copyInformationFromForTree for potentially deeper copies if needed
+                                                // or copyInformationFrom(n) if that's standard.
+
+        n.replaceWith(addition); // Use replaceWith for cleaner replacement
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
\ No newline at end of file
