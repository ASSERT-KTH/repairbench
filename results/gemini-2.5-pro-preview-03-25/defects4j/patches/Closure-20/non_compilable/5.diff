diff --git a/tmp/2cb69c26-983c-4305-98ab-3e78970bf50d_buggy.java b/tmp/ee43d7ad-70a2-4dbc-9d20-c73cac9778f0_fixed.java
index d4e6d48..af52bd8 100644
--- a/tmp/2cb69c26-983c-4305-98ab-3e78970bf50d_buggy.java
+++ b/tmp/ee43d7ad-70a2-4dbc-9d20-c73cac9778f0_fixed.java
@@ -1,23 +1,38 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
+    // Check: String(a) -> '' + (a)
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+      // Check for the correct pattern: String(a)
       Node value = callTarget.getNext();
-      if (value != null) {
+      // Make sure there is exactly one argument, and
+      // it is an immutable value (string, number, boolean, null, void).
+      // We don't want to fold String(someObject) because
+      // String(o) !== '' + o if o.toString !== o.valueOf.
+      // See http://code.google.com/p/closure-compiler/issues/detail?id=759
+      // Also, fold String() to ""
+      if (value == null) {
+        Node emptyString = IR.string("");
+        emptyString.srcrefTreeIfMissing(n);
+        n.getParent().replaceChild(n, emptyString);
+        reportCodeChange();
+        return emptyString;
+      } else if (value.getNext() == null && NodeUtil.isImmutableValue(value)) {
+        // Fold String(a) to '' + (a) on immutable literals
+        Node emptyString = IR.string("");
+        // Use the source info of the original call for the new empty string.
+        emptyString.srcref(n);
+
         Node addition = IR.add(
-            IR.string("").srcref(callTarget),
+            emptyString,
             value.detachFromParent());
+        // Use the source info of the original call for the new ADD node.
+        addition.srcrefTreeIfMissing(n);
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
\ No newline at end of file
