diff --git a/tmp/eaa808d7-7ed2-4e4e-9c37-303739b62ea8_buggy.java b/tmp/9e06d3fa-a882-425f-bef6-cddd6b241849_fixed.java
index d4e6d48..f7e34dd 100644
--- a/tmp/eaa808d7-7ed2-4e4e-9c37-303739b62ea8_buggy.java
+++ b/tmp/9e06d3fa-a882-425f-bef6-cddd6b241849_fixed.java
@@ -1,23 +1,34 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
+    // Check if the function is the global String constructor
     if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+          callTarget.getString().equals("String") &&
+          !callTarget.isFromExterns()) { // Make sure it's not the extern definition
+
+      // Get the first argument
       Node value = callTarget.getNext();
-      if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
+
+      // Check that there is exactly one argument and it's an immutable primitive.
+      // String(a) has different semantics from '' + a for objects.
+      // See http://code.google.com/p/closure-compiler/issues/detail?id=759
+      if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) {
+        // Fold String(a) to '' + (a)
+        // Create an empty string node '' with source info from the "String" identifier
+        Node emptyString = IR.string("").srcref(callTarget);
+        // Detach the argument 'a' from the original call
+        Node arg = value.detachFromParent();
+        // Create the addition node: '' + a
+        Node addition = IR.add(emptyString, arg);
+        // Copy the source info from the original call node 'n' to the new '+' node
+        addition.srcref(n);
+
+        // Replace the original call node 'n' with the new addition node
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
-        return addition;
+        return addition; // Return the new node
       }
     }
+    // No change was made, return the original node
     return n;
   }
\ No newline at end of file
