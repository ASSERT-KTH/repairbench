diff --git a/tmp/c5f3c06c-002c-411b-b6cb-2bef07685bc3_buggy.java b/tmp/8fc70f6c-8046-478d-bed8-8e348139ca3e_fixed.java
index fc8c302..96151aa 100644
--- a/tmp/c5f3c06c-002c-411b-b6cb-2bef07685bc3_buggy.java
+++ b/tmp/8fc70f6c-8046-478d-bed8-8e348139ca3e_fixed.java
@@ -1,23 +1,45 @@
     @Override
     public byte[] getBinaryValue(Base64Variant b64variant)
         throws IOException, JsonParseException
     {
         // Multiple possibilities...
         JsonNode n = currentNode();
         if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
+            // If we have embedded byte[] directly, let's use it
             byte[] data = n.binaryValue();
             if (data != null) {
                 return data;
             }
+            // Or if we have plain POJO, see if it's byte[]
             if (n.isPojo()) {
                 Object ob = ((POJONode) n).getPojo();
                 if (ob instanceof byte[]) {
                     return (byte[]) ob;
                 }
             }
+            // As per [databind#2096], handle textual node too
+            if (n.isTextual()) {
+                final String str = n.asText();
+                // Either null or empty string is fine: missing binary is null;
+                // empty String is empty binary array
+                if (str == null) {
+                     return null;
+                }
+                if (str.isEmpty()) {
+                    // 15-Aug-2018, tatu: Assuming this is ok; aligns with `JsonNode.binaryValue()`
+                    return new byte[0];
+                }
+                try {
+                    return b64variant.decode(str);
+                } catch (IllegalArgumentException e) {
+                    // Provide location details if possible? (curr scope doesn't have)
+                    // 15-Aug-2018, tatu: We could try constructing `JsonParseException`
+                    //   with location, but for now let's not add complexity, depend on
+                    //   existing helper(s)
+                    throw _constructError("Cannot access contents of TextNode as binary value: "+e.getMessage(), e);
+                }
+            }
         }
         // otherwise return null to mark we have no binary content
         return null;
     }
\ No newline at end of file
