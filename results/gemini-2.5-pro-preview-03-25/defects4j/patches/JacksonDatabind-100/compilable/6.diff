diff --git a/tmp/7f38f414-1010-4ddb-8bc2-c2b4090a2aee_buggy.java b/tmp/a44bbf6f-79b0-4658-bc63-d0114731d03d_fixed.java
index fc8c302..14353a9 100644
--- a/tmp/7f38f414-1010-4ddb-8bc2-c2b4090a2aee_buggy.java
+++ b/tmp/a44bbf6f-79b0-4658-bc63-d0114731d03d_fixed.java
@@ -1,23 +1,54 @@
     @Override
     public byte[] getBinaryValue(Base64Variant b64variant)
         throws IOException, JsonParseException
     {
-        // Multiple possibilities...
         JsonNode n = currentNode();
-        if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
+        if (n == null) {
+            // 04-Jan-2018, tatu: Should this ever occur? Maybe if stream has ended?
+            //   Let's assume `null` is fine in this case.
+             return null;
+        }
+
+        // If it's TextNode, it has the String which needs to be decoded
+        // (NOTE: this check HAS to precede check for `isPojo()`, see [databind#2096] discussion)
+        if (n.isTextual()) {
+            // Use the specified variant for decoding, not the default
+            String str = n.textValue();
+            // 28-Sep-2017, tatu: Should be an error if textual node has null value...
+            // 15-Aug-2018, tatu: ... except it may be empty String, which is fine
+            if (str == null) {
+                 return null;
+            }
+            // 13-Oct-2018, tatu: Empty String is legitimate, means empty binary value
+            if (str.isEmpty()) {
+                return NO_BYTES; // Assuming NO_BYTES is a static final byte[0]
+            }
+             try {
+                 // Caller is expected to provide variant. For binary handling this is generally
+                 // true (unlike for textual representation)
+                 return b64variant.decode(str);
+             } catch (IllegalArgumentException e) {
+                 // It is possible that we could consider this an error condition for JSON...
+                 // but for now let's assume it's data problem
+                 throw _constructError("Cannot access contents of "+n.getClass().getName()+" as binary due to broken Base64 encoding: "+e.getMessage(), e);
+             }
+        }
+
+        // Then: maybe node has actual binary value?
         byte[] data = n.binaryValue();
         if (data != null) {
             return data;
         }
+
+        // Second: perhaps embedded Object? But note: we MUST check `isTextual()` first
+        // because `POJONode`s with byte[] may be represented as Base64 Strings during
+        // serialization -- see [databind#2096]
         if (n.isPojo()) {
             Object ob = ((POJONode) n).getPojo();
             if (ob instanceof byte[]) {
                 return (byte[]) ob;
             }
         }
-        }
         // otherwise return null to mark we have no binary content
         return null;
     }
\ No newline at end of file
