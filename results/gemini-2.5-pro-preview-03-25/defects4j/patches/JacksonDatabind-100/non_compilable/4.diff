diff --git a/tmp/0d04591f-83de-4192-a29d-37cb31d21165_buggy.java b/tmp/329fcb9d-97ca-408c-a7c8-f1cc18014974_fixed.java
index fc8c302..ab6b7b6 100644
--- a/tmp/0d04591f-83de-4192-a29d-37cb31d21165_buggy.java
+++ b/tmp/329fcb9d-97ca-408c-a7c8-f1cc18014974_fixed.java
@@ -1,23 +1,34 @@
     @Override
     public byte[] getBinaryValue(Base64Variant b64variant)
         throws IOException, JsonParseException
     {
         // Multiple possibilities...
         JsonNode n = currentNode();
         if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
-            byte[] data = n.binaryValue();
+            // [databind#2096]: Need to use the variant-aware `getBinaryValue()`
+            // method of JsonNode, which properly handles TextNode decoding
+            // with the specified variant. Other node types (BinaryNode, POJONode)
+            // are handled correctly by the base implementation delegating to `binaryValue()`.
+            byte[] data = n.getBinaryValue(b64variant);
+            // BinaryNode, POJONode containing byte[], and correctly decoded TextNode
+            // will return non-null.
             if (data != null) {
                 return data;
             }
+
+            // Original code had an explicit check for POJONode here.
+            // However, `n.getBinaryValue(b64variant)` for a POJONode delegates
+            // to `n.binaryValue()`, which already checks if the embedded
+            // Object is byte[]. So the explicit check is redundant.
+            /*
             if (n.isPojo()) {
                 Object ob = ((POJONode) n).getPojo();
                 if (ob instanceof byte[]) {
                     return (byte[]) ob;
                 }
             }
+            */
         }
         // otherwise return null to mark we have no binary content
         return null;
     }
