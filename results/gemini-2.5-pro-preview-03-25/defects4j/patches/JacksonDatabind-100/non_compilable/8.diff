diff --git a/tmp/77aa3b59-72d3-4cd4-821a-50d47376fb00_buggy.java b/tmp/e7531839-02f6-4eae-b477-748de9e98015_fixed.java
index fc8c302..eace83b 100644
--- a/tmp/77aa3b59-72d3-4cd4-821a-50d47376fb00_buggy.java
+++ b/tmp/e7531839-02f6-4eae-b477-748de9e98015_fixed.java
@@ -1,23 +1,41 @@
     @Override
     public byte[] getBinaryValue(Base64Variant b64variant)
         throws IOException, JsonParseException
     {
-        // Multiple possibilities...
         JsonNode n = currentNode();
-        if (n != null) {
-            // [databind#2096]: although `binaryValue()` works for real binary node
-            // and embedded "POJO" node, coercion from TextNode may require variant, so:
-            byte[] data = n.binaryValue();
-            if (data != null) {
-                return data;
+        if (n == null) {
+            return null;
         }
+
+        // First check: node might be explicitly binary
+        if (n.isBinary()) {
+            return n.binaryValue();
+        }
+
+        // Second check: textual node? decode using provided variant
+        if (n.isTextual()) {
+            final String str = n.textValue();
+            // [databind#2096]: Need to use the variant passed
+            try {
+                return b64variant.decode(str);
+            } catch (IllegalArgumentException e) {
+                // Provide better context for exception
+                 throw new JsonParseException(this, // parser
+                     String.format("Cannot access contents of %s as binary due to broken Base64 encoding: %s",
+                             n.getClass().getName(), e.getMessage()),
+                     currentLocation(), // parser location (more accurate)
+                     e); // include cause for diagnostics
+             }
+        }
+
+        // Third check: POJO node wrapping byte[]?
         if (n.isPojo()) {
             Object ob = ((POJONode) n).getPojo();
             if (ob instanceof byte[]) {
                 return (byte[]) ob;
             }
         }
-        }
-        // otherwise return null to mark we have no binary content
+
+        // Otherwise, no binary representation available
         return null;
     }
\ No newline at end of file
