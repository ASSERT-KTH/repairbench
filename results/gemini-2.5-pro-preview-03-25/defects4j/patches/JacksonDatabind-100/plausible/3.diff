diff --git a/tmp/bcd5bd7b-6f5c-41c0-88c7-59070d9f7f83_buggy.java b/tmp/22f95597-0227-4986-8a99-83c3849916ef_fixed.java
index fc8c302..bcf3319 100644
--- a/tmp/bcd5bd7b-6f5c-41c0-88c7-59070d9f7f83_buggy.java
+++ b/tmp/22f95597-0227-4986-8a99-83c3849916ef_fixed.java
@@ -1,23 +1,36 @@
     @Override
     public byte[] getBinaryValue(Base64Variant b64variant)
         throws IOException, JsonParseException
     {
         // Multiple possibilities...
         JsonNode n = currentNode();
         if (n != null) {
+            // If node is textual, must use specialized method that potentially uses
+            // the variant (compared to default String/byte[] conversions)
+            if (n.isTextual()) {
+                 // 15-Aug-2018, tatu: [databind#2096] requires variant handling for TextNode
+                 return ((TextNode)n).getBinaryValue(b64variant);
+            }
+            
+            // Check for binary node or POJO node holding byte[]...
+            // Note: `binaryValue()` does not necessarily use variant; assumption
+            // is that it's conventional base64 for BinaryNode (and for POJONode?)
+
             // [databind#2096]: although `binaryValue()` works for real binary node
             // and embedded "POJO" node, coercion from TextNode may require variant, so:
+            // (Above check handles TextNode)
+            
             byte[] data = n.binaryValue();
             if (data != null) {
                 return data;
             }
             if (n.isPojo()) {
                 Object ob = ((POJONode) n).getPojo();
                 if (ob instanceof byte[]) {
                     return (byte[]) ob;
                 }
             }
         }
         // otherwise return null to mark we have no binary content
         return null;
     }
