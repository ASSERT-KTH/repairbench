diff --git a/tmp/806d4331-3356-4c6e-b875-385e08ce991c_buggy.java b/tmp/9b565689-ec23-4865-ab71-309b3dae4573_fixed.java
index 51ebfca..787d76a 100644
--- a/tmp/806d4331-3356-4c6e-b875-385e08ce991c_buggy.java
+++ b/tmp/9b565689-ec23-4865-ab71-309b3dae4573_fixed.java
@@ -1,32 +1,55 @@
     /**
      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
      *
      * @param binaryData
      *            Array containing binary data to encode.
      * @param isChunked
      *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
      * @param urlSafe
      *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
      * @param maxResultSize
      *            The maximum result size to accept.
      * @return Base64-encoded data.
      * @throws IllegalArgumentException
      *             Thrown when the input array needs an output array bigger than maxResultSize
      * @since 1.4
      */
     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
         if (binaryData == null || binaryData.length == 0) {
             return binaryData;
         }
 
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
-        if (len > maxResultSize) {
+        // Calculate the potential length of the encoded data, respecting the chunking flag
+        long len;
+        if (isChunked) {
+            // Calculate chunked length using the static helper method which assumes MIME parameters
+            // Assumes getEncodeLength correctly calculates the length including separators for chunking.
+            len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        } else {
+            // Calculate unchunked length directly using the standard Base64 formula:
+            // length = ceil(binaryData.length / 3) * 4
+            // Integer division trick for ceiling: (a + b - 1) / b for ceil(a/b)
+            // However, Base64 pads to multiples of 3 bytes *before* encoding.
+            // So, the length is based on padded input size: ceil(input_bytes / 3) * 4
+            // The formula ((input_bytes + 2) / 3) * 4 correctly calculates this.
+            len = ((long)binaryData.length + 2) / 3 * 4;
+        }
+
+        // Check if the calculated length exceeds the maximum allowed size.
+        // We should respect maxResultSize only if it's positive. A non-positive value typically indicates no limit.
+        // The original code didn't handle non-positive maxResultSize explicitly.
+        // Assuming maxResultSize is intended as a positive limit:
+        if (maxResultSize > 0 && len > maxResultSize) {
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
         }
 
+        // Create a Base64 encoder instance with the specified settings.
+        // The constructor choice reflects the isChunked flag:
+        // - new Base64(urlSafe): Uses default chunking (assumed to be MIME_CHUNK_SIZE with CHUNK_SEPARATOR).
+        // - new Base64(0, CHUNK_SEPARATOR, urlSafe): Disables chunking by setting line length to 0.
         Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
         return b64.encode(binaryData);
     }
\ No newline at end of file
