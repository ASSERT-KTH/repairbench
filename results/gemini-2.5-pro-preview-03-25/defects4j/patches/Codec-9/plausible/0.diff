diff --git a/tmp/00b69456-d8d8-404b-b161-6f453e61f481_buggy.java b/tmp/414f9f0a-37b8-4d19-8248-7d91c1c41e8e_fixed.java
index 51ebfca..69078e4 100644
--- a/tmp/00b69456-d8d8-404b-b161-6f453e61f481_buggy.java
+++ b/tmp/414f9f0a-37b8-4d19-8248-7d91c1c41e8e_fixed.java
@@ -1,32 +1,43 @@
     /**
      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
      *
      * @param binaryData
      *            Array containing binary data to encode.
      * @param isChunked
      *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
      * @param urlSafe
      *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
      * @param maxResultSize
      *            The maximum result size to accept.
      * @return Base64-encoded data.
      * @throws IllegalArgumentException
      *             Thrown when the input array needs an output array bigger than maxResultSize
      * @since 1.4
      */
     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
         if (binaryData == null || binaryData.length == 0) {
             return binaryData;
         }
 
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        // Determine the line length based on the isChunked parameter.
+        // Use 0 for lineLength if not chunked, otherwise use the standard MIME chunk size.
+        final int lineLength = isChunked ? MIME_CHUNK_SIZE : 0;
+        // Calculate the potential output length using the determined lineLength.
+        // The static getEncodeLength should correctly calculate non-chunked length when lineLength is 0.
+        // CHUNK_SEPARATOR is only used by getEncodeLength if lineLength > 0.
+        final long len = getEncodeLength(binaryData, lineLength, CHUNK_SEPARATOR);
+
+        // Check if the calculated length exceeds the maximum allowed size.
         if (len > maxResultSize) {
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
         }
 
-        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
+        // Create a Base64 encoder instance with the specified parameters, matching the length calculation.
+        // If chunked, use the constructor which defaults to MIME_CHUNK_SIZE and standard separator.
+        // If not chunked, use the constructor specifying lineLength=0.
+        final Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
         return b64.encode(binaryData);
     }
\ No newline at end of file
