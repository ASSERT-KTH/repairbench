diff --git a/tmp/2b1f6d38-f9d0-45da-8ff4-d5b1c0f715b2_buggy.java b/tmp/da31055d-22e9-449e-8073-a3489115f8fb_fixed.java
index 51ebfca..300a9b8 100644
--- a/tmp/2b1f6d38-f9d0-45da-8ff4-d5b1c0f715b2_buggy.java
+++ b/tmp/da31055d-22e9-449e-8073-a3489115f8fb_fixed.java
@@ -1,32 +1,49 @@
     /**
      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
      * 
      * @param binaryData
      *            Array containing binary data to encode.
      * @param isChunked
      *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
      * @param urlSafe
      *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
      * @param maxResultSize
      *            The maximum result size to accept.
      * @return Base64-encoded data.
      * @throws IllegalArgumentException
      *             Thrown when the input array needs an output array bigger than maxResultSize
      * @since 1.4
      */
     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
         if (binaryData == null || binaryData.length == 0) {
             return binaryData;
         }
 
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        // N.B. :: Be careful handling maxResultSize = Integer.MAX_VALUE / 1.33 which is rounded down to
+        // Integer.MAX_VALUE because of integer division. The upper limit for a Base64-encoded byte array is
+        // Integer.MAX_VALUE / 4 * 3 = 1,610,612,733 which gives Integer.MAX_VALUE / 1.333333334 which is rounded up
+        // to Integer.MAX_VALUE / 1.33 = 1,614,411,840. Therefore, the check must be performed including the separators.
+
+        // Calculate the output size based on the isChunked parameter
+        long len;
+        if (isChunked) {
+            // Use the static method getEncodeLength that calculates the length including MIME chunking
+            len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        } else {
+            // Calculate the length without chunking (each 3 bytes -> 4 bytes)
+            // Implementation based on the formula: ceil(n / 3) * 4
+            len = ((long)binaryData.length + 2) / 3 * 4;
+        }
+
+        // Check if the calculated length exceeds the maximum allowed size
         if (len > maxResultSize) {
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
         }
                 
+        // Create the Base64 encoder instance with the appropriate chunking setting
         Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
         return b64.encode(binaryData);
     }
\ No newline at end of file
