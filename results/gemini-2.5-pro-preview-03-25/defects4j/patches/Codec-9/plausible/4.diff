diff --git a/tmp/119b071d-7de0-45d3-8897-5f2ee5b80e61_buggy.java b/tmp/bf6d0627-2240-450b-9b57-34a549642ad0_fixed.java
index 51ebfca..83f274c 100644
--- a/tmp/119b071d-7de0-45d3-8897-5f2ee5b80e61_buggy.java
+++ b/tmp/bf6d0627-2240-450b-9b57-34a549642ad0_fixed.java
@@ -1,32 +1,47 @@
     /**
      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
      *
      * @param binaryData
      *            Array containing binary data to encode.
      * @param isChunked
      *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
      * @param urlSafe
      *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
      * @param maxResultSize
      *            The maximum result size to accept.
      * @return Base64-encoded data.
      * @throws IllegalArgumentException
      *             Thrown when the input array needs an output array bigger than maxResultSize
      * @since 1.4
      */
     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
         if (binaryData == null || binaryData.length == 0) {
             return binaryData;
         }
 
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        // Calculate the potential length of the encoded data, respecting the isChunked parameter.
+        long len;
+        if (isChunked) {
+            // Calculate length with chunking (MIME_CHUNK_SIZE and CHUNK_SEPARATOR).
+            len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        } else {
+            // Calculate length without chunking (chunkSize=0).
+            // The separator is irrelevant when chunk size is 0, but we pass CHUNK_SEPARATOR for consistency
+            // with the Base64 constructor call below, assuming getEncodeLength ignores separator when chunkSize is 0.
+            len = getEncodeLength(binaryData, 0, CHUNK_SEPARATOR);
+        }
+
+        // Check if the calculated length exceeds the allowed maximum size.
         if (len > maxResultSize) {
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
         }
 
+        // Create the Base64 instance with the appropriate chunking settings.
+        // If isChunked is true, use the default constructor which chunks at 76 characters with CRLF.
+        // If isChunked is false, explicitly set lineLength to 0 to disable chunking.
         Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
         return b64.encode(binaryData);
     }
\ No newline at end of file
