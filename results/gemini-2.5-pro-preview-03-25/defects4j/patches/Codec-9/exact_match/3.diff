diff --git a/tmp/8026f87f-580b-4bcf-91b9-5237d774e211_buggy.java b/tmp/a0d00046-f048-46bc-9214-249ec7724ec8_fixed.java
index 51ebfca..6725bcb 100644
--- a/tmp/8026f87f-580b-4bcf-91b9-5237d774e211_buggy.java
+++ b/tmp/a0d00046-f048-46bc-9214-249ec7724ec8_fixed.java
@@ -1,32 +1,39 @@
     /**
      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
      *
      * @param binaryData
      *            Array containing binary data to encode.
      * @param isChunked
      *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
      * @param urlSafe
      *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
      * @param maxResultSize
      *            The maximum result size to accept.
      * @return Base64-encoded data.
      * @throws IllegalArgumentException
      *             Thrown when the input array needs an output array bigger than maxResultSize
      * @since 1.4
      */
     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
         if (binaryData == null || binaryData.length == 0) {
             return binaryData;
         }
 
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        // Calculate the potential length of the encoded data based on chunking preference.
+        // If isChunked is true, calculate based on MIME chunking standards (76 chars/line, CRLF separator).
+        // Use 0 for chunkSize when not chunked, which results in getEncodeLength returning the base length.
+        long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
+             // We build the message dynamically to avoid unnecessary allocation in the success case.
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
         }
 
+        // Create Base64 encoder:
+        // If chunked, use default chunk size (76) and separator (\r\n).
+        // If not chunked, set lineLength to 0. The separator passed here is technically ignored.
         Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
         return b64.encode(binaryData);
     }
\ No newline at end of file
