diff --git a/tmp/6fdb7d09-face-425a-b6fc-59fb56320879_buggy.java b/tmp/535e362d-40c4-409e-bc07-7f9713e8ebc0_fixed.java
index 39c4220..da6f6cc 100644
--- a/tmp/6fdb7d09-face-425a-b6fc-59fb56320879_buggy.java
+++ b/tmp/535e362d-40c4-409e-bc07-7f9713e8ebc0_fixed.java
@@ -1,21 +1,25 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [Issue#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
+        // Check if all characters are digits
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
+            // Bug fix: Use str.charAt(i) instead of str.charAt(i++) to avoid skipping characters
+            char c = str.charAt(i);
             if (c > '9' || c < '0') {
-                return -1;
+                return -1; // Not a digit, invalid index
             }
         }
+        // If length is 10, check for potential integer overflow using long
         if (len == 10) {
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
-                return -1;
+                return -1; // Index too large
             }
         }
+        // All checks passed, parse as integer
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
