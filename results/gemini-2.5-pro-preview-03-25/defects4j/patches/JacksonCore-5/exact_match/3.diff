diff --git a/tmp/2cfd1aec-4945-4d90-867f-0c9188c4a9e6_buggy.java b/tmp/796d088c-9b6d-40cf-9232-069cb51a6587_fixed.java
index 39c4220..baa623b 100644
--- a/tmp/2cfd1aec-4945-4d90-867f-0c9188c4a9e6_buggy.java
+++ b/tmp/796d088c-9b6d-40cf-9232-069cb51a6587_fixed.java
@@ -1,21 +1,26 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [Issue#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
         if (len == 0 || len > 10) {
             return -1;
         }
+        // Check that all characters are digits
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
+            // char c = str.charAt(i++); // Buggy line: increments i twice
+            char c = str.charAt(i); // Fixed line: removed extra i++
             if (c > '9' || c < '0') {
-                return -1;
+                return -1; // Not a valid digit, return -1
             }
         }
+        // If the string consists of digits and has length 10, check for overflow
         if (len == 10) {
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
-                return -1;
+                return -1; // Value exceeds Integer.MAX_VALUE
             }
         }
+        // If all checks pass, the string represents a valid non-negative integer
+        // that fits within Integer bounds.
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
