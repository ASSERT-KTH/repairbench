diff --git a/tmp/fdc20170-c54a-46a0-be7c-8fff2ecb3bfa_buggy.java b/tmp/7fcc6f73-b7c4-4abc-bd72-9e035eeb4c72_fixed.java
index 39c4220..6d6cb2e 100644
--- a/tmp/fdc20170-c54a-46a0-be7c-8fff2ecb3bfa_buggy.java
+++ b/tmp/7fcc6f73-b7c4-4abc-bd72-9e035eeb4c72_fixed.java
@@ -1,21 +1,31 @@
     private final static int _parseIndex(String str) {
         final int len = str.length();
         // [Issue#133]: beware of super long indexes; assume we never
         // have arrays over 2 billion entries so ints are fine.
+        // Also, JSON Pointer spec (RFC 6901) disallows leading zeroes.
         if (len == 0 || len > 10) {
             return -1;
         }
+        // RFC 6901: "Note that this syntax DOES NOT allow index values with
+        //           leading zeros (like "01") unless the value is 0 itself."
+        if (len > 1 && str.charAt(0) == '0') {
+             return -1;
+        }
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
+            // char c = str.charAt(i++); // Original buggy line: increments i twice per iteration
+            char c = str.charAt(i);   // Fixed line: use current i
+            // Check if character is a digit
             if (c > '9' || c < '0') {
                 return -1;
             }
         }
+        // If length is 10, must check for overflow using long
         if (len == 10) {
             long l = NumberInput.parseLong(str);
             if (l > Integer.MAX_VALUE) {
                 return -1;
             }
         }
+        // If all checks pass, parse the integer
         return NumberInput.parseInt(str);
     }
\ No newline at end of file
