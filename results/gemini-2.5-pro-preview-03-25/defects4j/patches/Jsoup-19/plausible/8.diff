diff --git a/tmp/c0a69f2a-918e-4499-83d5-1c283dbaca48_buggy.java b/tmp/3dafacc1-08be-4748-8c76-a6359f7822ea_fixed.java
index 4aff4e4..4be085c 100644
--- a/tmp/c0a69f2a-918e-4499-83d5-1c283dbaca48_buggy.java
+++ b/tmp/3dafacc1-08be-4748-8c76-a6359f7822ea_fixed.java
@@ -1,15 +1,53 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        // Get original value first, needed for fallback comparison.
+        String originalValue = attr.getValue();
+        // Attempt to resolve the attribute's value (e.g., URL) to an absolute path.
+        // This is done BEFORE the check, as required for relative URLs like "/path" which need resolving
+        // before we can check the protocol (e.g. "http").
+        String resolvedValue = el.absUrl(attr.getKey());
 
+        // Determine which value to use for the protocol check.
+        // If absUrl resulted in an empty string, but the original value wasn't empty,
+        // it might be a custom protocol like 'cid' or 'data' that absUrl doesn't understand or resolve.
+        // In that case, check against the original value. Otherwise, check the resolved value.
+        String valueToCheck;
+        if (resolvedValue.isEmpty() && !originalValue.isEmpty()) {
+            // Resolution failed or resulted in empty, fallback to original value for check.
+            valueToCheck = originalValue;
+        } else {
+            // Use the resolved value (which might be the same as original if it was already absolute
+            // or if absUrl couldn't resolve but didn't return empty).
+            valueToCheck = resolvedValue;
+        }
+
+        // Check if the value starts with any of the allowed protocols.
+        boolean isValid = false;
         for (Protocol protocol : protocols) {
+            // Construct the protocol prefix (e.g., "http:")
             String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
+            // Perform case-insensitive comparison. Ensure protocol prefix is also lower-case.
+            if (valueToCheck.toLowerCase().startsWith(prot.toLowerCase())) {
+                isValid = true;
+                break; // Found a valid protocol, no need to check others.
             }
         }
-        return false;
+
+        // If the protocol is valid based on the check:
+        if (isValid) {
+            // Optionally update the attribute to the resolved value.
+            // This should happen only if we are not preserving relative links AND
+            // the resolution attempt (absUrl) actually produced a non-empty value.
+            // This prevents wiping out valid original values (like 'cid:') just because absUrl returned empty.
+            // If resolution produced a non-empty value (e.g. absolute URL from relative), we update.
+            if (!preserveRelativeLinks && !resolvedValue.isEmpty()) {
+                // Update the attribute in the element to the resolved value.
+                attr.setValue(resolvedValue);
+            }
+            // If preserveRelativeLinks is true, or if resolvedValue is empty (and original check passed),
+            // we don't call setValue, preserving the original attribute value.
+            return true; // Attribute is valid.
+        }
+
+        // If no valid protocol was found (either in resolved or original value).
+        return false; // Attribute is not valid.
     }
\ No newline at end of file
