diff --git a/tmp/4ee72c02-8119-4d8c-8b1b-61d7183b9673_buggy.java b/tmp/18a56ab5-a852-4622-908b-fcd5462564ae_fixed.java
index 4aff4e4..8997e35 100644
--- a/tmp/4ee72c02-8119-4d8c-8b1b-61d7183b9673_buggy.java
+++ b/tmp/18a56ab5-a852-4622-908b-fcd5462564ae_fixed.java
@@ -1,15 +1,49 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        // Check the protocol based on the resolved (usually absolute) URL or the original value
+        String originalValue = attr.getValue();
+        // Try to resolve the URL absolute. Will be empty if the baseUri is not set, or if the attribute is not a URL.
+        // Also, may be empty for schemes like cid: data: mailto: if not handled by URL class used internally by absUrl.
+        String resolvedValue = el.absUrl(attr.getKey());
 
+        // Determine which value to check the protocol against. Prioritize resolved, fallback to original.
+        // If resolved is empty and original is not, it might be a custom protocol (cid:, data:)
+        // or an unresolvable relative URL. Use the original value for the check in these cases.
+        String valueForCheck = (!resolvedValue.isEmpty() || originalValue.isEmpty()) ? resolvedValue : originalValue;
+
+        // Perform the protocol check using the determined value.
+        boolean protocolOk = false;
+        // Trim required, as value might start with spaces
+        // ToLowerCase required as protocol matching should be case-insensitive.
+        String valueForCheckLower = valueForCheck.trim().toLowerCase();
         for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
+            String prot = protocol.toString() + ":"; // Assuming Protocol.toString() gives the scheme name e.g., "http"
+            if (valueForCheckLower.startsWith(prot)) {
+                protocolOk = true;
+                break;
             }
         }
-        return false;
+
+        if (protocolOk) {
+            // The protocol specified in the attribute value (or inferred via resolution) is allowed.
+            // Now, decide whether to update the attribute value to the absolute version.
+            if (!preserveRelativeLinks) {
+                 // We want absolute URLs. Update the attribute if absUrl could resolve it to a non-empty string.
+                 if (!resolvedValue.isEmpty()) {
+                     // Resolved value is available (and non-empty), use it.
+                     attr.setValue(resolvedValue);
+                 }
+                 // If resolvedValue is empty (e.g., for cid:, data:, or unresolvable relative),
+                 // we validated the protocol based on originalValue, so we keep the attribute,
+                 // but we don't update its value here, leaving the original value in place.
+                 // This ensures custom protocol URLs like "cid:123" are preserved.
+            }
+            // If preserveRelativeLinks is true, we don't touch the attribute value.
+            return true; // Mark attribute as safe because the protocol check passed.
+        } else {
+            // The protocol was not in the allowed list when checking valueForCheck.
+            // This also implicitly handles the case where originalValue was a relative URL that
+            // could not be resolved (resolvedValue was empty, valueForCheck was originalValue,
+            // which doesn't start with "http:" etc.).
+            return false; // Mark attribute as unsafe.
+        }
     }
\ No newline at end of file
