diff --git a/tmp/2da954a5-ef7a-4a54-8f1f-c47ca20dde39_buggy.java b/tmp/5ed81742-8ed6-4a2f-bc11-39b6086bfa1a_fixed.java
index 4aff4e4..0635125 100644
--- a/tmp/2da954a5-ef7a-4a54-8f1f-c47ca20dde39_buggy.java
+++ b/tmp/5ed81742-8ed6-4a2f-bc11-39b6086bfa1a_fixed.java
@@ -1,15 +1,42 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
         // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
         // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
 
+        // Get the original value and the resolved absolute URL.
+        String originalValue = attr.getValue();
+        // absUrl() handles protocols like http, https, ftp, file, etc. It will return an empty string
+        // if the protocol is not resolvable (like cid:, mailto:) or if the base URI is invalid for resolution.
+        String resolvedValue = el.absUrl(attr.getKey());
+
+        // Determine which value to use for the protocol check.
+        // Prefer the resolved value if it's not empty (as it might have resolved a relative URL to an allowed protocol).
+        // Otherwise, fall back to the original value (e.g., for "cid:", "data:", "mailto:", or relative links that couldn't be resolved).
+        String valueToCheck = resolvedValue.isEmpty() ? originalValue : resolvedValue;
+
+        // Check if the value (resolved or original) starts with an allowed protocol.
+        boolean protocolIsValid = false;
         for (Protocol protocol : protocols) {
             String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
+            if (valueToCheck.toLowerCase().startsWith(prot)) {
+                protocolIsValid = true;
+                break;
             }
         }
+
+        // If the protocol is valid, decide whether to update the attribute value.
+        if (protocolIsValid) {
+            if (!preserveRelativeLinks) {
+                // If not preserving relative links, we might update the attribute.
+                // Use the resolved value if resolution was successful and produced a non-empty result.
+                // Otherwise, use the original value (important for preserving "cid:", "mailto:", etc.).
+                // This prevents absUrl returning "" from erasing a valid original value.
+                String finalValue = resolvedValue.isEmpty() ? originalValue : resolvedValue;
+                attr.setValue(finalValue);
+            }
+            // If preserveRelativeLinks is true, we don't modify the attribute, keeping the original value implicitly.
+            return true; // The attribute passes the protocol check.
+        }
+
+        // The protocol (checked on resolved or original value) is not in the allowed set.
         return false;
     }
\ No newline at end of file
