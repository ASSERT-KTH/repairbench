diff --git a/tmp/0fa4ba98-22af-4d2f-a43b-4be788f4f944_buggy.java b/tmp/f11d46b4-76cc-45b3-9683-4f04227f9cd2_fixed.java
index 4aff4e4..eb04f25 100644
--- a/tmp/0fa4ba98-22af-4d2f-a43b-4be788f4f944_buggy.java
+++ b/tmp/f11d46b4-76cc-45b3-9683-4f04227f9cd2_fixed.java
@@ -1,15 +1,32 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
         // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
         // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        String origValue = attr.getValue(); // Get the original value before resolving.
+        String value = el.absUrl(attr.getKey()); // Attempt to resolve URL
 
+        // If resolution returns an empty string but the original value was not empty,
+        // it might be a custom protocol (like 'cid:') or a relative URL without a base URI.
+        // In this case, use the original value for the protocol check.
+        String valueToCheck = value;
+        if (value.isEmpty() && !origValue.isEmpty()) {
+            valueToCheck = origValue;
+        }
+
+        // Check the protocol against the appropriate value (resolved or original).
         for (Protocol protocol : protocols) {
             String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
+            if (valueToCheck.toLowerCase().startsWith(prot)) {
+                // Protocol is valid.
+                // If relative links aren't preserved, update the attribute with the value
+                // that passed the check (which might be the resolved URL or the original URL
+                // if resolution failed for a valid custom protocol).
+                if (!preserveRelativeLinks) {
+                    attr.setValue(valueToCheck);
                 }
+                return true; // Valid protocol found.
             }
+        }
+
+        // No valid protocol matched.
         return false;
     }
\ No newline at end of file
