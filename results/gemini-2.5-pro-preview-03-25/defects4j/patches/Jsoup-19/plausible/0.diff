diff --git a/tmp/bd90c692-fff9-47f0-8f36-40cc34385ba6_buggy.java b/tmp/56c1079b-db7f-41b8-ba2e-8f0a4250bd22_fixed.java
index 4aff4e4..12dbabb 100644
--- a/tmp/bd90c692-fff9-47f0-8f36-40cc34385ba6_buggy.java
+++ b/tmp/56c1079b-db7f-41b8-ba2e-8f0a4250bd22_fixed.java
@@ -1,15 +1,75 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        // Use the original value for protocol validation.
+        String originalValue = attr.getValue();
+        // Allow empty values (considered safe) - note that absUrl may resolve an empty string to the base URI, so check original first.
+        if (originalValue.isEmpty()) {
+            return true;
+        }
 
+        // Check if the original value starts with an allowed protocol.
+        boolean protocolIsValid = false;
         for (Protocol protocol : protocols) {
             String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
+            if (originalValue.toLowerCase().startsWith(prot)) {
+                protocolIsValid = true;
+                break;
+            }
+        }
+
+        if (protocolIsValid) {
+            // Original value has a valid protocol (e.g., "http:", "cid:", "data:").
+            // Decide whether to update the attribute value based on preserveRelativeLinks.
+            if (!preserveRelativeLinks) {
+                // Attempt to resolve the URL to an absolute path.
+                String resolvedValue = el.absUrl(attr.getKey());
+
+                // If absUrl returns an empty string for a non-empty original value,
+                // it indicates resolution failure (e.g., for "cid:", "data:", or relative path without base URI).
+                // In this case, since the original protocol *was* valid, we should *keep* the original value,
+                // as trying to update it with an empty string would be incorrect.
+                if (resolvedValue.isEmpty() && !originalValue.isEmpty()) {
+                    // Keep original value - do nothing here, as attr already holds originalValue.
+                } else {
+                    // Otherwise, resolution likely succeeded or the original value was empty. Update the attribute.
+                    attr.setValue(resolvedValue);
+                }
+            }
+            // If preserveRelativeLinks is true, we don't modify the attribute anyway.
+            return true; // Protocol is valid.
+        } else {
+            // Original value does not start with an allowed protocol.
+            // It might be a relative URL that resolves to an allowed protocol.
+            // Let's check the resolved URL ONLY if the original didn't match.
+            String resolvedValue = el.absUrl(attr.getKey());
+
+            // If resolvedValue is empty OR same as original, then it's not a successfully resolved relative URL
+            // (or absUrl couldn't handle it). Since original failed validation, this case is invalid too.
+            if (resolvedValue.isEmpty() || resolvedValue.equals(originalValue)) {
+                 return false;
+            }
+
+            // Check if the resolved URL (which is different from original) has a valid protocol.
+            boolean resolvedProtocolIsValid = false;
+            for (Protocol protocol : protocols) {
+                String prot = protocol.toString() + ":";
+                 if (resolvedValue.toLowerCase().startsWith(prot)) {
+                    resolvedProtocolIsValid = true;
+                    break;
                 }
             }
+
+            if (resolvedProtocolIsValid) {
+                // The resolved relative URL has a valid protocol.
+                 if (!preserveRelativeLinks) {
+                     // Update the attribute to the absolute/resolved value.
+                     attr.setValue(resolvedValue);
+                 }
+                 // If preserveRelativeLinks is true, we keep the original relative URL,
+                 // but the link is considered safe because it resolves to a valid protocol.
+                 return true;
+            } else {
+                // Resolved relative URL also doesn't have a valid protocol.
                 return false;
             }
+        }
+    }
\ No newline at end of file
