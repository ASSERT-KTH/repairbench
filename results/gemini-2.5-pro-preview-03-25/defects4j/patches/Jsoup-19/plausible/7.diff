diff --git a/tmp/1cd24c46-4b5b-4b69-8485-e99b8fa423f0_buggy.java b/tmp/46548ff4-f2e7-412e-84a4-492141398251_fixed.java
index 4aff4e4..703eaf2 100644
--- a/tmp/1cd24c46-4b5b-4b69-8485-e99b8fa423f0_buggy.java
+++ b/tmp/46548ff4-f2e7-412e-84a4-492141398251_fixed.java
@@ -1,15 +1,70 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
         // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        // Check original value first, as absUrl may strip protocols like mailto:, cid:, etc.
+        String origValue = attr.getValue();
+        String absValue = ""; // Initialize absValue
 
+        // Check if the original value starts with an allowed protocol.
+        boolean R = false; // Use a boolean flag instead of early returns to ensure absUrl resolution happens if needed.
         for (Protocol protocol : protocols) {
             String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
+            if (origValue.toLowerCase().startsWith(prot)) {
+                R = true; // Original value has a valid protocol
+                break;
             }
         }
+
+        // If the original value doesn't have a valid protocol, try resolving the URL
+        // and check if the absolute URL starts with a valid protocol.
+        // This handles relative URLs resolving to e.g. http.
+        if (!R) {
+            // Resolve URL only if needed and not preserving relative links,
+            // or if we need to check the resolved protocol
+             absValue = el.absUrl(attr.getKey());
+             // Check the resolved value
+             if (!absValue.isEmpty()) {
+                 for (Protocol protocol : protocols) {
+                     String prot = protocol.toString() + ":";
+                     if (absValue.toLowerCase().startsWith(prot)) {
+                         R = true; // Absolute value has a valid protocol
+                         break;
+                     }
+                 }
+             }
+        }
+
+        // If a valid protocol was found (either in original or absolute)
+        if (R) {
+            // If we are not preserving relative links, update the attribute.
+            // Update with absValue ONLY if it was successfully resolved and validated.
+            // Otherwise, the original value (which passed the check) should be kept.
+            if (!preserveRelativeLinks) {
+                // Resolve absValue if it hasn't been resolved yet
+                 if (absValue.isEmpty()) // can be empty if R was true based on origValue
+                    absValue = el.absUrl(attr.getKey());
+
+                 // Check if absValue resolution resulted in a URL starting with an allowed protocol
+                 boolean absValid = false;
+                 if (!absValue.isEmpty()) {
+                     for (Protocol protocol : protocols) {
+                         String prot = protocol.toString() + ":";
+                         if (absValue.toLowerCase().startsWith(prot)) {
+                             absValid = true;
+                             break;
+                         }
+                     }
+                 }
+
+                 // Update only if absValue is valid; otherwise keep original
+                 if (absValid) {
+                    attr.setValue(absValue);
+                 }
+                 // If absValid is false, it means origValue was valid but absValue wasn't.
+                 // In this case, we keep the original value by not calling setValue().
+            }
+            return true; // Valid protocol found
+        }
+
+        // No valid protocol found in either original or absolute form.
         return false;
     }
\ No newline at end of file
