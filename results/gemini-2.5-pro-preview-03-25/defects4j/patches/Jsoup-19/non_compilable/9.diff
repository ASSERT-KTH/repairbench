diff --git a/tmp/b7b07316-d19e-465a-a849-a89bdf0a1921_buggy.java b/tmp/4dbe489e-691e-4ecb-91a4-79c9e2ad5283_fixed.java
index 4aff4e4..81d0fd5 100644
--- a/tmp/b7b07316-d19e-465a-a849-a89bdf0a1921_buggy.java
+++ b/tmp/4dbe489e-691e-4ecb-91a4-79c9e2ad5283_fixed.java
@@ -1,15 +1,47 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
         // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
         // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
 
+        // Get original value and resolved value (if possible)
+        // attr.getValue() is potentially trimmed - use orig value from attributes
+        String origValue = el.attributes().getIgnoreCase(attr.getKey()); // Use original value from element's attributes
+        String resolvedValue = el.absUrl(attr.getKey());
+
+        // Determine the value to check against protocols:
+        // Use the resolved value if it's not empty (handles relative URLs),
+        // otherwise use the original value (handles protocols like cid:, data:, mailto: that don't resolve).
+        String valueToCheck;
+        if (!resolvedValue.isEmpty())
+            valueToCheck = resolvedValue;
+        else
+            valueToCheck = origValue;
+
+        // Check if the value starts with an allowed protocol
+        boolean foundMatch = false;
         for (Protocol protocol : protocols) {
             String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
+            // Ensure value has character after protocol
+            if (valueToCheck.length() > prot.length() && valueToCheck.toLowerCase().startsWith(prot)) {
+                foundMatch = true;
+                break;
             }
         }
-        return false;
+
+        if (foundMatch) {
+            // Protocol is valid. Now, update attribute if needed (and possible)
+            if (!preserveRelativeLinks) {
+                // Update to the resolved value *only* if resolution was successful (non-empty)
+                // Otherwise, the original value (which passed the protocol check) remains.
+                if (!resolvedValue.isEmpty()) {
+                    // If the resolved value is the same as the original, no need to update
+                    if (!origValue.equals(resolvedValue)) {
+                        attr.setValue(resolvedValue);
+                    }
+                }
+                // If resolvedValue is empty, do nothing; keep the original value.
+            }
+            return true; // Valid protocol found
+        }
+
+        return false; // No valid protocol found
     }
\ No newline at end of file
