diff --git a/tmp/37891ef4-31cb-4d6f-91d7-9ad5117d01b3_buggy.java b/tmp/3426f3fc-6cab-4c9f-a2e5-b39d7be0c19b_fixed.java
index 4aff4e4..310fdb0 100644
--- a/tmp/37891ef4-31cb-4d6f-91d7-9ad5117d01b3_buggy.java
+++ b/tmp/3426f3fc-6cab-4c9f-a2e5-b39d7be0c19b_fixed.java
@@ -1,15 +1,63 @@
+import org.jsoup.nodes.Attribute;
+import org.jsoup.nodes.Element;
+import org.jsoup.safety.Whitelist.Protocol; // Assuming this import path is correct
+
+import java.util.Set;
+// Ensure 'preserveRelativeLinks' field is accessible in the class containing this method.
+
+    /**
+     * Tests if the value of the attribute is allowed by the list of protocols
+     * @param el the element holding the attribute
+     * @param attr the attribute to test
+     * @param protocols the list of allowed protocols
+     * @return true if the protocol is allowed or is relative; false otherwise
+     */
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
+        // Get original value, and attempt to resolve it to an absolute URL.
+        String originalValue = el.attr(attr.getKey());
+        String resolvedValue = el.absUrl(attr.getKey());
 
+        // Determine which value to check the protocol against.
+        // Prioritize the resolved value if resolution was successful (non-empty).
+        // Otherwise, fall back to the original value (e.g., for custom protocols like 'cid', 'data', or relative links without a base URI).
+        String valueToCheck;
+        boolean resolutionSucceeded = !resolvedValue.isEmpty();
+
+        if (resolutionSucceeded) {
+            valueToCheck = resolvedValue;
+        } else {
+            // Resolution failed or returned empty string. Check the original value.
+            // This allows custom protocols or relative links that absUrl might not understand
+            // to be validated if they are explicitly allowed.
+            valueToCheck = originalValue;
+        }
+
+        // Check if the value starts with an allowed protocol.
+        boolean protocolIsValid = false;
         for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+            // Protocol is stored as string name e.g. "http", "cid"
+            String prefix = protocol.toString() + ":";
+            if (valueToCheck.toLowerCase().startsWith(prefix)) {
+                protocolIsValid = true;
+                break;
+            }
+        }
+
+        // If the protocol is valid, proceed. Otherwise, the attribute is invalid.
+        if (protocolIsValid) {
+            // If the protocol check passed, the attribute is potentially valid.
+            // Now, decide whether to update the attribute's value to the resolved URL.
+            // Update only if we are NOT preserving relative links AND URL resolution succeeded.
+            if (!preserveRelativeLinks && resolutionSucceeded) {
+                // Update the attribute to the resolved absolute URL.
+                attr.setValue(resolvedValue);
+            }
+            // If preserveRelativeLinks is true, or if URL resolution failed (resolutionSucceeded is false),
+            // we keep the original value currently held by the attribute.
+            // In either case, since protocolIsValid is true, the attribute passes the test.
             return true;
-            }
-        }
+        } else {
+            // The protocol check failed (on either the resolved or original value).
             return false;
         }
+    }
\ No newline at end of file
