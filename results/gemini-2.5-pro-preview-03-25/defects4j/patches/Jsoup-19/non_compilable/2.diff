diff --git a/tmp/0d368d84-794e-44a7-8485-6d6f44794cf0_buggy.java b/tmp/b1d5ef4d-ab84-4a34-9c13-7d6f9c9252a5_fixed.java
index 4aff4e4..45455fe 100644
--- a/tmp/0d368d84-794e-44a7-8485-6d6f44794cf0_buggy.java
+++ b/tmp/b1d5ef4d-ab84-4a34-9c13-7d6f9c9252a5_fixed.java
@@ -1,15 +1,68 @@
     private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
+        // Check the protocol of the original value, without resolving first. Allows for custom protocols.
+        String value = attr.getValue(); // Get the original value as set in the attribute
+        String LcValueToCheck = value.trim().toLowerCase(); // Trim and lower for checking prefixes
+
+        if (LcValueToCheck.isEmpty()) return false; // Empty values are not valid protocols
+
+        boolean Mvalid = false;
+        // Check 1: Does the trimmed, lowercased value start with an allowed protocol?
+        for (Protocol protocol : protocols) {
+            String prot = protocol.toString() + ":";
+            if (LcValueToCheck.startsWith(prot)) {
+                valid = true;
+                break;
+            }
+        }
+
+        String absValue = ""; // Initialize absValue, will store resolved URL if needed
+
+        if (!valid) {
+            // Check 2: If not, maybe it's a relative URL or requires base URI resolution.
+            // Resolve using absUrl and check the protocol of the absolute URL.
+            // absUrl will return "" if e.g. no base Uri specified or mailto:
+            absValue = el.absUrl(attr.getKey()); // Resolve URL using attribute key
+            if (absValue.isEmpty()) {
+                 // Cannot resolve (e.g., relative URL without baseUri, or malformed like "evil:", or unsupported like "mailto:") -> invalid UNLESS checked in Check 1
+                 // Since Check 1 failed, and resolution failed, consider it invalid.
+                 return false;
+            }
+            String lcAbsValue = absValue.toLowerCase(); // Lowercase for checking resolved URL
+            for (Protocol protocol : protocols) {
+                String prot = protocol.toString() + ":";
+                if (lcAbsValue.startsWith(prot)) {
+                    valid = true; // Valid based on resolved absolute URL's protocol
+                    break;
+                }
+            }
+        }
+
+        // If valid either way (original check or resolved check):
+        if (valid) {
+            if (!preserveRelativeLinks) {
+                 // If validation passed based on the original value (Check 1),
+                 // we might still need to calculate absValue if it wasn't done in Check 2.
+                 // This handles cases like "cid:" or "data:" where absUrl might return empty/fail.
+                 if (absValue.isEmpty()) { // absValue is empty only if Check 1 passed and Check 2 was skipped
+                     absValue = el.absUrl(attr.getKey()); // Calculate absValue now
+                 }
+
+                 // Update attribute value:
+                 // If absUrl produced a non-empty result (meaning resolution likely succeeded), use it.
+                 // Otherwise (absUrl failed or returned empty e.g. for mailto:, cid:), keep the original value.
+                 // We use the original 'value' variable which holds the untrimmed, original case value.
+                 if (!absValue.isEmpty()) {
+                     attr.setValue(absValue);
+                 } else {
+                     // Fallback to original value if absUrl resolution failed or was empty.
+                     // This preserves values like "cid:12345" or "mailto:test@example.com"
                      attr.setValue(value);
-        
-        for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+                 }
+            }
+            // else: preserveRelativeLinks is true, so do nothing to the attribute value, just confirm validity.
             return true;
-            }
-        }
+        } else {
+            // Neither original check nor resolved check found a valid protocol.
             return false;
         }
+    }
\ No newline at end of file
