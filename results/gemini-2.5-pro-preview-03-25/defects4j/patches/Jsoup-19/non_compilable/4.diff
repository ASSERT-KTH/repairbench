diff --git a/tmp/b9bd0dc7-c925-42b1-8768-37b9f0a0eba3_buggy.java b/tmp/4071fe14-e71a-433f-b776-0edfe087f1c8_fixed.java
index 4aff4e4..900a912 100644
--- a/tmp/b9bd0dc7-c925-42b1-8768-37b9f0a0eba3_buggy.java
+++ b/tmp/4071fe14-e71a-433f-b776-0edfe087f1c8_fixed.java
@@ -1,15 +1,95 @@
-    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
-            attr.setValue(value);
-        
-        for (Protocol protocol : protocols) {
+import org.jsoup.nodes.Attribute;
+import org.jsoup.nodes.Element;
+import org.jsoup.safety.Whitelist; // Ensure this import points to the correct Protocol definition
+
+import java.util.Set;
+
+// Assume 'preserveRelativeLinks' is a field in the enclosing class like:
+// private boolean preserveRelativeLinks = false;
+
+    /**
+     * Tests the value of the attribute against the provided protocols. If the value is relative, it is resolved
+     * against the element's base URI. Optionally, if preserveRelativeLinks is false, the attribute value is updated
+     * to the resolved absolute URL.
+     *
+     * @param el        the element holding the attribute
+     * @param attr      the attribute to test
+     * @param protocols allowed protocols (e.g., http, https, cid, data)
+     * @return true if the attribute is allowed according to the protocols, false otherwise
+     */
+    private boolean testValidProtocol(Element el, Attribute attr, Set<Whitelist.Protocol> protocols) {
+        // Get the original attribute value.
+        String origValue = attr.getValue();
+        // Trim whitespace and convert to lower case for case-insensitive protocol checking.
+        String lowerOrigValueTrimmed = origValue.toLowerCase().trim();
+
+        // Allow empty attributes? Current behavior is they fail the startsWith check, considered invalid. Keep this.
+        // If empty value should be allowed, it would require an explicit check here.
+
+        // 1. Check if the original value *already* starts with an allowed protocol.
+        boolean origIsValid = false;
+        for (Whitelist.Protocol protocol : protocols) {
             String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
-                return true;
+            if (lowerOrigValueTrimmed.startsWith(prot)) {
+                origIsValid = true;
+                break;
             }
         }
+
+        if (origIsValid) {
+            // The original value uses an allowed protocol (e.g., "http:", "https:", "cid:", "data:").
+            // This attribute is potentially valid based on its declared protocol.
+            // Now, optionally resolve to absolute URL if !preserveRelativeLinks.
+            if (!preserveRelativeLinks) {
+                // Attempt to resolve the URL to an absolute form using the element's base URI.
+                String absValue = el.absUrl(attr.getKey());
+                // Update the attribute value only if resolution yielded a non-empty result.
+                // This is crucial: it preserves the original value for schemes like 'cid:' or 'data:'
+                // if absUrl() cannot resolve them meaningfully or returns an empty string for them.
+                if (absValue != null && !absValue.isEmpty()) {
+                    attr.setValue(absValue);
+                }
+                // If absValue is empty or null, the attribute implicitly retains its original value, which is correct.
+            }
+            return true; // Valid based on the protocol found in the original value.
+        } else {
+            // 2. The original value does not start with an allowed protocol.
+            // It could be a relative path ("foo.jpg"), an absolute path ("/img/bar.png"),
+            // or a protocol-relative URL ("//example.com/baz.gif").
+            // We need to resolve it against the base URI to get an absolute URL.
+            String absValue = el.absUrl(attr.getKey());
+
+            // If resolution failed (returned empty or null string), the URL is considered invalid.
+            // This handles cases like invalid relative URLs, or relative URLs when no base URI is available.
+            if (absValue == null || absValue.isEmpty()) {
                 return false;
             }
+
+            // 3. Check if the *resolved* absolute URL starts with an allowed protocol.
+            String lowerAbsValue = absValue.toLowerCase();
+            boolean resolvedIsValid = false;
+            for (Whitelist.Protocol protocol : protocols) {
+                String prot = protocol.toString() + ":";
+                if (lowerAbsValue.startsWith(prot)) {
+                    resolvedIsValid = true;
+                    break;
+                }
+            }
+
+            if (resolvedIsValid) {
+                // The resolved URL (which is absolute) uses an allowed protocol (e.g., starts with "http:", "https:").
+                // The attribute is valid.
+                // Optionally update the attribute to the absolute value if !preserveRelativeLinks.
+                if (!preserveRelativeLinks) {
+                    // Update the attribute to the resolved absolute URL.
+                    // We already know absValue is non-empty and non-null from the check above.
+                    attr.setValue(absValue);
+                }
+                // If preserveRelativeLinks is true, the attribute keeps its original relative value, which is also correct.
+                return true; // Valid based on the protocol of the resolved URL.
+            } else {
+                // The resolved absolute URL's protocol is not in the allowed set (e.g., resolved to 'ftp:' but only 'http' allowed).
+                return false; // Invalid.
+            }
+        }
+    }
\ No newline at end of file
