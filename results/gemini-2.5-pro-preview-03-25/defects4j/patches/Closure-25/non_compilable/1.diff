diff --git a/tmp/5143464b-6fe9-43fe-9a21-b91490fc982a_buggy.java b/tmp/a149966c-6f34-478b-817c-91803869c4db_fixed.java
index b98f0a7..f6d9429 100644
--- a/tmp/5143464b-6fe9-43fe-9a21-b91490fc982a_buggy.java
+++ b/tmp/a149966c-6f34-478b-817c-91803869c4db_fixed.java
@@ -1,29 +1,57 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
+    scope = traverse(constructor, scope); // Traverse constructor identifier
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    FunctionType ct = null; // Constructor function type
+    JSType type = null; // Instance type
+
+    // Determine the FunctionType ct
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        // Attempt to get the FunctionType
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+          // Handle NoObjectType case, which is implicitly constructible
+          // and implements FunctionType.
           ct = (FunctionType) constructorType;
         }
-        if (ct != null && ct.isConstructor()) {
+
+        // Ensure ct is actually a constructor before using it.
+        // If ct is null or not a constructor, we'll handle it below.
+        if (ct != null && !ct.isConstructor()) {
+           ct = null; // Treat non-constructor functions as invalid for 'new'.
+        }
+      }
+    }
+
+    // Perform backwards inference and traverse arguments if we have a valid constructor type
+    if (ct != null) {
+        // Infer arguments based on parameter types (updates scope)
+        // and traverse arguments.
+        scope = inferArgumentsCoupled(scope, n, ct);
+        // Determine the instance type created by 'new'
         type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+    } else {
+        // If constructor is not valid/unknown, still traverse arguments
+        // to catch errors/side effects within argument expressions.
         for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
           scope = traverse(arg, scope);
         }
+        // If we couldn't determine the constructor type earlier, or it wasn't
+        // a valid constructor, the result type is unknown.
+        if (type == null) { // type might already be UNKNOWN_TYPE if constructorType was unknown
+          type = getNativeType(UNKNOWN_TYPE);
+        }
+    }
+
+    // Set the JSType for the 'new' expression node. Type should not be null here.
+    Preconditions.checkNotNull(type, "Calculated type for new expression cannot be null.");
+    n.setJSType(type);
+
+    // Return the scope, potentially modified by argument inference/traversal
     return scope;
   }
\ No newline at end of file
