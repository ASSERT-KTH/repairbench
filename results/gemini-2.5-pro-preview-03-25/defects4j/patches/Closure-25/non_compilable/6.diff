diff --git a/tmp/20c66911-7267-46d4-9af1-9a1592e90ff1_buggy.java b/tmp/3685dfa6-b049-4bde-9cd2-a4bad62d6595_fixed.java
index b98f0a7..967f9e8 100644
--- a/tmp/20c66911-7267-46d4-9af1-9a1592e90ff1_buggy.java
+++ b/tmp/3685dfa6-b049-4bde-9cd2-a4bad62d6595_fixed.java
@@ -1,29 +1,99 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
+    // Traverse the constructor node to determine its type.
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    JSType instanceType = null;
+    FunctionType ct = null;
+
+    // Determine the constructor type and the instance type it produces.
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
+            instanceType = getNativeType(UNKNOWN_TYPE);
         } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+            ct = constructorType.toMaybeFunctionType();
+            // Handle cases like NoObjectType which implement FunctionType but where
+            // toMaybeFunctionType returns null. NoObjectType can validly construct objects.
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
+            // Check if it's actually a constructor.
             if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+                instanceType = ct.getInstanceType();
+            } else {
+                // If it's not a constructor or resolution failed, the instance type is unknown.
+                instanceType = getNativeType(UNKNOWN_TYPE);
+                ct = null; // Ensure we don't use parameters from a non-constructor.
             }
         }
+    } else {
+        // If the constructor type itself is unknown.
+        instanceType = getNativeType(UNKNOWN_TYPE);
     }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // Set the JSType for the new expression node (e.g., 'new F()').
+    // This should ideally be the instance type, default to Unknown if null.
+    n.setJSType(instanceType != null ? instanceType : getNativeType(UNKNOWN_TYPE));
+
+    // Traverse the arguments passed to the constructor.
+    Node arg = constructor.getNext();
+    if (ct != null) { // Only perform parameter-based inference if we have a valid constructor type.
+        Iterator<Node> paramIt = ct.getParameters().iterator();
+        boolean isVarArgs = ct.isVarArgs();
+        // Note: getVarArgsType() can return null if not specified.
+        JSType varArgsType = isVarArgs ? ct.getVarArgsType() : null; 
+        // Default varArgsType to Unknown if it's null but required.
+        if (isVarArgs && varArgsType == null) {
+            varArgsType = getNativeType(UNKNOWN_TYPE);
+        }
+
+        while (arg != null) {
+            JSType paramType = null;
+            if (paramIt.hasNext()) {
+                // Get the JSType associated with the parameter Node
+                // Note: getJSType() on the parameter node can be null.
+                paramType = paramIt.next().getJSType();
+            } else if (isVarArgs) {
+                paramType = varArgsType;
+            }
+
+            // Default parameter type to Unknown if resolution failed or not available.
+            if (paramType == null) {
+                paramType = getNativeType(UNKNOWN_TYPE);
+            }
+
+            // Traverse the argument node itself first to determine its type.
+            scope = traverse(arg, scope);
+
+            // Now, apply backward inference: Refine the argument's type based on
+            // the expected parameter type. Do not infer if param is void.
+            // Also, only infer onto names or GETPROP/GETELEM, as these represent L-values
+            // where the type information can be updated in the scope.
+            if (!paramType.isVoidType()) {
+                JSType argType = arg.getJSType();
+                // Check if the argument is a name or property access and has a known type.
+                if (argType != null && (arg.isName() || NodeUtil.isGet(arg))) {
+                   // Use inferQualifiedSlot which handles both NAME and GETPROP/GETELEM.
+                   // It attempts to refine the type of the slot represented by 'arg'
+                   // by meeting its current type ('argType') with the expected parameter type ('paramType').
+                   scope.inferQualifiedSlot(arg, argType, paramType);
+                }
+            }
+            arg = arg.getNext();
+        }
+    } else {
+        // If the constructor type is unknown or invalid, just traverse arguments
+        // without attempting parameter-based inference.
+        while (arg != null) {
             scope = traverse(arg, scope);
+            arg = arg.getNext();
+        }
     }
+
     return scope;
   }
\ No newline at end of file
