diff --git a/tmp/8fec752d-1656-43f7-a4c4-7db8448d0f06_buggy.java b/tmp/17a25b58-69fb-468a-b3d5-6aa9f9d27703_fixed.java
index b98f0a7..e7730e8 100644
--- a/tmp/8fec752d-1656-43f7-a4c4-7db8448d0f06_buggy.java
+++ b/tmp/17a25b58-69fb-468a-b3d5-6aa9f9d27703_fixed.java
@@ -1,29 +1,85 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
+    // Evaluate the constructor expression.
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    JSType type = null; // The type produced by the 'new' expression
+    FunctionType ct = null; // The FunctionType of the constructor
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
+        // If the constructor type is unknown, the result is unknown.
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        // Check if it's a function type.
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+          // Handle cases like NoObjectType which implement FunctionType
+          // but aren't returned by toMaybeFunctionType.
           ct = (FunctionType) constructorType;
         }
+
+        // Check if it's actually a constructor.
         if (ct != null && ct.isConstructor()) {
+          // Determine the type of the instance created by the 'new' expression.
           type = ct.getInstanceType();
+        } else {
+          // If it's not a constructor, we can't determine the instance type,
+          // and we also cannot do backward inference on arguments. Reset ct.
+          ct = null;
+          // TODO(b/116442988): Consider warning about invalid constructor usage.
+          // Result type remains null (may become unknown later in the flow).
         }
       }
     }
+
+    // Set the JSType of the NEW node itself.
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // Evaluate arguments, applying backward inference where possible.
+    Node arg = constructor.getNext();
+    if (ct != null) {
+      // We have a valid constructor type, attempt backward inference.
+      Node param = ct.getParametersNode() == null ? null : ct.getParametersNode().getFirstChild();
+      while (arg != null) {
+        // Determine the type of the parameter corresponding to this argument.
+        JSType paramType = getNativeType(UNKNOWN_TYPE); // Default if no parameter found or for var_args
+        if (param != null) {
+          JSType pType = param.getJSType();
+          if (pType != null) {
+            paramType = pType;
+          }
+          // Advance to the next parameter for the next iteration.
+          param = param.getNext();
+        }
+        // TODO(johnlenz): Handle var_args parameters more accurately.
+
+        // Evaluate the argument expression itself first.
+        scope = traverse(arg, scope);
+
+        // Apply backward-inference constraints from the parameter type to the argument.
+        // We only perform this inference if we have a meaningful parameter type.
+        if (paramType != null && !paramType.isUnknownType()) {
+          // Use traverseAssignLHS to apply the parameter type constraint to the argument node.
+          // This is analogous to assigning the argument to a variable of the parameter type.
+          // It updates the scope and potentially refines the argument node's type if 'arg'
+          // refers to a variable, property, object literal, etc., enabling backward inference.
+          scope = traverseAssignLHS(scope, arg, paramType);
+        }
+
+        // Advance to the next argument.
+        arg = arg.getNext();
+      }
+    } else {
+      // If the constructor type was invalid or unknown,
+      // simply traverse the arguments without attempting backward inference.
+      while (arg != null) {
         scope = traverse(arg, scope);
+        arg = arg.getNext();
+      }
     }
+
     return scope;
   }
\ No newline at end of file
