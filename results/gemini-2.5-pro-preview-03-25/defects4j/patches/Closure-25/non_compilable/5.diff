diff --git a/tmp/f3be9b41-c5d9-4979-96ee-14c127777f32_buggy.java b/tmp/ff48b39f-6bbe-4035-a2ae-e3e5368b3557_fixed.java
index b98f0a7..1e7431a 100644
--- a/tmp/f3be9b41-c5d9-4979-96ee-14c127777f32_buggy.java
+++ b/tmp/ff48b39f-6bbe-4035-a2ae-e3e5368b3557_fixed.java
@@ -1,29 +1,48 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
+    scope = traverse(constructor, scope); // Process the constructor expression itself
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null; // Initialize ct
+
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+            // Try to get the FunctionType
+            ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
+
+            // If we have a constructor function type, determine the instance type
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
+
+    // Set the type of the 'new' expression
+    // If type is null, it defaults to UnknownType, which is fine.
     n.setJSType(type);
+
+    // Perform argument type inference (backwards and forwards)
+    // This will also traverse the arguments.
+    // inferArgumentsSlotTypes expects the CALL or NEW node.
+    if (ct != null && ct.isConstructor()) {
+       scope = inferArgumentsSlotTypes(scope, n, ct);
+    } else {
+       // If constructor type is unknown or not a function,
+       // still traverse arguments, but without specific inference.
        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
           scope = traverse(arg, scope);
        }
+    }
+
     return scope;
   }
\ No newline at end of file
