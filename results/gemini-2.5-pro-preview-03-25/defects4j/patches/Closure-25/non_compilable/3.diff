diff --git a/tmp/ba0c7b8e-68ee-4627-9650-dd8b6627eec6_buggy.java b/tmp/b361e619-1227-4b65-95c8-80831c22f911_fixed.java
index b98f0a7..93b35f6 100644
--- a/tmp/ba0c7b8e-68ee-4627-9650-dd8b6627eec6_buggy.java
+++ b/tmp/b361e619-1227-4b65-95c8-80831c22f911_fixed.java
@@ -1,29 +1,47 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
+    scope = traverse(constructor, scope); // Traverse the constructor expression first.
+
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    JSType type = null; // This will be the type of the object created by 'new'.
+    FunctionType ct = null; // This will be the function type of the constructor.
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
+        // We can't do inference if the constructor type is unknown.
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+          // Handle NoObjectType, which is technically a FunctionType
+          // for the purpose of constructing objects.
           ct = (FunctionType) constructorType;
         }
+
         if (ct != null && ct.isConstructor()) {
+          // If we found a valid constructor type:
+          // 1. Infer types for the arguments passed to the constructor.
+          inferArgumentsSlotTypes(n, ct);
+          // 2. Determine the type of the object that will be created.
           type = ct.getInstanceType();
         }
+        // If ct is null or not a constructor, type remains null for now.
       }
     }
-    n.setJSType(type);
+
+    // Now traverse the arguments. If inferArgumentsSlotTypes ran, it might have
+    // updated the types of argument nodes, influencing this traversal.
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
+
+    // Set the JSType for the NEW node itself.
+    // If 'type' is still null (e.g., constructorType was null, or ct wasn't a
+    // constructor), the NEW node's type will be set to null, matching
+    // the original code's behavior in those cases.
+    // If the constructor type was Unknown, we set it to Unknown above.
+    n.setJSType(type);
+
     return scope;
   }
\ No newline at end of file
