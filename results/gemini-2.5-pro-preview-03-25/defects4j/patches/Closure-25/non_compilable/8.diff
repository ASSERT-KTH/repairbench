diff --git a/tmp/6d781e45-c0b0-44bc-bca1-004ea5d6e2b1_buggy.java b/tmp/4a3952f4-693b-4f39-af7b-af703ea86ca8_fixed.java
index b98f0a7..39d65ce 100644
--- a/tmp/6d781e45-c0b0-44bc-bca1-004ea5d6e2b1_buggy.java
+++ b/tmp/4a3952f4-693b-4f39-af7b-af703ea86ca8_fixed.java
@@ -1,29 +1,68 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
+    // Traverse the constructor expression itself
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    JSType type = null; // Type of the object created by 'new'
+    FunctionType ct = null; // The constructor function type
+
+    // Determine the constructor FunctionType (ct) and the instance type (type)
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        // Try to get the FunctionType
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+          // Handle cases like NoObjectType which implement FunctionType
+          // but are not returned by toMaybeFunctionType()
           ct = (FunctionType) constructorType;
         }
+        // Check if it's actually a constructor and get the instance type
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
+
+    // Set the JSType for the 'new' expression node itself.
+    // If type is null (constructor wasn't found or wasn't a constructor),
+    // this node might get assigned UNKNOWN_TYPE or inferred later.
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // --- Process Arguments ---
+    Node arg = constructor.getNext();
+    Iterator<Node> paramIt = null;
+    if (ct != null) {
+      // Get an iterator for the constructor's formal parameters
+      paramIt = ct.getParameters().iterator();
+    }
+
+    // Iterate through arguments passed to the constructor
+    while (arg != null) {
+      // Traverse the argument expression to determine its type and update scope
       scope = traverse(arg, scope);
+
+      // Get the corresponding formal parameter type, if available
+      JSType paramType = null;
+      if (paramIt != null && paramIt.hasNext()) {
+        Node param = paramIt.next();
+        paramType = param.getJSType();
       }
+
+      // Perform backward type inference if a parameter type exists.
+      // This updates the scope based on the argument potentially needing
+      // to conform to the parameter type constraint.
+      if (paramType != null) {
+         scope = inferPropertyTypesToMatchConstraint(scope, arg, paramType);
+      }
+
+      // Move to the next argument
+      arg = arg.getNext();
+    }
+
+    // Return the potentially updated scope
     return scope;
   }
\ No newline at end of file
