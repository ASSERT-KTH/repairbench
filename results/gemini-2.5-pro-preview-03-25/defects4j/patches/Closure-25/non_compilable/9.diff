diff --git a/tmp/e0803429-4f23-4684-8648-84ae88c689cd_buggy.java b/tmp/4124a8bf-45e4-4c9b-9321-2a380d18f566_fixed.java
index b98f0a7..b57a579 100644
--- a/tmp/e0803429-4f23-4684-8648-84ae88c689cd_buggy.java
+++ b/tmp/4124a8bf-45e4-4c9b-9321-2a380d18f566_fixed.java
@@ -1,29 +1,101 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
+    scope = traverse(constructor, scope); // Traverse the constructor expression first
+
+    // Resolve the constructor type and the instance type it creates
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    JSType instanceType = null; // The type of the object created by 'new'
+    FunctionType fnType = null; // The FunctionType of the constructor
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
+        // If constructor type is unknown, the instance type is unknown
+        instanceType = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
+        // Try to resolve to a FunctionType
+        fnType = constructorType.toMaybeFunctionType();
+        if (fnType == null && constructorType instanceof FunctionType) {
+          // Handle cases like NoObjectType which implement FunctionType but
+          // aren't FunctionType instances recognized by toMaybeFunctionType.
+          fnType = (FunctionType) constructorType;
         }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+
+        // If we resolved a FunctionType and it's a constructor, get the instance type
+        if (fnType != null && fnType.isConstructor()) {
+          instanceType = fnType.getInstanceType();
+          // TODO(nicksantos): Should we consider the possibility that the
+          // user is calling a non-constructor function with 'new'?
+          // We don't have a good way to model that right now.
         }
+        // Note: If fnType is null or not a constructor, instanceType remains null for now.
       }
     }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // If we couldn't determine the instance type (e.g., bad constructor type),
+    // default to UNKNOWN_TYPE.
+    if (instanceType == null) {
+        instanceType = getNativeType(UNKNOWN_TYPE);
+    }
+    // Set the JSType for the NEW node itself
+    n.setJSType(instanceType);
+
+    // Now process the arguments passed to the constructor.
+    // We need to perform backward inference from parameter types to argument types.
+    Node arg = constructor.getNext();
+    Node param = null;
+    boolean isVarArgs = false; // To handle varargs parameters correctly
+
+    // Get the first parameter node if the function type is known
+    if (fnType != null && fnType.isConstructor()) {
+        Node paramsNode = fnType.getParametersNode();
+        if (paramsNode != null) {
+            param = paramsNode.getFirstChild();
+            // Check if the first parameter itself is varargs
+            if (param != null && param.isVarArgs()) {
+                 isVarArgs = true;
+            }
+        }
+    }
+
+    // Iterate through the arguments
+    while (arg != null) {
+        JSType paramType = null;
+        if (param != null) {
+            // Get the type of the current parameter
+            paramType = param.getJSType();
+        }
+
+        // Perform backward type inference using the parameter's type.
+        // This updates the types of variables passed as arguments based on
+        // the expected parameter type. This needs to happen *before*
+        // traversing the argument node itself.
+        if (paramType != null) {
+             // Use the helper function designed for argument type inference,
+             // which handles slot inference correctly.
+             scope = inferArgumentTypeOfFunction(scope, arg, paramType);
+        }
+
+        // After inference, traverse the argument expression itself.
+        // This processes the argument node and its children, using the
+        // potentially updated scope.
         scope = traverse(arg, scope);
+
+        // Move to the next argument node
+        arg = arg.getNext();
+
+        // Move to the next parameter node, unless the current parameter is varargs.
+        // If it's varargs, all subsequent arguments match this parameter.
+        if (param != null && !isVarArgs) {
+            param = param.getNext();
+            // Check if the new parameter is varargs
+            if (param != null && param.isVarArgs()) {
+                isVarArgs = true;
             }
+        }
+    }
+
+    // Return the final scope after processing the 'new' expression and its arguments
     return scope;
   }
\ No newline at end of file
