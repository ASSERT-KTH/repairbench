diff --git a/tmp/f0eb8996-034c-422d-89b5-f55b4b31282d_buggy.java b/tmp/df434ba8-dafa-4016-ab58-e9423892ee15_fixed.java
index b98f0a7..a071299 100644
--- a/tmp/f0eb8996-034c-422d-89b5-f55b4b31282d_buggy.java
+++ b/tmp/df434ba8-dafa-4016-ab58-e9423892ee15_fixed.java
@@ -1,29 +1,73 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
+    scope = traverse(constructor, scope); // Infer constructor type
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    JSType type = null; // Type of the 'new' expression result
+    FunctionType ct = null; // Constructor function type
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        // Try to get the FunctionType
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
+          // Handle NoObjectType case
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
+        // If it's a valid constructor, determine the instance type
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
+        // Note: If ct is null or not a constructor, 'type' remains null here.
       }
     }
+
+    // Set the JSType for the 'new' expression Node 'n'.
+    // If 'type' is null (e.g., because the constructor wasn't a valid FunctionType
+    // or wasn't a constructor), this might eventually resolve to Unknown or Object
+    // depending on later stages or default assumptions. Keeping it null aligns
+    // with the original code's implicit behavior at this stage.
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // Argument and Parameter Processing for Backward Inference
+    Node parameters = null;
+    // Ensure we only attempt argument inference if we have a valid constructor FunctionType
+    if (ct != null && ct.isConstructor()) {
+        parameters = ct.getParametersNode();
+    }
+
+    Node param = (parameters == null) ? null : parameters.getFirstChild();
+    Node arg = constructor.getNext();
+
+    while (arg != null) {
+      // Traverse the argument first to determine its type and update scope (forward pass)
       scope = traverse(arg, scope);
+
+      // Perform backward inference if parameter information is available
+      if (param != null) {
+        JSType paramType = param.getJSType();
+        if (paramType != null) {
+          // Use inferPropertyTypesOnArgument to apply the parameter type information
+          // back onto the argument, enabling backward inference. This function
+          // is designed to handle cases like inferring properties on object literals
+          // or updating variable types based on the expected parameter type.
+          scope = inferPropertyTypesOnArgument(arg, paramType, scope);
         }
+        param = param.getNext();
+      }
+      // If there are more arguments than parameters, or if ct was not a valid constructor,
+      // arguments are still traversed by the loop, but without backward inference.
+      arg = arg.getNext();
+    }
+
+    // Handle remaining parameters (e.g., for optional args or varargs) if necessary -
+    // current logic iterates through arguments provided.
+
     return scope;
   }
\ No newline at end of file
