diff --git a/tmp/faaa7976-b3b9-4496-a4f3-727978b00d00_buggy.java b/tmp/0d2472e6-2c83-43b5-9535-a63b396b5062_fixed.java
index b98f0a7..c8d1f7d 100644
--- a/tmp/faaa7976-b3b9-4496-a4f3-727978b00d00_buggy.java
+++ b/tmp/0d2472e6-2c83-43b5-9535-a63b396b5062_fixed.java
@@ -1,29 +1,71 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
+    scope = traverse(constructor, scope); // Traverse the constructor expression
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    JSType instanceType = null; // Type of the object produced by 'new'
+    FunctionType ct = null; // The constructor's function type
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
+        instanceType = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
+        // Handle NoObjectType which behaves like a constructor but toMaybeFunctionType returns null
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
+
+        // If it's a valid constructor, get its instance type
         if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+          instanceType = ct.getInstanceType();
         }
+        // If ct is null or not a constructor, instanceType remains null.
+        // This case might warrant an error or a default type like Object,
+        // but null seems consistent with the existing structure.
       }
     }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // Set the type of the 'new' node itself
+    n.setJSType(instanceType);
+
+    // Traverse arguments, applying backwards inference if possible
+    Node arg = constructor.getNext();
+    // Only perform backwards inference if we identified a constructor FunctionType
+    if (ct != null && ct.isConstructor()) {
+      Node param = ct.getParametersNode().getFirstChild();
+      while (arg != null) {
+        // Traverse the argument node first to determine its type in the current scope
+        scope = traverse(arg, scope);
+
+        // Get the corresponding parameter type for inference, if available
+        JSType paramType = null;
+        if (param != null) {
+          paramType = param.getJSType(); // Get the declared type from the parameter node
+          param = param.getNext(); // Advance parameter iterator for the next argument
+        }
+        // TODO(user): Add proper handling for varargs parameters.
+
+        // Apply backwards inference using the parameter type constraint on the argument
+        if (paramType != null) {
+          // This method should encapsulate the logic for updating the scope based
+          // on the argument passed and the expected parameter type.
+          scope = backwardsInferenceFromCallSite(arg, paramType, scope);
+        }
+
+        arg = arg.getNext(); // Advance argument iterator
+      }
+    } else {
+      // If we don't have a valid constructor FunctionType,
+      // just traverse arguments without applying backwards inference.
+      while (arg != null) {
         scope = traverse(arg, scope);
+        arg = arg.getNext();
+      }
     }
-    return scope;
+    return scope; // Return the possibly updated scope
   }
\ No newline at end of file
