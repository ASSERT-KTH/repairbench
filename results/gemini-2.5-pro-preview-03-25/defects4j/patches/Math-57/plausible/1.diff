diff --git a/tmp/9040d9a5-03bb-4780-bbcf-fabb519203ab_buggy.java b/tmp/9b33e7d6-7cd2-4db5-af35-0fb2f898f688_fixed.java
index ad4b0d8..379e051 100644
--- a/tmp/9040d9a5-03bb-4780-bbcf-fabb519203ab_buggy.java
+++ b/tmp/9b33e7d6-7cd2-4db5-af35-0fb2f898f688_fixed.java
@@ -1,47 +1,86 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
+        // Convert to list for indexed access. Make it mutable.
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
+        // Loop to choose the remaining k-1 centers
         while (resultSet.size() < k) {
+            // Handle case where no points are left (e.g., k > points.size())
+            // This should not happen if k <= points.size() is enforced elsewhere.
+            if (pointSet.isEmpty()) {
+                 break;
+            }
+
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            // Allocate dx2 array here, based on current pointSet size, as it changes each iteration.
+            final double[] dx2 = new double[pointSet.size()];
+            double sum = 0.0; // FIX: Use double for sum to avoid potential truncation/overflow.
+
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
+                // Find the nearest cluster center (getNearestCluster is assumed to be available and correct)
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
+                // Compute square distance
                 final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+                final double dSquared = d * d;
+                sum += dSquared;
+                dx2[i] = sum; // Store cumulative sum of squared distances
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+            // probability proportional to D(x)^2. Sample using cumulative distribution.
             final double r = random.nextDouble() * sum;
+
+            // Find the point index corresponding to the sampled value r
+            // The pointSet index i is selected if r falls into the interval associated with i,
+            // which is [dx2[i-1], dx2[i]) (with dx2[-1]=0).
+            // This is equivalent to finding the first i where dx2[i] >= r.
             for (int i = 0 ; i < dx2.length; i++) {
+                // If the cumulative sum up to this point is >= the random value, choose this point.
                 if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
-                    break;
+                    final T p = pointSet.remove(i); // Remove the chosen point from the candidate set
+                    resultSet.add(new Cluster<T>(p)); // Add it as a new center
+                    break; // Exit the inner loop once a center is chosen
                 }
             }
+            // Note: If sum == 0 (all remaining points have zero distance to the nearest center),
+            // r will be 0. The loop condition dx2[i] >= r becomes 0 >= 0, which is true for i=0.
+            // So, if sum=0, the point at index 0 is chosen. This is a valid choice in this edge case.
         }
 
         return resultSet;
 
     }
+
+    // Helper method assumed available (e.g., static in the same class or a utility class)
+    // Not included in the fix block as per instructions.
+    /*
+    private static <T extends Clusterable<T>> Cluster<T> getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {
+        double minDistance = Double.POSITIVE_INFINITY;
+        Cluster<T> nearest = null;
+        for (final Cluster<T> c : clusters) {
+            final double distance = point.distanceFrom(c.getCenter());
+            if (distance < minDistance) {
+                minDistance = distance;
+                nearest = c;
+            }
+        }
+        return nearest;
+    }
+    */
\ No newline at end of file
