diff --git a/tmp/81beef1d-f5e5-418f-9861-8e1e56813bd3_buggy.java b/tmp/88bebfc6-fc6f-463b-b3a1-6288a2ae4fb5_fixed.java
index ad4b0d8..5d25531 100644
--- a/tmp/81beef1d-f5e5-418f-9861-8e1e56813bd3_buggy.java
+++ b/tmp/88bebfc6-fc6f-463b-b3a1-6288a2ae4fb5_fixed.java
@@ -1,47 +1,81 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
+        // dx2 will store the cumulative distances squared D(x)^2
         final double[] dx2 = new double[pointSet.size()];
+
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            // Store the cumulative sum of squared distances in dx2
+            double sum = 0.0; // Use double for sum to avoid precision loss
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
                 sum += d * d;
                 dx2[i] = sum;
             }
 
             // Add one new data point as a center. Each point x is chosen with
             // probability proportional to D(x)2
             final double r = random.nextDouble() * sum;
+
+            // Find the first point index 'i' for which the cumulative sum of squared
+            // distances is greater than or equal to the random number 'r'. This
+            // ensures points with larger D(x)^2 have a higher probability of being chosen.
             for (int i = 0 ; i < dx2.length; i++) {
                 if (dx2[i] >= r) {
                     final T p = pointSet.remove(i);
                     resultSet.add(new Cluster<T>(p));
-                    break;
+                    // Need to recalculate dx2 for the reduced pointSet on the next iteration
+                    // Note: The current dx2 array length matches the old pointSet size.
+                    // We remove element 'i', so elements from 'i+1' onwards shift.
+                    // The dx2 array needs to be rebuilt based on the *new* pointSet size
+                    // in the next iteration of the outer 'while' loop. The current
+                    // implementation implicitly does this by recomputing dx2 from scratch.
+                    // However, we need to adjust dx2's size if we were to reuse it.
+                    // Since pointSet is modified, we break and let the next while loop iteration
+                    // handle the recalculation with the updated pointSet and dx2 size.
+                    // We also need to update the size of dx2 for the next iteration.
+                    // Re-creating dx2 inside the loop (or resizing) is necessary.
+                    // The original code already implicitly handles this by having dx2 declared
+                    // outside but sized based on pointSet.size() *at the start* of the iteration.
+                    // However, if pointSet becomes empty, dx2.length could be 0.
+                    // The loop structure ensures this won't be an issue as long as k <= points.size().
+                    // Let's resize dx2 array for the next iteration if needed. Although since
+                    // we recompute dx2 fully, just breaking here is sufficient.
+                    // The allocation 'new double[pointSet.size()]' inside the loop would be safer,
+                    // but the original code allocates it outside. Let's stick to the minimal change.
+                    break; // Center found, break inner loop
                 }
             }
+            // If sum == 0.0 (all remaining points are duplicates of centers),
+            // the loop 'if (dx2[i] >= r)' with r=0 will select the first point (i=0).
+            // This is acceptable behavior.
+
+            // Re-adjust size of dx2 array if pointSet changed size (it did)
+            // The original code didn't explicitly resize, it relied on the next loop iteration using
+            // the new pointSet.size(). This is slightly inefficient if dx2 is large and shrinks,
+            // but correct. Let's keep the original structure. The fix is only changing 'int sum'.
         }
 
         return resultSet;
 
     }
\ No newline at end of file
