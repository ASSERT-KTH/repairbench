diff --git a/tmp/3296efc0-a9b3-4f7a-9e5d-7249225c63c4_buggy.java b/tmp/2228f39d-eee7-4cac-bdc5-c0bd3d87787f_fixed.java
index ad4b0d8..d671cac 100644
--- a/tmp/3296efc0-a9b3-4f7a-9e5d-7249225c63c4_buggy.java
+++ b/tmp/2228f39d-eee7-4cac-bdc5-c0bd3d87787f_fixed.java
@@ -1,47 +1,103 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
+        // Convert to list for indexed access. Make a copy, so the caller's list is not modified.
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
+        // Handle empty input collection.
+        if (pointSet.isEmpty()) {
+            return resultSet;
+        }
+
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
+        // Keep track of the squared distances D(x)^2.
+        // dx2 array will store cumulative sums of squared distances.
+
         while (resultSet.size() < k) {
+            // If pointSet becomes empty (e.g., k > initial number of points), we cannot choose more centers.
+            if (pointSet.isEmpty()) {
+                 break;
+            }
+
+            // Create the array for storing the cumulative sums of squared distances.
+            // Must be created inside the loop because pointSet size changes.
+            final double[] dx2 = new double[pointSet.size()];
+
+            // Store the sum of squared distances, required for weights. Use double.
+            double sum = 0.0;
+
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+                final double d2 = d * d; // Calculate squared distance
+                sum += d2;               // Add to sum
+                dx2[i] = sum;            // Store cumulative sum
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+            // probability proportional to D(x)^2
+
+            // Choose a random value proportional to the total sum of squared distances.
             final double r = random.nextDouble() * sum;
+
+            // Find the index of the point to choose, using the cumulative sums.
+            int nextPointIndex = -1;
+            // Loop over the cumulative sums array (which has the current pointSet size).
             for (int i = 0; i < dx2.length; i++) {
+                // Select the first point whose cumulative interval includes 'r'.
+                // This handles the boundary case r=0 correctly by selecting index 0
+                // if dx2[0] is 0 (meaning the first point has 0 distance).
                 if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
+                    nextPointIndex = i;
+                    break;
+                }
+            }
+
+            // If sum=0, all points are duplicates of existing centers.
+            // The loop above will select index 0 because r=0 and dx2[0]=0.
+            // If sum > 0, the loop is guaranteed to find an index because r < sum = dx2[last].
+
+            // Handle the theoretical case where pointSet is non-empty but index is not found
+            // (e.g., due to extreme floating-point issues where r might be ~= sum).
+            // If nextPointIndex is still -1, it means r >= dx2[last] (where dx2[last] == sum).
+            // This should not happen with random.nextDouble() being < 1.0, but as a fallback,
+            // we can assign the last point.
+            if (nextPointIndex == -1) {
+                 // This implies pointSet was empty, but we checked for that.
+                 // Or potential floating point issue (r >= sum). Select last point.
+                 if (!pointSet.isEmpty()) {
+                     nextPointIndex = dx2.length - 1;
+                 } else {
+                     // Should not be reachable. Break loop if it occurs.
+                     break;
+                 }
+            }
+
+            // Retrieve the chosen point and remove it from the available points.
+            // The index must be valid for the current pointSet size.
+            final T p = pointSet.remove(nextPointIndex);
+
+            // Add the chosen point as a cluster center.
             resultSet.add(new Cluster<T>(p));
-                    break;
-                }
-            }
-        }
+
+        } // end while
 
         return resultSet;
 
     }
\ No newline at end of file
