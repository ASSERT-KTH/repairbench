diff --git a/tmp/15a8a7fb-4999-488d-b620-9f987ff3f4cb_buggy.java b/tmp/c066d451-1415-4f38-94ee-24c1c44995dc_fixed.java
index ad4b0d8..bc1ee28 100644
--- a/tmp/15a8a7fb-4999-488d-b620-9f987ff3f4cb_buggy.java
+++ b/tmp/c066d451-1415-4f38-94ee-24c1c44995dc_fixed.java
@@ -1,47 +1,143 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
-        final List<T> pointSet = new ArrayList<T>(points);
+        // Convert to list for indexed access. Make a copy as input should not be modified.
+        final List<T> pointList = new ArrayList<T>(points);
+        final int numPoints = pointList.size();
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
-        // Choose one center uniformly at random from among the data points.
-        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
+        // Handle edge cases: k=0, empty points list, or k > number of points
+        if (k <= 0 || numPoints == 0) {
+            return resultSet;
+        }
+        // If k is larger than the number of points, return all points as centers
+        if (k >= numPoints) {
+            for (final T p : pointList) {
+                resultSet.add(new Cluster<T>(p));
+            }
+            return resultSet;
+        }
+
+
+        // Choose the first center uniformly at random.
+        final int firstPointIndex = random.nextInt(numPoints);
+        final T firstPoint = pointList.get(firstPointIndex);
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
+        // Keep track of points already selected.
+        final boolean[] selected = new boolean[numPoints];
+        selected[firstPointIndex] = true;
+
+        // Cache the squared distance to the nearest center for each point.
+        final double[] minDistSquared = new double[numPoints];
+
+        // Initialize with distance squared to the first center.
+        for (int i = 0; i < numPoints; i++) {
+            if (i != firstPointIndex) {
+                final double d = firstPoint.distanceFrom(pointList.get(i));
+                minDistSquared[i] = d * d;
+            } else {
+                minDistSquared[i] = 0.0; // Distance to self is 0
+            }
+        }
+
+
         while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
-            for (int i = 0; i < pointSet.size(); i++) {
-                final T p = pointSet.get(i);
-                final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+            // Sum the minimum distances squared for sampling for non-selected points
+            double distSqSum = 0.0;
+            for (int i = 0; i < numPoints; i++) {
+                if (!selected[i]) {
+                    distSqSum += minDistSquared[i];
+                }
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
+            // probability proportional to D(x)^2.
+
+            final T nextCenter;
+            final int nextCenterIndex; // Keep track of the index as well
+
+            if (distSqSum == 0) {
+                // This happens when all remaining points are identical to centers already chosen.
+                // Choose the first available point, breaking ties deterministically.
+                // Kmeans++ paper suggests choosing randomly in this case. Let's stick to first available.
+                int foundIndex = -1;
+                for (int i = 0; i < numPoints; i++) {
+                    if (!selected[i]) {
+                        foundIndex = i;
                         break;
                     }
                 }
+                // If no unselected point is found (should not happen based on loop condition), break.
+                if (foundIndex == -1) {
+                    break;
+                }
+                nextCenterIndex = foundIndex;
+                nextCenter = pointList.get(nextCenterIndex);
+
+            } else {
+                // Standard K-means++ sampling: choose point proportional to minDistSquared
+                final double r = random.nextDouble() * distSqSum;
+                double cumulativeSum = 0.0;
+                int foundIndex = -1;
+                for (int i = 0; i < numPoints; i++) {
+                    if (!selected[i]) {
+                        cumulativeSum += minDistSquared[i];
+                        // The check should be >= for correctness, covering r=0 and potential floating point issues
+                        if (cumulativeSum >= r) {
+                            foundIndex = i;
+                            break;
+                        }
+                    }
+                }
+
+                // Handle edge case where cumulativeSum might not exactly reach distSqSum due to floating point errors,
+                // or r is exactly distSqSum. Pick the last considered non-selected point.
+                if (foundIndex == -1) {
+                   for (int i = numPoints - 1; i >= 0; i--) {
+                       if (!selected[i]) {
+                           foundIndex = i;
+                           break;
+                       }
+                   }
+                }
+
+                // If still not found, something is wrong, break.
+                if (foundIndex == -1) {
+                   break;
+                }
+                nextCenterIndex = foundIndex;
+                nextCenter = pointList.get(nextCenterIndex);
+            }
+
+            // Add the chosen point to the centers.
+            resultSet.add(new Cluster<T>(nextCenter));
+            selected[nextCenterIndex] = true;
+
+            // Optimization: Update minDistSquared comparing only against the newly added center.
+            // This is valid because min(d(p, C union {c_new})^2) = min( min(d(p, C)^2), d(p, c_new)^2 ).
+            if (resultSet.size() < k) { // No need to update if it's the last center
+                for (int i = 0; i < numPoints; i++) {
+                    if (!selected[i]) {
+                        final double d = nextCenter.distanceFrom(pointList.get(i));
+                        final double dSquared = d * d;
+                        // Check for potential underflow/NaN before comparison
+                        if (dSquared < minDistSquared[i]) {
+                            minDistSquared[i] = dSquared;
+                        }
+                    }
+                }
+            }
         }
 
         return resultSet;
-
     }
\ No newline at end of file
