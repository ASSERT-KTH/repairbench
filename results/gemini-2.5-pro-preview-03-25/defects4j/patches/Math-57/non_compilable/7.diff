diff --git a/tmp/a6b4de3d-dd01-45e5-9a0a-7b246f033114_buggy.java b/tmp/7d78198d-2c75-4d21-95de-bac40a5788d4_fixed.java
index ad4b0d8..1661266 100644
--- a/tmp/a6b4de3d-dd01-45e5-9a0a-7b246f033114_buggy.java
+++ b/tmp/7d78198d-2c75-4d21-95de-bac40a5788d4_fixed.java
@@ -1,47 +1,170 @@
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Random;
+
+// The following definitions are assumed to be available from the context
+// where the fixed function will be used. They are provided here for
+// completeness of the standalone example.
+interface Clusterable<T> {
+    double distanceFrom(T p);
+}
+
+class Cluster<T extends Clusterable<T>> {
+    private T center;
+    public Cluster(T center) { this.center = center; }
+    public T getCenter() { return center; }
+}
+
+
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
-        final List<T> pointSet = new ArrayList<T>(points);
-        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
+        // Convert to list for indexed access. Make a copy, because the list is modified by Clusterer.
+        // Note: The fixed version below does not modify the list, but a copy protects against
+        // modification of the input collection if it's mutable and used elsewhere.
+        final List<T> pointList = new ArrayList<T>(points);
+        final int numPoints = pointList.size();
 
-        // Choose one center uniformly at random from among the data points.
-        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
+        // Corner case: If k is 0 or there are no points, return empty list.
+        if (k == 0 || numPoints == 0) {
+            return new ArrayList<Cluster<T>>();
+        }
+
+        // Corner case: If k is greater than or equal to the number of points, return all points.
+        if (k >= numPoints) {
+           final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(numPoints);
+           for(final T p : pointList) {
+               resultSet.add(new Cluster<T>(p));
+           }
+           return resultSet;
+        }
+
+        // Stores the initial centers chosen.
+        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(k);
+
+        // Keep track of points selected as centers.
+        final boolean[] selected = new boolean[numPoints];
+
+        // 1. Choose one center uniformly at random from among the data points.
+        final int firstPointIndex = random.nextInt(numPoints);
+        final T firstPoint = pointList.get(firstPointIndex);
         resultSet.add(new Cluster<T>(firstPoint));
+        selected[firstPointIndex] = true;
+        int numSelected = 1;
 
-        final double[] dx2 = new double[pointSet.size()];
-        while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
+        // Keep track of the squared distance from the nearest center for each point.
+        // Initialize using the first chosen center.
+        final double[] minDistSquared = new double[numPoints];
+        for (int i = 0; i < numPoints; i++) {
+            if (i != firstPointIndex) { // Skip the selected point (distance is 0)
+                final double d = firstPoint.distanceFrom(pointList.get(i));
+                minDistSquared[i] = d * d;
+            }
+            // minDistSquared[firstPointIndex] is implicitly 0.0
+        }
+
+        while (numSelected < k) {
+            // 2a. For each point x not chosen yet, compute D(x)^2, the squared distance to
             // the nearest center that has already been chosen.
-            int sum = 0;
-            for (int i = 0; i < pointSet.size(); i++) {
-                final T p = pointSet.get(i);
-                final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
-            }
-
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
+            // Note: minDistSquared already holds the D(x)^2 value.
+
+            // Calculate the sum of minimum squared distances for points not yet selected.
+            double distSqSum = 0.0;
+            for (int i = 0; i < numPoints; i++) {
+                if (!selected[i]) {
+                    distSqSum += minDistSquared[i];
+                }
+            }
+
+            // 2b. Add one new data point as a center. Each point x is chosen with
+            // probability proportional to D(x)^2.
+            int nextCenterIndex = -1;
+
+            // Handle case where sum is zero (e.g., all remaining points coincide with centers)
+            // Use <= 0 to handle potential floating point inaccuracies.
+            if (distSqSum <= 0) {
+                 // Arbitrarily choose the first available point from the list.
+                 for (int i = 0; i < numPoints; ++i) {
+                     if (!selected[i]) {
+                         nextCenterIndex = i;
+                         break;
+                     }
+                 }
+                 // If no point found (should not happen as numSelected < k <= numPoints), break.
+                 if (nextCenterIndex == -1) {
+                     break; // Should not be reached in practice if k < numPoints
+                 }
+            } else {
+                // Perform weighted sampling based on minDistSquared using the standard method.
+                // Generate r uniformly in [0, distSqSum).
+                double r = random.nextDouble() * distSqSum;
+
+                // Iterate through points, subtracting weights until r is non-positive.
+                 for (int i = 0; i < numPoints; i++) {
+                     if (!selected[i]) {
+                        double weight = minDistSquared[i];
+                        r -= weight; // Subtract the point's weight (contribution to the sum)
+                        // Check if the budget r is exceeded. Use <= 0 for robustness against
+                        // floating point issues and the r=0 case with leading zero weights.
+                        if (r <= 0) {
+                            nextCenterIndex = i;
+                            break;
+                        }
+                     }
+                 }
+
+                 // Fallback: If loop finishes without selecting an index (due to precision issues
+                 // where r remains slightly positive), pick the last available point evaluated.
+                 // This ensures a point is always selected if distSqSum > 0.
+                 if (nextCenterIndex == -1) {
+                      for (int i = numPoints - 1; i >= 0; i--) {
+                          if (!selected[i]) {
+                              nextCenterIndex = i; // Found the last non-selected point
                               break;
                           }
                       }
+                      // If still -1 (all points selected?), loop will break below.
                  }
+            }
+
+            // If no center index found (e.g., all points selected, though k < numPoints check should prevent this), break.
+            if (nextCenterIndex == -1) {
+                 break;
+            }
+
+            // Add the chosen point to the result set.
+            final T nextCenter = pointList.get(nextCenterIndex);
+            resultSet.add(new Cluster<T>(nextCenter));
+            selected[nextCenterIndex] = true;
+            numSelected++;
+
+            // 3. Update minDistSquared for all non-selected points:
+            // Check if the newly chosen center is closer than any previously chosen center.
+            // This optimization avoids recalculating all distances from scratch.
+            if (numSelected < k) { // No need to update after the last center is chosen
+                for (int i = 0; i < numPoints; i++) {
+                    if (!selected[i]) {
+                        final double d = nextCenter.distanceFrom(pointList.get(i));
+                        final double d2 = d * d;
+                        // Update if the new center provides a shorter distance
+                        if (d2 < minDistSquared[i]) {
+                            minDistSquared[i] = d2;
+                        }
+                    }
+                }
+            }
+
+        } // End while loop (repeats steps 2a, 2b, 3)
 
         return resultSet;
-
     }
\ No newline at end of file
