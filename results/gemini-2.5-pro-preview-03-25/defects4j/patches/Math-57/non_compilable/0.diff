diff --git a/tmp/841aa0d3-15b7-4192-9a08-46bd493a480a_buggy.java b/tmp/363695b3-5183-4cab-92d9-5e5d7286c260_fixed.java
index ad4b0d8..87daa24 100644
--- a/tmp/841aa0d3-15b7-4192-9a08-46bd493a480a_buggy.java
+++ b/tmp/363695b3-5183-4cab-92d9-5e5d7286c260_fixed.java
@@ -1,47 +1,169 @@
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Random;
+// Added missing imports/assuming these interfaces/classes exist
+// import org.apache.commons.math.stat.clustering.Clusterable;
+// import org.apache.commons.math.stat.clustering.Cluster;
+
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
+        // Convert to list for indexed access. Make a copy to avoid modifying the original collection.
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
+        // Check for empty input or k=0
+        if (points.isEmpty() || k <= 0) {
+            return resultSet;
+        }
+
         // Choose one center uniformly at random from among the data points.
-        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
+        final int firstPointIndex = random.nextInt(pointSet.size());
+        final T firstPoint = pointSet.remove(firstPointIndex);
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
+        // Array to store the squared distances D(x)^2 for the current iteration
+        double[] dx2 = null;
+
         while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
+            // If no points remain, cannot choose more centers. This might happen
+            // if k is larger than the number of unique points.
+            if (pointSet.isEmpty()) {
+                // Log.warn(String.format("Not enough unique points to choose %d centers.", k)); // If logger available
+                break;
+            }
+
+            // Initialize/resize dx2 for the current number of remaining points
+            dx2 = new double[pointSet.size()];
+
+            // For each data point x, compute D(x)^2, the squared distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            double sum = 0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
+                // Find the nearest cluster (and its center) already chosen
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
+                // This should not happen if resultSet is not empty (which it isn't after first point)
+                if (nearest == null) {
+                     throw new IllegalStateException("Internal error: nearest cluster should not be null during K-means++ initialization");
+                }
                 final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+                final double dSquared = d * d;
+                dx2[i] = dSquared; // Store the individual squared distance for point i
+                sum += dSquared;   // Add it to the total sum of squared distances
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+            // probability proportional to D(x)^2.
+
+            int nextCenterIndex;
+            // Handle the case where sum is zero (implies all remaining points are duplicates of existing centers)
+            if (sum == 0) {
+                 // All remaining points have distance 0 to the nearest center.
+                 // K-means++ doesn't strictly define this, but choosing the first point
+                 // is a reasonable strategy and consistent with the weighted selection when r=0.
+                 nextCenterIndex = 0; // Requires pointSet to be non-empty, checked above.
+            } else {
+                // Perform weighted selection:
+                // Draw a random number r in [0, sum)
                 final double r = random.nextDouble() * sum;
+                double cumulativeSum = 0.0;
+                nextCenterIndex = -1; // Initialize, should be overwritten in the loop
+
+                // Iterate through points, accumulating squared distances
                 for (int i = 0; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
+                    cumulativeSum += dx2[i];
+                    // If the cumulative sum reaches or exceeds the random threshold r, choose this point
+                    if (cumulativeSum >= r) {
+                        nextCenterIndex = i;
+                        break;
+                    }
+                }
+
+                // Edge case: Due to floating-point inaccuracies, cumulativeSum might end up
+                // slightly less than sum, and r might be very close to sum (or theoretically equal if random.nextDouble() returned 1.0, though unlikely).
+                // If the loop completes without finding an index (should be rare),
+                // it implies r was effectively >= sum, so we should select the last point.
+                if (nextCenterIndex == -1) {
+                    // Assign the last index. This covers the case where r is very close to sum.
+                    nextCenterIndex = dx2.length - 1;
+                }
+            }
+
+
+            // Ensure the chosen index is valid (it should be, given the logic and checks)
+            // and remove the point from the candidate set, adding it to the results.
+             if (nextCenterIndex >= 0 && nextCenterIndex < pointSet.size()) {
+                 final T p = pointSet.remove(nextCenterIndex);
                  resultSet.add(new Cluster<T>(p));
+             } else {
+                 // This state should theoretically not be reached if pointSet was not empty
+                 // and the logic above is sound. Break defensively.
+                 // Log.warn("Could not select next center index, breaking K-means++ loop."); // If logger available
                  break;
              }
         }
-        }
 
         return resultSet;
+    }
+
+    /**
+     * Helper method to find the nearest cluster. Assumed to exist in the original class or context.
+     *
+     * @param <T> type of the points to cluster
+     * @param clusters the existing clusters
+     * @param point the point to find the nearest cluster for
+     * @return the cluster with the nearest center
+     */
+     private static <T extends Clusterable<T>> Cluster<T> getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {
+         double minDistance = Double.POSITIVE_INFINITY;
+         Cluster<T> nearest = null;
+         for (final Cluster<T> cluster : clusters) {
+             final double distance = point.distanceFrom(cluster.getCenter());
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 nearest = cluster;
+             }
+         }
+         return nearest;
+     }
+
+     // --- Mock interfaces/classes needed for the code snippet to compile standalone ---
+     // These should be replaced by the actual definitions from Apache Commons Math
+     interface Clusterable<T> {
+         double distanceFrom(T p);
+         T centroidOf(Collection<T> p); // Example method, may vary
+         int[] getPoint(); // Specific to test case point type
+     }
+
+     static class Cluster<T extends Clusterable<T>> {
+         private T center;
+         private final List<T> points = new ArrayList<T>();
 
+         public Cluster(T center) {
+             this.center = center;
+         }
+
+         public T getCenter() {
+             return center;
+         }
+
+         public void addPoint(T point) {
+             points.add(point);
+         }
+
+         public List<T> getPoints() {
+             return points;
+         }
      }
+     // --- End Mock interfaces/classes ---
\ No newline at end of file
