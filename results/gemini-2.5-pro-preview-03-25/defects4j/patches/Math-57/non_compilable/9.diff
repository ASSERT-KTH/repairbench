diff --git a/tmp/58f2d879-8402-4eca-b14f-2ce26b5748a5_buggy.java b/tmp/b93e8505-0f44-458f-b0c4-a0d959fcadff_fixed.java
index ad4b0d8..b3de786 100644
--- a/tmp/58f2d879-8402-4eca-b14f-2ce26b5748a5_buggy.java
+++ b/tmp/b93e8505-0f44-458f-b0c4-a0d959fcadff_fixed.java
@@ -1,47 +1,86 @@
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Random;
+// Assuming Clusterable and Cluster classes exist as expected
+// Assuming a helper function getNearestCluster(resultSet, p) exists and works correctly elsewhere.
+
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
+        // Convert to list for indexed access. Make a copy, as the list is modified.
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
         while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
+            // This condition protects against the case where k > number of points
+            if (pointSet.isEmpty()) {
+                break;
+            }
+
+            // Array to store cumulative squared distances D(x)^2.
+            // FIX: Declare dx2 inside the loop to ensure correct size based on remaining points.
+            final double[] dx2 = new double[pointSet.size()];
+
+            // For each remaining data point x, compute D(x)^2, the squared distance
+            // between x and the nearest center that has already been chosen.
+            double sum = 0.0; // FIX: Use double for sum of squares.
+
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
+                // getNearestCluster is assumed to be defined elsewhere and correct
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+                final double d2 = d * d;
+                sum += d2;
+                dx2[i] = sum; // Store cumulative sum of squares.
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+            // probability proportional to D(x)^2.
+
+            // Choose a random value proportional to the total sum of squared distances.
+            // Handle the edge case where sum is zero (e.g., all remaining points coincide
+            // with centers already selected).
+            if (sum <= 0) {
+                 // Fallback: choose a random point from the remaining set.
+                 // This might happen if remaining points are duplicates of centers
+                 // and distance function returns exactly 0, or due to FP issues.
+                 final T p = pointSet.remove(random.nextInt(pointSet.size()));
+                 resultSet.add(new Cluster<T>(p));
+                 continue; // Move to the next iteration.
+            }
+
             final double r = random.nextDouble() * sum;
+
+            // Select the point corresponding to the random value r using the cumulative sums.
+            // Loop finds the first index i where cumulative sum dx2[i] >= r.
+            // FIX: The loop limit dx2.length is correct now because dx2 is declared inside the while loop.
             for (int i = 0; i < dx2.length; i++) {
                 if (dx2[i] >= r) {
                     final T p = pointSet.remove(i);
                     resultSet.add(new Cluster<T>(p));
-                    break;
+                    break; // Center found, exit selection loop.
                 }
             }
+            // Note: The loop should normally always find a point and break if sum > 0.
+            // No explicit handling for the loop finishing without break is added,
+            // assuming standard floating point behavior where dx2[dx2.length - 1] == sum
+            // and random.nextDouble() returns [0.0, 1.0).
         }
 
         return resultSet;
-
     }
\ No newline at end of file
