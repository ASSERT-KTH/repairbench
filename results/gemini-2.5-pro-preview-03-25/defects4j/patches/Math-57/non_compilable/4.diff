diff --git a/tmp/8c75f2fb-06f5-4b39-8e57-972108ca9e6a_buggy.java b/tmp/4f817038-8500-431d-91c1-425afa1ec3e9_fixed.java
index ad4b0d8..d27e240 100644
--- a/tmp/8c75f2fb-06f5-4b39-8e57-972108ca9e6a_buggy.java
+++ b/tmp/4f817038-8500-431d-91c1-425afa1ec3e9_fixed.java
@@ -1,47 +1,105 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
+        // dx2 will store the squared distance from the nearest center for each point
         final double[] dx2 = new double[pointSet.size()];
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            // Keep track of the sum of squared distances for the algorithm
+            double sum = 0.0; // Use double for sum to avoid truncation of small distances
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+                final double d2 = d * d;
+                sum += d2;
+                // Store the cumulative sum of squared distances for weighted selection
+                // dx2[i] = sum up to this point
+                dx2[i] = (i == 0) ? d2 : dx2[i - 1] + d2;
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+            // probability proportional to D(x)^2
+            // Draw a random value
             final double r = random.nextDouble() * sum;
+
+            // Find the index representing the point to choose based on the cumulative sums
             for (int i = 0 ; i < dx2.length; i++) {
+                // The first point which cumulative sum is >= r is chosen
                 if (dx2[i] >= r) {
                     final T p = pointSet.remove(i);
                     resultSet.add(new Cluster<T>(p));
-                    break;
+                    // Recompute dx2 for the next iteration, accounting for the removed point
+                    // Note: This involves shifting elements or recalculating,
+                    // but since the loop breaks, we only need to recalculate in the next outer loop iteration.
+                    // However, dx2 is declared outside the loop and reused. Its size needs to match pointSet.size().
+                    // Let's recalculate dx2 entirely in the next iteration by moving its declaration inside the while loop
+                    // or resizing it. The current implementation reuses dx2 but its size decreases.
+                    // A simpler fix is just breaking, as the next iteration recomputes dx2 from scratch based on the reduced pointSet.
+                    // The current code structure seems to intend recalculating dx2 fully each time.
+                    // Let's stick to the minimal change first which fixed the type of sum.
+                    // Re-evaluating the cumulative sum logic:
+                    // The original code: dx2[i] = sum; IS correct for cumulative sum calculation.
+                    // My previous reasoning about dx2[i] = dx2[i-1] + d2 was just an alternative way to express it.
+                    // The primary bug was int sum = 0;. Let's revert the dx2 assignment logic to the original.
+
+                    // Corrected original logic with double sum:
+                    // Re-evaluate calculation inside the first for loop with double sum:
+                    /*
+                    double sum = 0.0;
+                    for (int i = 0; i < pointSet.size(); i++) {
+                        final T p = pointSet.get(i);
+                        final Cluster<T> nearest = getNearestCluster(resultSet, p);
+                        final double d = p.distanceFrom(nearest.getCenter());
+                        sum += d * d; // Accumulate total sum correctly now
+                        dx2[i] = sum; // Store cumulative sum
                     }
+                    */
+                    // This cumulative sum calculation IS correct.
+                    // The selection logic using `dx2[i] >= r` is also correct for cumulative sums.
+                    // The issue was solely the `int sum`. Let's put the original loop logic back, just changing the sum type.
+                    break; // Center found, break inner loop
                 }
             }
+            // Re-allocate dx2 array for the next iteration with the reduced size
+             // This was missing, leading to potential ArrayIndexOutOfBoundsException if not for the break
+             // However, the code structure implies dx2 should be recalculated fully.
+             // Let's keep the minimal fix for now (sum type) as the index logic seems okay due to the break.
+             // The array size mismatch in subsequent iterations isn't hit because the selection loop breaks.
+             // But declaring dx2 inside the loop is cleaner. Let's stick to the minimal fix first.
+        }
 
         return resultSet;
 
     }
+
+    // Helper method assumed to exist (as it's used in the original code)
+    private static <T extends Clusterable<T>> Cluster<T> getNearestCluster(Collection<Cluster<T>> clusters, T point) {
+        double minDistance = Double.MAX_VALUE;
+        Cluster<T> nearest = null;
+        for (final Cluster<T> cluster : clusters) {
+            final double distance = point.distanceFrom(cluster.getCenter());
+            if (distance < minDistance) {
+                minDistance = distance;
+                nearest = cluster;
+            }
+        }
+        return nearest;
+    }
