diff --git a/tmp/b7d20b33-3922-4c0c-92f2-937cfd355113_buggy.java b/tmp/e20b9ea5-3f0c-4d06-a161-32970d9c802d_fixed.java
index ad4b0d8..f1555e3 100644
--- a/tmp/b7d20b33-3922-4c0c-92f2-937cfd355113_buggy.java
+++ b/tmp/e20b9ea5-3f0c-4d06-a161-32970d9c802d_fixed.java
@@ -1,47 +1,85 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
+        // Convert to list for easy index-based random selection and removal
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
+        // Array to store the minimum distance squared for each point
+        double[] dx2 = null;
+
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
-            for (int i = 0; i < pointSet.size(); i++) {
+
+            // Allocate or reallocate dx2 based on the current size of pointSet
+            int N = pointSet.size();
+            dx2 = new double[N]; // Stores cumulative sums of squared distances
+
+            double sum = 0.0; // Sum of minimum distances squared
+
+            for (int i = 0; i < N; i++) {
                 final T p = pointSet.get(i);
+                // Find the nearest center to point p
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+                final double d2 = d * d;
+                sum += d2; // Add squared distance to sum
+                dx2[i] = sum; // Store cumulative sum
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
+            // probability proportional to D(x)^2.
+            // Sample using the cumulative probability distribution dx2.
+            final double r = random.nextDouble() * sum; // Random number in [0, sum)
+
+            // Find the first point's cumulative distance squared greater than or equal to r
+            for (int i = 0 ; i < N; i++) { // Iterate up to current size (N)
                 if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
-                    break;
+                    final T p = pointSet.remove(i); // Remove chosen point from candidate list
+                    resultSet.add(new Cluster<T>(p)); // Add it as a new center
+                    // dx2 array is now invalid for the modified pointSet, will be recomputed in next iteration
+                    break; // Exit the inner loop once a center is chosen
                 }
             }
+            // If sum == 0.0 (all remaining points are duplicates of existing centers),
+            // r will be 0.0. The loop will select the first point (index 0),
+            // as dx2[0] will also be 0.0, and 0.0 >= 0.0 is true. This is acceptable.
         }
 
         return resultSet;
 
     }
+
+    /**
+     * Get the nearest {@link Cluster} to the given point.
+     * @param <T> type of the points to cluster
+     * @param clusters the {@link Cluster}s to search
+     * @param point the point to find the nearest cluster for
+     * @return the nearest {@link Cluster} to the point
+     */
+    private static <T extends Clusterable<T>> Cluster<T> getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {
+         double minDistance = Double.MAX_VALUE;
+         Cluster<T> nearest = null;
+         for (final Cluster<T> cluster : clusters) {
+             final double distance = point.distanceFrom(cluster.getCenter());
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 nearest = cluster;
+             }
+         }
+         return nearest;
+     }
\ No newline at end of file
