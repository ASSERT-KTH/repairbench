diff --git a/tmp/e47875b8-c002-440a-98a2-977e3b4383a2_buggy.java b/tmp/cd90afbf-f046-4d3e-8beb-0a9df6737326_fixed.java
index ad4b0d8..da7d48e 100644
--- a/tmp/e47875b8-c002-440a-98a2-977e3b4383a2_buggy.java
+++ b/tmp/cd90afbf-f046-4d3e-8beb-0a9df6737326_fixed.java
@@ -1,47 +1,117 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
+        // Convert to list for indexed access. Make a copy, so the original collection
+        // is not modified by removal of points.
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
+        // Array to store the minimum distance squared for each point
         final double[] dx2 = new double[pointSet.size()];
-        while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
+
+        while (resultSet.size() < k && !pointSet.isEmpty()) {
+            // For each data point x, compute D(x) Medikamente, the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
-            for (int i = 0; i < pointSet.size(); i++) {
+            double sumDX2 = 0.0; // The sum of squared distances
+            final int N = pointSet.size(); // number of remaining points
+
+            for (int i = 0; i < N; i++) {
                 final T p = pointSet.get(i);
+                // find the nearest center
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+                final double dSquared = d * d;
+                dx2[i] = dSquared; // Store the individual squared distance
+                sumDX2 += dSquared; // Add to the total sum
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
+            // probability proportional to D(x)^2.
+
+            // Handle case where sumDX2 is zero (e.g., points are duplicates of centers)
+            // Fallback to random selection from remaining points.
+            if (sumDX2 == 0.0) {
+                 final T p = pointSet.remove(random.nextInt(N));
                  resultSet.add(new Cluster<T>(p));
+                 // Array dx2 needs to be resized or logic adapted for next iteration
+                 // Since pointSet is reduced, re-allocate dx2 in the next iteration if needed,
+                 // or handle size difference. Re-allocating is cleaner.
+                 // However, the current dx2 is declared outside the loop, so we need to handle this.
+                 // Let's assume the next iteration will correctly use the new pointSet.size().
+                 // A better implementation might re-allocate dx2 inside the loop.
+                 // For now, let's adjust the loop to work with the reduced size next time.
+                 // This requires resizing dx2 or managing indices carefully.
+                 // Let's assume dx2 will be used correctly based on N in the next iteration's loop.
+                 // The simplest is to re-allocate dx2 inside the loop (as done in a previous thought).
+                 // Sticking to minimal change: dx2 size is fixed, but only first N elements used.
+                 // After removal, N decreases. This seems okay.
+                 continue; // Go to next iteration
+            }
+
+
+            final double r = random.nextDouble() * sumDX2;
+            double cumulativeSum = 0.0;
+            int nextCenterIndex = -1;
+            for (int i = 0 ; i < N; i++) {
+                cumulativeSum += dx2[i]; // Use individual squared distances
+                if (cumulativeSum >= r) { // Found the interval
+                    nextCenterIndex = i;
                     break;
                 }
             }
+
+            // Handle potential edge case where floating point inaccuracies might leave
+            // cumulativeSum slightly less than r even for the last element, or if r is exactly sumDX2.
+            // Choose the last point in such scenarios.
+            if (nextCenterIndex == -1) {
+                 // This should theoretically not happen if sumDX2 > 0. Pick the last point.
+                 nextCenterIndex = N - 1;
+            }
+
+            final T p = pointSet.remove(nextCenterIndex);
+            resultSet.add(new Cluster<T>(p));
+            // dx2 array elements after nextCenterIndex are now invalid WRT pointSet indices,
+            // but dx2 is recalculated fully in the next iteration based on the reduced pointSet.
         }
 
         return resultSet;
+    }
 
+    // Helper method (assumed to exist and be correct based on original code context)
+    /**
+     * Returns the nearest {@link Cluster} to the given point
+     *
+     * @param <T> type of the points to cluster
+     * @param clusters the {@link Cluster}s to search
+     * @param point the point to find the nearest cluster for
+     * @return the nearest {@link Cluster} to the point
+     */
+    private static <T extends Clusterable<T>> Cluster<T>
+        getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {
+        double minDistance = Double.MAX_VALUE;
+        Cluster<T> minCluster = null;
+        for (final Cluster<T> c : clusters) {
+            // Use distance squared to potentially avoid sqrt calculation,
+            // though Clusterable defines distance, not distanceSquared.
+            // Sticking to original distanceFrom method call.
+            final double distance = point.distanceFrom(c.getCenter());
+            if (distance < minDistance) {
+                minDistance = distance;
+                minCluster = c;
+            }
+        }
+        return minCluster;
     }
\ No newline at end of file
