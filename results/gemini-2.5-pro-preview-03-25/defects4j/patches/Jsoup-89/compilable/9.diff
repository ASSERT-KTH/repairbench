diff --git a/tmp/c8cee25b-3ed9-492b-8f3e-ce1c2b13543b_buggy.java b/tmp/adc4555b-022e-45a7-80b8-20ac32eb1c8c_fixed.java
index 25217b6..8676ed1 100644
--- a/tmp/c8cee25b-3ed9-492b-8f3e-ce1c2b13543b_buggy.java
+++ b/tmp/adc4555b-022e-45a7-80b8-20ac32eb1c8c_fixed.java
@@ -1,14 +1,34 @@
     /**
      Set the attribute value.
      @param val the new attribute value; must not be null
+     @return The original value (which may be null)
      */
     public String setValue(String val) {
-        String oldVal = parent.get(this.key);
+        // Validate the input value according to the Javadoc contract
+        org.jsoup.helper.Validate.notNull(val);
+
+        String oldVal; // Variable to store the old value to be returned
+
         if (parent != null) {
+            // If this attribute is part of an Attributes collection (parent),
+            // get the old value from the parent collection. This handles cases where the parent might have a different
+            // value than this.val due to external manipulation or inconsistent state.
+            oldVal = parent.get(this.key);
             int i = parent.indexOfKey(this.key);
-            if (i != Attributes.NotFound)
+            if (i != Attributes.NotFound) {
+                // Update the value directly in the parent's internal array
                 parent.vals[i] = val;
             }
+            // Note: If i == Attributes.NotFound, it indicates an inconsistent state.
+            // The parent collection is not updated, but the Attribute object itself still will be (below).
+        } else {
+            // If this attribute is an orphan (no parent), the old value is simply its current value.
+            oldVal = this.val;
+        }
+
+        // Update the value stored within this Attribute object itself.
         this.val = val;
-        return Attributes.checkNotNull(oldVal);
+
+        // Return the retrieved old value.
+        return oldVal;
     }
\ No newline at end of file
