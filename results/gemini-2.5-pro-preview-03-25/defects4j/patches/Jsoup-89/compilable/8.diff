diff --git a/tmp/9b8c408a-4127-49c0-a80a-5941c06c6d00_buggy.java b/tmp/ab6c61df-7c62-48ee-a620-9e7075762ee0_fixed.java
index 25217b6..9a47685 100644
--- a/tmp/9b8c408a-4127-49c0-a80a-5941c06c6d00_buggy.java
+++ b/tmp/ab6c61df-7c62-48ee-a620-9e7075762ee0_fixed.java
@@ -1,14 +1,27 @@
     /**
      Set the attribute value.
      @param val the new attribute value; must not be null
+     @return the original value before the update; possibly null if the attribute was created with a null value (but Attributes validation prevents this).
      */
     public String setValue(String val) {
-        String oldVal = parent.get(this.key);
+        // Default old value if no parent or key not in parent. Read from this instance.
+        String oldVal = this.val; 
         if (parent != null) {
+            // If parent exists, get the index of the key.
             int i = parent.indexOfKey(this.key);
-            if (i != Attributes.NotFound)
+            if (i != Attributes.NotFound) {
+                // If key found in parent, the true old value is the one from the parent's array.
+                oldVal = parent.vals[i];
+                // Update the value directly in the parent's array.
                 parent.vals[i] = val;
             }
+            // If key is not found in parent (e.g., if key changed after adding to parent),
+            // oldVal remains this.val, and parent is not updated (consistent with original logic).
+        }
+        // Update the value in this Attribute object instance regardless of parent status.
         this.val = val;
+        // Return the determined old value. 
+        // Keep the checkNotNull from the original code, assuming it's intended, although attribute values 
+        // shouldn't typically be null due to checks in constructors and Attributes.put.
         return Attributes.checkNotNull(oldVal); 
     }
\ No newline at end of file
