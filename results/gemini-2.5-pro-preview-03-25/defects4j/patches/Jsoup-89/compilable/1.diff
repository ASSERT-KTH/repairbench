diff --git a/tmp/435b7d97-194d-4d20-8149-99d44f3d5855_buggy.java b/tmp/027ad268-3746-4bf2-88ce-66ad4dc02118_fixed.java
index 25217b6..6342c9a 100644
--- a/tmp/435b7d97-194d-4d20-8149-99d44f3d5855_buggy.java
+++ b/tmp/027ad268-3746-4bf2-88ce-66ad4dc02118_fixed.java
@@ -1,14 +1,25 @@
     /**
      Set the attribute value.
      @param val the new attribute value; must not be null
+     @return the previous value of this attribute, for the given key; potentially null.
      */
     public String setValue(String val) {
-        String oldVal = parent.get(this.key);
+        String oldVal;
         if (parent != null) {
+            // If attached to Attributes, fetch the old value from the parent Attributes object.
+            // This is because the key might have changed since this Attribute object was created.
+            oldVal = parent.get(this.key);
             int i = parent.indexOfKey(this.key);
-            if (i != Attributes.NotFound)
+            if (i != Attributes.NotFound) {
+                // Update the value in the parent Attributes' backing array
                 parent.vals[i] = val;
             }
+        } else {
+            // If orphan, the old value is the value currently held in this Attribute object.
+            oldVal = this.val;
+        }
+        // Update the value in this Attribute object itself.
         this.val = val;
-        return Attributes.checkNotNull(oldVal);
+        // Return the value that was replaced.
+        return oldVal; // The original code used Attributes.checkNotNull(oldVal), but returning the actual old value (which could be null) seems more correct. The failing test expects the actual previous value ("two").
     }
\ No newline at end of file
