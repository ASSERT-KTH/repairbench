diff --git a/tmp/d5221260-861c-41bd-bcfb-82ed83f72ddc_buggy.java b/tmp/a3051dcc-3c69-4984-841c-c0357c4abc95_fixed.java
index 25217b6..2331f10 100644
--- a/tmp/d5221260-861c-41bd-bcfb-82ed83f72ddc_buggy.java
+++ b/tmp/a3051dcc-3c69-4984-841c-c0357c4abc95_fixed.java
@@ -1,14 +1,37 @@
     /**
      Set the attribute value.
      @param val the new attribute value; must not be null
+     @return the previous value
      */
     public String setValue(String val) {
-        String oldVal = parent.get(this.key);
+        // Fetch the old value of this attribute before any modifications.
+        String oldVal = this.val;
+
+        // If this attribute is linked to a parent Attributes collection, update it.
         if (parent != null) {
+            // Retrieve the value currently stored in the parent for this key.
+            // This might differ from this.val if the parent was modified directly.
+            // However, the method should logically return the value previously held
+            // by *this* Attribute object, consistent with typical setter behavior
+            // and required by the failing test.
+            // So we use the oldVal fetched earlier from this.val.
+
+            // Find the index of this attribute's key in the parent collection.
             int i = parent.indexOfKey(this.key);
-            if (i != Attributes.NotFound)
+            // If the key exists in the parent, update the corresponding value.
+            if (i != Attributes.NotFound) {
                 parent.vals[i] = val;
             }
+        }
+
+        // Update the value field of this Attribute object.
         this.val = val;
-        return Attributes.checkNotNull(oldVal);
+
+        // Return the value this Attribute held before this method was called.
+        return oldVal;
+        // Note: The original code had Attributes.checkNotNull(oldVal).
+        // This was removed as the previous value might legitimately be null,
+        // and returning null seems more appropriate than throwing an NPE
+        // if the contract doesn't explicitly forbid it. The test case
+        // expects a non-null value, so it passes either way in that specific scenario.
     }
\ No newline at end of file
