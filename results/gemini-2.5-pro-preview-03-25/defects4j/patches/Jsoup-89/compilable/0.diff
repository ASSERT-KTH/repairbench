diff --git a/tmp/7fb55975-7f96-4daa-bab6-e78234f2d950_buggy.java b/tmp/12f76bbd-e81e-4deb-b92c-e19ed7e2f913_fixed.java
index 25217b6..676a166 100644
--- a/tmp/7fb55975-7f96-4daa-bab6-e78234f2d950_buggy.java
+++ b/tmp/12f76bbd-e81e-4deb-b92c-e19ed7e2f913_fixed.java
@@ -1,14 +1,46 @@
     /**
      Set the attribute value.
      @param val the new attribute value; must not be null
+     @return the previous value
      */
     public String setValue(String val) {
-        String oldVal = parent.get(this.key);
+        // First, store the current value of this attribute.
+        String oldVal = this.val; 
+
+        // If this attribute is part of an Attributes collection (parent != null),
+        // update the value in that collection.
         if (parent != null) {
+            // Get the old value *from the parent collection* before updating.
+            // This is relevant if the parent's state could somehow differ,
+            // though usually this.val and parent.get(this.key) should be synced.
+            // However, the original code tried to get oldVal from parent first,
+            // implying that's the desired source for the return value if parent exists.
+            // Let's fetch it safely.
+            oldVal = parent.get(this.key); 
             int i = parent.indexOfKey(this.key);
-            if (i != Attributes.NotFound)
+            if (i != Attributes.NotFound) {
                 parent.vals[i] = val;
             }
+        }
+        
+        // Update the value stored directly within this attribute object.
         this.val = val;
-        return Attributes.checkNotNull(oldVal);
+        
+        // Return the value this attribute held before this method call.
+        // If parent was null, oldVal is this.val (from the start).
+        // If parent was not null, oldVal was updated to parent.get(this.key).
+        // The test expects the original value of the attribute ("two"), even when orphaned.
+        // Let's refine: the primary purpose is to set *this* attribute's value
+        // and return *its* old value. Updating the parent is a secondary sync action.
+        
+        // Corrected logic:
+        String currentVal = this.val; // Store the value *before* any changes
+        if (parent != null) {
+            int i = parent.indexOfKey(this.key);
+            if (i != Attributes.NotFound) {
+                parent.vals[i] = val; // Update parent
+            }
+        }
+        this.val = val; // Update this attribute
+        return currentVal; // Return the original value of *this* attribute
     }
\ No newline at end of file
