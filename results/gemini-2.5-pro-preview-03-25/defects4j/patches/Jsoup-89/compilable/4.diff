diff --git a/tmp/3534b897-2c79-4627-9cd4-c88dae40f392_buggy.java b/tmp/d1abaf31-b397-4468-be2d-a50b0b3771f2_fixed.java
index 25217b6..f37e23d 100644
--- a/tmp/3534b897-2c79-4627-9cd4-c88dae40f392_buggy.java
+++ b/tmp/d1abaf31-b397-4468-be2d-a50b0b3771f2_fixed.java
@@ -1,14 +1,32 @@
     /**
      Set the attribute value.
      @param val the new attribute value; must not be null
+     @return the previous value
      */
     public String setValue(String val) {
-        String oldVal = parent.get(this.key);
+        // 1. Store the current value of this Attribute instance.
+        // This serves as the "old value" to be returned, especially if the parent is null.
+        String oldVal = this.val;
+
+        // 2. If this attribute is attached to a parent Attributes object, update the parent.
         if (parent != null) {
-            int i = parent.indexOfKey(this.key);
-            if (i != Attributes.NotFound)
-                parent.vals[i] = val;
+            // Call parent.put() to update the value associated with this attribute's key
+            // in the parent collection. This is more robust than direct array access
+            // as it handles cases where the key might have been modified (via setKey)
+            // before setValue was called. The put method handles finding the correct index
+            // or adding the attribute if it wasn't found under the current key.
+            // Note: parent.put might return the *parent's* old value, but we return
+            // the value held locally by *this* Attribute object before the change,
+            // consistent with behavior for orphan attributes.
+            parent.put(this.key, val);
         }
+
+        // 3. Update the value stored within this Attribute object itself.
         this.val = val;
+
+        // 4. Return the value that was stored in this Attribute object before the update.
+        // Use checkNotNull consistent with the original implementation's return statement,
+        // although `oldVal` (coming from `this.val`) should generally not be null here
+        // if the API contract (input `val` must not be null) is followed.
         return Attributes.checkNotNull(oldVal);
     }
\ No newline at end of file
