diff --git a/tmp/2d6b1400-5b19-40cc-bc69-0d3c1b943447_buggy.java b/tmp/48e25e19-efd0-4bc9-ae2b-5e7b4fd7c670_fixed.java
index de9af32..f1554e5 100644
--- a/tmp/2d6b1400-5b19-40cc-bc69-0d3c1b943447_buggy.java
+++ b/tmp/48e25e19-efd0-4bc9-ae2b-5e7b4fd7c670_fixed.java
@@ -1,18 +1,43 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
+
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node functionExpression = node.getFirstChild();
+
+      // Case 1: Direct call like foo()
+      if (functionExpression.getType() == Token.NAME) {
+        changed.add(functionExpression.getString());
+      }
+      // Case 2: Call via .call or .apply like foo.call() or foo.apply()
+      // This is common for changing the 'this' context, as seen in the test case.
+      else if (functionExpression.getType() == Token.GETPROP) {
+        Node base = functionExpression.getFirstChild();
+        Node prop = functionExpression.getLastChild();
+
+        // Check if the property is the string "call" or "apply"
+        if (prop.getType() == Token.STRING &&
+            (prop.getString().equals("call") || prop.getString().equals("apply"))) {
+          // If the base of the .call/.apply is a simple name (like 'initialize'
+          // in 'initialize.call(...)'), add that name.
+          if (base.getType() == Token.NAME) {
+            changed.add(base.getString());
+          }
+          // Note: This doesn't deeply handle qualified names like obj.method.call(),
+          // but it addresses the specific pattern in the failing test.
+        }
+        // We intentionally do not add the property name for general method calls
+        // (e.g., 'siblings' in '$(this).siblings(...)') as the focus seems to be
+        // on identifying calls to potentially inlinable functions referenced by name.
       }
     }
 
+    // Recursively traverse children
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
