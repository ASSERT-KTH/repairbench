diff --git a/tmp/12c6387c-c2c9-4d7c-b938-e1215cb95629_buggy.java b/tmp/d68be0e8-1159-428a-85e9-ebc0971c480b_fixed.java
index de9af32..2db0a34 100644
--- a/tmp/12c6387c-c2c9-4d7c-b938-e1215cb95629_buggy.java
+++ b/tmp/d68be0e8-1159-428a-85e9-ebc0971c480b_fixed.java
@@ -1,18 +1,34 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node callee = node.getFirstChild();
+      // Handle direct calls: foo()
+      if (callee.getType() == Token.NAME) {
+        changed.add(callee.getString());
+      }
+      // Handle calls via properties: foo.bar(), foo.call(), foo.apply()
+      else if (callee.getType() == Token.GETPROP) {
+        // Check the object part of the property access. If it's a name,
+        // it might be the function being invoked (e.g., 'foo' in 'foo.call()').
+        Node target = callee.getFirstChild();
+        if (target.getType() == Token.NAME) {
+          changed.add(target.getString());
+        }
+        // Note: This currently adds the base object name ('foo' in 'foo.bar()').
+        // Depending on the exact semantics required, one might want to add
+        // the property name ('bar') or handle qualified names differently.
+        // However, for the specific issue with .call() and .apply(), adding
+        // the base name ('foo') is the correct behavior to identify the
+        // underlying function being invoked.
       }
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
