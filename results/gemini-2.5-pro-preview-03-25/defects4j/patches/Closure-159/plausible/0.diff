diff --git a/tmp/3719eef8-5d76-45f8-8b8d-55fcab73a61c_buggy.java b/tmp/b1223a8d-953f-454f-8567-241d64ea63df_fixed.java
index de9af32..bfb0ead 100644
--- a/tmp/3719eef8-5d76-45f8-8b8d-55fcab73a61c_buggy.java
+++ b/tmp/b1223a8d-953f-454f-8567-241d64ea63df_fixed.java
@@ -1,18 +1,34 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node callTarget = node.getFirstChild();
+      // Direct call: foo()
+      if (callTarget.getType() == Token.NAME) {
+        changed.add(callTarget.getString());
+      }
+      // Indirect call: foo.call(...) or foo.apply(...)
+      else if (callTarget.getType() == Token.GETPROP) {
+        Node prop = callTarget.getLastChild();
+        // Check if the property being accessed is "call" or "apply"
+        if (prop.getType() == Token.STRING &&
+            (prop.getString().equals("call") || prop.getString().equals("apply"))) {
+          // Get the expression representing the function itself (e.g., 'foo' in foo.call)
+          Node functionExpr = callTarget.getFirstChild();
+          // If the function itself is represented by a simple name, add it.
+          if (functionExpr.getType() == Token.NAME) {
+            changed.add(functionExpr.getString());
+          }
+          // TODO(b/165671900): Add support for foo.bar.call() etc. if needed.
+        }
       }
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
