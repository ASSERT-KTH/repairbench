diff --git a/tmp/d93a4c85-80bf-4281-84c6-5d517b5c9575_buggy.java b/tmp/85cab7cf-f283-44cc-9a3b-b3e64223cf6b_fixed.java
index de9af32..50a63b0 100644
--- a/tmp/d93a4c85-80bf-4281-84c6-5d517b5c9575_buggy.java
+++ b/tmp/85cab7cf-f283-44cc-9a3b-b3e64223cf6b_fixed.java
@@ -1,18 +1,33 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
+
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node callee = node.getFirstChild();
+      // Check for direct calls: foo()
+      if (callee.getType() == Token.NAME) {
+        changed.add(callee.getString());
+      }
+      // Check for calls via .call or .apply: foo.call() or foo.apply()
+      // NodeUtil.isFunctionObjectCall/Apply correctly identifies calls like
+      // "fn.call(this, ...)" or "fn.apply(this, ...)"
+      else if (NodeUtil.isFunctionObjectCall(node)
+          || NodeUtil.isFunctionObjectApply(node)) {
+        // The function being called is the object part of the GETPROP
+        // e.g., in "fn.call", it's "fn"
+        Node functionNameNode = callee.getFirstChild();
+        // Record the call if the function is a simple name (e.g., "fn")
+        if (functionNameNode.getType() == Token.NAME) {
+          changed.add(functionNameNode.getString());
+        }
       }
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
