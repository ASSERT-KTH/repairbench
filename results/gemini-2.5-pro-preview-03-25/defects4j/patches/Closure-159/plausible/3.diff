diff --git a/tmp/729f6946-bc71-4a5b-904f-0583e66359df_buggy.java b/tmp/891fc389-03e2-471c-bb94-505901fdd3e5_fixed.java
index de9af32..eaca2ac 100644
--- a/tmp/729f6946-bc71-4a5b-904f-0583e66359df_buggy.java
+++ b/tmp/891fc389-03e2-471c-bb94-505901fdd3e5_fixed.java
@@ -1,18 +1,30 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
       Node child = node.getFirstChild();
+      // If the function being called is a direct name, add it. (e.g. foo())
       if (child.getType() == Token.NAME) {
         changed.add(child.getString());
       }
+      // If the function is a property access (e.g., obj.foo(), func.call()),
+      // add the base object name if it's a simple name.
+      // This handles cases like "initialize.call(...)" in the test case,
+      // where "initialize" is the function we are interested in tracking.
+      else if (child.getType() == Token.GETPROP) {
+        Node baseObject = child.getFirstChild();
+        if (baseObject.getType() == Token.NAME) {
+          changed.add(baseObject.getString());
+        }
+      }
     }
 
+    // Recursively traverse the rest of the subtree.
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
