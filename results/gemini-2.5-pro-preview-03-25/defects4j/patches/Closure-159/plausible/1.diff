diff --git a/tmp/d422faf3-558e-4a8f-bb6a-2e9bb71559cf_buggy.java b/tmp/afdbef8a-7ec5-4470-9a0a-ac5e698d3275_fixed.java
index de9af32..2ef3272 100644
--- a/tmp/d422faf3-558e-4a8f-bb6a-2e9bb71559cf_buggy.java
+++ b/tmp/afdbef8a-7ec5-4470-9a0a-ac5e698d3275_fixed.java
@@ -1,18 +1,49 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
-    // For each referenced function, add a new reference
+
+    // Check if this node is a function call.
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node callee = node.getFirstChild();
+      Node functionNameNode = null;
+
+      // Case 1: Direct call, e.g., func()
+      if (callee.getType() == Token.NAME) {
+        functionNameNode = callee;
+      }
+      // Case 2: Property access call, e.g., obj.method(), obj.call(), func.call()
+      else if (callee.getType() == Token.GETPROP) {
+        // Check if it's a call via .call or .apply
+        String propName = callee.getLastChild().getString();
+        if ("call".equals(propName) || "apply".equals(propName)) {
+          // The function being called via .call/.apply is the object
+          // part of the GETPROP.
+          Node target = callee.getFirstChild();
+          // We are interested if the function being called is referenced
+          // by a simple name, e.g., func.call()
+          if (target.getType() == Token.NAME) {
+            functionNameNode = target;
+          }
+          // Note: We ignore cases like obj.func.call() or complex expressions,
+          // focusing on simple NAME.call/apply consistent with the original
+          // function's apparent scope (handling simple NAME calls).
+        }
+        // Case 3: Regular method call, e.g., obj.method().
+        // We ignore this, as the original code did not track these, and
+        // the goal is likely finding calls to functions defined by simple names.
+      }
+
+      // If we identified a function name node (either direct or via .call/.apply)
+      if (functionNameNode != null) {
+        changed.add(functionNameNode.getString());
       }
     }
 
+    // Recursively traverse the children.
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
