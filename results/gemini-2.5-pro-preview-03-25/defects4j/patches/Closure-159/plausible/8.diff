diff --git a/tmp/6b93822c-44f2-4475-b9d2-80e780cf08db_buggy.java b/tmp/825445fd-6015-4239-9356-62ef56f6df20_fixed.java
index de9af32..58c0f8d 100644
--- a/tmp/6b93822c-44f2-4475-b9d2-80e780cf08db_buggy.java
+++ b/tmp/825445fd-6015-4239-9356-62ef56f6df20_fixed.java
@@ -1,18 +1,33 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      Node callee = node.getFirstChild();
+      // Case 1: Direct call like foo()
+      if (callee.getType() == Token.NAME) {
+        changed.add(callee.getString());
       }
+      // Case 2: Indirect call like foo.call() or foo.apply()
+      else if (NodeUtil.isFunctionObjectCall(node)
+          || NodeUtil.isFunctionObjectApply(node)) {
+        // The function being called is the first child of the GETPROP node
+        // e.g. In foo.call(), the first child of the GETPROP is foo
+        Node functionNameNode = callee.getFirstChild();
+        if (functionNameNode.getType() == Token.NAME) {
+          changed.add(functionNameNode.getString());
+        }
+      }
+      // We don't handle other types of calls (e.g., obj.method()) because
+      // this function specifically looks for references to functions that
+      // might be candidates for inlining by name.
     }
 
+    // Recurse on children
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
