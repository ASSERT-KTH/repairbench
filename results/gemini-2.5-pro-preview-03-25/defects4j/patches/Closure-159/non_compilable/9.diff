diff --git a/tmp/8e5dfa4c-5319-43d3-82c8-f59c2139c53d_buggy.java b/tmp/477810e7-f85e-45f8-b2e7-3df6593b6f43_fixed.java
index de9af32..84f9120 100644
--- a/tmp/8e5dfa4c-5319-43d3-82c8-f59c2139c53d_buggy.java
+++ b/tmp/477810e7-f85e-45f8-b2e7-3df6593b6f43_fixed.java
@@ -1,18 +1,41 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
+
     // For each referenced function, add a new reference
-    if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    if (node.isCall()) { // Check if the node is a CALL node
+      Node functionExpr = node.getFirstChild();
+
+      // Case 1: Direct call like foo()
+      if (functionExpr.isName()) {
+        changed.add(functionExpr.getString());
+      }
+      // Case 2: Indirect call like foo.call() or foo.apply()
+      else if (functionExpr.isGetProp()) {
+        // The function being called is a property access, like obj.method or func.call
+        Node target = functionExpr.getFirstChild();
+        Node property = functionExpr.getLastChild(); // The property name (e.g., "call", "apply", "method")
+
+        // Check if it's of the form: NAME.call(...) or NAME.apply(...)
+        if (target.isName() && property.isString()) {
+          String functionName = target.getString();
+          String methodName = property.getString();
+          if ("call".equals(methodName) || "apply".equals(methodName)) {
+            // It's an indirect call to the function named by 'target'
+            changed.add(functionName);
+          }
+          // Note: We might potentially want to handle obj.method() calls differently
+          // depending on the exact purpose, but for the failing test, handling
+          // .call and .apply on a NAME is sufficient.
+        }
       }
     }
 
+    // Recurse through children
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
