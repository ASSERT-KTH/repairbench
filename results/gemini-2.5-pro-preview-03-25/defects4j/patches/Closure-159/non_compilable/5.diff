diff --git a/tmp/e80bbf5b-3603-4c7e-9dbd-33cffb15ef97_buggy.java b/tmp/cac31d40-ba89-4673-942c-1271abe047a9_fixed.java
index de9af32..bf7176f 100644
--- a/tmp/e80bbf5b-3603-4c7e-9dbd-33cffb15ef97_buggy.java
+++ b/tmp/cac31d40-ba89-4673-942c-1271abe047a9_fixed.java
@@ -1,18 +1,38 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
-    if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    if (node.isCall()) { // Check if the node is a CALL node
+      Node functionNode = node.getFirstChild();
+      // Direct call: foo()
+      if (functionNode.isName()) {
+        changed.add(functionNode.getString());
+      }
+      // Call via .call or .apply: foo.call(...) or foo.apply(...)
+      else if (functionNode.isGetProp()) {
+        Node propNameNode = functionNode.getLastChild(); // The property name ("call" or "apply")
+        if (propNameNode.isString()) {
+          String propName = propNameNode.getString();
+          if ("call".equals(propName) || "apply".equals(propName)) {
+            Node targetNode = functionNode.getFirstChild(); // The object/function before ".call" or ".apply"
+            // If the function being called via .call/.apply is a simple name, add it.
+            if (targetNode.isName()) {
+              changed.add(targetNode.getString());
+            }
+            // TODO(brad): Handle methods applied to "this",
+            // e.g. this.foo.call(this);
+            // TODO(johnlenz): Add support for Function.prototype.bind and
+            // window.setTimeout, etc. Also add support for goog.bind.
+          }
+        }
       }
     }
 
+    // Recursively traverse children
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
