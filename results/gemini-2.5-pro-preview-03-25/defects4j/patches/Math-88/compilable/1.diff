diff --git a/tmp/6038bbdc-8df0-4a1a-9c5a-6e6bce8538c9_buggy.java b/tmp/3edae636-d40d-4421-a148-12c6bc9a01f2_fixed.java
index 544303b..d518c0a 100644
--- a/tmp/6038bbdc-8df0-4a1a-9c5a-6e6bce8538c9_buggy.java
+++ b/tmp/3edae636-d40d-4421-a148-12c6bc9a01f2_fixed.java
@@ -1,29 +1,38 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
+        // MODIFIED: Renamed basicRow to basicRowArtificial for clarity, as it seems related
+        // to an artificial variable used for handling unrestricted variables.
+        Integer basicRowArtificial =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        double mostNegative = basicRowArtificial == null ? 0 : getEntry(basicRowArtificial, getRhsOffset());
+
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
+            // Find the basic row for the current decision variable i
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+
+            // The value of the variable is the RHS value of its basic row, or 0 if non-basic.
+            // An adjustment using mostNegative is applied if variables are not restricted to non-negative.
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
-            }
+
+            // REMOVED BUGGY INNER LOOP:
+            // The removed loop incorrectly zeroed out coefficients based on entries
+            // in the tableau for other variables, causing incorrect results like in testMath272.
+            // if (basicRow != null) {
+            //     for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
+            //         if (tableau.getEntry(basicRow, j) == 1) {
+            //              coefficients[i] = 0;
+            //         }
+            //     }
+            // }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
