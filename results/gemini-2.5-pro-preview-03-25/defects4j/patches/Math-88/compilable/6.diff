diff --git a/tmp/5ec9d87f-c640-432d-b71a-6fd127bb0995_buggy.java b/tmp/3debaad1-e12f-4941-b2b4-2941f77eb726_fixed.java
index 544303b..39d6148 100644
--- a/tmp/5ec9d87f-c640-432d-b71a-6fd127bb0995_buggy.java
+++ b/tmp/3debaad1-e12f-4941-b2b4-2941f77eb726_fixed.java
@@ -1,29 +1,54 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
-        double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
+        int numDecisionVariables = getOriginalNumDecisionVariables();
+        double[] coefficients = new double[numDecisionVariables];
+
+        // Index for the column representing the objective function value or a related artificial variable.
+        // Used for adjustments when variables are not restricted to be non-negative.
+        Integer basicRowForObjectiveOffset =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        // Value obtained from the tableau related to the objective or variable offset.
+        double valueOffset = basicRowForObjectiveOffset == null ? 0 : getEntry(basicRowForObjectiveOffset, getRhsOffset());
+
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+            // Find the row where the i-th decision variable is basic.
+            // The column index for the i-th decision variable is numObjectiveFunctions + i.
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+
+            // If the variable is basic, its value is the RHS entry in its basic row.
+            // If the variable is non-basic, its value is 0.
+            double valueFromTableau = (basicRow == null) ? 0 : getEntry(basicRow, getRhsOffset());
+
+            // Adjust the value if variables are not restricted to non-negative.
+            // This subtraction logic is preserved from the original code, assuming it handles
+            // a specific transformation used for unrestricted variables.
+            // If restrictToNonNegative is true, valueOffsetAdjustment is 0.
+            double valueOffsetAdjustment = restrictToNonNegative ? 0 : valueOffset;
+            coefficients[i] = valueFromTableau - valueOffsetAdjustment;
+
+
+            // The original code had a nested loop here which incorrectly set coefficients[i] to 0
+            // based on values in other columns within the same basic row. This loop was buggy
+            // and caused incorrect results (e.g., failing testMath272). It has been removed.
+            /* Original buggy loop removed:
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+                         coefficients[i] = 0; // Incorrectly zeroing coefficient
                     }
                 }
             }
+            */
         }
+        
+        // Return the calculated solution point and re-evaluate the objective function value
+        // at that point. Alternatively, the objective value could potentially be read
+        // directly from the tableau (e.g., related to valueOffset), but this approach matches the original.
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
