diff --git a/tmp/29bd0b08-88fd-4722-8a1c-4f3bd9dbee53_buggy.java b/tmp/5c4d4823-794a-487c-af08-61703acfec75_fixed.java
index 544303b..ccf9ac6 100644
--- a/tmp/29bd0b08-88fd-4722-8a1c-4f3bd9dbee53_buggy.java
+++ b/tmp/5c4d4823-794a-487c-af08-61703acfec75_fixed.java
@@ -1,29 +1,39 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+        // Determine the shift value for potentially unrestricted variables
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        
         for (int i = 0; i < coefficients.length; i++) {
+            // Find the row corresponding to the i-th variable
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
+            
+            // The value of the variable is the RHS value in the basic row
+            // or 0 if the variable is non-basic.
+            // Apply the shift adjustment for unrestricted variables.
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
+
+            // The nested loop below was incorrect and caused basic variables
+            // to be wrongly assigned a value of 0. It has been removed.
+            /*
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
                          coefficients[i] = 0;
                     }
                 }
             }
+            */
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
