diff --git a/tmp/061cbcc7-8dd3-4b3e-977b-638021688f60_buggy.java b/tmp/839279bd-4978-43a9-8d12-5af3131039b6_fixed.java
index 544303b..a186d26 100644
--- a/tmp/061cbcc7-8dd3-4b3e-977b-638021688f60_buggy.java
+++ b/tmp/839279bd-4978-43a9-8d12-5af3131039b6_fixed.java
@@ -1,29 +1,49 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
+        // This part calculating mostNegative seems related to handling non-restricted variables.
+        Integer basicRowArtificial =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        double mostNegative = basicRowArtificial == null ? 0 : getEntry(basicRowArtificial, getRhsOffset());
+
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+            // Determine the column index for the i-th original decision variable in the tableau.
+            int varColumn = getNumObjectiveFunctions() + i;
+            // Find the row where the i-th decision variable is basic.
+            Integer basicRow = getBasicRow(varColumn);
+
+            // If the variable is basic (basicRow is not null), its value is the RHS entry of that row.
+            // If the variable is non-basic (basicRow is null), its value is 0.
+            double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));
+
+            // Adjust the value if variables are not restricted to non-negative.
+            // If restrictToNonNegative is true, the adjustment term (mostNegative) is subtracted as 0.
+            // If restrictToNonNegative is false, the 'mostNegative' value is subtracted.
+            coefficients[i] = value - (restrictToNonNegative ? 0 : mostNegative);
+
+            // Removed the buggy inner loop that incorrectly reset coefficient values.
+            // The original comment regarding "multiple variables" and setting others to 0
+            // led to incorrect logic. The standard way to extract the solution is used now:
+            // basic variables take the RHS value of their row, non-basic are 0.
+            /* Original buggy inner loop removed:
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
                          coefficients[i] = 0;
                     }
                 }
             }
+            */
         }
+        // Compute the objective function value using the obtained coefficients.
+        // Alternatively, the value could potentially be read directly from the tableau
+        // (e.g., negative of the entry in the objective row and RHS column, depending on tableau format),
+        // but recalculating ensures correctness based on the derived variable values.
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
