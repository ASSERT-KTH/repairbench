diff --git a/tmp/496e10f8-2cb0-47ba-9325-cfb3cdf6a655_buggy.java b/tmp/4bbe6c7e-c0e6-4ead-b4be-78e4c2dd007a_fixed.java
index 544303b..f232f7a 100644
--- a/tmp/496e10f8-2cb0-47ba-9325-cfb3cdf6a655_buggy.java
+++ b/tmp/4bbe6c7e-c0e6-4ead-b4be-78e4c2dd007a_fixed.java
@@ -1,29 +1,34 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
+        // This index seems to assume an artificial variable representing the shift for non-restricted variables exists at this specific column index.
+        // Its value might represent the offset needed if variables are allowed to be negative.
+        Integer basicRowArtificial =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        double mostNegative = basicRowArtificial == null ? 0 : getEntry(basicRowArtificial, getRhsOffset());
+
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
-            }
+            // Find the row where the variable 'i' is basic.
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+
+            // The value of a basic variable is the RHS entry in its row.
+            // The value of a non-basic variable is 0.
+            double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));
+
+            // Adjust the value if non-negative restriction is lifted.
+            // If restrictToNonNegative is true, the offset is 0.
+            coefficients[i] = value - (restrictToNonNegative ? 0 : mostNegative);
+
+            // The original code had an incorrect inner loop here that would sometimes
+            // reset coefficients[i] to 0 based on values in columns of previous variables (j < i)
+            // in the same row. This logic was flawed and removed. The value of a basic variable
+            // is determined solely by the RHS value in its basic row in the final tableau.
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
