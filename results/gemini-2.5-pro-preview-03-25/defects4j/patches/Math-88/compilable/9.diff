diff --git a/tmp/533ec21e-ecfb-43b1-9572-4b4c8a1aa74c_buggy.java b/tmp/8ae30200-9ce7-432e-aac9-c0589b09ca41_fixed.java
index 544303b..24a4786 100644
--- a/tmp/533ec21e-ecfb-43b1-9572-4b4c8a1aa74c_buggy.java
+++ b/tmp/8ae30200-9ce7-432e-aac9-c0589b09ca41_fixed.java
@@ -1,29 +1,51 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
-        double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        int numDecisionVariables = getOriginalNumDecisionVariables();
+        int numObjectiveFunctions = getNumObjectiveFunctions();
+        double[] coefficients = new double[numDecisionVariables];
+
+        // Determine the offset for handling unrestricted variables if needed.
+        // This value is subtracted from the final coefficients if restrictToNonNegative is false.
+        // It seems to be derived from the RHS value of the row where an auxiliary variable
+        // (potentially added for handling unrestricted variables or during phase 1) is basic.
+        Integer artificialVarBasicRow = getBasicRow(numObjectiveFunctions + numDecisionVariables);
+        double mostNegative = artificialVarBasicRow == null ? 0 : getEntry(artificialVarBasicRow, getRhsOffset());
+
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+            // Find the row where the i-th original decision variable is basic.
+            // The column index for the i-th variable in the tableau is numObjectiveFunctions + i.
+            Integer basicRow = getBasicRow(numObjectiveFunctions + i);
+
+            // If the variable is basic, its value is the RHS entry in its basic row.
+            // If the variable is non-basic, its value is 0.
+            double value = (basicRow == null) ? 0 : getEntry(basicRow, getRhsOffset());
+
+            // Adjust the value if variables are not restricted to be non-negative.
+            double adjustment = restrictToNonNegative ? 0 : mostNegative;
+            coefficients[i] = value - adjustment;
+
+            // The original code had a flawed inner loop here which incorrectly zeroed out
+            // the coefficient based on entries for other variables in the same row.
+            // This loop has been removed as it's not part of the standard simplex solution extraction.
+            /* Original buggy code:
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
+                    // This check is incorrect: if another variable's column had a 1 in this row,
+                    // it would zero out the current variable's value.
                     if (tableau.getEntry(basicRow, j) == 1) {
                          coefficients[i] = 0;
                     }
                 }
             }
+            */
         }
+        // Calculate the objective function value using the determined coefficients.
+        // Note: 'f' should represent the original objective function.
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
