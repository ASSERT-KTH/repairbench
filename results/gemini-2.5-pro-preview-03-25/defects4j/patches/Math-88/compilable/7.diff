diff --git a/tmp/6f16c2ba-7bb0-41dc-843d-3706002a0860_buggy.java b/tmp/5cd278f4-5f1a-4386-b158-afb0d63a9156_fixed.java
index 544303b..0bf5a96 100644
--- a/tmp/6f16c2ba-7bb0-41dc-843d-3706002a0860_buggy.java
+++ b/tmp/5cd278f4-5f1a-4386-b158-afb0d63a9156_fixed.java
@@ -1,29 +1,45 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
-        double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
-        for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+        int numDecisionVariables = getOriginalNumDecisionVariables();
+        int variableStartIndex = getNumObjectiveFunctions(); // Column index where decision variables start
+        int rhsIndex = getRhsOffset(); // Column index of the Right Hand Side values
+
+        double[] coefficients = new double[numDecisionVariables];
+
+        // This part seems related to handling variables that are not restricted to be non-negative.
+        // It calculates a potential offset based on an auxiliary variable's value.
+        // For the failing test (restrictToNonNegative = true), mostNegative will be effectively 0.
+        Integer basicRowArtificial = getBasicRow(variableStartIndex + numDecisionVariables);
+        double mostNegative = basicRowArtificial == null ? 0 : getEntry(basicRowArtificial, rhsIndex);
+
+        for (int i = 0; i < numDecisionVariables; i++) {
+            int variableColumnIndex = variableStartIndex + i;
+            Integer basicRow = getBasicRow(variableColumnIndex);
+
+            // A variable's value in the solution is the RHS value of the row where it's basic.
+            // If a variable is non-basic, its value is 0.
+            double value = (basicRow == null) ? 0 : getEntry(basicRow, rhsIndex);
+
+            // Adjust the value if variables are not restricted to non-negative.
+            coefficients[i] = value - (restrictToNonNegative ? 0 : mostNegative);
+
+            // The original code had a problematic nested loop here that could incorrectly
+            // set coefficients[i] to 0. It has been removed.
+            // The value of a basic variable is determined solely by the RHS value in its
+            // corresponding basic row in the final tableau.
         }
-                }
-            }
-        }
-        return new RealPointValuePair(coefficients, f.getValue(coefficients));
+
+        // Calculate the objective function value for the determined solution point.
+        // Note: This recalculates the value. Alternatively, the value could be read
+        // directly from the tableau (e.g., -getEntry(0, getRhsOffset()) for minimization
+        // if the objective function is in row 0). Recalculating ensures consistency
+        // with the returned point.
+        double objectiveValue = f.getValue(coefficients);
+        return new RealPointValuePair(coefficients, objectiveValue);
     }
\ No newline at end of file
