diff --git a/tmp/23c03e4a-ddce-47ca-8743-f9a18ccc0e79_buggy.java b/tmp/c2f8b221-16b9-4872-aa5a-a3bceb8d984e_fixed.java
index 544303b..def7835 100644
--- a/tmp/23c03e4a-ddce-47ca-8743-f9a18ccc0e79_buggy.java
+++ b/tmp/c2f8b221-16b9-4872-aa5a-a3bceb8d984e_fixed.java
@@ -1,29 +1,59 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
-        double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        int numDecisionVariables = getOriginalNumDecisionVariables();
+        double[] coefficients = new double[numDecisionVariables];
+
+        // Column index for the artificial variable / objective function?
+        // Used for 'mostNegative' calculation, possibly for unrestricted variables.
+        // The column index used here (objective functions + decision variables) often points
+        // to an artificial variable or relates to the objective function row in some formulations.
+        int artificialVarCol = getNumObjectiveFunctions() + numDecisionVariables;
+        Integer basicRowArtificial = getBasicRow(artificialVarCol);
+        // Calculate 'mostNegative' based on the RHS value of the artificial/objective variable's basic row.
+        // This is likely used for shifting variables if they were not restricted to non-negative.
+        double mostNegative = basicRowArtificial == null ? 0 : getEntry(basicRowArtificial, getRhsOffset());
+        // Determine the adjustment based on whether variables are restricted to non-negative.
+        double adjustment = restrictToNonNegative ? 0 : mostNegative;
+
+        // Iterate through each original decision variable to find its value.
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+            // Determine the column index corresponding to the i-th decision variable.
+            int varCol = getNumObjectiveFunctions() + i;
+            // Find the row where this variable is basic (i.e., the pivot element is 1).
+            Integer basicRow = getBasicRow(varCol);
+
+            // Get the value from the RHS column if the variable is basic, otherwise it's 0 (before adjustment).
+            double value = (basicRow == null) ? 0 : getEntry(basicRow, getRhsOffset());
+
+            // Apply the adjustment. If variables are restricted to non-negative, adjustment is 0.
+            // Otherwise, subtract 'mostNegative' (potentially a shift value).
+            coefficients[i] = value - adjustment;
+
+            // THE BUG WAS HERE:
+            // The original code had a nested loop that incorrectly zeroed out coefficient[i]
+            // if tableau.getEntry(basicRow, j) == 1 for any preceding variable column j.
+            // This logic was flawed and caused incorrect solutions when tableau entries
+            // for non-basic variables happened to be 1 in the row of a basic variable.
+            // Removing this loop fixes the issue. The value of a variable is determined
+            // solely by whether it is basic and its corresponding RHS value (and the
+            // potential adjustment for unrestricted variables).
+            /*
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
+                         // This incorrectly zeroed out the coefficient
                          coefficients[i] = 0;
                     }
                 }
             }
+            */
         }
+        // Return the solution point (coefficients) and the calculated objective function value.
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
