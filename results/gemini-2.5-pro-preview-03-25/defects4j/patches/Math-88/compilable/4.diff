diff --git a/tmp/f99d6d24-4d72-46f7-97cf-714adff5e061_buggy.java b/tmp/1abc4bb6-aa19-47c3-af04-e60942c49813_fixed.java
index 544303b..1e392d5 100644
--- a/tmp/f99d6d24-4d72-46f7-97cf-714adff5e061_buggy.java
+++ b/tmp/1abc4bb6-aa19-47c3-af04-e60942c49813_fixed.java
@@ -1,29 +1,50 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
-        double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        int numDecisionVariables = getOriginalNumDecisionVariables();
+        double[] coefficients = new double[numDecisionVariables];
+
+        // Determine the value for the potential negative offset variable if variables are unrestricted
+        // This offset variable allows original variables (x_i) represented as x_i' - N to be negative.
+        double mostNegative = 0;
+        if (!restrictToNonNegative) {
+            // The column index for the offset variable is after the original decision variables.
+            int offsetVarColumn = getNumObjectiveFunctions() + numDecisionVariables;
+            Integer basicRow = getBasicRow(offsetVarColumn);
+            // The value of the offset variable (N) is its value if it's basic, 0 otherwise.
+            mostNegative = (basicRow == null) ? 0 : getEntry(basicRow, getRhsOffset());
+        }
+
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
-            }
+            // The column index for the i-th original decision variable (or x_i' if unrestricted).
+            int variableColumn = getNumObjectiveFunctions() + i;
+            Integer basicRow = getBasicRow(variableColumn);
+
+            // Get the value from the RHS column if the variable is basic, otherwise it's 0.
+            // This corresponds to x_i for restricted variables, or x_i' for unrestricted ones.
+            double value = (basicRow == null) ? 0 : getEntry(basicRow, getRhsOffset());
+
+            // Adjust the value if variables are not restricted to non-negative.
+            // Calculate the original variable value: x_i = x_i' - N
+            coefficients[i] = value - (restrictToNonNegative ? 0 : mostNegative);
+
+            // The following loop (present in the original buggy code) was incorrect.
+            // It wrongly zeroed out coefficients based on entries for other variables in the basic row.
+            // if (basicRow != null) {
+            //     for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
+            //         if (tableau.getEntry(basicRow, j) == 1) {
+            //              coefficients[i] = 0;
+            //         }
+            //     }
+            // }
         }
+        // Calculate the objective function value using the final coefficients.
+        // Note: Alternatively, the optimal value could be read directly from the tableau,
+        // e.g., tableau.getEntry(0, getRhsOffset()), which might be more robust.
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
