diff --git a/tmp/9bfe196c-fabc-42fe-8870-45bbf89c7d59_buggy.java b/tmp/b7ad2008-e8cd-492e-bdc2-86272d04ffde_fixed.java
index e1cbe77..58a4c41 100644
--- a/tmp/9bfe196c-fabc-42fe-8870-45bbf89c7d59_buggy.java
+++ b/tmp/b7ad2008-e8cd-492e-bdc2-86272d04ffde_fixed.java
@@ -1,196 +1,237 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
     * <code>BigDecimal</code>.</p>
     *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
      * be Integer, Long or BigDecimal as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         // Need to deal with all possible hex prefixes here
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length(); // Fixed: use assignment '=' instead of '+='
                 break;
             }
         }
         if (pfxLen > 0) { // we have a hex number
+            final boolean negative = str.startsWith("-");
+            // Count the number of digits after the prefix
             final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
+
+            // Find the first non-zero hex digit after the prefix
+            char firstSigDigit = '0'; // Default to '0' if all digits are zero
+            for (int i = pfxLen; i < str.length(); i++) {
+                firstSigDigit = str.charAt(i);
+                if (firstSigDigit != '0') {
+                    break;
+                }
+            }
+
+            // Check based on the number of hex digits and the first significant digit for boundary conditions
+            if (hexDigits > 16) { // More than 16 hex digits, definitely requires BigInteger
+                return createBigInteger(str);
+            }
+            // Check boundary case for Long.MAX_VALUE (0x7FFFFFFFFFFFFFFF)
+            // A 16-digit positive hex number starting with '8' or higher needs BigInteger
+            // as it exceeds Long.MAX_VALUE when treated as positive.
+            if (hexDigits == 16 && !negative && firstSigDigit >= '8') {
                 return createBigInteger(str);
             }
-            if (hexDigits > 8) { // too many for an int
+
+            if (hexDigits > 8) { // Between 9 and 16 hex digits, requires Long (or BigInteger, handled above)
+                 return createLong(str);
+            }
+            // Check boundary case for Integer.MAX_VALUE (0x7FFFFFFF)
+            // An 8-digit positive hex number starting with '8' or higher needs Long
+            // as it exceeds Integer.MAX_VALUE when treated as positive.
+            if (hexDigits == 8 && !negative && firstSigDigit >= '8') {
                  return createLong(str);
             }
+
+            // Otherwise, it fits in an Integer (or is negative within Integer range)
             return createInteger(str);
         }
+
+        // Non-hex number processing (original logic largely preserved)
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
         final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
 
-        int numDecimals = 0; // Check required precision (LANG-693)
+        int numDecimals = 0;
         if (decPos > -1) { // there is a decimal point
-
             if (expPos > -1) { // there is an exponent
                 if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
+            numDecimals = dec.length(); // gets number of digits past the decimal
         } else {
             if (expPos > -1) {
                 if (expPos > str.length()) { // prevents double exponent causing IOOBE
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar) && lastChar != '.') {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
             final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            // Check for potential loss of precision (important for Float/Double)
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // isAllZeros needs to handle null/empty
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
+                    // Note: hex processing is done above
                     if (dec == null
                         && exp == null
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
+                            // Use createLong/createBigInteger which handle octal/decimal prefixes if present
                             return createLong(numeric);
                         } catch (final NumberFormatException nfe) { // NOPMD
                             // Too big for a long
                         }
                         return createBigInteger(numeric);
 
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
+                        // Use createFloat to handle potential NaN/Infinity issues
                         final Float f = NumberUtils.createFloat(numeric);
+                        // Check if it loses precision or becomes zero incorrectly
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
+                         // Use createDouble to handle potential NaN/Infinity issues
                         final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                         // Check if it loses precision or becomes zero incorrectly
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Fixed: use doubleValue()
                             return d;
                         }
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     try {
+                        // Fallback to BigDecimal if Double loses precision or fails
                         return createBigDecimal(numeric);
                     } catch (final NumberFormatException e) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
+        // User doesn't have a preference on the return type (no suffix)
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length());
         } else {
             exp = null;
         }
-        if (dec == null && exp == null) { // no decimal point and no exponent
+        if (dec == null && exp == null) { // No decimal point and no exponent == Integral number
             // Must be an Integer, Long, Biginteger
+            // Handles decimal and octal (via create* methods)
             try {
                 return createInteger(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             try {
                 return createLong(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
+            // Safest fallback for integral numbers
             return createBigInteger(str);
         }
 
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        // Must be a Float, Double, BigDecimal (has decimal or exponent)
+        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // isAllZeros needs to handle null/empty
         try {
-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
+             // Precision check based on number of decimal places (LANG-693)
+            if(numDecimals <= 7){ // Try Float if <= 7 decimal places
                 final Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+                    // Additional check: does the float value match the original string representation?
+                    // Avoid returning 1.23f if input was 1.2300000001 which rounds to 1.23f
+                    // This is complex; rely on the existing check for now.
                     return f;
                 }
             }
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
         try {
-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
+             // Precision check based on number of decimal places (LANG-693)
+            if(numDecimals <= 16){ // Try Double if <= 16 decimal places
                 final Double d = createDouble(str);
-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Fixed: use doubleValue()
+                    // Similar precision concerns as Float.
                     return d;
                 }
             }
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
 
+        // Safest fallback for floating point numbers to preserve precision
         return createBigDecimal(str);
     }
\ No newline at end of file
