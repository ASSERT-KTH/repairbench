diff --git a/tmp/87f2e0b0-8164-4620-a4b4-bbabec1cc2a0_buggy.java b/tmp/ad732f56-bfba-4937-84c5-9b6a60515206_fixed.java
index e1cbe77..16da9ac 100644
--- a/tmp/87f2e0b0-8164-4620-a4b4-bbabec1cc2a0_buggy.java
+++ b/tmp/ad732f56-bfba-4937-84c5-9b6a60515206_fixed.java
@@ -1,196 +1,266 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+// Assume StringUtils is imported, e.g., from org.apache.commons.lang3
+// Assume helper methods like isAllZeros, isDigits, parseBigIntegerMaybeOctal are available if needed by the rest of the logic.
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
-     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
+     * will be interpreted as a hexadecimal Integer, Long, or BigInteger depending on the magnitude of the value.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
     * <code>BigDecimal</code>.</p>
      *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
+     * be Integer, Long or BigInteger as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
-        if (StringUtils.isBlank(str)) {
+        if (StringUtils.isBlank(str)) { // Assuming StringUtils.isBlank is available from commons-lang3
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        // Need to deal with all possible hex prefixes here
+        // Handle hexadecimal numbers
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
+        boolean negative = false;
         for (final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length();
+                if (pfx.startsWith("-")) {
+                    negative = true;
+                }
                 break;
             }
         }
-        if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
+
+        if (pfxLen > 0) { // It's a hexadecimal number
+            String numberPart = str.substring(pfxLen);
+            if (numberPart.isEmpty()) {
+                // Handle cases like "0x", "-#", etc.
+                throw new NumberFormatException(str + " is not a valid number.");
             }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
+            // Use BigInteger to parse the hexadecimal part to handle magnitude correctly
+            try {
+                BigInteger val = new BigInteger(numberPart, 16);
+                if (negative) {
+                    val = val.negate();
                 }
-            return createInteger(str);
+                // Determine the smallest Java Number type that can hold the value
+                if (val.bitLength() <= 31) { // Fits in Integer range (-2^31 to 2^31-1)
+                    return Integer.valueOf(val.intValue());
                 }
+                if (val.bitLength() <= 63) { // Fits in Long range (-2^63 to 2^63-1)
+                    return Long.valueOf(val.longValue());
+                }
+                // Value is too large for Long, return as BigInteger
+                return val;
+            } catch (NumberFormatException e) {
+                // If BigInteger parsing fails (e.g., invalid hex digits)
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
+
+        // Handle non-hexadecimal numbers (decimal, octal, floating point)
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        int expPos = str.indexOf('e'); // Find exponent marker 'e' or 'E'
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
-
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+        // Split the string into mantissa, decimal, and exponent parts
+        int numDecimals = 0;
+        if (decPos > -1) { // Contains a decimal point
+            if (expPos > -1) { // Contains an exponent
+                if (expPos < decPos || expPos >= str.length()) { // Validate exponent position
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+            numDecimals = dec.length();
+        } else { // No decimal point
+            if (expPos > -1) { // Contains an exponent
+                 if (expPos >= str.length()) { // Validate exponent position
                      throw new NumberFormatException(str + " is not a valid number.");
                  }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
-            dec = null;
+            dec = null; // No decimal part
         }
+
+        // Check for type qualifiers (f, F, d, D, l, L) at the end
         if (!Character.isDigit(lastChar) && lastChar != '.') {
              if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            final String numeric = str.substring(0, str.length() - 1); // String without qualifier
+            // Assuming isAllZeros helper is available and correctly implemented
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp);
+
             switch (lastChar) {
                 case 'l':
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
-                        try {
-                            return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
-                        return createBigInteger(numeric);
-
-                    }
+                case 'L': // Long specified
+                    // Input must be an integer (no decimal point or exponent)
+                    if (dec != null || expPos > -1 || (numeric.isEmpty() || numeric.equals("+") || numeric.equals("-"))) {
                         throw new NumberFormatException(str + " is not a valid number.");
+                    }
+                    try {
+                        // Use Long.valueOf, fallback to BigInteger for large values
+                        return Long.valueOf(numeric);
+                    } catch (final NumberFormatException nfe) {
+                        // NOPMD - Only catch NFE
+                        return new BigInteger(numeric);
+                    }
                 case 'f':
-                case 'F' :
+                case 'F': // Float specified
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                        final Float f = Float.valueOf(numeric);
+                        // Check for infinity or zero result when input was non-zero
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
+                    // Fall through to Double/BigDecimal might be intended by original code structure ($FALL-THROUGH$)
+                    // but is questionable for explicit 'f'. Retaining fall-through to match original behavior.
                     //$FALL-THROUGH$
                 case 'd':
-                case 'D' :
+                case 'D': // Double specified
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        final Double d = Double.valueOf(numeric);
+                        // Check for infinity or zero result when input was non-zero
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     try {
-                        return createBigDecimal(numeric);
+                        // Fallback to BigDecimal if Double fails or is infinite/zero
+                        return new BigDecimal(numeric);
                     } catch (final NumberFormatException e) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
-                default :
+                default: // Invalid qualifier
                     throw new NumberFormatException(str + " is not a valid number.");
-
             }
-        }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
+        } else {
+            // No type qualifier: Infer type
             if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
+                exp = str.substring(expPos + 1);
             } else {
+                 // Exponent marker cannot be the last character
+                 if (expPos > -1 && expPos >= str.length() -1) {
+                     throw new NumberFormatException(str + " is not a valid number.");
+                 }
                 exp = null;
             }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
-            try {
-                return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            try {
-                return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            return createBigInteger(str);
-        }
 
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            if (dec == null && expPos == -1) { // Integral number candidate (no decimal, no exponent)
+                // Try Integer -> Long -> BigInteger (handling octal with decode/helper)
+                try { return Integer.decode(str); } catch (final NumberFormatException nfe1) { /* Ignore */ }
+                try { return Long.decode(str); } catch (final NumberFormatException nfe2) { /* Ignore */ }
+                // Assuming parseBigIntegerMaybeOctal helper is available for BigInteger with octal check
+                return parseBigIntegerMaybeOctal(str);
+            } else { // Floating point number candidate (has decimal or exponent)
+                // Assuming isAllZeros helper is available and correctly implemented
+                final boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp);
+                // Try Float -> Double -> BigDecimal
                 try {
-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
-                final Float f = createFloat(str);
+                    final Float f = Float.valueOf(str);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
-            }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
-        }
+                } catch (final NumberFormatException nfe1) { /* Ignore */ }
                 try {
-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
-                final Double d = createDouble(str);
+                    final Double d = Double.valueOf(str);
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
+                } catch (final NumberFormatException nfe2) { /* Ignore */ }
+                try {
+                    return new BigDecimal(str);
+                } catch (final NumberFormatException nfe3) {
+                    throw new NumberFormatException(str + " is not a valid number.");
                 }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+            }
+        }
+    }
+
+    // --- Helper methods assumed to exist (implement or import as needed) ---
+
+    /** Placeholder: Checks if a string consists only of '0' characters. Null/empty might be true depending on context. */
+    private static boolean isAllZeros(String s) {
+       if (s == null || s.isEmpty()) return true;
+       for (char c : s.toCharArray()) {
+           if (c != '0') return false;
+       }
+       return true;
     }
 
-        return createBigDecimal(str);
+    /** Placeholder: Parses a String potentially representing an octal number into a BigInteger. */
+    private static BigInteger parseBigIntegerMaybeOctal(final String str) throws NumberFormatException {
+        boolean negative = str.startsWith("-");
+        int startIndex = negative ? 1 : 0;
+        // Check for octal prefix (0 followed by 0-7 digits)
+        if (str.startsWith("0", startIndex) && str.length() > startIndex + 1) {
+            String octalPart = str.substring(startIndex + 1);
+            // Validate all following chars are octal digits
+            boolean isOctal = true;
+            for (char c : octalPart.toCharArray()) {
+                if (c < '0' || c > '7') {
+                    isOctal = false;
+                    break;
+                }
+            }
+            if (isOctal) {
+                 try {
+                      BigInteger val = new BigInteger(octalPart, 8);
+                      return negative ? val.negate() : val;
+                 } catch (NumberFormatException nfe) {
+                      // Should not happen if validation passes, but handle defensively
+                       throw new NumberFormatException(str + " is not a valid octal number.");
+                 }
+            }
+        }
+        // If not valid octal, parse as decimal BigInteger
+        try {
+            return new BigInteger(str);
+        } catch (NumberFormatException e) {
+            throw new NumberFormatException(str + " is not a valid number.");
+        }
     }
\ No newline at end of file
