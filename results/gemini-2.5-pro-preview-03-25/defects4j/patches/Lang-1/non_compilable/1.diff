diff --git a/tmp/a7be8f64-0e6f-4313-8503-3c87ad84834a_buggy.java b/tmp/b63823ff-7e30-4c3e-a057-07699d8ed79b_fixed.java
index e1cbe77..c1df456 100644
--- a/tmp/a7be8f64-0e6f-4313-8503-3c87ad84834a_buggy.java
+++ b/tmp/b63823ff-7e30-4c3e-a057-07699d8ed79b_fixed.java
@@ -1,196 +1,254 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import org.apache.commons.lang3.StringUtils;
+
+// Assume NumberUtils class context and helpers like createFloat, createDouble, createBigDecimal, isAllZeros, isDigits exist
+// Assume createInteger, createLong, createBigInteger can handle respective standard Java number formats including octal/hex prefixes (like decode methods)
+// The following code block contains only the fixed createNumber method.
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
-     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
-     * </p>
+     * will be interpreted as a hexadecimal number. The type will be chosen based on the smallest primitive type
+     * (Integer, Long) or BigInteger that can hold the value specified by the hexadecimal representation.</p>
+     *
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
+     * be Integer, Long or BigInteger as appropriate, determined by the smallest type that fits.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        // Need to deal with all possible hex prefixes here
+        // Handle hex numbers explicitly first due to sign/magnitude ambiguity with decode methods
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
+        boolean negativeHex = false;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length();
+                negativeHex = pfx.startsWith("-"); // Record if the prefix included a '-'
                 break;
             }
         }
-        if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
+        if (pfxLen > 0) { // We have a hex number
+            // Extract the part after the prefix
+            String numberPart = str.substring(pfxLen);
+            if (numberPart.isEmpty()) {
+                 throw new NumberFormatException("Hexadecimal number must have digits after prefix: " + str);
              }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
+
+            BigInteger bigIntValue;
+            try {
+                 // Use BigInteger to parse the hexadecimal digits. Handles arbitrary size.
+                 // Constructor requires only hex digits (no sign).
+                 bigIntValue = new BigInteger(numberPart, 16);
+            } catch (final NumberFormatException e) {
+                 // Rethrow if the number part is not valid hex, providing the original string
+                 final NumberFormatException nfe = new NumberFormatException("Illegal hexadecimal digit(s) in: " + str);
+                 nfe.initCause(e); // Preserve original cause
+                 throw nfe;
             }
-            return createInteger(str);
+
+            // Apply the sign based on the prefix found
+            if (negativeHex) {
+                bigIntValue = bigIntValue.negate();
             }
+
+            // Determine the smallest type (Integer, Long, BigInteger) that fits the value
+            // Using BigInteger constants for range comparison for clarity and robustness
+            final BigInteger MIN_INTEGER = BigInteger.valueOf(Integer.MIN_VALUE);
+            final BigInteger MAX_INTEGER = BigInteger.valueOf(Integer.MAX_VALUE);
+            final BigInteger MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);
+            final BigInteger MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);
+
+            if (bigIntValue.compareTo(MAX_INTEGER) <= 0 &&
+                bigIntValue.compareTo(MIN_INTEGER) >= 0) {
+                 return Integer.valueOf(bigIntValue.intValue()); // Fits in Integer
+            }
+            if (bigIntValue.compareTo(MAX_LONG) <= 0 &&
+                bigIntValue.compareTo(MIN_LONG) >= 0) {
+                 return Long.valueOf(bigIntValue.longValue()); // Fits in Long
+            }
+            // Value is too large for Long, return as BigInteger
+            return bigIntValue;
+        }
+
+        // ---- Non-hex numbers ----
+
         final char lastChar = str.charAt(str.length() - 1);
-        String mant;
-        String dec;
-        String exp;
-        final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        String mant; // Mantissa part
+        String dec;  // Decimal part
+        // Correct calculation of expPos: find first 'e' or 'E'
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
+        int numDecimals = 0; // Number of digits after decimal point
+        final int decPos = str.indexOf('.'); // Find decimal point position
 
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+        if (decPos > -1) { // Contains a decimal point
+            if (expPos > -1) { // Contains an exponent
+                if (expPos < decPos || expPos >= str.length()) { // Validate exponent position
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+            numDecimals = dec.length();
+        } else { // No decimal point
+            if (expPos > -1) { // Contains an exponent
+                if (expPos == 0 || expPos >= str.length()) { // Validate exponent position
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
             } else {
-                mant = str;
+                mant = str; // Full string is mantissa
             }
-            dec = null;
+            dec = null; // No decimal part
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
+
+        if (!Character.isDigit(lastChar) && lastChar != '.') { // Ends with a type specifier or invalid char
+             String numeric = str.substring(0, str.length() - 1); // Numeric part without suffix
+             // Determine exponent string for allZeros check
+             String expStr = null;
+             if (expPos > -1 && expPos < numeric.length()) { // Check against numeric length
+                  expStr = numeric.substring(expPos + 1);
              }
-            //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+             // Determine mantissa string for allZeros check
+             String mantStr = numeric;
+             final int mantDecPos = numeric.indexOf('.');
+             if(mantDecPos > -1) {
+                  mantStr = numeric.substring(0, mantDecPos);
+             } else if (expPos > -1 && expPos < numeric.length()) {
+                  mantStr = numeric.substring(0, expPos);
+             }
+             // Check if the significant parts (mantissa before decimal/exponent, exponent digits) are all zeros.
+             // isAllZeros should handle null inputs safely (treat as true or zero).
+             final boolean allZeros = isAllZeros(mantStr) && isAllZeros(expStr); // Assumes isAllZeros helper exists
+
             switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                case 'l' : case 'L' :
+                     // Check if numeric part is valid integer format (no decimal, no exponent)
+                     if (dec == null && expPos == -1 &&
+                         (!numeric.isEmpty() && // Cannot be empty, e.g. "L"
+                         (numeric.charAt(0) == '-' ? isDigits(numeric.substring(1)) : isDigits(numeric)))) { // Assumes isDigits helper exists
                         try {
-                            return createLong(numeric);
+                             return createLong(numeric); // Assumes createLong handles standard integer format
                         } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                            // If Long parsing fails (e.g., overflow), fall back to BigInteger
+                            return createBigInteger(numeric); // Assumes createBigInteger handles standard integer format
                         }
-                        return createBigInteger(numeric);
-
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
+
+                case 'f' : case 'F' :
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                        final Float f = createFloat(numeric); // Assumes createFloat handles float format
+                        // Check for infinity or zero result when original wasn't zero (indicates precision/range issues)
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
+                        // If Float has issues, fall through to Double/BigDecimal for better precision/range
                     } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // Fall through
                     }
-                    //$FALL-THROUGH$
-                case 'd' :
-                case 'D' :
+                    // $FALL-THROUGH$ Intentional fallthrough
+
+                case 'd' : case 'D' :
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        final Double d = createDouble(numeric); // Assumes createDouble handles double format
+                        // Check for infinity or zero result when original wasn't zero
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Use d.doubleValue()
                             return d;
                         }
+                         // If Double has issues, fall through to BigDecimal
                     } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                         // Fall through
                     }
                     try {
-                        return createBigDecimal(numeric);
+                        // Final attempt with BigDecimal for 'f','F','d','D' cases for precision
+                        return createBigDecimal(numeric); // Assumes createBigDecimal handles decimal format
                     } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                         // If createBigDecimal fails, the number is invalid for F/D types
                     }
-                    //$FALL-THROUGH$
-                default :
+                     // Throw exception if all attempts (Float, Double, BigDecimal) failed for F/D
                     throw new NumberFormatException(str + " is not a valid number.");
 
+                default : // Invalid type suffix
+                    throw new NumberFormatException(str + " is not a valid number.");
             }
+        } else { // Ends with digit or '.' -> No type specifier
+            // Determine exponent string part if exists
+            String expString = null;
+            if (expPos > -1 && expPos < str.length() - 1) { // Check 'e'/'E' is not last char
+                expString = str.substring(expPos + 1);
             }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
-        } else {
-            exp = null;
-        }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+            // Check if mantissa and exponent string are all zeros
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(expString); // Assumes isAllZeros helper exists
+
+            if (dec == null && expPos == -1) { // Integral number (potentially octal if starts with 0)
+                // Try creating Integer/Long/BigInteger using the helper methods which should handle octal/decimal
                 try {
                     return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
+                } catch (final NumberFormatException nfe) { /* Ignore */ } // NOPMD
                 try {
                     return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
-            return createBigInteger(str);
-        }
+                } catch (final NumberFormatException nfe) { /* Ignore */ } // NOPMD
+                return createBigInteger(str); // Final attempt for integer types
 
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            }
+            // Number is non-integral (has '.' or 'e'/'E')
+            // Try Float -> Double -> BigDecimal, considering precision heuristics from original code (LANG-693)
             try {
-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
                 final Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+                    // Heuristic: Float may be okay for few decimals
+                    if (numDecimals <= 7) {
                        return f;
                     }
+                    // Otherwise, precision might be insufficient, try Double
                 }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
-        }
+            } catch (final NumberFormatException nfe) { /* Ignore */ } // NOPMD
             try {
-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
                 final Double d = createDouble(str);
-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Use d.doubleValue()
+                    // Heuristic: Double may be okay for moderate decimals
+                    if (numDecimals <= 16) {
                        return d;
                     }
+                    // Otherwise, precision might be insufficient, try BigDecimal
                 }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
-        }
+            } catch (final NumberFormatException nfe) { /* Ignore */ } // NOPMD
 
+            // Final fallback for non-integral numbers without suffix is BigDecimal for exact representation
             return createBigDecimal(str);
         }
+    }
\ No newline at end of file
