diff --git a/tmp/bead9c12-7407-4790-a732-163d0f2e0224_buggy.java b/tmp/ede698c1-976d-4bc1-b5bf-30abfad2f6c8_fixed.java
index e1cbe77..3a63255 100644
--- a/tmp/bead9c12-7407-4790-a732-163d0f2e0224_buggy.java
+++ b/tmp/ede698c1-976d-4bc1-b5bf-30abfad2f6c8_fixed.java
@@ -1,196 +1,329 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import org.apache.commons.lang3.StringUtils; // Assuming this import is available
+
+// Added helper methods assumed by the original code for context/compilation
+class NumberUtils {
+    // Assume these exist and function correctly based on typical implementations
+    private static Integer createInteger(String str) { return Integer.decode(str); }
+    private static Long createLong(String str) { return Long.decode(str); }
+    private static BigInteger createBigInteger(String str) {
+        int index = 0;
+        int radix = 10;
+        boolean negative = false;
+        if (str.startsWith("-")) {
+            negative = true;
+            index++;
+        }
+        if (str.startsWith("0x", index) || str.startsWith("0X", index)) {
+            radix = 16;
+            index += 2;
+        } else if (str.startsWith("#", index)) {
+            radix = 16;
+            index++;
+        } else if (str.startsWith("0", index) && str.length() > index + 1) {
+            // Check for octal if starts with '0' and has more digits
+            // Ensure the string contains only octal digits? Decode handles this.
+            // Let's assume createBigInteger handles octal string correctly if needed.
+            // A robust impl would check octal digits here or use a parser supporting octal.
+             radix = 8;
+             index++;
+        }
+        // If index > 0, we stripped sign or base prefix. Use the rest.
+        String valStr = str.substring(index);
+        if (valStr.isEmpty()) {
+             throw new NumberFormatException("Cannot parse empty string after prefix: " + str);
+        }
+        BigInteger val = new BigInteger(valStr, radix);
+        return negative ? val.negate() : val;
+    }
+    private static Float createFloat(String str) { return Float.valueOf(str); }
+    private static Double createDouble(String str) { return Double.valueOf(str); }
+    private static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }
+    private static boolean isDigits(String str) { return StringUtils.isNumeric(str); }
+    private static boolean isAllZeros(String str) {
+        if (str == null) {
+            return true;
+        }
+        for (int i = 0; i < str.length(); i++) {
+            if (str.charAt(i) != '0') {
+                return false;
+            }
+        }
+        // An empty string is not considered all zeros based on context (e.g., "0.F")
+        return str.length() > 0;
+    }
+    // Static method added from NumberUtils class for the fix
+    public static Float createFloat(final String str) {
+        if (str == null) {
+            return null;
+        }
+        return Float.valueOf(str);
+    }
+
+    // Static method added from NumberUtils class for the fix
+    public static Double createDouble(final String str) {
+        if (str == null) {
+            return null;
+        }
+        return Double.valueOf(str);
+    }
+
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
-     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
-     * </p>
+     * will be interpreted as a hexadecimal Integer, Long, or BigInteger based on the magnitude of the value.</p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
+     * be Integer, Long or BigInteger as appropriate (handled by underlying parser like decode or createBigInteger).
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         // Need to deal with all possible hex prefixes here
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length(); // Use the length of the matched prefix
                 break;
             }
         }
+
+        // *** BEGIN FIX for Hex Numbers ***
         if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
+            final boolean negative = str.startsWith("-");
+            // Get the substring representing hex digits (after prefix)
+            String hexDigitsStr = str.substring(pfxLen);
+
+            // Check if hexDigitsStr is empty (e.g., input "0x")
+            if (hexDigitsStr.isEmpty()) {
+                 throw new NumberFormatException("\"" + str + "\" is not a valid number.");
             }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
+
+            try {
+                // Use BigInteger to parse the hex digits
+                BigInteger val = new BigInteger(hexDigitsStr, 16);
+                if (negative) {
+                    val = val.negate();
                 }
-            return createInteger(str);
+                // Check if the value fits into Integer range
+                if (val.compareTo(BigInteger.valueOf(Integer.MIN_VALUE)) >= 0 && val.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) <= 0) {
+                    return Integer.valueOf(val.intValue());
                 }
+                // Check if the value fits into Long range
+                if (val.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0 && val.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0) {
+                    return Long.valueOf(val.longValue());
+                }
+                // Otherwise, return as BigInteger
+                return val;
+            } catch (final NumberFormatException e) {
+                // Rethrow specific exception if BigInteger parsing fails (e.g., invalid hex chars like 'G')
+                 throw new NumberFormatException("\"" + str + "\" is not a valid number.");
+            }
+        }
+        // *** END FIX for Hex Numbers ***
+
+
+        // Code for non-hex numbers starts here (includes minor corrections from review)
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        // Correctly find exponent position, handling 'e' or 'E' but not both
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
+        // Check if exponent character is the last character, which is invalid
+        if (expPos == str.length() - 1) {
+             throw new NumberFormatException(str + " is not a valid number.");
+        }
 
         int numDecimals = 0; // Check required precision (LANG-693)
         if (decPos > -1) { // there is a decimal point
-
             if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+                if (expPos < decPos) { // exponent cannot appear before decimal point
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
-            } else {
+            } else { // No exponent
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
+            numDecimals = dec.length(); // gets number of digits past the decimal
+        } else { // No decimal point
             if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+                // If no decimal point, exponent cannot be the first character
+                if (expPos == 0) {
                      throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
-            } else {
-                mant = str;
+            } else { // No decimal, no exponent
+                mant = str; // The whole string is the mantissa (integer)
             }
-            dec = null;
+            dec = null; // No decimal part
         }
-        if (!Character.isDigit(lastChar) && lastChar != '.') {
+
+        if (!Character.isDigit(lastChar) && lastChar != '.') { // Check for type suffix
+            // Extract exponent string part if exponent exists and is not followed solely by the suffix
             if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
+                exp = str.substring(expPos + 1, str.length() - 1); // Exclude suffix from exponent part
             } else {
-                exp = null;
+                exp = null; // No exponent part, or exponent was just before suffix
             }
             //Requesting a specific type..
-            final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            final String numeric = str.substring(0, str.length() - 1); // String without the suffix
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Use mantissa/exponent derived from structure
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // Check if the string `numeric` (without L/l suffix) represents a valid integer.
+                    // It should not contain '.', 'e', 'E'.
+                    if (dec == null && exp == null && // Ensure no decimal/exponent was found in the original string structure
+                         // Additionally check the numeric part itself for safety (e.g. "1.L" should fail)
+                         numeric.indexOf('.') == -1 && numeric.indexOf('e') == -1 && numeric.indexOf('E') == -1) {
+
+                        // Check if it contains only digits, possibly with a leading '-'
+                        String numberToCheck = numeric;
+                        boolean negativeFirst = numeric.startsWith("-");
+                        if (negativeFirst) {
+                            numberToCheck = numeric.substring(1);
+                        }
+                        // Ensure it's not empty after removing sign (e.g. "-L") and contains only digits.
+                        if (!numberToCheck.isEmpty() && isDigits(numberToCheck)) {
                             try {
+                                // Use createLong on the original numeric string (with sign if present)
                                 return createLong(numeric);
                             } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+                                // Fallback to BigInteger if Long fails (e.g., too large).
+                                // Assumes createBigInteger handles decimal/octal correctly based on prefix.
                                 return createBigInteger(numeric);
-
                             }
+                        }
+                    }
+                    // If format conditions are not met, it's an invalid number.
                     throw new NumberFormatException(str + " is not a valid number.");
+
                 case 'f' :
                 case 'F' :
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                        final Float f = NumberUtils.createFloat(numeric); // Use NumberUtils static method
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                            // Check if the float value represents the original number accurately enough.
+                            // The original code didn't have further checks here.
                             return f;
                         }
-
                     } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // Ignore NFE and fall through to try Double/BigDecimal
                     }
                     //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        final Double d = NumberUtils.createDouble(numeric); // Use NumberUtils static method
+                        // Corrected check: use d.doubleValue() instead of d.floatValue()
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // Ignore NFE and fall through to try BigDecimal
                     }
+                    //$FALL-THROUGH$
+                    // Try BigDecimal as a last resort for f/F/d/D suffixes
                     try {
                         return createBigDecimal(numeric);
                     } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                        // If BigDecimal also fails, then the input is truly invalid.
+                        // Fall through to default case which throws NFE.
                     }
                     //$FALL-THROUGH$
                 default :
+                    // Invalid suffix or BigDecimal parsing failed after fall-through
                     throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
 
-            }
-        }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
+        // No type suffix, handle as Integer/Long/BigInteger or Float/Double/BigDecimal
+        // Extract exponent string part if present (runs to the end of the string now)
         if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
+            exp = str.substring(expPos + 1);
         } else {
+             // If expPos == -1, exp remains null. If expPos invalid, already threw exception.
              exp = null;
         }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+
+        if (dec == null && exp == null) { // No decimal point and no exponent: Integer types
+             // Potential octal handled by createInteger/createLong/createBigInteger
             try {
-                return createInteger(str);
+                return createInteger(str); // Handles decimal, octal (if starts with 0)
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             try {
-                return createLong(str);
+                return createLong(str); // Handles decimal, octal
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
-            return createBigInteger(str);
+            // Finally, try BigInteger. Need to ensure createBigInteger handles octal correctly if needed.
+             return createBigInteger(str); // Handles decimal, should handle octal
+
         }
 
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        // Has decimal point or exponent: Floating point types
+        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Use mant/exp derived from structure
+        // Try Float/Double based on original heuristic (LANG-693)
         try {
             if (numDecimals <= 7) { // If number has 7 or fewer digits past the decimal point then make it a float
                 final Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
             }
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
         try {
              if (numDecimals <= 16) { // If number has between 8 and 16 digits past the decimal point then make it a double
                 final Double d = createDouble(str);
+                 // Corrected check: use d.doubleValue()
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
             }
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
 
+        // Final fallback for floating point numbers is BigDecimal
         return createBigDecimal(str);
     }
+}
