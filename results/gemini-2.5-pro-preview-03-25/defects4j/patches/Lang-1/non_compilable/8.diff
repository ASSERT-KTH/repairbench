diff --git a/tmp/2e0e0483-8416-48d9-a568-36fba44d10c0_buggy.java b/tmp/0277eda6-3b5a-4339-bb5b-74c5bb313736_fixed.java
index e1cbe77..0250e46 100644
--- a/tmp/2e0e0483-8416-48d9-a568-36fba44d10c0_buggy.java
+++ b/tmp/0277eda6-3b5a-4339-bb5b-74c5bb313736_fixed.java
@@ -1,196 +1,271 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
     * <code>BigDecimal</code>.</p>
     *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
      * be Integer, Long or BigDecimal as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         // Need to deal with all possible hex prefixes here
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length(); // Fixed: Changed += to =
                 break;
             }
         }
         if (pfxLen > 0) { // we have a hex number
             final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
+
+            if (hexDigits > 16) { // More than 16 hex digits must be BigInteger
                 return createBigInteger(str);
             }
-            if (hexDigits > 8) { // too many for an int
+            // 1 to 16 hex digits remaining
+
+            if (hexDigits > 8) { // 9 to 16 hex digits
+                // Potential Long or BigInteger
+                try {
+                    // This might throw NFE for numbers > Long.MAX_VALUE or < Long.MIN_VALUE
+                    // e.g. "0x8000000000000000"
                     return createLong(str);
+                } catch (final NumberFormatException nfe) {
+                    // If createLong fails (likely due to overflow), use BigInteger
+                    return createBigInteger(str);
                 }
+            } else { // hexDigits <= 8
+                // Potential Integer or Long
+                try {
+                    // This might throw NFE for numbers > Integer.MAX_VALUE or < Integer.MIN_VALUE
+                    // e.g. "0x80000000"
                     return createInteger(str);
+                } catch (final NumberFormatException nfe) {
+                    // If createInteger fails (likely due to overflow), use Long.
+                    // Since hexDigits <= 8, it's guaranteed to fit in a Long.
+                    return createLong(str);
                 }
+            }
+        }
+
+        // Non-hex number processing starts here
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
         final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
         // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
         // and the parsing which will detect if e or E appear in a number due to using the wrong offset
 
         int numDecimals = 0; // Check required precision (LANG-693)
         if (decPos > -1) { // there is a decimal point
 
             if (expPos > -1) { // there is an exponent
                 if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
             numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
         } else {
             if (expPos > -1) {
                 if (expPos > str.length()) { // prevents double exponent causing IOOBE
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar) && lastChar != '.') {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
             final String numeric = str.substring(0, str.length() - 1);
+            // isAllZeros check depends on parsed mantissa and exponent, potentially null
             final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
                     if (dec == null
-                        && exp == null
+                        && exp == null // Ensure 'L' is not preceded by 'e' or 'E'
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
+                            // First try Long. If NFE, assume it's too big for Long.
                             return createLong(numeric);
                         } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                            // Fallback to BigInteger for numbers too large for Long
                         }
                         return createBigInteger(numeric);
 
                     }
+                    // Invalid format for 'L' suffix (e.g., has '.', 'e', or non-digits)
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                        final Float f = createFloat(numeric);
+                        // Check for infinity and for lossy zero conversion
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                            // If it parses okay and isn't infinite or a zero losing non-zero digits, return it.
+                            // Note: This doesn't guarantee precision for large numbers.
                             return f;
                         }
+                        // If Float resulted in Infinite or zero loss, fall through to Double/BigDecimal
 
                     } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // ignore the bad number, maybe it's valid for Double or BigDecimal
                     }
                     //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        final Double d = createDouble(numeric);
+                         // Check for infinity and for lossy zero conversion
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Use doubleValue()
                             return d;
                         }
+                        // If Double resulted in Infinite or zero loss, fall through to BigDecimal
                     } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // ignore the bad number, maybe it's valid for BigDecimal
                     }
                     try {
+                        // Last resort for 'f', 'F', 'd', 'D' is BigDecimal
                         return createBigDecimal(numeric);
                     } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                        // ignore the bad number if BigDecimal also fails
                     }
                     //$FALL-THROUGH$
                 default :
+                    // Any other non-digit character is invalid
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
+        // User doesn't have a preference on the return type (no suffix)
+        // Start small and go from there...
+
         if (expPos > -1 && expPos < str.length() - 1) {
+            // Extract exponent if present and valid
             exp = str.substring(expPos + 1, str.length());
         } else {
             exp = null;
         }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+
+        // Handle non-hex integers (potentially octal)
+        if (dec == null && exp == null) { // No decimal point and no exponent
+            // Could be Integer, Long, Biginteger, or Octal
+            // Handle Octal (leading '0' followed by 0-7)
+            if (str.startsWith("0") && str.length() > 1) {
+                boolean isOctal = true;
+                for (int i = 1; i < str.length(); i++) {
+                    char c = str.charAt(i);
+                    if (c < '0' || c > '7') {
+                        isOctal = false;
+                        break;
+                    }
+                }
+                if (isOctal) {
+                    try {
+                        // Use same overflow logic as hex: try Integer -> Long -> BigInteger
+                        try {
+                            return createInteger(str); // Assumes createInteger handles octal via decode()
+                        } catch (NumberFormatException nfe1) {
+                           try {
+                                return createLong(str); // Assumes createLong handles octal via decode()
+                           } catch (NumberFormatException nfe2){
+                               return createBigInteger(str); // For octal numbers > Long.MAX_VALUE
+                           }
+                       }
+                    } catch (NumberFormatException nfeOctal) { // Should not happen if createX use decode
+                       // Rethrow original NFE if low-level parsing fails unexpectedly
+                       throw new NumberFormatException("Cannot parse octal '" + str + "'", nfeOctal);
+                    }
+                }
+                // If not octal (e.g., "09"), fall through to decimal parsing
+            }
+
+            // Try decimal Integer -> Long -> BigInteger
             try {
                 return createInteger(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             try {
                 return createLong(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
-            return createBigInteger(str);
+            return createBigInteger(str); // Fallback for large integers
         }
 
-        //Must be a Float, Double, BigDecimal
+        // Must be a Float, Double, or BigDecimal (contains '.' or 'e'/'E')
         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         try {
-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
+            // Try Float if precision seems okay (LANG-693 heuristic)
+            if(numDecimals <= 7){ // If number has 7 or fewer digits past the decimal point
                 final Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+                    // Check if the string representation matches the float value exactly
+                    // This check is problematic, rely on limited decimal places for now
+                    // Alternative: Check if BigDecimal(str).equals(BigDecimal(f.toString()))? Too complex.
+                    // Let's return float based on decimal count heuristic.
                     return f;
                 }
             }
         } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+            // ignore the bad number, try Double
         }
         try {
-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
+            // Try Double if precision seems okay (LANG-693 heuristic)
+             if(numDecimals <= 16){ // If number has between 8 and 16 digits past the decimal point
                 final Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                     // Return double based on decimal count heuristic.
                     return d;
                 }
             }
         } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+            // ignore the bad number, try BigDecimal
         }
 
+        // Fallback to BigDecimal for best precision or if others failed/overflowed
         return createBigDecimal(str);
     }
\ No newline at end of file
