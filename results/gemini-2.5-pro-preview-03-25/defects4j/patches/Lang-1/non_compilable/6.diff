diff --git a/tmp/a09f0a34-6164-4b29-9065-4aabe55c978d_buggy.java b/tmp/162df93a-d29e-4a5e-ad92-8e790d1fd2fc_fixed.java
index e1cbe77..3f09417 100644
--- a/tmp/a09f0a34-6164-4b29-9065-4aabe55c978d_buggy.java
+++ b/tmp/162df93a-d29e-4a5e-ad92-8e790d1fd2fc_fixed.java
@@ -1,196 +1,296 @@
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
+// Assume helper classes like StringUtils and helper methods like
+// createFloat, createDouble, createInteger, createLong, createBigInteger, createBigDecimal,
+// isAllZeros, isDigits are available and function correctly.
+// The fix focuses on the logic within createNumber, particularly hex parsing.
+
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
+     * The exact type is chosen to hold the value without loss: if a positive hex value
+     * requires more than 31 bits ({@code > 0x7FFFFFFF}), a Long is returned. If it requires
+     * more than 63 bits ({@code > 0x7FFFFFFFFFFFFFFF}), a BigInteger is returned.
+     * Negative hex values are parsed using the create methods for Integer, Long, or BigInteger
+     * as appropriate, potentially returning {@code Integer.MIN_VALUE} or {@code Long.MIN_VALUE}.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
     * <code>BigDecimal</code>.</p>
     *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
+     * be Integer, Long or BigDecimal as appropriate. Assumes the createInteger/Long/BigInteger methods handle octal.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         // Need to deal with all possible hex prefixes here
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length(); // Assign prefix length
                 break;
             }
         }
         if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
+             // Check for digits after the prefix. "" is invalid e.g. "0x"
+            if (pfxLen == str.length()) {
+                 throw new NumberFormatException(str + " is not a valid number.");
+            }
+            final boolean negative = str.startsWith("-");
+            String hexStr = str.substring(pfxLen); // String containing hex digits only
+            int hexDigits = hexStr.length();
+
+            if (hexDigits > 16) {
+                // Value is definitely too big for Long, must use BigInteger
+                return createBigInteger(str);
+            }
+            if (hexDigits == 16) {
+                // Could be Long.MIN_VALUE or a value requiring BigInteger (if positive and >= 0x8...)
+                if (negative) {
+                     // Let createLong handle Long.MIN_VALUE (-0x8000...)
+                     // Fallback to BigInteger for values more negative than Long.MIN_VALUE (e.g., -0xFFF...)
+                     // This assumes createLong uses Long.decode or similar which handles MIN_VALUE
+                     // and createBigInteger handles larger negative hex numbers.
+                     try {
+                        return createLong(str);
+                     } catch (NumberFormatException nfe) {
+                        // If createLong fails, assume it's because the value is outside Long's range
                         return createBigInteger(str);
                      }
-            if (hexDigits > 8) { // too many for an int
+                } else {
+                    // Positive 16 hex digits. Parse using BigInteger to correctly handle values >= 2^63.
+                    BigInteger bi = createBigInteger(str);
+                    // Check if the value fits in a Long (i.e., is <= Long.MAX_VALUE, which is 0x7FFFFFFFFFFFFFFF)
+                    // Positive numbers fit if their bitLength is 63 or less.
+                    if (bi.bitLength() <= 63) {
+                         return bi.longValue(); // Use Long if it fits
+                    }
+                    return bi; // Use BigInteger if value requires more than 63 bits (i.e., >= 0x8000...)
+                }
+            }
+            // 9 to 15 hex digits
+            if (hexDigits > 8) {
+                 // Value fits in Long, but not Integer
                  return createLong(str);
             }
+            // 1 to 8 hex digits
+            if (negative) {
+                // Could be Integer.MIN_VALUE or a value requiring Long
+                // Let createInteger handle Integer.MIN_VALUE (-0x8000...)
+                // Fallback to Long for values more negative than Integer.MIN_VALUE (e.g., -0xFFF...)
+                // This assumes createInteger uses Integer.decode or similar.
+                 try {
                     return createInteger(str);
+                 } catch (NumberFormatException nfe) {
+                    // If createInteger fails, assume it's because the value is outside Integer's range
+                    return createLong(str);
+                 }
+            } else {
+                // Positive 1 to 8 hex digits. Could be Integer or Long.
+                if (hexDigits == 8) {
+                    // Parse as Long first to correctly handle values >= 2^31 (0x80000000).
+                    Long val = createLong(str);
+                    // Check if the value fits in an Integer (i.e., is <= Integer.MAX_VALUE, which is 0x7FFFFFFF)
+                    if (val <= Integer.MAX_VALUE) {
+                        return val.intValue(); // Use Integer if it fits
+                    }
+                    return val; // Use Long if value requires more than 31 bits (i.e., >= 0x80000000)
+                } else {
+                    // 1 to 7 hex digits, always fits within Integer
+                    return createInteger(str);
+                }
+            }
         }
+
+        // Non-hexadecimal numbers below
+
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        // Correct calculation of exponent position: find first 'e' or 'E'
+        int expPos = str.indexOf('e');
+        if (expPos == -1) {
+            expPos = str.indexOf('E');
+        }
 
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
-
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+        // Split the string into mantissa, decimal, and exponent parts
+        if (decPos > -1) { // Contains a decimal point
+            if (expPos > -1) { // Contains exponent indicator 'e' or 'E'
+                if (expPos < decPos || expPos >= str.length()) { // Exponent indicator must be after decimal point and not at the end
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
-            } else {
+                mant = str.substring(0, decPos);
+            } else { // No exponent indicator
                 dec = str.substring(decPos + 1);
-            }
                 mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
-        } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+            }
+        } else { // No decimal point
+            if (expPos > -1) { // Contains exponent indicator 'e' or 'E'
+                if (expPos >= str.length()) { // Exponent indicator cannot be at the end
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
-            } else {
-                mant = str;
+            } else { // No decimal point, no exponent indicator (potential integer)
+                mant = str; // Mantissa is the whole string initially
             }
-            dec = null;
+            dec = null; // No decimal part
         }
+
+        // Check if String ends in a Type Qualifier (L, F, D)
         if (!Character.isDigit(lastChar) && lastChar != '.') {
+            // Determine exponent string if qualifier is present
             if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
+                exp = str.substring(expPos + 1, str.length() - 1); // Exclude qualifier
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
+            // Get the numeric part (string without qualifier)
             final String numeric = str.substring(0, str.length() - 1);
+            // isAllZeros check needs to handle potential exponent part correctly
             final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                    // Check if it's a valid long format (no decimal, no exponent string extracted above)
+                    // Also check if the numeric part is effectively digits (allowing for a leading sign)
+                    if (dec == null && exp == null && (numeric.isEmpty() ? false : (numeric.charAt(0) == '-' ? isDigits(numeric.substring(1)) : isDigits(numeric))) ) {
                          try {
+                            // Use helper method assuming it handles potential range issues if needed (though L implies Long)
                             return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
-                        }
+                        } catch (final NumberFormatException nfe) {
+                            // If createLong fails (e.g., too large, although unlikely with 'L' suffix), try BigInteger
                             return createBigInteger(numeric);
-
                         }
+                    }
+                    // If format is invalid for L/l qualifier
                     throw new NumberFormatException(str + " is not a valid number.");
+
                 case 'f' :
                 case 'F' :
                     try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                        final Float f = createFloat(numeric);
+                        // Check if Float representation is valid (not infinite, and not zero if original wasn't all zeros)
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
+                        // If Float is not valid (infinite or zero mismatch), fall through to try Double/BigDecimal
                     } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                        // Ignore NFE from createFloat, proceed to Double/BigDecimal check below
                     }
                     //$FALL-THROUGH$
+
                 case 'd' :
                 case 'D' :
                     try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        final Double d = createDouble(numeric);
+                        // Check if Double representation is valid (not infinite, and not zero if original wasn't all zeros)
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
+                        // If Double is not valid (infinite or zero mismatch), fall through to try BigDecimal
                     } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                         // Ignore NFE from createDouble, proceed to BigDecimal check below
                     }
+                    //$FALL-THROUGH$
+
+                    // Final attempt for F/f/D/d: use BigDecimal (most precise)
                     try {
                         return createBigDecimal(numeric);
                     } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                         // If BigDecimal also fails, the number format is invalid
                     }
+                    // If all attempts fail, fall through to default error case
                     //$FALL-THROUGH$
+
                 default :
+                    // If last char is not a digit, '.', or a handled qualifier (L,F,D)
+                    throw new NumberFormatException(str + " is not a valid number.");
+            }
+             // This point is reached if F/f/D/d processing failed even with BigDecimal
              throw new NumberFormatException(str + " is not a valid number.");
-
         }
+
+        // No type qualifier: Determine type based on format
+
+        // Determine exponent string if no qualifier is present
+        if (expPos > -1 && expPos < str.length()) {
+            // Check if char after e/E is valid (+,-,digit)
+            char charAfterExp = (expPos + 1 < str.length()) ? str.charAt(expPos + 1) : 0;
+            if (charAfterExp == '+' || charAfterExp == '-' || Character.isDigit(charAfterExp)) {
+                 exp = str.substring(expPos + 1);
+             } else {
+                 // Invalid character after exponent symbol
+                 throw new NumberFormatException(str + " is not a valid number.");
              }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
         } else {
             exp = null;
         }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+
+        if (dec == null && exp == null) { // Integral number (potentially octal)
+            // Try Integer -> Long -> BigInteger
+            // Assumes createInteger/Long/BigInteger handle octal prefixes correctly
             try {
                 return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
+            } catch (final NumberFormatException nfe) { /* Ignore */ }
             try {
                 return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
-            }
+            } catch (final NumberFormatException nfe) { /* Ignore */ }
+            // Final fallback for integers is BigInteger
             return createBigInteger(str);
-        }
 
-        //Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        } else { // Floating point number (contains decimal or exponent)
+            // Try Float -> Double -> BigDecimal
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Recheck allZeros based on final mant/exp split
             try {
-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
                 final Float f = createFloat(str);
+                // Check for infinite/zero issues, return if valid float
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
-            }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
-        }
+            } catch (final NumberFormatException nfe) { /* Ignore */ }
             try {
-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
                 final Double d = createDouble(str);
+                 // Check for infinite/zero issues, return if valid double
                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
-            }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
-        }
-
+            } catch (final NumberFormatException nfe) { /* Ignore */ }
+            // Final fallback for floating point is BigDecimal
             return createBigDecimal(str);
         }
+    }
+
+    // Assume necessary helper methods like createInteger, createLong, createBigInteger,
+    // createFloat, createDouble, createBigDecimal, StringUtils.isBlank, isAllZeros, isDigits
+    // exist and function correctly, including handling prefixes (0x, #, 0) appropriately.
