diff --git a/tmp/371ab62c-d11e-4951-8324-6eb6f9e0ecde_buggy.java b/tmp/e89137e0-30f3-4402-a371-515eb7a9ebc1_fixed.java
index 0722547..14e8644 100644
--- a/tmp/371ab62c-d11e-4951-8324-6eb6f9e0ecde_buggy.java
+++ b/tmp/e89137e0-30f3-4402-a371-515eb7a9ebc1_fixed.java
@@ -1,26 +1,51 @@
     @Override
     public void feedInput(byte[] buf, int start, int end) throws IOException
     {
         // Must not have remaining input
         if (_inputPtr < _inputEnd) {
             _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
         }
         if (end < start) {
             _reportError("Input end (%d) may not be before start (%d)", end, start);
         }
         // and shouldn't have been marked as end-of-input
         if (_endOfInput) {
             _reportError("Already closed, can not feed more input");
         }
-        // Time to update pointers first
-        _currInputProcessed += _origBufferLen;
 
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
-        _currInputRowStart = start - (_inputEnd - _currInputRowStart);
+        // Store previous state needed for calculations
+        // Note: _currInputProcessed is the offset prior to byte 0 of the previous _inputBuffer
+        // _inputEnd is the end pointer in the previous _inputBuffer
+        long prevInputProcessed = _currInputProcessed;
+        int prevInputEnd = _inputEnd;
+        int prevInputRowStart = _currInputRowStart;
+
+        // Calculate the ABSOLUTE byte offset for the start of the new buffer segment (buf[start]).
+        // This is the offset up to the end of the previous buffer.
+        // Note: calculation `prevInputProcessed + prevInputEnd` assumes that the previous buffer
+        // segment logically started at index 0 relative to `prevInputProcessed`. This holds
+        // if `_currInputProcessed` is defined as `absolute_offset_of_buffer[0]`.
+        // Let's redefine `_currInputProcessed` to be `absolute_offset_of_buffer[start] - start`.
+        // Then the absolute offset of previous buffer end is `prevInputProcessed + prevInputEnd`.
+        long absoluteStartOffset = prevInputProcessed + prevInputEnd;
+
+        // Calculate the new _currInputProcessed. It's defined such that:
+        // Absolute offset of buf[ptr] == _currInputProcessed + ptr
+        // We know Absolute offset of buf[start] == absoluteStartOffset
+        // So, new _currInputProcessed + start == absoluteStartOffset
+        // -> new _currInputProcessed = absoluteStartOffset - start
+        // This ensures that base class calculations using `_currInputProcessed + _inputPtr` work correctly.
+        _currInputProcessed = absoluteStartOffset - start;
+
+        // Also need to adjust row start column index. Calculation uses previous state
+        // (_inputEnd, _currInputRowStart) and the 'start' of the new buffer segment.
+        // This formula ensures column number continuity.
+        _currInputRowStart = start - (prevInputEnd - prevInputRowStart);
 
         // And then update buffer settings
         _inputBuffer = buf;
         _inputPtr = start;
         _inputEnd = end;
+        // _origBufferLen is used by some methods (like close()), reflects length of the CURRENT buffer segment
         _origBufferLen = end - start;
     }
\ No newline at end of file
