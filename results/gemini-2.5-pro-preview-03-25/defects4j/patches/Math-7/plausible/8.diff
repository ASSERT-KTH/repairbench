diff --git a/tmp/10219e0f-1a05-4aac-a248-92a9525deb90_buggy.java b/tmp/52cca0fb-f381-4ae9-b199-02c7036d84b2_fixed.java
index b4d4f38..3521553 100644
--- a/tmp/10219e0f-1a05-4aac-a248-92a9525deb90_buggy.java
+++ b/tmp/52cca0fb-f381-4ae9-b199-02c7036d84b2_fixed.java
@@ -1,123 +1,149 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MaxCountExceededException if the interpolator throws one because
      * the number of functions evaluations is exceeded
      * @exception NoBracketingException if the location of an event cannot be bracketed
      * @exception DimensionMismatchException if arrays dimensions do not match equations settings
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
 
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
             // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
                 /** {@inheritDoc} */
                 public int compare(EventState es0, EventState es1) {
+                    // comparing NaN values is bad, default to returning 0
+                    // which will throw an exception in the TreeSet
+                    if(Double.isNaN(es0.getEventTime()) || Double.isNaN(es1.getEventTime())) {
+                       return 0;
+                    }
                     return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
                 }
 
             });
 
+            // Initialize the set of occuring events for the current step interval
             for (final EventState state : eventsStates) {
                 if (state.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(state);
                 }
             }
 
-            while (!occuringEvents.isEmpty()) {
+            boolean stepFinished = false;
+            while (!stepFinished) {
 
+                if (occuringEvents.isEmpty()) {
+                    // No more events detected in the remaining interval [previousT, currentT]
+                    stepFinished = true;
+
+                } else {
                     // handle the chronologically first event
                     final Iterator<EventState> iterator = occuringEvents.iterator();
                     final EventState currentEvent = iterator.next();
-                iterator.remove();
+                    // Note: We do not remove the event from the set now.
+                    // If the event does not stop or reset the integration, we will need to
+                    // re-evaluate all events for the remaining time interval, including this one.
 
                     // restrict the interpolator to the first part of the step, up to the event
                     final double eventT = currentEvent.getEventTime();
                     interpolator.setSoftPreviousTime(previousT);
                     interpolator.setSoftCurrentTime(eventT);
 
                     // get state at event time
                     interpolator.setInterpolatedTime(eventT);
+                    // we need to clone the state because it may be modified by the event handler
                     final double[] eventY = interpolator.getInterpolatedState().clone();
 
-                // advance all event states to current time
-                currentEvent.stepAccepted(eventT, eventY);
+                    // advance all event states to the event time
+                    for (EventState state : eventsStates) {
+                        state.stepAccepted(eventT, eventY);
+                    }
+
+                    // handle the consequences of the event occurrence
                     isLastStep = currentEvent.stop();
 
-                // handle the first part of the step, up to the event
+                    // handle the step, notifying step handlers
                     for (final StepHandler handler : stepHandlers) {
                         handler.handleStep(interpolator, isLastStep);
                     }
 
                     if (isLastStep) {
                         // the event asked to stop integration
                         System.arraycopy(eventY, 0, y, 0, y.length);
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
-                    }
+                        // The step and integration end here
                         return eventT;
                     }
 
                     boolean needReset = currentEvent.reset(eventT, eventY);
                     if (needReset) {
                         // some event handler has triggered changes that
                         // invalidate the derivatives, we need to recompute them
                         System.arraycopy(eventY, 0, y, 0, y.length);
                         computeDerivatives(eventT, y, yDot);
                         resetOccurred = true;
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
-                    }
+                        // The step ends here, and the integrator will start a new step from eventT
                         return eventT;
                     }
 
-                // prepare handling of the remaining part of the step
+                    // Event handler has continued integration, prepare handling of the remaining part of the step
                     previousT = eventT;
                     interpolator.setSoftPreviousTime(eventT);
                     interpolator.setSoftCurrentTime(currentT);
 
-                // check if the same event occurs again in the remaining part of the step
-                if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
+                    // Re-evaluate all events for the remaining interval [eventT, currentT]
+                    // The previous check might have been impacted by the state change at eventT
+                    // or by the time advancement. We need a fresh evaluation.
+                    occuringEvents.clear();
+                    for (final EventState state : eventsStates) {
+                        // Evaluate the G function over the new interval [eventT, currentT]
+                        if (state.evaluateStep(interpolator)) {
+                            // the event occurs during the remaining part of the step
+                            occuringEvents.add(state);
+                        }
+                    }
+                    // Continue loop with the updated set of occurring events
                 }
-
             }
 
-            // last part of the step, after the last event
+            // The step has been processed successfully up to currentT (no stop or reset event occurred)
             interpolator.setInterpolatedTime(currentT);
-            final double[] currentY = interpolator.getInterpolatedState();
+            final double[] currentY = interpolator.getInterpolatedState(); // State at the end of the step
+            // Ensure all events states have their internal states updated to currentT
             for (final EventState state : eventsStates) {
                 state.stepAccepted(currentT, currentY);
+                // Check if any event triggers a stop condition exactly at the end of the step
+                // NOTE: This behavior might depend on the event handler's logic for stop()
                 isLastStep = isLastStep || state.stop();
             }
+            // The step is also the last one if it reaches the final integration time
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
-            // handle the remaining part of the step, after all events if any
+            // handle the full step or the remaining part, notifying step handlers
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
             return currentT;
 
     }
\ No newline at end of file
