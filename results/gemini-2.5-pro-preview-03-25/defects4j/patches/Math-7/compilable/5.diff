diff --git a/tmp/bdfa1439-2401-4f52-8ec8-88a33f646c5e_buggy.java b/tmp/071328a9-b35e-441b-a797-27734a9bc4c3_fixed.java
index b4d4f38..0cfa0a3 100644
--- a/tmp/bdfa1439-2401-4f52-8ec8-88a33f646c5e_buggy.java
+++ b/tmp/071328a9-b35e-441b-a797-27734a9bc4c3_fixed.java
@@ -1,123 +1,147 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MaxCountExceededException if the interpolator throws one because
      * the number of functions evaluations is exceeded
      * @exception NoBracketingException if the location of an event cannot be bracketed
      * @exception DimensionMismatchException if arrays dimensions do not match equations settings
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
 
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
             // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
                 /** {@inheritDoc} */
                 public int compare(EventState es0, EventState es1) {
                     return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
                 }
 
             });
 
             for (final EventState state : eventsStates) {
                 if (state.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(state);
                 }
             }
 
             while (!occuringEvents.isEmpty()) {
 
                 // handle the chronologically first event
                 final Iterator<EventState> iterator = occuringEvents.iterator();
                 final EventState currentEvent = iterator.next();
                 iterator.remove();
 
                 // restrict the interpolator to the first part of the step, up to the event
                 final double eventT = currentEvent.getEventTime();
                 interpolator.setSoftPreviousTime(previousT);
                 interpolator.setSoftCurrentTime(eventT);
 
                 // get state at event time
                 interpolator.setInterpolatedTime(eventT);
+                // Cloned is needed here to prevent subsequent changes from interfering
+                // with the event handler behavior. The event handler might very well
+                // compute linear combinations of states for finding exact event time,
+                // so its needs immutable states. Event handlers may also reset the
+                // state, but this is handled later.
                 final double[] eventY = interpolator.getInterpolatedState().clone();
 
-                // advance all event states to current time
+                // advance event state to event time
                 currentEvent.stepAccepted(eventT, eventY);
-                isLastStep = currentEvent.stop();
+                // check possible actions for the event
+                final boolean stopIntegration = currentEvent.stop();
+                final boolean resetState      = currentEvent.reset(eventT, eventY);
 
                 // handle the first part of the step, up to the event
                 for (final StepHandler handler : stepHandlers) {
-                    handler.handleStep(interpolator, isLastStep);
+                    // isLastStep is true only if this event triggers a stop
+                    handler.handleStep(interpolator, stopIntegration);
                 }
 
-                if (isLastStep) {
+                if (stopIntegration) {
                     // the event asked to stop integration
                     System.arraycopy(eventY, 0, y, 0, y.length);
+                    // Ensure remaining events state are updated before returning
                     for (final EventState remaining : occuringEvents) {
                         remaining.stepAccepted(eventT, eventY);
                     }
+                    this.isLastStep = true; // Set the global flag
                     return eventT;
                 }
 
-                boolean needReset = currentEvent.reset(eventT, eventY);
-                if (needReset) {
+                if (resetState) {
                     // some event handler has triggered changes that
                     // invalidate the derivatives, we need to recompute them
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
+                    // Ensure remaining events state are updated before returning
                     for (final EventState remaining : occuringEvents) {
                         remaining.stepAccepted(eventT, eventY);
                     }
-                    return eventT;
+                    return eventT; // Return the event time to force the integrator to restart
                 }
 
                 // prepare handling of the remaining part of the step
                 previousT = eventT;
                 interpolator.setSoftPreviousTime(eventT);
                 interpolator.setSoftCurrentTime(currentT);
 
                 // check if the same event occurs again in the remaining part of the step
                 if (currentEvent.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(currentEvent);
                 }
 
-            }
+            } // End of event handling loop
 
-            // last part of the step, after the last event
+
+            // Process the final part of the step, from previousT to currentT
             interpolator.setInterpolatedTime(currentT);
-            final double[] currentY = interpolator.getInterpolatedState();
+            // Clone the state to safely update event states
+            final double[] currentY = interpolator.getInterpolatedState().clone();
+
+            // Advance all event states to the end of the step
             for (final EventState state : eventsStates) {
                 state.stepAccepted(currentT, currentY);
-                isLastStep = isLastStep || state.stop();
+                // ** BUG FIX: Do not update isLastStep based on state.stop() evaluated at currentT **
+                // isLastStep = isLastStep || state.stop(); // Removed/Commented out
             }
-            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
+
+            // Check if the end of the integration has been reached
+            // Note: isLastStep is a member variable, it could be true if already stopped by an event
+            this.isLastStep = this.isLastStep || Precision.equals(currentT, tEnd, 1);
 
             // handle the remaining part of the step, after all events if any
+            // Ensure the interpolator has the correct interval [previousT, currentT]
+            interpolator.setSoftPreviousTime(previousT);
+            interpolator.setSoftCurrentTime(currentT);
             for (StepHandler handler : stepHandlers) {
-                handler.handleStep(interpolator, isLastStep);
+                // Pass the final isLastStep status. If an event stopped integration earlier,
+                // this code piece is not reached. If we are here, isLastStep is true
+                // only if currentT is close to tEnd.
+                handler.handleStep(interpolator, this.isLastStep);
             }
 
-            return currentT;
+            return currentT; // Return the actual end time of the step
 
     }
\ No newline at end of file
