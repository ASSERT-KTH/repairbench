diff --git a/tmp/11e61821-05f2-4487-9ae1-b8c5d1f53b9a_buggy.java b/tmp/0a3138e2-ccc1-45b4-8404-0f670e8c7eac_fixed.java
index b4d4f38..a7bc12f 100644
--- a/tmp/11e61821-05f2-4487-9ae1-b8c5d1f53b9a_buggy.java
+++ b/tmp/0a3138e2-ccc1-45b4-8404-0f670e8c7eac_fixed.java
@@ -1,123 +1,135 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MaxCountExceededException if the interpolator throws one because
      * the number of functions evaluations is exceeded
      * @exception NoBracketingException if the location of an event cannot be bracketed
      * @exception DimensionMismatchException if arrays dimensions do not match equations settings
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
 
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
 
             // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
 
             // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
                 /** {@inheritDoc} */
                 public int compare(EventState es0, EventState es1) {
                     return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
                 }
 
             });
 
             for (final EventState state : eventsStates) {
                 if (state.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(state);
                 }
             }
 
             while (!occuringEvents.isEmpty()) {
 
                 // handle the chronologically first event
                 final Iterator<EventState> iterator = occuringEvents.iterator();
                 final EventState currentEvent = iterator.next();
                 iterator.remove();
 
                 // restrict the interpolator to the first part of the step, up to the event
                 final double eventT = currentEvent.getEventTime();
                 interpolator.setSoftPreviousTime(previousT);
                 interpolator.setSoftCurrentTime(eventT);
 
-                // get state at event time
+                // get state at event time; create a clone as it may be modified by resetState
                 interpolator.setInterpolatedTime(eventT);
                 final double[] eventY = interpolator.getInterpolatedState().clone();
 
-                // advance all event states to current time
+                // update the state vector according to the event handler function
+                // Note: This might trigger eventOccurred if event happens exactly at eventT
                 currentEvent.stepAccepted(eventT, eventY);
                 isLastStep = currentEvent.stop();
 
                 // handle the first part of the step, up to the event
                 for (final StepHandler handler : stepHandlers) {
                     handler.handleStep(interpolator, isLastStep);
                 }
 
                 if (isLastStep) {
                     // the event asked to stop integration
+                    // make sure state vector is updated to event state at stop time
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     for (final EventState remaining : occuringEvents) {
+                        // Notify remaining events that step ended prematurely
                         remaining.stepAccepted(eventT, eventY);
                     }
                     return eventT;
                 }
 
-                boolean needReset = currentEvent.reset(eventT, eventY);
+
+                // Check if the event handler requests state reset
+                // Note: reset() modifies the main state array 'y' directly
+                boolean needReset = currentEvent.reset(eventT, y);
                 if (needReset) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
-                    System.arraycopy(eventY, 0, y, 0, y.length);
+                    // The main state vector 'y' has been modified by the event handler's resetState method.
+                    // We need to recompute derivatives with this new state.
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
+                    // Update the internal state of remaining events using the reset state (now in y).
                     for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
+                        remaining.stepAccepted(eventT, y);
                     }
+                    // Integration effectively restarts from eventT with the reset state.
                     return eventT;
                 }
 
                 // prepare handling of the remaining part of the step
                 previousT = eventT;
                 interpolator.setSoftPreviousTime(eventT);
                 interpolator.setSoftCurrentTime(currentT);
 
                 // check if the same event occurs again in the remaining part of the step
                 if (currentEvent.evaluateStep(interpolator)) {
                     // the event occurs during the current step
                     occuringEvents.add(currentEvent);
                 }
 
-            }
+            } // End of event handling loop
 
-            // last part of the step, after the last event
+            // The step ends at currentT (no event caused an early stop or reset)
             interpolator.setInterpolatedTime(currentT);
             final double[] currentY = interpolator.getInterpolatedState();
+
+            // Update the internal state of all event handlers for the end of the step
             for (final EventState state : eventsStates) {
                 state.stepAccepted(currentT, currentY);
-                isLastStep = isLastStep || state.stop();
+                isLastStep = isLastStep || state.stop(); // Check if any event triggers stop at step end
             }
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
             // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
 
-            return currentT;
+            // Update the main state vector y to the state at currentT
+            System.arraycopy(currentY, 0, y, 0, y.length);
+
+            return currentT; // Return the final time of the accepted step
 
     }
\ No newline at end of file
