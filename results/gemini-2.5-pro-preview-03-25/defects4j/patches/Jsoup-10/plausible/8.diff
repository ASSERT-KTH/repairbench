diff --git a/tmp/1c1b740e-864c-47f7-a15e-531c99c3fa69_buggy.java b/tmp/17d86ce3-afe3-4993-a265-7d03f96a5f2a_fixed.java
index b4e6f03..b3fe3f1 100644
--- a/tmp/1c1b740e-864c-47f7-a15e-531c99c3fa69_buggy.java
+++ b/tmp/17d86ce3-afe3-4993-a265-7d03f96a5f2a_fixed.java
@@ -1,44 +1,86 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
-        String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
-        } else {
+        }
+
+        String relUrl = attr(attributeKey);
+
+        try {
+            // First, try to parse relUrl as an absolute URL. If it fails, it's likely relative, so fall through.
+            // Note that URL constructs GIGO - it will create an object even if the input is invalid. We check if it's valid by trying to parse it.
+            // See https://stackoverflow.com/questions/2942487/checking-if-string-is-a-valid-url
+            URL abs = new URL(relUrl);
+            // if it parses OK, is absolute. Handled. It may be an invalid URL, but we don't check that
+            return abs.toExternalForm();
+        } catch (MalformedURLException e) {
+            // Fall through to resolve against base URI
+        }
+
+        // Needs a base URI to resolve a relative URL. StandaloneNodes may not have one.
+        if (baseUri == null || baseUri.length() == 0) {
+             // No base Uri, and URL is not absolute, so return empty string
+            return "";
+        }
+
         URL base;
-            try {
         try {
             base = new URL(baseUri);
         } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
+            // If base URI is invalid, we can't resolve relative URLs against it.
+            return "";
         }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+
+        try {
+            // Handle resolving "?query" against a base URI properly, as URL(base, "?query") does not work as expected
+            if (relUrl.startsWith("?")) {
+                String path = base.getPath() != null ? base.getPath() : "";
+                // If the base path is empty but there's an authority, ensure path starts with /
+                String authority = base.getAuthority() != null ? base.getAuthority() : "";
+                if (authority.length() > 0 && path.isEmpty()) {
+                    path = "/";
+                } else if (authority.length() > 0 && path.charAt(0) != '/') {
+                    // Ensure path starts with / if authority present (should be done by URL constructor already, but be safe)
+                    // This case might not be strictly needed depending on URL impl, but covers edge cases.
+                     path = "/" + path;
+                }
+
+                int port = base.getPort();
+                String portString = (port != -1) ? ":" + port : "";
+
+                // We need to reconstruct the base URL up to the path, then append the query.
+                // Using getProtocol, getAuthority, getPath handles nuances like ports or userinfo.
+                String resolvedUrlString = base.getProtocol() + "://" + authority + portString + path + relUrl;
+                URL resolved = new URL(resolvedUrlString);
+                return resolved.toExternalForm();
+            }
+
+            // For all other cases, use the standard URL constructor, which handles relative paths correctly.
             URL abs = new URL(base, relUrl);
             return abs.toExternalForm();
         } catch (MalformedURLException e) {
+            // Resolution failed (e.g., invalid relative URL part). Return empty string.
             return "";
         }
     }
\ No newline at end of file
-    }
