diff --git a/tmp/391a8616-e962-4d10-8da7-5d5156cd5e16_buggy.java b/tmp/ebfdf05b-12f2-4fef-92d7-de506df54efa_fixed.java
index b4e6f03..12278b3 100644
--- a/tmp/391a8616-e962-4d10-8da7-5d5156cd5e16_buggy.java
+++ b/tmp/ebfdf05b-12f2-4fef-92d7-de506df54efa_fixed.java
@@ -1,44 +1,69 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
-        String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
-        } else {
+        }
+
+        String relUrl = attr(attributeKey);
         URL base;
         try {
             try {
                 base = new URL(baseUri);
             } catch (MalformedURLException e) {
                 // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
+                URL abs = new URL(relUrl); // If this fails, outer catch returns ""
                 return abs.toExternalForm();
             }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+            // relatively resolve relUrl against base
+            try {
+                // Special handling for query only refs (e.g. "?foo=bar") leveraging base URI path.
+                // A plain URL#resolve(base, "?foo=bar") drops the path, making it "http://jsoup.org?foo=bar". Handling manually.
+                if (relUrl.startsWith("?")) {
+                    String baseStr = baseUri; // Use the original base string for path info
+                    // Find the start of the query or fragment, and chop it off
+                    int qPos = baseStr.indexOf('?');
+                    if (qPos > 0)
+                        baseStr = baseStr.substring(0, qPos);
+                    // Also handle fragments in the base URI - they should be removed when resolving with a query
+                    int fPos = baseStr.indexOf('#');
+                     if (fPos > 0)
+                        baseStr = baseStr.substring(0, fPos);
+                    // baseStr now contains protocol, host, path etc, but not query or fragment
+
+                    // Validate and normalize the manually constructed URL
+                    // Need to use URL constructor with String argument to properly handle the combined path and query
+                    URL abs = new URL(baseStr + relUrl);
+                    return abs.toExternalForm();
+                }
+                 // Let java.net.URL handle other resolution scenarios.
                 URL abs = new URL(base, relUrl);
                 return abs.toExternalForm();
             } catch (MalformedURLException e) {
+                return ""; // Resolution failed, maybe malformed relUrl
+            }
+        } catch (MalformedURLException e) {
+            // Outer catch: handles if relUrl is invalid when base is invalid
             return "";
         }
     }
\ No newline at end of file
-    }
