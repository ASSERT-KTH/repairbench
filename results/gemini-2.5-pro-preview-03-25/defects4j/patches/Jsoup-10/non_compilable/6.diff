diff --git a/tmp/c5c0cf62-997f-4624-b870-5fa06f6e7ef9_buggy.java b/tmp/0ff5d74a-da55-4557-9f43-d8b076b7383e_fixed.java
index b4e6f03..3654c1d 100644
--- a/tmp/c5c0cf62-997f-4624-b870-5fa06f6e7ef9_buggy.java
+++ b/tmp/0ff5d74a-da55-4557-9f43-d8b076b7383e_fixed.java
@@ -1,44 +1,76 @@
+import java.net.MalformedURLException;
+import java.net.URL;
+import org.jsoup.helper.Validate;
+
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
-        } else {
+        }
+
         URL base;
         try {
             try {
                 base = new URL(baseUri);
             } catch (MalformedURLException e) {
                 // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
+                URL abs = new URL(relUrl); // If relUrl is absolute, this works. Otherwise, throws MalformedUrlException
                 return abs.toExternalForm();
             }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+
+            // Manually handle the case where the relative URL starts with "?", as java.net.URL struggles with this
+            // See https://stackoverflow.com/questions/8603430/java-net-url-malformedurl P bug
+            if (relUrl.startsWith("?")) {
+                 // Find the position of the existing query string, if any
+                String basePart = baseUri;
+                int queryPos = basePart.indexOf('?');
+                 // If a query string exists, remove it from the base part
+                if (queryPos != -1) {
+                    basePart = basePart.substring(0, queryPos);
+                }
+                 // Manually construct the full URL string by appending the relative query
+                String combinedUrlStr = basePart + relUrl;
+                 // Try parsing the manually constructed URL to ensure it's valid
+                try {
+                    URL combinedUrl = new URL(combinedUrlStr);
+                    return combinedUrl.toExternalForm();
+                } catch (MalformedURLException e) {
+                    // If the combined URL is malformed, return an empty string
+                    return "";
+                }
+            }
+
+            // If we are here, baseUri is valid and relUrl doesn't start with '?'
+            // Use the standard URL constructor for resolution
             URL abs = new URL(base, relUrl);
             return abs.toExternalForm();
+
         } catch (MalformedURLException e) {
+            // This outer catch handles:
+            // 1. MalformedURLException from `new URL(relUrl)` when baseUri is malformed and relUrl is not absolute.
+            // 2. MalformedURLException from `new URL(base, relUrl)` when baseUri is ok but resolution fails.
             return "";
         }
     }
\ No newline at end of file
-    }
