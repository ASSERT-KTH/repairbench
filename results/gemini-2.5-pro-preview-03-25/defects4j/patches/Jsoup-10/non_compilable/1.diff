diff --git a/tmp/72ebec47-349f-4eff-badc-d4b6371b56fa_buggy.java b/tmp/d2fee0ce-c392-4fee-a12b-fba454bc4aa5_fixed.java
index b4e6f03..de7e408 100644
--- a/tmp/72ebec47-349f-4eff-badc-d4b6371b56fa_buggy.java
+++ b/tmp/d2fee0ce-c392-4fee-a12b-fba454bc4aa5_fixed.java
@@ -1,44 +1,71 @@
+import org.jsoup.helper.Validate; // Assuming Validate is used and imported
+import java.net.MalformedURLException;
+import java.net.URL;
+// Assuming baseUri field/method, attr() and hasAttr() methods are available in the class context.
+
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
             URL base;
             try {
                 try {
+                    // Assuming 'baseUri' is accessible (field or method returning String)
                     base = new URL(baseUri); 
                 } catch (MalformedURLException e) {
                     // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
+                    URL abs = new URL(relUrl); // If relUrl invalid or relative, throws MalformedURLException -> outer catch
+                    return abs.toExternalForm(); // If parses ok, return it
                 }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
+                // base is OK. Resolve relUrl against base using helper method with fix.
+                URL abs = resolve(base, relUrl);
                 return abs.toExternalForm();
             } catch (MalformedURLException e) {
-                return "";
+                // Catches exceptions from new URL(relUrl) or resolve(base, relUrl)
+                return ""; // Return empty string on any failure
             }
         }
     }
+
+    // Private static helper method to resolve the URL.
+    // Includes workaround for bug in Java's URL resolver for URLs starting with "?".
+    private static URL resolve(URL base, String relUrl) throws MalformedURLException {
+        // workaround: java resolves base urls with queries incorrectly, e.g.
+        // new URL(new URL("http://a/b/c?d=e"), "?f=g") --> "http://a/b/?f=g" (wrong path)
+        // instead of "http://a/b/c?f=g" (correct path)
+        if (relUrl.startsWith("?")) {
+            String baseSpec = base.toExternalForm();
+            int queryPos = baseSpec.indexOf('?');
+            // Take the base URL string up to the query part (if any)
+            String pathPart = (queryPos != -1) ? baseSpec.substring(0, queryPos) : baseSpec;
+            // Manually concatenate the path part with the new query string
+            String resolvedUrl = pathPart + relUrl;
+            // Parse the manually constructed URL to validate and normalize
+            return new URL(resolvedUrl);
+        }
+        // For all other cases (absolute, path-relative, root-relative, protocol-relative), use the standard constructor
+        return new URL(base, relUrl);
+    }
\ No newline at end of file
