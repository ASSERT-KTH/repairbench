diff --git a/tmp/33b80d50-5b32-4af9-b5f8-65d78c0d3e05_buggy.java b/tmp/417024e4-c789-48ef-903f-5ebed10e9648_fixed.java
index b4e6f03..2a25f73 100644
--- a/tmp/33b80d50-5b32-4af9-b5f8-65d78c0d3e05_buggy.java
+++ b/tmp/417024e4-c789-48ef-903f-5ebed10e9648_fixed.java
@@ -1,44 +1,90 @@
+import org.jsoup.helper.Validate; // Assuming Validate is in this package
+import java.net.MalformedURLException;
+import java.net.URL;
+
+// Assume this method is part of a class that has access to 'baseUri' field
+// and 'attr(String)', 'hasAttr(String)' methods.
+
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
-        } else {
+        }
+
         URL base;
         try {
-                try {
+            // Attempt to parse the base URI.
             base = new URL(baseUri);
         } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
+            // Base URI is unsuitable. Try to parse the relative URL as an absolute URL.
+            try {
                 URL abs = new URL(relUrl);
+                // If relUrl is potentially absolute and parses, return it.
+                // Need a check here to ensure it's truly absolute, otherwise return ""
+                // A simple check is if it has a protocol component.
+                if (abs.getProtocol() != null && !abs.getProtocol().isEmpty()) {
                     return abs.toExternalForm();
+                } else {
+                    return ""; // Parsed, but wasn't absolute (e.g., just "path/file")
+                }
+            } catch (MalformedURLException e2) {
+                // Both baseUri and relUrl (as absolute) are invalid or could not be parsed.
+                return "";
+            }
+        }
+
+        // Base URI is valid. Now attempt to resolve the relative URL against it.
+        try {
+            URL abs;
+            // Special handling for relative URLs starting with "?".
+            // Java's URL constructor might incorrectly resolve this against the base path's directory
+            // instead of the full path. E.g., resolving "?query" against "http://host/path/file"
+            // should yield "http://host/path/file?query", not "http://host/path/?query".
+            if (relUrl.startsWith("?")) {
+                String baseExternal = base.toExternalForm();
+                // Find the first occurrence of '?' or '#' in the base URL's external form.
+                int qPos = baseExternal.indexOf('?');
+                int fPos = baseExternal.indexOf('#');
+                int endPathPos = baseExternal.length(); // Default to the end of the string if no query/fragment
+
+                // Use the index of the first query or fragment marker
+                if (qPos != -1)
+                    endPathPos = qPos;
+                if (fPos != -1 && fPos < endPathPos) // if fragment exists and is before the query or there's no query
+                    endPathPos = fPos;
+
+                // Construct the URL string using the base path up to the query/fragment, plus the new relative query.
+                String basePath = baseExternal.substring(0, endPathPos);
+                abs = new URL(basePath + relUrl); // Create new URL by appending query to base path
+            } else {
+                // Standard resolution using the URL(base, spec) constructor.
+                abs = new URL(base, relUrl);
             }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
             return abs.toExternalForm();
         } catch (MalformedURLException e) {
+            // Resolution failed (e.g., the combined URL is invalid).
             return "";
         }
     }
\ No newline at end of file
-    }
