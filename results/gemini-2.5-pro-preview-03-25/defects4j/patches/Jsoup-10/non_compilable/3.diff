diff --git a/tmp/c11893c6-0229-4d5d-8bec-f459790e8c2c_buggy.java b/tmp/356c1b3d-094b-491d-975c-0c624ff3c3fb_fixed.java
index b4e6f03..c53e618 100644
--- a/tmp/c11893c6-0229-4d5d-8bec-f459790e8c2c_buggy.java
+++ b/tmp/356c1b3d-094b-491d-975c-0c624ff3c3fb_fixed.java
@@ -1,44 +1,108 @@
+import java.net.MalformedURLException;
+import java.net.URL;
+import org.jsoup.helper.Validate;
+
+// Assume this code is part of a class that provides the following abstract methods:
+// abstract String attr(String key);
+// abstract boolean hasAttr(String key);
+// abstract String baseUri(); // Method to get the base URI string
+
+public abstract class NodeStub { // Renamed to NodeStub for clarity in this context
+    abstract String attr(String key);
+    abstract boolean hasAttr(String key);
+    abstract String baseUri();
+
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
-        String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
-            return ""; // nothing to make absolute with
-        } else {
-            URL base;
+            return ""; // Attribute missing, nothing to resolve.
+        }
+
+        String relUrl = attr(attributeKey);
+        // Get base URI string from node. It might be null or empty.
+        String baseUriStr = baseUri();
+
+        URL baseUrl = null;
         try {
+            // Try to parse the base URI. Handles null or empty strings.
             try {
-                    base = new URL(baseUri);
+                baseUrl = new URL(baseUriStr);
             } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
+                // Base URI is invalid. If relUrl is an absolute URL, we can still use it.
+                URL abs = new URL(relUrl); // If relUrl is not absolute, this throws MalformedURLException too
                 return abs.toExternalForm();
             }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
+        } catch (MalformedURLException e) {
+            // Either baseUriStr was invalid AND relUrl was not a valid absolute URL,
+            // or baseUriStr was null/empty AND relUrl was not absolute.
+            return ""; // Cannot make an absolute URL
+        }
+
+        // Base URI was parsed successfully into baseUrl, now resolve the relative URL.
+        try {
+            // FIX: Handle the case where the relative URL starts with "?".
+            // java.net.URL class resolution has known bugs handling this correctly
+            // when the base path contains a filename (it might drop the filename).
+            // Example: base="http://host/path/file?query", rel="?new" -> should be "http://host/path/file?new"
+            // but constructor might yield "http://host/path/?new".
+            // Manually constructing the URL ensures the path part is preserved.
+            if (relUrl.startsWith("?")) {
+                // Find the start of the query or fragment in the base URI string
+                int queryPos = baseUriStr.indexOf('?');
+                int fragmentPos = baseUriStr.indexOf('#');
+                int endPos = -1;
+
+                if (queryPos != -1) {
+                    endPos = queryPos;
+                }
+                // Use the earlier position if both exist
+                if (fragmentPos != -1 && (endPos == -1 || fragmentPos < endPos)) {
+                    endPos = fragmentPos;
+                }
+
+                String basePart;
+                if (endPos != -1) {
+                    // Truncate the base URI string before the query/fragment
+                    basePart = baseUriStr.substring(0, endPos);
+                } else {
+                    // No query or fragment in base URI
+                    basePart = baseUriStr;
+                }
+
+                // Combine the base path part with the new query string.
+                // Create a new URL from the combined string to validate and normalize.
+                URL abs = new URL(basePart + relUrl);
                 return abs.toExternalForm();
+            } else {
+                 // For all other cases (absolute URL, path-relative URL, fragment-only URL, etc.),
+                 // use the standard URL(context, spec) constructor for resolution.
+                URL abs = new URL(baseUrl, relUrl);
+                return abs.toExternalForm();
+            }
         } catch (MalformedURLException e) {
+            // Resolution failed (e.g., relUrl is invalid relative to base, or the manual combination failed)
             return "";
         }
     }
 }
\ No newline at end of file
