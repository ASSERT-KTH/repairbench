diff --git a/tmp/e7d7b74c-06d2-4585-8bde-6307804175c1_buggy.java b/tmp/a89b2e06-5f26-41fb-ac4e-d0843f7af716_fixed.java
index b4e6f03..6fc4731 100644
--- a/tmp/e7d7b74c-06d2-4585-8bde-6307804175c1_buggy.java
+++ b/tmp/a89b2e06-5f26-41fb-ac4e-d0843f7af716_fixed.java
@@ -1,44 +1,94 @@
+import org.jsoup.helper.Validate; // Ensure this import is present
+import java.net.MalformedURLException;
+import java.net.URL;
+
+// ... other imports ...
+
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
-        String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
-        } else {
+        }
+
+        String relUrl = attr(attributeKey);
+        URL resolvedUrl;
+
+        try {
+            // Attempt 1: Try parsing relUrl as an absolute URL. If it is, return it directly.
+            try {
+                resolvedUrl = new URL(relUrl);
+                // If parsing succeeded without throwing MalformedURLException, it's an absolute URL.
+                return resolvedUrl.toExternalForm();
+            } catch (MalformedURLException e) {
+                // It's not an absolute URL, so proceed to resolve against baseUri.
+            }
+
+            // Attempt 2: Resolve against baseUri.
+            if (baseUri == null || baseUri.isEmpty()) {
+                return ""; // No base URI to resolve against.
+            }
+
             URL base;
             try {
-                try {
+                // Parse the baseUri. If it's invalid, we can't resolve relative URLs.
                 base = new URL(baseUri);
             } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
+                // Base URI is malformed, cannot resolve.
+                return "";
             }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
+
+            // Special handling for relative URLs starting with "?query".
+            // The standard URL(base, rel) constructor handles this case incorrectly for base URLs with path filenames
+            // (e.g., http://a/b/c + ?q resolves to http://a/b/?q instead of http://a/b/c?q).
+            if (relUrl.startsWith("?")) {
+                // Manually construct the URL: take the base URL string up to the first '?' or '#', then append relUrl.
+                String baseUrlString = base.toExternalForm();
+                int queryIndex = baseUrlString.lastIndexOf('?');
+                String basePrefix = baseUrlString; // Start with the full base URL string
+                if (queryIndex != -1) {
+                    // If there's a query, strip it from the base prefix
+                    basePrefix = baseUrlString.substring(0, queryIndex);
+                }
+                // Also handle fragment identifier in base URL string: strip it if present
+                int fragIndex = basePrefix.lastIndexOf('#');
+                if (fragIndex != -1) {
+                    basePrefix = basePrefix.substring(0, fragIndex);
+                }
+                // Append the relative query string (relUrl) to the processed base prefix
+                resolvedUrl = new URL(basePrefix + relUrl); // This combination might still be malformed
+            } else {
+                // Standard resolution using the URL constructor for all other relative URLs
+                // (e.g., "foo.html", "../bar", "//example.com/").
+                resolvedUrl = new URL(base, relUrl); // This constructor handles context resolution
+            }
+
+            // If resolution (either manual or standard) succeeded, return the external form.
+            return resolvedUrl.toExternalForm();
+
         } catch (MalformedURLException e) {
+            // Catch MalformedURLException from either new URL(baseUri), new URL(basePrefix + relUrl), or new URL(base, relUrl).
+            // Indicates an inability to form a valid absolute URL.
             return "";
         }
     }
\ No newline at end of file
-    }
