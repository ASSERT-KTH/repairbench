diff --git a/tmp/ff841972-572f-4f01-b15f-61f6f5db3ab3_buggy.java b/tmp/f348f020-242b-4b63-adcd-4cfeedfbc720_fixed.java
index b4e6f03..4152fed 100644
--- a/tmp/ff841972-572f-4f01-b15f-61f6f5db3ab3_buggy.java
+++ b/tmp/f348f020-242b-4b63-adcd-4cfeedfbc720_fixed.java
@@ -1,44 +1,94 @@
+import java.net.MalformedURLException;
+import java.net.URL;
+import org.jsoup.helper.Validate; // Assuming Validate is in this package
+
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
-        String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
-            return ""; // nothing to make absolute with
-        } else {
+            return ""; // Attribute missing, nothing to make absolute
+        }
+
+        String relUrl = attr(attributeKey).trim(); // Trim leading/trailing whitespace
+        if (relUrl.isEmpty()) {
+            return ""; // Attribute present but empty
+        }
+
+        // Check if relUrl is already absolute (has a protocol)
+        try {
+            URL abs = new URL(relUrl);
+            // Check if the protocol is present (e.g. http, https, file)
+            // URLs like "//example.com/path" are protocol-relative and need baseUri
+            // URLs like "/path" or "file.html" are path-relative and need baseUri
+            if (abs.getProtocol() != null && !abs.getProtocol().isEmpty()) {
+                return abs.toExternalForm(); // Already absolute
+            }
+        } catch (MalformedURLException e) {
+            // If it's not absolute or is malformed, fall through to resolve against baseUri
+        }
+
+        // Must be relative. Get the base URI.
         URL base;
         try {
-                try {
+            // Ensure baseUri itself is valid and present
+            if (baseUri == null || baseUri.isEmpty()) return ""; // No base URI to resolve against
             base = new URL(baseUri);
         } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
+            // Base URI is invalid, cannot resolve
+            return "";
+        }
+
+        // Resolve relative URL against base
+        try {
+            URL abs;
+            // Workaround for Java's URL constructor behavior with query-only refs
+            // java resolves //path/file + ?foo to //path/?foo, not //path/file?foo as desired/spec
+            if (relUrl.startsWith("?")) {
+                String baseSpec = base.toExternalForm();
+                int qPos = baseSpec.indexOf('?');
+                int fPos = baseSpec.indexOf('#'); // Also handle fragments
+
+                int cutPos = -1;
+                // Find the earliest position of '?' or '#'
+                if (qPos != -1 && fPos != -1) {
+                    cutPos = Math.min(qPos, fPos);
+                } else if (qPos != -1) {
+                    cutPos = qPos;
+                } else if (fPos != -1) {
+                    cutPos = fPos;
+                }
+
+                // Take the base string up to the query/fragment part
+                String pathAndQueryLessBase = (cutPos != -1) ? baseSpec.substring(0, cutPos) : baseSpec;
+                // Append the relative query string
+                abs = new URL(pathAndQueryLessBase + relUrl);
+            } else {
+                // Standard resolution for other relative URLs
+                abs = new URL(base, relUrl);
             }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
             return abs.toExternalForm();
         } catch (MalformedURLException e) {
+            // Resolution failed (e.g. combining base + relUrl is invalid)
             return "";
         }
     }
\ No newline at end of file
-    }
