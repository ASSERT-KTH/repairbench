diff --git a/tmp/e19db933-4c81-4b69-8bc0-6700b7d3b048_buggy.java b/tmp/b2dcdb16-81a8-4f39-a7e9-8412de008cda_fixed.java
index b4e6f03..b24671f 100644
--- a/tmp/e19db933-4c81-4b69-8bc0-6700b7d3b048_buggy.java
+++ b/tmp/b2dcdb16-81a8-4f39-a7e9-8412de008cda_fixed.java
@@ -1,44 +1,79 @@
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+import org.jsoup.helper.Validate; // Assuming Validate is in this package
+
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
-        String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
-        } else {
+        }
+
+        String relUrl = attr(attributeKey);
+
+        // Attempt 1: Check if relUrl is already an absolute URL.
+        try {
+            URL abs = new URL(relUrl);
+            // If parsing succeeds, assume it's absolute and return directly.
+            return abs.toExternalForm();
+        } catch (MalformedURLException e) {
+            // It's not an absolute URL, or has syntax errors. Fall through to resolve against baseUri.
+        }
+
+        // Attempt 2: Resolve relUrl against the baseUri.
+        // Need a valid baseUri for this.
+        if (baseUri == null || baseUri.isEmpty()) {
+            return ""; // No baseUri, cannot resolve.
+        }
+
+        try {
             URL base;
-            try {
+            // Check if baseUri is a valid URL.
             try {
                 base = new URL(baseUri);
             } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
-                    return abs.toExternalForm();
+                // baseUri is malformed, cannot resolve.
+                return "";
             }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
+
+            // Use java.net.URI for robust resolution, it handles cases like "?query" correctly.
+            // See https://stackoverflow.com/a/42148594/92493 for details.
+            URI baseUriObj = new URI(baseUri);
+            URI resolvedUri = baseUriObj.resolve(relUrl); // Resolve the relative URL
+            return resolvedUri.toURL().toExternalForm(); // Convert resolved URI back to URL string
+
         } catch (MalformedURLException e) {
+            // Can be thrown by resolvedUri.toURL() if the resolved URI is not a valid URL
+            // (e.g., wrong scheme that URL doesn't support, but URI does).
+            return "";
+        } catch (URISyntaxException e) {
+            // Can be thrown by new URI(baseUri) if baseUri has syntax errors not caught by new URL().
+            return "";
+        } catch (IllegalArgumentException e) {
+            // Can be thrown by baseUriObj.resolve(relUrl) if relUrl contains invalid characters,
+            // or by new URI(baseUri) if baseUri is opaque.
             return "";
-            }
         }
     }
\ No newline at end of file
