diff --git a/tmp/b6b2ca4f-2266-4f10-9aa6-21655927e6f9_buggy.java b/tmp/43bda33c-f7df-4acd-b5cd-7399710eed2d_fixed.java
index b4e6f03..9ec1df5 100644
--- a/tmp/b6b2ca4f-2266-4f10-9aa6-21655927e6f9_buggy.java
+++ b/tmp/43bda33c-f7df-4acd-b5cd-7399710eed2d_fixed.java
@@ -1,44 +1,92 @@
+import java.net.MalformedURLException;
+import java.net.URL;
+import org.jsoup.helper.Validate;
+
+// Assuming this code is part of a class like Element which has access to baseUri and attr(), hasAttr() methods.
+
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
-        String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
-        } else {
+        }
+
+        String relUrl = attr(attributeKey).trim(); // Trim whitespace which can lead to MalformedURLs
+
+        // First check if the attribute value is already an absolute URL. If so, return that.
+        try {
+            // Use the base URI to resolve the relative URL against, if needed.
+            // Need a base URL to resolve accurately, but we can test if relUrl is absolute first.
+            URL abs = new URL(relUrl);
+            // Check if it has a protocol - indicates absolute
+            if (abs.getProtocol() != null && !abs.getProtocol().isEmpty()) {
+                return abs.toExternalForm();
+            }
+        } catch (MalformedURLException e) {
+            // If it's not a valid absolute URL, fall through to resolve against base URI
+            // This also catches cases like protocol-relative URLs "//example.com" which are handled below by URL(base, rel).
+        }
+
+        // Must be a relative URL; resolve against base URI.
         URL base;
         try {
-                try {
+            // baseUri might be null or empty string if not set. URL constructor might handle this, but better be safe.
+            if (baseUri == null || baseUri.isEmpty()) {
+                 return ""; // Cannot resolve relative if no base URI
+            }
             base = new URL(baseUri);
         } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
-                    URL abs = new URL(relUrl);
+            // base URI is invalid, cannot resolve
+            return "";
+        }
+
+        // Manually handle the case where the relative URL starts with "?".
+        // The standard URL(base, rel) constructor incorrectly drops the path from the base URL in this case.
+        if (relUrl.length() > 0 && relUrl.charAt(0) == '?') {
+            try {
+                // Construct the URL string manually by taking the base URL up to the query part and appending the new query.
+                String baseString = base.toExternalForm();
+                int queryIndex = baseString.indexOf('?');
+                String baseUrlWithoutQuery;
+                if (queryIndex != -1) {
+                    baseUrlWithoutQuery = baseString.substring(0, queryIndex);
+                } else {
+                    baseUrlWithoutQuery = baseString;
+                }
+                URL abs = new URL(baseUrlWithoutQuery + relUrl);
                 return abs.toExternalForm();
+            } catch (MalformedURLException e) {
+                // Should not happen if base was valid and relUrl is just "?...", but return "" if it does.
+                 return "";
             }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+        }
+
+        // Standard resolution using java.net.URL constructor for all other relative URLs.
+        try {
             URL abs = new URL(base, relUrl);
             return abs.toExternalForm();
         } catch (MalformedURLException e) {
+            // Resolution failed (e.g., invalid relUrl like "##" relative to base).
             return "";
         }
     }
\ No newline at end of file
-    }
