diff --git a/tmp/1704f929-11a3-4a00-9aab-6a115464926d_buggy.java b/tmp/3ceb7f26-df25-4fa8-b13f-e32bad020cf9_fixed.java
index 7ea7ac9..61bd646 100644
--- a/tmp/1704f929-11a3-4a00-9aab-6a115464926d_buggy.java
+++ b/tmp/3ceb7f26-df25-4fa8-b13f-e32bad020cf9_fixed.java
@@ -1,63 +1,127 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
+            // Check for potential overlaps before adding the field
+            // This logic mirrors the validation in the Partial constructor
+            DurationField unitField = fieldType.getDurationType().getField(iChronology);
+            if (!unitField.isSupported()) {
+                 throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");
+            }
+            DurationField rangeField = null;
+            if (fieldType.getRangeDurationType() != null) {
+                rangeField = fieldType.getRangeDurationType().getField(iChronology);
+                // Range field is optional, but if present, must be supported
+                 if (!rangeField.isSupported()) {
+                      throw new IllegalArgumentException("Range duration field for '" + fieldType + "' is not supported");
+                 }
+            }
+
+            for (DateTimeFieldType existingType : iTypes) {
+                DateTimeField existingField = existingType.getField(iChronology);
+                DurationField existingUnitField = existingField.getDurationField();
+                if (existingUnitField.isSupported()) {
+                    int compare = unitField.compareTo(existingUnitField);
+                    if (compare == 0) { // Same unit duration - potential overlap
+                         DurationField existingRangeField = null;
+                         if (existingType.getRangeDurationType() != null) {
+                             existingRangeField = existingType.getRangeDurationType().getField(iChronology);
+                         }
+        
+                         if (rangeField == null) {
+                             if (existingRangeField == null) {
+                                  // Both unit and range fields are null/same -> Overlap
+                                  throw new IllegalArgumentException("Field '" + fieldType + "' overlaps with '" + existingType + "'");
+                             }
+                         } else {
+                             if (existingRangeField != null) {
+                                  int compareRange = rangeField.compareTo(existingRangeField);
+                                  if (compareRange == 0) {
+                                      // Same unit and range duration -> Definite overlap
+                                      throw new IllegalArgumentException("Field '" + fieldType + "' overlaps with '" + existingType + "'");
+                                  }
+                             }
+                         }
+                    }
+                }
+            }
+
+            // If no overlap detected, proceed with adding the field...
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
             
             // find correct insertion point to keep largest-smallest order
             int i = 0;
-            DurationField unitField = fieldType.getDurationType().getField(iChronology);
-            if (unitField.isSupported()) {
+            // unitField and rangeField calculated above
+            // No need to check unitField.isSupported() again, done above
             for (; i < iTypes.length; i++) {
                 DateTimeFieldType loopType = iTypes[i];
-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
+                DateTimeField loopField = loopType.getField(iChronology);
+                DurationField loopUnitField = loopField.getDurationField();
                 if (loopUnitField.isSupported()) {
                     int compare = unitField.compareTo(loopUnitField);
                     if (compare > 0) {
-                            break;
-                        } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                            if (rangeField.compareTo(loopRangeField) > 0) {
-                                break;
+                        break; // Found insertion point (new field's unit is smaller)
+                    } else if (compare == 0) { // Same unit duration, compare range duration for tie-breaking
+                        DurationField loopRangeField = null;
+                        if (loopType.getRangeDurationType() != null) {
+                             loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                         }
+                        
+                        // Non-null range duration fields come before null ones.
+                        // If both non-null, compare them (larger comes first).
+                        if (rangeField != null) {
+                             if (loopRangeField == null || rangeField.compareTo(loopRangeField) > 0) {
+                                 break; // New field's range is non-null and loop's is null, or new field's range is larger
                              }
                         }
+                        // Otherwise (rangeField is null, or rangeField <= loopRangeField), continue searching.
+                        // Note: the overlap check above should prevent rangeField == loopRangeField here.
                     }
+                    // if compare < 0, new field's unit is larger, continue searching
                 }
+            }
+            
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
             System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-            // use public constructor to ensure full validation
-            // this isn't overly efficient, but is safe
+            
+            // use public constructor to ensure full validation including ordering and value ranges
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
+            // constructor calls chronology validate, no need to call again? Original code did call it.
+            // Let's keep it for safety, though it might be redundant.
             iChronology.validate(newPartial, newValues); 
             return newPartial;
         }
+        
+        // Field already exists
         if (value == getValue(index)) {
-            return this;
+            return this; // No change
         }
-        int[] newValues = getValues();
-        newValues = getField(index).set(this, index, newValues, value);
+        
+        // Get a mutable copy and update the value
+        int[] newValues = getValues(); // Creates a copy
+        newValues = getField(index).set(this, index, newValues, value); // Uses field logic to set value potentially cascading changes
+        
+        // Create new partial using the internal constructor which skips validation (already done by field.set)
         return new Partial(this, newValues);
     }
\ No newline at end of file
