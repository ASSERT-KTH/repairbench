diff --git a/tmp/cb0d102f-da47-4d5a-a6a0-7a379ae95aed_buggy.java b/tmp/f2d25889-255f-40d5-923b-42404f0c8708_fixed.java
index 7ea7ac9..0b689f9 100644
--- a/tmp/cb0d102f-da47-4d5a-a6a0-7a379ae95aed_buggy.java
+++ b/tmp/f2d25889-255f-40d5-923b-42404f0c8708_fixed.java
@@ -1,63 +1,131 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
+            // Check if field is supported first
+            if (!fieldType.isSupported(iChronology)) {
+                 throw new IllegalArgumentException("Field '" + fieldType.getName() + "' is not supported by the chronology");
+            }
+
+            // Check for conflicts before adding
+            DurationField unitField = fieldType.getDurationType().getField(iChronology);
+            DurationFieldType rangeFieldType = fieldType.getRangeDurationType();
+            DurationField rangeField = (rangeFieldType == null) ? null : rangeFieldType.getField(iChronology);
+
+            for (DateTimeFieldType existingType : iTypes) {
+                DurationField existingUnitField = existingType.getDurationType().getField(iChronology);
+                // Compare duration fields to check for clash
+                if (unitField.compareTo(existingUnitField) == 0) { // Same unit duration
+                    DurationFieldType existingRangeFieldType = existingType.getRangeDurationType();
+                    DurationField existingRangeField = (existingRangeFieldType == null) ? null : existingRangeFieldType.getField(iChronology);
+
+                    boolean conflict = false;
+                    if (rangeField == null) {
+                        if (existingRangeField == null) {
+                            conflict = true; // Same unit, both null range -> conflict
+                        }
+                    } else {
+                        if (existingRangeField != null && rangeField.compareTo(existingRangeField) == 0) {
+                            conflict = true; // Same unit, same range -> conflict
+                        }
+                    }
+
+                    if (conflict) {
+                        // Found a conflict based on duration fields
+                        throw new IllegalArgumentException("Field '" + fieldType.getName() + "' conflicts with existing field '" + existingType.getName() + "'");
+                    }
+                }
+            }
+
+            // ----- Original insertion logic -----
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
 
             // find correct insertion point to keep largest-smallest order
             int i = 0;
-            DurationField unitField = fieldType.getDurationType().getField(iChronology);
+            // unitField is already calculated above
             if (unitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
                         int compare = unitField.compareTo(loopUnitField);
                         if (compare > 0) {
-                            break;
-                        } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                            if (rangeField.compareTo(loopRangeField) > 0) {
-                                break;
+                            break; // New field is smaller duration
+                        } else if (compare == 0) { // Same duration, compare range duration
+                            // Note: original code below could throw NPE if getRangeDurationType() is null
+                            DurationField rangeFieldCompare = null;
+                            if (fieldType.getRangeDurationType() != null) {
+                                rangeFieldCompare = fieldType.getRangeDurationType().getField(iChronology);
                             }
+                            DurationField loopRangeFieldCompare = null;
+                            if (loopType.getRangeDurationType() != null) {
+                                loopRangeFieldCompare = loopType.getRangeDurationType().getField(iChronology);
                             }
+
+                            if (rangeFieldCompare == null) {
+                                if (loopRangeFieldCompare != null) {
+                                    break; // New field has null range, loop field does not. New is "larger". Break.
                                 }
+                                // Both null range. Continue loop.
+                            } else {
+                                if (loopRangeFieldCompare == null) {
+                                     // New field has range, loop field does not. New is "smaller". Continue.
+                                     continue;
+                                } else {
+                                     // Both have range fields. Compare them.
+                                     if (rangeFieldCompare.compareTo(loopRangeFieldCompare) > 0) {
+                                         break; // New field has larger range duration. Break.
                                      }
+                                     // If range duration is same or smaller, continue loop.
+                                }
+                            }
+                        }
+                        // If compare < 0 (new field has larger duration), continue loop
+                    }
+                }
+            } else {
+                // Field's duration is not supported. Insert at the end.
+                i = iTypes.length;
             }
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
+            System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);
+            System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);
             // use public constructor to ensure full validation
             // this isn't overly efficient, but is safe
+            // The constructor performs necessary validation including ordering checks
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
-            iChronology.validate(newPartial, newValues);
+            // Redundant validation call removed as constructor handles it
+            // iChronology.validate(newPartial, newValues);
             return newPartial;
-        }
+
+        } else { // Field type exists, update value
             if (value == getValue(index)) {
                 return this;
             }
             int[] newValues = getValues();
+            // The set method performs validation for the updated value
             newValues = getField(index).set(this, index, newValues, value);
+            // This constructor reuses types and chrono, performs less validation
             return new Partial(this, newValues);
         }
+    }
\ No newline at end of file
