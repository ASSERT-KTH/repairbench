diff --git a/tmp/87bbedff-02d1-4790-b020-82e3548159db_buggy.java b/tmp/781abc61-9995-4c11-94b4-5e22ddab4c09_fixed.java
index 7ea7ac9..d721fb7 100644
--- a/tmp/87bbedff-02d1-4790-b020-82e3548159db_buggy.java
+++ b/tmp/781abc61-9995-4c11-94b4-5e22ddab4c09_fixed.java
@@ -1,63 +1,110 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
+     * @throws IllegalArgumentException if the field type is already present and the value is invalid for that field
+     * @throws IllegalArgumentException if the field type is not already present and is incompatible with the other fields
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
+            // Field type not present, add it
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
             
             // find correct insertion point to keep largest-smallest order
             int i = 0;
             DurationField unitField = fieldType.getDurationType().getField(iChronology);
             if (unitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
-                        int compare = unitField.compareTo(loopUnitField);
-                        if (compare > 0) {
-                            break;
-                        } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                            if (rangeField.compareTo(loopRangeField) > 0) {
-                                break;
+                        int compare = unitField.compareTo(loopUnitField); // Compare durations
+                        if (compare > 0) { // New field duration is shorter than loop field duration
+                            break; // Insert new field before loop field
+                        } else if (compare == 0) { // Durations are equal
+                            // Compare range durations
+                            DurationField rangeField = null;
+                            DurationFieldType rangeFieldType = fieldType.getRangeDurationType();
+                            if (rangeFieldType != null) {
+                                rangeField = rangeFieldType.getField(iChronology);
                             }
+                            
+                            DurationField loopRangeField = null;
+                            DurationFieldType loopRangeFieldType = loopType.getRangeDurationType();
+                             if (loopRangeFieldType != null) {
+                                loopRangeField = loopRangeFieldType.getField(iChronology);
                             }
+
+                            if (rangeField == null) {
+                                if (loopRangeField != null) {
+                                    break; // New field is smaller (null range) -> insert before
                                 }
+                                // Both null ranges: clash as fields have same duration and null range.
+                                throw new IllegalArgumentException("Field '" + fieldType + "' has the same duration and null range fields as '" + loopType + "'");
+
+                            } else if (loopRangeField == null) {
+                                // New field non-null range, loop field null range. New field is "larger".
+                                // Continue loop to insert after loop field.
+                            } else {
+                                // Both ranges non-null, compare them.
+                                int rangeCompare = rangeField.compareTo(loopRangeField);
+                                if (rangeCompare > 0) { // New field range duration is shorter than loop field range
+                                    break; // Insert new field before loop field
+                                } else if (rangeCompare == 0) { // Ranges are equal too
+                                    // Fields have same duration and same range. This is not allowed.
+                                    throw new IllegalArgumentException("Field '" + fieldType + "' has the same duration (" + unitField.getName() + ") and range (" + rangeField.getName() + ") as '" + loopType + "'");
                                 }
+                                // else rangeCompare < 0: New field range is larger. Continue loop to insert after loop field.
                             }
+                        }
+                        // else compare < 0: New field duration is longer. Continue loop to insert after loop field.
+                    }
+                }
+            } else {
+                // If the new field's duration is not supported, insert it at the end
+                // based on the assumption that unsupported durations are ordered last.
+                i = iTypes.length;
+            }
+
+            // Copy arrays and insert new field at determined position i
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-            // use public constructor to ensure full validation
-            // this isn't overly efficient, but is safe
+            System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);
+            System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);
+            
+            // Use public constructor to ensure full validation, including chronology validation.
+            // This constructor will validate the field combination and ordering again.
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
-            iChronology.validate(newPartial, newValues);
+            // The constructor already called validate, no need to call it again.
+            // iChronology.validate(newPartial, newValues); // Removed redundant call
             return newPartial;
-        }
+            
+        } else {
+            // Field type already present, update value
             if (value == getValue(index)) {
-            return this;
+                return this; // No change, return same instance
             }
+            // Get a copy of the values and use the field's set method
+            // to update the value (this handles validation within the field).
             int[] newValues = getValues();
             newValues = getField(index).set(this, index, newValues, value);
+            // Create a new Partial instance with the updated values array.
             return new Partial(this, newValues);
         }
+    }
\ No newline at end of file
