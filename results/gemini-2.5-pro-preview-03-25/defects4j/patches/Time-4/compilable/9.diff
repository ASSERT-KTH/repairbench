diff --git a/tmp/891afe8b-cf0f-4727-ad74-42ffa86be9bc_buggy.java b/tmp/cc134048-ccc4-4a07-aa05-9fc4a3898995_fixed.java
index 7ea7ac9..e714da2 100644
--- a/tmp/891afe8b-cf0f-4727-ad74-42ffa86be9bc_buggy.java
+++ b/tmp/cc134048-ccc4-4a07-aa05-9fc4a3898995_fixed.java
@@ -1,63 +1,52 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
+            // Field doesn't exist - add it
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
-            int[] newValues = new int[newTypes.length];
+            int[] newValues = new int[newTypes.length]; // size = iTypes.length + 1
 
-            // find correct insertion point to keep largest-smallest order
-            int i = 0;
-            DurationField unitField = fieldType.getDurationType().getField(iChronology);
-            if (unitField.isSupported()) {
-                for (; i < iTypes.length; i++) {
-                    DateTimeFieldType loopType = iTypes[i];
-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
-                    if (loopUnitField.isSupported()) {
-                        int compare = unitField.compareTo(loopUnitField);
-                        if (compare > 0) {
-                            break;
-                        } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                            if (rangeField.compareTo(loopRangeField) > 0) {
-                                break;
-                            }
-                        }
-                    }
-                }
-            }
-            System.arraycopy(iTypes, 0, newTypes, 0, i);
-            System.arraycopy(iValues, 0, newValues, 0, i);
-            newTypes[i] = fieldType;
-            newValues[i] = value;
-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-            // use public constructor to ensure full validation
-            // this isn't overly efficient, but is safe
+            // Add the new field type and value - let constructor handle sorting and validation
+            // The constructor performs necessary checks for chronology, nulls, duplicates,
+            // sorting and values. It also calls chronology.validate.
+            System.arraycopy(iTypes, 0, newTypes, 0, iTypes.length);
+            System.arraycopy(iValues, 0, newValues, 0, iValues.length);
+            newTypes[iTypes.length] = fieldType;
+            newValues[iTypes.length] = value;
+
+            // Use the constructor that validates and sorts the arrays.
+            // This ensures that duplicate field types which were not previously
+            // caught (like hourOfDay and clockhourOfDay) are now detected correctly.
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
-            iChronology.validate(newPartial, newValues);
+            // No need to call iChronology.validate again here, constructor does it.
             return newPartial;
+
         }
+        // Field exists - update value
         if (value == getValue(index)) {
-            return this;
+            return this; // No change needed
         }
-        int[] newValues = getValues();
+        int[] newValues = getValues(); // Get a copy of the internal values array
+        // Use the field's set method to validate the value and update the array
+        // Note: field.set may throw an exception if the value is invalid.
         newValues = getField(index).set(this, index, newValues, value);
+        // Create a new Partial instance using the private constructor
+        // which assumes the types array is already correct and validated.
         return new Partial(this, newValues);
     }
\ No newline at end of file
