diff --git a/tmp/f87947e5-3c20-4cee-94e0-d0fd3fcf5ce6_buggy.java b/tmp/1739f6bb-0d48-45ff-963b-e975bd39643c_fixed.java
index 7ea7ac9..53a153f 100644
--- a/tmp/f87947e5-3c20-4cee-94e0-d0fd3fcf5ce6_buggy.java
+++ b/tmp/1739f6bb-0d48-45ff-963b-e975bd39643c_fixed.java
@@ -1,63 +1,119 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
+            // --- BEGIN FIX ---
+            // Check for incompatibility: A field is incompatible if the duration and range duration match an existing field.
+            DurationField newUnitField = fieldType.getDurationType().getField(iChronology);
+            DurationField newRangeField = null;
+            if (fieldType.getRangeDurationType() != null) {
+                newRangeField = fieldType.getRangeDurationType().getField(iChronology);
+            }
+
+            for (int i = 0; i < iTypes.length; i++) {
+                DateTimeFieldType loopType = iTypes[i];
+                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
+                if (newUnitField.isSupported() && loopUnitField.isSupported() && newUnitField.getType().equals(loopUnitField.getType())) {
+                    DurationField loopRangeField = null;
+                    if (loopType.getRangeDurationType() != null) {
+                        loopRangeField = loopType.getRangeDurationType().getField(iChronology);
+                    }
+                    // Check if range duration fields match (or are both null)
+                    boolean rangeFieldsMatch;
+                    if (newRangeField == null) {
+                        rangeFieldsMatch = (loopRangeField == null);
+                    } else {
+                        rangeFieldsMatch = (loopRangeField != null &&
+                                            newRangeField.isSupported() && // Check if fields are supported before comparing type
+                                            loopRangeField.isSupported() &&
+                                            newRangeField.getType().equals(loopRangeField.getType()));
+                    }
+
+                    if (rangeFieldsMatch) {
+                        // Found a field with the same duration and range duration.
+                        throw new IllegalArgumentException("Field '" + fieldType + "' is already supported by '" + loopType + "'");
+                    }
+                }
+            }
+            // --- END FIX ---
+
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
             
             // find correct insertion point to keep largest-smallest order
             int i = 0;
-            DurationField unitField = fieldType.getDurationType().getField(iChronology);
-            if (unitField.isSupported()) {
+            // DurationField unitField = fieldType.getDurationType().getField(iChronology); // Use newUnitField from check
+            if (newUnitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
-                        int compare = unitField.compareTo(loopUnitField);
-                        if (compare > 0) {
-                            break;
-                        } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                            if (rangeField.compareTo(loopRangeField) > 0) {
+                        int compare = newUnitField.compareTo(loopUnitField);
+                        if (compare > 0) { // new unit is > loop unit (eg years > months)
                             break;
+                        } else if (compare == 0) { // units are equal (eg hours == hours)
+                            // DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); // Use newRangeField from check
+                            DurationField loopRangeField = null;
+                            if (loopType.getRangeDurationType() != null) {
+                                 loopRangeField = loopType.getRangeDurationType().getField(iChronology);
+                            }
+                            // Handle nulls in comparison for insertion order
+                            if (newRangeField == null) {
+                                if (loopRangeField != null) {
+                                    break; // New is null (bigger range), loop is not. Insert new before loop.
+                                }
+                                // Both null. Order doesn't matter based on range. Continue search.
+                            } else { // newRangeField != null
+                                if (loopRangeField == null) {
+                                    // New is not null, loop is null (bigger range). Continue search.
+                                } else {
+                                     // Both non-null, compare them.
+                                     if (newRangeField.compareTo(loopRangeField) > 0) { // New range > loop range
+                                         break; // Insert new before loop.
+                                     }
+                                     // If new range <= loop range, continue search.
+                                }
                             }
                         }
+                        // else if (compare < 0) - new unit < loop unit (eg minutes < hours), continue searching
                     }
                 }
             }
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-            // use public constructor to ensure full validation
+            System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i); // Original length was correct
+            System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i); // Original length was correct
+            // use public constructor to ensure full validation (value range, etc)
             // this isn't overly efficient, but is safe
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
-            iChronology.validate(newPartial, newValues);
+            // iChronology.validate(newPartial, newValues); // Constructor already calls validate, remove redundant call
             return newPartial;
         }
+
+        // Field already exists - update value
         if (value == getValue(index)) {
-            return this;
+            return this; // No change
         }
-        int[] newValues = getValues();
+        int[] newValues = getValues(); // Get a copy
+        // Use the chronology-specific DateTimeField to set the value, which handles validation and cascading effects if necessary (though Partial is normally simple)
         newValues = getField(index).set(this, index, newValues, value);
-        return new Partial(this, newValues);
+        return new Partial(this, newValues); // Constructor validates the potentially changed values
     }
\ No newline at end of file
