diff --git a/tmp/f844cbfd-b8c0-4db6-9313-0db5508e67c0_buggy.java b/tmp/001b9b0d-3b1d-4e60-9cc9-3fc5ee5b7828_fixed.java
index 7ea7ac9..5ca3015 100644
--- a/tmp/f844cbfd-b8c0-4db6-9313-0db5508e67c0_buggy.java
+++ b/tmp/001b9b0d-3b1d-4e60-9cc9-3fc5ee5b7828_fixed.java
@@ -1,63 +1,94 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
             
             // find correct insertion point to keep largest-smallest order
             int i = 0;
             DurationField unitField = fieldType.getDurationType().getField(iChronology);
             if (unitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
                         int compare = unitField.compareTo(loopUnitField);
                         if (compare > 0) {
-                            break;
+                            break; // Found the insertion point
                         } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                            if (rangeField.compareTo(loopRangeField) > 0) {
+                            // Durations are equal, compare range durations
+                            DurationField rangeField = null;
+                            if (fieldType.getRangeDurationType() != null) {
+                                rangeField = fieldType.getRangeDurationType().getField(iChronology);
+                            }
+                            DurationField loopRangeField = null;
+                            if (loopType.getRangeDurationType() != null) {
+                                loopRangeField = loopType.getRangeDurationType().getField(iChronology);
+                            }
+                            
+                            if (rangeField == null) {
+                                if (loopRangeField == null) {
+                                    // Both null range fields, same duration field. Consider duplicate.
+                                     throw new IllegalArgumentException("Field '" + fieldType.getName() + "' is already supported");
+                                } else {
+                                    // rangeField is null (infinite), loopRangeField is not. rangeField > loopRangeField. break.
                                     break;
                                 }
+                            } else if (loopRangeField == null) {
+                                // rangeField is not null, loopRangeField is null (infinite). rangeField < loopRangeField. continue loop.
+                            } else {
+                                // Both range fields are not null, compare them.
+                                int compareRange = rangeField.compareTo(loopRangeField);
+                                if (compareRange > 0) {
+                                    break; // Found the insertion point
+                                } else if (compareRange == 0) {
+                                    // Durations and RangeDurations are equal -> Overlapping fields based on sorting criteria
+                                    throw new IllegalArgumentException("Field '" + fieldType.getName() + "' is already supported");
                                 }
+                                // else compareRange < 0, insertion point is further down. Continue loop.
+                            }
+                        }
+                        // else compare < 0, insertion point is further down. Continue loop.
                     }
                 }
             }
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
+            System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);
+            System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);
             // use public constructor to ensure full validation
             // this isn't overly efficient, but is safe
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
+            // constructor invocation above should validate fields, throwing exception if necessary
+            // additional validation by chronology is applied below
             iChronology.validate(newPartial, newValues); 
             return newPartial;
         }
+        
+        // This part handles replacing an existing value
         if (value == getValue(index)) {
             return this;
         }
         int[] newValues = getValues();
         newValues = getField(index).set(this, index, newValues, value);
-        return new Partial(this, newValues);
+        return new Partial(this, newValues); // Uses constructor that does less validation
     }
\ No newline at end of file
