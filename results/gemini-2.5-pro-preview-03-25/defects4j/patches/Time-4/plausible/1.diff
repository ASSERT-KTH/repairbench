diff --git a/tmp/5b563c81-5dd3-499e-9466-2d62542330ee_buggy.java b/tmp/af15fcaa-29d3-4040-8a51-8ff1166ea579_fixed.java
index 7ea7ac9..9f0f4fd 100644
--- a/tmp/5b563c81-5dd3-499e-9466-2d62542330ee_buggy.java
+++ b/tmp/af15fcaa-29d3-4040-8a51-8ff1166ea579_fixed.java
@@ -1,63 +1,110 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
+     * <p>
+     * If the field type specified is already present, the value stored for that field is updated.
+     * If the field type specified is not present, the field type is added to the partial.
+     * When a field type is added, the new fields are checked against the existing fields.
+     * If the addition is valid, the fields are inserted in the correct position according
+     * to their duration. If the field is equivalent to one already stored (based on
+     * duration and range duration), an {@code IllegalArgumentException} is thrown.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
-     * @throws IllegalArgumentException if the value is null or invalid
+     * @throws IllegalArgumentException if the value is null or invalid, or if the field type
+     *          is equivalent to one already stored.
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
-        int index = indexOf(fieldType);
-        if (index == -1) {
+        int index = indexOf(fieldType); // Check for exact field type object
+
+        if (index == -1) { // Field type not found by object reference
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
 
-            // find correct insertion point to keep largest-smallest order
+            // Find correct insertion point and check for equivalent fields.
             int i = 0;
             DurationField unitField = fieldType.getDurationType().getField(iChronology);
+
             if (unitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
                         int compare = unitField.compareTo(loopUnitField);
-                        if (compare > 0) {
+                        if (compare > 0) { // Found insertion point: new field's unit is larger than loop field's unit
                             break;
-                        } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                            if (rangeField.compareTo(loopRangeField) > 0) {
+                        } else if (compare == 0) { // Units are the same, compare range duration fields
+                            // Note: This comparison logic should match the one in the Partial constructor
+                            // for consistency in defining field equivalence/ordering.
+                            DurationField rangeField = fieldType.getRangeDurationType() == null ? null : fieldType.getRangeDurationType().getField(iChronology);
+                            DurationField loopRangeField = loopType.getRangeDurationType() == null ? null : loopType.getRangeDurationType().getField(iChronology);
+
+                            if (rangeField == null) {
+                                if (loopRangeField == null) {
+                                    // Both null range, same duration -> equivalent field exists
+                                    throw new IllegalArgumentException("Field '" + fieldType.getName() + "' is already supported");
+                                } else {
+                                    // New field's range (null) comes after loop field's range (non-null). Continue search.
+                                }
+                            } else { // rangeField is not null
+                                if (loopRangeField == null) {
+                                    // New field's range (non-null) comes before loop field's range (null). Found insertion point.
+                                    break; 
+                                } else { // Both range fields are not null
+                                    int rangeCompare = rangeField.compareTo(loopRangeField);
+                                    if (rangeCompare > 0) {
+                                        // New field's range > loop field's range. Found insertion point.
                                         break;
+                                    } else if (rangeCompare == 0) {
+                                        // New field's range == loop field's range. Equivalent field found.
+                                        throw new IllegalArgumentException("Field '" + fieldType.getName() + "' is already supported");
+                                    }
+                                    // else rangeCompare < 0. New field's range < loop field's range. Continue search.
+                                }
                             }
                         }
+                        // else compare < 0: new field's unit is smaller than loop field's unit. Continue search.
                     }
                 }
             }
+            // else: unitField is not supported. Let constructor validation handle it later.
+
+            // Insert the field at index i
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-            // use public constructor to ensure full validation
-            // this isn't overly efficient, but is safe
+            System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);
+            System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);
+
+            // Constructor validates types, order, unsupported fields, and individual values.
+            // It should also implicitly handle overlaps/equivalences due to its sorting/duplicate check,
+            // but the explicit check added above ensures the desired behavior for this method.
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
+            
+            // This final validation might handle more complex cross-field value interactions specific to the chronology.
+            // It might seem redundant, but it's safer to keep for complex chronologies.
             iChronology.validate(newPartial, newValues); 
             return newPartial;
-        }
+
+        } else { // Field type already exists (found by object reference)
             if (value == getValue(index)) {
-            return this;
+                return this; // No change needed
             }
+            // Use the field's set method to update the value(s)
+            // This ensures chronology-specific logic and validation is applied.
             int[] newValues = getValues();
             newValues = getField(index).set(this, index, newValues, value);
+            // Create new partial using internal constructor (efficient)
             return new Partial(this, newValues);
         }
+    }
\ No newline at end of file
