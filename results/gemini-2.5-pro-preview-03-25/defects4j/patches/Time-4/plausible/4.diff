diff --git a/tmp/4751efc2-33c3-45ff-ae17-2a4b85231579_buggy.java b/tmp/c48146b8-e206-4d01-ac83-2f14c0063fb3_fixed.java
index 7ea7ac9..c693e17 100644
--- a/tmp/4751efc2-33c3-45ff-ae17-2a4b85231579_buggy.java
+++ b/tmp/c48146b8-e206-4d01-ac83-2f14c0063fb3_fixed.java
@@ -1,63 +1,84 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
             
             // find correct insertion point to keep largest-smallest order
             int i = 0;
             DurationField unitField = fieldType.getDurationType().getField(iChronology);
             if (unitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
                         int compare = unitField.compareTo(loopUnitField);
-                        if (compare > 0) {
-                            break;
-                        } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                            if (rangeField.compareTo(loopRangeField) > 0) {
-                                break;
+                        if (compare > 0) { // new field is smaller unit
+                            break; // insert before i
+                        } else if (compare == 0) { // same unit
+                            // Compare range duration fields
+                            DurationField rangeField = null;
+                            if (fieldType.getRangeDurationType() != null) {
+                                rangeField = fieldType.getRangeDurationType().getField(iChronology);
                             }
+                            DurationField loopRangeField = null;
+                            if (loopType.getRangeDurationType() != null) {
+                                loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                             }
+                            
+                            int rangeCompare;
+                            if (rangeField == null) {
+                                rangeCompare = (loopRangeField == null) ? 0 : -1; // null is smaller (larger range)
+                            } else {
+                                rangeCompare = (loopRangeField == null) ? 1 : rangeField.compareTo(loopRangeField);
+                            }
+
+                            if (rangeCompare > 0) { // new field has smaller range unit
+                                break; // insert before i
+                            } else if (rangeCompare == 0) { // same duration, same range duration
+                                // As index == -1, the types are different. This is a conflict.
+                                throw new IllegalArgumentException("Types array must not contain duplicate: " + loopType + " and " + fieldType);
+                            }
+                            // else rangeCompare < 0, new field has larger range unit, continue search
+                        }
+                        // else compare < 0, new field is larger unit, continue search
                     }
                 }
             }
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
             System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
             // use public constructor to ensure full validation
             // this isn't overly efficient, but is safe
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
-            iChronology.validate(newPartial, newValues);
+            // validation is done in constructor
+            // iChronology.validate(newPartial, newValues); // Removed as validation happens in constructor
             return newPartial;
         }
         if (value == getValue(index)) {
             return this;
         }
         int[] newValues = getValues();
         newValues = getField(index).set(this, index, newValues, value);
         return new Partial(this, newValues);
     }
\ No newline at end of file
