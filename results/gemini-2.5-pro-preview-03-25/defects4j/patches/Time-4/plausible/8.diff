diff --git a/tmp/9b50c9ca-f2bc-405c-802c-d0d37359f4e3_buggy.java b/tmp/5cc9ac65-8f6c-43bd-8d81-99083e81953c_fixed.java
index 7ea7ac9..f77a3bf 100644
--- a/tmp/9b50c9ca-f2bc-405c-802c-d0d37359f4e3_buggy.java
+++ b/tmp/5cc9ac65-8f6c-43bd-8d81-99083e81953c_fixed.java
@@ -1,63 +1,101 @@
     /**
      * Gets a copy of this date with the specified field set to a new value.
      * <p>
      * If this partial did not previously support the field, the new one will.
      * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed/added in the returned instance.
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
      * @return a copy of this instance with the field set
      * @throws IllegalArgumentException if the value is null or invalid
      */
     public Partial with(DateTimeFieldType fieldType, int value) {
         if (fieldType == null) {
             throw new IllegalArgumentException("The field type must not be null");
         }
         int index = indexOf(fieldType);
         if (index == -1) {
+            // Add the field type.
             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
             int[] newValues = new int[newTypes.length];
 
             // find correct insertion point to keep largest-smallest order
             int i = 0;
             DurationField unitField = fieldType.getDurationType().getField(iChronology);
             if (unitField.isSupported()) {
                 for (; i < iTypes.length; i++) {
                     DateTimeFieldType loopType = iTypes[i];
                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                     if (loopUnitField.isSupported()) {
                         int compare = unitField.compareTo(loopUnitField);
                         if (compare > 0) {
+                            // fieldType is a larger unit duration than loopType, insert here
                             break;
                         } else if (compare == 0) {
-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                            if (rangeField.compareTo(loopRangeField) > 0) {
+                            // fieldType has the same unit duration as loopType
+                            // check range duration fields for ordering and conflict
+                            DurationField rangeField = null;
+                            if (fieldType.getRangeDurationType() != null) {
+                                rangeField = fieldType.getRangeDurationType().getField(iChronology);
+                            }
+                            DurationField loopRangeField = null;
+                            if (loopType.getRangeDurationType() != null) {
+                                loopRangeField = loopType.getRangeDurationType().getField(iChronology);
+                            }
+
+                            if (rangeField != null && loopRangeField != null) {
+                                int rangeCompare = rangeField.compareTo(loopRangeField);
+                                if (rangeCompare > 0) {
+                                    // fieldType has a larger range duration, insert here
+                                    break;
+                                } else if (rangeCompare == 0) {
+                                    // Same duration and same range duration - conflict
+                                    throw new IllegalArgumentException("Field '" + fieldType + "' conflicts with existing field '" + loopType + "'");
+                                } else {
+                                    // fieldType has a smaller range duration, continue search
+                                }
+                            } else if (rangeField == null && loopRangeField == null) {
+                                // Same duration and both range durations are null - conflict
+                                 throw new IllegalArgumentException("Field '" + fieldType + "' conflicts with existing field '" + loopType + "'");
+                            } else if (rangeField != null && loopRangeField == null) {
+                                // fieldType has a range duration, loopType doesn't. fieldType is considered "larger". Insert here.
                                 break;
+                            } else { // rangeField == null && loopRangeField != null
+                                // fieldType has no range duration, loopType does. fieldType is considered "smaller". Continue search.
                             }
+                        } else { // compare < 0
+                            // fieldType is a smaller unit duration than loopType, continue search
                         }
                     }
                 }
             }
+            // Insert the new field and value at the determined index i
             System.arraycopy(iTypes, 0, newTypes, 0, i);
             System.arraycopy(iValues, 0, newValues, 0, i);
             newTypes[i] = fieldType;
             newValues[i] = value;
-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
+            System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);
+            System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);
+
             // use public constructor to ensure full validation
             // this isn't overly efficient, but is safe
+            // The constructor performs necessary validation, including chronology validation.
             Partial newPartial = new Partial(iChronology, newTypes, newValues);
-            iChronology.validate(newPartial, newValues);
+            // Ensure chronology validates the final partial state (might be redundant if constructor does it fully)
+            // iChronology.validate(newPartial, newPartial.getValues()); // Javadoc suggests constructor handles validation
             return newPartial;
-        }
+
+        } else {
+            // Field already exists - update value.
             if (value == getValue(index)) {
-            return this;
+                return this; // No change
             }
-        int[] newValues = getValues();
+            int[] newValues = getValues(); // Get a copy
+            // Use the field's set method to update the values array, potentially adjusting other fields.
             newValues = getField(index).set(this, index, newValues, value);
-        return new Partial(this, newValues);
+            return new Partial(this, newValues); // Constructor validates the new values
+        }
     }
\ No newline at end of file
