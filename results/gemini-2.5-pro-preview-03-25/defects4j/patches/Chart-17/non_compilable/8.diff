diff --git a/tmp/27c1960a-7f2f-4a19-a438-a754fd38890f_buggy.java b/tmp/9247c8cc-b157-4e8b-b93b-71eb81cd192c_fixed.java
index 55391e1..040b9f7 100644
--- a/tmp/27c1960a-7f2f-4a19-a438-a754fd38890f_buggy.java
+++ b/tmp/9247c8cc-b157-4e8b-b93b-71eb81cd192c_fixed.java
@@ -1,19 +1,52 @@
     /**
      * Returns a clone of the time series.
      * <P>
      * Notes:
      * <ul>
      *   <li>no need to clone the domain and range descriptions, since String 
      *     object is immutable;</li>
-     *   <li>we pass over to the more general method clone(start, end).</li>
+     *   <li>we pass over to the more general method createCopy(start, end) for
+     *     non-empty series. An empty series is handled separately as 
+     *     createCopy() requires start <= end.</li>
      * </ul>
      *
      * @return A clone of the time series.
      * 
-     * @throws CloneNotSupportedException not thrown by this class, but 
-     *         subclasses may differ.
+     * @throws CloneNotSupportedException if cloning is not supported (per 
+     *         standard Object.clone() contract, although unlikely for this class).
      */
     public Object clone() throws CloneNotSupportedException {
+        // The createCopy() method has a precondition start <= end.
+        // When the time series is empty, getItemCount() returns 0, leading to
+        // a call like createCopy(0, -1). This violates the precondition and
+        // causes an IllegalArgumentException.
+        // We handle the empty series case directly here.
+        if (getItemCount() == 0) {
+            // Create a basic clone using super.clone()
+            // This handles immutable fields and basic object setup.
+            TimeSeries clone = (TimeSeries) super.clone();
+            
+            // Ensure the clone has its own independent, empty list for data items.
+            // This requires knowledge of the internal field name ('data') and type.
+            // Assuming 'data' is a java.util.List holding TimeSeriesDataItem objects.
+            // We create a new empty list of the appropriate type.
+            // If the actual implementation uses a different List type, this might
+            // need adjustment. ArrayList is a common default.
+            clone.data = new java.util.ArrayList(); 
+            
+            // Reset any cached values derived from the data list, as the list is now empty.
+            // Assuming 'maxYValue' and 'minYValue' are cached fields. If these fields
+            // do not exist or have different names, this part might need adjustment.
+            clone.maxYValue = Double.NaN; 
+            clone.minYValue = Double.NaN;
+            return clone;
+        }
+        else {
+            // For a non-empty series, the indices (0, getItemCount() - 1) are valid
+            // for createCopy(), so we delegate to it as originally intended.
+            // createCopy() is expected to handle the cloning of the container
+            // and the deep copying of the data items within the specified range.
             Object clone = createCopy(0, getItemCount() - 1);
             return clone;
         }
+    }
\ No newline at end of file
