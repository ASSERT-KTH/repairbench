diff --git a/tmp/4a05e502-bbdc-4d93-8a37-1b903391986d_buggy.java b/tmp/72b4ad1d-ce29-4d2d-a8fc-f94fde90a2ae_fixed.java
index 55391e1..5058c9a 100644
--- a/tmp/4a05e502-bbdc-4d93-8a37-1b903391986d_buggy.java
+++ b/tmp/72b4ad1d-ce29-4d2d-a8fc-f94fde90a2ae_fixed.java
@@ -1,19 +1,37 @@
     /**
      * Returns a clone of the time series.
      * <P>
      * Notes:
      * <ul>
      *   <li>no need to clone the domain and range descriptions, since String
      *     object is immutable;</li>
      *   <li>we pass over to the more general method clone(start, end).</li>
      * </ul>
      *
      * @return A clone of the time series.
      *
      * @throws CloneNotSupportedException not thrown by this class, but
      *         subclasses may differ.
      */
     public Object clone() throws CloneNotSupportedException {
-        Object clone = createCopy(0, getItemCount() - 1);
+        int itemCount = this.getItemCount();
+        Object clone;
+        if (itemCount == 0) {
+            // The createCopy(start, end) method requires start <= end.
+            // For an empty series, getItemCount() - 1 is -1.
+            // Calling createCopy(0, -1) violates the precondition.
+            // We need to return an empty clone.
+            // Assuming createCopy() correctly creates the TimeSeries instance
+            // shell (with metadata) before copying items, we can try calling
+            // it with indices that satisfy start <= end but result in no items
+            // being copied. Calling createCopy(-1, -1) satisfies start <= end.
+            // It is plausible that createCopy handles negative indices (or indices
+            // outside the valid range) by simply not copying any items, thus
+            // returning an empty series with the correct metadata.
+            clone = createCopy(-1, -1);
+        } else {
+            // For a non-empty series, the original logic works.
+            clone = createCopy(0, itemCount - 1);
+        }
         return clone;
     }
