diff --git a/tmp/f238f7d8-e952-4bc4-b968-a744975024a6_buggy.java b/tmp/d3d4b20c-8037-4427-b885-581dc68383fa_fixed.java
index ee10759..ac78e01 100644
--- a/tmp/f238f7d8-e952-4bc4-b968-a744975024a6_buggy.java
+++ b/tmp/d3d4b20c-8037-4427-b885-581dc68383fa_fixed.java
@@ -1,151 +1,184 @@
     /**
      * Method called to figure out settable properties for the
      * bean deserializer to use.
      *<p>
      * Note: designed to be overridable, and effort is made to keep interface
      * similar between versions.
      */
     protected void addBeanProps(DeserializationContext ctxt,
             BeanDescription beanDesc, BeanDeserializerBuilder builder)
         throws JsonMappingException
     {
         final boolean isConcrete = !beanDesc.getType().isAbstract();
+        // 11-Oct-2015, tatu: Need to promote type parameters for properties
         final SettableBeanProperty[] creatorProps = isConcrete
                 ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())
                 : null;
         final boolean hasCreatorProps = (creatorProps != null);
         
         // 01-May-2016, tatu: Which base type to use here gets tricky, since
         //   it may often make most sense to use general type for overrides,
         //   but what we have here may be more specific impl type. But for now
         //   just use it as is.
         JsonIgnoreProperties.Value ignorals = ctxt.getConfig()
                 .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),
                         beanDesc.getClassInfo());
         Set<String> ignored;
 
         if (ignorals != null) {
             boolean ignoreAny = ignorals.getIgnoreUnknown();
             builder.setIgnoreUnknownProperties(ignoreAny);
             // Or explicit/implicit definitions?
             ignored = ignorals.getIgnored();
             for (String propName : ignored) {
                 builder.addIgnorable(propName);
             }
         } else {
             ignored = Collections.emptySet();
         }
 
         // Also, do we have a fallback "any" setter?
         AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();
         AnnotatedMember anySetterField = null;
         if (anySetterMethod != null) {
             builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));
         }
         else {
         	anySetterField = beanDesc.findAnySetterField();
         	if(anySetterField != null) {
         		builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));
         	}
         }
+        // Implicit ones via @JsonIgnore and equivalent?
+        // Nop: resolved by [databind#1595]; handled by property introspection
+        /* 15-Feb-2017, tatu: This is tricky: need to combine Ignorals, and check
+         *   for explicit/implicit ignores... an earlier attempt had accidental disabling
+         *   of explicitly ignored fields, so reverted. But let's reconsider for 2.9?
+         *   Need to ensure that we don't ignore explicitly annotated things, but DO
+         *   consider implicit ignores.
+         */
+        /*
         // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter
-        // Implicit ones via @JsonIgnore and equivalent?
         if (anySetterMethod == null && anySetterField == null) {
+            // Implicit ones via @JsonIgnore and equivalent?
+            // 19-Jun-2016, tatu: As per [databind#1256], needs to use `findPropertyIgnorals`...
+            //    and that should take precedence over class annotations. Oh well.
+            // 26-Oct-2016, tatu: Need to consider `@JsonIgnore` on fields too...
+             * 
+             * NOTE! Use of `getIgnoredPropertyNames()` was problematic; should use `findPropertyIgnorals()` instead.
+             */
+        /*
         Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();
             if (ignored2 != null) {
                 for (String propName : ignored2) {
                     // allow ignoral of similarly named JSON property, but do not force;
                     // latter means NOT adding this to 'ignored':
                     builder.addIgnorable(propName);
                 }
             }
         }
+        */
         final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)
                 && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);
 
         // Ok: let's then filter out property definitions
         List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,
                 beanDesc, builder, beanDesc.findProperties(), ignored);
 
         // After which we can let custom code change the set
         if (_factoryConfig.hasDeserializerModifiers()) {
             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                 propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);
             }
         }
         
         // At which point we still have all kinds of properties; not all with mutators:
         for (BeanPropertyDefinition propDef : propDefs) {
             SettableBeanProperty prop = null;
             /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,
              *   we need to do linkage (as per [databind#318]), and so need to start with
              *   other types, and only then create constructor parameter, if any.
              */
             if (propDef.hasSetter()) {
                 JavaType propertyType = propDef.getSetter().getParameterType(0);
                 prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
             } else if (propDef.hasField()) {
                 JavaType propertyType = propDef.getField().getType();
                 prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
             } else if (useGettersAsSetters && propDef.hasGetter()) {
                 /* May also need to consider getters
                  * for Map/Collection properties; but with lowest precedence
                  */
                 AnnotatedMethod getter = propDef.getGetter();
                 // should only consider Collections and Maps, for now?
                 Class<?> rawPropertyType = getter.getRawType();
                 if (Collection.class.isAssignableFrom(rawPropertyType)
                         || Map.class.isAssignableFrom(rawPropertyType)) {
                     prop = constructSetterlessProperty(ctxt, beanDesc, propDef);
                 }
             }
             // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types
             //   (since they are never used anyway)
             if (hasCreatorProps && propDef.hasConstructorParameter()) {
                 /* If property is passed via constructor parameter, we must
                  * handle things in special way. Not sure what is the most optimal way...
                  * for now, let's just call a (new) method in builder, which does nothing.
                  */
                 // but let's call a method just to allow custom builders to be aware...
                 final String name = propDef.getName();
                 CreatorProperty cprop = null;
                 if (creatorProps != null) {
                     for (SettableBeanProperty cp : creatorProps) {
                         if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {
                             cprop = (CreatorProperty) cp;
                             break;
                         }
                     }
                 }
                 if (cprop == null) {
                     List<String> n = new ArrayList<>();
                     for (SettableBeanProperty cp : creatorProps) {
                         n.add(cp.getName());
                     }
+                    // 08-Mar-2017, tatu: Let's add hint of near matches too, if any
+                    List<String> similar = propDef.findExplicitNames();
+                    // 18-Mar-2017, tatu: Important! `propDef.getName()` is logical name; used to default
+                    //    to primary explicit name if one defined. But we should use logical name always.
+                    // 18-Mar-2017, tatu: Also, let's try finding by implicit name...
+                    if (similar.isEmpty()) {
+                        // otherwise defaults to setter/ctor name, but let's use implicit name if available
+                        String implicit = propDef.getInternalName();
+                        if (!implicit.equals(name)) { // different from logical name? Add
+                            similar = Collections.singletonList(implicit);
+                        }
+                    }
+                    
                     ctxt.reportBadPropertyDefinition(beanDesc, propDef,
-                            "Could not find creator property with name '%s' (known Creator properties: %s)",
-                            name, n);
+                            "Could not find creator property with name '%s' (known Creator properties: %s). %s",
+                            name, n,
+                            (similar.isEmpty() ? "" : String.format("Maybe define explicit '@JsonProperty(\"%s\")' for argument?", name))
+                    );
                     continue;
                 }
                 if (prop != null) {
                     cprop.setFallbackSetter(prop);
                 }
                 prop = cprop;
                 builder.addCreatorProperty(cprop);
                 continue;
             }
 
             if (prop != null) {
                 Class<?>[] views = propDef.findViews();
                 if (views == null) {
                     // one more twist: if default inclusion disabled, need to force empty set of views
                     if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {
                         views = NO_VIEWS;
                     }
                 }
                 // one more thing before adding to builder: copy any metadata
                 prop.setViews(views);
                 builder.addProperty(prop);
             }
         }
     }
\ No newline at end of file
