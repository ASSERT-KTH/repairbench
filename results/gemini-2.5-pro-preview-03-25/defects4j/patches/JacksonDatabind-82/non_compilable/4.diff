diff --git a/tmp/0ccb79d8-0a03-40b7-8cc2-86d1115bfd35_buggy.java b/tmp/2efe4f91-f459-44e4-9bbb-2f27ab9a2930_fixed.java
index ee10759..c3b9f4a 100644
--- a/tmp/0ccb79d8-0a03-40b7-8cc2-86d1115bfd35_buggy.java
+++ b/tmp/2efe4f91-f459-44e4-9bbb-2f27ab9a2930_fixed.java
@@ -1,151 +1,200 @@
     /**
      * Method called to figure out settable properties for the
      * bean deserializer to use.
      *<p>
      * Note: designed to be overridable, and effort is made to keep interface
      * similar between versions.
      */
     protected void addBeanProps(DeserializationContext ctxt,
             BeanDescription beanDesc, BeanDeserializerBuilder builder)
         throws JsonMappingException
     {
         final boolean isConcrete = !beanDesc.getType().isAbstract();
+        // 29-Sep-2014, tatu: Need to ensure we have constructor parameters available.
         final SettableBeanProperty[] creatorProps = isConcrete
                 ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())
                 : null;
         final boolean hasCreatorProps = (creatorProps != null);
 
         // 01-May-2016, tatu: Which base type to use here gets tricky, since
         //   it may often make most sense to use general type for overrides,
         //   but what we have here may be more specific impl type. But for now
         //   just use it as is.
         JsonIgnoreProperties.Value ignorals = ctxt.getConfig()
                 .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),
                         beanDesc.getClassInfo());
         Set<String> ignored;
 
         if (ignorals != null) {
             boolean ignoreAny = ignorals.getIgnoreUnknown();
             builder.setIgnoreUnknownProperties(ignoreAny);
             // Or explicit/implicit definitions?
-            ignored = ignorals.getIgnored();
+            ignored = ignorals.findIgnoredForDeserialization();
             for (String propName : ignored) {
                 builder.addIgnorable(propName);
             }
         } else {
             ignored = Collections.emptySet();
         }
 
         // Also, do we have a fallback "any" setter?
-        AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();
-        AnnotatedMember anySetterField = null;
-        if (anySetterMethod != null) {
-            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));
-        }
-        else {
-        	anySetterField = beanDesc.findAnySetterField();
-        	if(anySetterField != null) {
-        		builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));
-        	}
-        }
-        // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter
-        // Implicit ones via @JsonIgnore and equivalent?
-        if (anySetterMethod == null && anySetterField == null) {
-            Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();
-            if (ignored2 != null) {
-                for (String propName : ignored2) {
-                    // allow ignoral of similarly named JSON property, but do not force;
-                    // latter means NOT adding this to 'ignored':
+        AnnotatedMember anySetter = beanDesc.findAnySetterAccessor(); // fld/method
+        if (anySetter != null) {
+            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));
+        } else {
+            // keep track of explicitly ignored properties
+            // 22-Jun-2017, tatu: As per [databind#1595], need to ensure we will keep setter/field info even if getter is ignored
+            Collection<String> ignoredPropts = beanDesc.getIgnoredPropertyNames();
+            if (ignoredPropts != null) {
+                for(String propName : ignoredPropts) {
+                    // note: this is ALWAYS addition, intersection of Introspector/AnnotationIntrospector results
                      builder.addIgnorable(propName);
                  }
             }
         }
+
+        // Do we have Shape specification that requires converting array to properties?
+        // 10-Jun-2016, tatu: Only applicable to classes, not interfaces/abstract types
+        final boolean isCaseInsensitive = ctxt.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);
         final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)
                 && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);
 
+
         // Ok: let's then filter out property definitions
+        // 22-Jun-2017, tatu: Need to be careful, couldDeserialize() check is NOT enough
+        //    to know if we have implicit/explicit ignoral. So need separate check...
         List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,
                 beanDesc, builder, beanDesc.findProperties(), ignored);
 
         // After which we can let custom code change the set
         if (_factoryConfig.hasDeserializerModifiers()) {
             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                 propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);
             }
         }
 
         // At which point we still have all kinds of properties; not all with mutators:
         for (BeanPropertyDefinition propDef : propDefs) {
             SettableBeanProperty prop = null;
-            /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,
-             *   we need to do linkage (as per [databind#318]), and so need to start with
-             *   other types, and only then create constructor parameter, if any.
-             */
-            if (propDef.hasSetter()) {
-                JavaType propertyType = propDef.getSetter().getParameterType(0);
+
+            // Does it have setter? Or field? Or... ?
+            // 18-Oct-2013, tatu: Although constructor parameters have highest precedence,
+            //   we need to do linkage (as per [databind#318]), and so need to start with
+            //   other types, and only then create constructor parameter, if any.
+            AnnotatedMethod setter = propDef.getSetter();
+            if (setter != null) {
+                JavaType propertyType = setter.getParameterType(0);
                 prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
-            } else if (propDef.hasField()) {
-                JavaType propertyType = propDef.getField().getType();
+            } else {
+                AnnotatedField field = propDef.getField();
+                if (field != null) {
+                    JavaType propertyType = field.getType();
                     prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
-            } else if (useGettersAsSetters && propDef.hasGetter()) {
+                } else {
+                    // A primary "setter" is the thing for actual collection/map values.
+                    // But secondary is also possible, if we could use "getters-as-setters".
+                    AnnotatedMethod getter = propDef.getGetter();
+                    if (getter != null) {
+                        if (useGettersAsSetters) {
                             /* May also need to consider getters
                              * for Map/Collection properties; but with lowest precedence
                              */
-                AnnotatedMethod getter = propDef.getGetter();
                             // should only consider Collections and Maps, for now?
                             Class<?> rawPropertyType = getter.getRawType();
                             if (Collection.class.isAssignableFrom(rawPropertyType)
                                     || Map.class.isAssignableFrom(rawPropertyType)) {
                                 prop = constructSetterlessProperty(ctxt, beanDesc, propDef);
                             }
                         }
-            // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types
-            //   (since they are never used anyway)
-            if (hasCreatorProps && propDef.hasConstructorParameter()) {
+                    }
+                }
+            }
+
+            // [databind#1595]: Need to ensure we consider creator properties this late as well...
+            // Also: [databind#1328]: Make sure we include creator props for abstract types too!
+//            if (hasCreatorProps && propDef.hasConstructorParameter()) {
                 /* If property is passed via constructor parameter, we must
                  * handle things in special way. Not sure what is the most optimal way...
                  * for now, let's just call a (new) method in builder, which does nothing.
                  */
+            if (propDef.hasConstructorParameter()) {
                 // but let's call a method just to allow custom builders to be aware...
                 final String name = propDef.getName();
                 CreatorProperty cprop = null;
                 if (creatorProps != null) {
                     for (SettableBeanProperty cp : creatorProps) {
                         if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {
                             cprop = (CreatorProperty) cp;
                             break;
                         }
                     }
                 }
+                // should not be null; creator property must be passed (or exception)
                 if (cprop == null) {
+                    // 10-Jun-2016, tatu: Let's double-check using internal name as well:
+                    //    possibly we have mismatch in renaming? Or case-insensitivity needs reconciling?
+                    if (!ctxt.isEnabled(MapperFeature.FAIL_ON_INVALID_SUBTYPE)) { // [databind#2172]
+                        // For error message, use external name, then internal name, finally available creator names
+                        final String intName = propDef.getInternalName();
+                        for (SettableBeanProperty cp : creatorProps) {
+                            if (intName.equals(cp.getName()) && (cp instanceof CreatorProperty)) {
+                                cprop = (CreatorProperty) cp;
+                                break;
+                            }
+                        }
+                    }
+
+                    if (cprop == null) {
+                        // Let's consider case-insensitivity as well...
+                        if (isCaseInsensitive) {
+                            for (SettableBeanProperty cp : creatorProps) {
+                                if (name.equalsIgnoreCase(cp.getName()) && (cp instanceof CreatorProperty)) {
+                                    cprop = (CreatorProperty) cp;
+                                    break;
+                                }
+                            }
+                        }
+                    }
+
+                    if (cprop == null) {
+                        // 23-Mar-2017, tatu: Should this be an error? For now, becomes issue with
+                        //    [databind#1513], wherein `prop` might be null...
+                        // 25-Jul-2017, tatu: As per [databind#1647], needs to be reported unless trying to ignore unknown props
+                        // Let's also add bit more diagnostics for [databind#1694]
                         List<String> n = new ArrayList<>();
                         for (SettableBeanProperty cp : creatorProps) {
                             n.add(cp.getName());
                         }
                         ctxt.reportBadPropertyDefinition(beanDesc, propDef,
                                 "Could not find creator property with name '%s' (known Creator properties: %s)",
                                 name, n);
                         continue;
                     }
+                }
+                // If we have both creator prop and regular, make latter fallback
                 if (prop != null) {
+                    // [databind#1431]: better ensure we have back-reference information available
                     cprop.setFallbackSetter(prop);
                 }
                 prop = cprop;
                 builder.addCreatorProperty(cprop);
+                // regardless of property being created, need to know about existence
+                // for purpose of handling back-references
                 continue;
             }
 
+            // Otherwise, is it a regular property? needs name, type, mutator
             if (prop != null) {
                 Class<?>[] views = propDef.findViews();
                 if (views == null) {
                     // one more twist: if default inclusion disabled, need to force empty set of views
                     if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {
                         views = NO_VIEWS;
                     }
                 }
                 // one more thing before adding to builder: copy any metadata
                 prop.setViews(views);
                 builder.addProperty(prop);
             }
         }
     }
\ No newline at end of file
