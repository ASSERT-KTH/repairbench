diff --git a/tmp/f87741c3-5c9a-40c6-8695-4af384635df1_buggy.java b/tmp/85b97646-945c-45b8-a1d7-63b7824cc0d9_fixed.java
index ee10759..bcbd752 100644
--- a/tmp/f87741c3-5c9a-40c6-8695-4af384635df1_buggy.java
+++ b/tmp/85b97646-945c-45b8-a1d7-63b7824cc0d9_fixed.java
@@ -1,151 +1,208 @@
     /**
      * Method called to figure out settable properties for the
      * bean deserializer to use.
      *<p>
      * Note: designed to be overridable, and effort is made to keep interface
      * similar between versions.
      */
     protected void addBeanProps(DeserializationContext ctxt,
             BeanDescription beanDesc, BeanDeserializerBuilder builder)
         throws JsonMappingException
     {
         final boolean isConcrete = !beanDesc.getType().isAbstract();
+        //creator properties will be removed from regular list of properties in the end, based on name
         final SettableBeanProperty[] creatorProps = isConcrete
                 ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())
                 : null;
         final boolean hasCreatorProps = (creatorProps != null);
 
         // 01-May-2016, tatu: Which base type to use here gets tricky, since
         //   it may often make most sense to use general type for overrides,
         //   but what we have here may be more specific impl type. But for now
         //   just use it as is.
         JsonIgnoreProperties.Value ignorals = ctxt.getConfig()
                 .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),
                         beanDesc.getClassInfo());
+        // 17-Aug-2017, tatu: [databind#1728] Need to honor Merge requirement Accumulated value from ClassIntrospector.Basic
+        // TODO: rework ClassIntrospector.Basic.findPropertyIgnorals to use ConfigOverride
+        // instead if / in addition to JsonIgnoreProperties.Value
+        // ignorals = beanDesc.findPropertyIgnorals();
+
         Set<String> ignored;
 
         if (ignorals != null) {
             boolean ignoreAny = ignorals.getIgnoreUnknown();
             builder.setIgnoreUnknownProperties(ignoreAny);
             // Or explicit/implicit definitions?
             ignored = ignorals.getIgnored();
             for (String propName : ignored) {
                 builder.addIgnorable(propName);
             }
         } else {
             ignored = Collections.emptySet();
         }
 
         // Also, do we have a fallback "any" setter?
         AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();
         AnnotatedMember anySetterField = null;
         if (anySetterMethod != null) {
             builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));
         }
         else {
         	anySetterField = beanDesc.findAnySetterField();
         	if(anySetterField != null) {
         		builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));
         	}
         }
-        // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter
+
         // Implicit ones via @JsonIgnore and equivalent?
-        if (anySetterMethod == null && anySetterField == null) {
-            Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();
-            if (ignored2 != null) {
-                for (String propName : ignored2) {
-                    // allow ignoral of similarly named JSON property, but do not force;
-                    // latter means NOT adding this to 'ignored':
+        // Implement changes suggested by [databind#1595], wherein we only consider implicitly ignored
+        // properties after explicit ones and any setter.
+
+        // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter
+        // (because we don't know if that could be overridden)
+
+        // Nor should we add any names explicitly defined with @JsonProperty: assumption
+        // is that @JsonIgnore should be used, NOT annotation on non-visible setter/field.
+        // Let's just collect explicitly defined ones from list of all properties:
+
+        // 13-Nov-2015, tatu: As per [databind#999] let's also consider @JsonIgnore applied
+        //    to getter, ignorable for serialization. For deserialization, however, we
+        //    should NOT ignore properties that have visible setters... so, wait until
+        //    we have filtered out all viable property definitions.
+
+        // 15-Jun-2020, tatu: As per [databind#2722], should take into account possibility
+        //   of explicit ignoral of a Creator property. But for that, need to combine
+        //   ignoral information first
+        Map<String, BeanPropertyDefinition> propMap = new LinkedHashMap<>();
+        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {
+            propMap.put(propDef.getName(), propDef);
+        }
+        // May need to refine `ignored` based on explicit definitions
+        {
+            Collection<String> ignoredByName = beanDesc.getIgnoredPropertyNames();
+            if (ignoredByName != null) {
+                for (String propName : ignoredByName) {
+                    // 03-Feb-2017, tatu: As per [databind#1595] do not block explicit property
+                    //    (which would be blockable via @JsonIgnoreProperties)
+                    if (!propMap.containsKey(propName)) {
                         builder.addIgnorable(propName);
                     }
                 }
             }
+        }
+
         final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)
                 && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);
 
         // Ok: let's then filter out property definitions
+        // 16-Aug-2017, tatu: [databind#1728] needs to be done earlier, so that
+        //   we know not to try to use implicitly ignorable props.
         List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,
                 beanDesc, builder, beanDesc.findProperties(), ignored);
 
         // After which we can let custom code change the set
         if (_factoryConfig.hasDeserializerModifiers()) {
             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                 propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);
             }
         }
 
         // At which point we still have all kinds of properties; not all with mutators:
         for (BeanPropertyDefinition propDef : propDefs) {
             SettableBeanProperty prop = null;
             /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,
              *   we need to do linkage (as per [databind#318]), and so need to start with
              *   other types, and only then create constructor parameter, if any.
              */
             if (propDef.hasSetter()) {
                 JavaType propertyType = propDef.getSetter().getParameterType(0);
                 prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
             } else if (propDef.hasField()) {
                 JavaType propertyType = propDef.getField().getType();
                 prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
             } else if (useGettersAsSetters && propDef.hasGetter()) {
                 /* May also need to consider getters
                  * for Map/Collection properties; but with lowest precedence
                  */
                 AnnotatedMethod getter = propDef.getGetter();
                 // should only consider Collections and Maps, for now?
                 Class<?> rawPropertyType = getter.getRawType();
                 if (Collection.class.isAssignableFrom(rawPropertyType)
                         || Map.class.isAssignableFrom(rawPropertyType)) {
                     prop = constructSetterlessProperty(ctxt, beanDesc, propDef);
                 }
             }
             // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types
             //   (since they are never used anyway)
             if (hasCreatorProps && propDef.hasConstructorParameter()) {
                 /* If property is passed via constructor parameter, we must
                  * handle things in special way. Not sure what is the most optimal way...
                  * for now, let's just call a (new) method in builder, which does nothing.
                  */
                 // but let's call a method just to allow custom builders to be aware...
                 final String name = propDef.getName();
                 CreatorProperty cprop = null;
                 if (creatorProps != null) {
                     for (SettableBeanProperty cp : creatorProps) {
                         if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {
                             cprop = (CreatorProperty) cp;
                             break;
                         }
                     }
                 }
                 if (cprop == null) {
+                    // 15-Jun-2020, tatu: [databind#2722]: Was creator property ignored?
+                    //    Need to check this early, before reporting an error.
+                    if (!ignored.contains(name)) {
                         List<String> n = new ArrayList<>();
                         for (SettableBeanProperty cp : creatorProps) {
                             n.add(cp.getName());
                         }
                         ctxt.reportBadPropertyDefinition(beanDesc, propDef,
                                 "Could not find creator property with name '%s' (known Creator properties: %s)",
                                 name, n);
+                    }
+                    // otherwise ignored, just skip
                     continue;
                 }
+                // If we have both Creator Property and regular Setter, merge...
                 if (prop != null) {
-                    cprop.setFallbackSetter(prop);
+                    // 19-Oct-2016, tatu: Let's make default SettableBeanProperty support fallback setter
+                    //    iff its "concrete" type is CreatorProperty
+                    // Note: since 2.12, need explicit cast here:
+                    cprop.setFallbackSetter((SettableBeanProperty)prop);
                 }
+                // Type compatibility check? No, creator property already constructed...
+                // Except... need to also ensure annotations are merged. Let's not worry quite yet
+
                 prop = cprop;
+                // Add to builder? Yes. Drop from list of creator properties? Yes.
                 builder.addCreatorProperty(cprop);
-                continue;
+                // And remove from the list of remaining props
+                // 23-Nov-2017, tatu: Need to do this based on index, not value:
+                //   important as we do identity equality check NOT equals()
+                for (int i = 0; i < creatorProps.length; ++i) {
+                    if (creatorProps[i] == prop) {
+                        creatorProps[i] = null; // need to mark as used
+                        break;
+                    }
+                }
+                continue; // processing of this property complete
             }
 
+            // No Creator property? Add if we found regular property.
             if (prop != null) {
                 Class<?>[] views = propDef.findViews();
                 if (views == null) {
                     // one more twist: if default inclusion disabled, need to force empty set of views
                     if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {
                         views = NO_VIEWS;
                     }
                 }
                 // one more thing before adding to builder: copy any metadata
                 prop.setViews(views);
                 builder.addProperty(prop);
             }
         }
     }
\ No newline at end of file
