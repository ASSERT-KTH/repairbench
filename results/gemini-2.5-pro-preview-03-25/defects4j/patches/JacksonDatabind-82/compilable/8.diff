diff --git a/tmp/e0b06459-caf2-41a5-9a40-59abbaaac08a_buggy.java b/tmp/e96d2c40-a72c-4d4c-adb8-5d216c20b591_fixed.java
index ee10759..e189d49 100644
--- a/tmp/e0b06459-caf2-41a5-9a40-59abbaaac08a_buggy.java
+++ b/tmp/e96d2c40-a72c-4d4c-adb8-5d216c20b591_fixed.java
@@ -1,151 +1,163 @@
     /**
      * Method called to figure out settable properties for the
      * bean deserializer to use.
      *<p>
      * Note: designed to be overridable, and effort is made to keep interface
      * similar between versions.
      */
     protected void addBeanProps(DeserializationContext ctxt,
             BeanDescription beanDesc, BeanDeserializerBuilder builder)
         throws JsonMappingException
     {
         final boolean isConcrete = !beanDesc.getType().isAbstract();
         final SettableBeanProperty[] creatorProps = isConcrete
                 ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())
                 : null;
         final boolean hasCreatorProps = (creatorProps != null);
 
         // 01-May-2016, tatu: Which base type to use here gets tricky, since
         //   it may often make most sense to use general type for overrides,
         //   but what we have here may be more specific impl type. But for now
         //   just use it as is.
         JsonIgnoreProperties.Value ignorals = ctxt.getConfig()
                 .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),
                         beanDesc.getClassInfo());
         Set<String> ignored;
 
         if (ignorals != null) {
             boolean ignoreAny = ignorals.getIgnoreUnknown();
             builder.setIgnoreUnknownProperties(ignoreAny);
             // Or explicit/implicit definitions?
-            ignored = ignorals.getIgnored();
+            // 2.9: need to check 'ignored' first
+            ignored = ignorals.findIgnoredForDeserialization();
             for (String propName : ignored) {
                 builder.addIgnorable(propName);
             }
         } else {
             ignored = Collections.emptySet();
         }
 
         // Also, do we have a fallback "any" setter?
         AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();
         AnnotatedMember anySetterField = null;
         if (anySetterMethod != null) {
             builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));
         }
         else {
             anySetterField = beanDesc.findAnySetterField();
             if(anySetterField != null) {
                 builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));
             }
         }
-        // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter
-        // Implicit ones via @JsonIgnore and equivalent?
-        if (anySetterMethod == null && anySetterField == null) {
-            Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();
-            if (ignored2 != null) {
-                for (String propName : ignored2) {
-                    // allow ignoral of similarly named JSON property, but do not force;
-                    // latter means NOT adding this to 'ignored':
-                    builder.addIgnorable(propName);
-                }
-            }
-        }
+        // Nop: any-setter handling allows ignoring properties locally.
+        // 08-Nov-2016, tatu: Except, minor twist; need to block ignorable ones explicitly, still
+        // 14-Mar-2017, tatu: As per [databind#1595], need to consider implicit ignores, now handled
+        //    by `filterBeanProps`
+
+        // Implicitly ignored properties via `@JsonIgnore` are handled by `filterBeanProps`,
+        // which is called below. `filterBeanProps` should filter out properties where
+        // `@JsonIgnore` is present on a mutator (field/setter).
+        // Handling `@JsonIgnore` on a getter without a mutator is irrelevant for deserialization.
+        // Handling `@JsonIgnore` on a getter WITH a mutator should NOT cause the property
+        // to be ignored for deserialization (which is why the explicit call to `builder.addIgnorable`
+        // based on `beanDesc.getIgnoredPropertyNames()` was removed).
+
         final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)
                 && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);
 
         // Ok: let's then filter out property definitions
+        // 27-Apr-2017, tatu: Note: `filterBeanProps` WILL handle `getIgnoredPropertyNames()`
+        //    processing, which includes `@JsonIgnore` annotations.
         List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,
                 beanDesc, builder, beanDesc.findProperties(), ignored);
 
         // After which we can let custom code change the set
         if (_factoryConfig.hasDeserializerModifiers()) {
             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                 propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);
             }
         }
 
         // At which point we still have all kinds of properties; not all with mutators:
         for (BeanPropertyDefinition propDef : propDefs) {
             SettableBeanProperty prop = null;
             /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,
              *   we need to do linkage (as per [databind#318]), and so need to start with
              *   other types, and only then create constructor parameter, if any.
              */
             if (propDef.hasSetter()) {
                 JavaType propertyType = propDef.getSetter().getParameterType(0);
                 prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
             } else if (propDef.hasField()) {
                 JavaType propertyType = propDef.getField().getType();
                 prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
             } else if (useGettersAsSetters && propDef.hasGetter()) {
                 /* May also need to consider getters
                  * for Map/Collection properties; but with lowest precedence
                  */
                 AnnotatedMethod getter = propDef.getGetter();
                 // should only consider Collections and Maps, for now?
                 Class<?> rawPropertyType = getter.getRawType();
                 if (Collection.class.isAssignableFrom(rawPropertyType)
                         || Map.class.isAssignableFrom(rawPropertyType)) {
                     prop = constructSetterlessProperty(ctxt, beanDesc, propDef);
                 }
             }
             // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types
             //   (since they are never used anyway)
             if (hasCreatorProps && propDef.hasConstructorParameter()) {
                 /* If property is passed via constructor parameter, we must
                  * handle things in special way. Not sure what is the most optimal way...
                  * for now, let's just call a (new) method in builder, which does nothing.
                  */
                 // but let's call a method just to allow custom builders to be aware...
                 final String name = propDef.getName();
                 CreatorProperty cprop = null;
                 if (creatorProps != null) {
                     for (SettableBeanProperty cp : creatorProps) {
+                        // 01-Sep-2016, tatu: due to potential for implicit name translation, match name AND index
+                        // 14-Mar-2017, tatu: Actually, let's just match by name for now. Safer.
                         if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {
                             cprop = (CreatorProperty) cp;
                             break;
                         }
                     }
                 }
                 if (cprop == null) {
+                    // 29-Oct-2018, tatu: Need to guard against empty/null `creatorProps`
+                    //    even if `hasCreatorProps` is true (may contain non-CreatorProperty ones?)
                     List<String> n = new ArrayList<>();
+                    if (creatorProps != null) {
                         for (SettableBeanProperty cp : creatorProps) {
                             n.add(cp.getName());
                         }
+                    }
                     ctxt.reportBadPropertyDefinition(beanDesc, propDef,
                             "Could not find creator property with name '%s' (known Creator properties: %s)",
                             name, n);
                     continue;
                 }
                 if (prop != null) {
                     cprop.setFallbackSetter(prop);
                 }
                 prop = cprop;
+                // Let's add this regardless of whether we have actual property setter or not?
                 builder.addCreatorProperty(cprop);
-                continue;
+                // 28-Apr-2017, tatu: Need to retain creator properties, to support merging etc.
+                continue; // important! (but may need revisit?)
             }
 
             if (prop != null) {
                 Class<?>[] views = propDef.findViews();
                 if (views == null) {
                     // one more twist: if default inclusion disabled, need to force empty set of views
                     if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {
                         views = NO_VIEWS;
                     }
                 }
                 // one more thing before adding to builder: copy any metadata
                 prop.setViews(views);
                 builder.addProperty(prop);
             }
         }
     }
\ No newline at end of file
