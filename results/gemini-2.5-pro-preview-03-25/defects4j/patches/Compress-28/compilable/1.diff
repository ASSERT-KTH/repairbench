diff --git a/tmp/c3cf95cc-07ab-4b62-81b4-aa7974191420_buggy.java b/tmp/5b6365dc-3bb4-4882-adc0-53cefd1f0420_fixed.java
index 0f439b3..18196fb 100644
--- a/tmp/c3cf95cc-07ab-4b62-81b4-aa7974191420_buggy.java
+++ b/tmp/5b6365dc-3bb4-4882-adc0-53cefd1f0420_fixed.java
@@ -1,38 +1,63 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
+     * @throws IOException on error, including Physical EOF detected before logical EOF
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
 
-        if (hasHitEOF || entryOffset >= entrySize) {
+        // Check if the logical end of the current entry has been reached
+        if (entryOffset >= entrySize) {
             return -1;
         }
 
+        // Check if there is a current entry defined
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
+        // Clamp the number of bytes to read to the remaining size of the current entry
         numToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // Read bytes from the underlying input stream
+        int bytesRead = is.read(buf, offset, numToRead);
         
-        if (totalRead == -1) {
-            hasHitEOF = true;
-        } else {
-            entryOffset += totalRead;
+        // Check if the underlying stream reached EOF prematurely
+        if (bytesRead == -1) {
+            // We should not hit EOF before entryOffset >= entrySize
+            if (entrySize > entryOffset) {
+                throw new IOException("Truncated TAR archive: Expected " + entrySize
+                                     + " bytes, but only found " + entryOffset
+                                     + " bytes in entry " + currEntry.getName());
             }
+            // If entrySize == entryOffset, it means we just reached the logical end,
+            // which should have been caught by the initial check.
+            // However, if we somehow read exactly up to the end and the underlying stream
+            // also ends, we signal the logical EOF.
+            // Note: The initial check (entryOffset >= entrySize) handles the normal EOF case.
+            // Getting -1 here strongly implies truncation.
+            // Let's be strict and always throw if is.read returns -1 unexpectedly.
+             throw new IOException("Truncated TAR archive: Expected " + entrySize
+                                  + " bytes, but only found " + entryOffset
+                                  + " bytes in entry " + currEntry.getName());
+            // The hasHitEOF flag becomes largely unnecessary with this exception logic.
+        }
+        // else bytesRead >= 0
+
+        // Update the count of bytes read from the underlying stream
+        count(bytesRead);
+
+        // Update the offset within the current entry
+        entryOffset += bytesRead;
 
-        return totalRead;
+        // Return the number of bytes actually read in this call
+        return bytesRead;
     }
\ No newline at end of file
