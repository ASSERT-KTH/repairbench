diff --git a/tmp/bdde3d4b-f7f3-4ae1-b771-7e1541eb06dd_buggy.java b/tmp/55699252-91d3-4140-88f2-8efbb66b8fbf_fixed.java
index 0f439b3..f26eec3 100644
--- a/tmp/bdde3d4b-f7f3-4ae1-b771-7e1541eb06dd_buggy.java
+++ b/tmp/55699252-91d3-4140-88f2-8efbb66b8fbf_fixed.java
@@ -1,38 +1,66 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
+        // 1. Check for entry completion or prior EOF detection
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
+        // 2. Check for valid state
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
+        // 3. Determine actual number of bytes to read (respecting entry boundary and request)
+        // available() returns (int) (entrySize - entryOffset)
         numToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // 4. Handle case where numToRead is 0 (caller requested 0 bytes)
+        // If available() was 0, the check at step 1 should have returned -1.
+        // So we only reach here if available() > 0 or caller requested 0.
+        if (numToRead == 0) {
+             return 0; // As per InputStream contract for numToRead = 0
+        }
 
-        if (totalRead == -1) {
+        // 5. Read from the underlying stream
+        int bytesRead = is.read(buf, offset, numToRead);
+
+        // 6. Handle result of read
+        if (bytesRead == -1) {
+            // Underlying stream EOF.
+            // Since we ensured numToRead > 0 based on available() before the read,
+            // hitting EOF here means the stream ended before the current entry's
+            // declared size was reached. This indicates a truncated archive.
+            if (entrySize > entryOffset) {
+                throw new IOException("Truncated TAR archive: Expected " + entrySize
+                                      + " bytes, but only received " + entryOffset
+                                      + " bytes for entry '" + currEntry.getName() + "'");
+            }
+            // If entrySize == entryOffset, we reached EOF exactly at the boundary.
+            // Mark EOF for this entry and return -1.
             hasHitEOF = true;
+            // Note: We should only reach here if available() was 0 initially,
+            // but step 1 should have caught that. Reaching here with bytesRead == -1
+            // and entrySize == entryOffset implies the underlying stream ended
+            // exactly at the boundary, which is valid EOF for the entry.
+            return -1;
         } else {
-            entryOffset += totalRead;
+            // Successfully read some bytes.
+            count(bytesRead); // Update total bytes read from stream for metrics/limiting
+            entryOffset += bytesRead; // Update position within the current entry
+            // Return the number of bytes actually read in this call
+            return bytesRead;
         }
-
-        return totalRead;
     }
\ No newline at end of file
