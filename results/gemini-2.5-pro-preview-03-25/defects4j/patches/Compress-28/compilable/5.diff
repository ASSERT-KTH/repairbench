diff --git a/tmp/74ddf76f-583b-4c31-a76a-81202fc7442e_buggy.java b/tmp/f6b77a97-467e-4c6a-9832-718fa1dd0c97_fixed.java
index 0f439b3..8aa5056 100644
--- a/tmp/74ddf76f-583b-4c31-a76a-81202fc7442e_buggy.java
+++ b/tmp/f6b77a97-467e-4c6a-9832-718fa1dd0c97_fixed.java
@@ -1,38 +1,59 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
 
+        // Check 1: Entry already finished or underlying EOF hit previously?
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
+        // Check 2: Valid state?
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
-        numToRead = Math.min(numToRead, available());
+        // Determine max bytes to read for this call (limited by entry size)
+        // Make sure we do not read beyond the entry size
+        int numToReadNow = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // Perform the read from the underlying stream
+        int bytesRead = is.read(buf, offset, numToReadNow);
 
-        if (totalRead == -1) {
+        if (bytesRead == -1) { // Underlying stream hit EOF
             hasHitEOF = true;
-        } else {
-            entryOffset += totalRead;
+            // Check for truncation: Did EOF happen before entry was fully read?
+            // If numToReadNow > 0, it implies available() > 0, meaning entryOffset < entrySize.
+            if (numToReadNow > 0) {
+                 // We requested bytes (numToReadNow > 0), but got EOF (-1).
+                 // This means the underlying stream ended prematurely before the entry's content was fully read.
+                 throw new IOException("Truncated TAR archive: Entry '" + currEntry.getName()
+                         + "' reached EOF before reading " + entrySize + " bytes.");
             }
+            // If numToReadNow was 0, it means available() was 0 (entryOffset >= entrySize).
+            // Getting -1 from is.read() is acceptable in this case, it just confirms EOF.
+            // Return -1 to signal end of entry data stream.
+            // The initial check (entryOffset >= entrySize) handles subsequent calls.
+            return -1;
+        }
+
+        // Successfully read bytes (bytesRead >= 0)
+        if (bytesRead > 0) {
+            count(bytesRead); // Update statistics from CompressedInputStream
+            entryOffset += bytesRead; // Update position within the current entry data
+        }
+        // else if bytesRead == 0: Nothing was read (e.g., numToReadNow was 0). Correctly return 0.
 
-        return totalRead;
+        return bytesRead; // Return the number of bytes actually read in this call
     }
\ No newline at end of file
