diff --git a/tmp/e6bac9f3-5af6-4eeb-a258-8b92e96812be_buggy.java b/tmp/88f0c951-3fc4-4764-8aa2-1ca5e83bb8c0_fixed.java
index 0f439b3..394f6e6 100644
--- a/tmp/e6bac9f3-5af6-4eeb-a258-8b92e96812be_buggy.java
+++ b/tmp/88f0c951-3fc4-4764-8aa2-1ca5e83bb8c0_fixed.java
@@ -1,38 +1,53 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
+     * @throws IOException on error, includingpremature termination of the stream
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
 
+        // Check if we are already at the end of the entry or the stream
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
+        // Determine actual number of bytes to read (limited by entry size)
         numToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // Read from the underlying stream
+        int bytesRead = is.read(buf, offset, numToRead);
 
-        if (totalRead == -1) {
-            hasHitEOF = true;
+        if (bytesRead == -1) {
+            // Underlying stream reached EOF.
+            hasHitEOF = true; // Mark stream EOF
+
+            // Check if the entry was fully read. Since we passed the initial check (entryOffset < entrySize),
+            // if available() > 0 here, it means EOF was unexpected.
+            if (available() > 0) { // Check if more bytes were expected for this entry
+                 throw new IOException("Truncated TAR archive: Entry '" + currEntry.getName()
+                                     + "' resulted in EOF before full entry size of "
+                                     + entrySize + " bytes was read.");
+            }
+            // If available() is 0, it means EOF occurred exactly at the entry boundary.
+            // Return -1 to signal end of this entry's stream.
         } else {
-            entryOffset += totalRead;
+            // Successfully read some bytes
+            count(bytesRead); // Update statistics
+            entryOffset += bytesRead; // Update position within entry
         }
 
-        return totalRead;
+        // Return the number of bytes read, or -1 if EOF was reached (either cleanly or detected above)
+        return bytesRead;
     }
\ No newline at end of file
