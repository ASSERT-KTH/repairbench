diff --git a/tmp/f820b9e0-ff77-4a70-815e-99fc731519bd_buggy.java b/tmp/a11a7f85-e81a-48f9-9534-ac077072888d_fixed.java
index 0f439b3..c2d5e58 100644
--- a/tmp/f820b9e0-ff77-4a70-815e-99fc731519bd_buggy.java
+++ b/tmp/a11a7f85-e81a-48f9-9534-ac077072888d_fixed.java
@@ -1,38 +1,60 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
+        // Check if the entry is finished or we already hit EOF on the underlying stream
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
+        // Clamp the number of bytes to read to the remaining size of the current entry
         numToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // If available() returned 0, it means entryOffset == entrySize.
+        // The check at the beginning should have caught this, but return -1 to be safe.
+        if (numToRead == 0) {
+            return -1;
+        }
 
-        if (totalRead == -1) {
+        // Read from the underlying input stream
+        int bytesRead = is.read(buf, offset, numToRead);
+        
+        // Check the result of the read operation
+        if (bytesRead == -1) {
+            // The underlying stream returned EOF.
+            // Check if we expected more bytes for the current entry.
+            if (available() > 0) {
+                // Unexpected EOF: Throw an exception indicating truncation.
+                throw new IOException("Truncated TAR archive: Expected " + entrySize
+                                      + " bytes, but underlying stream returned EOF at " + entryOffset
+                                      + " bytes for entry " + currEntry.getName());
+            }
+            // EOF occurred exactly at the end of the entry (or when 0 bytes requested).
+            // Mark that the underlying stream has hit EOF.
             hasHitEOF = true;
+            // Return -1 to signal EOF for this read operation on the current entry.
         } else {
-            entryOffset += totalRead;
+            // Successfully read some bytes (bytesRead >= 0).
+            // Update the count of bytes read from the stream (for limiting, etc.).
+            count(bytesRead);
+            // Update the offset within the current entry.
+            entryOffset += bytesRead;
         }
 
-        return totalRead;
+        return bytesRead; // Return the number of bytes actually read, or -1 if EOF was reached expectedly.
     }
\ No newline at end of file
