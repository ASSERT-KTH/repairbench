diff --git a/tmp/1e4508c1-2c91-45f0-b9a0-5c00d6f5693e_buggy.java b/tmp/20b9e707-66f0-48fc-b79e-9da1aabe2d30_fixed.java
index 0f439b3..b154a01 100644
--- a/tmp/1e4508c1-2c91-45f0-b9a0-5c00d6f5693e_buggy.java
+++ b/tmp/20b9e707-66f0-48fc-b79e-9da1aabe2d30_fixed.java
@@ -1,38 +1,56 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
+        // 1. Handle request for 0 bytes according to InputStream spec
+        if (numToRead <= 0) {
+            return 0;
+        }
 
+        // 2. Check if we are already logically at the end of the current entry
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
 
+        // 3. Sanity check for current entry
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
-        numToRead = Math.min(numToRead, available());
+        // 4. Determine actual number of bytes to read for this entry
+        //    available() returns (int) (entrySize - entryOffset).
+        //    Since we passed the check in step 2, entryOffset < entrySize, so available() > 0.
+        int bytesToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // 5. Read from the underlying stream
+        //    We expect bytesToRead > 0 here.
+        int totalRead = is.read(buf, offset, bytesToRead);
 
+        // 6. Check for premature EOF from the underlying stream
         if (totalRead == -1) {
-            hasHitEOF = true;
-        } else {
+            // If the underlying stream returns EOF (-1) but we expected more bytes
+            // for the current entry (bytesToRead > 0), it signifies a truncated archive.
+            // Note: bytesToRead is guaranteed > 0 if we reach this point due to checks above.
+            throw new IOException("Truncated TAR archive: Expected " + entrySize
+                                  + " bytes, but received EOF indicator after " + entryOffset
+                                  + " bytes in entry '" + currEntry.getName() + "'");
+        }
+
+        // 7. Update state for successfully read bytes
+        count(totalRead); // Update ArchiveInputStream's byte count
         entryOffset += totalRead;
-        }
 
+        // 8. Return bytes read in this call
         return totalRead;
     }
\ No newline at end of file
