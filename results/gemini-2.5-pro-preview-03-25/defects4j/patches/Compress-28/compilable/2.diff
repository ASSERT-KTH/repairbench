diff --git a/tmp/8d35635c-192b-445b-a11f-90ba555b997c_buggy.java b/tmp/05617103-b594-47dc-a643-3fbfcf473d97_fixed.java
index 0f439b3..18d978a 100644
--- a/tmp/8d35635c-192b-445b-a11f-90ba555b997c_buggy.java
+++ b/tmp/05617103-b594-47dc-a643-3fbfcf473d97_fixed.java
@@ -1,38 +1,57 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
+     * @return The number of bytes read, or -1 at EOF for the current entry.
+     * @throws IOException on error, including premature termination of the stream.
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
-        if (hasHitEOF || entryOffset >= entrySize) {
+        // Check if we are already at or past the end of the current entry
+        if (entryOffset >= entrySize) {
             return -1;
         }
 
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
+        // Limit the number of bytes to read to the remaining bytes in the current entry
+        // and ensure numToRead is not negative.
         numToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // InputStream contract: if len is zero, then no bytes are read and 0 is returned.
+        if (numToRead <= 0) {
+            return 0;
+        }
+
+        // Read bytes from the underlying stream
+        int bytesRead = is.read(buf, offset, numToRead);
 
-        if (totalRead == -1) {
-            hasHitEOF = true;
-        } else {
-            entryOffset += totalRead;
+        // Update the count of total bytes read from the underlying stream
+        // count() handles bytesRead == -1 gracefully.
+        count(bytesRead);
+
+        if (bytesRead == -1) {
+            // EOF from underlying stream.
+            // Since we passed the initial check (entryOffset < entrySize) and requested
+            // numToRead > 0 bytes, reaching EOF here signifies a truncated archive/entry.
+            hasHitEOF = true; // Mark that the stream ended prematurely.
+            throw new IOException("Unexpected EOF detected reading entry '" + currEntry.getName()
+                                + "'. Expected " + entrySize + " bytes, but received EOF after reading "
+                                + entryOffset + " bytes.");
         }
 
-        return totalRead;
+        // If bytes were successfully read (bytesRead >= 0), update the offset within the current entry.
+        // Note: bytesRead can be 0 here if is.read returns 0, even if numToRead was > 0.
+        entryOffset += bytesRead;
+
+        // Return the number of bytes actually read.
+        return bytesRead;
     }
\ No newline at end of file
