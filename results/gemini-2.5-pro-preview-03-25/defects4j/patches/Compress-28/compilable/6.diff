diff --git a/tmp/ecaf0156-c1c3-4ec9-a1f7-123ac7e90442_buggy.java b/tmp/8b0347e8-7e47-42bf-8c4a-8f76de2510e7_fixed.java
index 0f439b3..d446e52 100644
--- a/tmp/ecaf0156-c1c3-4ec9-a1f7-123ac7e90442_buggy.java
+++ b/tmp/8b0347e8-7e47-42bf-8c4a-8f76de2510e7_fixed.java
@@ -1,38 +1,68 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
-        if (hasHitEOF || entryOffset >= entrySize) {
+        // Check for EOF or invalid state first
+        if (hasHitEOF) { // Check if the archive stream itself has hit EOF (e.g., past the end-of-archive markers)
             return -1;
         }
-
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
+        // Check if we are already at the end of the current entry
+        if (entryOffset >= entrySize) {
+            return -1;
+        }
+
+        // Calculate the number of bytes to read for this specific call,
+        // ensuring we don't read beyond the current entry's boundary.
+        int numToReadThisCall = numToRead;
+        if (numToReadThisCall + entryOffset > entrySize) {
+            numToReadThisCall = (int) (entrySize - entryOffset);
+        }
 
-        numToRead = Math.min(numToRead, available());
+        // If the calculated number of bytes to read is 0 or less,
+        // it means we are exactly at the end of the entry.
+        if (numToReadThisCall <= 0) {
+            return -1;
+        }
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // Read bytes from the underlying input stream
+        int bytesRead = is.read(buf, offset, numToReadThisCall);
+
+        // Process the result of the read operation
+        if (bytesRead == -1) {
+            // The underlying stream reached EOF.
+            // Check if this happened before we reached the expected end of the entry.
+            if (entryOffset < entrySize) {
+                // This indicates a truncated archive entry.
+                throw new IOException("Truncated TAR archive: Expected " + entrySize
+                                      + " bytes, but encountered EOF at " + entryOffset + " bytes.");
+            }
+            // If entryOffset >= entrySize, reaching EOF is expected.
+            // The initial check should ideally catch this, but we handle it here too.
+            // Do NOT set hasHitEOF here; that flag is for the overall stream state.
+            // Returning -1 signals EOF for the current entry's data stream.
+            return -1;
+        }
         
-        if (totalRead == -1) {
-            hasHitEOF = true;
-        } else {
-            entryOffset += totalRead;
+        // If bytes were successfully read:
+        if (bytesRead > 0) {
+             count(bytesRead); // Update the count of bytes processed.
+             entryOffset += bytesRead; // Update the offset within the current entry.
         }
+        // Note: is.read might return 0, which is valid. We update offset and count only if bytesRead > 0.
 
-        return totalRead;
+        return bytesRead; // Return the actual number of bytes read.
     }
\ No newline at end of file
