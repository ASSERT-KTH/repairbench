diff --git a/tmp/92082ae6-70e9-4d71-a235-7a7158ff15ec_buggy.java b/tmp/d8786383-6224-4399-8a4d-15cfa5425dc9_fixed.java
index 0f439b3..91ffde6 100644
--- a/tmp/92082ae6-70e9-4d71-a235-7a7158ff15ec_buggy.java
+++ b/tmp/d8786383-6224-4399-8a4d-15cfa5425dc9_fixed.java
@@ -1,38 +1,60 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
+        // Check 1: Stream has hit EOF, or entry is fully read
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
-
+        // Check 2: No current entry selected
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
 
-        numToRead = Math.min(numToRead, available());
+        // Check 3: Clamp numToRead to the number of bytes remaining in the entry
+        // Use Math.min explicitly as available() might return a value lower than
+        // entrySize - entryOffset due to Integer.MAX_VALUE limit or is.available() check.
+        long remainingInEntry = entrySize - entryOffset;
+        int realNumToRead = Math.min(numToRead, (int) Math.min(remainingInEntry, Integer.MAX_VALUE));
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // If calculated bytes to read is 0, we are at the end of the entry.
+        if (realNumToRead <= 0) {
+            // This case should theoretically be covered by entryOffset >= entrySize check,
+            // but included for robustness.
+            return -1;
+        }
+
+        // Read from the underlying stream
+        int bytesRead = is.read(buf, offset, realNumToRead);
+
+        if (bytesRead == -1) {
+            // EOF detected by the underlying stream
+            hasHitEOF = true; // Mark stream EOF
+            // Since we determined realNumToRead > 0 based on remainingInEntry,
+            // hitting EOF here means the entry data is truncated.
+            throw new IOException("Truncated TAR entry: " + currEntry.getName()
+                                + " (expected " + entrySize
+                                + " bytes, but encountered EOF at " + entryOffset + ")");
+        }
 
-        if (totalRead == -1) {
-            hasHitEOF = true;
-        } else {
-            entryOffset += totalRead;
+        // If read was successful (bytesRead >= 0)
+        // Note: read(buf, offset, len) should return > 0 if len > 0, unless EOF is hit.
+        // A return value of 0 is possible if len == 0.
+        if (bytesRead > 0) { // Only count and update offset if bytes were actually read
+            count(bytesRead); // Update physical bytes read count from underlying stream
+            entryOffset += bytesRead; // Update position within the current entry
         }
 
-        return totalRead;
+        return bytesRead;
     }
\ No newline at end of file
