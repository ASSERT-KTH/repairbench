diff --git a/tmp/a21dc4f1-af02-4522-815d-2264fed0cc90_buggy.java b/tmp/7aa5f8fe-fde5-4cfc-ab9d-98fb42d271c1_fixed.java
index 0f439b3..eca881e 100644
--- a/tmp/a21dc4f1-af02-4522-815d-2264fed0cc90_buggy.java
+++ b/tmp/7aa5f8fe-fde5-4cfc-ab9d-98fb42d271c1_fixed.java
@@ -1,38 +1,60 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
-        if (hasHitEOF || entryOffset >= entrySize) {
+        // Check 1: If stream previously hit premature EOF
+        if (hasHitEOF) {
             return -1;
         }
 
+        // Check 2: If current entry is already fully read or no current entry
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
+        if (entryOffset >= entrySize) {
+            return -1;
+        }
 
+        // Calculate max bytes to read for this call, limited by available entry size
+        // N.B. available() ensures we don't read past the end of the entry.
         numToRead = Math.min(numToRead, available());
 
-        totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
+        // If available() returned 0, it means entryOffset equals entrySize.
+        // The check at the beginning handles this, so numToRead should be > 0
+        // if we expect to read anything. However, a read of 0 bytes is valid.
 
-        if (totalRead == -1) {
+        // Read from the underlying stream
+        int bytesRead = is.read(buf, offset, numToRead);
+
+        if (bytesRead == -1) {
+            // Underlying stream hit EOF.
+            // Check if we expected more data for the current entry.
+            if (entryOffset < entrySize) {
+                 // Premature EOF -> Truncated entry
+                 throw new IOException("Truncated TAR archive: Expected " + entrySize
+                                      + " bytes, but only received " + entryOffset
+                                      + " bytes for entry " + currEntry.getName());
+            }
+            // If EOF occurred exactly at or after the end of the entry, mark stream EOF
             hasHitEOF = true;
+            // Return -1 to signal EOF to the caller
         } else {
-            entryOffset += totalRead;
+            // Successfully read some bytes
+            count(bytesRead); // Update statistics only for successful reads
+            entryOffset += bytesRead; // Update entry progress
         }
 
-        return totalRead;
+        // Return the result of the read operation (-1 for EOF, or number of bytes read)
+        return bytesRead;
     }
\ No newline at end of file
