diff --git a/tmp/6d649987-0a2f-479c-b591-a1d7c581217b_buggy.java b/tmp/ad7080d4-2b77-4c1b-8d59-871a7e31329f_fixed.java
index 6e05e4b..cc87f8e 100644
--- a/tmp/6d649987-0a2f-479c-b591-a1d7c581217b_buggy.java
+++ b/tmp/ad7080d4-2b77-4c1b-8d59-871a7e31329f_fixed.java
@@ -1,51 +1,79 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+      boolean isUnnamedFunction = false; // Use boolean primitive type
+
+      // Check for unnamed function statements, which are illegal syntax.
+      // Function expressions can be unnamed.
       if (name == null) {
+        if (functionNode.isFunctionDeclaration()) {
+          // Report the error, mimicking what the parser should have done.
+          errorReporter.error(
+              "unnamed function statement",
+              sourceName, // Assuming 'sourceName' is an accessible member variable
+              functionNode.getLineno(),
+              position2charno(functionNode.getAbsolutePosition())
+          );
+          // Even though it's an error, proceed with creating the node structure
+          // using a dummy name to avoid potential NPEs downstream. The error
+          // has been reported, so the compilation will likely fail anyway.
+        }
+        // Create a dummy name node for all unnamed functions (expressions or illegal statements).
         name = new Name();
         name.setIdentifier("");
+        // Ensure the dummy name has position information for source mapping.
+        name.setPosition(functionNode.getAbsolutePosition());
+        // Rhino doesn't provide specific position for the name node if it's absent,
+        // so use the function node's position.
         isUnnamedFunction = true;
       }
+
       Node node = newNode(Token.FUNCTION);
+      // 'name' is now either the original Name node or the dummy "" Name node.
       Node newName = transform(name);
+
       if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
+        // If it was an unnamed function (expression or illegal statement),
+        // set the line/char number on the empty name node.
+        // The original code used the line of the function keyword and the
+        // char of the left paren. Let's preserve that, although it's slightly odd.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
+
+      // Process Params (parameters list represented by LP node)
       Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
+      // Position the LP node.
+      // Use the original function name node if available for better accuracy.
+      Name originalFnName = functionNode.getFunctionName();
+      if (originalFnName != null) {
+        // If there's a name, the paren should ideally be on the same line.
+        lp.setLineno(originalFnName.getLineno());
       } else {
+        // If no name, assume paren is on the same line as the 'function' keyword.
         lp.setLineno(functionNode.getLineno());
       }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+      // Calculate the character position of the left parenthesis.
+      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
       lp.setCharno(position2charno(lparenCharno));
+
+      // Add params to the LP node
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
+      // Process Function Body
       Node bodyNode = transform(functionNode.getBody());
-      parseDirectives(bodyNode);
+      parseDirectives(bodyNode); // Process "use strict" and similar directives
       node.addChildToBack(bodyNode);
+
       return node;
     }
\ No newline at end of file
