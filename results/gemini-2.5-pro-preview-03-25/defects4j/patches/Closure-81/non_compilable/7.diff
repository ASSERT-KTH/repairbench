diff --git a/tmp/a2f61737-6c44-4beb-962f-a8da2c9ceb9c_buggy.java b/tmp/b758272c-100a-449c-b5bc-96b3c12def82_fixed.java
index 6e05e4b..0103dd3 100644
--- a/tmp/a2f61737-6c44-4beb-962f-a8da2c9ceb9c_buggy.java
+++ b/tmp/b758272c-100a-449c-b5bc-96b3c12def82_fixed.java
@@ -1,51 +1,94 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
+      // Check for unnamed function statement error (ES6 spec allows them only as expressions)
+      // Note: This doesn't handle `export default function() {}` which is legal in ES6 modules.
+      // That check should ideally happen in the context of processing the export statement.
+      if (functionNode.isFunctionDeclaration() && functionNode.getFunctionName() == null) {
+        // Report error for Function declarations that must have a name.
+        reportError(ParseError.UNNAMED_FUNCTION_STATEMENT,
+            functionNode.getLineno(),
+            position2charno(functionNode.getAbsolutePosition()));
+        // Return an empty node to indicate the error but allow parsing to continue.
+        return newNode(Token.EMPTY);
+      }
+
       Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+      Boolean isUnnamedFunction = false; // Keep Boolean wrapper object as in original code
       if (name == null) {
+        // This case should now only be reached for function expressions
         name = new Name();
         name.setIdentifier("");
+        // Assign position info to the synthetic name node using the function node's position.
+        // The subsequent block might adjust this based on original Rhino behavior.
+        name.setPosition(functionNode.getAbsolutePosition());
+        name.setLength(0); // Synthetic node has zero length identifier
+        setSourceInfo(name, name); // Set line/char based on the position.
         isUnnamedFunction = true;
       }
+
       Node node = newNode(Token.FUNCTION);
+      setSourceInfo(node, functionNode); // Set source info for the Function node itself
+
       Node newName = transform(name);
+
+      // Original logic to adjust empty name node's position info:
+      // This targets the location where the name *would* be, often near the '('.
       if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
+        // declaration (the function keyword).
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
+        // Calculate column based on LP offset from function start.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
+        // Convert absolute position + offset to char number on the line.
         newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
-      Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
+
+      // Create the parameter list node. Original code used LP, assume newNode(Token.LP)
+      // creates the correct PARAM_LIST node type expected by the rest of the compiler.
+      Node lp = newNode(Token.LP); // Should represent PARAM_LIST
+      // Set source info for the parameter list (paren '(' position)
+      // Original logic with comments about potential inaccuracy:
+      Name fnName = functionNode.getFunctionName(); // Fetch original name again
       if (fnName != null) {
+        // If name exists, assume paren is on the same line as name. (Potentially flawed)
         lp.setLineno(fnName.getLineno());
       } else {
+        // If no name (expression), assume paren is on the same line as 'function'. (Potentially flawed)
         lp.setLineno(functionNode.getLineno());
       }
+      // Calculate char position based on LP offset from function start.
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
-
       lp.setCharno(position2charno(lparenCharno));
+
+
+      // Add parameters
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
-      node.addChildToBack(lp);
+      node.addChildToBack(lp); // Add Param list node
 
+      // Process function body
       Node bodyNode = transform(functionNode.getBody());
-      parseDirectives(bodyNode);
+      // Ensure the body node (likely a BLOCK) has source information.
+      // transform() should generally handle this, but explicitly setting it ensures correctness.
+      if (bodyNode != null && functionNode.getBody() != null) {
+          setSourceInfo(bodyNode, functionNode.getBody());
+      }
+      parseDirectives(bodyNode); // Process 'use strict' etc.
       node.addChildToBack(bodyNode);
+
+      // Set flags like generator/async if applicable
+      if (functionNode.isGenerator()) {
+         node.setIsGeneratorFunction(true);
+      }
+      // if (functionNode.isAsync()) { node.setIsAsyncFunction(true); } // Add if needed
+
      return node;
     }
\ No newline at end of file
