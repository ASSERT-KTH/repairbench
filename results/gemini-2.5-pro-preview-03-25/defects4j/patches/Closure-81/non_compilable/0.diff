diff --git a/tmp/32d103e1-078a-4438-b676-cc52d2a8af27_buggy.java b/tmp/caa3a40e-ac66-4499-9190-adcbf42504ef_fixed.java
index 6e05e4b..e06229b 100644
--- a/tmp/32d103e1-078a-4438-b676-cc52d2a8af27_buggy.java
+++ b/tmp/caa3a40e-ac66-4499-9190-adcbf42504ef_fixed.java
@@ -1,51 +1,69 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
+        // Check if it's an unnamed function statement (not an expression), which is illegal.
+        // Rhino's parser itself should report this error, but we check here for robustness
+        // or in case this code path is reached under different configurations.
+        if (!functionNode.isExpressionClosure()) {
+          reportError(functionNode, RhinoErrorReporter.UNNAMED_FUNCTION_STATEMENT);
+          // Even with the error, proceed to create a node with an empty name
+          // to allow parsing to continue and potentially find more errors.
+        }
         name = new Name();
-        name.setIdentifier("");
+        name.setIdentifier(""); // Synthesize a name node for the unnamed function
         isUnnamedFunction = true;
       }
+
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
+
+      // If it's an unnamed function, copy source info from the function node
+      // to the synthesized name node.
       if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
-      Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
-      } else {
-        lp.setLineno(functionNode.getLineno());
-      }
+
+      // Process parameters
+      Node paramsNode = newNode(Token.PARAM_LIST);
+      // The PARAM_LIST node needs source info. Let's use the function's left paren.
+      // The old code attached source info to a dummy LP node, which isn't quite right.
+      // PARAM_LIST corresponds to the parameter list itself.
+      paramsNode.setLineno(functionNode.getLineno()); // Use function line for now.
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
+      paramsNode.setCharno(position2charno(lparenCharno));
 
-      lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
-        lp.addChildToBack(transform(param));
+        paramsNode.addChildToBack(transform(param));
       }
-      node.addChildToBack(lp);
+      node.addChildToBack(paramsNode); // Add PARAM_LIST node
 
+      // Process body
       Node bodyNode = transform(functionNode.getBody());
-      parseDirectives(bodyNode);
+      // Rhino parser ensures getBody() is a Block for FunctionNode.
+      // Transform should preserve this unless there's an error transforming the body.
+      if (bodyNode != null && bodyNode.isBlock()) {
+         parseDirectives(bodyNode); // Modifies bodyNode by removing directive children
+      } else {
+         // This case (null or non-block body for a FunctionNode) suggests an error
+         // during body transformation or an unexpected AST structure.
+         // Report an error or ensure subsequent passes handle it gracefully.
+         // For now, retain original behavior of adding whatever bodyNode is.
+         // Consider reporting an internal error if bodyNode is null.
+      }
       node.addChildToBack(bodyNode);
+
       return node;
     }
\ No newline at end of file
