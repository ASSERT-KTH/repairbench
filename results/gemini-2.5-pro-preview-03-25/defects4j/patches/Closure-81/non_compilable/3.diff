diff --git a/tmp/a78e6686-871b-4fe3-8a92-a48b98e3eae8_buggy.java b/tmp/6ecf6b3b-29bc-4c7e-8f84-63ad7af519dc_fixed.java
index 6e05e4b..6e13dc7 100644
--- a/tmp/a78e6686-871b-4fe3-8a92-a48b98e3eae8_buggy.java
+++ b/tmp/6ecf6b3b-29bc-4c7e-8f84-63ad7af519dc_fixed.java
@@ -1,51 +1,72 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
+        // Function statement must have a name. This is a syntax error.
+        // We need to report the error and create a dummy name node for
+        // processing to continue.
+        if (functionNode.isFunctionDeclaration()) {
+          // Report error at the '(' token position, where the name is expected.
+          int lpPosition = functionNode.getAbsolutePosition() + functionNode.getLp();
+          // Use the standard Rhino message key for this error.
+          handleError(functionNode, "msg.no.name.after.function", lpPosition, functionNode.getLp() + 1); // Provide position span if possible
+        }
+        // Create a dummy name node.
         name = new Name();
-        name.setIdentifier("");
+        name.setIdentifier(""); // Use empty string for the dummy name.
+        // Mark the dummy name node with the function's position.
+        name.setLineno(functionNode.getLineno());
+        name.setCharno(functionNode.getCharno() + "function".length()); // Position after "function" keyword
         isUnnamedFunction = true;
       }
+
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
+      // If a dummy name was created, ensure it has position info.
+      // The transform call might clear it, or might not have been set if name wasn't null initially.
+      // Let's ensure the position is set correctly on the IR name node.
       if (isUnnamedFunction) {
          // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
+         // declaration (or the '(' if no name). Let's use the function's line number.
         newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
+         // Position the empty name where the '(' is, as that's where the error occurs.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
-      Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
+
+      // Create PARAM_LIST node for parameters, not LP.
+      Node paramList = newNode(Token.PARAM_LIST);
+
+      // Set line and character number for the parameter list.
+      // Use the function name's line if available, otherwise the function's line.
+      Name fnName = functionNode.getFunctionName(); // Get original name node for position info
       if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
+        paramList.setLineno(fnName.getLineno());
       } else {
-        lp.setLineno(functionNode.getLineno());
+        paramList.setLineno(functionNode.getLineno());
       }
+      // Character number should correspond to the '(' token.
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
+      paramList.setCharno(position2charno(lparenCharno));
 
-      lp.setCharno(position2charno(lparenCharno));
+      // Process parameters and add them to the PARAM_LIST node.
       for (AstNode param : functionNode.getParams()) {
-        lp.addChildToBack(transform(param));
+        paramList.addChildToBack(transform(param));
       }
-      node.addChildToBack(lp);
+      node.addChildToBack(paramList);
 
+      // Process the function body.
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
+
+      // Set source information for the FUNCTION node itself
+      setSourceInfo(node, functionNode);
+
       return node;
     }
\ No newline at end of file
