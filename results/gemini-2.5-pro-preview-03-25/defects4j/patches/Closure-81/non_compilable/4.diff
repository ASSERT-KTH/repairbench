diff --git a/tmp/9e7fef94-7010-41fe-a26b-b384dc24299b_buggy.java b/tmp/5b93025c-46de-4f95-8e7b-6ad19b3875f5_fixed.java
index 6e05e4b..effb46d 100644
--- a/tmp/9e7fef94-7010-41fe-a26b-b384dc24299b_buggy.java
+++ b/tmp/5b93025c-46de-4f95-8e7b-6ad19b3875f5_fixed.java
@@ -1,51 +1,63 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
-      if (name == null) {
-        name = new Name();
-        name.setIdentifier("");
-        isUnnamedFunction = true;
+      boolean isUnnamedFunction = (name == null);
+
+      // An unnamed function statement is not syntactically valid.
+      // "function () {}" is not allowed, but "var f = function () {};"
+      // or "(function () {})();" are allowed.
+      if (isUnnamedFunction && functionNode.isFunctionDeclaration()) {
+        errorReporter.error(
+            "unnamed function statement",
+            sourceName,
+            functionNode.getLineno(), "", 0);
+        // Return an empty node to avoid NPEs downstream, though the error
+        // reporting should ideally halt compilation or handle it gracefully.
+        return newNode(Token.EMPTY);
       }
+
       Node node = newNode(Token.FUNCTION);
-      Node newName = transform(name);
+      Node newName;
       if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
-        newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+        // Create a new empty name node.
+        // We need to give it the right source information. Use the position
+        // of the left parenthesis as the position of the name node.
+        name = new Name();
+        name.setIdentifier("");
+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
+        // We don't have the line number of the LP, so use the function's line.
+        name.setPosition(lpColumn);
+        name.setLength(1); // Give it length 1 to make it represent the paren.
+        name.setLineno(functionNode.getLineno()); // Approximate line number.
+
+        newName = transform(name);
+        // Adjust the charno to be 0-based for the compiler node.
         newName.setCharno(position2charno(lpColumn));
-      }
 
-      node.addChildToBack(newName);
-      Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
       } else {
-        lp.setLineno(functionNode.getLineno());
+        newName = transform(name);
       }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
 
-      lp.setCharno(position2charno(lparenCharno));
+      node.addChildToBack(newName); // Add NAME node (possibly empty)
+
+      // Process parameters: create PARAM_LIST node
+      Node paramsNode = newNode(Token.PARAM_LIST);
+      // Set the position of the PARAM_LIST node based on the left parenthesis.
+      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
+      // Again, we don't have the exact line number of the '('.
+      // Using the function's line number is an approximation.
+      paramsNode.setLineno(functionNode.getLineno());
+      paramsNode.setCharno(position2charno(lparenCharno));
+
       for (AstNode param : functionNode.getParams()) {
-        lp.addChildToBack(transform(param));
+        paramsNode.addChildToBack(transform(param));
       }
-      node.addChildToBack(lp);
+      node.addChildToBack(paramsNode); // Add PARAM_LIST node as the second child
 
+      // Process the function body
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
-      node.addChildToBack(bodyNode);
+      node.addChildToBack(bodyNode); // Add BLOCK node as the third child
+
      return node;
     }
\ No newline at end of file
