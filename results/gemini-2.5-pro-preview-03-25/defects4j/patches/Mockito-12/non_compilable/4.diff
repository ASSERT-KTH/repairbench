diff --git a/tmp/384cb437-8767-499d-b15f-8384ced6932a_buggy.java b/tmp/8b20720e-65be-4e1f-b6c9-a8379c3d0291_fixed.java
index bada2b6..59e8052 100644
--- a/tmp/384cb437-8767-499d-b15f-8384ced6932a_buggy.java
+++ b/tmp/8b20720e-65be-4e1f-b6c9-a8379c3d0291_fixed.java
@@ -1,16 +1,45 @@
+import java.lang.reflect.Field;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+
+// Class definition and other methods are omitted for brevity.
+
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
      *
      * @param field
-     * @return
+     * @return The Class of the first generic type argument, or the raw type if the first argument is also generic, or Object.class if not determinable.
      */
-    public Class getGenericType(Field field) {        
+    public Class<?> getGenericType(Field field) {
         Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (generic instanceof ParameterizedType) {
+            ParameterizedType pt = (ParameterizedType) generic;
+            Type[] actualTypeArguments = pt.getActualTypeArguments();
+
+            // Ensure there is at least one type argument
+            if (actualTypeArguments.length > 0) {
+                 Type firstTypeArgument = actualTypeArguments[0];
+
+                 if (firstTypeArgument instanceof Class) {
+                     // Handles cases like List<String> -> String.class
+                     return (Class<?>) firstTypeArgument;
+                 } else if (firstTypeArgument instanceof ParameterizedType) {
+                     // Handles nested generics like List<Set<String>> -> Set.class
+                     // The first type argument is Set<String> (a ParameterizedType)
+                     // We return its raw type, which is Set.class
+                     Type rawType = ((ParameterizedType) firstTypeArgument).getRawType();
+                     if (rawType instanceof Class) {
+                         return (Class<?>) rawType;
+                     }
+                 }
+                 // Other potential types for firstTypeArgument (like TypeVariable, WildcardType, GenericArrayType)
+                 // are not explicitly handled here and will fall through to return Object.class.
+                 // This maintains the original behavior for types it couldn't resolve to a simple Class.
+            }
         }
 
+        // If the field's type is not parameterized, has no type arguments,
+        // or the first type argument is not a Class or ParameterizedType with a Class raw type,
+        // return Object.class.
         return Object.class;
     }
\ No newline at end of file
