diff --git a/tmp/45f3bf34-3577-464c-ac12-c213fbfdd1d9_buggy.java b/tmp/5616b935-cef2-484e-a2d9-430218010fae_fixed.java
index bada2b6..99ec4b3 100644
--- a/tmp/45f3bf34-3577-464c-ac12-c213fbfdd1d9_buggy.java
+++ b/tmp/5616b935-cef2-484e-a2d9-430218010fae_fixed.java
@@ -1,16 +1,40 @@
+import java.lang.reflect.Field;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+
+// Class definition would be here... Let's assume it exists.
+
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
+     * If the field is generic e.g. List&lt;String&gt; it returns List.class.
+     * If the field is nested generic e.g. List&lt;Set&lt;String&gt;&gt; it returns Set.class.
      *
-     * @param field
-     * @return
+     * @param field the field to inspect
+     * @return the generic type, or Object.class if not applicable
      */
-    public Class getGenericType(Field field) {        
+    public Class<?> getGenericType(Field field) {
         Type generic = field.getGenericType();
         if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+            ParameterizedType pt = (ParameterizedType) generic;
+            Type[] actualTypeArguments = pt.getActualTypeArguments();
+
+            // Ensure there is at least one type argument
+            if (actualTypeArguments.length > 0) {
+                Type firstTypeArgument = actualTypeArguments[0];
+
+                if (firstTypeArgument instanceof Class) {
+                    // Case: ArgumentCaptor<String> -> String.class
+                    return (Class<?>) firstTypeArgument;
+                } else if (firstTypeArgument instanceof ParameterizedType) {
+                    // Case: ArgumentCaptor<List<String>> -> List.class
+                    // Return the raw type of the nested ParameterizedType
+                    // This handles nested generics like List<Set<String>> as well, returning Set.class
+                    return (Class<?>) ((ParameterizedType) firstTypeArgument).getRawType();
+                }
+                // Other cases like TypeVariable, WildcardType, GenericArrayType
+                // fall through and return Object.class as per original behavior.
+            }
         }
 
         return Object.class;
     }
\ No newline at end of file
