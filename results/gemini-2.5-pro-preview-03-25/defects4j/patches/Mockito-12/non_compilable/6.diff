diff --git a/tmp/89692086-f6c9-4893-87d0-0177df8dc8f2_buggy.java b/tmp/a4f0d609-ac38-478f-ac45-818f2c2d0052_fixed.java
index bada2b6..7ca6518 100644
--- a/tmp/89692086-f6c9-4893-87d0-0177df8dc8f2_buggy.java
+++ b/tmp/a4f0d609-ac38-478f-ac45-818f2c2d0052_fixed.java
@@ -1,16 +1,37 @@
+import java.lang.reflect.Field;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+
+// Add imports for Field, ParameterizedType, Type if not already present
+
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
      *
      * @param field
      * @return
      */
-    public Class getGenericType(Field field) {        
+    public Class<?> getGenericType(Field field) {
         Type generic = field.getGenericType();
         if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+            ParameterizedType pt = (ParameterizedType) generic;
+            Type[] actualTypeArguments = pt.getActualTypeArguments();
+            // Ensure there is at least one type argument
+            if (actualTypeArguments.length > 0) {
+                Type firstTypeArgument = actualTypeArguments[0];
+                if (firstTypeArgument instanceof Class) {
+                    return (Class<?>) firstTypeArgument;
+                } else if (firstTypeArgument instanceof ParameterizedType) {
+                    // Handle nested generic types like List<Set<String>>
+                    // Return the raw type of the inner generic type (e.g., Set.class)
+                    Type rawType = ((ParameterizedType) firstTypeArgument).getRawType();
+                    if (rawType instanceof Class) {
+                         return (Class<?>) rawType;
+                    }
+                }
+                // Potentially handle other Type kinds like TypeVariable, WildcardType, GenericArrayType here if needed.
+                // For now, falling through to return Object.class matches the original behavior for unhandled cases.
+            }
         }
 
         return Object.class;
     }
\ No newline at end of file
