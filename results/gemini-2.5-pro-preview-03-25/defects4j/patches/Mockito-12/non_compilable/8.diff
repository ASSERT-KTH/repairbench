diff --git a/tmp/4ff844bc-2c6b-47b5-8521-5c8839150560_buggy.java b/tmp/e7df67fb-1a51-46f5-adfb-ad53518c97f7_fixed.java
index bada2b6..b01bf71 100644
--- a/tmp/4ff844bc-2c6b-47b5-8521-5c8839150560_buggy.java
+++ b/tmp/e7df67fb-1a51-46f5-adfb-ad53518c97f7_fixed.java
@@ -1,16 +1,45 @@
+import java.lang.reflect.Field;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.util.Set; // Import added for clarity in the example below
+
+// Class definition added for context, assuming this method is part of some utility class
+class ReflectionUtils {
+
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
+     * If the field has a nested generic type (e.g. List<Set<String>>) it returns the raw type of the first generic type argument (e.g. Set.class).
      *
-     * @param field
-     * @return
+     * @param field the field to inspect
+     * @return the generic type, or the raw type of the first generic type argument for nested types, or Object.class if not generic.
      */
-    public Class getGenericType(Field field) {        
+    public Class<?> getGenericType(Field field) {
         Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (generic instanceof ParameterizedType) {
+            ParameterizedType pt = (ParameterizedType) generic;
+            Type[] actualTypeArguments = pt.getActualTypeArguments();
+            // Ensure there is at least one type argument
+            if (actualTypeArguments.length > 0) {
+                Type firstTypeArgument = actualTypeArguments[0];
+                if (firstTypeArgument instanceof Class) {
+                    // e.g. List<String> -> String.class
+                    return (Class<?>) firstTypeArgument;
+                } else if (firstTypeArgument instanceof ParameterizedType) {
+                    // e.g. List<Set<String>> -> Set.class (raw type of the nested generic)
+                    return (Class<?>) ((ParameterizedType) firstTypeArgument).getRawType();
+                }
+                // Other cases like TypeVariable, GenericArrayType, WildcardType might return Object.class
+                // depending on the exact requirement, but for the failing tests, handling
+                // Class and ParameterizedType is sufficient.
+            }
         }
 
         return Object.class;
     }
+
+    // Example fields for context (would be in another class usually)
+    // List<String> simple;
+    // List<Set<String>> nested;
+    // List<Set<List<String>>> multiNested;
+    // String notGeneric;
+}
\ No newline at end of file
