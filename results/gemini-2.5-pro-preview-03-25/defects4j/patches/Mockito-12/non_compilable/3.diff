diff --git a/tmp/a083d25e-8353-41c0-84ce-6ff0ce7cbf60_buggy.java b/tmp/c9ae2a5e-b572-432e-bebe-b618e5c67c96_fixed.java
index bada2b6..5948485 100644
--- a/tmp/a083d25e-8353-41c0-84ce-6ff0ce7cbf60_buggy.java
+++ b/tmp/c9ae2a5e-b572-432e-bebe-b618e5c67c96_fixed.java
@@ -1,16 +1,36 @@
+import java.lang.reflect.Field;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+
+// Assume necessary imports and class structure exist
+
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
      *
      * @param field
      * @return
      */
-    public Class getGenericType(Field field) {        
+    public Class<?> getGenericType(Field field) {
         Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (generic instanceof ParameterizedType) {
+            ParameterizedType pt = (ParameterizedType) generic;
+            Type[] actualTypeArguments = pt.getActualTypeArguments();
+            // Need to check if we have any actual type arguments
+            if (actualTypeArguments.length > 0) {
+                Type firstActualType = actualTypeArguments[0];
+                if (firstActualType instanceof Class) {
+                    return (Class<?>) firstActualType;
+                } else if (firstActualType instanceof ParameterizedType) {
+                    // Handle nested generics like List<Set<String>> - return the raw type (Set.class)
+                    // Cast Raw Type to Class is safe
+                    return (Class<?>) ((ParameterizedType) firstActualType).getRawType();
+                }
+                // else: other types like TypeVariable, WildcardType, GenericArrayType are not handled explicitly -> return Object.class
+                // This case covers types like Capture<T> where T is a TypeVariable.
+                // It might also cover cases like Capture<? extends Number> where the argument is a WildcardType.
+                // Returning Object.class seems like a reasonable default according to the original logic's fallback.
+            }
         }
 
         return Object.class;
     }
\ No newline at end of file
