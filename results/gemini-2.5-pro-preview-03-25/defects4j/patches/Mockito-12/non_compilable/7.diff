diff --git a/tmp/9c065797-d449-43d3-8334-b12f8430e847_buggy.java b/tmp/57d31462-2733-48b5-867c-68de37e5f3d6_fixed.java
index bada2b6..d7cf394 100644
--- a/tmp/9c065797-d449-43d3-8334-b12f8430e847_buggy.java
+++ b/tmp/57d31462-2733-48b5-867c-68de37e5f3d6_fixed.java
@@ -1,16 +1,47 @@
+import java.lang.reflect.Field;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.lang.reflect.WildcardType;
+import java.lang.reflect.TypeVariable;
+import java.lang.reflect.GenericArrayType;
+
+// A minimal surrounding class structure is assumed for context, but only the method is required.
+class ReflectionUtils { // Example class name
+
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
+     * If the first generic type argument is itself parameterized (e.g. List<Set<String>>), it returns the raw type
+     * of that argument (e.g. Set.class). For other complex types like TypeVariables or WildcardTypes, it returns Object.class.
      *
-     * @param field
-     * @return
+     * @param field the field to inspect
+     * @return the Class of the first generic type argument, or Object.class if not determinable or not generic.
      */
-    public Class getGenericType(Field field) {        
+    public Class<?> getGenericType(Field field) {
         Type generic = field.getGenericType();
         if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+            ParameterizedType pt = (ParameterizedType) generic;
+            Type[] actualTypeArguments = pt.getActualTypeArguments();
+
+            if (actualTypeArguments.length > 0) {
+                Type firstTypeArgument = actualTypeArguments[0];
+
+                if (firstTypeArgument instanceof Class) {
+                    // e.g. ArgumentCaptor<Foo> -> Foo.class
+                    return (Class<?>) firstTypeArgument;
+                } else if (firstTypeArgument instanceof ParameterizedType) {
+                    // e.g. ArgumentCaptor<List<Foo>> -> List.class
+                    // Cast is safe because raw type of ParameterizedType is Class
+                    return (Class<?>) ((ParameterizedType) firstTypeArgument).getRawType();
+                }
+                // Handle other cases like TypeVariable<?> or WildcardType<?> ?
+                // Returning Object.class is a safe fallback, similar to non-generic types.
+                // This covers cases like ArgumentCaptor<T> or ArgumentCaptor<? extends Number>
+                // where the actual class isn't directly specified in the field signature.
+                // It might also cover GenericArrayType if needed, though less common as direct arg.
+            }
         }
 
+        // Return Object.class for non-generic fields, raw types, or unhandled generic types.
         return Object.class;
     }
+}
\ No newline at end of file
