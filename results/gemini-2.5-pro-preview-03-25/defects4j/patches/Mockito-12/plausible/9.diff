diff --git a/tmp/34708814-746b-454d-bf90-b52d6acf118d_buggy.java b/tmp/050548dc-da8d-4309-bc6d-2955d952db77_fixed.java
index bada2b6..6156928 100644
--- a/tmp/34708814-746b-454d-bf90-b52d6acf118d_buggy.java
+++ b/tmp/050548dc-da8d-4309-bc6d-2955d952db77_fixed.java
@@ -1,16 +1,30 @@
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
      *
      * @param field
      * @return
      */
-    public Class getGenericType(Field field) {        
+    public Class<?> getGenericType(Field field) {
         Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (generic instanceof ParameterizedType) {
+            ParameterizedType parameterizedType = (ParameterizedType) generic;
+            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+            // We only care about the first type argument
+            if (actualTypeArguments.length > 0) {
+                Type actualTypeArgument = actualTypeArguments[0];
+                if (actualTypeArgument instanceof Class) {
+                    return (Class<?>) actualTypeArgument;
+                } else if (actualTypeArgument instanceof ParameterizedType) {
+                    // Handle nested generics like List<Set<String>> by returning the raw type, e.g. Set.class
+                    return (Class<?>) ((ParameterizedType) actualTypeArgument).getRawType();
+                }
+                // else: The actual type argument is not a Class or ParameterizedType
+                // (e.g., TypeVariable, WildcardType, GenericArrayType).
+                // The original behavior was to return Object.class in complex cases,
+                // and the ClassCastException occurred because we tried to cast these complex types directly to Class.
+                // Returning Object.class here maintains consistency with the original intent for unhandled cases.
+            }
         }
 
         return Object.class;
     }
\ No newline at end of file
