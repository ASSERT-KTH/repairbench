diff --git a/tmp/0eb93c9a-73e9-44b6-a4a8-d19f3e455d26_buggy.java b/tmp/bfca9c59-3495-4119-a9b3-dcd489f66c5b_fixed.java
index bada2b6..a118862 100644
--- a/tmp/0eb93c9a-73e9-44b6-a4a8-d19f3e455d26_buggy.java
+++ b/tmp/bfca9c59-3495-4119-a9b3-dcd489f66c5b_fixed.java
@@ -1,16 +1,34 @@
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
+     * If the field is generic (e.g. List&lt;String&gt;) it returns the Class of the type parameter (e.g. String.class).
+     * If the type parameter is itself generic (e.g. List&lt;Set&lt;String&gt;&gt;), it returns the raw Class of the type parameter (e.g. Set.class).
      *
-     * @param field
-     * @return
+     * @param field the field to inspect
+     * @return the generic type, or Object.class if not found or not applicable.
      */
-    public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+    public Class<?> getGenericType(Field field) {
+        Type genericType = field.getGenericType();
+        if (genericType instanceof ParameterizedType) {
+            ParameterizedType pt = (ParameterizedType) genericType;
+            Type[] actualTypeArguments = pt.getActualTypeArguments();
+            // Ensure there is at least one type argument
+            if (actualTypeArguments.length > 0) {
+                Type firstTypeArgument = actualTypeArguments[0];
+                if (firstTypeArgument instanceof Class) {
+                    // Argument is a simple class (e.g., String in List<String>)
+                    return (Class<?>) firstTypeArgument;
+                } else if (firstTypeArgument instanceof ParameterizedType) {
+                    // Argument is also generic (e.g., Set<String> in List<Set<String>>)
+                    // Return the raw type (e.g., Set.class)
+                    return (Class<?>) ((ParameterizedType) firstTypeArgument).getRawType();
                 }
-        
+                // Handle cases like TypeVariable, WildcardType, GenericArrayType?
+                // The original code didn't handle these and failed with ClassCastException if actualTypeArgument wasn't Class.
+                // Falling back to Object.class seems the most reasonable default behavior here,
+                // consistent with the non-generic field case.
+            }
+        }
+        // If the field's type is not ParameterizedType (e.g. String, int, raw List)
+        // or if it has no type arguments, or if the first argument is not Class or ParameterizedType
         return Object.class;
     }
\ No newline at end of file
