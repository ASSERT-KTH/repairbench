diff --git a/tmp/493500d2-cd90-419d-9f75-457e235af11c_buggy.java b/tmp/77aa6c41-f11f-4e61-bb9a-5469e435577f_fixed.java
index bada2b6..92c9782 100644
--- a/tmp/493500d2-cd90-419d-9f75-457e235af11c_buggy.java
+++ b/tmp/77aa6c41-f11f-4e61-bb9a-5469e435577f_fixed.java
@@ -1,16 +1,30 @@
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
      *
      * @param field
      * @return
      */
     public Class getGenericType(Field field) {
         Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (generic instanceof ParameterizedType) {
+            ParameterizedType parameterizedType = (ParameterizedType) generic;
+            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+            // Find the first actual type argument
+            if (actualTypeArguments.length > 0) {
+                Type firstActualTypeArgument = actualTypeArguments[0];
+                if (firstActualTypeArgument instanceof Class) {
+                    // If the argument type is a class (e.g., String in List<String>)
+                    return (Class) firstActualTypeArgument;
+                } else if (firstActualTypeArgument instanceof ParameterizedType) {
+                    // If the argument type is also parameterized (e.g., Set<String> in List<Set<String>>)
+                    // return the raw type (e.g., Set.class)
+                    // Cast to Class is safe because getRawType returns Class<?>
+                    return (Class) ((ParameterizedType) firstActualTypeArgument).getRawType();
+                }
+                // Handle other cases like TypeVariable, WildcardType?
+                // For now, fall back to Object.class as per original behavior for unhandled cases.
+            }
         }
 
         return Object.class;
     }
\ No newline at end of file
