diff --git a/tmp/9de6b231-9d8c-445f-92eb-4e38d230d975_buggy.java b/tmp/62a833b9-0d30-460d-91de-95ce7f502c8c_fixed.java
index b36b2a9..9e14e69 100644
--- a/tmp/9de6b231-9d8c-445f-92eb-4e38d230d975_buggy.java
+++ b/tmp/62a833b9-0d30-460d-91de-95ce7f502c8c_fixed.java
@@ -1,26 +1,44 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
     for (JSType alternate : alternates) {
       if (alternate.isSubtype(that)) {
         builder.addAlternate(alternate);
       }
     }
 
     if (that instanceof UnionType) {
       for (JSType otherAlternate : ((UnionType) that).alternates) {
         if (otherAlternate.isSubtype(this)) {
           builder.addAlternate(otherAlternate);
         }
       }
     } else if (that.isSubtype(this)) {
       builder.addAlternate(that);
     }
     JSType result = builder.build();
+
+    // If the builder couldn't find any common subtypes, the result should
+    // be the bottom type. The specific bottom type depends on whether both
+    // operands were object types (or subtypes of Object).
     if (result != null) {
+      // NOTE: build() might return NO_TYPE if alternates contains mixed
+      // primitives and objects that collapse to nothing, or if it only
+      // contained NO_TYPE. We return whatever build() decided.
+      // If build() returns NO_OBJECT_TYPE (e.g. from union of NO_OBJECT_TYPE),
+      // return that.
       return result;
-    } else if (this.isObject() && that.isObject()) {
+    } else {
+      // Builder returned null, indicating no common subtypes found among alternates.
+      // Determine the correct bottom type: NO_OBJECT_TYPE or NO_TYPE.
+      // NO_OBJECT_TYPE is the bottom type if both 'this' and 'that' are subtypes
+      // of the main Object type. Otherwise, the bottom type is NO_TYPE.
+      // Using isSubtype(OBJECT_TYPE) is more accurate than isObject() here,
+      // as isObject() can be true for unions containing non-objects (like string|Object).
+      JSType objectType = getNativeType(JSTypeNative.OBJECT_TYPE);
+      if (this.isSubtype(objectType) && that.isSubtype(objectType)) {
           return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
       } else {
           return getNativeType(JSTypeNative.NO_TYPE);
       }
     }
+  }
\ No newline at end of file
