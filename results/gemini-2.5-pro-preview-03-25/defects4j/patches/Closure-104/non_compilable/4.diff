diff --git a/tmp/cd3ca4c6-a74b-4548-b808-fa0c038b28d8_buggy.java b/tmp/08ef3a4d-f86f-4a2d-bb8e-049b96c28030_fixed.java
index b36b2a9..502debe 100644
--- a/tmp/cd3ca4c6-a74b-4548-b808-fa0c038b28d8_buggy.java
+++ b/tmp/08ef3a4d-f86f-4a2d-bb8e-049b96c28030_fixed.java
@@ -1,26 +1,40 @@
+  @Override
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
-    for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
 
-    if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
-        }
+    // The meet of two union types is the union of the meets of the alternates.
+    // meet(A|B, C) = meet(A, C) | meet(B, C)
+    // meet(A|B, C|D) = meet(A, C) | meet(A, D) | meet(B, C) | meet(B, D)
+    // We calculate the meet for every pair of alternates between this type and that type.
+
+    // Determine the alternates of the 'that' type. If 'that' is not a union,
+    // it's treated as a union with a single alternate.
+    com.google.common.collect.ImmutableSet<JSType> otherAlternates = that.isUnionType()
+        ? that.toMaybeUnionType().getAlternates()
+        : com.google.common.collect.ImmutableSet.of(that);
+
+    // Iterate through all pairs of alternates ((thisAlternate, thatAlternate))
+    for (JSType thisAlternate : this.alternates) {
+      for (JSType thatAlternate : otherAlternates) {
+        // Calculate the greatest lower bound (meet) of the individual alternates.
+        // JSType.getGreatestSubtype handles the actual computation, including
+        // recursive calls back to this method if alternates are themselves unions.
+        // Base cases in JSType.getGreatestSubtype handle non-union types.
+        JSType alternateMeet = thisAlternate.getGreatestSubtype(thatAlternate);
+
+        // Add the result of the pairwise meet to the builder.
+        // The UnionTypeBuilder handles combining these results, including simplifying
+        // unions, ignoring NoType, and potentially propagating NoObject.
+        builder.addAlternate(alternateMeet);
       }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
     }
+
+    // Build the final union type from the collected meets.
     JSType result = builder.build();
-    if (result != null) {
-      return result;
-    } else if (this.isObject() && that.isObject()) {
-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
-    } else {
-      return getNativeType(JSTypeNative.NO_TYPE);
-    }
+
+    // If the builder produced a valid type (including potentially NoObject if all
+    // pairwise meets resulted in NoObject), return that type.
+    // If the builder returns null, it means all pairwise meets resulted in NoType,
+    // so the overall meet is NoType.
+    return (result != null) ? result : getNativeType(JSTypeNative.NO_TYPE);
   }
\ No newline at end of file
