diff --git a/tmp/a51f2f30-bfe4-404c-ba65-f842c31c74f0_buggy.java b/tmp/27a3cacf-d8f3-4e78-ac8c-6c1fd5af9b62_fixed.java
index b36b2a9..4bad2b9 100644
--- a/tmp/a51f2f30-bfe4-404c-ba65-f842c31c74f0_buggy.java
+++ b/tmp/27a3cacf-d8f3-4e78-ac8c-6c1fd5af9b62_fixed.java
@@ -1,26 +1,55 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
-    for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
+
+    // The meet of two union types U1|U2|... and V1|V2|...
+    // is (U1.meet(V1) | U1.meet(V2) | ... | U2.meet(V1) | ...).
+    // The meet of a union type U1|U2|... and a non-union type V
+    // is (U1.meet(V) | U2.meet(V) | ...).
+    // The builder correctly handles the case where a meet result is itself
+    // a union type or NO_TYPE/ALL_TYPE/etc.
 
     if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
+      UnionType thatUnion = (UnionType) that;
+      for (JSType thisAlternate : alternates) {
+        for (JSType thatAlternate : thatUnion.alternates) {
+          // Compute the meet of the individual alternates
+          JSType alternateMeet = thisAlternate.meet(thatAlternate);
+          // Add the result to the builder. The builder automatically handles
+          // flattening unions and ignoring NO_TYPE unless it's the only result.
+          builder.addAlternate(alternateMeet);
         }
       }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
+    } else {
+      // 'that' is not a UnionType
+      for (JSType thisAlternate : alternates) {
+        JSType alternateMeet = thisAlternate.meet(that);
+        builder.addAlternate(alternateMeet);
       }
+    }
+
     JSType result = builder.build();
-    if (result != null) {
-      return result;
-    } else if (this.isObject() && that.isObject()) {
-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
-    } else {
+
+    // If the builder is empty or only contained NO_TYPE, build() returns null.
+    // This means that the meet of all pairs of alternates resulted in NO_TYPE.
+    // Therefore, the overall meet should be NO_TYPE.
+    // If the pairwise meets included NO_OBJECT_TYPE (and possibly NO_TYPE),
+    // build() will correctly return NO_OBJECT_TYPE.
+    // Otherwise, build() returns the calculated union type.
+    if (result == null) {
+      // Check if both this and that could possibly be objects, even if no
+      // specific common object subtype was found by the pairwise meets.
+      // This addresses cases like meet(Array, Object) which might resolve
+      // pairwise to specific subtypes, but if not, the fallback should consider
+      // that both are conceptually objects. However, the pairwise meet approach
+      // should handle meet(unrelatedObj1, unrelatedObj2) -> NoObject correctly.
+      // If builder.build() is null, it truly means no overlap was found, even
+      // NoObject. The only time NoObject should be returned here is if the
+      // pairwise computation somehow missed it. Let's trust the pairwise results.
+      // If all pairwise meets are NO_TYPE, the result is NO_TYPE.
        return getNativeType(JSTypeNative.NO_TYPE);
+    } else {
+       // Return the result calculated by the builder (could be a specific type,
+       // a union, or NO_OBJECT_TYPE).
+       return result;
     }
   }
\ No newline at end of file
