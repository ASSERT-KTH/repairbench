diff --git a/tmp/5441392b-5e4d-4b45-afc1-dd6f5f265e04_buggy.java b/tmp/00d1905a-5e8c-47ab-9983-bad2fee6a03e_fixed.java
index b36b2a9..e77f2a7 100644
--- a/tmp/5441392b-5e4d-4b45-afc1-dd6f5f265e04_buggy.java
+++ b/tmp/00d1905a-5e8c-47ab-9983-bad2fee6a03e_fixed.java
@@ -1,26 +1,64 @@
+  /**
+   * Given two types, find the greatest common subtype (aka meet).
+   * GCS(T1 | T2, T3) = GCS(T1, T3) | GCS(T2, T3)
+   *
+   * In the case where the union consists of unrelated object types, the
+   * meet is the NO_OBJECT_TYPE. e.g.
+   * GCS(Error|URIError, String) = GCS(Error, String) | GCS(URIError, String)
+   *   = NO_OBJECT_TYPE | NO_OBJECT_TYPE = NO_OBJECT_TYPE
+   */
+  @Override
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
+    boolean needsNoObject = false; // Flag to track if NO_OBJECT_TYPE is part of the meet result
+
+    // Iterate through each alternate type in this union
     for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
+      // Compute the greatest common subtype (meet) of the alternate and 'that'
+      // Note: JSType#getGreatestSubtype is the public API for meet.
+      JSType alternateMeet = alternate.getGreatestSubtype(that);
 
-    if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
+      // Process the result of the meet and add it to the builder
+      if (alternateMeet.isUnionType()) {
+        // If the meet itself is a union, process its alternates
+        for (JSType meetAlternate : alternateMeet.toMaybeUnionType().getAlternates()) {
+          if (meetAlternate.isNoObjectType()) {
+            needsNoObject = true; // Mark that NO_OBJECT_TYPE is potentially needed
+          } else if (!meetAlternate.isNoType()) {
+            builder.addAlternate(meetAlternate); // Add other non-NO_TYPE results
           }
         }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
+      } else if (alternateMeet.isNoObjectType()) {
+        // If the meet is NO_OBJECT_TYPE, mark it as potentially needed
+        needsNoObject = true;
+      } else if (!alternateMeet.isNoType()) {
+        // If the meet is a single, non-bottom type, add it
+        builder.addAlternate(alternateMeet);
       }
+      // If alternateMeet is NO_TYPE, do nothing, it doesn't contribute to the meet
+    }
+
+    // Build the resulting type from the collected alternates
     JSType result = builder.build();
+
+    // Determine the final return value based on the built type and the needsNoObject flag
     if (result != null) {
+      // If the builder produced a non-empty type, return it.
+      // This resulting type represents the union of the meets calculated.
+      // If the result is, for example, 'Number' and needsNoObject was true
+      // (because meet(Obj, That) resulted in NoObject), the union Number | NoObject
+      // simplifies to Number, so returning 'result' is correct according to lattice rules.
       return result;
-    } else if (this.isObject() && that.isObject()) {
+    } else {
+      // If the builder is empty, it means all individual meets resulted in
+      // either NO_TYPE or NO_OBJECT_TYPE.
+      if (needsNoObject) {
+        // If NO_OBJECT_TYPE was encountered at least once, it's the greatest lower bound.
         return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
       } else {
+        // If only NO_TYPE was encountered (or the union was initially empty),
+        // the meet is NO_TYPE.
         return getNativeType(JSTypeNative.NO_TYPE);
       }
     }
+  }
\ No newline at end of file
