diff --git a/tmp/4dd7c425-16cd-45ff-b9c0-930c1832aed1_buggy.java b/tmp/9e6a3128-a89f-4a85-86d8-f3d854e3a115_fixed.java
index b36b2a9..9e84b3f 100644
--- a/tmp/4dd7c425-16cd-45ff-b9c0-930c1832aed1_buggy.java
+++ b/tmp/9e6a3128-a89f-4a85-86d8-f3d854e3a115_fixed.java
@@ -1,26 +1,34 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
     for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
+      // Computes the meet of this alternate with that JSType.
+      // The meet operation is the greatest lower bound, equivalent to the intersection
+      // of the types. If the types are incompatible (e.g., number and string, or two
+      // unrelated object types), the meet operation should result in an appropriate
+      // bottom type (NO_TYPE or NO_OBJECT_TYPE).
+      JSType alternateMeet = alternate.meet(that);
 
-    if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
-        }
-      }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
+      // The UnionTypeBuilder handles adding the result of the meet.
+      // It simplifies the union as alternates are added. For example:
+      // - Adding NO_TYPE is a no-op.
+      // - Adding T to a builder containing T' where T' <: T results in T'.
+      // - Adding T to a builder containing T' where T <: T' results in T.
+      // - Adding NO_OBJECT_TYPE multiple times results in NO_OBJECT_TYPE.
+      builder.addAlternate(alternateMeet);
     }
+
     JSType result = builder.build();
+
+    // If the result is null, it means that the union of all the meets resulted
+    // in an empty set (e.g., all meets resulted in NO_TYPE, or types that cancelled out).
+    // In this case, the greatest lower bound is the bottom type (NO_TYPE).
+    // If the builder returns a non-null type (which could be a specific type like String,
+    // or NO_OBJECT_TYPE if the meets of object types resulted in that),
+    // that non-null type is the correct meet result for the union.
     if (result != null) {
       return result;
-    } else if (this.isObject() && that.isObject()) {
-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
     } else {
-      return getNativeType(JSTypeNative.NO_TYPE);
+      // If the union collapses to nothing, the meet is the bottom type.
+      return registry.getNativeType(JSTypeNative.NO_TYPE);
     }
   }
\ No newline at end of file
