diff --git a/tmp/43e82882-596f-4433-8065-d612f0ce1d13_buggy.java b/tmp/adf15d96-b9c4-4b13-a0ec-dab28fce019e_fixed.java
index b36b2a9..a97bdaa 100644
--- a/tmp/43e82882-596f-4433-8065-d612f0ce1d13_buggy.java
+++ b/tmp/adf15d96-b9c4-4b13-a0ec-dab28fce019e_fixed.java
@@ -1,26 +1,39 @@
+  @Override
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
     for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
+      // Calculate the meet of the alternate with 'that'.
+      // JSType#meet handles the dispatch correctly, avoiding infinite recursion
+      // because eventually a non-UnionType#meet will be called.
+      JSType meetResult = alternate.meet(that);
+      // Add the result to the builder. UnionTypeBuilder handles adding
+      // unions, NO_TYPE, NO_OBJECT_TYPE, etc., correctly.
+      builder.addAlternate(meetResult);
     }
 
-    if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
-        }
-      }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
-    }
     JSType result = builder.build();
-    if (result != null) {
-      return result;
-    } else if (this.isObject() && that.isObject()) {
+
+    // If the build result is null (empty union) or NO_TYPE, it means
+    // no common subtype was found via the distributive meet.
+    // Fallback to NO_OBJECT_TYPE if both original types were object types.
+    // Note: An empty union (null result) should ideally represent NO_TYPE.
+    // The builder might return NO_TYPE directly in this case.
+    if (result == null || result.isNoType()) {
+      // Check if both 'this' union and 'that' are subtypes of Object.
+      // Using isSubtype is more reliable than isObject() potentially.
+      JSType objectType = getNativeType(JSTypeNative.OBJECT_TYPE);
+      // Check that 'that' is an object type AND this union contains only object types.
+      // The check for 'this' being a subtype of object ensures all its alternates are object types.
+      if (this.isSubtype(objectType) && that.isSubtype(objectType)) {
         return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
       } else {
+        // Otherwise, return the absolute bottom type
         return getNativeType(JSTypeNative.NO_TYPE);
       }
+    } else {
+      // Otherwise, return the computed union of meets.
+      // The UnionTypeBuilder is responsible for simplifications like
+      // (Foo | NO_OBJECT_TYPE) => Foo if Foo is an object type.
+      return result;
+    }
   }
\ No newline at end of file
