diff --git a/tmp/246610f2-7a63-45f0-b070-70abce3f748c_buggy.java b/tmp/52fb5c54-cba6-4d3e-bff1-f039f292db2a_fixed.java
index b36b2a9..27cb6e5 100644
--- a/tmp/246610f2-7a63-45f0-b070-70abce3f748c_buggy.java
+++ b/tmp/52fb5c54-cba6-4d3e-bff1-f039f292db2a_fixed.java
@@ -1,26 +1,50 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
+    boolean needsNoObject = false; // Track if NO_OBJECT_TYPE is a potential result
+
     for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
+      // Calculate the meet of the alternate and 'that'.
+      // We use getGreatestSubtype which delegates to the main registry logic
+      // ensuring symmetric behavior and handling of various type kinds.
+      JSType alternateMeet = alternate.getGreatestSubtype(that);
 
-    if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
+      // Add the result to the union builder.
+      // The builder handles ignoring NO_TYPE.
+      // If the meet is NO_OBJECT_TYPE, we add it but also note it.
+      if (!alternateMeet.isNoType()) {
+         builder.addAlternate(alternateMeet);
+         if (alternateMeet.isNoObjectType()) {
+             needsNoObject = true;
          }
       }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
     }
+
     JSType result = builder.build();
+
+    // If the resulting union is non-empty, return it.
+    // Examples:
+    // meet(num|str, num|bool) = meet(num,num)|meet(num,bool)|meet(str,num)|meet(str,bool)
+    //                        = num | NO_TYPE | NO_TYPE | NO_TYPE -> num
+    // meet(Error|num, Object) = meet(Error,Object)|meet(num,Object) = Error | NO_TYPE -> Error
+    // meet(EvalError|URIError, String) = meet(EvalError,String)|meet(URIError,String)
+    //                                  = NO_OBJECT_TYPE | NO_OBJECT_TYPE -> NO_OBJECT_TYPE
     if (result != null) {
+      // If the result is just NO_OBJECT_TYPE, return it.
+      // If the result contains NO_OBJECT_TYPE and other object types, UnionTypeBuilder
+      // should simplify this correctly (e.g., `Error | NO_OBJECT_TYPE` simplifies to `Error`).
       return result;
-    } else if (this.isObject() && that.isObject()) {
+    }
+
+    // If the builder is empty (all pairwise meets resulted in NO_TYPE), the overall meet depends.
+    // If we encountered NO_OBJECT_TYPE during pairwise meets (meaning some meets between objects
+    // occurred but didn't overlap with other types), and both original types were objects,
+    // the meet should be NO_OBJECT_TYPE. Otherwise it's NO_TYPE.
+    // This handles cases like meet({a:number}|{b:string}, {c:boolean}) -> NO_OBJECT_TYPE
+    // and meet(number|string, boolean) -> NO_TYPE.
+    // The original code's fallback logic captured this intention.
+    if (needsNoObject && this.isObject() && that.isObject()) {
         return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
     } else {
         return getNativeType(JSTypeNative.NO_TYPE);
     }
   }
\ No newline at end of file
