diff --git a/tmp/be5ff7b3-121e-4a79-b581-70f53a395005_buggy.java b/tmp/6ac11762-8a13-4796-9c15-4f79e3e8ea68_fixed.java
index b36b2a9..4160f73 100644
--- a/tmp/be5ff7b3-121e-4a79-b581-70f53a395005_buggy.java
+++ b/tmp/6ac11762-8a13-4796-9c15-4f79e3e8ea68_fixed.java
@@ -1,26 +1,40 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
     for (JSType alternate : alternates) {
       if (alternate.isSubtype(that)) {
         builder.addAlternate(alternate);
       }
     }
 
     if (that instanceof UnionType) {
       for (JSType otherAlternate : ((UnionType) that).alternates) {
         if (otherAlternate.isSubtype(this)) {
           builder.addAlternate(otherAlternate);
         }
       }
     } else if (that.isSubtype(this)) {
       builder.addAlternate(that);
     }
+
+    // Build the result from the collected subtypes
     JSType result = builder.build();
-    if (result != null) {
-      return result;
-    } else if (this.isObject() && that.isObject()) {
+
+    // If the builder was empty (meaning builder.build() returned NO_TYPE),
+    // then we need to determine the correct bottom type based on the original types.
+    if (result.isNoType()) {
+      // If both original types were object types, the greatest common subtype
+      // (meet) should be NO_OBJECT_TYPE.
+      if (this.isObject() && that.isObject()) {
         return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
       } else {
+        // Otherwise, the greatest common subtype is NO_TYPE.
+        // We already have NO_TYPE in 'result', but returning it explicitly
+        // from the registry is cleaner.
         return getNativeType(JSTypeNative.NO_TYPE);
       }
+    } else {
+      // If the builder was not empty, return the calculated union type
+      // which represents the meet.
+      return result;
+    }
   }
\ No newline at end of file
