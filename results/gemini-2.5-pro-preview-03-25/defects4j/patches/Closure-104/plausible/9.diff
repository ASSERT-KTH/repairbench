diff --git a/tmp/fed1d9a3-2592-4e4b-aee5-eda8d717e5df_buggy.java b/tmp/e20aeb44-90c3-4c30-ae59-cc339cc0ef10_fixed.java
index b36b2a9..0f3ccef 100644
--- a/tmp/fed1d9a3-2592-4e4b-aee5-eda8d717e5df_buggy.java
+++ b/tmp/e20aeb44-90c3-4c30-ae59-cc339cc0ef10_fixed.java
@@ -1,26 +1,46 @@
+  /**
+   * Computes the greatest common subtype (meet) of this union type and that type.
+   * Uses the distributive property: meet(A | B, C) = meet(A, C) | meet(B, C)
+   * The result is the union of the meets of each alternate of this union with that type.
+   */
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
+    boolean hasNonNoType = false; // Keep track if we add something other than NO_TYPE/null
+
     for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
+      // Recursively calculate the greatest common subtype of the alternate and that.
+      JSType gcs = alternate.getGreatestSubtype(that);
 
-    if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
+      // Add the result to the builder.
+      // UnionTypeBuilder is expected to handle null, NO_TYPE, NO_OBJECT_TYPE, etc.
+      // when building the final union.
+      if (gcs != null && !gcs.isNoType()) {
+          hasNonNoType = true;
       }
+      builder.addAlternate(gcs);
     }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
-    }
+
     JSType result = builder.build();
-    if (result != null) {
+
+    // If the builder returned a concrete type (possibly a union, possibly NO_OBJECT_TYPE),
+    // return it. builder.build() should return null if the resulting union is empty or equivalent to NO_TYPE.
+    if (result != null && !result.isNoType()) {
+        // If the builder result simplifies to NO_OBJECT_TYPE, we return it directly.
         return result;
-    } else if (this.isObject() && that.isObject()) {
+    }
+
+    // If the distributive approach yielded an empty set (result is null or NO_TYPE),
+    // it means no common subtypes were found among the alternates intersections.
+    // Fallback to determine the correct bottom type (NO_TYPE or NO_OBJECT_TYPE).
+    // This logic mirrors the original code's fallback.
+    // If both this union and the other type are object types (contain only objects),
+    // then their meet, even if empty, should be NO_OBJECT_TYPE.
+    // Note: isObject() on a UnionType checks if *all* alternates are objects.
+    // Note: isObject() on other types checks if they are object-like (not primitive, null, void).
+    if (this.isObject() && that.isObject()) {
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
     } else {
+      // Otherwise, the greatest common subtype is the universal bottom type NO_TYPE.
       return getNativeType(JSTypeNative.NO_TYPE);
     }
   }
\ No newline at end of file
