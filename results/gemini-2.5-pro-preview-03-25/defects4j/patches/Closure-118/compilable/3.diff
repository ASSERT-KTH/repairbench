diff --git a/tmp/76076714-bca1-4508-a22b-3fa369a80f33_buggy.java b/tmp/113cae87-ba38-4e8a-b372-1154f6e4b82f_fixed.java
index 0b7c52e..6ef35d7 100644
--- a/tmp/76076714-bca1-4508-a22b-3fa369a80f33_buggy.java
+++ b/tmp/113cae87-ba38-4e8a-b372-1154f6e4b82f_fixed.java
@@ -1,27 +1,82 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
+      // Determine the type of the object that the literal is defining properties for.
+      // We need the *instance* type associated with the object literal context.
+      T contextType = null; // T is the generic type parameter, assume JSType
+      Node parent = n.getParent();
+      // Check if the object literal is the RHS of an assignment.
+      if (parent != null && parent.isAssign() && parent.getLastChild() == n) {
+          Node lhs = parent.getFirstChild();
+          JSType lhsJSType = lhs.getJSType(); // Work with JSType internally for analysis
+          if (lhsJSType != null) {
+              // Use the non-nullable version of the type.
+              lhsJSType = lhsJSType.restrictByNotNullOrUndefined();
+              ObjectType lhsObjectType = lhsJSType.toObjectType(); // Use ObjectType methods safely
+
+              // Check if assigning to a prototype (e.g., Foo.prototype = {...})
+              if (lhsObjectType != null && lhsObjectType.isFunctionPrototypeType()) {
+                  // If assigning to Foo.prototype, the relevant type for disambiguation
+                  // is the instance type Foo.
+                  FunctionType ownerFunction = lhsObjectType.getOwnerFunction();
+                  if (ownerFunction != null && ownerFunction.isConstructor()) {
+                      // Assuming T is JSType or a supertype. Need to cast result to T.
+                      contextType = (T) ownerFunction.getInstanceType();
+                  }
+              } else if (lhsJSType.isObject()) {
+                  // Handle assignment to other object types (e.g., variables, namespaces, 'this').
+                  // The lhsType itself might be the instance type or a related object type.
+                  // Use the JSType of the LHS directly as the context type.
+                  contextType = (T) lhsJSType;
+              }
+          }
+      }
+      // TODO(user): Handle other contexts like variable declarations (var x = {...}),
+      // return statements (return {...}), etc., if necessary. For now, focus on assignments.
+
       for (Node child = n.getFirstChild();
            child != null;
            child = child.getNext()) {
-        // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
+        // Child node represents a key-value pair. Key can be STRING_KEY, GETTER_DEF, SETTER_DEF.
         String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
+        // We should never see a mix of numbers and strings, implies keys are strings.
+        // GET/SET defs also have getString() returning the property name.
+        // If name is null, it might be a computed property name or invalid AST, skip.
+        if (name == null) {
+            continue;
+        }
+
+
+        // If we couldn't determine the context type from the assignment,
+        // typeForProperty will be null. processProperty handles null types
+        // by treating the property as potentially invalidating.
+        T typeForProperty = contextType;
 
         Property prop = getProperty(name);
+        // processProperty records this usage of 'prop' associated with 'typeForProperty'.
+        // If typeForProperty is null, it typically marks 'prop' as globally conflicting.
         if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+                                   processProperty(t, prop, typeForProperty, null))) {
+          // Renaming failed (e.g., property was invalidated). Report error if needed.
           if (propertiesToErrorFor.containsKey(name)) {
+            // Use JSType's toString for the error message if possible
+            String typeString = "unknown";
+            // Check if typeForProperty is a JSType before calling toString()
+            if (typeForProperty instanceof JSType) {
+                // Avoid potential NPE if toString returns null, though unlikely for JSType
+                typeString = String.valueOf(typeForProperty);
+            } else if (typeForProperty != null) {
+                // Fallback if T is not JSType, though unlikely in standard configurations
+                typeString = typeForProperty.toString();
+            }
+
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+                typeString, // Use resolved type string or "unknown"
+                n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
