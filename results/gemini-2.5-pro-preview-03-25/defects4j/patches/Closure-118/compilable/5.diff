diff --git a/tmp/7ffad12a-9580-4396-8d42-e136ca6b0ee5_buggy.java b/tmp/47047663-1f6a-4591-a51b-bee11e5b7a7b_fixed.java
index 0b7c52e..0c123d8 100644
--- a/tmp/7ffad12a-9580-4396-8d42-e136ca6b0ee5_buggy.java
+++ b/tmp/47047663-1f6a-4591-a51b-bee11e5b7a7b_fixed.java
@@ -1,27 +1,44 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
+      // Get the JSType of the object literal node itself.
+      // This represents the type of the object being created.
+      // DisambiguateProperties operates on JSType, so T is JSType.
+      T objectLitType = (T) n.getJSType();
+
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Child node represents a property: STRING_KEY, GETTER_DEF, or SETTER_DEF.
 
-        // We should never see a mix of numbers and strings.
+        // Get the property name. This is always safe for STRING_KEY, GET and SET.
         String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
 
+        // Get the Property object associated with this name.
         Property prop = getProperty(name);
+
+        // Process this property occurrence.
+        // Pass the type of the object literal (objectLitType) as the owner type.
+        // This aligns with handleGetProp/handleAssign which pass the type of the
+        // object on which the property is accessed/assigned.
         if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+                                   processProperty(t, prop, objectLitType, null))) {
+          // Renaming failed due to invalidation. Report error if necessary.
           if (propertiesToErrorFor.containsKey(name)) {
+            // For the error message, it might be helpful to know the type
+            // of the property value itself, as originally calculated.
+            T propertyValueType = typeSystem.getType(getScope(), n, name);
+
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+                // Report the property value type in the message if available.
+                (propertyValueType == null ? "null" : propertyValueType.toString()),
+                // The owner is the object literal node.
+                n.toString(),
+                 ""));
           }
         }
       }
     }
\ No newline at end of file
