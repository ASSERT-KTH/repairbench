diff --git a/tmp/0c2078e2-8581-40a7-9ebd-e0941d783f2f_buggy.java b/tmp/1c235d6b-02f0-419f-84ca-7f61681968d1_fixed.java
index 0b7c52e..fc44389 100644
--- a/tmp/0c2078e2-8581-40a7-9ebd-e0941d783f2f_buggy.java
+++ b/tmp/1c235d6b-02f0-419f-84ca-7f61681968d1_fixed.java
@@ -1,27 +1,52 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Maybe STRING_KEY, GETTER_DEF, SETTER_DEF
+        // We skip number keys, assuming they are disallowed or handled elsewhere.
+        // Computed property names are NAME nodes, not STRING_KEY.
+        if (!child.isStringKey() && !child.isGetterDef() && !child.isSetterDef()) {
+           continue;
+        }
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+
+        // Record the type information for this property definition.
+        // processProperty also checks for invalidation based on type system rules.
+        // We pass null for the replacement node, as this is a definition site.
+        boolean okToRename = processProperty(t, prop, type, null);
+
+        // If the key was quoted, this property cannot be safely renamed.
+        // Mark the property globally as invalidating.
+        if (child.isQuotedString()) {
+            prop.setInvalidatingType(typeSystem.getNativeType(STRING_TYPE), child);
+            // Prevent scheduling renaming for this specific node based on the quoted key.
+            okToRename = false;
+        }
+
+        // scheduleRenaming tracks nodes related to a property for the actual rename step.
+        // It returns false if scheduling fails (e.g., property already invalidated).
+        // We only schedule if the key wasn't quoted AND processProperty returned true.
+        if (!prop.scheduleRenaming(child, okToRename)) {
+          // If scheduling failed (either because okToRename=false initially,
+          // or okToRename became false due to quoted key, or prop was already invalid),
+          // check if we should report an error.
           if (propertiesToErrorFor.containsKey(name)) {
+            // Use the invalidation reason stored in the property if available.
+            String reason = prop.getInvalidationReason();
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+                (type == null ? "null" : type.toString()), n.toString(),
+                reason == null ? "" : reason));
           }
         }
       }
     }
\ No newline at end of file
