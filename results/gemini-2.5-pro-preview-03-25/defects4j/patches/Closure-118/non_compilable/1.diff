diff --git a/tmp/ccabaa1a-cc99-46f5-bd03-4f52d3de41e5_buggy.java b/tmp/ff08e844-d840-44ee-b726-8684399bface_fixed.java
index 0b7c52e..8986a0c 100644
--- a/tmp/ccabaa1a-cc99-46f5-bd03-4f52d3de41e5_buggy.java
+++ b/tmp/ff08e844-d840-44ee-b726-8684399bface_fixed.java
@@ -1,27 +1,58 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Child node must be a STRING_KEY, GETTER_DEF, or SETTER_DEF
+        // Handle quoted keys ('foo': 1) which cannot be safely renamed.
+        // Getters/setters (get foo() {}) are never quoted.
+
+        // Use NodeUtil to safely check and get the key name.
+        // Handles STRING_KEY, GETTER_DEF, SETTER_DEF.
+        if (!NodeUtil.isObjectLitKey(child)) {
+          // Skip other node types like computed properties, spread operators, etc.
+          // Numeric keys are also skipped as they typically don't participate
+          // in property disambiguation based on type information.
+          continue;
+        }
+        String name = NodeUtil.getObjectLitKeyName(child);
+        // A non-string name (e.g. number from a numeric key) cannot be disambiguated.
+        if (name == null) {
+          continue;
+        }
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+
+        // Determine if this object literal definition prevents renaming.
+        // Condition 1: Was the key quoted? (e.g., {'foo': 1})
+        // Quoted keys invalidate renaming. Getters/setters are never quoted.
+        boolean quotedKey = child.isStringKey() && child.isQuotedStringKey();
+
+        // Condition 2: Does general analysis allow renaming for this property usage?
+        // Passing 'null' for the context node, as the object literal itself
+        // doesn't provide context for invalidation like a CALL node would.
+        boolean processPropertyAllows = processProperty(t, prop, type, null);
+
+        // Renaming is allowed only if the key is NOT quoted AND processProperty allows it.
+        boolean canRename = !quotedKey && processPropertyAllows;
+
+        // Schedule the renaming if possible, otherwise invalidate the property.
+        // scheduleRenaming returns true if the property is still valid *after*
+        // processing this node, and false if it became invalid or already was.
+        if (!prop.scheduleRenaming(child, canRename)) {
+          // Property became invalid or was already invalid. Report error if necessary.
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
