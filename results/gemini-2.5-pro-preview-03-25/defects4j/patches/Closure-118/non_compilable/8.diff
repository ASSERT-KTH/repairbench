diff --git a/tmp/b911abf4-686f-4c7d-843b-24c99c44a604_buggy.java b/tmp/db64a843-a1d8-421d-9fda-802ba9fd0c91_fixed.java
index 0b7c52e..fd9f21e 100644
--- a/tmp/b911abf4-686f-4c7d-843b-24c99c44a604_buggy.java
+++ b/tmp/db64a843-a1d8-421d-9fda-802ba9fd0c91_fixed.java
@@ -1,27 +1,41 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
+      // Get the type of the object literal expression itself. This is the type
+      // of the object being constructed or assigned to.
+      T objectLitType = typeSystem.getType(getScope(), n, null);
+
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Object literal keys may be STRING, GETTER_DEF, or SETTER_DEF nodes.
+        // We use getStringKey() which works for all these types.
+        String name = child.getStringKey();
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
+        // Skip numeric keys, as they are not handled by this pass.
+        if (name == null) {
+          // TODO(b/181204127): Handle numeric keys properly.
+          continue;
+        }
 
         Property prop = getProperty(name);
+
+        // Pass the type of the object literal (objectLitType) and the node
+        // representing the property definition (child) to processProperty.
+        // The original code incorrectly passed the type of the property's value.
         if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+                                   processProperty(t, prop, objectLitType, child))) {
+          // If scheduling failed (e.g., due to conflicting types) and this
+          // property is specifically marked for errors, report it.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+                // Use the object's type in the error message.
+                (objectLitType == null ? "null" : objectLitType.toString()),
+                n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
