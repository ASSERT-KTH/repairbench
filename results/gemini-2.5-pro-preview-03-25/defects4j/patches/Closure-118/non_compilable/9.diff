diff --git a/tmp/0f31c8a9-629f-4890-9fec-ecfafc3bf697_buggy.java b/tmp/7b2c5d57-b62b-4b26-9122-febb85bcf0b4_fixed.java
index 0b7c52e..5af696a 100644
--- a/tmp/0f31c8a9-629f-4890-9fec-ecfafc3bf697_buggy.java
+++ b/tmp/7b2c5d57-b62b-4b26-9122-febb85bcf0b4_fixed.java
@@ -1,27 +1,53 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Child node types can be:
+        // STRING_KEY: covers {a: 1}, {'a': 1}, {"a": 1}
+        // GETTER_DEF: covers {get a() {}}
+        // SETTER_DEF: covers {set a(v) {}}
+        // MEMBER_FUNCTION_DEF: covers {a() {}} (ES6 shorthand method)
+        // COMPUTED_PROP: covers {[a]: 1} (ES6 computed property)
 
-        // We should never see a mix of numbers and strings.
+        // Properties defined with quoted keys (e.g., {'a': 1}) are not renamed.
+        // This aligns with the handling of property access using brackets (obj['a']).
+        // We check child.isStringKey() because isQuotedStringKey() is only meaningful for STRING_KEY.
+        // GETTER_DEF, SETTER_DEF, MEMBER_FUNCTION_DEF implicitly use unquoted names and are handled below.
+        // Computed properties are handled in handleComputedProperty().
+        if ((child.isStringKey() && child.isQuotedStringKey())
+            || child.isComputedProp()) {
+          continue;
+        }
+
+        // Get the property name. This works for STRING_KEY (unquoted), GETTER_DEF, SETTER_DEF, MEMBER_FUNCTION_DEF.
         String name = child.getString();
+        // A property name should exist for the node types we handle here.
+        if (name == null) {
+          // Defensive check: skip if name is unexpectedly null.
+          continue;
+        }
+
+        // We should never see a mix of numbers and strings (referring to property keys).
+        // This comment might be slightly outdated or less relevant now.
+
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
+          // Renaming invalidated for this property.
+          // Report error if this property was specifically marked for error reporting.
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
