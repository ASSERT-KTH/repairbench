diff --git a/tmp/b44c6ad2-0878-4cd2-a497-99061ba30c85_buggy.java b/tmp/426fb020-e064-4c3a-9511-03e7ffabadeb_fixed.java
index 0b7c52e..e60a83f 100644
--- a/tmp/b44c6ad2-0878-4cd2-a497-99061ba30c85_buggy.java
+++ b/tmp/426fb020-e064-4c3a-9511-03e7ffabadeb_fixed.java
@@ -1,27 +1,60 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Child node types can be:
+        // STRING_KEY: Represents a standard property `{ key: value }` or `{ 'key': value }`.
+        // GETTER_DEF: Represents a getter `get key() { ... }`.
+        // SETTER_DEF: Represents a setter `set key(v) { ... }`.
+        // MEMBER_FUNCTION_DEF: Represents a method shorthand `key() { ... }`.
+        // COMPUTED_PROPERTY: Represents `{ [expr]: value }`.
 
-        // We should never see a mix of numbers and strings.
+        // Computed properties cannot be renamed.
+        if (child.isComputedProp()) {
+          continue;
+        }
+
+        // Get the property name. This works for STRING_KEY, GETTER_DEF, SETTER_DEF, MEMBER_FUNCTION_DEF.
         String name = child.getString();
+        // It might be null for computed properties if not handled above, or unexpected nodes.
+        if (name == null) {
+             continue;
+        }
+
         T type = typeSystem.getType(getScope(), n, name);
-
         Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+        boolean schedule = true;
+
+        // Quoted keys in object literals indicate programmer intent not to rename or
+        // compatibility with external code. Do not schedule these for renaming.
+        // Check if the node represents a string key and if it's quoted.
+        // Node.isStringKey() checks if the node type is Token.STRING_KEY.
+        // Node.isQuotedString() checks the QUOTED_PROP marker on the node.
+        if (child.isStringKey() && child.isQuotedString()) {
+            schedule = false;
+        }
+        // GETTER_DEF, SETTER_DEF, MEMBER_FUNCTION_DEF, and unquoted STRING_KEY should be scheduled.
+
+        // Process the property to update type information regardless of scheduling.
+        boolean changed = processProperty(t, prop, type, null);
+
+        if (schedule) {
+          // Schedule renaming only if it's an eligible property definition.
+          if (!prop.scheduleRenaming(child, changed)) {
+            // Report error if scheduling failed for a property we intended to rename.
             if (propertiesToErrorFor.containsKey(name)) {
               compiler.report(JSError.make(
                   t.getSourceName(), child, propertiesToErrorFor.get(name),
                   Warnings.INVALIDATION, name,
                   (type == null ? "null" : type.toString()), n.toString(), ""));
             }
           }
         }
+        // If schedule is false (e.g., quoted key), we intentionally don't schedule
+        // renaming and thus don't report an error here if scheduling "fails".
+        // Invalidation might still occur due to other accesses, handled elsewhere.
+      }
     }
\ No newline at end of file
