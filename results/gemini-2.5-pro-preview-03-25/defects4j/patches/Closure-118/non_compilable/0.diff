diff --git a/tmp/bae59275-e032-4c2d-a052-6d1463b42800_buggy.java b/tmp/c8d71215-782d-468a-9d26-166d13875fda_fixed.java
index 0b7c52e..d608442 100644
--- a/tmp/bae59275-e032-4c2d-a052-6d1463b42800_buggy.java
+++ b/tmp/c8d71215-782d-468a-9d26-166d13875fda_fixed.java
@@ -1,27 +1,51 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
+        // Process STRING, GETTER_DEF, SETTER_DEF, MEMBER_FUNCTION_DEF keys.
+        // We need to distinguish between quoted ('prop': ...) and unquoted (prop: ...)
+        // string keys. Unquoted keys and other key types (like getters/setters)
+        // are candidates for renaming, quoted string keys are not.
+        if (child.isStringKey()) { // Covers STRING, GETTER_DEF, SETTER_DEF, MEMBER_FUNCTION_DEF
+          String name = child.getString(); // Correctly gets name for all StringKey types
+          T type = typeSystem.getType(getScope(), n, name); // Type of the property *value*
 
           Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+          // processProperty updates type information for the property name globally
+          // and returns true if the property is currently considered valid for renaming
+          // based on type consistency across all encountered uses so far.
+          boolean isConsistent = processProperty(t, prop, type, null);
+
+          // Determine if this specific key instance is eligible for renaming.
+          // Quoted string keys {'a': 1} are not eligible, like bracket access x['a'].
+          // Unquoted keys {a: 1} and getters/setters/methods are eligible, like dot access x.a.
+          boolean canRenameThisInstance = !child.isString() || !child.isQuotedString();
+
+          if (canRenameThisInstance) {
+            // Schedule this specific instance for renaming if the property itself is consistent.
+            // scheduleRenaming returns false if renaming is invalidated, typically because
+            // isConsistent was false (due to type conflicts found in processProperty)
+            // or other reasons determined by the Property object.
+            if (!prop.scheduleRenaming(child, isConsistent)) {
+              // If scheduling fails (property is invalidated), report an error
+              // if this property name is explicitly tracked for errors.
               if (propertiesToErrorFor.containsKey(name)) {
                 compiler.report(JSError.make(
                     t.getSourceName(), child, propertiesToErrorFor.get(name),
                     Warnings.INVALIDATION, name,
                     (type == null ? "null" : type.toString()), n.toString(), ""));
               }
             }
           }
+          // If it's a quoted string key (!canRenameThisInstance), we still called processProperty
+          // to record the type occurrence (which might contribute to invalidating the property
+          // if types conflict), but we don't call scheduleRenaming for this specific node
+          // because quoted keys cannot be renamed.
+        }
+        // We ignore other node types like computed properties or spread operators,
+        // as they are not handled by this logic.
+      }
     }
\ No newline at end of file
