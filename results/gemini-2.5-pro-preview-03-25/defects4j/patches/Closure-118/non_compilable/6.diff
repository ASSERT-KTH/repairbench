diff --git a/tmp/20ca147f-fcdd-47ec-8b0c-5272cf1cb6ca_buggy.java b/tmp/3f27ad06-51d8-4d1a-8d50-46419d94e900_fixed.java
index 0b7c52e..ccf97c0 100644
--- a/tmp/20ca147f-fcdd-47ec-8b0c-5272cf1cb6ca_buggy.java
+++ b/tmp/3f27ad06-51d8-4d1a-8d50-46419d94e900_fixed.java
@@ -1,27 +1,57 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
+      // Ensure the JSType is computed. This is necessary to get the type context
+      // for the properties defined in this literal.
+      // TODO(johnlenz): compute the object literal's type lazily?
+      n.getJSType();
+
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Child node is the key (STRING_KEY, GETTER_DEF, SETTER_DEF)
+        // We should never see a mix of numbers and strings for keys here,
+        // numeric keys are handled implicitly by JS interpreters as strings.
+        String name = child.getString(); // Property name
+
+        // Get the type of the object literal itself. This is the object
+        // on which the property is being defined in this context.
+        T objectLitType = (T) n.getJSType();
+
+        // If we don't know the type of the object literal, we can't disambiguate
+        // properties defined on it. This might happen if type inference failed
+        // or the context doesn't provide enough information.
+        // Also skip if the type is too broad (Object, Unknown, All).
+        // NOTE: We might potentially want to handle the case where objectLitType is
+        // null, though theoretically, type inference should always assign a type.
+        if (objectLitType == null || objectLitType.isUnknownType() || objectLitType.isEmptyType() || objectLitType.isAllType()) {
+            // Cannot disambiguate properties on unknown/broad types.
+            continue;
+        }
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
+
+        // processProperty expects the type of the object on which the property
+        // is accessed/defined. In this case, it's the object literal type.
+        // computedProp is null because this is not a GETELEM/SETELEM.
         if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+                                   processProperty(t, prop, objectLitType, null))) {
+          // Renaming failed (e.g., due to invalidation).
+          // Report an error if this property was specifically marked for error reporting.
           if (propertiesToErrorFor.containsKey(name)) {
+            // For the error message, it's helpful to include the type of the
+            // property's value as defined in the literal.
+            T valueType = typeSystem.getType(getScope(), n, name);
+
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+                (valueType == null ? "null" : valueType.toString()), // Type of the property's value
+                n.toString(), // Source code of the object literal
+                "")); // Currently missing context for the original definition site
           }
         }
       }
     }
\ No newline at end of file
