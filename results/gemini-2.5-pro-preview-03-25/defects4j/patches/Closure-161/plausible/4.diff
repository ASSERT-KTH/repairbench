diff --git a/tmp/010a7edb-03d2-4d94-ab79-19b819d4699d_buggy.java b/tmp/af8377de-5dda-4477-9501-21fd4a058c23_fixed.java
index 1303a19..137a0a4 100644
--- a/tmp/010a7edb-03d2-4d94-ab79-19b819d4699d_buggy.java
+++ b/tmp/af8377de-5dda-4477-9501-21fd4a058c23_fixed.java
@@ -1,45 +1,69 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
+    // Also bail on "[][0]--" and "--[][0]".
+    // FIX: Add check for assignment/inc/dec target.
+    if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n ||
+        parent.getType() == Token.INC || parent.getType() == Token.DEC) {
+      return n;
+    }
+    // END FIX
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
+    // Check if the index is valid (integer, not out of representable range)
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
+    // NaN and Infinity should also be treated as invalid.
+    // Although intIndex != index might catch NaN, explicitly check is safer.
+    // Infinity might cast to Integer.MAX_VALUE, potentially passing the intIndex != index check.
+    if (Double.isNaN(index) || Double.isInfinite(index)) {
+         error(INVALID_GETELEM_INDEX_ERROR, right);
+         return n;
+    }
+
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
+      // TODO(johnlenz): Fold out of bounds reads to undefined. Fold holes to undefined.
+      // See http://blickly.github.io/closure-compiler-issues/#522
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
+      // TODO(johnlenz): Fold holes to undefined.
+      // See http://blickly.github.io/closure-compiler-issues/#522
       elem = NodeUtil.newUndefinedNode(elem);
+      // Don't remove EMPTY nodes from the array, this would change the structure
+      // and potentially the length of the array literal which would be observable
+      // if the array is used elsewhere.
     } else {
+      // Detach elem from the ArrayLit Node before we reuse it.
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
