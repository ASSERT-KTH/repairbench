diff --git a/tmp/37d4a616-1dae-4c64-b617-ed2f0bcb825d_buggy.java b/tmp/14c6714d-8fb6-4148-859d-1e38704fc810_fixed.java
index 1303a19..26b478f 100644
--- a/tmp/37d4a616-1dae-4c64-b617-ed2f0bcb825d_buggy.java
+++ b/tmp/14c6714d-8fb6-4148-859d-1e38704fc810_fixed.java
@@ -1,45 +1,74 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
+    //    "[][0] += 1" or "[][0] = 1" or "[][0]++"
+    // Check if n is the LValue in an assignment or the operand of INC/DEC
+    if (parent != null) {
+      // Check assignments, including compound assignments
+      if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {
+        return n;
+      }
+      // Check increment/decrement
+      int parentType = parent.getType();
+      if ((parentType == Token.INC || parentType == Token.DEC) && parent.getFirstChild() == n) {
+        return n;
+      }
+    }
+
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
-    if (intIndex != index) {
+    // Use NumberUtil comparisons to avoid floating point issues.
+    if (!Double.isFinite(index) || intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
+    // Negative indices are trivially out of bounds.
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Find the element
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
+    // Check if the index is out of bounds
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // If the element is empty, replace it with undefined.
     if (elem.getType() == Token.EMPTY) {
-      elem = NodeUtil.newUndefinedNode(elem);
+      // Accessing an empty slot results in "undefined". Fold to an UNDEFINED node.
+      // Create a new UNDEFINED node, copying source info from the EMPTY node.
+      Node undefinedNode = NodeUtil.newUndefinedNode(elem);
+      // Replace the original GETELEM node with the new UNDEFINED node.
+      // No need to remove the EMPTY node from the original array literal,
+      // as we are replacing the parent operation (GETELEM) directly.
+      n.getParent().replaceChild(n, undefinedNode);
+      reportCodeChange();
+      return undefinedNode; // Return the new undefined node
     } else {
+      // For non-empty elements, remove the element from the original array literal.
+      // This is safe because we've already checked that this GETELEM is not
+      // an L-value (assignment target).
       left.removeChild(elem);
-    }
 
-    // Replace the entire GETELEM with the value
+      // Replace the entire GETELEM node with the element node.
       n.getParent().replaceChild(n, elem);
       reportCodeChange();
-    return elem;
+      return elem; // Return the element node that replaced n
+    }
   }
\ No newline at end of file
