diff --git a/tmp/d34e74a0-9d40-4327-b723-18ec95f3910e_buggy.java b/tmp/09586ffa-2ace-4399-96f8-3e0e12c81954_fixed.java
index 1303a19..e1f981f 100644
--- a/tmp/d34e74a0-9d40-4327-b723-18ec95f3910e_buggy.java
+++ b/tmp/09586ffa-2ace-4399-96f8-3e0e12c81954_fixed.java
@@ -1,45 +1,60 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
+    // or "[][0] = 1"
+    if (parent != null && NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {
+      return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Traverse the array left to right catching holes.
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
+      // Either the array is too short or the index is within a hole.
+      // GWT represents holes in array literals as EMPTY nodes. Let's
+      // find out which case we are in.
+      int knownLength = left.getChildCount();
+      if (intIndex < knownLength) {
+         // The index is within a hole. A read should result in undefined.
+         elem = NodeUtil.newUndefinedNode(n); // Use 'n' for source info
+      } else {
+         // The array is too short.
          error(INDEX_OUT_OF_BOUNDS_ERROR, right);
          return n;
       }
-
-    if (elem.getType() == Token.EMPTY) {
+    } else if (elem.getType() == Token.EMPTY) {
+       // We found a hole. A read should result in undefined.
        elem = NodeUtil.newUndefinedNode(elem);
     } else {
+       // We found the element, detach it from the ARRAYLIT node.
        left.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
+    // Replace the entire GETELEM with the element value.
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
