diff --git a/tmp/7d27e417-96cd-442c-b1ca-f7439a64d85d_buggy.java b/tmp/d6f347bc-bcae-4de3-abf3-ffe8b19b9fa3_fixed.java
index 1303a19..875ebd6 100644
--- a/tmp/7d27e417-96cd-442c-b1ca-f7439a64d85d_buggy.java
+++ b/tmp/d6f347bc-bcae-4de3-abf3-ffe8b19b9fa3_fixed.java
@@ -1,45 +1,59 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
+    //    "[][0] = 1"
+    //    "delete [][0]"
+    // Check this *before* performing validity checks like bounds checks.
+    if (NodeUtil.isAssignmentTarget(n)) {
+      return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
+    // Check index validity now, only if we might fold.
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Find the element at the integer index.
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
+    // Check bounds validity now, only if we might fold.
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
-    if (elem.getType() == Token.EMPTY) {
-      elem = NodeUtil.newUndefinedNode(elem);
+    Node replacementNode;
+    // Handle holes (EMPTY nodes). Replace with 'undefined'.
+    if (elem.isEmpty()) { // Use isEmpty() check for EMPTY nodes
+      replacementNode = NodeUtil.newUndefinedNode(elem); // Create a new 'undefined' node
     } else {
+      // Detach the element node from the array literal.
       left.removeChild(elem);
+      replacementNode = elem; // Use the original element node.
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM node with the replacement node.
+    parent.replaceChild(n, replacementNode);
     reportCodeChange();
-    return elem;
+
+    // Return the node that replaced the original GETELEM node.
+    return replacementNode;
   }
\ No newline at end of file
