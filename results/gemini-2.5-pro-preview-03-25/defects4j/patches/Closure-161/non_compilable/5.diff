diff --git a/tmp/cca65f69-df65-489a-b6c9-d2c3d2baec31_buggy.java b/tmp/e49d70d1-3e96-4acc-a6e0-8ff3103a4572_fixed.java
index 1303a19..f61041c 100644
--- a/tmp/cca65f69-df65-489a-b6c9-d2c3d2baec31_buggy.java
+++ b/tmp/e49d70d1-3e96-4acc-a6e0-8ff3103a4572_fixed.java
@@ -1,45 +1,72 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
+    // or "[][0] = 1;". Let the runtime handle errors.
+    if (NodeUtil.isLValue(n)) {
+      return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
+    // Check for floating point indices, or indices that are too large
+    // We don't handle negative indices because they are always invalid.
+    // Note: maybe we should handle Number.MAX_VALUE, Number.MIN_VALUE,
+    // and +/-Infinity, but Closure doesn't report errors in those cases.
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Fetch the element
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
+    // Element is not found, attempt to fold to undefined
     if (elem == null) {
+      // We can't fold if the index is clearly out of bounds,
+      // because we would be changing the runtime behavior of the program.
+      // JS runtimes will throw an error in this case.
+      int knownLength = left.getChildCount();
+      if (intIndex >= knownLength) {
+          // Report error for known out-of-bounds access, but don't fold.
+          // The runtime error should be preserved.
+          // The test case testIssue522 fails because this error was reported
+          // for an L-value, which is now handled by the isLValue check above.
+          // For R-values like `var x = [][1];`, reporting the error is appropriate.
           error(INDEX_OUT_OF_BOUNDS_ERROR, right);
           return n;
       }
+      // It is not possible to determine the element, maybe there are side effects
+      // in the array literal. Don't fold it.
+      return n;
+    }
 
-    if (elem.getType() == Token.EMPTY) {
+    // If the element is empty, replace it with undefined.
+    if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
-      left.removeChild(elem);
+      // Otherwise, clone the element and replace the GETELEM node with it.
+      // Cloning is necessary because the element node belongs to the array literal.
+      elem = elem.cloneNode();
     }
 
-    // Replace the entire GETELEM with the value
+    // Replace the entire GETELEM with the element.
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
