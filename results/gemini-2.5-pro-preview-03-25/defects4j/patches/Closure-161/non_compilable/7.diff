diff --git a/tmp/cba30e5b-8110-4d87-990a-1f8f28bee34d_buggy.java b/tmp/e270b3d0-6f4a-4591-9ec0-15f0be128beb_fixed.java
index 1303a19..e9bfb2c 100644
--- a/tmp/cba30e5b-8110-4d87-990a-1f8f28bee34d_buggy.java
+++ b/tmp/e270b3d0-6f4a-4591-9ec0-15f0be128beb_fixed.java
@@ -1,45 +1,74 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
+    //    "[][0] += 1" or "[][0] = 1"
+    // The assignment target shouldn't be folded.
+    if (parent != null && NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {
+      return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
-    if (intIndex != index) {
-      error(INVALID_GETELEM_INDEX_ERROR, right);
-      return n;
-    }
-
-    if (intIndex < 0) {
+    // Check for non-integer indices, or indices that cannot be accurately
+    // represented as integers.
+    if (intIndex != index || index < 0) {
+      // We can't fold non-integer indices or negative indices.
+      // While JavaScript would coerce these, this optimization doesn't attempt
+      // to replicate that behavior. A negative index is always an error.
+      // A non-integer index might be technically valid in JS for custom objects
+      // behaving like arrays, but for array literals, it doesn't make sense to fold.
+      // Let's report the negative index error, but simply bail on non-integer indices.
+      if (index < 0) {
           error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+      }
+      // Bailing out for non-integer indices without error is safer.
       return n;
     }
 
+    // Ensure the index is within the valid range for an integer. Although negative
+    // indices are checked above, very large positive indices might exceed
+    // Integer.MAX_VALUE after casting, potentially wrapping around to negative.
+    // However, the loop condition `i < intIndex` handles large positive values implicitly.
+    // We primarily need to handle negative indices which are explicitly checked.
+
     Node elem = left.getFirstChild();
+    // Search for the intIndex-th element.
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
+      // Index is out of bounds
+      // We report the error here because this access is not the target
+      // of an assignment (checked earlier), so evaluating it would indeed
+      // result in 'undefined' or potentially an error in stricter contexts,
+      // but folding to 'undefined' requires care.
+      // For constant folding, reporting the out-of-bounds condition is appropriate.
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
+      return n; // Do not fold if index is out of bounds.
     }
 
-    if (elem.getType() == Token.EMPTY) {
-      elem = NodeUtil.newUndefinedNode(elem);
+    // Handle holes in the array ([ ,, 2 ][1]). Fold to void 0.
+    Node replacementNode;
+    if (elem.isEmpty()) { // Check specifically for EMPTY node (array hole)
+      replacementNode = NodeUtil.newUndefinedNode(elem);
     } else {
+      // Clone the element node to avoid issues if it's used elsewhere,
+      // though typically elements of a literal array are unique nodes.
+      // Detach the original element from the ARRAYLIT parent.
       left.removeChild(elem);
+      replacementNode = elem;
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM expression with the fetched element's value.
+    n.replaceWith(replacementNode);
     reportCodeChange();
-    return elem;
+    return replacementNode;
   }
\ No newline at end of file
