diff --git a/tmp/b886a7e6-b6e3-4bf7-9e3a-a136d61b44a1_buggy.java b/tmp/5f31e9c1-ccc9-4455-b924-459a6021e41c_fixed.java
index 1303a19..934f7f9 100644
--- a/tmp/b886a7e6-b6e3-4bf7-9e3a-a136d61b44a1_buggy.java
+++ b/tmp/5f31e9c1-ccc9-4455-b924-459a6021e41c_fixed.java
@@ -1,45 +1,58 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
+    // Don't fold if this is potentially an LValue:
+    //   "[][0] = 1" shouldn't become "undefined = 1"
+    //   "delete [][0]" shouldn't become "delete undefined"
+    if (NodeUtil.isLValue(n)) {
+      return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
+      // arrays, or strings to index into array methods. Non-numeric indices
+      // are generally not foldable.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
+
+    // Check for invalid indices (non-integer or negative). Report errors for these.
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
-
     if (intIndex < 0) {
+      // Negative indices are explicitly out of bounds.
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Find the element at the specified index.
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
-    if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    if (elem.getType() == Token.EMPTY) {
-      elem = NodeUtil.newUndefinedNode(elem);
+    Node replacement;
+    // If the index is out of bounds (elem is null) or points to an array hole (EMPTY),
+    // the result of the access is 'undefined'.
+    if (elem == null || elem.getType() == Token.EMPTY) {
+      // Create a new VOID node (representing undefined) with source info from the GETELEM node.
+      replacement = NodeUtil.newUndefinedNode(n);
     } else {
+      // The element exists and is not a hole. Detach it from the array literal.
       left.removeChild(elem);
+      // The replacement is the element itself.
+      replacement = elem;
     }
 
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    // Replace the entire GETELEM node (n) with the replacement node (either the element or undefined).
+    parent.replaceChild(n, replacement);
     reportCodeChange();
-    return elem;
+    // Return the replacement node, as it's now part of the AST.
+    return replacement;
   }
\ No newline at end of file
