diff --git a/tmp/014340f6-d814-4b38-88c8-bcff5f838c43_buggy.java b/tmp/0be33ea8-5f20-4260-9281-bf0123265620_fixed.java
index 1303a19..45ac536 100644
--- a/tmp/014340f6-d814-4b38-88c8-bcff5f838c43_buggy.java
+++ b/tmp/0be33ea8-5f20-4260-9281-bf0123265620_fixed.java
@@ -1,45 +1,55 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
-    Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
-
+    // Ensure left is an ARRAYLIT and right is a NUMBER index.
+    // Caller (visitGetElem) ensures left is ARRAYLIT.
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
+    // Bail out if the array access is used as an LValue. We could be assigning
+    // to an index past the end of the array, which is valid in JS, but
+    // the array literal is immutable here, so we can't fold it.
+    // e.g. "[][0] = 1", "[1,2][2] = 3", or "([][0])++"
+    if (NodeUtil.isLValue(n)) {
+      return n;
+    }
+
     double index = right.getDouble();
     int intIndex = (int) index;
+
+    // Check the index is a non-negative integer.
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
-      return n;
+      return n; // Do not fold invalid index access.
     }
-
+    // Negative index is also invalid, should report error and not fold.
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Search for the intIndex-th child of the ARRAYLIT.
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
-    if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
+    // If the index is out of bounds (elem is null) or the element is EMPTY (a hole),
+    // the result of the array access is 'undefined'. Fold to a VOID node.
+    if (elem == null || elem.getType() == Token.EMPTY) {
+      // Use the original node 'n' for source information, as 'elem' could be null.
+      Node undefined = NodeUtil.newUndefinedNode(n);
+      n.getParent().replaceChild(n, undefined);
+      reportCodeChange();
+      return undefined;
     }
 
-    if (elem.getType() == Token.EMPTY) {
-      elem = NodeUtil.newUndefinedNode(elem);
-    } else {
+    // Otherwise, the element is a valid node. Detach it from the ARRAYLIT.
     left.removeChild(elem);
-    }
 
-    // Replace the entire GETELEM with the value
+    // Replace the GETELEM node with the element itself.
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
-    return elem;
+    return elem; // Return the element node that replaced n.
   }
\ No newline at end of file
