diff --git a/tmp/1b236b19-29e5-45e8-a1ca-02e92650cea7_buggy.java b/tmp/d43ce019-aecf-404a-9208-25d34ff14f6e_fixed.java
index c6b65da..74e8c4c 100644
--- a/tmp/1b236b19-29e5-45e8-a1ca-02e92650cea7_buggy.java
+++ b/tmp/d43ce019-aecf-404a-9208-25d34ff14f6e_fixed.java
@@ -1,25 +1,41 @@
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
     /**
      * Returns the options with a long name starting with the name specified.
      *
      * @param opt the partial name of the option
      * @return the options matching the partial name specified, or an empty list if none matches
      * @since 1.3
      */
     public List<String> getMatchingOptions(String opt)
     {
         opt = Util.stripLeadingHyphens(opt);
 
         List<String> matchingOpts = new ArrayList<String>();
 
-        // for a perfect match return the single option only
+        // Find all long options starting with opt
+        if (longOpts.keySet().isEmpty())
+        {
+             return Collections.emptyList();
+        }
 
         for (String longOpt : longOpts.keySet())
         {
             if (longOpt.startsWith(opt))
             {
                 matchingOpts.add(longOpt);
             }
         }
 
+        // Check if the exact option is matched in the list
+        // If it is, we prefer the exact match to avoid ambiguity
+        // (e.g. if "prefix" and "prefixplusplus" are options and "prefix" is given)
+        if (matchingOpts.size() > 1 && matchingOpts.contains(opt))
+        {
+             return Collections.singletonList(opt);
+        }
+
         return matchingOpts;
     }
\ No newline at end of file
