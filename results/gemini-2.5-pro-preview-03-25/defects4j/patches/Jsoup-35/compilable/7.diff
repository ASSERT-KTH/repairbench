diff --git a/tmp/b5d0cad5-c407-4f23-8e15-85f049f55af9_buggy.java b/tmp/cb2d5c61-f537-4795-ba84-264da141e37d_fixed.java
index bbd32ae..f36cf29 100644
--- a/tmp/b5d0cad5-c407-4f23-8e15-85f049f55af9_buggy.java
+++ b/tmp/cb2d5c61-f537-4795-ba84-264da141e37d_fixed.java
@@ -1,517 +1,593 @@
         boolean process(Token t, HtmlTreeBuilder tb) {
             switch (t.type) {
                 case Character: {
                     Token.Character c = t.asCharacter();
                     if (c.getData().equals(nullString)) {
                         // todo confirm that check
                         tb.error(this);
                         return false;
                     } else if (isWhitespace(c)) {
                         tb.reconstructFormattingElements();
                         tb.insert(c);
                     } else {
                         tb.reconstructFormattingElements();
                         tb.insert(c);
                         tb.framesetOk(false);
                     }
                     break;
                 }
                 case Comment: {
                     tb.insert(t.asComment());
                     break;
                 }
                 case Doctype: {
                     tb.error(this);
                     return false;
                 }
                 case StartTag:
                     Token.StartTag startTag = t.asStartTag();
                     String name = startTag.name();
                     if (name.equals("html")) {
                         tb.error(this);
                         // merge attributes onto real html
                         Element html = tb.getStack().getFirst();
                         for (Attribute attribute : startTag.getAttributes()) {
                             if (!html.hasAttr(attribute.getKey()))
                                 html.attributes().put(attribute);
                         }
                     } else if (StringUtil.in(name, "base", "basefont", "bgsound", "command", "link", "meta", "noframes", "script", "style", "title")) {
                         return tb.process(t, InHead);
                     } else if (name.equals("body")) {
                         tb.error(this);
                         LinkedList<Element> stack = tb.getStack();
                         if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals("body"))) {
                             // only in fragment case
                             return false; // ignore
                         } else {
                             tb.framesetOk(false);
                             Element body = stack.get(1);
                             for (Attribute attribute : startTag.getAttributes()) {
                                 if (!body.hasAttr(attribute.getKey()))
                                     body.attributes().put(attribute);
                             }
                         }
                     } else if (name.equals("frameset")) {
                         tb.error(this);
                         LinkedList<Element> stack = tb.getStack();
                         if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals("body"))) {
                             // only in fragment case
                             return false; // ignore
                         } else if (!tb.framesetOk()) {
                             return false; // ignore frameset
                         } else {
                             Element second = stack.get(1);
                             if (second.parent() != null)
                                 second.remove();
                             // pop up to html element
                             while (stack.size() > 1)
                                 stack.removeLast();
                             tb.insert(startTag);
                             tb.transition(InFrameset);
                         }
                     } else if (StringUtil.in(name,
                             "address", "article", "aside", "blockquote", "center", "details", "dir", "div", "dl",
                             "fieldset", "figcaption", "figure", "footer", "header", "hgroup", "menu", "nav", "ol",
                             "p", "section", "summary", "ul")) {
                         if (tb.inButtonScope("p")) {
                             tb.process(new Token.EndTag("p"));
                         }
                         tb.insert(startTag);
                     } else if (StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {
                         if (tb.inButtonScope("p")) {
                             tb.process(new Token.EndTag("p"));
                         }
                         if (StringUtil.in(tb.currentElement().nodeName(), "h1", "h2", "h3", "h4", "h5", "h6")) {
                             tb.error(this);
                             tb.pop();
                         }
                         tb.insert(startTag);
                     } else if (StringUtil.in(name, "pre", "listing")) {
                         if (tb.inButtonScope("p")) {
                             tb.process(new Token.EndTag("p"));
                         }
                         tb.insert(startTag);
                         // todo: ignore LF if next token
                         tb.framesetOk(false);
                     } else if (name.equals("form")) {
                         if (tb.getFormElement() != null) {
                             tb.error(this);
                             return false;
                         }
                         if (tb.inButtonScope("p")) {
                             tb.process(new Token.EndTag("p"));
                         }
                         tb.insertForm(startTag, true);
                     } else if (name.equals("li")) {
                         tb.framesetOk(false);
                         LinkedList<Element> stack = tb.getStack();
                         for (int i = stack.size() - 1; i > 0; i--) {
                             Element el = stack.get(i);
                             if (el.nodeName().equals("li")) {
                                 tb.process(new Token.EndTag("li"));
                                 break;
                             }
                             if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), "address", "div", "p"))
                                 break;
                         }
                         if (tb.inButtonScope("p")) {
                             tb.process(new Token.EndTag("p"));
                         }
                         tb.insert(startTag);
                     } else if (StringUtil.in(name, "dd", "dt")) {
                         tb.framesetOk(false);
                         LinkedList<Element> stack = tb.getStack();
                         for (int i = stack.size() - 1; i > 0; i--) {
                             Element el = stack.get(i);
                             if (StringUtil.in(el.nodeName(), "dd", "dt")) {
                                 tb.process(new Token.EndTag(el.nodeName()));
                                 break;
                             }
                             if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), "address", "div", "p"))
                                 break;
                         }
                         if (tb.inButtonScope("p")) {
                             tb.process(new Token.EndTag("p"));
                         }
                         tb.insert(startTag);
                     } else if (name.equals("plaintext")) {
                         if (tb.inButtonScope("p")) {
                             tb.process(new Token.EndTag("p"));
                         }
                         tb.insert(startTag);
                         tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out
                     } else if (name.equals("button")) {
                         if (tb.inButtonScope("button")) {
                             // close and reprocess
                             tb.error(this);
                             tb.process(new Token.EndTag("button"));
                             tb.process(startTag);
                         } else {
                             tb.reconstructFormattingElements();
                             tb.insert(startTag);
                             tb.framesetOk(false);
                         }
                     } else if (name.equals("a")) {
                         if (tb.getActiveFormattingElement("a") != null) {
                             tb.error(this);
                             tb.process(new Token.EndTag("a"));
 
                             // still on stack?
                             Element remainingA = tb.getFromStack("a");
                             if (remainingA != null) {
                                 tb.removeFromActiveFormattingElements(remainingA);
                                 tb.removeFromStack(remainingA);
                             }
                         }
                         tb.reconstructFormattingElements();
                         Element a = tb.insert(startTag);
                         tb.pushActiveFormattingElements(a);
                     } else if (StringUtil.in(name,
                             "b", "big", "code", "em", "font", "i", "s", "small", "strike", "strong", "tt", "u")) {
                         tb.reconstructFormattingElements();
                         Element el = tb.insert(startTag);
                         tb.pushActiveFormattingElements(el);
                     } else if (name.equals("nobr")) {
                         tb.reconstructFormattingElements();
                         if (tb.inScope("nobr")) {
                             tb.error(this);
                             tb.process(new Token.EndTag("nobr"));
                             tb.reconstructFormattingElements();
                         }
                         Element el = tb.insert(startTag);
                         tb.pushActiveFormattingElements(el);
                     } else if (StringUtil.in(name, "applet", "marquee", "object")) {
                         tb.reconstructFormattingElements();
                         tb.insert(startTag);
                         tb.insertMarkerToFormattingElements();
                         tb.framesetOk(false);
                     } else if (name.equals("table")) {
                         if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope("p")) {
                             tb.process(new Token.EndTag("p"));
                         }
                         tb.insert(startTag);
                         tb.framesetOk(false);
                         tb.transition(InTable);
                     } else if (StringUtil.in(name, "area", "br", "embed", "img", "keygen", "wbr")) {
                         tb.reconstructFormattingElements();
                         tb.insertEmpty(startTag);
                         tb.framesetOk(false);
                     } else if (name.equals("input")) {
                         tb.reconstructFormattingElements();
                         Element el = tb.insertEmpty(startTag);
                         if (!el.attr("type").equalsIgnoreCase("hidden"))
                             tb.framesetOk(false);
                     } else if (StringUtil.in(name, "param", "source", "track")) {
                         tb.insertEmpty(startTag);
                     } else if (name.equals("hr")) {
                         if (tb.inButtonScope("p")) {
                             tb.process(new Token.EndTag("p"));
                         }
                         tb.insertEmpty(startTag);
                         tb.framesetOk(false);
                     } else if (name.equals("image")) {
                         // we're not supposed to ask.
                         startTag.name("img");
                         return tb.process(startTag);
                     } else if (name.equals("isindex")) {
                         // how much do we care about the early 90s?
                         tb.error(this);
                         if (tb.getFormElement() != null)
                             return false;
 
                         tb.tokeniser.acknowledgeSelfClosingFlag();
                         tb.process(new Token.StartTag("form"));
                         if (startTag.attributes.hasKey("action")) {
                             Element form = tb.getFormElement();
                             form.attr("action", startTag.attributes.get("action"));
                         }
                         tb.process(new Token.StartTag("hr"));
                         tb.process(new Token.StartTag("label"));
                         // hope you like english.
                         String prompt = startTag.attributes.hasKey("prompt") ?
                                 startTag.attributes.get("prompt") :
                                 "This is a searchable index. Enter search keywords: ";
 
                         tb.process(new Token.Character(prompt));
 
                         // input
                         Attributes inputAttribs = new Attributes();
                         for (Attribute attr : startTag.attributes) {
                             if (!StringUtil.in(attr.getKey(), "name", "action", "prompt"))
                                 inputAttribs.put(attr);
                         }
                         inputAttribs.put("name", "isindex");
                         tb.process(new Token.StartTag("input", inputAttribs));
                         tb.process(new Token.EndTag("label"));
                         tb.process(new Token.StartTag("hr"));
                         tb.process(new Token.EndTag("form"));
                     } else if (name.equals("textarea")) {
                         tb.insert(startTag);
                         // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
                         tb.tokeniser.transition(TokeniserState.Rcdata);
                         tb.markInsertionMode();
                         tb.framesetOk(false);
                         tb.transition(Text);
                     } else if (name.equals("xmp")) {
                         if (tb.inButtonScope("p")) {
                             tb.process(new Token.EndTag("p"));
                         }
                         tb.reconstructFormattingElements();
                         tb.framesetOk(false);
                         handleRawtext(startTag, tb);
                     } else if (name.equals("iframe")) {
                         tb.framesetOk(false);
                         handleRawtext(startTag, tb);
                     } else if (name.equals("noembed")) {
                         // also handle noscript if script enabled
                         handleRawtext(startTag, tb);
                     } else if (name.equals("select")) {
                         tb.reconstructFormattingElements();
                         tb.insert(startTag);
                         tb.framesetOk(false);
 
                         HtmlTreeBuilderState state = tb.state();
                         if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))
                             tb.transition(InSelectInTable);
                         else
                             tb.transition(InSelect);
                     } else if (StringUtil.in("optgroup", "option")) {
                         if (tb.currentElement().nodeName().equals("option"))
                             tb.process(new Token.EndTag("option"));
                         tb.reconstructFormattingElements();
                         tb.insert(startTag);
                     } else if (StringUtil.in("rp", "rt")) {
                         if (tb.inScope("ruby")) {
                             tb.generateImpliedEndTags();
                             if (!tb.currentElement().nodeName().equals("ruby")) {
                                 tb.error(this);
                                 tb.popStackToBefore("ruby"); // i.e. close up to but not include name
                             }
                             tb.insert(startTag);
                         }
                     } else if (name.equals("math")) {
                         tb.reconstructFormattingElements();
                         // todo: handle A start tag whose tag name is "math" (i.e. foreign, mathml)
                         tb.insert(startTag);
                         tb.tokeniser.acknowledgeSelfClosingFlag();
                     } else if (name.equals("svg")) {
                         tb.reconstructFormattingElements();
                         // todo: handle A start tag whose tag name is "svg" (xlink, svg)
                         tb.insert(startTag);
                         tb.tokeniser.acknowledgeSelfClosingFlag();
                     } else if (StringUtil.in(name,
                             "caption", "col", "colgroup", "frame", "head", "tbody", "td", "tfoot", "th", "thead", "tr")) {
                         tb.error(this);
                         return false;
                     } else {
                         tb.reconstructFormattingElements();
                         tb.insert(startTag);
                     }
                     break;
 
                 case EndTag:
                     Token.EndTag endTag = t.asEndTag();
                     name = endTag.name();
                     if (name.equals("body")) {
                         if (!tb.inScope("body")) {
                             tb.error(this);
                             return false;
                         } else {
                             // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html
                             tb.transition(AfterBody);
                         }
                     } else if (name.equals("html")) {
                         boolean notIgnored = tb.process(new Token.EndTag("body"));
                         if (notIgnored)
                             return tb.process(endTag);
                     } else if (StringUtil.in(name,
                             "address", "article", "aside", "blockquote", "button", "center", "details", "dir", "div",
                             "dl", "fieldset", "figcaption", "figure", "footer", "header", "hgroup", "listing", "menu",
                             "nav", "ol", "pre", "section", "summary", "ul")) {
                         // todo: refactor these lookups
                         if (!tb.inScope(name)) {
                             // nothing to close
                             tb.error(this);
                             return false;
                         } else {
                             tb.generateImpliedEndTags();
                             if (!tb.currentElement().nodeName().equals(name))
                                 tb.error(this);
                             tb.popStackToClose(name);
                         }
                     } else if (name.equals("form")) {
                         Element currentForm = tb.getFormElement();
                         tb.setFormElement(null);
                         if (currentForm == null || !tb.inScope(name)) {
                             tb.error(this);
                             return false;
                         } else {
                             tb.generateImpliedEndTags();
                             if (!tb.currentElement().nodeName().equals(name))
                                 tb.error(this);
                             // remove currentForm from stack. will shift anything under up.
                             tb.removeFromStack(currentForm);
                         }
                     } else if (name.equals("p")) {
                         if (!tb.inButtonScope(name)) {
                             tb.error(this);
                             tb.process(new Token.StartTag(name)); // if no p to close, creates an empty <p></p>
                             return tb.process(endTag);
                         } else {
                             tb.generateImpliedEndTags(name);
                             if (!tb.currentElement().nodeName().equals(name))
                                 tb.error(this);
                             tb.popStackToClose(name);
                         }
                     } else if (name.equals("li")) {
                         if (!tb.inListItemScope(name)) {
                             tb.error(this);
                             return false;
                         } else {
                             tb.generateImpliedEndTags(name);
                             if (!tb.currentElement().nodeName().equals(name))
                                 tb.error(this);
                             tb.popStackToClose(name);
                         }
                     } else if (StringUtil.in(name, "dd", "dt")) {
                         if (!tb.inScope(name)) {
                             tb.error(this);
                             return false;
                         } else {
                             tb.generateImpliedEndTags(name);
                             if (!tb.currentElement().nodeName().equals(name))
                                 tb.error(this);
                             tb.popStackToClose(name);
                         }
                     } else if (StringUtil.in(name, "h1", "h2", "h3", "h4", "h5", "h6")) {
                         if (!tb.inScope(new String[]{"h1", "h2", "h3", "h4", "h5", "h6"})) {
                             tb.error(this);
                             return false;
                         } else {
                             tb.generateImpliedEndTags(name);
                             if (!tb.currentElement().nodeName().equals(name))
                                 tb.error(this);
                             tb.popStackToClose("h1", "h2", "h3", "h4", "h5", "h6");
                         }
                     } else if (name.equals("sarcasm")) {
                         // *sigh*
                         return anyOtherEndTag(t, tb);
                     } else if (StringUtil.in(name,
                             "a", "b", "big", "code", "em", "font", "i", "nobr", "s", "small", "strike", "strong", "tt", "u")) {
                         // Adoption Agency Algorithm.
                         OUTER:
-                        for (int i = 0; i < 8; i++) {
-                            Element formatEl = tb.getActiveFormattingElement(name);
-                            if (formatEl == null)
-                                return anyOtherEndTag(t, tb);
-                            else if (!tb.onStack(formatEl)) {
+                        for (int i = 0; i < 8; i++) { // Run algorithm up to 8 times
+                            Element formatEl = tb.getActiveFormattingElement(name); // Step 1: Find element
+                            if (formatEl == null) // Not in active formatting elements
+                                return anyOtherEndTag(t, tb); // Spec: "nothing to be done" / treat as any other tag
+
+                            if (!tb.onStack(formatEl)) { // Step 2a: Not on stack of open elements
+                                tb.error(this);
+                                tb.removeFromActiveFormattingElements(formatEl); // Remove from active list
+                                return true; // Abort this algorithm iteration
+                            }
+
+                            if (!tb.inScope(formatEl.nodeName())) { // Step 2b: Not in scope
+                                tb.error(this);
+                                return false; // Ignore the end tag
+                            }
+
+                            // Element is active, on stack, and in scope
+                            if (tb.currentElement() != formatEl) // Step 3: Check if not current node
+                                tb.error(this); // Log error, but continue algorithm
+
+                            Element furthestBlock = null; // Step 4: Find furthest block
+                            int formatElPos = tb.getStack().indexOf(formatEl);
+                            if (formatElPos == -1) { // Should not happen given onStack check, but be defensive
                                 tb.error(this);
                                 tb.removeFromActiveFormattingElements(formatEl);
-                                return true;
-                            } else if (!tb.inScope(formatEl.nodeName())) {
-                                tb.error(this);
-                                return false;
-                            } else if (tb.currentElement() != formatEl)
-                                tb.error(this);
+                                return true; // Abort
+                            }
 
-                            Element furthestBlock = null;
+                            // Search *below* formatEl (towards root, lower indices) for the topmost special element
+                            for (int pos = formatElPos - 1; pos >= 0; pos--) {
+                                Element candidate = tb.getStack().get(pos);
+                                if (tb.isSpecial(candidate)) {
+                                    furthestBlock = candidate;
+                                    break;
+                                }
+                            }
+
+                            if (furthestBlock == null) { // Step 5: No furthest block found
+                                tb.popStackToClose(formatEl.nodeName()); // Pop up to and including formatEl
+                                tb.removeFromActiveFormattingElements(formatEl); // Remove from active list
+                                return true; // Abort algorithm
+                            }
+
+                            // Step 6: Find common ancestor (element immediately *above* formatEl in stack)
                             Element commonAncestor = null;
-                            boolean seenFormattingElement = false;
-                            LinkedList<Element> stack = tb.getStack();
-                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents
-                            // run-aways
-                            for (int si = 0; si < stack.size() && si < 64; si++) {
-                                Element el = stack.get(si);
-                                if (el == formatEl) {
-                                    commonAncestor = stack.get(si - 1);
-                                    seenFormattingElement = true;
-                                } else if (seenFormattingElement && tb.isSpecial(el)) {
-                                    furthestBlock = el;
-                                    break;
-                                }
-                            }
-                            if (furthestBlock == null) {
-                                tb.popStackToClose(formatEl.nodeName());
-                                tb.removeFromActiveFormattingElements(formatEl);
-                                return true;
+                            // Check if formatEl is not already the top element
+                            if (formatElPos + 1 < tb.getStack().size()) {
+                                 commonAncestor = tb.getStack().get(formatElPos + 1);
+                            } else {
+                                // This case implies formatEl is the current element, which should mean
+                                // furthestBlock was null, leading to the simple pop case above.
+                                // If we reach here, it might be an unexpected state.
+                                // Let the algorithm continue; step 9 handles commonAncestor potentially being null.
                             }
 
-                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.
-                            // does that mean: int pos of format el in list?
-                            Element node = furthestBlock;
+
+                            // Step 7: Bookmark (not explicitly implemented, relies on list/stack ops)
+
+                            // Step 8: Node manipulation loop
+                            Element node = furthestBlock; // Start just below furthest block
                             Element lastNode = furthestBlock;
                             INNER:
                             for (int j = 0; j < 3; j++) {
-                                if (tb.onStack(node))
-                                    node = tb.aboveOnStack(node);
-                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check
+                                // 8.4: Find node immediately *above* the current `node` in stack
+                                int nodePos = tb.getStack().indexOf(node);
+                                // Check if node is on stack and not the top element
+                                if (nodePos == -1 || nodePos + 1 >= tb.getStack().size()) {
+                                     break INNER; // Cannot go further up or node missing
+                                }
+                                Element nextNode = tb.getStack().get(nodePos + 1);
+                                node = nextNode;
+
+                                // 8.5: If node is not an active formatting element
+                                if (!tb.isInActiveFormattingElements(node)) {
                                     tb.removeFromStack(node);
-                                    continue INNER;
-                                } else if (node == formatEl)
+                                    // Continue loop processing from the same relative position.
+                                    // The counter `j` increments, but we effectively skip processing this node.
+                                    // The `node` variable is already updated for the next iteration or break.
+                                    // This GOTO logic is tricky; this removal might be sufficient.
+                                    continue INNER; // Go to next iteration of INNER loop
+                                }
+
+                                // 8.6: If node is the formatting element itself
+                                if (node == formatEl) {
                                     break INNER;
+                                }
 
+                                // 8.7: Create replacement element
                                 Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());
+                                replacement.attributes().addAll(node.attributes()); // Copy attributes
+
+                                // Replace node with replacement in active list and stack
                                 tb.replaceActiveFormattingElement(node, replacement);
                                 tb.replaceOnStack(node, replacement);
-                                node = replacement;
+                                node = replacement; // Use the replacement going forward
 
-                                if (lastNode == furthestBlock) {
-                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.
-                                    // not getting how this bookmark both straddles the element above, but is inbetween here...
-                                }
+                                // 8.8: Bookmark (ignored)
+
+                                // 8.9: Insert lastNode into node
                                 if (lastNode.parent() != null)
                                     lastNode.remove();
                                 node.appendChild(lastNode);
 
+                                // 8.10: Update lastNode to the current node (which might be a replacement)
                                 lastNode = node;
-                            }
 
-                            if (StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {
-                                if (lastNode.parent() != null)
+                                // 8.11: Loop continues (controlled by `j`)
+                            } // END INNER LOOP (Step 8)
+
+                            // Step 9: Insert last node into appropriate place
+                            if (lastNode.parent() != null) // Detach lastNode first
                                 lastNode.remove();
+
+                            // Determine insertion point based on commonAncestor
+                            if (commonAncestor != null && StringUtil.in(commonAncestor.nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {
                                 tb.insertInFosterParent(lastNode);
-                            } else {
-                                if (lastNode.parent() != null)
-                                    lastNode.remove();
+                            } else if (commonAncestor != null) {
                                 commonAncestor.appendChild(lastNode);
+                            } else {
+                                // If commonAncestor was null (e.g., formatEl was the current element initially)
+                                // The insertion point should be the parent of formatEl according to spec interpretation.
+                                // However, the original code might imply foster parenting as default?
+                                // Fallback: append to parent of formatEl. If no parent, error.
+                                Element parent = formatEl.parent();
+                                if (parent != null) parent.appendChild(lastNode);
+                                else tb.error(this); // Error: Cannot determine insertion point
                             }
 
+
+                            // Step 10: Create adopter element for formatEl
                             Element adopter = new Element(formatEl.tag(), tb.getBaseUri());
+                            adopter.attributes().addAll(formatEl.attributes()); // Copy attributes
+
+                            // Step 11: Move children from furthest block to adopter
+                            // Use toArray to avoid ConcurrentModificationException when reparenting
                             Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);
                             for (Node childNode : childNodes) {
-                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.
+                                adopter.appendChild(childNode); // appendChild reparents nodes
                             }
+
+                            // Step 12: Append adopter to furthest block
                             furthestBlock.appendChild(adopter);
+
+                            // Step 13: Remove original formatEl from active list, insert adopter (approximate bookmark)
                             tb.removeFromActiveFormattingElements(formatEl);
-                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.
+                            // Insert adopter at the position of the bookmark. Implementation detail varies.
+                            // Inserting based on stack position (below furthestBlock) might be a close approximation.
+                            // The original code just pushed; let's stick with that for simplicity unless further issues arise.
+                            tb.pushActiveFormattingElements(adopter);
+
+                            // Step 14: Remove original formatEl from stack, insert adopter below furthest block
                             tb.removeFromStack(formatEl);
-                            tb.insertOnStackAfter(furthestBlock, adopter);
-                        }
+                            tb.insertOnStackAfter(furthestBlock, adopter); // Insert adopter into stack
+
+                            // Algorithm finished for this instance; OUTER loop continues for potential nested cases.
+                        } // END OUTER LOOP
+
                     } else if (StringUtil.in(name, "applet", "marquee", "object")) {
-                        if (!tb.inScope("name")) {
-                            if (!tb.inScope(name)) {
+                        // Note: 'inScope("name")' was a typo in original code, should be inScope(name)
+                        if (!tb.inScope(name)) { // Corrected scope check
+                            // If the element is not in scope, but there is an active formatting element
+                            // marker for it, it implies misnested content that should be closed.
+                            // However, the spec for these elements seems to only require inScope check.
+                            // Let's follow the original logic structure which checks inScope(name) first.
                             tb.error(this);
-                                return false;
+                            return false; // Ignore tag if not in scope
                         }
+                        // Element is in scope
                         tb.generateImpliedEndTags();
-                            if (!tb.currentElement().nodeName().equals(name))
+                        if (!tb.currentElement().nodeName().equals(name)) {
                             tb.error(this);
-                            tb.popStackToClose(name);
-                            tb.clearFormattingElementsToLastMarker();
                         }
+                        tb.popStackToClose(name); // Pop up to and including the element
+                        tb.clearFormattingElementsToLastMarker(); // Clear active formatting elements up to the marker inserted by start tag
+
                     } else if (name.equals("br")) {
                         tb.error(this);
                         tb.process(new Token.StartTag("br"));
                         return false;
                     } else {
                         return anyOtherEndTag(t, tb);
                     }
 
                     break;
                 case EOF:
                     // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html
                     // stop parsing
                     break;
             }
             return true;
         }
\ No newline at end of file
