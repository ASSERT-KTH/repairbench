diff --git a/tmp/f65e6af4-2611-4c7a-9866-774399d601b0_buggy.java b/tmp/1d460c27-2052-443a-b259-f830bd68cf22_fixed.java
index b4af58a..69d942a 100644
--- a/tmp/f65e6af4-2611-4c7a-9866-774399d601b0_buggy.java
+++ b/tmp/1d460c27-2052-443a-b259-f830bd68cf22_fixed.java
@@ -1,53 +1,75 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
         boolean emptyRange = false;
         int startIndex = getIndex(start);
         if (startIndex < 0) {
-            startIndex = -(startIndex + 1);
+            startIndex = -(startIndex + 1); // Calculate insertion point
+            // If the insertion point is the size of the list, the start period
+            // is after all the existing data points.
             if (startIndex == this.data.size()) {
                 emptyRange = true;  // start is after last data item
             }
         }
+
         int endIndex = getIndex(end);
         if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
+            endIndex = -(endIndex + 1); // this is insertion point for end
+            endIndex = endIndex - 1;    // so this is last item index <= end
         }
+        
+        // Check if the calculated end index is negative. This happens if the
+        // 'end' period is before the first data item in the series.
         if (endIndex < 0) {
             emptyRange = true;
         }
+
+        // After calculating both indices, check if the start index is actually
+        // after the end index. This can happen if the specified range falls
+        // entirely between two existing data points. It also covers the case
+        // where 'end' is before the first item (endIndex becomes -1), although
+        // that is already explicitly handled above.
+        // We only perform this check if we haven't already determined the range is empty.
+        if (!emptyRange && startIndex > endIndex) {
+             emptyRange = true;
+        }
+
+
         if (emptyRange) {
             TimeSeries copy = (TimeSeries) super.clone();
+            // Ensure the list of data items is empty
             copy.data = new java.util.ArrayList();
             return copy;
         }
         else {
+            // If we get here, we know that 0 <= startIndex <= endIndex < data.size()
+            // (or potentially startIndex = endIndex = 0 if there's only one item
+            // and it falls within the range).
             return createCopy(startIndex, endIndex);
         }
 
     }
\ No newline at end of file
