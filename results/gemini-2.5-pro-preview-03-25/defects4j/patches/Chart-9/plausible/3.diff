diff --git a/tmp/d5f5ce3f-ffe1-44e3-85cb-5d19443fa715_buggy.java b/tmp/8ca85bb9-c90b-417a-b06f-e7ca892b2ae5_fixed.java
index b4af58a..b5f3c8a 100644
--- a/tmp/d5f5ce3f-ffe1-44e3-85cb-5d19443fa715_buggy.java
+++ b/tmp/8ca85bb9-c90b-417a-b06f-e7ca892b2ae5_fixed.java
@@ -1,53 +1,67 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
         boolean emptyRange = false;
         int startIndex = getIndex(start);
         if (startIndex < 0) {
-            startIndex = -(startIndex + 1);
+            startIndex = -(startIndex + 1); // insertion point
             if (startIndex == this.data.size()) {
                 emptyRange = true;  // start is after last data item
             }
         }
         int endIndex = getIndex(end);
         if (endIndex < 0) {             // end period is not in original series
             endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
+            endIndex = endIndex - 1;    // so this is last item BEFORE end period
         }
         if (endIndex < 0) {
+             // end is before the first data item
             emptyRange = true;
         }
+
+        // If the calculated start index is after the calculated end index,
+        // the range is empty. This condition needs to be checked AFTER
+        // calculating both indices but before deciding whether to create
+        // an empty copy or call the indexed createCopy method.
+        // Note that the check on emptyRange needs to be postponed slightly.
+        if (startIndex > endIndex) {
+            emptyRange = true;
+        }
+
         if (emptyRange) {
             TimeSeries copy = (TimeSeries) super.clone();
             copy.data = new java.util.ArrayList();
             return copy;
         }
         else {
+            // At this point, we know 0 <= startIndex <= endIndex < data.size()
+            // (unless the series was initially empty, but createCopy(int, int)
+            // should handle that).
             return createCopy(startIndex, endIndex);
         }
 
     }
\ No newline at end of file
