diff --git a/tmp/72c34f42-a5fd-4d16-8c9a-d10c64679e23_buggy.java b/tmp/aaeed81a-30c4-448d-842f-4e5074e9011d_fixed.java
index b4af58a..aaf5aad 100644
--- a/tmp/72c34f42-a5fd-4d16-8c9a-d10c64679e23_buggy.java
+++ b/tmp/aaeed81a-30c4-448d-842f-4e5074e9011d_fixed.java
@@ -1,53 +1,62 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
-        boolean emptyRange = false;
+
+        // Calculate the starting index
         int startIndex = getIndex(start);
         if (startIndex < 0) {
+            // start is not in the series, find the insertion point
             startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
-            }
+            // The insertion point is the index of the first item >= start
         }
+
+        // Calculate the ending index
         int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
-        }
         if (endIndex < 0) {
-            emptyRange = true;
+            // end is not in the series, find the insertion point
+            endIndex = -(endIndex + 1);
+            // The insertion point is the index of the first item > end
+            endIndex = endIndex - 1;
+            // So this is the index of the last item <= end
         }
-        if (emptyRange) {
+
+        // Check for cases where the resulting range is empty
+        // 1. startIndex is past the end of the data
+        // 2. endIndex is before the start of the data
+        // 3. calculated startIndex is greater than calculated endIndex
+        if (startIndex >= this.data.size() || endIndex < 0 || startIndex > endIndex) {
+            // Create an empty copy
             TimeSeries copy = (TimeSeries) super.clone();
             copy.data = new java.util.ArrayList();
             return copy;
         }
         else {
+            // The range [startIndex, endIndex] is valid and non-empty
             return createCopy(startIndex, endIndex);
         }
 
     }
\ No newline at end of file
