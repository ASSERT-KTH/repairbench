diff --git a/tmp/fced0820-f2dd-4efb-9bd0-b9318980283a_buggy.java b/tmp/5bf24a8c-2956-4c1f-86f6-7ef6749a7a2d_fixed.java
index b4af58a..bf88c69 100644
--- a/tmp/fced0820-f2dd-4efb-9bd0-b9318980283a_buggy.java
+++ b/tmp/5bf24a8c-2956-4c1f-86f6-7ef6749a7a2d_fixed.java
@@ -1,53 +1,75 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
         boolean emptyRange = false;
         int startIndex = getIndex(start);
+        // startIndex is the index of the item matching start, or -(insertionPoint + 1)
         if (startIndex < 0) {
+            // start is not in the series, find the insertion point
             startIndex = -(startIndex + 1);
+            // start index is now the index of the first item >= start period
             if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
+                // start is after the last item in the series
+                emptyRange = true;
             }
         }
+        // startIndex is now the index of the first item >= start period, or data.size()
+
         int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
+        // endIndex is the index of the item matching end, or -(insertionPoint + 1)
+        if (endIndex < 0) {
+            // end is not in the series, find the insertion point
+            endIndex = -(endIndex + 1);
+            // endIndex is now the index of the first item strictly > end period
+            endIndex = endIndex - 1;
+            // endIndex is now the index of the last item <= end period
         }
+        // endIndex is now the index of the last item <= end period. Can be -1 if end is before first item.
+
         if (endIndex < 0) {
+            // end period is before the first item in the series
+            emptyRange = true;
+        }
+
+        // Check if the calculated indices result in an empty range
+        // This can happen if startIndex points after endIndex
+        // (e.g., the interval [start, end] falls between two data points)
+        if (!emptyRange && startIndex > endIndex) {
              emptyRange = true;
         }
+
         if (emptyRange) {
             TimeSeries copy = (TimeSeries) super.clone();
             copy.data = new java.util.ArrayList();
             return copy;
         }
         else {
+            // Given the checks above, we should have 0 <= startIndex <= endIndex < data.size()
             return createCopy(startIndex, endIndex);
         }
 
     }
\ No newline at end of file
