diff --git a/tmp/de2d3c50-1ba9-4863-810d-d75053643ed1_buggy.java b/tmp/7473bce7-21e4-4b2c-a08b-a3b7bcede554_fixed.java
index b4af58a..fa69a5e 100644
--- a/tmp/de2d3c50-1ba9-4863-810d-d75053643ed1_buggy.java
+++ b/tmp/7473bce7-21e4-4b2c-a08b-a3b7bcede554_fixed.java
@@ -1,53 +1,66 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
         boolean emptyRange = false;
         int startIndex = getIndex(start);
         if (startIndex < 0) {
-            startIndex = -(startIndex + 1);
+            startIndex = -(startIndex + 1); // insertion point
             if (startIndex == this.data.size()) {
                 emptyRange = true;  // start is after last data item
             }
         }
         int endIndex = getIndex(end);
         if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
+            endIndex = -(endIndex + 1); // this is insertion point (index of first item *after* end)
+            endIndex = endIndex - 1;    // so this is last item index *before or at* end period
         }
-        if (endIndex < 0) {
+        if (endIndex < 0) { // end is before the first data item
             emptyRange = true;
         }
+
+        // if the calculated start index is after the calculated end index,
+        // the range is empty
+        if (startIndex > endIndex) {
+             emptyRange = true;
+        }
+
         if (emptyRange) {
             TimeSeries copy = (TimeSeries) super.clone();
+            // Ensure the copied series has the same structure but empty data
             copy.data = new java.util.ArrayList();
+            // Optional: copy other relevant fields if necessary, super.clone()
+            // should handle primitives and immutable objects, but lists/mutable
+            // objects might need deep copying if not handled by clone() or here.
+            // Assuming super.clone() and subsequent list replacement is sufficient.
             return copy;
         }
         else {
+            // Note: createCopy(int, int) is inclusive of both start and end indices
             return createCopy(startIndex, endIndex);
         }
 
     }
\ No newline at end of file
