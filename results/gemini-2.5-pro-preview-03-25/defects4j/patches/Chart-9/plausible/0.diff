diff --git a/tmp/10357512-2504-4eeb-90aa-d048f4b31de7_buggy.java b/tmp/651edc7a-345d-4a83-bce6-e6b089624a48_fixed.java
index b4af58a..efe95b2 100644
--- a/tmp/10357512-2504-4eeb-90aa-d048f4b31de7_buggy.java
+++ b/tmp/651edc7a-345d-4a83-bce6-e6b089624a48_fixed.java
@@ -1,53 +1,74 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
         boolean emptyRange = false;
+
+        // Determine the start index
         int startIndex = getIndex(start);
         if (startIndex < 0) {
-            startIndex = -(startIndex + 1);
+            startIndex = -(startIndex + 1); // Insertion point
+            // If start is after the last data item, the range is empty
             if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
+                emptyRange = true;
             }
         }
+
+        // Determine the end index
         int endIndex = getIndex(end);
         if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
+            endIndex = -(endIndex + 1); // this is insertion point (first item AFTER end period)
+            endIndex = endIndex - 1;    // so this is last item BEFORE or AT end period
         }
+
+        // Check if the calculated range is logically empty
+        // Condition 1: The end period is before the first data item
         if (endIndex < 0) {
             emptyRange = true;
         }
+
+        // Condition 2: The start index is after the end index
+        // (occurs when the specified range contains no data points from the series)
+        // Check this only if we haven't already determined the range is empty
+        // from the start index calculation or the end index calculation.
+        if (!emptyRange && startIndex > endIndex) {
+            emptyRange = true;
+        }
+
+        // If the range is empty, create and return an empty series
         if (emptyRange) {
             TimeSeries copy = (TimeSeries) super.clone();
             copy.data = new java.util.ArrayList();
             return copy;
         }
+        // Otherwise, create a copy using the calculated indices
         else {
+            // At this point, we know:
+            // - 0 <= startIndex <= endIndex < data.size()
             return createCopy(startIndex, endIndex);
         }
 
     }
\ No newline at end of file
