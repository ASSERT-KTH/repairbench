diff --git a/tmp/cdaedc08-4968-42c3-b36d-c766b1bcdb76_buggy.java b/tmp/e9a32401-0789-49f8-a4e4-8b79c6aef0ba_fixed.java
index b4af58a..a1840b8 100644
--- a/tmp/cdaedc08-4968-42c3-b36d-c766b1bcdb76_buggy.java
+++ b/tmp/e9a32401-0789-49f8-a4e4-8b79c6aef0ba_fixed.java
@@ -1,53 +1,66 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the first time period to copy (<code>null</code> not
      *         permitted).
      * @param end  the last time period to copy (<code>null</code> not
      *         permitted).
      *
      * @return A time series containing a copy of this time series from start
      *         until end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
         throws CloneNotSupportedException {
 
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
         boolean emptyRange = false;
         int startIndex = getIndex(start);
         if (startIndex < 0) {
-            startIndex = -(startIndex + 1);
+            startIndex = -(startIndex + 1); // insertion point
             if (startIndex == this.data.size()) {
                 emptyRange = true;  // start is after last data item
             }
         }
         int endIndex = getIndex(end);
         if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
+            endIndex = -(endIndex + 1); // this is insertion point
             endIndex = endIndex - 1;    // so this is last item BEFORE end
         }
-        if (endIndex < 0) {
+        if (endIndex < 0) { // end is before first data item
             emptyRange = true;
         }
+
+        // Correct the logic for startIndex interpretation:
+        // If startIndex is the index of the *first* item *after* the start period,
+        // and endIndex is the index of the *last* item *before* the end period,
+        // then if startIndex > endIndex, the range is empty.
+        if (!emptyRange && startIndex > endIndex) {
+            emptyRange = true;
+        }
+
         if (emptyRange) {
             TimeSeries copy = (TimeSeries) super.clone();
             copy.data = new java.util.ArrayList();
             return copy;
         }
         else {
+            // If we reach here, we know that startIndex and endIndex define a
+            // valid range (possibly empty if startIndex == endIndex and the
+            // corresponding item is outside the range, but createCopy(int, int)
+            // handles that). We also know startIndex <= endIndex.
             return createCopy(startIndex, endIndex);
         }
 
     }
\ No newline at end of file
