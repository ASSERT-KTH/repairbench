diff --git a/tmp/f38591c1-0312-401c-9422-ca023f7602ce_buggy.java b/tmp/42d5f300-d25d-4b40-a5a2-51677ba5e817_fixed.java
index 851ffc2..2870fa2 100644
--- a/tmp/f38591c1-0312-401c-9422-ca023f7602ce_buggy.java
+++ b/tmp/42d5f300-d25d-4b40-a5a2-51677ba5e817_fixed.java
@@ -1,70 +1,95 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
+        // We might need to create a declaration for goog if it isn't defined.
+        // If the candidate definition is null, we know that goog isn't defined.
+        // This should be handled by the PROCESS_PROVIDES pass.
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
+        // We need to be very careful here, because the definition might be
+        // constant, and we're just referring to it.
+        // See http://b/issue?id=1809446
+        // We use the candidate definition as the replacement node,
+        // which has the correct original name associated with it.
         replacementNode = candidateDefinition;
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
+          if (assignNode.isAssign()) {
             Node nameNode = assignNode.getFirstChild();
-          if (nameNode.getType() == Token.NAME) {
+            if (nameNode.isName()) {
               // Need to convert this assign to a var declaration.
               Node valueNode = nameNode.getNext();
               assignNode.removeChild(nameNode);
               assignNode.removeChild(valueNode);
               nameNode.addChildToFront(valueNode);
               Node varNode = new Node(Token.VAR, nameNode);
-            varNode.copyInformationFrom(candidateDefinition);
+              varNode.copyInformationFromForTree(candidateDefinition);
+              if (candidateDefinition.getJSDocInfo() != null) {
+                  varNode.setJSDocInfo(candidateDefinition.getJSDocInfo());
+              } else {
+                  nameNode.setJSDocInfo(assignNode.getJSDocInfo());
+              }
               candidateDefinition.getParent().replaceChild(
                   candidateDefinition, varNode);
-            nameNode.setJSDocInfo(assignNode.getJSDocInfo());
               compiler.reportCodeChange();
               replacementNode = varNode;
             }
           }
+        }
       } else {
-        // Handle the case where there's not a duplicate definition.
+        // Handle the case where there's not a duplicate definition,
+        // or where the duplication is implicit. Create a new declaration.
         replacementNode = createDeclarationNode();
+
+        // Determine where to insert the new declaration.
         if (firstModule == minimumModule) {
-          firstNode.getParent().addChildBefore(replacementNode, firstNode);
-        } else {
-          // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
-          int indexOfDot = namespace.indexOf('.');
-          if (indexOfDot == -1) {
-            // Any old place is fine.
+          // The first place the name appeared is in the module
+          // where we want to declare it. Declare it right before that first use.
+          Preconditions.checkNotNull(firstNode, "Expected firstNode to be non-null");
+          Node parent = firstNode.getParent();
+          // If the parent is null, it means the node has already been detached
+          // perhaps by the processing of a duplicate definition.
+          // In this case, we should insert into the minimum module's script.
+          if (parent == null) {
              compiler.getNodeForCodeInsertion(minimumModule)
                 .addChildToBack(replacementNode);
           } else {
-            // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
-            parentName.replacementNode.getParent().addChildAfter(
-                replacementNode, parentName.replacementNode);
+             parent.addChildBefore(replacementNode, firstNode);
           }
+
+        } else {
+          // The name needs to be declared in a module that is an ancestor of
+          // the module where it first appeared (firstModule).
+          // This happens when a name is implicitly provided by provides
+          // in multiple modules.
+          // We insert the declaration at the end of the minimum module's script.
+          // This avoids ordering problems with parent namespace declarations.
+          compiler.getNodeForCodeInsertion(minimumModule)
+              .addChildToBack(replacementNode);
         }
-        if (explicitNode != null) {
+
+        // Remove the explicit goog.provide call if there was one and it hasn't
+        // been removed already.
+        if (explicitNode != null && explicitNode.getParent() != null) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
