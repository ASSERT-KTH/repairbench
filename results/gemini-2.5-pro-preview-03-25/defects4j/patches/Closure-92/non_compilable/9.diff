diff --git a/tmp/d001fef1-3a13-4f7f-b7fe-99ccd84cd2d5_buggy.java b/tmp/5a600d79-5b3d-4536-b384-a6a006ce179d_fixed.java
index 851ffc2..fcc64cc 100644
--- a/tmp/d001fef1-3a13-4f7f-b7fe-99ccd84cd2d5_buggy.java
+++ b/tmp/5a600d79-5b3d-4536-b384-a6a006ce179d_fixed.java
@@ -1,70 +1,127 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
-        if (NodeUtil.isExpressionNode(candidateDefinition)) {
+        // Ensure the definition becomes a declaration if it's suitable.
+        if (NodeUtil.isExpressionNode(candidateDefinition)
+            && candidateDefinition.getFirstChild().isAssign()) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
-          if (nameNode.getType() == Token.NAME) {
+          // Check if it's a simple assignment (NAME = VALUE)
+          if (nameNode.isName() && nameNode.getNext() != null) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
-            assignNode.removeChild(nameNode);
-            assignNode.removeChild(valueNode);
+            // Detach children from ASSIGN
+            assignNode.detachChildren();
+            // Prepare NAME node for VAR
             nameNode.addChildToFront(valueNode);
+
+            // Create VAR node
             Node varNode = new Node(Token.VAR, nameNode);
             varNode.copyInformationFrom(candidateDefinition);
-            candidateDefinition.getParent().replaceChild(
-                candidateDefinition, varNode);
+            varNode.setJSDocInfo(candidateDefinition.getJSDocInfo());
+            if (assignNode.getJSDocInfo() != null) {
+               // Prefer JSDoc info from the original assignment if available
                nameNode.setJSDocInfo(assignNode.getJSDocInfo());
+            }
+
+            // Replace the original expression statement with the VAR node
+            Node parent = candidateDefinition.getParent();
+            if (parent != null) { // Parent might be null if already detached
+              parent.replaceChild(candidateDefinition, varNode);
               compiler.reportCodeChange();
               replacementNode = varNode;
+            } else {
+              // If parent is null, candidateDefinition might have been detached
+              // elsewhere. We've created the varNode, make it the replacement.
+              replacementNode = varNode;
+              // It needs to be inserted somewhere, ProcessClosurePrimitives should handle this.
+            }
           }
         }
       } else {
         // Handle the case where there's not a duplicate definition.
-        replacementNode = createDeclarationNode();
-        if (firstModule == minimumModule) {
-          firstNode.getParent().addChildBefore(replacementNode, firstNode);
+        replacementNode = createDeclarationNode(); // Generates VAR or EXPR_RESULT
+
+        // Determine insertion point in minimumModule.
+        Node insertAfterNode = null;
+
+        // Find the longest ancestor namespace that has been replaced.
+        ProvidedName parentName = null;
+        Node parentReplacementNode = null;
+        String currentNamespace = namespace;
+        int p = currentNamespace.lastIndexOf('.');
+        while (p != -1) {
+          String parentNamespace = currentNamespace.substring(0, p);
+          parentName = providedNames.get(parentNamespace);
+          if (parentName != null && parentName.replacementNode != null) {
+            parentReplacementNode = parentName.replacementNode;
+            // Ensure the parent's replacement is in the minimum module's AST.
+            // We assume ProcessClosurePrimitives places replacementNodes correctly.
+            break; // Found the closest ancestor that has been replaced.
+          }
+          // If not found, try the next level up.
+          p = parentNamespace.lastIndexOf('.');
+        }
+
+        if (parentReplacementNode != null) {
+          // Find the statement containing the parent's replacement node.
+          Node parentStatement = parentReplacementNode;
+          // Walk up the AST until we find the node directly under a BLOCK/SCRIPT.
+          while (parentStatement.getParent() != null &&
+                 !parentStatement.getParent().isScript() &&
+                 !parentStatement.getParent().isBlock()) {
+            parentStatement = parentStatement.getParent();
+          }
+
+          // Ensure we found a valid statement node that has a parent block/script.
+          if (parentStatement.getParent() != null &&
+              (parentStatement.getParent().isScript() || parentStatement.getParent().isBlock())) {
+             insertAfterNode = parentStatement;
+          }
+        }
+
+        // Insert the new node into minimumModule.
+        if (insertAfterNode != null) {
+          // Insert after the parent's statement node.
+          insertAfterNode.getParent().addChildAfter(replacementNode, insertAfterNode);
         } else {
-          // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
-          int indexOfDot = namespace.indexOf('.');
-          if (indexOfDot == -1) {
-            // Any old place is fine.
+          // Parent statement wasn't found or this is a root namespace.
+          // Insert at the beginning/end of the minimum module script.
+          // Using addChildToBack is generally safer for initialization order.
           compiler.getNodeForCodeInsertion(minimumModule)
               .addChildToBack(replacementNode);
-          } else {
-            // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
-            parentName.replacementNode.getParent().addChildAfter(
-                replacementNode, parentName.replacementNode);
-          }
         }
+
+        // If there was an explicit definition for this name (e.g., var ns = {}),
+        // remove it now, as it's been superseded by the declaration we just added.
         if (explicitNode != null) {
+          // Check parent, as it might have already been detached if explicitNode was involved
+          // in the candidateDefinition logic (though this 'else' block implies it wasn't used).
+          if (explicitNode.getParent() != null) {
               explicitNode.detachFromParent();
           }
+        }
+        // Report the change after insertion/removal.
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
